   1               		.file	"ServerLLDN.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__RAMPZ__ = 0x3b
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
   8               		.text
   9               	.Ltext0:
  10               		.cfi_sections	.debug_frame
  11               		.comm	n,1,1
  12               		.section	.bss.tTS,"aw",@nobits
  15               	tTS:
  16 0000 0000 0000 		.zero	4
  17               		.text
  19               	sysclk_get_main_hz:
  20               	.LFB67:
  21               		.file 1 "../../../platform/common/services/clock/mega/sysclk.h"
   1:../../../platform/common/services/clock/mega/sysclk.h **** /**
   2:../../../platform/common/services/clock/mega/sysclk.h ****  * \file
   3:../../../platform/common/services/clock/mega/sysclk.h ****  *
   4:../../../platform/common/services/clock/mega/sysclk.h ****  * \brief Chip-specific system clock management functions
   5:../../../platform/common/services/clock/mega/sysclk.h ****  *
   6:../../../platform/common/services/clock/mega/sysclk.h ****  * Copyright (c) 2012 Atmel Corporation. All rights reserved.
   7:../../../platform/common/services/clock/mega/sysclk.h ****  *
   8:../../../platform/common/services/clock/mega/sysclk.h ****  * \asf_license_start
   9:../../../platform/common/services/clock/mega/sysclk.h ****  *
  10:../../../platform/common/services/clock/mega/sysclk.h ****  * \page License
  11:../../../platform/common/services/clock/mega/sysclk.h ****  *
  12:../../../platform/common/services/clock/mega/sysclk.h ****  * Redistribution and use in source and binary forms, with or without
  13:../../../platform/common/services/clock/mega/sysclk.h ****  * modification, are permitted provided that the following conditions are met:
  14:../../../platform/common/services/clock/mega/sysclk.h ****  *
  15:../../../platform/common/services/clock/mega/sysclk.h ****  * 1. Redistributions of source code must retain the above copyright notice,
  16:../../../platform/common/services/clock/mega/sysclk.h ****  *    this list of conditions and the following disclaimer.
  17:../../../platform/common/services/clock/mega/sysclk.h ****  *
  18:../../../platform/common/services/clock/mega/sysclk.h ****  * 2. Redistributions in binary form must reproduce the above copyright notice,
  19:../../../platform/common/services/clock/mega/sysclk.h ****  *    this list of conditions and the following disclaimer in the documentation
  20:../../../platform/common/services/clock/mega/sysclk.h ****  *    and/or other materials provided with the distribution.
  21:../../../platform/common/services/clock/mega/sysclk.h ****  *
  22:../../../platform/common/services/clock/mega/sysclk.h ****  * 3. The name of Atmel may not be used to endorse or promote products derived
  23:../../../platform/common/services/clock/mega/sysclk.h ****  *    from this software without specific prior written permission.
  24:../../../platform/common/services/clock/mega/sysclk.h ****  *
  25:../../../platform/common/services/clock/mega/sysclk.h ****  * 4. This software may only be redistributed and used in connection with an
  26:../../../platform/common/services/clock/mega/sysclk.h ****  *    Atmel microcontroller product.
  27:../../../platform/common/services/clock/mega/sysclk.h ****  *
  28:../../../platform/common/services/clock/mega/sysclk.h ****  * THIS SOFTWARE IS PROVIDED BY ATMEL "AS IS" AND ANY EXPRESS OR IMPLIED
  29:../../../platform/common/services/clock/mega/sysclk.h ****  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
  30:../../../platform/common/services/clock/mega/sysclk.h ****  * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE
  31:../../../platform/common/services/clock/mega/sysclk.h ****  * EXPRESSLY AND SPECIFICALLY DISCLAIMED. IN NO EVENT SHALL ATMEL BE LIABLE FOR
  32:../../../platform/common/services/clock/mega/sysclk.h ****  * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  33:../../../platform/common/services/clock/mega/sysclk.h ****  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
  34:../../../platform/common/services/clock/mega/sysclk.h ****  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
  35:../../../platform/common/services/clock/mega/sysclk.h ****  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
  36:../../../platform/common/services/clock/mega/sysclk.h ****  * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
  37:../../../platform/common/services/clock/mega/sysclk.h ****  * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  38:../../../platform/common/services/clock/mega/sysclk.h ****  * POSSIBILITY OF SUCH DAMAGE.
  39:../../../platform/common/services/clock/mega/sysclk.h ****  *
  40:../../../platform/common/services/clock/mega/sysclk.h ****  * \asf_license_stop
  41:../../../platform/common/services/clock/mega/sysclk.h ****  *
  42:../../../platform/common/services/clock/mega/sysclk.h ****  */
  43:../../../platform/common/services/clock/mega/sysclk.h **** #ifndef MEGA_SYSCLK_H_INCLUDED
  44:../../../platform/common/services/clock/mega/sysclk.h **** #define MEGA_SYSCLK_H_INCLUDED
  45:../../../platform/common/services/clock/mega/sysclk.h **** 
  46:../../../platform/common/services/clock/mega/sysclk.h **** #include <board.h>
  47:../../../platform/common/services/clock/mega/sysclk.h **** #include <compiler.h>
  48:../../../platform/common/services/clock/mega/sysclk.h **** #include <parts.h>
  49:../../../platform/common/services/clock/mega/sysclk.h **** 
  50:../../../platform/common/services/clock/mega/sysclk.h **** /* Include clock configuration for the project. */
  51:../../../platform/common/services/clock/mega/sysclk.h **** #include <conf_clock.h>
  52:../../../platform/common/services/clock/mega/sysclk.h **** 
  53:../../../platform/common/services/clock/mega/sysclk.h **** #ifdef __cplusplus
  54:../../../platform/common/services/clock/mega/sysclk.h **** extern "C" {
  55:../../../platform/common/services/clock/mega/sysclk.h **** #endif
  56:../../../platform/common/services/clock/mega/sysclk.h **** #define ASM __asm__
  57:../../../platform/common/services/clock/mega/sysclk.h **** 
  58:../../../platform/common/services/clock/mega/sysclk.h **** /* CONFIG_SYSCLK_PSDIV  to use default if not defined*/
  59:../../../platform/common/services/clock/mega/sysclk.h **** #ifndef CONFIG_SYSCLK_PSDIV
  60:../../../platform/common/services/clock/mega/sysclk.h **** # define CONFIG_SYSCLK_PSDIV    SYSCLK_PSDIV_8
  61:../../../platform/common/services/clock/mega/sysclk.h **** #endif
  62:../../../platform/common/services/clock/mega/sysclk.h **** 
  63:../../../platform/common/services/clock/mega/sysclk.h **** /* ! \name Prescaler Setting (relative to CLKsys) */
  64:../../../platform/common/services/clock/mega/sysclk.h **** /* @{ */
  65:../../../platform/common/services/clock/mega/sysclk.h **** #define SYSCLK_PSDIV_1      0   /* !< Do not prescale */
  66:../../../platform/common/services/clock/mega/sysclk.h **** #define SYSCLK_PSDIV_2      1   /* !< Prescale CLKper4 by 2 */
  67:../../../platform/common/services/clock/mega/sysclk.h **** #define SYSCLK_PSDIV_4      2   /* !< Prescale CLKper4 by 4 */
  68:../../../platform/common/services/clock/mega/sysclk.h **** #define SYSCLK_PSDIV_8      3   /* !< Prescale CLKper4 by 8 */
  69:../../../platform/common/services/clock/mega/sysclk.h **** #define SYSCLK_PSDIV_16     4   /* !< Prescale CLKper4 by 16 */
  70:../../../platform/common/services/clock/mega/sysclk.h **** #define SYSCLK_PSDIV_32     5   /* !< Prescale CLKper4 by 32 */
  71:../../../platform/common/services/clock/mega/sysclk.h **** #define SYSCLK_PSDIV_64     6   /* !< Prescale CLKper4 by 64 */
  72:../../../platform/common/services/clock/mega/sysclk.h **** #define SYSCLK_PSDIV_128    7   /* !< Prescale CLKper4 by 128 */
  73:../../../platform/common/services/clock/mega/sysclk.h **** #define SYSCLK_PSDIV_256    8   /* !< Prescale CLKper4 by 256 */
  74:../../../platform/common/services/clock/mega/sysclk.h **** 
  75:../../../platform/common/services/clock/mega/sysclk.h **** /* @} */
  76:../../../platform/common/services/clock/mega/sysclk.h **** 
  77:../../../platform/common/services/clock/mega/sysclk.h **** #if MEGA_RF || MEGA_XX0_1 || MEGA_XX4 || MEGA_XX4_A
  78:../../../platform/common/services/clock/mega/sysclk.h **** 
  79:../../../platform/common/services/clock/mega/sysclk.h **** #define NUMBER_OF_POWER_REG       2
  80:../../../platform/common/services/clock/mega/sysclk.h **** /*Starting Address for power reduction*/
  81:../../../platform/common/services/clock/mega/sysclk.h **** #define POWER_REG_ADD             PRR0
  82:../../../platform/common/services/clock/mega/sysclk.h **** 
  83:../../../platform/common/services/clock/mega/sysclk.h **** /* ! \name Power Reduction  Clock Port Numbers */
  84:../../../platform/common/services/clock/mega/sysclk.h **** enum power_red_id {
  85:../../../platform/common/services/clock/mega/sysclk.h **** 	POWER_RED_REG0,     /* !< Devices on PRR0 */
  86:../../../platform/common/services/clock/mega/sysclk.h **** #if !MEGA_XX4 || !MEGA_XX4_A || MEGA_XX0_1
  87:../../../platform/common/services/clock/mega/sysclk.h **** 	POWER_RED_REG1,     /* !< Devices on PRR1 */
  88:../../../platform/common/services/clock/mega/sysclk.h **** #endif
  89:../../../platform/common/services/clock/mega/sysclk.h **** };
  90:../../../platform/common/services/clock/mega/sysclk.h **** #endif
  91:../../../platform/common/services/clock/mega/sysclk.h **** 
  92:../../../platform/common/services/clock/mega/sysclk.h **** /****************************************************
  93:../../../platform/common/services/clock/mega/sysclk.h ****  * Given a dummy type but not used for these groups
  94:../../../platform/common/services/clock/mega/sysclk.h ****  * to support for otherthen megaRF device.
  95:../../../platform/common/services/clock/mega/sysclk.h ****  **************************************************/
  96:../../../platform/common/services/clock/mega/sysclk.h **** #if MEGA_XX8 || MEGA_XX8_A || MEGA_UNSPECIFIED
  97:../../../platform/common/services/clock/mega/sysclk.h **** #define NUMBER_OF_POWER_REG       1
  98:../../../platform/common/services/clock/mega/sysclk.h **** /*Starting Address for power reduction*/
  99:../../../platform/common/services/clock/mega/sysclk.h **** #define POWER_REG_ADD             PRR
 100:../../../platform/common/services/clock/mega/sysclk.h **** 
 101:../../../platform/common/services/clock/mega/sysclk.h **** /* ! \name Power Reduction  Clock Port Numbers */
 102:../../../platform/common/services/clock/mega/sysclk.h **** enum power_red_id {
 103:../../../platform/common/services/clock/mega/sysclk.h **** 	POWER_RED_REG0,     /* !< Devices on PRR */
 104:../../../platform/common/services/clock/mega/sysclk.h **** };
 105:../../../platform/common/services/clock/mega/sysclk.h **** #endif
 106:../../../platform/common/services/clock/mega/sysclk.h **** 
 107:../../../platform/common/services/clock/mega/sysclk.h **** /* Bit mask for the power reduction register based on */
 108:../../../platform/common/services/clock/mega/sysclk.h **** /*   MCU ARCH.                                        */
 109:../../../platform/common/services/clock/mega/sysclk.h **** #if MEGA_RF
 110:../../../platform/common/services/clock/mega/sysclk.h **** /*Bit mask for PRR2 */
 111:../../../platform/common/services/clock/mega/sysclk.h **** 
 112:../../../platform/common/services/clock/mega/sysclk.h **** #define PRRAM0_bm                       1 << PRRAM0
 113:../../../platform/common/services/clock/mega/sysclk.h **** #define PRRAM1_bm                       1 << PRRAM1
 114:../../../platform/common/services/clock/mega/sysclk.h **** #define PRRAM2_bm                       1 << PRRAM2
 115:../../../platform/common/services/clock/mega/sysclk.h **** #define PRRAM3_bm                       1 << PRRAM3
 116:../../../platform/common/services/clock/mega/sysclk.h **** #endif
 117:../../../platform/common/services/clock/mega/sysclk.h **** 
 118:../../../platform/common/services/clock/mega/sysclk.h **** /*Bit mask for the power reduction 0 or PRR*/
 119:../../../platform/common/services/clock/mega/sysclk.h **** #if !MEGA_XX_UN0 && !MEGA_XX_UN0
 120:../../../platform/common/services/clock/mega/sysclk.h **** #define PRADC_bm                        1 << PRADC
 121:../../../platform/common/services/clock/mega/sysclk.h **** #define PRUSART0_bm                     1 << PRUSART0
 122:../../../platform/common/services/clock/mega/sysclk.h **** #define PRSPI_bm                        1 << PRSPI
 123:../../../platform/common/services/clock/mega/sysclk.h **** #define PRTIM1_bm                       1 << PRTIM1
 124:../../../platform/common/services/clock/mega/sysclk.h **** #endif
 125:../../../platform/common/services/clock/mega/sysclk.h **** 
 126:../../../platform/common/services/clock/mega/sysclk.h **** #if MEGA_RF
 127:../../../platform/common/services/clock/mega/sysclk.h **** #define PRPGA_bm                        1 << PRPGA
 128:../../../platform/common/services/clock/mega/sysclk.h **** #endif
 129:../../../platform/common/services/clock/mega/sysclk.h **** 
 130:../../../platform/common/services/clock/mega/sysclk.h **** #if !MEGA_UNSPECIFIED
 131:../../../platform/common/services/clock/mega/sysclk.h **** #define PRTIM0_bm                       1 << PRTIM0
 132:../../../platform/common/services/clock/mega/sysclk.h **** #define PRTIM2_bm                       1 << PRTIM2
 133:../../../platform/common/services/clock/mega/sysclk.h **** #define PRTWI_bm                        1 << PRTWI
 134:../../../platform/common/services/clock/mega/sysclk.h **** #endif
 135:../../../platform/common/services/clock/mega/sysclk.h **** 
 136:../../../platform/common/services/clock/mega/sysclk.h **** #if MEGA_XX_UN2
 137:../../../platform/common/services/clock/mega/sysclk.h **** #define PRLCD_bm                        1 << PRLCD
 138:../../../platform/common/services/clock/mega/sysclk.h **** #endif
 139:../../../platform/common/services/clock/mega/sysclk.h **** 
 140:../../../platform/common/services/clock/mega/sysclk.h **** /*Bit mask for  PRR1  */
 141:../../../platform/common/services/clock/mega/sysclk.h **** #ifdef PRR1
 142:../../../platform/common/services/clock/mega/sysclk.h **** #if (MEGA_XX4 || MEGA_XX4_A)
 143:../../../platform/common/services/clock/mega/sysclk.h **** #define PRTIM3_bm                       1 << PRTIM3
 144:../../../platform/common/services/clock/mega/sysclk.h **** #endif
 145:../../../platform/common/services/clock/mega/sysclk.h **** #endif
 146:../../../platform/common/services/clock/mega/sysclk.h **** 
 147:../../../platform/common/services/clock/mega/sysclk.h **** #if MEGA_RF || MEGA_XX4 || MEGA_XX4_A
 148:../../../platform/common/services/clock/mega/sysclk.h **** #define PRUSART1_bm                     1 << PRUSART1
 149:../../../platform/common/services/clock/mega/sysclk.h **** #define PRUSART2_bm                     1 << PRUSART2
 150:../../../platform/common/services/clock/mega/sysclk.h **** #define PRUSART3_bm                     1 << PRUSART3
 151:../../../platform/common/services/clock/mega/sysclk.h **** #define PRTIM3_bm                       1 << PRTIM3
 152:../../../platform/common/services/clock/mega/sysclk.h **** #define PRTIM4_bm                       1 << PRTIM4
 153:../../../platform/common/services/clock/mega/sysclk.h **** #define PRTIM5_bm                       1 << PRTIM5
 154:../../../platform/common/services/clock/mega/sysclk.h **** #endif
 155:../../../platform/common/services/clock/mega/sysclk.h **** 
 156:../../../platform/common/services/clock/mega/sysclk.h **** #if MEGA_RF
 157:../../../platform/common/services/clock/mega/sysclk.h **** #define PRTRX24_bm                      1 << PRTRX24
 158:../../../platform/common/services/clock/mega/sysclk.h **** #endif
 159:../../../platform/common/services/clock/mega/sysclk.h **** 
 160:../../../platform/common/services/clock/mega/sysclk.h **** /**
 161:../../../platform/common/services/clock/mega/sysclk.h ****  * \name Querying the system clock and its derived clocks
 162:../../../platform/common/services/clock/mega/sysclk.h ****  */
 163:../../../platform/common/services/clock/mega/sysclk.h **** /* @{ */
 164:../../../platform/common/services/clock/mega/sysclk.h **** 
 165:../../../platform/common/services/clock/mega/sysclk.h **** /**
 166:../../../platform/common/services/clock/mega/sysclk.h ****  * \brief Return the current rate in Hz of the main system clock
 167:../../../platform/common/services/clock/mega/sysclk.h ****  * To know the clock value at what frequency the main clock is running
 168:../../../platform/common/services/clock/mega/sysclk.h ****  * \return Frequency of the main system clock, in Hz.
 169:../../../platform/common/services/clock/mega/sysclk.h ****  * \todo : please initialize the SYSCLK_SOURCE in conf_clock.h file for
 170:../../../platform/common/services/clock/mega/sysclk.h ****  * configured source clock using fuses.
 171:../../../platform/common/services/clock/mega/sysclk.h ****  * \eg. #define SYSCLK_SOURCE SYSCLK_SRC_RC16MHZ to use internal RC
 172:../../../platform/common/services/clock/mega/sysclk.h ****  * oscillator for clock source.
 173:../../../platform/common/services/clock/mega/sysclk.h ****  */
 174:../../../platform/common/services/clock/mega/sysclk.h **** static inline uint32_t sysclk_get_main_hz(void)
 175:../../../platform/common/services/clock/mega/sysclk.h **** {
  22               		.loc 1 175 0
  23               		.cfi_startproc
  24 0000 CF93      		push r28
  25               	.LCFI0:
  26               		.cfi_def_cfa_offset 3
  27               		.cfi_offset 28, -2
  28 0002 DF93      		push r29
  29               	.LCFI1:
  30               		.cfi_def_cfa_offset 4
  31               		.cfi_offset 29, -3
  32 0004 CDB7      		in r28,__SP_L__
  33 0006 DEB7      		in r29,__SP_H__
  34               	.LCFI2:
  35               		.cfi_def_cfa_register 28
  36               	/* prologue: function */
  37               	/* frame size = 0 */
  38               	/* stack size = 2 */
  39               	.L__stack_usage = 2
 176:../../../platform/common/services/clock/mega/sysclk.h **** 	switch (SYSCLK_SOURCE) {
 177:../../../platform/common/services/clock/mega/sysclk.h **** 	case SYSCLK_SRC_RC16MHZ:
 178:../../../platform/common/services/clock/mega/sysclk.h **** 		return 16000000UL;
 179:../../../platform/common/services/clock/mega/sysclk.h **** 
 180:../../../platform/common/services/clock/mega/sysclk.h **** 	case SYSCLK_SRC_RC128KHZ:
 181:../../../platform/common/services/clock/mega/sysclk.h **** 		return 128000UL;
 182:../../../platform/common/services/clock/mega/sysclk.h **** 
 183:../../../platform/common/services/clock/mega/sysclk.h **** #if MEGA_RF
 184:../../../platform/common/services/clock/mega/sysclk.h **** 	case SYSCLK_SRC_TRS16MHZ:
 185:../../../platform/common/services/clock/mega/sysclk.h **** 		return 16000000UL;
  40               		.loc 1 185 0
  41 0008 80E0      		ldi r24,0
  42 000a 94E2      		ldi r25,lo8(36)
  43 000c A4EF      		ldi r26,lo8(-12)
  44 000e B0E0      		ldi r27,0
 186:../../../platform/common/services/clock/mega/sysclk.h **** #endif
 187:../../../platform/common/services/clock/mega/sysclk.h **** #ifdef BOARD_EXTERNAL_CLK
 188:../../../platform/common/services/clock/mega/sysclk.h **** 	case SYSCLK_SRC_EXTERNAL:
 189:../../../platform/common/services/clock/mega/sysclk.h **** 		return BOARD_EXTERNAL_CLK;
 190:../../../platform/common/services/clock/mega/sysclk.h **** #endif
 191:../../../platform/common/services/clock/mega/sysclk.h **** 	default:
 192:../../../platform/common/services/clock/mega/sysclk.h **** 
 193:../../../platform/common/services/clock/mega/sysclk.h **** 		return 1000000UL;
 194:../../../platform/common/services/clock/mega/sysclk.h **** 	}
 195:../../../platform/common/services/clock/mega/sysclk.h **** }
  45               		.loc 1 195 0
  46 0010 BC01      		movw r22,r24
  47 0012 CD01      		movw r24,r26
  48               	/* epilogue start */
  49 0014 DF91      		pop r29
  50 0016 CF91      		pop r28
  51 0018 0895      		ret
  52               		.cfi_endproc
  53               	.LFE67:
  56               	sysclk_get_source_clock_hz:
  57               	.LFB68:
 196:../../../platform/common/services/clock/mega/sysclk.h **** 
 197:../../../platform/common/services/clock/mega/sysclk.h **** /**
 198:../../../platform/common/services/clock/mega/sysclk.h ****  * \brief Return the current rate in Hz of source clock in Hz.
 199:../../../platform/common/services/clock/mega/sysclk.h ****  *
 200:../../../platform/common/services/clock/mega/sysclk.h ****  * This clock always runs at the same rate as the CPU clock unless the divider
 201:../../../platform/common/services/clock/mega/sysclk.h ****  * is set.
 202:../../../platform/common/services/clock/mega/sysclk.h ****  *
 203:../../../platform/common/services/clock/mega/sysclk.h ****  * \return Frequency of the system clock, in Hz.
 204:../../../platform/common/services/clock/mega/sysclk.h ****  */
 205:../../../platform/common/services/clock/mega/sysclk.h **** static inline uint32_t sysclk_get_source_clock_hz(void)
 206:../../../platform/common/services/clock/mega/sysclk.h **** {
  58               		.loc 1 206 0
  59               		.cfi_startproc
  60 001a CF93      		push r28
  61               	.LCFI3:
  62               		.cfi_def_cfa_offset 3
  63               		.cfi_offset 28, -2
  64 001c DF93      		push r29
  65               	.LCFI4:
  66               		.cfi_def_cfa_offset 4
  67               		.cfi_offset 29, -3
  68 001e CDB7      		in r28,__SP_L__
  69 0020 DEB7      		in r29,__SP_H__
  70               	.LCFI5:
  71               		.cfi_def_cfa_register 28
  72               	/* prologue: function */
  73               	/* frame size = 0 */
  74               	/* stack size = 2 */
  75               	.L__stack_usage = 2
 207:../../../platform/common/services/clock/mega/sysclk.h **** 	switch (CONFIG_SYSCLK_PSDIV) {
 208:../../../platform/common/services/clock/mega/sysclk.h **** 	case SYSCLK_PSDIV_1: /* Fall through */
 209:../../../platform/common/services/clock/mega/sysclk.h **** 		if (SYSCLK_SOURCE == SYSCLK_SRC_RC16MHZ ||
 210:../../../platform/common/services/clock/mega/sysclk.h **** 				SYSCLK_SOURCE == SYSCLK_SRC_RC128KHZ) {
 211:../../../platform/common/services/clock/mega/sysclk.h **** 			return sysclk_get_main_hz() / 2;
 212:../../../platform/common/services/clock/mega/sysclk.h **** 		} else {
 213:../../../platform/common/services/clock/mega/sysclk.h **** 			return sysclk_get_main_hz();
  76               		.loc 1 213 0
  77 0022 0E94 0000 		call sysclk_get_main_hz
  78 0026 DC01      		movw r26,r24
  79 0028 CB01      		movw r24,r22
 214:../../../platform/common/services/clock/mega/sysclk.h **** 		}
 215:../../../platform/common/services/clock/mega/sysclk.h **** 
 216:../../../platform/common/services/clock/mega/sysclk.h **** 	case SYSCLK_PSDIV_2:
 217:../../../platform/common/services/clock/mega/sysclk.h **** 		if (SYSCLK_SOURCE == SYSCLK_SRC_RC16MHZ ||
 218:../../../platform/common/services/clock/mega/sysclk.h **** 				SYSCLK_SOURCE == SYSCLK_SRC_RC128KHZ) {
 219:../../../platform/common/services/clock/mega/sysclk.h **** 			return sysclk_get_main_hz() / 4;
 220:../../../platform/common/services/clock/mega/sysclk.h **** 		} else {
 221:../../../platform/common/services/clock/mega/sysclk.h **** 			return sysclk_get_main_hz() / 2;
 222:../../../platform/common/services/clock/mega/sysclk.h **** 		}
 223:../../../platform/common/services/clock/mega/sysclk.h **** 
 224:../../../platform/common/services/clock/mega/sysclk.h **** 	case SYSCLK_PSDIV_4:
 225:../../../platform/common/services/clock/mega/sysclk.h **** 		if (SYSCLK_SOURCE == SYSCLK_SRC_RC16MHZ ||
 226:../../../platform/common/services/clock/mega/sysclk.h **** 				SYSCLK_SOURCE == SYSCLK_SRC_RC128KHZ) {
 227:../../../platform/common/services/clock/mega/sysclk.h **** 			return sysclk_get_main_hz() / 8;
 228:../../../platform/common/services/clock/mega/sysclk.h **** 		} else {
 229:../../../platform/common/services/clock/mega/sysclk.h **** 			return sysclk_get_main_hz() / 4;
 230:../../../platform/common/services/clock/mega/sysclk.h **** 		}
 231:../../../platform/common/services/clock/mega/sysclk.h **** 
 232:../../../platform/common/services/clock/mega/sysclk.h **** 	case SYSCLK_PSDIV_8:
 233:../../../platform/common/services/clock/mega/sysclk.h **** 		if (SYSCLK_SOURCE == SYSCLK_SRC_RC16MHZ ||
 234:../../../platform/common/services/clock/mega/sysclk.h **** 				SYSCLK_SOURCE == SYSCLK_SRC_RC128KHZ) {
 235:../../../platform/common/services/clock/mega/sysclk.h **** 			return sysclk_get_main_hz() / 16;
 236:../../../platform/common/services/clock/mega/sysclk.h **** 		} else {
 237:../../../platform/common/services/clock/mega/sysclk.h **** 			return sysclk_get_main_hz() / 8;
 238:../../../platform/common/services/clock/mega/sysclk.h **** 		}
 239:../../../platform/common/services/clock/mega/sysclk.h **** 
 240:../../../platform/common/services/clock/mega/sysclk.h **** 	case SYSCLK_PSDIV_16:
 241:../../../platform/common/services/clock/mega/sysclk.h **** 		if (SYSCLK_SOURCE == SYSCLK_SRC_RC16MHZ ||
 242:../../../platform/common/services/clock/mega/sysclk.h **** 				SYSCLK_SOURCE == SYSCLK_SRC_RC128KHZ) {
 243:../../../platform/common/services/clock/mega/sysclk.h **** 			return sysclk_get_main_hz() / 32;
 244:../../../platform/common/services/clock/mega/sysclk.h **** 		} else {
 245:../../../platform/common/services/clock/mega/sysclk.h **** 			return sysclk_get_main_hz() / 16;
 246:../../../platform/common/services/clock/mega/sysclk.h **** 		}
 247:../../../platform/common/services/clock/mega/sysclk.h **** 
 248:../../../platform/common/services/clock/mega/sysclk.h **** 	case SYSCLK_PSDIV_32:
 249:../../../platform/common/services/clock/mega/sysclk.h **** 		if (SYSCLK_SOURCE == SYSCLK_SRC_RC16MHZ ||
 250:../../../platform/common/services/clock/mega/sysclk.h **** 				SYSCLK_SOURCE == SYSCLK_SRC_RC128KHZ) {
 251:../../../platform/common/services/clock/mega/sysclk.h **** 			return sysclk_get_main_hz() / 64;
 252:../../../platform/common/services/clock/mega/sysclk.h **** 		} else {
 253:../../../platform/common/services/clock/mega/sysclk.h **** 			return sysclk_get_main_hz() / 32;
 254:../../../platform/common/services/clock/mega/sysclk.h **** 		}
 255:../../../platform/common/services/clock/mega/sysclk.h **** 
 256:../../../platform/common/services/clock/mega/sysclk.h **** 	case SYSCLK_PSDIV_64:
 257:../../../platform/common/services/clock/mega/sysclk.h **** 		if (SYSCLK_SOURCE == SYSCLK_SRC_RC16MHZ ||
 258:../../../platform/common/services/clock/mega/sysclk.h **** 				SYSCLK_SOURCE == SYSCLK_SRC_RC128KHZ) {
 259:../../../platform/common/services/clock/mega/sysclk.h **** 			return sysclk_get_main_hz() / 128;
 260:../../../platform/common/services/clock/mega/sysclk.h **** 		} else {
 261:../../../platform/common/services/clock/mega/sysclk.h **** 			return sysclk_get_main_hz() / 64;
 262:../../../platform/common/services/clock/mega/sysclk.h **** 		}
 263:../../../platform/common/services/clock/mega/sysclk.h **** 
 264:../../../platform/common/services/clock/mega/sysclk.h **** 	case SYSCLK_PSDIV_128:
 265:../../../platform/common/services/clock/mega/sysclk.h **** 		if (SYSCLK_SOURCE == SYSCLK_SRC_RC16MHZ ||
 266:../../../platform/common/services/clock/mega/sysclk.h **** 				SYSCLK_SOURCE == SYSCLK_SRC_RC128KHZ) {
 267:../../../platform/common/services/clock/mega/sysclk.h **** 			return sysclk_get_main_hz() / 256;
 268:../../../platform/common/services/clock/mega/sysclk.h **** 		} else {
 269:../../../platform/common/services/clock/mega/sysclk.h **** 			return sysclk_get_main_hz() / 128;
 270:../../../platform/common/services/clock/mega/sysclk.h **** 		}
 271:../../../platform/common/services/clock/mega/sysclk.h **** 
 272:../../../platform/common/services/clock/mega/sysclk.h **** 	case SYSCLK_PSDIV_256:
 273:../../../platform/common/services/clock/mega/sysclk.h **** 		if (SYSCLK_SOURCE == SYSCLK_SRC_RC16MHZ ||
 274:../../../platform/common/services/clock/mega/sysclk.h **** 				SYSCLK_SOURCE == SYSCLK_SRC_RC128KHZ) {
 275:../../../platform/common/services/clock/mega/sysclk.h **** 			return sysclk_get_main_hz() / 512;
 276:../../../platform/common/services/clock/mega/sysclk.h **** 		} else {
 277:../../../platform/common/services/clock/mega/sysclk.h **** 			return sysclk_get_main_hz() / 256;
 278:../../../platform/common/services/clock/mega/sysclk.h **** 		}
 279:../../../platform/common/services/clock/mega/sysclk.h **** 
 280:../../../platform/common/services/clock/mega/sysclk.h **** 	default:
 281:../../../platform/common/services/clock/mega/sysclk.h **** 		/*Invalide case*/
 282:../../../platform/common/services/clock/mega/sysclk.h **** 		return 0;
 283:../../../platform/common/services/clock/mega/sysclk.h **** 	}
 284:../../../platform/common/services/clock/mega/sysclk.h **** }
  80               		.loc 1 284 0
  81 002a BC01      		movw r22,r24
  82 002c CD01      		movw r24,r26
  83               	/* epilogue start */
  84 002e DF91      		pop r29
  85 0030 CF91      		pop r28
  86 0032 0895      		ret
  87               		.cfi_endproc
  88               	.LFE68:
  90               		.section	.progmem.data.baudctrl_1mhz,"a",@progbits
  93               	baudctrl_1mhz:
  94 0000 3300      		.word	51
  95 0002 1900      		.word	25
  96 0004 0C00      		.word	12
  97 0006 0600      		.word	6
  98 0008 0300      		.word	3
  99 000a 0200      		.word	2
 100 000c 0100      		.word	1
 101 000e FF00      		.word	255
 102               		.section	.progmem.data.baudctrl_8mhz,"a",@progbits
 105               	baudctrl_8mhz:
 106 0000 A001      		.word	416
 107 0002 CF00      		.word	207
 108 0004 6700      		.word	103
 109 0006 3300      		.word	51
 110 0008 1900      		.word	25
 111 000a 0C00      		.word	12
 112 000c 0700      		.word	7
 113 000e 0800      		.word	8
 114               		.section	.progmem.data.baudctrl_16mhz,"a",@progbits
 117               	baudctrl_16mhz:
 118 0000 4003      		.word	832
 119 0002 A001      		.word	416
 120 0004 CF00      		.word	207
 121 0006 6700      		.word	103
 122 0008 3300      		.word	51
 123 000a 1900      		.word	25
 124 000c 1000      		.word	16
 125 000e 1000      		.word	16
 126               		.text
 128               	usart_double_baud_enable:
 129               	.LFB101:
 130               		.file 2 "../../../platform/mega_rf/drivers/usart/usart_megarf.h"
   1:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** /**
   2:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * \file
   3:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  *
   4:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * \brief USART driver for AVR MEGARF.
   5:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  *
   6:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * This file contains basic functions for the AVR MEGA USART, with support for
   7:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * all modes, settings and clock speeds.
   8:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  *
   9:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * Copyright (c) 2013-2015 Atmel Corporation. All rights reserved.
  10:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  *
  11:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * \asf_license_start
  12:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  *
  13:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * \page License
  14:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  *
  15:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * Redistribution and use in source and binary forms, with or without
  16:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * modification, are permitted provided that the following conditions are met:
  17:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  *
  18:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * 1. Redistributions of source code must retain the above copyright notice,
  19:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  *    this list of conditions and the following disclaimer.
  20:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  *
  21:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * 2. Redistributions in binary form must reproduce the above copyright notice,
  22:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  *    this list of conditions and the following disclaimer in the documentation
  23:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  *    and/or other materials provided with the distribution.
  24:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  *
  25:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * 3. The name of Atmel may not be used to endorse or promote products derived
  26:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  *    from this software without specific prior written permission.
  27:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  *
  28:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * 4. This software may only be redistributed and used in connection with an
  29:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  *    Atmel microcontroller product.
  30:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  *
  31:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * THIS SOFTWARE IS PROVIDED BY ATMEL "AS IS" AND ANY EXPRESS OR IMPLIED
  32:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
  33:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE
  34:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * EXPRESSLY AND SPECIFICALLY DISCLAIMED. IN NO EVENT SHALL ATMEL BE LIABLE FOR
  35:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  36:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
  37:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
  38:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
  39:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
  40:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  41:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * POSSIBILITY OF SUCH DAMAGE.
  42:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  *
  43:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * \asf_license_stop
  44:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  *
  45:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  */
  46:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #ifndef _USART_MEGARF_H_
  47:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define _USART_MEGARF_H_
  48:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
  49:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #ifdef __cplusplus
  50:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** extern "C" {
  51:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #endif
  52:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
  53:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #include "compiler.h"
  54:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #include "status_codes.h"
  55:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
  56:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** /**
  57:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * \defgroup megarf_usart_group USART module (USART)
  58:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  *
  59:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * See \ref megarf_usart_quickstart.
  60:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  *
  61:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * This is a driver for configuring, enabling, disabling and use of the on-chip
  62:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * USART.
  63:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  *
  64:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * \section dependencies Dependencies
  65:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  *
  66:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * The USART module depends on the following modules:
  67:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  *  - \ref sysclk_group for peripheral clock control.
  68:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  *  - \ref port_driver_group for peripheral io port control.
  69:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  *
  70:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * @{
  71:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  */
  72:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
  73:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** /* ! Offset in lookup table for baudrate 1200 */
  74:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_BAUD_1200      0x00
  75:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** /* ! Offset in lookup table for baudrate 2400 */
  76:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_BAUD_2400      0x01
  77:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** /* ! Offset in lookup table for baudrate 4800 */
  78:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_BAUD_4800      0x02
  79:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** /* ! Offset in lookup table for baudrate 9600 */
  80:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_BAUD_9600      0x03
  81:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** /* ! Offset in lookup table for baudrate 19200 */
  82:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_BAUD_19200     0x04
  83:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** /* ! Offset in lookup table for baudrate 38400 */
  84:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_BAUD_38400     0x05
  85:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** /* ! Offset in lookup table for baudrate 57600 */
  86:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_BAUD_57600     0x06
  87:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** /* ! Offset in lookup table for baudrate 115200 */
  88:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_BAUD_115200    0x07
  89:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** /* ! Baudrate not in lookup table */
  90:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_BAUD_UNDEFINED 0xFF
  91:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
  92:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** typedef volatile uint8_t register8_t;
  93:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** typedef volatile uint16_t register16_t;
  94:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** /* Universal Synchronous/Asynchronous Receiver/Transmitter */
  95:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** typedef struct USART_struct {
  96:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	register8_t UCSRnA;  /* Control Register A */
  97:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	register8_t UCSRnB;  /* Control Register B */
  98:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	register8_t UCSRnC;  /* Control Register C */
  99:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	register8_t reserved;
 100:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	register16_t UBRR;  /* Baud Rate Register Value */
 101:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	register8_t UDR;  /* I/O Data Register */
 102:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** } USART_t;
 103:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 104:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USARTA0    (*(USART_t *)0xC0)   /* Universal Asynchronous
 105:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	                                 * Receiver-Transmitter A0 */
 106:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USARTA1    (*(USART_t *)0XC8)   /* Universal Asynchronous
 107:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	                                 * Receiver-Transmitter A1 */
 108:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 109:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** /* USART.UCSRxA  bit masks and bit positions */
 110:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_RXC_bm  0x80 /* RX complete bit mask.*/
 111:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_RXC_bp  7 /* RX complete bit position.*/
 112:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 113:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_TXC_bm  0x40 /* TX complete bit mask.*/
 114:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_TXC_bp  6 /* TX complete bit position.*/
 115:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 116:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_DRE_bm  0x20 /* DATA Register Empty Bit mask.*/
 117:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_DRE_bp  5 /*  DATA Register Empty bit position.*/
 118:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 119:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_FE_bm   0x10 /* Frame Error bit mask.*/
 120:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_FE_bp   4 /*Frame error bit position.*/
 121:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 122:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_DOR_bm  0x08 /* Data Over Run bit mask.*/
 123:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_DOR_bp  3 /* Data Over Run bit position.*/
 124:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 125:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_UPE_bm  0x04 /* Parity error bit mask.*/
 126:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_UPE_bp  2 /* Parity error bit position.*/
 127:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 128:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_U2X_bm  0x02 /* Double TX speed bit mask.*/
 129:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_U2X_bp  1 /* Double TX speed bit position.*/
 130:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 131:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_MPCM_bm  0x01 /* Multi Processor bit mask.*/
 132:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_MPMC_bp  0 /* Multi processor bit position.*/
 133:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 134:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** /* USART.UCSRxB  bit masks and bit positions */
 135:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_RXCIE_bm  0x80 /* RX complete interrupt Enable bit mask.*/
 136:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_RXCIE_bp  7 /* RX complete interrupt Enable bit position.*/
 137:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 138:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_TXCIE_bm  0x40 /* TX complete interrupt Enable bit mask.*/
 139:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_TXCIE_bp  6 /* TX complete interrupt Enable bit position.*/
 140:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 141:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_DRIE_bm  0x20 /* Data register empty interrupt Enable bit mask.*/
 142:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_DRIE_bp  5 /* Data register empty interrupt Enable bit position.*/
 143:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 144:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_RXEN_bm  0x10  /* Receiver Enable bit mask. */
 145:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_RXEN_bp  4  /* Receiver Enable bit position. */
 146:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 147:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_TXEN_bm  0x08  /* Transmitter Enable bit mask. */
 148:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_TXEN_bp  3  /* Transmitter Enable bit position. */
 149:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 150:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_CHSIZE2_bm  0x04  /* Character Size bit mask. */
 151:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_CHSIZE2_bp  2 /* Character Size bit position. */
 152:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 153:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_RXB8_bm  0x02  /* Transmit bit 8 bit mask. */
 154:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_RXB8_bp  1  /* Transmit bit 8 bit position. */
 155:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 156:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_TXB8_bm  0x01  /* Transmit bit 8 bit mask. */
 157:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_TXB8_bp  0  /* Transmit bit 8 bit position. */
 158:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 159:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** /* USART.UCSRxC  bit masks and bit positions */
 160:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_UMSEL01_gm  0xC0 /* USART Mode Select 01 grp mask.*/
 161:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_UMSEL01_gp  6 /* USART Mode Select 01 grp position.*/
 162:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 163:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_UMSEL01_bm  0x80 /* USART Mode Select 01 bit mask.*/
 164:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_UMSEL01_bp  7 /* USART Mode Select 01 bit position.*/
 165:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 166:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_UMSEL00_bm  0x40 /* USART Mode Select 00 bit mask.*/
 167:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_UMSEL00_bp  6 /* USART Mode Select 00 bit position.*/
 168:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 169:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_PMODE_gm  0x30 /* USART Parity Mode Select grp mask.*/
 170:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_PMODE_gp  4 /* USART Parity Mode Select grp position.*/
 171:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 172:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_PMODE01_bm  0x20 /* USART Parity Mode Select 01 bit mask.*/
 173:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_PMODE01_bp  5 /* USART Parity Mode Select 01 bit position.*/
 174:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 175:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_PMODE00_bm  0x10 /* USART Parity Mode Select 00 bit mask.*/
 176:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_PMODE00_bp  4 /* USART Parity Mode Select 00 bit position.*/
 177:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 178:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_STOPB_bm  0x08 /* USART stop bit mask.*/
 179:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_STOPB_bp  3 /* USART stop bit Position.*/
 180:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 181:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_CHSIZE01C_gm  0x06  /* Character Size 10 bit 1 mask. */
 182:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_CHSIZE01C_gp  1 /* Character Size 10 bit position. */
 183:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 184:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_CHSIZE01_bm  0x04  /* Character Size 10 bit 1 mask. */
 185:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_CHSIZE01_bp  2 /* Character Size 10 bit position. */
 186:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 187:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_CHSIZE00_bm  0x02  /* Character Size 00 bit 1 mask. */
 188:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_CHSIZE00_bp  1 /* Character Size bit 00 position. */
 189:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 190:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_UCPOL_bm  0x01  /* Sync mode Pol bit 1 mask. */
 191:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_UCPOL_bp  0 /*Sync mode Pol bit 0 position */
 192:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 193:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_UCPHA_bm 0x02 /* Clock Phase bit mask. */
 194:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_UCPHA_bp 1 /* Clock Phase bit position. */
 195:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 196:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_DORD_bm 0x04 /* Data order bit mask. */
 197:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_DORD_bp 2 /* Data order bit position. */
 198:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 199:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** /* Character Size */
 200:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** typedef enum USART_CHSIZE_enum {
 201:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	USART_CHSIZE_5BIT_gc = (0x00),  /* Character size: 5 bit */
 202:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	USART_CHSIZE_6BIT_gc = (0x01),  /* Character size: 6 bit */
 203:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	USART_CHSIZE_7BIT_gc = (0x02),  /* Character size: 7 bit */
 204:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	USART_CHSIZE_8BIT_gc = (0x03),  /* Character size: 8 bit */
 205:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	USART_CHSIZE_9BIT_gc = (0x07),  /* Character size: 9 bit */
 206:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** } USART_CHSIZE_t;
 207:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 208:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** /* Communication Mode */
 209:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** typedef enum USART_CMODE_enum {
 210:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	USART_CMODE_ASYNCHRONOUS_gc = (0x00 << USART_UMSEL01_gp),  /*
 211:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	                                                            *
 212:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	                                                            *
 213:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	                                                            *Asynchronous
 214:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	                                                            * Mode */
 215:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	USART_CMODE_SYNCHRONOUS_gc = (0x01 << USART_UMSEL01_gp),  /* Synchronous
 216:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	                                                           * Mode */
 217:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	USART_CMODE_IRDA_gc = (0x02 << USART_UMSEL01_gp),  /* IrDA Mode */
 218:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	USART_CMODE_MSPI_gc = (0x03 << USART_UMSEL01_gp),  /* Master SPI Mode */
 219:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** } USART_CMODE_t;
 220:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 221:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** /* Parity Mode */
 222:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** typedef enum USART_PMODE_enum {
 223:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	USART_PMODE_DISABLED_gc = (0x00 << USART_PMODE_gp),  /* No Parity */
 224:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	USART_PMODE_EVEN_gc = (0x02 << USART_PMODE_gp),  /* Even Parity */
 225:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	USART_PMODE_ODD_gc = (0x03 << USART_PMODE_gp),  /* Odd Parity */
 226:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** } USART_PMODE_t;
 227:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 228:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** /* ! Lookup table containing baudctrl values for CPU frequency 1 Mhz */
 229:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** static PROGMEM_DECLARE(uint16_t, baudctrl_1mhz[]) = {
 230:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	0x0033, /* Baud: 1200 */
 231:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	0x0019, /* Baud: 2400 */
 232:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	0x000C, /* Baud: 4800 */
 233:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	0x0006, /* Baud: 9600 */
 234:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	0x0003, /* Baud: 19200 */
 235:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	0x0002, /* Baud: 38400 */
 236:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	0x0001, /* Baud: 57600 */
 237:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	USART_BAUD_UNDEFINED, /* Baud: 115200 */
 238:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** };
 239:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 240:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** /* ! Lookup table containing baudctrl values for CPU frequency 8 Mhz */
 241:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** static PROGMEM_DECLARE(uint16_t, baudctrl_8mhz[]) = {
 242:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	0x01A0, /* Baud: 1200 */
 243:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	0x00CF, /* Baud: 2400 */
 244:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	0x0067, /* Baud: 4800 */
 245:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	0x0033, /* Baud: 9600 */
 246:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	0x0019, /* Baud: 19200 */
 247:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	0x000C, /* Baud: 38400 */
 248:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	0x0007, /* Baud: 57600 */
 249:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	0x0008, /* Baud: 115200 */
 250:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** };
 251:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 252:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** /* ! Lookup table containing baudctrl values for CPU frequency 16 Mhz */
 253:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** static PROGMEM_DECLARE(uint16_t, baudctrl_16mhz[]) = {
 254:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	0x0340, /* Baud: 1200 */
 255:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	0x01A0, /* Baud: 2400 */
 256:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	0x00CF, /* Baud: 4800 */
 257:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	0x0067, /* Baud: 9600 */
 258:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	0x0033, /* Baud: 19200 */
 259:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	0x0019, /* Baud: 38400 */
 260:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	0x0010, /* Baud: 57600 */
 261:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	0x0010, /* Baud: 115200 */
 262:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** };
 263:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 264:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 265:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** /* ! Input parameters when initializing RS232 and similar modes. */
 266:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** typedef struct usart_rs232_options {
 267:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	/* ! Set baud rate of the USART (unused in slave modes). */
 268:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	uint32_t baudrate;
 269:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 270:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	/* ! Number of bits to transmit as a character (5 to 9). */
 271:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	USART_CHSIZE_t charlength;
 272:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 273:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	/* ! Parity type: USART_PMODE_DISABLED_gc, USART_PMODE_EVEN_gc, */
 274:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	/* ! USART_PMODE_ODD_gc. */
 275:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	USART_PMODE_t paritytype;
 276:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 277:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	/* ! Number of stop bits between two characters: */
 278:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	/* ! true: 2 stop bits */
 279:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	/* ! false: 1 stop bit */
 280:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	bool stopbits;
 281:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** } usart_rs232_options_t;
 282:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 283:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** /* ! Input parameters when initializing SPI master mode. */
 284:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** typedef struct usart_spi_options {
 285:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	/* ! Set baud rate of the USART in SPI mode. */
 286:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	uint32_t baudrate;
 287:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 288:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	/* ! SPI transmission mode. */
 289:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	uint8_t spimode;
 290:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 291:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	uint8_t data_order;
 292:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** } usart_spi_options_t;
 293:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 294:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 295:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** /**
 296:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * \brief Enable USART receiver.
 297:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  *
 298:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * \param usart Pointer to the USART module
 299:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  */
 300:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** static inline void usart_rx_enable(USART_t *usart)
 301:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** {
 302:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	(usart)->UCSRnB |= USART_RXEN_bm;
 303:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** }
 304:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 305:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** /**
 306:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * \brief Disable USART receiver.
 307:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  *
 308:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * \param usart Pointer to the USART module.
 309:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  */
 310:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** static inline void usart_rx_disable(USART_t *usart)
 311:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** {
 312:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	(usart)->UCSRnB &= ~USART_RXEN_bm;
 313:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** }
 314:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 315:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** /**
 316:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * \brief  Configure the USART frame format.
 317:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  *
 318:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  *  Sets the frame format, Frame Size, parity mode and number of stop bits.
 319:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  *
 320:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  *  \param usart Pointer to the USART module
 321:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  *  \param charSize The character size. Use USART_CHSIZE_t type.
 322:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  *  \param parityMode The parity Mode. Use USART_PMODE_t type.
 323:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  *  \param twoStopBits Enable two stop bit mode. Use bool type.
 324:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  */
 325:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** static inline void usart_format_set(USART_t *usart, USART_CHSIZE_t charSize,
 326:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 		USART_PMODE_t parityMode, bool twoStopBits)
 327:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** {
 328:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	(usart)->UCSRnC
 329:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 		= ((usart)->UCSRnC &
 330:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 			(~USART_CHSIZE01C_gm)) | ((charSize & 0x03)
 331:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 			<< USART_CHSIZE01C_gp);
 332:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	(usart)->UCSRnB
 333:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 		= ((usart)->UCSRnB &
 334:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 			(~USART_CHSIZE2_bm)) | ((charSize & 0x04)
 335:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 			<< USART_CHSIZE2_bp);
 336:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 337:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	(usart)->UCSRnC = ((usart)->UCSRnC & (~USART_PMODE_gm)) | parityMode;
 338:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 339:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	(usart)->UCSRnC = ((usart)->UCSRnC & (~USART_STOPB_bm)) | (twoStopBits
 340:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 			<< USART_STOPB_bp);
 341:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** }
 342:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 343:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** /**
 344:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * \brief Enable USART transmitter.
 345:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  *
 346:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * \param usart Pointer to the USART module.
 347:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  */
 348:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** static inline void usart_tx_enable(USART_t *usart)
 349:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** {
 350:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	(usart)->UCSRnB |= USART_TXEN_bm;
 351:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** }
 352:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 353:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** /**
 354:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * \brief Disable USART transmitter.
 355:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  *
 356:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * \param usart Pointer to the USART module.
 357:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  */
 358:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** static inline void usart_tx_disable(USART_t *usart)
 359:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** {
 360:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	(usart)->UCSRnB &= ~USART_TXEN_bm;
 361:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** }
 362:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 363:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** /**
 364:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * \brief Enable USART transmit complete interrupt.
 365:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  *
 366:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * \param usart Pointer to the USART module.
 367:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  */
 368:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** static inline void usart_tx_complete_interrupt_enable(USART_t *usart)
 369:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** {
 370:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	(usart)->UCSRnB |= USART_TXC_bm;
 371:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** }
 372:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 373:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** /**
 374:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * \brief Enable USART receive complete interrupt.
 375:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  *
 376:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * \param usart Pointer to the USART module.
 377:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  */
 378:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** static inline void usart_rx_complete_interrupt_enable(USART_t *usart)
 379:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** {
 380:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	(usart)->UCSRnB |= USART_RXC_bm;
 381:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** }
 382:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 383:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** /**
 384:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * \brief Enable USART data register empty interrupt.
 385:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  *
 386:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * \param usart Pointer to the USART module.
 387:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  */
 388:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** static inline void usart_data_empty_interrupt_enable(USART_t *usart)
 389:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** {
 390:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	(usart)->UCSRnB |= USART_DRIE_bm;
 391:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** }
 392:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 393:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** /**
 394:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * \brief Disable USART transmit complete interrupt.
 395:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  *
 396:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * \param usart Pointer to the USART module.
 397:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  */
 398:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** static inline void usart_tx_complete_interrupt_disable(USART_t *usart)
 399:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** {
 400:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	(usart)->UCSRnB &= ~USART_TXC_bm;
 401:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** }
 402:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 403:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** /**
 404:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * \brief Disable USART receive complete interrupt.
 405:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  *
 406:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * \param usart Pointer to the USART module.
 407:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  */
 408:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** static inline void usart_rx_complete_interrupt_disable(USART_t *usart)
 409:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** {
 410:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	(usart)->UCSRnB &= ~USART_RXC_bm;
 411:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** }
 412:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 413:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** /**
 414:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * \brief Disable USART data register empty interrupt.
 415:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  *
 416:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * \param usart Pointer to the USART module.
 417:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  */
 418:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** static inline void usart_data_empty_interrupt_disable(USART_t *usart)
 419:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** {
 420:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	(usart)->UCSRnB &= ~USART_DRIE_bm;
 421:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** }
 422:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 423:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** /**
 424:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * \brief Set the mode the USART run in.
 425:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  *
 426:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * Set the mode the USART run in. The default mode is asynchronous mode.
 427:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  *
 428:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * \param usart Pointer to the USART module register section.
 429:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * \param usartmode Selects the USART mode. Use USART_CMODE_t type.
 430:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  *
 431:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * USART modes:
 432:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * - 0x0        : Asynchronous mode.
 433:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * - 0x1        : Synchronous mode.
 434:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * - 0x2        : IrDA mode.
 435:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * - 0x3        : Master SPI mode.
 436:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  */
 437:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
 438:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** {
 439:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	(usart)->UCSRnC = ((usart)->UCSRnC & (~USART_UMSEL01_gm)) | usartmode;
 440:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** }
 441:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 442:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** /**
 443:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * \brief Check if data register empty flag is set.
 444:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  *
 445:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * \param usart The USART module.
 446:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  */
 447:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** static inline bool usart_data_register_is_empty(USART_t *usart)
 448:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** {
 449:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	return (usart)->UCSRnA & USART_DRE_bm;
 450:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** }
 451:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 452:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** /**
 453:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * \brief Checks if the RX complete interrupt flag is set.
 454:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  *
 455:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * Checks if the RX complete interrupt flag is set.
 456:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  *
 457:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * \param usart The USART module.
 458:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  */
 459:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** static inline bool usart_rx_is_complete(USART_t *usart)
 460:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** {
 461:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	return (usart)->UCSRnA & USART_RXC_bm;
 462:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** }
 463:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 464:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** /**
 465:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * \brief Checks if the TX complete interrupt flag is set.
 466:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  *
 467:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * Checks if the TX complete interrupt flag is set.
 468:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  *
 469:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * \param usart The USART module.
 470:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  */
 471:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** static inline bool usart_tx_is_complete(USART_t *usart)
 472:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** {
 473:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	return (usart)->UCSRnA & USART_TXC_bm;
 474:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** }
 475:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 476:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** /**
 477:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * \brief Clear TX complete interrupt flag.
 478:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * TX flag is clear after complete transmission, automatically.
 479:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * \param usart The USART module.
 480:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  */
 481:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** static inline void usart_clear_tx_complete(USART_t *usart)
 482:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** {
 483:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****          usart->UCSRnA |=  USART_TXC_bm;
 484:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** }
 485:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 486:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** /**
 487:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * \brief Write a data to the USART data register.
 488:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  *
 489:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * \param usart The USART module.
 490:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * \param txdata The data to be transmitted.
 491:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  */
 492:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** static inline void usart_put(USART_t *usart, uint8_t txdata)
 493:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** {
 494:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	(usart)->UDR = txdata;
 495:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** }
 496:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 497:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** /**
 498:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * \brief  Read a data to the USART data register.
 499:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  *
 500:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * \param usart The USART module.
 501:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  *
 502:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * \return The received data
 503:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  */
 504:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** static inline uint8_t usart_get(USART_t *usart)
 505:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** {
 506:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	return (usart)->UDR;
 507:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** }
 508:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 509:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** /**
 510:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * \brief Double the USART transmission speed.
 511:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  *
 512:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * \param usart The USART module.
 513:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  */
 514:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** static inline void usart_double_baud_enable(USART_t *usart)
 515:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** {
 131               		.loc 2 515 0
 132               		.cfi_startproc
 133 0034 CF93      		push r28
 134               	.LCFI6:
 135               		.cfi_def_cfa_offset 3
 136               		.cfi_offset 28, -2
 137 0036 DF93      		push r29
 138               	.LCFI7:
 139               		.cfi_def_cfa_offset 4
 140               		.cfi_offset 29, -3
 141 0038 00D0      		rcall .
 142               	.LCFI8:
 143               		.cfi_def_cfa_offset 6
 144 003a CDB7      		in r28,__SP_L__
 145 003c DEB7      		in r29,__SP_H__
 146               	.LCFI9:
 147               		.cfi_def_cfa_register 28
 148               	/* prologue: function */
 149               	/* frame size = 2 */
 150               	/* stack size = 4 */
 151               	.L__stack_usage = 4
 152 003e 9A83      		std Y+2,r25
 153 0040 8983      		std Y+1,r24
 516:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	usart->UCSRnA |=  USART_U2X_bm;
 154               		.loc 2 516 0
 155 0042 8981      		ldd r24,Y+1
 156 0044 9A81      		ldd r25,Y+2
 157 0046 FC01      		movw r30,r24
 158 0048 8081      		ld r24,Z
 159 004a 282F      		mov r18,r24
 160 004c 2260      		ori r18,lo8(2)
 161 004e 8981      		ldd r24,Y+1
 162 0050 9A81      		ldd r25,Y+2
 163 0052 FC01      		movw r30,r24
 164 0054 2083      		st Z,r18
 517:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** }
 165               		.loc 2 517 0
 166 0056 0000      		nop
 167               	/* epilogue start */
 168 0058 0F90      		pop __tmp_reg__
 169 005a 0F90      		pop __tmp_reg__
 170 005c DF91      		pop r29
 171 005e CF91      		pop r28
 172 0060 0895      		ret
 173               		.cfi_endproc
 174               	.LFE101:
 177               	usart_serial_init:
 178               	.LFB104:
 179               		.file 3 "../../../platform/common/services/serial/megarf_usart/usart_serial.h"
   1:../../../platform/common/services/serial/megarf_usart/usart_serial.h **** /**
   2:../../../platform/common/services/serial/megarf_usart/usart_serial.h ****  * \file
   3:../../../platform/common/services/serial/megarf_usart/usart_serial.h ****  *
   4:../../../platform/common/services/serial/megarf_usart/usart_serial.h ****  * \brief This file defines a useful set of functions for the Serial interface on 
   5:../../../platform/common/services/serial/megarf_usart/usart_serial.h ****  * AVR MEGARF devices.
   6:../../../platform/common/services/serial/megarf_usart/usart_serial.h ****  *
   7:../../../platform/common/services/serial/megarf_usart/usart_serial.h ****  * Copyright (c) 2013 Atmel Corporation. All rights reserved.
   8:../../../platform/common/services/serial/megarf_usart/usart_serial.h ****  *
   9:../../../platform/common/services/serial/megarf_usart/usart_serial.h ****  * \asf_license_start
  10:../../../platform/common/services/serial/megarf_usart/usart_serial.h ****  *
  11:../../../platform/common/services/serial/megarf_usart/usart_serial.h ****  * \page License
  12:../../../platform/common/services/serial/megarf_usart/usart_serial.h ****  *
  13:../../../platform/common/services/serial/megarf_usart/usart_serial.h ****  * Redistribution and use in source and binary forms, with or without
  14:../../../platform/common/services/serial/megarf_usart/usart_serial.h ****  * modification, are permitted provided that the following conditions are met:
  15:../../../platform/common/services/serial/megarf_usart/usart_serial.h ****  *
  16:../../../platform/common/services/serial/megarf_usart/usart_serial.h ****  * 1. Redistributions of source code must retain the above copyright notice,
  17:../../../platform/common/services/serial/megarf_usart/usart_serial.h ****  *    this list of conditions and the following disclaimer.
  18:../../../platform/common/services/serial/megarf_usart/usart_serial.h ****  *
  19:../../../platform/common/services/serial/megarf_usart/usart_serial.h ****  * 2. Redistributions in binary form must reproduce the above copyright notice,
  20:../../../platform/common/services/serial/megarf_usart/usart_serial.h ****  *    this list of conditions and the following disclaimer in the documentation
  21:../../../platform/common/services/serial/megarf_usart/usart_serial.h ****  *    and/or other materials provided with the distribution.
  22:../../../platform/common/services/serial/megarf_usart/usart_serial.h ****  *
  23:../../../platform/common/services/serial/megarf_usart/usart_serial.h ****  * 3. The name of Atmel may not be used to endorse or promote products derived
  24:../../../platform/common/services/serial/megarf_usart/usart_serial.h ****  *    from this software without specific prior written permission.
  25:../../../platform/common/services/serial/megarf_usart/usart_serial.h ****  *
  26:../../../platform/common/services/serial/megarf_usart/usart_serial.h ****  * 4. This software may only be redistributed and used in connection with an
  27:../../../platform/common/services/serial/megarf_usart/usart_serial.h ****  *    Atmel microcontroller product.
  28:../../../platform/common/services/serial/megarf_usart/usart_serial.h ****  *
  29:../../../platform/common/services/serial/megarf_usart/usart_serial.h ****  * THIS SOFTWARE IS PROVIDED BY ATMEL "AS IS" AND ANY EXPRESS OR IMPLIED
  30:../../../platform/common/services/serial/megarf_usart/usart_serial.h ****  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
  31:../../../platform/common/services/serial/megarf_usart/usart_serial.h ****  * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE
  32:../../../platform/common/services/serial/megarf_usart/usart_serial.h ****  * EXPRESSLY AND SPECIFICALLY DISCLAIMED. IN NO EVENT SHALL ATMEL BE LIABLE FOR
  33:../../../platform/common/services/serial/megarf_usart/usart_serial.h ****  * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  34:../../../platform/common/services/serial/megarf_usart/usart_serial.h ****  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
  35:../../../platform/common/services/serial/megarf_usart/usart_serial.h ****  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
  36:../../../platform/common/services/serial/megarf_usart/usart_serial.h ****  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
  37:../../../platform/common/services/serial/megarf_usart/usart_serial.h ****  * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
  38:../../../platform/common/services/serial/megarf_usart/usart_serial.h ****  * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  39:../../../platform/common/services/serial/megarf_usart/usart_serial.h ****  * POSSIBILITY OF SUCH DAMAGE.
  40:../../../platform/common/services/serial/megarf_usart/usart_serial.h ****  *
  41:../../../platform/common/services/serial/megarf_usart/usart_serial.h ****  * \asf_license_stop
  42:../../../platform/common/services/serial/megarf_usart/usart_serial.h ****  *
  43:../../../platform/common/services/serial/megarf_usart/usart_serial.h ****  */
  44:../../../platform/common/services/serial/megarf_usart/usart_serial.h **** #ifndef _USART_SERIAL_H_
  45:../../../platform/common/services/serial/megarf_usart/usart_serial.h **** #define _USART_SERIAL_H_
  46:../../../platform/common/services/serial/megarf_usart/usart_serial.h **** 
  47:../../../platform/common/services/serial/megarf_usart/usart_serial.h **** #ifdef __cplusplus
  48:../../../platform/common/services/serial/megarf_usart/usart_serial.h **** extern "C" {
  49:../../../platform/common/services/serial/megarf_usart/usart_serial.h **** #endif
  50:../../../platform/common/services/serial/megarf_usart/usart_serial.h **** 
  51:../../../platform/common/services/serial/megarf_usart/usart_serial.h **** #include "compiler.h"
  52:../../../platform/common/services/serial/megarf_usart/usart_serial.h **** #include "sysclk.h"
  53:../../../platform/common/services/serial/megarf_usart/usart_serial.h **** #include "status_codes.h"
  54:../../../platform/common/services/serial/megarf_usart/usart_serial.h **** #include "usart_megarf.h"
  55:../../../platform/common/services/serial/megarf_usart/usart_serial.h **** 
  56:../../../platform/common/services/serial/megarf_usart/usart_serial.h **** /*! \name Serial Management Configuration
  57:../../../platform/common/services/serial/megarf_usart/usart_serial.h ****  */
  58:../../../platform/common/services/serial/megarf_usart/usart_serial.h **** /* ! @{ */
  59:../../../platform/common/services/serial/megarf_usart/usart_serial.h **** #include "conf_usart_serial.h"
  60:../../../platform/common/services/serial/megarf_usart/usart_serial.h **** /* ! @} */
  61:../../../platform/common/services/serial/megarf_usart/usart_serial.h **** 
  62:../../../platform/common/services/serial/megarf_usart/usart_serial.h **** typedef usart_rs232_options_t usart_serial_options_t;
  63:../../../platform/common/services/serial/megarf_usart/usart_serial.h **** 
  64:../../../platform/common/services/serial/megarf_usart/usart_serial.h **** typedef USART_t *usart_if;
  65:../../../platform/common/services/serial/megarf_usart/usart_serial.h **** 
  66:../../../platform/common/services/serial/megarf_usart/usart_serial.h **** /*! \brief Initializes the Usart in master mode.
  67:../../../platform/common/services/serial/megarf_usart/usart_serial.h ****  *
  68:../../../platform/common/services/serial/megarf_usart/usart_serial.h ****  * \param usart       Base address of the USART instance.
  69:../../../platform/common/services/serial/megarf_usart/usart_serial.h ****  * \param options     Options needed to set up RS232 communication (see \ref
  70:../../../platform/common/services/serial/megarf_usart/usart_serial.h ****  * usart_serial_options_t).
  71:../../../platform/common/services/serial/megarf_usart/usart_serial.h ****  *
  72:../../../platform/common/services/serial/megarf_usart/usart_serial.h ****  * \retval true if the initialization was successful
  73:../../../platform/common/services/serial/megarf_usart/usart_serial.h ****  * \retval false if initialization failed (error in baud rate calculation)
  74:../../../platform/common/services/serial/megarf_usart/usart_serial.h ****  */
  75:../../../platform/common/services/serial/megarf_usart/usart_serial.h **** static inline bool usart_serial_init(usart_if usart, const
  76:../../../platform/common/services/serial/megarf_usart/usart_serial.h **** 		usart_serial_options_t *options)
  77:../../../platform/common/services/serial/megarf_usart/usart_serial.h **** {
 180               		.loc 3 77 0
 181               		.cfi_startproc
 182 0062 CF93      		push r28
 183               	.LCFI10:
 184               		.cfi_def_cfa_offset 3
 185               		.cfi_offset 28, -2
 186 0064 DF93      		push r29
 187               	.LCFI11:
 188               		.cfi_def_cfa_offset 4
 189               		.cfi_offset 29, -3
 190 0066 CDB7      		in r28,__SP_L__
 191 0068 DEB7      		in r29,__SP_H__
 192               	.LCFI12:
 193               		.cfi_def_cfa_register 28
 194 006a 2B97      		sbiw r28,11
 195               	.LCFI13:
 196               		.cfi_def_cfa_offset 15
 197 006c 0FB6      		in __tmp_reg__,__SREG__
 198 006e F894      		cli
 199 0070 DEBF      		out __SP_H__,r29
 200 0072 0FBE      		out __SREG__,__tmp_reg__
 201 0074 CDBF      		out __SP_L__,r28
 202               	/* prologue: function */
 203               	/* frame size = 11 */
 204               	/* stack size = 13 */
 205               	.L__stack_usage = 13
 206 0076 9987      		std Y+9,r25
 207 0078 8887      		std Y+8,r24
 208 007a 7B87      		std Y+11,r23
 209 007c 6A87      		std Y+10,r22
  78:../../../platform/common/services/serial/megarf_usart/usart_serial.h **** 	/* USART options. */
  79:../../../platform/common/services/serial/megarf_usart/usart_serial.h **** 	usart_rs232_options_t usart_rs232_options;
  80:../../../platform/common/services/serial/megarf_usart/usart_serial.h **** 	usart_rs232_options.charlength   = options->charlength;
 210               		.loc 3 80 0
 211 007e 8A85      		ldd r24,Y+10
 212 0080 9B85      		ldd r25,Y+11
 213 0082 FC01      		movw r30,r24
 214 0084 8481      		ldd r24,Z+4
 215 0086 8D83      		std Y+5,r24
  81:../../../platform/common/services/serial/megarf_usart/usart_serial.h **** 	usart_rs232_options.paritytype   = options->paritytype;
 216               		.loc 3 81 0
 217 0088 8A85      		ldd r24,Y+10
 218 008a 9B85      		ldd r25,Y+11
 219 008c FC01      		movw r30,r24
 220 008e 8581      		ldd r24,Z+5
 221 0090 8E83      		std Y+6,r24
  82:../../../platform/common/services/serial/megarf_usart/usart_serial.h **** 	usart_rs232_options.stopbits     = options->stopbits;
 222               		.loc 3 82 0
 223 0092 8A85      		ldd r24,Y+10
 224 0094 9B85      		ldd r25,Y+11
 225 0096 FC01      		movw r30,r24
 226 0098 8681      		ldd r24,Z+6
 227 009a 8F83      		std Y+7,r24
  83:../../../platform/common/services/serial/megarf_usart/usart_serial.h **** 	usart_rs232_options.baudrate     = options->baudrate;
 228               		.loc 3 83 0
 229 009c 8A85      		ldd r24,Y+10
 230 009e 9B85      		ldd r25,Y+11
 231 00a0 FC01      		movw r30,r24
 232 00a2 8081      		ld r24,Z
 233 00a4 9181      		ldd r25,Z+1
 234 00a6 A281      		ldd r26,Z+2
 235 00a8 B381      		ldd r27,Z+3
 236 00aa 8983      		std Y+1,r24
 237 00ac 9A83      		std Y+2,r25
 238 00ae AB83      		std Y+3,r26
 239 00b0 BC83      		std Y+4,r27
  84:../../../platform/common/services/serial/megarf_usart/usart_serial.h **** 
  85:../../../platform/common/services/serial/megarf_usart/usart_serial.h **** 	if (usart_init_rs232(usart, &usart_rs232_options)) {
 240               		.loc 3 85 0
 241 00b2 8885      		ldd r24,Y+8
 242 00b4 9985      		ldd r25,Y+9
 243 00b6 9E01      		movw r18,r28
 244 00b8 2F5F      		subi r18,-1
 245 00ba 3F4F      		sbci r19,-1
 246 00bc B901      		movw r22,r18
 247 00be 0E94 0000 		call usart_init_rs232
 248 00c2 8823      		tst r24
 249 00c4 01F0      		breq .L7
  86:../../../platform/common/services/serial/megarf_usart/usart_serial.h **** 		return true;
 250               		.loc 3 86 0
 251 00c6 81E0      		ldi r24,lo8(1)
 252 00c8 00C0      		rjmp .L9
 253               	.L7:
  87:../../../platform/common/services/serial/megarf_usart/usart_serial.h **** 	} else {
  88:../../../platform/common/services/serial/megarf_usart/usart_serial.h **** 		return false;
 254               		.loc 3 88 0
 255 00ca 80E0      		ldi r24,0
 256               	.L9:
 257               	/* epilogue start */
  89:../../../platform/common/services/serial/megarf_usart/usart_serial.h **** 	}
  90:../../../platform/common/services/serial/megarf_usart/usart_serial.h **** }
 258               		.loc 3 90 0 discriminator 1
 259 00cc 2B96      		adiw r28,11
 260 00ce 0FB6      		in __tmp_reg__,__SREG__
 261 00d0 F894      		cli
 262 00d2 DEBF      		out __SP_H__,r29
 263 00d4 0FBE      		out __SREG__,__tmp_reg__
 264 00d6 CDBF      		out __SP_L__,r28
 265 00d8 DF91      		pop r29
 266 00da CF91      		pop r28
 267 00dc 0895      		ret
 268               		.cfi_endproc
 269               	.LFE104:
 272               	usart_serial_putchar:
 273               	.LFB105:
  91:../../../platform/common/services/serial/megarf_usart/usart_serial.h **** 
  92:../../../platform/common/services/serial/megarf_usart/usart_serial.h **** /*! \brief Sends a character with the USART.
  93:../../../platform/common/services/serial/megarf_usart/usart_serial.h ****  *
  94:../../../platform/common/services/serial/megarf_usart/usart_serial.h ****  * \param usart   Base address of the USART instance.
  95:../../../platform/common/services/serial/megarf_usart/usart_serial.h ****  * \param c       Character to write.
  96:../../../platform/common/services/serial/megarf_usart/usart_serial.h ****  *
  97:../../../platform/common/services/serial/megarf_usart/usart_serial.h ****  * \return Status code
  98:../../../platform/common/services/serial/megarf_usart/usart_serial.h ****  */
  99:../../../platform/common/services/serial/megarf_usart/usart_serial.h **** static inline status_code_t usart_serial_putchar(usart_if usart, uint8_t c)
 100:../../../platform/common/services/serial/megarf_usart/usart_serial.h **** {
 274               		.loc 3 100 0
 275               		.cfi_startproc
 276 00de CF93      		push r28
 277               	.LCFI14:
 278               		.cfi_def_cfa_offset 3
 279               		.cfi_offset 28, -2
 280 00e0 DF93      		push r29
 281               	.LCFI15:
 282               		.cfi_def_cfa_offset 4
 283               		.cfi_offset 29, -3
 284 00e2 00D0      		rcall .
 285 00e4 1F92      		push __zero_reg__
 286               	.LCFI16:
 287               		.cfi_def_cfa_offset 7
 288 00e6 CDB7      		in r28,__SP_L__
 289 00e8 DEB7      		in r29,__SP_H__
 290               	.LCFI17:
 291               		.cfi_def_cfa_register 28
 292               	/* prologue: function */
 293               	/* frame size = 3 */
 294               	/* stack size = 5 */
 295               	.L__stack_usage = 5
 296 00ea 9A83      		std Y+2,r25
 297 00ec 8983      		std Y+1,r24
 298 00ee 6B83      		std Y+3,r22
 101:../../../platform/common/services/serial/megarf_usart/usart_serial.h **** 	return usart_putchar(usart, c);
 299               		.loc 3 101 0
 300 00f0 8981      		ldd r24,Y+1
 301 00f2 9A81      		ldd r25,Y+2
 302 00f4 6B81      		ldd r22,Y+3
 303 00f6 0E94 0000 		call usart_putchar
 304               	/* epilogue start */
 102:../../../platform/common/services/serial/megarf_usart/usart_serial.h **** }
 305               		.loc 3 102 0
 306 00fa 0F90      		pop __tmp_reg__
 307 00fc 0F90      		pop __tmp_reg__
 308 00fe 0F90      		pop __tmp_reg__
 309 0100 DF91      		pop r29
 310 0102 CF91      		pop r28
 311 0104 0895      		ret
 312               		.cfi_endproc
 313               	.LFE105:
 316               	usart_serial_getchar:
 317               	.LFB106:
 103:../../../platform/common/services/serial/megarf_usart/usart_serial.h **** 
 104:../../../platform/common/services/serial/megarf_usart/usart_serial.h **** /*! \brief Waits until a character is received, and returns it.
 105:../../../platform/common/services/serial/megarf_usart/usart_serial.h ****  *
 106:../../../platform/common/services/serial/megarf_usart/usart_serial.h ****  * \param usart   Base address of the USART instance.
 107:../../../platform/common/services/serial/megarf_usart/usart_serial.h ****  * \param data   Data to read
 108:../../../platform/common/services/serial/megarf_usart/usart_serial.h ****  *
 109:../../../platform/common/services/serial/megarf_usart/usart_serial.h ****  */
 110:../../../platform/common/services/serial/megarf_usart/usart_serial.h **** static inline void usart_serial_getchar(usart_if usart, uint8_t *data)
 111:../../../platform/common/services/serial/megarf_usart/usart_serial.h **** {
 318               		.loc 3 111 0
 319               		.cfi_startproc
 320 0106 CF93      		push r28
 321               	.LCFI18:
 322               		.cfi_def_cfa_offset 3
 323               		.cfi_offset 28, -2
 324 0108 DF93      		push r29
 325               	.LCFI19:
 326               		.cfi_def_cfa_offset 4
 327               		.cfi_offset 29, -3
 328 010a 00D0      		rcall .
 329 010c 00D0      		rcall .
 330               	.LCFI20:
 331               		.cfi_def_cfa_offset 8
 332 010e CDB7      		in r28,__SP_L__
 333 0110 DEB7      		in r29,__SP_H__
 334               	.LCFI21:
 335               		.cfi_def_cfa_register 28
 336               	/* prologue: function */
 337               	/* frame size = 4 */
 338               	/* stack size = 6 */
 339               	.L__stack_usage = 6
 340 0112 9A83      		std Y+2,r25
 341 0114 8983      		std Y+1,r24
 342 0116 7C83      		std Y+4,r23
 343 0118 6B83      		std Y+3,r22
 112:../../../platform/common/services/serial/megarf_usart/usart_serial.h **** 	*data = usart_getchar(usart);
 344               		.loc 3 112 0
 345 011a 8981      		ldd r24,Y+1
 346 011c 9A81      		ldd r25,Y+2
 347 011e 0E94 0000 		call usart_getchar
 348 0122 282F      		mov r18,r24
 349 0124 8B81      		ldd r24,Y+3
 350 0126 9C81      		ldd r25,Y+4
 351 0128 FC01      		movw r30,r24
 352 012a 2083      		st Z,r18
 113:../../../platform/common/services/serial/megarf_usart/usart_serial.h **** }
 353               		.loc 3 113 0
 354 012c 0000      		nop
 355               	/* epilogue start */
 356 012e 0F90      		pop __tmp_reg__
 357 0130 0F90      		pop __tmp_reg__
 358 0132 0F90      		pop __tmp_reg__
 359 0134 0F90      		pop __tmp_reg__
 360 0136 DF91      		pop r29
 361 0138 CF91      		pop r28
 362 013a 0895      		ret
 363               		.cfi_endproc
 364               	.LFE106:
 367               	stdio_serial_init:
 368               	.LFB107:
 369               		.file 4 "../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h"
   1:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h **** /**
   2:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h ****  *
   3:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h ****  * \file
   4:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h ****  *
   5:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h ****  * \brief Common Standard I/O Serial Management.
   6:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h ****  *
   7:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h ****  * This file defines a useful set of functions for the Stdio Serial interface on AVR
   8:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h ****  * and SAM devices.
   9:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h ****  *
  10:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h ****  * Copyright (c) 2009-2013 Atmel Corporation. All rights reserved.
  11:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h ****  *
  12:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h ****  * \asf_license_start
  13:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h ****  *
  14:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h ****  * \page License
  15:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h ****  *
  16:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h ****  * Redistribution and use in source and binary forms, with or without
  17:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h ****  * modification, are permitted provided that the following conditions are met:
  18:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h ****  *
  19:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h ****  * 1. Redistributions of source code must retain the above copyright notice,
  20:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h ****  *    this list of conditions and the following disclaimer.
  21:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h ****  *
  22:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h ****  * 2. Redistributions in binary form must reproduce the above copyright notice,
  23:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h ****  *    this list of conditions and the following disclaimer in the documentation
  24:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h ****  *    and/or other materials provided with the distribution.
  25:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h ****  *
  26:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h ****  * 3. The name of Atmel may not be used to endorse or promote products derived
  27:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h ****  *    from this software without specific prior written permission.
  28:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h ****  *
  29:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h ****  * 4. This software may only be redistributed and used in connection with an
  30:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h ****  *    Atmel microcontroller product.
  31:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h ****  *
  32:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h ****  * THIS SOFTWARE IS PROVIDED BY ATMEL "AS IS" AND ANY EXPRESS OR IMPLIED
  33:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h ****  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
  34:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h ****  * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE
  35:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h ****  * EXPRESSLY AND SPECIFICALLY DISCLAIMED. IN NO EVENT SHALL ATMEL BE LIABLE FOR
  36:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h ****  * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  37:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h ****  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
  38:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h ****  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
  39:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h ****  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
  40:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h ****  * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
  41:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h ****  * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  42:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h ****  * POSSIBILITY OF SUCH DAMAGE.
  43:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h ****  *
  44:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h ****  * \asf_license_stop
  45:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h ****  *
  46:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h ****  ******************************************************************************/
  47:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h **** 
  48:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h **** 
  49:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h **** #ifndef _STDIO_SERIAL_H_
  50:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h **** #define _STDIO_SERIAL_H_
  51:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h **** 
  52:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h **** /**
  53:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h ****  * \defgroup group_common_utils_stdio_stdio_serial Standard serial I/O (stdio)
  54:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h ****  * \ingroup group_common_utils_stdio
  55:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h ****  *
  56:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h ****  * Common standard serial I/O management driver that
  57:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h ****  * implements a stdio serial interface on AVR and SAM devices.
  58:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h ****  *
  59:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h ****  * \{
  60:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h ****  */
  61:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h **** 
  62:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h **** #include <stdio.h>
  63:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h **** #include "compiler.h"
  64:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h **** #ifndef SAMD20
  65:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h **** # include "sysclk.h"
  66:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h **** #endif
  67:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h **** #include "serial.h"
  68:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h **** 
  69:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h **** #if (XMEGA || MEGA_RF) && defined(__GNUC__)
  70:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h **** 	extern int _write (char c, int *f);
  71:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h **** 	extern int _read (int *f);
  72:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h **** #endif
  73:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h **** 
  74:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h **** 
  75:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h **** //! Pointer to the base of the USART module instance to use for stdio.
  76:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h **** extern volatile void *volatile stdio_base;
  77:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h **** //! Pointer to the external low level write function.
  78:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h **** extern int (*ptr_put)(void volatile*, char);
  79:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h **** 
  80:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h **** //! Pointer to the external low level read function.
  81:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h **** extern void (*ptr_get)(void volatile*, char*);
  82:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h **** 
  83:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h **** /*! \brief Initializes the stdio in Serial Mode.
  84:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h ****  *
  85:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h ****  * \param usart       Base address of the USART instance.
  86:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h ****  * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
  87:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h ****  *
  88:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h ****  */
  89:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h **** static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
  90:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h **** {
 370               		.loc 4 90 0
 371               		.cfi_startproc
 372 013c CF93      		push r28
 373               	.LCFI22:
 374               		.cfi_def_cfa_offset 3
 375               		.cfi_offset 28, -2
 376 013e DF93      		push r29
 377               	.LCFI23:
 378               		.cfi_def_cfa_offset 4
 379               		.cfi_offset 29, -3
 380 0140 00D0      		rcall .
 381 0142 00D0      		rcall .
 382               	.LCFI24:
 383               		.cfi_def_cfa_offset 8
 384 0144 CDB7      		in r28,__SP_L__
 385 0146 DEB7      		in r29,__SP_H__
 386               	.LCFI25:
 387               		.cfi_def_cfa_register 28
 388               	/* prologue: function */
 389               	/* frame size = 4 */
 390               	/* stack size = 6 */
 391               	.L__stack_usage = 6
 392 0148 9A83      		std Y+2,r25
 393 014a 8983      		std Y+1,r24
 394 014c 7C83      		std Y+4,r23
 395 014e 6B83      		std Y+3,r22
  91:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h **** 	stdio_base = (void *)usart;
 396               		.loc 4 91 0
 397 0150 8981      		ldd r24,Y+1
 398 0152 9A81      		ldd r25,Y+2
 399 0154 9093 0000 		sts stdio_base+1,r25
 400 0158 8093 0000 		sts stdio_base,r24
  92:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h **** 	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
 401               		.loc 4 92 0
 402 015c 80E0      		ldi r24,lo8(gs(usart_serial_putchar))
 403 015e 90E0      		ldi r25,hi8(gs(usart_serial_putchar))
 404 0160 9093 0000 		sts ptr_put+1,r25
 405 0164 8093 0000 		sts ptr_put,r24
  93:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h **** 	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
 406               		.loc 4 93 0
 407 0168 80E0      		ldi r24,lo8(gs(usart_serial_getchar))
 408 016a 90E0      		ldi r25,hi8(gs(usart_serial_getchar))
 409 016c 9093 0000 		sts ptr_get+1,r25
 410 0170 8093 0000 		sts ptr_get,r24
  94:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h **** # if (XMEGA || MEGA_RF)
  95:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h **** 	usart_serial_init((USART_t *)usart,opt);
 411               		.loc 4 95 0
 412 0174 2B81      		ldd r18,Y+3
 413 0176 3C81      		ldd r19,Y+4
 414 0178 8981      		ldd r24,Y+1
 415 017a 9A81      		ldd r25,Y+2
 416 017c B901      		movw r22,r18
 417 017e 0E94 0000 		call usart_serial_init
  96:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h **** # elif UC3
  97:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h **** 	usart_serial_init(usart,(usart_serial_options_t *)opt);
  98:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h **** # elif SAM
  99:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h **** 	usart_serial_init((Usart *)usart,(usart_serial_options_t *)opt);
 100:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h **** # else
 101:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h **** #  error Unsupported chip type
 102:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h **** # endif
 103:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h **** 
 104:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h **** # if defined(__GNUC__)
 105:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h **** #  if (XMEGA || MEGA_RF)
 106:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h **** 	// For AVR GCC libc print redirection uses fdevopen.
 107:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h **** 	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
 418               		.loc 4 107 0
 419 0182 60E0      		ldi r22,lo8(gs(_read))
 420 0184 70E0      		ldi r23,hi8(gs(_read))
 421 0186 80E0      		ldi r24,lo8(gs(_write))
 422 0188 90E0      		ldi r25,hi8(gs(_write))
 423 018a 0E94 0000 		call fdevopen
 108:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h **** #  endif
 109:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h **** #  if UC3 || SAM
 110:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h **** 	// For AVR32 and SAM GCC
 111:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h **** 	// Specify that stdout and stdin should not be buffered.
 112:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h **** 	setbuf(stdout, NULL);
 113:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h **** 	setbuf(stdin, NULL);
 114:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h **** 	// Note: Already the case in IAR's Normal DLIB default configuration
 115:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h **** 	// and AVR GCC library:
 116:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h **** 	// - printf() emits one character at a time.
 117:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h **** 	// - getchar() requests only 1 byte to exit.
 118:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h **** #  endif
 119:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h **** # endif
 120:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h **** }
 424               		.loc 4 120 0
 425 018e 0000      		nop
 426               	/* epilogue start */
 427 0190 0F90      		pop __tmp_reg__
 428 0192 0F90      		pop __tmp_reg__
 429 0194 0F90      		pop __tmp_reg__
 430 0196 0F90      		pop __tmp_reg__
 431 0198 DF91      		pop r29
 432 019a CF91      		pop r28
 433 019c 0895      		ret
 434               		.cfi_endproc
 435               	.LFE107:
 438               	macsc_enable_manual_bts:
 439               	.LFB121:
 440               		.file 5 "../../../platform/mega_rf/drivers/macsc/macsc_megarf.h"
   1:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** /**
   2:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * \file
   3:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  *
   4:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * \brief AVR MEGARF MAC Symbol Counter Driver Definitions
   5:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  *
   6:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * Copyright (c) 2013 Atmel Corporation. All rights reserved.
   7:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  *
   8:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * \asf_license_start
   9:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  *
  10:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * \page License
  11:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  *
  12:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * Redistribution and use in source and binary forms, with or without
  13:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * modification, are permitted provided that the following conditions are met:
  14:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  *
  15:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * 1. Redistributions of source code must retain the above copyright notice,
  16:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  *    this list of conditions and the following disclaimer.
  17:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  *
  18:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * 2. Redistributions in binary form must reproduce the above copyright notice,
  19:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  *    this list of conditions and the following disclaimer in the documentation
  20:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  *    and/or other materials provided with the distribution.
  21:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  *
  22:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * 3. The name of Atmel may not be used to endorse or promote products derived
  23:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  *    from this software without specific prior written permission.
  24:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  *
  25:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * 4. This software may only be redistributed and used in connection with an
  26:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  *    Atmel microcontroller product.
  27:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  *
  28:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * THIS SOFTWARE IS PROVIDED BY ATMEL "AS IS" AND ANY EXPRESS OR IMPLIED
  29:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
  30:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE
  31:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * EXPRESSLY AND SPECIFICALLY DISCLAIMED. IN NO EVENT SHALL ATMEL BE LIABLE FOR
  32:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  33:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
  34:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
  35:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
  36:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
  37:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  38:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * POSSIBILITY OF SUCH DAMAGE.
  39:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  *
  40:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * \asf_license_stop
  41:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  *
  42:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  */
  43:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** #ifndef MACSC_MEGARF_H
  44:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** #define MACSC_MEGARF_H
  45:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 
  46:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** #include <compiler.h>
  47:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** #include <parts.h>
  48:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** #include "status_codes.h"
  49:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 
  50:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** #ifdef __cplusplus
  51:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** extern "C" {
  52:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** #endif
  53:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 
  54:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** /**
  55:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * \defgroup macsc_group MAC Symbol Counter Driver(MACSC)
  56:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  *
  57:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * See \ref megarf_macsc_quickstart
  58:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  *
  59:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * This is a driver for the AVR MEGARF MAC Symbol Counter Driver(MACSC).
  60:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * It provides functions for enabling, disabling and configuring the module.
  61:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  *
  62:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * \section dependencies Dependencies
  63:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * This driver depends on the following modules:
  64:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * - \ref interrupt_group for ISR definition and disabling interrupts during
  65:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * critical code sections.
  66:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * @{
  67:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  */
  68:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 
  69:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** /**
  70:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * \brief Interrupt event callback function type
  71:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  *
  72:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * The interrupt handler can be configured to do a function callback,
  73:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * the callback function must match the macsc_callback_t type.
  74:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  *
  75:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  */
  76:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** typedef void (*macsc_callback_t)(void);
  77:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 
  78:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** /* ! MAC symbol counter compare Channel index */
  79:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** enum macsc_cc_channel {
  80:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 	/* ! Channel 1 */
  81:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 	MACSC_CC1 = 1,
  82:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 	/* ! Channel 2 */
  83:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 	MACSC_CC2 = 2,
  84:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 	/* ! Channel 3 */
  85:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 	MACSC_CC3 = 3,
  86:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** };
  87:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** /**
  88:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * \brief MAC SC clock source select
  89:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  *
  90:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * uses the SCCKSEL bit in SSCR register to select macsc clk src
  91:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  *
  92:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * If the bit is one,the RTC clock from TOSC1 is selected, otherwise the symbol
  93:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * counter operates with the clock from XTAL1.
  94:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * During transceiver sleep modes the clock falls back to the RTC clock source,
  95:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * regardless of the selected clock. After wakeup, it switches back to the
  96:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * previosly
  97:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * selected clock source.
  98:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  */
  99:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 
 100:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** enum macsc_xtal {
 101:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 	/* ! 16MHz as macsc clock */
 102:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 	MACSC_16MHz = 0,
 103:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 	MACSC_32KHz = 1,
 104:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** };
 105:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 
 106:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** /**
 107:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * @brief Reads the 32-bit timer register in the required order of bytes
 108:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  *
 109:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * @param hh hh octet of 32-bit register
 110:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * @param hl hl octet of 32-bit register
 111:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * @param lh lh octet of 32-bit register
 112:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * @param ll ll octet of 32-bit register
 113:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  *
 114:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * @returns uint32_t Value of timer register
 115:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  */
 116:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** static inline uint32_t macsc_read32(volatile uint8_t *hh,
 117:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 		volatile uint8_t *hl,
 118:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 		volatile uint8_t *lh,
 119:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 		volatile uint8_t *ll)
 120:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** {
 121:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 	union {
 122:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 		uint8_t a[4];
 123:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 		uint32_t rv;
 124:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 	}
 125:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 	x;
 126:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 
 127:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 	x.a[0] = *ll;
 128:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 	x.a[1] = *lh;
 129:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 	x.a[2] = *hl;
 130:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 	x.a[3] = *hh;
 131:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 
 132:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 	return x.rv;
 133:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** }
 134:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 
 135:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** /* ! compare modes */
 136:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** #define MACSC_ABSOLUTE_CMP 0
 137:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** #define MACSC_RELATIVE_CMP 1
 138:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 
 139:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** /** String concatenation by preprocessor used to create proper register names.
 140:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  **/
 141:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** #define CONCAT(a, b) a ## b
 142:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 
 143:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** /** Creates proper subregister names and reads the corresponding values. */
 144:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** #define MACSC_READ32(reg)                  macsc_read32(&CONCAT(reg, HH), \
 145:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 		&CONCAT(reg, HL), \
 146:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 		&CONCAT(reg, LH), \
 147:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 		&CONCAT(reg, LL))
 148:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 
 149:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** #define MACSC_WRITE32(reg, val)	\
 150:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 	do { \
 151:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 		union { uint8_t a[4]; uint32_t v; } \
 152:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 		x; \
 153:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 		x.v = val; \
 154:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 		CONCAT(reg, HH) = x.a[3]; \
 155:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 		CONCAT(reg, HL) = x.a[2]; \
 156:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 		CONCAT(reg, LH) = x.a[1]; \
 157:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 		CONCAT(reg, LL) = x.a[0]; \
 158:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 	} \
 159:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 	while (0)
 160:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 
 161:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** /**
 162:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * \brief Enable MAC SC
 163:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  *
 164:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * Enables the SC
 165:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  *
 166:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * \param clk_src selection of clk source,avalable options in macsc_xtal,fixed
 167:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  *  prescalar
 168:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * \param sleep_enable enable RTC as clock source during sleep
 169:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * \param auto_ts enable automatic timestamping
 170:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  *
 171:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  */
 172:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** void macsc_enable(void);
 173:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 
 174:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** /**
 175:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * \brief Check if MACSC is enabled
 176:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  *
 177:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * check if the MACSC is enabled.
 178:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  *
 179:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * \param none
 180:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  *
 181:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  */
 182:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** bool is_macsc_enable(void);
 183:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 
 184:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** /**
 185:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * \brief Disable MAC SC
 186:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  *
 187:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * Disables the MAC SC
 188:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  *
 189:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * \param none
 190:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  *
 191:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  */
 192:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** void macsc_disable(void);
 193:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 
 194:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** /**
 195:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * \brief Check if back-off slot counter is enabled
 196:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  *
 197:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * check if the back-off slot counter is enabled.
 198:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  *
 199:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * \param none
 200:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  *
 201:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  */
 202:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** bool is_macsc_backoff_enable(void);
 203:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 
 204:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** /**
 205:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * \brief Enables compare interrupts of the MACSC
 206:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  *
 207:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * \param channel Compare channel
 208:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  */
 209:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** void macsc_enable_cmp_int(enum macsc_cc_channel channel);
 210:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 
 211:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** /**
 212:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * \brief Disables compare interrupts of the MACSC
 213:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  *
 214:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * \param channel Compare channel
 215:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  */void macsc_disable_cmp_int(enum macsc_cc_channel channel);
 216:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 
 217:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** /**
 218:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * \brief Usage of Absolute compare mode of the MACSC
 219:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  *
 220:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * \param abs_rel  0 for absoulte cmp;1 for relative cmp
 221:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * \param cmp compare value for SCOCRx register
 222:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * \param channel Compare channel
 223:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  */
 224:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** void macsc_use_cmp(bool abs_rel, uint32_t cmp,enum macsc_cc_channel channel);
 225:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 
 226:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** /**
 227:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * \ingroup macsc_group
 228:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * \defgroup macsc_interrupt_group MAC Symbol Counter (MACSC) interrupt
 229:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * management
 230:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * This group provides functions to configure MACSC module interrupts
 231:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  *
 232:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * @{
 233:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  */
 234:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 
 235:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** /**
 236:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * \brief Set MACSC overflow interrupt callback function
 237:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  *
 238:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * This function allows the caller to set and change the interrupt callback
 239:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * function. Without setting a callback function the interrupt handler in the
 240:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * driver will only clear the interrupt flags.
 241:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  *
 242:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * \param callback Reference to a callback function
 243:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  */
 244:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** void macsc_set_ovf_int_cb(macsc_callback_t callback);
 245:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 
 246:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** /**
 247:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * \brief Set MACSC Compare Channel 1 interrupt callback function
 248:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  *
 249:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * This function allows the caller to set and change the interrupt callback
 250:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * function. Without setting a callback function the interrupt handler in the
 251:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * driver will only clear the interrupt flags.
 252:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  *
 253:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * \param callback Reference to a callback function
 254:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  */
 255:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** void macsc_set_cmp1_int_cb(macsc_callback_t callback);
 256:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 
 257:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** /**
 258:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * \brief Set MACSC Compare Channel 2 interrupt callback function
 259:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  *
 260:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * This function allows the caller to set and change the interrupt callback
 261:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * function. Without setting a callback function the interrupt handler in the
 262:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * driver will only clear the interrupt flags.
 263:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  *
 264:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * \param callback Reference to a callback function
 265:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  */
 266:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** void macsc_set_cmp2_int_cb(macsc_callback_t callback);
 267:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 
 268:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** /**
 269:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * \brief Set MACSC Compare Channel 3 interrupt callback function
 270:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  *
 271:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * This function allows the caller to set and change the interrupt callback
 272:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * function. Without setting a callback function the interrupt handler in the
 273:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * driver will only clear the interrupt flags.
 274:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  *
 275:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * \param callback Reference to a callback function
 276:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  */
 277:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** void macsc_set_cmp3_int_cb(macsc_callback_t callback);
 278:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 
 279:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** /**
 280:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * \brief Set MACSC backoff slot counter interrupt callback function
 281:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  *
 282:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * This function allows the caller to set and change the interrupt callback
 283:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * function. Without setting a callback function the interrupt handler in the
 284:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * driver will only clear the interrupt flags.
 285:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  *
 286:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * \param callback Reference to a callback function
 287:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  */
 288:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** void macsc_set_backoff_slot_cntr_int_cb(macsc_callback_t callback);
 289:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** //@}
 290:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 
 291:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** /**
 292:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * \brief Enable 32.768KHz clk using timer 2 async register
 293:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  *
 294:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * \param none
 295:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  */
 296:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 
 297:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** static inline void macsc_sleep_clk_enable(void)
 298:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** {
 299:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 	ASSR |= (1 << AS2);
 300:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** }
 301:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 
 302:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** /**
 303:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * \brief Disable 32.768KHz clk using timer 2 async register
 304:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  *
 305:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * \param none
 306:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  */
 307:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** static inline void macsc_sleep_clk_disable(void)
 308:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** {
 309:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 	ASSR &= ~(1 << AS2);
 310:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** }
 311:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 
 312:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** /* @} */
 313:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 
 314:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** /**
 315:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * \brief Configure MAC Symbol Counter Clock Source
 316:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  *
 317:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * \param macsc macsc clk src
 318:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  */
 319:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** static inline void macsc_write_clock_source(enum macsc_xtal source)
 320:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** {
 321:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 	if (source == MACSC_16MHz) {
 322:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 		SCCR0 |= (source << SCCKSEL);
 323:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 	} else if (source == MACSC_32KHz) {
 324:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 		SCCR0 &= ~(1 << SCCKSEL);
 325:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 	}
 326:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** }
 327:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 
 328:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** /**
 329:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * \brief Read MAC SC Clock Source
 330:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  *
 331:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * \param none
 332:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * \return macsc_xtal enum Clock source selection
 333:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  */
 334:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** static inline enum macsc_xtal macsc_read_clock_source(void)
 335:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** {
 336:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 	return (enum macsc_xtal)(SCCR0 & (1 << SCCKSEL));
 337:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** }
 338:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 
 339:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** /**
 340:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * \brief Write the Counter value of the MAC Symbol counter
 341:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  *
 342:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * \param cnt_value Counter value
 343:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  */
 344:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** static inline void macsc_write_count(uint32_t cnt_value)
 345:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** {
 346:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 	MACSC_WRITE32(SCCNT, cnt_value);
 347:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** }
 348:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 
 349:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** /**
 350:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * \brief Reads the Counter value of the MAC Symbol counter
 351:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  *
 352:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * \note Output the Counter value
 353:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  */
 354:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** static inline uint32_t macsc_read_count(void)
 355:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** {
 356:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 	return (MACSC_READ32(SCCNT));
 357:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** }
 358:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 
 359:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** /**
 360:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * \brief enable back-off slot counter
 361:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  *
 362:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * \param none
 363:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * \note  Enables interrupt as well	.
 364:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * \note This counter works only if transceiver clock is running.So check Trx
 365:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * state in app before using this function in IEEE802.15.4 applications.
 366:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  */
 367:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** static inline bool macsc_backoff_slot_cnt_enable(void)
 368:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** {
 369:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 	if (!(PRR1 & (1 << PRTRX24))) {
 370:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 		SCCR1 = (1 << SCENBO);
 371:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 		SCIRQS |= (1 << IRQSBO);
 372:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 		SCIRQM |= (1 << IRQMBO);
 373:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 		return true;
 374:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 	}
 375:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 	else return false;
 376:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** }
 377:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 
 378:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** /**
 379:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * \brief Disable back-off slot counter
 380:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  *
 381:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * \param none
 382:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * \note    Disables interrupt as well	.
 383:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * \note This counter works only if transceiver clock is running.So check Trx
 384:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * state in app before using this function in IEEE802.15.4 applications.
 385:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  */
 386:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** static inline void macsc_backoff_slot_cnt_disable(void)
 387:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** {
 388:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 	SCCR1 &= ~(1 << SCENBO);
 389:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 	SCIRQM &= ~(1 << IRQMBO);
 390:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** }
 391:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 
 392:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** /**
 393:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * \brief Tests if the Backoff slot cntr interrupt flag is set
 394:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  *
 395:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * \return  backoff slot cntr interrupt has occurred or not : IRQSBO
 396:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  */
 397:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** static inline bool macsc_is_slot_cntr_interrupt_flag_set(void)
 398:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** {
 399:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 	return (SCIRQS & (1 << IRQSBO));
 400:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** }
 401:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 
 402:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** /**
 403:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * \brief Clears the Backoff Slot cntr interrupt flag
 404:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  *
 405:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * \note  IRQSBO is cleared
 406:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  */
 407:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** static inline void macsc_clear_slot_cntr_interrupt_flag(void)
 408:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** {
 409:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 	SCIRQS |= (1 << IRQSBO);
 410:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** }
 411:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 
 412:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** /**
 413:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * \brief Reads the SFD Timestamp register
 414:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  *
 415:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * \return Timestamp of last received frame :SCTSR(read-only register)
 416:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  */
 417:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** static inline uint32_t macsc_read_ts(void)
 418:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** {
 419:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 	return (MACSC_READ32(SCTSR));
 420:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** }
 421:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 
 422:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** /**
 423:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * \brief Reads the Beacon Timestamp register
 424:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  *
 425:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * \return Timestamp of last received beacon frame :SCBTSR
 426:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  */
 427:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** static inline uint32_t macsc_read_bts(void)
 428:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** {
 429:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 	return (MACSC_READ32(SCBTSR));
 430:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** }
 431:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 
 432:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** /**
 433:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * \brief Write the Beacon Timestamp register of the MAC Symbol counter
 434:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * The manual beacon timestamping can be used in conjunction with the
 435:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * relative compare mode of the three compare units to generate compare match
 436:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * interrupts without having a beacon frame received
 437:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  *
 438:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * If set to 1, the current symbol counter value is stored into the beacon
 439:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * timestamp register.
 440:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * The bit is cleared afterwards.
 441:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  *
 442:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  */
 443:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** static inline void macsc_enable_manual_bts(void)
 444:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** {
 441               		.loc 5 444 0
 442               		.cfi_startproc
 443 019e CF93      		push r28
 444               	.LCFI26:
 445               		.cfi_def_cfa_offset 3
 446               		.cfi_offset 28, -2
 447 01a0 DF93      		push r29
 448               	.LCFI27:
 449               		.cfi_def_cfa_offset 4
 450               		.cfi_offset 29, -3
 451 01a2 CDB7      		in r28,__SP_L__
 452 01a4 DEB7      		in r29,__SP_H__
 453               	.LCFI28:
 454               		.cfi_def_cfa_register 28
 455               	/* prologue: function */
 456               	/* frame size = 0 */
 457               	/* stack size = 2 */
 458               	.L__stack_usage = 2
 445:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 	SCCR0 |= (1 << SCMBTS);
 459               		.loc 5 445 0
 460 01a6 8CED      		ldi r24,lo8(-36)
 461 01a8 90E0      		ldi r25,0
 462 01aa 2CED      		ldi r18,lo8(-36)
 463 01ac 30E0      		ldi r19,0
 464 01ae F901      		movw r30,r18
 465 01b0 2081      		ld r18,Z
 466 01b2 2064      		ori r18,lo8(64)
 467 01b4 FC01      		movw r30,r24
 468 01b6 2083      		st Z,r18
 446:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 	SCCR0 &= ~(1 << SCTSE);
 469               		.loc 5 446 0
 470 01b8 8CED      		ldi r24,lo8(-36)
 471 01ba 90E0      		ldi r25,0
 472 01bc 2CED      		ldi r18,lo8(-36)
 473 01be 30E0      		ldi r19,0
 474 01c0 F901      		movw r30,r18
 475 01c2 2081      		ld r18,Z
 476 01c4 277F      		andi r18,lo8(-9)
 477 01c6 FC01      		movw r30,r24
 478 01c8 2083      		st Z,r18
 447:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** }
 479               		.loc 5 447 0
 480 01ca 0000      		nop
 481               	/* epilogue start */
 482 01cc DF91      		pop r29
 483 01ce CF91      		pop r28
 484 01d0 0895      		ret
 485               		.cfi_endproc
 486               	.LFE121:
 488               		.section	.bss.appState,"aw",@nobits
 491               	appState:
 492 0000 00        		.zero	1
 493               		.section	.bss.msgReq,"aw",@nobits
 496               	msgReq:
 497 0000 0000 0000 		.zero	20
 497      0000 0000 
 497      0000 0000 
 497      0000 0000 
 497      0000 0000 
 498               		.section	.bss.PanId,"aw",@nobits
 501               	PanId:
 502 0000 00        		.zero	1
 503               		.text
 505               	appSendData:
 506               	.LFB130:
 507               		.file 6 "ServerLLDN.c"
   1:ServerLLDN.c  **** /*
   2:ServerLLDN.c  **** 	* ServerLLDN.c
   3:ServerLLDN.c  **** 	*
   4:ServerLLDN.c  **** 	* Created: 10/18/2019 5:15:37 PM
   5:ServerLLDN.c  **** 	*  Author: guilherme
   6:ServerLLDN.c  **** 	*/ 
   7:ServerLLDN.c  **** 
   8:ServerLLDN.c  **** #include <stdlib.h>
   9:ServerLLDN.c  **** #include <stdio.h>
  10:ServerLLDN.c  **** #include <string.h>
  11:ServerLLDN.c  **** #include <inttypes.h>
  12:ServerLLDN.c  **** #include "config.h"
  13:ServerLLDN.c  **** #include "sys.h"
  14:ServerLLDN.c  **** #include "phy.h"
  15:ServerLLDN.c  **** #include "sys.h"
  16:ServerLLDN.c  **** #include "nwk.h"
  17:ServerLLDN.c  **** #include "sysclk.h"
  18:ServerLLDN.c  **** #include "sysTimer.h"
  19:ServerLLDN.c  **** #include "sleep_mgr.h"
  20:ServerLLDN.c  **** #include "sleepmgr.h"
  21:ServerLLDN.c  **** #include "led.h"
  22:ServerLLDN.c  **** #include "ioport.h"
  23:ServerLLDN.c  **** #include "conf_sleepmgr.h"
  24:ServerLLDN.c  **** #include "board.h"
  25:ServerLLDN.c  **** #include "platform.h"
  26:ServerLLDN.c  **** #include "lldn.h"
  27:ServerLLDN.c  **** 
  28:ServerLLDN.c  **** #if APP_COORDINATOR
  29:ServerLLDN.c  **** 	#if (SIO2HOST_CHANNEL == SIO_USB)
  30:ServerLLDN.c  **** 		/* Only ARM */
  31:ServerLLDN.c  **** 		#include "stdio_usb.h"
  32:ServerLLDN.c  **** 		#define MASTER_MACSC	0
  33:ServerLLDN.c  **** 		#define TIMESLOT_TIMER	0
  34:ServerLLDN.c  **** 	#else
  35:ServerLLDN.c  **** 		/* Only megarf series */
  36:ServerLLDN.c  **** 		#include "conf_sio2host.h" // necessary for prints
  37:ServerLLDN.c  **** 		#define MASTER_MACSC	1
  38:ServerLLDN.c  **** 		#define TIMESLOT_TIMER	0
  39:ServerLLDN.c  **** 	#endif
  40:ServerLLDN.c  **** #else
  41:ServerLLDN.c  **** 	/* Only megarf series */
  42:ServerLLDN.c  **** 	#include "conf_sio2host.h" // necessary for prints
  43:ServerLLDN.c  **** 	#define MASTER_MACSC		1
  44:ServerLLDN.c  **** #endif
  45:ServerLLDN.c  **** 
  46:ServerLLDN.c  **** 
  47:ServerLLDN.c  **** #if (MASTER_MACSC == 1)
  48:ServerLLDN.c  **** 	#include "macsc_megarf.h"
  49:ServerLLDN.c  **** #else
  50:ServerLLDN.c  **** 	// static SYS_Timer_t				tmrBeaconInterval;			// Beacon
  51:ServerLLDN.c  **** 	// static SYS_Timer_t				tmrComputeData;				// Compute data
  52:ServerLLDN.c  **** #endif
  53:ServerLLDN.c  **** 	
  54:ServerLLDN.c  **** // equation for tTS gives time in seconds, the division by SYMBOL_TIME changes to symbols for count
  55:ServerLLDN.c  **** static volatile AppState_t	appState = APP_STATE_INITIAL;
  56:ServerLLDN.c  **** static NWK_DataReq_t msgReq;
  57:ServerLLDN.c  **** static uint8_t PanId;
  58:ServerLLDN.c  **** 
  59:ServerLLDN.c  **** static void appSendData(void)
  60:ServerLLDN.c  **** {
 508               		.loc 6 60 0
 509               		.cfi_startproc
 510 01d2 CF93      		push r28
 511               	.LCFI29:
 512               		.cfi_def_cfa_offset 3
 513               		.cfi_offset 28, -2
 514 01d4 DF93      		push r29
 515               	.LCFI30:
 516               		.cfi_def_cfa_offset 4
 517               		.cfi_offset 29, -3
 518 01d6 CDB7      		in r28,__SP_L__
 519 01d8 DEB7      		in r29,__SP_H__
 520               	.LCFI31:
 521               		.cfi_def_cfa_register 28
 522               	/* prologue: function */
 523               	/* frame size = 0 */
 524               	/* stack size = 2 */
 525               	.L__stack_usage = 2
  61:ServerLLDN.c  **** 	if(msgReq.options)
 526               		.loc 6 61 0
 527 01da 8091 0000 		lds r24,msgReq+9
 528 01de 9091 0000 		lds r25,msgReq+9+1
 529 01e2 892B      		or r24,r25
 530 01e4 01F0      		breq .L17
  62:ServerLLDN.c  **** 	{		
  63:ServerLLDN.c  **** 		NWK_DataReq(&msgReq);
 531               		.loc 6 63 0
 532 01e6 80E0      		ldi r24,lo8(msgReq)
 533 01e8 90E0      		ldi r25,hi8(msgReq)
 534 01ea 0E94 0000 		call NWK_DataReq
 535               	.L17:
  64:ServerLLDN.c  **** 		#if APP_COORDINATOR
  65:ServerLLDN.c  **** 		#endif
  66:ServerLLDN.c  **** 		// printf("\noption = %d", msgReq.options);
  67:ServerLLDN.c  **** 	}
  68:ServerLLDN.c  **** }
 536               		.loc 6 68 0
 537 01ee 0000      		nop
 538               	/* epilogue start */
 539 01f0 DF91      		pop r29
 540 01f2 CF91      		pop r28
 541 01f4 0895      		ret
 542               		.cfi_endproc
 543               	.LFE130:
 545               		.section	.bss.beaconInterval,"aw",@nobits
 548               	beaconInterval:
 549 0000 0000 0000 		.zero	4
 550               		.section	.data.appPanState,"aw",@progbits
 553               	appPanState:
 554 0000 01        		.byte	1
 555               		.section	.bss.ACKFrame,"aw",@nobits
 558               	ACKFrame:
 559 0000 0000 0000 		.zero	33
 559      0000 0000 
 559      0000 0000 
 559      0000 0000 
 559      0000 0000 
 560               		.section	.bss.ACKFrame_size,"aw",@nobits
 563               	ACKFrame_size:
 564 0000 0000      		.zero	2
 565               		.section	.data.cycles_counter,"aw",@progbits
 568               	cycles_counter:
 569 0000 01        		.byte	1
 570               	.global	counter_associados
 571               		.section	.bss.counter_associados,"aw",@nobits
 574               	counter_associados:
 575 0000 0000      		.zero	2
 576               		.section	.bss.tmrDiscoveryMode,"aw",@nobits
 579               	tmrDiscoveryMode:
 580 0000 0000 0000 		.zero	13
 580      0000 0000 
 580      0000 0000 
 580      00
 581               		.text
 583               	tmrDiscoveryModeHandler:
 584               	.LFB131:
  69:ServerLLDN.c  **** 
  70:ServerLLDN.c  **** #if APP_COORDINATOR
  71:ServerLLDN.c  **** 	static float beaconInterval;	
  72:ServerLLDN.c  **** 	static volatile AppPanState_t appPanState = APP_PAN_STATE_RESET;
  73:ServerLLDN.c  **** 	static NWK_ACKFormat_t ACKFrame;
  74:ServerLLDN.c  **** 	static int ACKFrame_size = 0;
  75:ServerLLDN.c  **** 	static uint8_t cycles_counter = macLLDNdiscoveryModeTimeout;
  76:ServerLLDN.c  **** 	int counter_associados = 0;
  77:ServerLLDN.c  **** 	static SYS_Timer_t tmrDiscoveryMode;
  78:ServerLLDN.c  **** 
  79:ServerLLDN.c  **** 	static void tmrDiscoveryModeHandler(SYS_Timer_t *timer)
  80:ServerLLDN.c  **** 	{
 585               		.loc 6 80 0
 586               		.cfi_startproc
 587 01f6 CF93      		push r28
 588               	.LCFI32:
 589               		.cfi_def_cfa_offset 3
 590               		.cfi_offset 28, -2
 591 01f8 DF93      		push r29
 592               	.LCFI33:
 593               		.cfi_def_cfa_offset 4
 594               		.cfi_offset 29, -3
 595 01fa 00D0      		rcall .
 596               	.LCFI34:
 597               		.cfi_def_cfa_offset 6
 598 01fc CDB7      		in r28,__SP_L__
 599 01fe DEB7      		in r29,__SP_H__
 600               	.LCFI35:
 601               		.cfi_def_cfa_register 28
 602               	/* prologue: function */
 603               	/* frame size = 2 */
 604               	/* stack size = 4 */
 605               	.L__stack_usage = 4
 606 0200 9A83      		std Y+2,r25
 607 0202 8983      		std Y+1,r24
  81:ServerLLDN.c  **** 		appState = APP_STATE_INITIAL;
 608               		.loc 6 81 0
 609 0204 1092 0000 		sts appState,__zero_reg__
  82:ServerLLDN.c  **** 		appPanState = APP_PAN_STATE_RESET;
 610               		.loc 6 82 0
 611 0208 81E0      		ldi r24,lo8(1)
 612 020a 8093 0000 		sts appPanState,r24
  83:ServerLLDN.c  **** 	}
 613               		.loc 6 83 0
 614 020e 0000      		nop
 615               	/* epilogue start */
 616 0210 0F90      		pop __tmp_reg__
 617 0212 0F90      		pop __tmp_reg__
 618 0214 DF91      		pop r29
 619 0216 CF91      		pop r28
 620 0218 0895      		ret
 621               		.cfi_endproc
 622               	.LFE131:
 625               	lldn_server_beacon:
 626               	.LFB132:
  84:ServerLLDN.c  **** 	
  85:ServerLLDN.c  **** 	static void lldn_server_beacon(void)
  86:ServerLLDN.c  **** 	{
 627               		.loc 6 86 0
 628               		.cfi_startproc
 629 021a CF93      		push r28
 630               	.LCFI36:
 631               		.cfi_def_cfa_offset 3
 632               		.cfi_offset 28, -2
 633 021c DF93      		push r29
 634               	.LCFI37:
 635               		.cfi_def_cfa_offset 4
 636               		.cfi_offset 29, -3
 637 021e CDB7      		in r28,__SP_L__
 638 0220 DEB7      		in r29,__SP_H__
 639               	.LCFI38:
 640               		.cfi_def_cfa_register 28
 641               	/* prologue: function */
 642               	/* frame size = 0 */
 643               	/* stack size = 2 */
 644               	.L__stack_usage = 2
  87:ServerLLDN.c  **** 		macsc_enable_manual_bts();
 645               		.loc 6 87 0
 646 0222 0E94 0000 		call macsc_enable_manual_bts
  88:ServerLLDN.c  **** 		appState = APP_STATE_SEND;
 647               		.loc 6 88 0
 648 0226 82E0      		ldi r24,lo8(2)
 649 0228 8093 0000 		sts appState,r24
  89:ServerLLDN.c  **** 	}
 650               		.loc 6 89 0
 651 022c 0000      		nop
 652               	/* epilogue start */
 653 022e DF91      		pop r29
 654 0230 CF91      		pop r28
 655 0232 0895      		ret
 656               		.cfi_endproc
 657               	.LFE132:
 660               	downlink_delay_handler:
 661               	.LFB133:
  90:ServerLLDN.c  **** 	
  91:ServerLLDN.c  **** 	static void downlink_delay_handler(void)
  92:ServerLLDN.c  **** 	{
 662               		.loc 6 92 0
 663               		.cfi_startproc
 664 0234 CF93      		push r28
 665               	.LCFI39:
 666               		.cfi_def_cfa_offset 3
 667               		.cfi_offset 28, -2
 668 0236 DF93      		push r29
 669               	.LCFI40:
 670               		.cfi_def_cfa_offset 4
 671               		.cfi_offset 29, -3
 672 0238 CDB7      		in r28,__SP_L__
 673 023a DEB7      		in r29,__SP_H__
 674               	.LCFI41:
 675               		.cfi_def_cfa_register 28
 676               	/* prologue: function */
 677               	/* frame size = 0 */
 678               	/* stack size = 2 */
 679               	.L__stack_usage = 2
  93:ServerLLDN.c  **** 		macsc_disable_cmp_int(MACSC_CC3);
 680               		.loc 6 93 0
 681 023c 83E0      		ldi r24,lo8(3)
 682 023e 0E94 0000 		call macsc_disable_cmp_int
  94:ServerLLDN.c  **** 		appState = APP_STATE_SEND;
 683               		.loc 6 94 0
 684 0242 82E0      		ldi r24,lo8(2)
 685 0244 8093 0000 		sts appState,r24
  95:ServerLLDN.c  **** 	}
 686               		.loc 6 95 0
 687 0248 0000      		nop
 688               	/* epilogue start */
 689 024a DF91      		pop r29
 690 024c CF91      		pop r28
 691 024e 0895      		ret
 692               		.cfi_endproc
 693               	.LFE133:
 696               	addToAckArray:
 697               	.LFB134:
  96:ServerLLDN.c  **** 	
  97:ServerLLDN.c  **** 	#if TIMESLOT_TIMER
  98:ServerLLDN.c  **** 	static void teste_handler(void)
  99:ServerLLDN.c  **** 	{
 100:ServerLLDN.c  **** 		if(msgReq.options)
 101:ServerLLDN.c  **** 		printf("\n***TIMESLOT****");
 102:ServerLLDN.c  **** 	}
 103:ServerLLDN.c  **** 	#endif
 104:ServerLLDN.c  **** 	
 105:ServerLLDN.c  **** 	static void addToAckArray(uint16_t addres)
 106:ServerLLDN.c  **** 	{	
 698               		.loc 6 106 0
 699               		.cfi_startproc
 700 0250 CF93      		push r28
 701               	.LCFI42:
 702               		.cfi_def_cfa_offset 3
 703               		.cfi_offset 28, -2
 704 0252 DF93      		push r29
 705               	.LCFI43:
 706               		.cfi_def_cfa_offset 4
 707               		.cfi_offset 29, -3
 708 0254 00D0      		rcall .
 709 0256 00D0      		rcall .
 710 0258 00D0      		rcall .
 711               	.LCFI44:
 712               		.cfi_def_cfa_offset 10
 713 025a CDB7      		in r28,__SP_L__
 714 025c DEB7      		in r29,__SP_H__
 715               	.LCFI45:
 716               		.cfi_def_cfa_register 28
 717               	/* prologue: function */
 718               	/* frame size = 6 */
 719               	/* stack size = 8 */
 720               	.L__stack_usage = 8
 721 025e 9E83      		std Y+6,r25
 722 0260 8D83      		std Y+5,r24
 107:ServerLLDN.c  **** 		int pos =(int) addres / 8;
 723               		.loc 6 107 0
 724 0262 8D81      		ldd r24,Y+5
 725 0264 9E81      		ldd r25,Y+6
 726 0266 9923      		tst r25
 727 0268 04F4      		brge .L22
 728 026a 0796      		adiw r24,7
 729               	.L22:
 730 026c 9595      		asr r25
 731 026e 8795      		ror r24
 732 0270 9595      		asr r25
 733 0272 8795      		ror r24
 734 0274 9595      		asr r25
 735 0276 8795      		ror r24
 736 0278 9A83      		std Y+2,r25
 737 027a 8983      		std Y+1,r24
 108:ServerLLDN.c  **** 		int bit_shift = 8 - (addres % 8);
 738               		.loc 6 108 0
 739 027c 8D81      		ldd r24,Y+5
 740 027e 9E81      		ldd r25,Y+6
 741 0280 8770      		andi r24,7
 742 0282 9927      		clr r25
 743 0284 28E0      		ldi r18,lo8(8)
 744 0286 30E0      		ldi r19,0
 745 0288 A901      		movw r20,r18
 746 028a 481B      		sub r20,r24
 747 028c 590B      		sbc r21,r25
 748 028e CA01      		movw r24,r20
 749 0290 9C83      		std Y+4,r25
 750 0292 8B83      		std Y+3,r24
 109:ServerLLDN.c  **** 		ACKFrame.ackFlags[pos] |= 1 << bit_shift;
 751               		.loc 6 109 0
 752 0294 8981      		ldd r24,Y+1
 753 0296 9A81      		ldd r25,Y+2
 754 0298 8050      		subi r24,lo8(-(ACKFrame+1))
 755 029a 9040      		sbci r25,hi8(-(ACKFrame+1))
 756 029c FC01      		movw r30,r24
 757 029e 8081      		ld r24,Z
 758 02a0 282F      		mov r18,r24
 759 02a2 81E0      		ldi r24,lo8(1)
 760 02a4 90E0      		ldi r25,0
 761 02a6 0B80      		ldd r0,Y+3
 762 02a8 00C0      		rjmp 2f
 763               		1:
 764 02aa 880F      		lsl r24
 765 02ac 991F      		rol r25
 766               		2:
 767 02ae 0A94      		dec r0
 768 02b0 02F4      		brpl 1b
 769 02b2 822B      		or r24,r18
 770 02b4 282F      		mov r18,r24
 771 02b6 8981      		ldd r24,Y+1
 772 02b8 9A81      		ldd r25,Y+2
 773 02ba 8050      		subi r24,lo8(-(ACKFrame+1))
 774 02bc 9040      		sbci r25,hi8(-(ACKFrame+1))
 775 02be FC01      		movw r30,r24
 776 02c0 2083      		st Z,r18
 110:ServerLLDN.c  **** 		if (pos + 1 > ACKFrame_size)
 777               		.loc 6 110 0
 778 02c2 8981      		ldd r24,Y+1
 779 02c4 9A81      		ldd r25,Y+2
 780 02c6 9C01      		movw r18,r24
 781 02c8 2F5F      		subi r18,-1
 782 02ca 3F4F      		sbci r19,-1
 783 02cc 8091 0000 		lds r24,ACKFrame_size
 784 02d0 9091 0000 		lds r25,ACKFrame_size+1
 785 02d4 8217      		cp r24,r18
 786 02d6 9307      		cpc r25,r19
 787 02d8 04F4      		brge .L24
 111:ServerLLDN.c  **** 		ACKFrame_size = pos + 1;
 788               		.loc 6 111 0
 789 02da 8981      		ldd r24,Y+1
 790 02dc 9A81      		ldd r25,Y+2
 791 02de 0196      		adiw r24,1
 792 02e0 9093 0000 		sts ACKFrame_size+1,r25
 793 02e4 8093 0000 		sts ACKFrame_size,r24
 794               	.L24:
 112:ServerLLDN.c  **** 	}
 795               		.loc 6 112 0
 796 02e8 0000      		nop
 797               	/* epilogue start */
 798 02ea 2696      		adiw r28,6
 799 02ec 0FB6      		in __tmp_reg__,__SREG__
 800 02ee F894      		cli
 801 02f0 DEBF      		out __SP_H__,r29
 802 02f2 0FBE      		out __SREG__,__tmp_reg__
 803 02f4 CDBF      		out __SP_L__,r28
 804 02f6 DF91      		pop r29
 805 02f8 CF91      		pop r28
 806 02fa 0895      		ret
 807               		.cfi_endproc
 808               	.LFE134:
 811               	appCommandInd:
 812               	.LFB135:
 113:ServerLLDN.c  **** 	
 114:ServerLLDN.c  **** 	static bool appCommandInd(NWK_DataInd_t *ind)
 115:ServerLLDN.c  **** 	{
 813               		.loc 6 115 0
 814               		.cfi_startproc
 815 02fc CF93      		push r28
 816               	.LCFI46:
 817               		.cfi_def_cfa_offset 3
 818               		.cfi_offset 28, -2
 819 02fe DF93      		push r29
 820               	.LCFI47:
 821               		.cfi_def_cfa_offset 4
 822               		.cfi_offset 29, -3
 823 0300 00D0      		rcall .
 824 0302 00D0      		rcall .
 825 0304 00D0      		rcall .
 826               	.LCFI48:
 827               		.cfi_def_cfa_offset 10
 828 0306 CDB7      		in r28,__SP_L__
 829 0308 DEB7      		in r29,__SP_H__
 830               	.LCFI49:
 831               		.cfi_def_cfa_register 28
 832               	/* prologue: function */
 833               	/* frame size = 6 */
 834               	/* stack size = 8 */
 835               	.L__stack_usage = 8
 836 030a 9E83      		std Y+6,r25
 837 030c 8D83      		std Y+5,r24
 116:ServerLLDN.c  **** 		if(ind->data[0] == LL_DISCOVER_RESPONSE)
 838               		.loc 6 116 0
 839 030e 8D81      		ldd r24,Y+5
 840 0310 9E81      		ldd r25,Y+6
 841 0312 FC01      		movw r30,r24
 842 0314 8085      		ldd r24,Z+8
 843 0316 9185      		ldd r25,Z+9
 844 0318 FC01      		movw r30,r24
 845 031a 8081      		ld r24,Z
 846 031c 8D30      		cpi r24,lo8(13)
 847 031e 01F4      		brne .L26
 848               	.LBB2:
 117:ServerLLDN.c  **** 		{
 118:ServerLLDN.c  **** 			NWK_DiscoverResponse_t *msg = (NWK_DiscoverResponse_t*)ind->data;
 849               		.loc 6 118 0
 850 0320 8D81      		ldd r24,Y+5
 851 0322 9E81      		ldd r25,Y+6
 852 0324 FC01      		movw r30,r24
 853 0326 8085      		ldd r24,Z+8
 854 0328 9185      		ldd r25,Z+9
 855 032a 9C83      		std Y+4,r25
 856 032c 8B83      		std Y+3,r24
 119:ServerLLDN.c  **** 			addToAckArray(msg->macAddr);
 857               		.loc 6 119 0
 858 032e 8B81      		ldd r24,Y+3
 859 0330 9C81      		ldd r25,Y+4
 860 0332 FC01      		movw r30,r24
 861 0334 8181      		ldd r24,Z+1
 862 0336 9281      		ldd r25,Z+2
 863 0338 0E94 0000 		call addToAckArray
 120:ServerLLDN.c  **** 			counter_associados++;
 864               		.loc 6 120 0
 865 033c 8091 0000 		lds r24,counter_associados
 866 0340 9091 0000 		lds r25,counter_associados+1
 867 0344 0196      		adiw r24,1
 868 0346 9093 0000 		sts counter_associados+1,r25
 869 034a 8093 0000 		sts counter_associados,r24
 870               	.LBE2:
 871 034e 00C0      		rjmp .L27
 872               	.L26:
 121:ServerLLDN.c  **** 			// printf("\nDiscover Response %hhx", msg->macAddr);	
 122:ServerLLDN.c  **** 		}
 123:ServerLLDN.c  **** 		else if(ind->data[0] == LL_CONFIGURATION_STATUS)
 873               		.loc 6 123 0
 874 0350 8D81      		ldd r24,Y+5
 875 0352 9E81      		ldd r25,Y+6
 876 0354 FC01      		movw r30,r24
 877 0356 8085      		ldd r24,Z+8
 878 0358 9185      		ldd r25,Z+9
 879 035a FC01      		movw r30,r24
 880 035c 8081      		ld r24,Z
 881 035e 8E30      		cpi r24,lo8(14)
 882 0360 01F4      		brne .L28
 883               	.LBB3:
 124:ServerLLDN.c  **** 		{
 125:ServerLLDN.c  **** 			NWK_ConfigStatus_t *msg = (NWK_ConfigStatus_t*)ind->data;
 884               		.loc 6 125 0
 885 0362 8D81      		ldd r24,Y+5
 886 0364 9E81      		ldd r25,Y+6
 887 0366 FC01      		movw r30,r24
 888 0368 8085      		ldd r24,Z+8
 889 036a 9185      		ldd r25,Z+9
 890 036c 9A83      		std Y+2,r25
 891 036e 8983      		std Y+1,r24
 892               	.LBE3:
 893 0370 00C0      		rjmp .L27
 894               	.L28:
 126:ServerLLDN.c  **** 			// printf("\nConfiguration Status %hhx", msg->macAddr);	
 127:ServerLLDN.c  **** 		}
 128:ServerLLDN.c  **** 		else return false;			
 895               		.loc 6 128 0
 896 0372 80E0      		ldi r24,0
 897 0374 00C0      		rjmp .L29
 898               	.L27:
 129:ServerLLDN.c  **** 		return true;
 899               		.loc 6 129 0
 900 0376 81E0      		ldi r24,lo8(1)
 901               	.L29:
 902               	/* epilogue start */
 130:ServerLLDN.c  **** 	}
 903               		.loc 6 130 0
 904 0378 2696      		adiw r28,6
 905 037a 0FB6      		in __tmp_reg__,__SREG__
 906 037c F894      		cli
 907 037e DEBF      		out __SP_H__,r29
 908 0380 0FBE      		out __SREG__,__tmp_reg__
 909 0382 CDBF      		out __SP_L__,r28
 910 0384 DF91      		pop r29
 911 0386 CF91      		pop r28
 912 0388 0895      		ret
 913               		.cfi_endproc
 914               	.LFE135:
 917               	appPanPrepareACK:
 918               	.LFB136:
 131:ServerLLDN.c  **** 	
 132:ServerLLDN.c  **** 	static void appPanPrepareACK(void)
 133:ServerLLDN.c  **** 	{
 919               		.loc 6 133 0
 920               		.cfi_startproc
 921 038a CF93      		push r28
 922               	.LCFI50:
 923               		.cfi_def_cfa_offset 3
 924               		.cfi_offset 28, -2
 925 038c DF93      		push r29
 926               	.LCFI51:
 927               		.cfi_def_cfa_offset 4
 928               		.cfi_offset 29, -3
 929 038e CDB7      		in r28,__SP_L__
 930 0390 DEB7      		in r29,__SP_H__
 931               	.LCFI52:
 932               		.cfi_def_cfa_register 28
 933               	/* prologue: function */
 934               	/* frame size = 0 */
 935               	/* stack size = 2 */
 936               	.L__stack_usage = 2
 134:ServerLLDN.c  **** 		msgReq.dstAddr				= 0;
 937               		.loc 6 134 0
 938 0392 1092 0000 		sts msgReq+5+1,__zero_reg__
 939 0396 1092 0000 		sts msgReq+5,__zero_reg__
 135:ServerLLDN.c  **** 		msgReq.dstEndpoint			= APP_BEACON_ENDPOINT;
 940               		.loc 6 135 0
 941 039a 1092 0000 		sts msgReq+7,__zero_reg__
 136:ServerLLDN.c  **** 		msgReq.srcEndpoint			= APP_BEACON_ENDPOINT;
 942               		.loc 6 136 0
 943 039e 1092 0000 		sts msgReq+8,__zero_reg__
 137:ServerLLDN.c  **** 		msgReq.options				= NWK_OPT_LLDN_ACK;
 944               		.loc 6 137 0
 945 03a2 80E0      		ldi r24,0
 946 03a4 90E4      		ldi r25,lo8(64)
 947 03a6 9093 0000 		sts msgReq+9+1,r25
 948 03aa 8093 0000 		sts msgReq+9,r24
 138:ServerLLDN.c  **** 		msgReq.data					= (uint8_t *)&ACKFrame;
 949               		.loc 6 138 0
 950 03ae 80E0      		ldi r24,lo8(ACKFrame)
 951 03b0 90E0      		ldi r25,hi8(ACKFrame)
 952 03b2 9093 0000 		sts msgReq+13+1,r25
 953 03b6 8093 0000 		sts msgReq+13,r24
 139:ServerLLDN.c  **** 		msgReq.size					= sizeof(uint8_t)*(ACKFrame_size + 1);
 954               		.loc 6 139 0
 955 03ba 8091 0000 		lds r24,ACKFrame_size
 956 03be 9091 0000 		lds r25,ACKFrame_size+1
 957 03c2 8F5F      		subi r24,lo8(-(1))
 958 03c4 8093 0000 		sts msgReq+15,r24
 140:ServerLLDN.c  **** 	}
 959               		.loc 6 140 0
 960 03c8 0000      		nop
 961               	/* epilogue start */
 962 03ca DF91      		pop r29
 963 03cc CF91      		pop r28
 964 03ce 0895      		ret
 965               		.cfi_endproc
 966               	.LFE136:
 969               	appPanReset:
 970               	.LFB137:
 141:ServerLLDN.c  **** 
 142:ServerLLDN.c  **** 	static void appPanReset(void)
 143:ServerLLDN.c  **** 	{
 971               		.loc 6 143 0
 972               		.cfi_startproc
 973 03d0 CF93      		push r28
 974               	.LCFI53:
 975               		.cfi_def_cfa_offset 3
 976               		.cfi_offset 28, -2
 977 03d2 DF93      		push r29
 978               	.LCFI54:
 979               		.cfi_def_cfa_offset 4
 980               		.cfi_offset 29, -3
 981 03d4 00D0      		rcall .
 982               	.LCFI55:
 983               		.cfi_def_cfa_offset 6
 984 03d6 CDB7      		in r28,__SP_L__
 985 03d8 DEB7      		in r29,__SP_H__
 986               	.LCFI56:
 987               		.cfi_def_cfa_register 28
 988               	/* prologue: function */
 989               	/* frame size = 2 */
 990               	/* stack size = 4 */
 991               	.L__stack_usage = 4
 144:ServerLLDN.c  **** 		msgReq.dstAddr		= 0;
 992               		.loc 6 144 0
 993 03da 1092 0000 		sts msgReq+5+1,__zero_reg__
 994 03de 1092 0000 		sts msgReq+5,__zero_reg__
 145:ServerLLDN.c  **** 		msgReq.dstEndpoint	= APP_BEACON_ENDPOINT;
 995               		.loc 6 145 0
 996 03e2 1092 0000 		sts msgReq+7,__zero_reg__
 146:ServerLLDN.c  **** 		msgReq.srcEndpoint	= APP_BEACON_ENDPOINT;
 997               		.loc 6 146 0
 998 03e6 1092 0000 		sts msgReq+8,__zero_reg__
 147:ServerLLDN.c  **** 		msgReq.options		= NWK_OPT_LLDN_BEACON | NWK_OPT_RESET_STATE;
 999               		.loc 6 147 0
 1000 03ea 80E4      		ldi r24,lo8(64)
 1001 03ec 94E0      		ldi r25,lo8(4)
 1002 03ee 9093 0000 		sts msgReq+9+1,r25
 1003 03f2 8093 0000 		sts msgReq+9,r24
 148:ServerLLDN.c  **** 		msgReq.data			= NULL;
 1004               		.loc 6 148 0
 1005 03f6 1092 0000 		sts msgReq+13+1,__zero_reg__
 1006 03fa 1092 0000 		sts msgReq+13,__zero_reg__
 149:ServerLLDN.c  **** 		msgReq.size			= 0;
 1007               		.loc 6 149 0
 1008 03fe 1092 0000 		sts msgReq+15,__zero_reg__
 1009               	.LBB4:
 150:ServerLLDN.c  **** 		
 151:ServerLLDN.c  **** 		for(int i = 0; i < ACKFrame_size; i++)
 1010               		.loc 6 151 0
 1011 0402 1A82      		std Y+2,__zero_reg__
 1012 0404 1982      		std Y+1,__zero_reg__
 1013 0406 00C0      		rjmp .L32
 1014               	.L33:
 152:ServerLLDN.c  **** 		{
 153:ServerLLDN.c  **** 			ACKFrame.ackFlags[i] = 0;
 1015               		.loc 6 153 0 discriminator 3
 1016 0408 8981      		ldd r24,Y+1
 1017 040a 9A81      		ldd r25,Y+2
 1018 040c 8050      		subi r24,lo8(-(ACKFrame+1))
 1019 040e 9040      		sbci r25,hi8(-(ACKFrame+1))
 1020 0410 FC01      		movw r30,r24
 1021 0412 1082      		st Z,__zero_reg__
 151:ServerLLDN.c  **** 		{
 1022               		.loc 6 151 0 discriminator 3
 1023 0414 8981      		ldd r24,Y+1
 1024 0416 9A81      		ldd r25,Y+2
 1025 0418 0196      		adiw r24,1
 1026 041a 9A83      		std Y+2,r25
 1027 041c 8983      		std Y+1,r24
 1028               	.L32:
 151:ServerLLDN.c  **** 		{
 1029               		.loc 6 151 0 is_stmt 0 discriminator 1
 1030 041e 8091 0000 		lds r24,ACKFrame_size
 1031 0422 9091 0000 		lds r25,ACKFrame_size+1
 1032 0426 2981      		ldd r18,Y+1
 1033 0428 3A81      		ldd r19,Y+2
 1034 042a 2817      		cp r18,r24
 1035 042c 3907      		cpc r19,r25
 1036 042e 04F0      		brlt .L33
 1037               	.LBE4:
 154:ServerLLDN.c  **** 		}
 155:ServerLLDN.c  **** 		ACKFrame_size = 0;
 1038               		.loc 6 155 0 is_stmt 1
 1039 0430 1092 0000 		sts ACKFrame_size+1,__zero_reg__
 1040 0434 1092 0000 		sts ACKFrame_size,__zero_reg__
 156:ServerLLDN.c  **** 	}
 1041               		.loc 6 156 0
 1042 0438 0000      		nop
 1043               	/* epilogue start */
 1044 043a 0F90      		pop __tmp_reg__
 1045 043c 0F90      		pop __tmp_reg__
 1046 043e DF91      		pop r29
 1047 0440 CF91      		pop r28
 1048 0442 0895      		ret
 1049               		.cfi_endproc
 1050               	.LFE137:
 1052               	.global	__floatsisf
 1053               	.global	__addsf3
 1054               	.global	__divsf3
 1055               	.global	__mulsf3
 1056               	.global	__fixunssfsi
 1058               	appPanDiscInit:
 1059               	.LFB138:
 157:ServerLLDN.c  **** 
 158:ServerLLDN.c  **** 	static void appPanDiscInit(void)
 159:ServerLLDN.c  **** 	{		
 1060               		.loc 6 159 0
 1061               		.cfi_startproc
 1062 0444 CF93      		push r28
 1063               	.LCFI57:
 1064               		.cfi_def_cfa_offset 3
 1065               		.cfi_offset 28, -2
 1066 0446 DF93      		push r29
 1067               	.LCFI58:
 1068               		.cfi_def_cfa_offset 4
 1069               		.cfi_offset 29, -3
 1070 0448 CDB7      		in r28,__SP_L__
 1071 044a DEB7      		in r29,__SP_H__
 1072               	.LCFI59:
 1073               		.cfi_def_cfa_register 28
 1074               	/* prologue: function */
 1075               	/* frame size = 0 */
 1076               	/* stack size = 2 */
 1077               	.L__stack_usage = 2
 160:ServerLLDN.c  **** 		/* Prepare Beacon Message as first beacon in discovery state */		
 161:ServerLLDN.c  **** 		msgReq.dstAddr				= 0;
 1078               		.loc 6 161 0
 1079 044c 1092 0000 		sts msgReq+5+1,__zero_reg__
 1080 0450 1092 0000 		sts msgReq+5,__zero_reg__
 162:ServerLLDN.c  **** 		msgReq.dstEndpoint			= APP_BEACON_ENDPOINT;
 1081               		.loc 6 162 0
 1082 0454 1092 0000 		sts msgReq+7,__zero_reg__
 163:ServerLLDN.c  **** 		msgReq.srcEndpoint			= APP_BEACON_ENDPOINT;
 1083               		.loc 6 163 0
 1084 0458 1092 0000 		sts msgReq+8,__zero_reg__
 164:ServerLLDN.c  **** 		msgReq.options				= NWK_OPT_LLDN_BEACON | NWK_OPT_DISCOVERY_STATE;
 1085               		.loc 6 164 0
 1086 045c 80E4      		ldi r24,lo8(64)
 1087 045e 91E0      		ldi r25,lo8(1)
 1088 0460 9093 0000 		sts msgReq+9+1,r25
 1089 0464 8093 0000 		sts msgReq+9,r24
 165:ServerLLDN.c  **** 		msgReq.data					= NULL;
 1090               		.loc 6 165 0
 1091 0468 1092 0000 		sts msgReq+13+1,__zero_reg__
 1092 046c 1092 0000 		sts msgReq+13,__zero_reg__
 166:ServerLLDN.c  **** 		msgReq.size					= 0;
 1093               		.loc 6 166 0
 1094 0470 1092 0000 		sts msgReq+15,__zero_reg__
 167:ServerLLDN.c  **** 		
 168:ServerLLDN.c  **** 		
 169:ServerLLDN.c  **** 		if(cycles_counter == macLLDNdiscoveryModeTimeout)
 1095               		.loc 6 169 0
 1096 0474 8091 0000 		lds r24,cycles_counter
 1097 0478 8130      		cpi r24,lo8(1)
 1098 047a 01F0      		breq .+2
 1099 047c 00C0      		rjmp .L36
 170:ServerLLDN.c  **** 		{
 171:ServerLLDN.c  **** 		/* Calculates Beacon Intervals according to 802.15.4e - 2012 p. 70 */
 172:ServerLLDN.c  **** 		n = 127; // 180 -safe octets
 1100               		.loc 6 172 0
 1101 047e 8FE7      		ldi r24,lo8(127)
 1102 0480 8093 0000 		sts n,r24
 173:ServerLLDN.c  **** 		tTS =  ((p_var*sp + (m+n)*sm + macMinLIFSPeriod)/v_var); // 0.009088 seconds with n = 255 
 1103               		.loc 6 173 0
 1104 0484 8091 0000 		lds r24,n
 1105 0488 882F      		mov r24,r24
 1106 048a 90E0      		ldi r25,0
 1107 048c 0396      		adiw r24,3
 1108 048e 880F      		lsl r24
 1109 0490 991F      		rol r25
 1110 0492 092E      		mov __tmp_reg__,r25
 1111 0494 000C      		lsl r0
 1112 0496 AA0B      		sbc r26,r26
 1113 0498 BB0B      		sbc r27,r27
 1114 049a BC01      		movw r22,r24
 1115 049c CD01      		movw r24,r26
 1116 049e 0E94 0000 		call __floatsisf
 1117 04a2 DC01      		movw r26,r24
 1118 04a4 CB01      		movw r24,r22
 1119 04a6 20E0      		ldi r18,0
 1120 04a8 30E0      		ldi r19,0
 1121 04aa 40E4      		ldi r20,lo8(64)
 1122 04ac 51E4      		ldi r21,lo8(65)
 1123 04ae BC01      		movw r22,r24
 1124 04b0 CD01      		movw r24,r26
 1125 04b2 0E94 0000 		call __addsf3
 1126 04b6 DC01      		movw r26,r24
 1127 04b8 CB01      		movw r24,r22
 1128 04ba 20E0      		ldi r18,0
 1129 04bc 30E0      		ldi r19,0
 1130 04be 40E2      		ldi r20,lo8(32)
 1131 04c0 52E4      		ldi r21,lo8(66)
 1132 04c2 BC01      		movw r22,r24
 1133 04c4 CD01      		movw r24,r26
 1134 04c6 0E94 0000 		call __addsf3
 1135 04ca DC01      		movw r26,r24
 1136 04cc CB01      		movw r24,r22
 1137 04ce 20E0      		ldi r18,0
 1138 04d0 34E2      		ldi r19,lo8(36)
 1139 04d2 44E7      		ldi r20,lo8(116)
 1140 04d4 57E4      		ldi r21,lo8(71)
 1141 04d6 BC01      		movw r22,r24
 1142 04d8 CD01      		movw r24,r26
 1143 04da 0E94 0000 		call __divsf3
 1144 04de DC01      		movw r26,r24
 1145 04e0 CB01      		movw r24,r22
 1146 04e2 8093 0000 		sts tTS,r24
 1147 04e6 9093 0000 		sts tTS+1,r25
 1148 04ea A093 0000 		sts tTS+2,r26
 1149 04ee B093 0000 		sts tTS+3,r27
 174:ServerLLDN.c  **** 		#if (MASTER_MACSC == 1)
 175:ServerLLDN.c  **** 		
 176:ServerLLDN.c  **** 			beaconInterval = 2 * numBaseTimeSlotperMgmt * (tTS) / (SYMBOL_TIME);
 1150               		.loc 6 176 0
 1151 04f2 8091 0000 		lds r24,tTS
 1152 04f6 9091 0000 		lds r25,tTS+1
 1153 04fa A091 0000 		lds r26,tTS+2
 1154 04fe B091 0000 		lds r27,tTS+3
 1155 0502 20E0      		ldi r18,0
 1156 0504 30E0      		ldi r19,0
 1157 0506 40E0      		ldi r20,0
 1158 0508 51E4      		ldi r21,lo8(65)
 1159 050a BC01      		movw r22,r24
 1160 050c CD01      		movw r24,r26
 1161 050e 0E94 0000 		call __mulsf3
 1162 0512 DC01      		movw r26,r24
 1163 0514 CB01      		movw r24,r22
 1164 0516 2DEB      		ldi r18,lo8(-67)
 1165 0518 37E3      		ldi r19,lo8(55)
 1166 051a 46E8      		ldi r20,lo8(-122)
 1167 051c 57E3      		ldi r21,lo8(55)
 1168 051e BC01      		movw r22,r24
 1169 0520 CD01      		movw r24,r26
 1170 0522 0E94 0000 		call __divsf3
 1171 0526 DC01      		movw r26,r24
 1172 0528 CB01      		movw r24,r22
 1173 052a 8093 0000 		sts beaconInterval,r24
 1174 052e 9093 0000 		sts beaconInterval+1,r25
 1175 0532 A093 0000 		sts beaconInterval+2,r26
 1176 0536 B093 0000 		sts beaconInterval+3,r27
 177:ServerLLDN.c  **** 			/*
 178:ServerLLDN.c  **** 			* Configure interrupts callback functions
 179:ServerLLDN.c  **** 			* overflow interrupt, compare 1,2,3 interrupts
 180:ServerLLDN.c  **** 			*/
 181:ServerLLDN.c  **** 			macsc_set_cmp1_int_cb(lldn_server_beacon);
 1177               		.loc 6 181 0
 1178 053a 80E0      		ldi r24,lo8(gs(lldn_server_beacon))
 1179 053c 90E0      		ldi r25,hi8(gs(lldn_server_beacon))
 1180 053e 0E94 0000 		call macsc_set_cmp1_int_cb
 182:ServerLLDN.c  **** 			macsc_set_cmp2_int_cb(downlink_delay_handler);
 1181               		.loc 6 182 0
 1182 0542 80E0      		ldi r24,lo8(gs(downlink_delay_handler))
 1183 0544 90E0      		ldi r25,hi8(gs(downlink_delay_handler))
 1184 0546 0E94 0000 		call macsc_set_cmp2_int_cb
 183:ServerLLDN.c  **** 
 184:ServerLLDN.c  **** 			/*
 185:ServerLLDN.c  **** 			* Configure MACSC to generate compare interrupts from channels 1,2,3
 186:ServerLLDN.c  **** 			* Set compare mode to absolute, set compare value.
 187:ServerLLDN.c  **** 			*/
 188:ServerLLDN.c  **** 			macsc_enable_manual_bts();
 1185               		.loc 6 188 0
 1186 054a 0E94 0000 		call macsc_enable_manual_bts
 189:ServerLLDN.c  **** 			macsc_enable_cmp_int(MACSC_CC1);
 1187               		.loc 6 189 0
 1188 054e 81E0      		ldi r24,lo8(1)
 1189 0550 0E94 0000 		call macsc_enable_cmp_int
 190:ServerLLDN.c  **** 			
 191:ServerLLDN.c  **** 			macsc_use_cmp(MACSC_RELATIVE_CMP, beaconInterval , MACSC_CC1);
 1190               		.loc 6 191 0
 1191 0554 8091 0000 		lds r24,beaconInterval
 1192 0558 9091 0000 		lds r25,beaconInterval+1
 1193 055c A091 0000 		lds r26,beaconInterval+2
 1194 0560 B091 0000 		lds r27,beaconInterval+3
 1195 0564 BC01      		movw r22,r24
 1196 0566 CD01      		movw r24,r26
 1197 0568 0E94 0000 		call __fixunssfsi
 1198 056c DC01      		movw r26,r24
 1199 056e CB01      		movw r24,r22
 1200 0570 21E0      		ldi r18,lo8(1)
 1201 0572 AC01      		movw r20,r24
 1202 0574 BD01      		movw r22,r26
 1203 0576 81E0      		ldi r24,lo8(1)
 1204 0578 0E94 0000 		call macsc_use_cmp
 192:ServerLLDN.c  **** 			macsc_use_cmp(MACSC_RELATIVE_CMP, DELAY , MACSC_CC3);
 1205               		.loc 6 192 0
 1206 057c 23E0      		ldi r18,lo8(3)
 1207 057e 4EE1      		ldi r20,lo8(30)
 1208 0580 50E0      		ldi r21,0
 1209 0582 60E0      		ldi r22,0
 1210 0584 70E0      		ldi r23,0
 1211 0586 81E0      		ldi r24,lo8(1)
 1212 0588 0E94 0000 		call macsc_use_cmp
 1213               	.L36:
 193:ServerLLDN.c  **** 			
 194:ServerLLDN.c  **** 			#if TIMESLOT_TIMER
 195:ServerLLDN.c  **** 			macsc_set_cmp2_int_cb(teste_handler);	
 196:ServerLLDN.c  **** 			macsc_enable_cmp_int(MACSC_CC2);
 197:ServerLLDN.c  **** 			macsc_use_cmp(MACSC_RELATIVE_CMP, beaconInterval / 2, MACSC_CC2);
 198:ServerLLDN.c  **** 			#endif
 199:ServerLLDN.c  **** 			
 200:ServerLLDN.c  **** 		#endif
 201:ServerLLDN.c  **** 		}
 202:ServerLLDN.c  **** 	}
 1214               		.loc 6 202 0
 1215 058c 0000      		nop
 1216               	/* epilogue start */
 1217 058e DF91      		pop r29
 1218 0590 CF91      		pop r28
 1219 0592 0895      		ret
 1220               		.cfi_endproc
 1221               	.LFE138:
 1224               	appInit:
 1225               	.LFB139:
 203:ServerLLDN.c  **** 
 204:ServerLLDN.c  **** #else 
 205:ServerLLDN.c  **** 	static NwkFrameBeaconHeaderLLDN_t *rec_beacon;
 206:ServerLLDN.c  **** 	static NWK_ConfigStatus_t msgConfigStatus;
 207:ServerLLDN.c  **** 	static NWK_DiscoverResponse_t msgDiscResponse;
 208:ServerLLDN.c  **** 
 209:ServerLLDN.c  **** 	static uint8_t payloadSize = 0x01;
 210:ServerLLDN.c  **** 	static uint8_t assTimeSlot = 0xFF;
 211:ServerLLDN.c  **** 	static bool ack_received;
 212:ServerLLDN.c  **** 	
 213:ServerLLDN.c  **** 	static void send_message_timeHandler(void)
 214:ServerLLDN.c  **** 	{
 215:ServerLLDN.c  **** 		appState = APP_STATE_SEND;	
 216:ServerLLDN.c  **** 	}
 217:ServerLLDN.c  **** 	
 218:ServerLLDN.c  **** 	static bool appBeaconInd(NWK_DataInd_t *ind)
 219:ServerLLDN.c  **** 	{
 220:ServerLLDN.c  **** 		macsc_enable_manual_bts();	
 221:ServerLLDN.c  **** 		rec_beacon = (NwkFrameBeaconHeaderLLDN_t*)ind->data;
 222:ServerLLDN.c  **** 		PanId = rec_beacon->PanId;
 223:ServerLLDN.c  **** 		if( (rec_beacon->Flags.txState == DISC_MODE && !ack_received) ||
 224:ServerLLDN.c  **** 			rec_beacon->Flags.txState == CONFIG_MODE && ack_received)
 225:ServerLLDN.c  **** 		{
 226:ServerLLDN.c  **** 			int msg_wait_time = rec_beacon->Flags.numBaseMgmtTimeslots * rec_beacon->TimeSlotSize* 2 ; // sy
 227:ServerLLDN.c  **** 			macsc_set_cmp1_int_cb(send_message_timeHandler);
 228:ServerLLDN.c  **** 			macsc_enable_cmp_int(MACSC_CC1);	  
 229:ServerLLDN.c  **** 			macsc_use_cmp(MACSC_RELATIVE_CMP, msg_wait_time , MACSC_CC1);
 230:ServerLLDN.c  **** 			appState = (rec_beacon->Flags.txState == DISC_MODE) ? APP_STATE_PREP_DISC_REPONSE : APP_STATE_PR
 231:ServerLLDN.c  **** 			/*
 232:ServerLLDN.c  **** 			macsc_set_cmp2_int_cb(end_cap);	
 233:ServerLLDN.c  **** 			macsc_enable_cmp_int(MACSC_CC2);
 234:ServerLLDN.c  **** 			macsc_use_cmp(MACSC_RELATIVE_CMP, msg_wait_time + rec_beacon->TimeSlotSize * 2, MACSC_CC2);
 235:ServerLLDN.c  **** 			*/
 236:ServerLLDN.c  **** 		}
 237:ServerLLDN.c  **** 		else if (rec_beacon->Flags.txState == RESET_MODE)
 238:ServerLLDN.c  **** 		{
 239:ServerLLDN.c  **** 			ack_received = 0;
 240:ServerLLDN.c  **** 		}
 241:ServerLLDN.c  **** 			
 242:ServerLLDN.c  **** 		return true;
 243:ServerLLDN.c  **** 	}
 244:ServerLLDN.c  **** 	
 245:ServerLLDN.c  **** 	static bool appAckInd(NWK_DataInd_t *ind)
 246:ServerLLDN.c  **** 	{
 247:ServerLLDN.c  **** 		NWK_ACKFormat_t *ackframe = (NWK_ACKFormat_t*)ind->data;
 248:ServerLLDN.c  **** 		if(PanId == ackframe->sourceId)
 249:ServerLLDN.c  **** 		{
 250:ServerLLDN.c  **** 			int pos = APP_ADDR / 8;
 251:ServerLLDN.c  **** 			int bit_shift = 8 - APP_ADDR % 8;
 252:ServerLLDN.c  **** 			if( ackframe->ackFlags[pos] & 1 << bit_shift)	
 253:ServerLLDN.c  **** 				{
 254:ServerLLDN.c  **** 				printf("\n ack true");
 255:ServerLLDN.c  **** 				ack_received = true;
 256:ServerLLDN.c  **** 				}
 257:ServerLLDN.c  **** 		}
 258:ServerLLDN.c  **** 		return true;
 259:ServerLLDN.c  **** 	}
 260:ServerLLDN.c  **** 	void appPrepareDiscoverResponse()
 261:ServerLLDN.c  **** 	{
 262:ServerLLDN.c  **** 		msgDiscResponse.id					= LL_DISCOVER_RESPONSE;
 263:ServerLLDN.c  **** 		msgDiscResponse.macAddr				= APP_ADDR;
 264:ServerLLDN.c  **** 		msgDiscResponse.ts_dir.tsDuration	= payloadSize;
 265:ServerLLDN.c  **** 		msgDiscResponse.ts_dir.dirIndicator = 1;
 266:ServerLLDN.c  **** 		
 267:ServerLLDN.c  **** 		msgReq.dstAddr				= 0;
 268:ServerLLDN.c  **** 		msgReq.dstEndpoint			= APP_COMMAND_ENDPOINT;
 269:ServerLLDN.c  **** 		msgReq.srcEndpoint			= APP_COMMAND_ENDPOINT;
 270:ServerLLDN.c  **** 		msgReq.options				= NWK_OPT_MAC_COMMAND;
 271:ServerLLDN.c  **** 		msgReq.data					= (uint8_t*)&msgDiscResponse;
 272:ServerLLDN.c  **** 		msgReq.size					= sizeof(msgDiscResponse);
 273:ServerLLDN.c  **** 	}
 274:ServerLLDN.c  **** 	
 275:ServerLLDN.c  **** #endif // APP_COORDINATOR
 276:ServerLLDN.c  **** 
 277:ServerLLDN.c  **** static void appInit(void)
 278:ServerLLDN.c  **** {
 1226               		.loc 6 278 0
 1227               		.cfi_startproc
 1228 0594 CF93      		push r28
 1229               	.LCFI60:
 1230               		.cfi_def_cfa_offset 3
 1231               		.cfi_offset 28, -2
 1232 0596 DF93      		push r29
 1233               	.LCFI61:
 1234               		.cfi_def_cfa_offset 4
 1235               		.cfi_offset 29, -3
 1236 0598 CDB7      		in r28,__SP_L__
 1237 059a DEB7      		in r29,__SP_H__
 1238               	.LCFI62:
 1239               		.cfi_def_cfa_register 28
 1240               	/* prologue: function */
 1241               	/* frame size = 0 */
 1242               	/* stack size = 2 */
 1243               	.L__stack_usage = 2
 279:ServerLLDN.c  **** 	NWK_SetAddr(APP_ADDR);
 1244               		.loc 6 279 0
 1245 059c 80E0      		ldi r24,0
 1246 059e 90E0      		ldi r25,0
 1247 05a0 0E94 0000 		call NWK_SetAddr
 280:ServerLLDN.c  **** 	PHY_SetChannel(APP_CHANNEL);
 1248               		.loc 6 280 0
 1249 05a4 8FE0      		ldi r24,lo8(15)
 1250 05a6 0E94 0000 		call PHY_SetChannel
 281:ServerLLDN.c  **** 	PHY_SetRxState(true);
 1251               		.loc 6 281 0
 1252 05aa 81E0      		ldi r24,lo8(1)
 1253 05ac 0E94 0000 		call PHY_SetRxState
 282:ServerLLDN.c  **** 		
 283:ServerLLDN.c  **** 	#if APP_COORDINATOR
 284:ServerLLDN.c  **** 	  tmrDiscoveryMode.interval = 900;
 1254               		.loc 6 284 0
 1255 05b0 84E8      		ldi r24,lo8(-124)
 1256 05b2 93E0      		ldi r25,lo8(3)
 1257 05b4 A0E0      		ldi r26,0
 1258 05b6 B0E0      		ldi r27,0
 1259 05b8 8093 0000 		sts tmrDiscoveryMode+6,r24
 1260 05bc 9093 0000 		sts tmrDiscoveryMode+6+1,r25
 1261 05c0 A093 0000 		sts tmrDiscoveryMode+6+2,r26
 1262 05c4 B093 0000 		sts tmrDiscoveryMode+6+3,r27
 285:ServerLLDN.c  **** 	  tmrDiscoveryMode.mode = SYS_TIMER_PERIODIC_MODE;
 1263               		.loc 6 285 0
 1264 05c8 81E0      		ldi r24,lo8(1)
 1265 05ca 8093 0000 		sts tmrDiscoveryMode+10,r24
 286:ServerLLDN.c  **** 	  tmrDiscoveryMode.handler = tmrDiscoveryModeHandler;
 1266               		.loc 6 286 0
 1267 05ce 80E0      		ldi r24,lo8(gs(tmrDiscoveryModeHandler))
 1268 05d0 90E0      		ldi r25,hi8(gs(tmrDiscoveryModeHandler))
 1269 05d2 9093 0000 		sts tmrDiscoveryMode+11+1,r25
 1270 05d6 8093 0000 		sts tmrDiscoveryMode+11,r24
 287:ServerLLDN.c  **** 	  SYS_TimerStart(&tmrDiscoveryMode);
 1271               		.loc 6 287 0
 1272 05da 80E0      		ldi r24,lo8(tmrDiscoveryMode)
 1273 05dc 90E0      		ldi r25,hi8(tmrDiscoveryMode)
 1274 05de 0E94 0000 		call SYS_TimerStart
 288:ServerLLDN.c  **** 		/* 
 289:ServerLLDN.c  **** 		* Disable CSMA/CA
 290:ServerLLDN.c  **** 		* Disable auto ACK
 291:ServerLLDN.c  **** 		*/
 292:ServerLLDN.c  **** 		NWK_SetPanId(APP_PANID);
 1275               		.loc 6 292 0
 1276 05e2 8EEF      		ldi r24,lo8(-2)
 1277 05e4 9AEC      		ldi r25,lo8(-54)
 1278 05e6 0E94 0000 		call NWK_SetPanId
 293:ServerLLDN.c  **** 		PanId = APP_PANID;
 1279               		.loc 6 293 0
 1280 05ea 8EEF      		ldi r24,lo8(-2)
 1281 05ec 8093 0000 		sts PanId,r24
 294:ServerLLDN.c  **** 		ACKFrame.sourceId = APP_PANID;
 1282               		.loc 6 294 0
 1283 05f0 8EEF      		ldi r24,lo8(-2)
 1284 05f2 8093 0000 		sts ACKFrame,r24
 295:ServerLLDN.c  **** 		PHY_SetTdmaMode(true);
 1285               		.loc 6 295 0
 1286 05f6 81E0      		ldi r24,lo8(1)
 1287 05f8 0E94 0000 		call PHY_SetTdmaMode
 296:ServerLLDN.c  **** 		NWK_OpenEndpoint(APP_COMMAND_ENDPOINT, appCommandInd);
 1288               		.loc 6 296 0
 1289 05fc 60E0      		ldi r22,lo8(gs(appCommandInd))
 1290 05fe 70E0      		ldi r23,hi8(gs(appCommandInd))
 1291 0600 83E0      		ldi r24,lo8(3)
 1292 0602 0E94 0000 		call NWK_OpenEndpoint
 297:ServerLLDN.c  **** 	#else
 298:ServerLLDN.c  **** 		PHY_SetTdmaMode(false);
 299:ServerLLDN.c  **** 		PHY_SetOptimizedCSMAValues();
 300:ServerLLDN.c  **** 		
 301:ServerLLDN.c  **** 		payloadSize = 0x01;
 302:ServerLLDN.c  **** 		NWK_OpenEndpoint(APP_BEACON_ENDPOINT, appBeaconInd);
 303:ServerLLDN.c  **** 		NWK_OpenEndpoint(APP_ACK_ENDPOINT, appAckInd);
 304:ServerLLDN.c  **** 		/*
 305:ServerLLDN.c  **** 		* Configure interrupts callback functions
 306:ServerLLDN.c  **** 		*/
 307:ServerLLDN.c  **** 		
 308:ServerLLDN.c  **** 	#endif // APP_COORDENATOR
 309:ServerLLDN.c  **** 	PHY_SetPromiscuousMode(true);
 1293               		.loc 6 309 0
 1294 0606 81E0      		ldi r24,lo8(1)
 1295 0608 0E94 0000 		call PHY_SetPromiscuousMode
 310:ServerLLDN.c  **** 
 311:ServerLLDN.c  **** }
 1296               		.loc 6 311 0
 1297 060c 0000      		nop
 1298               	/* epilogue start */
 1299 060e DF91      		pop r29
 1300 0610 CF91      		pop r28
 1301 0612 0895      		ret
 1302               		.cfi_endproc
 1303               	.LFE139:
 1305               		.section	.rodata
 1306               	.LC1:
 1307 0000 0A25 6400 		.string	"\n%d"
 1308               		.text
 1310               	APP_TaskHandler:
 1311               	.LFB140:
 312:ServerLLDN.c  **** 
 313:ServerLLDN.c  **** static void APP_TaskHandler(void)
 314:ServerLLDN.c  **** {
 1312               		.loc 6 314 0
 1313               		.cfi_startproc
 1314 0614 CF93      		push r28
 1315               	.LCFI63:
 1316               		.cfi_def_cfa_offset 3
 1317               		.cfi_offset 28, -2
 1318 0616 DF93      		push r29
 1319               	.LCFI64:
 1320               		.cfi_def_cfa_offset 4
 1321               		.cfi_offset 29, -3
 1322 0618 CDB7      		in r28,__SP_L__
 1323 061a DEB7      		in r29,__SP_H__
 1324               	.LCFI65:
 1325               		.cfi_def_cfa_register 28
 1326               	/* prologue: function */
 1327               	/* frame size = 0 */
 1328               	/* stack size = 2 */
 1329               	.L__stack_usage = 2
 315:ServerLLDN.c  **** 	switch (appState){
 1330               		.loc 6 315 0
 1331 061c 8091 0000 		lds r24,appState
 1332 0620 882F      		mov r24,r24
 1333 0622 90E0      		ldi r25,0
 1334 0624 8230      		cpi r24,2
 1335 0626 9105      		cpc r25,__zero_reg__
 1336 0628 01F0      		breq .L40
 1337 062a 8330      		cpi r24,3
 1338 062c 9105      		cpc r25,__zero_reg__
 1339 062e 01F0      		breq .L41
 1340 0630 892B      		or r24,r25
 1341 0632 01F0      		breq .L42
 316:ServerLLDN.c  **** 		case APP_STATE_INITIAL:
 317:ServerLLDN.c  **** 		{
 318:ServerLLDN.c  **** 			appInit();
 319:ServerLLDN.c  **** 			#if APP_COORDINATOR
 320:ServerLLDN.c  **** 				appState = APP_STATE_ATT_PAN_STATE;
 321:ServerLLDN.c  **** 			#else
 322:ServerLLDN.c  **** 				appState = APP_STATE_IDLE;
 323:ServerLLDN.c  **** 			#endif
 324:ServerLLDN.c  **** 			break;
 325:ServerLLDN.c  **** 		}
 326:ServerLLDN.c  **** 		case APP_STATE_SEND:
 327:ServerLLDN.c  **** 		{
 328:ServerLLDN.c  **** 			appSendData();
 329:ServerLLDN.c  **** 			#if APP_COORDINATOR
 330:ServerLLDN.c  **** 				appState = APP_STATE_ATT_PAN_STATE;
 331:ServerLLDN.c  **** 			#else
 332:ServerLLDN.c  **** 				appState = APP_STATE_IDLE;
 333:ServerLLDN.c  **** 			#endif
 334:ServerLLDN.c  **** 			break;
 335:ServerLLDN.c  **** 		}
 336:ServerLLDN.c  **** 		#if APP_COORDINATOR // COORDINATOR SPECIFIC STATE MACHINE
 337:ServerLLDN.c  **** 		case APP_STATE_ATT_PAN_STATE:
 338:ServerLLDN.c  **** 		{
 339:ServerLLDN.c  **** 			switch(appPanState)
 340:ServerLLDN.c  **** 			{
 341:ServerLLDN.c  **** 				case APP_PAN_STATE_RESET:
 342:ServerLLDN.c  **** 				{
 343:ServerLLDN.c  **** 					appPanReset();
 344:ServerLLDN.c  **** 					appPanState = APP_PAN_STATE_DISC_INITIAL;
 345:ServerLLDN.c  **** 					appState	= APP_STATE_SEND;
 346:ServerLLDN.c  **** 					cycles_counter = macLLDNdiscoveryModeTimeout;
 347:ServerLLDN.c  **** 					break;
 348:ServerLLDN.c  **** 				}
 349:ServerLLDN.c  **** 				case APP_PAN_STATE_DISC_INITIAL:
 350:ServerLLDN.c  **** 				{
 351:ServerLLDN.c  **** 					if(cycles_counter == 0)
 352:ServerLLDN.c  **** 					{	
 353:ServerLLDN.c  **** 						printf("\n%d", counter_associados);
 354:ServerLLDN.c  **** 						counter_associados = 0;
 355:ServerLLDN.c  **** 						macsc_disable_cmp_int(MACSC_CC1);
 356:ServerLLDN.c  **** 						appState = APP_STATE_IDLE;
 357:ServerLLDN.c  **** 						appPanState = APP_PAN_STATE_IDLE;
 358:ServerLLDN.c  **** 					}
 359:ServerLLDN.c  **** 					else
 360:ServerLLDN.c  **** 					{
 361:ServerLLDN.c  **** 						appPanDiscInit();
 362:ServerLLDN.c  **** 						appState	= APP_STATE_IDLE;
 363:ServerLLDN.c  **** 						appPanState = APP_PAN_STATE_DISC_SECOND_BE;
 364:ServerLLDN.c  **** 					}
 365:ServerLLDN.c  **** 					break;
 366:ServerLLDN.c  **** 				}
 367:ServerLLDN.c  **** 				case APP_PAN_STATE_DISC_SECOND_BE:
 368:ServerLLDN.c  **** 				{
 369:ServerLLDN.c  **** 					msgReq.options = NWK_OPT_LLDN_BEACON | NWK_OPT_DISCOVERY_STATE | NWK_OPT_SECOND_BEACON ;
 370:ServerLLDN.c  **** 					appState	= APP_STATE_IDLE;
 371:ServerLLDN.c  **** 					appPanState = APP_PAN_STATE_DISC_PREPARE_ACK;
 372:ServerLLDN.c  **** 					break;
 373:ServerLLDN.c  **** 				}
 374:ServerLLDN.c  **** 				case APP_PAN_STATE_DISC_PREPARE_ACK:
 375:ServerLLDN.c  **** 				{
 376:ServerLLDN.c  **** 					macsc_enable_cmp_int(MACSC_CC3);
 377:ServerLLDN.c  **** 					appPanPrepareACK();
 378:ServerLLDN.c  **** 					appPanState = APP_PAN_STATE_DISC_INITIAL;
 379:ServerLLDN.c  **** 					cycles_counter--;
 380:ServerLLDN.c  **** 					appState = APP_STATE_IDLE;
 381:ServerLLDN.c  **** 					
 382:ServerLLDN.c  **** 					//printf("\nack");
 383:ServerLLDN.c  **** 					break;
 384:ServerLLDN.c  **** 				}
 385:ServerLLDN.c  **** 				case APP_PAN_STATE_IDLE:
 386:ServerLLDN.c  **** 				{
 387:ServerLLDN.c  **** 					msgReq.options = 0;
 388:ServerLLDN.c  **** 					appState = APP_STATE_IDLE;
 389:ServerLLDN.c  **** 					break;
 390:ServerLLDN.c  **** 				}
 391:ServerLLDN.c  **** 			}
 392:ServerLLDN.c  **** 			break;	
 393:ServerLLDN.c  **** 		}
 394:ServerLLDN.c  **** 		#else // NODES SPECIFIC STATE MACHINE
 395:ServerLLDN.c  **** 		case APP_STATE_PREP_DISC_REPONSE:
 396:ServerLLDN.c  **** 		{
 397:ServerLLDN.c  **** 			if(rec_beacon->confSeqNumber == 0)
 398:ServerLLDN.c  **** 			{
 399:ServerLLDN.c  **** 				appPrepareDiscoverResponse();
 400:ServerLLDN.c  **** 			}
 401:ServerLLDN.c  **** 			else msgReq.options = 0;
 402:ServerLLDN.c  **** 			appState = APP_STATE_IDLE;	
 403:ServerLLDN.c  **** 			break;
 404:ServerLLDN.c  **** 		}
 405:ServerLLDN.c  **** 		/*
 406:ServerLLDN.c  **** 		case APP_STATE_PREP_CONFIG_STATUS:
 407:ServerLLDN.c  **** 		{
 408:ServerLLDN.c  **** 			if(ack_received)
 409:ServerLLDN.c  **** 				appPrepareDiscoverResponse();
 410:ServerLLDN.c  **** 			appState = APP_STATE_IDLE;
 411:ServerLLDN.c  **** 			break;
 412:ServerLLDN.c  **** 		}*/
 413:ServerLLDN.c  **** 		#endif
 414:ServerLLDN.c  **** 		default:
 415:ServerLLDN.c  **** 		break;
 1342               		.loc 6 415 0
 1343 0634 00C0      		rjmp .L43
 1344               	.L42:
 318:ServerLLDN.c  **** 			#if APP_COORDINATOR
 1345               		.loc 6 318 0
 1346 0636 0E94 0000 		call appInit
 320:ServerLLDN.c  **** 			#else
 1347               		.loc 6 320 0
 1348 063a 83E0      		ldi r24,lo8(3)
 1349 063c 8093 0000 		sts appState,r24
 324:ServerLLDN.c  **** 		}
 1350               		.loc 6 324 0
 1351 0640 00C0      		rjmp .L43
 1352               	.L40:
 328:ServerLLDN.c  **** 			#if APP_COORDINATOR
 1353               		.loc 6 328 0
 1354 0642 0E94 0000 		call appSendData
 330:ServerLLDN.c  **** 			#else
 1355               		.loc 6 330 0
 1356 0646 83E0      		ldi r24,lo8(3)
 1357 0648 8093 0000 		sts appState,r24
 334:ServerLLDN.c  **** 		}
 1358               		.loc 6 334 0
 1359 064c 00C0      		rjmp .L43
 1360               	.L41:
 339:ServerLLDN.c  **** 			{
 1361               		.loc 6 339 0
 1362 064e 8091 0000 		lds r24,appPanState
 1363 0652 882F      		mov r24,r24
 1364 0654 90E0      		ldi r25,0
 1365 0656 8230      		cpi r24,2
 1366 0658 9105      		cpc r25,__zero_reg__
 1367 065a 01F0      		breq .L45
 1368 065c 8330      		cpi r24,3
 1369 065e 9105      		cpc r25,__zero_reg__
 1370 0660 04F4      		brge .L46
 1371 0662 0097      		sbiw r24,0
 1372 0664 01F4      		brne .+2
 1373 0666 00C0      		rjmp .L47
 1374 0668 0197      		sbiw r24,1
 1375 066a 01F0      		breq .L48
 392:ServerLLDN.c  **** 		}
 1376               		.loc 6 392 0
 1377 066c 00C0      		rjmp .L53
 1378               	.L46:
 339:ServerLLDN.c  **** 			{
 1379               		.loc 6 339 0
 1380 066e 8330      		cpi r24,3
 1381 0670 9105      		cpc r25,__zero_reg__
 1382 0672 01F4      		brne .+2
 1383 0674 00C0      		rjmp .L49
 1384 0676 0497      		sbiw r24,4
 1385 0678 01F4      		brne .+2
 1386 067a 00C0      		rjmp .L50
 392:ServerLLDN.c  **** 		}
 1387               		.loc 6 392 0
 1388 067c 00C0      		rjmp .L53
 1389               	.L48:
 343:ServerLLDN.c  **** 					appPanState = APP_PAN_STATE_DISC_INITIAL;
 1390               		.loc 6 343 0
 1391 067e 0E94 0000 		call appPanReset
 344:ServerLLDN.c  **** 					appState	= APP_STATE_SEND;
 1392               		.loc 6 344 0
 1393 0682 82E0      		ldi r24,lo8(2)
 1394 0684 8093 0000 		sts appPanState,r24
 345:ServerLLDN.c  **** 					cycles_counter = macLLDNdiscoveryModeTimeout;
 1395               		.loc 6 345 0
 1396 0688 82E0      		ldi r24,lo8(2)
 1397 068a 8093 0000 		sts appState,r24
 346:ServerLLDN.c  **** 					break;
 1398               		.loc 6 346 0
 1399 068e 81E0      		ldi r24,lo8(1)
 1400 0690 8093 0000 		sts cycles_counter,r24
 347:ServerLLDN.c  **** 				}
 1401               		.loc 6 347 0
 1402 0694 00C0      		rjmp .L44
 1403               	.L45:
 351:ServerLLDN.c  **** 					{	
 1404               		.loc 6 351 0
 1405 0696 8091 0000 		lds r24,cycles_counter
 1406 069a 8823      		tst r24
 1407 069c 01F4      		brne .L51
 353:ServerLLDN.c  **** 						counter_associados = 0;
 1408               		.loc 6 353 0
 1409 069e 8091 0000 		lds r24,counter_associados
 1410 06a2 9091 0000 		lds r25,counter_associados+1
 1411 06a6 292F      		mov r18,r25
 1412 06a8 2F93      		push r18
 1413 06aa 8F93      		push r24
 1414 06ac 80E0      		ldi r24,lo8(.LC1)
 1415 06ae 90E0      		ldi r25,hi8(.LC1)
 1416 06b0 892F      		mov r24,r25
 1417 06b2 8F93      		push r24
 1418 06b4 80E0      		ldi r24,lo8(.LC1)
 1419 06b6 90E0      		ldi r25,hi8(.LC1)
 1420 06b8 8F93      		push r24
 1421 06ba 0E94 0000 		call printf
 1422 06be 0F90      		pop __tmp_reg__
 1423 06c0 0F90      		pop __tmp_reg__
 1424 06c2 0F90      		pop __tmp_reg__
 1425 06c4 0F90      		pop __tmp_reg__
 354:ServerLLDN.c  **** 						macsc_disable_cmp_int(MACSC_CC1);
 1426               		.loc 6 354 0
 1427 06c6 1092 0000 		sts counter_associados+1,__zero_reg__
 1428 06ca 1092 0000 		sts counter_associados,__zero_reg__
 355:ServerLLDN.c  **** 						appState = APP_STATE_IDLE;
 1429               		.loc 6 355 0
 1430 06ce 81E0      		ldi r24,lo8(1)
 1431 06d0 0E94 0000 		call macsc_disable_cmp_int
 356:ServerLLDN.c  **** 						appPanState = APP_PAN_STATE_IDLE;
 1432               		.loc 6 356 0
 1433 06d4 81E0      		ldi r24,lo8(1)
 1434 06d6 8093 0000 		sts appState,r24
 357:ServerLLDN.c  **** 					}
 1435               		.loc 6 357 0
 1436 06da 1092 0000 		sts appPanState,__zero_reg__
 365:ServerLLDN.c  **** 				}
 1437               		.loc 6 365 0
 1438 06de 00C0      		rjmp .L44
 1439               	.L51:
 361:ServerLLDN.c  **** 						appState	= APP_STATE_IDLE;
 1440               		.loc 6 361 0
 1441 06e0 0E94 0000 		call appPanDiscInit
 362:ServerLLDN.c  **** 						appPanState = APP_PAN_STATE_DISC_SECOND_BE;
 1442               		.loc 6 362 0
 1443 06e4 81E0      		ldi r24,lo8(1)
 1444 06e6 8093 0000 		sts appState,r24
 363:ServerLLDN.c  **** 					}
 1445               		.loc 6 363 0
 1446 06ea 83E0      		ldi r24,lo8(3)
 1447 06ec 8093 0000 		sts appPanState,r24
 365:ServerLLDN.c  **** 				}
 1448               		.loc 6 365 0
 1449 06f0 00C0      		rjmp .L44
 1450               	.L49:
 369:ServerLLDN.c  **** 					appState	= APP_STATE_IDLE;
 1451               		.loc 6 369 0
 1452 06f2 80E4      		ldi r24,lo8(64)
 1453 06f4 99E0      		ldi r25,lo8(9)
 1454 06f6 9093 0000 		sts msgReq+9+1,r25
 1455 06fa 8093 0000 		sts msgReq+9,r24
 370:ServerLLDN.c  **** 					appPanState = APP_PAN_STATE_DISC_PREPARE_ACK;
 1456               		.loc 6 370 0
 1457 06fe 81E0      		ldi r24,lo8(1)
 1458 0700 8093 0000 		sts appState,r24
 371:ServerLLDN.c  **** 					break;
 1459               		.loc 6 371 0
 1460 0704 84E0      		ldi r24,lo8(4)
 1461 0706 8093 0000 		sts appPanState,r24
 372:ServerLLDN.c  **** 				}
 1462               		.loc 6 372 0
 1463 070a 00C0      		rjmp .L44
 1464               	.L50:
 376:ServerLLDN.c  **** 					appPanPrepareACK();
 1465               		.loc 6 376 0
 1466 070c 83E0      		ldi r24,lo8(3)
 1467 070e 0E94 0000 		call macsc_enable_cmp_int
 377:ServerLLDN.c  **** 					appPanState = APP_PAN_STATE_DISC_INITIAL;
 1468               		.loc 6 377 0
 1469 0712 0E94 0000 		call appPanPrepareACK
 378:ServerLLDN.c  **** 					cycles_counter--;
 1470               		.loc 6 378 0
 1471 0716 82E0      		ldi r24,lo8(2)
 1472 0718 8093 0000 		sts appPanState,r24
 379:ServerLLDN.c  **** 					appState = APP_STATE_IDLE;
 1473               		.loc 6 379 0
 1474 071c 8091 0000 		lds r24,cycles_counter
 1475 0720 8150      		subi r24,lo8(-(-1))
 1476 0722 8093 0000 		sts cycles_counter,r24
 380:ServerLLDN.c  **** 					
 1477               		.loc 6 380 0
 1478 0726 81E0      		ldi r24,lo8(1)
 1479 0728 8093 0000 		sts appState,r24
 383:ServerLLDN.c  **** 				}
 1480               		.loc 6 383 0
 1481 072c 00C0      		rjmp .L44
 1482               	.L47:
 387:ServerLLDN.c  **** 					appState = APP_STATE_IDLE;
 1483               		.loc 6 387 0
 1484 072e 1092 0000 		sts msgReq+9+1,__zero_reg__
 1485 0732 1092 0000 		sts msgReq+9,__zero_reg__
 388:ServerLLDN.c  **** 					break;
 1486               		.loc 6 388 0
 1487 0736 81E0      		ldi r24,lo8(1)
 1488 0738 8093 0000 		sts appState,r24
 389:ServerLLDN.c  **** 				}
 1489               		.loc 6 389 0
 1490 073c 0000      		nop
 1491               	.L44:
 1492               	.L53:
 392:ServerLLDN.c  **** 		}
 1493               		.loc 6 392 0
 1494 073e 0000      		nop
 1495               	.L43:
 416:ServerLLDN.c  **** 	}
 417:ServerLLDN.c  **** }
 1496               		.loc 6 417 0
 1497 0740 0000      		nop
 1498               	/* epilogue start */
 1499 0742 DF91      		pop r29
 1500 0744 CF91      		pop r28
 1501 0746 0895      		ret
 1502               		.cfi_endproc
 1503               	.LFE140:
 1505               		.section	.rodata
 1506               	.LC0:
 1507 0004 00        		.byte	0
 1508 0005 C2        		.byte	-62
 1509 0006 01        		.byte	1
 1510 0007 00        		.byte	0
 1511 0008 03        		.byte	3
 1512 0009 00        		.byte	0
 1513 000a 00        		.byte	0
 1514               		.text
 1515               	.global	main
 1517               	main:
 1518               	.LFB141:
 418:ServerLLDN.c  **** 
 419:ServerLLDN.c  **** 	/*****************************************************************************
 420:ServerLLDN.c  **** 	*****************************************************************************/
 421:ServerLLDN.c  **** 	int main(void)
 422:ServerLLDN.c  **** 	{
 1519               		.loc 6 422 0
 1520               		.cfi_startproc
 1521 0748 0F93      		push r16
 1522               	.LCFI66:
 1523               		.cfi_def_cfa_offset 3
 1524               		.cfi_offset 16, -2
 1525 074a 1F93      		push r17
 1526               	.LCFI67:
 1527               		.cfi_def_cfa_offset 4
 1528               		.cfi_offset 17, -3
 1529 074c CF93      		push r28
 1530               	.LCFI68:
 1531               		.cfi_def_cfa_offset 5
 1532               		.cfi_offset 28, -4
 1533 074e DF93      		push r29
 1534               	.LCFI69:
 1535               		.cfi_def_cfa_offset 6
 1536               		.cfi_offset 29, -5
 1537 0750 CDB7      		in r28,__SP_L__
 1538 0752 DEB7      		in r29,__SP_H__
 1539               	.LCFI70:
 1540               		.cfi_def_cfa_register 28
 1541 0754 2797      		sbiw r28,7
 1542               	.LCFI71:
 1543               		.cfi_def_cfa_offset 13
 1544 0756 0FB6      		in __tmp_reg__,__SREG__
 1545 0758 F894      		cli
 1546 075a DEBF      		out __SP_H__,r29
 1547 075c 0FBE      		out __SREG__,__tmp_reg__
 1548 075e CDBF      		out __SP_L__,r28
 1549               	/* prologue: function */
 1550               	/* frame size = 7 */
 1551               	/* stack size = 11 */
 1552               	.L__stack_usage = 11
 423:ServerLLDN.c  **** 		sysclk_init();
 1553               		.loc 6 423 0
 1554 0760 0E94 0000 		call sysclk_init
 424:ServerLLDN.c  **** 		board_init();
 1555               		.loc 6 424 0
 1556 0764 0E94 0000 		call board_init
 425:ServerLLDN.c  **** 
 426:ServerLLDN.c  **** 		SYS_Init();
 1557               		.loc 6 426 0
 1558 0768 0E94 0000 		call SYS_Init
 427:ServerLLDN.c  **** 		/* Disable CSMA/CA
 428:ServerLLDN.c  **** 		 * Disable auto ACK
 429:ServerLLDN.c  **** 		 * Enable Rx of LLDN Frame Type as described in 802.15.4e - 2012 
 430:ServerLLDN.c  **** 		 */
 431:ServerLLDN.c  **** 
 432:ServerLLDN.c  **** 		sm_init();
 1559               		.loc 6 432 0
 1560 076c 0E94 0000 		call sm_init
 433:ServerLLDN.c  **** 
 434:ServerLLDN.c  **** 		// Initialize interrupt vector table support.
 435:ServerLLDN.c  **** 	#if (SIO2HOST_CHANNEL == SIO_USB)
 436:ServerLLDN.c  **** 		irq_initialize_vectors();
 437:ServerLLDN.c  **** 	#endif
 438:ServerLLDN.c  **** 		cpu_irq_enable();
 1561               		.loc 6 438 0
 1562               	/* #APP */
 1563               	 ;  438 "ServerLLDN.c" 1
 1564 0770 7894      		sei
 1565               	 ;  0 "" 2
 439:ServerLLDN.c  **** 
 440:ServerLLDN.c  **** 	#if 1
 441:ServerLLDN.c  **** 	#if (SIO2HOST_CHANNEL == SIO_USB)
 442:ServerLLDN.c  **** 		stdio_usb_init();
 443:ServerLLDN.c  **** 	#else
 444:ServerLLDN.c  **** 		const usart_serial_options_t usart_serial_options =
 1566               		.loc 6 444 0
 1567               	/* #NOAPP */
 1568 0772 27E0      		ldi r18,lo8(7)
 1569 0774 E0E0      		ldi r30,lo8(.LC0)
 1570 0776 F0E0      		ldi r31,hi8(.LC0)
 1571 0778 CE01      		movw r24,r28
 1572 077a 0196      		adiw r24,1
 1573 077c DC01      		movw r26,r24
 1574               		0:
 1575 077e 0190      		ld r0,Z+
 1576 0780 0D92      		st X+,r0
 1577 0782 2A95      		dec r18
 1578 0784 01F4      		brne 0b
 445:ServerLLDN.c  **** 		{
 446:ServerLLDN.c  **** 			.baudrate     = USART_HOST_BAUDRATE,
 447:ServerLLDN.c  **** 			.charlength   = USART_HOST_CHAR_LENGTH,
 448:ServerLLDN.c  **** 			.paritytype   = USART_HOST_PARITY,
 449:ServerLLDN.c  **** 			.stopbits     = USART_HOST_STOP_BITS
 450:ServerLLDN.c  **** 		};
 451:ServerLLDN.c  **** 
 452:ServerLLDN.c  **** 		stdio_serial_init(USART_HOST, &usart_serial_options);
 1579               		.loc 6 452 0
 1580 0786 CE01      		movw r24,r28
 1581 0788 0196      		adiw r24,1
 1582 078a BC01      		movw r22,r24
 1583 078c 80EC      		ldi r24,lo8(-64)
 1584 078e 90E0      		ldi r25,0
 1585 0790 0E94 0000 		call stdio_serial_init
 453:ServerLLDN.c  **** 		usart_double_baud_enable(USART_HOST);
 1586               		.loc 6 453 0
 1587 0794 80EC      		ldi r24,lo8(-64)
 1588 0796 90E0      		ldi r25,0
 1589 0798 0E94 0000 		call usart_double_baud_enable
 454:ServerLLDN.c  **** 		usart_set_baudrate_precalculated(USART_HOST, USART_HOST_BAUDRATE, sysclk_get_source_clock_hz());
 1590               		.loc 6 454 0
 1591 079c 0E94 0000 		call sysclk_get_source_clock_hz
 1592 07a0 DC01      		movw r26,r24
 1593 07a2 CB01      		movw r24,r22
 1594 07a4 8C01      		movw r16,r24
 1595 07a6 9D01      		movw r18,r26
 1596 07a8 40E0      		ldi r20,0
 1597 07aa 52EC      		ldi r21,lo8(-62)
 1598 07ac 61E0      		ldi r22,lo8(1)
 1599 07ae 70E0      		ldi r23,0
 1600 07b0 80EC      		ldi r24,lo8(-64)
 1601 07b2 90E0      		ldi r25,0
 1602 07b4 0E94 0000 		call usart_set_baudrate_precalculated
 1603               	.L55:
 455:ServerLLDN.c  **** 
 456:ServerLLDN.c  **** 	#endif
 457:ServerLLDN.c  **** 	#endif
 458:ServerLLDN.c  **** 		for(;;)
 459:ServerLLDN.c  **** 		{
 460:ServerLLDN.c  **** 			SYS_TaskHandler();
 1604               		.loc 6 460 0 discriminator 1
 1605 07b8 0E94 0000 		call SYS_TaskHandler
 461:ServerLLDN.c  **** 			APP_TaskHandler();
 1606               		.loc 6 461 0 discriminator 1
 1607 07bc 0E94 0000 		call APP_TaskHandler
 462:ServerLLDN.c  **** 		}
 1608               		.loc 6 462 0 discriminator 1
 1609 07c0 00C0      		rjmp .L55
 1610               		.cfi_endproc
 1611               	.LFE141:
 1613               	.Letext0:
 1614               		.file 7 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\in
 1615               		.file 8 "../../../stack/LwMesh/TDMA/nwk/inc/nwkRx.h"
 1616               		.file 9 "../../../stack/LwMesh/TDMA/nwk/inc/nwkDataReq.h"
 1617               		.file 10 "../../../stack/LwMesh/TDMA/sys/inc/sysTimer.h"
 1618               		.file 11 "../../../platform/mega_rf/drivers/sleep/sleep.h"
 1619               		.file 12 "lldn.h"
 1620               		.file 13 "../../../platform/mega_rf/utils/status_codes.h"
 1621               		.file 14 "config/config.h"
 1622               		.file 15 "../../../platform/common/services/sleepmgr/mega_rf/sleepmgr.h"
DEFINED SYMBOLS
                            *ABS*:00000000 ServerLLDN.c
C:\Users\guilh\AppData\Local\Temp\cciwFjUm.s:2      *ABS*:0000003e __SP_H__
C:\Users\guilh\AppData\Local\Temp\cciwFjUm.s:3      *ABS*:0000003d __SP_L__
C:\Users\guilh\AppData\Local\Temp\cciwFjUm.s:4      *ABS*:0000003f __SREG__
C:\Users\guilh\AppData\Local\Temp\cciwFjUm.s:5      *ABS*:0000003b __RAMPZ__
C:\Users\guilh\AppData\Local\Temp\cciwFjUm.s:6      *ABS*:00000000 __tmp_reg__
C:\Users\guilh\AppData\Local\Temp\cciwFjUm.s:7      *ABS*:00000001 __zero_reg__
                            *COM*:00000001 n
C:\Users\guilh\AppData\Local\Temp\cciwFjUm.s:15     .bss.tTS:00000000 tTS
C:\Users\guilh\AppData\Local\Temp\cciwFjUm.s:19     .text:00000000 sysclk_get_main_hz
C:\Users\guilh\AppData\Local\Temp\cciwFjUm.s:56     .text:0000001a sysclk_get_source_clock_hz
C:\Users\guilh\AppData\Local\Temp\cciwFjUm.s:93     .progmem.data.baudctrl_1mhz:00000000 baudctrl_1mhz
C:\Users\guilh\AppData\Local\Temp\cciwFjUm.s:105    .progmem.data.baudctrl_8mhz:00000000 baudctrl_8mhz
C:\Users\guilh\AppData\Local\Temp\cciwFjUm.s:117    .progmem.data.baudctrl_16mhz:00000000 baudctrl_16mhz
C:\Users\guilh\AppData\Local\Temp\cciwFjUm.s:128    .text:00000034 usart_double_baud_enable
C:\Users\guilh\AppData\Local\Temp\cciwFjUm.s:177    .text:00000062 usart_serial_init
C:\Users\guilh\AppData\Local\Temp\cciwFjUm.s:272    .text:000000de usart_serial_putchar
C:\Users\guilh\AppData\Local\Temp\cciwFjUm.s:316    .text:00000106 usart_serial_getchar
C:\Users\guilh\AppData\Local\Temp\cciwFjUm.s:367    .text:0000013c stdio_serial_init
C:\Users\guilh\AppData\Local\Temp\cciwFjUm.s:438    .text:0000019e macsc_enable_manual_bts
C:\Users\guilh\AppData\Local\Temp\cciwFjUm.s:491    .bss.appState:00000000 appState
C:\Users\guilh\AppData\Local\Temp\cciwFjUm.s:496    .bss.msgReq:00000000 msgReq
C:\Users\guilh\AppData\Local\Temp\cciwFjUm.s:501    .bss.PanId:00000000 PanId
C:\Users\guilh\AppData\Local\Temp\cciwFjUm.s:505    .text:000001d2 appSendData
C:\Users\guilh\AppData\Local\Temp\cciwFjUm.s:548    .bss.beaconInterval:00000000 beaconInterval
C:\Users\guilh\AppData\Local\Temp\cciwFjUm.s:553    .data.appPanState:00000000 appPanState
C:\Users\guilh\AppData\Local\Temp\cciwFjUm.s:558    .bss.ACKFrame:00000000 ACKFrame
C:\Users\guilh\AppData\Local\Temp\cciwFjUm.s:563    .bss.ACKFrame_size:00000000 ACKFrame_size
C:\Users\guilh\AppData\Local\Temp\cciwFjUm.s:568    .data.cycles_counter:00000000 cycles_counter
C:\Users\guilh\AppData\Local\Temp\cciwFjUm.s:574    .bss.counter_associados:00000000 counter_associados
C:\Users\guilh\AppData\Local\Temp\cciwFjUm.s:579    .bss.tmrDiscoveryMode:00000000 tmrDiscoveryMode
C:\Users\guilh\AppData\Local\Temp\cciwFjUm.s:583    .text:000001f6 tmrDiscoveryModeHandler
C:\Users\guilh\AppData\Local\Temp\cciwFjUm.s:625    .text:0000021a lldn_server_beacon
C:\Users\guilh\AppData\Local\Temp\cciwFjUm.s:660    .text:00000234 downlink_delay_handler
C:\Users\guilh\AppData\Local\Temp\cciwFjUm.s:696    .text:00000250 addToAckArray
C:\Users\guilh\AppData\Local\Temp\cciwFjUm.s:811    .text:000002fc appCommandInd
C:\Users\guilh\AppData\Local\Temp\cciwFjUm.s:917    .text:0000038a appPanPrepareACK
C:\Users\guilh\AppData\Local\Temp\cciwFjUm.s:969    .text:000003d0 appPanReset
C:\Users\guilh\AppData\Local\Temp\cciwFjUm.s:1058   .text:00000444 appPanDiscInit
C:\Users\guilh\AppData\Local\Temp\cciwFjUm.s:1224   .text:00000594 appInit
C:\Users\guilh\AppData\Local\Temp\cciwFjUm.s:1310   .text:00000614 APP_TaskHandler
C:\Users\guilh\AppData\Local\Temp\cciwFjUm.s:1517   .text:00000748 main

UNDEFINED SYMBOLS
usart_init_rs232
usart_putchar
usart_getchar
stdio_base
ptr_put
ptr_get
_read
_write
fdevopen
NWK_DataReq
macsc_disable_cmp_int
__floatsisf
__addsf3
__divsf3
__mulsf3
__fixunssfsi
macsc_set_cmp1_int_cb
macsc_set_cmp2_int_cb
macsc_enable_cmp_int
macsc_use_cmp
NWK_SetAddr
PHY_SetChannel
PHY_SetRxState
SYS_TimerStart
NWK_SetPanId
PHY_SetTdmaMode
NWK_OpenEndpoint
PHY_SetPromiscuousMode
printf
sysclk_init
board_init
SYS_Init
sm_init
usart_set_baudrate_precalculated
SYS_TaskHandler
__do_copy_data
__do_clear_bss
