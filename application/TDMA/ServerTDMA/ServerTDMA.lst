   1              	 .cpu cortex-m4
   2              	 .eabi_attribute 20,1
   3              	 .eabi_attribute 21,1
   4              	 .eabi_attribute 23,3
   5              	 .eabi_attribute 24,1
   6              	 .eabi_attribute 25,1
   7              	 .eabi_attribute 26,1
   8              	 .eabi_attribute 30,6
   9              	 .eabi_attribute 34,1
  10              	 .eabi_attribute 18,4
  11              	 .file "ServerTDMA.c"
  12              	 .text
  13              	.Ltext0:
  14              	 .cfi_sections .debug_frame
  15              	 .section .bss.cpu_irq_critical_section_counter,"aw",%nobits
  16              	 .align 2
  19              	cpu_irq_critical_section_counter:
  20 0000 00000000 	 .space 4
  21              	 .section .bss.cpu_irq_prev_interrupt_state,"aw",%nobits
  24              	cpu_irq_prev_interrupt_state:
  25 0000 00       	 .space 1
  26              	 .comm n,1,1
  27              	 .section .bss.tTS,"aw",%nobits
  28              	 .align 2
  31              	tTS:
  32 0000 00000000 	 .space 4
  33              	 .text
  34              	 .align 1
  35              	 .syntax unified
  36              	 .thumb
  37              	 .thumb_func
  38              	 .fpu softvfp
  40              	ioport_set_pin_level:
  41              	.LFB221:
  42              	 .file 1 "../../../platform/common/services/ioport/ioport.h"
   1:../../../platform/common/services/ioport/ioport.h **** /**
   2:../../../platform/common/services/ioport/ioport.h ****  * \file
   3:../../../platform/common/services/ioport/ioport.h ****  *
   4:../../../platform/common/services/ioport/ioport.h ****  * \brief Common IOPORT service main header file for AVR, UC3 and ARM
   5:../../../platform/common/services/ioport/ioport.h ****  *        architectures.
   6:../../../platform/common/services/ioport/ioport.h ****  *
   7:../../../platform/common/services/ioport/ioport.h ****  * Copyright (c) 2012 Atmel Corporation. All rights reserved.
   8:../../../platform/common/services/ioport/ioport.h ****  *
   9:../../../platform/common/services/ioport/ioport.h ****  * \asf_license_start
  10:../../../platform/common/services/ioport/ioport.h ****  *
  11:../../../platform/common/services/ioport/ioport.h ****  * \page License
  12:../../../platform/common/services/ioport/ioport.h ****  *
  13:../../../platform/common/services/ioport/ioport.h ****  * Redistribution and use in source and binary forms, with or without
  14:../../../platform/common/services/ioport/ioport.h ****  * modification, are permitted provided that the following conditions are met:
  15:../../../platform/common/services/ioport/ioport.h ****  *
  16:../../../platform/common/services/ioport/ioport.h ****  * 1. Redistributions of source code must retain the above copyright notice,
  17:../../../platform/common/services/ioport/ioport.h ****  *    this list of conditions and the following disclaimer.
  18:../../../platform/common/services/ioport/ioport.h ****  *
  19:../../../platform/common/services/ioport/ioport.h ****  * 2. Redistributions in binary form must reproduce the above copyright notice,
  20:../../../platform/common/services/ioport/ioport.h ****  *    this list of conditions and the following disclaimer in the documentation
  21:../../../platform/common/services/ioport/ioport.h ****  *    and/or other materials provided with the distribution.
  22:../../../platform/common/services/ioport/ioport.h ****  *
  23:../../../platform/common/services/ioport/ioport.h ****  * 3. The name of Atmel may not be used to endorse or promote products derived
  24:../../../platform/common/services/ioport/ioport.h ****  *    from this software without specific prior written permission.
  25:../../../platform/common/services/ioport/ioport.h ****  *
  26:../../../platform/common/services/ioport/ioport.h ****  * 4. This software may only be redistributed and used in connection with an
  27:../../../platform/common/services/ioport/ioport.h ****  *    Atmel microcontroller product.
  28:../../../platform/common/services/ioport/ioport.h ****  *
  29:../../../platform/common/services/ioport/ioport.h ****  * THIS SOFTWARE IS PROVIDED BY ATMEL "AS IS" AND ANY EXPRESS OR IMPLIED
  30:../../../platform/common/services/ioport/ioport.h ****  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
  31:../../../platform/common/services/ioport/ioport.h ****  * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE
  32:../../../platform/common/services/ioport/ioport.h ****  * EXPRESSLY AND SPECIFICALLY DISCLAIMED. IN NO EVENT SHALL ATMEL BE LIABLE FOR
  33:../../../platform/common/services/ioport/ioport.h ****  * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  34:../../../platform/common/services/ioport/ioport.h ****  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
  35:../../../platform/common/services/ioport/ioport.h ****  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
  36:../../../platform/common/services/ioport/ioport.h ****  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
  37:../../../platform/common/services/ioport/ioport.h ****  * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
  38:../../../platform/common/services/ioport/ioport.h ****  * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  39:../../../platform/common/services/ioport/ioport.h ****  * POSSIBILITY OF SUCH DAMAGE.
  40:../../../platform/common/services/ioport/ioport.h ****  *
  41:../../../platform/common/services/ioport/ioport.h ****  * \asf_license_stop
  42:../../../platform/common/services/ioport/ioport.h ****  *
  43:../../../platform/common/services/ioport/ioport.h ****  */
  44:../../../platform/common/services/ioport/ioport.h **** #ifndef IOPORT_H
  45:../../../platform/common/services/ioport/ioport.h **** #define IOPORT_H
  46:../../../platform/common/services/ioport/ioport.h **** 
  47:../../../platform/common/services/ioport/ioport.h **** #ifdef __cplusplus
  48:../../../platform/common/services/ioport/ioport.h **** extern "C" {
  49:../../../platform/common/services/ioport/ioport.h **** #endif
  50:../../../platform/common/services/ioport/ioport.h **** 
  51:../../../platform/common/services/ioport/ioport.h **** #include <parts.h>
  52:../../../platform/common/services/ioport/ioport.h **** #include <compiler.h>
  53:../../../platform/common/services/ioport/ioport.h **** 
  54:../../../platform/common/services/ioport/ioport.h **** /**
  55:../../../platform/common/services/ioport/ioport.h ****  * \defgroup ioport_group Common IOPORT API
  56:../../../platform/common/services/ioport/ioport.h ****  *
  57:../../../platform/common/services/ioport/ioport.h ****  * See \ref ioport_quickstart.
  58:../../../platform/common/services/ioport/ioport.h ****  *
  59:../../../platform/common/services/ioport/ioport.h ****  * This is common IOPORT service for GPIO pin configuration and control in a
  60:../../../platform/common/services/ioport/ioport.h ****  * standardized manner across the MEGA, MEGA_RF, XMEGA, UC3 and ARM devices.
  61:../../../platform/common/services/ioport/ioport.h ****  *
  62:../../../platform/common/services/ioport/ioport.h ****  * Port pin control code is optimized for each platform, and should produce
  63:../../../platform/common/services/ioport/ioport.h ****  * both compact and fast execution times when used with constant values.
  64:../../../platform/common/services/ioport/ioport.h ****  *
  65:../../../platform/common/services/ioport/ioport.h ****  * \section dependencies Dependencies
  66:../../../platform/common/services/ioport/ioport.h ****  * This driver depends on the following modules:
  67:../../../platform/common/services/ioport/ioport.h ****  * - \ref sysclk_group for clock speed and functions.
  68:../../../platform/common/services/ioport/ioport.h ****  * @{
  69:../../../platform/common/services/ioport/ioport.h ****  */
  70:../../../platform/common/services/ioport/ioport.h **** 
  71:../../../platform/common/services/ioport/ioport.h **** /**
  72:../../../platform/common/services/ioport/ioport.h ****  * \def IOPORT_CREATE_PIN(port, pin)
  73:../../../platform/common/services/ioport/ioport.h ****  * \brief Create IOPORT pin number
  74:../../../platform/common/services/ioport/ioport.h ****  *
  75:../../../platform/common/services/ioport/ioport.h ****  * Create a IOPORT pin number for use with the IOPORT functions.
  76:../../../platform/common/services/ioport/ioport.h ****  *
  77:../../../platform/common/services/ioport/ioport.h ****  * \param port IOPORT port (e.g. PORTA, PA or PIOA depending on chosen
  78:../../../platform/common/services/ioport/ioport.h ****  *             architecture)
  79:../../../platform/common/services/ioport/ioport.h ****  * \param pin IOPORT zero-based index of the I/O pin
  80:../../../platform/common/services/ioport/ioport.h ****  */
  81:../../../platform/common/services/ioport/ioport.h **** 
  82:../../../platform/common/services/ioport/ioport.h **** /** \brief IOPORT pin directions */
  83:../../../platform/common/services/ioport/ioport.h **** enum ioport_direction {
  84:../../../platform/common/services/ioport/ioport.h **** 	IOPORT_DIR_INPUT,  /*!< IOPORT input direction */
  85:../../../platform/common/services/ioport/ioport.h **** 	IOPORT_DIR_OUTPUT, /*!< IOPORT output direction */
  86:../../../platform/common/services/ioport/ioport.h **** };
  87:../../../platform/common/services/ioport/ioport.h **** 
  88:../../../platform/common/services/ioport/ioport.h **** /** \brief IOPORT levels */
  89:../../../platform/common/services/ioport/ioport.h **** enum ioport_value {
  90:../../../platform/common/services/ioport/ioport.h **** 	IOPORT_PIN_LEVEL_LOW,  /*!< IOPORT pin value low */
  91:../../../platform/common/services/ioport/ioport.h **** 	IOPORT_PIN_LEVEL_HIGH, /*!< IOPORT pin value high */
  92:../../../platform/common/services/ioport/ioport.h **** };
  93:../../../platform/common/services/ioport/ioport.h **** 
  94:../../../platform/common/services/ioport/ioport.h **** #if MEGA_RF
  95:../../../platform/common/services/ioport/ioport.h **** /** \brief IOPORT edge sense modes */
  96:../../../platform/common/services/ioport/ioport.h **** enum ioport_sense {
  97:../../../platform/common/services/ioport/ioport.h **** 	IOPORT_SENSE_LEVEL,     /*!< IOPORT sense low level  */
  98:../../../platform/common/services/ioport/ioport.h **** 	IOPORT_SENSE_BOTHEDGES, /*!< IOPORT sense both rising and falling edges */
  99:../../../platform/common/services/ioport/ioport.h **** 	IOPORT_SENSE_FALLING,   /*!< IOPORT sense falling edges */
 100:../../../platform/common/services/ioport/ioport.h **** 	IOPORT_SENSE_RISING,    /*!< IOPORT sense rising edges */
 101:../../../platform/common/services/ioport/ioport.h **** };
 102:../../../platform/common/services/ioport/ioport.h **** #elif SAM && !SAM4L
 103:../../../platform/common/services/ioport/ioport.h **** /** \brief IOPORT edge sense modes */
 104:../../../platform/common/services/ioport/ioport.h **** enum ioport_sense {
 105:../../../platform/common/services/ioport/ioport.h **** 	IOPORT_SENSE_BOTHEDGES, /*!< IOPORT sense both rising and falling edges */
 106:../../../platform/common/services/ioport/ioport.h **** 	IOPORT_SENSE_FALLING,   /*!< IOPORT sense falling edges */
 107:../../../platform/common/services/ioport/ioport.h **** 	IOPORT_SENSE_RISING,    /*!< IOPORT sense rising edges */
 108:../../../platform/common/services/ioport/ioport.h **** 	IOPORT_SENSE_LEVEL_LOW, /*!< IOPORT sense low level  */
 109:../../../platform/common/services/ioport/ioport.h **** 	IOPORT_SENSE_LEVEL_HIGH,/*!< IOPORT sense High level  */
 110:../../../platform/common/services/ioport/ioport.h **** };
 111:../../../platform/common/services/ioport/ioport.h **** #else
 112:../../../platform/common/services/ioport/ioport.h **** enum ioport_sense {
 113:../../../platform/common/services/ioport/ioport.h **** 	IOPORT_SENSE_BOTHEDGES, /*!< IOPORT sense both rising and falling edges */
 114:../../../platform/common/services/ioport/ioport.h **** 	IOPORT_SENSE_RISING,    /*!< IOPORT sense rising edges */
 115:../../../platform/common/services/ioport/ioport.h **** 	IOPORT_SENSE_FALLING,   /*!< IOPORT sense falling edges */
 116:../../../platform/common/services/ioport/ioport.h **** };
 117:../../../platform/common/services/ioport/ioport.h **** #endif
 118:../../../platform/common/services/ioport/ioport.h **** 
 119:../../../platform/common/services/ioport/ioport.h **** 
 120:../../../platform/common/services/ioport/ioport.h **** #if XMEGA
 121:../../../platform/common/services/ioport/ioport.h **** # include "xmega/ioport.h"
 122:../../../platform/common/services/ioport/ioport.h **** # if defined(IOPORT_XMEGA_COMPAT)
 123:../../../platform/common/services/ioport/ioport.h **** #  include "xmega/ioport_compat.h"
 124:../../../platform/common/services/ioport/ioport.h **** # endif
 125:../../../platform/common/services/ioport/ioport.h **** #elif MEGA
 126:../../../platform/common/services/ioport/ioport.h **** #  include "mega_rf/ioport.h"
 127:../../../platform/common/services/ioport/ioport.h **** #elif UC3
 128:../../../platform/common/services/ioport/ioport.h **** # include "uc3/ioport.h"
 129:../../../platform/common/services/ioport/ioport.h **** #elif SAM
 130:../../../platform/common/services/ioport/ioport.h **** # if SAM4L
 131:../../../platform/common/services/ioport/ioport.h **** #  include "sam/ioport_gpio.h"
 132:../../../platform/common/services/ioport/ioport.h **** # elif SAMD20
 133:../../../platform/common/services/ioport/ioport.h **** #  include "sam0/ioport.h"
 134:../../../platform/common/services/ioport/ioport.h **** # else
 135:../../../platform/common/services/ioport/ioport.h **** #  include "sam/ioport_pio.h"
 136:../../../platform/common/services/ioport/ioport.h **** # endif
 137:../../../platform/common/services/ioport/ioport.h **** #endif
 138:../../../platform/common/services/ioport/ioport.h **** 
 139:../../../platform/common/services/ioport/ioport.h **** /**
 140:../../../platform/common/services/ioport/ioport.h ****  * \brief Initializes the IOPORT service, ready for use.
 141:../../../platform/common/services/ioport/ioport.h ****  *
 142:../../../platform/common/services/ioport/ioport.h ****  * This function must be called before using any other functions in the IOPORT
 143:../../../platform/common/services/ioport/ioport.h ****  * service.
 144:../../../platform/common/services/ioport/ioport.h ****  */
 145:../../../platform/common/services/ioport/ioport.h **** static inline void ioport_init(void)
 146:../../../platform/common/services/ioport/ioport.h **** {
 147:../../../platform/common/services/ioport/ioport.h **** 	arch_ioport_init();
 148:../../../platform/common/services/ioport/ioport.h **** }
 149:../../../platform/common/services/ioport/ioport.h **** 
 150:../../../platform/common/services/ioport/ioport.h **** /**
 151:../../../platform/common/services/ioport/ioport.h ****  * \brief Enable an IOPORT pin, based on a pin created with \ref
 152:../../../platform/common/services/ioport/ioport.h ****  * IOPORT_CREATE_PIN().
 153:../../../platform/common/services/ioport/ioport.h ****  *
 154:../../../platform/common/services/ioport/ioport.h ****  * \param pin  IOPORT pin to enable
 155:../../../platform/common/services/ioport/ioport.h ****  */
 156:../../../platform/common/services/ioport/ioport.h **** static inline void ioport_enable_pin(ioport_pin_t pin)
 157:../../../platform/common/services/ioport/ioport.h **** {
 158:../../../platform/common/services/ioport/ioport.h **** 	arch_ioport_enable_pin(pin);
 159:../../../platform/common/services/ioport/ioport.h **** }
 160:../../../platform/common/services/ioport/ioport.h **** 
 161:../../../platform/common/services/ioport/ioport.h **** /**
 162:../../../platform/common/services/ioport/ioport.h ****  * \brief Enable multiple pins in a single IOPORT port.
 163:../../../platform/common/services/ioport/ioport.h ****  *
 164:../../../platform/common/services/ioport/ioport.h ****  * \param port IOPORT port to enable
 165:../../../platform/common/services/ioport/ioport.h ****  * \param mask Mask of pins within the port to enable
 166:../../../platform/common/services/ioport/ioport.h ****  */
 167:../../../platform/common/services/ioport/ioport.h **** static inline void ioport_enable_port(ioport_port_t port,
 168:../../../platform/common/services/ioport/ioport.h **** 		ioport_port_mask_t mask)
 169:../../../platform/common/services/ioport/ioport.h **** {
 170:../../../platform/common/services/ioport/ioport.h **** 	arch_ioport_enable_port(port, mask);
 171:../../../platform/common/services/ioport/ioport.h **** }
 172:../../../platform/common/services/ioport/ioport.h **** 
 173:../../../platform/common/services/ioport/ioport.h **** /**
 174:../../../platform/common/services/ioport/ioport.h ****  * \brief Disable IOPORT pin, based on a pin created with \ref
 175:../../../platform/common/services/ioport/ioport.h ****  *        IOPORT_CREATE_PIN().
 176:../../../platform/common/services/ioport/ioport.h ****  *
 177:../../../platform/common/services/ioport/ioport.h ****  * \param pin IOPORT pin to disable
 178:../../../platform/common/services/ioport/ioport.h ****  */
 179:../../../platform/common/services/ioport/ioport.h **** static inline void ioport_disable_pin(ioport_pin_t pin)
 180:../../../platform/common/services/ioport/ioport.h **** {
 181:../../../platform/common/services/ioport/ioport.h **** 	arch_ioport_disable_pin(pin);
 182:../../../platform/common/services/ioport/ioport.h **** }
 183:../../../platform/common/services/ioport/ioport.h **** 
 184:../../../platform/common/services/ioport/ioport.h **** /**
 185:../../../platform/common/services/ioport/ioport.h ****  * \brief Disable multiple pins in a single IOPORT port.
 186:../../../platform/common/services/ioport/ioport.h ****  *
 187:../../../platform/common/services/ioport/ioport.h ****  * \param port IOPORT port to disable
 188:../../../platform/common/services/ioport/ioport.h ****  * \param mask Pin mask of pins to disable
 189:../../../platform/common/services/ioport/ioport.h ****  */
 190:../../../platform/common/services/ioport/ioport.h **** static inline void ioport_disable_port(ioport_port_t port,
 191:../../../platform/common/services/ioport/ioport.h **** 		ioport_port_mask_t mask)
 192:../../../platform/common/services/ioport/ioport.h **** {
 193:../../../platform/common/services/ioport/ioport.h **** 	arch_ioport_disable_port(port, mask);
 194:../../../platform/common/services/ioport/ioport.h **** }
 195:../../../platform/common/services/ioport/ioport.h **** 
 196:../../../platform/common/services/ioport/ioport.h **** /**
 197:../../../platform/common/services/ioport/ioport.h ****  * \brief Set multiple pin modes in a single IOPORT port, such as pull-up,
 198:../../../platform/common/services/ioport/ioport.h ****  * pull-down, etc. configuration.
 199:../../../platform/common/services/ioport/ioport.h ****  *
 200:../../../platform/common/services/ioport/ioport.h ****  * \param port IOPORT port to configure
 201:../../../platform/common/services/ioport/ioport.h ****  * \param mask Pin mask of pins to configure
 202:../../../platform/common/services/ioport/ioport.h ****  * \param mode Mode masks to configure for the specified pins (\ref
 203:../../../platform/common/services/ioport/ioport.h ****  * ioport_modes)
 204:../../../platform/common/services/ioport/ioport.h ****  */
 205:../../../platform/common/services/ioport/ioport.h **** static inline void ioport_set_port_mode(ioport_port_t port,
 206:../../../platform/common/services/ioport/ioport.h **** 		ioport_port_mask_t mask, ioport_mode_t mode)
 207:../../../platform/common/services/ioport/ioport.h **** {
 208:../../../platform/common/services/ioport/ioport.h **** 	arch_ioport_set_port_mode(port, mask, mode);
 209:../../../platform/common/services/ioport/ioport.h **** }
 210:../../../platform/common/services/ioport/ioport.h **** 
 211:../../../platform/common/services/ioport/ioport.h **** /**
 212:../../../platform/common/services/ioport/ioport.h ****  * \brief Set pin mode for one single IOPORT pin.
 213:../../../platform/common/services/ioport/ioport.h ****  *
 214:../../../platform/common/services/ioport/ioport.h ****  * \param pin IOPORT pin to configure
 215:../../../platform/common/services/ioport/ioport.h ****  * \param mode Mode masks to configure for the specified pin (\ref ioport_modes)
 216:../../../platform/common/services/ioport/ioport.h ****  */
 217:../../../platform/common/services/ioport/ioport.h **** static inline void ioport_set_pin_mode(ioport_pin_t pin, ioport_mode_t mode)
 218:../../../platform/common/services/ioport/ioport.h **** {
 219:../../../platform/common/services/ioport/ioport.h **** 	arch_ioport_set_pin_mode(pin, mode);
 220:../../../platform/common/services/ioport/ioport.h **** }
 221:../../../platform/common/services/ioport/ioport.h **** 
 222:../../../platform/common/services/ioport/ioport.h **** /**
 223:../../../platform/common/services/ioport/ioport.h ****  * \brief Reset multiple pin modes in a specified IOPORT port to defaults.
 224:../../../platform/common/services/ioport/ioport.h ****  *
 225:../../../platform/common/services/ioport/ioport.h ****  * \param port IOPORT port to configure
 226:../../../platform/common/services/ioport/ioport.h ****  * \param mask Mask of pins whose mode configuration is to be reset
 227:../../../platform/common/services/ioport/ioport.h ****  */
 228:../../../platform/common/services/ioport/ioport.h **** static inline void ioport_reset_port_mode(ioport_port_t port,
 229:../../../platform/common/services/ioport/ioport.h **** 		ioport_port_mask_t mask)
 230:../../../platform/common/services/ioport/ioport.h **** {
 231:../../../platform/common/services/ioport/ioport.h **** 	arch_ioport_set_port_mode(port, mask, 0);
 232:../../../platform/common/services/ioport/ioport.h **** }
 233:../../../platform/common/services/ioport/ioport.h **** 
 234:../../../platform/common/services/ioport/ioport.h **** /**
 235:../../../platform/common/services/ioport/ioport.h ****  * \brief Reset pin mode configuration for a single IOPORT pin
 236:../../../platform/common/services/ioport/ioport.h ****  *
 237:../../../platform/common/services/ioport/ioport.h ****  * \param pin IOPORT pin to configure
 238:../../../platform/common/services/ioport/ioport.h ****  */
 239:../../../platform/common/services/ioport/ioport.h **** static inline void ioport_reset_pin_mode(ioport_pin_t pin)
 240:../../../platform/common/services/ioport/ioport.h **** {
 241:../../../platform/common/services/ioport/ioport.h **** 	arch_ioport_set_pin_mode(pin, 0);
 242:../../../platform/common/services/ioport/ioport.h **** }
 243:../../../platform/common/services/ioport/ioport.h **** 
 244:../../../platform/common/services/ioport/ioport.h **** /**
 245:../../../platform/common/services/ioport/ioport.h ****  * \brief Set I/O direction for a group of pins in a single IOPORT.
 246:../../../platform/common/services/ioport/ioport.h ****  *
 247:../../../platform/common/services/ioport/ioport.h ****  * \param port IOPORT port to configure
 248:../../../platform/common/services/ioport/ioport.h ****  * \param mask Pin mask of pins to configure
 249:../../../platform/common/services/ioport/ioport.h ****  * \param dir Direction to set for the specified pins (\ref ioport_direction)
 250:../../../platform/common/services/ioport/ioport.h ****  */
 251:../../../platform/common/services/ioport/ioport.h **** static inline void ioport_set_port_dir(ioport_port_t port,
 252:../../../platform/common/services/ioport/ioport.h **** 		ioport_port_mask_t mask, enum ioport_direction dir)
 253:../../../platform/common/services/ioport/ioport.h **** {
 254:../../../platform/common/services/ioport/ioport.h **** 	arch_ioport_set_port_dir(port, mask, dir);
 255:../../../platform/common/services/ioport/ioport.h **** }
 256:../../../platform/common/services/ioport/ioport.h **** 
 257:../../../platform/common/services/ioport/ioport.h **** /**
 258:../../../platform/common/services/ioport/ioport.h ****  * \brief Set direction for a single IOPORT pin.
 259:../../../platform/common/services/ioport/ioport.h ****  *
 260:../../../platform/common/services/ioport/ioport.h ****  * \param pin IOPORT pin to configure
 261:../../../platform/common/services/ioport/ioport.h ****  * \param dir Direction to set for the specified pin (\ref ioport_direction)
 262:../../../platform/common/services/ioport/ioport.h ****  */
 263:../../../platform/common/services/ioport/ioport.h **** static inline void ioport_set_pin_dir(ioport_pin_t pin,
 264:../../../platform/common/services/ioport/ioport.h **** 		enum ioport_direction dir)
 265:../../../platform/common/services/ioport/ioport.h **** {
 266:../../../platform/common/services/ioport/ioport.h **** 	arch_ioport_set_pin_dir(pin, dir);
 267:../../../platform/common/services/ioport/ioport.h **** }
 268:../../../platform/common/services/ioport/ioport.h **** 
 269:../../../platform/common/services/ioport/ioport.h **** /**
 270:../../../platform/common/services/ioport/ioport.h ****  * \brief Set an IOPORT pin to a specified logical value.
 271:../../../platform/common/services/ioport/ioport.h ****  *
 272:../../../platform/common/services/ioport/ioport.h ****  * \param pin IOPORT pin to configure
 273:../../../platform/common/services/ioport/ioport.h ****  * \param level Logical value of the pin
 274:../../../platform/common/services/ioport/ioport.h ****  */
 275:../../../platform/common/services/ioport/ioport.h **** static inline void ioport_set_pin_level(ioport_pin_t pin, bool level)
 276:../../../platform/common/services/ioport/ioport.h **** {
  43              	 .loc 1 276 0
  44              	 .cfi_startproc
  45              	 
  46              	 
  47              	 
  48 0000 80B4     	 push {r7}
  49              	.LCFI0:
  50              	 .cfi_def_cfa_offset 4
  51              	 .cfi_offset 7,-4
  52 0002 8DB0     	 sub sp,sp,#52
  53              	.LCFI1:
  54              	 .cfi_def_cfa_offset 56
  55 0004 00AF     	 add r7,sp,#0
  56              	.LCFI2:
  57              	 .cfi_def_cfa_register 7
  58 0006 7860     	 str r0,[r7,#4]
  59 0008 0B46     	 mov r3,r1
  60 000a FB70     	 strb r3,[r7,#3]
  61 000c 7B68     	 ldr r3,[r7,#4]
  62 000e FB62     	 str r3,[r7,#44]
  63 0010 FB78     	 ldrb r3,[r7,#3]
  64 0012 87F82B30 	 strb r3,[r7,#43]
  65              	.LBB62:
  66              	.LBB63:
  67              	 .file 2 "../../../platform/common/services/ioport/sam/ioport_gpio.h"
   1:../../../platform/common/services/ioport/sam/ioport_gpio.h **** /**
   2:../../../platform/common/services/ioport/sam/ioport_gpio.h ****  * \file
   3:../../../platform/common/services/ioport/sam/ioport_gpio.h ****  *
   4:../../../platform/common/services/ioport/sam/ioport_gpio.h ****  * \brief SAM architecture specific IOPORT service implementation header file.
   5:../../../platform/common/services/ioport/sam/ioport_gpio.h ****  *
   6:../../../platform/common/services/ioport/sam/ioport_gpio.h ****  * Copyright (c) 2012-2013 Atmel Corporation. All rights reserved.
   7:../../../platform/common/services/ioport/sam/ioport_gpio.h ****  *
   8:../../../platform/common/services/ioport/sam/ioport_gpio.h ****  * \asf_license_start
   9:../../../platform/common/services/ioport/sam/ioport_gpio.h ****  *
  10:../../../platform/common/services/ioport/sam/ioport_gpio.h ****  * \page License
  11:../../../platform/common/services/ioport/sam/ioport_gpio.h ****  *
  12:../../../platform/common/services/ioport/sam/ioport_gpio.h ****  * Redistribution and use in source and binary forms, with or without
  13:../../../platform/common/services/ioport/sam/ioport_gpio.h ****  * modification, are permitted provided that the following conditions are met:
  14:../../../platform/common/services/ioport/sam/ioport_gpio.h ****  *
  15:../../../platform/common/services/ioport/sam/ioport_gpio.h ****  * 1. Redistributions of source code must retain the above copyright notice,
  16:../../../platform/common/services/ioport/sam/ioport_gpio.h ****  *    this list of conditions and the following disclaimer.
  17:../../../platform/common/services/ioport/sam/ioport_gpio.h ****  *
  18:../../../platform/common/services/ioport/sam/ioport_gpio.h ****  * 2. Redistributions in binary form must reproduce the above copyright notice,
  19:../../../platform/common/services/ioport/sam/ioport_gpio.h ****  *    this list of conditions and the following disclaimer in the documentation
  20:../../../platform/common/services/ioport/sam/ioport_gpio.h ****  *    and/or other materials provided with the distribution.
  21:../../../platform/common/services/ioport/sam/ioport_gpio.h ****  *
  22:../../../platform/common/services/ioport/sam/ioport_gpio.h ****  * 3. The name of Atmel may not be used to endorse or promote products derived
  23:../../../platform/common/services/ioport/sam/ioport_gpio.h ****  *    from this software without specific prior written permission.
  24:../../../platform/common/services/ioport/sam/ioport_gpio.h ****  *
  25:../../../platform/common/services/ioport/sam/ioport_gpio.h ****  * 4. This software may only be redistributed and used in connection with an
  26:../../../platform/common/services/ioport/sam/ioport_gpio.h ****  *    Atmel microcontroller product.
  27:../../../platform/common/services/ioport/sam/ioport_gpio.h ****  *
  28:../../../platform/common/services/ioport/sam/ioport_gpio.h ****  * THIS SOFTWARE IS PROVIDED BY ATMEL "AS IS" AND ANY EXPRESS OR IMPLIED
  29:../../../platform/common/services/ioport/sam/ioport_gpio.h ****  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
  30:../../../platform/common/services/ioport/sam/ioport_gpio.h ****  * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE
  31:../../../platform/common/services/ioport/sam/ioport_gpio.h ****  * EXPRESSLY AND SPECIFICALLY DISCLAIMED. IN NO EVENT SHALL ATMEL BE LIABLE FOR
  32:../../../platform/common/services/ioport/sam/ioport_gpio.h ****  * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  33:../../../platform/common/services/ioport/sam/ioport_gpio.h ****  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
  34:../../../platform/common/services/ioport/sam/ioport_gpio.h ****  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
  35:../../../platform/common/services/ioport/sam/ioport_gpio.h ****  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
  36:../../../platform/common/services/ioport/sam/ioport_gpio.h ****  * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
  37:../../../platform/common/services/ioport/sam/ioport_gpio.h ****  * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  38:../../../platform/common/services/ioport/sam/ioport_gpio.h ****  * POSSIBILITY OF SUCH DAMAGE.
  39:../../../platform/common/services/ioport/sam/ioport_gpio.h ****  *
  40:../../../platform/common/services/ioport/sam/ioport_gpio.h ****  * \asf_license_stop
  41:../../../platform/common/services/ioport/sam/ioport_gpio.h ****  *
  42:../../../platform/common/services/ioport/sam/ioport_gpio.h ****  */
  43:../../../platform/common/services/ioport/sam/ioport_gpio.h **** #ifndef IOPORT_SAM_H
  44:../../../platform/common/services/ioport/sam/ioport_gpio.h **** #define IOPORT_SAM_H
  45:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 
  46:../../../platform/common/services/ioport/sam/ioport_gpio.h **** #include <sysclk.h>
  47:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 
  48:../../../platform/common/services/ioport/sam/ioport_gpio.h **** #define IOPORT_CREATE_PIN(port, pin) ((port) * 32 + (pin))
  49:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 
  50:../../../platform/common/services/ioport/sam/ioport_gpio.h **** // Aliases
  51:../../../platform/common/services/ioport/sam/ioport_gpio.h **** #define IOPORT_GPIOA     0
  52:../../../platform/common/services/ioport/sam/ioport_gpio.h **** #define IOPORT_GPIOB     1
  53:../../../platform/common/services/ioport/sam/ioport_gpio.h **** #define IOPORT_GPIOC     2
  54:../../../platform/common/services/ioport/sam/ioport_gpio.h **** #define IOPORT_GPIOD     3
  55:../../../platform/common/services/ioport/sam/ioport_gpio.h **** #define IOPORT_GPIOE     4
  56:../../../platform/common/services/ioport/sam/ioport_gpio.h **** #define IOPORT_GPIOF     5
  57:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 
  58:../../../platform/common/services/ioport/sam/ioport_gpio.h **** /**
  59:../../../platform/common/services/ioport/sam/ioport_gpio.h ****  * \weakgroup ioport_group
  60:../../../platform/common/services/ioport/sam/ioport_gpio.h ****  * \section ioport_modes IOPORT Modes
  61:../../../platform/common/services/ioport/sam/ioport_gpio.h ****  *
  62:../../../platform/common/services/ioport/sam/ioport_gpio.h ****  * For details on these please see the device datasheet.
  63:../../../platform/common/services/ioport/sam/ioport_gpio.h ****  *
  64:../../../platform/common/services/ioport/sam/ioport_gpio.h ****  * @{
  65:../../../platform/common/services/ioport/sam/ioport_gpio.h ****  */
  66:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 
  67:../../../platform/common/services/ioport/sam/ioport_gpio.h **** /** \name IOPORT Mode bit definitions */
  68:../../../platform/common/services/ioport/sam/ioport_gpio.h **** /** @{ */
  69:../../../platform/common/services/ioport/sam/ioport_gpio.h **** #define IOPORT_MODE_MUX_MASK            (7 << 0) /*!< MUX bits mask */
  70:../../../platform/common/services/ioport/sam/ioport_gpio.h **** #define IOPORT_MODE_MUX_BIT0            (1 << 0) /*!< MUX BIT0 mask */
  71:../../../platform/common/services/ioport/sam/ioport_gpio.h **** #define IOPORT_MODE_MUX_BIT1            (1 << 1) /*!< MUX BIT1 mask */
  72:../../../platform/common/services/ioport/sam/ioport_gpio.h **** #define IOPORT_MODE_MUX_A               (0 << 0) /*!< MUX function A */
  73:../../../platform/common/services/ioport/sam/ioport_gpio.h **** #define IOPORT_MODE_MUX_B               (1 << 0) /*!< MUX function B */
  74:../../../platform/common/services/ioport/sam/ioport_gpio.h **** #define IOPORT_MODE_MUX_C               (2 << 0) /*!< MUX function C */
  75:../../../platform/common/services/ioport/sam/ioport_gpio.h **** #define IOPORT_MODE_MUX_D               (3 << 0) /*!< MUX function D */
  76:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 
  77:../../../platform/common/services/ioport/sam/ioport_gpio.h **** #define IOPORT_MODE_MUX_BIT2            (1 << 2) /*!< MUX BIT2 mask */
  78:../../../platform/common/services/ioport/sam/ioport_gpio.h **** #define IOPORT_MODE_MUX_E               (4 << 0) /*!< MUX function E */
  79:../../../platform/common/services/ioport/sam/ioport_gpio.h **** #define IOPORT_MODE_MUX_F               (5 << 0) /*!< MUX function F */
  80:../../../platform/common/services/ioport/sam/ioport_gpio.h **** #define IOPORT_MODE_MUX_G               (6 << 0) /*!< MUX function G */
  81:../../../platform/common/services/ioport/sam/ioport_gpio.h **** #define IOPORT_MODE_MUX_H               (7 << 0) /*!< MUX function H */
  82:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 
  83:../../../platform/common/services/ioport/sam/ioport_gpio.h **** #define IOPORT_MODE_PULLUP              (1 << 3) /*!< Pull-up */
  84:../../../platform/common/services/ioport/sam/ioport_gpio.h **** #define IOPORT_MODE_PULLDOWN            (1 << 4) /*!< Pull-down */
  85:../../../platform/common/services/ioport/sam/ioport_gpio.h **** #define IOPORT_MODE_GLITCH_FILTER       (1 << 6) /*!< Glitch filter */
  86:../../../platform/common/services/ioport/sam/ioport_gpio.h **** #define IOPORT_MODE_DRIVE_STRENGTH      (1 << 7) /*!< Extra drive strength */
  87:../../../platform/common/services/ioport/sam/ioport_gpio.h **** /** @} */
  88:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 
  89:../../../platform/common/services/ioport/sam/ioport_gpio.h **** /** @} */
  90:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 
  91:../../../platform/common/services/ioport/sam/ioport_gpio.h **** typedef uint32_t ioport_mode_t;
  92:../../../platform/common/services/ioport/sam/ioport_gpio.h **** typedef uint32_t ioport_pin_t;
  93:../../../platform/common/services/ioport/sam/ioport_gpio.h **** typedef uint32_t ioport_port_t;
  94:../../../platform/common/services/ioport/sam/ioport_gpio.h **** typedef uint32_t ioport_port_mask_t;
  95:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 
  96:../../../platform/common/services/ioport/sam/ioport_gpio.h **** __always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
  97:../../../platform/common/services/ioport/sam/ioport_gpio.h **** {
  98:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 	return pin >> 5;
  99:../../../platform/common/services/ioport/sam/ioport_gpio.h **** }
 100:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 
 101:../../../platform/common/services/ioport/sam/ioport_gpio.h **** __always_inline static volatile GpioPort *arch_ioport_port_to_base(
 102:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 		ioport_port_t port)
 103:../../../platform/common/services/ioport/sam/ioport_gpio.h **** {
 104:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 	return (volatile GpioPort *)(GPIO_ADDR
 105:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 		+ port * sizeof(GpioPort));
 106:../../../platform/common/services/ioport/sam/ioport_gpio.h **** }
 107:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 
 108:../../../platform/common/services/ioport/sam/ioport_gpio.h **** __always_inline static volatile GpioPort *arch_ioport_pin_to_base(ioport_pin_t pin)
 109:../../../platform/common/services/ioport/sam/ioport_gpio.h **** {
 110:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
 111:../../../platform/common/services/ioport/sam/ioport_gpio.h **** }
 112:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 
 113:../../../platform/common/services/ioport/sam/ioport_gpio.h **** __always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
 114:../../../platform/common/services/ioport/sam/ioport_gpio.h **** {
 115:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 	return 1U << (pin & 0x1F);
 116:../../../platform/common/services/ioport/sam/ioport_gpio.h **** }
 117:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 
 118:../../../platform/common/services/ioport/sam/ioport_gpio.h **** __always_inline static void arch_ioport_init(void)
 119:../../../platform/common/services/ioport/sam/ioport_gpio.h **** {
 120:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 	sysclk_enable_peripheral_clock(GPIO);
 121:../../../platform/common/services/ioport/sam/ioport_gpio.h **** }
 122:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 
 123:../../../platform/common/services/ioport/sam/ioport_gpio.h **** __always_inline static void arch_ioport_enable_port(ioport_port_t port,
 124:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 		ioport_port_mask_t mask)
 125:../../../platform/common/services/ioport/sam/ioport_gpio.h **** {
 126:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 	arch_ioport_port_to_base(port)->GPIO_GPERS = mask;
 127:../../../platform/common/services/ioport/sam/ioport_gpio.h **** }
 128:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 
 129:../../../platform/common/services/ioport/sam/ioport_gpio.h **** __always_inline static void arch_ioport_disable_port(ioport_port_t port,
 130:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 		ioport_port_mask_t mask)
 131:../../../platform/common/services/ioport/sam/ioport_gpio.h **** {
 132:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 	arch_ioport_port_to_base(port)->GPIO_GPERC = mask;
 133:../../../platform/common/services/ioport/sam/ioport_gpio.h **** }
 134:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 
 135:../../../platform/common/services/ioport/sam/ioport_gpio.h **** __always_inline static void arch_ioport_enable_pin(ioport_pin_t pin)
 136:../../../platform/common/services/ioport/sam/ioport_gpio.h **** {
 137:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 	arch_ioport_enable_port(arch_ioport_pin_to_port_id(pin),
 138:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 			arch_ioport_pin_to_mask(pin));
 139:../../../platform/common/services/ioport/sam/ioport_gpio.h **** }
 140:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 
 141:../../../platform/common/services/ioport/sam/ioport_gpio.h **** __always_inline static void arch_ioport_disable_pin(ioport_pin_t pin)
 142:../../../platform/common/services/ioport/sam/ioport_gpio.h **** {
 143:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 	arch_ioport_disable_port(arch_ioport_pin_to_port_id(pin),
 144:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 			arch_ioport_pin_to_mask(pin));
 145:../../../platform/common/services/ioport/sam/ioport_gpio.h **** }
 146:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 
 147:../../../platform/common/services/ioport/sam/ioport_gpio.h **** __always_inline static void arch_ioport_set_port_mode(ioport_port_t port,
 148:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 		ioport_port_mask_t mask, ioport_mode_t mode)
 149:../../../platform/common/services/ioport/sam/ioport_gpio.h **** {
 150:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 	volatile GpioPort *base = arch_ioport_port_to_base(port);
 151:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 
 152:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 	if (mode & IOPORT_MODE_PULLUP) {
 153:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 		base->GPIO_PUERS = mask;
 154:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 	} else {
 155:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 		base->GPIO_PUERC = mask;
 156:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 	}
 157:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 
 158:../../../platform/common/services/ioport/sam/ioport_gpio.h **** #ifdef IOPORT_MODE_PULLDOWN
 159:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 	if (mode & IOPORT_MODE_PULLDOWN) {
 160:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 		base->GPIO_PDERS = mask;
 161:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 	} else {
 162:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 		base->GPIO_PDERC = mask;
 163:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 	}
 164:../../../platform/common/services/ioport/sam/ioport_gpio.h **** #endif
 165:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 
 166:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 	if (mode & IOPORT_MODE_GLITCH_FILTER) {
 167:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 		base->GPIO_GFERS = mask;
 168:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 	} else {
 169:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 		base->GPIO_GFERC = mask;
 170:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 	}
 171:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 
 172:../../../platform/common/services/ioport/sam/ioport_gpio.h **** #ifdef IOPORT_MODE_DRIVE_STRENGTH
 173:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 	if (mode & IOPORT_MODE_DRIVE_STRENGTH) {
 174:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 		base->GPIO_ODCR0S = mask;
 175:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 	} else {
 176:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 		base->GPIO_ODCR0C = mask;
 177:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 	}
 178:../../../platform/common/services/ioport/sam/ioport_gpio.h **** #endif
 179:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 
 180:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 	if (mode & IOPORT_MODE_MUX_BIT0) {
 181:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 		base->GPIO_PMR0S = mask;
 182:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 	} else {
 183:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 		base->GPIO_PMR0C = mask;
 184:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 	}
 185:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 
 186:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 	if (mode & IOPORT_MODE_MUX_BIT1) {
 187:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 		base->GPIO_PMR1S = mask;
 188:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 	} else {
 189:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 		base->GPIO_PMR1C = mask;
 190:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 	}
 191:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 
 192:../../../platform/common/services/ioport/sam/ioport_gpio.h **** #ifdef IOPORT_MODE_MUX_BIT2
 193:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 	if (mode & IOPORT_MODE_MUX_BIT2) {
 194:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 		base->GPIO_PMR2S = mask;
 195:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 	} else {
 196:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 		base->GPIO_PMR2C = mask;
 197:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 	}
 198:../../../platform/common/services/ioport/sam/ioport_gpio.h **** #endif
 199:../../../platform/common/services/ioport/sam/ioport_gpio.h **** }
 200:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 
 201:../../../platform/common/services/ioport/sam/ioport_gpio.h **** __always_inline static void arch_ioport_set_pin_mode(ioport_pin_t pin,
 202:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 		ioport_mode_t mode)
 203:../../../platform/common/services/ioport/sam/ioport_gpio.h **** {
 204:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 	arch_ioport_set_port_mode(arch_ioport_pin_to_port_id(pin),
 205:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 			arch_ioport_pin_to_mask(pin), mode);
 206:../../../platform/common/services/ioport/sam/ioport_gpio.h **** }
 207:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 
 208:../../../platform/common/services/ioport/sam/ioport_gpio.h **** __always_inline static void arch_ioport_set_port_dir(ioport_port_t port,
 209:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 		ioport_port_mask_t mask, unsigned char group_direction)
 210:../../../platform/common/services/ioport/sam/ioport_gpio.h **** {
 211:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 	if (group_direction == IOPORT_DIR_OUTPUT) {
 212:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 		arch_ioport_port_to_base(port)->GPIO_ODERS = mask;
 213:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 		// Always disable the Schmitt trigger for output pins.
 214:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 		arch_ioport_port_to_base(port)->GPIO_STERC = mask;
 215:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 	} else if (group_direction == IOPORT_DIR_INPUT) {
 216:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 		arch_ioport_port_to_base(port)->GPIO_ODERC = mask;
 217:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 		// Always enable the Schmitt trigger for input pins.
 218:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 		arch_ioport_port_to_base(port)->GPIO_STERS = mask;
 219:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 	}
 220:../../../platform/common/services/ioport/sam/ioport_gpio.h **** }
 221:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 
 222:../../../platform/common/services/ioport/sam/ioport_gpio.h **** __always_inline static void arch_ioport_set_pin_dir(ioport_pin_t pin,
 223:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 		enum ioport_direction dir)
 224:../../../platform/common/services/ioport/sam/ioport_gpio.h **** {
 225:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 	if (dir == IOPORT_DIR_OUTPUT) {
 226:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 		arch_ioport_pin_to_base(pin)->GPIO_ODERS = arch_ioport_pin_to_mask(pin);
 227:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 		// Always disable the Schmitt trigger for output pins.
 228:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 		arch_ioport_pin_to_base(pin)->GPIO_STERC = arch_ioport_pin_to_mask(pin);
 229:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 	} else if (dir == IOPORT_DIR_INPUT) {
 230:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 		arch_ioport_pin_to_base(pin)->GPIO_ODERC = arch_ioport_pin_to_mask(pin);
 231:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 		// Always enable the Schmitt trigger for input pins.
 232:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 		arch_ioport_pin_to_base(pin)->GPIO_STERS = arch_ioport_pin_to_mask(pin);
 233:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 	}
 234:../../../platform/common/services/ioport/sam/ioport_gpio.h **** }
 235:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 
 236:../../../platform/common/services/ioport/sam/ioport_gpio.h **** __always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
 237:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 		bool level)
 238:../../../platform/common/services/ioport/sam/ioport_gpio.h **** {
 239:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 	if (level) {
  68              	 .loc 2 239 0
  69 0016 97F82B30 	 ldrb r3,[r7,#43]
  70 001a 002B     	 cmp r3,#0
  71 001c 17D0     	 beq .L2
  72 001e FB6A     	 ldr r3,[r7,#44]
  73 0020 7B62     	 str r3,[r7,#36]
  74 0022 7B6A     	 ldr r3,[r7,#36]
  75 0024 3B62     	 str r3,[r7,#32]
  76              	.LBB64:
  77              	.LBB65:
  78              	.LBB66:
  79              	.LBB67:
  98:../../../platform/common/services/ioport/sam/ioport_gpio.h **** }
  80              	 .loc 2 98 0
  81 0026 3B6A     	 ldr r3,[r7,#32]
  82 0028 5B09     	 lsrs r3,r3,#5
  83 002a FB61     	 str r3,[r7,#28]
  84              	.LBE67:
  85              	.LBE66:
  86              	.LBB68:
  87              	.LBB69:
 105:../../../platform/common/services/ioport/sam/ioport_gpio.h **** }
  88              	 .loc 2 105 0
  89 002c FB69     	 ldr r3,[r7,#28]
  90 002e 03F50013 	 add r3,r3,#2097152
  91 0032 03F5E163 	 add r3,r3,#1800
  92 0036 5B02     	 lsls r3,r3,#9
 104:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 		+ port * sizeof(GpioPort));
  93              	 .loc 2 104 0
  94 0038 1946     	 mov r1,r3
  95 003a FB6A     	 ldr r3,[r7,#44]
  96 003c BB61     	 str r3,[r7,#24]
  97              	.LBE69:
  98              	.LBE68:
  99              	.LBE65:
 100              	.LBE64:
 101              	.LBB70:
 102              	.LBB71:
 115:../../../platform/common/services/ioport/sam/ioport_gpio.h **** }
 103              	 .loc 2 115 0
 104 003e BB69     	 ldr r3,[r7,#24]
 105 0040 03F01F03 	 and r3,r3,#31
 106 0044 0122     	 movs r2,#1
 107 0046 02FA03F3 	 lsl r3,r2,r3
 108              	.LBE71:
 109              	.LBE70:
 240:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 		arch_ioport_pin_to_base(pin)->GPIO_OVRS = arch_ioport_pin_to_mask(pin);
 110              	 .loc 2 240 0
 111 004a 4B65     	 str r3,[r1,#84]
 112              	.LBE63:
 113              	.LBE62:
 277:../../../platform/common/services/ioport/ioport.h **** 	arch_ioport_set_pin_level(pin, level);
 278:../../../platform/common/services/ioport/ioport.h **** }
 114              	 .loc 1 278 0
 115 004c 16E0     	 b .L12
 116              	.L2:
 117 004e FB6A     	 ldr r3,[r7,#44]
 118 0050 7B61     	 str r3,[r7,#20]
 119 0052 7B69     	 ldr r3,[r7,#20]
 120 0054 3B61     	 str r3,[r7,#16]
 121              	.LBB81:
 122              	.LBB80:
 123              	.LBB72:
 124              	.LBB73:
 125              	.LBB74:
 126              	.LBB75:
  98:../../../platform/common/services/ioport/sam/ioport_gpio.h **** }
 127              	 .loc 2 98 0
 128 0056 3B69     	 ldr r3,[r7,#16]
 129 0058 5B09     	 lsrs r3,r3,#5
 130 005a FB60     	 str r3,[r7,#12]
 131              	.LBE75:
 132              	.LBE74:
 133              	.LBB76:
 134              	.LBB77:
 105:../../../platform/common/services/ioport/sam/ioport_gpio.h **** }
 135              	 .loc 2 105 0
 136 005c FB68     	 ldr r3,[r7,#12]
 137 005e 03F50013 	 add r3,r3,#2097152
 138 0062 03F5E163 	 add r3,r3,#1800
 139 0066 5B02     	 lsls r3,r3,#9
 104:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 		+ port * sizeof(GpioPort));
 140              	 .loc 2 104 0
 141 0068 1946     	 mov r1,r3
 142 006a FB6A     	 ldr r3,[r7,#44]
 143 006c BB60     	 str r3,[r7,#8]
 144              	.LBE77:
 145              	.LBE76:
 146              	.LBE73:
 147              	.LBE72:
 148              	.LBB78:
 149              	.LBB79:
 115:../../../platform/common/services/ioport/sam/ioport_gpio.h **** }
 150              	 .loc 2 115 0
 151 006e BB68     	 ldr r3,[r7,#8]
 152 0070 03F01F03 	 and r3,r3,#31
 153 0074 0122     	 movs r2,#1
 154 0076 02FA03F3 	 lsl r3,r2,r3
 155              	.LBE79:
 156              	.LBE78:
 241:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 	} else {
 242:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 		arch_ioport_pin_to_base(pin)->GPIO_OVRC = arch_ioport_pin_to_mask(pin);
 157              	 .loc 2 242 0
 158 007a 8B65     	 str r3,[r1,#88]
 159              	.L12:
 160              	.LBE80:
 161              	.LBE81:
 162              	 .loc 1 278 0
 163 007c 00BF     	 nop
 164 007e 3437     	 adds r7,r7,#52
 165              	.LCFI3:
 166              	 .cfi_def_cfa_offset 4
 167 0080 BD46     	 mov sp,r7
 168              	.LCFI4:
 169              	 .cfi_def_cfa_register 13
 170              	 
 171 0082 80BC     	 pop {r7}
 172              	.LCFI5:
 173              	 .cfi_restore 7
 174              	 .cfi_def_cfa_offset 0
 175 0084 7047     	 bx lr
 176              	 .cfi_endproc
 177              	.LFE221:
 179              	 .align 1
 180              	 .syntax unified
 181              	 .thumb
 182              	 .thumb_func
 183              	 .fpu softvfp
 185              	ioport_toggle_pin_level:
 186              	.LFB225:
 279:../../../platform/common/services/ioport/ioport.h **** 
 280:../../../platform/common/services/ioport/ioport.h **** /**
 281:../../../platform/common/services/ioport/ioport.h ****  * \brief Set a group of IOPORT pins in a single port to a specified logical
 282:../../../platform/common/services/ioport/ioport.h ****  * value.
 283:../../../platform/common/services/ioport/ioport.h ****  *
 284:../../../platform/common/services/ioport/ioport.h ****  * \param port IOPORT port to write to
 285:../../../platform/common/services/ioport/ioport.h ****  * \param mask Pin mask of pins to modify
 286:../../../platform/common/services/ioport/ioport.h ****  * \param level Level of the pins to be modified
 287:../../../platform/common/services/ioport/ioport.h ****  */
 288:../../../platform/common/services/ioport/ioport.h **** static inline void ioport_set_port_level(ioport_port_t port,
 289:../../../platform/common/services/ioport/ioport.h **** 		ioport_port_mask_t mask, ioport_port_mask_t level)
 290:../../../platform/common/services/ioport/ioport.h **** {
 291:../../../platform/common/services/ioport/ioport.h **** 	arch_ioport_set_port_level(port, mask, level);
 292:../../../platform/common/services/ioport/ioport.h **** }
 293:../../../platform/common/services/ioport/ioport.h **** 
 294:../../../platform/common/services/ioport/ioport.h **** /**
 295:../../../platform/common/services/ioport/ioport.h ****  * \brief Get current value of an IOPORT pin, which has been configured as an
 296:../../../platform/common/services/ioport/ioport.h ****  * input.
 297:../../../platform/common/services/ioport/ioport.h ****  *
 298:../../../platform/common/services/ioport/ioport.h ****  * \param pin IOPORT pin to read
 299:../../../platform/common/services/ioport/ioport.h ****  * \return Current logical value of the specified pin
 300:../../../platform/common/services/ioport/ioport.h ****  */
 301:../../../platform/common/services/ioport/ioport.h **** static inline bool ioport_get_pin_level(ioport_pin_t pin)
 302:../../../platform/common/services/ioport/ioport.h **** {
 303:../../../platform/common/services/ioport/ioport.h **** 	return arch_ioport_get_pin_level(pin);
 304:../../../platform/common/services/ioport/ioport.h **** }
 305:../../../platform/common/services/ioport/ioport.h **** 
 306:../../../platform/common/services/ioport/ioport.h **** /**
 307:../../../platform/common/services/ioport/ioport.h ****  * \brief Get current value of several IOPORT pins in a single port, which have
 308:../../../platform/common/services/ioport/ioport.h ****  * been configured as an inputs.
 309:../../../platform/common/services/ioport/ioport.h ****  *
 310:../../../platform/common/services/ioport/ioport.h ****  * \param port IOPORT port to read
 311:../../../platform/common/services/ioport/ioport.h ****  * \param mask Pin mask of pins to read
 312:../../../platform/common/services/ioport/ioport.h ****  * \return Logical levels of the specified pins from the read port, returned as
 313:../../../platform/common/services/ioport/ioport.h ****  * a mask.
 314:../../../platform/common/services/ioport/ioport.h ****  */
 315:../../../platform/common/services/ioport/ioport.h **** static inline ioport_port_mask_t ioport_get_port_level(ioport_pin_t port,
 316:../../../platform/common/services/ioport/ioport.h **** 		ioport_port_mask_t mask)
 317:../../../platform/common/services/ioport/ioport.h **** {
 318:../../../platform/common/services/ioport/ioport.h **** 	return arch_ioport_get_port_level(port, mask);
 319:../../../platform/common/services/ioport/ioport.h **** }
 320:../../../platform/common/services/ioport/ioport.h **** 
 321:../../../platform/common/services/ioport/ioport.h **** /**
 322:../../../platform/common/services/ioport/ioport.h ****  * \brief Toggle the value of an IOPORT pin, which has previously configured as
 323:../../../platform/common/services/ioport/ioport.h ****  * an output.
 324:../../../platform/common/services/ioport/ioport.h ****  *
 325:../../../platform/common/services/ioport/ioport.h ****  * \param pin IOPORT pin to toggle
 326:../../../platform/common/services/ioport/ioport.h ****  */
 327:../../../platform/common/services/ioport/ioport.h **** static inline void ioport_toggle_pin_level(ioport_pin_t pin)
 328:../../../platform/common/services/ioport/ioport.h **** {
 187              	 .loc 1 328 0
 188              	 .cfi_startproc
 189              	 
 190              	 
 191              	 
 192 0086 80B4     	 push {r7}
 193              	.LCFI6:
 194              	 .cfi_def_cfa_offset 4
 195              	 .cfi_offset 7,-4
 196 0088 89B0     	 sub sp,sp,#36
 197              	.LCFI7:
 198              	 .cfi_def_cfa_offset 40
 199 008a 00AF     	 add r7,sp,#0
 200              	.LCFI8:
 201              	 .cfi_def_cfa_register 7
 202 008c 7860     	 str r0,[r7,#4]
 203 008e 7B68     	 ldr r3,[r7,#4]
 204 0090 FB61     	 str r3,[r7,#28]
 205 0092 FB69     	 ldr r3,[r7,#28]
 206 0094 BB61     	 str r3,[r7,#24]
 207 0096 BB69     	 ldr r3,[r7,#24]
 208 0098 7B61     	 str r3,[r7,#20]
 209              	.LBB82:
 210              	.LBB83:
 211              	.LBB84:
 212              	.LBB85:
 213              	.LBB86:
 214              	.LBB87:
  98:../../../platform/common/services/ioport/sam/ioport_gpio.h **** }
 215              	 .loc 2 98 0
 216 009a 7B69     	 ldr r3,[r7,#20]
 217 009c 5B09     	 lsrs r3,r3,#5
 218 009e 3B61     	 str r3,[r7,#16]
 219              	.LBE87:
 220              	.LBE86:
 221              	.LBB88:
 222              	.LBB89:
 105:../../../platform/common/services/ioport/sam/ioport_gpio.h **** }
 223              	 .loc 2 105 0
 224 00a0 3B69     	 ldr r3,[r7,#16]
 225 00a2 03F50013 	 add r3,r3,#2097152
 226 00a6 03F5E163 	 add r3,r3,#1800
 227 00aa 5B02     	 lsls r3,r3,#9
 104:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 		+ port * sizeof(GpioPort));
 228              	 .loc 2 104 0
 229 00ac 1946     	 mov r1,r3
 230 00ae FB69     	 ldr r3,[r7,#28]
 231 00b0 FB60     	 str r3,[r7,#12]
 232              	.LBE89:
 233              	.LBE88:
 234              	.LBE85:
 235              	.LBE84:
 236              	.LBB90:
 237              	.LBB91:
 115:../../../platform/common/services/ioport/sam/ioport_gpio.h **** }
 238              	 .loc 2 115 0
 239 00b2 FB68     	 ldr r3,[r7,#12]
 240 00b4 03F01F03 	 and r3,r3,#31
 241 00b8 0122     	 movs r2,#1
 242 00ba 02FA03F3 	 lsl r3,r2,r3
 243              	.LBE91:
 244              	.LBE90:
 243:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 	}
 244:../../../platform/common/services/ioport/sam/ioport_gpio.h **** }
 245:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 
 246:../../../platform/common/services/ioport/sam/ioport_gpio.h **** __always_inline static void arch_ioport_set_port_level(ioport_port_t port,
 247:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 		ioport_port_mask_t mask, ioport_port_mask_t level)
 248:../../../platform/common/services/ioport/sam/ioport_gpio.h **** {
 249:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 	volatile GpioPort *base = arch_ioport_port_to_base(port);
 250:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 	if (level){
 251:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 		base->GPIO_OVRS |= mask;
 252:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 		base->GPIO_OVRC &= ~mask;		
 253:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 	}
 254:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 	else{
 255:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 		base->GPIO_OVRS &= ~mask;
 256:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 		base->GPIO_OVRC |= mask;
 257:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 	}
 258:../../../platform/common/services/ioport/sam/ioport_gpio.h **** }
 259:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 
 260:../../../platform/common/services/ioport/sam/ioport_gpio.h **** __always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
 261:../../../platform/common/services/ioport/sam/ioport_gpio.h **** {
 262:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 	return arch_ioport_pin_to_base(pin)->GPIO_PVR & arch_ioport_pin_to_mask(pin);
 263:../../../platform/common/services/ioport/sam/ioport_gpio.h **** }
 264:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 
 265:../../../platform/common/services/ioport/sam/ioport_gpio.h **** __always_inline static ioport_port_mask_t arch_ioport_get_port_level(
 266:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 		ioport_port_t port, ioport_port_mask_t mask)
 267:../../../platform/common/services/ioport/sam/ioport_gpio.h **** {
 268:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 	return arch_ioport_port_to_base(port)->GPIO_PVR & mask;
 269:../../../platform/common/services/ioport/sam/ioport_gpio.h **** }
 270:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 
 271:../../../platform/common/services/ioport/sam/ioport_gpio.h **** __always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
 272:../../../platform/common/services/ioport/sam/ioport_gpio.h **** {
 273:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 	arch_ioport_pin_to_base(pin)->GPIO_OVRT = arch_ioport_pin_to_mask(pin);
 245              	 .loc 2 273 0
 246 00be CB65     	 str r3,[r1,#92]
 247              	.LBE83:
 248              	.LBE82:
 329:../../../platform/common/services/ioport/ioport.h **** 	arch_ioport_toggle_pin_level(pin);
 330:../../../platform/common/services/ioport/ioport.h **** }
 249              	 .loc 1 330 0
 250 00c0 00BF     	 nop
 251 00c2 2437     	 adds r7,r7,#36
 252              	.LCFI9:
 253              	 .cfi_def_cfa_offset 4
 254 00c4 BD46     	 mov sp,r7
 255              	.LCFI10:
 256              	 .cfi_def_cfa_register 13
 257              	 
 258 00c6 80BC     	 pop {r7}
 259              	.LCFI11:
 260              	 .cfi_restore 7
 261              	 .cfi_def_cfa_offset 0
 262 00c8 7047     	 bx lr
 263              	 .cfi_endproc
 264              	.LFE225:
 266              	 .section .bss.tmrBeaconInterval,"aw",%nobits
 267              	 .align 2
 270              	tmrBeaconInterval:
 271 0000 00000000 	 .space 20
 271      00000000 
 271      00000000 
 271      00000000 
 271      00000000 
 272              	 .section .bss.tmrComputeData,"aw",%nobits
 273              	 .align 2
 276              	tmrComputeData:
 277 0000 00000000 	 .space 20
 277      00000000 
 277      00000000 
 277      00000000 
 277      00000000 
 278              	 .section .bss.appState,"aw",%nobits
 281              	appState:
 282 0000 00       	 .space 1
 283              	 .section .bss.tmrBlinkData,"aw",%nobits
 284              	 .align 2
 287              	tmrBlinkData:
 288 0000 00000000 	 .space 20
 288      00000000 
 288      00000000 
 288      00000000 
 288      00000000 
 289              	 .section .bss.msgReq,"aw",%nobits
 290              	 .align 2
 293              	msgReq:
 294 0000 00000000 	 .space 36
 294      00000000 
 294      00000000 
 294      00000000 
 294      00000000 
 295              	 .section .bss.msgFrame,"aw",%nobits
 296              	 .align 2
 299              	msgFrame:
 300 0000 00000000 	 .space 80
 300      00000000 
 300      00000000 
 300      00000000 
 300      00000000 
 301              	 .section .bss.msgReqConnection,"aw",%nobits
 302              	 .align 2
 305              	msgReqConnection:
 306 0000 00000000 	 .space 36
 306      00000000 
 306      00000000 
 306      00000000 
 306      00000000 
 307              	 .section .bss.msgFrameConnection,"aw",%nobits
 308              	 .align 2
 311              	msgFrameConnection:
 312 0000 00000000 	 .space 80
 312      00000000 
 312      00000000 
 312      00000000 
 312      00000000 
 313              	 .section .data.server_turn,"aw",%progbits
 314              	 .align 1
 317              	server_turn:
 318 0000 0100     	 .short 1
 319              	 .section .bss.statistics_buffer,"aw",%nobits
 320              	 .align 2
 323              	statistics_buffer:
 324 0000 00000000 	 .space 130
 324      00000000 
 324      00000000 
 324      00000000 
 324      00000000 
 325              	 .section .bss.aux_buffer,"aw",%nobits
 326              	 .align 2
 329              	aux_buffer:
 330 0000 00000000 	 .space 65
 330      00000000 
 330      00000000 
 330      00000000 
 330      00000000 
 331              	 .text
 332              	 .align 1
 333              	 .syntax unified
 334              	 .thumb
 335              	 .thumb_func
 336              	 .fpu softvfp
 338              	tmrBlinkDataHandler:
 339              	.LFB231:
 340              	 .file 3 "ServerTDMA.c"
   1:ServerTDMA.c  **** /*
   2:ServerTDMA.c  ****  * ServerTDMA.c
   3:ServerTDMA.c  ****  *
   4:ServerTDMA.c  ****  * Created: 07/09/2014 16:50:52
   5:ServerTDMA.c  ****  *  Author: nando
   6:ServerTDMA.c  ****  */ 
   7:ServerTDMA.c  **** 
   8:ServerTDMA.c  **** #include <stdlib.h>
   9:ServerTDMA.c  **** #include <stdio.h>
  10:ServerTDMA.c  **** #include <string.h>
  11:ServerTDMA.c  **** #include <inttypes.h>
  12:ServerTDMA.c  **** #include "config.h"
  13:ServerTDMA.c  **** #include "sys.h"
  14:ServerTDMA.c  **** #include "phy.h"
  15:ServerTDMA.c  **** #include "sys.h"
  16:ServerTDMA.c  **** #include "nwk.h"
  17:ServerTDMA.c  **** #include "sysclk.h"
  18:ServerTDMA.c  **** #include "sysTimer.h"
  19:ServerTDMA.c  **** #include "sleep_mgr.h"
  20:ServerTDMA.c  **** #include "sleepmgr.h"
  21:ServerTDMA.c  **** #include "led.h"
  22:ServerTDMA.c  **** #include "ioport.h"
  23:ServerTDMA.c  **** #include "conf_sleepmgr.h"
  24:ServerTDMA.c  **** #include "board.h"
  25:ServerTDMA.c  **** #include "Solver.h"
  26:ServerTDMA.c  **** #include "Energy.h"
  27:ServerTDMA.c  **** #include "platform.h"
  28:ServerTDMA.c  **** 
  29:ServerTDMA.c  **** /*
  30:ServerTDMA.c  **** #define		PRIo64			"llo"
  31:ServerTDMA.c  **** #define		PRIoLEAST64		"llo"
  32:ServerTDMA.c  **** #define		PRIoFAST64		"llo"
  33:ServerTDMA.c  **** 
  34:ServerTDMA.c  **** #define		PRIu64			"llu"
  35:ServerTDMA.c  **** #define		PRIuLEAST64		"llu"
  36:ServerTDMA.c  **** #define		PRIuFAST64		"llu"
  37:ServerTDMA.c  **** 
  38:ServerTDMA.c  **** #define		PRIx64			"llx"
  39:ServerTDMA.c  **** #define		PRIxLEAST64		"llx"
  40:ServerTDMA.c  **** #define		PRIxFAST64		"llx"
  41:ServerTDMA.c  **** 
  42:ServerTDMA.c  **** #define		PRIX64			"llX"
  43:ServerTDMA.c  **** #define		PRIXLEAST64		"llX"
  44:ServerTDMA.c  **** #define		PRIXFAST64		"llX"
  45:ServerTDMA.c  **** 
  46:ServerTDMA.c  **** #define		PRIoMAX			"llo"
  47:ServerTDMA.c  **** #define		PRIuMAX			"llu"
  48:ServerTDMA.c  **** #define		PRIxMAX			"llx"
  49:ServerTDMA.c  **** #define		PRIXMAX			"llX"
  50:ServerTDMA.c  **** */
  51:ServerTDMA.c  **** 
  52:ServerTDMA.c  **** #if APP_COORDINATOR
  53:ServerTDMA.c  **** 	#if (SIO2HOST_CHANNEL == SIO_USB)
  54:ServerTDMA.c  **** 		/* Only ARM */
  55:ServerTDMA.c  **** 		#include "stdio_usb.h"
  56:ServerTDMA.c  **** 		#define MASTER_MACSC	0
  57:ServerTDMA.c  **** 	#else
  58:ServerTDMA.c  **** 		/* Only megarf series */
  59:ServerTDMA.c  **** 		#include "conf_sio2host.h"
  60:ServerTDMA.c  **** 		#define MASTER_MACSC	1
  61:ServerTDMA.c  **** 	#endif
  62:ServerTDMA.c  **** #else
  63:ServerTDMA.c  **** 	/* Only megarf series */
  64:ServerTDMA.c  **** 	#define MASTER_MACSC		1
  65:ServerTDMA.c  **** #endif
  66:ServerTDMA.c  **** 
  67:ServerTDMA.c  **** #define HUMAM_READABLE			1
  68:ServerTDMA.c  **** 
  69:ServerTDMA.c  **** #if (MASTER_MACSC == 1)
  70:ServerTDMA.c  **** 	#include "macsc_megarf.h"
  71:ServerTDMA.c  **** #else
  72:ServerTDMA.c  **** static SYS_Timer_t				tmrBeaconInterval;			// Beacon
  73:ServerTDMA.c  **** static SYS_Timer_t				tmrComputeData;				// Compute data
  74:ServerTDMA.c  **** #endif
  75:ServerTDMA.c  **** 
  76:ServerTDMA.c  **** static volatile AppState_t		appState					= APP_STATE_INITIAL;
  77:ServerTDMA.c  **** static SYS_Timer_t				tmrBlinkData;				// Feedback
  78:ServerTDMA.c  **** static NWK_DataReq_t			msgReq;
  79:ServerTDMA.c  **** static AppMessageFrame_t		msgFrame;
  80:ServerTDMA.c  **** 
  81:ServerTDMA.c  **** static NWK_DataReq_t			msgReqConnection;
  82:ServerTDMA.c  **** static AppMessageFrame_t		msgFrameConnection;
  83:ServerTDMA.c  **** 
  84:ServerTDMA.c  **** #if (APP_COORDINATOR)
  85:ServerTDMA.c  **** 	static uint16_t				server_turn					= 1;
  86:ServerTDMA.c  **** 	static uint8_t				statistics_buffer[(MSG_SIZE_MAX + 1) * 2];
  87:ServerTDMA.c  **** 	static uint8_t				aux_buffer[(MSG_SIZE_MAX + 1)];
  88:ServerTDMA.c  **** #endif
  89:ServerTDMA.c  **** #if (APP_ENDDEVICE)
  90:ServerTDMA.c  **** 	static bool					connected;
  91:ServerTDMA.c  **** 	static uint8_t				collab_vector[N_COLLAB_VECTOR];
  92:ServerTDMA.c  **** 	static bool					i_am_collab_dev				= false;
  93:ServerTDMA.c  **** 	static uint8_t				i_am_collab_slot			= 0;
  94:ServerTDMA.c  **** 	static uint8_t				i_am_collab_turn			= 0;
  95:ServerTDMA.c  **** 	static NWK_DataReq_t		msgReqCollab;
  96:ServerTDMA.c  **** 	static AppMessageFrame_t	msgFrameCollab;
  97:ServerTDMA.c  **** #endif
  98:ServerTDMA.c  **** 
  99:ServerTDMA.c  **** static void tmrBlinkDataHandler(SYS_Timer_t *timer)
 100:ServerTDMA.c  **** {
 341              	 .loc 3 100 0
 342              	 .cfi_startproc
 343              	 
 344              	 
 345 00ca 80B5     	 push {r7,lr}
 346              	.LCFI12:
 347              	 .cfi_def_cfa_offset 8
 348              	 .cfi_offset 7,-8
 349              	 .cfi_offset 14,-4
 350 00cc 82B0     	 sub sp,sp,#8
 351              	.LCFI13:
 352              	 .cfi_def_cfa_offset 16
 353 00ce 00AF     	 add r7,sp,#0
 354              	.LCFI14:
 355              	 .cfi_def_cfa_register 7
 356 00d0 7860     	 str r0,[r7,#4]
 101:ServerTDMA.c  **** #if (LED_COUNT > 0)
 102:ServerTDMA.c  **** 	LED_Off(LED_DATA);
 357              	 .loc 3 102 0
 358 00d2 0121     	 movs r1,#1
 359 00d4 2620     	 movs r0,#38
 360 00d6 FFF793FF 	 bl ioport_set_pin_level
 103:ServerTDMA.c  **** #endif
 104:ServerTDMA.c  **** 
 105:ServerTDMA.c  **** 	(void)timer;
 106:ServerTDMA.c  **** }
 361              	 .loc 3 106 0
 362 00da 00BF     	 nop
 363 00dc 0837     	 adds r7,r7,#8
 364              	.LCFI15:
 365              	 .cfi_def_cfa_offset 8
 366 00de BD46     	 mov sp,r7
 367              	.LCFI16:
 368              	 .cfi_def_cfa_register 13
 369              	 
 370 00e0 80BD     	 pop {r7,pc}
 371              	 .cfi_endproc
 372              	.LFE231:
 374              	 .section .rodata
 375              	 .align 2
 376              	.LC0:
 377 0000 25303258 	 .ascii "%02X\000"
 377      00
 378              	 .text
 379              	 .align 1
 380              	 .syntax unified
 381              	 .thumb
 382              	 .thumb_func
 383              	 .fpu softvfp
 385              	toHexBuffer:
 386              	.LFB232:
 107:ServerTDMA.c  **** #if (APP_COORDINATOR)
 108:ServerTDMA.c  **** static void toHexBuffer(uint8_t* out, uint8_t* in, uint16_t size)
 109:ServerTDMA.c  **** {
 387              	 .loc 3 109 0
 388              	 .cfi_startproc
 389              	 
 390              	 
 391 00e2 80B5     	 push {r7,lr}
 392              	.LCFI17:
 393              	 .cfi_def_cfa_offset 8
 394              	 .cfi_offset 7,-8
 395              	 .cfi_offset 14,-4
 396 00e4 86B0     	 sub sp,sp,#24
 397              	.LCFI18:
 398              	 .cfi_def_cfa_offset 32
 399 00e6 00AF     	 add r7,sp,#0
 400              	.LCFI19:
 401              	 .cfi_def_cfa_register 7
 402 00e8 F860     	 str r0,[r7,#12]
 403 00ea B960     	 str r1,[r7,#8]
 404 00ec 1346     	 mov r3,r2
 405 00ee FB80     	 strh r3,[r7,#6]
 110:ServerTDMA.c  **** 	uint16_t		pos			= 0;
 406              	 .loc 3 110 0
 407 00f0 0023     	 movs r3,#0
 408 00f2 FB82     	 strh r3,[r7,#22]
 409              	.LBB92:
 111:ServerTDMA.c  **** 	for(uint16_t i = 0; i < size; ++i)
 410              	 .loc 3 111 0
 411 00f4 0023     	 movs r3,#0
 412 00f6 BB82     	 strh r3,[r7,#20]
 413 00f8 12E0     	 b .L20
 414              	.L21:
 112:ServerTDMA.c  **** 	{
 113:ServerTDMA.c  **** 		pos						+= sprintf(out + pos, "%02X", in[i]);
 415              	 .loc 3 113 0 discriminator 3
 416 00fa FB8A     	 ldrh r3,[r7,#22]
 417 00fc FA68     	 ldr r2,[r7,#12]
 418 00fe D018     	 adds r0,r2,r3
 419 0100 BB8A     	 ldrh r3,[r7,#20]
 420 0102 BA68     	 ldr r2,[r7,#8]
 421 0104 1344     	 add r3,r3,r2
 422 0106 1B78     	 ldrb r3,[r3]
 423 0108 1A46     	 mov r2,r3
 424 010a 0C49     	 ldr r1,.L22
 425 010c 0C4B     	 ldr r3,.L22+4
 426 010e 9847     	 blx r3
 427              	.LVL0:
 428 0110 0346     	 mov r3,r0
 429 0112 9AB2     	 uxth r2,r3
 430 0114 FB8A     	 ldrh r3,[r7,#22]
 431 0116 1344     	 add r3,r3,r2
 432 0118 FB82     	 strh r3,[r7,#22]
 111:ServerTDMA.c  **** 	for(uint16_t i = 0; i < size; ++i)
 433              	 .loc 3 111 0 discriminator 3
 434 011a BB8A     	 ldrh r3,[r7,#20]
 435 011c 0133     	 adds r3,r3,#1
 436 011e BB82     	 strh r3,[r7,#20]
 437              	.L20:
 111:ServerTDMA.c  **** 	for(uint16_t i = 0; i < size; ++i)
 438              	 .loc 3 111 0 is_stmt 0 discriminator 1
 439 0120 BA8A     	 ldrh r2,[r7,#20]
 440 0122 FB88     	 ldrh r3,[r7,#6]
 441 0124 9A42     	 cmp r2,r3
 442 0126 E8D3     	 bcc .L21
 443              	.LBE92:
 114:ServerTDMA.c  **** 	}
 115:ServerTDMA.c  **** 	out[pos]					= NULL;
 444              	 .loc 3 115 0 is_stmt 1
 445 0128 FB8A     	 ldrh r3,[r7,#22]
 446 012a FA68     	 ldr r2,[r7,#12]
 447 012c 1344     	 add r3,r3,r2
 448 012e 0022     	 movs r2,#0
 449 0130 1A70     	 strb r2,[r3]
 116:ServerTDMA.c  **** }
 450              	 .loc 3 116 0
 451 0132 00BF     	 nop
 452 0134 1837     	 adds r7,r7,#24
 453              	.LCFI20:
 454              	 .cfi_def_cfa_offset 8
 455 0136 BD46     	 mov sp,r7
 456              	.LCFI21:
 457              	 .cfi_def_cfa_register 13
 458              	 
 459 0138 80BD     	 pop {r7,pc}
 460              	.L23:
 461 013a 00BF     	 .align 2
 462              	.L22:
 463 013c 00000000 	 .word .LC0
 464 0140 00000000 	 .word sprintf
 465              	 .cfi_endproc
 466              	.LFE232:
 468              	 .align 1
 469              	 .syntax unified
 470              	 .thumb
 471              	 .thumb_func
 472              	 .fpu softvfp
 474              	tmr_tdma_server_beacon:
 475              	.LFB233:
 117:ServerTDMA.c  **** #if (MASTER_MACSC == 1)
 118:ServerTDMA.c  **** static void tdma_server_beacon(void)
 119:ServerTDMA.c  **** {
 120:ServerTDMA.c  **** 	macsc_enable_manual_bts();
 121:ServerTDMA.c  **** 	appState					= APP_STATE_SEND;
 122:ServerTDMA.c  **** }
 123:ServerTDMA.c  **** static void tdma_server_statistics(void)
 124:ServerTDMA.c  **** {
 125:ServerTDMA.c  **** 	appState					= APP_STATE_SERVER_STATISTICS;
 126:ServerTDMA.c  **** }
 127:ServerTDMA.c  **** #else
 128:ServerTDMA.c  **** static void tmr_tdma_server_beacon(SYS_Timer_t *timer)
 129:ServerTDMA.c  **** {
 476              	 .loc 3 129 0
 477              	 .cfi_startproc
 478              	 
 479              	 
 480 0144 80B5     	 push {r7,lr}
 481              	.LCFI22:
 482              	 .cfi_def_cfa_offset 8
 483              	 .cfi_offset 7,-8
 484              	 .cfi_offset 14,-4
 485 0146 82B0     	 sub sp,sp,#8
 486              	.LCFI23:
 487              	 .cfi_def_cfa_offset 16
 488 0148 00AF     	 add r7,sp,#0
 489              	.LCFI24:
 490              	 .cfi_def_cfa_register 7
 491 014a 7860     	 str r0,[r7,#4]
 130:ServerTDMA.c  **** 	(void) timer;
 131:ServerTDMA.c  **** 
 132:ServerTDMA.c  **** 	SYS_TimerStart(&tmrComputeData);
 492              	 .loc 3 132 0
 493 014c 0448     	 ldr r0,.L25
 494 014e 054B     	 ldr r3,.L25+4
 495 0150 9847     	 blx r3
 496              	.LVL1:
 133:ServerTDMA.c  **** 	
 134:ServerTDMA.c  **** 	appState					= APP_STATE_SEND;
 497              	 .loc 3 134 0
 498 0152 054B     	 ldr r3,.L25+8
 499 0154 0322     	 movs r2,#3
 500 0156 1A70     	 strb r2,[r3]
 135:ServerTDMA.c  **** }
 501              	 .loc 3 135 0
 502 0158 00BF     	 nop
 503 015a 0837     	 adds r7,r7,#8
 504              	.LCFI25:
 505              	 .cfi_def_cfa_offset 8
 506 015c BD46     	 mov sp,r7
 507              	.LCFI26:
 508              	 .cfi_def_cfa_register 13
 509              	 
 510 015e 80BD     	 pop {r7,pc}
 511              	.L26:
 512              	 .align 2
 513              	.L25:
 514 0160 00000000 	 .word tmrComputeData
 515 0164 00000000 	 .word SYS_TimerStart
 516 0168 00000000 	 .word appState
 517              	 .cfi_endproc
 518              	.LFE233:
 520              	 .align 1
 521              	 .syntax unified
 522              	 .thumb
 523              	 .thumb_func
 524              	 .fpu softvfp
 526              	tmr_tdma_server_statistics:
 527              	.LFB234:
 136:ServerTDMA.c  **** static void tmr_tdma_server_statistics(SYS_Timer_t *timer)
 137:ServerTDMA.c  **** {
 528              	 .loc 3 137 0
 529              	 .cfi_startproc
 530              	 
 531              	 
 532              	 
 533 016c 80B4     	 push {r7}
 534              	.LCFI27:
 535              	 .cfi_def_cfa_offset 4
 536              	 .cfi_offset 7,-4
 537 016e 83B0     	 sub sp,sp,#12
 538              	.LCFI28:
 539              	 .cfi_def_cfa_offset 16
 540 0170 00AF     	 add r7,sp,#0
 541              	.LCFI29:
 542              	 .cfi_def_cfa_register 7
 543 0172 7860     	 str r0,[r7,#4]
 138:ServerTDMA.c  **** 	(void) timer;
 139:ServerTDMA.c  **** 
 140:ServerTDMA.c  **** 	appState					= APP_STATE_SERVER_STATISTICS;
 544              	 .loc 3 140 0
 545 0174 034B     	 ldr r3,.L28
 546 0176 0F22     	 movs r2,#15
 547 0178 1A70     	 strb r2,[r3]
 141:ServerTDMA.c  **** }
 548              	 .loc 3 141 0
 549 017a 00BF     	 nop
 550 017c 0C37     	 adds r7,r7,#12
 551              	.LCFI30:
 552              	 .cfi_def_cfa_offset 4
 553 017e BD46     	 mov sp,r7
 554              	.LCFI31:
 555              	 .cfi_def_cfa_register 13
 556              	 
 557 0180 80BC     	 pop {r7}
 558              	.LCFI32:
 559              	 .cfi_restore 7
 560              	 .cfi_def_cfa_offset 0
 561 0182 7047     	 bx lr
 562              	.L29:
 563              	 .align 2
 564              	.L28:
 565 0184 00000000 	 .word appState
 566              	 .cfi_endproc
 567              	.LFE234:
 569              	 .section .rodata
 570 0005 000000   	 .align 2
 571              	.LC1:
 572 0008 523A2025 	 .ascii "R: %d, C: %d, S: %d\012\000"
 572      642C2043 
 572      3A202564 
 572      2C20533A 
 572      2025640A 
 573 001d 000000   	 .align 2
 574              	.LC2:
 575 0020 5200     	 .ascii "R\000"
 576 0022 0000     	 .align 2
 577              	.LC3:
 578 0024 5300     	 .ascii "S\000"
 579 0026 0000     	 .align 2
 580              	.LC4:
 581 0028 25733A20 	 .ascii "%s: Node[%02d]: \012\000"
 581      4E6F6465 
 581      5B253032 
 581      645D3A20 
 581      0A00
 582              	 .text
 583              	 .align 1
 584              	 .syntax unified
 585              	 .thumb
 586              	 .thumb_func
 587              	 .fpu softvfp
 589              	server_statistics:
 590              	.LFB235:
 142:ServerTDMA.c  **** #endif
 143:ServerTDMA.c  **** static void server_statistics(void)
 144:ServerTDMA.c  **** {
 591              	 .loc 3 144 0
 592              	 .cfi_startproc
 593              	 
 594              	 
 595 0188 90B5     	 push {r4,r7,lr}
 596              	.LCFI33:
 597              	 .cfi_def_cfa_offset 12
 598              	 .cfi_offset 4,-12
 599              	 .cfi_offset 7,-8
 600              	 .cfi_offset 14,-4
 601 018a 85B0     	 sub sp,sp,#20
 602              	.LCFI34:
 603              	 .cfi_def_cfa_offset 32
 604 018c 00AF     	 add r7,sp,#0
 605              	.LCFI35:
 606              	 .cfi_def_cfa_register 7
 145:ServerTDMA.c  **** 	int	n_decoded				= solver_solve_system();
 607              	 .loc 3 145 0
 608 018e 1F4B     	 ldr r3,.L38
 609 0190 9847     	 blx r3
 610              	.LVL2:
 611 0192 B860     	 str r0,[r7,#8]
 146:ServerTDMA.c  **** 	int n_received				= solver_get_n_received();
 612              	 .loc 3 146 0
 613 0194 1E4B     	 ldr r3,.L38+4
 614 0196 9847     	 blx r3
 615              	.LVL3:
 616 0198 0346     	 mov r3,r0
 617 019a 7B60     	 str r3,[r7,#4]
 147:ServerTDMA.c  **** 
 148:ServerTDMA.c  **** #if (HUMAM_READABLE == 1)
 149:ServerTDMA.c  **** 	printf("R: %d, C: %d, S: %d\n", n_received, solver_get_n_colaborative(), n_decoded);
 618              	 .loc 3 149 0
 619 019c 1D4B     	 ldr r3,.L38+8
 620 019e 9847     	 blx r3
 621              	.LVL4:
 622 01a0 0346     	 mov r3,r0
 623 01a2 1A46     	 mov r2,r3
 624 01a4 BB68     	 ldr r3,[r7,#8]
 625 01a6 7968     	 ldr r1,[r7,#4]
 626 01a8 1B48     	 ldr r0,.L38+12
 627 01aa 1C4C     	 ldr r4,.L38+16
 628 01ac A047     	 blx r4
 629              	.LVL5:
 630              	.LBB93:
 150:ServerTDMA.c  **** 
 151:ServerTDMA.c  **** 	for(uint8_t j = SOLVER_MSG_RECEIVED; j < SOLVER_MSG_MAX; ++j)
 631              	 .loc 3 151 0
 632 01ae 0123     	 movs r3,#1
 633 01b0 FB73     	 strb r3,[r7,#15]
 634 01b2 21E0     	 b .L31
 635              	.L37:
 636              	.LBB94:
 152:ServerTDMA.c  **** 	{
 153:ServerTDMA.c  **** 		for(uint8_t i = 0; i < N_MOTES_COLLAB_MAX; ++i)
 637              	 .loc 3 153 0
 638 01b4 0023     	 movs r3,#0
 639 01b6 BB73     	 strb r3,[r7,#14]
 640 01b8 18E0     	 b .L32
 641              	.L36:
 642              	.LBB95:
 154:ServerTDMA.c  **** 		{
 155:ServerTDMA.c  **** 			uint8_t* buffer			= solver_get_data(i, j);
 643              	 .loc 3 155 0
 644 01ba FA7B     	 ldrb r2,[r7,#15]
 645 01bc BB7B     	 ldrb r3,[r7,#14]
 646 01be 1146     	 mov r1,r2
 647 01c0 1846     	 mov r0,r3
 648 01c2 174B     	 ldr r3,.L38+20
 649 01c4 9847     	 blx r3
 650              	.LVL6:
 651 01c6 3860     	 str r0,[r7]
 156:ServerTDMA.c  **** 			if(buffer)
 652              	 .loc 3 156 0
 653 01c8 3B68     	 ldr r3,[r7]
 654 01ca 002B     	 cmp r3,#0
 655 01cc 0BD0     	 beq .L33
 157:ServerTDMA.c  **** 			{
 158:ServerTDMA.c  **** 				//toHexBuffer(statistics_buffer, buffer, MSG_SIZE_MAX);
 159:ServerTDMA.c  **** 				//printf("%s: Node[%02d]: %s\n", (j == SOLVER_MSG_RECEIVED ? "R" : "S"), i + 1, statistics_buff
 160:ServerTDMA.c  **** 				printf("%s: Node[%02d]: \n", (j == SOLVER_MSG_RECEIVED ? "R" : "S"), i + 1);
 656              	 .loc 3 160 0
 657 01ce FB7B     	 ldrb r3,[r7,#15]
 658 01d0 012B     	 cmp r3,#1
 659 01d2 01D1     	 bne .L34
 660              	 .loc 3 160 0 is_stmt 0 discriminator 1
 661 01d4 1349     	 ldr r1,.L38+24
 662 01d6 00E0     	 b .L35
 663              	.L34:
 664              	 .loc 3 160 0 discriminator 2
 665 01d8 1349     	 ldr r1,.L38+28
 666              	.L35:
 667              	 .loc 3 160 0 discriminator 4
 668 01da BB7B     	 ldrb r3,[r7,#14]
 669 01dc 0133     	 adds r3,r3,#1
 670 01de 1A46     	 mov r2,r3
 671 01e0 1248     	 ldr r0,.L38+32
 672 01e2 0E4B     	 ldr r3,.L38+16
 673 01e4 9847     	 blx r3
 674              	.LVL7:
 675              	.L33:
 676              	.LBE95:
 153:ServerTDMA.c  **** 		{
 677              	 .loc 3 153 0 is_stmt 1 discriminator 2
 678 01e6 BB7B     	 ldrb r3,[r7,#14]
 679 01e8 0133     	 adds r3,r3,#1
 680 01ea BB73     	 strb r3,[r7,#14]
 681              	.L32:
 153:ServerTDMA.c  **** 		{
 682              	 .loc 3 153 0 is_stmt 0 discriminator 1
 683 01ec BB7B     	 ldrb r3,[r7,#14]
 684 01ee 0D2B     	 cmp r3,#13
 685 01f0 E3D9     	 bls .L36
 686              	.LBE94:
 151:ServerTDMA.c  **** 	{
 687              	 .loc 3 151 0 is_stmt 1 discriminator 2
 688 01f2 FB7B     	 ldrb r3,[r7,#15]
 689 01f4 0133     	 adds r3,r3,#1
 690 01f6 FB73     	 strb r3,[r7,#15]
 691              	.L31:
 151:ServerTDMA.c  **** 	{
 692              	 .loc 3 151 0 is_stmt 0 discriminator 1
 693 01f8 FB7B     	 ldrb r3,[r7,#15]
 694 01fa 022B     	 cmp r3,#2
 695 01fc DAD9     	 bls .L37
 696              	.LBE93:
 161:ServerTDMA.c  **** 			}
 162:ServerTDMA.c  **** 		}
 163:ServerTDMA.c  **** 	}
 164:ServerTDMA.c  **** #else
 165:ServerTDMA.c  **** 	printf("%d, %d, %d", n_received, solver_get_n_colaborative(), n_decoded);
 166:ServerTDMA.c  **** 	
 167:ServerTDMA.c  **** 	for(uint8_t i = 0; i < 10; ++i)
 168:ServerTDMA.c  **** 	{
 169:ServerTDMA.c  **** 		printf(", %d, ", i + 1);
 170:ServerTDMA.c  **** 
 171:ServerTDMA.c  **** 		uint8_t* buffer			= solver_get_data(i, SOLVER_MSG_RECEIVED);
 172:ServerTDMA.c  **** 		if(buffer)
 173:ServerTDMA.c  **** 		{
 174:ServerTDMA.c  **** 			printf("R, ");
 175:ServerTDMA.c  **** 		}
 176:ServerTDMA.c  **** 		else
 177:ServerTDMA.c  **** 		{
 178:ServerTDMA.c  **** 			buffer				= solver_get_data(i, SOLVER_MSG_DECODED);
 179:ServerTDMA.c  **** 			if(buffer)
 180:ServerTDMA.c  **** 			{
 181:ServerTDMA.c  **** 				printf("S, ");
 182:ServerTDMA.c  **** 			}
 183:ServerTDMA.c  **** 			else
 184:ServerTDMA.c  **** 			{
 185:ServerTDMA.c  **** 				printf("N, ");
 186:ServerTDMA.c  **** 			}
 187:ServerTDMA.c  **** 		}
 188:ServerTDMA.c  **** 		
 189:ServerTDMA.c  **** 		EnergyStatistics_t*		energy = energy_get_statistics(i);
 190:ServerTDMA.c  **** 		//printf("%d, %" PRIu64 ", %d, %" PRIu64 ", %d, %s ", energy->rssi, energy->n_collab_msg, energy-
 191:ServerTDMA.c  **** 	}
 192:ServerTDMA.c  **** #endif
 193:ServerTDMA.c  **** 	
 194:ServerTDMA.c  **** 	appState					= APP_STATE_IDLE;
 697              	 .loc 3 194 0 is_stmt 1
 698 01fe 0C4B     	 ldr r3,.L38+36
 699 0200 0122     	 movs r2,#1
 700 0202 1A70     	 strb r2,[r3]
 195:ServerTDMA.c  **** }
 701              	 .loc 3 195 0
 702 0204 00BF     	 nop
 703 0206 1437     	 adds r7,r7,#20
 704              	.LCFI36:
 705              	 .cfi_def_cfa_offset 12
 706 0208 BD46     	 mov sp,r7
 707              	.LCFI37:
 708              	 .cfi_def_cfa_register 13
 709              	 
 710 020a 90BD     	 pop {r4,r7,pc}
 711              	.L39:
 712              	 .align 2
 713              	.L38:
 714 020c 00000000 	 .word solver_solve_system
 715 0210 00000000 	 .word solver_get_n_received
 716 0214 00000000 	 .word solver_get_n_colaborative
 717 0218 08000000 	 .word .LC1
 718 021c 00000000 	 .word printf
 719 0220 00000000 	 .word solver_get_data
 720 0224 20000000 	 .word .LC2
 721 0228 24000000 	 .word .LC3
 722 022c 28000000 	 .word .LC4
 723 0230 00000000 	 .word appState
 724              	 .cfi_endproc
 725              	.LFE235:
 727              	 .section .rodata
 728 003a 0000     	 .align 2
 729              	.LC5:
 730 003c 0A0A5475 	 .ascii "\012\012Turn: %04d\012\000"
 730      726E3A20 
 730      25303464 
 730      0A00
 731 004a 0000     	 .align 2
 732              	.LC6:
 733 004c 436F6E6E 	 .ascii "Connected: %02d, %s\012\000"
 733      65637465 
 733      643A2025 
 733      3032642C 
 733      2025730A 
 734 0061 000000   	 .align 2
 735              	.LC7:
 736 0064 436F6C6C 	 .ascii "Collab Buffer: %s\012\000"
 736      61622042 
 736      75666665 
 736      723A2025 
 736      730A00
 737              	 .text
 738              	 .align 1
 739              	 .syntax unified
 740              	 .thumb
 741              	 .thumb_func
 742              	 .fpu softvfp
 744              	appSendData:
 745              	.LFB236:
 196:ServerTDMA.c  **** #else
 197:ServerTDMA.c  **** static void tdma_client_turn(void)
 198:ServerTDMA.c  **** {
 199:ServerTDMA.c  **** 	appState					= APP_STATE_WAKEUP_AND_WAIT;
 200:ServerTDMA.c  **** }
 201:ServerTDMA.c  **** static void tdma_collab_job(void)
 202:ServerTDMA.c  **** {
 203:ServerTDMA.c  **** 	appState					= APP_STATE_WAKEUP_AND_SEND_COLLAB;
 204:ServerTDMA.c  **** }
 205:ServerTDMA.c  **** static void tdma_client_job(void)
 206:ServerTDMA.c  **** {
 207:ServerTDMA.c  **** 	appState					= APP_STATE_WAKEUP_AND_SEND;
 208:ServerTDMA.c  **** }
 209:ServerTDMA.c  **** static void tdma_job_conf(NWK_DataReq_t *req)
 210:ServerTDMA.c  **** {
 211:ServerTDMA.c  **** 	(void) req;
 212:ServerTDMA.c  **** 
 213:ServerTDMA.c  **** 	if(appState == APP_STATE_SEND_BUSY_DATA && i_am_collab_dev)
 214:ServerTDMA.c  **** 	{
 215:ServerTDMA.c  **** 		SYS_TimerStart(&tmrBlinkData);
 216:ServerTDMA.c  **** 		appState				= APP_STATE_RECEIVE_COLLAB;
 217:ServerTDMA.c  **** 	}
 218:ServerTDMA.c  **** 	else
 219:ServerTDMA.c  **** 	{
 220:ServerTDMA.c  **** 		appState				= APP_STATE_SLEEP_PREPARE;
 221:ServerTDMA.c  **** 	}
 222:ServerTDMA.c  **** }
 223:ServerTDMA.c  **** static void tdma_collaborate_fase(void)
 224:ServerTDMA.c  **** {
 225:ServerTDMA.c  **** 	macsc_set_cmp2_int_cb(tdma_collab_job);			// Do collab job & Sleep
 226:ServerTDMA.c  **** 	macsc_enable_cmp_int(MACSC_CC2);
 227:ServerTDMA.c  **** 	macsc_use_cmp(MACSC_RELATIVE_CMP, (SUPERFRAME_DURATION_SD * 2) + (TDMA_FIRST_SLOT * i_am_collab_sl
 228:ServerTDMA.c  **** 
 229:ServerTDMA.c  **** 	appState					= APP_STATE_DO_COMPRESS;
 230:ServerTDMA.c  **** }
 231:ServerTDMA.c  **** static bool appBeaconInd(NWK_DataInd_t *ind)
 232:ServerTDMA.c  **** {
 233:ServerTDMA.c  **** 	(void) ind;
 234:ServerTDMA.c  **** 
 235:ServerTDMA.c  **** #if (LED_COUNT > 0)
 236:ServerTDMA.c  **** 	//LED_Toggle(LED_BLINK);
 237:ServerTDMA.c  **** 	//LED_Off(LED_DATA);
 238:ServerTDMA.c  **** #endif
 239:ServerTDMA.c  **** 
 240:ServerTDMA.c  **** 	AppMessageFrame_t*	frame_struct= (AppMessageFrame_t*) ind->data;
 241:ServerTDMA.c  **** 
 242:ServerTDMA.c  **** 	if(frame_struct->frameType == MSG_STATE_BEACON)
 243:ServerTDMA.c  **** 	{
 244:ServerTDMA.c  **** 		if(connected)
 245:ServerTDMA.c  **** 		{
 246:ServerTDMA.c  **** 			memcpy(collab_vector, frame_struct->beacon.collab_vector, N_COLLAB_VECTOR);
 247:ServerTDMA.c  **** 
 248:ServerTDMA.c  **** 			appState					= APP_STATE_SEND_PREPARE;
 249:ServerTDMA.c  **** 		}
 250:ServerTDMA.c  **** 		else
 251:ServerTDMA.c  **** 		{
 252:ServerTDMA.c  **** 			appState					= APP_STATE_SLEEP_PREPARE;
 253:ServerTDMA.c  **** 		}
 254:ServerTDMA.c  **** 	}
 255:ServerTDMA.c  **** 
 256:ServerTDMA.c  **** 	return true;
 257:ServerTDMA.c  **** }
 258:ServerTDMA.c  **** static void appCollabPrepare(void)
 259:ServerTDMA.c  **** {
 260:ServerTDMA.c  **** 	solver_encode_messages(&msgFrameCollab);
 261:ServerTDMA.c  **** }
 262:ServerTDMA.c  **** static void appSendPrepare(void)
 263:ServerTDMA.c  **** {
 264:ServerTDMA.c  **** 	macsc_set_cmp2_int_cb(tdma_client_job);			// Do job & Sleep
 265:ServerTDMA.c  **** 	macsc_enable_cmp_int(MACSC_CC2);
 266:ServerTDMA.c  **** 	macsc_use_cmp(MACSC_RELATIVE_CMP, TDMA_FIRST_SLOT * APP_ADDR, MACSC_CC2);
 267:ServerTDMA.c  **** 
 268:ServerTDMA.c  **** #if 0
 269:ServerTDMA.c  **** 	#if (APP_ADDR == 1)
 270:ServerTDMA.c  **** 		memcpy(msgFrame.data.data_vector, vector_data1, MSG_SIZE_MAX);
 271:ServerTDMA.c  **** 	#else
 272:ServerTDMA.c  **** 		memcpy(msgFrame.data.data_vector, vector_data2, MSG_SIZE_MAX);
 273:ServerTDMA.c  **** 	#endif
 274:ServerTDMA.c  **** #else
 275:ServerTDMA.c  **** 	for(uint8_t i = 0; i < MSG_SIZE_MAX; ++i)
 276:ServerTDMA.c  **** 	{
 277:ServerTDMA.c  **** 		msgFrame.data.data_vector[i]	= rand();
 278:ServerTDMA.c  **** 	}
 279:ServerTDMA.c  **** #endif
 280:ServerTDMA.c  **** 	
 281:ServerTDMA.c  **** 	// Analyze Beacon Payload to configure collaborative devices
 282:ServerTDMA.c  **** 	uint8_t			n_collab_dev		= collab_vector[0];
 283:ServerTDMA.c  **** 	i_am_collab_turn					= collab_vector[1];
 284:ServerTDMA.c  **** 	i_am_collab_dev						= false;
 285:ServerTDMA.c  **** 	i_am_collab_slot					= 0;
 286:ServerTDMA.c  **** 
 287:ServerTDMA.c  **** 	// Scan to check if THIS device is on collab_vector
 288:ServerTDMA.c  **** 	for(uint8_t i = 0; i < n_collab_dev; ++i)
 289:ServerTDMA.c  **** 	{
 290:ServerTDMA.c  **** 		if(collab_vector[i + 2] == APP_ADDR)
 291:ServerTDMA.c  **** 		{
 292:ServerTDMA.c  **** 			i_am_collab_dev				= true;
 293:ServerTDMA.c  **** 			i_am_collab_slot			= i + 1;
 294:ServerTDMA.c  **** 			break;
 295:ServerTDMA.c  **** 		}
 296:ServerTDMA.c  **** 	}
 297:ServerTDMA.c  **** 
 298:ServerTDMA.c  **** 	if(i_am_collab_dev)
 299:ServerTDMA.c  **** 	{
 300:ServerTDMA.c  **** 		macsc_set_cmp3_int_cb(tdma_collaborate_fase);	// Do Collaborate
 301:ServerTDMA.c  **** 		macsc_enable_cmp_int(MACSC_CC3);
 302:ServerTDMA.c  **** 		macsc_use_cmp(MACSC_RELATIVE_CMP, SUPERFRAME_DURATION_SD, MACSC_CC3);
 303:ServerTDMA.c  **** 
 304:ServerTDMA.c  **** 		solver_set_collab_device(i_am_collab_slot);
 305:ServerTDMA.c  **** 		solver_prepare_next_turn();
 306:ServerTDMA.c  **** 		solver_set_data_frame(APP_ADDR, &msgFrame);
 307:ServerTDMA.c  **** 	}
 308:ServerTDMA.c  **** 	else
 309:ServerTDMA.c  **** 	{
 310:ServerTDMA.c  **** 		solver_set_collab_device(0);
 311:ServerTDMA.c  **** 		macsc_set_cmp3_int_cb(NULL);					// Disable
 312:ServerTDMA.c  **** 	}
 313:ServerTDMA.c  **** }
 314:ServerTDMA.c  **** static void appSendCollab(void)
 315:ServerTDMA.c  **** {
 316:ServerTDMA.c  **** #if (LED_COUNT > 0)
 317:ServerTDMA.c  **** 	LED_On(LED_DATA);
 318:ServerTDMA.c  **** #endif
 319:ServerTDMA.c  **** 
 320:ServerTDMA.c  **** 	NWK_DataReq(&msgReqCollab);
 321:ServerTDMA.c  **** }
 322:ServerTDMA.c  **** #endif
 323:ServerTDMA.c  **** static void appSendData(void)
 324:ServerTDMA.c  **** {
 746              	 .loc 3 324 0
 747              	 .cfi_startproc
 748              	 
 749              	 
 750 0234 80B5     	 push {r7,lr}
 751              	.LCFI38:
 752              	 .cfi_def_cfa_offset 8
 753              	 .cfi_offset 7,-8
 754              	 .cfi_offset 14,-4
 755 0236 82B0     	 sub sp,sp,#8
 756              	.LCFI39:
 757              	 .cfi_def_cfa_offset 16
 758 0238 00AF     	 add r7,sp,#0
 759              	.LCFI40:
 760              	 .cfi_def_cfa_register 7
 325:ServerTDMA.c  **** #if (LED_COUNT > 0)
 326:ServerTDMA.c  **** 	LED_On(LED_DATA);
 761              	 .loc 3 326 0
 762 023a 0021     	 movs r1,#0
 763 023c 2620     	 movs r0,#38
 764 023e FFF7DFFE 	 bl ioport_set_pin_level
 327:ServerTDMA.c  **** 	#if (APP_COORDINATOR)
 328:ServerTDMA.c  **** 		SYS_TimerStart(&tmrBlinkData);
 765              	 .loc 3 328 0
 766 0242 1A48     	 ldr r0,.L41
 767 0244 1A4B     	 ldr r3,.L41+4
 768 0246 9847     	 blx r3
 769              	.LVL8:
 329:ServerTDMA.c  **** 	#endif
 330:ServerTDMA.c  **** #endif
 331:ServerTDMA.c  **** 
 332:ServerTDMA.c  **** #if (APP_COORDINATOR)
 333:ServerTDMA.c  **** #if (HUMAM_READABLE == 1)
 334:ServerTDMA.c  **** 	printf("\n\nTurn: %04d\n", server_turn++);
 770              	 .loc 3 334 0
 771 0248 1A4B     	 ldr r3,.L41+8
 772 024a 1B88     	 ldrh r3,[r3]
 773 024c 5A1C     	 adds r2,r3,#1
 774 024e 91B2     	 uxth r1,r2
 775 0250 184A     	 ldr r2,.L41+8
 776 0252 1180     	 strh r1,[r2]
 777 0254 1946     	 mov r1,r3
 778 0256 1848     	 ldr r0,.L41+12
 779 0258 184B     	 ldr r3,.L41+16
 780 025a 9847     	 blx r3
 781              	.LVL9:
 335:ServerTDMA.c  **** 	energy_prepare_next_turn();
 782              	 .loc 3 335 0
 783 025c 184B     	 ldr r3,.L41+20
 784 025e 9847     	 blx r3
 785              	.LVL10:
 336:ServerTDMA.c  **** 	solver_prepare_next_turn();
 786              	 .loc 3 336 0
 787 0260 184B     	 ldr r3,.L41+24
 788 0262 9847     	 blx r3
 789              	.LVL11:
 337:ServerTDMA.c  **** 	energy_get_collab_vector(msgFrame.beacon.collab_vector);
 790              	 .loc 3 337 0
 791 0264 1848     	 ldr r0,.L41+28
 792 0266 194B     	 ldr r3,.L41+32
 793 0268 9847     	 blx r3
 794              	.LVL12:
 338:ServerTDMA.c  **** 	uint8_t aux_connected = energy_get_connected_vector(aux_buffer);
 795              	 .loc 3 338 0
 796 026a 1948     	 ldr r0,.L41+36
 797 026c 194B     	 ldr r3,.L41+40
 798 026e 9847     	 blx r3
 799              	.LVL13:
 800 0270 0346     	 mov r3,r0
 801 0272 FB71     	 strb r3,[r7,#7]
 339:ServerTDMA.c  **** 	toHexBuffer(statistics_buffer, aux_buffer, N_MOTES_COLLAB_MAX);
 802              	 .loc 3 339 0
 803 0274 0E22     	 movs r2,#14
 804 0276 1649     	 ldr r1,.L41+36
 805 0278 1748     	 ldr r0,.L41+44
 806 027a FFF732FF 	 bl toHexBuffer
 340:ServerTDMA.c  **** 	printf("Connected: %02d, %s\n", aux_connected, statistics_buffer);
 807              	 .loc 3 340 0
 808 027e FB79     	 ldrb r3,[r7,#7]
 809 0280 154A     	 ldr r2,.L41+44
 810 0282 1946     	 mov r1,r3
 811 0284 1548     	 ldr r0,.L41+48
 812 0286 0D4B     	 ldr r3,.L41+16
 813 0288 9847     	 blx r3
 814              	.LVL14:
 341:ServerTDMA.c  **** 
 342:ServerTDMA.c  **** 	toHexBuffer(statistics_buffer, msgFrame.beacon.collab_vector, N_COLLAB_VECTOR);
 815              	 .loc 3 342 0
 816 028a 2022     	 movs r2,#32
 817 028c 0E49     	 ldr r1,.L41+28
 818 028e 1248     	 ldr r0,.L41+44
 819 0290 FFF727FF 	 bl toHexBuffer
 343:ServerTDMA.c  **** 	printf("Collab Buffer: %s\n", statistics_buffer);
 820              	 .loc 3 343 0
 821 0294 1049     	 ldr r1,.L41+44
 822 0296 1248     	 ldr r0,.L41+52
 823 0298 084B     	 ldr r3,.L41+16
 824 029a 9847     	 blx r3
 825              	.LVL15:
 344:ServerTDMA.c  **** #else
 345:ServerTDMA.c  **** 	printf("\n%d,", server_turn++);
 346:ServerTDMA.c  **** 	energy_prepare_next_turn();
 347:ServerTDMA.c  **** 	solver_prepare_next_turn();
 348:ServerTDMA.c  **** 	energy_get_collab_vector(msgFrame.beacon.collab_vector);
 349:ServerTDMA.c  **** 	uint8_t aux_connected = energy_get_connected_vector(aux_buffer);
 350:ServerTDMA.c  **** 	toHexBuffer(statistics_buffer, aux_buffer, N_MOTES_COLLAB_MAX);
 351:ServerTDMA.c  **** 	printf("%d, %s,", aux_connected, statistics_buffer);
 352:ServerTDMA.c  **** 
 353:ServerTDMA.c  **** 	toHexBuffer(statistics_buffer, msgFrame.beacon.collab_vector, N_COLLAB_VECTOR);
 354:ServerTDMA.c  **** 	printf("%s,", statistics_buffer);
 355:ServerTDMA.c  **** #endif
 356:ServerTDMA.c  **** 	
 357:ServerTDMA.c  **** 	NWK_DataReq(&msgReq);
 826              	 .loc 3 357 0
 827 029c 1148     	 ldr r0,.L41+56
 828 029e 124B     	 ldr r3,.L41+60
 829 02a0 9847     	 blx r3
 830              	.LVL16:
 358:ServerTDMA.c  **** #else
 359:ServerTDMA.c  **** 	if(connected)
 360:ServerTDMA.c  **** 	{
 361:ServerTDMA.c  **** 		// Utiliza o SLOT do TDMA para enviar dados somente apos conectar com o Coordenador
 362:ServerTDMA.c  **** 		NWK_DataReq(&msgReq);
 363:ServerTDMA.c  **** 	}
 364:ServerTDMA.c  **** 	else
 365:ServerTDMA.c  **** 	{
 366:ServerTDMA.c  **** 		NWK_DataReq(&msgReqConnection);
 367:ServerTDMA.c  **** 	}
 368:ServerTDMA.c  **** #endif
 369:ServerTDMA.c  **** }
 831              	 .loc 3 369 0
 832 02a2 00BF     	 nop
 833 02a4 0837     	 adds r7,r7,#8
 834              	.LCFI41:
 835              	 .cfi_def_cfa_offset 8
 836 02a6 BD46     	 mov sp,r7
 837              	.LCFI42:
 838              	 .cfi_def_cfa_register 13
 839              	 
 840 02a8 80BD     	 pop {r7,pc}
 841              	.L42:
 842 02aa 00BF     	 .align 2
 843              	.L41:
 844 02ac 00000000 	 .word tmrBlinkData
 845 02b0 00000000 	 .word SYS_TimerStart
 846 02b4 00000000 	 .word server_turn
 847 02b8 3C000000 	 .word .LC5
 848 02bc 00000000 	 .word printf
 849 02c0 00000000 	 .word energy_prepare_next_turn
 850 02c4 00000000 	 .word solver_prepare_next_turn
 851 02c8 01000000 	 .word msgFrame+1
 852 02cc 00000000 	 .word energy_get_collab_vector
 853 02d0 00000000 	 .word aux_buffer
 854 02d4 00000000 	 .word energy_get_connected_vector
 855 02d8 00000000 	 .word statistics_buffer
 856 02dc 4C000000 	 .word .LC6
 857 02e0 64000000 	 .word .LC7
 858 02e4 00000000 	 .word msgReq
 859 02e8 00000000 	 .word NWK_DataReq
 860              	 .cfi_endproc
 861              	.LFE236:
 863              	 .align 1
 864              	 .syntax unified
 865              	 .thumb
 866              	 .thumb_func
 867              	 .fpu softvfp
 869              	appDataInd:
 870              	.LFB237:
 370:ServerTDMA.c  **** static bool appDataInd(NWK_DataInd_t *ind)
 371:ServerTDMA.c  **** {
 871              	 .loc 3 371 0
 872              	 .cfi_startproc
 873              	 
 874              	 
 875 02ec 80B5     	 push {r7,lr}
 876              	.LCFI43:
 877              	 .cfi_def_cfa_offset 8
 878              	 .cfi_offset 7,-8
 879              	 .cfi_offset 14,-4
 880 02ee 84B0     	 sub sp,sp,#16
 881              	.LCFI44:
 882              	 .cfi_def_cfa_offset 24
 883 02f0 00AF     	 add r7,sp,#0
 884              	.LCFI45:
 885              	 .cfi_def_cfa_register 7
 886 02f2 7860     	 str r0,[r7,#4]
 372:ServerTDMA.c  **** #if (LED_COUNT > 0)
 373:ServerTDMA.c  **** 	LED_Toggle(LED_BLINK);
 887              	 .loc 3 373 0
 888 02f4 2720     	 movs r0,#39
 889 02f6 FFF7C6FE 	 bl ioport_toggle_pin_level
 374:ServerTDMA.c  **** 	//LED_Off(LED_DATA);
 375:ServerTDMA.c  **** #endif
 376:ServerTDMA.c  **** 	energy_receive_statistics(ind);
 890              	 .loc 3 376 0
 891 02fa 7868     	 ldr r0,[r7,#4]
 892 02fc 0B4B     	 ldr r3,.L46
 893 02fe 9847     	 blx r3
 894              	.LVL17:
 377:ServerTDMA.c  **** 	solver_received_data_frame(ind);
 895              	 .loc 3 377 0
 896 0300 7868     	 ldr r0,[r7,#4]
 897 0302 0B4B     	 ldr r3,.L46+4
 898 0304 9847     	 blx r3
 899              	.LVL18:
 378:ServerTDMA.c  **** 
 379:ServerTDMA.c  **** 	AppMessageFrame_t*	frame_struct	= (AppMessageFrame_t*) ind->data;
 900              	 .loc 3 379 0
 901 0306 7B68     	 ldr r3,[r7,#4]
 902 0308 9B68     	 ldr r3,[r3,#8]
 903 030a FB60     	 str r3,[r7,#12]
 380:ServerTDMA.c  **** 
 381:ServerTDMA.c  **** 	if(frame_struct->frameType == MSG_STATE_CONNECTION)
 904              	 .loc 3 381 0
 905 030c FB68     	 ldr r3,[r7,#12]
 906 030e 1B78     	 ldrb r3,[r3]
 907 0310 032B     	 cmp r3,#3
 908 0312 06D1     	 bne .L44
 382:ServerTDMA.c  **** 	{
 383:ServerTDMA.c  **** #if (APP_COORDINATOR)
 384:ServerTDMA.c  **** 		// No coordenador, responder ao pedido de conex?o.
 385:ServerTDMA.c  **** 		msgReqConnection.dstAddr = ind->srcAddr;
 909              	 .loc 3 385 0
 910 0314 7B68     	 ldr r3,[r7,#4]
 911 0316 1A88     	 ldrh r2,[r3]
 912 0318 064B     	 ldr r3,.L46+8
 913 031a 5A81     	 strh r2,[r3,#10]
 386:ServerTDMA.c  **** 		NWK_DataReq(&msgReqConnection);
 914              	 .loc 3 386 0
 915 031c 0548     	 ldr r0,.L46+8
 916 031e 064B     	 ldr r3,.L46+12
 917 0320 9847     	 blx r3
 918              	.LVL19:
 919              	.L44:
 387:ServerTDMA.c  **** #else
 388:ServerTDMA.c  **** 		// No cliente, indica??o de conex?o aceita e que os dados podem ser enviados.
 389:ServerTDMA.c  **** 		connected				= true;
 390:ServerTDMA.c  **** #endif
 391:ServerTDMA.c  **** 	}
 392:ServerTDMA.c  **** 
 393:ServerTDMA.c  **** 	return true;
 920              	 .loc 3 393 0
 921 0322 0123     	 movs r3,#1
 394:ServerTDMA.c  **** }
 922              	 .loc 3 394 0
 923 0324 1846     	 mov r0,r3
 924 0326 1037     	 adds r7,r7,#16
 925              	.LCFI46:
 926              	 .cfi_def_cfa_offset 8
 927 0328 BD46     	 mov sp,r7
 928              	.LCFI47:
 929              	 .cfi_def_cfa_register 13
 930              	 
 931 032a 80BD     	 pop {r7,pc}
 932              	.L47:
 933              	 .align 2
 934              	.L46:
 935 032c 00000000 	 .word energy_receive_statistics
 936 0330 00000000 	 .word solver_received_data_frame
 937 0334 00000000 	 .word msgReqConnection
 938 0338 00000000 	 .word NWK_DataReq
 939              	 .cfi_endproc
 940              	.LFE237:
 942              	 .align 1
 943              	 .syntax unified
 944              	 .thumb
 945              	 .thumb_func
 946              	 .fpu softvfp
 948              	appInit:
 949              	.LFB238:
 395:ServerTDMA.c  **** static void appInit(void)
 396:ServerTDMA.c  **** {
 950              	 .loc 3 396 0
 951              	 .cfi_startproc
 952              	 
 953              	 
 954 033c 80B5     	 push {r7,lr}
 955              	.LCFI48:
 956              	 .cfi_def_cfa_offset 8
 957              	 .cfi_offset 7,-8
 958              	 .cfi_offset 14,-4
 959 033e 00AF     	 add r7,sp,#0
 960              	.LCFI49:
 961              	 .cfi_def_cfa_register 7
 397:ServerTDMA.c  **** 	NWK_SetAddr(APP_ADDR);
 962              	 .loc 3 397 0
 963 0340 0020     	 movs r0,#0
 964 0342 384B     	 ldr r3,.L49
 965 0344 9847     	 blx r3
 966              	.LVL20:
 398:ServerTDMA.c  **** 	NWK_SetPanId(APP_PANID);
 967              	 .loc 3 398 0
 968 0346 4CF6FE20 	 movw r0,#51966
 969 034a 374B     	 ldr r3,.L49+4
 970 034c 9847     	 blx r3
 971              	.LVL21:
 399:ServerTDMA.c  **** 	PHY_SetChannel(APP_CHANNEL);
 972              	 .loc 3 399 0
 973 034e 0F20     	 movs r0,#15
 974 0350 364B     	 ldr r3,.L49+8
 975 0352 9847     	 blx r3
 976              	.LVL22:
 400:ServerTDMA.c  **** 	PHY_SetRxState(true);
 977              	 .loc 3 400 0
 978 0354 0120     	 movs r0,#1
 979 0356 364B     	 ldr r3,.L49+12
 980 0358 9847     	 blx r3
 981              	.LVL23:
 401:ServerTDMA.c  **** 
 402:ServerTDMA.c  **** #if (LED_COUNT > 0)
 403:ServerTDMA.c  **** 	LED_On(LED_NETWORK);
 982              	 .loc 3 403 0
 983 035a 0021     	 movs r1,#0
 984 035c 0820     	 movs r0,#8
 985 035e FFF74FFE 	 bl ioport_set_pin_level
 404:ServerTDMA.c  **** #endif
 405:ServerTDMA.c  **** 
 406:ServerTDMA.c  **** #ifdef PHY_ENABLE_RANDOM_NUMBER_GENERATOR
 407:ServerTDMA.c  **** 	srand(PHY_RandomReq());
 986              	 .loc 3 407 0
 987 0362 344B     	 ldr r3,.L49+16
 988 0364 9847     	 blx r3
 989              	.LVL24:
 990 0366 0346     	 mov r3,r0
 991 0368 1846     	 mov r0,r3
 992 036a 334B     	 ldr r3,.L49+20
 993 036c 9847     	 blx r3
 994              	.LVL25:
 408:ServerTDMA.c  **** #endif
 409:ServerTDMA.c  **** 
 410:ServerTDMA.c  **** 	tmrBlinkData.interval		= 50;
 995              	 .loc 3 410 0
 996 036e 334B     	 ldr r3,.L49+24
 997 0370 3222     	 movs r2,#50
 998 0372 9A60     	 str r2,[r3,#8]
 411:ServerTDMA.c  **** 	tmrBlinkData.mode			= SYS_TIMER_INTERVAL_MODE;
 999              	 .loc 3 411 0
 1000 0374 314B     	 ldr r3,.L49+24
 1001 0376 0022     	 movs r2,#0
 1002 0378 1A73     	 strb r2,[r3,#12]
 412:ServerTDMA.c  **** 	tmrBlinkData.handler		= tmrBlinkDataHandler;
 1003              	 .loc 3 412 0
 1004 037a 304B     	 ldr r3,.L49+24
 1005 037c 304A     	 ldr r2,.L49+28
 1006 037e 1A61     	 str r2,[r3,#16]
 413:ServerTDMA.c  **** 
 414:ServerTDMA.c  **** 	msgFrameConnection.frameType = MSG_STATE_CONNECTION;
 1007              	 .loc 3 414 0
 1008 0380 304B     	 ldr r3,.L49+32
 1009 0382 0322     	 movs r2,#3
 1010 0384 1A70     	 strb r2,[r3]
 415:ServerTDMA.c  **** 
 416:ServerTDMA.c  **** 	msgReqConnection.dstAddr	= BROADCAST;
 1011              	 .loc 3 416 0
 1012 0386 304B     	 ldr r3,.L49+36
 1013 0388 4FF6FF72 	 movw r2,#65535
 1014 038c 5A81     	 strh r2,[r3,#10]
 417:ServerTDMA.c  **** 	msgReqConnection.dstEndpoint = APP_DATA_ENDPOINT;
 1015              	 .loc 3 417 0
 1016 038e 2E4B     	 ldr r3,.L49+36
 1017 0390 0122     	 movs r2,#1
 1018 0392 1A73     	 strb r2,[r3,#12]
 418:ServerTDMA.c  **** 	msgReqConnection.srcEndpoint = APP_DATA_ENDPOINT;
 1019              	 .loc 3 418 0
 1020 0394 2C4B     	 ldr r3,.L49+36
 1021 0396 0122     	 movs r2,#1
 1022 0398 5A73     	 strb r2,[r3,#13]
 419:ServerTDMA.c  **** 	msgReqConnection.options	= NWK_OPT_LINK_LOCAL;
 1023              	 .loc 3 419 0
 1024 039a 2B4B     	 ldr r3,.L49+36
 1025 039c 0822     	 movs r2,#8
 1026 039e DA81     	 strh r2,[r3,#14]
 420:ServerTDMA.c  **** 	msgReqConnection.data		= (uint8_t *)&msgFrameConnection;
 1027              	 .loc 3 420 0
 1028 03a0 294B     	 ldr r3,.L49+36
 1029 03a2 284A     	 ldr r2,.L49+32
 1030 03a4 5A61     	 str r2,[r3,#20]
 421:ServerTDMA.c  **** 	msgReqConnection.size		= sizeof(MsgState_t);
 1031              	 .loc 3 421 0
 1032 03a6 284B     	 ldr r3,.L49+36
 1033 03a8 0122     	 movs r2,#1
 1034 03aa 1A76     	 strb r2,[r3,#24]
 422:ServerTDMA.c  **** 	msgReqConnection.confirm	= NULL;
 1035              	 .loc 3 422 0
 1036 03ac 264B     	 ldr r3,.L49+36
 1037 03ae 0022     	 movs r2,#0
 1038 03b0 DA61     	 str r2,[r3,#28]
 423:ServerTDMA.c  **** 
 424:ServerTDMA.c  **** #if (APP_COORDINATOR)
 425:ServerTDMA.c  **** 	server_turn					= 1;
 1039              	 .loc 3 425 0
 1040 03b2 264B     	 ldr r3,.L49+40
 1041 03b4 0122     	 movs r2,#1
 1042 03b6 1A80     	 strh r2,[r3]
 426:ServerTDMA.c  **** 
 427:ServerTDMA.c  **** 	NWK_OpenEndpoint(APP_DATA_ENDPOINT, appDataInd);
 1043              	 .loc 3 427 0
 1044 03b8 2549     	 ldr r1,.L49+44
 1045 03ba 0120     	 movs r0,#1
 1046 03bc 254B     	 ldr r3,.L49+48
 1047 03be 9847     	 blx r3
 1048              	.LVL26:
 428:ServerTDMA.c  **** 
 429:ServerTDMA.c  **** 	msgFrame.frameType			= MSG_STATE_BEACON;
 1049              	 .loc 3 429 0
 1050 03c0 254B     	 ldr r3,.L49+52
 1051 03c2 0022     	 movs r2,#0
 1052 03c4 1A70     	 strb r2,[r3]
 430:ServerTDMA.c  **** 
 431:ServerTDMA.c  **** 	msgReq.dstAddr				= BROADCAST;
 1053              	 .loc 3 431 0
 1054 03c6 254B     	 ldr r3,.L49+56
 1055 03c8 4FF6FF72 	 movw r2,#65535
 1056 03cc 5A81     	 strh r2,[r3,#10]
 432:ServerTDMA.c  **** 	msgReq.dstEndpoint			= APP_BEACON_ENDPOINT;
 1057              	 .loc 3 432 0
 1058 03ce 234B     	 ldr r3,.L49+56
 1059 03d0 0022     	 movs r2,#0
 1060 03d2 1A73     	 strb r2,[r3,#12]
 433:ServerTDMA.c  **** 	msgReq.srcEndpoint			= APP_BEACON_ENDPOINT;
 1061              	 .loc 3 433 0
 1062 03d4 214B     	 ldr r3,.L49+56
 1063 03d6 0022     	 movs r2,#0
 1064 03d8 5A73     	 strb r2,[r3,#13]
 434:ServerTDMA.c  **** 	msgReq.options				= NWK_OPT_BEACON;
 1065              	 .loc 3 434 0
 1066 03da 204B     	 ldr r3,.L49+56
 1067 03dc 2022     	 movs r2,#32
 1068 03de DA81     	 strh r2,[r3,#14]
 435:ServerTDMA.c  **** 	msgReq.data					= (uint8_t *)&msgFrame;
 1069              	 .loc 3 435 0
 1070 03e0 1E4B     	 ldr r3,.L49+56
 1071 03e2 1D4A     	 ldr r2,.L49+52
 1072 03e4 5A61     	 str r2,[r3,#20]
 436:ServerTDMA.c  **** 	msgReq.size					= sizeof(MsgState_t) + sizeof(AppMessageBeacon_t);
 1073              	 .loc 3 436 0
 1074 03e6 1D4B     	 ldr r3,.L49+56
 1075 03e8 2122     	 movs r2,#33
 1076 03ea 1A76     	 strb r2,[r3,#24]
 437:ServerTDMA.c  **** 	msgReq.confirm				= NULL;
 1077              	 .loc 3 437 0
 1078 03ec 1B4B     	 ldr r3,.L49+56
 1079 03ee 0022     	 movs r2,#0
 1080 03f0 DA61     	 str r2,[r3,#28]
 438:ServerTDMA.c  **** 
 439:ServerTDMA.c  **** #if (MASTER_MACSC == 1)
 440:ServerTDMA.c  **** 	/*
 441:ServerTDMA.c  **** 	 * Configure interrupts callback functions
 442:ServerTDMA.c  **** 	 * overflow interrupt, compare 1,2,3 interrupts
 443:ServerTDMA.c  **** 	 */
 444:ServerTDMA.c  **** 	macsc_set_cmp1_int_cb(tdma_server_beacon);
 445:ServerTDMA.c  **** 	macsc_set_cmp2_int_cb(tdma_server_statistics);
 446:ServerTDMA.c  **** 
 447:ServerTDMA.c  **** 	/*
 448:ServerTDMA.c  **** 	 * Configure MACSC to generate compare interrupts from channels 1,2,3
 449:ServerTDMA.c  **** 	 * Set compare mode to absolute, set compare value.
 450:ServerTDMA.c  **** 	 */
 451:ServerTDMA.c  **** 	macsc_enable_manual_bts();
 452:ServerTDMA.c  **** 	macsc_enable_cmp_int(MACSC_CC1);
 453:ServerTDMA.c  **** 	macsc_use_cmp(MACSC_RELATIVE_CMP, BEACON_INTERVAL_BI, MACSC_CC1);
 454:ServerTDMA.c  **** 	macsc_enable_cmp_int(MACSC_CC2);
 455:ServerTDMA.c  **** 	macsc_use_cmp(MACSC_RELATIVE_CMP, (SUPERFRAME_DURATION_SD * 3), MACSC_CC2);
 456:ServerTDMA.c  **** #else
 457:ServerTDMA.c  **** 	tmrBeaconInterval.interval	= (BEACON_INTERVAL_BI * SYMBOL_TIME) * 1000;
 1081              	 .loc 3 457 0
 1082 03f2 1B4B     	 ldr r3,.L49+60
 1083 03f4 40F65C72 	 movw r2,#3932
 1084 03f8 9A60     	 str r2,[r3,#8]
 458:ServerTDMA.c  **** 	tmrBeaconInterval.mode		= SYS_TIMER_PERIODIC_MODE;
 1085              	 .loc 3 458 0
 1086 03fa 194B     	 ldr r3,.L49+60
 1087 03fc 0122     	 movs r2,#1
 1088 03fe 1A73     	 strb r2,[r3,#12]
 459:ServerTDMA.c  **** 	tmrBeaconInterval.handler	= tmr_tdma_server_beacon;
 1089              	 .loc 3 459 0
 1090 0400 174B     	 ldr r3,.L49+60
 1091 0402 184A     	 ldr r2,.L49+64
 1092 0404 1A61     	 str r2,[r3,#16]
 460:ServerTDMA.c  **** 
 461:ServerTDMA.c  **** 	tmrComputeData.interval		= ((SUPERFRAME_DURATION_SD * 3) * SYMBOL_TIME) * 1000;
 1093              	 .loc 3 461 0
 1094 0406 184B     	 ldr r3,.L49+68
 1095 0408 4FF41062 	 mov r2,#2304
 1096 040c 9A60     	 str r2,[r3,#8]
 462:ServerTDMA.c  **** 	tmrComputeData.mode			= SYS_TIMER_INTERVAL_MODE;
 1097              	 .loc 3 462 0
 1098 040e 164B     	 ldr r3,.L49+68
 1099 0410 0022     	 movs r2,#0
 1100 0412 1A73     	 strb r2,[r3,#12]
 463:ServerTDMA.c  **** 	tmrComputeData.handler		= tmr_tdma_server_statistics;
 1101              	 .loc 3 463 0
 1102 0414 144B     	 ldr r3,.L49+68
 1103 0416 154A     	 ldr r2,.L49+72
 1104 0418 1A61     	 str r2,[r3,#16]
 464:ServerTDMA.c  **** 	
 465:ServerTDMA.c  **** 	SYS_TimerStart(&tmrBeaconInterval);
 1105              	 .loc 3 465 0
 1106 041a 1148     	 ldr r0,.L49+60
 1107 041c 144B     	 ldr r3,.L49+76
 1108 041e 9847     	 blx r3
 1109              	.LVL27:
 466:ServerTDMA.c  **** #endif
 467:ServerTDMA.c  **** #else
 468:ServerTDMA.c  **** 	connected					= false;
 469:ServerTDMA.c  **** 	i_am_collab_dev				= false;
 470:ServerTDMA.c  **** 	i_am_collab_slot			= 0;
 471:ServerTDMA.c  **** 	i_am_collab_turn			= 0;
 472:ServerTDMA.c  **** 
 473:ServerTDMA.c  **** 	NWK_OpenEndpoint(APP_BEACON_ENDPOINT, appBeaconInd);
 474:ServerTDMA.c  **** 	NWK_OpenEndpoint(APP_DATA_ENDPOINT, appDataInd);
 475:ServerTDMA.c  **** 
 476:ServerTDMA.c  **** 	msgFrame.frameType			= MSG_STATE_DATA;
 477:ServerTDMA.c  **** 
 478:ServerTDMA.c  **** 	msgReq.dstAddr				= BROADCAST;
 479:ServerTDMA.c  **** 	msgReq.dstEndpoint			= APP_DATA_ENDPOINT;
 480:ServerTDMA.c  **** 	msgReq.srcEndpoint			= APP_DATA_ENDPOINT;
 481:ServerTDMA.c  **** 	msgReq.options				= NWK_OPT_LINK_LOCAL;
 482:ServerTDMA.c  **** 	msgReq.data					= (uint8_t *)&msgFrame;
 483:ServerTDMA.c  **** 	msgReq.size					= sizeof(MsgState_t) + sizeof(AppMessageData_t);
 484:ServerTDMA.c  **** 	msgReq.confirm				= tdma_job_conf;
 485:ServerTDMA.c  **** 
 486:ServerTDMA.c  **** 	msgFrameCollab.frameType	= MSG_STATE_ENCODED_DATA;
 487:ServerTDMA.c  **** 	// collab.coefficients must be populated with solver_encode_messages() method before call send Fra
 488:ServerTDMA.c  **** 	// collab.data_vector must be populated with solver_encode_messages() method before call send Fram
 489:ServerTDMA.c  **** 
 490:ServerTDMA.c  **** 	msgReqCollab.dstAddr		= APP_PAN_ADDR;
 491:ServerTDMA.c  **** 	msgReqCollab.dstEndpoint	= APP_DATA_ENDPOINT;
 492:ServerTDMA.c  **** 	msgReqCollab.srcEndpoint	= APP_DATA_ENDPOINT;
 493:ServerTDMA.c  **** 	msgReqCollab.options		= NWK_OPT_LINK_LOCAL;
 494:ServerTDMA.c  **** 	msgReqCollab.data			= (uint8_t *) &msgFrameCollab;
 495:ServerTDMA.c  **** 	msgReqCollab.size			= sizeof(MsgState_t) + sizeof(AppMessageCollab_t);
 496:ServerTDMA.c  **** 	msgReqCollab.confirm		= tdma_job_conf;
 497:ServerTDMA.c  **** 
 498:ServerTDMA.c  **** 	/*
 499:ServerTDMA.c  **** 	 * Configure interrupts callback functions
 500:ServerTDMA.c  **** 	 * overflow interrupt, compare 1,2,3 interrupts
 501:ServerTDMA.c  **** 	 */
 502:ServerTDMA.c  **** 	macsc_set_cmp1_int_cb(tdma_client_turn);		// Wake-up, wait beacon (synchronize)
 503:ServerTDMA.c  **** 	macsc_set_cmp2_int_cb(tdma_client_job);			// Do job & Sleep
 504:ServerTDMA.c  **** 	macsc_set_cmp3_int_cb(tdma_collaborate_fase);	// Do Collaborate
 505:ServerTDMA.c  **** 
 506:ServerTDMA.c  **** 	/*
 507:ServerTDMA.c  **** 	 * Configure MACSC to generate compare interrupts from channels 1,2,3
 508:ServerTDMA.c  **** 	 * Set compare mode to absolute,set compare value.
 509:ServerTDMA.c  **** 	 */
 510:ServerTDMA.c  **** 	macsc_enable_auto_ts();
 511:ServerTDMA.c  **** 	macsc_enable_cmp_int(MACSC_CC1);
 512:ServerTDMA.c  **** 	macsc_use_cmp(MACSC_RELATIVE_CMP, BEACON_INTERVAL_BI - TDMA_FIRST_SLOT, MACSC_CC1);
 513:ServerTDMA.c  **** 	
 514:ServerTDMA.c  **** 	macsc_enable_cmp_int(MACSC_CC2);
 515:ServerTDMA.c  **** 	macsc_use_cmp(MACSC_RELATIVE_CMP, TDMA_FIRST_SLOT * APP_ADDR, MACSC_CC2);
 516:ServerTDMA.c  **** #endif
 517:ServerTDMA.c  **** }
 1110              	 .loc 3 517 0
 1111 0420 00BF     	 nop
 1112 0422 80BD     	 pop {r7,pc}
 1113              	.L50:
 1114              	 .align 2
 1115              	.L49:
 1116 0424 00000000 	 .word NWK_SetAddr
 1117 0428 00000000 	 .word NWK_SetPanId
 1118 042c 00000000 	 .word PHY_SetChannel
 1119 0430 00000000 	 .word PHY_SetRxState
 1120 0434 00000000 	 .word PHY_RandomReq
 1121 0438 00000000 	 .word srand
 1122 043c 00000000 	 .word tmrBlinkData
 1123 0440 00000000 	 .word tmrBlinkDataHandler
 1124 0444 00000000 	 .word msgFrameConnection
 1125 0448 00000000 	 .word msgReqConnection
 1126 044c 00000000 	 .word server_turn
 1127 0450 00000000 	 .word appDataInd
 1128 0454 00000000 	 .word NWK_OpenEndpoint
 1129 0458 00000000 	 .word msgFrame
 1130 045c 00000000 	 .word msgReq
 1131 0460 00000000 	 .word tmrBeaconInterval
 1132 0464 00000000 	 .word tmr_tdma_server_beacon
 1133 0468 00000000 	 .word tmrComputeData
 1134 046c 00000000 	 .word tmr_tdma_server_statistics
 1135 0470 00000000 	 .word SYS_TimerStart
 1136              	 .cfi_endproc
 1137              	.LFE238:
 1139              	 .align 1
 1140              	 .syntax unified
 1141              	 .thumb
 1142              	 .thumb_func
 1143              	 .fpu softvfp
 1145              	APP_TaskHandler:
 1146              	.LFB239:
 518:ServerTDMA.c  **** /*************************************************************************//**
 519:ServerTDMA.c  **** *****************************************************************************/
 520:ServerTDMA.c  **** static void APP_TaskHandler(void)
 521:ServerTDMA.c  **** {
 1147              	 .loc 3 521 0
 1148              	 .cfi_startproc
 1149              	 
 1150              	 
 1151 0474 80B5     	 push {r7,lr}
 1152              	.LCFI50:
 1153              	 .cfi_def_cfa_offset 8
 1154              	 .cfi_offset 7,-8
 1155              	 .cfi_offset 14,-4
 1156 0476 00AF     	 add r7,sp,#0
 1157              	.LCFI51:
 1158              	 .cfi_def_cfa_register 7
 522:ServerTDMA.c  **** 	switch (appState)
 1159              	 .loc 3 522 0
 1160 0478 0F4B     	 ldr r3,.L57
 1161 047a 1B78     	 ldrb r3,[r3]
 1162 047c DBB2     	 uxtb r3,r3
 1163 047e 032B     	 cmp r3,#3
 1164 0480 07D0     	 beq .L53
 1165 0482 0F2B     	 cmp r3,#15
 1166 0484 02D0     	 beq .L54
 1167 0486 002B     	 cmp r3,#0
 1168 0488 09D0     	 beq .L55
 523:ServerTDMA.c  **** 	{
 524:ServerTDMA.c  **** #if (APP_COORDINATOR)
 525:ServerTDMA.c  **** 		case APP_STATE_SERVER_STATISTICS:
 526:ServerTDMA.c  **** 		{
 527:ServerTDMA.c  **** 			server_statistics();
 528:ServerTDMA.c  **** 			break;
 529:ServerTDMA.c  **** 		}
 530:ServerTDMA.c  **** #endif
 531:ServerTDMA.c  **** 		case APP_STATE_SEND:
 532:ServerTDMA.c  **** 		{
 533:ServerTDMA.c  **** 			appSendData();
 534:ServerTDMA.c  **** 			appState			= APP_STATE_SEND_BUSY_DATA;
 535:ServerTDMA.c  **** 			break;
 536:ServerTDMA.c  **** 		}
 537:ServerTDMA.c  **** #if (APP_ENDDEVICE)
 538:ServerTDMA.c  **** 		case APP_STATE_WAKEUP_AND_SEND:
 539:ServerTDMA.c  **** 		{
 540:ServerTDMA.c  **** 			NWK_WakeupReq();
 541:ServerTDMA.c  **** #if (LED_COUNT > 0)
 542:ServerTDMA.c  **** 			LED_On(LED_NETWORK);
 543:ServerTDMA.c  **** #endif
 544:ServerTDMA.c  **** 			appState			= APP_STATE_SEND;
 545:ServerTDMA.c  **** 			break;
 546:ServerTDMA.c  **** 		}
 547:ServerTDMA.c  **** 		case APP_STATE_WAKEUP_AND_COLLAB:
 548:ServerTDMA.c  **** 		{
 549:ServerTDMA.c  **** 			NWK_WakeupReq();
 550:ServerTDMA.c  **** #if (LED_COUNT > 0)
 551:ServerTDMA.c  **** 			LED_On(LED_NETWORK);
 552:ServerTDMA.c  **** #endif
 553:ServerTDMA.c  **** 			appState			= APP_STATE_DO_COMPRESS;
 554:ServerTDMA.c  **** 			break;
 555:ServerTDMA.c  **** 		}
 556:ServerTDMA.c  **** 		case APP_STATE_WAKEUP_AND_SEND_COLLAB:
 557:ServerTDMA.c  **** 		{
 558:ServerTDMA.c  **** 			NWK_WakeupReq();
 559:ServerTDMA.c  **** #if (LED_COUNT > 0)
 560:ServerTDMA.c  **** 			LED_On(LED_NETWORK);
 561:ServerTDMA.c  **** #endif
 562:ServerTDMA.c  **** 			appState			= APP_STATE_SEND_COLLAB;
 563:ServerTDMA.c  **** 			break;
 564:ServerTDMA.c  **** 		}
 565:ServerTDMA.c  **** 		case APP_STATE_WAKEUP_AND_WAIT:
 566:ServerTDMA.c  **** 		{
 567:ServerTDMA.c  **** 			NWK_WakeupReq();
 568:ServerTDMA.c  **** #if (LED_COUNT > 0)
 569:ServerTDMA.c  **** 	LED_On(LED_NETWORK);
 570:ServerTDMA.c  **** #endif
 571:ServerTDMA.c  **** 			appState			= APP_STATE_IDLE;
 572:ServerTDMA.c  **** 			break;
 573:ServerTDMA.c  **** 		}
 574:ServerTDMA.c  **** 		case APP_STATE_SEND_PREPARE:
 575:ServerTDMA.c  **** 		{
 576:ServerTDMA.c  **** 			appSendPrepare();
 577:ServerTDMA.c  **** 			if(i_am_collab_dev)
 578:ServerTDMA.c  **** 			{
 579:ServerTDMA.c  **** 				LED_On(LED_BLINK);
 580:ServerTDMA.c  **** 				appState		= APP_STATE_RECEIVE_COLLAB;
 581:ServerTDMA.c  **** 			}
 582:ServerTDMA.c  **** 			else
 583:ServerTDMA.c  **** 			{
 584:ServerTDMA.c  **** 				appState		= APP_STATE_SLEEP_PREPARE;
 585:ServerTDMA.c  **** 			}
 586:ServerTDMA.c  **** 			break;
 587:ServerTDMA.c  **** 		}
 588:ServerTDMA.c  **** 		case APP_STATE_DO_COMPRESS:
 589:ServerTDMA.c  **** 		{
 590:ServerTDMA.c  **** 			appCollabPrepare();
 591:ServerTDMA.c  **** 			appState			= APP_STATE_SLEEP_PREPARE;
 592:ServerTDMA.c  **** 			break;
 593:ServerTDMA.c  **** 		}
 594:ServerTDMA.c  **** 		case APP_STATE_SEND_COLLAB:
 595:ServerTDMA.c  **** 		{
 596:ServerTDMA.c  **** 			appSendCollab();
 597:ServerTDMA.c  **** 			appState			= APP_STATE_SEND_BUSY_COLLAB;
 598:ServerTDMA.c  **** 			break;
 599:ServerTDMA.c  **** 		}
 600:ServerTDMA.c  **** 		case APP_STATE_SLEEP_PREPARE:
 601:ServerTDMA.c  **** 		{
 602:ServerTDMA.c  **** 			if(!NWK_Busy())
 603:ServerTDMA.c  **** 			{
 604:ServerTDMA.c  **** 				irqflags_t flags = cpu_irq_save();
 605:ServerTDMA.c  **** 				NWK_SleepReq();
 606:ServerTDMA.c  **** 				appState		= APP_STATE_SLEEP;
 607:ServerTDMA.c  **** 				cpu_irq_restore(flags);
 608:ServerTDMA.c  **** 			}
 609:ServerTDMA.c  **** 			break;
 610:ServerTDMA.c  **** 		}
 611:ServerTDMA.c  **** 		case APP_STATE_SLEEP:
 612:ServerTDMA.c  **** 		{
 613:ServerTDMA.c  **** #if (LED_COUNT > 0)
 614:ServerTDMA.c  **** 	LED_Off(LED_NETWORK);
 615:ServerTDMA.c  **** 	LED_Off(LED_DATA);
 616:ServerTDMA.c  **** 	LED_Off(LED_BLINK);
 617:ServerTDMA.c  **** #endif
 618:ServerTDMA.c  **** 			sleep_enable();
 619:ServerTDMA.c  **** 			sleep_enter();
 620:ServerTDMA.c  **** 			sleep_disable();
 621:ServerTDMA.c  **** 			break;
 622:ServerTDMA.c  **** 		}
 623:ServerTDMA.c  **** #endif
 624:ServerTDMA.c  **** 		case APP_STATE_INITIAL:
 625:ServerTDMA.c  **** 		{
 626:ServerTDMA.c  **** 			energy_init();
 627:ServerTDMA.c  **** 			solver_init();
 628:ServerTDMA.c  **** 			appInit();
 629:ServerTDMA.c  **** 			appState			= APP_STATE_IDLE;
 630:ServerTDMA.c  **** 			break;
 631:ServerTDMA.c  **** 		}
 632:ServerTDMA.c  **** 		default:
 633:ServerTDMA.c  **** 		{
 634:ServerTDMA.c  **** 			break;
 1169              	 .loc 3 634 0
 1170 048a 12E0     	 b .L56
 1171              	.L54:
 527:ServerTDMA.c  **** 			break;
 1172              	 .loc 3 527 0
 1173 048c FFF77CFE 	 bl server_statistics
 528:ServerTDMA.c  **** 		}
 1174              	 .loc 3 528 0
 1175 0490 0FE0     	 b .L56
 1176              	.L53:
 533:ServerTDMA.c  **** 			appState			= APP_STATE_SEND_BUSY_DATA;
 1177              	 .loc 3 533 0
 1178 0492 FFF7CFFE 	 bl appSendData
 534:ServerTDMA.c  **** 			break;
 1179              	 .loc 3 534 0
 1180 0496 084B     	 ldr r3,.L57
 1181 0498 0522     	 movs r2,#5
 1182 049a 1A70     	 strb r2,[r3]
 535:ServerTDMA.c  **** 		}
 1183              	 .loc 3 535 0
 1184 049c 09E0     	 b .L56
 1185              	.L55:
 626:ServerTDMA.c  **** 			solver_init();
 1186              	 .loc 3 626 0
 1187 049e 074B     	 ldr r3,.L57+4
 1188 04a0 9847     	 blx r3
 1189              	.LVL28:
 627:ServerTDMA.c  **** 			appInit();
 1190              	 .loc 3 627 0
 1191 04a2 074B     	 ldr r3,.L57+8
 1192 04a4 9847     	 blx r3
 1193              	.LVL29:
 628:ServerTDMA.c  **** 			appState			= APP_STATE_IDLE;
 1194              	 .loc 3 628 0
 1195 04a6 FFF749FF 	 bl appInit
 629:ServerTDMA.c  **** 			break;
 1196              	 .loc 3 629 0
 1197 04aa 034B     	 ldr r3,.L57
 1198 04ac 0122     	 movs r2,#1
 1199 04ae 1A70     	 strb r2,[r3]
 630:ServerTDMA.c  **** 		}
 1200              	 .loc 3 630 0
 1201 04b0 00BF     	 nop
 1202              	.L56:
 635:ServerTDMA.c  **** 		}
 636:ServerTDMA.c  **** 	}
 637:ServerTDMA.c  **** }
 1203              	 .loc 3 637 0
 1204 04b2 00BF     	 nop
 1205 04b4 80BD     	 pop {r7,pc}
 1206              	.L58:
 1207 04b6 00BF     	 .align 2
 1208              	.L57:
 1209 04b8 00000000 	 .word appState
 1210 04bc 00000000 	 .word energy_init
 1211 04c0 00000000 	 .word solver_init
 1212              	 .cfi_endproc
 1213              	.LFE239:
 1215              	 .align 1
 1216              	 .global main
 1217              	 .syntax unified
 1218              	 .thumb
 1219              	 .thumb_func
 1220              	 .fpu softvfp
 1222              	main:
 1223              	.LFB240:
 638:ServerTDMA.c  **** 
 639:ServerTDMA.c  **** /*****************************************************************************
 640:ServerTDMA.c  **** *****************************************************************************/
 641:ServerTDMA.c  **** int main(void)
 642:ServerTDMA.c  **** {
 1224              	 .loc 3 642 0
 1225              	 .cfi_startproc
 1226              	 
 1227              	 
 1228 04c4 80B5     	 push {r7,lr}
 1229              	.LCFI52:
 1230              	 .cfi_def_cfa_offset 8
 1231              	 .cfi_offset 7,-8
 1232              	 .cfi_offset 14,-4
 1233 04c6 00AF     	 add r7,sp,#0
 1234              	.LCFI53:
 1235              	 .cfi_def_cfa_register 7
 643:ServerTDMA.c  **** 	sysclk_init();
 1236              	 .loc 3 643 0
 1237 04c8 0B4B     	 ldr r3,.L61
 1238 04ca 9847     	 blx r3
 1239              	.LVL30:
 644:ServerTDMA.c  **** 	board_init();
 1240              	 .loc 3 644 0
 1241 04cc 0B4B     	 ldr r3,.L61+4
 1242 04ce 9847     	 blx r3
 1243              	.LVL31:
 645:ServerTDMA.c  **** 
 646:ServerTDMA.c  **** 	SYS_Init();
 1244              	 .loc 3 646 0
 1245 04d0 0B4B     	 ldr r3,.L61+8
 1246 04d2 9847     	 blx r3
 1247              	.LVL32:
 647:ServerTDMA.c  **** 	// Disable CSMA/CA
 648:ServerTDMA.c  **** 	// Disable auto ACK
 649:ServerTDMA.c  **** 	PHY_SetTdmaMode(true);
 1248              	 .loc 3 649 0
 1249 04d4 0120     	 movs r0,#1
 1250 04d6 0B4B     	 ldr r3,.L61+12
 1251 04d8 9847     	 blx r3
 1252              	.LVL33:
 650:ServerTDMA.c  **** 	sm_init();
 1253              	 .loc 3 650 0
 1254 04da 0B4B     	 ldr r3,.L61+16
 1255 04dc 9847     	 blx r3
 1256              	.LVL34:
 651:ServerTDMA.c  **** 
 652:ServerTDMA.c  **** 	// Initialize interrupt vector table support.
 653:ServerTDMA.c  **** #if (SIO2HOST_CHANNEL == SIO_USB)
 654:ServerTDMA.c  **** 	irq_initialize_vectors();
 655:ServerTDMA.c  **** #endif
 656:ServerTDMA.c  **** 	cpu_irq_enable();
 1257              	 .loc 3 656 0
 1258 04de 0B4B     	 ldr r3,.L61+20
 1259 04e0 0122     	 movs r2,#1
 1260 04e2 1A70     	 strb r2,[r3]
 1261              	.LBB96:
 1262              	.LBB97:
 1263              	 .file 4 "../../../platform/thirdparty/CMSIS/include/core_cmInstr.h"
   1:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /**************************************************************************//**
   2:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  * @file     core_cmInstr.h
   3:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  * @brief    CMSIS Cortex-M Core Instruction Access Header File
   4:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  * @version  V3.00
   5:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  * @date     07. February 2012
   6:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  *
   7:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  * @note
   8:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  * Copyright (C) 2009-2012 ARM Limited. All rights reserved.
   9:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  *
  10:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  * @par
  11:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  * ARM Limited (ARM) is supplying this software for use with Cortex-M
  12:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  * processor based microcontrollers.  This file can be freely distributed
  13:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  * within development tools that are supporting such ARM based processors.
  14:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  *
  15:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  * @par
  16:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
  17:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
  18:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
  19:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  * ARM SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR
  20:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
  21:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  *
  22:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  ******************************************************************************/
  23:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
  24:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** #ifndef __CORE_CMINSTR_H
  25:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** #define __CORE_CMINSTR_H
  26:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
  27:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
  28:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /* ##########################  Core Instruction Access  ######################### */
  29:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
  30:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****   Access to dedicated instructions
  31:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****   @{
  32:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** */
  33:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
  34:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** #if   defined ( __CC_ARM ) /*------------------RealView Compiler -----------------*/
  35:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /* ARM armcc specific functions */
  36:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
  37:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** #if (__ARMCC_VERSION < 400677)
  38:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****   #error "Please use ARM Compiler Toolchain V4.0.677 or later!"
  39:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** #endif
  40:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
  41:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
  42:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /** \brief  No Operation
  43:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
  44:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     No Operation does nothing. This instruction can be used for code alignment purposes.
  45:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  */
  46:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** #define __NOP                             __nop
  47:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
  48:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
  49:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /** \brief  Wait For Interrupt
  50:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
  51:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     Wait For Interrupt is a hint instruction that suspends execution
  52:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     until one of a number of events occurs.
  53:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  */
  54:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** #define __WFI                             __wfi
  55:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
  56:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
  57:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /** \brief  Wait For Event
  58:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
  59:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     Wait For Event is a hint instruction that permits the processor to enter
  60:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     a low-power state until one of a number of events occurs.
  61:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  */
  62:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** #define __WFE                             __wfe
  63:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
  64:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
  65:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /** \brief  Send Event
  66:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
  67:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     Send Event is a hint instruction. It causes an event to be signaled to the CPU.
  68:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  */
  69:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** #define __SEV                             __sev
  70:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
  71:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
  72:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /** \brief  Instruction Synchronization Barrier
  73:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
  74:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     Instruction Synchronization Barrier flushes the pipeline in the processor,
  75:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     so that all instructions following the ISB are fetched from cache or
  76:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     memory, after the instruction has been completed.
  77:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  */
  78:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** #define __ISB()                           __isb(0xF)
  79:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
  80:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
  81:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /** \brief  Data Synchronization Barrier
  82:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
  83:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     This function acts as a special kind of Data Memory Barrier.
  84:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     It completes when all explicit memory accesses before this instruction complete.
  85:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  */
  86:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** #define __DSB()                           __dsb(0xF)
  87:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
  88:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
  89:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /** \brief  Data Memory Barrier
  90:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
  91:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     This function ensures the apparent order of the explicit memory operations before
  92:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     and after the instruction, without ensuring their completion.
  93:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  */
  94:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** #define __DMB()                           __dmb(0xF)
  95:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
  96:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
  97:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /** \brief  Reverse byte order (32 bit)
  98:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
  99:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     This function reverses the byte order in integer value.
 100:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 101:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \param [in]    value  Value to reverse
 102:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \return               Reversed value
 103:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  */
 104:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** #define __REV                             __rev
 105:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 106:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 107:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /** \brief  Reverse byte order (16 bit)
 108:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 109:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     This function reverses the byte order in two unsigned short values.
 110:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 111:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \param [in]    value  Value to reverse
 112:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \return               Reversed value
 113:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  */
 114:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** __attribute__((section(".rev16_text"))) __STATIC_INLINE __ASM uint32_t __REV16(uint32_t value)
 115:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** {
 116:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****   rev16 r0, r0
 117:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****   bx lr
 118:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** }
 119:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 120:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 121:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /** \brief  Reverse byte order in signed short value
 122:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 123:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     This function reverses the byte order in a signed short value with sign extension to integer.
 124:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 125:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \param [in]    value  Value to reverse
 126:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \return               Reversed value
 127:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  */
 128:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** __attribute__((section(".revsh_text"))) __STATIC_INLINE __ASM int32_t __REVSH(int32_t value)
 129:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** {
 130:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****   revsh r0, r0
 131:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****   bx lr
 132:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** }
 133:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 134:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 135:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /** \brief  Rotate Right in unsigned value (32 bit)
 136:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 137:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     This function Rotate Right (immediate) provides the value of the contents of a register rotated
 138:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 139:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \param [in]    value  Value to rotate
 140:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \param [in]    value  Number of Bits to rotate
 141:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \return               Rotated value
 142:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  */
 143:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** #define __ROR                             __ror
 144:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 145:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 146:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** #if       (__CORTEX_M >= 0x03)
 147:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 148:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /** \brief  Reverse bit order of value
 149:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 150:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     This function reverses the bit order of the given value.
 151:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 152:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \param [in]    value  Value to reverse
 153:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \return               Reversed value
 154:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  */
 155:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** #define __RBIT                            __rbit
 156:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 157:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 158:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /** \brief  LDR Exclusive (8 bit)
 159:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 160:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     This function performs a exclusive LDR command for 8 bit value.
 161:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 162:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 163:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \return             value of type uint8_t at (*ptr)
 164:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  */
 165:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** #define __LDREXB(ptr)                     ((uint8_t ) __ldrex(ptr))
 166:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 167:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 168:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /** \brief  LDR Exclusive (16 bit)
 169:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 170:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     This function performs a exclusive LDR command for 16 bit values.
 171:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 172:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 173:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \return        value of type uint16_t at (*ptr)
 174:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  */
 175:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** #define __LDREXH(ptr)                     ((uint16_t) __ldrex(ptr))
 176:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 177:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 178:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /** \brief  LDR Exclusive (32 bit)
 179:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 180:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     This function performs a exclusive LDR command for 32 bit values.
 181:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 182:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 183:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \return        value of type uint32_t at (*ptr)
 184:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  */
 185:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** #define __LDREXW(ptr)                     ((uint32_t ) __ldrex(ptr))
 186:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 187:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 188:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /** \brief  STR Exclusive (8 bit)
 189:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 190:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     This function performs a exclusive STR command for 8 bit values.
 191:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 192:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \param [in]  value  Value to store
 193:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 194:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \return          0  Function succeeded
 195:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \return          1  Function failed
 196:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  */
 197:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** #define __STREXB(value, ptr)              __strex(value, ptr)
 198:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 199:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 200:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /** \brief  STR Exclusive (16 bit)
 201:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 202:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     This function performs a exclusive STR command for 16 bit values.
 203:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 204:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \param [in]  value  Value to store
 205:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 206:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \return          0  Function succeeded
 207:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \return          1  Function failed
 208:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  */
 209:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** #define __STREXH(value, ptr)              __strex(value, ptr)
 210:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 211:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 212:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /** \brief  STR Exclusive (32 bit)
 213:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 214:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     This function performs a exclusive STR command for 32 bit values.
 215:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 216:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \param [in]  value  Value to store
 217:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 218:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \return          0  Function succeeded
 219:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \return          1  Function failed
 220:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  */
 221:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** #define __STREXW(value, ptr)              __strex(value, ptr)
 222:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 223:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 224:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /** \brief  Remove the exclusive lock
 225:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 226:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     This function removes the exclusive lock which is created by LDREX.
 227:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 228:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  */
 229:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** #define __CLREX                           __clrex
 230:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 231:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 232:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /** \brief  Signed Saturate
 233:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 234:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     This function saturates a signed value.
 235:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 236:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \param [in]  value  Value to be saturated
 237:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \param [in]    sat  Bit position to saturate to (1..32)
 238:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \return             Saturated value
 239:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  */
 240:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** #define __SSAT                            __ssat
 241:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 242:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 243:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /** \brief  Unsigned Saturate
 244:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 245:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     This function saturates an unsigned value.
 246:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 247:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \param [in]  value  Value to be saturated
 248:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \param [in]    sat  Bit position to saturate to (0..31)
 249:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \return             Saturated value
 250:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  */
 251:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** #define __USAT                            __usat
 252:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 253:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 254:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /** \brief  Count leading zeros
 255:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 256:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     This function counts the number of leading zeros of a data value.
 257:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 258:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \param [in]  value  Value to count the leading zeros
 259:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \return             number of leading zeros in value
 260:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  */
 261:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** #define __CLZ                             __clz
 262:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 263:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** #endif /* (__CORTEX_M >= 0x03) */
 264:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 265:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 266:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 267:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** #elif defined ( __ICCARM__ ) /*------------------ ICC Compiler -------------------*/
 268:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /* IAR iccarm specific functions */
 269:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 270:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** #include <cmsis_iar.h>
 271:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 272:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 273:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** #elif defined ( __TMS470__ ) /*---------------- TI CCS Compiler ------------------*/
 274:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /* TI CCS specific functions */
 275:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 276:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** #include <cmsis_ccs.h>
 277:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 278:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 279:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** #elif defined ( __GNUC__ ) /*------------------ GNU Compiler ---------------------*/
 280:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /* GNU gcc specific functions */
 281:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 282:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /** \brief  No Operation
 283:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 284:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     No Operation does nothing. This instruction can be used for code alignment purposes.
 285:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  */
 286:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
 287:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** {
 288:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****   __ASM volatile ("nop");
 289:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** }
 290:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 291:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 292:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /** \brief  Wait For Interrupt
 293:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 294:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     Wait For Interrupt is a hint instruction that suspends execution
 295:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     until one of a number of events occurs.
 296:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  */
 297:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __WFI(void)
 298:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** {
 299:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****   __ASM volatile ("wfi");
 300:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** }
 301:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 302:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 303:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /** \brief  Wait For Event
 304:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 305:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     Wait For Event is a hint instruction that permits the processor to enter
 306:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     a low-power state until one of a number of events occurs.
 307:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  */
 308:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __WFE(void)
 309:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** {
 310:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****   __ASM volatile ("wfe");
 311:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** }
 312:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 313:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 314:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /** \brief  Send Event
 315:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 316:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 317:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  */
 318:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __SEV(void)
 319:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** {
 320:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****   __ASM volatile ("sev");
 321:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** }
 322:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 323:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 324:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /** \brief  Instruction Synchronization Barrier
 325:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 326:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     Instruction Synchronization Barrier flushes the pipeline in the processor,
 327:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     so that all instructions following the ISB are fetched from cache or
 328:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     memory, after the instruction has been completed.
 329:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  */
 330:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __ISB(void)
 331:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** {
 332:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****   __ASM volatile ("isb");
 333:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** }
 334:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 335:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 336:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /** \brief  Data Synchronization Barrier
 337:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 338:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     This function acts as a special kind of Data Memory Barrier.
 339:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     It completes when all explicit memory accesses before this instruction complete.
 340:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  */
 341:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
 342:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** {
 343:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****   __ASM volatile ("dsb");
 344:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** }
 345:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 346:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 347:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /** \brief  Data Memory Barrier
 348:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 349:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     This function ensures the apparent order of the explicit memory operations before
 350:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     and after the instruction, without ensuring their completion.
 351:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  */
 352:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
 353:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** {
 354:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****   __ASM volatile ("dmb");
 1264              	 .loc 4 354 0
 1265              	 .syntax unified
 1266              	
 1267 04e4 BFF35F8F 	 dmb
 1268              	
 1269              	 .thumb
 1270              	 .syntax unified
 1271              	.LBE97:
 1272              	.LBE96:
 1273              	.LBB98:
 1274              	.LBB99:
 1275              	 .file 5 "../../../platform/thirdparty/CMSIS/include/core_cmFunc.h"
   1:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** /**************************************************************************//**
   2:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  * @file     core_cmFunc.h
   3:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  * @brief    CMSIS Cortex-M Core Function Access Header File
   4:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  * @version  V3.00
   5:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  * @date     19. January 2012
   6:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  *
   7:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  * @note
   8:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  * Copyright (C) 2009-2012 ARM Limited. All rights reserved.
   9:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  *
  10:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  * @par
  11:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  * ARM Limited (ARM) is supplying this software for use with Cortex-M 
  12:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  * processor based microcontrollers.  This file can be freely distributed 
  13:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  * within development tools that are supporting such ARM based processors. 
  14:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  *
  15:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  * @par
  16:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
  17:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
  18:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
  19:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  * ARM SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR
  20:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
  21:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  *
  22:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  ******************************************************************************/
  23:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
  24:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** #ifndef __CORE_CMFUNC_H
  25:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** #define __CORE_CMFUNC_H
  26:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
  27:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** /* ###########################  Core Function Access  ########################### */
  28:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** /** \ingroup  CMSIS_Core_FunctionInterface   
  29:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
  30:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   @{
  31:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  */
  32:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
  33:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** #if   defined ( __CC_ARM ) /*------------------RealView Compiler -----------------*/
  34:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** /* ARM armcc specific functions */
  35:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
  36:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** #if (__ARMCC_VERSION < 400677)
  37:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   #error "Please use ARM Compiler Toolchain V4.0.677 or later!"
  38:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** #endif
  39:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
  40:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** /* intrinsic void __enable_irq();     */
  41:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** /* intrinsic void __disable_irq();    */
  42:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
  43:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** /** \brief  Get Control Register
  44:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
  45:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     This function returns the content of the Control Register.
  46:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
  47:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     \return               Control Register value
  48:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  */
  49:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** __STATIC_INLINE uint32_t __get_CONTROL(void)
  50:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** {
  51:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   register uint32_t __regControl         __ASM("control");
  52:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   return(__regControl);
  53:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** }
  54:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
  55:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
  56:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** /** \brief  Set Control Register
  57:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
  58:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     This function writes the given value to the Control Register.
  59:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
  60:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     \param [in]    control  Control Register value to set
  61:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  */
  62:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** __STATIC_INLINE void __set_CONTROL(uint32_t control)
  63:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** {
  64:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   register uint32_t __regControl         __ASM("control");
  65:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   __regControl = control;
  66:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** }
  67:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
  68:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
  69:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** /** \brief  Get IPSR Register
  70:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
  71:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     This function returns the content of the IPSR Register.
  72:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
  73:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     \return               IPSR Register value
  74:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  */
  75:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** __STATIC_INLINE uint32_t __get_IPSR(void)
  76:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** {
  77:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   register uint32_t __regIPSR          __ASM("ipsr");
  78:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   return(__regIPSR);
  79:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** }
  80:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
  81:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
  82:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** /** \brief  Get APSR Register
  83:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
  84:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     This function returns the content of the APSR Register.
  85:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
  86:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     \return               APSR Register value
  87:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  */
  88:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** __STATIC_INLINE uint32_t __get_APSR(void)
  89:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** {
  90:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   register uint32_t __regAPSR          __ASM("apsr");
  91:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   return(__regAPSR);
  92:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** }
  93:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
  94:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
  95:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** /** \brief  Get xPSR Register
  96:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
  97:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     This function returns the content of the xPSR Register.
  98:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
  99:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     \return               xPSR Register value
 100:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  */
 101:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** __STATIC_INLINE uint32_t __get_xPSR(void)
 102:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** {
 103:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   register uint32_t __regXPSR          __ASM("xpsr");
 104:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   return(__regXPSR);
 105:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** }
 106:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 107:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 108:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** /** \brief  Get Process Stack Pointer
 109:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 110:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     This function returns the current value of the Process Stack Pointer (PSP).
 111:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 112:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     \return               PSP Register value
 113:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  */
 114:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** __STATIC_INLINE uint32_t __get_PSP(void)
 115:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** {
 116:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   register uint32_t __regProcessStackPointer  __ASM("psp");
 117:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   return(__regProcessStackPointer);
 118:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** }
 119:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 120:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 121:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** /** \brief  Set Process Stack Pointer
 122:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 123:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     This function assigns the given value to the Process Stack Pointer (PSP).
 124:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 125:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     \param [in]    topOfProcStack  Process Stack Pointer value to set
 126:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  */
 127:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
 128:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** {
 129:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   register uint32_t __regProcessStackPointer  __ASM("psp");
 130:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   __regProcessStackPointer = topOfProcStack;
 131:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** }
 132:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 133:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 134:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** /** \brief  Get Main Stack Pointer
 135:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 136:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     This function returns the current value of the Main Stack Pointer (MSP).
 137:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 138:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     \return               MSP Register value
 139:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  */
 140:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** __STATIC_INLINE uint32_t __get_MSP(void)
 141:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** {
 142:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   register uint32_t __regMainStackPointer     __ASM("msp");
 143:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   return(__regMainStackPointer);
 144:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** }
 145:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 146:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 147:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** /** \brief  Set Main Stack Pointer
 148:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 149:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     This function assigns the given value to the Main Stack Pointer (MSP).
 150:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 151:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     \param [in]    topOfMainStack  Main Stack Pointer value to set
 152:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  */
 153:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
 154:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** {
 155:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   register uint32_t __regMainStackPointer     __ASM("msp");
 156:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   __regMainStackPointer = topOfMainStack;
 157:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** }
 158:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 159:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 160:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** /** \brief  Get Priority Mask
 161:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 162:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     This function returns the current state of the priority mask bit from the Priority Mask Registe
 163:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 164:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     \return               Priority Mask value
 165:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  */
 166:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** __STATIC_INLINE uint32_t __get_PRIMASK(void)
 167:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** {
 168:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   register uint32_t __regPriMask         __ASM("primask");
 169:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   return(__regPriMask);
 170:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** }
 171:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 172:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 173:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** /** \brief  Set Priority Mask
 174:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 175:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     This function assigns the given value to the Priority Mask Register.
 176:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 177:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     \param [in]    priMask  Priority Mask
 178:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  */
 179:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
 180:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** {
 181:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   register uint32_t __regPriMask         __ASM("primask");
 182:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   __regPriMask = (priMask);
 183:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** }
 184:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  
 185:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 186:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** #if       (__CORTEX_M >= 0x03)
 187:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 188:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** /** \brief  Enable FIQ
 189:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 190:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     This function enables FIQ interrupts by clearing the F-bit in the CPSR.
 191:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     Can only be executed in Privileged modes.
 192:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  */
 193:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** #define __enable_fault_irq                __enable_fiq
 194:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 195:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 196:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** /** \brief  Disable FIQ
 197:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 198:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     This function disables FIQ interrupts by setting the F-bit in the CPSR.
 199:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     Can only be executed in Privileged modes.
 200:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  */
 201:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** #define __disable_fault_irq               __disable_fiq
 202:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 203:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 204:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** /** \brief  Get Base Priority
 205:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 206:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     This function returns the current value of the Base Priority register.
 207:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 208:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     \return               Base Priority register value
 209:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  */
 210:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** __STATIC_INLINE uint32_t  __get_BASEPRI(void)
 211:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** {
 212:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   register uint32_t __regBasePri         __ASM("basepri");
 213:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   return(__regBasePri);
 214:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** }
 215:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 216:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 217:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** /** \brief  Set Base Priority
 218:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 219:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     This function assigns the given value to the Base Priority register.
 220:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 221:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     \param [in]    basePri  Base Priority value to set
 222:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  */
 223:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** __STATIC_INLINE void __set_BASEPRI(uint32_t basePri)
 224:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** {
 225:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   register uint32_t __regBasePri         __ASM("basepri");
 226:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   __regBasePri = (basePri & 0xff);
 227:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** }
 228:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  
 229:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 230:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** /** \brief  Get Fault Mask
 231:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 232:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     This function returns the current value of the Fault Mask register.
 233:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 234:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     \return               Fault Mask register value
 235:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  */
 236:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** __STATIC_INLINE uint32_t __get_FAULTMASK(void)
 237:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** {
 238:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   register uint32_t __regFaultMask       __ASM("faultmask");
 239:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   return(__regFaultMask);
 240:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** }
 241:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 242:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 243:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** /** \brief  Set Fault Mask
 244:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 245:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     This function assigns the given value to the Fault Mask register.
 246:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 247:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     \param [in]    faultMask  Fault Mask value to set
 248:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  */
 249:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** __STATIC_INLINE void __set_FAULTMASK(uint32_t faultMask)
 250:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** {
 251:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   register uint32_t __regFaultMask       __ASM("faultmask");
 252:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   __regFaultMask = (faultMask & (uint32_t)1);
 253:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** }
 254:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 255:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** #endif /* (__CORTEX_M >= 0x03) */
 256:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 257:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 258:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** #if       (__CORTEX_M == 0x04)
 259:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 260:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** /** \brief  Get FPSCR
 261:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 262:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     This function returns the current value of the Floating Point Status/Control register.
 263:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 264:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     \return               Floating Point Status/Control register value
 265:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  */
 266:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** __STATIC_INLINE uint32_t __get_FPSCR(void)
 267:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** {
 268:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
 269:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   register uint32_t __regfpscr         __ASM("fpscr");
 270:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   return(__regfpscr);
 271:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** #else
 272:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****    return(0);
 273:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** #endif
 274:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** }
 275:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 276:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 277:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** /** \brief  Set FPSCR
 278:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 279:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     This function assigns the given value to the Floating Point Status/Control register.
 280:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 281:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     \param [in]    fpscr  Floating Point Status/Control value to set
 282:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  */
 283:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** __STATIC_INLINE void __set_FPSCR(uint32_t fpscr)
 284:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** {
 285:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
 286:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   register uint32_t __regfpscr         __ASM("fpscr");
 287:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   __regfpscr = (fpscr);
 288:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** #endif
 289:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** }
 290:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 291:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** #endif /* (__CORTEX_M == 0x04) */
 292:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 293:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 294:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** #elif defined ( __ICCARM__ ) /*------------------ ICC Compiler -------------------*/
 295:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** /* IAR iccarm specific functions */
 296:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 297:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** #include <cmsis_iar.h>
 298:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 299:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 300:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** #elif defined ( __TMS470__ ) /*---------------- TI CCS Compiler ------------------*/
 301:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** /* TI CCS specific functions */
 302:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 303:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** #include <cmsis_ccs.h>
 304:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 305:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 306:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** #elif defined ( __GNUC__ ) /*------------------ GNU Compiler ---------------------*/
 307:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** /* GNU gcc specific functions */
 308:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 309:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** /** \brief  Enable IRQ Interrupts
 310:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 311:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   This function enables IRQ interrupts by clearing the I-bit in the CPSR.
 312:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   Can only be executed in Privileged modes.
 313:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  */
 314:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
 315:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** {
 316:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   __ASM volatile ("cpsie i");
 1276              	 .loc 5 316 0
 1277              	 .syntax unified
 1278              	
 1279 04e8 62B6     	 cpsie i
 1280              	
 1281              	 .thumb
 1282              	 .syntax unified
 1283              	.LBE99:
 1284              	.LBE98:
 657:ServerTDMA.c  **** 
 658:ServerTDMA.c  **** #if APP_COORDINATOR
 659:ServerTDMA.c  **** #if (SIO2HOST_CHANNEL == SIO_USB)
 660:ServerTDMA.c  **** 	stdio_usb_init();
 1285              	 .loc 3 660 0
 1286 04ea 094B     	 ldr r3,.L61+24
 1287 04ec 9847     	 blx r3
 1288              	.LVL35:
 1289              	.L60:
 661:ServerTDMA.c  **** #else
 662:ServerTDMA.c  **** 	const usart_serial_options_t usart_serial_options =
 663:ServerTDMA.c  **** 	{
 664:ServerTDMA.c  **** 		.baudrate     = USART_HOST_BAUDRATE,
 665:ServerTDMA.c  **** 		.charlength   = USART_HOST_CHAR_LENGTH,
 666:ServerTDMA.c  **** 		.paritytype   = USART_HOST_PARITY,
 667:ServerTDMA.c  **** 		.stopbits     = USART_HOST_STOP_BITS
 668:ServerTDMA.c  **** 	};
 669:ServerTDMA.c  **** 
 670:ServerTDMA.c  **** 	stdio_serial_init(USART_HOST, &usart_serial_options);
 671:ServerTDMA.c  **** 	usart_double_baud_enable(USART_HOST);
 672:ServerTDMA.c  **** 	usart_set_baudrate_precalculated(USART_HOST, USART_HOST_BAUDRATE, sysclk_get_source_clock_hz());
 673:ServerTDMA.c  **** 
 674:ServerTDMA.c  **** #endif
 675:ServerTDMA.c  **** #endif
 676:ServerTDMA.c  **** 	for(;;)
 677:ServerTDMA.c  **** 	{
 678:ServerTDMA.c  **** 		SYS_TaskHandler();
 1290              	 .loc 3 678 0 discriminator 1
 1291 04ee 094B     	 ldr r3,.L61+28
 1292 04f0 9847     	 blx r3
 1293              	.LVL36:
 679:ServerTDMA.c  **** 		APP_TaskHandler();
 1294              	 .loc 3 679 0 discriminator 1
 1295 04f2 FFF7BFFF 	 bl APP_TaskHandler
 678:ServerTDMA.c  **** 		APP_TaskHandler();
 1296              	 .loc 3 678 0 discriminator 1
 1297 04f6 FAE7     	 b .L60
 1298              	.L62:
 1299              	 .align 2
 1300              	.L61:
 1301 04f8 00000000 	 .word sysclk_init
 1302 04fc 00000000 	 .word board_init
 1303 0500 00000000 	 .word SYS_Init
 1304 0504 00000000 	 .word PHY_SetTdmaMode
 1305 0508 00000000 	 .word sm_init
 1306 050c 00000000 	 .word g_interrupt_enabled
 1307 0510 00000000 	 .word stdio_usb_init
 1308 0514 00000000 	 .word SYS_TaskHandler
 1309              	 .cfi_endproc
 1310              	.LFE240:
 1312              	.Letext0:
 1313              	 .file 6 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\arm\\arm-gnu-toolchain\\arm-none-eabi\\include\\machine\\_default_types.h"
 1314              	 .file 7 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\arm\\arm-gnu-toolchain\\arm-none-eabi\\include\\sys\\lock.h"
 1315              	 .file 8 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\arm\\arm-gnu-toolchain\\arm-none-eabi\\include\\sys\\_types.h"
 1316              	 .file 9 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\arm\\arm-gnu-toolchain\\lib\\gcc\\arm-none-eabi\\6.3.1\\include\\stddef.h"
 1317              	 .file 10 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\arm\\arm-gnu-toolchain\\arm-none-eabi\\include\\sys\\reent.h"
 1318              	 .file 11 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\arm\\arm-gnu-toolchain\\arm-none-eabi\\include\\stdlib.h"
 1319              	 .file 12 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\arm\\arm-gnu-toolchain\\arm-none-eabi\\include\\sys\\_stdint.h"
 1320              	 .file 13 "../../../platform/sam/utils/cmsis/sam4l/include/sam4lc4b.h"
 1321              	 .file 14 "../../../platform/thirdparty/CMSIS/include/core_cm4.h"
 1322              	 .file 15 "../../../platform/sam/utils/cmsis/sam4l/source/templates/system_sam4l.h"
 1323              	 .file 16 "../../../platform/sam/utils/cmsis/sam4l/include/component/component_gpio.h"
 1324              	 .file 17 "../../../platform/common/utils/interrupt/interrupt_sam_nvic.h"
 1325              	 .file 18 "../../../platform/sam/utils/compiler.h"
 1326              	 .file 19 "../../../platform/common/services/usb/usb_protocol.h"
 1327              	 .file 20 "../../../platform/common/services/usb/udc/udi.h"
 1328              	 .file 21 "../../../platform/common/services/usb/udc/udc_desc.h"
 1329              	 .file 22 "../../../platform/common/services/usb/udc/udd.h"
 1330              	 .file 23 "../../../platform/common/services/usb/class/cdc/device/udi_cdc.h"
 1331              	 .file 24 "../../../platform/common/utils/stdio/stdio_usb/stdio_usb.h"
 1332              	 .file 25 "../../../stack/LwMesh/TDMA/nwk/inc/nwkRx.h"
 1333              	 .file 26 "../../../stack/LwMesh/TDMA/nwk/inc/nwkDataReq.h"
 1334              	 .file 27 "../../../stack/LwMesh/TDMA/nwk/inc/nwk.h"
 1335              	 .file 28 "../../../stack/LwMesh/TDMA/sys/inc/sysTimer.h"
 1336              	 .file 29 "../../../platform/common/services/sleepmgr/sam4l/sleepmgr.h"
 1337              	 .file 30 "Solver.h"
 1338              	 .file 31 "config/config.h"
 1339              	 .file 32 "../../../platform/common/services/clock/sam4l/sysclk.h"
 1340              	 .file 33 "../../../platform/common/boards/board.h"
 1341              	 .file 34 "../../../stack/LwMesh/TDMA/sys/inc/sys.h"
 1342              	 .file 35 "../../../stack/LwMesh/TDMA/phy/AT86RF233/inc/phy.h"
 1343              	 .file 36 "../../../stack/LwMesh/TDMA/services/sleep_mgr/sleep_mgr.h"
 1344              	 .file 37 "Energy.h"
 1345              	 .file 38 "<built-in>"
DEFINED SYMBOLS
                            *ABS*:00000000 ServerTDMA.c
    {standard input}:16     .bss.cpu_irq_critical_section_counter:00000000 $d
    {standard input}:19     .bss.cpu_irq_critical_section_counter:00000000 cpu_irq_critical_section_counter
    {standard input}:24     .bss.cpu_irq_prev_interrupt_state:00000000 cpu_irq_prev_interrupt_state
    {standard input}:25     .bss.cpu_irq_prev_interrupt_state:00000000 $d
                            *COM*:00000001 n
    {standard input}:28     .bss.tTS:00000000 $d
    {standard input}:31     .bss.tTS:00000000 tTS
    {standard input}:34     .text:00000000 $t
    {standard input}:40     .text:00000000 ioport_set_pin_level
    {standard input}:185    .text:00000086 ioport_toggle_pin_level
    {standard input}:267    .bss.tmrBeaconInterval:00000000 $d
    {standard input}:270    .bss.tmrBeaconInterval:00000000 tmrBeaconInterval
    {standard input}:273    .bss.tmrComputeData:00000000 $d
    {standard input}:276    .bss.tmrComputeData:00000000 tmrComputeData
    {standard input}:281    .bss.appState:00000000 appState
    {standard input}:282    .bss.appState:00000000 $d
    {standard input}:284    .bss.tmrBlinkData:00000000 $d
    {standard input}:287    .bss.tmrBlinkData:00000000 tmrBlinkData
    {standard input}:290    .bss.msgReq:00000000 $d
    {standard input}:293    .bss.msgReq:00000000 msgReq
    {standard input}:296    .bss.msgFrame:00000000 $d
    {standard input}:299    .bss.msgFrame:00000000 msgFrame
    {standard input}:302    .bss.msgReqConnection:00000000 $d
    {standard input}:305    .bss.msgReqConnection:00000000 msgReqConnection
    {standard input}:308    .bss.msgFrameConnection:00000000 $d
    {standard input}:311    .bss.msgFrameConnection:00000000 msgFrameConnection
    {standard input}:314    .data.server_turn:00000000 $d
    {standard input}:317    .data.server_turn:00000000 server_turn
    {standard input}:320    .bss.statistics_buffer:00000000 $d
    {standard input}:323    .bss.statistics_buffer:00000000 statistics_buffer
    {standard input}:326    .bss.aux_buffer:00000000 $d
    {standard input}:329    .bss.aux_buffer:00000000 aux_buffer
    {standard input}:338    .text:000000ca tmrBlinkDataHandler
    {standard input}:375    .rodata:00000000 $d
    {standard input}:385    .text:000000e2 toHexBuffer
    {standard input}:463    .text:0000013c $d
    {standard input}:468    .text:00000144 $t
    {standard input}:474    .text:00000144 tmr_tdma_server_beacon
    {standard input}:514    .text:00000160 $d
    {standard input}:520    .text:0000016c $t
    {standard input}:526    .text:0000016c tmr_tdma_server_statistics
    {standard input}:565    .text:00000184 $d
    {standard input}:583    .text:00000188 $t
    {standard input}:589    .text:00000188 server_statistics
    {standard input}:714    .text:0000020c $d
    {standard input}:738    .text:00000234 $t
    {standard input}:744    .text:00000234 appSendData
    {standard input}:844    .text:000002ac $d
    {standard input}:863    .text:000002ec $t
    {standard input}:869    .text:000002ec appDataInd
    {standard input}:935    .text:0000032c $d
    {standard input}:942    .text:0000033c $t
    {standard input}:948    .text:0000033c appInit
    {standard input}:1116   .text:00000424 $d
    {standard input}:1139   .text:00000474 $t
    {standard input}:1145   .text:00000474 APP_TaskHandler
    {standard input}:1209   .text:000004b8 $d
    {standard input}:1215   .text:000004c4 $t
    {standard input}:1222   .text:000004c4 main
    {standard input}:1301   .text:000004f8 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
sprintf
SYS_TimerStart
solver_solve_system
solver_get_n_received
solver_get_n_colaborative
printf
solver_get_data
energy_prepare_next_turn
solver_prepare_next_turn
energy_get_collab_vector
energy_get_connected_vector
NWK_DataReq
energy_receive_statistics
solver_received_data_frame
NWK_SetAddr
NWK_SetPanId
PHY_SetChannel
PHY_SetRxState
PHY_RandomReq
srand
NWK_OpenEndpoint
energy_init
solver_init
sysclk_init
board_init
SYS_Init
PHY_SetTdmaMode
sm_init
g_interrupt_enabled
stdio_usb_init
SYS_TaskHandler
