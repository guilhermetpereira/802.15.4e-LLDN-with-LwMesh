   1              	 .cpu cortex-m4
   2              	 .eabi_attribute 20,1
   3              	 .eabi_attribute 21,1
   4              	 .eabi_attribute 23,3
   5              	 .eabi_attribute 24,1
   6              	 .eabi_attribute 25,1
   7              	 .eabi_attribute 26,1
   8              	 .eabi_attribute 30,6
   9              	 .eabi_attribute 34,1
  10              	 .eabi_attribute 18,4
  11              	 .file "Solver.c"
  12              	 .text
  13              	.Ltext0:
  14              	 .cfi_sections .debug_frame
  15              	 .section .bss.cpu_irq_critical_section_counter,"aw",%nobits
  16              	 .align 2
  19              	cpu_irq_critical_section_counter:
  20 0000 00000000 	 .space 4
  21              	 .section .bss.cpu_irq_prev_interrupt_state,"aw",%nobits
  24              	cpu_irq_prev_interrupt_state:
  25 0000 00       	 .space 1
  26              	 .comm n,1,1
  27              	 .section .bss.tTS,"aw",%nobits
  28              	 .align 2
  31              	tTS:
  32 0000 00000000 	 .space 4
  33              	 .section .bss.n_received,"aw",%nobits
  36              	n_received:
  37 0000 00       	 .space 1
  38              	 .section .bss.received,"aw",%nobits
  39              	 .align 2
  42              	received:
  43 0000 00000000 	 .space 15
  43      00000000 
  43      00000000 
  43      000000
  44              	 .section .bss.n_colaborative,"aw",%nobits
  47              	n_colaborative:
  48 0000 00       	 .space 1
  49              	 .section .bss.buffer_msg,"aw",%nobits
  50              	 .align 2
  53              	buffer_msg:
  54 0000 00000000 	 .space 960
  54      00000000 
  54      00000000 
  54      00000000 
  54      00000000 
  55              	 .section .bss.n_equations,"aw",%nobits
  58              	n_equations:
  59 0000 00       	 .space 1
  60              	 .section .bss.matrix,"aw",%nobits
  61              	 .align 2
  64              	matrix:
  65 0000 00000000 	 .space 225
  65      00000000 
  65      00000000 
  65      00000000 
  65      00000000 
  66              	 .section .bss.combination,"aw",%nobits
  67              	 .align 2
  70              	combination:
  71 0000 00000000 	 .space 960
  71      00000000 
  71      00000000 
  71      00000000 
  71      00000000 
  72              	 .text
  73              	 .align 1
  74              	 .global solver_init
  75              	 .syntax unified
  76              	 .thumb
  77              	 .thumb_func
  78              	 .fpu softvfp
  80              	solver_init:
  81              	.LFB127:
  82              	 .file 1 "Solver.c"
   1:Solver.c      **** //
   2:Solver.c      **** // This program is free software: you can redistribute it and/or modify
   3:Solver.c      **** // it under the terms of the GNU Lesser General Public License as published by
   4:Solver.c      **** // the Free Software Foundation, either version 3 of the License, or
   5:Solver.c      **** // (at your option) any later version.
   6:Solver.c      **** // 
   7:Solver.c      **** // This program is distributed in the hope that it will be useful,
   8:Solver.c      **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
   9:Solver.c      **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  10:Solver.c      **** // GNU Lesser General Public License for more details.
  11:Solver.c      **** // 
  12:Solver.c      **** // You should have received a copy of the GNU Lesser General Public License
  13:Solver.c      **** // along with this program.  If not, see http://www.gnu.org/licenses/.
  14:Solver.c      **** // 
  15:Solver.c      **** 
  16:Solver.c      **** #include <stdint.h>
  17:Solver.c      **** #include <string.h>
  18:Solver.c      **** #include "config.h"
  19:Solver.c      **** #include "Solver.h"
  20:Solver.c      **** 
  21:Solver.c      **** static uint8_t					n_received					= 0;
  22:Solver.c      **** static SolverMsgType_t			received[N_MOTES_MAX];						// confirma recebimento
  23:Solver.c      **** static uint8_t					n_colaborative;								// numero de msg de colaboração
  24:Solver.c      **** static uint8_t					buffer_msg[N_MOTES_MAX][MSG_SIZE_MAX];		// matriz de armazenamento de msg
  25:Solver.c      **** static uint8_t					n_equations;								// numero de linhas da matriz
  26:Solver.c      **** static uint8_t					matrix[N_MOTES_MAX][N_MOTES_MAX];			// matriz
  27:Solver.c      **** static uint8_t					combination[N_MOTES_MAX][MSG_SIZE_MAX];		// mensagens retransmitidas recebidas
  28:Solver.c      **** #if APP_ENDDEVICE
  29:Solver.c      **** 	static uint8_t				slotNumber					= 0;
  30:Solver.c      **** #endif
  31:Solver.c      **** 
  32:Solver.c      **** void solver_init(void)
  33:Solver.c      **** {
  83              	 .loc 1 33 0
  84              	 .cfi_startproc
  85              	 
  86              	 
  87              	 
  88 0000 80B4     	 push {r7}
  89              	.LCFI0:
  90              	 .cfi_def_cfa_offset 4
  91              	 .cfi_offset 7,-4
  92 0002 00AF     	 add r7,sp,#0
  93              	.LCFI1:
  94              	 .cfi_def_cfa_register 7
  34:Solver.c      **** #if APP_COORDINATOR
  35:Solver.c      **** 	n_colaborative				= 0;
  95              	 .loc 1 35 0
  96 0004 064B     	 ldr r3,.L2
  97 0006 0022     	 movs r2,#0
  98 0008 1A70     	 strb r2,[r3]
  36:Solver.c      **** 	n_equations					= 0;
  99              	 .loc 1 36 0
 100 000a 064B     	 ldr r3,.L2+4
 101 000c 0022     	 movs r2,#0
 102 000e 1A70     	 strb r2,[r3]
  37:Solver.c      **** 	n_received					= 0;
 103              	 .loc 1 37 0
 104 0010 054B     	 ldr r3,.L2+8
 105 0012 0022     	 movs r2,#0
 106 0014 1A70     	 strb r2,[r3]
  38:Solver.c      **** #else
  39:Solver.c      **** 	slotNumber					= 0;
  40:Solver.c      **** #endif
  41:Solver.c      **** }
 107              	 .loc 1 41 0
 108 0016 00BF     	 nop
 109 0018 BD46     	 mov sp,r7
 110              	.LCFI2:
 111              	 .cfi_def_cfa_register 13
 112              	 
 113 001a 80BC     	 pop {r7}
 114              	.LCFI3:
 115              	 .cfi_restore 7
 116              	 .cfi_def_cfa_offset 0
 117 001c 7047     	 bx lr
 118              	.L3:
 119 001e 00BF     	 .align 2
 120              	.L2:
 121 0020 00000000 	 .word n_colaborative
 122 0024 00000000 	 .word n_equations
 123 0028 00000000 	 .word n_received
 124              	 .cfi_endproc
 125              	.LFE127:
 127              	 .align 1
 128              	 .global solver_get_n_received
 129              	 .syntax unified
 130              	 .thumb
 131              	 .thumb_func
 132              	 .fpu softvfp
 134              	solver_get_n_received:
 135              	.LFB128:
  42:Solver.c      **** uint8_t solver_get_n_received(void)
  43:Solver.c      **** {
 136              	 .loc 1 43 0
 137              	 .cfi_startproc
 138              	 
 139              	 
 140              	 
 141 002c 80B4     	 push {r7}
 142              	.LCFI4:
 143              	 .cfi_def_cfa_offset 4
 144              	 .cfi_offset 7,-4
 145 002e 00AF     	 add r7,sp,#0
 146              	.LCFI5:
 147              	 .cfi_def_cfa_register 7
  44:Solver.c      **** 	return(n_received);
 148              	 .loc 1 44 0
 149 0030 024B     	 ldr r3,.L6
 150 0032 1B78     	 ldrb r3,[r3]
  45:Solver.c      **** }
 151              	 .loc 1 45 0
 152 0034 1846     	 mov r0,r3
 153 0036 BD46     	 mov sp,r7
 154              	.LCFI6:
 155              	 .cfi_def_cfa_register 13
 156              	 
 157 0038 80BC     	 pop {r7}
 158              	.LCFI7:
 159              	 .cfi_restore 7
 160              	 .cfi_def_cfa_offset 0
 161 003a 7047     	 bx lr
 162              	.L7:
 163              	 .align 2
 164              	.L6:
 165 003c 00000000 	 .word n_received
 166              	 .cfi_endproc
 167              	.LFE128:
 169              	 .align 1
 170              	 .global solver_get_n_colaborative
 171              	 .syntax unified
 172              	 .thumb
 173              	 .thumb_func
 174              	 .fpu softvfp
 176              	solver_get_n_colaborative:
 177              	.LFB129:
  46:Solver.c      **** uint8_t solver_get_n_colaborative(void)
  47:Solver.c      **** {
 178              	 .loc 1 47 0
 179              	 .cfi_startproc
 180              	 
 181              	 
 182              	 
 183 0040 80B4     	 push {r7}
 184              	.LCFI8:
 185              	 .cfi_def_cfa_offset 4
 186              	 .cfi_offset 7,-4
 187 0042 00AF     	 add r7,sp,#0
 188              	.LCFI9:
 189              	 .cfi_def_cfa_register 7
  48:Solver.c      **** 	return(n_colaborative);
 190              	 .loc 1 48 0
 191 0044 024B     	 ldr r3,.L10
 192 0046 1B78     	 ldrb r3,[r3]
  49:Solver.c      **** }
 193              	 .loc 1 49 0
 194 0048 1846     	 mov r0,r3
 195 004a BD46     	 mov sp,r7
 196              	.LCFI10:
 197              	 .cfi_def_cfa_register 13
 198              	 
 199 004c 80BC     	 pop {r7}
 200              	.LCFI11:
 201              	 .cfi_restore 7
 202              	 .cfi_def_cfa_offset 0
 203 004e 7047     	 bx lr
 204              	.L11:
 205              	 .align 2
 206              	.L10:
 207 0050 00000000 	 .word n_colaborative
 208              	 .cfi_endproc
 209              	.LFE129:
 211              	 .align 1
 212              	 .syntax unified
 213              	 .thumb
 214              	 .thumb_func
 215              	 .fpu softvfp
 217              	solver_mult:
 218              	.LFB130:
  50:Solver.c      **** /****************************************************************************************
  51:Solver.c      ****                             FUNÇÕES DE CODIFICAÇÃO A 8 BITS
  52:Solver.c      **** ****************************************************************************************/
  53:Solver.c      **** //multiplicacao de 2 número num corpo de 8 bits
  54:Solver.c      **** static uint8_t solver_mult(uint8_t a, uint8_t b)
  55:Solver.c      **** {
 219              	 .loc 1 55 0
 220              	 .cfi_startproc
 221              	 
 222              	 
 223              	 
 224 0054 80B4     	 push {r7}
 225              	.LCFI12:
 226              	 .cfi_def_cfa_offset 4
 227              	 .cfi_offset 7,-4
 228 0056 85B0     	 sub sp,sp,#20
 229              	.LCFI13:
 230              	 .cfi_def_cfa_offset 24
 231 0058 00AF     	 add r7,sp,#0
 232              	.LCFI14:
 233              	 .cfi_def_cfa_register 7
 234 005a 0346     	 mov r3,r0
 235 005c 0A46     	 mov r2,r1
 236 005e FB71     	 strb r3,[r7,#7]
 237 0060 1346     	 mov r3,r2
 238 0062 BB71     	 strb r3,[r7,#6]
  56:Solver.c      **** 	int i;
  57:Solver.c      **** 	uint16_t result = 0;
 239              	 .loc 1 57 0
 240 0064 0023     	 movs r3,#0
 241 0066 7B81     	 strh r3,[r7,#10]
  58:Solver.c      **** 
  59:Solver.c      **** 	for (i = 0; i < 8; i++)
 242              	 .loc 1 59 0
 243 0068 0023     	 movs r3,#0
 244 006a FB60     	 str r3,[r7,#12]
 245 006c 14E0     	 b .L13
 246              	.L15:
  60:Solver.c      **** 	{
  61:Solver.c      **** 		if ((a >> i) & 1)
 247              	 .loc 1 61 0
 248 006e FA79     	 ldrb r2,[r7,#7]
 249 0070 FB68     	 ldr r3,[r7,#12]
 250 0072 42FA03F3 	 asr r3,r2,r3
 251 0076 03F00103 	 and r3,r3,#1
 252 007a 002B     	 cmp r3,#0
 253 007c 09D0     	 beq .L14
  62:Solver.c      **** 		{
  63:Solver.c      **** 			result ^= ((uint16_t) b) << i;
 254              	 .loc 1 63 0
 255 007e BA79     	 ldrb r2,[r7,#6]
 256 0080 FB68     	 ldr r3,[r7,#12]
 257 0082 02FA03F3 	 lsl r3,r2,r3
 258 0086 1AB2     	 sxth r2,r3
 259 0088 B7F90A30 	 ldrsh r3,[r7,#10]
 260 008c 5340     	 eors r3,r3,r2
 261 008e 1BB2     	 sxth r3,r3
 262 0090 7B81     	 strh r3,[r7,#10]
 263              	.L14:
  59:Solver.c      **** 	{
 264              	 .loc 1 59 0 discriminator 2
 265 0092 FB68     	 ldr r3,[r7,#12]
 266 0094 0133     	 adds r3,r3,#1
 267 0096 FB60     	 str r3,[r7,#12]
 268              	.L13:
  59:Solver.c      **** 	{
 269              	 .loc 1 59 0 is_stmt 0 discriminator 1
 270 0098 FB68     	 ldr r3,[r7,#12]
 271 009a 072B     	 cmp r3,#7
 272 009c E7DD     	 ble .L15
  64:Solver.c      **** 		}
  65:Solver.c      **** 	}
  66:Solver.c      **** 
  67:Solver.c      **** 	for (i = 6; i >= 0; i--)
 273              	 .loc 1 67 0 is_stmt 1
 274 009e 0623     	 movs r3,#6
 275 00a0 FB60     	 str r3,[r7,#12]
 276 00a2 16E0     	 b .L16
 277              	.L18:
  68:Solver.c      **** 	{
  69:Solver.c      **** 		if (result & (0x100 << i))
 278              	 .loc 1 69 0
 279 00a4 7A89     	 ldrh r2,[r7,#10]
 280 00a6 4FF48071 	 mov r1,#256
 281 00aa FB68     	 ldr r3,[r7,#12]
 282 00ac 01FA03F3 	 lsl r3,r1,r3
 283 00b0 1340     	 ands r3,r3,r2
 284 00b2 002B     	 cmp r3,#0
 285 00b4 0AD0     	 beq .L17
  70:Solver.c      **** 		{
  71:Solver.c      **** 			result ^= (0x1A9 << i);
 286              	 .loc 1 71 0
 287 00b6 40F2A912 	 movw r2,#425
 288 00ba FB68     	 ldr r3,[r7,#12]
 289 00bc 02FA03F3 	 lsl r3,r2,r3
 290 00c0 1AB2     	 sxth r2,r3
 291 00c2 B7F90A30 	 ldrsh r3,[r7,#10]
 292 00c6 5340     	 eors r3,r3,r2
 293 00c8 1BB2     	 sxth r3,r3
 294 00ca 7B81     	 strh r3,[r7,#10]
 295              	.L17:
  67:Solver.c      **** 	{
 296              	 .loc 1 67 0 discriminator 2
 297 00cc FB68     	 ldr r3,[r7,#12]
 298 00ce 013B     	 subs r3,r3,#1
 299 00d0 FB60     	 str r3,[r7,#12]
 300              	.L16:
  67:Solver.c      **** 	{
 301              	 .loc 1 67 0 is_stmt 0 discriminator 1
 302 00d2 FB68     	 ldr r3,[r7,#12]
 303 00d4 002B     	 cmp r3,#0
 304 00d6 E5DA     	 bge .L18
  72:Solver.c      **** 		}
  73:Solver.c      **** 	}
  74:Solver.c      **** 
  75:Solver.c      **** 	return result;
 305              	 .loc 1 75 0 is_stmt 1
 306 00d8 7B89     	 ldrh r3,[r7,#10]
 307 00da DBB2     	 uxtb r3,r3
  76:Solver.c      **** }
 308              	 .loc 1 76 0
 309 00dc 1846     	 mov r0,r3
 310 00de 1437     	 adds r7,r7,#20
 311              	.LCFI15:
 312              	 .cfi_def_cfa_offset 4
 313 00e0 BD46     	 mov sp,r7
 314              	.LCFI16:
 315              	 .cfi_def_cfa_register 13
 316              	 
 317 00e2 80BC     	 pop {r7}
 318              	.LCFI17:
 319              	 .cfi_restore 7
 320              	 .cfi_def_cfa_offset 0
 321 00e4 7047     	 bx lr
 322              	 .cfi_endproc
 323              	.LFE130:
 325              	 .align 1
 326              	 .syntax unified
 327              	 .thumb
 328              	 .thumb_func
 329              	 .fpu softvfp
 331              	solver_inv:
 332              	.LFB131:
  77:Solver.c      **** #if APP_COORDINATOR
  78:Solver.c      **** // inverso  do mult
  79:Solver.c      **** static uint8_t solver_inv(uint8_t a)
  80:Solver.c      **** {
 333              	 .loc 1 80 0
 334              	 .cfi_startproc
 335              	 
 336              	 
 337              	 
 338 00e6 80B4     	 push {r7}
 339              	.LCFI18:
 340              	 .cfi_def_cfa_offset 4
 341              	 .cfi_offset 7,-4
 342 00e8 8BB0     	 sub sp,sp,#44
 343              	.LCFI19:
 344              	 .cfi_def_cfa_offset 48
 345 00ea 00AF     	 add r7,sp,#0
 346              	.LCFI20:
 347              	 .cfi_def_cfa_register 7
 348 00ec 0346     	 mov r3,r0
 349 00ee FB71     	 strb r3,[r7,#7]
  81:Solver.c      ****     int i, j;
  82:Solver.c      ****     uint16_t result, r[8], p;
  83:Solver.c      **** 
  84:Solver.c      ****     if (a == 0)
 350              	 .loc 1 84 0
 351 00f0 FB79     	 ldrb r3,[r7,#7]
 352 00f2 002B     	 cmp r3,#0
 353 00f4 01D1     	 bne .L21
  85:Solver.c      **** 		return 0;
 354              	 .loc 1 85 0
 355 00f6 0023     	 movs r3,#0
 356 00f8 72E0     	 b .L34
 357              	.L21:
  86:Solver.c      **** 
  87:Solver.c      ****     for (i = 0; i < 8; i++)
 358              	 .loc 1 87 0
 359 00fa 0023     	 movs r3,#0
 360 00fc 7B62     	 str r3,[r7,#36]
 361 00fe 3FE0     	 b .L23
 362              	.L27:
  88:Solver.c      ****     {
  89:Solver.c      ****         r[i] = ((uint16_t) a) << i;
 363              	 .loc 1 89 0
 364 0100 FA79     	 ldrb r2,[r7,#7]
 365 0102 7B6A     	 ldr r3,[r7,#36]
 366 0104 02FA03F3 	 lsl r3,r2,r3
 367 0108 9AB2     	 uxth r2,r3
 368 010a 7B6A     	 ldr r3,[r7,#36]
 369 010c 5B00     	 lsls r3,r3,#1
 370 010e 07F12801 	 add r1,r7,#40
 371 0112 0B44     	 add r3,r3,r1
 372 0114 23F81C2C 	 strh r2,[r3,#-28]
  90:Solver.c      **** 
  91:Solver.c      ****         for (j = 6; j >= 0; j--)
 373              	 .loc 1 91 0
 374 0118 0623     	 movs r3,#6
 375 011a 3B62     	 str r3,[r7,#32]
 376 011c 2AE0     	 b .L24
 377              	.L26:
  92:Solver.c      **** 		{
  93:Solver.c      ****             if (r[i] & (0x100 << j))
 378              	 .loc 1 93 0
 379 011e 7B6A     	 ldr r3,[r7,#36]
 380 0120 5B00     	 lsls r3,r3,#1
 381 0122 07F12802 	 add r2,r7,#40
 382 0126 1344     	 add r3,r3,r2
 383 0128 33F81C3C 	 ldrh r3,[r3,#-28]
 384 012c 1946     	 mov r1,r3
 385 012e 4FF48072 	 mov r2,#256
 386 0132 3B6A     	 ldr r3,[r7,#32]
 387 0134 02FA03F3 	 lsl r3,r2,r3
 388 0138 0B40     	 ands r3,r3,r1
 389 013a 002B     	 cmp r3,#0
 390 013c 17D0     	 beq .L25
  94:Solver.c      **** 			{
  95:Solver.c      **** 				r[i] ^= (0x1A9 << j);
 391              	 .loc 1 95 0
 392 013e 7B6A     	 ldr r3,[r7,#36]
 393 0140 5B00     	 lsls r3,r3,#1
 394 0142 07F12802 	 add r2,r7,#40
 395 0146 1344     	 add r3,r3,r2
 396 0148 33F81C3C 	 ldrh r3,[r3,#-28]
 397 014c 1AB2     	 sxth r2,r3
 398 014e 40F2A911 	 movw r1,#425
 399 0152 3B6A     	 ldr r3,[r7,#32]
 400 0154 01FA03F3 	 lsl r3,r1,r3
 401 0158 1BB2     	 sxth r3,r3
 402 015a 5340     	 eors r3,r3,r2
 403 015c 1BB2     	 sxth r3,r3
 404 015e 9AB2     	 uxth r2,r3
 405 0160 7B6A     	 ldr r3,[r7,#36]
 406 0162 5B00     	 lsls r3,r3,#1
 407 0164 07F12801 	 add r1,r7,#40
 408 0168 0B44     	 add r3,r3,r1
 409 016a 23F81C2C 	 strh r2,[r3,#-28]
 410              	.L25:
  91:Solver.c      **** 		{
 411              	 .loc 1 91 0 discriminator 2
 412 016e 3B6A     	 ldr r3,[r7,#32]
 413 0170 013B     	 subs r3,r3,#1
 414 0172 3B62     	 str r3,[r7,#32]
 415              	.L24:
  91:Solver.c      **** 		{
 416              	 .loc 1 91 0 is_stmt 0 discriminator 1
 417 0174 3B6A     	 ldr r3,[r7,#32]
 418 0176 002B     	 cmp r3,#0
 419 0178 D1DA     	 bge .L26
  87:Solver.c      ****     {
 420              	 .loc 1 87 0 is_stmt 1 discriminator 2
 421 017a 7B6A     	 ldr r3,[r7,#36]
 422 017c 0133     	 adds r3,r3,#1
 423 017e 7B62     	 str r3,[r7,#36]
 424              	.L23:
  87:Solver.c      ****     {
 425              	 .loc 1 87 0 is_stmt 0 discriminator 1
 426 0180 7B6A     	 ldr r3,[r7,#36]
 427 0182 072B     	 cmp r3,#7
 428 0184 BCDD     	 ble .L27
  96:Solver.c      **** 			}
  97:Solver.c      **** 		}
  98:Solver.c      ****     }
  99:Solver.c      **** 
 100:Solver.c      ****     for (result = 0; result < 0x100; result++)
 429              	 .loc 1 100 0 is_stmt 1
 430 0186 0023     	 movs r3,#0
 431 0188 FB83     	 strh r3,[r7,#30]
 432 018a 25E0     	 b .L28
 433              	.L33:
 101:Solver.c      ****     {
 102:Solver.c      ****         p = 0;
 434              	 .loc 1 102 0
 435 018c 0023     	 movs r3,#0
 436 018e BB83     	 strh r3,[r7,#28]
 103:Solver.c      ****         for (i = 0; i < 8; i++)
 437              	 .loc 1 103 0
 438 0190 0023     	 movs r3,#0
 439 0192 7B62     	 str r3,[r7,#36]
 440 0194 14E0     	 b .L29
 441              	.L31:
 104:Solver.c      **** 		{
 105:Solver.c      ****             if (result & (1 << i))
 442              	 .loc 1 105 0
 443 0196 FA8B     	 ldrh r2,[r7,#30]
 444 0198 7B6A     	 ldr r3,[r7,#36]
 445 019a 42FA03F3 	 asr r3,r2,r3
 446 019e 03F00103 	 and r3,r3,#1
 447 01a2 002B     	 cmp r3,#0
 448 01a4 09D0     	 beq .L30
 106:Solver.c      **** 			{
 107:Solver.c      **** 				p ^= r[i];
 449              	 .loc 1 107 0
 450 01a6 7B6A     	 ldr r3,[r7,#36]
 451 01a8 5B00     	 lsls r3,r3,#1
 452 01aa 07F12802 	 add r2,r7,#40
 453 01ae 1344     	 add r3,r3,r2
 454 01b0 33F81C2C 	 ldrh r2,[r3,#-28]
 455 01b4 BB8B     	 ldrh r3,[r7,#28]
 456 01b6 5340     	 eors r3,r3,r2
 457 01b8 BB83     	 strh r3,[r7,#28]
 458              	.L30:
 103:Solver.c      **** 		{
 459              	 .loc 1 103 0 discriminator 2
 460 01ba 7B6A     	 ldr r3,[r7,#36]
 461 01bc 0133     	 adds r3,r3,#1
 462 01be 7B62     	 str r3,[r7,#36]
 463              	.L29:
 103:Solver.c      **** 		{
 464              	 .loc 1 103 0 is_stmt 0 discriminator 1
 465 01c0 7B6A     	 ldr r3,[r7,#36]
 466 01c2 072B     	 cmp r3,#7
 467 01c4 E7DD     	 ble .L31
 108:Solver.c      **** 			}
 109:Solver.c      **** 		}
 110:Solver.c      **** 
 111:Solver.c      ****         if (p == 1)
 468              	 .loc 1 111 0 is_stmt 1
 469 01c6 BB8B     	 ldrh r3,[r7,#28]
 470 01c8 012B     	 cmp r3,#1
 471 01ca 02D1     	 bne .L32
 112:Solver.c      **** 			return result;
 472              	 .loc 1 112 0
 473 01cc FB8B     	 ldrh r3,[r7,#30]
 474 01ce DBB2     	 uxtb r3,r3
 475 01d0 06E0     	 b .L34
 476              	.L32:
 100:Solver.c      ****     {
 477              	 .loc 1 100 0 discriminator 2
 478 01d2 FB8B     	 ldrh r3,[r7,#30]
 479 01d4 0133     	 adds r3,r3,#1
 480 01d6 FB83     	 strh r3,[r7,#30]
 481              	.L28:
 100:Solver.c      ****     {
 482              	 .loc 1 100 0 is_stmt 0 discriminator 1
 483 01d8 FB8B     	 ldrh r3,[r7,#30]
 484 01da FF2B     	 cmp r3,#255
 485 01dc D6D9     	 bls .L33
 113:Solver.c      ****     }
 114:Solver.c      **** 
 115:Solver.c      ****     return 0;
 486              	 .loc 1 115 0 is_stmt 1
 487 01de 0023     	 movs r3,#0
 488              	.L34:
 116:Solver.c      **** }
 489              	 .loc 1 116 0 discriminator 1
 490 01e0 1846     	 mov r0,r3
 491 01e2 2C37     	 adds r7,r7,#44
 492              	.LCFI21:
 493              	 .cfi_def_cfa_offset 4
 494 01e4 BD46     	 mov sp,r7
 495              	.LCFI22:
 496              	 .cfi_def_cfa_register 13
 497              	 
 498 01e6 80BC     	 pop {r7}
 499              	.LCFI23:
 500              	 .cfi_restore 7
 501              	 .cfi_def_cfa_offset 0
 502 01e8 7047     	 bx lr
 503              	 .cfi_endproc
 504              	.LFE131:
 506              	 .align 1
 507              	 .syntax unified
 508              	 .thumb
 509              	 .thumb_func
 510              	 .fpu softvfp
 512              	solver_swap_line:
 513              	.LFB132:
 117:Solver.c      **** /****************************************************************************************
 118:Solver.c      ****                         FUNÇÕES PARA DECIFRAR AS MENSAGENS CODIFICADAS
 119:Solver.c      **** ****************************************************************************************/
 120:Solver.c      **** static void solver_swap_line(uint16_t i1, uint16_t i2)
 121:Solver.c      **** {
 514              	 .loc 1 121 0
 515              	 .cfi_startproc
 516              	 
 517              	 
 518              	 
 519 01ea B0B4     	 push {r4,r5,r7}
 520              	.LCFI24:
 521              	 .cfi_def_cfa_offset 12
 522              	 .cfi_offset 4,-12
 523              	 .cfi_offset 5,-8
 524              	 .cfi_offset 7,-4
 525 01ec 85B0     	 sub sp,sp,#20
 526              	.LCFI25:
 527              	 .cfi_def_cfa_offset 32
 528 01ee 00AF     	 add r7,sp,#0
 529              	.LCFI26:
 530              	 .cfi_def_cfa_register 7
 531 01f0 0346     	 mov r3,r0
 532 01f2 0A46     	 mov r2,r1
 533 01f4 FB80     	 strh r3,[r7,#6]
 534 01f6 1346     	 mov r3,r2
 535 01f8 BB80     	 strh r3,[r7,#4]
 122:Solver.c      ****     uint16_t j, k;
 123:Solver.c      **** 
 124:Solver.c      ****     for (j = i1; j <= N_MOTES_MAX; j++)	// Pode ser reduzido para o número de nodos conectados????
 536              	 .loc 1 124 0
 537 01fa FB88     	 ldrh r3,[r7,#6]
 538 01fc FB81     	 strh r3,[r7,#14]
 539 01fe 2BE0     	 b .L36
 540              	.L37:
 125:Solver.c      ****     {
 126:Solver.c      ****         k								= matrix[i1][j];
 541              	 .loc 1 126 0 discriminator 3
 542 0200 FA88     	 ldrh r2,[r7,#6]
 543 0202 F989     	 ldrh r1,[r7,#14]
 544 0204 2D48     	 ldr r0,.L40
 545 0206 1346     	 mov r3,r2
 546 0208 1B01     	 lsls r3,r3,#4
 547 020a 9B1A     	 subs r3,r3,r2
 548 020c 0344     	 add r3,r3,r0
 549 020e 0B44     	 add r3,r3,r1
 550 0210 1B78     	 ldrb r3,[r3]
 551 0212 BB81     	 strh r3,[r7,#12]
 127:Solver.c      ****         matrix[i1][j]					= matrix[i2][j];
 552              	 .loc 1 127 0 discriminator 3
 553 0214 FA88     	 ldrh r2,[r7,#6]
 554 0216 F889     	 ldrh r0,[r7,#14]
 555 0218 B988     	 ldrh r1,[r7,#4]
 556 021a FC89     	 ldrh r4,[r7,#14]
 557 021c 274D     	 ldr r5,.L40
 558 021e 0B46     	 mov r3,r1
 559 0220 1B01     	 lsls r3,r3,#4
 560 0222 5B1A     	 subs r3,r3,r1
 561 0224 2B44     	 add r3,r3,r5
 562 0226 2344     	 add r3,r3,r4
 563 0228 1C78     	 ldrb r4,[r3]
 564 022a 2449     	 ldr r1,.L40
 565 022c 1346     	 mov r3,r2
 566 022e 1B01     	 lsls r3,r3,#4
 567 0230 9B1A     	 subs r3,r3,r2
 568 0232 0B44     	 add r3,r3,r1
 569 0234 0344     	 add r3,r3,r0
 570 0236 2246     	 mov r2,r4
 571 0238 1A70     	 strb r2,[r3]
 128:Solver.c      ****         matrix[i2][j]					= k;
 572              	 .loc 1 128 0 discriminator 3
 573 023a BA88     	 ldrh r2,[r7,#4]
 574 023c F989     	 ldrh r1,[r7,#14]
 575 023e BB89     	 ldrh r3,[r7,#12]
 576 0240 DCB2     	 uxtb r4,r3
 577 0242 1E48     	 ldr r0,.L40
 578 0244 1346     	 mov r3,r2
 579 0246 1B01     	 lsls r3,r3,#4
 580 0248 9B1A     	 subs r3,r3,r2
 581 024a 0344     	 add r3,r3,r0
 582 024c 0B44     	 add r3,r3,r1
 583 024e 2246     	 mov r2,r4
 584 0250 1A70     	 strb r2,[r3]
 124:Solver.c      ****     {
 585              	 .loc 1 124 0 discriminator 3
 586 0252 FB89     	 ldrh r3,[r7,#14]
 587 0254 0133     	 adds r3,r3,#1
 588 0256 FB81     	 strh r3,[r7,#14]
 589              	.L36:
 124:Solver.c      ****     {
 590              	 .loc 1 124 0 is_stmt 0 discriminator 1
 591 0258 FB89     	 ldrh r3,[r7,#14]
 592 025a 0F2B     	 cmp r3,#15
 593 025c D0D9     	 bls .L37
 129:Solver.c      ****     }
 130:Solver.c      **** 
 131:Solver.c      ****     for (j = 0; j < MSG_SIZE_MAX; j++)// Pode ser reduzido para o tamanho da mensagens????
 594              	 .loc 1 131 0 is_stmt 1
 595 025e 0023     	 movs r3,#0
 596 0260 FB81     	 strh r3,[r7,#14]
 597 0262 23E0     	 b .L38
 598              	.L39:
 132:Solver.c      ****     {
 133:Solver.c      ****         k								= combination[i1][j];
 599              	 .loc 1 133 0 discriminator 3
 600 0264 FA88     	 ldrh r2,[r7,#6]
 601 0266 FB89     	 ldrh r3,[r7,#14]
 602 0268 1549     	 ldr r1,.L40+4
 603 026a 9201     	 lsls r2,r2,#6
 604 026c 0A44     	 add r2,r2,r1
 605 026e 1344     	 add r3,r3,r2
 606 0270 1B78     	 ldrb r3,[r3]
 607 0272 BB81     	 strh r3,[r7,#12]
 134:Solver.c      ****         combination[i1][j]				= combination[i2][j];
 608              	 .loc 1 134 0 discriminator 3
 609 0274 FA88     	 ldrh r2,[r7,#6]
 610 0276 FB89     	 ldrh r3,[r7,#14]
 611 0278 B888     	 ldrh r0,[r7,#4]
 612 027a F989     	 ldrh r1,[r7,#14]
 613 027c 104C     	 ldr r4,.L40+4
 614 027e 8001     	 lsls r0,r0,#6
 615 0280 2044     	 add r0,r0,r4
 616 0282 0144     	 add r1,r1,r0
 617 0284 0878     	 ldrb r0,[r1]
 618 0286 0E49     	 ldr r1,.L40+4
 619 0288 9201     	 lsls r2,r2,#6
 620 028a 0A44     	 add r2,r2,r1
 621 028c 1344     	 add r3,r3,r2
 622 028e 0246     	 mov r2,r0
 623 0290 1A70     	 strb r2,[r3]
 135:Solver.c      ****         combination[i2][j]				= k;
 624              	 .loc 1 135 0 discriminator 3
 625 0292 BA88     	 ldrh r2,[r7,#4]
 626 0294 FB89     	 ldrh r3,[r7,#14]
 627 0296 B989     	 ldrh r1,[r7,#12]
 628 0298 C8B2     	 uxtb r0,r1
 629 029a 0949     	 ldr r1,.L40+4
 630 029c 9201     	 lsls r2,r2,#6
 631 029e 0A44     	 add r2,r2,r1
 632 02a0 1344     	 add r3,r3,r2
 633 02a2 0246     	 mov r2,r0
 634 02a4 1A70     	 strb r2,[r3]
 131:Solver.c      ****     {
 635              	 .loc 1 131 0 discriminator 3
 636 02a6 FB89     	 ldrh r3,[r7,#14]
 637 02a8 0133     	 adds r3,r3,#1
 638 02aa FB81     	 strh r3,[r7,#14]
 639              	.L38:
 131:Solver.c      ****     {
 640              	 .loc 1 131 0 is_stmt 0 discriminator 1
 641 02ac FB89     	 ldrh r3,[r7,#14]
 642 02ae 3F2B     	 cmp r3,#63
 643 02b0 D8D9     	 bls .L39
 136:Solver.c      ****     }
 137:Solver.c      **** }
 644              	 .loc 1 137 0 is_stmt 1
 645 02b2 00BF     	 nop
 646 02b4 1437     	 adds r7,r7,#20
 647              	.LCFI27:
 648              	 .cfi_def_cfa_offset 12
 649 02b6 BD46     	 mov sp,r7
 650              	.LCFI28:
 651              	 .cfi_def_cfa_register 13
 652              	 
 653 02b8 B0BC     	 pop {r4,r5,r7}
 654              	.LCFI29:
 655              	 .cfi_restore 7
 656              	 .cfi_restore 5
 657              	 .cfi_restore 4
 658              	 .cfi_def_cfa_offset 0
 659 02ba 7047     	 bx lr
 660              	.L41:
 661              	 .align 2
 662              	.L40:
 663 02bc 00000000 	 .word matrix
 664 02c0 00000000 	 .word combination
 665              	 .cfi_endproc
 666              	.LFE132:
 668              	 .align 1
 669              	 .syntax unified
 670              	 .thumb
 671              	 .thumb_func
 672              	 .fpu softvfp
 674              	solver_combine_line:
 675              	.LFB133:
 138:Solver.c      **** // parte do escalonamento
 139:Solver.c      **** static void solver_combine_line(uint8_t c, uint16_t i1, uint16_t i2)
 140:Solver.c      **** {
 676              	 .loc 1 140 0
 677              	 .cfi_startproc
 678              	 
 679              	 
 680 02c4 F0B5     	 push {r4,r5,r6,r7,lr}
 681              	.LCFI30:
 682              	 .cfi_def_cfa_offset 20
 683              	 .cfi_offset 4,-20
 684              	 .cfi_offset 5,-16
 685              	 .cfi_offset 6,-12
 686              	 .cfi_offset 7,-8
 687              	 .cfi_offset 14,-4
 688 02c6 85B0     	 sub sp,sp,#20
 689              	.LCFI31:
 690              	 .cfi_def_cfa_offset 40
 691 02c8 00AF     	 add r7,sp,#0
 692              	.LCFI32:
 693              	 .cfi_def_cfa_register 7
 694 02ca 0346     	 mov r3,r0
 695 02cc FB71     	 strb r3,[r7,#7]
 696 02ce 0B46     	 mov r3,r1
 697 02d0 BB80     	 strh r3,[r7,#4]
 698 02d2 1346     	 mov r3,r2
 699 02d4 7B80     	 strh r3,[r7,#2]
 141:Solver.c      ****     uint16_t j;
 142:Solver.c      **** 
 143:Solver.c      ****     for (j = i1; j <= N_MOTES_MAX; j++)
 700              	 .loc 1 143 0
 701 02d6 BB88     	 ldrh r3,[r7,#4]
 702 02d8 FB81     	 strh r3,[r7,#14]
 703 02da 27E0     	 b .L43
 704              	.L44:
 144:Solver.c      **** 	{
 145:Solver.c      ****         matrix[i2][j]					^= solver_mult(c, matrix[i1][j]);
 705              	 .loc 1 145 0 discriminator 3
 706 02dc BA88     	 ldrh r2,[r7,#4]
 707 02de F989     	 ldrh r1,[r7,#14]
 708 02e0 2A48     	 ldr r0,.L47
 709 02e2 1346     	 mov r3,r2
 710 02e4 1B01     	 lsls r3,r3,#4
 711 02e6 9B1A     	 subs r3,r3,r2
 712 02e8 0344     	 add r3,r3,r0
 713 02ea 0B44     	 add r3,r3,r1
 714 02ec 1A78     	 ldrb r2,[r3]
 715 02ee FB79     	 ldrb r3,[r7,#7]
 716 02f0 1146     	 mov r1,r2
 717 02f2 1846     	 mov r0,r3
 718 02f4 FFF7AEFE 	 bl solver_mult
 719 02f8 0346     	 mov r3,r0
 720 02fa 1E46     	 mov r6,r3
 721 02fc 7A88     	 ldrh r2,[r7,#2]
 722 02fe F889     	 ldrh r0,[r7,#14]
 723 0300 7988     	 ldrh r1,[r7,#2]
 724 0302 FC89     	 ldrh r4,[r7,#14]
 725 0304 214D     	 ldr r5,.L47
 726 0306 0B46     	 mov r3,r1
 727 0308 1B01     	 lsls r3,r3,#4
 728 030a 5B1A     	 subs r3,r3,r1
 729 030c 2B44     	 add r3,r3,r5
 730 030e 2344     	 add r3,r3,r4
 731 0310 1B78     	 ldrb r3,[r3]
 732 0312 7340     	 eors r3,r3,r6
 733 0314 DCB2     	 uxtb r4,r3
 734 0316 1D49     	 ldr r1,.L47
 735 0318 1346     	 mov r3,r2
 736 031a 1B01     	 lsls r3,r3,#4
 737 031c 9B1A     	 subs r3,r3,r2
 738 031e 0B44     	 add r3,r3,r1
 739 0320 0344     	 add r3,r3,r0
 740 0322 2246     	 mov r2,r4
 741 0324 1A70     	 strb r2,[r3]
 143:Solver.c      **** 	{
 742              	 .loc 1 143 0 discriminator 3
 743 0326 FB89     	 ldrh r3,[r7,#14]
 744 0328 0133     	 adds r3,r3,#1
 745 032a FB81     	 strh r3,[r7,#14]
 746              	.L43:
 143:Solver.c      **** 	{
 747              	 .loc 1 143 0 is_stmt 0 discriminator 1
 748 032c FB89     	 ldrh r3,[r7,#14]
 749 032e 0F2B     	 cmp r3,#15
 750 0330 D4D9     	 bls .L44
 146:Solver.c      **** 	}
 147:Solver.c      **** 
 148:Solver.c      ****     for (j = 0; j < MSG_SIZE_MAX; j++)
 751              	 .loc 1 148 0 is_stmt 1
 752 0332 0023     	 movs r3,#0
 753 0334 FB81     	 strh r3,[r7,#14]
 754 0336 21E0     	 b .L45
 755              	.L46:
 149:Solver.c      **** 	{
 150:Solver.c      ****         combination[i2][j]				^= solver_mult(c, combination[i1][j]);
 756              	 .loc 1 150 0 discriminator 3
 757 0338 BA88     	 ldrh r2,[r7,#4]
 758 033a FB89     	 ldrh r3,[r7,#14]
 759 033c 1449     	 ldr r1,.L47+4
 760 033e 9201     	 lsls r2,r2,#6
 761 0340 0A44     	 add r2,r2,r1
 762 0342 1344     	 add r3,r3,r2
 763 0344 1A78     	 ldrb r2,[r3]
 764 0346 FB79     	 ldrb r3,[r7,#7]
 765 0348 1146     	 mov r1,r2
 766 034a 1846     	 mov r0,r3
 767 034c FFF782FE 	 bl solver_mult
 768 0350 0346     	 mov r3,r0
 769 0352 1D46     	 mov r5,r3
 770 0354 7A88     	 ldrh r2,[r7,#2]
 771 0356 FB89     	 ldrh r3,[r7,#14]
 772 0358 7888     	 ldrh r0,[r7,#2]
 773 035a F989     	 ldrh r1,[r7,#14]
 774 035c 0C4C     	 ldr r4,.L47+4
 775 035e 8001     	 lsls r0,r0,#6
 776 0360 2044     	 add r0,r0,r4
 777 0362 0144     	 add r1,r1,r0
 778 0364 0978     	 ldrb r1,[r1]
 779 0366 6940     	 eors r1,r1,r5
 780 0368 C8B2     	 uxtb r0,r1
 781 036a 0949     	 ldr r1,.L47+4
 782 036c 9201     	 lsls r2,r2,#6
 783 036e 0A44     	 add r2,r2,r1
 784 0370 1344     	 add r3,r3,r2
 785 0372 0246     	 mov r2,r0
 786 0374 1A70     	 strb r2,[r3]
 148:Solver.c      **** 	{
 787              	 .loc 1 148 0 discriminator 3
 788 0376 FB89     	 ldrh r3,[r7,#14]
 789 0378 0133     	 adds r3,r3,#1
 790 037a FB81     	 strh r3,[r7,#14]
 791              	.L45:
 148:Solver.c      **** 	{
 792              	 .loc 1 148 0 is_stmt 0 discriminator 1
 793 037c FB89     	 ldrh r3,[r7,#14]
 794 037e 3F2B     	 cmp r3,#63
 795 0380 DAD9     	 bls .L46
 151:Solver.c      **** 	}
 152:Solver.c      **** }
 796              	 .loc 1 152 0 is_stmt 1
 797 0382 00BF     	 nop
 798 0384 1437     	 adds r7,r7,#20
 799              	.LCFI33:
 800              	 .cfi_def_cfa_offset 20
 801 0386 BD46     	 mov sp,r7
 802              	.LCFI34:
 803              	 .cfi_def_cfa_register 13
 804              	 
 805 0388 F0BD     	 pop {r4,r5,r6,r7,pc}
 806              	.L48:
 807 038a 00BF     	 .align 2
 808              	.L47:
 809 038c 00000000 	 .word matrix
 810 0390 00000000 	 .word combination
 811              	 .cfi_endproc
 812              	.LFE133:
 814              	 .align 1
 815              	 .syntax unified
 816              	 .thumb
 817              	 .thumb_func
 818              	 .fpu softvfp
 820              	solver_clear_column:
 821              	.LFB134:
 153:Solver.c      **** // reduz a ordem da matriz, apos a resolucao de uma mensagem
 154:Solver.c      **** static void solver_clear_column(uint16_t row, uint16_t col)
 155:Solver.c      **** {
 822              	 .loc 1 155 0
 823              	 .cfi_startproc
 824              	 
 825              	 
 826 0394 90B5     	 push {r4,r7,lr}
 827              	.LCFI35:
 828              	 .cfi_def_cfa_offset 12
 829              	 .cfi_offset 4,-12
 830              	 .cfi_offset 7,-8
 831              	 .cfi_offset 14,-4
 832 0396 85B0     	 sub sp,sp,#20
 833              	.LCFI36:
 834              	 .cfi_def_cfa_offset 32
 835 0398 00AF     	 add r7,sp,#0
 836              	.LCFI37:
 837              	 .cfi_def_cfa_register 7
 838 039a 0346     	 mov r3,r0
 839 039c 0A46     	 mov r2,r1
 840 039e FB80     	 strh r3,[r7,#6]
 841 03a0 1346     	 mov r3,r2
 842 03a2 BB80     	 strh r3,[r7,#4]
 156:Solver.c      ****     uint16_t i;
 157:Solver.c      **** 
 158:Solver.c      ****     for (i = row + 1; i < n_equations; i++)
 843              	 .loc 1 158 0
 844 03a4 FB88     	 ldrh r3,[r7,#6]
 845 03a6 0133     	 adds r3,r3,#1
 846 03a8 FB81     	 strh r3,[r7,#14]
 847 03aa 2FE0     	 b .L50
 848              	.L52:
 159:Solver.c      **** 	{
 160:Solver.c      ****         if (matrix[i][col] > 0)
 849              	 .loc 1 160 0
 850 03ac FA89     	 ldrh r2,[r7,#14]
 851 03ae B988     	 ldrh r1,[r7,#4]
 852 03b0 1B48     	 ldr r0,.L53
 853 03b2 1346     	 mov r3,r2
 854 03b4 1B01     	 lsls r3,r3,#4
 855 03b6 9B1A     	 subs r3,r3,r2
 856 03b8 0344     	 add r3,r3,r0
 857 03ba 0B44     	 add r3,r3,r1
 858 03bc 1B78     	 ldrb r3,[r3]
 859 03be 002B     	 cmp r3,#0
 860 03c0 21D0     	 beq .L51
 161:Solver.c      **** 		{
 162:Solver.c      **** 			solver_combine_line(solver_mult(solver_inv(matrix[row][col]), matrix[i][col]), row, i);
 861              	 .loc 1 162 0
 862 03c2 FA88     	 ldrh r2,[r7,#6]
 863 03c4 B988     	 ldrh r1,[r7,#4]
 864 03c6 1648     	 ldr r0,.L53
 865 03c8 1346     	 mov r3,r2
 866 03ca 1B01     	 lsls r3,r3,#4
 867 03cc 9B1A     	 subs r3,r3,r2
 868 03ce 0344     	 add r3,r3,r0
 869 03d0 0B44     	 add r3,r3,r1
 870 03d2 1B78     	 ldrb r3,[r3]
 871 03d4 1846     	 mov r0,r3
 872 03d6 FFF786FE 	 bl solver_inv
 873 03da 0346     	 mov r3,r0
 874 03dc 1C46     	 mov r4,r3
 875 03de FA89     	 ldrh r2,[r7,#14]
 876 03e0 B988     	 ldrh r1,[r7,#4]
 877 03e2 0F48     	 ldr r0,.L53
 878 03e4 1346     	 mov r3,r2
 879 03e6 1B01     	 lsls r3,r3,#4
 880 03e8 9B1A     	 subs r3,r3,r2
 881 03ea 0344     	 add r3,r3,r0
 882 03ec 0B44     	 add r3,r3,r1
 883 03ee 1B78     	 ldrb r3,[r3]
 884 03f0 1946     	 mov r1,r3
 885 03f2 2046     	 mov r0,r4
 886 03f4 FFF72EFE 	 bl solver_mult
 887 03f8 0346     	 mov r3,r0
 888 03fa 1846     	 mov r0,r3
 889 03fc FA89     	 ldrh r2,[r7,#14]
 890 03fe FB88     	 ldrh r3,[r7,#6]
 891 0400 1946     	 mov r1,r3
 892 0402 FFF75FFF 	 bl solver_combine_line
 893              	.L51:
 158:Solver.c      **** 	{
 894              	 .loc 1 158 0 discriminator 2
 895 0406 FB89     	 ldrh r3,[r7,#14]
 896 0408 0133     	 adds r3,r3,#1
 897 040a FB81     	 strh r3,[r7,#14]
 898              	.L50:
 158:Solver.c      **** 	{
 899              	 .loc 1 158 0 is_stmt 0 discriminator 1
 900 040c 054B     	 ldr r3,.L53+4
 901 040e 1B78     	 ldrb r3,[r3]
 902 0410 9BB2     	 uxth r3,r3
 903 0412 FA89     	 ldrh r2,[r7,#14]
 904 0414 9A42     	 cmp r2,r3
 905 0416 C9D3     	 bcc .L52
 163:Solver.c      **** 		}
 164:Solver.c      **** 	}
 165:Solver.c      **** }
 906              	 .loc 1 165 0 is_stmt 1
 907 0418 00BF     	 nop
 908 041a 1437     	 adds r7,r7,#20
 909              	.LCFI38:
 910              	 .cfi_def_cfa_offset 12
 911 041c BD46     	 mov sp,r7
 912              	.LCFI39:
 913              	 .cfi_def_cfa_register 13
 914              	 
 915 041e 90BD     	 pop {r4,r7,pc}
 916              	.L54:
 917              	 .align 2
 918              	.L53:
 919 0420 00000000 	 .word matrix
 920 0424 00000000 	 .word n_equations
 921              	 .cfi_endproc
 922              	.LFE134:
 924              	 .align 1
 925              	 .global solver_solve_system
 926              	 .syntax unified
 927              	 .thumb
 928              	 .thumb_func
 929              	 .fpu softvfp
 931              	solver_solve_system:
 932              	.LFB135:
 166:Solver.c      **** //resolve o escalonamento
 167:Solver.c      **** int solver_solve_system(void)
 168:Solver.c      **** {
 933              	 .loc 1 168 0
 934              	 .cfi_startproc
 935              	 
 936              	 
 937 0428 B0B5     	 push {r4,r5,r7,lr}
 938              	.LCFI40:
 939              	 .cfi_def_cfa_offset 16
 940              	 .cfi_offset 4,-16
 941              	 .cfi_offset 5,-12
 942              	 .cfi_offset 7,-8
 943              	 .cfi_offset 14,-4
 944 042a 82B0     	 sub sp,sp,#8
 945              	.LCFI41:
 946              	 .cfi_def_cfa_offset 24
 947 042c 00AF     	 add r7,sp,#0
 948              	.LCFI42:
 949              	 .cfi_def_cfa_register 7
 169:Solver.c      **** 	if(n_colaborative == 0)
 950              	 .loc 1 169 0
 951 042e A14B     	 ldr r3,.L90
 952 0430 1B78     	 ldrb r3,[r3]
 953 0432 002B     	 cmp r3,#0
 954 0434 01D1     	 bne .L56
 170:Solver.c      **** 		return(0);
 955              	 .loc 1 170 0
 956 0436 0023     	 movs r3,#0
 957 0438 9CE1     	 b .L57
 958              	.L56:
 171:Solver.c      **** 		
 172:Solver.c      **** 	n_equations							= n_colaborative;
 959              	 .loc 1 172 0
 960 043a 9E4B     	 ldr r3,.L90
 961 043c 1A78     	 ldrb r2,[r3]
 962 043e 9E4B     	 ldr r3,.L90+4
 963 0440 1A70     	 strb r2,[r3]
 173:Solver.c      **** 
 174:Solver.c      ****     // buffer_msg = estrutura: linha: endereco do nodo,coluna: os bytes da msg.
 175:Solver.c      **** 
 176:Solver.c      **** 	int8_t i;
 177:Solver.c      ****     uint8_t j, k, notrec_mote, cont, row, sucesso;
 178:Solver.c      ****     //Define a listagem de vizinhanca (mensagens recebidas) de determinado nodo cooperante. É uma l
 179:Solver.c      ****     //o nodo recebeu a primeira mensagem da tranmissão seta o bit para 1, se não, seta para zero.
 180:Solver.c      **** 
 181:Solver.c      ****     //RETIRA DA MATRIZ OS ELEMENTOS JÁ CONHECIDOS
 182:Solver.c      **** 	//for (j = 0, row = 0; j < N_MOTES_MAX; j++) (NOS TESTES ESTA ASSIM, NO OMNET+ J==2)????
 183:Solver.c      ****     for (j = 0; j < N_MOTES_MAX; j++)
 964              	 .loc 1 183 0
 965 0442 0023     	 movs r3,#0
 966 0444 BB71     	 strb r3,[r7,#6]
 967 0446 5FE0     	 b .L58
 968              	.L65:
 184:Solver.c      ****     {
 185:Solver.c      ****         if (received[j] != SOLVER_MSG_NONE)
 969              	 .loc 1 185 0
 970 0448 BB79     	 ldrb r3,[r7,#6]
 971 044a 9C4A     	 ldr r2,.L90+8
 972 044c D35C     	 ldrb r3,[r2,r3]
 973 044e 002B     	 cmp r3,#0
 974 0450 57D0     	 beq .L59
 186:Solver.c      **** 		{
 187:Solver.c      ****             //EV << "[Conferencia] retirando elemento conhecido da matriz: " << j << endl;
 188:Solver.c      ****             for (i = 0; i < n_equations; i++)
 975              	 .loc 1 188 0
 976 0452 0023     	 movs r3,#0
 977 0454 FB71     	 strb r3,[r7,#7]
 978 0456 4EE0     	 b .L60
 979              	.L64:
 189:Solver.c      **** 			{
 190:Solver.c      ****                 if (matrix[i][j] > 0)
 980              	 .loc 1 190 0
 981 0458 97F90720 	 ldrsb r2,[r7,#7]
 982 045c B979     	 ldrb r1,[r7,#6]
 983 045e 9848     	 ldr r0,.L90+12
 984 0460 1346     	 mov r3,r2
 985 0462 1B01     	 lsls r3,r3,#4
 986 0464 9B1A     	 subs r3,r3,r2
 987 0466 0344     	 add r3,r3,r0
 988 0468 0B44     	 add r3,r3,r1
 989 046a 1B78     	 ldrb r3,[r3]
 990 046c 002B     	 cmp r3,#0
 991 046e 3CD0     	 beq .L61
 191:Solver.c      ****                 {
 192:Solver.c      ****                     for (k = 0; k < MSG_SIZE_MAX; k++)
 992              	 .loc 1 192 0
 993 0470 0023     	 movs r3,#0
 994 0472 7B71     	 strb r3,[r7,#5]
 995 0474 2BE0     	 b .L62
 996              	.L63:
 193:Solver.c      **** 					{
 194:Solver.c      ****                         combination[i][k]	^= solver_mult(matrix[i][j], buffer_msg[j][k]); //matrix[
 997              	 .loc 1 194 0 discriminator 3
 998 0476 97F90720 	 ldrsb r2,[r7,#7]
 999 047a B979     	 ldrb r1,[r7,#6]
 1000 047c 9048     	 ldr r0,.L90+12
 1001 047e 1346     	 mov r3,r2
 1002 0480 1B01     	 lsls r3,r3,#4
 1003 0482 9B1A     	 subs r3,r3,r2
 1004 0484 0344     	 add r3,r3,r0
 1005 0486 0B44     	 add r3,r3,r1
 1006 0488 1878     	 ldrb r0,[r3]
 1007 048a BA79     	 ldrb r2,[r7,#6]
 1008 048c 7B79     	 ldrb r3,[r7,#5]
 1009 048e 8D49     	 ldr r1,.L90+16
 1010 0490 9201     	 lsls r2,r2,#6
 1011 0492 0A44     	 add r2,r2,r1
 1012 0494 1344     	 add r3,r3,r2
 1013 0496 1B78     	 ldrb r3,[r3]
 1014 0498 1946     	 mov r1,r3
 1015 049a FFF7DBFD 	 bl solver_mult
 1016 049e 0346     	 mov r3,r0
 1017 04a0 1D46     	 mov r5,r3
 1018 04a2 97F90720 	 ldrsb r2,[r7,#7]
 1019 04a6 7B79     	 ldrb r3,[r7,#5]
 1020 04a8 97F90700 	 ldrsb r0,[r7,#7]
 1021 04ac 7979     	 ldrb r1,[r7,#5]
 1022 04ae 864C     	 ldr r4,.L90+20
 1023 04b0 8001     	 lsls r0,r0,#6
 1024 04b2 2044     	 add r0,r0,r4
 1025 04b4 0144     	 add r1,r1,r0
 1026 04b6 0978     	 ldrb r1,[r1]
 1027 04b8 6940     	 eors r1,r1,r5
 1028 04ba C8B2     	 uxtb r0,r1
 1029 04bc 8249     	 ldr r1,.L90+20
 1030 04be 9201     	 lsls r2,r2,#6
 1031 04c0 0A44     	 add r2,r2,r1
 1032 04c2 1344     	 add r3,r3,r2
 1033 04c4 0246     	 mov r2,r0
 1034 04c6 1A70     	 strb r2,[r3]
 192:Solver.c      **** 					{
 1035              	 .loc 1 192 0 discriminator 3
 1036 04c8 7B79     	 ldrb r3,[r7,#5]
 1037 04ca 0133     	 adds r3,r3,#1
 1038 04cc 7B71     	 strb r3,[r7,#5]
 1039              	.L62:
 192:Solver.c      **** 					{
 1040              	 .loc 1 192 0 is_stmt 0 discriminator 1
 1041 04ce 7B79     	 ldrb r3,[r7,#5]
 1042 04d0 3F2B     	 cmp r3,#63
 1043 04d2 D0D9     	 bls .L63
 195:Solver.c      **** 					}
 196:Solver.c      ****                     matrix[i][j] = 0;
 1044              	 .loc 1 196 0 is_stmt 1
 1045 04d4 97F90720 	 ldrsb r2,[r7,#7]
 1046 04d8 B979     	 ldrb r1,[r7,#6]
 1047 04da 7948     	 ldr r0,.L90+12
 1048 04dc 1346     	 mov r3,r2
 1049 04de 1B01     	 lsls r3,r3,#4
 1050 04e0 9B1A     	 subs r3,r3,r2
 1051 04e2 0344     	 add r3,r3,r0
 1052 04e4 0B44     	 add r3,r3,r1
 1053 04e6 0022     	 movs r2,#0
 1054 04e8 1A70     	 strb r2,[r3]
 1055              	.L61:
 188:Solver.c      **** 			{
 1056              	 .loc 1 188 0 discriminator 2
 1057 04ea 97F90730 	 ldrsb r3,[r7,#7]
 1058 04ee DBB2     	 uxtb r3,r3
 1059 04f0 0133     	 adds r3,r3,#1
 1060 04f2 DBB2     	 uxtb r3,r3
 1061 04f4 FB71     	 strb r3,[r7,#7]
 1062              	.L60:
 188:Solver.c      **** 			{
 1063              	 .loc 1 188 0 is_stmt 0 discriminator 1
 1064 04f6 97F90730 	 ldrsb r3,[r7,#7]
 1065 04fa 6F4A     	 ldr r2,.L90+4
 1066 04fc 1278     	 ldrb r2,[r2]
 1067 04fe 9342     	 cmp r3,r2
 1068 0500 AADB     	 blt .L64
 1069              	.L59:
 183:Solver.c      ****     {
 1070              	 .loc 1 183 0 is_stmt 1 discriminator 2
 1071 0502 BB79     	 ldrb r3,[r7,#6]
 1072 0504 0133     	 adds r3,r3,#1
 1073 0506 BB71     	 strb r3,[r7,#6]
 1074              	.L58:
 183:Solver.c      ****     {
 1075              	 .loc 1 183 0 is_stmt 0 discriminator 1
 1076 0508 BB79     	 ldrb r3,[r7,#6]
 1077 050a 0E2B     	 cmp r3,#14
 1078 050c 9CD9     	 bls .L65
 197:Solver.c      ****                 }
 198:Solver.c      **** 			}
 199:Solver.c      ****         }
 200:Solver.c      ****     }
 201:Solver.c      **** 
 202:Solver.c      ****     //FAZ O ESCALONAMENTO DA MATRIZ
 203:Solver.c      **** 	//for (j = 0, row = 0; j < N_MOTES_MAX; j++) (NOS TESTES ESTA ASSIM, NO OMNET+ J==2)????
 204:Solver.c      ****     for (j = 0, row = 0; j < N_MOTES_MAX; j++)
 1079              	 .loc 1 204 0 is_stmt 1
 1080 050e 0023     	 movs r3,#0
 1081 0510 BB71     	 strb r3,[r7,#6]
 1082 0512 0023     	 movs r3,#0
 1083 0514 BB70     	 strb r3,[r7,#2]
 1084 0516 4CE0     	 b .L66
 1085              	.L72:
 205:Solver.c      ****     {
 206:Solver.c      ****         i								= row;
 1086              	 .loc 1 206 0
 1087 0518 BB78     	 ldrb r3,[r7,#2]
 1088 051a FB71     	 strb r3,[r7,#7]
 207:Solver.c      ****         if (matrix[i][j] > 0)
 1089              	 .loc 1 207 0
 1090 051c 97F90720 	 ldrsb r2,[r7,#7]
 1091 0520 B979     	 ldrb r1,[r7,#6]
 1092 0522 6748     	 ldr r0,.L90+12
 1093 0524 1346     	 mov r3,r2
 1094 0526 1B01     	 lsls r3,r3,#4
 1095 0528 9B1A     	 subs r3,r3,r2
 1096 052a 0344     	 add r3,r3,r0
 1097 052c 0B44     	 add r3,r3,r1
 1098 052e 1B78     	 ldrb r3,[r3]
 1099 0530 002B     	 cmp r3,#0
 1100 0532 0BD0     	 beq .L67
 208:Solver.c      ****         {
 209:Solver.c      ****             solver_clear_column(row, j);
 1101              	 .loc 1 209 0
 1102 0534 BB78     	 ldrb r3,[r7,#2]
 1103 0536 9BB2     	 uxth r3,r3
 1104 0538 BA79     	 ldrb r2,[r7,#6]
 1105 053a 92B2     	 uxth r2,r2
 1106 053c 1146     	 mov r1,r2
 1107 053e 1846     	 mov r0,r3
 1108 0540 FFF728FF 	 bl solver_clear_column
 210:Solver.c      ****             ++row;
 1109              	 .loc 1 210 0
 1110 0544 BB78     	 ldrb r3,[r7,#2]
 1111 0546 0133     	 adds r3,r3,#1
 1112 0548 BB70     	 strb r3,[r7,#2]
 1113 054a 2FE0     	 b .L68
 1114              	.L67:
 211:Solver.c      ****         }
 212:Solver.c      ****         else
 213:Solver.c      ****         {
 214:Solver.c      ****             for (++i; i < n_equations; ++i)
 1115              	 .loc 1 214 0
 1116 054c FB79     	 ldrb r3,[r7,#7]
 1117 054e 0133     	 adds r3,r3,#1
 1118 0550 DBB2     	 uxtb r3,r3
 1119 0552 FB71     	 strb r3,[r7,#7]
 1120 0554 24E0     	 b .L69
 1121              	.L71:
 215:Solver.c      **** 			{
 216:Solver.c      ****                 if (matrix[i][j] > 0)
 1122              	 .loc 1 216 0
 1123 0556 97F90720 	 ldrsb r2,[r7,#7]
 1124 055a B979     	 ldrb r1,[r7,#6]
 1125 055c 5848     	 ldr r0,.L90+12
 1126 055e 1346     	 mov r3,r2
 1127 0560 1B01     	 lsls r3,r3,#4
 1128 0562 9B1A     	 subs r3,r3,r2
 1129 0564 0344     	 add r3,r3,r0
 1130 0566 0B44     	 add r3,r3,r1
 1131 0568 1B78     	 ldrb r3,[r3]
 1132 056a 002B     	 cmp r3,#0
 1133 056c 14D0     	 beq .L70
 217:Solver.c      ****                 {
 218:Solver.c      ****                     solver_swap_line(row, i);
 1134              	 .loc 1 218 0
 1135 056e BB78     	 ldrb r3,[r7,#2]
 1136 0570 9BB2     	 uxth r3,r3
 1137 0572 97F90720 	 ldrsb r2,[r7,#7]
 1138 0576 92B2     	 uxth r2,r2
 1139 0578 1146     	 mov r1,r2
 1140 057a 1846     	 mov r0,r3
 1141 057c FFF735FE 	 bl solver_swap_line
 219:Solver.c      ****                     solver_clear_column(row, j);
 1142              	 .loc 1 219 0
 1143 0580 BB78     	 ldrb r3,[r7,#2]
 1144 0582 9BB2     	 uxth r3,r3
 1145 0584 BA79     	 ldrb r2,[r7,#6]
 1146 0586 92B2     	 uxth r2,r2
 1147 0588 1146     	 mov r1,r2
 1148 058a 1846     	 mov r0,r3
 1149 058c FFF702FF 	 bl solver_clear_column
 220:Solver.c      ****                     
 221:Solver.c      **** 					++row;
 1150              	 .loc 1 221 0
 1151 0590 BB78     	 ldrb r3,[r7,#2]
 1152 0592 0133     	 adds r3,r3,#1
 1153 0594 BB70     	 strb r3,[r7,#2]
 222:Solver.c      ****                     break;
 1154              	 .loc 1 222 0
 1155 0596 09E0     	 b .L68
 1156              	.L70:
 214:Solver.c      **** 			{
 1157              	 .loc 1 214 0 discriminator 2
 1158 0598 FB79     	 ldrb r3,[r7,#7]
 1159 059a 0133     	 adds r3,r3,#1
 1160 059c DBB2     	 uxtb r3,r3
 1161 059e FB71     	 strb r3,[r7,#7]
 1162              	.L69:
 214:Solver.c      **** 			{
 1163              	 .loc 1 214 0 is_stmt 0 discriminator 1
 1164 05a0 97F90730 	 ldrsb r3,[r7,#7]
 1165 05a4 444A     	 ldr r2,.L90+4
 1166 05a6 1278     	 ldrb r2,[r2]
 1167 05a8 9342     	 cmp r3,r2
 1168 05aa D4DB     	 blt .L71
 1169              	.L68:
 204:Solver.c      ****     {
 1170              	 .loc 1 204 0 is_stmt 1 discriminator 2
 1171 05ac BB79     	 ldrb r3,[r7,#6]
 1172 05ae 0133     	 adds r3,r3,#1
 1173 05b0 BB71     	 strb r3,[r7,#6]
 1174              	.L66:
 204:Solver.c      ****     {
 1175              	 .loc 1 204 0 is_stmt 0 discriminator 1
 1176 05b2 BB79     	 ldrb r3,[r7,#6]
 1177 05b4 0E2B     	 cmp r3,#14
 1178 05b6 AFD9     	 bls .L72
 223:Solver.c      ****                 }
 224:Solver.c      **** 			}
 225:Solver.c      ****         }
 226:Solver.c      ****     }
 227:Solver.c      **** 	
 228:Solver.c      ****     //ENCONTRA AS INCÓGNITAS POSSÍVEIS DE DECIFRAR
 229:Solver.c      **** 	sucesso = 0;
 1179              	 .loc 1 229 0 is_stmt 1
 1180 05b8 0023     	 movs r3,#0
 1181 05ba 7B70     	 strb r3,[r7,#1]
 230:Solver.c      ****     for (i = n_equations - 1; i >= 0; i--)
 1182              	 .loc 1 230 0
 1183 05bc 3E4B     	 ldr r3,.L90+4
 1184 05be 1B78     	 ldrb r3,[r3]
 1185 05c0 013B     	 subs r3,r3,#1
 1186 05c2 DBB2     	 uxtb r3,r3
 1187 05c4 FB71     	 strb r3,[r7,#7]
 1188 05c6 CDE0     	 b .L73
 1189              	.L88:
 231:Solver.c      ****     {
 232:Solver.c      ****         cont = 0;
 1190              	 .loc 1 232 0
 1191 05c8 0023     	 movs r3,#0
 1192 05ca FB70     	 strb r3,[r7,#3]
 233:Solver.c      **** 		//for (j = 0; j < N_MESSAGES; j++) (TESTES, OMNET++ j ==2?????)
 234:Solver.c      ****         for (j = 0; j < N_MOTES_MAX; j++)
 1193              	 .loc 1 234 0
 1194 05cc 0023     	 movs r3,#0
 1195 05ce BB71     	 strb r3,[r7,#6]
 1196 05d0 13E0     	 b .L74
 1197              	.L76:
 235:Solver.c      **** 		{
 236:Solver.c      ****             if (matrix[i][j] > 0)
 1198              	 .loc 1 236 0
 1199 05d2 97F90720 	 ldrsb r2,[r7,#7]
 1200 05d6 B979     	 ldrb r1,[r7,#6]
 1201 05d8 3948     	 ldr r0,.L90+12
 1202 05da 1346     	 mov r3,r2
 1203 05dc 1B01     	 lsls r3,r3,#4
 1204 05de 9B1A     	 subs r3,r3,r2
 1205 05e0 0344     	 add r3,r3,r0
 1206 05e2 0B44     	 add r3,r3,r1
 1207 05e4 1B78     	 ldrb r3,[r3]
 1208 05e6 002B     	 cmp r3,#0
 1209 05e8 04D0     	 beq .L75
 237:Solver.c      ****             {
 238:Solver.c      ****                 cont++;
 1210              	 .loc 1 238 0
 1211 05ea FB78     	 ldrb r3,[r7,#3]
 1212 05ec 0133     	 adds r3,r3,#1
 1213 05ee FB70     	 strb r3,[r7,#3]
 239:Solver.c      ****                 notrec_mote = j;
 1214              	 .loc 1 239 0
 1215 05f0 BB79     	 ldrb r3,[r7,#6]
 1216 05f2 3B71     	 strb r3,[r7,#4]
 1217              	.L75:
 234:Solver.c      **** 		{
 1218              	 .loc 1 234 0 discriminator 2
 1219 05f4 BB79     	 ldrb r3,[r7,#6]
 1220 05f6 0133     	 adds r3,r3,#1
 1221 05f8 BB71     	 strb r3,[r7,#6]
 1222              	.L74:
 234:Solver.c      **** 		{
 1223              	 .loc 1 234 0 is_stmt 0 discriminator 1
 1224 05fa BB79     	 ldrb r3,[r7,#6]
 1225 05fc 0E2B     	 cmp r3,#14
 1226 05fe E8D9     	 bls .L76
 240:Solver.c      ****             }
 241:Solver.c      **** 		}
 242:Solver.c      **** 
 243:Solver.c      ****         if (cont == 0)
 1227              	 .loc 1 243 0 is_stmt 1
 1228 0600 FB78     	 ldrb r3,[r7,#3]
 1229 0602 002B     	 cmp r3,#0
 1230 0604 06D1     	 bne .L77
 244:Solver.c      **** 		{
 245:Solver.c      **** 			n_equations--;
 1231              	 .loc 1 245 0
 1232 0606 2C4B     	 ldr r3,.L90+4
 1233 0608 1B78     	 ldrb r3,[r3]
 1234 060a 013B     	 subs r3,r3,#1
 1235 060c DAB2     	 uxtb r2,r3
 1236 060e 2A4B     	 ldr r3,.L90+4
 1237 0610 1A70     	 strb r2,[r3]
 1238 0612 A1E0     	 b .L78
 1239              	.L77:
 246:Solver.c      **** 		}
 247:Solver.c      ****         else if (cont == 1)         //RESOLVE A INCÓGNITA ENCONTRADA
 1240              	 .loc 1 247 0
 1241 0614 FB78     	 ldrb r3,[r7,#3]
 1242 0616 012B     	 cmp r3,#1
 1243 0618 40F0AA80 	 bne .L89
 248:Solver.c      ****         {
 249:Solver.c      ****             for (k = 0; k < MSG_SIZE_MAX; k++)
 1244              	 .loc 1 249 0
 1245 061c 0023     	 movs r3,#0
 1246 061e 7B71     	 strb r3,[r7,#5]
 1247 0620 26E0     	 b .L80
 1248              	.L81:
 250:Solver.c      **** 			{
 251:Solver.c      **** 				buffer_msg[notrec_mote][k] = solver_mult(solver_inv(matrix[i][notrec_mote]), combination[i][k])
 1249              	 .loc 1 251 0 discriminator 3
 1250 0622 3D79     	 ldrb r5,[r7,#4]
 1251 0624 7C79     	 ldrb r4,[r7,#5]
 1252 0626 97F90720 	 ldrsb r2,[r7,#7]
 1253 062a 3979     	 ldrb r1,[r7,#4]
 1254 062c 2448     	 ldr r0,.L90+12
 1255 062e 1346     	 mov r3,r2
 1256 0630 1B01     	 lsls r3,r3,#4
 1257 0632 9B1A     	 subs r3,r3,r2
 1258 0634 0344     	 add r3,r3,r0
 1259 0636 0B44     	 add r3,r3,r1
 1260 0638 1B78     	 ldrb r3,[r3]
 1261 063a 1846     	 mov r0,r3
 1262 063c FFF753FD 	 bl solver_inv
 1263 0640 0346     	 mov r3,r0
 1264 0642 1846     	 mov r0,r3
 1265 0644 97F90720 	 ldrsb r2,[r7,#7]
 1266 0648 7B79     	 ldrb r3,[r7,#5]
 1267 064a 1F49     	 ldr r1,.L90+20
 1268 064c 9201     	 lsls r2,r2,#6
 1269 064e 0A44     	 add r2,r2,r1
 1270 0650 1344     	 add r3,r3,r2
 1271 0652 1B78     	 ldrb r3,[r3]
 1272 0654 1946     	 mov r1,r3
 1273 0656 FFF7FDFC 	 bl solver_mult
 1274 065a 0346     	 mov r3,r0
 1275 065c 1946     	 mov r1,r3
 1276 065e 194A     	 ldr r2,.L90+16
 1277 0660 AB01     	 lsls r3,r5,#6
 1278 0662 1344     	 add r3,r3,r2
 1279 0664 2344     	 add r3,r3,r4
 1280 0666 0A46     	 mov r2,r1
 1281 0668 1A70     	 strb r2,[r3]
 249:Solver.c      **** 			{
 1282              	 .loc 1 249 0 discriminator 3
 1283 066a 7B79     	 ldrb r3,[r7,#5]
 1284 066c 0133     	 adds r3,r3,#1
 1285 066e 7B71     	 strb r3,[r7,#5]
 1286              	.L80:
 249:Solver.c      **** 			{
 1287              	 .loc 1 249 0 is_stmt 0 discriminator 1
 1288 0670 7B79     	 ldrb r3,[r7,#5]
 1289 0672 3F2B     	 cmp r3,#63
 1290 0674 D5D9     	 bls .L81
 252:Solver.c      **** 			}
 253:Solver.c      **** 			
 254:Solver.c      ****             //EV << "[Conferencia] mensagem decodificada : " << notrec_mote << endl;
 255:Solver.c      ****             received[notrec_mote] = SOLVER_MSG_DECODED;
 1291              	 .loc 1 255 0 is_stmt 1
 1292 0676 3B79     	 ldrb r3,[r7,#4]
 1293 0678 104A     	 ldr r2,.L90+8
 1294 067a 0221     	 movs r1,#2
 1295 067c D154     	 strb r1,[r2,r3]
 256:Solver.c      ****             --n_equations;
 1296              	 .loc 1 256 0
 1297 067e 0E4B     	 ldr r3,.L90+4
 1298 0680 1B78     	 ldrb r3,[r3]
 1299 0682 013B     	 subs r3,r3,#1
 1300 0684 DAB2     	 uxtb r2,r3
 1301 0686 0C4B     	 ldr r3,.L90+4
 1302 0688 1A70     	 strb r2,[r3]
 257:Solver.c      ****             ++sucesso;  // Aqui deve-se contabilizar o sucesso na decodificacao das MSG.
 1303              	 .loc 1 257 0
 1304 068a 7B78     	 ldrb r3,[r7,#1]
 1305 068c 0133     	 adds r3,r3,#1
 1306 068e 7B70     	 strb r3,[r7,#1]
 258:Solver.c      **** 
 259:Solver.c      ****             for (i = 0; i < n_equations; i++)
 1307              	 .loc 1 259 0
 1308 0690 0023     	 movs r3,#0
 1309 0692 FB71     	 strb r3,[r7,#7]
 1310 0694 5AE0     	 b .L82
 1311              	.L86:
 260:Solver.c      **** 			{
 261:Solver.c      ****                 if (matrix[i][notrec_mote] > 0)
 1312              	 .loc 1 261 0
 1313 0696 97F90720 	 ldrsb r2,[r7,#7]
 1314 069a 3979     	 ldrb r1,[r7,#4]
 1315 069c 0848     	 ldr r0,.L90+12
 1316 069e 1346     	 mov r3,r2
 1317 06a0 1B01     	 lsls r3,r3,#4
 1318 06a2 9B1A     	 subs r3,r3,r2
 1319 06a4 0344     	 add r3,r3,r0
 1320 06a6 0B44     	 add r3,r3,r1
 1321 06a8 1B78     	 ldrb r3,[r3]
 1322 06aa 002B     	 cmp r3,#0
 1323 06ac 48D0     	 beq .L83
 262:Solver.c      ****                 {
 263:Solver.c      ****                     for (k = 0; k < MSG_SIZE_MAX; k++)
 1324              	 .loc 1 263 0
 1325 06ae 0023     	 movs r3,#0
 1326 06b0 7B71     	 strb r3,[r7,#5]
 1327 06b2 37E0     	 b .L84
 1328              	.L91:
 1329              	 .align 2
 1330              	.L90:
 1331 06b4 00000000 	 .word n_colaborative
 1332 06b8 00000000 	 .word n_equations
 1333 06bc 00000000 	 .word received
 1334 06c0 00000000 	 .word matrix
 1335 06c4 00000000 	 .word buffer_msg
 1336 06c8 00000000 	 .word combination
 1337              	.L85:
 264:Solver.c      **** 					{
 265:Solver.c      **** 						combination[i][k] ^= solver_mult(matrix[i][notrec_mote], buffer_msg[notrec_mote][k]);
 1338              	 .loc 1 265 0 discriminator 3
 1339 06cc 97F90720 	 ldrsb r2,[r7,#7]
 1340 06d0 3979     	 ldrb r1,[r7,#4]
 1341 06d2 2A48     	 ldr r0,.L92
 1342 06d4 1346     	 mov r3,r2
 1343 06d6 1B01     	 lsls r3,r3,#4
 1344 06d8 9B1A     	 subs r3,r3,r2
 1345 06da 0344     	 add r3,r3,r0
 1346 06dc 0B44     	 add r3,r3,r1
 1347 06de 1878     	 ldrb r0,[r3]
 1348 06e0 3A79     	 ldrb r2,[r7,#4]
 1349 06e2 7B79     	 ldrb r3,[r7,#5]
 1350 06e4 2649     	 ldr r1,.L92+4
 1351 06e6 9201     	 lsls r2,r2,#6
 1352 06e8 0A44     	 add r2,r2,r1
 1353 06ea 1344     	 add r3,r3,r2
 1354 06ec 1B78     	 ldrb r3,[r3]
 1355 06ee 1946     	 mov r1,r3
 1356 06f0 FFF7B0FC 	 bl solver_mult
 1357 06f4 0346     	 mov r3,r0
 1358 06f6 1D46     	 mov r5,r3
 1359 06f8 97F90720 	 ldrsb r2,[r7,#7]
 1360 06fc 7B79     	 ldrb r3,[r7,#5]
 1361 06fe 97F90700 	 ldrsb r0,[r7,#7]
 1362 0702 7979     	 ldrb r1,[r7,#5]
 1363 0704 1F4C     	 ldr r4,.L92+8
 1364 0706 8001     	 lsls r0,r0,#6
 1365 0708 2044     	 add r0,r0,r4
 1366 070a 0144     	 add r1,r1,r0
 1367 070c 0978     	 ldrb r1,[r1]
 1368 070e 6940     	 eors r1,r1,r5
 1369 0710 C8B2     	 uxtb r0,r1
 1370 0712 1C49     	 ldr r1,.L92+8
 1371 0714 9201     	 lsls r2,r2,#6
 1372 0716 0A44     	 add r2,r2,r1
 1373 0718 1344     	 add r3,r3,r2
 1374 071a 0246     	 mov r2,r0
 1375 071c 1A70     	 strb r2,[r3]
 263:Solver.c      **** 					{
 1376              	 .loc 1 263 0 discriminator 3
 1377 071e 7B79     	 ldrb r3,[r7,#5]
 1378 0720 0133     	 adds r3,r3,#1
 1379 0722 7B71     	 strb r3,[r7,#5]
 1380              	.L84:
 263:Solver.c      **** 					{
 1381              	 .loc 1 263 0 is_stmt 0 discriminator 1
 1382 0724 7B79     	 ldrb r3,[r7,#5]
 1383 0726 3F2B     	 cmp r3,#63
 1384 0728 D0D9     	 bls .L85
 266:Solver.c      **** 					}
 267:Solver.c      **** 					
 268:Solver.c      ****                     matrix[i][notrec_mote] = 0;
 1385              	 .loc 1 268 0 is_stmt 1
 1386 072a 97F90720 	 ldrsb r2,[r7,#7]
 1387 072e 3979     	 ldrb r1,[r7,#4]
 1388 0730 1248     	 ldr r0,.L92
 1389 0732 1346     	 mov r3,r2
 1390 0734 1B01     	 lsls r3,r3,#4
 1391 0736 9B1A     	 subs r3,r3,r2
 1392 0738 0344     	 add r3,r3,r0
 1393 073a 0B44     	 add r3,r3,r1
 1394 073c 0022     	 movs r2,#0
 1395 073e 1A70     	 strb r2,[r3]
 1396              	.L83:
 259:Solver.c      **** 			{
 1397              	 .loc 1 259 0 discriminator 2
 1398 0740 97F90730 	 ldrsb r3,[r7,#7]
 1399 0744 DBB2     	 uxtb r3,r3
 1400 0746 0133     	 adds r3,r3,#1
 1401 0748 DBB2     	 uxtb r3,r3
 1402 074a FB71     	 strb r3,[r7,#7]
 1403              	.L82:
 259:Solver.c      **** 			{
 1404              	 .loc 1 259 0 is_stmt 0 discriminator 1
 1405 074c 97F90730 	 ldrsb r3,[r7,#7]
 1406 0750 0D4A     	 ldr r2,.L92+12
 1407 0752 1278     	 ldrb r2,[r2]
 1408 0754 9342     	 cmp r3,r2
 1409 0756 9EDB     	 blt .L86
 1410              	.L78:
 230:Solver.c      ****     {
 1411              	 .loc 1 230 0 is_stmt 1 discriminator 2
 1412 0758 97F90730 	 ldrsb r3,[r7,#7]
 1413 075c DBB2     	 uxtb r3,r3
 1414 075e 013B     	 subs r3,r3,#1
 1415 0760 DBB2     	 uxtb r3,r3
 1416 0762 FB71     	 strb r3,[r7,#7]
 1417              	.L73:
 230:Solver.c      ****     {
 1418              	 .loc 1 230 0 is_stmt 0 discriminator 1
 1419 0764 97F90730 	 ldrsb r3,[r7,#7]
 1420 0768 002B     	 cmp r3,#0
 1421 076a BFF62DAF 	 bge .L88
 1422 076e 00E0     	 b .L87
 1423              	.L89:
 269:Solver.c      ****                 }
 270:Solver.c      **** 			}
 271:Solver.c      ****         }
 272:Solver.c      ****         else
 273:Solver.c      **** 		{
 274:Solver.c      **** 			break;
 1424              	 .loc 1 274 0 is_stmt 1
 1425 0770 00BF     	 nop
 1426              	.L87:
 275:Solver.c      **** 		}
 276:Solver.c      ****     }
 277:Solver.c      **** 
 278:Solver.c      ****     return sucesso;
 1427              	 .loc 1 278 0
 1428 0772 7B78     	 ldrb r3,[r7,#1]
 1429              	.L57:
 279:Solver.c      **** }
 1430              	 .loc 1 279 0
 1431 0774 1846     	 mov r0,r3
 1432 0776 0837     	 adds r7,r7,#8
 1433              	.LCFI43:
 1434              	 .cfi_def_cfa_offset 16
 1435 0778 BD46     	 mov sp,r7
 1436              	.LCFI44:
 1437              	 .cfi_def_cfa_register 13
 1438              	 
 1439 077a B0BD     	 pop {r4,r5,r7,pc}
 1440              	.L93:
 1441              	 .align 2
 1442              	.L92:
 1443 077c 00000000 	 .word matrix
 1444 0780 00000000 	 .word buffer_msg
 1445 0784 00000000 	 .word combination
 1446 0788 00000000 	 .word n_equations
 1447              	 .cfi_endproc
 1448              	.LFE135:
 1450              	 .align 1
 1451              	 .global solver_prepare_next_turn
 1452              	 .syntax unified
 1453              	 .thumb
 1454              	 .thumb_func
 1455              	 .fpu softvfp
 1457              	solver_prepare_next_turn:
 1458              	.LFB136:
 280:Solver.c      **** #else
 281:Solver.c      **** /****************************************************************************************
 282:Solver.c      ****                 CODIFICAÇÃO E ENVIO DE RETRANSMISSÃO
 283:Solver.c      **** ****************************************************************************************/
 284:Solver.c      **** //codifica, constroi e transmite mensagens
 285:Solver.c      **** void solver_encode_messages(AppMessageFrame_t* frame)
 286:Solver.c      **** {
 287:Solver.c      ****     // 1° para cada frame de algum vizinho recebido, codificar a msg byte a byte com a funcao mult.
 288:Solver.c      ****     // Os parametros sao posicao do nodo retransmissor na retransmissao + endereco do vizinho.
 289:Solver.c      ****     // Cada vizinho tera a sua msg codificada no formato de um vetor de byte.
 290:Solver.c      **** 	//
 291:Solver.c      ****     // 2° fazer o xor de todas as msgs codificadas.
 292:Solver.c      **** 
 293:Solver.c      **** 	memset(frame->collab.coefficients, 0x00, N_MOTES_MAX);
 294:Solver.c      **** 	memset(frame->collab.data_vector, 0x00, MSG_SIZE_MAX);
 295:Solver.c      **** 
 296:Solver.c      ****     uint8_t coef											= COEFICIENT_BASE + slotNumber;
 297:Solver.c      ****     for (int i = 0; i < N_MOTES_MAX; i++)
 298:Solver.c      ****     {
 299:Solver.c      **** 	    if (received[i] == SOLVER_MSG_RECEIVED)
 300:Solver.c      **** 	    {
 301:Solver.c      **** 			frame->collab.coefficients[i]					= coef;				// slotNumber == posição de retransmissão,
 302:Solver.c      **** 																				// i == Endereço do Nodo indexado a partir de zero (nodo_1 é 0)
 303:Solver.c      **** 			uint8_t byte;
 304:Solver.c      **** 			for(int j = 0; j < MSG_SIZE_MAX; j++)
 305:Solver.c      **** 			{
 306:Solver.c      **** 				// 1°
 307:Solver.c      **** 				byte										= solver_mult(frame->collab.coefficients[i], buffer_msg[i][j]);
 308:Solver.c      **** 
 309:Solver.c      **** 				// 2°
 310:Solver.c      **** 				frame->collab.data_vector[j]				^= byte;
 311:Solver.c      **** 			}
 312:Solver.c      **** 
 313:Solver.c      **** 			++coef;
 314:Solver.c      **** 		}
 315:Solver.c      ****     }
 316:Solver.c      **** }
 317:Solver.c      **** void solver_set_collab_device(uint8_t slot)
 318:Solver.c      **** {
 319:Solver.c      **** 	slotNumber					= slot;
 320:Solver.c      **** }
 321:Solver.c      **** #endif
 322:Solver.c      **** 
 323:Solver.c      **** /****************************************************************************************
 324:Solver.c      ****                 IMPLEMENTAÇÃO REAL COM NODOS
 325:Solver.c      **** ****************************************************************************************/
 326:Solver.c      **** void solver_prepare_next_turn(void)
 327:Solver.c      **** {
 1459              	 .loc 1 327 0
 1460              	 .cfi_startproc
 1461              	 
 1462              	 
 1463 078c 80B5     	 push {r7,lr}
 1464              	.LCFI45:
 1465              	 .cfi_def_cfa_offset 8
 1466              	 .cfi_offset 7,-8
 1467              	 .cfi_offset 14,-4
 1468 078e 00AF     	 add r7,sp,#0
 1469              	.LCFI46:
 1470              	 .cfi_def_cfa_register 7
 328:Solver.c      **** 	n_colaborative				= 0;
 1471              	 .loc 1 328 0
 1472 0790 0D4B     	 ldr r3,.L95
 1473 0792 0022     	 movs r2,#0
 1474 0794 1A70     	 strb r2,[r3]
 329:Solver.c      **** 	n_equations					= 0;
 1475              	 .loc 1 329 0
 1476 0796 0D4B     	 ldr r3,.L95+4
 1477 0798 0022     	 movs r2,#0
 1478 079a 1A70     	 strb r2,[r3]
 330:Solver.c      **** 	n_received					= 0;
 1479              	 .loc 1 330 0
 1480 079c 0C4B     	 ldr r3,.L95+8
 1481 079e 0022     	 movs r2,#0
 1482 07a0 1A70     	 strb r2,[r3]
 331:Solver.c      **** 
 332:Solver.c      **** 	memset(received, SOLVER_MSG_NONE, sizeof(received));
 1483              	 .loc 1 332 0
 1484 07a2 0F22     	 movs r2,#15
 1485 07a4 0021     	 movs r1,#0
 1486 07a6 0B48     	 ldr r0,.L95+12
 1487 07a8 0B4B     	 ldr r3,.L95+16
 1488 07aa 9847     	 blx r3
 1489              	.LVL0:
 333:Solver.c      **** 	memset(matrix, 0x00, sizeof(matrix));
 1490              	 .loc 1 333 0
 1491 07ac E122     	 movs r2,#225
 1492 07ae 0021     	 movs r1,#0
 1493 07b0 0A48     	 ldr r0,.L95+20
 1494 07b2 094B     	 ldr r3,.L95+16
 1495 07b4 9847     	 blx r3
 1496              	.LVL1:
 334:Solver.c      **** 	memset(combination, 0x00, sizeof(combination));
 1497              	 .loc 1 334 0
 1498 07b6 4FF47072 	 mov r2,#960
 1499 07ba 0021     	 movs r1,#0
 1500 07bc 0848     	 ldr r0,.L95+24
 1501 07be 064B     	 ldr r3,.L95+16
 1502 07c0 9847     	 blx r3
 1503              	.LVL2:
 335:Solver.c      **** }
 1504              	 .loc 1 335 0
 1505 07c2 00BF     	 nop
 1506 07c4 80BD     	 pop {r7,pc}
 1507              	.L96:
 1508 07c6 00BF     	 .align 2
 1509              	.L95:
 1510 07c8 00000000 	 .word n_colaborative
 1511 07cc 00000000 	 .word n_equations
 1512 07d0 00000000 	 .word n_received
 1513 07d4 00000000 	 .word received
 1514 07d8 00000000 	 .word memset
 1515 07dc 00000000 	 .word matrix
 1516 07e0 00000000 	 .word combination
 1517              	 .cfi_endproc
 1518              	.LFE136:
 1520              	 .align 1
 1521              	 .global solver_received_data_frame
 1522              	 .syntax unified
 1523              	 .thumb
 1524              	 .thumb_func
 1525              	 .fpu softvfp
 1527              	solver_received_data_frame:
 1528              	.LFB137:
 336:Solver.c      **** 
 337:Solver.c      **** /*
 338:Solver.c      ****  * Para cada frame recebido, deve-se copiar os dados em buffer_msg e sinalizar em received
 339:Solver.c      ****  * qual o endereço do nodos que enviou os dados. Endereços são:
 340:Solver.c      ****  *	0 - Coordenador
 341:Solver.c      ****  *	1~N - Nodos
 342:Solver.c      ****  */
 343:Solver.c      **** void solver_received_data_frame(NWK_DataInd_t *ind)
 344:Solver.c      **** {
 1529              	 .loc 1 344 0
 1530              	 .cfi_startproc
 1531              	 
 1532              	 
 1533 07e4 80B5     	 push {r7,lr}
 1534              	.LCFI47:
 1535              	 .cfi_def_cfa_offset 8
 1536              	 .cfi_offset 7,-8
 1537              	 .cfi_offset 14,-4
 1538 07e6 84B0     	 sub sp,sp,#16
 1539              	.LCFI48:
 1540              	 .cfi_def_cfa_offset 24
 1541 07e8 00AF     	 add r7,sp,#0
 1542              	.LCFI49:
 1543              	 .cfi_def_cfa_register 7
 1544 07ea 7860     	 str r0,[r7,#4]
 345:Solver.c      **** 	// Sanity check!
 346:Solver.c      **** 	if(ind->srcAddr == 0 || ind->srcAddr >= N_MOTES_MAX)
 1545              	 .loc 1 346 0
 1546 07ec 7B68     	 ldr r3,[r7,#4]
 1547 07ee 1B88     	 ldrh r3,[r3]
 1548 07f0 002B     	 cmp r3,#0
 1549 07f2 47D0     	 beq .L102
 1550              	 .loc 1 346 0 is_stmt 0 discriminator 1
 1551 07f4 7B68     	 ldr r3,[r7,#4]
 1552 07f6 1B88     	 ldrh r3,[r3]
 1553 07f8 0E2B     	 cmp r3,#14
 1554 07fa 43D8     	 bhi .L102
 347:Solver.c      **** 		return;
 348:Solver.c      **** 
 349:Solver.c      **** 	AppMessageFrame_t*	frame_struct	= (AppMessageFrame_t*) ind->data;
 1555              	 .loc 1 349 0 is_stmt 1
 1556 07fc 7B68     	 ldr r3,[r7,#4]
 1557 07fe 9B68     	 ldr r3,[r3,#8]
 1558 0800 FB60     	 str r3,[r7,#12]
 350:Solver.c      **** 
 351:Solver.c      **** 	if(frame_struct->frameType == MSG_STATE_DATA)
 1559              	 .loc 1 351 0
 1560 0802 FB68     	 ldr r3,[r7,#12]
 1561 0804 1B78     	 ldrb r3,[r3]
 1562 0806 012B     	 cmp r3,#1
 1563 0808 18D1     	 bne .L101
 352:Solver.c      **** 	{
 353:Solver.c      **** #if APP_COORDINATOR
 354:Solver.c      **** 		//if(ind->srcAddr == 1)
 355:Solver.c      **** 		//{
 356:Solver.c      **** 			++n_received;
 1564              	 .loc 1 356 0
 1565 080a 204B     	 ldr r3,.L103
 1566 080c 1B78     	 ldrb r3,[r3]
 1567 080e 0133     	 adds r3,r3,#1
 1568 0810 DAB2     	 uxtb r2,r3
 1569 0812 1E4B     	 ldr r3,.L103
 1570 0814 1A70     	 strb r2,[r3]
 357:Solver.c      **** 			received[ind->srcAddr - 1]	= SOLVER_MSG_RECEIVED;
 1571              	 .loc 1 357 0
 1572 0816 7B68     	 ldr r3,[r7,#4]
 1573 0818 1B88     	 ldrh r3,[r3]
 1574 081a 013B     	 subs r3,r3,#1
 1575 081c 1C4A     	 ldr r2,.L103+4
 1576 081e 0121     	 movs r1,#1
 1577 0820 D154     	 strb r1,[r2,r3]
 358:Solver.c      **** 			memcpy(buffer_msg[ind->srcAddr - 1], frame_struct->data.data_vector, MSG_SIZE_MAX);			
 1578              	 .loc 1 358 0
 1579 0822 7B68     	 ldr r3,[r7,#4]
 1580 0824 1B88     	 ldrh r3,[r3]
 1581 0826 013B     	 subs r3,r3,#1
 1582 0828 9B01     	 lsls r3,r3,#6
 1583 082a 1A4A     	 ldr r2,.L103+8
 1584 082c 9818     	 adds r0,r3,r2
 1585 082e FB68     	 ldr r3,[r7,#12]
 1586 0830 0133     	 adds r3,r3,#1
 1587 0832 4022     	 movs r2,#64
 1588 0834 1946     	 mov r1,r3
 1589 0836 184B     	 ldr r3,.L103+12
 1590 0838 9847     	 blx r3
 1591              	.LVL3:
 1592 083a 24E0     	 b .L97
 1593              	.L101:
 359:Solver.c      **** 		//}
 360:Solver.c      **** #else
 361:Solver.c      **** 		++n_received;
 362:Solver.c      **** 		received[ind->srcAddr - 1]		= SOLVER_MSG_RECEIVED;
 363:Solver.c      **** 		memcpy(buffer_msg[ind->srcAddr - 1], frame_struct->data.data_vector, MSG_SIZE_MAX);
 364:Solver.c      **** #endif
 365:Solver.c      **** 	}
 366:Solver.c      **** #if APP_COORDINATOR
 367:Solver.c      **** 	else if(frame_struct->frameType == MSG_STATE_ENCODED_DATA)
 1594              	 .loc 1 367 0
 1595 083c FB68     	 ldr r3,[r7,#12]
 1596 083e 1B78     	 ldrb r3,[r3]
 1597 0840 022B     	 cmp r3,#2
 1598 0842 20D1     	 bne .L97
 368:Solver.c      **** 	{
 369:Solver.c      **** 		// Montar a matrix de coeficientes, a cada retransmissao e uma linha.
 370:Solver.c      **** 		// Montar o combination1 a cada retransmissao e uma linha. (composicao: payload msg codificadas).
 371:Solver.c      **** 		// Deve-se chamar Codificador::solve_system() a cada recebimento de retranmissao, ja que, o siste
 372:Solver.c      **** 		// se pode ou nao extrair uma das incognitas.
 373:Solver.c      **** 
 374:Solver.c      **** 		memcpy(matrix[n_colaborative], frame_struct->collab.coefficients, N_MOTES_MAX);      
 1599              	 .loc 1 374 0
 1600 0844 154B     	 ldr r3,.L103+16
 1601 0846 1B78     	 ldrb r3,[r3]
 1602 0848 1A46     	 mov r2,r3
 1603 084a 1346     	 mov r3,r2
 1604 084c 1B01     	 lsls r3,r3,#4
 1605 084e 9B1A     	 subs r3,r3,r2
 1606 0850 134A     	 ldr r2,.L103+20
 1607 0852 9818     	 adds r0,r3,r2
 1608 0854 FB68     	 ldr r3,[r7,#12]
 1609 0856 0133     	 adds r3,r3,#1
 1610 0858 0F22     	 movs r2,#15
 1611 085a 1946     	 mov r1,r3
 1612 085c 0E4B     	 ldr r3,.L103+12
 1613 085e 9847     	 blx r3
 1614              	.LVL4:
 375:Solver.c      **** 		memcpy(combination[n_colaborative], frame_struct->collab.data_vector, MSG_SIZE_MAX);
 1615              	 .loc 1 375 0
 1616 0860 0E4B     	 ldr r3,.L103+16
 1617 0862 1B78     	 ldrb r3,[r3]
 1618 0864 9B01     	 lsls r3,r3,#6
 1619 0866 0F4A     	 ldr r2,.L103+24
 1620 0868 9818     	 adds r0,r3,r2
 1621 086a FB68     	 ldr r3,[r7,#12]
 1622 086c 1033     	 adds r3,r3,#16
 1623 086e 4022     	 movs r2,#64
 1624 0870 1946     	 mov r1,r3
 1625 0872 094B     	 ldr r3,.L103+12
 1626 0874 9847     	 blx r3
 1627              	.LVL5:
 376:Solver.c      **** 		++n_colaborative;
 1628              	 .loc 1 376 0
 1629 0876 094B     	 ldr r3,.L103+16
 1630 0878 1B78     	 ldrb r3,[r3]
 1631 087a 0133     	 adds r3,r3,#1
 1632 087c DAB2     	 uxtb r2,r3
 1633 087e 074B     	 ldr r3,.L103+16
 1634 0880 1A70     	 strb r2,[r3]
 1635 0882 00E0     	 b .L97
 1636              	.L102:
 347:Solver.c      **** 
 1637              	 .loc 1 347 0
 1638 0884 00BF     	 nop
 1639              	.L97:
 377:Solver.c      **** 	}
 378:Solver.c      **** #endif
 379:Solver.c      **** }
 1640              	 .loc 1 379 0
 1641 0886 1037     	 adds r7,r7,#16
 1642              	.LCFI50:
 1643              	 .cfi_def_cfa_offset 8
 1644 0888 BD46     	 mov sp,r7
 1645              	.LCFI51:
 1646              	 .cfi_def_cfa_register 13
 1647              	 
 1648 088a 80BD     	 pop {r7,pc}
 1649              	.L104:
 1650              	 .align 2
 1651              	.L103:
 1652 088c 00000000 	 .word n_received
 1653 0890 00000000 	 .word received
 1654 0894 00000000 	 .word buffer_msg
 1655 0898 00000000 	 .word memcpy
 1656 089c 00000000 	 .word n_colaborative
 1657 08a0 00000000 	 .word matrix
 1658 08a4 00000000 	 .word combination
 1659              	 .cfi_endproc
 1660              	.LFE137:
 1662              	 .align 1
 1663              	 .global solver_set_data_frame
 1664              	 .syntax unified
 1665              	 .thumb
 1666              	 .thumb_func
 1667              	 .fpu softvfp
 1669              	solver_set_data_frame:
 1670              	.LFB138:
 380:Solver.c      **** void solver_set_data_frame(uint8_t address, AppMessageFrame_t *frame_struct)
 381:Solver.c      **** {
 1671              	 .loc 1 381 0
 1672              	 .cfi_startproc
 1673              	 
 1674              	 
 1675 08a8 80B5     	 push {r7,lr}
 1676              	.LCFI52:
 1677              	 .cfi_def_cfa_offset 8
 1678              	 .cfi_offset 7,-8
 1679              	 .cfi_offset 14,-4
 1680 08aa 82B0     	 sub sp,sp,#8
 1681              	.LCFI53:
 1682              	 .cfi_def_cfa_offset 16
 1683 08ac 00AF     	 add r7,sp,#0
 1684              	.LCFI54:
 1685              	 .cfi_def_cfa_register 7
 1686 08ae 0346     	 mov r3,r0
 1687 08b0 3960     	 str r1,[r7]
 1688 08b2 FB71     	 strb r3,[r7,#7]
 382:Solver.c      **** 	++n_received;
 1689              	 .loc 1 382 0
 1690 08b4 0C4B     	 ldr r3,.L106
 1691 08b6 1B78     	 ldrb r3,[r3]
 1692 08b8 0133     	 adds r3,r3,#1
 1693 08ba DAB2     	 uxtb r2,r3
 1694 08bc 0A4B     	 ldr r3,.L106
 1695 08be 1A70     	 strb r2,[r3]
 383:Solver.c      **** 	received[address - 1]				= SOLVER_MSG_RECEIVED;
 1696              	 .loc 1 383 0
 1697 08c0 FB79     	 ldrb r3,[r7,#7]
 1698 08c2 013B     	 subs r3,r3,#1
 1699 08c4 094A     	 ldr r2,.L106+4
 1700 08c6 0121     	 movs r1,#1
 1701 08c8 D154     	 strb r1,[r2,r3]
 384:Solver.c      **** 	memcpy(buffer_msg[address - 1], frame_struct->data.data_vector, MSG_SIZE_MAX);	
 1702              	 .loc 1 384 0
 1703 08ca FB79     	 ldrb r3,[r7,#7]
 1704 08cc 013B     	 subs r3,r3,#1
 1705 08ce 9B01     	 lsls r3,r3,#6
 1706 08d0 074A     	 ldr r2,.L106+8
 1707 08d2 9818     	 adds r0,r3,r2
 1708 08d4 3B68     	 ldr r3,[r7]
 1709 08d6 0133     	 adds r3,r3,#1
 1710 08d8 4022     	 movs r2,#64
 1711 08da 1946     	 mov r1,r3
 1712 08dc 054B     	 ldr r3,.L106+12
 1713 08de 9847     	 blx r3
 1714              	.LVL6:
 385:Solver.c      **** }
 1715              	 .loc 1 385 0
 1716 08e0 00BF     	 nop
 1717 08e2 0837     	 adds r7,r7,#8
 1718              	.LCFI55:
 1719              	 .cfi_def_cfa_offset 8
 1720 08e4 BD46     	 mov sp,r7
 1721              	.LCFI56:
 1722              	 .cfi_def_cfa_register 13
 1723              	 
 1724 08e6 80BD     	 pop {r7,pc}
 1725              	.L107:
 1726              	 .align 2
 1727              	.L106:
 1728 08e8 00000000 	 .word n_received
 1729 08ec 00000000 	 .word received
 1730 08f0 00000000 	 .word buffer_msg
 1731 08f4 00000000 	 .word memcpy
 1732              	 .cfi_endproc
 1733              	.LFE138:
 1735              	 .align 1
 1736              	 .global solver_get_data
 1737              	 .syntax unified
 1738              	 .thumb
 1739              	 .thumb_func
 1740              	 .fpu softvfp
 1742              	solver_get_data:
 1743              	.LFB139:
 386:Solver.c      **** #if APP_COORDINATOR
 387:Solver.c      **** uint8_t* solver_get_data(uint8_t index, SolverMsgType_t msgType)
 388:Solver.c      **** {
 1744              	 .loc 1 388 0
 1745              	 .cfi_startproc
 1746              	 
 1747              	 
 1748              	 
 1749 08f8 80B4     	 push {r7}
 1750              	.LCFI57:
 1751              	 .cfi_def_cfa_offset 4
 1752              	 .cfi_offset 7,-4
 1753 08fa 83B0     	 sub sp,sp,#12
 1754              	.LCFI58:
 1755              	 .cfi_def_cfa_offset 16
 1756 08fc 00AF     	 add r7,sp,#0
 1757              	.LCFI59:
 1758              	 .cfi_def_cfa_register 7
 1759 08fe 0346     	 mov r3,r0
 1760 0900 0A46     	 mov r2,r1
 1761 0902 FB71     	 strb r3,[r7,#7]
 1762 0904 1346     	 mov r3,r2
 1763 0906 BB71     	 strb r3,[r7,#6]
 389:Solver.c      **** 	if(index < N_MOTES_MAX && received[index] == msgType)
 1764              	 .loc 1 389 0
 1765 0908 FB79     	 ldrb r3,[r7,#7]
 1766 090a 0E2B     	 cmp r3,#14
 1767 090c 0AD8     	 bhi .L109
 1768              	 .loc 1 389 0 is_stmt 0 discriminator 1
 1769 090e FB79     	 ldrb r3,[r7,#7]
 1770 0910 074A     	 ldr r2,.L111
 1771 0912 D35C     	 ldrb r3,[r2,r3]
 1772 0914 BA79     	 ldrb r2,[r7,#6]
 1773 0916 9A42     	 cmp r2,r3
 1774 0918 04D1     	 bne .L109
 390:Solver.c      **** 	{
 391:Solver.c      **** 		return(buffer_msg[index]);
 1775              	 .loc 1 391 0 is_stmt 1
 1776 091a FB79     	 ldrb r3,[r7,#7]
 1777 091c 9B01     	 lsls r3,r3,#6
 1778 091e 054A     	 ldr r2,.L111+4
 1779 0920 1344     	 add r3,r3,r2
 1780 0922 00E0     	 b .L110
 1781              	.L109:
 392:Solver.c      **** 	}
 393:Solver.c      **** 	else
 394:Solver.c      **** 	{
 395:Solver.c      **** 		return(NULL);
 1782              	 .loc 1 395 0
 1783 0924 0023     	 movs r3,#0
 1784              	.L110:
 396:Solver.c      **** 	}
 397:Solver.c      **** }
 1785              	 .loc 1 397 0
 1786 0926 1846     	 mov r0,r3
 1787 0928 0C37     	 adds r7,r7,#12
 1788              	.LCFI60:
 1789              	 .cfi_def_cfa_offset 4
 1790 092a BD46     	 mov sp,r7
 1791              	.LCFI61:
 1792              	 .cfi_def_cfa_register 13
 1793              	 
 1794 092c 80BC     	 pop {r7}
 1795              	.LCFI62:
 1796              	 .cfi_restore 7
 1797              	 .cfi_def_cfa_offset 0
 1798 092e 7047     	 bx lr
 1799              	.L112:
 1800              	 .align 2
 1801              	.L111:
 1802 0930 00000000 	 .word received
 1803 0934 00000000 	 .word buffer_msg
 1804              	 .cfi_endproc
 1805              	.LFE139:
 1807              	.Letext0:
 1808              	 .file 2 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\arm\\arm-gnu-toolchain\\arm-none-eabi\\include\\machine\\_default_types.h"
 1809              	 .file 3 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\arm\\arm-gnu-toolchain\\arm-none-eabi\\include\\sys\\_stdint.h"
 1810              	 .file 4 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\arm\\arm-gnu-toolchain\\arm-none-eabi\\include\\sys\\lock.h"
 1811              	 .file 5 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\arm\\arm-gnu-toolchain\\arm-none-eabi\\include\\sys\\_types.h"
 1812              	 .file 6 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\arm\\arm-gnu-toolchain\\lib\\gcc\\arm-none-eabi\\6.3.1\\include\\stddef.h"
 1813              	 .file 7 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\arm\\arm-gnu-toolchain\\arm-none-eabi\\include\\sys\\reent.h"
 1814              	 .file 8 "../../../platform/thirdparty/CMSIS/include/core_cm4.h"
 1815              	 .file 9 "../../../platform/sam/utils/cmsis/sam4l/source/templates/system_sam4l.h"
 1816              	 .file 10 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\arm\\arm-gnu-toolchain\\arm-none-eabi\\include\\stdlib.h"
 1817              	 .file 11 "../../../platform/common/utils/interrupt/interrupt_sam_nvic.h"
 1818              	 .file 12 "../../../platform/sam/utils/compiler.h"
 1819              	 .file 13 "../../../platform/common/services/usb/usb_protocol.h"
 1820              	 .file 14 "../../../platform/common/services/usb/udc/udi.h"
 1821              	 .file 15 "../../../platform/common/services/usb/udc/udc_desc.h"
 1822              	 .file 16 "../../../platform/common/services/usb/udc/udd.h"
 1823              	 .file 17 "../../../platform/common/services/usb/class/cdc/device/udi_cdc.h"
 1824              	 .file 18 "../../../platform/common/utils/stdio/stdio_usb/stdio_usb.h"
 1825              	 .file 19 "../../../stack/LwMesh/TDMA/nwk/inc/nwkRx.h"
 1826              	 .file 20 "../../../stack/LwMesh/TDMA/nwk/inc/nwk.h"
 1827              	 .file 21 "Solver.h"
 1828              	 .file 22 "config/config.h"
 1829              	 .file 23 "<built-in>"
DEFINED SYMBOLS
                            *ABS*:00000000 Solver.c
    {standard input}:16     .bss.cpu_irq_critical_section_counter:00000000 $d
    {standard input}:19     .bss.cpu_irq_critical_section_counter:00000000 cpu_irq_critical_section_counter
    {standard input}:24     .bss.cpu_irq_prev_interrupt_state:00000000 cpu_irq_prev_interrupt_state
    {standard input}:25     .bss.cpu_irq_prev_interrupt_state:00000000 $d
                            *COM*:00000001 n
    {standard input}:28     .bss.tTS:00000000 $d
    {standard input}:31     .bss.tTS:00000000 tTS
    {standard input}:36     .bss.n_received:00000000 n_received
    {standard input}:37     .bss.n_received:00000000 $d
    {standard input}:39     .bss.received:00000000 $d
    {standard input}:42     .bss.received:00000000 received
    {standard input}:47     .bss.n_colaborative:00000000 n_colaborative
    {standard input}:48     .bss.n_colaborative:00000000 $d
    {standard input}:50     .bss.buffer_msg:00000000 $d
    {standard input}:53     .bss.buffer_msg:00000000 buffer_msg
    {standard input}:58     .bss.n_equations:00000000 n_equations
    {standard input}:59     .bss.n_equations:00000000 $d
    {standard input}:61     .bss.matrix:00000000 $d
    {standard input}:64     .bss.matrix:00000000 matrix
    {standard input}:67     .bss.combination:00000000 $d
    {standard input}:70     .bss.combination:00000000 combination
    {standard input}:73     .text:00000000 $t
    {standard input}:80     .text:00000000 solver_init
    {standard input}:121    .text:00000020 $d
    {standard input}:127    .text:0000002c $t
    {standard input}:134    .text:0000002c solver_get_n_received
    {standard input}:165    .text:0000003c $d
    {standard input}:169    .text:00000040 $t
    {standard input}:176    .text:00000040 solver_get_n_colaborative
    {standard input}:207    .text:00000050 $d
    {standard input}:211    .text:00000054 $t
    {standard input}:217    .text:00000054 solver_mult
    {standard input}:331    .text:000000e6 solver_inv
    {standard input}:512    .text:000001ea solver_swap_line
    {standard input}:663    .text:000002bc $d
    {standard input}:668    .text:000002c4 $t
    {standard input}:674    .text:000002c4 solver_combine_line
    {standard input}:809    .text:0000038c $d
    {standard input}:814    .text:00000394 $t
    {standard input}:820    .text:00000394 solver_clear_column
    {standard input}:919    .text:00000420 $d
    {standard input}:924    .text:00000428 $t
    {standard input}:931    .text:00000428 solver_solve_system
    {standard input}:1331   .text:000006b4 $d
    {standard input}:1339   .text:000006cc $t
    {standard input}:1443   .text:0000077c $d
    {standard input}:1450   .text:0000078c $t
    {standard input}:1457   .text:0000078c solver_prepare_next_turn
    {standard input}:1510   .text:000007c8 $d
    {standard input}:1520   .text:000007e4 $t
    {standard input}:1527   .text:000007e4 solver_received_data_frame
    {standard input}:1652   .text:0000088c $d
    {standard input}:1662   .text:000008a8 $t
    {standard input}:1669   .text:000008a8 solver_set_data_frame
    {standard input}:1728   .text:000008e8 $d
    {standard input}:1735   .text:000008f8 $t
    {standard input}:1742   .text:000008f8 solver_get_data
    {standard input}:1802   .text:00000930 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
memset
memcpy
