   1               		.file	"lp_mipbb.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__RAMPZ__ = 0x3b
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
   8               		.text
   9               	.Ltext0:
  10               		.cfi_sections	.debug_frame
  11               	.global	create_BB
  13               	create_BB:
  14               	.LFB7:
  15               		.file 1 "lp_solve_5.5/lp_mipbb.c"
   1:lp_solve_5.5/lp_mipbb.c **** 
   2:lp_solve_5.5/lp_mipbb.c **** /*
   3:lp_solve_5.5/lp_mipbb.c ****     Mixed integer programming optimization drivers for lp_solve v5.0+
   4:lp_solve_5.5/lp_mipbb.c ****    ----------------------------------------------------------------------------------
   5:lp_solve_5.5/lp_mipbb.c ****     Author:        Michel Berkelaar (to lp_solve v3.2)
   6:lp_solve_5.5/lp_mipbb.c ****                    Kjell Eikland    (v4.0 and forward)
   7:lp_solve_5.5/lp_mipbb.c ****     Contact:
   8:lp_solve_5.5/lp_mipbb.c ****     License terms: LGPL.
   9:lp_solve_5.5/lp_mipbb.c **** 
  10:lp_solve_5.5/lp_mipbb.c ****     Requires:      string.h, float.h, commonlib.h, lp_lib.h, lp_report.h,
  11:lp_solve_5.5/lp_mipbb.c ****                    lp_simplex.h
  12:lp_solve_5.5/lp_mipbb.c **** 
  13:lp_solve_5.5/lp_mipbb.c ****     Release notes:
  14:lp_solve_5.5/lp_mipbb.c ****     v5.0.0 31 January 2004      New unit isolating B&B routines.
  15:lp_solve_5.5/lp_mipbb.c ****     v5.0.1 01 February 2004     Complete rewrite into non-recursive version.
  16:lp_solve_5.5/lp_mipbb.c ****     v5.0.2 05 April 2004        Expanded pseudocosting with options for MIP fraction
  17:lp_solve_5.5/lp_mipbb.c ****                                 counts and "cost/benefit" ratio (KE special!).
  18:lp_solve_5.5/lp_mipbb.c ****                                 Added GUB functionality based on SOS structures.
  19:lp_solve_5.5/lp_mipbb.c ****     v5.0.3    1 May 2004        Changed routine names to be more intuitive.
  20:lp_solve_5.5/lp_mipbb.c ****     v5.0.4    15 May 2004       Added functinality to pack bounds in order to
  21:lp_solve_5.5/lp_mipbb.c ****                                 conserve memory in B&B-processing large MIP models.
  22:lp_solve_5.5/lp_mipbb.c ****     v5.1.0    25 July 2004      Added functions for dynamic cut generation.
  23:lp_solve_5.5/lp_mipbb.c ****     v5.2.0    15 December 2004  Added functions for reduced cost variable fixing
  24:lp_solve_5.5/lp_mipbb.c ****                                 and converted to delta-model of B&B bound storage.
  25:lp_solve_5.5/lp_mipbb.c ****    ----------------------------------------------------------------------------------
  26:lp_solve_5.5/lp_mipbb.c **** */
  27:lp_solve_5.5/lp_mipbb.c **** 
  28:lp_solve_5.5/lp_mipbb.c **** #include <string.h>
  29:lp_solve_5.5/lp_mipbb.c **** #include <float.h>
  30:lp_solve_5.5/lp_mipbb.c **** #include "commonlib.h"
  31:lp_solve_5.5/lp_mipbb.c **** #include "lp_lib.h"
  32:lp_solve_5.5/lp_mipbb.c **** #include "lp_scale.h"
  33:lp_solve_5.5/lp_mipbb.c **** #include "lp_report.h"
  34:lp_solve_5.5/lp_mipbb.c **** #include "lp_simplex.h"
  35:lp_solve_5.5/lp_mipbb.c **** #include "lp_mipbb.h"
  36:lp_solve_5.5/lp_mipbb.c **** 
  37:lp_solve_5.5/lp_mipbb.c **** #ifdef FORTIFY
  38:lp_solve_5.5/lp_mipbb.c **** # include "lp_fortify.h"
  39:lp_solve_5.5/lp_mipbb.c **** #endif
  40:lp_solve_5.5/lp_mipbb.c **** 
  41:lp_solve_5.5/lp_mipbb.c **** 
  42:lp_solve_5.5/lp_mipbb.c **** /* Allocation routine for the BB record structure */
  43:lp_solve_5.5/lp_mipbb.c **** STATIC BBrec *create_BB(lprec *lp, BBrec *parentBB, MYBOOL dofullcopy)
  44:lp_solve_5.5/lp_mipbb.c **** {
  16               		.loc 1 44 0
  17               		.cfi_startproc
  18 0000 CF93      		push r28
  19               	.LCFI0:
  20               		.cfi_def_cfa_offset 3
  21               		.cfi_offset 28, -2
  22 0002 DF93      		push r29
  23               	.LCFI1:
  24               		.cfi_def_cfa_offset 4
  25               		.cfi_offset 29, -3
  26 0004 CDB7      		in r28,__SP_L__
  27 0006 DEB7      		in r29,__SP_H__
  28               	.LCFI2:
  29               		.cfi_def_cfa_register 28
  30 0008 2797      		sbiw r28,7
  31               	.LCFI3:
  32               		.cfi_def_cfa_offset 11
  33 000a 0FB6      		in __tmp_reg__,__SREG__
  34 000c F894      		cli
  35 000e DEBF      		out __SP_H__,r29
  36 0010 0FBE      		out __SREG__,__tmp_reg__
  37 0012 CDBF      		out __SP_L__,r28
  38               	/* prologue: function */
  39               	/* frame size = 7 */
  40               	/* stack size = 9 */
  41               	.L__stack_usage = 9
  42 0014 9C83      		std Y+4,r25
  43 0016 8B83      		std Y+3,r24
  44 0018 7E83      		std Y+6,r23
  45 001a 6D83      		std Y+5,r22
  46 001c 4F83      		std Y+7,r20
  45:lp_solve_5.5/lp_mipbb.c ****   BBrec *newBB;
  46:lp_solve_5.5/lp_mipbb.c **** 
  47:lp_solve_5.5/lp_mipbb.c ****   newBB = (BBrec *) calloc(1, sizeof(*newBB));
  47               		.loc 1 47 0
  48 001e 68E3      		ldi r22,lo8(56)
  49 0020 70E0      		ldi r23,0
  50 0022 81E0      		ldi r24,lo8(1)
  51 0024 90E0      		ldi r25,0
  52 0026 0E94 0000 		call calloc
  53 002a 9A83      		std Y+2,r25
  54 002c 8983      		std Y+1,r24
  48:lp_solve_5.5/lp_mipbb.c ****   if(newBB != NULL) {
  55               		.loc 1 48 0
  56 002e 8981      		ldd r24,Y+1
  57 0030 9A81      		ldd r25,Y+2
  58 0032 892B      		or r24,r25
  59 0034 01F4      		brne .+2
  60 0036 00C0      		rjmp .L2
  49:lp_solve_5.5/lp_mipbb.c **** 
  50:lp_solve_5.5/lp_mipbb.c ****     if(parentBB == NULL) {
  61               		.loc 1 50 0
  62 0038 8D81      		ldd r24,Y+5
  63 003a 9E81      		ldd r25,Y+6
  64 003c 892B      		or r24,r25
  65 003e 01F0      		breq .+2
  66 0040 00C0      		rjmp .L3
  51:lp_solve_5.5/lp_mipbb.c ****       allocREAL(lp, &newBB->upbo,  lp->sum + 1, FALSE);
  67               		.loc 1 51 0
  68 0042 8B81      		ldd r24,Y+3
  69 0044 9C81      		ldd r25,Y+4
  70 0046 8851      		subi r24,24
  71 0048 9E4F      		sbci r25,-2
  72 004a FC01      		movw r30,r24
  73 004c 8081      		ld r24,Z
  74 004e 9181      		ldd r25,Z+1
  75 0050 AC01      		movw r20,r24
  76 0052 4F5F      		subi r20,-1
  77 0054 5F4F      		sbci r21,-1
  78 0056 8981      		ldd r24,Y+1
  79 0058 9A81      		ldd r25,Y+2
  80 005a BC01      		movw r22,r24
  81 005c 605E      		subi r22,-32
  82 005e 7F4F      		sbci r23,-1
  83 0060 8B81      		ldd r24,Y+3
  84 0062 9C81      		ldd r25,Y+4
  85 0064 20E0      		ldi r18,0
  86 0066 0E94 0000 		call allocREAL
  52:lp_solve_5.5/lp_mipbb.c ****       allocREAL(lp, &newBB->lowbo, lp->sum + 1, FALSE);
  87               		.loc 1 52 0
  88 006a 8B81      		ldd r24,Y+3
  89 006c 9C81      		ldd r25,Y+4
  90 006e 8851      		subi r24,24
  91 0070 9E4F      		sbci r25,-2
  92 0072 FC01      		movw r30,r24
  93 0074 8081      		ld r24,Z
  94 0076 9181      		ldd r25,Z+1
  95 0078 AC01      		movw r20,r24
  96 007a 4F5F      		subi r20,-1
  97 007c 5F4F      		sbci r21,-1
  98 007e 8981      		ldd r24,Y+1
  99 0080 9A81      		ldd r25,Y+2
 100 0082 BC01      		movw r22,r24
 101 0084 6E5D      		subi r22,-34
 102 0086 7F4F      		sbci r23,-1
 103 0088 8B81      		ldd r24,Y+3
 104 008a 9C81      		ldd r25,Y+4
 105 008c 20E0      		ldi r18,0
 106 008e 0E94 0000 		call allocREAL
  53:lp_solve_5.5/lp_mipbb.c ****       MEMCOPY(newBB->upbo,  lp->orig_upbo,  lp->sum + 1);
 107               		.loc 1 53 0
 108 0092 8B81      		ldd r24,Y+3
 109 0094 9C81      		ldd r25,Y+4
 110 0096 8851      		subi r24,24
 111 0098 9E4F      		sbci r25,-2
 112 009a FC01      		movw r30,r24
 113 009c 8081      		ld r24,Z
 114 009e 9181      		ldd r25,Z+1
 115 00a0 0196      		adiw r24,1
 116 00a2 AC01      		movw r20,r24
 117 00a4 440F      		lsl r20
 118 00a6 551F      		rol r21
 119 00a8 440F      		lsl r20
 120 00aa 551F      		rol r21
 121 00ac 8B81      		ldd r24,Y+3
 122 00ae 9C81      		ldd r25,Y+4
 123 00b0 8255      		subi r24,82
 124 00b2 9D4F      		sbci r25,-3
 125 00b4 FC01      		movw r30,r24
 126 00b6 2081      		ld r18,Z
 127 00b8 3181      		ldd r19,Z+1
 128 00ba 8981      		ldd r24,Y+1
 129 00bc 9A81      		ldd r25,Y+2
 130 00be FC01      		movw r30,r24
 131 00c0 80A1      		ldd r24,Z+32
 132 00c2 91A1      		ldd r25,Z+33
 133 00c4 B901      		movw r22,r18
 134 00c6 0E94 0000 		call memcpy
  54:lp_solve_5.5/lp_mipbb.c ****       MEMCOPY(newBB->lowbo, lp->orig_lowbo, lp->sum + 1);
 135               		.loc 1 54 0
 136 00ca 8B81      		ldd r24,Y+3
 137 00cc 9C81      		ldd r25,Y+4
 138 00ce 8851      		subi r24,24
 139 00d0 9E4F      		sbci r25,-2
 140 00d2 FC01      		movw r30,r24
 141 00d4 8081      		ld r24,Z
 142 00d6 9181      		ldd r25,Z+1
 143 00d8 0196      		adiw r24,1
 144 00da AC01      		movw r20,r24
 145 00dc 440F      		lsl r20
 146 00de 551F      		rol r21
 147 00e0 440F      		lsl r20
 148 00e2 551F      		rol r21
 149 00e4 8B81      		ldd r24,Y+3
 150 00e6 9C81      		ldd r25,Y+4
 151 00e8 8E54      		subi r24,78
 152 00ea 9D4F      		sbci r25,-3
 153 00ec FC01      		movw r30,r24
 154 00ee 2081      		ld r18,Z
 155 00f0 3181      		ldd r19,Z+1
 156 00f2 8981      		ldd r24,Y+1
 157 00f4 9A81      		ldd r25,Y+2
 158 00f6 FC01      		movw r30,r24
 159 00f8 82A1      		ldd r24,Z+34
 160 00fa 93A1      		ldd r25,Z+35
 161 00fc B901      		movw r22,r18
 162 00fe 0E94 0000 		call memcpy
 163 0102 00C0      		rjmp .L4
 164               	.L3:
  55:lp_solve_5.5/lp_mipbb.c ****     }
  56:lp_solve_5.5/lp_mipbb.c ****     else if(dofullcopy) {
 165               		.loc 1 56 0
 166 0104 8F81      		ldd r24,Y+7
 167 0106 8823      		tst r24
 168 0108 01F4      		brne .+2
 169 010a 00C0      		rjmp .L5
  57:lp_solve_5.5/lp_mipbb.c ****       allocREAL(lp, &newBB->upbo,  lp->sum + 1, FALSE);
 170               		.loc 1 57 0
 171 010c 8B81      		ldd r24,Y+3
 172 010e 9C81      		ldd r25,Y+4
 173 0110 8851      		subi r24,24
 174 0112 9E4F      		sbci r25,-2
 175 0114 FC01      		movw r30,r24
 176 0116 8081      		ld r24,Z
 177 0118 9181      		ldd r25,Z+1
 178 011a AC01      		movw r20,r24
 179 011c 4F5F      		subi r20,-1
 180 011e 5F4F      		sbci r21,-1
 181 0120 8981      		ldd r24,Y+1
 182 0122 9A81      		ldd r25,Y+2
 183 0124 BC01      		movw r22,r24
 184 0126 605E      		subi r22,-32
 185 0128 7F4F      		sbci r23,-1
 186 012a 8B81      		ldd r24,Y+3
 187 012c 9C81      		ldd r25,Y+4
 188 012e 20E0      		ldi r18,0
 189 0130 0E94 0000 		call allocREAL
  58:lp_solve_5.5/lp_mipbb.c ****       allocREAL(lp, &newBB->lowbo, lp->sum + 1, FALSE);
 190               		.loc 1 58 0
 191 0134 8B81      		ldd r24,Y+3
 192 0136 9C81      		ldd r25,Y+4
 193 0138 8851      		subi r24,24
 194 013a 9E4F      		sbci r25,-2
 195 013c FC01      		movw r30,r24
 196 013e 8081      		ld r24,Z
 197 0140 9181      		ldd r25,Z+1
 198 0142 AC01      		movw r20,r24
 199 0144 4F5F      		subi r20,-1
 200 0146 5F4F      		sbci r21,-1
 201 0148 8981      		ldd r24,Y+1
 202 014a 9A81      		ldd r25,Y+2
 203 014c BC01      		movw r22,r24
 204 014e 6E5D      		subi r22,-34
 205 0150 7F4F      		sbci r23,-1
 206 0152 8B81      		ldd r24,Y+3
 207 0154 9C81      		ldd r25,Y+4
 208 0156 20E0      		ldi r18,0
 209 0158 0E94 0000 		call allocREAL
  59:lp_solve_5.5/lp_mipbb.c ****       MEMCOPY(newBB->upbo,  parentBB->upbo,  lp->sum + 1);
 210               		.loc 1 59 0
 211 015c 8B81      		ldd r24,Y+3
 212 015e 9C81      		ldd r25,Y+4
 213 0160 8851      		subi r24,24
 214 0162 9E4F      		sbci r25,-2
 215 0164 FC01      		movw r30,r24
 216 0166 8081      		ld r24,Z
 217 0168 9181      		ldd r25,Z+1
 218 016a 0196      		adiw r24,1
 219 016c AC01      		movw r20,r24
 220 016e 440F      		lsl r20
 221 0170 551F      		rol r21
 222 0172 440F      		lsl r20
 223 0174 551F      		rol r21
 224 0176 8D81      		ldd r24,Y+5
 225 0178 9E81      		ldd r25,Y+6
 226 017a FC01      		movw r30,r24
 227 017c 20A1      		ldd r18,Z+32
 228 017e 31A1      		ldd r19,Z+33
 229 0180 8981      		ldd r24,Y+1
 230 0182 9A81      		ldd r25,Y+2
 231 0184 FC01      		movw r30,r24
 232 0186 80A1      		ldd r24,Z+32
 233 0188 91A1      		ldd r25,Z+33
 234 018a B901      		movw r22,r18
 235 018c 0E94 0000 		call memcpy
  60:lp_solve_5.5/lp_mipbb.c ****       MEMCOPY(newBB->lowbo, parentBB->lowbo, lp->sum + 1);
 236               		.loc 1 60 0
 237 0190 8B81      		ldd r24,Y+3
 238 0192 9C81      		ldd r25,Y+4
 239 0194 8851      		subi r24,24
 240 0196 9E4F      		sbci r25,-2
 241 0198 FC01      		movw r30,r24
 242 019a 8081      		ld r24,Z
 243 019c 9181      		ldd r25,Z+1
 244 019e 0196      		adiw r24,1
 245 01a0 AC01      		movw r20,r24
 246 01a2 440F      		lsl r20
 247 01a4 551F      		rol r21
 248 01a6 440F      		lsl r20
 249 01a8 551F      		rol r21
 250 01aa 8D81      		ldd r24,Y+5
 251 01ac 9E81      		ldd r25,Y+6
 252 01ae FC01      		movw r30,r24
 253 01b0 22A1      		ldd r18,Z+34
 254 01b2 33A1      		ldd r19,Z+35
 255 01b4 8981      		ldd r24,Y+1
 256 01b6 9A81      		ldd r25,Y+2
 257 01b8 FC01      		movw r30,r24
 258 01ba 82A1      		ldd r24,Z+34
 259 01bc 93A1      		ldd r25,Z+35
 260 01be B901      		movw r22,r18
 261 01c0 0E94 0000 		call memcpy
 262 01c4 00C0      		rjmp .L4
 263               	.L5:
  61:lp_solve_5.5/lp_mipbb.c ****     }
  62:lp_solve_5.5/lp_mipbb.c ****     else {
  63:lp_solve_5.5/lp_mipbb.c ****       newBB->upbo  = parentBB->upbo;
 264               		.loc 1 63 0
 265 01c6 8D81      		ldd r24,Y+5
 266 01c8 9E81      		ldd r25,Y+6
 267 01ca FC01      		movw r30,r24
 268 01cc 20A1      		ldd r18,Z+32
 269 01ce 31A1      		ldd r19,Z+33
 270 01d0 8981      		ldd r24,Y+1
 271 01d2 9A81      		ldd r25,Y+2
 272 01d4 FC01      		movw r30,r24
 273 01d6 31A3      		std Z+33,r19
 274 01d8 20A3      		std Z+32,r18
  64:lp_solve_5.5/lp_mipbb.c ****       newBB->lowbo = parentBB->lowbo;
 275               		.loc 1 64 0
 276 01da 8D81      		ldd r24,Y+5
 277 01dc 9E81      		ldd r25,Y+6
 278 01de FC01      		movw r30,r24
 279 01e0 22A1      		ldd r18,Z+34
 280 01e2 33A1      		ldd r19,Z+35
 281 01e4 8981      		ldd r24,Y+1
 282 01e6 9A81      		ldd r25,Y+2
 283 01e8 FC01      		movw r30,r24
 284 01ea 33A3      		std Z+35,r19
 285 01ec 22A3      		std Z+34,r18
 286               	.L4:
  65:lp_solve_5.5/lp_mipbb.c ****     }
  66:lp_solve_5.5/lp_mipbb.c ****     newBB->contentmode = dofullcopy;
 287               		.loc 1 66 0
 288 01ee 8981      		ldd r24,Y+1
 289 01f0 9A81      		ldd r25,Y+2
 290 01f2 2F81      		ldd r18,Y+7
 291 01f4 FC01      		movw r30,r24
 292 01f6 20AB      		std Z+48,r18
  67:lp_solve_5.5/lp_mipbb.c **** 
  68:lp_solve_5.5/lp_mipbb.c ****     newBB->lp = lp;
 293               		.loc 1 68 0
 294 01f8 8981      		ldd r24,Y+1
 295 01fa 9A81      		ldd r25,Y+2
 296 01fc 2B81      		ldd r18,Y+3
 297 01fe 3C81      		ldd r19,Y+4
 298 0200 FC01      		movw r30,r24
 299 0202 3583      		std Z+5,r19
 300 0204 2483      		std Z+4,r18
  69:lp_solve_5.5/lp_mipbb.c **** 
  70:lp_solve_5.5/lp_mipbb.c ****     /* Set parent by default, but not child */
  71:lp_solve_5.5/lp_mipbb.c ****     newBB->parent = parentBB;
 301               		.loc 1 71 0
 302 0206 8981      		ldd r24,Y+1
 303 0208 9A81      		ldd r25,Y+2
 304 020a 2D81      		ldd r18,Y+5
 305 020c 3E81      		ldd r19,Y+6
 306 020e FC01      		movw r30,r24
 307 0210 3183      		std Z+1,r19
 308 0212 2083      		st Z,r18
 309               	.L2:
  72:lp_solve_5.5/lp_mipbb.c **** 
  73:lp_solve_5.5/lp_mipbb.c ****   }
  74:lp_solve_5.5/lp_mipbb.c ****   return( newBB );
 310               		.loc 1 74 0
 311 0214 8981      		ldd r24,Y+1
 312 0216 9A81      		ldd r25,Y+2
 313               	/* epilogue start */
  75:lp_solve_5.5/lp_mipbb.c **** }
 314               		.loc 1 75 0
 315 0218 2796      		adiw r28,7
 316 021a 0FB6      		in __tmp_reg__,__SREG__
 317 021c F894      		cli
 318 021e DEBF      		out __SP_H__,r29
 319 0220 0FBE      		out __SREG__,__tmp_reg__
 320 0222 CDBF      		out __SP_L__,r28
 321 0224 DF91      		pop r29
 322 0226 CF91      		pop r28
 323 0228 0895      		ret
 324               		.cfi_endproc
 325               	.LFE7:
 327               	.global	__ltsf2
 328               	.global	__gtsf2
 329               	.global	__eqsf2
 330               		.section	.rodata
 331               	.LC0:
 332 0000 7075 7368 		.string	"push_BB: Used reduced cost to fix %d variables and tighten %d bounds\n"
 332      5F42 423A 
 332      2055 7365 
 332      6420 7265 
 332      6475 6365 
 333               		.text
 334               	.global	push_BB
 336               	push_BB:
 337               	.LFB8:
  76:lp_solve_5.5/lp_mipbb.c **** 
  77:lp_solve_5.5/lp_mipbb.c **** 
  78:lp_solve_5.5/lp_mipbb.c **** /* Pushing and popping routines for the B&B structure */
  79:lp_solve_5.5/lp_mipbb.c **** 
  80:lp_solve_5.5/lp_mipbb.c **** STATIC BBrec *push_BB(lprec *lp, BBrec *parentBB, int varno, int vartype, int varcus)
  81:lp_solve_5.5/lp_mipbb.c **** /* Push ingoing bounds and B&B data onto the stack */
  82:lp_solve_5.5/lp_mipbb.c **** {
 338               		.loc 1 82 0
 339               		.cfi_startproc
 340 022a 0F93      		push r16
 341               	.LCFI4:
 342               		.cfi_def_cfa_offset 3
 343               		.cfi_offset 16, -2
 344 022c 1F93      		push r17
 345               	.LCFI5:
 346               		.cfi_def_cfa_offset 4
 347               		.cfi_offset 17, -3
 348 022e CF93      		push r28
 349               	.LCFI6:
 350               		.cfi_def_cfa_offset 5
 351               		.cfi_offset 28, -4
 352 0230 DF93      		push r29
 353               	.LCFI7:
 354               		.cfi_def_cfa_offset 6
 355               		.cfi_offset 29, -5
 356 0232 CDB7      		in r28,__SP_L__
 357 0234 DEB7      		in r29,__SP_H__
 358               	.LCFI8:
 359               		.cfi_def_cfa_register 28
 360 0236 6B97      		sbiw r28,27
 361               	.LCFI9:
 362               		.cfi_def_cfa_offset 33
 363 0238 0FB6      		in __tmp_reg__,__SREG__
 364 023a F894      		cli
 365 023c DEBF      		out __SP_H__,r29
 366 023e 0FBE      		out __SREG__,__tmp_reg__
 367 0240 CDBF      		out __SP_L__,r28
 368               	/* prologue: function */
 369               	/* frame size = 27 */
 370               	/* stack size = 31 */
 371               	.L__stack_usage = 31
 372 0242 998B      		std Y+17,r25
 373 0244 888B      		std Y+16,r24
 374 0246 7B8B      		std Y+19,r23
 375 0248 6A8B      		std Y+18,r22
 376 024a 5D8B      		std Y+21,r21
 377 024c 4C8B      		std Y+20,r20
 378 024e 3F8B      		std Y+23,r19
 379 0250 2E8B      		std Y+22,r18
 380 0252 198F      		std Y+25,r17
 381 0254 088F      		std Y+24,r16
  83:lp_solve_5.5/lp_mipbb.c ****   BBrec *newBB;
  84:lp_solve_5.5/lp_mipbb.c **** 
  85:lp_solve_5.5/lp_mipbb.c ****   /* Do initialization and updates */
  86:lp_solve_5.5/lp_mipbb.c ****   if(parentBB == NULL)
 382               		.loc 1 86 0
 383 0256 8A89      		ldd r24,Y+18
 384 0258 9B89      		ldd r25,Y+19
 385 025a 892B      		or r24,r25
 386 025c 01F4      		brne .L8
  87:lp_solve_5.5/lp_mipbb.c ****     parentBB = lp->bb_bounds;
 387               		.loc 1 87 0
 388 025e 8889      		ldd r24,Y+16
 389 0260 9989      		ldd r25,Y+17
 390 0262 8654      		subi r24,70
 391 0264 9D4F      		sbci r25,-3
 392 0266 FC01      		movw r30,r24
 393 0268 8081      		ld r24,Z
 394 026a 9181      		ldd r25,Z+1
 395 026c 9B8B      		std Y+19,r25
 396 026e 8A8B      		std Y+18,r24
 397               	.L8:
  88:lp_solve_5.5/lp_mipbb.c ****   newBB = create_BB(lp, parentBB, FALSE);
 398               		.loc 1 88 0
 399 0270 2A89      		ldd r18,Y+18
 400 0272 3B89      		ldd r19,Y+19
 401 0274 8889      		ldd r24,Y+16
 402 0276 9989      		ldd r25,Y+17
 403 0278 40E0      		ldi r20,0
 404 027a B901      		movw r22,r18
 405 027c 0E94 0000 		call create_BB
 406 0280 9A83      		std Y+2,r25
 407 0282 8983      		std Y+1,r24
  89:lp_solve_5.5/lp_mipbb.c ****   if(newBB != NULL) {
 408               		.loc 1 89 0
 409 0284 8981      		ldd r24,Y+1
 410 0286 9A81      		ldd r25,Y+2
 411 0288 892B      		or r24,r25
 412 028a 01F4      		brne .+2
 413 028c 00C0      		rjmp .L9
  90:lp_solve_5.5/lp_mipbb.c **** 
  91:lp_solve_5.5/lp_mipbb.c ****     newBB->varno = varno;
 414               		.loc 1 91 0
 415 028e 8981      		ldd r24,Y+1
 416 0290 9A81      		ldd r25,Y+2
 417 0292 2C89      		ldd r18,Y+20
 418 0294 3D89      		ldd r19,Y+21
 419 0296 FC01      		movw r30,r24
 420 0298 3783      		std Z+7,r19
 421 029a 2683      		std Z+6,r18
  92:lp_solve_5.5/lp_mipbb.c ****     newBB->vartype = vartype;
 422               		.loc 1 92 0
 423 029c 8981      		ldd r24,Y+1
 424 029e 9A81      		ldd r25,Y+2
 425 02a0 2E89      		ldd r18,Y+22
 426 02a2 3F89      		ldd r19,Y+23
 427 02a4 FC01      		movw r30,r24
 428 02a6 3187      		std Z+9,r19
 429 02a8 2087      		std Z+8,r18
  93:lp_solve_5.5/lp_mipbb.c ****     newBB->lastvarcus = varcus;
 430               		.loc 1 93 0
 431 02aa 8981      		ldd r24,Y+1
 432 02ac 9A81      		ldd r25,Y+2
 433 02ae 288D      		ldd r18,Y+24
 434 02b0 398D      		ldd r19,Y+25
 435 02b2 FC01      		movw r30,r24
 436 02b4 3387      		std Z+11,r19
 437 02b6 2287      		std Z+10,r18
  94:lp_solve_5.5/lp_mipbb.c ****     incrementUndoLadder(lp->bb_lowerchange);
 438               		.loc 1 94 0
 439 02b8 8889      		ldd r24,Y+16
 440 02ba 9989      		ldd r25,Y+17
 441 02bc 845B      		subi r24,-76
 442 02be 9C4F      		sbci r25,-4
 443 02c0 FC01      		movw r30,r24
 444 02c2 8081      		ld r24,Z
 445 02c4 9181      		ldd r25,Z+1
 446 02c6 0E94 0000 		call incrementUndoLadder
  95:lp_solve_5.5/lp_mipbb.c ****     newBB->LBtrack++;
 447               		.loc 1 95 0
 448 02ca 8981      		ldd r24,Y+1
 449 02cc 9A81      		ldd r25,Y+2
 450 02ce FC01      		movw r30,r24
 451 02d0 86A5      		ldd r24,Z+46
 452 02d2 97A5      		ldd r25,Z+47
 453 02d4 9C01      		movw r18,r24
 454 02d6 2F5F      		subi r18,-1
 455 02d8 3F4F      		sbci r19,-1
 456 02da 8981      		ldd r24,Y+1
 457 02dc 9A81      		ldd r25,Y+2
 458 02de FC01      		movw r30,r24
 459 02e0 37A7      		std Z+47,r19
 460 02e2 26A7      		std Z+46,r18
  96:lp_solve_5.5/lp_mipbb.c ****     incrementUndoLadder(lp->bb_upperchange);
 461               		.loc 1 96 0
 462 02e4 8889      		ldd r24,Y+16
 463 02e6 9989      		ldd r25,Y+17
 464 02e8 865B      		subi r24,-74
 465 02ea 9C4F      		sbci r25,-4
 466 02ec FC01      		movw r30,r24
 467 02ee 8081      		ld r24,Z
 468 02f0 9181      		ldd r25,Z+1
 469 02f2 0E94 0000 		call incrementUndoLadder
  97:lp_solve_5.5/lp_mipbb.c ****     newBB->UBtrack++;
 470               		.loc 1 97 0
 471 02f6 8981      		ldd r24,Y+1
 472 02f8 9A81      		ldd r25,Y+2
 473 02fa FC01      		movw r30,r24
 474 02fc 84A5      		ldd r24,Z+44
 475 02fe 95A5      		ldd r25,Z+45
 476 0300 9C01      		movw r18,r24
 477 0302 2F5F      		subi r18,-1
 478 0304 3F4F      		sbci r19,-1
 479 0306 8981      		ldd r24,Y+1
 480 0308 9A81      		ldd r25,Y+2
 481 030a FC01      		movw r30,r24
 482 030c 35A7      		std Z+45,r19
 483 030e 24A7      		std Z+44,r18
  98:lp_solve_5.5/lp_mipbb.c **** 
  99:lp_solve_5.5/lp_mipbb.c ****     /* Adjust variable fixing/bound tightening based on the last reduced cost */
 100:lp_solve_5.5/lp_mipbb.c ****     if((parentBB != NULL) && (parentBB->lastrcf > 0)) {
 484               		.loc 1 100 0
 485 0310 8A89      		ldd r24,Y+18
 486 0312 9B89      		ldd r25,Y+19
 487 0314 892B      		or r24,r25
 488 0316 01F4      		brne .+2
 489 0318 00C0      		rjmp .L10
 490               		.loc 1 100 0 is_stmt 0 discriminator 1
 491 031a 8A89      		ldd r24,Y+18
 492 031c 9B89      		ldd r25,Y+19
 493 031e FC01      		movw r30,r24
 494 0320 8485      		ldd r24,Z+12
 495 0322 9585      		ldd r25,Z+13
 496 0324 1816      		cp __zero_reg__,r24
 497 0326 1906      		cpc __zero_reg__,r25
 498 0328 04F0      		brlt .+2
 499 032a 00C0      		rjmp .L10
 500               	.LBB2:
 101:lp_solve_5.5/lp_mipbb.c ****       MYBOOL isINT;
 102:lp_solve_5.5/lp_mipbb.c ****       int    k, ii, nfixed = 0, ntighten = 0;
 501               		.loc 1 102 0 is_stmt 1
 502 032c 1E82      		std Y+6,__zero_reg__
 503 032e 1D82      		std Y+5,__zero_reg__
 504 0330 1886      		std Y+8,__zero_reg__
 505 0332 1F82      		std Y+7,__zero_reg__
 103:lp_solve_5.5/lp_mipbb.c ****       REAL   deltaUL;
 104:lp_solve_5.5/lp_mipbb.c **** 
 105:lp_solve_5.5/lp_mipbb.c ****       for(k = 1; k <= lp->nzdrow[0]; k++) {
 506               		.loc 1 105 0
 507 0334 81E0      		ldi r24,lo8(1)
 508 0336 90E0      		ldi r25,0
 509 0338 9C83      		std Y+4,r25
 510 033a 8B83      		std Y+3,r24
 511 033c 00C0      		rjmp .L11
 512               	.L29:
 106:lp_solve_5.5/lp_mipbb.c ****         ii = lp->nzdrow[k];
 513               		.loc 1 106 0
 514 033e 8889      		ldd r24,Y+16
 515 0340 9989      		ldd r25,Y+17
 516 0342 845E      		subi r24,-28
 517 0344 9D4F      		sbci r25,-3
 518 0346 FC01      		movw r30,r24
 519 0348 2081      		ld r18,Z
 520 034a 3181      		ldd r19,Z+1
 521 034c 8B81      		ldd r24,Y+3
 522 034e 9C81      		ldd r25,Y+4
 523 0350 880F      		lsl r24
 524 0352 991F      		rol r25
 525 0354 820F      		add r24,r18
 526 0356 931F      		adc r25,r19
 527 0358 FC01      		movw r30,r24
 528 035a 8081      		ld r24,Z
 529 035c 9181      		ldd r25,Z+1
 530 035e 9A87      		std Y+10,r25
 531 0360 8987      		std Y+9,r24
 107:lp_solve_5.5/lp_mipbb.c **** #ifdef UseMilpSlacksRCF  /* Check if we should include ranged constraints */
 108:lp_solve_5.5/lp_mipbb.c ****         isINT = FALSE;
 109:lp_solve_5.5/lp_mipbb.c **** #else
 110:lp_solve_5.5/lp_mipbb.c ****         if(ii <= lp->rows)
 532               		.loc 1 110 0
 533 0362 8889      		ldd r24,Y+16
 534 0364 9989      		ldd r25,Y+17
 535 0366 8651      		subi r24,22
 536 0368 9E4F      		sbci r25,-2
 537 036a FC01      		movw r30,r24
 538 036c 2081      		ld r18,Z
 539 036e 3181      		ldd r19,Z+1
 540 0370 8985      		ldd r24,Y+9
 541 0372 9A85      		ldd r25,Y+10
 542 0374 2817      		cp r18,r24
 543 0376 3907      		cpc r19,r25
 544 0378 04F0      		brlt .+2
 545 037a 00C0      		rjmp .L45
 111:lp_solve_5.5/lp_mipbb.c ****           continue;
 112:lp_solve_5.5/lp_mipbb.c ****         isINT = is_int(lp, ii-lp->rows);
 546               		.loc 1 112 0
 547 037c 8889      		ldd r24,Y+16
 548 037e 9989      		ldd r25,Y+17
 549 0380 8651      		subi r24,22
 550 0382 9E4F      		sbci r25,-2
 551 0384 FC01      		movw r30,r24
 552 0386 8081      		ld r24,Z
 553 0388 9181      		ldd r25,Z+1
 554 038a 2985      		ldd r18,Y+9
 555 038c 3A85      		ldd r19,Y+10
 556 038e 281B      		sub r18,r24
 557 0390 390B      		sbc r19,r25
 558 0392 8889      		ldd r24,Y+16
 559 0394 9989      		ldd r25,Y+17
 560 0396 B901      		movw r22,r18
 561 0398 0E94 0000 		call is_int
 562 039c 8B87      		std Y+11,r24
 113:lp_solve_5.5/lp_mipbb.c **** #endif
 114:lp_solve_5.5/lp_mipbb.c **** #ifndef UseMilpExpandedRCF  /* Don't include non-integers if it is not defined */
 115:lp_solve_5.5/lp_mipbb.c ****         if(!isINT)
 116:lp_solve_5.5/lp_mipbb.c ****           continue;
 117:lp_solve_5.5/lp_mipbb.c **** #endif
 118:lp_solve_5.5/lp_mipbb.c ****         switch(abs(rcfbound_BB(newBB, ii, isINT, &deltaUL, NULL))) {
 563               		.loc 1 118 0
 564 039e 9E01      		movw r18,r28
 565 03a0 245F      		subi r18,-12
 566 03a2 3F4F      		sbci r19,-1
 567 03a4 6985      		ldd r22,Y+9
 568 03a6 7A85      		ldd r23,Y+10
 569 03a8 8981      		ldd r24,Y+1
 570 03aa 9A81      		ldd r25,Y+2
 571 03ac 00E0      		ldi r16,0
 572 03ae 10E0      		ldi r17,0
 573 03b0 4B85      		ldd r20,Y+11
 574 03b2 0E94 0000 		call rcfbound_BB
 575 03b6 9923      		tst r25
 576 03b8 04F4      		brge .L14
 577 03ba 9195      		neg r25
 578 03bc 8195      		neg r24
 579 03be 9109      		sbc r25,__zero_reg__
 580               	.L14:
 581 03c0 8130      		cpi r24,1
 582 03c2 9105      		cpc r25,__zero_reg__
 583 03c4 01F0      		breq .L16
 584 03c6 0297      		sbiw r24,2
 585 03c8 01F4      		brne .+2
 586 03ca 00C0      		rjmp .L17
 119:lp_solve_5.5/lp_mipbb.c ****           case LE: SETMIN(deltaUL, newBB->upbo[ii]);
 120:lp_solve_5.5/lp_mipbb.c ****                    SETMAX(deltaUL, newBB->lowbo[ii]);
 121:lp_solve_5.5/lp_mipbb.c ****                    modifyUndoLadder(lp->bb_upperchange, ii, newBB->upbo, deltaUL);
 122:lp_solve_5.5/lp_mipbb.c ****                    break;
 123:lp_solve_5.5/lp_mipbb.c ****           case GE: SETMAX(deltaUL, newBB->lowbo[ii]);
 124:lp_solve_5.5/lp_mipbb.c ****                    SETMIN(deltaUL, newBB->upbo[ii]);
 125:lp_solve_5.5/lp_mipbb.c ****                    modifyUndoLadder(lp->bb_lowerchange, ii, newBB->lowbo, deltaUL);
 126:lp_solve_5.5/lp_mipbb.c ****                    break;
 127:lp_solve_5.5/lp_mipbb.c ****           default: continue;
 587               		.loc 1 127 0
 588 03cc 00C0      		rjmp .L13
 589               	.L16:
 119:lp_solve_5.5/lp_mipbb.c ****           case LE: SETMIN(deltaUL, newBB->upbo[ii]);
 590               		.loc 1 119 0
 591 03ce 8981      		ldd r24,Y+1
 592 03d0 9A81      		ldd r25,Y+2
 593 03d2 FC01      		movw r30,r24
 594 03d4 20A1      		ldd r18,Z+32
 595 03d6 31A1      		ldd r19,Z+33
 596 03d8 8985      		ldd r24,Y+9
 597 03da 9A85      		ldd r25,Y+10
 598 03dc 880F      		lsl r24
 599 03de 991F      		rol r25
 600 03e0 880F      		lsl r24
 601 03e2 991F      		rol r25
 602 03e4 820F      		add r24,r18
 603 03e6 931F      		adc r25,r19
 604 03e8 FC01      		movw r30,r24
 605 03ea 8081      		ld r24,Z
 606 03ec 9181      		ldd r25,Z+1
 607 03ee A281      		ldd r26,Z+2
 608 03f0 B381      		ldd r27,Z+3
 609 03f2 2C85      		ldd r18,Y+12
 610 03f4 3D85      		ldd r19,Y+13
 611 03f6 4E85      		ldd r20,Y+14
 612 03f8 5F85      		ldd r21,Y+15
 613 03fa BC01      		movw r22,r24
 614 03fc CD01      		movw r24,r26
 615 03fe 0E94 0000 		call __ltsf2
 616 0402 8823      		tst r24
 617 0404 04F4      		brge .L18
 119:lp_solve_5.5/lp_mipbb.c ****           case LE: SETMIN(deltaUL, newBB->upbo[ii]);
 618               		.loc 1 119 0 is_stmt 0 discriminator 1
 619 0406 8981      		ldd r24,Y+1
 620 0408 9A81      		ldd r25,Y+2
 621 040a FC01      		movw r30,r24
 622 040c 20A1      		ldd r18,Z+32
 623 040e 31A1      		ldd r19,Z+33
 624 0410 8985      		ldd r24,Y+9
 625 0412 9A85      		ldd r25,Y+10
 626 0414 880F      		lsl r24
 627 0416 991F      		rol r25
 628 0418 880F      		lsl r24
 629 041a 991F      		rol r25
 630 041c 820F      		add r24,r18
 631 041e 931F      		adc r25,r19
 632 0420 FC01      		movw r30,r24
 633 0422 8081      		ld r24,Z
 634 0424 9181      		ldd r25,Z+1
 635 0426 A281      		ldd r26,Z+2
 636 0428 B381      		ldd r27,Z+3
 637 042a 8C87      		std Y+12,r24
 638 042c 9D87      		std Y+13,r25
 639 042e AE87      		std Y+14,r26
 640 0430 BF87      		std Y+15,r27
 641               	.L18:
 120:lp_solve_5.5/lp_mipbb.c ****                    modifyUndoLadder(lp->bb_upperchange, ii, newBB->upbo, deltaUL);
 642               		.loc 1 120 0 is_stmt 1
 643 0432 8981      		ldd r24,Y+1
 644 0434 9A81      		ldd r25,Y+2
 645 0436 FC01      		movw r30,r24
 646 0438 22A1      		ldd r18,Z+34
 647 043a 33A1      		ldd r19,Z+35
 648 043c 8985      		ldd r24,Y+9
 649 043e 9A85      		ldd r25,Y+10
 650 0440 880F      		lsl r24
 651 0442 991F      		rol r25
 652 0444 880F      		lsl r24
 653 0446 991F      		rol r25
 654 0448 820F      		add r24,r18
 655 044a 931F      		adc r25,r19
 656 044c FC01      		movw r30,r24
 657 044e 8081      		ld r24,Z
 658 0450 9181      		ldd r25,Z+1
 659 0452 A281      		ldd r26,Z+2
 660 0454 B381      		ldd r27,Z+3
 661 0456 2C85      		ldd r18,Y+12
 662 0458 3D85      		ldd r19,Y+13
 663 045a 4E85      		ldd r20,Y+14
 664 045c 5F85      		ldd r21,Y+15
 665 045e BC01      		movw r22,r24
 666 0460 CD01      		movw r24,r26
 667 0462 0E94 0000 		call __gtsf2
 668 0466 1816      		cp __zero_reg__,r24
 669 0468 04F4      		brge .L20
 120:lp_solve_5.5/lp_mipbb.c ****                    modifyUndoLadder(lp->bb_upperchange, ii, newBB->upbo, deltaUL);
 670               		.loc 1 120 0 is_stmt 0 discriminator 1
 671 046a 8981      		ldd r24,Y+1
 672 046c 9A81      		ldd r25,Y+2
 673 046e FC01      		movw r30,r24
 674 0470 22A1      		ldd r18,Z+34
 675 0472 33A1      		ldd r19,Z+35
 676 0474 8985      		ldd r24,Y+9
 677 0476 9A85      		ldd r25,Y+10
 678 0478 880F      		lsl r24
 679 047a 991F      		rol r25
 680 047c 880F      		lsl r24
 681 047e 991F      		rol r25
 682 0480 820F      		add r24,r18
 683 0482 931F      		adc r25,r19
 684 0484 FC01      		movw r30,r24
 685 0486 8081      		ld r24,Z
 686 0488 9181      		ldd r25,Z+1
 687 048a A281      		ldd r26,Z+2
 688 048c B381      		ldd r27,Z+3
 689 048e 8C87      		std Y+12,r24
 690 0490 9D87      		std Y+13,r25
 691 0492 AE87      		std Y+14,r26
 692 0494 BF87      		std Y+15,r27
 693               	.L20:
 121:lp_solve_5.5/lp_mipbb.c ****                    break;
 694               		.loc 1 121 0 is_stmt 1
 695 0496 8C85      		ldd r24,Y+12
 696 0498 9D85      		ldd r25,Y+13
 697 049a AE85      		ldd r26,Y+14
 698 049c BF85      		ldd r27,Y+15
 699 049e 2981      		ldd r18,Y+1
 700 04a0 3A81      		ldd r19,Y+2
 701 04a2 F901      		movw r30,r18
 702 04a4 40A1      		ldd r20,Z+32
 703 04a6 51A1      		ldd r21,Z+33
 704 04a8 2889      		ldd r18,Y+16
 705 04aa 3989      		ldd r19,Y+17
 706 04ac 265B      		subi r18,-74
 707 04ae 3C4F      		sbci r19,-4
 708 04b0 F901      		movw r30,r18
 709 04b2 0190      		ld __tmp_reg__,Z+
 710 04b4 F081      		ld r31,Z
 711 04b6 E02D      		mov r30,__tmp_reg__
 712 04b8 FB8F      		std Y+27,r31
 713 04ba EA8F      		std Y+26,r30
 714 04bc 6985      		ldd r22,Y+9
 715 04be 7A85      		ldd r23,Y+10
 716 04c0 8C01      		movw r16,r24
 717 04c2 9D01      		movw r18,r26
 718 04c4 8A8D      		ldd r24,Y+26
 719 04c6 9B8D      		ldd r25,Y+27
 720 04c8 0E94 0000 		call modifyUndoLadder
 122:lp_solve_5.5/lp_mipbb.c ****           case GE: SETMAX(deltaUL, newBB->lowbo[ii]);
 721               		.loc 1 122 0
 722 04cc 00C0      		rjmp .L22
 723               	.L17:
 123:lp_solve_5.5/lp_mipbb.c ****                    SETMIN(deltaUL, newBB->upbo[ii]);
 724               		.loc 1 123 0
 725 04ce 8981      		ldd r24,Y+1
 726 04d0 9A81      		ldd r25,Y+2
 727 04d2 FC01      		movw r30,r24
 728 04d4 22A1      		ldd r18,Z+34
 729 04d6 33A1      		ldd r19,Z+35
 730 04d8 8985      		ldd r24,Y+9
 731 04da 9A85      		ldd r25,Y+10
 732 04dc 880F      		lsl r24
 733 04de 991F      		rol r25
 734 04e0 880F      		lsl r24
 735 04e2 991F      		rol r25
 736 04e4 820F      		add r24,r18
 737 04e6 931F      		adc r25,r19
 738 04e8 FC01      		movw r30,r24
 739 04ea 8081      		ld r24,Z
 740 04ec 9181      		ldd r25,Z+1
 741 04ee A281      		ldd r26,Z+2
 742 04f0 B381      		ldd r27,Z+3
 743 04f2 2C85      		ldd r18,Y+12
 744 04f4 3D85      		ldd r19,Y+13
 745 04f6 4E85      		ldd r20,Y+14
 746 04f8 5F85      		ldd r21,Y+15
 747 04fa BC01      		movw r22,r24
 748 04fc CD01      		movw r24,r26
 749 04fe 0E94 0000 		call __gtsf2
 750 0502 1816      		cp __zero_reg__,r24
 751 0504 04F4      		brge .L23
 123:lp_solve_5.5/lp_mipbb.c ****                    SETMIN(deltaUL, newBB->upbo[ii]);
 752               		.loc 1 123 0 is_stmt 0 discriminator 1
 753 0506 8981      		ldd r24,Y+1
 754 0508 9A81      		ldd r25,Y+2
 755 050a FC01      		movw r30,r24
 756 050c 22A1      		ldd r18,Z+34
 757 050e 33A1      		ldd r19,Z+35
 758 0510 8985      		ldd r24,Y+9
 759 0512 9A85      		ldd r25,Y+10
 760 0514 880F      		lsl r24
 761 0516 991F      		rol r25
 762 0518 880F      		lsl r24
 763 051a 991F      		rol r25
 764 051c 820F      		add r24,r18
 765 051e 931F      		adc r25,r19
 766 0520 FC01      		movw r30,r24
 767 0522 8081      		ld r24,Z
 768 0524 9181      		ldd r25,Z+1
 769 0526 A281      		ldd r26,Z+2
 770 0528 B381      		ldd r27,Z+3
 771 052a 8C87      		std Y+12,r24
 772 052c 9D87      		std Y+13,r25
 773 052e AE87      		std Y+14,r26
 774 0530 BF87      		std Y+15,r27
 775               	.L23:
 124:lp_solve_5.5/lp_mipbb.c ****                    modifyUndoLadder(lp->bb_lowerchange, ii, newBB->lowbo, deltaUL);
 776               		.loc 1 124 0 is_stmt 1
 777 0532 8981      		ldd r24,Y+1
 778 0534 9A81      		ldd r25,Y+2
 779 0536 FC01      		movw r30,r24
 780 0538 20A1      		ldd r18,Z+32
 781 053a 31A1      		ldd r19,Z+33
 782 053c 8985      		ldd r24,Y+9
 783 053e 9A85      		ldd r25,Y+10
 784 0540 880F      		lsl r24
 785 0542 991F      		rol r25
 786 0544 880F      		lsl r24
 787 0546 991F      		rol r25
 788 0548 820F      		add r24,r18
 789 054a 931F      		adc r25,r19
 790 054c FC01      		movw r30,r24
 791 054e 8081      		ld r24,Z
 792 0550 9181      		ldd r25,Z+1
 793 0552 A281      		ldd r26,Z+2
 794 0554 B381      		ldd r27,Z+3
 795 0556 2C85      		ldd r18,Y+12
 796 0558 3D85      		ldd r19,Y+13
 797 055a 4E85      		ldd r20,Y+14
 798 055c 5F85      		ldd r21,Y+15
 799 055e BC01      		movw r22,r24
 800 0560 CD01      		movw r24,r26
 801 0562 0E94 0000 		call __ltsf2
 802 0566 8823      		tst r24
 803 0568 04F4      		brge .L25
 124:lp_solve_5.5/lp_mipbb.c ****                    modifyUndoLadder(lp->bb_lowerchange, ii, newBB->lowbo, deltaUL);
 804               		.loc 1 124 0 is_stmt 0 discriminator 1
 805 056a 8981      		ldd r24,Y+1
 806 056c 9A81      		ldd r25,Y+2
 807 056e FC01      		movw r30,r24
 808 0570 20A1      		ldd r18,Z+32
 809 0572 31A1      		ldd r19,Z+33
 810 0574 8985      		ldd r24,Y+9
 811 0576 9A85      		ldd r25,Y+10
 812 0578 880F      		lsl r24
 813 057a 991F      		rol r25
 814 057c 880F      		lsl r24
 815 057e 991F      		rol r25
 816 0580 820F      		add r24,r18
 817 0582 931F      		adc r25,r19
 818 0584 FC01      		movw r30,r24
 819 0586 8081      		ld r24,Z
 820 0588 9181      		ldd r25,Z+1
 821 058a A281      		ldd r26,Z+2
 822 058c B381      		ldd r27,Z+3
 823 058e 8C87      		std Y+12,r24
 824 0590 9D87      		std Y+13,r25
 825 0592 AE87      		std Y+14,r26
 826 0594 BF87      		std Y+15,r27
 827               	.L25:
 125:lp_solve_5.5/lp_mipbb.c ****                    break;
 828               		.loc 1 125 0 is_stmt 1
 829 0596 8C85      		ldd r24,Y+12
 830 0598 9D85      		ldd r25,Y+13
 831 059a AE85      		ldd r26,Y+14
 832 059c BF85      		ldd r27,Y+15
 833 059e 2981      		ldd r18,Y+1
 834 05a0 3A81      		ldd r19,Y+2
 835 05a2 F901      		movw r30,r18
 836 05a4 42A1      		ldd r20,Z+34
 837 05a6 53A1      		ldd r21,Z+35
 838 05a8 2889      		ldd r18,Y+16
 839 05aa 3989      		ldd r19,Y+17
 840 05ac 245B      		subi r18,-76
 841 05ae 3C4F      		sbci r19,-4
 842 05b0 F901      		movw r30,r18
 843 05b2 0190      		ld __tmp_reg__,Z+
 844 05b4 F081      		ld r31,Z
 845 05b6 E02D      		mov r30,__tmp_reg__
 846 05b8 FB8F      		std Y+27,r31
 847 05ba EA8F      		std Y+26,r30
 848 05bc 6985      		ldd r22,Y+9
 849 05be 7A85      		ldd r23,Y+10
 850 05c0 8C01      		movw r16,r24
 851 05c2 9D01      		movw r18,r26
 852 05c4 8A8D      		ldd r24,Y+26
 853 05c6 9B8D      		ldd r25,Y+27
 854 05c8 0E94 0000 		call modifyUndoLadder
 126:lp_solve_5.5/lp_mipbb.c ****           default: continue;
 855               		.loc 1 126 0
 856 05cc 0000      		nop
 857               	.L22:
 128:lp_solve_5.5/lp_mipbb.c ****         }
 129:lp_solve_5.5/lp_mipbb.c ****         if(newBB->upbo[ii] == newBB->lowbo[ii])
 858               		.loc 1 129 0
 859 05ce 8981      		ldd r24,Y+1
 860 05d0 9A81      		ldd r25,Y+2
 861 05d2 FC01      		movw r30,r24
 862 05d4 20A1      		ldd r18,Z+32
 863 05d6 31A1      		ldd r19,Z+33
 864 05d8 8985      		ldd r24,Y+9
 865 05da 9A85      		ldd r25,Y+10
 866 05dc 880F      		lsl r24
 867 05de 991F      		rol r25
 868 05e0 880F      		lsl r24
 869 05e2 991F      		rol r25
 870 05e4 820F      		add r24,r18
 871 05e6 931F      		adc r25,r19
 872 05e8 FC01      		movw r30,r24
 873 05ea 8081      		ld r24,Z
 874 05ec 9181      		ldd r25,Z+1
 875 05ee A281      		ldd r26,Z+2
 876 05f0 B381      		ldd r27,Z+3
 877 05f2 2981      		ldd r18,Y+1
 878 05f4 3A81      		ldd r19,Y+2
 879 05f6 F901      		movw r30,r18
 880 05f8 42A1      		ldd r20,Z+34
 881 05fa 53A1      		ldd r21,Z+35
 882 05fc 2985      		ldd r18,Y+9
 883 05fe 3A85      		ldd r19,Y+10
 884 0600 220F      		lsl r18
 885 0602 331F      		rol r19
 886 0604 220F      		lsl r18
 887 0606 331F      		rol r19
 888 0608 240F      		add r18,r20
 889 060a 351F      		adc r19,r21
 890 060c F901      		movw r30,r18
 891 060e 2081      		ld r18,Z
 892 0610 3181      		ldd r19,Z+1
 893 0612 4281      		ldd r20,Z+2
 894 0614 5381      		ldd r21,Z+3
 895 0616 BC01      		movw r22,r24
 896 0618 CD01      		movw r24,r26
 897 061a 0E94 0000 		call __eqsf2
 898 061e 8823      		tst r24
 899 0620 01F4      		brne .L44
 130:lp_solve_5.5/lp_mipbb.c ****           nfixed++;
 900               		.loc 1 130 0
 901 0622 8D81      		ldd r24,Y+5
 902 0624 9E81      		ldd r25,Y+6
 903 0626 0196      		adiw r24,1
 904 0628 9E83      		std Y+6,r25
 905 062a 8D83      		std Y+5,r24
 906 062c 00C0      		rjmp .L13
 907               	.L44:
 131:lp_solve_5.5/lp_mipbb.c ****         else
 132:lp_solve_5.5/lp_mipbb.c ****           ntighten++;
 908               		.loc 1 132 0
 909 062e 8F81      		ldd r24,Y+7
 910 0630 9885      		ldd r25,Y+8
 911 0632 0196      		adiw r24,1
 912 0634 9887      		std Y+8,r25
 913 0636 8F83      		std Y+7,r24
 914 0638 00C0      		rjmp .L13
 915               	.L45:
 111:lp_solve_5.5/lp_mipbb.c ****         isINT = is_int(lp, ii-lp->rows);
 916               		.loc 1 111 0
 917 063a 0000      		nop
 918               	.L13:
 105:lp_solve_5.5/lp_mipbb.c ****         ii = lp->nzdrow[k];
 919               		.loc 1 105 0 discriminator 2
 920 063c 8B81      		ldd r24,Y+3
 921 063e 9C81      		ldd r25,Y+4
 922 0640 0196      		adiw r24,1
 923 0642 9C83      		std Y+4,r25
 924 0644 8B83      		std Y+3,r24
 925               	.L11:
 105:lp_solve_5.5/lp_mipbb.c ****         ii = lp->nzdrow[k];
 926               		.loc 1 105 0 is_stmt 0 discriminator 1
 927 0646 8889      		ldd r24,Y+16
 928 0648 9989      		ldd r25,Y+17
 929 064a 845E      		subi r24,-28
 930 064c 9D4F      		sbci r25,-3
 931 064e FC01      		movw r30,r24
 932 0650 8081      		ld r24,Z
 933 0652 9181      		ldd r25,Z+1
 934 0654 FC01      		movw r30,r24
 935 0656 2081      		ld r18,Z
 936 0658 3181      		ldd r19,Z+1
 937 065a 8B81      		ldd r24,Y+3
 938 065c 9C81      		ldd r25,Y+4
 939 065e 2817      		cp r18,r24
 940 0660 3907      		cpc r19,r25
 941 0662 04F0      		brlt .+2
 942 0664 00C0      		rjmp .L29
 133:lp_solve_5.5/lp_mipbb.c ****       }
 134:lp_solve_5.5/lp_mipbb.c ****       if(lp->bb_trace) {
 943               		.loc 1 134 0 is_stmt 1
 944 0666 8889      		ldd r24,Y+16
 945 0668 9989      		ldd r25,Y+17
 946 066a 8D5F      		subi r24,-3
 947 066c 9D4F      		sbci r25,-3
 948 066e FC01      		movw r30,r24
 949 0670 8081      		ld r24,Z
 950 0672 8823      		tst r24
 951 0674 01F0      		breq .L10
 135:lp_solve_5.5/lp_mipbb.c ****         report(lp, DETAILED,
 952               		.loc 1 135 0
 953 0676 8885      		ldd r24,Y+8
 954 0678 8F93      		push r24
 955 067a 8F81      		ldd r24,Y+7
 956 067c 8F93      		push r24
 957 067e 8E81      		ldd r24,Y+6
 958 0680 8F93      		push r24
 959 0682 8D81      		ldd r24,Y+5
 960 0684 8F93      		push r24
 961 0686 80E0      		ldi r24,lo8(.LC0)
 962 0688 90E0      		ldi r25,hi8(.LC0)
 963 068a 892F      		mov r24,r25
 964 068c 8F93      		push r24
 965 068e 80E0      		ldi r24,lo8(.LC0)
 966 0690 90E0      		ldi r25,hi8(.LC0)
 967 0692 8F93      		push r24
 968 0694 1F92      		push __zero_reg__
 969 0696 85E0      		ldi r24,lo8(5)
 970 0698 8F93      		push r24
 971 069a 8989      		ldd r24,Y+17
 972 069c 8F93      		push r24
 973 069e 8889      		ldd r24,Y+16
 974 06a0 8F93      		push r24
 975 06a2 0E94 0000 		call report
 976 06a6 6DB7      		in r22,__SP_L__
 977 06a8 7EB7      		in r23,__SP_H__
 978 06aa 665F      		subi r22,-10
 979 06ac 7F4F      		sbci r23,-1
 980 06ae 0FB6      		in __tmp_reg__,__SREG__
 981 06b0 F894      		cli
 982 06b2 DEBF      		out __SP_H__,r29
 983 06b4 0FBE      		out __SREG__,__tmp_reg__
 984 06b6 CDBF      		out __SP_L__,r28
 985               	.L10:
 986               	.LBE2:
 136:lp_solve_5.5/lp_mipbb.c ****                  "push_BB: Used reduced cost to fix %d variables and tighten %d bounds\n",
 137:lp_solve_5.5/lp_mipbb.c ****                   nfixed, ntighten);
 138:lp_solve_5.5/lp_mipbb.c ****       }
 139:lp_solve_5.5/lp_mipbb.c ****     }
 140:lp_solve_5.5/lp_mipbb.c **** 
 141:lp_solve_5.5/lp_mipbb.c ****     /* Handle case where we are pushing at the end */
 142:lp_solve_5.5/lp_mipbb.c ****     if(parentBB == lp->bb_bounds)
 987               		.loc 1 142 0
 988 06b8 8889      		ldd r24,Y+16
 989 06ba 9989      		ldd r25,Y+17
 990 06bc 8654      		subi r24,70
 991 06be 9D4F      		sbci r25,-3
 992 06c0 FC01      		movw r30,r24
 993 06c2 2081      		ld r18,Z
 994 06c4 3181      		ldd r19,Z+1
 995 06c6 8A89      		ldd r24,Y+18
 996 06c8 9B89      		ldd r25,Y+19
 997 06ca 2817      		cp r18,r24
 998 06cc 3907      		cpc r19,r25
 999 06ce 01F4      		brne .L31
 143:lp_solve_5.5/lp_mipbb.c ****       lp->bb_bounds = newBB;
 1000               		.loc 1 143 0
 1001 06d0 8889      		ldd r24,Y+16
 1002 06d2 9989      		ldd r25,Y+17
 1003 06d4 8654      		subi r24,70
 1004 06d6 9D4F      		sbci r25,-3
 1005 06d8 2981      		ldd r18,Y+1
 1006 06da 3A81      		ldd r19,Y+2
 1007 06dc FC01      		movw r30,r24
 1008 06de 3183      		std Z+1,r19
 1009 06e0 2083      		st Z,r18
 1010 06e2 00C0      		rjmp .L32
 1011               	.L31:
 144:lp_solve_5.5/lp_mipbb.c ****     /* Handle case where we are pushing in the middle */
 145:lp_solve_5.5/lp_mipbb.c ****     else
 146:lp_solve_5.5/lp_mipbb.c ****       newBB->child = parentBB->child;
 1012               		.loc 1 146 0
 1013 06e4 8A89      		ldd r24,Y+18
 1014 06e6 9B89      		ldd r25,Y+19
 1015 06e8 FC01      		movw r30,r24
 1016 06ea 2281      		ldd r18,Z+2
 1017 06ec 3381      		ldd r19,Z+3
 1018 06ee 8981      		ldd r24,Y+1
 1019 06f0 9A81      		ldd r25,Y+2
 1020 06f2 FC01      		movw r30,r24
 1021 06f4 3383      		std Z+3,r19
 1022 06f6 2283      		std Z+2,r18
 1023               	.L32:
 147:lp_solve_5.5/lp_mipbb.c ****     if(parentBB != NULL)
 1024               		.loc 1 147 0
 1025 06f8 8A89      		ldd r24,Y+18
 1026 06fa 9B89      		ldd r25,Y+19
 1027 06fc 892B      		or r24,r25
 1028 06fe 01F0      		breq .L33
 148:lp_solve_5.5/lp_mipbb.c ****       parentBB->child = newBB;
 1029               		.loc 1 148 0
 1030 0700 8A89      		ldd r24,Y+18
 1031 0702 9B89      		ldd r25,Y+19
 1032 0704 2981      		ldd r18,Y+1
 1033 0706 3A81      		ldd r19,Y+2
 1034 0708 FC01      		movw r30,r24
 1035 070a 3383      		std Z+3,r19
 1036 070c 2283      		std Z+2,r18
 1037               	.L33:
 149:lp_solve_5.5/lp_mipbb.c **** 
 150:lp_solve_5.5/lp_mipbb.c ****     lp->bb_level++;
 1038               		.loc 1 150 0
 1039 070e 8889      		ldd r24,Y+16
 1040 0710 9989      		ldd r25,Y+17
 1041 0712 805D      		subi r24,-48
 1042 0714 9C4F      		sbci r25,-4
 1043 0716 FC01      		movw r30,r24
 1044 0718 8081      		ld r24,Z
 1045 071a 9181      		ldd r25,Z+1
 1046 071c 9C01      		movw r18,r24
 1047 071e 2F5F      		subi r18,-1
 1048 0720 3F4F      		sbci r19,-1
 1049 0722 8889      		ldd r24,Y+16
 1050 0724 9989      		ldd r25,Y+17
 1051 0726 805D      		subi r24,-48
 1052 0728 9C4F      		sbci r25,-4
 1053 072a FC01      		movw r30,r24
 1054 072c 3183      		std Z+1,r19
 1055 072e 2083      		st Z,r18
 151:lp_solve_5.5/lp_mipbb.c ****     if(lp->bb_level > lp->bb_maxlevel)
 1056               		.loc 1 151 0
 1057 0730 8889      		ldd r24,Y+16
 1058 0732 9989      		ldd r25,Y+17
 1059 0734 805D      		subi r24,-48
 1060 0736 9C4F      		sbci r25,-4
 1061 0738 FC01      		movw r30,r24
 1062 073a 2081      		ld r18,Z
 1063 073c 3181      		ldd r19,Z+1
 1064 073e 8889      		ldd r24,Y+16
 1065 0740 9989      		ldd r25,Y+17
 1066 0742 8E5C      		subi r24,-50
 1067 0744 9C4F      		sbci r25,-4
 1068 0746 FC01      		movw r30,r24
 1069 0748 8081      		ld r24,Z
 1070 074a 9181      		ldd r25,Z+1
 1071 074c 8217      		cp r24,r18
 1072 074e 9307      		cpc r25,r19
 1073 0750 04F4      		brge .L34
 152:lp_solve_5.5/lp_mipbb.c ****       lp->bb_maxlevel = lp->bb_level;
 1074               		.loc 1 152 0
 1075 0752 8889      		ldd r24,Y+16
 1076 0754 9989      		ldd r25,Y+17
 1077 0756 805D      		subi r24,-48
 1078 0758 9C4F      		sbci r25,-4
 1079 075a FC01      		movw r30,r24
 1080 075c 2081      		ld r18,Z
 1081 075e 3181      		ldd r19,Z+1
 1082 0760 8889      		ldd r24,Y+16
 1083 0762 9989      		ldd r25,Y+17
 1084 0764 8E5C      		subi r24,-50
 1085 0766 9C4F      		sbci r25,-4
 1086 0768 FC01      		movw r30,r24
 1087 076a 3183      		std Z+1,r19
 1088 076c 2083      		st Z,r18
 1089               	.L34:
 153:lp_solve_5.5/lp_mipbb.c **** 
 154:lp_solve_5.5/lp_mipbb.c ****     if(!initbranches_BB(newBB))
 1090               		.loc 1 154 0
 1091 076e 8981      		ldd r24,Y+1
 1092 0770 9A81      		ldd r25,Y+2
 1093 0772 0E94 0000 		call initbranches_BB
 1094 0776 8823      		tst r24
 1095 0778 01F4      		brne .L35
 155:lp_solve_5.5/lp_mipbb.c ****       newBB = pop_BB(newBB);
 1096               		.loc 1 155 0
 1097 077a 8981      		ldd r24,Y+1
 1098 077c 9A81      		ldd r25,Y+2
 1099 077e 0E94 0000 		call pop_BB
 1100 0782 9A83      		std Y+2,r25
 1101 0784 8983      		std Y+1,r24
 1102 0786 00C0      		rjmp .L9
 1103               	.L35:
 156:lp_solve_5.5/lp_mipbb.c ****     else if(MIP_count(lp) > 0) {
 1104               		.loc 1 156 0
 1105 0788 8889      		ldd r24,Y+16
 1106 078a 9989      		ldd r25,Y+17
 1107 078c 0E94 0000 		call MIP_count
 1108 0790 1816      		cp __zero_reg__,r24
 1109 0792 1906      		cpc __zero_reg__,r25
 1110 0794 04F0      		brlt .+2
 1111 0796 00C0      		rjmp .L9
 157:lp_solve_5.5/lp_mipbb.c ****       if( (lp->bb_level <= 1) && (lp->bb_varactive == NULL) &&
 1112               		.loc 1 157 0
 1113 0798 8889      		ldd r24,Y+16
 1114 079a 9989      		ldd r25,Y+17
 1115 079c 805D      		subi r24,-48
 1116 079e 9C4F      		sbci r25,-4
 1117 07a0 FC01      		movw r30,r24
 1118 07a2 8081      		ld r24,Z
 1119 07a4 9181      		ldd r25,Z+1
 1120 07a6 0297      		sbiw r24,2
 1121 07a8 04F4      		brge .L36
 1122               		.loc 1 157 0 is_stmt 0 discriminator 1
 1123 07aa 8889      		ldd r24,Y+16
 1124 07ac 9989      		ldd r25,Y+17
 1125 07ae 885B      		subi r24,-72
 1126 07b0 9C4F      		sbci r25,-4
 1127 07b2 FC01      		movw r30,r24
 1128 07b4 8081      		ld r24,Z
 1129 07b6 9181      		ldd r25,Z+1
 1130 07b8 892B      		or r24,r25
 1131 07ba 01F4      		brne .L36
 158:lp_solve_5.5/lp_mipbb.c ****           (!allocINT(lp, &lp->bb_varactive, lp->columns+1, TRUE) ||
 1132               		.loc 1 158 0 is_stmt 1 discriminator 2
 1133 07bc 8889      		ldd r24,Y+16
 1134 07be 9989      		ldd r25,Y+17
 1135 07c0 8451      		subi r24,20
 1136 07c2 9E4F      		sbci r25,-2
 1137 07c4 FC01      		movw r30,r24
 1138 07c6 8081      		ld r24,Z
 1139 07c8 9181      		ldd r25,Z+1
 1140 07ca AC01      		movw r20,r24
 1141 07cc 4F5F      		subi r20,-1
 1142 07ce 5F4F      		sbci r21,-1
 1143 07d0 8889      		ldd r24,Y+16
 1144 07d2 9989      		ldd r25,Y+17
 1145 07d4 BC01      		movw r22,r24
 1146 07d6 685B      		subi r22,-72
 1147 07d8 7C4F      		sbci r23,-4
 1148 07da 8889      		ldd r24,Y+16
 1149 07dc 9989      		ldd r25,Y+17
 1150 07de 21E0      		ldi r18,lo8(1)
 1151 07e0 0E94 0000 		call allocINT
 157:lp_solve_5.5/lp_mipbb.c ****       if( (lp->bb_level <= 1) && (lp->bb_varactive == NULL) &&
 1152               		.loc 1 157 0 discriminator 2
 1153 07e4 8823      		tst r24
 1154 07e6 01F0      		breq .L37
 159:lp_solve_5.5/lp_mipbb.c ****            !initcuts_BB(lp)) )
 1155               		.loc 1 159 0
 1156 07e8 8889      		ldd r24,Y+16
 1157 07ea 9989      		ldd r25,Y+17
 1158 07ec 0E94 0000 		call initcuts_BB
 158:lp_solve_5.5/lp_mipbb.c ****           (!allocINT(lp, &lp->bb_varactive, lp->columns+1, TRUE) ||
 1159               		.loc 1 158 0
 1160 07f0 8823      		tst r24
 1161 07f2 01F4      		brne .L36
 1162               	.L37:
 160:lp_solve_5.5/lp_mipbb.c ****         newBB = pop_BB(newBB);
 1163               		.loc 1 160 0
 1164 07f4 8981      		ldd r24,Y+1
 1165 07f6 9A81      		ldd r25,Y+2
 1166 07f8 0E94 0000 		call pop_BB
 1167 07fc 9A83      		std Y+2,r25
 1168 07fe 8983      		std Y+1,r24
 1169               	.L36:
 161:lp_solve_5.5/lp_mipbb.c ****       if(varno > 0) {
 1170               		.loc 1 161 0
 1171 0800 8C89      		ldd r24,Y+20
 1172 0802 9D89      		ldd r25,Y+21
 1173 0804 1816      		cp __zero_reg__,r24
 1174 0806 1906      		cpc __zero_reg__,r25
 1175 0808 04F4      		brge .L9
 162:lp_solve_5.5/lp_mipbb.c ****         lp->bb_varactive[varno-lp->rows]++;
 1176               		.loc 1 162 0
 1177 080a 8889      		ldd r24,Y+16
 1178 080c 9989      		ldd r25,Y+17
 1179 080e 885B      		subi r24,-72
 1180 0810 9C4F      		sbci r25,-4
 1181 0812 FC01      		movw r30,r24
 1182 0814 2081      		ld r18,Z
 1183 0816 3181      		ldd r19,Z+1
 1184 0818 8889      		ldd r24,Y+16
 1185 081a 9989      		ldd r25,Y+17
 1186 081c 8651      		subi r24,22
 1187 081e 9E4F      		sbci r25,-2
 1188 0820 FC01      		movw r30,r24
 1189 0822 8081      		ld r24,Z
 1190 0824 9181      		ldd r25,Z+1
 1191 0826 4C89      		ldd r20,Y+20
 1192 0828 5D89      		ldd r21,Y+21
 1193 082a BA01      		movw r22,r20
 1194 082c 681B      		sub r22,r24
 1195 082e 790B      		sbc r23,r25
 1196 0830 CB01      		movw r24,r22
 1197 0832 880F      		lsl r24
 1198 0834 991F      		rol r25
 1199 0836 820F      		add r24,r18
 1200 0838 931F      		adc r25,r19
 1201 083a FC01      		movw r30,r24
 1202 083c 2081      		ld r18,Z
 1203 083e 3181      		ldd r19,Z+1
 1204 0840 2F5F      		subi r18,-1
 1205 0842 3F4F      		sbci r19,-1
 1206 0844 FC01      		movw r30,r24
 1207 0846 3183      		std Z+1,r19
 1208 0848 2083      		st Z,r18
 1209               	.L9:
 163:lp_solve_5.5/lp_mipbb.c ****       }
 164:lp_solve_5.5/lp_mipbb.c ****     }
 165:lp_solve_5.5/lp_mipbb.c ****   }
 166:lp_solve_5.5/lp_mipbb.c ****   return( newBB );
 1210               		.loc 1 166 0
 1211 084a 8981      		ldd r24,Y+1
 1212 084c 9A81      		ldd r25,Y+2
 1213               	/* epilogue start */
 167:lp_solve_5.5/lp_mipbb.c **** }
 1214               		.loc 1 167 0
 1215 084e 6B96      		adiw r28,27
 1216 0850 0FB6      		in __tmp_reg__,__SREG__
 1217 0852 F894      		cli
 1218 0854 DEBF      		out __SP_H__,r29
 1219 0856 0FBE      		out __SREG__,__tmp_reg__
 1220 0858 CDBF      		out __SP_L__,r28
 1221 085a DF91      		pop r29
 1222 085c CF91      		pop r28
 1223 085e 1F91      		pop r17
 1224 0860 0F91      		pop r16
 1225 0862 0895      		ret
 1226               		.cfi_endproc
 1227               	.LFE8:
 1229               	.global	free_BB
 1231               	free_BB:
 1232               	.LFB9:
 168:lp_solve_5.5/lp_mipbb.c **** 
 169:lp_solve_5.5/lp_mipbb.c **** STATIC MYBOOL free_BB(BBrec **BB)
 170:lp_solve_5.5/lp_mipbb.c **** {
 1233               		.loc 1 170 0
 1234               		.cfi_startproc
 1235 0864 CF93      		push r28
 1236               	.LCFI10:
 1237               		.cfi_def_cfa_offset 3
 1238               		.cfi_offset 28, -2
 1239 0866 DF93      		push r29
 1240               	.LCFI11:
 1241               		.cfi_def_cfa_offset 4
 1242               		.cfi_offset 29, -3
 1243 0868 00D0      		rcall .
 1244 086a 00D0      		rcall .
 1245 086c 1F92      		push __zero_reg__
 1246               	.LCFI12:
 1247               		.cfi_def_cfa_offset 9
 1248 086e CDB7      		in r28,__SP_L__
 1249 0870 DEB7      		in r29,__SP_H__
 1250               	.LCFI13:
 1251               		.cfi_def_cfa_register 28
 1252               	/* prologue: function */
 1253               	/* frame size = 5 */
 1254               	/* stack size = 7 */
 1255               	.L__stack_usage = 7
 1256 0872 9D83      		std Y+5,r25
 1257 0874 8C83      		std Y+4,r24
 171:lp_solve_5.5/lp_mipbb.c ****   MYBOOL parentreturned = FALSE;
 1258               		.loc 1 171 0
 1259 0876 1982      		std Y+1,__zero_reg__
 172:lp_solve_5.5/lp_mipbb.c **** 
 173:lp_solve_5.5/lp_mipbb.c ****   if((BB != NULL) && (*BB != NULL)) {
 1260               		.loc 1 173 0
 1261 0878 8C81      		ldd r24,Y+4
 1262 087a 9D81      		ldd r25,Y+5
 1263 087c 892B      		or r24,r25
 1264 087e 01F4      		brne .+2
 1265 0880 00C0      		rjmp .L47
 1266               		.loc 1 173 0 is_stmt 0 discriminator 1
 1267 0882 8C81      		ldd r24,Y+4
 1268 0884 9D81      		ldd r25,Y+5
 1269 0886 FC01      		movw r30,r24
 1270 0888 8081      		ld r24,Z
 1271 088a 9181      		ldd r25,Z+1
 1272 088c 892B      		or r24,r25
 1273 088e 01F4      		brne .+2
 1274 0890 00C0      		rjmp .L47
 1275               	.LBB3:
 174:lp_solve_5.5/lp_mipbb.c ****     BBrec *parent = (*BB)->parent;
 1276               		.loc 1 174 0 is_stmt 1
 1277 0892 8C81      		ldd r24,Y+4
 1278 0894 9D81      		ldd r25,Y+5
 1279 0896 FC01      		movw r30,r24
 1280 0898 8081      		ld r24,Z
 1281 089a 9181      		ldd r25,Z+1
 1282 089c FC01      		movw r30,r24
 1283 089e 8081      		ld r24,Z
 1284 08a0 9181      		ldd r25,Z+1
 1285 08a2 9B83      		std Y+3,r25
 1286 08a4 8A83      		std Y+2,r24
 175:lp_solve_5.5/lp_mipbb.c **** 
 176:lp_solve_5.5/lp_mipbb.c ****     if((parent == NULL) || (*BB)->contentmode) {
 1287               		.loc 1 176 0
 1288 08a6 8A81      		ldd r24,Y+2
 1289 08a8 9B81      		ldd r25,Y+3
 1290 08aa 892B      		or r24,r25
 1291 08ac 01F0      		breq .L48
 1292               		.loc 1 176 0 is_stmt 0 discriminator 1
 1293 08ae 8C81      		ldd r24,Y+4
 1294 08b0 9D81      		ldd r25,Y+5
 1295 08b2 FC01      		movw r30,r24
 1296 08b4 8081      		ld r24,Z
 1297 08b6 9181      		ldd r25,Z+1
 1298 08b8 FC01      		movw r30,r24
 1299 08ba 80A9      		ldd r24,Z+48
 1300 08bc 8823      		tst r24
 1301 08be 01F0      		breq .L49
 1302               	.L48:
 177:lp_solve_5.5/lp_mipbb.c ****       FREE((*BB)->upbo);
 1303               		.loc 1 177 0 is_stmt 1
 1304 08c0 8C81      		ldd r24,Y+4
 1305 08c2 9D81      		ldd r25,Y+5
 1306 08c4 FC01      		movw r30,r24
 1307 08c6 8081      		ld r24,Z
 1308 08c8 9181      		ldd r25,Z+1
 1309 08ca FC01      		movw r30,r24
 1310 08cc 80A1      		ldd r24,Z+32
 1311 08ce 91A1      		ldd r25,Z+33
 1312 08d0 892B      		or r24,r25
 1313 08d2 01F0      		breq .L50
 1314               		.loc 1 177 0 is_stmt 0 discriminator 1
 1315 08d4 8C81      		ldd r24,Y+4
 1316 08d6 9D81      		ldd r25,Y+5
 1317 08d8 FC01      		movw r30,r24
 1318 08da 8081      		ld r24,Z
 1319 08dc 9181      		ldd r25,Z+1
 1320 08de FC01      		movw r30,r24
 1321 08e0 80A1      		ldd r24,Z+32
 1322 08e2 91A1      		ldd r25,Z+33
 1323 08e4 0E94 0000 		call free
 1324 08e8 8C81      		ldd r24,Y+4
 1325 08ea 9D81      		ldd r25,Y+5
 1326 08ec FC01      		movw r30,r24
 1327 08ee 8081      		ld r24,Z
 1328 08f0 9181      		ldd r25,Z+1
 1329 08f2 FC01      		movw r30,r24
 1330 08f4 11A2      		std Z+33,__zero_reg__
 1331 08f6 10A2      		std Z+32,__zero_reg__
 1332               	.L50:
 178:lp_solve_5.5/lp_mipbb.c ****       FREE((*BB)->lowbo);
 1333               		.loc 1 178 0 is_stmt 1
 1334 08f8 8C81      		ldd r24,Y+4
 1335 08fa 9D81      		ldd r25,Y+5
 1336 08fc FC01      		movw r30,r24
 1337 08fe 8081      		ld r24,Z
 1338 0900 9181      		ldd r25,Z+1
 1339 0902 FC01      		movw r30,r24
 1340 0904 82A1      		ldd r24,Z+34
 1341 0906 93A1      		ldd r25,Z+35
 1342 0908 892B      		or r24,r25
 1343 090a 01F0      		breq .L49
 1344               		.loc 1 178 0 is_stmt 0 discriminator 1
 1345 090c 8C81      		ldd r24,Y+4
 1346 090e 9D81      		ldd r25,Y+5
 1347 0910 FC01      		movw r30,r24
 1348 0912 8081      		ld r24,Z
 1349 0914 9181      		ldd r25,Z+1
 1350 0916 FC01      		movw r30,r24
 1351 0918 82A1      		ldd r24,Z+34
 1352 091a 93A1      		ldd r25,Z+35
 1353 091c 0E94 0000 		call free
 1354 0920 8C81      		ldd r24,Y+4
 1355 0922 9D81      		ldd r25,Y+5
 1356 0924 FC01      		movw r30,r24
 1357 0926 8081      		ld r24,Z
 1358 0928 9181      		ldd r25,Z+1
 1359 092a FC01      		movw r30,r24
 1360 092c 13A2      		std Z+35,__zero_reg__
 1361 092e 12A2      		std Z+34,__zero_reg__
 1362               	.L49:
 179:lp_solve_5.5/lp_mipbb.c ****     }
 180:lp_solve_5.5/lp_mipbb.c ****     FREE((*BB)->varmanaged);
 1363               		.loc 1 180 0 is_stmt 1
 1364 0930 8C81      		ldd r24,Y+4
 1365 0932 9D81      		ldd r25,Y+5
 1366 0934 FC01      		movw r30,r24
 1367 0936 8081      		ld r24,Z
 1368 0938 9181      		ldd r25,Z+1
 1369 093a FC01      		movw r30,r24
 1370 093c 84A9      		ldd r24,Z+52
 1371 093e 95A9      		ldd r25,Z+53
 1372 0940 892B      		or r24,r25
 1373 0942 01F0      		breq .L51
 1374               		.loc 1 180 0 is_stmt 0 discriminator 1
 1375 0944 8C81      		ldd r24,Y+4
 1376 0946 9D81      		ldd r25,Y+5
 1377 0948 FC01      		movw r30,r24
 1378 094a 8081      		ld r24,Z
 1379 094c 9181      		ldd r25,Z+1
 1380 094e FC01      		movw r30,r24
 1381 0950 84A9      		ldd r24,Z+52
 1382 0952 95A9      		ldd r25,Z+53
 1383 0954 0E94 0000 		call free
 1384 0958 8C81      		ldd r24,Y+4
 1385 095a 9D81      		ldd r25,Y+5
 1386 095c FC01      		movw r30,r24
 1387 095e 8081      		ld r24,Z
 1388 0960 9181      		ldd r25,Z+1
 1389 0962 FC01      		movw r30,r24
 1390 0964 15AA      		std Z+53,__zero_reg__
 1391 0966 14AA      		std Z+52,__zero_reg__
 1392               	.L51:
 181:lp_solve_5.5/lp_mipbb.c ****     FREE(*BB);
 1393               		.loc 1 181 0 is_stmt 1
 1394 0968 8C81      		ldd r24,Y+4
 1395 096a 9D81      		ldd r25,Y+5
 1396 096c FC01      		movw r30,r24
 1397 096e 8081      		ld r24,Z
 1398 0970 9181      		ldd r25,Z+1
 1399 0972 892B      		or r24,r25
 1400 0974 01F0      		breq .L52
 1401               		.loc 1 181 0 is_stmt 0 discriminator 1
 1402 0976 8C81      		ldd r24,Y+4
 1403 0978 9D81      		ldd r25,Y+5
 1404 097a FC01      		movw r30,r24
 1405 097c 8081      		ld r24,Z
 1406 097e 9181      		ldd r25,Z+1
 1407 0980 0E94 0000 		call free
 1408 0984 8C81      		ldd r24,Y+4
 1409 0986 9D81      		ldd r25,Y+5
 1410 0988 FC01      		movw r30,r24
 1411 098a 1182      		std Z+1,__zero_reg__
 1412 098c 1082      		st Z,__zero_reg__
 1413               	.L52:
 182:lp_solve_5.5/lp_mipbb.c **** 
 183:lp_solve_5.5/lp_mipbb.c ****     parentreturned = (MYBOOL) (parent != NULL);
 1414               		.loc 1 183 0 is_stmt 1
 1415 098e 21E0      		ldi r18,lo8(1)
 1416 0990 8A81      		ldd r24,Y+2
 1417 0992 9B81      		ldd r25,Y+3
 1418 0994 892B      		or r24,r25
 1419 0996 01F4      		brne .L53
 1420 0998 20E0      		ldi r18,0
 1421               	.L53:
 1422 099a 2983      		std Y+1,r18
 184:lp_solve_5.5/lp_mipbb.c ****     if(parentreturned)
 1423               		.loc 1 184 0
 1424 099c 8981      		ldd r24,Y+1
 1425 099e 8823      		tst r24
 1426 09a0 01F0      		breq .L47
 185:lp_solve_5.5/lp_mipbb.c ****       *BB = parent;
 1427               		.loc 1 185 0
 1428 09a2 8C81      		ldd r24,Y+4
 1429 09a4 9D81      		ldd r25,Y+5
 1430 09a6 2A81      		ldd r18,Y+2
 1431 09a8 3B81      		ldd r19,Y+3
 1432 09aa FC01      		movw r30,r24
 1433 09ac 3183      		std Z+1,r19
 1434 09ae 2083      		st Z,r18
 1435               	.L47:
 1436               	.LBE3:
 186:lp_solve_5.5/lp_mipbb.c **** 
 187:lp_solve_5.5/lp_mipbb.c ****   }
 188:lp_solve_5.5/lp_mipbb.c ****   return( parentreturned );
 1437               		.loc 1 188 0
 1438 09b0 8981      		ldd r24,Y+1
 1439               	/* epilogue start */
 189:lp_solve_5.5/lp_mipbb.c **** }
 1440               		.loc 1 189 0
 1441 09b2 0F90      		pop __tmp_reg__
 1442 09b4 0F90      		pop __tmp_reg__
 1443 09b6 0F90      		pop __tmp_reg__
 1444 09b8 0F90      		pop __tmp_reg__
 1445 09ba 0F90      		pop __tmp_reg__
 1446 09bc DF91      		pop r29
 1447 09be CF91      		pop r28
 1448 09c0 0895      		ret
 1449               		.cfi_endproc
 1450               	.LFE9:
 1452               	.global	pop_BB
 1454               	pop_BB:
 1455               	.LFB10:
 190:lp_solve_5.5/lp_mipbb.c **** 
 191:lp_solve_5.5/lp_mipbb.c **** STATIC BBrec *pop_BB(BBrec *BB)
 192:lp_solve_5.5/lp_mipbb.c **** /* Pop / free the previously "pushed" / saved bounds */
 193:lp_solve_5.5/lp_mipbb.c **** {
 1456               		.loc 1 193 0
 1457               		.cfi_startproc
 1458 09c2 CF93      		push r28
 1459               	.LCFI14:
 1460               		.cfi_def_cfa_offset 3
 1461               		.cfi_offset 28, -2
 1462 09c4 DF93      		push r29
 1463               	.LCFI15:
 1464               		.cfi_def_cfa_offset 4
 1465               		.cfi_offset 29, -3
 1466 09c6 CDB7      		in r28,__SP_L__
 1467 09c8 DEB7      		in r29,__SP_H__
 1468               	.LCFI16:
 1469               		.cfi_def_cfa_register 28
 1470 09ca 2897      		sbiw r28,8
 1471               	.LCFI17:
 1472               		.cfi_def_cfa_offset 12
 1473 09cc 0FB6      		in __tmp_reg__,__SREG__
 1474 09ce F894      		cli
 1475 09d0 DEBF      		out __SP_H__,r29
 1476 09d2 0FBE      		out __SREG__,__tmp_reg__
 1477 09d4 CDBF      		out __SP_L__,r28
 1478               	/* prologue: function */
 1479               	/* frame size = 8 */
 1480               	/* stack size = 10 */
 1481               	.L__stack_usage = 10
 1482 09d6 9887      		std Y+8,r25
 1483 09d8 8F83      		std Y+7,r24
 194:lp_solve_5.5/lp_mipbb.c ****   int   k;
 195:lp_solve_5.5/lp_mipbb.c ****   BBrec *parentBB;
 196:lp_solve_5.5/lp_mipbb.c ****   lprec *lp = BB->lp;
 1484               		.loc 1 196 0
 1485 09da 8F81      		ldd r24,Y+7
 1486 09dc 9885      		ldd r25,Y+8
 1487 09de FC01      		movw r30,r24
 1488 09e0 8481      		ldd r24,Z+4
 1489 09e2 9581      		ldd r25,Z+5
 1490 09e4 9A83      		std Y+2,r25
 1491 09e6 8983      		std Y+1,r24
 197:lp_solve_5.5/lp_mipbb.c **** 
 198:lp_solve_5.5/lp_mipbb.c ****   if(BB == NULL)
 1492               		.loc 1 198 0
 1493 09e8 8F81      		ldd r24,Y+7
 1494 09ea 9885      		ldd r25,Y+8
 1495 09ec 892B      		or r24,r25
 1496 09ee 01F4      		brne .L56
 199:lp_solve_5.5/lp_mipbb.c ****     return( BB );
 1497               		.loc 1 199 0
 1498 09f0 8F81      		ldd r24,Y+7
 1499 09f2 9885      		ldd r25,Y+8
 1500 09f4 00C0      		rjmp .L57
 1501               	.L56:
 200:lp_solve_5.5/lp_mipbb.c **** 
 201:lp_solve_5.5/lp_mipbb.c ****   /* Handle case where we are popping the end of the chain */
 202:lp_solve_5.5/lp_mipbb.c ****   parentBB = BB->parent;
 1502               		.loc 1 202 0
 1503 09f6 8F81      		ldd r24,Y+7
 1504 09f8 9885      		ldd r25,Y+8
 1505 09fa FC01      		movw r30,r24
 1506 09fc 8081      		ld r24,Z
 1507 09fe 9181      		ldd r25,Z+1
 1508 0a00 9C83      		std Y+4,r25
 1509 0a02 8B83      		std Y+3,r24
 203:lp_solve_5.5/lp_mipbb.c ****   if(BB == lp->bb_bounds) {
 1510               		.loc 1 203 0
 1511 0a04 8981      		ldd r24,Y+1
 1512 0a06 9A81      		ldd r25,Y+2
 1513 0a08 8654      		subi r24,70
 1514 0a0a 9D4F      		sbci r25,-3
 1515 0a0c FC01      		movw r30,r24
 1516 0a0e 2081      		ld r18,Z
 1517 0a10 3181      		ldd r19,Z+1
 1518 0a12 8F81      		ldd r24,Y+7
 1519 0a14 9885      		ldd r25,Y+8
 1520 0a16 2817      		cp r18,r24
 1521 0a18 3907      		cpc r19,r25
 1522 0a1a 01F4      		brne .L58
 204:lp_solve_5.5/lp_mipbb.c ****     lp->bb_bounds = parentBB;
 1523               		.loc 1 204 0
 1524 0a1c 8981      		ldd r24,Y+1
 1525 0a1e 9A81      		ldd r25,Y+2
 1526 0a20 8654      		subi r24,70
 1527 0a22 9D4F      		sbci r25,-3
 1528 0a24 2B81      		ldd r18,Y+3
 1529 0a26 3C81      		ldd r19,Y+4
 1530 0a28 FC01      		movw r30,r24
 1531 0a2a 3183      		std Z+1,r19
 1532 0a2c 2083      		st Z,r18
 205:lp_solve_5.5/lp_mipbb.c ****     if(parentBB != NULL)
 1533               		.loc 1 205 0
 1534 0a2e 8B81      		ldd r24,Y+3
 1535 0a30 9C81      		ldd r25,Y+4
 1536 0a32 892B      		or r24,r25
 1537 0a34 01F0      		breq .L60
 206:lp_solve_5.5/lp_mipbb.c ****       parentBB->child = NULL;
 1538               		.loc 1 206 0
 1539 0a36 8B81      		ldd r24,Y+3
 1540 0a38 9C81      		ldd r25,Y+4
 1541 0a3a FC01      		movw r30,r24
 1542 0a3c 1382      		std Z+3,__zero_reg__
 1543 0a3e 1282      		std Z+2,__zero_reg__
 1544 0a40 00C0      		rjmp .L60
 1545               	.L58:
 207:lp_solve_5.5/lp_mipbb.c ****   }
 208:lp_solve_5.5/lp_mipbb.c ****   /* Handle case where we are popping inside or at the beginning of the chain */
 209:lp_solve_5.5/lp_mipbb.c ****   else {
 210:lp_solve_5.5/lp_mipbb.c ****     if(parentBB != NULL)
 1546               		.loc 1 210 0
 1547 0a42 8B81      		ldd r24,Y+3
 1548 0a44 9C81      		ldd r25,Y+4
 1549 0a46 892B      		or r24,r25
 1550 0a48 01F0      		breq .L61
 211:lp_solve_5.5/lp_mipbb.c ****       parentBB->child = BB->child;
 1551               		.loc 1 211 0
 1552 0a4a 8F81      		ldd r24,Y+7
 1553 0a4c 9885      		ldd r25,Y+8
 1554 0a4e FC01      		movw r30,r24
 1555 0a50 2281      		ldd r18,Z+2
 1556 0a52 3381      		ldd r19,Z+3
 1557 0a54 8B81      		ldd r24,Y+3
 1558 0a56 9C81      		ldd r25,Y+4
 1559 0a58 FC01      		movw r30,r24
 1560 0a5a 3383      		std Z+3,r19
 1561 0a5c 2283      		std Z+2,r18
 1562               	.L61:
 212:lp_solve_5.5/lp_mipbb.c ****     if(BB->child != NULL)
 1563               		.loc 1 212 0
 1564 0a5e 8F81      		ldd r24,Y+7
 1565 0a60 9885      		ldd r25,Y+8
 1566 0a62 FC01      		movw r30,r24
 1567 0a64 8281      		ldd r24,Z+2
 1568 0a66 9381      		ldd r25,Z+3
 1569 0a68 892B      		or r24,r25
 1570 0a6a 01F0      		breq .L60
 213:lp_solve_5.5/lp_mipbb.c ****       BB->child->parent = parentBB;
 1571               		.loc 1 213 0
 1572 0a6c 8F81      		ldd r24,Y+7
 1573 0a6e 9885      		ldd r25,Y+8
 1574 0a70 FC01      		movw r30,r24
 1575 0a72 8281      		ldd r24,Z+2
 1576 0a74 9381      		ldd r25,Z+3
 1577 0a76 2B81      		ldd r18,Y+3
 1578 0a78 3C81      		ldd r19,Y+4
 1579 0a7a FC01      		movw r30,r24
 1580 0a7c 3183      		std Z+1,r19
 1581 0a7e 2083      		st Z,r18
 1582               	.L60:
 214:lp_solve_5.5/lp_mipbb.c ****   }
 215:lp_solve_5.5/lp_mipbb.c **** 
 216:lp_solve_5.5/lp_mipbb.c ****   /* Unwind other variables */
 217:lp_solve_5.5/lp_mipbb.c ****   if(lp->bb_upperchange != NULL) {
 1583               		.loc 1 217 0
 1584 0a80 8981      		ldd r24,Y+1
 1585 0a82 9A81      		ldd r25,Y+2
 1586 0a84 865B      		subi r24,-74
 1587 0a86 9C4F      		sbci r25,-4
 1588 0a88 FC01      		movw r30,r24
 1589 0a8a 8081      		ld r24,Z
 1590 0a8c 9181      		ldd r25,Z+1
 1591 0a8e 892B      		or r24,r25
 1592 0a90 01F0      		breq .L62
 218:lp_solve_5.5/lp_mipbb.c ****     restoreUndoLadder(lp->bb_upperchange, BB->upbo);
 1593               		.loc 1 218 0
 1594 0a92 8F81      		ldd r24,Y+7
 1595 0a94 9885      		ldd r25,Y+8
 1596 0a96 FC01      		movw r30,r24
 1597 0a98 20A1      		ldd r18,Z+32
 1598 0a9a 31A1      		ldd r19,Z+33
 1599 0a9c 8981      		ldd r24,Y+1
 1600 0a9e 9A81      		ldd r25,Y+2
 1601 0aa0 865B      		subi r24,-74
 1602 0aa2 9C4F      		sbci r25,-4
 1603 0aa4 FC01      		movw r30,r24
 1604 0aa6 8081      		ld r24,Z
 1605 0aa8 9181      		ldd r25,Z+1
 1606 0aaa B901      		movw r22,r18
 1607 0aac 0E94 0000 		call restoreUndoLadder
 219:lp_solve_5.5/lp_mipbb.c ****     for(; BB->UBtrack > 0; BB->UBtrack--) {
 1608               		.loc 1 219 0
 1609 0ab0 00C0      		rjmp .L63
 1610               	.L64:
 220:lp_solve_5.5/lp_mipbb.c ****       decrementUndoLadder(lp->bb_upperchange);
 1611               		.loc 1 220 0 discriminator 2
 1612 0ab2 8981      		ldd r24,Y+1
 1613 0ab4 9A81      		ldd r25,Y+2
 1614 0ab6 865B      		subi r24,-74
 1615 0ab8 9C4F      		sbci r25,-4
 1616 0aba FC01      		movw r30,r24
 1617 0abc 8081      		ld r24,Z
 1618 0abe 9181      		ldd r25,Z+1
 1619 0ac0 0E94 0000 		call decrementUndoLadder
 221:lp_solve_5.5/lp_mipbb.c ****       restoreUndoLadder(lp->bb_upperchange, BB->upbo);
 1620               		.loc 1 221 0 discriminator 2
 1621 0ac4 8F81      		ldd r24,Y+7
 1622 0ac6 9885      		ldd r25,Y+8
 1623 0ac8 FC01      		movw r30,r24
 1624 0aca 20A1      		ldd r18,Z+32
 1625 0acc 31A1      		ldd r19,Z+33
 1626 0ace 8981      		ldd r24,Y+1
 1627 0ad0 9A81      		ldd r25,Y+2
 1628 0ad2 865B      		subi r24,-74
 1629 0ad4 9C4F      		sbci r25,-4
 1630 0ad6 FC01      		movw r30,r24
 1631 0ad8 8081      		ld r24,Z
 1632 0ada 9181      		ldd r25,Z+1
 1633 0adc B901      		movw r22,r18
 1634 0ade 0E94 0000 		call restoreUndoLadder
 219:lp_solve_5.5/lp_mipbb.c ****     for(; BB->UBtrack > 0; BB->UBtrack--) {
 1635               		.loc 1 219 0 discriminator 2
 1636 0ae2 8F81      		ldd r24,Y+7
 1637 0ae4 9885      		ldd r25,Y+8
 1638 0ae6 FC01      		movw r30,r24
 1639 0ae8 24A5      		ldd r18,Z+44
 1640 0aea 35A5      		ldd r19,Z+45
 1641 0aec 2150      		subi r18,1
 1642 0aee 3109      		sbc r19,__zero_reg__
 1643 0af0 FC01      		movw r30,r24
 1644 0af2 35A7      		std Z+45,r19
 1645 0af4 24A7      		std Z+44,r18
 1646               	.L63:
 219:lp_solve_5.5/lp_mipbb.c ****     for(; BB->UBtrack > 0; BB->UBtrack--) {
 1647               		.loc 1 219 0 is_stmt 0 discriminator 1
 1648 0af6 8F81      		ldd r24,Y+7
 1649 0af8 9885      		ldd r25,Y+8
 1650 0afa FC01      		movw r30,r24
 1651 0afc 84A5      		ldd r24,Z+44
 1652 0afe 95A5      		ldd r25,Z+45
 1653 0b00 1816      		cp __zero_reg__,r24
 1654 0b02 1906      		cpc __zero_reg__,r25
 1655 0b04 04F0      		brlt .L64
 1656               	.L62:
 222:lp_solve_5.5/lp_mipbb.c ****     }
 223:lp_solve_5.5/lp_mipbb.c ****   }
 224:lp_solve_5.5/lp_mipbb.c ****   if(lp->bb_lowerchange != NULL) {
 1657               		.loc 1 224 0 is_stmt 1
 1658 0b06 8981      		ldd r24,Y+1
 1659 0b08 9A81      		ldd r25,Y+2
 1660 0b0a 845B      		subi r24,-76
 1661 0b0c 9C4F      		sbci r25,-4
 1662 0b0e FC01      		movw r30,r24
 1663 0b10 8081      		ld r24,Z
 1664 0b12 9181      		ldd r25,Z+1
 1665 0b14 892B      		or r24,r25
 1666 0b16 01F0      		breq .L65
 225:lp_solve_5.5/lp_mipbb.c ****     restoreUndoLadder(lp->bb_lowerchange, BB->lowbo);
 1667               		.loc 1 225 0
 1668 0b18 8F81      		ldd r24,Y+7
 1669 0b1a 9885      		ldd r25,Y+8
 1670 0b1c FC01      		movw r30,r24
 1671 0b1e 22A1      		ldd r18,Z+34
 1672 0b20 33A1      		ldd r19,Z+35
 1673 0b22 8981      		ldd r24,Y+1
 1674 0b24 9A81      		ldd r25,Y+2
 1675 0b26 845B      		subi r24,-76
 1676 0b28 9C4F      		sbci r25,-4
 1677 0b2a FC01      		movw r30,r24
 1678 0b2c 8081      		ld r24,Z
 1679 0b2e 9181      		ldd r25,Z+1
 1680 0b30 B901      		movw r22,r18
 1681 0b32 0E94 0000 		call restoreUndoLadder
 226:lp_solve_5.5/lp_mipbb.c ****     for(; BB->LBtrack > 0; BB->LBtrack--) {
 1682               		.loc 1 226 0
 1683 0b36 00C0      		rjmp .L66
 1684               	.L67:
 227:lp_solve_5.5/lp_mipbb.c ****       decrementUndoLadder(lp->bb_lowerchange);
 1685               		.loc 1 227 0 discriminator 2
 1686 0b38 8981      		ldd r24,Y+1
 1687 0b3a 9A81      		ldd r25,Y+2
 1688 0b3c 845B      		subi r24,-76
 1689 0b3e 9C4F      		sbci r25,-4
 1690 0b40 FC01      		movw r30,r24
 1691 0b42 8081      		ld r24,Z
 1692 0b44 9181      		ldd r25,Z+1
 1693 0b46 0E94 0000 		call decrementUndoLadder
 228:lp_solve_5.5/lp_mipbb.c ****       restoreUndoLadder(lp->bb_lowerchange, BB->lowbo);
 1694               		.loc 1 228 0 discriminator 2
 1695 0b4a 8F81      		ldd r24,Y+7
 1696 0b4c 9885      		ldd r25,Y+8
 1697 0b4e FC01      		movw r30,r24
 1698 0b50 22A1      		ldd r18,Z+34
 1699 0b52 33A1      		ldd r19,Z+35
 1700 0b54 8981      		ldd r24,Y+1
 1701 0b56 9A81      		ldd r25,Y+2
 1702 0b58 845B      		subi r24,-76
 1703 0b5a 9C4F      		sbci r25,-4
 1704 0b5c FC01      		movw r30,r24
 1705 0b5e 8081      		ld r24,Z
 1706 0b60 9181      		ldd r25,Z+1
 1707 0b62 B901      		movw r22,r18
 1708 0b64 0E94 0000 		call restoreUndoLadder
 226:lp_solve_5.5/lp_mipbb.c ****     for(; BB->LBtrack > 0; BB->LBtrack--) {
 1709               		.loc 1 226 0 discriminator 2
 1710 0b68 8F81      		ldd r24,Y+7
 1711 0b6a 9885      		ldd r25,Y+8
 1712 0b6c FC01      		movw r30,r24
 1713 0b6e 26A5      		ldd r18,Z+46
 1714 0b70 37A5      		ldd r19,Z+47
 1715 0b72 2150      		subi r18,1
 1716 0b74 3109      		sbc r19,__zero_reg__
 1717 0b76 FC01      		movw r30,r24
 1718 0b78 37A7      		std Z+47,r19
 1719 0b7a 26A7      		std Z+46,r18
 1720               	.L66:
 226:lp_solve_5.5/lp_mipbb.c ****     for(; BB->LBtrack > 0; BB->LBtrack--) {
 1721               		.loc 1 226 0 is_stmt 0 discriminator 1
 1722 0b7c 8F81      		ldd r24,Y+7
 1723 0b7e 9885      		ldd r25,Y+8
 1724 0b80 FC01      		movw r30,r24
 1725 0b82 86A5      		ldd r24,Z+46
 1726 0b84 97A5      		ldd r25,Z+47
 1727 0b86 1816      		cp __zero_reg__,r24
 1728 0b88 1906      		cpc __zero_reg__,r25
 1729 0b8a 04F0      		brlt .L67
 1730               	.L65:
 229:lp_solve_5.5/lp_mipbb.c ****     }
 230:lp_solve_5.5/lp_mipbb.c ****   }
 231:lp_solve_5.5/lp_mipbb.c ****   lp->bb_level--;
 1731               		.loc 1 231 0 is_stmt 1
 1732 0b8c 8981      		ldd r24,Y+1
 1733 0b8e 9A81      		ldd r25,Y+2
 1734 0b90 805D      		subi r24,-48
 1735 0b92 9C4F      		sbci r25,-4
 1736 0b94 FC01      		movw r30,r24
 1737 0b96 8081      		ld r24,Z
 1738 0b98 9181      		ldd r25,Z+1
 1739 0b9a 9C01      		movw r18,r24
 1740 0b9c 2150      		subi r18,1
 1741 0b9e 3109      		sbc r19,__zero_reg__
 1742 0ba0 8981      		ldd r24,Y+1
 1743 0ba2 9A81      		ldd r25,Y+2
 1744 0ba4 805D      		subi r24,-48
 1745 0ba6 9C4F      		sbci r25,-4
 1746 0ba8 FC01      		movw r30,r24
 1747 0baa 3183      		std Z+1,r19
 1748 0bac 2083      		st Z,r18
 232:lp_solve_5.5/lp_mipbb.c ****   k = BB->varno - lp->rows;
 1749               		.loc 1 232 0
 1750 0bae 8F81      		ldd r24,Y+7
 1751 0bb0 9885      		ldd r25,Y+8
 1752 0bb2 FC01      		movw r30,r24
 1753 0bb4 2681      		ldd r18,Z+6
 1754 0bb6 3781      		ldd r19,Z+7
 1755 0bb8 8981      		ldd r24,Y+1
 1756 0bba 9A81      		ldd r25,Y+2
 1757 0bbc 8651      		subi r24,22
 1758 0bbe 9E4F      		sbci r25,-2
 1759 0bc0 FC01      		movw r30,r24
 1760 0bc2 8081      		ld r24,Z
 1761 0bc4 9181      		ldd r25,Z+1
 1762 0bc6 A901      		movw r20,r18
 1763 0bc8 481B      		sub r20,r24
 1764 0bca 590B      		sbc r21,r25
 1765 0bcc CA01      		movw r24,r20
 1766 0bce 9E83      		std Y+6,r25
 1767 0bd0 8D83      		std Y+5,r24
 233:lp_solve_5.5/lp_mipbb.c ****   if(lp->bb_level == 0) {
 1768               		.loc 1 233 0
 1769 0bd2 8981      		ldd r24,Y+1
 1770 0bd4 9A81      		ldd r25,Y+2
 1771 0bd6 805D      		subi r24,-48
 1772 0bd8 9C4F      		sbci r25,-4
 1773 0bda FC01      		movw r30,r24
 1774 0bdc 8081      		ld r24,Z
 1775 0bde 9181      		ldd r25,Z+1
 1776 0be0 892B      		or r24,r25
 1777 0be2 01F0      		breq .+2
 1778 0be4 00C0      		rjmp .L68
 234:lp_solve_5.5/lp_mipbb.c ****     if(lp->bb_varactive != NULL) {
 1779               		.loc 1 234 0
 1780 0be6 8981      		ldd r24,Y+1
 1781 0be8 9A81      		ldd r25,Y+2
 1782 0bea 885B      		subi r24,-72
 1783 0bec 9C4F      		sbci r25,-4
 1784 0bee FC01      		movw r30,r24
 1785 0bf0 8081      		ld r24,Z
 1786 0bf2 9181      		ldd r25,Z+1
 1787 0bf4 892B      		or r24,r25
 1788 0bf6 01F0      		breq .L69
 235:lp_solve_5.5/lp_mipbb.c ****       FREE(lp->bb_varactive);
 1789               		.loc 1 235 0
 1790 0bf8 8981      		ldd r24,Y+1
 1791 0bfa 9A81      		ldd r25,Y+2
 1792 0bfc 885B      		subi r24,-72
 1793 0bfe 9C4F      		sbci r25,-4
 1794 0c00 FC01      		movw r30,r24
 1795 0c02 8081      		ld r24,Z
 1796 0c04 9181      		ldd r25,Z+1
 1797 0c06 892B      		or r24,r25
 1798 0c08 01F0      		breq .L70
 1799               		.loc 1 235 0 is_stmt 0 discriminator 1
 1800 0c0a 8981      		ldd r24,Y+1
 1801 0c0c 9A81      		ldd r25,Y+2
 1802 0c0e 885B      		subi r24,-72
 1803 0c10 9C4F      		sbci r25,-4
 1804 0c12 FC01      		movw r30,r24
 1805 0c14 8081      		ld r24,Z
 1806 0c16 9181      		ldd r25,Z+1
 1807 0c18 0E94 0000 		call free
 1808 0c1c 8981      		ldd r24,Y+1
 1809 0c1e 9A81      		ldd r25,Y+2
 1810 0c20 885B      		subi r24,-72
 1811 0c22 9C4F      		sbci r25,-4
 1812 0c24 FC01      		movw r30,r24
 1813 0c26 1182      		std Z+1,__zero_reg__
 1814 0c28 1082      		st Z,__zero_reg__
 1815               	.L70:
 236:lp_solve_5.5/lp_mipbb.c ****       freecuts_BB(lp);
 1816               		.loc 1 236 0 is_stmt 1
 1817 0c2a 8981      		ldd r24,Y+1
 1818 0c2c 9A81      		ldd r25,Y+2
 1819 0c2e 0E94 0000 		call freecuts_BB
 1820               	.L69:
 237:lp_solve_5.5/lp_mipbb.c ****     }
 238:lp_solve_5.5/lp_mipbb.c ****     if(lp->int_vars+lp->sc_vars > 0)
 1821               		.loc 1 238 0
 1822 0c32 8981      		ldd r24,Y+1
 1823 0c34 9A81      		ldd r25,Y+2
 1824 0c36 8257      		subi r24,114
 1825 0c38 9D4F      		sbci r25,-3
 1826 0c3a FC01      		movw r30,r24
 1827 0c3c 2081      		ld r18,Z
 1828 0c3e 3181      		ldd r19,Z+1
 1829 0c40 8981      		ldd r24,Y+1
 1830 0c42 9A81      		ldd r25,Y+2
 1831 0c44 8057      		subi r24,112
 1832 0c46 9D4F      		sbci r25,-3
 1833 0c48 FC01      		movw r30,r24
 1834 0c4a 8081      		ld r24,Z
 1835 0c4c 9181      		ldd r25,Z+1
 1836 0c4e 820F      		add r24,r18
 1837 0c50 931F      		adc r25,r19
 1838 0c52 1816      		cp __zero_reg__,r24
 1839 0c54 1906      		cpc __zero_reg__,r25
 1840 0c56 04F4      		brge .L71
 239:lp_solve_5.5/lp_mipbb.c ****       free_pseudocost(lp);
 1841               		.loc 1 239 0
 1842 0c58 8981      		ldd r24,Y+1
 1843 0c5a 9A81      		ldd r25,Y+2
 1844 0c5c 0E94 0000 		call free_pseudocost
 1845               	.L71:
 240:lp_solve_5.5/lp_mipbb.c ****     pop_basis(lp, FALSE);
 1846               		.loc 1 240 0
 1847 0c60 8981      		ldd r24,Y+1
 1848 0c62 9A81      		ldd r25,Y+2
 1849 0c64 60E0      		ldi r22,0
 1850 0c66 0E94 0000 		call pop_basis
 241:lp_solve_5.5/lp_mipbb.c ****     lp->rootbounds = NULL;
 1851               		.loc 1 241 0
 1852 0c6a 8981      		ldd r24,Y+1
 1853 0c6c 9A81      		ldd r25,Y+2
 1854 0c6e 8454      		subi r24,68
 1855 0c70 9D4F      		sbci r25,-3
 1856 0c72 FC01      		movw r30,r24
 1857 0c74 1182      		std Z+1,__zero_reg__
 1858 0c76 1082      		st Z,__zero_reg__
 1859 0c78 00C0      		rjmp .L72
 1860               	.L68:
 242:lp_solve_5.5/lp_mipbb.c ****   }
 243:lp_solve_5.5/lp_mipbb.c ****   else
 244:lp_solve_5.5/lp_mipbb.c ****     lp->bb_varactive[k]--;
 1861               		.loc 1 244 0
 1862 0c7a 8981      		ldd r24,Y+1
 1863 0c7c 9A81      		ldd r25,Y+2
 1864 0c7e 885B      		subi r24,-72
 1865 0c80 9C4F      		sbci r25,-4
 1866 0c82 FC01      		movw r30,r24
 1867 0c84 2081      		ld r18,Z
 1868 0c86 3181      		ldd r19,Z+1
 1869 0c88 8D81      		ldd r24,Y+5
 1870 0c8a 9E81      		ldd r25,Y+6
 1871 0c8c 880F      		lsl r24
 1872 0c8e 991F      		rol r25
 1873 0c90 820F      		add r24,r18
 1874 0c92 931F      		adc r25,r19
 1875 0c94 FC01      		movw r30,r24
 1876 0c96 2081      		ld r18,Z
 1877 0c98 3181      		ldd r19,Z+1
 1878 0c9a 2150      		subi r18,1
 1879 0c9c 3109      		sbc r19,__zero_reg__
 1880 0c9e FC01      		movw r30,r24
 1881 0ca0 3183      		std Z+1,r19
 1882 0ca2 2083      		st Z,r18
 1883               	.L72:
 245:lp_solve_5.5/lp_mipbb.c **** 
 246:lp_solve_5.5/lp_mipbb.c ****   /* Undo SOS/GUB markers */
 247:lp_solve_5.5/lp_mipbb.c ****   if(BB->isSOS && (BB->vartype != BB_INT))
 1884               		.loc 1 247 0
 1885 0ca4 8F81      		ldd r24,Y+7
 1886 0ca6 9885      		ldd r25,Y+8
 1887 0ca8 FC01      		movw r30,r24
 1888 0caa 82A9      		ldd r24,Z+50
 1889 0cac 8823      		tst r24
 1890 0cae 01F0      		breq .L73
 1891               		.loc 1 247 0 is_stmt 0 discriminator 1
 1892 0cb0 8F81      		ldd r24,Y+7
 1893 0cb2 9885      		ldd r25,Y+8
 1894 0cb4 FC01      		movw r30,r24
 1895 0cb6 8085      		ldd r24,Z+8
 1896 0cb8 9185      		ldd r25,Z+9
 1897 0cba 0197      		sbiw r24,1
 1898 0cbc 01F0      		breq .L73
 248:lp_solve_5.5/lp_mipbb.c ****     SOS_unmark(lp->SOS, 0, k);
 1899               		.loc 1 248 0 is_stmt 1
 1900 0cbe 8981      		ldd r24,Y+1
 1901 0cc0 9A81      		ldd r25,Y+2
 1902 0cc2 8256      		subi r24,98
 1903 0cc4 9D4F      		sbci r25,-3
 1904 0cc6 FC01      		movw r30,r24
 1905 0cc8 8081      		ld r24,Z
 1906 0cca 9181      		ldd r25,Z+1
 1907 0ccc 2D81      		ldd r18,Y+5
 1908 0cce 3E81      		ldd r19,Y+6
 1909 0cd0 A901      		movw r20,r18
 1910 0cd2 60E0      		ldi r22,0
 1911 0cd4 70E0      		ldi r23,0
 1912 0cd6 0E94 0000 		call SOS_unmark
 1913 0cda 00C0      		rjmp .L74
 1914               	.L73:
 249:lp_solve_5.5/lp_mipbb.c ****   else if(BB->isGUB)
 1915               		.loc 1 249 0
 1916 0cdc 8F81      		ldd r24,Y+7
 1917 0cde 9885      		ldd r25,Y+8
 1918 0ce0 FC01      		movw r30,r24
 1919 0ce2 83A9      		ldd r24,Z+51
 1920 0ce4 8823      		tst r24
 1921 0ce6 01F0      		breq .L74
 250:lp_solve_5.5/lp_mipbb.c ****     SOS_unmark(lp->GUB, 0, k);
 1922               		.loc 1 250 0
 1923 0ce8 8981      		ldd r24,Y+1
 1924 0cea 9A81      		ldd r25,Y+2
 1925 0cec 8856      		subi r24,104
 1926 0cee 9D4F      		sbci r25,-3
 1927 0cf0 FC01      		movw r30,r24
 1928 0cf2 8081      		ld r24,Z
 1929 0cf4 9181      		ldd r25,Z+1
 1930 0cf6 2D81      		ldd r18,Y+5
 1931 0cf8 3E81      		ldd r19,Y+6
 1932 0cfa A901      		movw r20,r18
 1933 0cfc 60E0      		ldi r22,0
 1934 0cfe 70E0      		ldi r23,0
 1935 0d00 0E94 0000 		call SOS_unmark
 1936               	.L74:
 251:lp_solve_5.5/lp_mipbb.c **** 
 252:lp_solve_5.5/lp_mipbb.c ****   /* Undo the SC marker */
 253:lp_solve_5.5/lp_mipbb.c ****   if(BB->sc_canset)
 1937               		.loc 1 253 0
 1938 0d04 8F81      		ldd r24,Y+7
 1939 0d06 9885      		ldd r25,Y+8
 1940 0d08 FC01      		movw r30,r24
 1941 0d0a 81A9      		ldd r24,Z+49
 1942 0d0c 8823      		tst r24
 1943 0d0e 01F0      		breq .L75
 254:lp_solve_5.5/lp_mipbb.c ****     lp->sc_lobound[k] *= -1;
 1944               		.loc 1 254 0
 1945 0d10 8981      		ldd r24,Y+1
 1946 0d12 9A81      		ldd r25,Y+2
 1947 0d14 8E56      		subi r24,110
 1948 0d16 9D4F      		sbci r25,-3
 1949 0d18 FC01      		movw r30,r24
 1950 0d1a 2081      		ld r18,Z
 1951 0d1c 3181      		ldd r19,Z+1
 1952 0d1e 8D81      		ldd r24,Y+5
 1953 0d20 9E81      		ldd r25,Y+6
 1954 0d22 880F      		lsl r24
 1955 0d24 991F      		rol r25
 1956 0d26 880F      		lsl r24
 1957 0d28 991F      		rol r25
 1958 0d2a 280F      		add r18,r24
 1959 0d2c 391F      		adc r19,r25
 1960 0d2e 8981      		ldd r24,Y+1
 1961 0d30 9A81      		ldd r25,Y+2
 1962 0d32 8E56      		subi r24,110
 1963 0d34 9D4F      		sbci r25,-3
 1964 0d36 FC01      		movw r30,r24
 1965 0d38 4081      		ld r20,Z
 1966 0d3a 5181      		ldd r21,Z+1
 1967 0d3c 8D81      		ldd r24,Y+5
 1968 0d3e 9E81      		ldd r25,Y+6
 1969 0d40 880F      		lsl r24
 1970 0d42 991F      		rol r25
 1971 0d44 880F      		lsl r24
 1972 0d46 991F      		rol r25
 1973 0d48 840F      		add r24,r20
 1974 0d4a 951F      		adc r25,r21
 1975 0d4c FC01      		movw r30,r24
 1976 0d4e 8081      		ld r24,Z
 1977 0d50 9181      		ldd r25,Z+1
 1978 0d52 A281      		ldd r26,Z+2
 1979 0d54 B381      		ldd r27,Z+3
 1980 0d56 B058      		subi r27,0x80
 1981 0d58 F901      		movw r30,r18
 1982 0d5a 8083      		st Z,r24
 1983 0d5c 9183      		std Z+1,r25
 1984 0d5e A283      		std Z+2,r26
 1985 0d60 B383      		std Z+3,r27
 1986               	.L75:
 255:lp_solve_5.5/lp_mipbb.c **** 
 256:lp_solve_5.5/lp_mipbb.c ****   /* Pop the associated basis */
 257:lp_solve_5.5/lp_mipbb.c **** #if 1
 258:lp_solve_5.5/lp_mipbb.c ****   /* Original version that does not restore previous basis */
 259:lp_solve_5.5/lp_mipbb.c ****   pop_basis(lp, FALSE);
 1987               		.loc 1 259 0
 1988 0d62 8981      		ldd r24,Y+1
 1989 0d64 9A81      		ldd r25,Y+2
 1990 0d66 60E0      		ldi r22,0
 1991 0d68 0E94 0000 		call pop_basis
 260:lp_solve_5.5/lp_mipbb.c **** #else
 261:lp_solve_5.5/lp_mipbb.c ****   /* Experimental version that restores previous basis */
 262:lp_solve_5.5/lp_mipbb.c ****   pop_basis(lp, BB->isSOS);
 263:lp_solve_5.5/lp_mipbb.c **** #endif
 264:lp_solve_5.5/lp_mipbb.c **** 
 265:lp_solve_5.5/lp_mipbb.c ****   /* Finally free the B&B object */
 266:lp_solve_5.5/lp_mipbb.c ****   free_BB(&BB);
 1992               		.loc 1 266 0
 1993 0d6c CE01      		movw r24,r28
 1994 0d6e 0796      		adiw r24,7
 1995 0d70 0E94 0000 		call free_BB
 267:lp_solve_5.5/lp_mipbb.c **** 
 268:lp_solve_5.5/lp_mipbb.c ****   /* Return the parent BB */
 269:lp_solve_5.5/lp_mipbb.c ****   return( parentBB );
 1996               		.loc 1 269 0
 1997 0d74 8B81      		ldd r24,Y+3
 1998 0d76 9C81      		ldd r25,Y+4
 1999               	.L57:
 2000               	/* epilogue start */
 270:lp_solve_5.5/lp_mipbb.c **** }
 2001               		.loc 1 270 0
 2002 0d78 2896      		adiw r28,8
 2003 0d7a 0FB6      		in __tmp_reg__,__SREG__
 2004 0d7c F894      		cli
 2005 0d7e DEBF      		out __SP_H__,r29
 2006 0d80 0FBE      		out __SREG__,__tmp_reg__
 2007 0d82 CDBF      		out __SP_L__,r28
 2008 0d84 DF91      		pop r29
 2009 0d86 CF91      		pop r28
 2010 0d88 0895      		ret
 2011               		.cfi_endproc
 2012               	.LFE10:
 2014               	.global	__subsf3
 2015               	.global	__mulsf3
 2016               	.global	__addsf3
 2017               	.global	probe_BB
 2019               	probe_BB:
 2020               	.LFB11:
 271:lp_solve_5.5/lp_mipbb.c **** 
 272:lp_solve_5.5/lp_mipbb.c **** /* Here are heuristic routines to see if we need bother with branching further
 273:lp_solve_5.5/lp_mipbb.c **** 
 274:lp_solve_5.5/lp_mipbb.c ****     1. A probing routine to see of the best OF can be better than incumbent
 275:lp_solve_5.5/lp_mipbb.c ****     2. A presolve routine to fix other variables and detect infeasibility
 276:lp_solve_5.5/lp_mipbb.c **** 
 277:lp_solve_5.5/lp_mipbb.c ****    THIS IS INACTIVE CODE, PLACEHOLDERS FOR FUTURE DEVELOPMENT!!! */
 278:lp_solve_5.5/lp_mipbb.c **** STATIC REAL probe_BB(BBrec *BB)
 279:lp_solve_5.5/lp_mipbb.c **** {
 2021               		.loc 1 279 0
 2022               		.cfi_startproc
 2023 0d8a CF93      		push r28
 2024               	.LCFI18:
 2025               		.cfi_def_cfa_offset 3
 2026               		.cfi_offset 28, -2
 2027 0d8c DF93      		push r29
 2028               	.LCFI19:
 2029               		.cfi_def_cfa_offset 4
 2030               		.cfi_offset 29, -3
 2031 0d8e CDB7      		in r28,__SP_L__
 2032 0d90 DEB7      		in r29,__SP_H__
 2033               	.LCFI20:
 2034               		.cfi_def_cfa_register 28
 2035 0d92 6097      		sbiw r28,16
 2036               	.LCFI21:
 2037               		.cfi_def_cfa_offset 20
 2038 0d94 0FB6      		in __tmp_reg__,__SREG__
 2039 0d96 F894      		cli
 2040 0d98 DEBF      		out __SP_H__,r29
 2041 0d9a 0FBE      		out __SREG__,__tmp_reg__
 2042 0d9c CDBF      		out __SP_L__,r28
 2043               	/* prologue: function */
 2044               	/* frame size = 16 */
 2045               	/* stack size = 18 */
 2046               	.L__stack_usage = 18
 2047 0d9e 988B      		std Y+16,r25
 2048 0da0 8F87      		std Y+15,r24
 280:lp_solve_5.5/lp_mipbb.c ****   int  i, ii;
 281:lp_solve_5.5/lp_mipbb.c ****   REAL coefOF, sum = 0;
 2049               		.loc 1 281 0
 2050 0da2 1B82      		std Y+3,__zero_reg__
 2051 0da4 1C82      		std Y+4,__zero_reg__
 2052 0da6 1D82      		std Y+5,__zero_reg__
 2053 0da8 1E82      		std Y+6,__zero_reg__
 282:lp_solve_5.5/lp_mipbb.c ****   lprec *lp = BB->lp;
 2054               		.loc 1 282 0
 2055 0daa 8F85      		ldd r24,Y+15
 2056 0dac 9889      		ldd r25,Y+16
 2057 0dae FC01      		movw r30,r24
 2058 0db0 8481      		ldd r24,Z+4
 2059 0db2 9581      		ldd r25,Z+5
 2060 0db4 9887      		std Y+8,r25
 2061 0db6 8F83      		std Y+7,r24
 283:lp_solve_5.5/lp_mipbb.c **** 
 284:lp_solve_5.5/lp_mipbb.c ****   /* Loop over all ints to see if the best possible solution
 285:lp_solve_5.5/lp_mipbb.c ****      stands any chance of being better than the incumbent solution */
 286:lp_solve_5.5/lp_mipbb.c ****   if(lp->solutioncount == 0)
 2062               		.loc 1 286 0
 2063 0db8 8F81      		ldd r24,Y+7
 2064 0dba 9885      		ldd r25,Y+8
 2065 0dbc 865F      		subi r24,-10
 2066 0dbe 9D4F      		sbci r25,-3
 2067 0dc0 FC01      		movw r30,r24
 2068 0dc2 8081      		ld r24,Z
 2069 0dc4 9181      		ldd r25,Z+1
 2070 0dc6 892B      		or r24,r25
 2071 0dc8 01F4      		brne .L77
 287:lp_solve_5.5/lp_mipbb.c ****     return( lp->infinite );
 2072               		.loc 1 287 0
 2073 0dca 8F81      		ldd r24,Y+7
 2074 0dcc 9885      		ldd r25,Y+8
 2075 0dce 865F      		subi r24,-10
 2076 0dd0 9C4F      		sbci r25,-4
 2077 0dd2 FC01      		movw r30,r24
 2078 0dd4 8081      		ld r24,Z
 2079 0dd6 9181      		ldd r25,Z+1
 2080 0dd8 A281      		ldd r26,Z+2
 2081 0dda B381      		ldd r27,Z+3
 2082 0ddc 00C0      		rjmp .L78
 2083               	.L77:
 288:lp_solve_5.5/lp_mipbb.c ****   for(i = 1; i <= lp->columns; i++) {
 2084               		.loc 1 288 0
 2085 0dde 81E0      		ldi r24,lo8(1)
 2086 0de0 90E0      		ldi r25,0
 2087 0de2 9A83      		std Y+2,r25
 2088 0de4 8983      		std Y+1,r24
 2089 0de6 00C0      		rjmp .L79
 2090               	.L86:
 289:lp_solve_5.5/lp_mipbb.c ****     if(!is_int(lp, i))
 2091               		.loc 1 289 0
 2092 0de8 2981      		ldd r18,Y+1
 2093 0dea 3A81      		ldd r19,Y+2
 2094 0dec 8F81      		ldd r24,Y+7
 2095 0dee 9885      		ldd r25,Y+8
 2096 0df0 B901      		movw r22,r18
 2097 0df2 0E94 0000 		call is_int
 2098 0df6 8823      		tst r24
 2099 0df8 01F4      		brne .+2
 2100 0dfa 00C0      		rjmp .L89
 290:lp_solve_5.5/lp_mipbb.c ****       continue;
 291:lp_solve_5.5/lp_mipbb.c ****     ii = lp->rows + i;
 2101               		.loc 1 291 0
 2102 0dfc 8F81      		ldd r24,Y+7
 2103 0dfe 9885      		ldd r25,Y+8
 2104 0e00 8651      		subi r24,22
 2105 0e02 9E4F      		sbci r25,-2
 2106 0e04 FC01      		movw r30,r24
 2107 0e06 2081      		ld r18,Z
 2108 0e08 3181      		ldd r19,Z+1
 2109 0e0a 8981      		ldd r24,Y+1
 2110 0e0c 9A81      		ldd r25,Y+2
 2111 0e0e 820F      		add r24,r18
 2112 0e10 931F      		adc r25,r19
 2113 0e12 9A87      		std Y+10,r25
 2114 0e14 8987      		std Y+9,r24
 292:lp_solve_5.5/lp_mipbb.c ****     coefOF = lp->obj[i];
 2115               		.loc 1 292 0
 2116 0e16 8F81      		ldd r24,Y+7
 2117 0e18 9885      		ldd r25,Y+8
 2118 0e1a 825D      		subi r24,-46
 2119 0e1c 9D4F      		sbci r25,-3
 2120 0e1e FC01      		movw r30,r24
 2121 0e20 2081      		ld r18,Z
 2122 0e22 3181      		ldd r19,Z+1
 2123 0e24 8981      		ldd r24,Y+1
 2124 0e26 9A81      		ldd r25,Y+2
 2125 0e28 880F      		lsl r24
 2126 0e2a 991F      		rol r25
 2127 0e2c 880F      		lsl r24
 2128 0e2e 991F      		rol r25
 2129 0e30 820F      		add r24,r18
 2130 0e32 931F      		adc r25,r19
 2131 0e34 FC01      		movw r30,r24
 2132 0e36 8081      		ld r24,Z
 2133 0e38 9181      		ldd r25,Z+1
 2134 0e3a A281      		ldd r26,Z+2
 2135 0e3c B381      		ldd r27,Z+3
 2136 0e3e 8B87      		std Y+11,r24
 2137 0e40 9C87      		std Y+12,r25
 2138 0e42 AD87      		std Y+13,r26
 2139 0e44 BE87      		std Y+14,r27
 293:lp_solve_5.5/lp_mipbb.c ****     if(coefOF < 0) {
 2140               		.loc 1 293 0
 2141 0e46 20E0      		ldi r18,0
 2142 0e48 30E0      		ldi r19,0
 2143 0e4a A901      		movw r20,r18
 2144 0e4c 6B85      		ldd r22,Y+11
 2145 0e4e 7C85      		ldd r23,Y+12
 2146 0e50 8D85      		ldd r24,Y+13
 2147 0e52 9E85      		ldd r25,Y+14
 2148 0e54 0E94 0000 		call __ltsf2
 2149 0e58 8823      		tst r24
 2150 0e5a 04F0      		brlt .+2
 2151 0e5c 00C0      		rjmp .L88
 294:lp_solve_5.5/lp_mipbb.c ****       if(is_infinite(lp, BB->lowbo[ii]))
 2152               		.loc 1 294 0
 2153 0e5e 8F85      		ldd r24,Y+15
 2154 0e60 9889      		ldd r25,Y+16
 2155 0e62 FC01      		movw r30,r24
 2156 0e64 22A1      		ldd r18,Z+34
 2157 0e66 33A1      		ldd r19,Z+35
 2158 0e68 8985      		ldd r24,Y+9
 2159 0e6a 9A85      		ldd r25,Y+10
 2160 0e6c 880F      		lsl r24
 2161 0e6e 991F      		rol r25
 2162 0e70 880F      		lsl r24
 2163 0e72 991F      		rol r25
 2164 0e74 820F      		add r24,r18
 2165 0e76 931F      		adc r25,r19
 2166 0e78 FC01      		movw r30,r24
 2167 0e7a 8081      		ld r24,Z
 2168 0e7c 9181      		ldd r25,Z+1
 2169 0e7e A281      		ldd r26,Z+2
 2170 0e80 B381      		ldd r27,Z+3
 2171 0e82 2F81      		ldd r18,Y+7
 2172 0e84 3885      		ldd r19,Y+8
 2173 0e86 AC01      		movw r20,r24
 2174 0e88 BD01      		movw r22,r26
 2175 0e8a C901      		movw r24,r18
 2176 0e8c 0E94 0000 		call is_infinite
 2177 0e90 8823      		tst r24
 2178 0e92 01F0      		breq .L84
 295:lp_solve_5.5/lp_mipbb.c ****         return( lp->infinite );
 2179               		.loc 1 295 0
 2180 0e94 8F81      		ldd r24,Y+7
 2181 0e96 9885      		ldd r25,Y+8
 2182 0e98 865F      		subi r24,-10
 2183 0e9a 9C4F      		sbci r25,-4
 2184 0e9c FC01      		movw r30,r24
 2185 0e9e 8081      		ld r24,Z
 2186 0ea0 9181      		ldd r25,Z+1
 2187 0ea2 A281      		ldd r26,Z+2
 2188 0ea4 B381      		ldd r27,Z+3
 2189 0ea6 00C0      		rjmp .L78
 2190               	.L84:
 296:lp_solve_5.5/lp_mipbb.c ****       sum += coefOF * (lp->solution[ii]-BB->lowbo[ii]);
 2191               		.loc 1 296 0
 2192 0ea8 8F81      		ldd r24,Y+7
 2193 0eaa 9885      		ldd r25,Y+8
 2194 0eac 8E5E      		subi r24,-18
 2195 0eae 9D4F      		sbci r25,-3
 2196 0eb0 FC01      		movw r30,r24
 2197 0eb2 2081      		ld r18,Z
 2198 0eb4 3181      		ldd r19,Z+1
 2199 0eb6 8985      		ldd r24,Y+9
 2200 0eb8 9A85      		ldd r25,Y+10
 2201 0eba 880F      		lsl r24
 2202 0ebc 991F      		rol r25
 2203 0ebe 880F      		lsl r24
 2204 0ec0 991F      		rol r25
 2205 0ec2 820F      		add r24,r18
 2206 0ec4 931F      		adc r25,r19
 2207 0ec6 FC01      		movw r30,r24
 2208 0ec8 8081      		ld r24,Z
 2209 0eca 9181      		ldd r25,Z+1
 2210 0ecc A281      		ldd r26,Z+2
 2211 0ece B381      		ldd r27,Z+3
 2212 0ed0 2F85      		ldd r18,Y+15
 2213 0ed2 3889      		ldd r19,Y+16
 2214 0ed4 F901      		movw r30,r18
 2215 0ed6 42A1      		ldd r20,Z+34
 2216 0ed8 53A1      		ldd r21,Z+35
 2217 0eda 2985      		ldd r18,Y+9
 2218 0edc 3A85      		ldd r19,Y+10
 2219 0ede 220F      		lsl r18
 2220 0ee0 331F      		rol r19
 2221 0ee2 220F      		lsl r18
 2222 0ee4 331F      		rol r19
 2223 0ee6 240F      		add r18,r20
 2224 0ee8 351F      		adc r19,r21
 2225 0eea F901      		movw r30,r18
 2226 0eec 2081      		ld r18,Z
 2227 0eee 3181      		ldd r19,Z+1
 2228 0ef0 4281      		ldd r20,Z+2
 2229 0ef2 5381      		ldd r21,Z+3
 2230 0ef4 BC01      		movw r22,r24
 2231 0ef6 CD01      		movw r24,r26
 2232 0ef8 0E94 0000 		call __subsf3
 2233 0efc DC01      		movw r26,r24
 2234 0efe CB01      		movw r24,r22
 2235 0f00 2B85      		ldd r18,Y+11
 2236 0f02 3C85      		ldd r19,Y+12
 2237 0f04 4D85      		ldd r20,Y+13
 2238 0f06 5E85      		ldd r21,Y+14
 2239 0f08 BC01      		movw r22,r24
 2240 0f0a CD01      		movw r24,r26
 2241 0f0c 0E94 0000 		call __mulsf3
 2242 0f10 DC01      		movw r26,r24
 2243 0f12 CB01      		movw r24,r22
 2244 0f14 9C01      		movw r18,r24
 2245 0f16 AD01      		movw r20,r26
 2246 0f18 6B81      		ldd r22,Y+3
 2247 0f1a 7C81      		ldd r23,Y+4
 2248 0f1c 8D81      		ldd r24,Y+5
 2249 0f1e 9E81      		ldd r25,Y+6
 2250 0f20 0E94 0000 		call __addsf3
 2251 0f24 DC01      		movw r26,r24
 2252 0f26 CB01      		movw r24,r22
 2253 0f28 8B83      		std Y+3,r24
 2254 0f2a 9C83      		std Y+4,r25
 2255 0f2c AD83      		std Y+5,r26
 2256 0f2e BE83      		std Y+6,r27
 2257 0f30 00C0      		rjmp .L81
 2258               	.L88:
 297:lp_solve_5.5/lp_mipbb.c ****     }
 298:lp_solve_5.5/lp_mipbb.c ****     else {
 299:lp_solve_5.5/lp_mipbb.c ****       if(is_infinite(lp, BB->upbo[ii]))
 2259               		.loc 1 299 0
 2260 0f32 8F85      		ldd r24,Y+15
 2261 0f34 9889      		ldd r25,Y+16
 2262 0f36 FC01      		movw r30,r24
 2263 0f38 20A1      		ldd r18,Z+32
 2264 0f3a 31A1      		ldd r19,Z+33
 2265 0f3c 8985      		ldd r24,Y+9
 2266 0f3e 9A85      		ldd r25,Y+10
 2267 0f40 880F      		lsl r24
 2268 0f42 991F      		rol r25
 2269 0f44 880F      		lsl r24
 2270 0f46 991F      		rol r25
 2271 0f48 820F      		add r24,r18
 2272 0f4a 931F      		adc r25,r19
 2273 0f4c FC01      		movw r30,r24
 2274 0f4e 8081      		ld r24,Z
 2275 0f50 9181      		ldd r25,Z+1
 2276 0f52 A281      		ldd r26,Z+2
 2277 0f54 B381      		ldd r27,Z+3
 2278 0f56 2F81      		ldd r18,Y+7
 2279 0f58 3885      		ldd r19,Y+8
 2280 0f5a AC01      		movw r20,r24
 2281 0f5c BD01      		movw r22,r26
 2282 0f5e C901      		movw r24,r18
 2283 0f60 0E94 0000 		call is_infinite
 2284 0f64 8823      		tst r24
 2285 0f66 01F0      		breq .L85
 300:lp_solve_5.5/lp_mipbb.c ****         return( lp->infinite );
 2286               		.loc 1 300 0
 2287 0f68 8F81      		ldd r24,Y+7
 2288 0f6a 9885      		ldd r25,Y+8
 2289 0f6c 865F      		subi r24,-10
 2290 0f6e 9C4F      		sbci r25,-4
 2291 0f70 FC01      		movw r30,r24
 2292 0f72 8081      		ld r24,Z
 2293 0f74 9181      		ldd r25,Z+1
 2294 0f76 A281      		ldd r26,Z+2
 2295 0f78 B381      		ldd r27,Z+3
 2296 0f7a 00C0      		rjmp .L78
 2297               	.L85:
 301:lp_solve_5.5/lp_mipbb.c ****       sum += coefOF * (BB->upbo[ii] - lp->solution[ii]);
 2298               		.loc 1 301 0
 2299 0f7c 8F85      		ldd r24,Y+15
 2300 0f7e 9889      		ldd r25,Y+16
 2301 0f80 FC01      		movw r30,r24
 2302 0f82 20A1      		ldd r18,Z+32
 2303 0f84 31A1      		ldd r19,Z+33
 2304 0f86 8985      		ldd r24,Y+9
 2305 0f88 9A85      		ldd r25,Y+10
 2306 0f8a 880F      		lsl r24
 2307 0f8c 991F      		rol r25
 2308 0f8e 880F      		lsl r24
 2309 0f90 991F      		rol r25
 2310 0f92 820F      		add r24,r18
 2311 0f94 931F      		adc r25,r19
 2312 0f96 FC01      		movw r30,r24
 2313 0f98 8081      		ld r24,Z
 2314 0f9a 9181      		ldd r25,Z+1
 2315 0f9c A281      		ldd r26,Z+2
 2316 0f9e B381      		ldd r27,Z+3
 2317 0fa0 2F81      		ldd r18,Y+7
 2318 0fa2 3885      		ldd r19,Y+8
 2319 0fa4 2E5E      		subi r18,-18
 2320 0fa6 3D4F      		sbci r19,-3
 2321 0fa8 F901      		movw r30,r18
 2322 0faa 4081      		ld r20,Z
 2323 0fac 5181      		ldd r21,Z+1
 2324 0fae 2985      		ldd r18,Y+9
 2325 0fb0 3A85      		ldd r19,Y+10
 2326 0fb2 220F      		lsl r18
 2327 0fb4 331F      		rol r19
 2328 0fb6 220F      		lsl r18
 2329 0fb8 331F      		rol r19
 2330 0fba 240F      		add r18,r20
 2331 0fbc 351F      		adc r19,r21
 2332 0fbe F901      		movw r30,r18
 2333 0fc0 2081      		ld r18,Z
 2334 0fc2 3181      		ldd r19,Z+1
 2335 0fc4 4281      		ldd r20,Z+2
 2336 0fc6 5381      		ldd r21,Z+3
 2337 0fc8 BC01      		movw r22,r24
 2338 0fca CD01      		movw r24,r26
 2339 0fcc 0E94 0000 		call __subsf3
 2340 0fd0 DC01      		movw r26,r24
 2341 0fd2 CB01      		movw r24,r22
 2342 0fd4 2B85      		ldd r18,Y+11
 2343 0fd6 3C85      		ldd r19,Y+12
 2344 0fd8 4D85      		ldd r20,Y+13
 2345 0fda 5E85      		ldd r21,Y+14
 2346 0fdc BC01      		movw r22,r24
 2347 0fde CD01      		movw r24,r26
 2348 0fe0 0E94 0000 		call __mulsf3
 2349 0fe4 DC01      		movw r26,r24
 2350 0fe6 CB01      		movw r24,r22
 2351 0fe8 9C01      		movw r18,r24
 2352 0fea AD01      		movw r20,r26
 2353 0fec 6B81      		ldd r22,Y+3
 2354 0fee 7C81      		ldd r23,Y+4
 2355 0ff0 8D81      		ldd r24,Y+5
 2356 0ff2 9E81      		ldd r25,Y+6
 2357 0ff4 0E94 0000 		call __addsf3
 2358 0ff8 DC01      		movw r26,r24
 2359 0ffa CB01      		movw r24,r22
 2360 0ffc 8B83      		std Y+3,r24
 2361 0ffe 9C83      		std Y+4,r25
 2362 1000 AD83      		std Y+5,r26
 2363 1002 BE83      		std Y+6,r27
 2364 1004 00C0      		rjmp .L81
 2365               	.L89:
 290:lp_solve_5.5/lp_mipbb.c ****     ii = lp->rows + i;
 2366               		.loc 1 290 0
 2367 1006 0000      		nop
 2368               	.L81:
 288:lp_solve_5.5/lp_mipbb.c ****     if(!is_int(lp, i))
 2369               		.loc 1 288 0 discriminator 2
 2370 1008 8981      		ldd r24,Y+1
 2371 100a 9A81      		ldd r25,Y+2
 2372 100c 0196      		adiw r24,1
 2373 100e 9A83      		std Y+2,r25
 2374 1010 8983      		std Y+1,r24
 2375               	.L79:
 288:lp_solve_5.5/lp_mipbb.c ****     if(!is_int(lp, i))
 2376               		.loc 1 288 0 is_stmt 0 discriminator 1
 2377 1012 8F81      		ldd r24,Y+7
 2378 1014 9885      		ldd r25,Y+8
 2379 1016 8451      		subi r24,20
 2380 1018 9E4F      		sbci r25,-2
 2381 101a FC01      		movw r30,r24
 2382 101c 2081      		ld r18,Z
 2383 101e 3181      		ldd r19,Z+1
 2384 1020 8981      		ldd r24,Y+1
 2385 1022 9A81      		ldd r25,Y+2
 2386 1024 2817      		cp r18,r24
 2387 1026 3907      		cpc r19,r25
 2388 1028 04F0      		brlt .+2
 2389 102a 00C0      		rjmp .L86
 302:lp_solve_5.5/lp_mipbb.c ****     }
 303:lp_solve_5.5/lp_mipbb.c ****   }
 304:lp_solve_5.5/lp_mipbb.c ****   return( sum );
 2390               		.loc 1 304 0 is_stmt 1
 2391 102c 8B81      		ldd r24,Y+3
 2392 102e 9C81      		ldd r25,Y+4
 2393 1030 AD81      		ldd r26,Y+5
 2394 1032 BE81      		ldd r27,Y+6
 2395               	.L78:
 305:lp_solve_5.5/lp_mipbb.c **** }
 2396               		.loc 1 305 0
 2397 1034 BC01      		movw r22,r24
 2398 1036 CD01      		movw r24,r26
 2399               	/* epilogue start */
 2400 1038 6096      		adiw r28,16
 2401 103a 0FB6      		in __tmp_reg__,__SREG__
 2402 103c F894      		cli
 2403 103e DEBF      		out __SP_H__,r29
 2404 1040 0FBE      		out __SREG__,__tmp_reg__
 2405 1042 CDBF      		out __SP_L__,r28
 2406 1044 DF91      		pop r29
 2407 1046 CF91      		pop r28
 2408 1048 0895      		ret
 2409               		.cfi_endproc
 2410               	.LFE11:
 2412               	.global	presolve_BB
 2414               	presolve_BB:
 2415               	.LFB12:
 306:lp_solve_5.5/lp_mipbb.c **** 
 307:lp_solve_5.5/lp_mipbb.c **** STATIC REAL presolve_BB(BBrec *BB)
 308:lp_solve_5.5/lp_mipbb.c **** {
 2416               		.loc 1 308 0
 2417               		.cfi_startproc
 2418 104a CF93      		push r28
 2419               	.LCFI22:
 2420               		.cfi_def_cfa_offset 3
 2421               		.cfi_offset 28, -2
 2422 104c DF93      		push r29
 2423               	.LCFI23:
 2424               		.cfi_def_cfa_offset 4
 2425               		.cfi_offset 29, -3
 2426 104e 00D0      		rcall .
 2427               	.LCFI24:
 2428               		.cfi_def_cfa_offset 6
 2429 1050 CDB7      		in r28,__SP_L__
 2430 1052 DEB7      		in r29,__SP_H__
 2431               	.LCFI25:
 2432               		.cfi_def_cfa_register 28
 2433               	/* prologue: function */
 2434               	/* frame size = 2 */
 2435               	/* stack size = 4 */
 2436               	.L__stack_usage = 4
 2437 1054 9A83      		std Y+2,r25
 2438 1056 8983      		std Y+1,r24
 309:lp_solve_5.5/lp_mipbb.c ****   return( 0 );
 2439               		.loc 1 309 0
 2440 1058 80E0      		ldi r24,0
 2441 105a 90E0      		ldi r25,0
 2442 105c DC01      		movw r26,r24
 310:lp_solve_5.5/lp_mipbb.c **** }
 2443               		.loc 1 310 0
 2444 105e BC01      		movw r22,r24
 2445 1060 CD01      		movw r24,r26
 2446               	/* epilogue start */
 2447 1062 0F90      		pop __tmp_reg__
 2448 1064 0F90      		pop __tmp_reg__
 2449 1066 DF91      		pop r29
 2450 1068 CF91      		pop r28
 2451 106a 0895      		ret
 2452               		.cfi_endproc
 2453               	.LFE12:
 2455               	.global	__divsf3
 2456               	.global	__unordsf2
 2457               	.global	__lesf2
 2458               	.global	__nesf2
 2459               	.global	initbranches_BB
 2461               	initbranches_BB:
 2462               	.LFB13:
 311:lp_solve_5.5/lp_mipbb.c **** 
 312:lp_solve_5.5/lp_mipbb.c **** /* Node and branch management routines */
 313:lp_solve_5.5/lp_mipbb.c **** STATIC MYBOOL initbranches_BB(BBrec *BB)
 314:lp_solve_5.5/lp_mipbb.c **** {
 2463               		.loc 1 314 0
 2464               		.cfi_startproc
 2465 106c CF92      		push r12
 2466               	.LCFI26:
 2467               		.cfi_def_cfa_offset 3
 2468               		.cfi_offset 12, -2
 2469 106e DF92      		push r13
 2470               	.LCFI27:
 2471               		.cfi_def_cfa_offset 4
 2472               		.cfi_offset 13, -3
 2473 1070 EF92      		push r14
 2474               	.LCFI28:
 2475               		.cfi_def_cfa_offset 5
 2476               		.cfi_offset 14, -4
 2477 1072 FF92      		push r15
 2478               	.LCFI29:
 2479               		.cfi_def_cfa_offset 6
 2480               		.cfi_offset 15, -5
 2481 1074 0F93      		push r16
 2482               	.LCFI30:
 2483               		.cfi_def_cfa_offset 7
 2484               		.cfi_offset 16, -6
 2485 1076 1F93      		push r17
 2486               	.LCFI31:
 2487               		.cfi_def_cfa_offset 8
 2488               		.cfi_offset 17, -7
 2489 1078 CF93      		push r28
 2490               	.LCFI32:
 2491               		.cfi_def_cfa_offset 9
 2492               		.cfi_offset 28, -8
 2493 107a DF93      		push r29
 2494               	.LCFI33:
 2495               		.cfi_def_cfa_offset 10
 2496               		.cfi_offset 29, -9
 2497 107c CDB7      		in r28,__SP_L__
 2498 107e DEB7      		in r29,__SP_H__
 2499               	.LCFI34:
 2500               		.cfi_def_cfa_register 28
 2501 1080 6097      		sbiw r28,16
 2502               	.LCFI35:
 2503               		.cfi_def_cfa_offset 26
 2504 1082 0FB6      		in __tmp_reg__,__SREG__
 2505 1084 F894      		cli
 2506 1086 DEBF      		out __SP_H__,r29
 2507 1088 0FBE      		out __SREG__,__tmp_reg__
 2508 108a CDBF      		out __SP_L__,r28
 2509               	/* prologue: function */
 2510               	/* frame size = 16 */
 2511               	/* stack size = 24 */
 2512               	.L__stack_usage = 24
 2513 108c 9E87      		std Y+14,r25
 2514 108e 8D87      		std Y+13,r24
 315:lp_solve_5.5/lp_mipbb.c ****   REAL   new_bound, temp;
 316:lp_solve_5.5/lp_mipbb.c ****   int    k;
 317:lp_solve_5.5/lp_mipbb.c ****   lprec  *lp = BB->lp;
 2515               		.loc 1 317 0
 2516 1090 8D85      		ldd r24,Y+13
 2517 1092 9E85      		ldd r25,Y+14
 2518 1094 FC01      		movw r30,r24
 2519 1096 8481      		ldd r24,Z+4
 2520 1098 9581      		ldd r25,Z+5
 2521 109a 9E83      		std Y+6,r25
 2522 109c 8D83      		std Y+5,r24
 318:lp_solve_5.5/lp_mipbb.c **** 
 319:lp_solve_5.5/lp_mipbb.c ****  /* Create and initialize local bounds and basis */
 320:lp_solve_5.5/lp_mipbb.c ****   BB->nodestatus = NOTRUN;
 2523               		.loc 1 320 0
 2524 109e 8D85      		ldd r24,Y+13
 2525 10a0 9E85      		ldd r25,Y+14
 2526 10a2 2FEF      		ldi r18,lo8(-1)
 2527 10a4 3FEF      		ldi r19,lo8(-1)
 2528 10a6 FC01      		movw r30,r24
 2529 10a8 338B      		std Z+19,r19
 2530 10aa 228B      		std Z+18,r18
 321:lp_solve_5.5/lp_mipbb.c ****   BB->noderesult = lp->infinite;
 2531               		.loc 1 321 0
 2532 10ac 8D81      		ldd r24,Y+5
 2533 10ae 9E81      		ldd r25,Y+6
 2534 10b0 865F      		subi r24,-10
 2535 10b2 9C4F      		sbci r25,-4
 2536 10b4 FC01      		movw r30,r24
 2537 10b6 8081      		ld r24,Z
 2538 10b8 9181      		ldd r25,Z+1
 2539 10ba A281      		ldd r26,Z+2
 2540 10bc B381      		ldd r27,Z+3
 2541 10be 2D85      		ldd r18,Y+13
 2542 10c0 3E85      		ldd r19,Y+14
 2543 10c2 F901      		movw r30,r18
 2544 10c4 848B      		std Z+20,r24
 2545 10c6 958B      		std Z+21,r25
 2546 10c8 A68B      		std Z+22,r26
 2547 10ca B78B      		std Z+23,r27
 322:lp_solve_5.5/lp_mipbb.c ****   push_basis(lp, NULL, NULL, NULL);
 2548               		.loc 1 322 0
 2549 10cc 8D81      		ldd r24,Y+5
 2550 10ce 9E81      		ldd r25,Y+6
 2551 10d0 20E0      		ldi r18,0
 2552 10d2 30E0      		ldi r19,0
 2553 10d4 40E0      		ldi r20,0
 2554 10d6 50E0      		ldi r21,0
 2555 10d8 60E0      		ldi r22,0
 2556 10da 70E0      		ldi r23,0
 2557 10dc 0E94 0000 		call push_basis
 323:lp_solve_5.5/lp_mipbb.c **** 
 324:lp_solve_5.5/lp_mipbb.c ****  /* Set default number of branches at the current B&B branch */
 325:lp_solve_5.5/lp_mipbb.c ****   if(BB->vartype == BB_REAL)
 2558               		.loc 1 325 0
 2559 10e0 8D85      		ldd r24,Y+13
 2560 10e2 9E85      		ldd r25,Y+14
 2561 10e4 FC01      		movw r30,r24
 2562 10e6 8085      		ldd r24,Z+8
 2563 10e8 9185      		ldd r25,Z+9
 2564 10ea 892B      		or r24,r25
 2565 10ec 01F4      		brne .L93
 326:lp_solve_5.5/lp_mipbb.c ****     BB->nodesleft = 1;
 2566               		.loc 1 326 0
 2567 10ee 8D85      		ldd r24,Y+13
 2568 10f0 9E85      		ldd r25,Y+14
 2569 10f2 21E0      		ldi r18,lo8(1)
 2570 10f4 30E0      		ldi r19,0
 2571 10f6 FC01      		movw r30,r24
 2572 10f8 3787      		std Z+15,r19
 2573 10fa 2687      		std Z+14,r18
 2574 10fc 00C0      		rjmp .L94
 2575               	.L93:
 327:lp_solve_5.5/lp_mipbb.c **** 
 328:lp_solve_5.5/lp_mipbb.c ****   else {
 329:lp_solve_5.5/lp_mipbb.c ****    /* The default is a binary up-low branching */
 330:lp_solve_5.5/lp_mipbb.c ****     BB->nodesleft = 2;
 2576               		.loc 1 330 0
 2577 10fe 8D85      		ldd r24,Y+13
 2578 1100 9E85      		ldd r25,Y+14
 2579 1102 22E0      		ldi r18,lo8(2)
 2580 1104 30E0      		ldi r19,0
 2581 1106 FC01      		movw r30,r24
 2582 1108 3787      		std Z+15,r19
 2583 110a 2687      		std Z+14,r18
 331:lp_solve_5.5/lp_mipbb.c **** 
 332:lp_solve_5.5/lp_mipbb.c ****    /* Initialize the MIP status code pair and set reference values */
 333:lp_solve_5.5/lp_mipbb.c ****     k = BB->varno - lp->rows;
 2584               		.loc 1 333 0
 2585 110c 8D85      		ldd r24,Y+13
 2586 110e 9E85      		ldd r25,Y+14
 2587 1110 FC01      		movw r30,r24
 2588 1112 2681      		ldd r18,Z+6
 2589 1114 3781      		ldd r19,Z+7
 2590 1116 8D81      		ldd r24,Y+5
 2591 1118 9E81      		ldd r25,Y+6
 2592 111a 8651      		subi r24,22
 2593 111c 9E4F      		sbci r25,-2
 2594 111e FC01      		movw r30,r24
 2595 1120 8081      		ld r24,Z
 2596 1122 9181      		ldd r25,Z+1
 2597 1124 A901      		movw r20,r18
 2598 1126 481B      		sub r20,r24
 2599 1128 590B      		sbc r21,r25
 2600 112a CA01      		movw r24,r20
 2601 112c 9887      		std Y+8,r25
 2602 112e 8F83      		std Y+7,r24
 334:lp_solve_5.5/lp_mipbb.c ****     BB->lastsolution = lp->solution[BB->varno];
 2603               		.loc 1 334 0
 2604 1130 8D81      		ldd r24,Y+5
 2605 1132 9E81      		ldd r25,Y+6
 2606 1134 8E5E      		subi r24,-18
 2607 1136 9D4F      		sbci r25,-3
 2608 1138 FC01      		movw r30,r24
 2609 113a 2081      		ld r18,Z
 2610 113c 3181      		ldd r19,Z+1
 2611 113e 8D85      		ldd r24,Y+13
 2612 1140 9E85      		ldd r25,Y+14
 2613 1142 FC01      		movw r30,r24
 2614 1144 8681      		ldd r24,Z+6
 2615 1146 9781      		ldd r25,Z+7
 2616 1148 880F      		lsl r24
 2617 114a 991F      		rol r25
 2618 114c 880F      		lsl r24
 2619 114e 991F      		rol r25
 2620 1150 820F      		add r24,r18
 2621 1152 931F      		adc r25,r19
 2622 1154 FC01      		movw r30,r24
 2623 1156 8081      		ld r24,Z
 2624 1158 9181      		ldd r25,Z+1
 2625 115a A281      		ldd r26,Z+2
 2626 115c B381      		ldd r27,Z+3
 2627 115e 2D85      		ldd r18,Y+13
 2628 1160 3E85      		ldd r19,Y+14
 2629 1162 F901      		movw r30,r18
 2630 1164 808F      		std Z+24,r24
 2631 1166 918F      		std Z+25,r25
 2632 1168 A28F      		std Z+26,r26
 2633 116a B38F      		std Z+27,r27
 335:lp_solve_5.5/lp_mipbb.c **** 
 336:lp_solve_5.5/lp_mipbb.c ****    /* Determine if we must process in the B&B SOS mode */
 337:lp_solve_5.5/lp_mipbb.c ****     BB->isSOS = (MYBOOL) ((BB->vartype == BB_SOS) || SOS_is_member(lp->SOS, 0, k));
 2634               		.loc 1 337 0
 2635 116c 8D85      		ldd r24,Y+13
 2636 116e 9E85      		ldd r25,Y+14
 2637 1170 FC01      		movw r30,r24
 2638 1172 8085      		ldd r24,Z+8
 2639 1174 9185      		ldd r25,Z+9
 2640 1176 0397      		sbiw r24,3
 2641 1178 01F0      		breq .L95
 2642               		.loc 1 337 0 is_stmt 0 discriminator 2
 2643 117a 8D81      		ldd r24,Y+5
 2644 117c 9E81      		ldd r25,Y+6
 2645 117e 8256      		subi r24,98
 2646 1180 9D4F      		sbci r25,-3
 2647 1182 FC01      		movw r30,r24
 2648 1184 8081      		ld r24,Z
 2649 1186 9181      		ldd r25,Z+1
 2650 1188 2F81      		ldd r18,Y+7
 2651 118a 3885      		ldd r19,Y+8
 2652 118c A901      		movw r20,r18
 2653 118e 60E0      		ldi r22,0
 2654 1190 70E0      		ldi r23,0
 2655 1192 0E94 0000 		call SOS_is_member
 2656 1196 892B      		or r24,r25
 2657 1198 01F0      		breq .L96
 2658               	.L95:
 2659               		.loc 1 337 0 discriminator 3
 2660 119a 81E0      		ldi r24,lo8(1)
 2661 119c 90E0      		ldi r25,0
 2662 119e 00C0      		rjmp .L97
 2663               	.L96:
 2664               		.loc 1 337 0 discriminator 4
 2665 11a0 80E0      		ldi r24,0
 2666 11a2 90E0      		ldi r25,0
 2667               	.L97:
 2668               		.loc 1 337 0 discriminator 6
 2669 11a4 282F      		mov r18,r24
 2670 11a6 8D85      		ldd r24,Y+13
 2671 11a8 9E85      		ldd r25,Y+14
 2672 11aa FC01      		movw r30,r24
 2673 11ac 22AB      		std Z+50,r18
 338:lp_solve_5.5/lp_mipbb.c **** #ifdef Paranoia
 339:lp_solve_5.5/lp_mipbb.c ****     if((BB->vartype == BB_SOS) && !SOS_is_member(lp->SOS, 0, k))
 340:lp_solve_5.5/lp_mipbb.c ****       report(lp, SEVERE, "initbranches_BB: Inconsistent identification of SOS variable %s (%d)\n",
 341:lp_solve_5.5/lp_mipbb.c ****                          get_col_name(lp, k), k);
 342:lp_solve_5.5/lp_mipbb.c **** #endif
 343:lp_solve_5.5/lp_mipbb.c **** 
 344:lp_solve_5.5/lp_mipbb.c ****    /* Check if we have a GUB-member variable that needs a triple-branch */
 345:lp_solve_5.5/lp_mipbb.c ****     BB->isGUB = (MYBOOL) ((BB->vartype == BB_INT) && SOS_can_activate(lp->GUB, 0, k));
 2674               		.loc 1 345 0 is_stmt 1 discriminator 6
 2675 11ae 8D85      		ldd r24,Y+13
 2676 11b0 9E85      		ldd r25,Y+14
 2677 11b2 FC01      		movw r30,r24
 2678 11b4 8085      		ldd r24,Z+8
 2679 11b6 9185      		ldd r25,Z+9
 2680 11b8 0197      		sbiw r24,1
 2681 11ba 01F4      		brne .L98
 2682               		.loc 1 345 0 is_stmt 0 discriminator 1
 2683 11bc 8D81      		ldd r24,Y+5
 2684 11be 9E81      		ldd r25,Y+6
 2685 11c0 8856      		subi r24,104
 2686 11c2 9D4F      		sbci r25,-3
 2687 11c4 FC01      		movw r30,r24
 2688 11c6 8081      		ld r24,Z
 2689 11c8 9181      		ldd r25,Z+1
 2690 11ca 2F81      		ldd r18,Y+7
 2691 11cc 3885      		ldd r19,Y+8
 2692 11ce A901      		movw r20,r18
 2693 11d0 60E0      		ldi r22,0
 2694 11d2 70E0      		ldi r23,0
 2695 11d4 0E94 0000 		call SOS_can_activate
 2696 11d8 8823      		tst r24
 2697 11da 01F0      		breq .L98
 2698               		.loc 1 345 0 discriminator 3
 2699 11dc 81E0      		ldi r24,lo8(1)
 2700 11de 90E0      		ldi r25,0
 2701 11e0 00C0      		rjmp .L99
 2702               	.L98:
 2703               		.loc 1 345 0 discriminator 4
 2704 11e2 80E0      		ldi r24,0
 2705 11e4 90E0      		ldi r25,0
 2706               	.L99:
 2707               		.loc 1 345 0 discriminator 6
 2708 11e6 282F      		mov r18,r24
 2709 11e8 8D85      		ldd r24,Y+13
 2710 11ea 9E85      		ldd r25,Y+14
 2711 11ec FC01      		movw r30,r24
 2712 11ee 23AB      		std Z+51,r18
 346:lp_solve_5.5/lp_mipbb.c ****     if(BB->isGUB) {
 2713               		.loc 1 346 0 is_stmt 1 discriminator 6
 2714 11f0 8D85      		ldd r24,Y+13
 2715 11f2 9E85      		ldd r25,Y+14
 2716 11f4 FC01      		movw r30,r24
 2717 11f6 83A9      		ldd r24,Z+51
 2718 11f8 8823      		tst r24
 2719 11fa 01F0      		breq .L100
 347:lp_solve_5.5/lp_mipbb.c ****       /* Obtain variable index list from applicable GUB - now the first GUB is used,
 348:lp_solve_5.5/lp_mipbb.c ****         but we could also consider selecting the longest */
 349:lp_solve_5.5/lp_mipbb.c ****       BB->varmanaged = SOS_get_candidates(lp->GUB, -1, k, TRUE, BB->upbo, BB->lowbo);
 2720               		.loc 1 349 0
 2721 11fc 8D85      		ldd r24,Y+13
 2722 11fe 9E85      		ldd r25,Y+14
 2723 1200 FC01      		movw r30,r24
 2724 1202 62A1      		ldd r22,Z+34
 2725 1204 73A1      		ldd r23,Z+35
 2726 1206 8D85      		ldd r24,Y+13
 2727 1208 9E85      		ldd r25,Y+14
 2728 120a FC01      		movw r30,r24
 2729 120c 20A1      		ldd r18,Z+32
 2730 120e 31A1      		ldd r19,Z+33
 2731 1210 8D81      		ldd r24,Y+5
 2732 1212 9E81      		ldd r25,Y+6
 2733 1214 8856      		subi r24,104
 2734 1216 9D4F      		sbci r25,-3
 2735 1218 FC01      		movw r30,r24
 2736 121a 8081      		ld r24,Z
 2737 121c 9181      		ldd r25,Z+1
 2738 121e 4F81      		ldd r20,Y+7
 2739 1220 5885      		ldd r21,Y+8
 2740 1222 7B01      		movw r14,r22
 2741 1224 8901      		movw r16,r18
 2742 1226 21E0      		ldi r18,lo8(1)
 2743 1228 6FEF      		ldi r22,lo8(-1)
 2744 122a 7FEF      		ldi r23,lo8(-1)
 2745 122c 0E94 0000 		call SOS_get_candidates
 2746 1230 9C01      		movw r18,r24
 2747 1232 8D85      		ldd r24,Y+13
 2748 1234 9E85      		ldd r25,Y+14
 2749 1236 FC01      		movw r30,r24
 2750 1238 35AB      		std Z+53,r19
 2751 123a 24AB      		std Z+52,r18
 350:lp_solve_5.5/lp_mipbb.c ****       BB->nodesleft++;
 2752               		.loc 1 350 0
 2753 123c 8D85      		ldd r24,Y+13
 2754 123e 9E85      		ldd r25,Y+14
 2755 1240 FC01      		movw r30,r24
 2756 1242 8685      		ldd r24,Z+14
 2757 1244 9785      		ldd r25,Z+15
 2758 1246 9C01      		movw r18,r24
 2759 1248 2F5F      		subi r18,-1
 2760 124a 3F4F      		sbci r19,-1
 2761 124c 8D85      		ldd r24,Y+13
 2762 124e 9E85      		ldd r25,Y+14
 2763 1250 FC01      		movw r30,r24
 2764 1252 3787      		std Z+15,r19
 2765 1254 2687      		std Z+14,r18
 2766               	.L100:
 351:lp_solve_5.5/lp_mipbb.c ****     }
 352:lp_solve_5.5/lp_mipbb.c **** 
 353:lp_solve_5.5/lp_mipbb.c **** 
 354:lp_solve_5.5/lp_mipbb.c ****    /* Set local pruning info, automatic, or user-defined strategy */
 355:lp_solve_5.5/lp_mipbb.c ****     if(BB->vartype == BB_SOS) {
 2767               		.loc 1 355 0
 2768 1256 8D85      		ldd r24,Y+13
 2769 1258 9E85      		ldd r25,Y+14
 2770 125a FC01      		movw r30,r24
 2771 125c 8085      		ldd r24,Z+8
 2772 125e 9185      		ldd r25,Z+9
 2773 1260 0397      		sbiw r24,3
 2774 1262 01F4      		brne .L101
 356:lp_solve_5.5/lp_mipbb.c ****       if(!SOS_can_activate(lp->SOS, 0, k)) {
 2775               		.loc 1 356 0
 2776 1264 8D81      		ldd r24,Y+5
 2777 1266 9E81      		ldd r25,Y+6
 2778 1268 8256      		subi r24,98
 2779 126a 9D4F      		sbci r25,-3
 2780 126c FC01      		movw r30,r24
 2781 126e 8081      		ld r24,Z
 2782 1270 9181      		ldd r25,Z+1
 2783 1272 2F81      		ldd r18,Y+7
 2784 1274 3885      		ldd r19,Y+8
 2785 1276 A901      		movw r20,r18
 2786 1278 60E0      		ldi r22,0
 2787 127a 70E0      		ldi r23,0
 2788 127c 0E94 0000 		call SOS_can_activate
 2789 1280 8823      		tst r24
 2790 1282 01F4      		brne .L102
 357:lp_solve_5.5/lp_mipbb.c ****         BB->nodesleft--;
 2791               		.loc 1 357 0
 2792 1284 8D85      		ldd r24,Y+13
 2793 1286 9E85      		ldd r25,Y+14
 2794 1288 FC01      		movw r30,r24
 2795 128a 8685      		ldd r24,Z+14
 2796 128c 9785      		ldd r25,Z+15
 2797 128e 9C01      		movw r18,r24
 2798 1290 2150      		subi r18,1
 2799 1292 3109      		sbc r19,__zero_reg__
 2800 1294 8D85      		ldd r24,Y+13
 2801 1296 9E85      		ldd r25,Y+14
 2802 1298 FC01      		movw r30,r24
 2803 129a 3787      		std Z+15,r19
 2804 129c 2687      		std Z+14,r18
 358:lp_solve_5.5/lp_mipbb.c ****         BB->isfloor = TRUE;
 2805               		.loc 1 358 0
 2806 129e 8D85      		ldd r24,Y+13
 2807 12a0 9E85      		ldd r25,Y+14
 2808 12a2 21E0      		ldi r18,lo8(1)
 2809 12a4 FC01      		movw r30,r24
 2810 12a6 26AB      		std Z+54,r18
 2811 12a8 00C0      		rjmp .L105
 2812               	.L102:
 359:lp_solve_5.5/lp_mipbb.c ****       }
 360:lp_solve_5.5/lp_mipbb.c ****       else
 361:lp_solve_5.5/lp_mipbb.c ****         BB->isfloor = (MYBOOL) (BB->lastsolution == 0);
 2813               		.loc 1 361 0
 2814 12aa 8D85      		ldd r24,Y+13
 2815 12ac 9E85      		ldd r25,Y+14
 2816 12ae FC01      		movw r30,r24
 2817 12b0 808D      		ldd r24,Z+24
 2818 12b2 918D      		ldd r25,Z+25
 2819 12b4 A28D      		ldd r26,Z+26
 2820 12b6 B38D      		ldd r27,Z+27
 2821 12b8 11E0      		ldi r17,lo8(1)
 2822 12ba 20E0      		ldi r18,0
 2823 12bc 30E0      		ldi r19,0
 2824 12be A901      		movw r20,r18
 2825 12c0 BC01      		movw r22,r24
 2826 12c2 CD01      		movw r24,r26
 2827 12c4 0E94 0000 		call __eqsf2
 2828 12c8 8823      		tst r24
 2829 12ca 01F0      		breq .L104
 2830 12cc 10E0      		ldi r17,0
 2831               	.L104:
 2832 12ce 212F      		mov r18,r17
 2833 12d0 8D85      		ldd r24,Y+13
 2834 12d2 9E85      		ldd r25,Y+14
 2835 12d4 FC01      		movw r30,r24
 2836 12d6 26AB      		std Z+54,r18
 2837 12d8 00C0      		rjmp .L105
 2838               	.L101:
 362:lp_solve_5.5/lp_mipbb.c ****     }
 363:lp_solve_5.5/lp_mipbb.c **** 
 364:lp_solve_5.5/lp_mipbb.c ****     /* First check if the user wishes to select the branching direction */
 365:lp_solve_5.5/lp_mipbb.c ****     else if(lp->bb_usebranch != NULL)
 2839               		.loc 1 365 0
 2840 12da 8D81      		ldd r24,Y+5
 2841 12dc 9E81      		ldd r25,Y+6
 2842 12de 865F      		subi r24,-10
 2843 12e0 9B4F      		sbci r25,-5
 2844 12e2 FC01      		movw r30,r24
 2845 12e4 8081      		ld r24,Z
 2846 12e6 9181      		ldd r25,Z+1
 2847 12e8 892B      		or r24,r25
 2848 12ea 01F0      		breq .L106
 366:lp_solve_5.5/lp_mipbb.c ****       BB->isfloor = (MYBOOL) lp->bb_usebranch(lp, lp->bb_branchhandle, k);
 2849               		.loc 1 366 0
 2850 12ec 8D81      		ldd r24,Y+5
 2851 12ee 9E81      		ldd r25,Y+6
 2852 12f0 865F      		subi r24,-10
 2853 12f2 9B4F      		sbci r25,-5
 2854 12f4 FC01      		movw r30,r24
 2855 12f6 2081      		ld r18,Z
 2856 12f8 3181      		ldd r19,Z+1
 2857 12fa 8D81      		ldd r24,Y+5
 2858 12fc 9E81      		ldd r25,Y+6
 2859 12fe 845F      		subi r24,-12
 2860 1300 9B4F      		sbci r25,-5
 2861 1302 FC01      		movw r30,r24
 2862 1304 6081      		ld r22,Z
 2863 1306 7181      		ldd r23,Z+1
 2864 1308 4F81      		ldd r20,Y+7
 2865 130a 5885      		ldd r21,Y+8
 2866 130c 8D81      		ldd r24,Y+5
 2867 130e 9E81      		ldd r25,Y+6
 2868 1310 F901      		movw r30,r18
 2869 1312 0995      		icall
 2870 1314 282F      		mov r18,r24
 2871 1316 8D85      		ldd r24,Y+13
 2872 1318 9E85      		ldd r25,Y+14
 2873 131a FC01      		movw r30,r24
 2874 131c 26AB      		std Z+54,r18
 2875 131e 00C0      		rjmp .L105
 2876               	.L106:
 367:lp_solve_5.5/lp_mipbb.c **** 
 368:lp_solve_5.5/lp_mipbb.c ****     /* Otherwise check if we should do automatic branching */
 369:lp_solve_5.5/lp_mipbb.c ****     else if(get_var_branch(lp, k) == BRANCH_AUTOMATIC) {
 2877               		.loc 1 369 0
 2878 1320 2F81      		ldd r18,Y+7
 2879 1322 3885      		ldd r19,Y+8
 2880 1324 8D81      		ldd r24,Y+5
 2881 1326 9E81      		ldd r25,Y+6
 2882 1328 B901      		movw r22,r18
 2883 132a 0E94 0000 		call get_var_branch
 2884 132e 0297      		sbiw r24,2
 2885 1330 01F0      		breq .+2
 2886 1332 00C0      		rjmp .L107
 370:lp_solve_5.5/lp_mipbb.c ****       new_bound = modf(BB->lastsolution/get_pseudorange(lp->bb_PseudoCost, k, BB->vartype), &temp);
 2887               		.loc 1 370 0
 2888 1334 8D85      		ldd r24,Y+13
 2889 1336 9E85      		ldd r25,Y+14
 2890 1338 FC01      		movw r30,r24
 2891 133a C08C      		ldd r12,Z+24
 2892 133c D18C      		ldd r13,Z+25
 2893 133e E28C      		ldd r14,Z+26
 2894 1340 F38C      		ldd r15,Z+27
 2895 1342 8D85      		ldd r24,Y+13
 2896 1344 9E85      		ldd r25,Y+14
 2897 1346 FC01      		movw r30,r24
 2898 1348 4085      		ldd r20,Z+8
 2899 134a 5185      		ldd r21,Z+9
 2900 134c 8D81      		ldd r24,Y+5
 2901 134e 9E81      		ldd r25,Y+6
 2902 1350 8A52      		subi r24,42
 2903 1352 9D4F      		sbci r25,-3
 2904 1354 FC01      		movw r30,r24
 2905 1356 8081      		ld r24,Z
 2906 1358 9181      		ldd r25,Z+1
 2907 135a 2F81      		ldd r18,Y+7
 2908 135c 3885      		ldd r19,Y+8
 2909 135e B901      		movw r22,r18
 2910 1360 0E94 0000 		call get_pseudorange
 2911 1364 DC01      		movw r26,r24
 2912 1366 CB01      		movw r24,r22
 2913 1368 9C01      		movw r18,r24
 2914 136a AD01      		movw r20,r26
 2915 136c C701      		movw r24,r14
 2916 136e B601      		movw r22,r12
 2917 1370 0E94 0000 		call __divsf3
 2918 1374 DC01      		movw r26,r24
 2919 1376 CB01      		movw r24,r22
 2920 1378 8C01      		movw r16,r24
 2921 137a 9D01      		movw r18,r26
 2922 137c CE01      		movw r24,r28
 2923 137e 0996      		adiw r24,9
 2924 1380 AC01      		movw r20,r24
 2925 1382 C901      		movw r24,r18
 2926 1384 B801      		movw r22,r16
 2927 1386 0E94 0000 		call modf
 2928 138a DC01      		movw r26,r24
 2929 138c CB01      		movw r24,r22
 2930 138e 8983      		std Y+1,r24
 2931 1390 9A83      		std Y+2,r25
 2932 1392 AB83      		std Y+3,r26
 2933 1394 BC83      		std Y+4,r27
 371:lp_solve_5.5/lp_mipbb.c ****       if(isnan(new_bound))
 2934               		.loc 1 371 0
 2935 1396 2981      		ldd r18,Y+1
 2936 1398 3A81      		ldd r19,Y+2
 2937 139a 4B81      		ldd r20,Y+3
 2938 139c 5C81      		ldd r21,Y+4
 2939 139e 6981      		ldd r22,Y+1
 2940 13a0 7A81      		ldd r23,Y+2
 2941 13a2 8B81      		ldd r24,Y+3
 2942 13a4 9C81      		ldd r25,Y+4
 2943 13a6 0E94 0000 		call __unordsf2
 2944 13aa 8823      		tst r24
 2945 13ac 01F0      		breq .L134
 372:lp_solve_5.5/lp_mipbb.c ****         new_bound = 0;
 2946               		.loc 1 372 0
 2947 13ae 1982      		std Y+1,__zero_reg__
 2948 13b0 1A82      		std Y+2,__zero_reg__
 2949 13b2 1B82      		std Y+3,__zero_reg__
 2950 13b4 1C82      		std Y+4,__zero_reg__
 2951 13b6 00C0      		rjmp .L110
 2952               	.L134:
 373:lp_solve_5.5/lp_mipbb.c ****       else if(new_bound < 0)
 2953               		.loc 1 373 0
 2954 13b8 20E0      		ldi r18,0
 2955 13ba 30E0      		ldi r19,0
 2956 13bc A901      		movw r20,r18
 2957 13be 6981      		ldd r22,Y+1
 2958 13c0 7A81      		ldd r23,Y+2
 2959 13c2 8B81      		ldd r24,Y+3
 2960 13c4 9C81      		ldd r25,Y+4
 2961 13c6 0E94 0000 		call __ltsf2
 2962 13ca 8823      		tst r24
 2963 13cc 04F4      		brge .L110
 374:lp_solve_5.5/lp_mipbb.c ****         new_bound += 1.0;
 2964               		.loc 1 374 0
 2965 13ce 20E0      		ldi r18,0
 2966 13d0 30E0      		ldi r19,0
 2967 13d2 40E8      		ldi r20,lo8(-128)
 2968 13d4 5FE3      		ldi r21,lo8(63)
 2969 13d6 6981      		ldd r22,Y+1
 2970 13d8 7A81      		ldd r23,Y+2
 2971 13da 8B81      		ldd r24,Y+3
 2972 13dc 9C81      		ldd r25,Y+4
 2973 13de 0E94 0000 		call __addsf3
 2974 13e2 DC01      		movw r26,r24
 2975 13e4 CB01      		movw r24,r22
 2976 13e6 8983      		std Y+1,r24
 2977 13e8 9A83      		std Y+2,r25
 2978 13ea AB83      		std Y+3,r26
 2979 13ec BC83      		std Y+4,r27
 2980               	.L110:
 375:lp_solve_5.5/lp_mipbb.c ****       BB->isfloor = (MYBOOL) (new_bound <= 0.5);
 2981               		.loc 1 375 0
 2982 13ee 11E0      		ldi r17,lo8(1)
 2983 13f0 20E0      		ldi r18,0
 2984 13f2 30E0      		ldi r19,0
 2985 13f4 40E0      		ldi r20,0
 2986 13f6 5FE3      		ldi r21,lo8(63)
 2987 13f8 6981      		ldd r22,Y+1
 2988 13fa 7A81      		ldd r23,Y+2
 2989 13fc 8B81      		ldd r24,Y+3
 2990 13fe 9C81      		ldd r25,Y+4
 2991 1400 0E94 0000 		call __lesf2
 2992 1404 1816      		cp __zero_reg__,r24
 2993 1406 04F4      		brge .L112
 2994 1408 10E0      		ldi r17,0
 2995               	.L112:
 2996 140a 212F      		mov r18,r17
 2997 140c 8D85      		ldd r24,Y+13
 2998 140e 9E85      		ldd r25,Y+14
 2999 1410 FC01      		movw r30,r24
 3000 1412 26AB      		std Z+54,r18
 376:lp_solve_5.5/lp_mipbb.c **** 
 377:lp_solve_5.5/lp_mipbb.c ****       /* Set direction by OF value; note that a zero-value in
 378:lp_solve_5.5/lp_mipbb.c ****          the OF gives priority to floor_first = TRUE */
 379:lp_solve_5.5/lp_mipbb.c ****       if(is_bb_mode(lp, NODE_GREEDYMODE)) {
 3001               		.loc 1 379 0
 3002 1414 8D81      		ldd r24,Y+5
 3003 1416 9E81      		ldd r25,Y+6
 3004 1418 60E2      		ldi r22,lo8(32)
 3005 141a 70E0      		ldi r23,0
 3006 141c 0E94 0000 		call is_bb_mode
 3007 1420 8823      		tst r24
 3008 1422 01F4      		brne .+2
 3009 1424 00C0      		rjmp .L113
 380:lp_solve_5.5/lp_mipbb.c ****         if(is_bb_mode(lp, NODE_PSEUDOCOSTMODE))
 3010               		.loc 1 380 0
 3011 1426 8D81      		ldd r24,Y+5
 3012 1428 9E81      		ldd r25,Y+6
 3013 142a 60E4      		ldi r22,lo8(64)
 3014 142c 70E0      		ldi r23,0
 3015 142e 0E94 0000 		call is_bb_mode
 3016 1432 8823      		tst r24
 3017 1434 01F0      		breq .L114
 381:lp_solve_5.5/lp_mipbb.c ****           BB->sc_bound = get_pseudonodecost(lp->bb_PseudoCost, k, BB->vartype, BB->lastsolution);
 3018               		.loc 1 381 0
 3019 1436 8D85      		ldd r24,Y+13
 3020 1438 9E85      		ldd r25,Y+14
 3021 143a FC01      		movw r30,r24
 3022 143c 808D      		ldd r24,Z+24
 3023 143e 918D      		ldd r25,Z+25
 3024 1440 A28D      		ldd r26,Z+26
 3025 1442 B38D      		ldd r27,Z+27
 3026 1444 2D85      		ldd r18,Y+13
 3027 1446 3E85      		ldd r19,Y+14
 3028 1448 F901      		movw r30,r18
 3029 144a 4085      		ldd r20,Z+8
 3030 144c 5185      		ldd r21,Z+9
 3031 144e 2D81      		ldd r18,Y+5
 3032 1450 3E81      		ldd r19,Y+6
 3033 1452 2A52      		subi r18,42
 3034 1454 3D4F      		sbci r19,-3
 3035 1456 F901      		movw r30,r18
 3036 1458 0190      		ld __tmp_reg__,Z+
 3037 145a F081      		ld r31,Z
 3038 145c E02D      		mov r30,__tmp_reg__
 3039 145e F88B      		std Y+16,r31
 3040 1460 EF87      		std Y+15,r30
 3041 1462 6F81      		ldd r22,Y+7
 3042 1464 7885      		ldd r23,Y+8
 3043 1466 8C01      		movw r16,r24
 3044 1468 9D01      		movw r18,r26
 3045 146a 8F85      		ldd r24,Y+15
 3046 146c 9889      		ldd r25,Y+16
 3047 146e 0E94 0000 		call get_pseudonodecost
 3048 1472 DC01      		movw r26,r24
 3049 1474 CB01      		movw r24,r22
 3050 1476 2D85      		ldd r18,Y+13
 3051 1478 3E85      		ldd r19,Y+14
 3052 147a F901      		movw r30,r18
 3053 147c 848F      		std Z+28,r24
 3054 147e 958F      		std Z+29,r25
 3055 1480 A68F      		std Z+30,r26
 3056 1482 B78F      		std Z+31,r27
 3057 1484 00C0      		rjmp .L115
 3058               	.L114:
 382:lp_solve_5.5/lp_mipbb.c ****         else
 383:lp_solve_5.5/lp_mipbb.c ****           BB->sc_bound = mat_getitem(lp->matA, 0, k);
 3059               		.loc 1 383 0
 3060 1486 8D81      		ldd r24,Y+5
 3061 1488 9E81      		ldd r25,Y+6
 3062 148a 8A54      		subi r24,74
 3063 148c 9D4F      		sbci r25,-3
 3064 148e FC01      		movw r30,r24
 3065 1490 8081      		ld r24,Z
 3066 1492 9181      		ldd r25,Z+1
 3067 1494 2F81      		ldd r18,Y+7
 3068 1496 3885      		ldd r19,Y+8
 3069 1498 A901      		movw r20,r18
 3070 149a 60E0      		ldi r22,0
 3071 149c 70E0      		ldi r23,0
 3072 149e 0E94 0000 		call mat_getitem
 3073 14a2 DC01      		movw r26,r24
 3074 14a4 CB01      		movw r24,r22
 3075 14a6 2D85      		ldd r18,Y+13
 3076 14a8 3E85      		ldd r19,Y+14
 3077 14aa F901      		movw r30,r18
 3078 14ac 848F      		std Z+28,r24
 3079 14ae 958F      		std Z+29,r25
 3080 14b0 A68F      		std Z+30,r26
 3081 14b2 B78F      		std Z+31,r27
 3082               	.L115:
 384:lp_solve_5.5/lp_mipbb.c ****         new_bound -= 0.5;
 3083               		.loc 1 384 0
 3084 14b4 20E0      		ldi r18,0
 3085 14b6 30E0      		ldi r19,0
 3086 14b8 40E0      		ldi r20,0
 3087 14ba 5FE3      		ldi r21,lo8(63)
 3088 14bc 6981      		ldd r22,Y+1
 3089 14be 7A81      		ldd r23,Y+2
 3090 14c0 8B81      		ldd r24,Y+3
 3091 14c2 9C81      		ldd r25,Y+4
 3092 14c4 0E94 0000 		call __subsf3
 3093 14c8 DC01      		movw r26,r24
 3094 14ca CB01      		movw r24,r22
 3095 14cc 8983      		std Y+1,r24
 3096 14ce 9A83      		std Y+2,r25
 3097 14d0 AB83      		std Y+3,r26
 3098 14d2 BC83      		std Y+4,r27
 385:lp_solve_5.5/lp_mipbb.c ****         BB->sc_bound *= new_bound;
 3099               		.loc 1 385 0
 3100 14d4 8D85      		ldd r24,Y+13
 3101 14d6 9E85      		ldd r25,Y+14
 3102 14d8 FC01      		movw r30,r24
 3103 14da 848D      		ldd r24,Z+28
 3104 14dc 958D      		ldd r25,Z+29
 3105 14de A68D      		ldd r26,Z+30
 3106 14e0 B78D      		ldd r27,Z+31
 3107 14e2 2981      		ldd r18,Y+1
 3108 14e4 3A81      		ldd r19,Y+2
 3109 14e6 4B81      		ldd r20,Y+3
 3110 14e8 5C81      		ldd r21,Y+4
 3111 14ea BC01      		movw r22,r24
 3112 14ec CD01      		movw r24,r26
 3113 14ee 0E94 0000 		call __mulsf3
 3114 14f2 DC01      		movw r26,r24
 3115 14f4 CB01      		movw r24,r22
 3116 14f6 2D85      		ldd r18,Y+13
 3117 14f8 3E85      		ldd r19,Y+14
 3118 14fa F901      		movw r30,r18
 3119 14fc 848F      		std Z+28,r24
 3120 14fe 958F      		std Z+29,r25
 3121 1500 A68F      		std Z+30,r26
 3122 1502 B78F      		std Z+31,r27
 386:lp_solve_5.5/lp_mipbb.c ****         BB->isfloor = (MYBOOL) (BB->sc_bound > 0);
 3123               		.loc 1 386 0
 3124 1504 8D85      		ldd r24,Y+13
 3125 1506 9E85      		ldd r25,Y+14
 3126 1508 FC01      		movw r30,r24
 3127 150a 848D      		ldd r24,Z+28
 3128 150c 958D      		ldd r25,Z+29
 3129 150e A68D      		ldd r26,Z+30
 3130 1510 B78D      		ldd r27,Z+31
 3131 1512 11E0      		ldi r17,lo8(1)
 3132 1514 20E0      		ldi r18,0
 3133 1516 30E0      		ldi r19,0
 3134 1518 A901      		movw r20,r18
 3135 151a BC01      		movw r22,r24
 3136 151c CD01      		movw r24,r26
 3137 151e 0E94 0000 		call __gtsf2
 3138 1522 1816      		cp __zero_reg__,r24
 3139 1524 04F0      		brlt .L116
 3140 1526 10E0      		ldi r17,0
 3141               	.L116:
 3142 1528 212F      		mov r18,r17
 3143 152a 8D85      		ldd r24,Y+13
 3144 152c 9E85      		ldd r25,Y+14
 3145 152e FC01      		movw r30,r24
 3146 1530 26AB      		std Z+54,r18
 3147 1532 00C0      		rjmp .L117
 3148               	.L113:
 387:lp_solve_5.5/lp_mipbb.c ****       }
 388:lp_solve_5.5/lp_mipbb.c ****       /* Set direction by pseudocost (normally used in tandem with NODE_PSEUDOxxxSELECT) */
 389:lp_solve_5.5/lp_mipbb.c ****       else if(is_bb_mode(lp, NODE_PSEUDOCOSTMODE)) {
 3149               		.loc 1 389 0
 3150 1534 8D81      		ldd r24,Y+5
 3151 1536 9E81      		ldd r25,Y+6
 3152 1538 60E4      		ldi r22,lo8(64)
 3153 153a 70E0      		ldi r23,0
 3154 153c 0E94 0000 		call is_bb_mode
 3155 1540 8823      		tst r24
 3156 1542 01F4      		brne .+2
 3157 1544 00C0      		rjmp .L117
 390:lp_solve_5.5/lp_mipbb.c ****         BB->isfloor = (MYBOOL) (get_pseudobranchcost(lp->bb_PseudoCost, k, TRUE) >
 3158               		.loc 1 390 0
 3159 1546 8D81      		ldd r24,Y+5
 3160 1548 9E81      		ldd r25,Y+6
 3161 154a 8A52      		subi r24,42
 3162 154c 9D4F      		sbci r25,-3
 3163 154e FC01      		movw r30,r24
 3164 1550 8081      		ld r24,Z
 3165 1552 9181      		ldd r25,Z+1
 3166 1554 2F81      		ldd r18,Y+7
 3167 1556 3885      		ldd r19,Y+8
 3168 1558 41E0      		ldi r20,lo8(1)
 3169 155a B901      		movw r22,r18
 3170 155c 0E94 0000 		call get_pseudobranchcost
 3171 1560 6B01      		movw r12,r22
 3172 1562 7C01      		movw r14,r24
 391:lp_solve_5.5/lp_mipbb.c ****                                 get_pseudobranchcost(lp->bb_PseudoCost, k, FALSE));
 3173               		.loc 1 391 0
 3174 1564 8D81      		ldd r24,Y+5
 3175 1566 9E81      		ldd r25,Y+6
 3176 1568 8A52      		subi r24,42
 3177 156a 9D4F      		sbci r25,-3
 3178 156c FC01      		movw r30,r24
 3179 156e 8081      		ld r24,Z
 3180 1570 9181      		ldd r25,Z+1
 3181 1572 2F81      		ldd r18,Y+7
 3182 1574 3885      		ldd r19,Y+8
 3183 1576 40E0      		ldi r20,0
 3184 1578 B901      		movw r22,r18
 3185 157a 0E94 0000 		call get_pseudobranchcost
 3186 157e DC01      		movw r26,r24
 3187 1580 CB01      		movw r24,r22
 390:lp_solve_5.5/lp_mipbb.c ****         BB->isfloor = (MYBOOL) (get_pseudobranchcost(lp->bb_PseudoCost, k, TRUE) >
 3188               		.loc 1 390 0
 3189 1582 11E0      		ldi r17,lo8(1)
 3190 1584 9C01      		movw r18,r24
 3191 1586 AD01      		movw r20,r26
 3192 1588 C701      		movw r24,r14
 3193 158a B601      		movw r22,r12
 3194 158c 0E94 0000 		call __gtsf2
 3195 1590 1816      		cp __zero_reg__,r24
 3196 1592 04F0      		brlt .L118
 3197 1594 10E0      		ldi r17,0
 3198               	.L118:
 3199 1596 212F      		mov r18,r17
 3200 1598 8D85      		ldd r24,Y+13
 3201 159a 9E85      		ldd r25,Y+14
 3202 159c FC01      		movw r30,r24
 3203 159e 26AB      		std Z+54,r18
 392:lp_solve_5.5/lp_mipbb.c ****         if(is_maxim(lp))
 3204               		.loc 1 392 0
 3205 15a0 8D81      		ldd r24,Y+5
 3206 15a2 9E81      		ldd r25,Y+6
 3207 15a4 0E94 0000 		call is_maxim
 3208 15a8 8823      		tst r24
 3209 15aa 01F0      		breq .L117
 393:lp_solve_5.5/lp_mipbb.c ****           BB->isfloor = !BB->isfloor;
 3210               		.loc 1 393 0
 3211 15ac 8D85      		ldd r24,Y+13
 3212 15ae 9E85      		ldd r25,Y+14
 3213 15b0 FC01      		movw r30,r24
 3214 15b2 96A9      		ldd r25,Z+54
 3215 15b4 81E0      		ldi r24,lo8(1)
 3216 15b6 9923      		tst r25
 3217 15b8 01F0      		breq .L119
 3218 15ba 80E0      		ldi r24,0
 3219               	.L119:
 3220 15bc 282F      		mov r18,r24
 3221 15be 8D85      		ldd r24,Y+13
 3222 15c0 9E85      		ldd r25,Y+14
 3223 15c2 FC01      		movw r30,r24
 3224 15c4 26AB      		std Z+54,r18
 3225               	.L117:
 394:lp_solve_5.5/lp_mipbb.c ****       }
 395:lp_solve_5.5/lp_mipbb.c **** 
 396:lp_solve_5.5/lp_mipbb.c ****       /* Check for reversal */
 397:lp_solve_5.5/lp_mipbb.c ****       if(is_bb_mode(lp, NODE_BRANCHREVERSEMODE))
 3226               		.loc 1 397 0
 3227 15c6 8D81      		ldd r24,Y+5
 3228 15c8 9E81      		ldd r25,Y+6
 3229 15ca 60E1      		ldi r22,lo8(16)
 3230 15cc 70E0      		ldi r23,0
 3231 15ce 0E94 0000 		call is_bb_mode
 3232 15d2 8823      		tst r24
 3233 15d4 01F0      		breq .L105
 398:lp_solve_5.5/lp_mipbb.c ****         BB->isfloor = !BB->isfloor;
 3234               		.loc 1 398 0
 3235 15d6 8D85      		ldd r24,Y+13
 3236 15d8 9E85      		ldd r25,Y+14
 3237 15da FC01      		movw r30,r24
 3238 15dc 96A9      		ldd r25,Z+54
 3239 15de 81E0      		ldi r24,lo8(1)
 3240 15e0 9923      		tst r25
 3241 15e2 01F0      		breq .L121
 3242 15e4 80E0      		ldi r24,0
 3243               	.L121:
 3244 15e6 282F      		mov r18,r24
 3245 15e8 8D85      		ldd r24,Y+13
 3246 15ea 9E85      		ldd r25,Y+14
 3247 15ec FC01      		movw r30,r24
 3248 15ee 26AB      		std Z+54,r18
 3249 15f0 00C0      		rjmp .L105
 3250               	.L107:
 399:lp_solve_5.5/lp_mipbb.c ****     }
 400:lp_solve_5.5/lp_mipbb.c ****     else
 401:lp_solve_5.5/lp_mipbb.c ****       BB->isfloor = (MYBOOL) (get_var_branch(lp, k) == BRANCH_FLOOR);
 3251               		.loc 1 401 0
 3252 15f2 2F81      		ldd r18,Y+7
 3253 15f4 3885      		ldd r19,Y+8
 3254 15f6 8D81      		ldd r24,Y+5
 3255 15f8 9E81      		ldd r25,Y+6
 3256 15fa B901      		movw r22,r18
 3257 15fc 0E94 0000 		call get_var_branch
 3258 1600 21E0      		ldi r18,lo8(1)
 3259 1602 0197      		sbiw r24,1
 3260 1604 01F0      		breq .L122
 3261 1606 20E0      		ldi r18,0
 3262               	.L122:
 3263 1608 8D85      		ldd r24,Y+13
 3264 160a 9E85      		ldd r25,Y+14
 3265 160c FC01      		movw r30,r24
 3266 160e 26AB      		std Z+54,r18
 3267               	.L105:
 402:lp_solve_5.5/lp_mipbb.c **** 
 403:lp_solve_5.5/lp_mipbb.c ****     /* SC logic: If the current SC variable value is in the [0..NZLOBOUND> range, then
 404:lp_solve_5.5/lp_mipbb.c **** 
 405:lp_solve_5.5/lp_mipbb.c ****       UP: Set lower bound to NZLOBOUND, upper bound is the original
 406:lp_solve_5.5/lp_mipbb.c ****       LO: Fix the variable by setting upper/lower bound to zero
 407:lp_solve_5.5/lp_mipbb.c **** 
 408:lp_solve_5.5/lp_mipbb.c ****       ... indicate that the variable is B&B-active by reversing sign of sc_lobound[]. */
 409:lp_solve_5.5/lp_mipbb.c ****     new_bound = fabs(lp->sc_lobound[k]);
 3268               		.loc 1 409 0
 3269 1610 8D81      		ldd r24,Y+5
 3270 1612 9E81      		ldd r25,Y+6
 3271 1614 8E56      		subi r24,110
 3272 1616 9D4F      		sbci r25,-3
 3273 1618 FC01      		movw r30,r24
 3274 161a 2081      		ld r18,Z
 3275 161c 3181      		ldd r19,Z+1
 3276 161e 8F81      		ldd r24,Y+7
 3277 1620 9885      		ldd r25,Y+8
 3278 1622 880F      		lsl r24
 3279 1624 991F      		rol r25
 3280 1626 880F      		lsl r24
 3281 1628 991F      		rol r25
 3282 162a 820F      		add r24,r18
 3283 162c 931F      		adc r25,r19
 3284 162e FC01      		movw r30,r24
 3285 1630 8081      		ld r24,Z
 3286 1632 9181      		ldd r25,Z+1
 3287 1634 A281      		ldd r26,Z+2
 3288 1636 B381      		ldd r27,Z+3
 3289 1638 BF77      		andi r27,0x7f
 3290 163a 8983      		std Y+1,r24
 3291 163c 9A83      		std Y+2,r25
 3292 163e AB83      		std Y+3,r26
 3293 1640 BC83      		std Y+4,r27
 410:lp_solve_5.5/lp_mipbb.c ****     BB->sc_bound = new_bound;
 3294               		.loc 1 410 0
 3295 1642 2D85      		ldd r18,Y+13
 3296 1644 3E85      		ldd r19,Y+14
 3297 1646 8981      		ldd r24,Y+1
 3298 1648 9A81      		ldd r25,Y+2
 3299 164a AB81      		ldd r26,Y+3
 3300 164c BC81      		ldd r27,Y+4
 3301 164e F901      		movw r30,r18
 3302 1650 848F      		std Z+28,r24
 3303 1652 958F      		std Z+29,r25
 3304 1654 A68F      		std Z+30,r26
 3305 1656 B78F      		std Z+31,r27
 411:lp_solve_5.5/lp_mipbb.c ****     BB->sc_canset = (MYBOOL) (new_bound != 0);
 3306               		.loc 1 411 0
 3307 1658 11E0      		ldi r17,lo8(1)
 3308 165a 20E0      		ldi r18,0
 3309 165c 30E0      		ldi r19,0
 3310 165e A901      		movw r20,r18
 3311 1660 6981      		ldd r22,Y+1
 3312 1662 7A81      		ldd r23,Y+2
 3313 1664 8B81      		ldd r24,Y+3
 3314 1666 9C81      		ldd r25,Y+4
 3315 1668 0E94 0000 		call __nesf2
 3316 166c 8823      		tst r24
 3317 166e 01F4      		brne .L123
 3318 1670 10E0      		ldi r17,0
 3319               	.L123:
 3320 1672 212F      		mov r18,r17
 3321 1674 8D85      		ldd r24,Y+13
 3322 1676 9E85      		ldd r25,Y+14
 3323 1678 FC01      		movw r30,r24
 3324 167a 21AB      		std Z+49,r18
 412:lp_solve_5.5/lp_mipbb.c **** 
 413:lp_solve_5.5/lp_mipbb.c ****    /* Must make sure that we handle fractional lower bounds properly;
 414:lp_solve_5.5/lp_mipbb.c ****       also to ensure that we do a full binary tree search */
 415:lp_solve_5.5/lp_mipbb.c ****     new_bound = unscaled_value(lp, new_bound, BB->varno);
 3325               		.loc 1 415 0
 3326 167c 8D85      		ldd r24,Y+13
 3327 167e 9E85      		ldd r25,Y+14
 3328 1680 FC01      		movw r30,r24
 3329 1682 2681      		ldd r18,Z+6
 3330 1684 3781      		ldd r19,Z+7
 3331 1686 8981      		ldd r24,Y+1
 3332 1688 9A81      		ldd r25,Y+2
 3333 168a AB81      		ldd r26,Y+3
 3334 168c BC81      		ldd r27,Y+4
 3335 168e ED81      		ldd r30,Y+5
 3336 1690 FE81      		ldd r31,Y+6
 3337 1692 AC01      		movw r20,r24
 3338 1694 BD01      		movw r22,r26
 3339 1696 CF01      		movw r24,r30
 3340 1698 0E94 0000 		call unscaled_value
 3341 169c DC01      		movw r26,r24
 3342 169e CB01      		movw r24,r22
 3343 16a0 8983      		std Y+1,r24
 3344 16a2 9A83      		std Y+2,r25
 3345 16a4 AB83      		std Y+3,r26
 3346 16a6 BC83      		std Y+4,r27
 416:lp_solve_5.5/lp_mipbb.c ****     if(is_int(lp, k) && ((new_bound > 0) &&
 3347               		.loc 1 416 0
 3348 16a8 2F81      		ldd r18,Y+7
 3349 16aa 3885      		ldd r19,Y+8
 3350 16ac 8D81      		ldd r24,Y+5
 3351 16ae 9E81      		ldd r25,Y+6
 3352 16b0 B901      		movw r22,r18
 3353 16b2 0E94 0000 		call is_int
 3354 16b6 8823      		tst r24
 3355 16b8 01F4      		brne .+2
 3356 16ba 00C0      		rjmp .L94
 3357               		.loc 1 416 0 is_stmt 0 discriminator 1
 3358 16bc 20E0      		ldi r18,0
 3359 16be 30E0      		ldi r19,0
 3360 16c0 A901      		movw r20,r18
 3361 16c2 6981      		ldd r22,Y+1
 3362 16c4 7A81      		ldd r23,Y+2
 3363 16c6 8B81      		ldd r24,Y+3
 3364 16c8 9C81      		ldd r25,Y+4
 3365 16ca 0E94 0000 		call __gtsf2
 3366 16ce 1816      		cp __zero_reg__,r24
 3367 16d0 04F0      		brlt .+2
 3368 16d2 00C0      		rjmp .L94
 417:lp_solve_5.5/lp_mipbb.c ****                          (BB->lastsolution > floor(new_bound)))) {
 3369               		.loc 1 417 0 is_stmt 1 discriminator 2
 3370 16d4 8D85      		ldd r24,Y+13
 3371 16d6 9E85      		ldd r25,Y+14
 3372 16d8 FC01      		movw r30,r24
 3373 16da C08C      		ldd r12,Z+24
 3374 16dc D18C      		ldd r13,Z+25
 3375 16de E28C      		ldd r14,Z+26
 3376 16e0 F38C      		ldd r15,Z+27
 3377 16e2 8981      		ldd r24,Y+1
 3378 16e4 9A81      		ldd r25,Y+2
 3379 16e6 AB81      		ldd r26,Y+3
 3380 16e8 BC81      		ldd r27,Y+4
 3381 16ea BC01      		movw r22,r24
 3382 16ec CD01      		movw r24,r26
 3383 16ee 0E94 0000 		call floor
 3384 16f2 DC01      		movw r26,r24
 3385 16f4 CB01      		movw r24,r22
 416:lp_solve_5.5/lp_mipbb.c ****     if(is_int(lp, k) && ((new_bound > 0) &&
 3386               		.loc 1 416 0 discriminator 2
 3387 16f6 9C01      		movw r18,r24
 3388 16f8 AD01      		movw r20,r26
 3389 16fa C701      		movw r24,r14
 3390 16fc B601      		movw r22,r12
 3391 16fe 0E94 0000 		call __gtsf2
 3392 1702 1816      		cp __zero_reg__,r24
 3393 1704 04F0      		brlt .+2
 3394 1706 00C0      		rjmp .L94
 418:lp_solve_5.5/lp_mipbb.c ****       if(BB->lastsolution < ceil(new_bound))
 3395               		.loc 1 418 0
 3396 1708 8D85      		ldd r24,Y+13
 3397 170a 9E85      		ldd r25,Y+14
 3398 170c FC01      		movw r30,r24
 3399 170e C08C      		ldd r12,Z+24
 3400 1710 D18C      		ldd r13,Z+25
 3401 1712 E28C      		ldd r14,Z+26
 3402 1714 F38C      		ldd r15,Z+27
 3403 1716 8981      		ldd r24,Y+1
 3404 1718 9A81      		ldd r25,Y+2
 3405 171a AB81      		ldd r26,Y+3
 3406 171c BC81      		ldd r27,Y+4
 3407 171e BC01      		movw r22,r24
 3408 1720 CD01      		movw r24,r26
 3409 1722 0E94 0000 		call ceil
 3410 1726 DC01      		movw r26,r24
 3411 1728 CB01      		movw r24,r22
 3412 172a 9C01      		movw r18,r24
 3413 172c AD01      		movw r20,r26
 3414 172e C701      		movw r24,r14
 3415 1730 B601      		movw r22,r12
 3416 1732 0E94 0000 		call __ltsf2
 3417 1736 8823      		tst r24
 3418 1738 04F4      		brge .L126
 419:lp_solve_5.5/lp_mipbb.c ****         BB->lastsolution += 1;
 3419               		.loc 1 419 0
 3420 173a 8D85      		ldd r24,Y+13
 3421 173c 9E85      		ldd r25,Y+14
 3422 173e FC01      		movw r30,r24
 3423 1740 808D      		ldd r24,Z+24
 3424 1742 918D      		ldd r25,Z+25
 3425 1744 A28D      		ldd r26,Z+26
 3426 1746 B38D      		ldd r27,Z+27
 3427 1748 20E0      		ldi r18,0
 3428 174a 30E0      		ldi r19,0
 3429 174c 40E8      		ldi r20,lo8(-128)
 3430 174e 5FE3      		ldi r21,lo8(63)
 3431 1750 BC01      		movw r22,r24
 3432 1752 CD01      		movw r24,r26
 3433 1754 0E94 0000 		call __addsf3
 3434 1758 DC01      		movw r26,r24
 3435 175a CB01      		movw r24,r22
 3436 175c 2D85      		ldd r18,Y+13
 3437 175e 3E85      		ldd r19,Y+14
 3438 1760 F901      		movw r30,r18
 3439 1762 808F      		std Z+24,r24
 3440 1764 918F      		std Z+25,r25
 3441 1766 A28F      		std Z+26,r26
 3442 1768 B38F      		std Z+27,r27
 3443               	.L126:
 420:lp_solve_5.5/lp_mipbb.c ****       modifyUndoLadder(lp->bb_lowerchange, BB->varno, BB->lowbo,
 3444               		.loc 1 420 0
 3445 176a 8D85      		ldd r24,Y+13
 3446 176c 9E85      		ldd r25,Y+14
 3447 176e FC01      		movw r30,r24
 3448 1770 808D      		ldd r24,Z+24
 3449 1772 918D      		ldd r25,Z+25
 3450 1774 A28D      		ldd r26,Z+26
 3451 1776 B38D      		ldd r27,Z+27
 3452 1778 2D85      		ldd r18,Y+13
 3453 177a 3E85      		ldd r19,Y+14
 3454 177c F901      		movw r30,r18
 3455 177e 6681      		ldd r22,Z+6
 3456 1780 7781      		ldd r23,Z+7
 3457 1782 ED81      		ldd r30,Y+5
 3458 1784 FE81      		ldd r31,Y+6
 3459 1786 E12C      		mov r14,__zero_reg__
 3460 1788 F12C      		mov r15,__zero_reg__
 3461 178a 00E8      		ldi r16,lo8(-128)
 3462 178c 1FE3      		ldi r17,lo8(63)
 3463 178e 9C01      		movw r18,r24
 3464 1790 AD01      		movw r20,r26
 3465 1792 CF01      		movw r24,r30
 3466 1794 0E94 0000 		call scaled_floor
 3467 1798 8B01      		movw r16,r22
 3468 179a 9C01      		movw r18,r24
 3469 179c 8D85      		ldd r24,Y+13
 3470 179e 9E85      		ldd r25,Y+14
 3471 17a0 FC01      		movw r30,r24
 3472 17a2 42A1      		ldd r20,Z+34
 3473 17a4 53A1      		ldd r21,Z+35
 3474 17a6 8D85      		ldd r24,Y+13
 3475 17a8 9E85      		ldd r25,Y+14
 3476 17aa FC01      		movw r30,r24
 3477 17ac 6681      		ldd r22,Z+6
 3478 17ae 7781      		ldd r23,Z+7
 3479 17b0 8D81      		ldd r24,Y+5
 3480 17b2 9E81      		ldd r25,Y+6
 3481 17b4 845B      		subi r24,-76
 3482 17b6 9C4F      		sbci r25,-4
 3483 17b8 FC01      		movw r30,r24
 3484 17ba 8081      		ld r24,Z
 3485 17bc 9181      		ldd r25,Z+1
 3486 17be 0E94 0000 		call modifyUndoLadder
 3487               	.L94:
 421:lp_solve_5.5/lp_mipbb.c ****                        scaled_floor(lp, BB->varno, BB->lastsolution, 1));
 422:lp_solve_5.5/lp_mipbb.c ****     }
 423:lp_solve_5.5/lp_mipbb.c ****   }
 424:lp_solve_5.5/lp_mipbb.c **** 
 425:lp_solve_5.5/lp_mipbb.c ****   /* Now initialize the brances and set to first */
 426:lp_solve_5.5/lp_mipbb.c ****   return( fillbranches_BB(BB) );
 3488               		.loc 1 426 0
 3489 17c2 8D85      		ldd r24,Y+13
 3490 17c4 9E85      		ldd r25,Y+14
 3491 17c6 0E94 0000 		call fillbranches_BB
 3492               	/* epilogue start */
 427:lp_solve_5.5/lp_mipbb.c **** }
 3493               		.loc 1 427 0
 3494 17ca 6096      		adiw r28,16
 3495 17cc 0FB6      		in __tmp_reg__,__SREG__
 3496 17ce F894      		cli
 3497 17d0 DEBF      		out __SP_H__,r29
 3498 17d2 0FBE      		out __SREG__,__tmp_reg__
 3499 17d4 CDBF      		out __SP_L__,r28
 3500 17d6 DF91      		pop r29
 3501 17d8 CF91      		pop r28
 3502 17da 1F91      		pop r17
 3503 17dc 0F91      		pop r16
 3504 17de FF90      		pop r15
 3505 17e0 EF90      		pop r14
 3506 17e2 DF90      		pop r13
 3507 17e4 CF90      		pop r12
 3508 17e6 0895      		ret
 3509               		.cfi_endproc
 3510               	.LFE13:
 3512               	.global	__gesf2
 3513               		.section	.rodata
 3514               	.LC1:
 3515 0046 6669 6C6C 		.string	"fillbranches_BB: Inconsistent equal-valued bounds for %s\n"
 3515      6272 616E 
 3515      6368 6573 
 3515      5F42 423A 
 3515      2049 6E63 
 3516               		.text
 3517               	.global	fillbranches_BB
 3519               	fillbranches_BB:
 3520               	.LFB14:
 428:lp_solve_5.5/lp_mipbb.c **** 
 429:lp_solve_5.5/lp_mipbb.c **** STATIC MYBOOL fillbranches_BB(BBrec *BB)
 430:lp_solve_5.5/lp_mipbb.c **** {
 3521               		.loc 1 430 0
 3522               		.cfi_startproc
 3523 17e8 CF92      		push r12
 3524               	.LCFI36:
 3525               		.cfi_def_cfa_offset 3
 3526               		.cfi_offset 12, -2
 3527 17ea DF92      		push r13
 3528               	.LCFI37:
 3529               		.cfi_def_cfa_offset 4
 3530               		.cfi_offset 13, -3
 3531 17ec EF92      		push r14
 3532               	.LCFI38:
 3533               		.cfi_def_cfa_offset 5
 3534               		.cfi_offset 14, -4
 3535 17ee FF92      		push r15
 3536               	.LCFI39:
 3537               		.cfi_def_cfa_offset 6
 3538               		.cfi_offset 15, -5
 3539 17f0 0F93      		push r16
 3540               	.LCFI40:
 3541               		.cfi_def_cfa_offset 7
 3542               		.cfi_offset 16, -6
 3543 17f2 1F93      		push r17
 3544               	.LCFI41:
 3545               		.cfi_def_cfa_offset 8
 3546               		.cfi_offset 17, -7
 3547 17f4 CF93      		push r28
 3548               	.LCFI42:
 3549               		.cfi_def_cfa_offset 9
 3550               		.cfi_offset 28, -8
 3551 17f6 DF93      		push r29
 3552               	.LCFI43:
 3553               		.cfi_def_cfa_offset 10
 3554               		.cfi_offset 29, -9
 3555 17f8 CDB7      		in r28,__SP_L__
 3556 17fa DEB7      		in r29,__SP_H__
 3557               	.LCFI44:
 3558               		.cfi_def_cfa_register 28
 3559 17fc 6D97      		sbiw r28,29
 3560               	.LCFI45:
 3561               		.cfi_def_cfa_offset 39
 3562 17fe 0FB6      		in __tmp_reg__,__SREG__
 3563 1800 F894      		cli
 3564 1802 DEBF      		out __SP_H__,r29
 3565 1804 0FBE      		out __SREG__,__tmp_reg__
 3566 1806 CDBF      		out __SP_L__,r28
 3567               	/* prologue: function */
 3568               	/* frame size = 29 */
 3569               	/* stack size = 37 */
 3570               	.L__stack_usage = 37
 3571 1808 9D8F      		std Y+29,r25
 3572 180a 8C8F      		std Y+28,r24
 431:lp_solve_5.5/lp_mipbb.c ****   int    K, k;
 432:lp_solve_5.5/lp_mipbb.c ****   REAL   ult_upbo, ult_lowbo;
 433:lp_solve_5.5/lp_mipbb.c ****   REAL   new_bound, SC_bound, intmargin = BB->lp->epsprimal;
 3573               		.loc 1 433 0
 3574 180c 8C8D      		ldd r24,Y+28
 3575 180e 9D8D      		ldd r25,Y+29
 3576 1810 FC01      		movw r30,r24
 3577 1812 8481      		ldd r24,Z+4
 3578 1814 9581      		ldd r25,Z+5
 3579 1816 865E      		subi r24,-26
 3580 1818 9C4F      		sbci r25,-4
 3581 181a FC01      		movw r30,r24
 3582 181c 8081      		ld r24,Z
 3583 181e 9181      		ldd r25,Z+1
 3584 1820 A281      		ldd r26,Z+2
 3585 1822 B381      		ldd r27,Z+3
 3586 1824 8E83      		std Y+6,r24
 3587 1826 9F83      		std Y+7,r25
 3588 1828 A887      		std Y+8,r26
 3589 182a B987      		std Y+9,r27
 434:lp_solve_5.5/lp_mipbb.c ****   lprec  *lp = BB->lp;
 3590               		.loc 1 434 0
 3591 182c 8C8D      		ldd r24,Y+28
 3592 182e 9D8D      		ldd r25,Y+29
 3593 1830 FC01      		movw r30,r24
 3594 1832 8481      		ldd r24,Z+4
 3595 1834 9581      		ldd r25,Z+5
 3596 1836 9B87      		std Y+11,r25
 3597 1838 8A87      		std Y+10,r24
 435:lp_solve_5.5/lp_mipbb.c ****   MYBOOL OKstatus = FALSE;
 3598               		.loc 1 435 0
 3599 183a 1D82      		std Y+5,__zero_reg__
 436:lp_solve_5.5/lp_mipbb.c **** 
 437:lp_solve_5.5/lp_mipbb.c ****   if(lp->bb_break || userabort(lp, MSG_MILPSTRATEGY))
 3600               		.loc 1 437 0
 3601 183c 8A85      		ldd r24,Y+10
 3602 183e 9B85      		ldd r25,Y+11
 3603 1840 8B50      		subi r24,11
 3604 1842 9D4F      		sbci r25,-3
 3605 1844 FC01      		movw r30,r24
 3606 1846 8081      		ld r24,Z
 3607 1848 8823      		tst r24
 3608 184a 01F4      		brne .L136
 3609               		.loc 1 437 0 is_stmt 0 discriminator 1
 3610 184c 8A85      		ldd r24,Y+10
 3611 184e 9B85      		ldd r25,Y+11
 3612 1850 60E0      		ldi r22,0
 3613 1852 74E0      		ldi r23,lo8(4)
 3614 1854 0E94 0000 		call userabort
 3615 1858 8823      		tst r24
 3616 185a 01F0      		breq .L137
 3617               	.L136:
 438:lp_solve_5.5/lp_mipbb.c ****     return( OKstatus );
 3618               		.loc 1 438 0 is_stmt 1
 3619 185c 8D81      		ldd r24,Y+5
 3620 185e 00C0      		rjmp .L138
 3621               	.L137:
 439:lp_solve_5.5/lp_mipbb.c **** 
 440:lp_solve_5.5/lp_mipbb.c ****   K = BB->varno;
 3622               		.loc 1 440 0
 3623 1860 8C8D      		ldd r24,Y+28
 3624 1862 9D8D      		ldd r25,Y+29
 3625 1864 FC01      		movw r30,r24
 3626 1866 8681      		ldd r24,Z+6
 3627 1868 9781      		ldd r25,Z+7
 3628 186a 9D87      		std Y+13,r25
 3629 186c 8C87      		std Y+12,r24
 441:lp_solve_5.5/lp_mipbb.c ****   if(K > 0) {
 3630               		.loc 1 441 0
 3631 186e 8C85      		ldd r24,Y+12
 3632 1870 9D85      		ldd r25,Y+13
 3633 1872 1816      		cp __zero_reg__,r24
 3634 1874 1906      		cpc __zero_reg__,r25
 3635 1876 04F0      		brlt .+2
 3636 1878 00C0      		rjmp .L139
 442:lp_solve_5.5/lp_mipbb.c **** 
 443:lp_solve_5.5/lp_mipbb.c ****   /* Shortcut variables */
 444:lp_solve_5.5/lp_mipbb.c ****     k = BB->varno - lp->rows;
 3637               		.loc 1 444 0
 3638 187a 8C8D      		ldd r24,Y+28
 3639 187c 9D8D      		ldd r25,Y+29
 3640 187e FC01      		movw r30,r24
 3641 1880 2681      		ldd r18,Z+6
 3642 1882 3781      		ldd r19,Z+7
 3643 1884 8A85      		ldd r24,Y+10
 3644 1886 9B85      		ldd r25,Y+11
 3645 1888 8651      		subi r24,22
 3646 188a 9E4F      		sbci r25,-2
 3647 188c FC01      		movw r30,r24
 3648 188e 8081      		ld r24,Z
 3649 1890 9181      		ldd r25,Z+1
 3650 1892 A901      		movw r20,r18
 3651 1894 481B      		sub r20,r24
 3652 1896 590B      		sbc r21,r25
 3653 1898 CA01      		movw r24,r20
 3654 189a 9F87      		std Y+15,r25
 3655 189c 8E87      		std Y+14,r24
 445:lp_solve_5.5/lp_mipbb.c ****     ult_upbo  = lp->orig_upbo[K];
 3656               		.loc 1 445 0
 3657 189e 8A85      		ldd r24,Y+10
 3658 18a0 9B85      		ldd r25,Y+11
 3659 18a2 8255      		subi r24,82
 3660 18a4 9D4F      		sbci r25,-3
 3661 18a6 FC01      		movw r30,r24
 3662 18a8 2081      		ld r18,Z
 3663 18aa 3181      		ldd r19,Z+1
 3664 18ac 8C85      		ldd r24,Y+12
 3665 18ae 9D85      		ldd r25,Y+13
 3666 18b0 880F      		lsl r24
 3667 18b2 991F      		rol r25
 3668 18b4 880F      		lsl r24
 3669 18b6 991F      		rol r25
 3670 18b8 820F      		add r24,r18
 3671 18ba 931F      		adc r25,r19
 3672 18bc FC01      		movw r30,r24
 3673 18be 8081      		ld r24,Z
 3674 18c0 9181      		ldd r25,Z+1
 3675 18c2 A281      		ldd r26,Z+2
 3676 18c4 B381      		ldd r27,Z+3
 3677 18c6 888B      		std Y+16,r24
 3678 18c8 998B      		std Y+17,r25
 3679 18ca AA8B      		std Y+18,r26
 3680 18cc BB8B      		std Y+19,r27
 446:lp_solve_5.5/lp_mipbb.c ****     ult_lowbo = lp->orig_lowbo[K];
 3681               		.loc 1 446 0
 3682 18ce 8A85      		ldd r24,Y+10
 3683 18d0 9B85      		ldd r25,Y+11
 3684 18d2 8E54      		subi r24,78
 3685 18d4 9D4F      		sbci r25,-3
 3686 18d6 FC01      		movw r30,r24
 3687 18d8 2081      		ld r18,Z
 3688 18da 3181      		ldd r19,Z+1
 3689 18dc 8C85      		ldd r24,Y+12
 3690 18de 9D85      		ldd r25,Y+13
 3691 18e0 880F      		lsl r24
 3692 18e2 991F      		rol r25
 3693 18e4 880F      		lsl r24
 3694 18e6 991F      		rol r25
 3695 18e8 820F      		add r24,r18
 3696 18ea 931F      		adc r25,r19
 3697 18ec FC01      		movw r30,r24
 3698 18ee 8081      		ld r24,Z
 3699 18f0 9181      		ldd r25,Z+1
 3700 18f2 A281      		ldd r26,Z+2
 3701 18f4 B381      		ldd r27,Z+3
 3702 18f6 8C8B      		std Y+20,r24
 3703 18f8 9D8B      		std Y+21,r25
 3704 18fa AE8B      		std Y+22,r26
 3705 18fc BF8B      		std Y+23,r27
 447:lp_solve_5.5/lp_mipbb.c ****     SC_bound  = unscaled_value(lp, BB->sc_bound, K);
 3706               		.loc 1 447 0
 3707 18fe 8C8D      		ldd r24,Y+28
 3708 1900 9D8D      		ldd r25,Y+29
 3709 1902 FC01      		movw r30,r24
 3710 1904 848D      		ldd r24,Z+28
 3711 1906 958D      		ldd r25,Z+29
 3712 1908 A68D      		ldd r26,Z+30
 3713 190a B78D      		ldd r27,Z+31
 3714 190c 2C85      		ldd r18,Y+12
 3715 190e 3D85      		ldd r19,Y+13
 3716 1910 EA85      		ldd r30,Y+10
 3717 1912 FB85      		ldd r31,Y+11
 3718 1914 AC01      		movw r20,r24
 3719 1916 BD01      		movw r22,r26
 3720 1918 CF01      		movw r24,r30
 3721 191a 0E94 0000 		call unscaled_value
 3722 191e DC01      		movw r26,r24
 3723 1920 CB01      		movw r24,r22
 3724 1922 888F      		std Y+24,r24
 3725 1924 998F      		std Y+25,r25
 3726 1926 AA8F      		std Y+26,r26
 3727 1928 BB8F      		std Y+27,r27
 448:lp_solve_5.5/lp_mipbb.c **** 
 449:lp_solve_5.5/lp_mipbb.c ****     /* First, establish the upper bound to be applied (when isfloor == TRUE)
 450:lp_solve_5.5/lp_mipbb.c ****        --------------------------------------------------------------------- */
 451:lp_solve_5.5/lp_mipbb.c **** /*SetUB:*/
 452:lp_solve_5.5/lp_mipbb.c ****     BB->UPbound = lp->infinite;
 3728               		.loc 1 452 0
 3729 192a 8A85      		ldd r24,Y+10
 3730 192c 9B85      		ldd r25,Y+11
 3731 192e 865F      		subi r24,-10
 3732 1930 9C4F      		sbci r25,-4
 3733 1932 FC01      		movw r30,r24
 3734 1934 8081      		ld r24,Z
 3735 1936 9181      		ldd r25,Z+1
 3736 1938 A281      		ldd r26,Z+2
 3737 193a B381      		ldd r27,Z+3
 3738 193c 2C8D      		ldd r18,Y+28
 3739 193e 3D8D      		ldd r19,Y+29
 3740 1940 F901      		movw r30,r18
 3741 1942 84A3      		std Z+36,r24
 3742 1944 95A3      		std Z+37,r25
 3743 1946 A6A3      		std Z+38,r26
 3744 1948 B7A3      		std Z+39,r27
 453:lp_solve_5.5/lp_mipbb.c **** 
 454:lp_solve_5.5/lp_mipbb.c ****     /* Handle SC-variables for the [0-LoBound> range */
 455:lp_solve_5.5/lp_mipbb.c ****     if((SC_bound > 0) && (fabs(BB->lastsolution) < SC_bound-intmargin)) {
 3745               		.loc 1 455 0
 3746 194a 20E0      		ldi r18,0
 3747 194c 30E0      		ldi r19,0
 3748 194e A901      		movw r20,r18
 3749 1950 688D      		ldd r22,Y+24
 3750 1952 798D      		ldd r23,Y+25
 3751 1954 8A8D      		ldd r24,Y+26
 3752 1956 9B8D      		ldd r25,Y+27
 3753 1958 0E94 0000 		call __gtsf2
 3754 195c 1816      		cp __zero_reg__,r24
 3755 195e 04F4      		brge .L140
 3756               		.loc 1 455 0 is_stmt 0 discriminator 1
 3757 1960 8C8D      		ldd r24,Y+28
 3758 1962 9D8D      		ldd r25,Y+29
 3759 1964 FC01      		movw r30,r24
 3760 1966 808D      		ldd r24,Z+24
 3761 1968 918D      		ldd r25,Z+25
 3762 196a A28D      		ldd r26,Z+26
 3763 196c B38D      		ldd r27,Z+27
 3764 196e 6C01      		movw r12,r24
 3765 1970 7D01      		movw r14,r26
 3766 1972 E894      		clt
 3767 1974 F7F8      		bld r15,7
 3768 1976 2E81      		ldd r18,Y+6
 3769 1978 3F81      		ldd r19,Y+7
 3770 197a 4885      		ldd r20,Y+8
 3771 197c 5985      		ldd r21,Y+9
 3772 197e 688D      		ldd r22,Y+24
 3773 1980 798D      		ldd r23,Y+25
 3774 1982 8A8D      		ldd r24,Y+26
 3775 1984 9B8D      		ldd r25,Y+27
 3776 1986 0E94 0000 		call __subsf3
 3777 198a DC01      		movw r26,r24
 3778 198c CB01      		movw r24,r22
 3779 198e 9C01      		movw r18,r24
 3780 1990 AD01      		movw r20,r26
 3781 1992 C701      		movw r24,r14
 3782 1994 B601      		movw r22,r12
 3783 1996 0E94 0000 		call __ltsf2
 3784 199a 8823      		tst r24
 3785 199c 04F4      		brge .L140
 456:lp_solve_5.5/lp_mipbb.c ****       new_bound = 0;
 3786               		.loc 1 456 0 is_stmt 1
 3787 199e 1982      		std Y+1,__zero_reg__
 3788 19a0 1A82      		std Y+2,__zero_reg__
 3789 19a2 1B82      		std Y+3,__zero_reg__
 3790 19a4 1C82      		std Y+4,__zero_reg__
 3791 19a6 00C0      		rjmp .L143
 3792               	.L140:
 457:lp_solve_5.5/lp_mipbb.c ****     }
 458:lp_solve_5.5/lp_mipbb.c ****     /* Handle pure integers (non-SOS, non-SC) */
 459:lp_solve_5.5/lp_mipbb.c ****     else if(BB->vartype == BB_INT) {
 3793               		.loc 1 459 0
 3794 19a8 8C8D      		ldd r24,Y+28
 3795 19aa 9D8D      		ldd r25,Y+29
 3796 19ac FC01      		movw r30,r24
 3797 19ae 8085      		ldd r24,Z+8
 3798 19b0 9185      		ldd r25,Z+9
 3799 19b2 0197      		sbiw r24,1
 3800 19b4 01F0      		breq .+2
 3801 19b6 00C0      		rjmp .L144
 460:lp_solve_5.5/lp_mipbb.c **** #if 1
 461:lp_solve_5.5/lp_mipbb.c ****       if(((ult_lowbo >= 0) &&
 3802               		.loc 1 461 0
 3803 19b8 20E0      		ldi r18,0
 3804 19ba 30E0      		ldi r19,0
 3805 19bc A901      		movw r20,r18
 3806 19be 6C89      		ldd r22,Y+20
 3807 19c0 7D89      		ldd r23,Y+21
 3808 19c2 8E89      		ldd r24,Y+22
 3809 19c4 9F89      		ldd r25,Y+23
 3810 19c6 0E94 0000 		call __gesf2
 3811 19ca 8823      		tst r24
 3812 19cc 04F4      		brge .+2
 3813 19ce 00C0      		rjmp .L145
 462:lp_solve_5.5/lp_mipbb.c ****           ((floor(BB->lastsolution) < /* Skip cases where the lower bound becomes violated */
 3814               		.loc 1 462 0
 3815 19d0 8C8D      		ldd r24,Y+28
 3816 19d2 9D8D      		ldd r25,Y+29
 3817 19d4 FC01      		movw r30,r24
 3818 19d6 808D      		ldd r24,Z+24
 3819 19d8 918D      		ldd r25,Z+25
 3820 19da A28D      		ldd r26,Z+26
 3821 19dc B38D      		ldd r27,Z+27
 3822 19de BC01      		movw r22,r24
 3823 19e0 CD01      		movw r24,r26
 3824 19e2 0E94 0000 		call floor
 3825 19e6 6B01      		movw r12,r22
 3826 19e8 7C01      		movw r14,r24
 463:lp_solve_5.5/lp_mipbb.c ****             unscaled_value(lp, MAX(ult_lowbo, fabs(lp->sc_lobound[k])), K)-intmargin))) ||
 3827               		.loc 1 463 0
 3828 19ea 8A85      		ldd r24,Y+10
 3829 19ec 9B85      		ldd r25,Y+11
 3830 19ee 8E56      		subi r24,110
 3831 19f0 9D4F      		sbci r25,-3
 3832 19f2 FC01      		movw r30,r24
 3833 19f4 2081      		ld r18,Z
 3834 19f6 3181      		ldd r19,Z+1
 3835 19f8 8E85      		ldd r24,Y+14
 3836 19fa 9F85      		ldd r25,Y+15
 3837 19fc 880F      		lsl r24
 3838 19fe 991F      		rol r25
 3839 1a00 880F      		lsl r24
 3840 1a02 991F      		rol r25
 3841 1a04 820F      		add r24,r18
 3842 1a06 931F      		adc r25,r19
 3843 1a08 FC01      		movw r30,r24
 3844 1a0a 8081      		ld r24,Z
 3845 1a0c 9181      		ldd r25,Z+1
 3846 1a0e A281      		ldd r26,Z+2
 3847 1a10 B381      		ldd r27,Z+3
 3848 1a12 BF77      		andi r27,0x7f
 3849 1a14 2C89      		ldd r18,Y+20
 3850 1a16 3D89      		ldd r19,Y+21
 3851 1a18 4E89      		ldd r20,Y+22
 3852 1a1a 5F89      		ldd r21,Y+23
 3853 1a1c BC01      		movw r22,r24
 3854 1a1e CD01      		movw r24,r26
 3855 1a20 0E94 0000 		call __ltsf2
 3856 1a24 8823      		tst r24
 3857 1a26 04F4      		brge .L233
 3858               		.loc 1 463 0 is_stmt 0 discriminator 1
 3859 1a28 8C89      		ldd r24,Y+20
 3860 1a2a 9D89      		ldd r25,Y+21
 3861 1a2c AE89      		ldd r26,Y+22
 3862 1a2e BF89      		ldd r27,Y+23
 3863 1a30 00C0      		rjmp .L149
 3864               	.L233:
 3865               		.loc 1 463 0 discriminator 2
 3866 1a32 8A85      		ldd r24,Y+10
 3867 1a34 9B85      		ldd r25,Y+11
 3868 1a36 8E56      		subi r24,110
 3869 1a38 9D4F      		sbci r25,-3
 3870 1a3a FC01      		movw r30,r24
 3871 1a3c 2081      		ld r18,Z
 3872 1a3e 3181      		ldd r19,Z+1
 3873 1a40 8E85      		ldd r24,Y+14
 3874 1a42 9F85      		ldd r25,Y+15
 3875 1a44 880F      		lsl r24
 3876 1a46 991F      		rol r25
 3877 1a48 880F      		lsl r24
 3878 1a4a 991F      		rol r25
 3879 1a4c 820F      		add r24,r18
 3880 1a4e 931F      		adc r25,r19
 3881 1a50 FC01      		movw r30,r24
 3882 1a52 8081      		ld r24,Z
 3883 1a54 9181      		ldd r25,Z+1
 3884 1a56 A281      		ldd r26,Z+2
 3885 1a58 B381      		ldd r27,Z+3
 3886 1a5a BF77      		andi r27,0x7f
 3887               	.L149:
 3888               		.loc 1 463 0 discriminator 4
 3889 1a5c 2C85      		ldd r18,Y+12
 3890 1a5e 3D85      		ldd r19,Y+13
 3891 1a60 EA85      		ldd r30,Y+10
 3892 1a62 FB85      		ldd r31,Y+11
 3893 1a64 AC01      		movw r20,r24
 3894 1a66 BD01      		movw r22,r26
 3895 1a68 CF01      		movw r24,r30
 3896 1a6a 0E94 0000 		call unscaled_value
 3897 1a6e DC01      		movw r26,r24
 3898 1a70 CB01      		movw r24,r22
 3899 1a72 2E81      		ldd r18,Y+6
 3900 1a74 3F81      		ldd r19,Y+7
 3901 1a76 4885      		ldd r20,Y+8
 3902 1a78 5985      		ldd r21,Y+9
 3903 1a7a BC01      		movw r22,r24
 3904 1a7c CD01      		movw r24,r26
 3905 1a7e 0E94 0000 		call __subsf3
 3906 1a82 DC01      		movw r26,r24
 3907 1a84 CB01      		movw r24,r22
 461:lp_solve_5.5/lp_mipbb.c ****           ((floor(BB->lastsolution) < /* Skip cases where the lower bound becomes violated */
 3908               		.loc 1 461 0 is_stmt 1 discriminator 4
 3909 1a86 9C01      		movw r18,r24
 3910 1a88 AD01      		movw r20,r26
 3911 1a8a C701      		movw r24,r14
 3912 1a8c B601      		movw r22,r12
 3913 1a8e 0E94 0000 		call __ltsf2
 3914 1a92 8823      		tst r24
 3915 1a94 04F4      		brge .+2
 3916 1a96 00C0      		rjmp .L150
 3917               	.L145:
 3918               		.loc 1 463 0
 3919 1a98 20E0      		ldi r18,0
 3920 1a9a 30E0      		ldi r19,0
 3921 1a9c A901      		movw r20,r18
 3922 1a9e 6889      		ldd r22,Y+16
 3923 1aa0 7989      		ldd r23,Y+17
 3924 1aa2 8A89      		ldd r24,Y+18
 3925 1aa4 9B89      		ldd r25,Y+19
 3926 1aa6 0E94 0000 		call __lesf2
 3927 1aaa 1816      		cp __zero_reg__,r24
 3928 1aac 04F4      		brge .+2
 3929 1aae 00C0      		rjmp .L151
 464:lp_solve_5.5/lp_mipbb.c ****          ((ult_upbo <= 0) &&   /*  Was  ((ult_lowbo < 0) && */
 465:lp_solve_5.5/lp_mipbb.c ****           ((floor(BB->lastsolution) > /* Skip cases where the upper bound becomes violated */
 3930               		.loc 1 465 0
 3931 1ab0 8C8D      		ldd r24,Y+28
 3932 1ab2 9D8D      		ldd r25,Y+29
 3933 1ab4 FC01      		movw r30,r24
 3934 1ab6 808D      		ldd r24,Z+24
 3935 1ab8 918D      		ldd r25,Z+25
 3936 1aba A28D      		ldd r26,Z+26
 3937 1abc B38D      		ldd r27,Z+27
 3938 1abe BC01      		movw r22,r24
 3939 1ac0 CD01      		movw r24,r26
 3940 1ac2 0E94 0000 		call floor
 3941 1ac6 6B01      		movw r12,r22
 3942 1ac8 7C01      		movw r14,r24
 466:lp_solve_5.5/lp_mipbb.c ****             unscaled_value(lp, MIN(ult_upbo, -fabs(lp->sc_lobound[k])), K)-intmargin)))) {
 3943               		.loc 1 466 0
 3944 1aca 8A85      		ldd r24,Y+10
 3945 1acc 9B85      		ldd r25,Y+11
 3946 1ace 8E56      		subi r24,110
 3947 1ad0 9D4F      		sbci r25,-3
 3948 1ad2 FC01      		movw r30,r24
 3949 1ad4 2081      		ld r18,Z
 3950 1ad6 3181      		ldd r19,Z+1
 3951 1ad8 8E85      		ldd r24,Y+14
 3952 1ada 9F85      		ldd r25,Y+15
 3953 1adc 880F      		lsl r24
 3954 1ade 991F      		rol r25
 3955 1ae0 880F      		lsl r24
 3956 1ae2 991F      		rol r25
 3957 1ae4 820F      		add r24,r18
 3958 1ae6 931F      		adc r25,r19
 3959 1ae8 FC01      		movw r30,r24
 3960 1aea 8081      		ld r24,Z
 3961 1aec 9181      		ldd r25,Z+1
 3962 1aee A281      		ldd r26,Z+2
 3963 1af0 B381      		ldd r27,Z+3
 3964 1af2 BF77      		andi r27,0x7f
 3965 1af4 B058      		subi r27,0x80
 3966 1af6 2889      		ldd r18,Y+16
 3967 1af8 3989      		ldd r19,Y+17
 3968 1afa 4A89      		ldd r20,Y+18
 3969 1afc 5B89      		ldd r21,Y+19
 3970 1afe BC01      		movw r22,r24
 3971 1b00 CD01      		movw r24,r26
 3972 1b02 0E94 0000 		call __gtsf2
 3973 1b06 1816      		cp __zero_reg__,r24
 3974 1b08 04F4      		brge .L234
 3975               		.loc 1 466 0 is_stmt 0 discriminator 1
 3976 1b0a 8889      		ldd r24,Y+16
 3977 1b0c 9989      		ldd r25,Y+17
 3978 1b0e AA89      		ldd r26,Y+18
 3979 1b10 BB89      		ldd r27,Y+19
 3980 1b12 00C0      		rjmp .L155
 3981               	.L234:
 3982               		.loc 1 466 0 discriminator 2
 3983 1b14 8A85      		ldd r24,Y+10
 3984 1b16 9B85      		ldd r25,Y+11
 3985 1b18 8E56      		subi r24,110
 3986 1b1a 9D4F      		sbci r25,-3
 3987 1b1c FC01      		movw r30,r24
 3988 1b1e 2081      		ld r18,Z
 3989 1b20 3181      		ldd r19,Z+1
 3990 1b22 8E85      		ldd r24,Y+14
 3991 1b24 9F85      		ldd r25,Y+15
 3992 1b26 880F      		lsl r24
 3993 1b28 991F      		rol r25
 3994 1b2a 880F      		lsl r24
 3995 1b2c 991F      		rol r25
 3996 1b2e 820F      		add r24,r18
 3997 1b30 931F      		adc r25,r19
 3998 1b32 FC01      		movw r30,r24
 3999 1b34 8081      		ld r24,Z
 4000 1b36 9181      		ldd r25,Z+1
 4001 1b38 A281      		ldd r26,Z+2
 4002 1b3a B381      		ldd r27,Z+3
 4003 1b3c BF77      		andi r27,0x7f
 4004 1b3e B058      		subi r27,0x80
 4005               	.L155:
 4006               		.loc 1 466 0 discriminator 4
 4007 1b40 2C85      		ldd r18,Y+12
 4008 1b42 3D85      		ldd r19,Y+13
 4009 1b44 EA85      		ldd r30,Y+10
 4010 1b46 FB85      		ldd r31,Y+11
 4011 1b48 AC01      		movw r20,r24
 4012 1b4a BD01      		movw r22,r26
 4013 1b4c CF01      		movw r24,r30
 4014 1b4e 0E94 0000 		call unscaled_value
 4015 1b52 DC01      		movw r26,r24
 4016 1b54 CB01      		movw r24,r22
 4017 1b56 2E81      		ldd r18,Y+6
 4018 1b58 3F81      		ldd r19,Y+7
 4019 1b5a 4885      		ldd r20,Y+8
 4020 1b5c 5985      		ldd r21,Y+9
 4021 1b5e BC01      		movw r22,r24
 4022 1b60 CD01      		movw r24,r26
 4023 1b62 0E94 0000 		call __subsf3
 4024 1b66 DC01      		movw r26,r24
 4025 1b68 CB01      		movw r24,r22
 464:lp_solve_5.5/lp_mipbb.c ****          ((ult_upbo <= 0) &&   /*  Was  ((ult_lowbo < 0) && */
 4026               		.loc 1 464 0 is_stmt 1 discriminator 4
 4027 1b6a 9C01      		movw r18,r24
 4028 1b6c AD01      		movw r20,r26
 4029 1b6e C701      		movw r24,r14
 4030 1b70 B601      		movw r22,r12
 4031 1b72 0E94 0000 		call __gtsf2
 4032 1b76 1816      		cp __zero_reg__,r24
 4033 1b78 04F4      		brge .L151
 4034               	.L150:
 467:lp_solve_5.5/lp_mipbb.c **** #else
 468:lp_solve_5.5/lp_mipbb.c ****       if((floor(BB->lastsolution) <  /* Skip cases where the lower bound becomes violated */
 469:lp_solve_5.5/lp_mipbb.c ****           unscaled_value(lp, MAX(ult_lowbo, fabs(lp->sc_lobound[k])), K)-intmargin)) {
 470:lp_solve_5.5/lp_mipbb.c **** #endif
 471:lp_solve_5.5/lp_mipbb.c ****         BB->nodesleft--;
 4035               		.loc 1 471 0
 4036 1b7a 8C8D      		ldd r24,Y+28
 4037 1b7c 9D8D      		ldd r25,Y+29
 4038 1b7e FC01      		movw r30,r24
 4039 1b80 8685      		ldd r24,Z+14
 4040 1b82 9785      		ldd r25,Z+15
 4041 1b84 9C01      		movw r18,r24
 4042 1b86 2150      		subi r18,1
 4043 1b88 3109      		sbc r19,__zero_reg__
 4044 1b8a 8C8D      		ldd r24,Y+28
 4045 1b8c 9D8D      		ldd r25,Y+29
 4046 1b8e FC01      		movw r30,r24
 4047 1b90 3787      		std Z+15,r19
 4048 1b92 2687      		std Z+14,r18
 472:lp_solve_5.5/lp_mipbb.c ****         goto SetLB;
 4049               		.loc 1 472 0
 4050 1b94 00C0      		rjmp .L157
 4051               	.L151:
 473:lp_solve_5.5/lp_mipbb.c ****       }
 474:lp_solve_5.5/lp_mipbb.c ****       new_bound = scaled_floor(lp, K, BB->lastsolution, 1);
 4052               		.loc 1 474 0
 4053 1b96 8C8D      		ldd r24,Y+28
 4054 1b98 9D8D      		ldd r25,Y+29
 4055 1b9a FC01      		movw r30,r24
 4056 1b9c 808D      		ldd r24,Z+24
 4057 1b9e 918D      		ldd r25,Z+25
 4058 1ba0 A28D      		ldd r26,Z+26
 4059 1ba2 B38D      		ldd r27,Z+27
 4060 1ba4 6C85      		ldd r22,Y+12
 4061 1ba6 7D85      		ldd r23,Y+13
 4062 1ba8 EA85      		ldd r30,Y+10
 4063 1baa FB85      		ldd r31,Y+11
 4064 1bac E12C      		mov r14,__zero_reg__
 4065 1bae F12C      		mov r15,__zero_reg__
 4066 1bb0 00E8      		ldi r16,lo8(-128)
 4067 1bb2 1FE3      		ldi r17,lo8(63)
 4068 1bb4 9C01      		movw r18,r24
 4069 1bb6 AD01      		movw r20,r26
 4070 1bb8 CF01      		movw r24,r30
 4071 1bba 0E94 0000 		call scaled_floor
 4072 1bbe DC01      		movw r26,r24
 4073 1bc0 CB01      		movw r24,r22
 4074 1bc2 8983      		std Y+1,r24
 4075 1bc4 9A83      		std Y+2,r25
 4076 1bc6 AB83      		std Y+3,r26
 4077 1bc8 BC83      		std Y+4,r27
 4078 1bca 00C0      		rjmp .L143
 4079               	.L144:
 475:lp_solve_5.5/lp_mipbb.c ****     }
 476:lp_solve_5.5/lp_mipbb.c ****     else if(BB->isSOS) {           /* Handle all SOS variants */
 4080               		.loc 1 476 0
 4081 1bcc 8C8D      		ldd r24,Y+28
 4082 1bce 9D8D      		ldd r25,Y+29
 4083 1bd0 FC01      		movw r30,r24
 4084 1bd2 82A9      		ldd r24,Z+50
 4085 1bd4 8823      		tst r24
 4086 1bd6 01F0      		breq .L158
 477:lp_solve_5.5/lp_mipbb.c ****       new_bound = ult_lowbo;
 4087               		.loc 1 477 0
 4088 1bd8 8C89      		ldd r24,Y+20
 4089 1bda 9D89      		ldd r25,Y+21
 4090 1bdc AE89      		ldd r26,Y+22
 4091 1bde BF89      		ldd r27,Y+23
 4092 1be0 8983      		std Y+1,r24
 4093 1be2 9A83      		std Y+2,r25
 4094 1be4 AB83      		std Y+3,r26
 4095 1be6 BC83      		std Y+4,r27
 478:lp_solve_5.5/lp_mipbb.c ****       if(is_int(lp, k))
 4096               		.loc 1 478 0
 4097 1be8 2E85      		ldd r18,Y+14
 4098 1bea 3F85      		ldd r19,Y+15
 4099 1bec 8A85      		ldd r24,Y+10
 4100 1bee 9B85      		ldd r25,Y+11
 4101 1bf0 B901      		movw r22,r18
 4102 1bf2 0E94 0000 		call is_int
 4103 1bf6 8823      		tst r24
 4104 1bf8 01F0      		breq .L143
 479:lp_solve_5.5/lp_mipbb.c ****         new_bound = scaled_ceil(lp, K, unscaled_value(lp, new_bound, K), -1);
 4105               		.loc 1 479 0
 4106 1bfa 2C85      		ldd r18,Y+12
 4107 1bfc 3D85      		ldd r19,Y+13
 4108 1bfe 8981      		ldd r24,Y+1
 4109 1c00 9A81      		ldd r25,Y+2
 4110 1c02 AB81      		ldd r26,Y+3
 4111 1c04 BC81      		ldd r27,Y+4
 4112 1c06 EA85      		ldd r30,Y+10
 4113 1c08 FB85      		ldd r31,Y+11
 4114 1c0a AC01      		movw r20,r24
 4115 1c0c BD01      		movw r22,r26
 4116 1c0e CF01      		movw r24,r30
 4117 1c10 0E94 0000 		call unscaled_value
 4118 1c14 9B01      		movw r18,r22
 4119 1c16 AC01      		movw r20,r24
 4120 1c18 6C85      		ldd r22,Y+12
 4121 1c1a 7D85      		ldd r23,Y+13
 4122 1c1c 8A85      		ldd r24,Y+10
 4123 1c1e 9B85      		ldd r25,Y+11
 4124 1c20 E12C      		mov r14,__zero_reg__
 4125 1c22 F12C      		mov r15,__zero_reg__
 4126 1c24 00E8      		ldi r16,lo8(-128)
 4127 1c26 1FEB      		ldi r17,lo8(-65)
 4128 1c28 0E94 0000 		call scaled_ceil
 4129 1c2c DC01      		movw r26,r24
 4130 1c2e CB01      		movw r24,r22
 4131 1c30 8983      		std Y+1,r24
 4132 1c32 9A83      		std Y+2,r25
 4133 1c34 AB83      		std Y+3,r26
 4134 1c36 BC83      		std Y+4,r27
 4135 1c38 00C0      		rjmp .L143
 4136               	.L158:
 480:lp_solve_5.5/lp_mipbb.c ****     }
 481:lp_solve_5.5/lp_mipbb.c ****     else                           /* Handle all other variable incarnations */
 482:lp_solve_5.5/lp_mipbb.c ****       new_bound = BB->sc_bound;
 4137               		.loc 1 482 0
 4138 1c3a 8C8D      		ldd r24,Y+28
 4139 1c3c 9D8D      		ldd r25,Y+29
 4140 1c3e FC01      		movw r30,r24
 4141 1c40 848D      		ldd r24,Z+28
 4142 1c42 958D      		ldd r25,Z+29
 4143 1c44 A68D      		ldd r26,Z+30
 4144 1c46 B78D      		ldd r27,Z+31
 4145 1c48 8983      		std Y+1,r24
 4146 1c4a 9A83      		std Y+2,r25
 4147 1c4c AB83      		std Y+3,r26
 4148 1c4e BC83      		std Y+4,r27
 4149               	.L143:
 483:lp_solve_5.5/lp_mipbb.c **** 
 484:lp_solve_5.5/lp_mipbb.c ****     /* Check if the new bound might conflict and possibly make adjustments */
 485:lp_solve_5.5/lp_mipbb.c ****     if(new_bound < BB->lowbo[K])
 4150               		.loc 1 485 0
 4151 1c50 8C8D      		ldd r24,Y+28
 4152 1c52 9D8D      		ldd r25,Y+29
 4153 1c54 FC01      		movw r30,r24
 4154 1c56 22A1      		ldd r18,Z+34
 4155 1c58 33A1      		ldd r19,Z+35
 4156 1c5a 8C85      		ldd r24,Y+12
 4157 1c5c 9D85      		ldd r25,Y+13
 4158 1c5e 880F      		lsl r24
 4159 1c60 991F      		rol r25
 4160 1c62 880F      		lsl r24
 4161 1c64 991F      		rol r25
 4162 1c66 820F      		add r24,r18
 4163 1c68 931F      		adc r25,r19
 4164 1c6a FC01      		movw r30,r24
 4165 1c6c 8081      		ld r24,Z
 4166 1c6e 9181      		ldd r25,Z+1
 4167 1c70 A281      		ldd r26,Z+2
 4168 1c72 B381      		ldd r27,Z+3
 4169 1c74 2981      		ldd r18,Y+1
 4170 1c76 3A81      		ldd r19,Y+2
 4171 1c78 4B81      		ldd r20,Y+3
 4172 1c7a 5C81      		ldd r21,Y+4
 4173 1c7c BC01      		movw r22,r24
 4174 1c7e CD01      		movw r24,r26
 4175 1c80 0E94 0000 		call __gtsf2
 4176 1c84 1816      		cp __zero_reg__,r24
 4177 1c86 04F0      		brlt .+2
 4178 1c88 00C0      		rjmp .L160
 486:lp_solve_5.5/lp_mipbb.c ****       new_bound = BB->lowbo[K] - my_avoidtiny(new_bound-BB->lowbo[K], intmargin);
 4179               		.loc 1 486 0
 4180 1c8a 8C8D      		ldd r24,Y+28
 4181 1c8c 9D8D      		ldd r25,Y+29
 4182 1c8e FC01      		movw r30,r24
 4183 1c90 22A1      		ldd r18,Z+34
 4184 1c92 33A1      		ldd r19,Z+35
 4185 1c94 8C85      		ldd r24,Y+12
 4186 1c96 9D85      		ldd r25,Y+13
 4187 1c98 880F      		lsl r24
 4188 1c9a 991F      		rol r25
 4189 1c9c 880F      		lsl r24
 4190 1c9e 991F      		rol r25
 4191 1ca0 820F      		add r24,r18
 4192 1ca2 931F      		adc r25,r19
 4193 1ca4 FC01      		movw r30,r24
 4194 1ca6 C080      		ld r12,Z
 4195 1ca8 D180      		ldd r13,Z+1
 4196 1caa E280      		ldd r14,Z+2
 4197 1cac F380      		ldd r15,Z+3
 4198 1cae 8C8D      		ldd r24,Y+28
 4199 1cb0 9D8D      		ldd r25,Y+29
 4200 1cb2 FC01      		movw r30,r24
 4201 1cb4 22A1      		ldd r18,Z+34
 4202 1cb6 33A1      		ldd r19,Z+35
 4203 1cb8 8C85      		ldd r24,Y+12
 4204 1cba 9D85      		ldd r25,Y+13
 4205 1cbc 880F      		lsl r24
 4206 1cbe 991F      		rol r25
 4207 1cc0 880F      		lsl r24
 4208 1cc2 991F      		rol r25
 4209 1cc4 820F      		add r24,r18
 4210 1cc6 931F      		adc r25,r19
 4211 1cc8 FC01      		movw r30,r24
 4212 1cca 8081      		ld r24,Z
 4213 1ccc 9181      		ldd r25,Z+1
 4214 1cce A281      		ldd r26,Z+2
 4215 1cd0 B381      		ldd r27,Z+3
 4216 1cd2 9C01      		movw r18,r24
 4217 1cd4 AD01      		movw r20,r26
 4218 1cd6 6981      		ldd r22,Y+1
 4219 1cd8 7A81      		ldd r23,Y+2
 4220 1cda 8B81      		ldd r24,Y+3
 4221 1cdc 9C81      		ldd r25,Y+4
 4222 1cde 0E94 0000 		call __subsf3
 4223 1ce2 DC01      		movw r26,r24
 4224 1ce4 CB01      		movw r24,r22
 4225 1ce6 BF77      		andi r27,0x7f
 4226 1ce8 2E81      		ldd r18,Y+6
 4227 1cea 3F81      		ldd r19,Y+7
 4228 1cec 4885      		ldd r20,Y+8
 4229 1cee 5985      		ldd r21,Y+9
 4230 1cf0 BC01      		movw r22,r24
 4231 1cf2 CD01      		movw r24,r26
 4232 1cf4 0E94 0000 		call __ltsf2
 4233 1cf8 8823      		tst r24
 4234 1cfa 04F4      		brge .L235
 4235               		.loc 1 486 0 is_stmt 0 discriminator 1
 4236 1cfc 80E0      		ldi r24,0
 4237 1cfe 90E0      		ldi r25,0
 4238 1d00 DC01      		movw r26,r24
 4239 1d02 00C0      		rjmp .L164
 4240               	.L235:
 4241               		.loc 1 486 0 discriminator 2
 4242 1d04 8C8D      		ldd r24,Y+28
 4243 1d06 9D8D      		ldd r25,Y+29
 4244 1d08 FC01      		movw r30,r24
 4245 1d0a 22A1      		ldd r18,Z+34
 4246 1d0c 33A1      		ldd r19,Z+35
 4247 1d0e 8C85      		ldd r24,Y+12
 4248 1d10 9D85      		ldd r25,Y+13
 4249 1d12 880F      		lsl r24
 4250 1d14 991F      		rol r25
 4251 1d16 880F      		lsl r24
 4252 1d18 991F      		rol r25
 4253 1d1a 820F      		add r24,r18
 4254 1d1c 931F      		adc r25,r19
 4255 1d1e FC01      		movw r30,r24
 4256 1d20 8081      		ld r24,Z
 4257 1d22 9181      		ldd r25,Z+1
 4258 1d24 A281      		ldd r26,Z+2
 4259 1d26 B381      		ldd r27,Z+3
 4260 1d28 9C01      		movw r18,r24
 4261 1d2a AD01      		movw r20,r26
 4262 1d2c 6981      		ldd r22,Y+1
 4263 1d2e 7A81      		ldd r23,Y+2
 4264 1d30 8B81      		ldd r24,Y+3
 4265 1d32 9C81      		ldd r25,Y+4
 4266 1d34 0E94 0000 		call __subsf3
 4267 1d38 DC01      		movw r26,r24
 4268 1d3a CB01      		movw r24,r22
 4269               	.L164:
 4270               		.loc 1 486 0 discriminator 4
 4271 1d3c 9C01      		movw r18,r24
 4272 1d3e AD01      		movw r20,r26
 4273 1d40 C701      		movw r24,r14
 4274 1d42 B601      		movw r22,r12
 4275 1d44 0E94 0000 		call __subsf3
 4276 1d48 DC01      		movw r26,r24
 4277 1d4a CB01      		movw r24,r22
 4278 1d4c 8983      		std Y+1,r24
 4279 1d4e 9A83      		std Y+2,r25
 4280 1d50 AB83      		std Y+3,r26
 4281 1d52 BC83      		std Y+4,r27
 4282               	.L160:
 487:lp_solve_5.5/lp_mipbb.c ****     if(new_bound < BB->lowbo[K]) {
 4283               		.loc 1 487 0 is_stmt 1
 4284 1d54 8C8D      		ldd r24,Y+28
 4285 1d56 9D8D      		ldd r25,Y+29
 4286 1d58 FC01      		movw r30,r24
 4287 1d5a 22A1      		ldd r18,Z+34
 4288 1d5c 33A1      		ldd r19,Z+35
 4289 1d5e 8C85      		ldd r24,Y+12
 4290 1d60 9D85      		ldd r25,Y+13
 4291 1d62 880F      		lsl r24
 4292 1d64 991F      		rol r25
 4293 1d66 880F      		lsl r24
 4294 1d68 991F      		rol r25
 4295 1d6a 820F      		add r24,r18
 4296 1d6c 931F      		adc r25,r19
 4297 1d6e FC01      		movw r30,r24
 4298 1d70 8081      		ld r24,Z
 4299 1d72 9181      		ldd r25,Z+1
 4300 1d74 A281      		ldd r26,Z+2
 4301 1d76 B381      		ldd r27,Z+3
 4302 1d78 2981      		ldd r18,Y+1
 4303 1d7a 3A81      		ldd r19,Y+2
 4304 1d7c 4B81      		ldd r20,Y+3
 4305 1d7e 5C81      		ldd r21,Y+4
 4306 1d80 BC01      		movw r22,r24
 4307 1d82 CD01      		movw r24,r26
 4308 1d84 0E94 0000 		call __gtsf2
 4309 1d88 1816      		cp __zero_reg__,r24
 4310 1d8a 04F4      		brge .L236
 488:lp_solve_5.5/lp_mipbb.c **** #ifdef Paranoia
 489:lp_solve_5.5/lp_mipbb.c ****       debug_print(lp,
 490:lp_solve_5.5/lp_mipbb.c ****           "fillbranches_BB: New upper bound value %g conflicts with old lower bound %g\n",
 491:lp_solve_5.5/lp_mipbb.c ****           new_bound, BB->lowbo[K]);
 492:lp_solve_5.5/lp_mipbb.c **** #endif
 493:lp_solve_5.5/lp_mipbb.c ****       BB->nodesleft--;
 4311               		.loc 1 493 0
 4312 1d8c 8C8D      		ldd r24,Y+28
 4313 1d8e 9D8D      		ldd r25,Y+29
 4314 1d90 FC01      		movw r30,r24
 4315 1d92 8685      		ldd r24,Z+14
 4316 1d94 9785      		ldd r25,Z+15
 4317 1d96 9C01      		movw r18,r24
 4318 1d98 2150      		subi r18,1
 4319 1d9a 3109      		sbc r19,__zero_reg__
 4320 1d9c 8C8D      		ldd r24,Y+28
 4321 1d9e 9D8D      		ldd r25,Y+29
 4322 1da0 FC01      		movw r30,r24
 4323 1da2 3787      		std Z+15,r19
 4324 1da4 2687      		std Z+14,r18
 494:lp_solve_5.5/lp_mipbb.c ****       goto SetLB;
 4325               		.loc 1 494 0
 4326 1da6 00C0      		rjmp .L157
 4327               	.L236:
 495:lp_solve_5.5/lp_mipbb.c ****     }
 496:lp_solve_5.5/lp_mipbb.c **** #ifdef Paranoia
 497:lp_solve_5.5/lp_mipbb.c ****     /* Do additional consistency checking */
 498:lp_solve_5.5/lp_mipbb.c ****     else if(!check_if_less(lp, new_bound, BB->upbo[K], K)) {
 499:lp_solve_5.5/lp_mipbb.c ****       BB->nodesleft--;
 500:lp_solve_5.5/lp_mipbb.c ****       goto SetLB;
 501:lp_solve_5.5/lp_mipbb.c ****     }
 502:lp_solve_5.5/lp_mipbb.c **** #endif
 503:lp_solve_5.5/lp_mipbb.c ****     /* Bound (at least near) feasible */
 504:lp_solve_5.5/lp_mipbb.c ****     else {
 505:lp_solve_5.5/lp_mipbb.c ****       /* Makes a difference with models like QUEEN
 506:lp_solve_5.5/lp_mipbb.c ****          (note consistent use of epsint for scaled integer variables) */
 507:lp_solve_5.5/lp_mipbb.c ****       if(fabs(new_bound - BB->lowbo[K]) < intmargin*SCALEDINTFIXRANGE)
 4328               		.loc 1 507 0
 4329 1da8 8C8D      		ldd r24,Y+28
 4330 1daa 9D8D      		ldd r25,Y+29
 4331 1dac FC01      		movw r30,r24
 4332 1dae 22A1      		ldd r18,Z+34
 4333 1db0 33A1      		ldd r19,Z+35
 4334 1db2 8C85      		ldd r24,Y+12
 4335 1db4 9D85      		ldd r25,Y+13
 4336 1db6 880F      		lsl r24
 4337 1db8 991F      		rol r25
 4338 1dba 880F      		lsl r24
 4339 1dbc 991F      		rol r25
 4340 1dbe 820F      		add r24,r18
 4341 1dc0 931F      		adc r25,r19
 4342 1dc2 FC01      		movw r30,r24
 4343 1dc4 8081      		ld r24,Z
 4344 1dc6 9181      		ldd r25,Z+1
 4345 1dc8 A281      		ldd r26,Z+2
 4346 1dca B381      		ldd r27,Z+3
 4347 1dcc 9C01      		movw r18,r24
 4348 1dce AD01      		movw r20,r26
 4349 1dd0 6981      		ldd r22,Y+1
 4350 1dd2 7A81      		ldd r23,Y+2
 4351 1dd4 8B81      		ldd r24,Y+3
 4352 1dd6 9C81      		ldd r25,Y+4
 4353 1dd8 0E94 0000 		call __subsf3
 4354 1ddc DC01      		movw r26,r24
 4355 1dde CB01      		movw r24,r22
 4356 1de0 6C01      		movw r12,r24
 4357 1de2 7D01      		movw r14,r26
 4358 1de4 E894      		clt
 4359 1de6 F7F8      		bld r15,7
 4360 1de8 2DEC      		ldi r18,lo8(-51)
 4361 1dea 3CEC      		ldi r19,lo8(-52)
 4362 1dec 4CEC      		ldi r20,lo8(-52)
 4363 1dee 5FE3      		ldi r21,lo8(63)
 4364 1df0 6E81      		ldd r22,Y+6
 4365 1df2 7F81      		ldd r23,Y+7
 4366 1df4 8885      		ldd r24,Y+8
 4367 1df6 9985      		ldd r25,Y+9
 4368 1df8 0E94 0000 		call __mulsf3
 4369 1dfc DC01      		movw r26,r24
 4370 1dfe CB01      		movw r24,r22
 4371 1e00 9C01      		movw r18,r24
 4372 1e02 AD01      		movw r20,r26
 4373 1e04 C701      		movw r24,r14
 4374 1e06 B601      		movw r22,r12
 4375 1e08 0E94 0000 		call __ltsf2
 4376 1e0c 8823      		tst r24
 4377 1e0e 04F4      		brge .L167
 508:lp_solve_5.5/lp_mipbb.c ****         new_bound = BB->lowbo[K];
 4378               		.loc 1 508 0
 4379 1e10 8C8D      		ldd r24,Y+28
 4380 1e12 9D8D      		ldd r25,Y+29
 4381 1e14 FC01      		movw r30,r24
 4382 1e16 22A1      		ldd r18,Z+34
 4383 1e18 33A1      		ldd r19,Z+35
 4384 1e1a 8C85      		ldd r24,Y+12
 4385 1e1c 9D85      		ldd r25,Y+13
 4386 1e1e 880F      		lsl r24
 4387 1e20 991F      		rol r25
 4388 1e22 880F      		lsl r24
 4389 1e24 991F      		rol r25
 4390 1e26 820F      		add r24,r18
 4391 1e28 931F      		adc r25,r19
 4392 1e2a FC01      		movw r30,r24
 4393 1e2c 8081      		ld r24,Z
 4394 1e2e 9181      		ldd r25,Z+1
 4395 1e30 A281      		ldd r26,Z+2
 4396 1e32 B381      		ldd r27,Z+3
 4397 1e34 8983      		std Y+1,r24
 4398 1e36 9A83      		std Y+2,r25
 4399 1e38 AB83      		std Y+3,r26
 4400 1e3a BC83      		std Y+4,r27
 4401               	.L167:
 509:lp_solve_5.5/lp_mipbb.c ****     }
 510:lp_solve_5.5/lp_mipbb.c **** 
 511:lp_solve_5.5/lp_mipbb.c ****     BB->UPbound = new_bound;
 4402               		.loc 1 511 0
 4403 1e3c 2C8D      		ldd r18,Y+28
 4404 1e3e 3D8D      		ldd r19,Y+29
 4405 1e40 8981      		ldd r24,Y+1
 4406 1e42 9A81      		ldd r25,Y+2
 4407 1e44 AB81      		ldd r26,Y+3
 4408 1e46 BC81      		ldd r27,Y+4
 4409 1e48 F901      		movw r30,r18
 4410 1e4a 84A3      		std Z+36,r24
 4411 1e4c 95A3      		std Z+37,r25
 4412 1e4e A6A3      		std Z+38,r26
 4413 1e50 B7A3      		std Z+39,r27
 4414               	.L157:
 512:lp_solve_5.5/lp_mipbb.c **** 
 513:lp_solve_5.5/lp_mipbb.c **** 
 514:lp_solve_5.5/lp_mipbb.c ****     /* Next, establish the lower bound to be applied (when isfloor == FALSE)
 515:lp_solve_5.5/lp_mipbb.c ****        --------------------------------------------------------------------- */
 516:lp_solve_5.5/lp_mipbb.c **** SetLB:
 517:lp_solve_5.5/lp_mipbb.c ****     BB->LObound = -lp->infinite;
 4415               		.loc 1 517 0
 4416 1e52 8A85      		ldd r24,Y+10
 4417 1e54 9B85      		ldd r25,Y+11
 4418 1e56 865F      		subi r24,-10
 4419 1e58 9C4F      		sbci r25,-4
 4420 1e5a FC01      		movw r30,r24
 4421 1e5c 8081      		ld r24,Z
 4422 1e5e 9181      		ldd r25,Z+1
 4423 1e60 A281      		ldd r26,Z+2
 4424 1e62 B381      		ldd r27,Z+3
 4425 1e64 B058      		subi r27,0x80
 4426 1e66 2C8D      		ldd r18,Y+28
 4427 1e68 3D8D      		ldd r19,Y+29
 4428 1e6a F901      		movw r30,r18
 4429 1e6c 80A7      		std Z+40,r24
 4430 1e6e 91A7      		std Z+41,r25
 4431 1e70 A2A7      		std Z+42,r26
 4432 1e72 B3A7      		std Z+43,r27
 518:lp_solve_5.5/lp_mipbb.c **** 
 519:lp_solve_5.5/lp_mipbb.c ****     /* Handle SC-variables for the [0-LoBound> range */
 520:lp_solve_5.5/lp_mipbb.c ****     if((SC_bound > 0) && (fabs(BB->lastsolution) < SC_bound)) {
 4433               		.loc 1 520 0
 4434 1e74 20E0      		ldi r18,0
 4435 1e76 30E0      		ldi r19,0
 4436 1e78 A901      		movw r20,r18
 4437 1e7a 688D      		ldd r22,Y+24
 4438 1e7c 798D      		ldd r23,Y+25
 4439 1e7e 8A8D      		ldd r24,Y+26
 4440 1e80 9B8D      		ldd r25,Y+27
 4441 1e82 0E94 0000 		call __gtsf2
 4442 1e86 1816      		cp __zero_reg__,r24
 4443 1e88 04F0      		brlt .+2
 4444 1e8a 00C0      		rjmp .L169
 4445               		.loc 1 520 0 is_stmt 0 discriminator 1
 4446 1e8c 8C8D      		ldd r24,Y+28
 4447 1e8e 9D8D      		ldd r25,Y+29
 4448 1e90 FC01      		movw r30,r24
 4449 1e92 808D      		ldd r24,Z+24
 4450 1e94 918D      		ldd r25,Z+25
 4451 1e96 A28D      		ldd r26,Z+26
 4452 1e98 B38D      		ldd r27,Z+27
 4453 1e9a BF77      		andi r27,0x7f
 4454 1e9c 288D      		ldd r18,Y+24
 4455 1e9e 398D      		ldd r19,Y+25
 4456 1ea0 4A8D      		ldd r20,Y+26
 4457 1ea2 5B8D      		ldd r21,Y+27
 4458 1ea4 BC01      		movw r22,r24
 4459 1ea6 CD01      		movw r24,r26
 4460 1ea8 0E94 0000 		call __ltsf2
 4461 1eac 8823      		tst r24
 4462 1eae 04F4      		brge .L169
 521:lp_solve_5.5/lp_mipbb.c ****       if(is_int(lp, k))
 4463               		.loc 1 521 0 is_stmt 1
 4464 1eb0 2E85      		ldd r18,Y+14
 4465 1eb2 3F85      		ldd r19,Y+15
 4466 1eb4 8A85      		ldd r24,Y+10
 4467 1eb6 9B85      		ldd r25,Y+11
 4468 1eb8 B901      		movw r22,r18
 4469 1eba 0E94 0000 		call is_int
 4470 1ebe 8823      		tst r24
 4471 1ec0 01F0      		breq .L172
 522:lp_solve_5.5/lp_mipbb.c ****         new_bound = scaled_ceil(lp, K, SC_bound, 1);
 4472               		.loc 1 522 0
 4473 1ec2 888D      		ldd r24,Y+24
 4474 1ec4 998D      		ldd r25,Y+25
 4475 1ec6 AA8D      		ldd r26,Y+26
 4476 1ec8 BB8D      		ldd r27,Y+27
 4477 1eca 6C85      		ldd r22,Y+12
 4478 1ecc 7D85      		ldd r23,Y+13
 4479 1ece EA85      		ldd r30,Y+10
 4480 1ed0 FB85      		ldd r31,Y+11
 4481 1ed2 E12C      		mov r14,__zero_reg__
 4482 1ed4 F12C      		mov r15,__zero_reg__
 4483 1ed6 00E8      		ldi r16,lo8(-128)
 4484 1ed8 1FE3      		ldi r17,lo8(63)
 4485 1eda 9C01      		movw r18,r24
 4486 1edc AD01      		movw r20,r26
 4487 1ede CF01      		movw r24,r30
 4488 1ee0 0E94 0000 		call scaled_ceil
 4489 1ee4 DC01      		movw r26,r24
 4490 1ee6 CB01      		movw r24,r22
 4491 1ee8 8983      		std Y+1,r24
 4492 1eea 9A83      		std Y+2,r25
 4493 1eec AB83      		std Y+3,r26
 4494 1eee BC83      		std Y+4,r27
 521:lp_solve_5.5/lp_mipbb.c ****       if(is_int(lp, k))
 4495               		.loc 1 521 0
 4496 1ef0 00C0      		rjmp .L174
 4497               	.L172:
 523:lp_solve_5.5/lp_mipbb.c ****       else
 524:lp_solve_5.5/lp_mipbb.c ****         new_bound = BB->sc_bound;
 4498               		.loc 1 524 0
 4499 1ef2 8C8D      		ldd r24,Y+28
 4500 1ef4 9D8D      		ldd r25,Y+29
 4501 1ef6 FC01      		movw r30,r24
 4502 1ef8 848D      		ldd r24,Z+28
 4503 1efa 958D      		ldd r25,Z+29
 4504 1efc A68D      		ldd r26,Z+30
 4505 1efe B78D      		ldd r27,Z+31
 4506 1f00 8983      		std Y+1,r24
 4507 1f02 9A83      		std Y+2,r25
 4508 1f04 AB83      		std Y+3,r26
 4509 1f06 BC83      		std Y+4,r27
 521:lp_solve_5.5/lp_mipbb.c ****         new_bound = scaled_ceil(lp, K, SC_bound, 1);
 4510               		.loc 1 521 0
 4511 1f08 00C0      		rjmp .L174
 4512               	.L169:
 525:lp_solve_5.5/lp_mipbb.c ****     }
 526:lp_solve_5.5/lp_mipbb.c ****     /* Handle pure integers (non-SOS, non-SC, but Ok for GUB!) */
 527:lp_solve_5.5/lp_mipbb.c ****     else if((BB->vartype == BB_INT)) {
 4513               		.loc 1 527 0
 4514 1f0a 8C8D      		ldd r24,Y+28
 4515 1f0c 9D8D      		ldd r25,Y+29
 4516 1f0e FC01      		movw r30,r24
 4517 1f10 8085      		ldd r24,Z+8
 4518 1f12 9185      		ldd r25,Z+9
 4519 1f14 0197      		sbiw r24,1
 4520 1f16 01F0      		breq .+2
 4521 1f18 00C0      		rjmp .L175
 528:lp_solve_5.5/lp_mipbb.c ****       if(((ceil(BB->lastsolution) == BB->lastsolution)) ||    /* Skip branch 0 if the current solut
 4522               		.loc 1 528 0
 4523 1f1a 8C8D      		ldd r24,Y+28
 4524 1f1c 9D8D      		ldd r25,Y+29
 4525 1f1e FC01      		movw r30,r24
 4526 1f20 808D      		ldd r24,Z+24
 4527 1f22 918D      		ldd r25,Z+25
 4528 1f24 A28D      		ldd r26,Z+26
 4529 1f26 B38D      		ldd r27,Z+27
 4530 1f28 BC01      		movw r22,r24
 4531 1f2a CD01      		movw r24,r26
 4532 1f2c 0E94 0000 		call ceil
 4533 1f30 7B01      		movw r14,r22
 4534 1f32 8C01      		movw r16,r24
 4535 1f34 8C8D      		ldd r24,Y+28
 4536 1f36 9D8D      		ldd r25,Y+29
 4537 1f38 FC01      		movw r30,r24
 4538 1f3a 808D      		ldd r24,Z+24
 4539 1f3c 918D      		ldd r25,Z+25
 4540 1f3e A28D      		ldd r26,Z+26
 4541 1f40 B38D      		ldd r27,Z+27
 4542 1f42 9C01      		movw r18,r24
 4543 1f44 AD01      		movw r20,r26
 4544 1f46 C801      		movw r24,r16
 4545 1f48 B701      		movw r22,r14
 4546 1f4a 0E94 0000 		call __eqsf2
 4547 1f4e 8823      		tst r24
 4548 1f50 01F4      		brne .+2
 4549 1f52 00C0      		rjmp .L176
 529:lp_solve_5.5/lp_mipbb.c ****          (ceil(BB->lastsolution) >   /* Skip cases where the upper bound becomes violated */
 4550               		.loc 1 529 0 discriminator 1
 4551 1f54 8C8D      		ldd r24,Y+28
 4552 1f56 9D8D      		ldd r25,Y+29
 4553 1f58 FC01      		movw r30,r24
 4554 1f5a 808D      		ldd r24,Z+24
 4555 1f5c 918D      		ldd r25,Z+25
 4556 1f5e A28D      		ldd r26,Z+26
 4557 1f60 B38D      		ldd r27,Z+27
 4558 1f62 BC01      		movw r22,r24
 4559 1f64 CD01      		movw r24,r26
 4560 1f66 0E94 0000 		call ceil
 4561 1f6a 6B01      		movw r12,r22
 4562 1f6c 7C01      		movw r14,r24
 530:lp_solve_5.5/lp_mipbb.c ****           unscaled_value(lp, ult_upbo, K)+intmargin) ||
 4563               		.loc 1 530 0 discriminator 1
 4564 1f6e 2C85      		ldd r18,Y+12
 4565 1f70 3D85      		ldd r19,Y+13
 4566 1f72 8889      		ldd r24,Y+16
 4567 1f74 9989      		ldd r25,Y+17
 4568 1f76 AA89      		ldd r26,Y+18
 4569 1f78 BB89      		ldd r27,Y+19
 4570 1f7a EA85      		ldd r30,Y+10
 4571 1f7c FB85      		ldd r31,Y+11
 4572 1f7e AC01      		movw r20,r24
 4573 1f80 BD01      		movw r22,r26
 4574 1f82 CF01      		movw r24,r30
 4575 1f84 0E94 0000 		call unscaled_value
 4576 1f88 DC01      		movw r26,r24
 4577 1f8a CB01      		movw r24,r22
 4578 1f8c 2E81      		ldd r18,Y+6
 4579 1f8e 3F81      		ldd r19,Y+7
 4580 1f90 4885      		ldd r20,Y+8
 4581 1f92 5985      		ldd r21,Y+9
 4582 1f94 BC01      		movw r22,r24
 4583 1f96 CD01      		movw r24,r26
 4584 1f98 0E94 0000 		call __addsf3
 4585 1f9c DC01      		movw r26,r24
 4586 1f9e CB01      		movw r24,r22
 528:lp_solve_5.5/lp_mipbb.c ****       if(((ceil(BB->lastsolution) == BB->lastsolution)) ||    /* Skip branch 0 if the current solut
 4587               		.loc 1 528 0 discriminator 1
 4588 1fa0 9C01      		movw r18,r24
 4589 1fa2 AD01      		movw r20,r26
 4590 1fa4 C701      		movw r24,r14
 4591 1fa6 B601      		movw r22,r12
 4592 1fa8 0E94 0000 		call __gtsf2
 4593 1fac 1816      		cp __zero_reg__,r24
 4594 1fae 04F0      		brlt .L176
 531:lp_solve_5.5/lp_mipbb.c ****           (BB->isSOS && (BB->lastsolution == 0))) {           /* Don't branch 0 since this is handl
 4595               		.loc 1 531 0
 4596 1fb0 8C8D      		ldd r24,Y+28
 4597 1fb2 9D8D      		ldd r25,Y+29
 4598 1fb4 FC01      		movw r30,r24
 4599 1fb6 82A9      		ldd r24,Z+50
 530:lp_solve_5.5/lp_mipbb.c ****           unscaled_value(lp, ult_upbo, K)+intmargin) ||
 4600               		.loc 1 530 0
 4601 1fb8 8823      		tst r24
 4602 1fba 01F0      		breq .L177
 4603               		.loc 1 531 0
 4604 1fbc 8C8D      		ldd r24,Y+28
 4605 1fbe 9D8D      		ldd r25,Y+29
 4606 1fc0 FC01      		movw r30,r24
 4607 1fc2 808D      		ldd r24,Z+24
 4608 1fc4 918D      		ldd r25,Z+25
 4609 1fc6 A28D      		ldd r26,Z+26
 4610 1fc8 B38D      		ldd r27,Z+27
 4611 1fca 20E0      		ldi r18,0
 4612 1fcc 30E0      		ldi r19,0
 4613 1fce A901      		movw r20,r18
 4614 1fd0 BC01      		movw r22,r24
 4615 1fd2 CD01      		movw r24,r26
 4616 1fd4 0E94 0000 		call __eqsf2
 4617 1fd8 8823      		tst r24
 4618 1fda 01F4      		brne .L177
 4619               	.L176:
 532:lp_solve_5.5/lp_mipbb.c ****         BB->nodesleft--;
 4620               		.loc 1 532 0
 4621 1fdc 8C8D      		ldd r24,Y+28
 4622 1fde 9D8D      		ldd r25,Y+29
 4623 1fe0 FC01      		movw r30,r24
 4624 1fe2 8685      		ldd r24,Z+14
 4625 1fe4 9785      		ldd r25,Z+15
 4626 1fe6 9C01      		movw r18,r24
 4627 1fe8 2150      		subi r18,1
 4628 1fea 3109      		sbc r19,__zero_reg__
 4629 1fec 8C8D      		ldd r24,Y+28
 4630 1fee 9D8D      		ldd r25,Y+29
 4631 1ff0 FC01      		movw r30,r24
 4632 1ff2 3787      		std Z+15,r19
 4633 1ff4 2687      		std Z+14,r18
 533:lp_solve_5.5/lp_mipbb.c ****         goto Finish;
 4634               		.loc 1 533 0
 4635 1ff6 00C0      		rjmp .L179
 4636               	.L177:
 534:lp_solve_5.5/lp_mipbb.c ****       }
 535:lp_solve_5.5/lp_mipbb.c ****       new_bound = scaled_ceil(lp, K, BB->lastsolution, 1);
 4637               		.loc 1 535 0
 4638 1ff8 8C8D      		ldd r24,Y+28
 4639 1ffa 9D8D      		ldd r25,Y+29
 4640 1ffc FC01      		movw r30,r24
 4641 1ffe 808D      		ldd r24,Z+24
 4642 2000 918D      		ldd r25,Z+25
 4643 2002 A28D      		ldd r26,Z+26
 4644 2004 B38D      		ldd r27,Z+27
 4645 2006 6C85      		ldd r22,Y+12
 4646 2008 7D85      		ldd r23,Y+13
 4647 200a EA85      		ldd r30,Y+10
 4648 200c FB85      		ldd r31,Y+11
 4649 200e E12C      		mov r14,__zero_reg__
 4650 2010 F12C      		mov r15,__zero_reg__
 4651 2012 00E8      		ldi r16,lo8(-128)
 4652 2014 1FE3      		ldi r17,lo8(63)
 4653 2016 9C01      		movw r18,r24
 4654 2018 AD01      		movw r20,r26
 4655 201a CF01      		movw r24,r30
 4656 201c 0E94 0000 		call scaled_ceil
 4657 2020 DC01      		movw r26,r24
 4658 2022 CB01      		movw r24,r22
 4659 2024 8983      		std Y+1,r24
 4660 2026 9A83      		std Y+2,r25
 4661 2028 AB83      		std Y+3,r26
 4662 202a BC83      		std Y+4,r27
 4663 202c 00C0      		rjmp .L174
 4664               	.L175:
 536:lp_solve_5.5/lp_mipbb.c ****     }
 537:lp_solve_5.5/lp_mipbb.c ****     else if(BB->isSOS) {             /* Handle all SOS variants */
 4665               		.loc 1 537 0
 4666 202e 8C8D      		ldd r24,Y+28
 4667 2030 9D8D      		ldd r25,Y+29
 4668 2032 FC01      		movw r30,r24
 4669 2034 82A9      		ldd r24,Z+50
 4670 2036 8823      		tst r24
 4671 2038 01F4      		brne .+2
 4672 203a 00C0      		rjmp .L180
 538:lp_solve_5.5/lp_mipbb.c ****       if(SOS_is_member_of_type(lp->SOS, k, SOS3))
 4673               		.loc 1 538 0
 4674 203c 8A85      		ldd r24,Y+10
 4675 203e 9B85      		ldd r25,Y+11
 4676 2040 8256      		subi r24,98
 4677 2042 9D4F      		sbci r25,-3
 4678 2044 FC01      		movw r30,r24
 4679 2046 8081      		ld r24,Z
 4680 2048 9181      		ldd r25,Z+1
 4681 204a 2E85      		ldd r18,Y+14
 4682 204c 3F85      		ldd r19,Y+15
 4683 204e 4FEF      		ldi r20,lo8(-1)
 4684 2050 5FEF      		ldi r21,lo8(-1)
 4685 2052 B901      		movw r22,r18
 4686 2054 0E94 0000 		call SOS_is_member_of_type
 4687 2058 8823      		tst r24
 4688 205a 01F0      		breq .L181
 539:lp_solve_5.5/lp_mipbb.c ****         new_bound = scaled_floor(lp, K, 1, 1);
 4689               		.loc 1 539 0
 4690 205c 6C85      		ldd r22,Y+12
 4691 205e 7D85      		ldd r23,Y+13
 4692 2060 8A85      		ldd r24,Y+10
 4693 2062 9B85      		ldd r25,Y+11
 4694 2064 E12C      		mov r14,__zero_reg__
 4695 2066 F12C      		mov r15,__zero_reg__
 4696 2068 00E8      		ldi r16,lo8(-128)
 4697 206a 1FE3      		ldi r17,lo8(63)
 4698 206c 20E0      		ldi r18,0
 4699 206e 30E0      		ldi r19,0
 4700 2070 40E8      		ldi r20,lo8(-128)
 4701 2072 5FE3      		ldi r21,lo8(63)
 4702 2074 0E94 0000 		call scaled_floor
 4703 2078 DC01      		movw r26,r24
 4704 207a CB01      		movw r24,r22
 4705 207c 8983      		std Y+1,r24
 4706 207e 9A83      		std Y+2,r25
 4707 2080 AB83      		std Y+3,r26
 4708 2082 BC83      		std Y+4,r27
 4709 2084 00C0      		rjmp .L174
 4710               	.L181:
 540:lp_solve_5.5/lp_mipbb.c ****       else {
 541:lp_solve_5.5/lp_mipbb.c ****         new_bound = ult_lowbo;
 4711               		.loc 1 541 0
 4712 2086 8C89      		ldd r24,Y+20
 4713 2088 9D89      		ldd r25,Y+21
 4714 208a AE89      		ldd r26,Y+22
 4715 208c BF89      		ldd r27,Y+23
 4716 208e 8983      		std Y+1,r24
 4717 2090 9A83      		std Y+2,r25
 4718 2092 AB83      		std Y+3,r26
 4719 2094 BC83      		std Y+4,r27
 542:lp_solve_5.5/lp_mipbb.c ****         if(is_int(lp, k))
 4720               		.loc 1 542 0
 4721 2096 2E85      		ldd r18,Y+14
 4722 2098 3F85      		ldd r19,Y+15
 4723 209a 8A85      		ldd r24,Y+10
 4724 209c 9B85      		ldd r25,Y+11
 4725 209e B901      		movw r22,r18
 4726 20a0 0E94 0000 		call is_int
 4727 20a4 8823      		tst r24
 4728 20a6 01F0      		breq .L183
 543:lp_solve_5.5/lp_mipbb.c ****           new_bound = scaled_floor(lp, K, unscaled_value(lp, new_bound, K), 1);
 4729               		.loc 1 543 0
 4730 20a8 2C85      		ldd r18,Y+12
 4731 20aa 3D85      		ldd r19,Y+13
 4732 20ac 8981      		ldd r24,Y+1
 4733 20ae 9A81      		ldd r25,Y+2
 4734 20b0 AB81      		ldd r26,Y+3
 4735 20b2 BC81      		ldd r27,Y+4
 4736 20b4 EA85      		ldd r30,Y+10
 4737 20b6 FB85      		ldd r31,Y+11
 4738 20b8 AC01      		movw r20,r24
 4739 20ba BD01      		movw r22,r26
 4740 20bc CF01      		movw r24,r30
 4741 20be 0E94 0000 		call unscaled_value
 4742 20c2 9B01      		movw r18,r22
 4743 20c4 AC01      		movw r20,r24
 4744 20c6 6C85      		ldd r22,Y+12
 4745 20c8 7D85      		ldd r23,Y+13
 4746 20ca 8A85      		ldd r24,Y+10
 4747 20cc 9B85      		ldd r25,Y+11
 4748 20ce E12C      		mov r14,__zero_reg__
 4749 20d0 F12C      		mov r15,__zero_reg__
 4750 20d2 00E8      		ldi r16,lo8(-128)
 4751 20d4 1FE3      		ldi r17,lo8(63)
 4752 20d6 0E94 0000 		call scaled_floor
 4753 20da DC01      		movw r26,r24
 4754 20dc CB01      		movw r24,r22
 4755 20de 8983      		std Y+1,r24
 4756 20e0 9A83      		std Y+2,r25
 4757 20e2 AB83      		std Y+3,r26
 4758 20e4 BC83      		std Y+4,r27
 4759               	.L183:
 544:lp_solve_5.5/lp_mipbb.c ****         /* If we have a high-order SOS (SOS3+) and this variable is "intermediate"
 545:lp_solve_5.5/lp_mipbb.c ****           between members previously lower-bounded at a non-zero level, then we should
 546:lp_solve_5.5/lp_mipbb.c ****           set this and similar neighbouring variables at non-zero lowbo-values (remember
 547:lp_solve_5.5/lp_mipbb.c ****           that SOS3+ members are all either integers or semi-continuous). Flag this
 548:lp_solve_5.5/lp_mipbb.c ****           situation and prune tree, since we cannot lower-bound. */
 549:lp_solve_5.5/lp_mipbb.c ****         if((lp->SOS->maxorder > 2) && (BB->lastsolution == 0) &&
 4760               		.loc 1 549 0
 4761 20e6 8A85      		ldd r24,Y+10
 4762 20e8 9B85      		ldd r25,Y+11
 4763 20ea 8256      		subi r24,98
 4764 20ec 9D4F      		sbci r25,-3
 4765 20ee FC01      		movw r30,r24
 4766 20f0 8081      		ld r24,Z
 4767 20f2 9181      		ldd r25,Z+1
 4768 20f4 FC01      		movw r30,r24
 4769 20f6 8085      		ldd r24,Z+8
 4770 20f8 9185      		ldd r25,Z+9
 4771 20fa 0397      		sbiw r24,3
 4772 20fc 04F0      		brlt .L174
 4773               		.loc 1 549 0 is_stmt 0 discriminator 1
 4774 20fe 8C8D      		ldd r24,Y+28
 4775 2100 9D8D      		ldd r25,Y+29
 4776 2102 FC01      		movw r30,r24
 4777 2104 808D      		ldd r24,Z+24
 4778 2106 918D      		ldd r25,Z+25
 4779 2108 A28D      		ldd r26,Z+26
 4780 210a B38D      		ldd r27,Z+27
 4781 210c 20E0      		ldi r18,0
 4782 210e 30E0      		ldi r19,0
 4783 2110 A901      		movw r20,r18
 4784 2112 BC01      		movw r22,r24
 4785 2114 CD01      		movw r24,r26
 4786 2116 0E94 0000 		call __eqsf2
 4787 211a 8823      		tst r24
 4788 211c 01F4      		brne .L174
 550:lp_solve_5.5/lp_mipbb.c ****            SOS_is_member_of_type(lp->SOS, k, SOSn)) {
 4789               		.loc 1 550 0 is_stmt 1 discriminator 2
 4790 211e 8A85      		ldd r24,Y+10
 4791 2120 9B85      		ldd r25,Y+11
 4792 2122 8256      		subi r24,98
 4793 2124 9D4F      		sbci r25,-3
 4794 2126 FC01      		movw r30,r24
 4795 2128 8081      		ld r24,Z
 4796 212a 9181      		ldd r25,Z+1
 4797 212c 2E85      		ldd r18,Y+14
 4798 212e 3F85      		ldd r19,Y+15
 4799 2130 4FEF      		ldi r20,lo8(-1)
 4800 2132 5FEF      		ldi r21,lo8(-1)
 4801 2134 B901      		movw r22,r18
 4802 2136 0E94 0000 		call SOS_is_member_of_type
 549:lp_solve_5.5/lp_mipbb.c ****            SOS_is_member_of_type(lp->SOS, k, SOSn)) {
 4803               		.loc 1 549 0 discriminator 2
 4804 213a 8823      		tst r24
 4805 213c 01F0      		breq .L174
 551:lp_solve_5.5/lp_mipbb.c ****           BB->isSOS = AUTOMATIC;
 4806               		.loc 1 551 0
 4807 213e 8C8D      		ldd r24,Y+28
 4808 2140 9D8D      		ldd r25,Y+29
 4809 2142 22E0      		ldi r18,lo8(2)
 4810 2144 FC01      		movw r30,r24
 4811 2146 22AB      		std Z+50,r18
 4812 2148 00C0      		rjmp .L174
 4813               	.L180:
 552:lp_solve_5.5/lp_mipbb.c ****         }
 553:lp_solve_5.5/lp_mipbb.c ****       }
 554:lp_solve_5.5/lp_mipbb.c ****     }
 555:lp_solve_5.5/lp_mipbb.c ****     else                              /* Handle all other variable incarnations */
 556:lp_solve_5.5/lp_mipbb.c ****       new_bound = BB->sc_bound;
 4814               		.loc 1 556 0
 4815 214a 8C8D      		ldd r24,Y+28
 4816 214c 9D8D      		ldd r25,Y+29
 4817 214e FC01      		movw r30,r24
 4818 2150 848D      		ldd r24,Z+28
 4819 2152 958D      		ldd r25,Z+29
 4820 2154 A68D      		ldd r26,Z+30
 4821 2156 B78D      		ldd r27,Z+31
 4822 2158 8983      		std Y+1,r24
 4823 215a 9A83      		std Y+2,r25
 4824 215c AB83      		std Y+3,r26
 4825 215e BC83      		std Y+4,r27
 4826               	.L174:
 557:lp_solve_5.5/lp_mipbb.c **** 
 558:lp_solve_5.5/lp_mipbb.c ****     /* Check if the new bound might conflict and possibly make adjustments */
 559:lp_solve_5.5/lp_mipbb.c ****     if(new_bound > BB->upbo[K])
 4827               		.loc 1 559 0
 4828 2160 8C8D      		ldd r24,Y+28
 4829 2162 9D8D      		ldd r25,Y+29
 4830 2164 FC01      		movw r30,r24
 4831 2166 20A1      		ldd r18,Z+32
 4832 2168 31A1      		ldd r19,Z+33
 4833 216a 8C85      		ldd r24,Y+12
 4834 216c 9D85      		ldd r25,Y+13
 4835 216e 880F      		lsl r24
 4836 2170 991F      		rol r25
 4837 2172 880F      		lsl r24
 4838 2174 991F      		rol r25
 4839 2176 820F      		add r24,r18
 4840 2178 931F      		adc r25,r19
 4841 217a FC01      		movw r30,r24
 4842 217c 8081      		ld r24,Z
 4843 217e 9181      		ldd r25,Z+1
 4844 2180 A281      		ldd r26,Z+2
 4845 2182 B381      		ldd r27,Z+3
 4846 2184 2981      		ldd r18,Y+1
 4847 2186 3A81      		ldd r19,Y+2
 4848 2188 4B81      		ldd r20,Y+3
 4849 218a 5C81      		ldd r21,Y+4
 4850 218c BC01      		movw r22,r24
 4851 218e CD01      		movw r24,r26
 4852 2190 0E94 0000 		call __ltsf2
 4853 2194 8823      		tst r24
 4854 2196 04F0      		brlt .+2
 4855 2198 00C0      		rjmp .L185
 560:lp_solve_5.5/lp_mipbb.c ****       new_bound = BB->upbo[K] + my_avoidtiny(new_bound-BB->upbo[K], intmargin);
 4856               		.loc 1 560 0
 4857 219a 8C8D      		ldd r24,Y+28
 4858 219c 9D8D      		ldd r25,Y+29
 4859 219e FC01      		movw r30,r24
 4860 21a0 20A1      		ldd r18,Z+32
 4861 21a2 31A1      		ldd r19,Z+33
 4862 21a4 8C85      		ldd r24,Y+12
 4863 21a6 9D85      		ldd r25,Y+13
 4864 21a8 880F      		lsl r24
 4865 21aa 991F      		rol r25
 4866 21ac 880F      		lsl r24
 4867 21ae 991F      		rol r25
 4868 21b0 820F      		add r24,r18
 4869 21b2 931F      		adc r25,r19
 4870 21b4 FC01      		movw r30,r24
 4871 21b6 C080      		ld r12,Z
 4872 21b8 D180      		ldd r13,Z+1
 4873 21ba E280      		ldd r14,Z+2
 4874 21bc F380      		ldd r15,Z+3
 4875 21be 8C8D      		ldd r24,Y+28
 4876 21c0 9D8D      		ldd r25,Y+29
 4877 21c2 FC01      		movw r30,r24
 4878 21c4 20A1      		ldd r18,Z+32
 4879 21c6 31A1      		ldd r19,Z+33
 4880 21c8 8C85      		ldd r24,Y+12
 4881 21ca 9D85      		ldd r25,Y+13
 4882 21cc 880F      		lsl r24
 4883 21ce 991F      		rol r25
 4884 21d0 880F      		lsl r24
 4885 21d2 991F      		rol r25
 4886 21d4 820F      		add r24,r18
 4887 21d6 931F      		adc r25,r19
 4888 21d8 FC01      		movw r30,r24
 4889 21da 8081      		ld r24,Z
 4890 21dc 9181      		ldd r25,Z+1
 4891 21de A281      		ldd r26,Z+2
 4892 21e0 B381      		ldd r27,Z+3
 4893 21e2 9C01      		movw r18,r24
 4894 21e4 AD01      		movw r20,r26
 4895 21e6 6981      		ldd r22,Y+1
 4896 21e8 7A81      		ldd r23,Y+2
 4897 21ea 8B81      		ldd r24,Y+3
 4898 21ec 9C81      		ldd r25,Y+4
 4899 21ee 0E94 0000 		call __subsf3
 4900 21f2 DC01      		movw r26,r24
 4901 21f4 CB01      		movw r24,r22
 4902 21f6 BF77      		andi r27,0x7f
 4903 21f8 2E81      		ldd r18,Y+6
 4904 21fa 3F81      		ldd r19,Y+7
 4905 21fc 4885      		ldd r20,Y+8
 4906 21fe 5985      		ldd r21,Y+9
 4907 2200 BC01      		movw r22,r24
 4908 2202 CD01      		movw r24,r26
 4909 2204 0E94 0000 		call __ltsf2
 4910 2208 8823      		tst r24
 4911 220a 04F4      		brge .L237
 4912               		.loc 1 560 0 is_stmt 0 discriminator 1
 4913 220c 80E0      		ldi r24,0
 4914 220e 90E0      		ldi r25,0
 4915 2210 DC01      		movw r26,r24
 4916 2212 00C0      		rjmp .L189
 4917               	.L237:
 4918               		.loc 1 560 0 discriminator 2
 4919 2214 8C8D      		ldd r24,Y+28
 4920 2216 9D8D      		ldd r25,Y+29
 4921 2218 FC01      		movw r30,r24
 4922 221a 20A1      		ldd r18,Z+32
 4923 221c 31A1      		ldd r19,Z+33
 4924 221e 8C85      		ldd r24,Y+12
 4925 2220 9D85      		ldd r25,Y+13
 4926 2222 880F      		lsl r24
 4927 2224 991F      		rol r25
 4928 2226 880F      		lsl r24
 4929 2228 991F      		rol r25
 4930 222a 820F      		add r24,r18
 4931 222c 931F      		adc r25,r19
 4932 222e FC01      		movw r30,r24
 4933 2230 8081      		ld r24,Z
 4934 2232 9181      		ldd r25,Z+1
 4935 2234 A281      		ldd r26,Z+2
 4936 2236 B381      		ldd r27,Z+3
 4937 2238 9C01      		movw r18,r24
 4938 223a AD01      		movw r20,r26
 4939 223c 6981      		ldd r22,Y+1
 4940 223e 7A81      		ldd r23,Y+2
 4941 2240 8B81      		ldd r24,Y+3
 4942 2242 9C81      		ldd r25,Y+4
 4943 2244 0E94 0000 		call __subsf3
 4944 2248 DC01      		movw r26,r24
 4945 224a CB01      		movw r24,r22
 4946               	.L189:
 4947               		.loc 1 560 0 discriminator 4
 4948 224c 9C01      		movw r18,r24
 4949 224e AD01      		movw r20,r26
 4950 2250 C701      		movw r24,r14
 4951 2252 B601      		movw r22,r12
 4952 2254 0E94 0000 		call __addsf3
 4953 2258 DC01      		movw r26,r24
 4954 225a CB01      		movw r24,r22
 4955 225c 8983      		std Y+1,r24
 4956 225e 9A83      		std Y+2,r25
 4957 2260 AB83      		std Y+3,r26
 4958 2262 BC83      		std Y+4,r27
 4959               	.L185:
 561:lp_solve_5.5/lp_mipbb.c ****     if(new_bound > BB->upbo[K]) {
 4960               		.loc 1 561 0 is_stmt 1
 4961 2264 8C8D      		ldd r24,Y+28
 4962 2266 9D8D      		ldd r25,Y+29
 4963 2268 FC01      		movw r30,r24
 4964 226a 20A1      		ldd r18,Z+32
 4965 226c 31A1      		ldd r19,Z+33
 4966 226e 8C85      		ldd r24,Y+12
 4967 2270 9D85      		ldd r25,Y+13
 4968 2272 880F      		lsl r24
 4969 2274 991F      		rol r25
 4970 2276 880F      		lsl r24
 4971 2278 991F      		rol r25
 4972 227a 820F      		add r24,r18
 4973 227c 931F      		adc r25,r19
 4974 227e FC01      		movw r30,r24
 4975 2280 8081      		ld r24,Z
 4976 2282 9181      		ldd r25,Z+1
 4977 2284 A281      		ldd r26,Z+2
 4978 2286 B381      		ldd r27,Z+3
 4979 2288 2981      		ldd r18,Y+1
 4980 228a 3A81      		ldd r19,Y+2
 4981 228c 4B81      		ldd r20,Y+3
 4982 228e 5C81      		ldd r21,Y+4
 4983 2290 BC01      		movw r22,r24
 4984 2292 CD01      		movw r24,r26
 4985 2294 0E94 0000 		call __ltsf2
 4986 2298 8823      		tst r24
 4987 229a 04F4      		brge .L238
 562:lp_solve_5.5/lp_mipbb.c **** #ifdef Paranoia
 563:lp_solve_5.5/lp_mipbb.c ****       debug_print(lp,
 564:lp_solve_5.5/lp_mipbb.c ****         "fillbranches_BB: New lower bound value %g conflicts with old upper bound %g\n",
 565:lp_solve_5.5/lp_mipbb.c ****         new_bound, BB->upbo[K]);
 566:lp_solve_5.5/lp_mipbb.c **** #endif
 567:lp_solve_5.5/lp_mipbb.c ****       BB->nodesleft--;
 4988               		.loc 1 567 0
 4989 229c 8C8D      		ldd r24,Y+28
 4990 229e 9D8D      		ldd r25,Y+29
 4991 22a0 FC01      		movw r30,r24
 4992 22a2 8685      		ldd r24,Z+14
 4993 22a4 9785      		ldd r25,Z+15
 4994 22a6 9C01      		movw r18,r24
 4995 22a8 2150      		subi r18,1
 4996 22aa 3109      		sbc r19,__zero_reg__
 4997 22ac 8C8D      		ldd r24,Y+28
 4998 22ae 9D8D      		ldd r25,Y+29
 4999 22b0 FC01      		movw r30,r24
 5000 22b2 3787      		std Z+15,r19
 5001 22b4 2687      		std Z+14,r18
 568:lp_solve_5.5/lp_mipbb.c ****       goto Finish;
 5002               		.loc 1 568 0
 5003 22b6 00C0      		rjmp .L179
 5004               	.L238:
 569:lp_solve_5.5/lp_mipbb.c ****     }
 570:lp_solve_5.5/lp_mipbb.c **** #ifdef Paranoia
 571:lp_solve_5.5/lp_mipbb.c ****     /* Do additional consistency checking */
 572:lp_solve_5.5/lp_mipbb.c ****     else if(!check_if_less(lp, BB->lowbo[K], new_bound, K)) {
 573:lp_solve_5.5/lp_mipbb.c ****       BB->nodesleft--;
 574:lp_solve_5.5/lp_mipbb.c ****       goto Finish;
 575:lp_solve_5.5/lp_mipbb.c ****     }
 576:lp_solve_5.5/lp_mipbb.c **** #endif
 577:lp_solve_5.5/lp_mipbb.c ****     /* Bound (at least near-)feasible */
 578:lp_solve_5.5/lp_mipbb.c ****     else {
 579:lp_solve_5.5/lp_mipbb.c ****       /* Makes a difference with models like QUEEN
 580:lp_solve_5.5/lp_mipbb.c ****          (note consistent use of lp->epsprimal for scaled integer variables) */
 581:lp_solve_5.5/lp_mipbb.c ****       if(fabs(BB->upbo[K]-new_bound) < intmargin*SCALEDINTFIXRANGE)
 5005               		.loc 1 581 0
 5006 22b8 8C8D      		ldd r24,Y+28
 5007 22ba 9D8D      		ldd r25,Y+29
 5008 22bc FC01      		movw r30,r24
 5009 22be 20A1      		ldd r18,Z+32
 5010 22c0 31A1      		ldd r19,Z+33
 5011 22c2 8C85      		ldd r24,Y+12
 5012 22c4 9D85      		ldd r25,Y+13
 5013 22c6 880F      		lsl r24
 5014 22c8 991F      		rol r25
 5015 22ca 880F      		lsl r24
 5016 22cc 991F      		rol r25
 5017 22ce 820F      		add r24,r18
 5018 22d0 931F      		adc r25,r19
 5019 22d2 FC01      		movw r30,r24
 5020 22d4 8081      		ld r24,Z
 5021 22d6 9181      		ldd r25,Z+1
 5022 22d8 A281      		ldd r26,Z+2
 5023 22da B381      		ldd r27,Z+3
 5024 22dc 2981      		ldd r18,Y+1
 5025 22de 3A81      		ldd r19,Y+2
 5026 22e0 4B81      		ldd r20,Y+3
 5027 22e2 5C81      		ldd r21,Y+4
 5028 22e4 BC01      		movw r22,r24
 5029 22e6 CD01      		movw r24,r26
 5030 22e8 0E94 0000 		call __subsf3
 5031 22ec DC01      		movw r26,r24
 5032 22ee CB01      		movw r24,r22
 5033 22f0 6C01      		movw r12,r24
 5034 22f2 7D01      		movw r14,r26
 5035 22f4 E894      		clt
 5036 22f6 F7F8      		bld r15,7
 5037 22f8 2DEC      		ldi r18,lo8(-51)
 5038 22fa 3CEC      		ldi r19,lo8(-52)
 5039 22fc 4CEC      		ldi r20,lo8(-52)
 5040 22fe 5FE3      		ldi r21,lo8(63)
 5041 2300 6E81      		ldd r22,Y+6
 5042 2302 7F81      		ldd r23,Y+7
 5043 2304 8885      		ldd r24,Y+8
 5044 2306 9985      		ldd r25,Y+9
 5045 2308 0E94 0000 		call __mulsf3
 5046 230c DC01      		movw r26,r24
 5047 230e CB01      		movw r24,r22
 5048 2310 9C01      		movw r18,r24
 5049 2312 AD01      		movw r20,r26
 5050 2314 C701      		movw r24,r14
 5051 2316 B601      		movw r22,r12
 5052 2318 0E94 0000 		call __ltsf2
 5053 231c 8823      		tst r24
 5054 231e 04F4      		brge .L192
 582:lp_solve_5.5/lp_mipbb.c ****         new_bound = BB->upbo[K];
 5055               		.loc 1 582 0
 5056 2320 8C8D      		ldd r24,Y+28
 5057 2322 9D8D      		ldd r25,Y+29
 5058 2324 FC01      		movw r30,r24
 5059 2326 20A1      		ldd r18,Z+32
 5060 2328 31A1      		ldd r19,Z+33
 5061 232a 8C85      		ldd r24,Y+12
 5062 232c 9D85      		ldd r25,Y+13
 5063 232e 880F      		lsl r24
 5064 2330 991F      		rol r25
 5065 2332 880F      		lsl r24
 5066 2334 991F      		rol r25
 5067 2336 820F      		add r24,r18
 5068 2338 931F      		adc r25,r19
 5069 233a FC01      		movw r30,r24
 5070 233c 8081      		ld r24,Z
 5071 233e 9181      		ldd r25,Z+1
 5072 2340 A281      		ldd r26,Z+2
 5073 2342 B381      		ldd r27,Z+3
 5074 2344 8983      		std Y+1,r24
 5075 2346 9A83      		std Y+2,r25
 5076 2348 AB83      		std Y+3,r26
 5077 234a BC83      		std Y+4,r27
 5078               	.L192:
 583:lp_solve_5.5/lp_mipbb.c ****     }
 584:lp_solve_5.5/lp_mipbb.c **** 
 585:lp_solve_5.5/lp_mipbb.c ****     BB->LObound = new_bound;
 5079               		.loc 1 585 0
 5080 234c 2C8D      		ldd r18,Y+28
 5081 234e 3D8D      		ldd r19,Y+29
 5082 2350 8981      		ldd r24,Y+1
 5083 2352 9A81      		ldd r25,Y+2
 5084 2354 AB81      		ldd r26,Y+3
 5085 2356 BC81      		ldd r27,Y+4
 5086 2358 F901      		movw r30,r18
 5087 235a 80A7      		std Z+40,r24
 5088 235c 91A7      		std Z+41,r25
 5089 235e A2A7      		std Z+42,r26
 5090 2360 B3A7      		std Z+43,r27
 5091               	.L179:
 586:lp_solve_5.5/lp_mipbb.c **** 
 587:lp_solve_5.5/lp_mipbb.c ****     /* Prepare for the first branch by making sure we are pointing correctly */
 588:lp_solve_5.5/lp_mipbb.c **** Finish:
 589:lp_solve_5.5/lp_mipbb.c ****     if(BB->nodesleft > 0) {
 5092               		.loc 1 589 0
 5093 2362 8C8D      		ldd r24,Y+28
 5094 2364 9D8D      		ldd r25,Y+29
 5095 2366 FC01      		movw r30,r24
 5096 2368 8685      		ldd r24,Z+14
 5097 236a 9785      		ldd r25,Z+15
 5098 236c 1816      		cp __zero_reg__,r24
 5099 236e 1906      		cpc __zero_reg__,r25
 5100 2370 04F0      		brlt .+2
 5101 2372 00C0      		rjmp .L194
 590:lp_solve_5.5/lp_mipbb.c **** 
 591:lp_solve_5.5/lp_mipbb.c ****       /* Make sure the change tracker levels are "clean" for the B&B */
 592:lp_solve_5.5/lp_mipbb.c ****       if(countsUndoLadder(lp->bb_upperchange) > 0) {
 5102               		.loc 1 592 0
 5103 2374 8A85      		ldd r24,Y+10
 5104 2376 9B85      		ldd r25,Y+11
 5105 2378 865B      		subi r24,-74
 5106 237a 9C4F      		sbci r25,-4
 5107 237c FC01      		movw r30,r24
 5108 237e 8081      		ld r24,Z
 5109 2380 9181      		ldd r25,Z+1
 5110 2382 0E94 0000 		call countsUndoLadder
 5111 2386 1816      		cp __zero_reg__,r24
 5112 2388 1906      		cpc __zero_reg__,r25
 5113 238a 04F4      		brge .L195
 593:lp_solve_5.5/lp_mipbb.c ****         incrementUndoLadder(lp->bb_upperchange);
 5114               		.loc 1 593 0
 5115 238c 8A85      		ldd r24,Y+10
 5116 238e 9B85      		ldd r25,Y+11
 5117 2390 865B      		subi r24,-74
 5118 2392 9C4F      		sbci r25,-4
 5119 2394 FC01      		movw r30,r24
 5120 2396 8081      		ld r24,Z
 5121 2398 9181      		ldd r25,Z+1
 5122 239a 0E94 0000 		call incrementUndoLadder
 594:lp_solve_5.5/lp_mipbb.c ****         BB->UBtrack++;
 5123               		.loc 1 594 0
 5124 239e 8C8D      		ldd r24,Y+28
 5125 23a0 9D8D      		ldd r25,Y+29
 5126 23a2 FC01      		movw r30,r24
 5127 23a4 84A5      		ldd r24,Z+44
 5128 23a6 95A5      		ldd r25,Z+45
 5129 23a8 9C01      		movw r18,r24
 5130 23aa 2F5F      		subi r18,-1
 5131 23ac 3F4F      		sbci r19,-1
 5132 23ae 8C8D      		ldd r24,Y+28
 5133 23b0 9D8D      		ldd r25,Y+29
 5134 23b2 FC01      		movw r30,r24
 5135 23b4 35A7      		std Z+45,r19
 5136 23b6 24A7      		std Z+44,r18
 5137               	.L195:
 595:lp_solve_5.5/lp_mipbb.c ****       }
 596:lp_solve_5.5/lp_mipbb.c ****       if(countsUndoLadder(lp->bb_lowerchange) > 0) {
 5138               		.loc 1 596 0
 5139 23b8 8A85      		ldd r24,Y+10
 5140 23ba 9B85      		ldd r25,Y+11
 5141 23bc 845B      		subi r24,-76
 5142 23be 9C4F      		sbci r25,-4
 5143 23c0 FC01      		movw r30,r24
 5144 23c2 8081      		ld r24,Z
 5145 23c4 9181      		ldd r25,Z+1
 5146 23c6 0E94 0000 		call countsUndoLadder
 5147 23ca 1816      		cp __zero_reg__,r24
 5148 23cc 1906      		cpc __zero_reg__,r25
 5149 23ce 04F4      		brge .L196
 597:lp_solve_5.5/lp_mipbb.c ****         incrementUndoLadder(lp->bb_lowerchange);
 5150               		.loc 1 597 0
 5151 23d0 8A85      		ldd r24,Y+10
 5152 23d2 9B85      		ldd r25,Y+11
 5153 23d4 845B      		subi r24,-76
 5154 23d6 9C4F      		sbci r25,-4
 5155 23d8 FC01      		movw r30,r24
 5156 23da 8081      		ld r24,Z
 5157 23dc 9181      		ldd r25,Z+1
 5158 23de 0E94 0000 		call incrementUndoLadder
 598:lp_solve_5.5/lp_mipbb.c ****         BB->LBtrack++;
 5159               		.loc 1 598 0
 5160 23e2 8C8D      		ldd r24,Y+28
 5161 23e4 9D8D      		ldd r25,Y+29
 5162 23e6 FC01      		movw r30,r24
 5163 23e8 86A5      		ldd r24,Z+46
 5164 23ea 97A5      		ldd r25,Z+47
 5165 23ec 9C01      		movw r18,r24
 5166 23ee 2F5F      		subi r18,-1
 5167 23f0 3F4F      		sbci r19,-1
 5168 23f2 8C8D      		ldd r24,Y+28
 5169 23f4 9D8D      		ldd r25,Y+29
 5170 23f6 FC01      		movw r30,r24
 5171 23f8 37A7      		std Z+47,r19
 5172 23fa 26A7      		std Z+46,r18
 5173               	.L196:
 599:lp_solve_5.5/lp_mipbb.c ****       }
 600:lp_solve_5.5/lp_mipbb.c **** 
 601:lp_solve_5.5/lp_mipbb.c ****       /* Do adjustments */
 602:lp_solve_5.5/lp_mipbb.c ****       if((BB->vartype != BB_SOS) && (fabs(BB->LObound-BB->UPbound) < intmargin)) {
 5174               		.loc 1 602 0
 5175 23fc 8C8D      		ldd r24,Y+28
 5176 23fe 9D8D      		ldd r25,Y+29
 5177 2400 FC01      		movw r30,r24
 5178 2402 8085      		ldd r24,Z+8
 5179 2404 9185      		ldd r25,Z+9
 5180 2406 0397      		sbiw r24,3
 5181 2408 01F4      		brne .+2
 5182 240a 00C0      		rjmp .L197
 5183               		.loc 1 602 0 is_stmt 0 discriminator 1
 5184 240c 8C8D      		ldd r24,Y+28
 5185 240e 9D8D      		ldd r25,Y+29
 5186 2410 FC01      		movw r30,r24
 5187 2412 80A5      		ldd r24,Z+40
 5188 2414 91A5      		ldd r25,Z+41
 5189 2416 A2A5      		ldd r26,Z+42
 5190 2418 B3A5      		ldd r27,Z+43
 5191 241a 2C8D      		ldd r18,Y+28
 5192 241c 3D8D      		ldd r19,Y+29
 5193 241e F901      		movw r30,r18
 5194 2420 24A1      		ldd r18,Z+36
 5195 2422 35A1      		ldd r19,Z+37
 5196 2424 46A1      		ldd r20,Z+38
 5197 2426 57A1      		ldd r21,Z+39
 5198 2428 BC01      		movw r22,r24
 5199 242a CD01      		movw r24,r26
 5200 242c 0E94 0000 		call __subsf3
 5201 2430 DC01      		movw r26,r24
 5202 2432 CB01      		movw r24,r22
 5203 2434 BF77      		andi r27,0x7f
 5204 2436 2E81      		ldd r18,Y+6
 5205 2438 3F81      		ldd r19,Y+7
 5206 243a 4885      		ldd r20,Y+8
 5207 243c 5985      		ldd r21,Y+9
 5208 243e BC01      		movw r22,r24
 5209 2440 CD01      		movw r24,r26
 5210 2442 0E94 0000 		call __ltsf2
 5211 2446 8823      		tst r24
 5212 2448 04F0      		brlt .+2
 5213 244a 00C0      		rjmp .L197
 603:lp_solve_5.5/lp_mipbb.c ****         BB->nodesleft--;
 5214               		.loc 1 603 0 is_stmt 1
 5215 244c 8C8D      		ldd r24,Y+28
 5216 244e 9D8D      		ldd r25,Y+29
 5217 2450 FC01      		movw r30,r24
 5218 2452 8685      		ldd r24,Z+14
 5219 2454 9785      		ldd r25,Z+15
 5220 2456 9C01      		movw r18,r24
 5221 2458 2150      		subi r18,1
 5222 245a 3109      		sbc r19,__zero_reg__
 5223 245c 8C8D      		ldd r24,Y+28
 5224 245e 9D8D      		ldd r25,Y+29
 5225 2460 FC01      		movw r30,r24
 5226 2462 3787      		std Z+15,r19
 5227 2464 2687      		std Z+14,r18
 604:lp_solve_5.5/lp_mipbb.c ****         if(fabs(BB->lowbo[K]-BB->LObound) < intmargin)
 5228               		.loc 1 604 0
 5229 2466 8C8D      		ldd r24,Y+28
 5230 2468 9D8D      		ldd r25,Y+29
 5231 246a FC01      		movw r30,r24
 5232 246c 22A1      		ldd r18,Z+34
 5233 246e 33A1      		ldd r19,Z+35
 5234 2470 8C85      		ldd r24,Y+12
 5235 2472 9D85      		ldd r25,Y+13
 5236 2474 880F      		lsl r24
 5237 2476 991F      		rol r25
 5238 2478 880F      		lsl r24
 5239 247a 991F      		rol r25
 5240 247c 820F      		add r24,r18
 5241 247e 931F      		adc r25,r19
 5242 2480 FC01      		movw r30,r24
 5243 2482 8081      		ld r24,Z
 5244 2484 9181      		ldd r25,Z+1
 5245 2486 A281      		ldd r26,Z+2
 5246 2488 B381      		ldd r27,Z+3
 5247 248a 2C8D      		ldd r18,Y+28
 5248 248c 3D8D      		ldd r19,Y+29
 5249 248e F901      		movw r30,r18
 5250 2490 20A5      		ldd r18,Z+40
 5251 2492 31A5      		ldd r19,Z+41
 5252 2494 42A5      		ldd r20,Z+42
 5253 2496 53A5      		ldd r21,Z+43
 5254 2498 BC01      		movw r22,r24
 5255 249a CD01      		movw r24,r26
 5256 249c 0E94 0000 		call __subsf3
 5257 24a0 DC01      		movw r26,r24
 5258 24a2 CB01      		movw r24,r22
 5259 24a4 BF77      		andi r27,0x7f
 5260 24a6 2E81      		ldd r18,Y+6
 5261 24a8 3F81      		ldd r19,Y+7
 5262 24aa 4885      		ldd r20,Y+8
 5263 24ac 5985      		ldd r21,Y+9
 5264 24ae BC01      		movw r22,r24
 5265 24b0 CD01      		movw r24,r26
 5266 24b2 0E94 0000 		call __ltsf2
 5267 24b6 8823      		tst r24
 5268 24b8 04F4      		brge .L239
 605:lp_solve_5.5/lp_mipbb.c ****           BB->isfloor = FALSE;
 5269               		.loc 1 605 0
 5270 24ba 8C8D      		ldd r24,Y+28
 5271 24bc 9D8D      		ldd r25,Y+29
 5272 24be FC01      		movw r30,r24
 5273 24c0 16AA      		std Z+54,__zero_reg__
 5274 24c2 00C0      		rjmp .L197
 5275               	.L239:
 606:lp_solve_5.5/lp_mipbb.c ****         else if(fabs(BB->upbo[K]-BB->UPbound) < intmargin)
 5276               		.loc 1 606 0
 5277 24c4 8C8D      		ldd r24,Y+28
 5278 24c6 9D8D      		ldd r25,Y+29
 5279 24c8 FC01      		movw r30,r24
 5280 24ca 20A1      		ldd r18,Z+32
 5281 24cc 31A1      		ldd r19,Z+33
 5282 24ce 8C85      		ldd r24,Y+12
 5283 24d0 9D85      		ldd r25,Y+13
 5284 24d2 880F      		lsl r24
 5285 24d4 991F      		rol r25
 5286 24d6 880F      		lsl r24
 5287 24d8 991F      		rol r25
 5288 24da 820F      		add r24,r18
 5289 24dc 931F      		adc r25,r19
 5290 24de FC01      		movw r30,r24
 5291 24e0 8081      		ld r24,Z
 5292 24e2 9181      		ldd r25,Z+1
 5293 24e4 A281      		ldd r26,Z+2
 5294 24e6 B381      		ldd r27,Z+3
 5295 24e8 2C8D      		ldd r18,Y+28
 5296 24ea 3D8D      		ldd r19,Y+29
 5297 24ec F901      		movw r30,r18
 5298 24ee 24A1      		ldd r18,Z+36
 5299 24f0 35A1      		ldd r19,Z+37
 5300 24f2 46A1      		ldd r20,Z+38
 5301 24f4 57A1      		ldd r21,Z+39
 5302 24f6 BC01      		movw r22,r24
 5303 24f8 CD01      		movw r24,r26
 5304 24fa 0E94 0000 		call __subsf3
 5305 24fe DC01      		movw r26,r24
 5306 2500 CB01      		movw r24,r22
 5307 2502 BF77      		andi r27,0x7f
 5308 2504 2E81      		ldd r18,Y+6
 5309 2506 3F81      		ldd r19,Y+7
 5310 2508 4885      		ldd r20,Y+8
 5311 250a 5985      		ldd r21,Y+9
 5312 250c BC01      		movw r22,r24
 5313 250e CD01      		movw r24,r26
 5314 2510 0E94 0000 		call __ltsf2
 5315 2514 8823      		tst r24
 5316 2516 04F4      		brge .L240
 607:lp_solve_5.5/lp_mipbb.c ****           BB->isfloor = TRUE;
 5317               		.loc 1 607 0
 5318 2518 8C8D      		ldd r24,Y+28
 5319 251a 9D8D      		ldd r25,Y+29
 5320 251c 21E0      		ldi r18,lo8(1)
 5321 251e FC01      		movw r30,r24
 5322 2520 26AB      		std Z+54,r18
 5323 2522 00C0      		rjmp .L197
 5324               	.L240:
 608:lp_solve_5.5/lp_mipbb.c ****         else {
 609:lp_solve_5.5/lp_mipbb.c ****           BB->isfloor = TRUE;
 5325               		.loc 1 609 0
 5326 2524 8C8D      		ldd r24,Y+28
 5327 2526 9D8D      		ldd r25,Y+29
 5328 2528 21E0      		ldi r18,lo8(1)
 5329 252a FC01      		movw r30,r24
 5330 252c 26AB      		std Z+54,r18
 610:lp_solve_5.5/lp_mipbb.c ****           report(BB->lp, IMPORTANT, "fillbranches_BB: Inconsistent equal-valued bounds for %s\n",
 5331               		.loc 1 610 0
 5332 252e 8C8D      		ldd r24,Y+28
 5333 2530 9D8D      		ldd r25,Y+29
 5334 2532 FC01      		movw r30,r24
 5335 2534 8481      		ldd r24,Z+4
 5336 2536 9581      		ldd r25,Z+5
 5337 2538 2E85      		ldd r18,Y+14
 5338 253a 3F85      		ldd r19,Y+15
 5339 253c B901      		movw r22,r18
 5340 253e 0E94 0000 		call get_col_name
 5341 2542 9C01      		movw r18,r24
 5342 2544 8C8D      		ldd r24,Y+28
 5343 2546 9D8D      		ldd r25,Y+29
 5344 2548 FC01      		movw r30,r24
 5345 254a 8481      		ldd r24,Z+4
 5346 254c 9581      		ldd r25,Z+5
 5347 254e 432F      		mov r20,r19
 5348 2550 4F93      		push r20
 5349 2552 2F93      		push r18
 5350 2554 20E0      		ldi r18,lo8(.LC1)
 5351 2556 30E0      		ldi r19,hi8(.LC1)
 5352 2558 232F      		mov r18,r19
 5353 255a 2F93      		push r18
 5354 255c 20E0      		ldi r18,lo8(.LC1)
 5355 255e 30E0      		ldi r19,hi8(.LC1)
 5356 2560 2F93      		push r18
 5357 2562 1F92      		push __zero_reg__
 5358 2564 23E0      		ldi r18,lo8(3)
 5359 2566 2F93      		push r18
 5360 2568 292F      		mov r18,r25
 5361 256a 2F93      		push r18
 5362 256c 8F93      		push r24
 5363 256e 0E94 0000 		call report
 5364 2572 4DB7      		in r20,__SP_L__
 5365 2574 5EB7      		in r21,__SP_H__
 5366 2576 485F      		subi r20,-8
 5367 2578 5F4F      		sbci r21,-1
 5368 257a 0FB6      		in __tmp_reg__,__SREG__
 5369 257c F894      		cli
 5370 257e DEBF      		out __SP_H__,r29
 5371 2580 0FBE      		out __SREG__,__tmp_reg__
 5372 2582 CDBF      		out __SP_L__,r28
 5373               	.L197:
 611:lp_solve_5.5/lp_mipbb.c ****                                     get_col_name(BB->lp, k));
 612:lp_solve_5.5/lp_mipbb.c ****         }
 613:lp_solve_5.5/lp_mipbb.c ****       }
 614:lp_solve_5.5/lp_mipbb.c ****       if((BB->nodesleft == 1) &&
 5374               		.loc 1 614 0
 5375 2584 8C8D      		ldd r24,Y+28
 5376 2586 9D8D      		ldd r25,Y+29
 5377 2588 FC01      		movw r30,r24
 5378 258a 8685      		ldd r24,Z+14
 5379 258c 9785      		ldd r25,Z+15
 5380 258e 0197      		sbiw r24,1
 5381 2590 01F0      		breq .+2
 5382 2592 00C0      		rjmp .L203
 615:lp_solve_5.5/lp_mipbb.c ****          ((BB->isfloor && (BB->UPbound >= lp->infinite)) ||
 5383               		.loc 1 615 0 discriminator 1
 5384 2594 8C8D      		ldd r24,Y+28
 5385 2596 9D8D      		ldd r25,Y+29
 5386 2598 FC01      		movw r30,r24
 5387 259a 86A9      		ldd r24,Z+54
 614:lp_solve_5.5/lp_mipbb.c ****          ((BB->isfloor && (BB->UPbound >= lp->infinite)) ||
 5388               		.loc 1 614 0 discriminator 1
 5389 259c 8823      		tst r24
 5390 259e 01F0      		breq .L204
 5391               		.loc 1 615 0
 5392 25a0 8C8D      		ldd r24,Y+28
 5393 25a2 9D8D      		ldd r25,Y+29
 5394 25a4 FC01      		movw r30,r24
 5395 25a6 84A1      		ldd r24,Z+36
 5396 25a8 95A1      		ldd r25,Z+37
 5397 25aa A6A1      		ldd r26,Z+38
 5398 25ac B7A1      		ldd r27,Z+39
 5399 25ae 2A85      		ldd r18,Y+10
 5400 25b0 3B85      		ldd r19,Y+11
 5401 25b2 265F      		subi r18,-10
 5402 25b4 3C4F      		sbci r19,-4
 5403 25b6 F901      		movw r30,r18
 5404 25b8 2081      		ld r18,Z
 5405 25ba 3181      		ldd r19,Z+1
 5406 25bc 4281      		ldd r20,Z+2
 5407 25be 5381      		ldd r21,Z+3
 5408 25c0 BC01      		movw r22,r24
 5409 25c2 CD01      		movw r24,r26
 5410 25c4 0E94 0000 		call __gesf2
 5411 25c8 8823      		tst r24
 5412 25ca 04F4      		brge .L205
 5413               	.L204:
 616:lp_solve_5.5/lp_mipbb.c ****           (!BB->isfloor && (BB->LObound <= -lp->infinite))))
 5414               		.loc 1 616 0 discriminator 1
 5415 25cc 8C8D      		ldd r24,Y+28
 5416 25ce 9D8D      		ldd r25,Y+29
 5417 25d0 FC01      		movw r30,r24
 5418 25d2 86A9      		ldd r24,Z+54
 615:lp_solve_5.5/lp_mipbb.c ****          ((BB->isfloor && (BB->UPbound >= lp->infinite)) ||
 5419               		.loc 1 615 0 discriminator 1
 5420 25d4 8823      		tst r24
 5421 25d6 01F4      		brne .L203
 5422               		.loc 1 616 0
 5423 25d8 8C8D      		ldd r24,Y+28
 5424 25da 9D8D      		ldd r25,Y+29
 5425 25dc FC01      		movw r30,r24
 5426 25de E0A4      		ldd r14,Z+40
 5427 25e0 F1A4      		ldd r15,Z+41
 5428 25e2 02A5      		ldd r16,Z+42
 5429 25e4 13A5      		ldd r17,Z+43
 5430 25e6 8A85      		ldd r24,Y+10
 5431 25e8 9B85      		ldd r25,Y+11
 5432 25ea 865F      		subi r24,-10
 5433 25ec 9C4F      		sbci r25,-4
 5434 25ee FC01      		movw r30,r24
 5435 25f0 8081      		ld r24,Z
 5436 25f2 9181      		ldd r25,Z+1
 5437 25f4 A281      		ldd r26,Z+2
 5438 25f6 B381      		ldd r27,Z+3
 5439 25f8 B058      		subi r27,0x80
 5440 25fa 9C01      		movw r18,r24
 5441 25fc AD01      		movw r20,r26
 5442 25fe C801      		movw r24,r16
 5443 2600 B701      		movw r22,r14
 5444 2602 0E94 0000 		call __lesf2
 5445 2606 1816      		cp __zero_reg__,r24
 5446 2608 04F0      		brlt .L203
 5447               	.L205:
 617:lp_solve_5.5/lp_mipbb.c ****         BB->isfloor = !BB->isfloor;
 5448               		.loc 1 617 0
 5449 260a 8C8D      		ldd r24,Y+28
 5450 260c 9D8D      		ldd r25,Y+29
 5451 260e FC01      		movw r30,r24
 5452 2610 96A9      		ldd r25,Z+54
 5453 2612 81E0      		ldi r24,lo8(1)
 5454 2614 9923      		tst r25
 5455 2616 01F0      		breq .L207
 5456 2618 80E0      		ldi r24,0
 5457               	.L207:
 5458 261a 282F      		mov r18,r24
 5459 261c 8C8D      		ldd r24,Y+28
 5460 261e 9D8D      		ldd r25,Y+29
 5461 2620 FC01      		movw r30,r24
 5462 2622 26AB      		std Z+54,r18
 5463               	.L203:
 618:lp_solve_5.5/lp_mipbb.c ****       /* Header initialization */
 619:lp_solve_5.5/lp_mipbb.c ****       BB->isfloor = !BB->isfloor;
 5464               		.loc 1 619 0
 5465 2624 8C8D      		ldd r24,Y+28
 5466 2626 9D8D      		ldd r25,Y+29
 5467 2628 FC01      		movw r30,r24
 5468 262a 96A9      		ldd r25,Z+54
 5469 262c 81E0      		ldi r24,lo8(1)
 5470 262e 9923      		tst r25
 5471 2630 01F0      		breq .L208
 5472 2632 80E0      		ldi r24,0
 5473               	.L208:
 5474 2634 282F      		mov r18,r24
 5475 2636 8C8D      		ldd r24,Y+28
 5476 2638 9D8D      		ldd r25,Y+29
 5477 263a FC01      		movw r30,r24
 5478 263c 26AB      		std Z+54,r18
 620:lp_solve_5.5/lp_mipbb.c ****       while(!OKstatus && /* !userabort(lp, -1) */ lp->spx_status != TIMEOUT && !lp->bb_break && (BB
 5479               		.loc 1 620 0
 5480 263e 00C0      		rjmp .L209
 5481               	.L210:
 621:lp_solve_5.5/lp_mipbb.c ****         OKstatus = nextbranch_BB( BB );
 5482               		.loc 1 621 0
 5483 2640 8C8D      		ldd r24,Y+28
 5484 2642 9D8D      		ldd r25,Y+29
 5485 2644 0E94 0000 		call nextbranch_BB
 5486 2648 8D83      		std Y+5,r24
 5487               	.L209:
 620:lp_solve_5.5/lp_mipbb.c ****       while(!OKstatus && /* !userabort(lp, -1) */ lp->spx_status != TIMEOUT && !lp->bb_break && (BB
 5488               		.loc 1 620 0
 5489 264a 8D81      		ldd r24,Y+5
 5490 264c 8823      		tst r24
 5491 264e 01F4      		brne .L194
 620:lp_solve_5.5/lp_mipbb.c ****       while(!OKstatus && /* !userabort(lp, -1) */ lp->spx_status != TIMEOUT && !lp->bb_break && (BB
 5492               		.loc 1 620 0 is_stmt 0 discriminator 1
 5493 2650 8A85      		ldd r24,Y+10
 5494 2652 9B85      		ldd r25,Y+11
 5495 2654 8A5F      		subi r24,-6
 5496 2656 9D4F      		sbci r25,-3
 5497 2658 FC01      		movw r30,r24
 5498 265a 8081      		ld r24,Z
 5499 265c 9181      		ldd r25,Z+1
 5500 265e 0797      		sbiw r24,7
 5501 2660 01F0      		breq .L194
 620:lp_solve_5.5/lp_mipbb.c ****       while(!OKstatus && /* !userabort(lp, -1) */ lp->spx_status != TIMEOUT && !lp->bb_break && (BB
 5502               		.loc 1 620 0 discriminator 2
 5503 2662 8A85      		ldd r24,Y+10
 5504 2664 9B85      		ldd r25,Y+11
 5505 2666 8B50      		subi r24,11
 5506 2668 9D4F      		sbci r25,-3
 5507 266a FC01      		movw r30,r24
 5508 266c 8081      		ld r24,Z
 5509 266e 8823      		tst r24
 5510 2670 01F4      		brne .L194
 620:lp_solve_5.5/lp_mipbb.c ****       while(!OKstatus && /* !userabort(lp, -1) */ lp->spx_status != TIMEOUT && !lp->bb_break && (BB
 5511               		.loc 1 620 0 discriminator 3
 5512 2672 8C8D      		ldd r24,Y+28
 5513 2674 9D8D      		ldd r25,Y+29
 5514 2676 FC01      		movw r30,r24
 5515 2678 8685      		ldd r24,Z+14
 5516 267a 9785      		ldd r25,Z+15
 5517 267c 1816      		cp __zero_reg__,r24
 5518 267e 1906      		cpc __zero_reg__,r25
 5519 2680 04F0      		brlt .L210
 5520               	.L194:
 622:lp_solve_5.5/lp_mipbb.c ****     }
 623:lp_solve_5.5/lp_mipbb.c **** 
 624:lp_solve_5.5/lp_mipbb.c ****     /* Set an SC variable active, if necessary */
 625:lp_solve_5.5/lp_mipbb.c ****     if(BB->sc_canset)
 5521               		.loc 1 625 0 is_stmt 1
 5522 2682 8C8D      		ldd r24,Y+28
 5523 2684 9D8D      		ldd r25,Y+29
 5524 2686 FC01      		movw r30,r24
 5525 2688 81A9      		ldd r24,Z+49
 5526 268a 8823      		tst r24
 5527 268c 01F0      		breq .L212
 626:lp_solve_5.5/lp_mipbb.c ****       lp->sc_lobound[k] *= -1;
 5528               		.loc 1 626 0
 5529 268e 8A85      		ldd r24,Y+10
 5530 2690 9B85      		ldd r25,Y+11
 5531 2692 8E56      		subi r24,110
 5532 2694 9D4F      		sbci r25,-3
 5533 2696 FC01      		movw r30,r24
 5534 2698 2081      		ld r18,Z
 5535 269a 3181      		ldd r19,Z+1
 5536 269c 8E85      		ldd r24,Y+14
 5537 269e 9F85      		ldd r25,Y+15
 5538 26a0 880F      		lsl r24
 5539 26a2 991F      		rol r25
 5540 26a4 880F      		lsl r24
 5541 26a6 991F      		rol r25
 5542 26a8 280F      		add r18,r24
 5543 26aa 391F      		adc r19,r25
 5544 26ac 8A85      		ldd r24,Y+10
 5545 26ae 9B85      		ldd r25,Y+11
 5546 26b0 8E56      		subi r24,110
 5547 26b2 9D4F      		sbci r25,-3
 5548 26b4 FC01      		movw r30,r24
 5549 26b6 4081      		ld r20,Z
 5550 26b8 5181      		ldd r21,Z+1
 5551 26ba 8E85      		ldd r24,Y+14
 5552 26bc 9F85      		ldd r25,Y+15
 5553 26be 880F      		lsl r24
 5554 26c0 991F      		rol r25
 5555 26c2 880F      		lsl r24
 5556 26c4 991F      		rol r25
 5557 26c6 840F      		add r24,r20
 5558 26c8 951F      		adc r25,r21
 5559 26ca FC01      		movw r30,r24
 5560 26cc 8081      		ld r24,Z
 5561 26ce 9181      		ldd r25,Z+1
 5562 26d0 A281      		ldd r26,Z+2
 5563 26d2 B381      		ldd r27,Z+3
 5564 26d4 B058      		subi r27,0x80
 5565 26d6 F901      		movw r30,r18
 5566 26d8 8083      		st Z,r24
 5567 26da 9183      		std Z+1,r25
 5568 26dc A283      		std Z+2,r26
 5569 26de B383      		std Z+3,r27
 5570 26e0 00C0      		rjmp .L212
 5571               	.L139:
 627:lp_solve_5.5/lp_mipbb.c **** 
 628:lp_solve_5.5/lp_mipbb.c ****   }
 629:lp_solve_5.5/lp_mipbb.c ****   else {
 630:lp_solve_5.5/lp_mipbb.c ****     BB->nodesleft--;
 5572               		.loc 1 630 0
 5573 26e2 8C8D      		ldd r24,Y+28
 5574 26e4 9D8D      		ldd r25,Y+29
 5575 26e6 FC01      		movw r30,r24
 5576 26e8 8685      		ldd r24,Z+14
 5577 26ea 9785      		ldd r25,Z+15
 5578 26ec 9C01      		movw r18,r24
 5579 26ee 2150      		subi r18,1
 5580 26f0 3109      		sbc r19,__zero_reg__
 5581 26f2 8C8D      		ldd r24,Y+28
 5582 26f4 9D8D      		ldd r25,Y+29
 5583 26f6 FC01      		movw r30,r24
 5584 26f8 3787      		std Z+15,r19
 5585 26fa 2687      		std Z+14,r18
 631:lp_solve_5.5/lp_mipbb.c ****     OKstatus = TRUE;
 5586               		.loc 1 631 0
 5587 26fc 81E0      		ldi r24,lo8(1)
 5588 26fe 8D83      		std Y+5,r24
 5589               	.L212:
 632:lp_solve_5.5/lp_mipbb.c ****   }
 633:lp_solve_5.5/lp_mipbb.c **** 
 634:lp_solve_5.5/lp_mipbb.c ****   return( OKstatus );
 5590               		.loc 1 634 0
 5591 2700 8D81      		ldd r24,Y+5
 5592               	.L138:
 5593               	/* epilogue start */
 635:lp_solve_5.5/lp_mipbb.c **** }
 5594               		.loc 1 635 0
 5595 2702 6D96      		adiw r28,29
 5596 2704 0FB6      		in __tmp_reg__,__SREG__
 5597 2706 F894      		cli
 5598 2708 DEBF      		out __SP_H__,r29
 5599 270a 0FBE      		out __SREG__,__tmp_reg__
 5600 270c CDBF      		out __SP_L__,r28
 5601 270e DF91      		pop r29
 5602 2710 CF91      		pop r28
 5603 2712 1F91      		pop r17
 5604 2714 0F91      		pop r16
 5605 2716 FF90      		pop r15
 5606 2718 EF90      		pop r14
 5607 271a DF90      		pop r13
 5608 271c CF90      		pop r12
 5609 271e 0895      		ret
 5610               		.cfi_endproc
 5611               	.LFE14:
 5613               	.global	nextbranch_BB
 5615               	nextbranch_BB:
 5616               	.LFB15:
 636:lp_solve_5.5/lp_mipbb.c **** 
 637:lp_solve_5.5/lp_mipbb.c **** STATIC MYBOOL nextbranch_BB(BBrec *BB)
 638:lp_solve_5.5/lp_mipbb.c **** {
 5617               		.loc 1 638 0
 5618               		.cfi_startproc
 5619 2720 8F92      		push r8
 5620               	.LCFI46:
 5621               		.cfi_def_cfa_offset 3
 5622               		.cfi_offset 8, -2
 5623 2722 9F92      		push r9
 5624               	.LCFI47:
 5625               		.cfi_def_cfa_offset 4
 5626               		.cfi_offset 9, -3
 5627 2724 AF92      		push r10
 5628               	.LCFI48:
 5629               		.cfi_def_cfa_offset 5
 5630               		.cfi_offset 10, -4
 5631 2726 BF92      		push r11
 5632               	.LCFI49:
 5633               		.cfi_def_cfa_offset 6
 5634               		.cfi_offset 11, -5
 5635 2728 CF92      		push r12
 5636               	.LCFI50:
 5637               		.cfi_def_cfa_offset 7
 5638               		.cfi_offset 12, -6
 5639 272a DF92      		push r13
 5640               	.LCFI51:
 5641               		.cfi_def_cfa_offset 8
 5642               		.cfi_offset 13, -7
 5643 272c EF92      		push r14
 5644               	.LCFI52:
 5645               		.cfi_def_cfa_offset 9
 5646               		.cfi_offset 14, -8
 5647 272e FF92      		push r15
 5648               	.LCFI53:
 5649               		.cfi_def_cfa_offset 10
 5650               		.cfi_offset 15, -9
 5651 2730 0F93      		push r16
 5652               	.LCFI54:
 5653               		.cfi_def_cfa_offset 11
 5654               		.cfi_offset 16, -10
 5655 2732 1F93      		push r17
 5656               	.LCFI55:
 5657               		.cfi_def_cfa_offset 12
 5658               		.cfi_offset 17, -11
 5659 2734 CF93      		push r28
 5660               	.LCFI56:
 5661               		.cfi_def_cfa_offset 13
 5662               		.cfi_offset 28, -12
 5663 2736 DF93      		push r29
 5664               	.LCFI57:
 5665               		.cfi_def_cfa_offset 14
 5666               		.cfi_offset 29, -13
 5667 2738 CDB7      		in r28,__SP_L__
 5668 273a DEB7      		in r29,__SP_H__
 5669               	.LCFI58:
 5670               		.cfi_def_cfa_register 28
 5671 273c 2997      		sbiw r28,9
 5672               	.LCFI59:
 5673               		.cfi_def_cfa_offset 23
 5674 273e 0FB6      		in __tmp_reg__,__SREG__
 5675 2740 F894      		cli
 5676 2742 DEBF      		out __SP_H__,r29
 5677 2744 0FBE      		out __SREG__,__tmp_reg__
 5678 2746 CDBF      		out __SP_L__,r28
 5679               	/* prologue: function */
 5680               	/* frame size = 9 */
 5681               	/* stack size = 21 */
 5682               	.L__stack_usage = 21
 5683 2748 9F83      		std Y+7,r25
 5684 274a 8E83      		std Y+6,r24
 639:lp_solve_5.5/lp_mipbb.c ****   int    k;
 640:lp_solve_5.5/lp_mipbb.c ****   lprec  *lp = BB->lp;
 5685               		.loc 1 640 0
 5686 274c 8E81      		ldd r24,Y+6
 5687 274e 9F81      		ldd r25,Y+7
 5688 2750 DC01      		movw r26,r24
 5689 2752 1496      		adiw r26,4
 5690 2754 8D91      		ld r24,X+
 5691 2756 9C91      		ld r25,X
 5692 2758 1597      		sbiw r26,4+1
 5693 275a 9B83      		std Y+3,r25
 5694 275c 8A83      		std Y+2,r24
 641:lp_solve_5.5/lp_mipbb.c ****   MYBOOL OKstatus = FALSE;
 5695               		.loc 1 641 0
 5696 275e 1982      		std Y+1,__zero_reg__
 642:lp_solve_5.5/lp_mipbb.c **** 
 643:lp_solve_5.5/lp_mipbb.c ****   /* Undo the most recently imposed B&B bounds using the data
 644:lp_solve_5.5/lp_mipbb.c ****      in the last level of change tracker; this code handles changes
 645:lp_solve_5.5/lp_mipbb.c ****      to both upper and lower bounds */
 646:lp_solve_5.5/lp_mipbb.c ****   if(BB->nodessolved > 0) {
 5697               		.loc 1 646 0
 5698 2760 8E81      		ldd r24,Y+6
 5699 2762 9F81      		ldd r25,Y+7
 5700 2764 FC01      		movw r30,r24
 5701 2766 8089      		ldd r24,Z+16
 5702 2768 9189      		ldd r25,Z+17
 5703 276a 1816      		cp __zero_reg__,r24
 5704 276c 1906      		cpc __zero_reg__,r25
 5705 276e 04F4      		brge .L242
 647:lp_solve_5.5/lp_mipbb.c ****       restoreUndoLadder(lp->bb_upperchange, BB->upbo);
 5706               		.loc 1 647 0
 5707 2770 8E81      		ldd r24,Y+6
 5708 2772 9F81      		ldd r25,Y+7
 5709 2774 DC01      		movw r26,r24
 5710 2776 9096      		adiw r26,32
 5711 2778 2D91      		ld r18,X+
 5712 277a 3C91      		ld r19,X
 5713 277c 9197      		sbiw r26,32+1
 5714 277e 8A81      		ldd r24,Y+2
 5715 2780 9B81      		ldd r25,Y+3
 5716 2782 865B      		subi r24,-74
 5717 2784 9C4F      		sbci r25,-4
 5718 2786 FC01      		movw r30,r24
 5719 2788 8081      		ld r24,Z
 5720 278a 9181      		ldd r25,Z+1
 5721 278c B901      		movw r22,r18
 5722 278e 0E94 0000 		call restoreUndoLadder
 648:lp_solve_5.5/lp_mipbb.c ****       restoreUndoLadder(lp->bb_lowerchange, BB->lowbo);
 5723               		.loc 1 648 0
 5724 2792 8E81      		ldd r24,Y+6
 5725 2794 9F81      		ldd r25,Y+7
 5726 2796 DC01      		movw r26,r24
 5727 2798 9296      		adiw r26,34
 5728 279a 2D91      		ld r18,X+
 5729 279c 3C91      		ld r19,X
 5730 279e 9397      		sbiw r26,34+1
 5731 27a0 8A81      		ldd r24,Y+2
 5732 27a2 9B81      		ldd r25,Y+3
 5733 27a4 845B      		subi r24,-76
 5734 27a6 9C4F      		sbci r25,-4
 5735 27a8 FC01      		movw r30,r24
 5736 27aa 8081      		ld r24,Z
 5737 27ac 9181      		ldd r25,Z+1
 5738 27ae B901      		movw r22,r18
 5739 27b0 0E94 0000 		call restoreUndoLadder
 5740               	.L242:
 649:lp_solve_5.5/lp_mipbb.c ****   }
 650:lp_solve_5.5/lp_mipbb.c **** 
 651:lp_solve_5.5/lp_mipbb.c ****   if(lp->bb_break || userabort(lp, MSG_MILPSTRATEGY)) {
 5741               		.loc 1 651 0
 5742 27b4 8A81      		ldd r24,Y+2
 5743 27b6 9B81      		ldd r25,Y+3
 5744 27b8 8B50      		subi r24,11
 5745 27ba 9D4F      		sbci r25,-3
 5746 27bc DC01      		movw r26,r24
 5747 27be 8C91      		ld r24,X
 5748 27c0 8823      		tst r24
 5749 27c2 01F4      		brne .L243
 5750               		.loc 1 651 0 is_stmt 0 discriminator 1
 5751 27c4 8A81      		ldd r24,Y+2
 5752 27c6 9B81      		ldd r25,Y+3
 5753 27c8 60E0      		ldi r22,0
 5754 27ca 74E0      		ldi r23,lo8(4)
 5755 27cc 0E94 0000 		call userabort
 5756 27d0 8823      		tst r24
 5757 27d2 01F0      		breq .L244
 5758               	.L243:
 652:lp_solve_5.5/lp_mipbb.c ****     /* Handle the special case of B&B restart;
 653:lp_solve_5.5/lp_mipbb.c ****        (typically used with the restart after pseudocost initialization) */
 654:lp_solve_5.5/lp_mipbb.c ****     if((lp->bb_level == 1) && (lp->bb_break == AUTOMATIC)) {
 5759               		.loc 1 654 0 is_stmt 1
 5760 27d4 8A81      		ldd r24,Y+2
 5761 27d6 9B81      		ldd r25,Y+3
 5762 27d8 805D      		subi r24,-48
 5763 27da 9C4F      		sbci r25,-4
 5764 27dc FC01      		movw r30,r24
 5765 27de 8081      		ld r24,Z
 5766 27e0 9181      		ldd r25,Z+1
 5767 27e2 0197      		sbiw r24,1
 5768 27e4 01F4      		brne .L245
 5769               		.loc 1 654 0 is_stmt 0 discriminator 1
 5770 27e6 8A81      		ldd r24,Y+2
 5771 27e8 9B81      		ldd r25,Y+3
 5772 27ea 8B50      		subi r24,11
 5773 27ec 9D4F      		sbci r25,-3
 5774 27ee DC01      		movw r26,r24
 5775 27f0 8C91      		ld r24,X
 5776 27f2 8230      		cpi r24,lo8(2)
 5777 27f4 01F4      		brne .L245
 655:lp_solve_5.5/lp_mipbb.c ****       lp->bb_break = FALSE;
 5778               		.loc 1 655 0 is_stmt 1
 5779 27f6 8A81      		ldd r24,Y+2
 5780 27f8 9B81      		ldd r25,Y+3
 5781 27fa 8B50      		subi r24,11
 5782 27fc 9D4F      		sbci r25,-3
 5783 27fe FC01      		movw r30,r24
 5784 2800 1082      		st Z,__zero_reg__
 656:lp_solve_5.5/lp_mipbb.c ****       OKstatus = TRUE;
 5785               		.loc 1 656 0
 5786 2802 81E0      		ldi r24,lo8(1)
 5787 2804 8983      		std Y+1,r24
 5788               	.L245:
 657:lp_solve_5.5/lp_mipbb.c ****     }
 658:lp_solve_5.5/lp_mipbb.c ****     return( OKstatus );
 5789               		.loc 1 658 0
 5790 2806 8981      		ldd r24,Y+1
 5791 2808 00C0      		rjmp .L246
 5792               	.L244:
 659:lp_solve_5.5/lp_mipbb.c ****   }
 660:lp_solve_5.5/lp_mipbb.c **** 
 661:lp_solve_5.5/lp_mipbb.c ****   if(BB->nodesleft > 0) {
 5793               		.loc 1 661 0
 5794 280a 8E81      		ldd r24,Y+6
 5795 280c 9F81      		ldd r25,Y+7
 5796 280e DC01      		movw r26,r24
 5797 2810 1E96      		adiw r26,14
 5798 2812 8D91      		ld r24,X+
 5799 2814 9C91      		ld r25,X
 5800 2816 1F97      		sbiw r26,14+1
 5801 2818 1816      		cp __zero_reg__,r24
 5802 281a 1906      		cpc __zero_reg__,r25
 5803 281c 04F0      		brlt .+2
 5804 281e 00C0      		rjmp .L247
 662:lp_solve_5.5/lp_mipbb.c **** 
 663:lp_solve_5.5/lp_mipbb.c ****     /* Step and update remaining branch count */
 664:lp_solve_5.5/lp_mipbb.c ****     k = BB->varno - lp->rows;
 5805               		.loc 1 664 0
 5806 2820 8E81      		ldd r24,Y+6
 5807 2822 9F81      		ldd r25,Y+7
 5808 2824 FC01      		movw r30,r24
 5809 2826 2681      		ldd r18,Z+6
 5810 2828 3781      		ldd r19,Z+7
 5811 282a 8A81      		ldd r24,Y+2
 5812 282c 9B81      		ldd r25,Y+3
 5813 282e 8651      		subi r24,22
 5814 2830 9E4F      		sbci r25,-2
 5815 2832 DC01      		movw r26,r24
 5816 2834 8D91      		ld r24,X+
 5817 2836 9C91      		ld r25,X
 5818 2838 F901      		movw r30,r18
 5819 283a E81B      		sub r30,r24
 5820 283c F90B      		sbc r31,r25
 5821 283e CF01      		movw r24,r30
 5822 2840 9D83      		std Y+5,r25
 5823 2842 8C83      		std Y+4,r24
 665:lp_solve_5.5/lp_mipbb.c ****     BB->isfloor = !BB->isfloor;
 5824               		.loc 1 665 0
 5825 2844 8E81      		ldd r24,Y+6
 5826 2846 9F81      		ldd r25,Y+7
 5827 2848 DC01      		movw r26,r24
 5828 284a D696      		adiw r26,54
 5829 284c 9C91      		ld r25,X
 5830 284e 81E0      		ldi r24,lo8(1)
 5831 2850 9923      		tst r25
 5832 2852 01F0      		breq .L248
 5833 2854 80E0      		ldi r24,0
 5834               	.L248:
 5835 2856 282F      		mov r18,r24
 5836 2858 8E81      		ldd r24,Y+6
 5837 285a 9F81      		ldd r25,Y+7
 5838 285c FC01      		movw r30,r24
 5839 285e 26AB      		std Z+54,r18
 666:lp_solve_5.5/lp_mipbb.c ****     BB->nodesleft--;
 5840               		.loc 1 666 0
 5841 2860 8E81      		ldd r24,Y+6
 5842 2862 9F81      		ldd r25,Y+7
 5843 2864 DC01      		movw r26,r24
 5844 2866 1E96      		adiw r26,14
 5845 2868 8D91      		ld r24,X+
 5846 286a 9C91      		ld r25,X
 5847 286c 1F97      		sbiw r26,14+1
 5848 286e 9C01      		movw r18,r24
 5849 2870 2150      		subi r18,1
 5850 2872 3109      		sbc r19,__zero_reg__
 5851 2874 8E81      		ldd r24,Y+6
 5852 2876 9F81      		ldd r25,Y+7
 5853 2878 FC01      		movw r30,r24
 5854 287a 3787      		std Z+15,r19
 5855 287c 2687      		std Z+14,r18
 667:lp_solve_5.5/lp_mipbb.c **** 
 668:lp_solve_5.5/lp_mipbb.c ****     /* Special SOS handling:
 669:lp_solve_5.5/lp_mipbb.c ****        1) Undo and set new marker for k,
 670:lp_solve_5.5/lp_mipbb.c ****        2) In case that previous branch was ceiling restore upper bounds of the
 671:lp_solve_5.5/lp_mipbb.c ****           non-k variables outside of the SOS window set to 0 */
 672:lp_solve_5.5/lp_mipbb.c ****     if(BB->isSOS && (BB->vartype != BB_INT)) {
 5856               		.loc 1 672 0
 5857 287e 8E81      		ldd r24,Y+6
 5858 2880 9F81      		ldd r25,Y+7
 5859 2882 DC01      		movw r26,r24
 5860 2884 D296      		adiw r26,50
 5861 2886 8C91      		ld r24,X
 5862 2888 8823      		tst r24
 5863 288a 01F4      		brne .+2
 5864 288c 00C0      		rjmp .L249
 5865               		.loc 1 672 0 is_stmt 0 discriminator 1
 5866 288e 8E81      		ldd r24,Y+6
 5867 2890 9F81      		ldd r25,Y+7
 5868 2892 FC01      		movw r30,r24
 5869 2894 8085      		ldd r24,Z+8
 5870 2896 9185      		ldd r25,Z+9
 5871 2898 0197      		sbiw r24,1
 5872 289a 01F4      		brne .+2
 5873 289c 00C0      		rjmp .L249
 673:lp_solve_5.5/lp_mipbb.c **** 
 674:lp_solve_5.5/lp_mipbb.c ****       /* First undo previous marker */
 675:lp_solve_5.5/lp_mipbb.c ****       if((BB->nodessolved > 0) || ((BB->nodessolved == 0) && (BB->nodesleft == 0))) {
 5874               		.loc 1 675 0 is_stmt 1
 5875 289e 8E81      		ldd r24,Y+6
 5876 28a0 9F81      		ldd r25,Y+7
 5877 28a2 DC01      		movw r26,r24
 5878 28a4 5096      		adiw r26,16
 5879 28a6 8D91      		ld r24,X+
 5880 28a8 9C91      		ld r25,X
 5881 28aa 5197      		sbiw r26,16+1
 5882 28ac 1816      		cp __zero_reg__,r24
 5883 28ae 1906      		cpc __zero_reg__,r25
 5884 28b0 04F0      		brlt .L250
 5885               		.loc 1 675 0 is_stmt 0 discriminator 1
 5886 28b2 8E81      		ldd r24,Y+6
 5887 28b4 9F81      		ldd r25,Y+7
 5888 28b6 FC01      		movw r30,r24
 5889 28b8 8089      		ldd r24,Z+16
 5890 28ba 9189      		ldd r25,Z+17
 5891 28bc 892B      		or r24,r25
 5892 28be 01F0      		breq .+2
 5893 28c0 00C0      		rjmp .L251
 5894               		.loc 1 675 0 discriminator 2
 5895 28c2 8E81      		ldd r24,Y+6
 5896 28c4 9F81      		ldd r25,Y+7
 5897 28c6 DC01      		movw r26,r24
 5898 28c8 1E96      		adiw r26,14
 5899 28ca 8D91      		ld r24,X+
 5900 28cc 9C91      		ld r25,X
 5901 28ce 1F97      		sbiw r26,14+1
 5902 28d0 892B      		or r24,r25
 5903 28d2 01F0      		breq .+2
 5904 28d4 00C0      		rjmp .L251
 5905               	.L250:
 676:lp_solve_5.5/lp_mipbb.c ****         if(BB->isfloor) {
 5906               		.loc 1 676 0 is_stmt 1
 5907 28d6 8E81      		ldd r24,Y+6
 5908 28d8 9F81      		ldd r25,Y+7
 5909 28da FC01      		movw r30,r24
 5910 28dc 86A9      		ldd r24,Z+54
 5911 28de 8823      		tst r24
 5912 28e0 01F0      		breq .L252
 677:lp_solve_5.5/lp_mipbb.c ****           if((BB->nodesleft == 0) && (lp->orig_lowbo[BB->varno] != 0))
 5913               		.loc 1 677 0
 5914 28e2 8E81      		ldd r24,Y+6
 5915 28e4 9F81      		ldd r25,Y+7
 5916 28e6 DC01      		movw r26,r24
 5917 28e8 1E96      		adiw r26,14
 5918 28ea 8D91      		ld r24,X+
 5919 28ec 9C91      		ld r25,X
 5920 28ee 1F97      		sbiw r26,14+1
 5921 28f0 892B      		or r24,r25
 5922 28f2 01F4      		brne .L252
 5923               		.loc 1 677 0 is_stmt 0 discriminator 1
 5924 28f4 8A81      		ldd r24,Y+2
 5925 28f6 9B81      		ldd r25,Y+3
 5926 28f8 8E54      		subi r24,78
 5927 28fa 9D4F      		sbci r25,-3
 5928 28fc FC01      		movw r30,r24
 5929 28fe 2081      		ld r18,Z
 5930 2900 3181      		ldd r19,Z+1
 5931 2902 8E81      		ldd r24,Y+6
 5932 2904 9F81      		ldd r25,Y+7
 5933 2906 DC01      		movw r26,r24
 5934 2908 1696      		adiw r26,6
 5935 290a 8D91      		ld r24,X+
 5936 290c 9C91      		ld r25,X
 5937 290e 1797      		sbiw r26,6+1
 5938 2910 880F      		lsl r24
 5939 2912 991F      		rol r25
 5940 2914 880F      		lsl r24
 5941 2916 991F      		rol r25
 5942 2918 820F      		add r24,r18
 5943 291a 931F      		adc r25,r19
 5944 291c FC01      		movw r30,r24
 5945 291e 8081      		ld r24,Z
 5946 2920 9181      		ldd r25,Z+1
 5947 2922 A281      		ldd r26,Z+2
 5948 2924 B381      		ldd r27,Z+3
 5949 2926 20E0      		ldi r18,0
 5950 2928 30E0      		ldi r19,0
 5951 292a A901      		movw r20,r18
 5952 292c BC01      		movw r22,r24
 5953 292e CD01      		movw r24,r26
 5954 2930 0E94 0000 		call __nesf2
 5955 2934 8823      		tst r24
 5956 2936 01F0      		breq .L252
 678:lp_solve_5.5/lp_mipbb.c ****             return( OKstatus );
 5957               		.loc 1 678 0 is_stmt 1
 5958 2938 8981      		ldd r24,Y+1
 5959 293a 00C0      		rjmp .L246
 5960               	.L252:
 679:lp_solve_5.5/lp_mipbb.c ****         }
 680:lp_solve_5.5/lp_mipbb.c ****         SOS_unmark(lp->SOS, 0, k);
 5961               		.loc 1 680 0
 5962 293c 8A81      		ldd r24,Y+2
 5963 293e 9B81      		ldd r25,Y+3
 5964 2940 8256      		subi r24,98
 5965 2942 9D4F      		sbci r25,-3
 5966 2944 DC01      		movw r26,r24
 5967 2946 8D91      		ld r24,X+
 5968 2948 9C91      		ld r25,X
 5969 294a 2C81      		ldd r18,Y+4
 5970 294c 3D81      		ldd r19,Y+5
 5971 294e A901      		movw r20,r18
 5972 2950 60E0      		ldi r22,0
 5973 2952 70E0      		ldi r23,0
 5974 2954 0E94 0000 		call SOS_unmark
 5975               	.L251:
 681:lp_solve_5.5/lp_mipbb.c ****       }
 682:lp_solve_5.5/lp_mipbb.c **** 
 683:lp_solve_5.5/lp_mipbb.c ****       /* Set new SOS marker */
 684:lp_solve_5.5/lp_mipbb.c ****       if(BB->isfloor) {
 5976               		.loc 1 684 0
 5977 2958 8E81      		ldd r24,Y+6
 5978 295a 9F81      		ldd r25,Y+7
 5979 295c FC01      		movw r30,r24
 5980 295e 86A9      		ldd r24,Z+54
 5981 2960 8823      		tst r24
 5982 2962 01F0      		breq .L254
 685:lp_solve_5.5/lp_mipbb.c ****         SOS_set_marked(lp->SOS, 0, k, (MYBOOL) (BB->UPbound != 0));
 5983               		.loc 1 685 0
 5984 2964 8E81      		ldd r24,Y+6
 5985 2966 9F81      		ldd r25,Y+7
 5986 2968 FC01      		movw r30,r24
 5987 296a 84A1      		ldd r24,Z+36
 5988 296c 95A1      		ldd r25,Z+37
 5989 296e A6A1      		ldd r26,Z+38
 5990 2970 B7A1      		ldd r27,Z+39
 5991 2972 11E0      		ldi r17,lo8(1)
 5992 2974 20E0      		ldi r18,0
 5993 2976 30E0      		ldi r19,0
 5994 2978 A901      		movw r20,r18
 5995 297a BC01      		movw r22,r24
 5996 297c CD01      		movw r24,r26
 5997 297e 0E94 0000 		call __nesf2
 5998 2982 8823      		tst r24
 5999 2984 01F4      		brne .L255
 6000 2986 10E0      		ldi r17,0
 6001               	.L255:
 6002 2988 212F      		mov r18,r17
 6003 298a 8A81      		ldd r24,Y+2
 6004 298c 9B81      		ldd r25,Y+3
 6005 298e 8256      		subi r24,98
 6006 2990 9D4F      		sbci r25,-3
 6007 2992 DC01      		movw r26,r24
 6008 2994 8D91      		ld r24,X+
 6009 2996 9C91      		ld r25,X
 6010 2998 4C81      		ldd r20,Y+4
 6011 299a 5D81      		ldd r21,Y+5
 6012 299c 60E0      		ldi r22,0
 6013 299e 70E0      		ldi r23,0
 6014 29a0 0E94 0000 		call SOS_set_marked
 684:lp_solve_5.5/lp_mipbb.c ****         SOS_set_marked(lp->SOS, 0, k, (MYBOOL) (BB->UPbound != 0));
 6015               		.loc 1 684 0
 6016 29a4 00C0      		rjmp .L266
 6017               	.L254:
 686:lp_solve_5.5/lp_mipbb.c ****         /* Do case of high-order SOS where intervening variables need to be set */
 687:lp_solve_5.5/lp_mipbb.c ****         if(BB->isSOS == AUTOMATIC) {
 688:lp_solve_5.5/lp_mipbb.c **** 
 689:lp_solve_5.5/lp_mipbb.c **** /*          SOS_fix_list(lp->SOS, 0, k, BB->lowbo, NULL, AUTOMATIC, lp->bb_lowerchange); */
 690:lp_solve_5.5/lp_mipbb.c ****         }
 691:lp_solve_5.5/lp_mipbb.c ****       }
 692:lp_solve_5.5/lp_mipbb.c ****       else {
 693:lp_solve_5.5/lp_mipbb.c ****         SOS_set_marked(lp->SOS, 0, k, TRUE);
 6018               		.loc 1 693 0
 6019 29a6 8A81      		ldd r24,Y+2
 6020 29a8 9B81      		ldd r25,Y+3
 6021 29aa 8256      		subi r24,98
 6022 29ac 9D4F      		sbci r25,-3
 6023 29ae FC01      		movw r30,r24
 6024 29b0 8081      		ld r24,Z
 6025 29b2 9181      		ldd r25,Z+1
 6026 29b4 4C81      		ldd r20,Y+4
 6027 29b6 5D81      		ldd r21,Y+5
 6028 29b8 21E0      		ldi r18,lo8(1)
 6029 29ba 60E0      		ldi r22,0
 6030 29bc 70E0      		ldi r23,0
 6031 29be 0E94 0000 		call SOS_set_marked
 694:lp_solve_5.5/lp_mipbb.c ****         if(SOS_fix_unmarked(lp->SOS, 0, k, BB->upbo, 0, TRUE,
 6032               		.loc 1 694 0
 6033 29c2 8A81      		ldd r24,Y+2
 6034 29c4 9B81      		ldd r25,Y+3
 6035 29c6 865B      		subi r24,-74
 6036 29c8 9C4F      		sbci r25,-4
 6037 29ca DC01      		movw r26,r24
 6038 29cc 6D91      		ld r22,X+
 6039 29ce 7C91      		ld r23,X
 6040 29d0 8E81      		ldd r24,Y+6
 6041 29d2 9F81      		ldd r25,Y+7
 6042 29d4 FC01      		movw r30,r24
 6043 29d6 20A1      		ldd r18,Z+32
 6044 29d8 31A1      		ldd r19,Z+33
 6045 29da 8A81      		ldd r24,Y+2
 6046 29dc 9B81      		ldd r25,Y+3
 6047 29de 8256      		subi r24,98
 6048 29e0 9D4F      		sbci r25,-3
 6049 29e2 DC01      		movw r26,r24
 6050 29e4 8D91      		ld r24,X+
 6051 29e6 9C91      		ld r25,X
 6052 29e8 4C81      		ldd r20,Y+4
 6053 29ea 5D81      		ldd r21,Y+5
 6054 29ec 4B01      		movw r8,r22
 6055 29ee A12C      		mov r10,__zero_reg__
 6056 29f0 B12C      		mov r11,__zero_reg__
 6057 29f2 CC24      		clr r12
 6058 29f4 C394      		inc r12
 6059 29f6 E12C      		mov r14,__zero_reg__
 6060 29f8 F12C      		mov r15,__zero_reg__
 6061 29fa 8701      		movw r16,r14
 6062 29fc 60E0      		ldi r22,0
 6063 29fe 70E0      		ldi r23,0
 6064 2a00 0E94 0000 		call SOS_fix_unmarked
 6065 2a04 9923      		tst r25
 6066 2a06 04F0      		brlt .+2
 6067 2a08 00C0      		rjmp .L266
 695:lp_solve_5.5/lp_mipbb.c ****                             NULL, lp->bb_upperchange) < 0)
 696:lp_solve_5.5/lp_mipbb.c ****           return( OKstatus );
 6068               		.loc 1 696 0
 6069 2a0a 8981      		ldd r24,Y+1
 6070 2a0c 00C0      		rjmp .L246
 6071               	.L249:
 697:lp_solve_5.5/lp_mipbb.c ****       }
 698:lp_solve_5.5/lp_mipbb.c ****     }
 699:lp_solve_5.5/lp_mipbb.c **** 
 700:lp_solve_5.5/lp_mipbb.c ****     /* Special GUB handling (three branches):
 701:lp_solve_5.5/lp_mipbb.c ****        1) Undo and set new marker for k,
 702:lp_solve_5.5/lp_mipbb.c ****        2) Restore upper bounds of the left/right/all non-k variables
 703:lp_solve_5.5/lp_mipbb.c ****           set to 0 in the previous branch
 704:lp_solve_5.5/lp_mipbb.c ****        3) Set new upper bounds for the non-k variables (k is set later) */
 705:lp_solve_5.5/lp_mipbb.c ****     else if(BB->isGUB) {
 6072               		.loc 1 705 0
 6073 2a0e 8E81      		ldd r24,Y+6
 6074 2a10 9F81      		ldd r25,Y+7
 6075 2a12 FC01      		movw r30,r24
 6076 2a14 83A9      		ldd r24,Z+51
 6077 2a16 8823      		tst r24
 6078 2a18 01F4      		brne .+2
 6079 2a1a 00C0      		rjmp .L257
 706:lp_solve_5.5/lp_mipbb.c **** 
 707:lp_solve_5.5/lp_mipbb.c ****       /* First undo previous marker */
 708:lp_solve_5.5/lp_mipbb.c ****       if(BB->nodessolved > 0)
 6080               		.loc 1 708 0
 6081 2a1c 8E81      		ldd r24,Y+6
 6082 2a1e 9F81      		ldd r25,Y+7
 6083 2a20 DC01      		movw r26,r24
 6084 2a22 5096      		adiw r26,16
 6085 2a24 8D91      		ld r24,X+
 6086 2a26 9C91      		ld r25,X
 6087 2a28 5197      		sbiw r26,16+1
 6088 2a2a 1816      		cp __zero_reg__,r24
 6089 2a2c 1906      		cpc __zero_reg__,r25
 6090 2a2e 04F4      		brge .L258
 709:lp_solve_5.5/lp_mipbb.c ****         SOS_unmark(lp->GUB, 0, k);
 6091               		.loc 1 709 0
 6092 2a30 8A81      		ldd r24,Y+2
 6093 2a32 9B81      		ldd r25,Y+3
 6094 2a34 8856      		subi r24,104
 6095 2a36 9D4F      		sbci r25,-3
 6096 2a38 FC01      		movw r30,r24
 6097 2a3a 8081      		ld r24,Z
 6098 2a3c 9181      		ldd r25,Z+1
 6099 2a3e 2C81      		ldd r18,Y+4
 6100 2a40 3D81      		ldd r19,Y+5
 6101 2a42 A901      		movw r20,r18
 6102 2a44 60E0      		ldi r22,0
 6103 2a46 70E0      		ldi r23,0
 6104 2a48 0E94 0000 		call SOS_unmark
 6105               	.L258:
 710:lp_solve_5.5/lp_mipbb.c **** 
 711:lp_solve_5.5/lp_mipbb.c ****       /* Make sure we take floor bound twice */
 712:lp_solve_5.5/lp_mipbb.c ****       if((BB->nodesleft == 0) && !BB->isfloor)
 6106               		.loc 1 712 0
 6107 2a4c 8E81      		ldd r24,Y+6
 6108 2a4e 9F81      		ldd r25,Y+7
 6109 2a50 DC01      		movw r26,r24
 6110 2a52 1E96      		adiw r26,14
 6111 2a54 8D91      		ld r24,X+
 6112 2a56 9C91      		ld r25,X
 6113 2a58 1F97      		sbiw r26,14+1
 6114 2a5a 892B      		or r24,r25
 6115 2a5c 01F4      		brne .L259
 6116               		.loc 1 712 0 is_stmt 0 discriminator 1
 6117 2a5e 8E81      		ldd r24,Y+6
 6118 2a60 9F81      		ldd r25,Y+7
 6119 2a62 FC01      		movw r30,r24
 6120 2a64 86A9      		ldd r24,Z+54
 6121 2a66 8823      		tst r24
 6122 2a68 01F4      		brne .L259
 713:lp_solve_5.5/lp_mipbb.c ****         BB->isfloor = !BB->isfloor;
 6123               		.loc 1 713 0 is_stmt 1
 6124 2a6a 8E81      		ldd r24,Y+6
 6125 2a6c 9F81      		ldd r25,Y+7
 6126 2a6e DC01      		movw r26,r24
 6127 2a70 D696      		adiw r26,54
 6128 2a72 9C91      		ld r25,X
 6129 2a74 81E0      		ldi r24,lo8(1)
 6130 2a76 9923      		tst r25
 6131 2a78 01F0      		breq .L260
 6132 2a7a 80E0      		ldi r24,0
 6133               	.L260:
 6134 2a7c 282F      		mov r18,r24
 6135 2a7e 8E81      		ldd r24,Y+6
 6136 2a80 9F81      		ldd r25,Y+7
 6137 2a82 FC01      		movw r30,r24
 6138 2a84 26AB      		std Z+54,r18
 6139               	.L259:
 714:lp_solve_5.5/lp_mipbb.c **** 
 715:lp_solve_5.5/lp_mipbb.c ****       /* Handle two floor instances;
 716:lp_solve_5.5/lp_mipbb.c ****          (selected variable and left/right halves of non-selected variables at 0) */
 717:lp_solve_5.5/lp_mipbb.c ****       SOS_set_marked(lp->GUB, 0, k, (MYBOOL) !BB->isfloor);
 6140               		.loc 1 717 0
 6141 2a86 8E81      		ldd r24,Y+6
 6142 2a88 9F81      		ldd r25,Y+7
 6143 2a8a DC01      		movw r26,r24
 6144 2a8c D696      		adiw r26,54
 6145 2a8e 9C91      		ld r25,X
 6146 2a90 81E0      		ldi r24,lo8(1)
 6147 2a92 9923      		tst r25
 6148 2a94 01F0      		breq .L261
 6149 2a96 80E0      		ldi r24,0
 6150               	.L261:
 6151 2a98 282F      		mov r18,r24
 6152 2a9a 8A81      		ldd r24,Y+2
 6153 2a9c 9B81      		ldd r25,Y+3
 6154 2a9e 8856      		subi r24,104
 6155 2aa0 9D4F      		sbci r25,-3
 6156 2aa2 FC01      		movw r30,r24
 6157 2aa4 8081      		ld r24,Z
 6158 2aa6 9181      		ldd r25,Z+1
 6159 2aa8 4C81      		ldd r20,Y+4
 6160 2aaa 5D81      		ldd r21,Y+5
 6161 2aac 60E0      		ldi r22,0
 6162 2aae 70E0      		ldi r23,0
 6163 2ab0 0E94 0000 		call SOS_set_marked
 718:lp_solve_5.5/lp_mipbb.c ****       if(BB->isfloor) {
 6164               		.loc 1 718 0
 6165 2ab4 8E81      		ldd r24,Y+6
 6166 2ab6 9F81      		ldd r25,Y+7
 6167 2ab8 DC01      		movw r26,r24
 6168 2aba D696      		adiw r26,54
 6169 2abc 8C91      		ld r24,X
 6170 2abe 8823      		tst r24
 6171 2ac0 01F0      		breq .L262
 719:lp_solve_5.5/lp_mipbb.c ****         if(SOS_fix_list(lp->GUB, 0, k, BB->upbo,
 6172               		.loc 1 719 0
 6173 2ac2 8A81      		ldd r24,Y+2
 6174 2ac4 9B81      		ldd r25,Y+3
 6175 2ac6 865B      		subi r24,-74
 6176 2ac8 9C4F      		sbci r25,-4
 6177 2aca FC01      		movw r30,r24
 6178 2acc 0190      		ld __tmp_reg__,Z+
 6179 2ace F081      		ld r31,Z
 6180 2ad0 E02D      		mov r30,__tmp_reg__
 6181 2ad2 F987      		std Y+9,r31
 6182 2ad4 E887      		std Y+8,r30
 720:lp_solve_5.5/lp_mipbb.c ****                         BB->varmanaged, (MYBOOL) (BB->nodesleft > 0), lp->bb_upperchange) < 0)
 6183               		.loc 1 720 0
 6184 2ad6 8E81      		ldd r24,Y+6
 6185 2ad8 9F81      		ldd r25,Y+7
 6186 2ada DC01      		movw r26,r24
 6187 2adc 1E96      		adiw r26,14
 6188 2ade 8D91      		ld r24,X+
 6189 2ae0 9C91      		ld r25,X
 6190 2ae2 1F97      		sbiw r26,14+1
 719:lp_solve_5.5/lp_mipbb.c ****         if(SOS_fix_list(lp->GUB, 0, k, BB->upbo,
 6191               		.loc 1 719 0
 6192 2ae4 21E0      		ldi r18,lo8(1)
 6193 2ae6 1816      		cp __zero_reg__,r24
 6194 2ae8 1906      		cpc __zero_reg__,r25
 6195 2aea 04F0      		brlt .L263
 6196 2aec 20E0      		ldi r18,0
 6197               	.L263:
 6198 2aee A22F      		mov r26,r18
 6199 2af0 8E81      		ldd r24,Y+6
 6200 2af2 9F81      		ldd r25,Y+7
 6201 2af4 FC01      		movw r30,r24
 6202 2af6 64A9      		ldd r22,Z+52
 6203 2af8 75A9      		ldd r23,Z+53
 6204 2afa 8E81      		ldd r24,Y+6
 6205 2afc 9F81      		ldd r25,Y+7
 6206 2afe FC01      		movw r30,r24
 6207 2b00 20A1      		ldd r18,Z+32
 6208 2b02 31A1      		ldd r19,Z+33
 6209 2b04 8A81      		ldd r24,Y+2
 6210 2b06 9B81      		ldd r25,Y+3
 6211 2b08 8856      		subi r24,104
 6212 2b0a 9D4F      		sbci r25,-3
 6213 2b0c FC01      		movw r30,r24
 6214 2b0e 8081      		ld r24,Z
 6215 2b10 9181      		ldd r25,Z+1
 6216 2b12 4C81      		ldd r20,Y+4
 6217 2b14 5D81      		ldd r21,Y+5
 6218 2b16 C884      		ldd r12,Y+8
 6219 2b18 D984      		ldd r13,Y+9
 6220 2b1a EA2E      		mov r14,r26
 6221 2b1c 8B01      		movw r16,r22
 6222 2b1e 60E0      		ldi r22,0
 6223 2b20 70E0      		ldi r23,0
 6224 2b22 0E94 0000 		call SOS_fix_list
 6225 2b26 9923      		tst r25
 6226 2b28 04F4      		brge .L257
 721:lp_solve_5.5/lp_mipbb.c ****           return( OKstatus );
 6227               		.loc 1 721 0
 6228 2b2a 8981      		ldd r24,Y+1
 6229 2b2c 00C0      		rjmp .L246
 6230               	.L262:
 722:lp_solve_5.5/lp_mipbb.c ****       }
 723:lp_solve_5.5/lp_mipbb.c ****       /* Handle one ceil instance;
 724:lp_solve_5.5/lp_mipbb.c ****          (selected variable at 1, all other at 0) */
 725:lp_solve_5.5/lp_mipbb.c ****       else {
 726:lp_solve_5.5/lp_mipbb.c ****         if(SOS_fix_unmarked(lp->GUB, 0, k, BB->upbo, 0, TRUE,
 6231               		.loc 1 726 0
 6232 2b2e 8A81      		ldd r24,Y+2
 6233 2b30 9B81      		ldd r25,Y+3
 6234 2b32 865B      		subi r24,-74
 6235 2b34 9C4F      		sbci r25,-4
 6236 2b36 DC01      		movw r26,r24
 6237 2b38 6D91      		ld r22,X+
 6238 2b3a 7C91      		ld r23,X
 6239 2b3c 8E81      		ldd r24,Y+6
 6240 2b3e 9F81      		ldd r25,Y+7
 6241 2b40 FC01      		movw r30,r24
 6242 2b42 20A1      		ldd r18,Z+32
 6243 2b44 31A1      		ldd r19,Z+33
 6244 2b46 8A81      		ldd r24,Y+2
 6245 2b48 9B81      		ldd r25,Y+3
 6246 2b4a 8856      		subi r24,104
 6247 2b4c 9D4F      		sbci r25,-3
 6248 2b4e DC01      		movw r26,r24
 6249 2b50 8D91      		ld r24,X+
 6250 2b52 9C91      		ld r25,X
 6251 2b54 4C81      		ldd r20,Y+4
 6252 2b56 5D81      		ldd r21,Y+5
 6253 2b58 4B01      		movw r8,r22
 6254 2b5a A12C      		mov r10,__zero_reg__
 6255 2b5c B12C      		mov r11,__zero_reg__
 6256 2b5e CC24      		clr r12
 6257 2b60 C394      		inc r12
 6258 2b62 E12C      		mov r14,__zero_reg__
 6259 2b64 F12C      		mov r15,__zero_reg__
 6260 2b66 8701      		movw r16,r14
 6261 2b68 60E0      		ldi r22,0
 6262 2b6a 70E0      		ldi r23,0
 6263 2b6c 0E94 0000 		call SOS_fix_unmarked
 6264 2b70 9923      		tst r25
 6265 2b72 04F4      		brge .L257
 727:lp_solve_5.5/lp_mipbb.c ****                             NULL, lp->bb_upperchange) < 0)
 728:lp_solve_5.5/lp_mipbb.c ****           return( OKstatus );
 6266               		.loc 1 728 0
 6267 2b74 8981      		ldd r24,Y+1
 6268 2b76 00C0      		rjmp .L246
 6269               	.L266:
 684:lp_solve_5.5/lp_mipbb.c ****         SOS_set_marked(lp->SOS, 0, k, (MYBOOL) (BB->UPbound != 0));
 6270               		.loc 1 684 0
 6271 2b78 0000      		nop
 6272               	.L257:
 729:lp_solve_5.5/lp_mipbb.c ****       }
 730:lp_solve_5.5/lp_mipbb.c ****     }
 731:lp_solve_5.5/lp_mipbb.c **** 
 732:lp_solve_5.5/lp_mipbb.c ****     OKstatus = TRUE;
 6273               		.loc 1 732 0
 6274 2b7a 81E0      		ldi r24,lo8(1)
 6275 2b7c 8983      		std Y+1,r24
 6276               	.L247:
 733:lp_solve_5.5/lp_mipbb.c **** 
 734:lp_solve_5.5/lp_mipbb.c ****   }
 735:lp_solve_5.5/lp_mipbb.c ****   /* Initialize simplex status variables */
 736:lp_solve_5.5/lp_mipbb.c ****   if(OKstatus) {
 6277               		.loc 1 736 0
 6278 2b7e 8981      		ldd r24,Y+1
 6279 2b80 8823      		tst r24
 6280 2b82 01F4      		brne .+2
 6281 2b84 00C0      		rjmp .L264
 737:lp_solve_5.5/lp_mipbb.c ****     lp->bb_totalnodes++;
 6282               		.loc 1 737 0
 6283 2b86 8A81      		ldd r24,Y+2
 6284 2b88 9B81      		ldd r25,Y+3
 6285 2b8a 8A5C      		subi r24,-54
 6286 2b8c 9C4F      		sbci r25,-4
 6287 2b8e FC01      		movw r30,r24
 6288 2b90 A080      		ld r10,Z
 6289 2b92 DC01      		movw r26,r24
 6290 2b94 1196      		adiw r26,1
 6291 2b96 BC90      		ld r11,X
 6292 2b98 FC01      		movw r30,r24
 6293 2b9a C280      		ldd r12,Z+2
 6294 2b9c DC01      		movw r26,r24
 6295 2b9e 1396      		adiw r26,3
 6296 2ba0 DC90      		ld r13,X
 6297 2ba2 FC01      		movw r30,r24
 6298 2ba4 E480      		ldd r14,Z+4
 6299 2ba6 DC01      		movw r26,r24
 6300 2ba8 1596      		adiw r26,5
 6301 2baa FC90      		ld r15,X
 6302 2bac FC01      		movw r30,r24
 6303 2bae 0681      		ldd r16,Z+6
 6304 2bb0 DC01      		movw r26,r24
 6305 2bb2 1796      		adiw r26,7
 6306 2bb4 1C91      		ld r17,X
 6307 2bb6 2A2D      		mov r18,r10
 6308 2bb8 3B2D      		mov r19,r11
 6309 2bba 4C2D      		mov r20,r12
 6310 2bbc 5D2D      		mov r21,r13
 6311 2bbe 6E2D      		mov r22,r14
 6312 2bc0 7F2D      		mov r23,r15
 6313 2bc2 802F      		mov r24,r16
 6314 2bc4 912F      		mov r25,r17
 6315 2bc6 A1E0      		ldi r26,lo8(1)
 6316 2bc8 0E94 0000 		call __adddi3_s8
 6317 2bcc A22E      		mov r10,r18
 6318 2bce B32E      		mov r11,r19
 6319 2bd0 C42E      		mov r12,r20
 6320 2bd2 D52E      		mov r13,r21
 6321 2bd4 E62E      		mov r14,r22
 6322 2bd6 F72E      		mov r15,r23
 6323 2bd8 082F      		mov r16,r24
 6324 2bda 192F      		mov r17,r25
 6325 2bdc 8A81      		ldd r24,Y+2
 6326 2bde 9B81      		ldd r25,Y+3
 6327 2be0 8A5C      		subi r24,-54
 6328 2be2 9C4F      		sbci r25,-4
 6329 2be4 FC01      		movw r30,r24
 6330 2be6 A082      		st Z,r10
 6331 2be8 DC01      		movw r26,r24
 6332 2bea 1196      		adiw r26,1
 6333 2bec BC92      		st X,r11
 6334 2bee FC01      		movw r30,r24
 6335 2bf0 C282      		std Z+2,r12
 6336 2bf2 DC01      		movw r26,r24
 6337 2bf4 1396      		adiw r26,3
 6338 2bf6 DC92      		st X,r13
 6339 2bf8 FC01      		movw r30,r24
 6340 2bfa E482      		std Z+4,r14
 6341 2bfc DC01      		movw r26,r24
 6342 2bfe 1596      		adiw r26,5
 6343 2c00 FC92      		st X,r15
 6344 2c02 FC01      		movw r30,r24
 6345 2c04 0683      		std Z+6,r16
 6346 2c06 DC01      		movw r26,r24
 6347 2c08 1796      		adiw r26,7
 6348 2c0a 1C93      		st X,r17
 738:lp_solve_5.5/lp_mipbb.c ****     BB->nodestatus = NOTRUN;
 6349               		.loc 1 738 0
 6350 2c0c 8E81      		ldd r24,Y+6
 6351 2c0e 9F81      		ldd r25,Y+7
 6352 2c10 2FEF      		ldi r18,lo8(-1)
 6353 2c12 3FEF      		ldi r19,lo8(-1)
 6354 2c14 FC01      		movw r30,r24
 6355 2c16 338B      		std Z+19,r19
 6356 2c18 228B      		std Z+18,r18
 739:lp_solve_5.5/lp_mipbb.c ****     BB->noderesult = lp->infinite;
 6357               		.loc 1 739 0
 6358 2c1a 8A81      		ldd r24,Y+2
 6359 2c1c 9B81      		ldd r25,Y+3
 6360 2c1e 865F      		subi r24,-10
 6361 2c20 9C4F      		sbci r25,-4
 6362 2c22 FC01      		movw r30,r24
 6363 2c24 8081      		ld r24,Z
 6364 2c26 9181      		ldd r25,Z+1
 6365 2c28 A281      		ldd r26,Z+2
 6366 2c2a B381      		ldd r27,Z+3
 6367 2c2c 2E81      		ldd r18,Y+6
 6368 2c2e 3F81      		ldd r19,Y+7
 6369 2c30 F901      		movw r30,r18
 6370 2c32 848B      		std Z+20,r24
 6371 2c34 958B      		std Z+21,r25
 6372 2c36 A68B      		std Z+22,r26
 6373 2c38 B78B      		std Z+23,r27
 6374               	.L264:
 740:lp_solve_5.5/lp_mipbb.c ****   }
 741:lp_solve_5.5/lp_mipbb.c ****   return( OKstatus );
 6375               		.loc 1 741 0
 6376 2c3a 8981      		ldd r24,Y+1
 6377               	.L246:
 6378               	/* epilogue start */
 742:lp_solve_5.5/lp_mipbb.c **** }
 6379               		.loc 1 742 0
 6380 2c3c 2996      		adiw r28,9
 6381 2c3e 0FB6      		in __tmp_reg__,__SREG__
 6382 2c40 F894      		cli
 6383 2c42 DEBF      		out __SP_H__,r29
 6384 2c44 0FBE      		out __SREG__,__tmp_reg__
 6385 2c46 CDBF      		out __SP_L__,r28
 6386 2c48 DF91      		pop r29
 6387 2c4a CF91      		pop r28
 6388 2c4c 1F91      		pop r17
 6389 2c4e 0F91      		pop r16
 6390 2c50 FF90      		pop r15
 6391 2c52 EF90      		pop r14
 6392 2c54 DF90      		pop r13
 6393 2c56 CF90      		pop r12
 6394 2c58 BF90      		pop r11
 6395 2c5a AF90      		pop r10
 6396 2c5c 9F90      		pop r9
 6397 2c5e 8F90      		pop r8
 6398 2c60 0895      		ret
 6399               		.cfi_endproc
 6400               	.LFE15:
 6402               	.global	initcuts_BB
 6404               	initcuts_BB:
 6405               	.LFB16:
 743:lp_solve_5.5/lp_mipbb.c **** 
 744:lp_solve_5.5/lp_mipbb.c **** 
 745:lp_solve_5.5/lp_mipbb.c **** /* Cut generation and management routines */
 746:lp_solve_5.5/lp_mipbb.c **** STATIC MYBOOL initcuts_BB(lprec *lp)
 747:lp_solve_5.5/lp_mipbb.c **** {
 6406               		.loc 1 747 0
 6407               		.cfi_startproc
 6408 2c62 CF93      		push r28
 6409               	.LCFI60:
 6410               		.cfi_def_cfa_offset 3
 6411               		.cfi_offset 28, -2
 6412 2c64 DF93      		push r29
 6413               	.LCFI61:
 6414               		.cfi_def_cfa_offset 4
 6415               		.cfi_offset 29, -3
 6416 2c66 00D0      		rcall .
 6417               	.LCFI62:
 6418               		.cfi_def_cfa_offset 6
 6419 2c68 CDB7      		in r28,__SP_L__
 6420 2c6a DEB7      		in r29,__SP_H__
 6421               	.LCFI63:
 6422               		.cfi_def_cfa_register 28
 6423               	/* prologue: function */
 6424               	/* frame size = 2 */
 6425               	/* stack size = 4 */
 6426               	.L__stack_usage = 4
 6427 2c6c 9A83      		std Y+2,r25
 6428 2c6e 8983      		std Y+1,r24
 748:lp_solve_5.5/lp_mipbb.c ****   return( TRUE );
 6429               		.loc 1 748 0
 6430 2c70 81E0      		ldi r24,lo8(1)
 6431               	/* epilogue start */
 749:lp_solve_5.5/lp_mipbb.c **** }
 6432               		.loc 1 749 0
 6433 2c72 0F90      		pop __tmp_reg__
 6434 2c74 0F90      		pop __tmp_reg__
 6435 2c76 DF91      		pop r29
 6436 2c78 CF91      		pop r28
 6437 2c7a 0895      		ret
 6438               		.cfi_endproc
 6439               	.LFE16:
 6441               	.global	updatecuts_BB
 6443               	updatecuts_BB:
 6444               	.LFB17:
 750:lp_solve_5.5/lp_mipbb.c **** 
 751:lp_solve_5.5/lp_mipbb.c **** STATIC int updatecuts_BB(lprec *lp)
 752:lp_solve_5.5/lp_mipbb.c **** {
 6445               		.loc 1 752 0
 6446               		.cfi_startproc
 6447 2c7c CF93      		push r28
 6448               	.LCFI64:
 6449               		.cfi_def_cfa_offset 3
 6450               		.cfi_offset 28, -2
 6451 2c7e DF93      		push r29
 6452               	.LCFI65:
 6453               		.cfi_def_cfa_offset 4
 6454               		.cfi_offset 29, -3
 6455 2c80 00D0      		rcall .
 6456               	.LCFI66:
 6457               		.cfi_def_cfa_offset 6
 6458 2c82 CDB7      		in r28,__SP_L__
 6459 2c84 DEB7      		in r29,__SP_H__
 6460               	.LCFI67:
 6461               		.cfi_def_cfa_register 28
 6462               	/* prologue: function */
 6463               	/* frame size = 2 */
 6464               	/* stack size = 4 */
 6465               	.L__stack_usage = 4
 6466 2c86 9A83      		std Y+2,r25
 6467 2c88 8983      		std Y+1,r24
 753:lp_solve_5.5/lp_mipbb.c ****   return( 0 );
 6468               		.loc 1 753 0
 6469 2c8a 80E0      		ldi r24,0
 6470 2c8c 90E0      		ldi r25,0
 6471               	/* epilogue start */
 754:lp_solve_5.5/lp_mipbb.c **** }
 6472               		.loc 1 754 0
 6473 2c8e 0F90      		pop __tmp_reg__
 6474 2c90 0F90      		pop __tmp_reg__
 6475 2c92 DF91      		pop r29
 6476 2c94 CF91      		pop r28
 6477 2c96 0895      		ret
 6478               		.cfi_endproc
 6479               	.LFE17:
 6481               	.global	freecuts_BB
 6483               	freecuts_BB:
 6484               	.LFB18:
 755:lp_solve_5.5/lp_mipbb.c **** 
 756:lp_solve_5.5/lp_mipbb.c **** STATIC MYBOOL freecuts_BB(lprec *lp)
 757:lp_solve_5.5/lp_mipbb.c **** {
 6485               		.loc 1 757 0
 6486               		.cfi_startproc
 6487 2c98 CF93      		push r28
 6488               	.LCFI68:
 6489               		.cfi_def_cfa_offset 3
 6490               		.cfi_offset 28, -2
 6491 2c9a DF93      		push r29
 6492               	.LCFI69:
 6493               		.cfi_def_cfa_offset 4
 6494               		.cfi_offset 29, -3
 6495 2c9c 00D0      		rcall .
 6496               	.LCFI70:
 6497               		.cfi_def_cfa_offset 6
 6498 2c9e CDB7      		in r28,__SP_L__
 6499 2ca0 DEB7      		in r29,__SP_H__
 6500               	.LCFI71:
 6501               		.cfi_def_cfa_register 28
 6502               	/* prologue: function */
 6503               	/* frame size = 2 */
 6504               	/* stack size = 4 */
 6505               	.L__stack_usage = 4
 6506 2ca2 9A83      		std Y+2,r25
 6507 2ca4 8983      		std Y+1,r24
 758:lp_solve_5.5/lp_mipbb.c ****   if(lp->bb_cuttype != NULL)
 6508               		.loc 1 758 0
 6509 2ca6 8981      		ldd r24,Y+1
 6510 2ca8 9A81      		ldd r25,Y+2
 6511 2caa 8A5B      		subi r24,-70
 6512 2cac 9C4F      		sbci r25,-4
 6513 2cae FC01      		movw r30,r24
 6514 2cb0 8081      		ld r24,Z
 6515 2cb2 9181      		ldd r25,Z+1
 6516 2cb4 892B      		or r24,r25
 6517 2cb6 01F0      		breq .L272
 759:lp_solve_5.5/lp_mipbb.c ****     FREE(lp->bb_cuttype);
 6518               		.loc 1 759 0
 6519 2cb8 8981      		ldd r24,Y+1
 6520 2cba 9A81      		ldd r25,Y+2
 6521 2cbc 8A5B      		subi r24,-70
 6522 2cbe 9C4F      		sbci r25,-4
 6523 2cc0 FC01      		movw r30,r24
 6524 2cc2 8081      		ld r24,Z
 6525 2cc4 9181      		ldd r25,Z+1
 6526 2cc6 892B      		or r24,r25
 6527 2cc8 01F0      		breq .L272
 6528               		.loc 1 759 0 is_stmt 0 discriminator 1
 6529 2cca 8981      		ldd r24,Y+1
 6530 2ccc 9A81      		ldd r25,Y+2
 6531 2cce 8A5B      		subi r24,-70
 6532 2cd0 9C4F      		sbci r25,-4
 6533 2cd2 FC01      		movw r30,r24
 6534 2cd4 8081      		ld r24,Z
 6535 2cd6 9181      		ldd r25,Z+1
 6536 2cd8 0E94 0000 		call free
 6537 2cdc 8981      		ldd r24,Y+1
 6538 2cde 9A81      		ldd r25,Y+2
 6539 2ce0 8A5B      		subi r24,-70
 6540 2ce2 9C4F      		sbci r25,-4
 6541 2ce4 FC01      		movw r30,r24
 6542 2ce6 1182      		std Z+1,__zero_reg__
 6543 2ce8 1082      		st Z,__zero_reg__
 6544               	.L272:
 760:lp_solve_5.5/lp_mipbb.c ****   return( TRUE );
 6545               		.loc 1 760 0 is_stmt 1
 6546 2cea 81E0      		ldi r24,lo8(1)
 6547               	/* epilogue start */
 761:lp_solve_5.5/lp_mipbb.c **** }
 6548               		.loc 1 761 0
 6549 2cec 0F90      		pop __tmp_reg__
 6550 2cee 0F90      		pop __tmp_reg__
 6551 2cf0 DF91      		pop r29
 6552 2cf2 CF91      		pop r28
 6553 2cf4 0895      		ret
 6554               		.cfi_endproc
 6555               	.LFE18:
 6557               		.section	.rodata
 6558               	.LC2:
 6559 0080 736F 6C76 		.string	"solve_LP: Restoring relaxed bounds at level %d.\n"
 6559      655F 4C50 
 6559      3A20 5265 
 6559      7374 6F72 
 6559      696E 6720 
 6560               	.LC3:
 6561 00b1 736F 6C76 		.string	"solve_LP: Starting bound relaxation #%d ('%s')\n"
 6561      655F 4C50 
 6561      3A20 5374 
 6561      6172 7469 
 6561      6E67 2062 
 6562               	.LC4:
 6563 00e1 736F 6C76 		.string	"solve_LP: Relaxation limit exceeded in resolving infeasibility\n"
 6563      655F 4C50 
 6563      3A20 5265 
 6563      6C61 7861 
 6563      7469 6F6E 
 6564               	.LC5:
 6565 0121 6279 2074 		.string	"by the user"
 6565      6865 2075 
 6565      7365 7200 
 6566               	.LC6:
 6567 012d 6475 6520 		.string	"due to time-out"
 6567      746F 2074 
 6567      696D 652D 
 6567      6F75 7400 
 6568               	.LC7:
 6569 013d 0A6C 705F 		.string	"\nlp_solve optimization was stopped %s.\n"
 6569      736F 6C76 
 6569      6520 6F70 
 6569      7469 6D69 
 6569      7A61 7469 
 6570               	.LC8:
 6571 0165 6973 2049 		.string	"is INFEASIBLE"
 6571      4E46 4541 
 6571      5349 424C 
 6571      4500 
 6572               	.LC9:
 6573 0173 4641 494C 		.string	"FAILED"
 6573      4544 00
 6574               	.LC10:
 6575 017a 6973 2055 		.string	"is UNBOUNDED"
 6575      4E42 4F55 
 6575      4E44 4544 
 6575      00
 6576               	.LC11:
 6577 0187 5468 6520 		.string	"The model %s\n"
 6577      6D6F 6465 
 6577      6C20 2573 
 6577      0A00 
 6578               	.LC12:
 6579 0195 4469 6666 		.string	"Difficult"
 6579      6963 756C 
 6579      7400 
 6580               	.LC13:
 6581 019f 5365 7665 		.string	"Severe"
 6581      7265 00
 6582               	.LC14:
 6583 01a6 2573 206E 		.string	"%s numerics encountered; validate accuracy\n"
 6583      756D 6572 
 6583      6963 7320 
 6583      656E 636F 
 6583      756E 7465 
 6584               	.global	__floatdisf
 6585               	.LC15:
 6586 01d2 0A52 656C 		.string	"\nRelaxed solution  %18.12g after %10.0f iter is B&B base.\n"
 6586      6178 6564 
 6586      2073 6F6C 
 6586      7574 696F 
 6586      6E20 2025 
 6587               	.LC16:
 6588 020d 200A 00   		.string	" \n"
 6589               	.LC17:
 6590 0210 736F 6C76 		.string	"solve_LP: A MIP subproblem returned a value better than the base.\n"
 6590      655F 4C50 
 6590      3A20 4120 
 6590      4D49 5020 
 6590      7375 6270 
 6591               		.text
 6592               	.global	solve_LP
 6594               	solve_LP:
 6595               	.LFB19:
 762:lp_solve_5.5/lp_mipbb.c **** 
 763:lp_solve_5.5/lp_mipbb.c **** /* B&B solver routines */
 764:lp_solve_5.5/lp_mipbb.c **** STATIC int solve_LP(lprec *lp, BBrec *BB)
 765:lp_solve_5.5/lp_mipbb.c **** {
 6596               		.loc 1 765 0
 6597               		.cfi_startproc
 6598 2cf6 AF92      		push r10
 6599               	.LCFI72:
 6600               		.cfi_def_cfa_offset 3
 6601               		.cfi_offset 10, -2
 6602 2cf8 BF92      		push r11
 6603               	.LCFI73:
 6604               		.cfi_def_cfa_offset 4
 6605               		.cfi_offset 11, -3
 6606 2cfa CF92      		push r12
 6607               	.LCFI74:
 6608               		.cfi_def_cfa_offset 5
 6609               		.cfi_offset 12, -4
 6610 2cfc DF92      		push r13
 6611               	.LCFI75:
 6612               		.cfi_def_cfa_offset 6
 6613               		.cfi_offset 13, -5
 6614 2cfe EF92      		push r14
 6615               	.LCFI76:
 6616               		.cfi_def_cfa_offset 7
 6617               		.cfi_offset 14, -6
 6618 2d00 FF92      		push r15
 6619               	.LCFI77:
 6620               		.cfi_def_cfa_offset 8
 6621               		.cfi_offset 15, -7
 6622 2d02 0F93      		push r16
 6623               	.LCFI78:
 6624               		.cfi_def_cfa_offset 9
 6625               		.cfi_offset 16, -8
 6626 2d04 1F93      		push r17
 6627               	.LCFI79:
 6628               		.cfi_def_cfa_offset 10
 6629               		.cfi_offset 17, -9
 6630 2d06 CF93      		push r28
 6631               	.LCFI80:
 6632               		.cfi_def_cfa_offset 11
 6633               		.cfi_offset 28, -10
 6634 2d08 DF93      		push r29
 6635               	.LCFI81:
 6636               		.cfi_def_cfa_offset 12
 6637               		.cfi_offset 29, -11
 6638 2d0a CDB7      		in r28,__SP_L__
 6639 2d0c DEB7      		in r29,__SP_H__
 6640               	.LCFI82:
 6641               		.cfi_def_cfa_register 28
 6642 2d0e 6697      		sbiw r28,22
 6643               	.LCFI83:
 6644               		.cfi_def_cfa_offset 34
 6645 2d10 0FB6      		in __tmp_reg__,__SREG__
 6646 2d12 F894      		cli
 6647 2d14 DEBF      		out __SP_H__,r29
 6648 2d16 0FBE      		out __SREG__,__tmp_reg__
 6649 2d18 CDBF      		out __SP_L__,r28
 6650               	/* prologue: function */
 6651               	/* frame size = 22 */
 6652               	/* stack size = 32 */
 6653               	.L__stack_usage = 32
 6654 2d1a 9C8B      		std Y+20,r25
 6655 2d1c 8B8B      		std Y+19,r24
 6656 2d1e 7E8B      		std Y+22,r23
 6657 2d20 6D8B      		std Y+21,r22
 766:lp_solve_5.5/lp_mipbb.c ****   int    tilted, restored, status;
 767:lp_solve_5.5/lp_mipbb.c ****   REAL   testOF, *upbo = BB->upbo, *lowbo = BB->lowbo;
 6658               		.loc 1 767 0
 6659 2d22 8D89      		ldd r24,Y+21
 6660 2d24 9E89      		ldd r25,Y+22
 6661 2d26 FC01      		movw r30,r24
 6662 2d28 80A1      		ldd r24,Z+32
 6663 2d2a 91A1      		ldd r25,Z+33
 6664 2d2c 9887      		std Y+8,r25
 6665 2d2e 8F83      		std Y+7,r24
 6666 2d30 8D89      		ldd r24,Y+21
 6667 2d32 9E89      		ldd r25,Y+22
 6668 2d34 FC01      		movw r30,r24
 6669 2d36 82A1      		ldd r24,Z+34
 6670 2d38 93A1      		ldd r25,Z+35
 6671 2d3a 9A87      		std Y+10,r25
 6672 2d3c 8987      		std Y+9,r24
 768:lp_solve_5.5/lp_mipbb.c ****   BBrec  *perturbed = NULL;
 6673               		.loc 1 768 0
 6674 2d3e 1A8A      		std Y+18,__zero_reg__
 6675 2d40 198A      		std Y+17,__zero_reg__
 769:lp_solve_5.5/lp_mipbb.c **** 
 770:lp_solve_5.5/lp_mipbb.c ****   if(lp->bb_break)
 6676               		.loc 1 770 0
 6677 2d42 8B89      		ldd r24,Y+19
 6678 2d44 9C89      		ldd r25,Y+20
 6679 2d46 8B50      		subi r24,11
 6680 2d48 9D4F      		sbci r25,-3
 6681 2d4a FC01      		movw r30,r24
 6682 2d4c 8081      		ld r24,Z
 6683 2d4e 8823      		tst r24
 6684 2d50 01F0      		breq .L275
 771:lp_solve_5.5/lp_mipbb.c ****     return(PROCBREAK);
 6685               		.loc 1 771 0
 6686 2d52 8BE0      		ldi r24,lo8(11)
 6687 2d54 90E0      		ldi r25,0
 6688 2d56 00C0      		rjmp .L329
 6689               	.L275:
 772:lp_solve_5.5/lp_mipbb.c **** 
 773:lp_solve_5.5/lp_mipbb.c **** #ifdef Paranoia
 774:lp_solve_5.5/lp_mipbb.c ****   debug_print(lp, "solve_LP: Starting solve for iter %.0f, B&B node level %d.\n",
 775:lp_solve_5.5/lp_mipbb.c ****                    (double) lp->total_iter, lp->bb_level);
 776:lp_solve_5.5/lp_mipbb.c ****   if(lp->bb_trace &&
 777:lp_solve_5.5/lp_mipbb.c ****      !validate_bounds(lp, upbo, lowbo))
 778:lp_solve_5.5/lp_mipbb.c ****     report(lp, SEVERE, "solve_LP: Inconsistent bounds at iter %.0f, B&B node level %d.\n",
 779:lp_solve_5.5/lp_mipbb.c ****                        (double) lp->total_iter, lp->bb_level);
 780:lp_solve_5.5/lp_mipbb.c **** #endif
 781:lp_solve_5.5/lp_mipbb.c **** 
 782:lp_solve_5.5/lp_mipbb.c ****   /* Copy user-specified entering bounds into lp_solve working bounds */
 783:lp_solve_5.5/lp_mipbb.c ****   impose_bounds(lp, upbo, lowbo);
 6690               		.loc 1 783 0
 6691 2d58 4985      		ldd r20,Y+9
 6692 2d5a 5A85      		ldd r21,Y+10
 6693 2d5c 2F81      		ldd r18,Y+7
 6694 2d5e 3885      		ldd r19,Y+8
 6695 2d60 8B89      		ldd r24,Y+19
 6696 2d62 9C89      		ldd r25,Y+20
 6697 2d64 B901      		movw r22,r18
 6698 2d66 0E94 0000 		call impose_bounds
 784:lp_solve_5.5/lp_mipbb.c **** 
 785:lp_solve_5.5/lp_mipbb.c ****   /* Restore previously pushed / saved basis for this level if we are in
 786:lp_solve_5.5/lp_mipbb.c ****      the B&B mode and it is not the first call of the binary tree */
 787:lp_solve_5.5/lp_mipbb.c ****   if(BB->nodessolved > 1)
 6699               		.loc 1 787 0
 6700 2d6a 8D89      		ldd r24,Y+21
 6701 2d6c 9E89      		ldd r25,Y+22
 6702 2d6e FC01      		movw r30,r24
 6703 2d70 8089      		ldd r24,Z+16
 6704 2d72 9189      		ldd r25,Z+17
 6705 2d74 0297      		sbiw r24,2
 6706 2d76 04F0      		brlt .L277
 788:lp_solve_5.5/lp_mipbb.c ****     restore_basis(lp);
 6707               		.loc 1 788 0
 6708 2d78 8B89      		ldd r24,Y+19
 6709 2d7a 9C89      		ldd r25,Y+20
 6710 2d7c 0E94 0000 		call restore_basis
 6711               	.L277:
 789:lp_solve_5.5/lp_mipbb.c **** 
 790:lp_solve_5.5/lp_mipbb.c ****   /* Solve and possibly handle degeneracy cases via bound relaxations */
 791:lp_solve_5.5/lp_mipbb.c ****   status   = RUNNING;
 6712               		.loc 1 791 0
 6713 2d80 88E0      		ldi r24,lo8(8)
 6714 2d82 90E0      		ldi r25,0
 6715 2d84 9E83      		std Y+6,r25
 6716 2d86 8D83      		std Y+5,r24
 792:lp_solve_5.5/lp_mipbb.c ****   tilted   = 0;
 6717               		.loc 1 792 0
 6718 2d88 1A82      		std Y+2,__zero_reg__
 6719 2d8a 1982      		std Y+1,__zero_reg__
 793:lp_solve_5.5/lp_mipbb.c ****   restored = 0;
 6720               		.loc 1 793 0
 6721 2d8c 1C82      		std Y+4,__zero_reg__
 6722 2d8e 1B82      		std Y+3,__zero_reg__
 794:lp_solve_5.5/lp_mipbb.c **** 
 795:lp_solve_5.5/lp_mipbb.c ****   while(status == RUNNING) {
 6723               		.loc 1 795 0
 6724 2d90 00C0      		rjmp .L278
 6725               	.L301:
 796:lp_solve_5.5/lp_mipbb.c **** 
 797:lp_solve_5.5/lp_mipbb.c ****     /* Copy user-specified entering bounds into lp_solve working bounds and run */
 798:lp_solve_5.5/lp_mipbb.c ****     status = spx_run(lp, (MYBOOL) (tilted+restored > 0));
 6726               		.loc 1 798 0
 6727 2d92 2981      		ldd r18,Y+1
 6728 2d94 3A81      		ldd r19,Y+2
 6729 2d96 8B81      		ldd r24,Y+3
 6730 2d98 9C81      		ldd r25,Y+4
 6731 2d9a 820F      		add r24,r18
 6732 2d9c 931F      		adc r25,r19
 6733 2d9e 21E0      		ldi r18,lo8(1)
 6734 2da0 1816      		cp __zero_reg__,r24
 6735 2da2 1906      		cpc __zero_reg__,r25
 6736 2da4 04F0      		brlt .L279
 6737 2da6 20E0      		ldi r18,0
 6738               	.L279:
 6739 2da8 8B89      		ldd r24,Y+19
 6740 2daa 9C89      		ldd r25,Y+20
 6741 2dac 622F      		mov r22,r18
 6742 2dae 0E94 0000 		call spx_run
 6743 2db2 9E83      		std Y+6,r25
 6744 2db4 8D83      		std Y+5,r24
 799:lp_solve_5.5/lp_mipbb.c ****     lp->bb_status     = status;
 6745               		.loc 1 799 0
 6746 2db6 8B89      		ldd r24,Y+19
 6747 2db8 9C89      		ldd r25,Y+20
 6748 2dba 825D      		subi r24,-46
 6749 2dbc 9C4F      		sbci r25,-4
 6750 2dbe 2D81      		ldd r18,Y+5
 6751 2dc0 3E81      		ldd r19,Y+6
 6752 2dc2 FC01      		movw r30,r24
 6753 2dc4 3183      		std Z+1,r19
 6754 2dc6 2083      		st Z,r18
 800:lp_solve_5.5/lp_mipbb.c ****     lp->spx_perturbed = FALSE;
 6755               		.loc 1 800 0
 6756 2dc8 8B89      		ldd r24,Y+19
 6757 2dca 9C89      		ldd r25,Y+20
 6758 2dcc 8C50      		subi r24,12
 6759 2dce 9D4F      		sbci r25,-3
 6760 2dd0 FC01      		movw r30,r24
 6761 2dd2 1082      		st Z,__zero_reg__
 801:lp_solve_5.5/lp_mipbb.c **** 
 802:lp_solve_5.5/lp_mipbb.c ****     if(tilted < 0)
 6762               		.loc 1 802 0
 6763 2dd4 8981      		ldd r24,Y+1
 6764 2dd6 9A81      		ldd r25,Y+2
 6765 2dd8 9923      		tst r25
 6766 2dda 04F4      		brge .+2
 6767 2ddc 00C0      		rjmp .L334
 803:lp_solve_5.5/lp_mipbb.c ****       break;
 804:lp_solve_5.5/lp_mipbb.c **** 
 805:lp_solve_5.5/lp_mipbb.c ****     else if((status == OPTIMAL) && (tilted > 0)) {
 6768               		.loc 1 805 0
 6769 2dde 8D81      		ldd r24,Y+5
 6770 2de0 9E81      		ldd r25,Y+6
 6771 2de2 892B      		or r24,r25
 6772 2de4 01F0      		breq .+2
 6773 2de6 00C0      		rjmp .L282
 6774               		.loc 1 805 0 is_stmt 0 discriminator 1
 6775 2de8 8981      		ldd r24,Y+1
 6776 2dea 9A81      		ldd r25,Y+2
 6777 2dec 1816      		cp __zero_reg__,r24
 6778 2dee 1906      		cpc __zero_reg__,r25
 6779 2df0 04F0      		brlt .+2
 6780 2df2 00C0      		rjmp .L282
 806:lp_solve_5.5/lp_mipbb.c ****       if(lp->spx_trace)
 6781               		.loc 1 806 0 is_stmt 1
 6782 2df4 8B89      		ldd r24,Y+19
 6783 2df6 9C89      		ldd r25,Y+20
 6784 2df8 8E5F      		subi r24,-2
 6785 2dfa 9D4F      		sbci r25,-3
 6786 2dfc FC01      		movw r30,r24
 6787 2dfe 8081      		ld r24,Z
 6788 2e00 8823      		tst r24
 6789 2e02 01F0      		breq .L283
 807:lp_solve_5.5/lp_mipbb.c ****         report(lp, DETAILED, "solve_LP: Restoring relaxed bounds at level %d.\n",
 6790               		.loc 1 807 0
 6791 2e04 8A81      		ldd r24,Y+2
 6792 2e06 8F93      		push r24
 6793 2e08 8981      		ldd r24,Y+1
 6794 2e0a 8F93      		push r24
 6795 2e0c 80E0      		ldi r24,lo8(.LC2)
 6796 2e0e 90E0      		ldi r25,hi8(.LC2)
 6797 2e10 892F      		mov r24,r25
 6798 2e12 8F93      		push r24
 6799 2e14 80E0      		ldi r24,lo8(.LC2)
 6800 2e16 90E0      		ldi r25,hi8(.LC2)
 6801 2e18 8F93      		push r24
 6802 2e1a 1F92      		push __zero_reg__
 6803 2e1c 85E0      		ldi r24,lo8(5)
 6804 2e1e 8F93      		push r24
 6805 2e20 8C89      		ldd r24,Y+20
 6806 2e22 8F93      		push r24
 6807 2e24 8B89      		ldd r24,Y+19
 6808 2e26 8F93      		push r24
 6809 2e28 0E94 0000 		call report
 6810 2e2c 8DB7      		in r24,__SP_L__
 6811 2e2e 9EB7      		in r25,__SP_H__
 6812 2e30 0896      		adiw r24,8
 6813 2e32 0FB6      		in __tmp_reg__,__SREG__
 6814 2e34 F894      		cli
 6815 2e36 DEBF      		out __SP_H__,r29
 6816 2e38 0FBE      		out __SREG__,__tmp_reg__
 6817 2e3a CDBF      		out __SP_L__,r28
 6818               	.L283:
 808:lp_solve_5.5/lp_mipbb.c ****                               tilted);
 809:lp_solve_5.5/lp_mipbb.c **** 
 810:lp_solve_5.5/lp_mipbb.c ****     /* Restore original pre-perturbed problem bounds, and solve again using the basis
 811:lp_solve_5.5/lp_mipbb.c ****        found for the perturbed problem; also make sure we rebase and recompute. */
 812:lp_solve_5.5/lp_mipbb.c ****       free_BB(&perturbed);
 6819               		.loc 1 812 0
 6820 2e3c CE01      		movw r24,r28
 6821 2e3e 4196      		adiw r24,17
 6822 2e40 0E94 0000 		call free_BB
 813:lp_solve_5.5/lp_mipbb.c ****       if((perturbed == NULL) || (perturbed == BB)) {
 6823               		.loc 1 813 0
 6824 2e44 8989      		ldd r24,Y+17
 6825 2e46 9A89      		ldd r25,Y+18
 6826 2e48 892B      		or r24,r25
 6827 2e4a 01F0      		breq .L284
 6828               		.loc 1 813 0 is_stmt 0 discriminator 1
 6829 2e4c 2989      		ldd r18,Y+17
 6830 2e4e 3A89      		ldd r19,Y+18
 6831 2e50 8D89      		ldd r24,Y+21
 6832 2e52 9E89      		ldd r25,Y+22
 6833 2e54 2817      		cp r18,r24
 6834 2e56 3907      		cpc r19,r25
 6835 2e58 01F4      		brne .L285
 6836               	.L284:
 814:lp_solve_5.5/lp_mipbb.c ****         perturbed = NULL;
 6837               		.loc 1 814 0 is_stmt 1
 6838 2e5a 1A8A      		std Y+18,__zero_reg__
 6839 2e5c 198A      		std Y+17,__zero_reg__
 815:lp_solve_5.5/lp_mipbb.c ****         impose_bounds(lp, upbo, lowbo);
 6840               		.loc 1 815 0
 6841 2e5e 4985      		ldd r20,Y+9
 6842 2e60 5A85      		ldd r21,Y+10
 6843 2e62 2F81      		ldd r18,Y+7
 6844 2e64 3885      		ldd r19,Y+8
 6845 2e66 8B89      		ldd r24,Y+19
 6846 2e68 9C89      		ldd r25,Y+20
 6847 2e6a B901      		movw r22,r18
 6848 2e6c 0E94 0000 		call impose_bounds
 6849 2e70 00C0      		rjmp .L286
 6850               	.L285:
 816:lp_solve_5.5/lp_mipbb.c ****       }
 817:lp_solve_5.5/lp_mipbb.c ****       else
 818:lp_solve_5.5/lp_mipbb.c ****         impose_bounds(lp, perturbed->upbo, perturbed->lowbo);
 6851               		.loc 1 818 0
 6852 2e72 8989      		ldd r24,Y+17
 6853 2e74 9A89      		ldd r25,Y+18
 6854 2e76 FC01      		movw r30,r24
 6855 2e78 42A1      		ldd r20,Z+34
 6856 2e7a 53A1      		ldd r21,Z+35
 6857 2e7c 8989      		ldd r24,Y+17
 6858 2e7e 9A89      		ldd r25,Y+18
 6859 2e80 FC01      		movw r30,r24
 6860 2e82 20A1      		ldd r18,Z+32
 6861 2e84 31A1      		ldd r19,Z+33
 6862 2e86 8B89      		ldd r24,Y+19
 6863 2e88 9C89      		ldd r25,Y+20
 6864 2e8a B901      		movw r22,r18
 6865 2e8c 0E94 0000 		call impose_bounds
 6866               	.L286:
 819:lp_solve_5.5/lp_mipbb.c ****       set_action(&lp->spx_action, ACTION_REBASE | ACTION_RECOMPUTE);
 6867               		.loc 1 819 0
 6868 2e90 8B89      		ldd r24,Y+19
 6869 2e92 9C89      		ldd r25,Y+20
 6870 2e94 8E50      		subi r24,14
 6871 2e96 9D4F      		sbci r25,-3
 6872 2e98 66E0      		ldi r22,lo8(6)
 6873 2e9a 70E0      		ldi r23,0
 6874 2e9c 0E94 0000 		call set_action
 820:lp_solve_5.5/lp_mipbb.c ****       BB->UBzerobased = FALSE;
 6875               		.loc 1 820 0
 6876 2ea0 8D89      		ldd r24,Y+21
 6877 2ea2 9E89      		ldd r25,Y+22
 6878 2ea4 FC01      		movw r30,r24
 6879 2ea6 17AA      		std Z+55,__zero_reg__
 821:lp_solve_5.5/lp_mipbb.c ****       if(lp->bb_totalnodes == 0)
 6880               		.loc 1 821 0
 6881 2ea8 8B89      		ldd r24,Y+19
 6882 2eaa 9C89      		ldd r25,Y+20
 6883 2eac 8A5C      		subi r24,-54
 6884 2eae 9C4F      		sbci r25,-4
 6885 2eb0 FC01      		movw r30,r24
 6886 2eb2 A080      		ld r10,Z
 6887 2eb4 FC01      		movw r30,r24
 6888 2eb6 B180      		ldd r11,Z+1
 6889 2eb8 FC01      		movw r30,r24
 6890 2eba C280      		ldd r12,Z+2
 6891 2ebc FC01      		movw r30,r24
 6892 2ebe D380      		ldd r13,Z+3
 6893 2ec0 FC01      		movw r30,r24
 6894 2ec2 E480      		ldd r14,Z+4
 6895 2ec4 FC01      		movw r30,r24
 6896 2ec6 F580      		ldd r15,Z+5
 6897 2ec8 FC01      		movw r30,r24
 6898 2eca 0681      		ldd r16,Z+6
 6899 2ecc FC01      		movw r30,r24
 6900 2ece 1781      		ldd r17,Z+7
 6901 2ed0 2A2D      		mov r18,r10
 6902 2ed2 3B2D      		mov r19,r11
 6903 2ed4 4C2D      		mov r20,r12
 6904 2ed6 5D2D      		mov r21,r13
 6905 2ed8 6E2D      		mov r22,r14
 6906 2eda 7F2D      		mov r23,r15
 6907 2edc 802F      		mov r24,r16
 6908 2ede 912F      		mov r25,r17
 6909 2ee0 A0E0      		ldi r26,0
 6910 2ee2 0E94 0000 		call __cmpdi2_s8
 6911 2ee6 01F4      		brne .L287
 822:lp_solve_5.5/lp_mipbb.c ****         lp->real_solution = lp->infinite;
 6912               		.loc 1 822 0
 6913 2ee8 8B89      		ldd r24,Y+19
 6914 2eea 9C89      		ldd r25,Y+20
 6915 2eec 865F      		subi r24,-10
 6916 2eee 9C4F      		sbci r25,-4
 6917 2ef0 FC01      		movw r30,r24
 6918 2ef2 8081      		ld r24,Z
 6919 2ef4 9181      		ldd r25,Z+1
 6920 2ef6 A281      		ldd r26,Z+2
 6921 2ef8 B381      		ldd r27,Z+3
 6922 2efa 2B89      		ldd r18,Y+19
 6923 2efc 3C89      		ldd r19,Y+20
 6924 2efe 225F      		subi r18,-14
 6925 2f00 3D4F      		sbci r19,-3
 6926 2f02 F901      		movw r30,r18
 6927 2f04 8083      		st Z,r24
 6928 2f06 9183      		std Z+1,r25
 6929 2f08 A283      		std Z+2,r26
 6930 2f0a B383      		std Z+3,r27
 6931               	.L287:
 823:lp_solve_5.5/lp_mipbb.c ****       status = RUNNING;
 6932               		.loc 1 823 0
 6933 2f0c 88E0      		ldi r24,lo8(8)
 6934 2f0e 90E0      		ldi r25,0
 6935 2f10 9E83      		std Y+6,r25
 6936 2f12 8D83      		std Y+5,r24
 824:lp_solve_5.5/lp_mipbb.c ****       tilted--;
 6937               		.loc 1 824 0
 6938 2f14 8981      		ldd r24,Y+1
 6939 2f16 9A81      		ldd r25,Y+2
 6940 2f18 0197      		sbiw r24,1
 6941 2f1a 9A83      		std Y+2,r25
 6942 2f1c 8983      		std Y+1,r24
 825:lp_solve_5.5/lp_mipbb.c ****       restored++;
 6943               		.loc 1 825 0
 6944 2f1e 8B81      		ldd r24,Y+3
 6945 2f20 9C81      		ldd r25,Y+4
 6946 2f22 0196      		adiw r24,1
 6947 2f24 9C83      		std Y+4,r25
 6948 2f26 8B83      		std Y+3,r24
 826:lp_solve_5.5/lp_mipbb.c ****       lp->spx_perturbed = TRUE;
 6949               		.loc 1 826 0
 6950 2f28 8B89      		ldd r24,Y+19
 6951 2f2a 9C89      		ldd r25,Y+20
 6952 2f2c 8C50      		subi r24,12
 6953 2f2e 9D4F      		sbci r25,-3
 6954 2f30 21E0      		ldi r18,lo8(1)
 6955 2f32 FC01      		movw r30,r24
 6956 2f34 2083      		st Z,r18
 6957 2f36 00C0      		rjmp .L278
 6958               	.L282:
 827:lp_solve_5.5/lp_mipbb.c ****     }
 828:lp_solve_5.5/lp_mipbb.c **** 
 829:lp_solve_5.5/lp_mipbb.c ****     else if(((lp->bb_level <= 1) ||     is_anti_degen(lp, ANTIDEGEN_DURINGBB)) &&
 6959               		.loc 1 829 0
 6960 2f38 8B89      		ldd r24,Y+19
 6961 2f3a 9C89      		ldd r25,Y+20
 6962 2f3c 805D      		subi r24,-48
 6963 2f3e 9C4F      		sbci r25,-4
 6964 2f40 FC01      		movw r30,r24
 6965 2f42 8081      		ld r24,Z
 6966 2f44 9181      		ldd r25,Z+1
 6967 2f46 0297      		sbiw r24,2
 6968 2f48 04F0      		brlt .L288
 6969               		.loc 1 829 0 is_stmt 0 discriminator 2
 6970 2f4a 8B89      		ldd r24,Y+19
 6971 2f4c 9C89      		ldd r25,Y+20
 6972 2f4e 60E8      		ldi r22,lo8(-128)
 6973 2f50 70E0      		ldi r23,0
 6974 2f52 0E94 0000 		call is_anti_degen
 6975 2f56 8823      		tst r24
 6976 2f58 01F4      		brne .+2
 6977 2f5a 00C0      		rjmp .L278
 6978               	.L288:
 6979               		.loc 1 829 0 discriminator 3
 6980 2f5c 8D81      		ldd r24,Y+5
 6981 2f5e 9E81      		ldd r25,Y+6
 6982 2f60 4797      		sbiw r24,23
 6983 2f62 01F4      		brne .L289
 830:lp_solve_5.5/lp_mipbb.c ****             (((status == LOSTFEAS) &&   is_anti_degen(lp, ANTIDEGEN_LOSTFEAS)) ||
 6984               		.loc 1 830 0 is_stmt 1
 6985 2f64 8B89      		ldd r24,Y+19
 6986 2f66 9C89      		ldd r25,Y+20
 6987 2f68 60E1      		ldi r22,lo8(16)
 6988 2f6a 70E0      		ldi r23,0
 6989 2f6c 0E94 0000 		call is_anti_degen
 6990 2f70 8823      		tst r24
 6991 2f72 01F4      		brne .L290
 6992               	.L289:
 6993               		.loc 1 830 0 is_stmt 0 discriminator 1
 6994 2f74 8D81      		ldd r24,Y+5
 6995 2f76 9E81      		ldd r25,Y+6
 6996 2f78 0297      		sbiw r24,2
 6997 2f7a 01F4      		brne .L291
 831:lp_solve_5.5/lp_mipbb.c ****              ((status == INFEASIBLE) && is_anti_degen(lp, ANTIDEGEN_INFEASIBLE)) ||
 6998               		.loc 1 831 0 is_stmt 1
 6999 2f7c 8B89      		ldd r24,Y+19
 7000 2f7e 9C89      		ldd r25,Y+20
 7001 2f80 60E2      		ldi r22,lo8(32)
 7002 2f82 70E0      		ldi r23,0
 7003 2f84 0E94 0000 		call is_anti_degen
 7004 2f88 8823      		tst r24
 7005 2f8a 01F4      		brne .L290
 7006               	.L291:
 7007               		.loc 1 831 0 is_stmt 0 discriminator 1
 7008 2f8c 8D81      		ldd r24,Y+5
 7009 2f8e 9E81      		ldd r25,Y+6
 7010 2f90 0597      		sbiw r24,5
 7011 2f92 01F4      		brne .L292
 832:lp_solve_5.5/lp_mipbb.c ****              ((status == NUMFAILURE) && is_anti_degen(lp, ANTIDEGEN_NUMFAILURE)) ||
 7012               		.loc 1 832 0 is_stmt 1
 7013 2f94 8B89      		ldd r24,Y+19
 7014 2f96 9C89      		ldd r25,Y+20
 7015 2f98 68E0      		ldi r22,lo8(8)
 7016 2f9a 70E0      		ldi r23,0
 7017 2f9c 0E94 0000 		call is_anti_degen
 7018 2fa0 8823      		tst r24
 7019 2fa2 01F4      		brne .L290
 7020               	.L292:
 7021               		.loc 1 832 0 is_stmt 0 discriminator 1
 7022 2fa4 8D81      		ldd r24,Y+5
 7023 2fa6 9E81      		ldd r25,Y+6
 7024 2fa8 0497      		sbiw r24,4
 7025 2faa 01F0      		breq .+2
 7026 2fac 00C0      		rjmp .L278
 833:lp_solve_5.5/lp_mipbb.c ****              ((status == DEGENERATE) && is_anti_degen(lp, ANTIDEGEN_STALLING)))) {
 7027               		.loc 1 833 0 is_stmt 1
 7028 2fae 8B89      		ldd r24,Y+19
 7029 2fb0 9C89      		ldd r25,Y+20
 7030 2fb2 64E0      		ldi r22,lo8(4)
 7031 2fb4 70E0      		ldi r23,0
 7032 2fb6 0E94 0000 		call is_anti_degen
 7033 2fba 8823      		tst r24
 7034 2fbc 01F4      		brne .+2
 7035 2fbe 00C0      		rjmp .L278
 7036               	.L290:
 834:lp_solve_5.5/lp_mipbb.c ****      /* Allow up to .. consecutive relaxations for non-B&B phases */
 835:lp_solve_5.5/lp_mipbb.c ****       if((tilted <= DEF_MAXRELAX) &&                       /* Conventional recovery case,...  */
 7037               		.loc 1 835 0
 7038 2fc0 8981      		ldd r24,Y+1
 7039 2fc2 9A81      		ldd r25,Y+2
 7040 2fc4 0897      		sbiw r24,8
 7041 2fc6 04F0      		brlt .+2
 7042 2fc8 00C0      		rjmp .L293
 7043               		.loc 1 835 0 is_stmt 0 discriminator 1
 7044 2fca 8981      		ldd r24,Y+1
 7045 2fcc 9A81      		ldd r25,Y+2
 7046 2fce 892B      		or r24,r25
 7047 2fd0 01F4      		brne .L294
 836:lp_solve_5.5/lp_mipbb.c ****          !((tilted == 0) && (restored > DEF_MAXRELAX))) {  /* but not iterating infeasibility */
 7048               		.loc 1 836 0 is_stmt 1
 7049 2fd2 8B81      		ldd r24,Y+3
 7050 2fd4 9C81      		ldd r25,Y+4
 7051 2fd6 0897      		sbiw r24,8
 7052 2fd8 04F0      		brlt .+2
 7053 2fda 00C0      		rjmp .L293
 7054               	.L294:
 837:lp_solve_5.5/lp_mipbb.c **** 
 838:lp_solve_5.5/lp_mipbb.c ****         /* Create working copy of ingoing bounds if this is the first perturbation */
 839:lp_solve_5.5/lp_mipbb.c ****         if(tilted == 0)
 7055               		.loc 1 839 0
 7056 2fdc 8981      		ldd r24,Y+1
 7057 2fde 9A81      		ldd r25,Y+2
 7058 2fe0 892B      		or r24,r25
 7059 2fe2 01F4      		brne .L295
 840:lp_solve_5.5/lp_mipbb.c ****           perturbed = BB;
 7060               		.loc 1 840 0
 7061 2fe4 8D89      		ldd r24,Y+21
 7062 2fe6 9E89      		ldd r25,Y+22
 7063 2fe8 9A8B      		std Y+18,r25
 7064 2fea 898B      		std Y+17,r24
 7065               	.L295:
 841:lp_solve_5.5/lp_mipbb.c ****         perturbed = create_BB(lp, perturbed, TRUE);
 7066               		.loc 1 841 0
 7067 2fec 2989      		ldd r18,Y+17
 7068 2fee 3A89      		ldd r19,Y+18
 7069 2ff0 8B89      		ldd r24,Y+19
 7070 2ff2 9C89      		ldd r25,Y+20
 7071 2ff4 41E0      		ldi r20,lo8(1)
 7072 2ff6 B901      		movw r22,r18
 7073 2ff8 0E94 0000 		call create_BB
 7074 2ffc 9A8B      		std Y+18,r25
 7075 2ffe 898B      		std Y+17,r24
 842:lp_solve_5.5/lp_mipbb.c **** 
 843:lp_solve_5.5/lp_mipbb.c ****         /* Perturb/shift variable bounds; also make sure we rebase and recompute
 844:lp_solve_5.5/lp_mipbb.c ****            (no refactorization is necessary, since the basis is unchanged) */
 845:lp_solve_5.5/lp_mipbb.c **** #if 1
 846:lp_solve_5.5/lp_mipbb.c ****         perturb_bounds(lp, perturbed, TRUE, TRUE, TRUE);
 7076               		.loc 1 846 0
 7077 3000 6989      		ldd r22,Y+17
 7078 3002 7A89      		ldd r23,Y+18
 7079 3004 8B89      		ldd r24,Y+19
 7080 3006 9C89      		ldd r25,Y+20
 7081 3008 01E0      		ldi r16,lo8(1)
 7082 300a 21E0      		ldi r18,lo8(1)
 7083 300c 41E0      		ldi r20,lo8(1)
 7084 300e 0E94 0000 		call perturb_bounds
 847:lp_solve_5.5/lp_mipbb.c **** #else
 848:lp_solve_5.5/lp_mipbb.c ****         perturb_bounds(lp, perturbed, TRUE, TRUE, FALSE);
 849:lp_solve_5.5/lp_mipbb.c **** #endif
 850:lp_solve_5.5/lp_mipbb.c ****         impose_bounds(lp, perturbed->upbo, perturbed->lowbo);
 7085               		.loc 1 850 0
 7086 3012 8989      		ldd r24,Y+17
 7087 3014 9A89      		ldd r25,Y+18
 7088 3016 FC01      		movw r30,r24
 7089 3018 42A1      		ldd r20,Z+34
 7090 301a 53A1      		ldd r21,Z+35
 7091 301c 8989      		ldd r24,Y+17
 7092 301e 9A89      		ldd r25,Y+18
 7093 3020 FC01      		movw r30,r24
 7094 3022 20A1      		ldd r18,Z+32
 7095 3024 31A1      		ldd r19,Z+33
 7096 3026 8B89      		ldd r24,Y+19
 7097 3028 9C89      		ldd r25,Y+20
 7098 302a B901      		movw r22,r18
 7099 302c 0E94 0000 		call impose_bounds
 851:lp_solve_5.5/lp_mipbb.c ****         set_action(&lp->spx_action, ACTION_REBASE | ACTION_RECOMPUTE);
 7100               		.loc 1 851 0
 7101 3030 8B89      		ldd r24,Y+19
 7102 3032 9C89      		ldd r25,Y+20
 7103 3034 8E50      		subi r24,14
 7104 3036 9D4F      		sbci r25,-3
 7105 3038 66E0      		ldi r22,lo8(6)
 7106 303a 70E0      		ldi r23,0
 7107 303c 0E94 0000 		call set_action
 852:lp_solve_5.5/lp_mipbb.c ****         BB->UBzerobased = FALSE;
 7108               		.loc 1 852 0
 7109 3040 8D89      		ldd r24,Y+21
 7110 3042 9E89      		ldd r25,Y+22
 7111 3044 FC01      		movw r30,r24
 7112 3046 17AA      		std Z+55,__zero_reg__
 853:lp_solve_5.5/lp_mipbb.c ****         status = RUNNING;
 7113               		.loc 1 853 0
 7114 3048 88E0      		ldi r24,lo8(8)
 7115 304a 90E0      		ldi r25,0
 7116 304c 9E83      		std Y+6,r25
 7117 304e 8D83      		std Y+5,r24
 854:lp_solve_5.5/lp_mipbb.c ****         tilted++;
 7118               		.loc 1 854 0
 7119 3050 8981      		ldd r24,Y+1
 7120 3052 9A81      		ldd r25,Y+2
 7121 3054 0196      		adiw r24,1
 7122 3056 9A83      		std Y+2,r25
 7123 3058 8983      		std Y+1,r24
 855:lp_solve_5.5/lp_mipbb.c ****         lp->perturb_count++;
 7124               		.loc 1 855 0
 7125 305a 8B89      		ldd r24,Y+19
 7126 305c 9C89      		ldd r25,Y+20
 7127 305e 8858      		subi r24,-120
 7128 3060 9D4F      		sbci r25,-3
 7129 3062 FC01      		movw r30,r24
 7130 3064 8081      		ld r24,Z
 7131 3066 9181      		ldd r25,Z+1
 7132 3068 9C01      		movw r18,r24
 7133 306a 2F5F      		subi r18,-1
 7134 306c 3F4F      		sbci r19,-1
 7135 306e 8B89      		ldd r24,Y+19
 7136 3070 9C89      		ldd r25,Y+20
 7137 3072 8858      		subi r24,-120
 7138 3074 9D4F      		sbci r25,-3
 7139 3076 FC01      		movw r30,r24
 7140 3078 3183      		std Z+1,r19
 7141 307a 2083      		st Z,r18
 856:lp_solve_5.5/lp_mipbb.c ****         lp->spx_perturbed = TRUE;
 7142               		.loc 1 856 0
 7143 307c 8B89      		ldd r24,Y+19
 7144 307e 9C89      		ldd r25,Y+20
 7145 3080 8C50      		subi r24,12
 7146 3082 9D4F      		sbci r25,-3
 7147 3084 21E0      		ldi r18,lo8(1)
 7148 3086 FC01      		movw r30,r24
 7149 3088 2083      		st Z,r18
 857:lp_solve_5.5/lp_mipbb.c ****         if(lp->spx_trace)
 7150               		.loc 1 857 0
 7151 308a 8B89      		ldd r24,Y+19
 7152 308c 9C89      		ldd r25,Y+20
 7153 308e 8E5F      		subi r24,-2
 7154 3090 9D4F      		sbci r25,-3
 7155 3092 FC01      		movw r30,r24
 7156 3094 8081      		ld r24,Z
 7157 3096 8823      		tst r24
 7158 3098 01F4      		brne .+2
 7159 309a 00C0      		rjmp .L278
 858:lp_solve_5.5/lp_mipbb.c ****           report(lp, DETAILED, "solve_LP: Starting bound relaxation #%d ('%s')\n",
 7160               		.loc 1 858 0
 7161 309c 2D81      		ldd r18,Y+5
 7162 309e 3E81      		ldd r19,Y+6
 7163 30a0 8B89      		ldd r24,Y+19
 7164 30a2 9C89      		ldd r25,Y+20
 7165 30a4 B901      		movw r22,r18
 7166 30a6 0E94 0000 		call get_statustext
 7167 30aa 292F      		mov r18,r25
 7168 30ac 2F93      		push r18
 7169 30ae 8F93      		push r24
 7170 30b0 8A81      		ldd r24,Y+2
 7171 30b2 8F93      		push r24
 7172 30b4 8981      		ldd r24,Y+1
 7173 30b6 8F93      		push r24
 7174 30b8 80E0      		ldi r24,lo8(.LC3)
 7175 30ba 90E0      		ldi r25,hi8(.LC3)
 7176 30bc 892F      		mov r24,r25
 7177 30be 8F93      		push r24
 7178 30c0 80E0      		ldi r24,lo8(.LC3)
 7179 30c2 90E0      		ldi r25,hi8(.LC3)
 7180 30c4 8F93      		push r24
 7181 30c6 1F92      		push __zero_reg__
 7182 30c8 85E0      		ldi r24,lo8(5)
 7183 30ca 8F93      		push r24
 7184 30cc 8C89      		ldd r24,Y+20
 7185 30ce 8F93      		push r24
 7186 30d0 8B89      		ldd r24,Y+19
 7187 30d2 8F93      		push r24
 7188 30d4 0E94 0000 		call report
 7189 30d8 8DB7      		in r24,__SP_L__
 7190 30da 9EB7      		in r25,__SP_H__
 7191 30dc 0A96      		adiw r24,10
 7192 30de 0FB6      		in __tmp_reg__,__SREG__
 7193 30e0 F894      		cli
 7194 30e2 DEBF      		out __SP_H__,r29
 7195 30e4 0FBE      		out __SREG__,__tmp_reg__
 7196 30e6 CDBF      		out __SP_L__,r28
 857:lp_solve_5.5/lp_mipbb.c ****         if(lp->spx_trace)
 7197               		.loc 1 857 0
 7198 30e8 00C0      		rjmp .L278
 7199               	.L293:
 859:lp_solve_5.5/lp_mipbb.c ****                                tilted, get_statustext(lp, status));
 860:lp_solve_5.5/lp_mipbb.c ****       }
 861:lp_solve_5.5/lp_mipbb.c ****       else  {
 862:lp_solve_5.5/lp_mipbb.c ****         if(lp->spx_trace)
 7200               		.loc 1 862 0
 7201 30ea 8B89      		ldd r24,Y+19
 7202 30ec 9C89      		ldd r25,Y+20
 7203 30ee 8E5F      		subi r24,-2
 7204 30f0 9D4F      		sbci r25,-3
 7205 30f2 FC01      		movw r30,r24
 7206 30f4 8081      		ld r24,Z
 7207 30f6 8823      		tst r24
 7208 30f8 01F0      		breq .L298
 863:lp_solve_5.5/lp_mipbb.c ****           report(lp, DETAILED, "solve_LP: Relaxation limit exceeded in resolving infeasibility\n");
 7209               		.loc 1 863 0
 7210 30fa 80E0      		ldi r24,lo8(.LC4)
 7211 30fc 90E0      		ldi r25,hi8(.LC4)
 7212 30fe 892F      		mov r24,r25
 7213 3100 8F93      		push r24
 7214 3102 80E0      		ldi r24,lo8(.LC4)
 7215 3104 90E0      		ldi r25,hi8(.LC4)
 7216 3106 8F93      		push r24
 7217 3108 1F92      		push __zero_reg__
 7218 310a 85E0      		ldi r24,lo8(5)
 7219 310c 8F93      		push r24
 7220 310e 8C89      		ldd r24,Y+20
 7221 3110 8F93      		push r24
 7222 3112 8B89      		ldd r24,Y+19
 7223 3114 8F93      		push r24
 7224 3116 0E94 0000 		call report
 7225 311a 0F90      		pop __tmp_reg__
 7226 311c 0F90      		pop __tmp_reg__
 7227 311e 0F90      		pop __tmp_reg__
 7228 3120 0F90      		pop __tmp_reg__
 7229 3122 0F90      		pop __tmp_reg__
 7230 3124 0F90      		pop __tmp_reg__
 864:lp_solve_5.5/lp_mipbb.c ****         while((perturbed != NULL) && (perturbed != BB))
 7231               		.loc 1 864 0
 7232 3126 00C0      		rjmp .L298
 7233               	.L300:
 865:lp_solve_5.5/lp_mipbb.c ****           free_BB(&perturbed);
 7234               		.loc 1 865 0
 7235 3128 CE01      		movw r24,r28
 7236 312a 4196      		adiw r24,17
 7237 312c 0E94 0000 		call free_BB
 7238               	.L298:
 864:lp_solve_5.5/lp_mipbb.c ****         while((perturbed != NULL) && (perturbed != BB))
 7239               		.loc 1 864 0
 7240 3130 8989      		ldd r24,Y+17
 7241 3132 9A89      		ldd r25,Y+18
 7242 3134 892B      		or r24,r25
 7243 3136 01F0      		breq .L299
 864:lp_solve_5.5/lp_mipbb.c ****         while((perturbed != NULL) && (perturbed != BB))
 7244               		.loc 1 864 0 is_stmt 0 discriminator 1
 7245 3138 2989      		ldd r18,Y+17
 7246 313a 3A89      		ldd r19,Y+18
 7247 313c 8D89      		ldd r24,Y+21
 7248 313e 9E89      		ldd r25,Y+22
 7249 3140 2817      		cp r18,r24
 7250 3142 3907      		cpc r19,r25
 7251 3144 01F4      		brne .L300
 7252               	.L299:
 866:lp_solve_5.5/lp_mipbb.c ****         perturbed = NULL;
 7253               		.loc 1 866 0 is_stmt 1
 7254 3146 1A8A      		std Y+18,__zero_reg__
 7255 3148 198A      		std Y+17,__zero_reg__
 7256               	.L278:
 795:lp_solve_5.5/lp_mipbb.c **** 
 7257               		.loc 1 795 0
 7258 314a 8D81      		ldd r24,Y+5
 7259 314c 9E81      		ldd r25,Y+6
 7260 314e 0897      		sbiw r24,8
 7261 3150 01F4      		brne .+2
 7262 3152 00C0      		rjmp .L301
 7263 3154 00C0      		rjmp .L281
 7264               	.L334:
 803:lp_solve_5.5/lp_mipbb.c **** 
 7265               		.loc 1 803 0
 7266 3156 0000      		nop
 7267               	.L281:
 867:lp_solve_5.5/lp_mipbb.c ****       }
 868:lp_solve_5.5/lp_mipbb.c ****     }
 869:lp_solve_5.5/lp_mipbb.c ****   }
 870:lp_solve_5.5/lp_mipbb.c **** 
 871:lp_solve_5.5/lp_mipbb.c ****   /* Handle the different simplex outcomes */
 872:lp_solve_5.5/lp_mipbb.c ****   if(status != OPTIMAL) {
 7268               		.loc 1 872 0
 7269 3158 8D81      		ldd r24,Y+5
 7270 315a 9E81      		ldd r25,Y+6
 7271 315c 892B      		or r24,r25
 7272 315e 01F4      		brne .+2
 7273 3160 00C0      		rjmp .L302
 873:lp_solve_5.5/lp_mipbb.c ****     if(lp->bb_level <= 1)
 7274               		.loc 1 873 0
 7275 3162 8B89      		ldd r24,Y+19
 7276 3164 9C89      		ldd r25,Y+20
 7277 3166 805D      		subi r24,-48
 7278 3168 9C4F      		sbci r25,-4
 7279 316a FC01      		movw r30,r24
 7280 316c 8081      		ld r24,Z
 7281 316e 9181      		ldd r25,Z+1
 7282 3170 0297      		sbiw r24,2
 7283 3172 04F4      		brge .L303
 874:lp_solve_5.5/lp_mipbb.c ****       lp->bb_parentOF = lp->infinite;
 7284               		.loc 1 874 0
 7285 3174 8B89      		ldd r24,Y+19
 7286 3176 9C89      		ldd r25,Y+20
 7287 3178 865F      		subi r24,-10
 7288 317a 9C4F      		sbci r25,-4
 7289 317c FC01      		movw r30,r24
 7290 317e 8081      		ld r24,Z
 7291 3180 9181      		ldd r25,Z+1
 7292 3182 A281      		ldd r26,Z+2
 7293 3184 B381      		ldd r27,Z+3
 7294 3186 2B89      		ldd r18,Y+19
 7295 3188 3C89      		ldd r19,Y+20
 7296 318a 225A      		subi r18,-94
 7297 318c 3C4F      		sbci r19,-4
 7298 318e F901      		movw r30,r18
 7299 3190 8083      		st Z,r24
 7300 3192 9183      		std Z+1,r25
 7301 3194 A283      		std Z+2,r26
 7302 3196 B383      		std Z+3,r27
 7303               	.L303:
 875:lp_solve_5.5/lp_mipbb.c ****     if((status == USERABORT) || (status == TIMEOUT)) {
 7304               		.loc 1 875 0
 7305 3198 8D81      		ldd r24,Y+5
 7306 319a 9E81      		ldd r25,Y+6
 7307 319c 0697      		sbiw r24,6
 7308 319e 01F0      		breq .L304
 7309               		.loc 1 875 0 is_stmt 0 discriminator 1
 7310 31a0 8D81      		ldd r24,Y+5
 7311 31a2 9E81      		ldd r25,Y+6
 7312 31a4 0797      		sbiw r24,7
 7313 31a6 01F0      		breq .+2
 7314 31a8 00C0      		rjmp .L305
 7315               	.L304:
 876:lp_solve_5.5/lp_mipbb.c ****       /* Construct the last feasible solution, if available */
 877:lp_solve_5.5/lp_mipbb.c ****       if((lp->solutioncount == 0) &&
 7316               		.loc 1 877 0 is_stmt 1
 7317 31aa 8B89      		ldd r24,Y+19
 7318 31ac 9C89      		ldd r25,Y+20
 7319 31ae 865F      		subi r24,-10
 7320 31b0 9D4F      		sbci r25,-3
 7321 31b2 FC01      		movw r30,r24
 7322 31b4 8081      		ld r24,Z
 7323 31b6 9181      		ldd r25,Z+1
 7324 31b8 892B      		or r24,r25
 7325 31ba 01F4      		brne .L306
 878:lp_solve_5.5/lp_mipbb.c ****          /*
 879:lp_solve_5.5/lp_mipbb.c ****             30/01/08 <peno> added MIP_count test because in following situation thing were wrong:
 880:lp_solve_5.5/lp_mipbb.c ****              - The model contains integers
 881:lp_solve_5.5/lp_mipbb.c ****              - A break at first is set
 882:lp_solve_5.5/lp_mipbb.c ****              - A timeout is set
 883:lp_solve_5.5/lp_mipbb.c ****              - The timeout occurs before a first integer solution is found
 884:lp_solve_5.5/lp_mipbb.c ****              - When the timeout occurs, the simplex algorithm is in phase 2 and has a feasible (but
 885:lp_solve_5.5/lp_mipbb.c ****             If above situation occurs then a (sub-optimal) solution was returned while no integer
 886:lp_solve_5.5/lp_mipbb.c ****             solution isn't found yet at this time
 887:lp_solve_5.5/lp_mipbb.c ****          */
 888:lp_solve_5.5/lp_mipbb.c ****          (MIP_count(lp) == 0) &&
 7326               		.loc 1 888 0 discriminator 1
 7327 31bc 8B89      		ldd r24,Y+19
 7328 31be 9C89      		ldd r25,Y+20
 7329 31c0 0E94 0000 		call MIP_count
 877:lp_solve_5.5/lp_mipbb.c ****          /*
 7330               		.loc 1 877 0 discriminator 1
 7331 31c4 892B      		or r24,r25
 7332 31c6 01F4      		brne .L306
 889:lp_solve_5.5/lp_mipbb.c ****          ((lp->simplex_mode & (SIMPLEX_Phase2_PRIMAL | SIMPLEX_Phase2_DUAL)) > 0)) {
 7333               		.loc 1 889 0
 7334 31c8 8B89      		ldd r24,Y+19
 7335 31ca 9C89      		ldd r25,Y+20
 7336 31cc 8A5A      		subi r24,-86
 7337 31ce 9D4F      		sbci r25,-3
 7338 31d0 FC01      		movw r30,r24
 7339 31d2 8081      		ld r24,Z
 7340 31d4 9181      		ldd r25,Z+1
 7341 31d6 8C70      		andi r24,12
 7342 31d8 9927      		clr r25
 888:lp_solve_5.5/lp_mipbb.c ****          ((lp->simplex_mode & (SIMPLEX_Phase2_PRIMAL | SIMPLEX_Phase2_DUAL)) > 0)) {
 7343               		.loc 1 888 0
 7344 31da 1816      		cp __zero_reg__,r24
 7345 31dc 1906      		cpc __zero_reg__,r25
 7346 31de 04F4      		brge .L306
 890:lp_solve_5.5/lp_mipbb.c ****         lp->solutioncount++;
 7347               		.loc 1 890 0
 7348 31e0 8B89      		ldd r24,Y+19
 7349 31e2 9C89      		ldd r25,Y+20
 7350 31e4 865F      		subi r24,-10
 7351 31e6 9D4F      		sbci r25,-3
 7352 31e8 FC01      		movw r30,r24
 7353 31ea 8081      		ld r24,Z
 7354 31ec 9181      		ldd r25,Z+1
 7355 31ee 9C01      		movw r18,r24
 7356 31f0 2F5F      		subi r18,-1
 7357 31f2 3F4F      		sbci r19,-1
 7358 31f4 8B89      		ldd r24,Y+19
 7359 31f6 9C89      		ldd r25,Y+20
 7360 31f8 865F      		subi r24,-10
 7361 31fa 9D4F      		sbci r25,-3
 7362 31fc FC01      		movw r30,r24
 7363 31fe 3183      		std Z+1,r19
 7364 3200 2083      		st Z,r18
 891:lp_solve_5.5/lp_mipbb.c ****         construct_solution(lp, NULL);
 7365               		.loc 1 891 0
 7366 3202 8B89      		ldd r24,Y+19
 7367 3204 9C89      		ldd r25,Y+20
 7368 3206 60E0      		ldi r22,0
 7369 3208 70E0      		ldi r23,0
 7370 320a 0E94 0000 		call construct_solution
 892:lp_solve_5.5/lp_mipbb.c ****         transfer_solution(lp, TRUE);
 7371               		.loc 1 892 0
 7372 320e 8B89      		ldd r24,Y+19
 7373 3210 9C89      		ldd r25,Y+20
 7374 3212 61E0      		ldi r22,lo8(1)
 7375 3214 0E94 0000 		call transfer_solution
 7376               	.L306:
 893:lp_solve_5.5/lp_mipbb.c ****       }
 894:lp_solve_5.5/lp_mipbb.c ****       /* Return messages */
 895:lp_solve_5.5/lp_mipbb.c ****       report(lp, NORMAL, "\nlp_solve optimization was stopped %s.\n",
 7377               		.loc 1 895 0
 7378 3218 8D81      		ldd r24,Y+5
 7379 321a 9E81      		ldd r25,Y+6
 7380 321c 0697      		sbiw r24,6
 7381 321e 01F4      		brne .L307
 7382               		.loc 1 895 0 is_stmt 0 discriminator 1
 7383 3220 80E0      		ldi r24,lo8(.LC5)
 7384 3222 90E0      		ldi r25,hi8(.LC5)
 7385 3224 00C0      		rjmp .L308
 7386               	.L307:
 7387               		.loc 1 895 0 discriminator 2
 7388 3226 80E0      		ldi r24,lo8(.LC6)
 7389 3228 90E0      		ldi r25,hi8(.LC6)
 7390               	.L308:
 7391               		.loc 1 895 0 discriminator 4
 7392 322a 292F      		mov r18,r25
 7393 322c 2F93      		push r18
 7394 322e 8F93      		push r24
 7395 3230 80E0      		ldi r24,lo8(.LC7)
 7396 3232 90E0      		ldi r25,hi8(.LC7)
 7397 3234 892F      		mov r24,r25
 7398 3236 8F93      		push r24
 7399 3238 80E0      		ldi r24,lo8(.LC7)
 7400 323a 90E0      		ldi r25,hi8(.LC7)
 7401 323c 8F93      		push r24
 7402 323e 1F92      		push __zero_reg__
 7403 3240 84E0      		ldi r24,lo8(4)
 7404 3242 8F93      		push r24
 7405 3244 8C89      		ldd r24,Y+20
 7406 3246 8F93      		push r24
 7407 3248 8B89      		ldd r24,Y+19
 7408 324a 8F93      		push r24
 7409 324c 0E94 0000 		call report
 7410 3250 8DB7      		in r24,__SP_L__
 7411 3252 9EB7      		in r25,__SP_H__
 7412 3254 0896      		adiw r24,8
 7413 3256 0FB6      		in __tmp_reg__,__SREG__
 7414 3258 F894      		cli
 7415 325a DEBF      		out __SP_H__,r29
 7416 325c 0FBE      		out __SREG__,__tmp_reg__
 7417 325e CDBF      		out __SP_L__,r28
 7418 3260 00C0      		rjmp .L315
 7419               	.L305:
 896:lp_solve_5.5/lp_mipbb.c ****                          ((status == USERABORT) ? "by the user" : "due to time-out"));
 897:lp_solve_5.5/lp_mipbb.c ****     }
 898:lp_solve_5.5/lp_mipbb.c ****     else if(BB->varno == 0)
 7420               		.loc 1 898 0 is_stmt 1
 7421 3262 8D89      		ldd r24,Y+21
 7422 3264 9E89      		ldd r25,Y+22
 7423 3266 FC01      		movw r30,r24
 7424 3268 8681      		ldd r24,Z+6
 7425 326a 9781      		ldd r25,Z+7
 7426 326c 892B      		or r24,r25
 7427 326e 01F4      		brne .L310
 899:lp_solve_5.5/lp_mipbb.c ****       report(lp, NORMAL, "The model %s\n",
 7428               		.loc 1 899 0
 7429 3270 8D81      		ldd r24,Y+5
 7430 3272 9E81      		ldd r25,Y+6
 7431 3274 0397      		sbiw r24,3
 7432 3276 01F0      		breq .L311
 900:lp_solve_5.5/lp_mipbb.c ****       (status == UNBOUNDED) ? "is UNBOUNDED" :
 901:lp_solve_5.5/lp_mipbb.c ****       ((status == INFEASIBLE) ? "is INFEASIBLE" : "FAILED"));
 7433               		.loc 1 901 0
 7434 3278 8D81      		ldd r24,Y+5
 7435 327a 9E81      		ldd r25,Y+6
 7436 327c 0297      		sbiw r24,2
 7437 327e 01F4      		brne .L312
 7438               		.loc 1 901 0 is_stmt 0 discriminator 1
 7439 3280 80E0      		ldi r24,lo8(.LC8)
 7440 3282 90E0      		ldi r25,hi8(.LC8)
 7441 3284 00C0      		rjmp .L314
 7442               	.L312:
 7443               		.loc 1 901 0 discriminator 2
 7444 3286 80E0      		ldi r24,lo8(.LC9)
 7445 3288 90E0      		ldi r25,hi8(.LC9)
 7446 328a 00C0      		rjmp .L314
 7447               	.L311:
 899:lp_solve_5.5/lp_mipbb.c ****       report(lp, NORMAL, "The model %s\n",
 7448               		.loc 1 899 0 is_stmt 1 discriminator 1
 7449 328c 80E0      		ldi r24,lo8(.LC10)
 7450 328e 90E0      		ldi r25,hi8(.LC10)
 7451               	.L314:
 899:lp_solve_5.5/lp_mipbb.c ****       report(lp, NORMAL, "The model %s\n",
 7452               		.loc 1 899 0 is_stmt 0 discriminator 3
 7453 3290 292F      		mov r18,r25
 7454 3292 2F93      		push r18
 7455 3294 8F93      		push r24
 7456 3296 80E0      		ldi r24,lo8(.LC11)
 7457 3298 90E0      		ldi r25,hi8(.LC11)
 7458 329a 892F      		mov r24,r25
 7459 329c 8F93      		push r24
 7460 329e 80E0      		ldi r24,lo8(.LC11)
 7461 32a0 90E0      		ldi r25,hi8(.LC11)
 7462 32a2 8F93      		push r24
 7463 32a4 1F92      		push __zero_reg__
 7464 32a6 84E0      		ldi r24,lo8(4)
 7465 32a8 8F93      		push r24
 7466 32aa 8C89      		ldd r24,Y+20
 7467 32ac 8F93      		push r24
 7468 32ae 8B89      		ldd r24,Y+19
 7469 32b0 8F93      		push r24
 7470 32b2 0E94 0000 		call report
 7471 32b6 8DB7      		in r24,__SP_L__
 7472 32b8 9EB7      		in r25,__SP_H__
 7473 32ba 0896      		adiw r24,8
 7474 32bc 0FB6      		in __tmp_reg__,__SREG__
 7475 32be F894      		cli
 7476 32c0 DEBF      		out __SP_H__,r29
 7477 32c2 0FBE      		out __SREG__,__tmp_reg__
 7478 32c4 CDBF      		out __SP_L__,r28
 7479 32c6 00C0      		rjmp .L315
 7480               	.L310:
 902:lp_solve_5.5/lp_mipbb.c ****     else {
 903:lp_solve_5.5/lp_mipbb.c **** #ifdef Paranoia
 904:lp_solve_5.5/lp_mipbb.c ****       if((status != FATHOMED) && (status != INFEASIBLE))
 905:lp_solve_5.5/lp_mipbb.c ****         report(lp, SEVERE, "spx_solve: Invalid return code %d during B&B\n", status);
 906:lp_solve_5.5/lp_mipbb.c **** #endif
 907:lp_solve_5.5/lp_mipbb.c ****       /* If we fathomed a node due to an inferior OF having been detected, return infeasible */
 908:lp_solve_5.5/lp_mipbb.c ****       if(status == FATHOMED)
 7481               		.loc 1 908 0 is_stmt 1
 7482 32c8 8D81      		ldd r24,Y+5
 7483 32ca 9E81      		ldd r25,Y+6
 7484 32cc 0E97      		sbiw r24,14
 7485 32ce 01F0      		breq .+2
 7486 32d0 00C0      		rjmp .L315
 909:lp_solve_5.5/lp_mipbb.c ****         lp->spx_status = INFEASIBLE;
 7487               		.loc 1 909 0
 7488 32d2 8B89      		ldd r24,Y+19
 7489 32d4 9C89      		ldd r25,Y+20
 7490 32d6 8A5F      		subi r24,-6
 7491 32d8 9D4F      		sbci r25,-3
 7492 32da 22E0      		ldi r18,lo8(2)
 7493 32dc 30E0      		ldi r19,0
 7494 32de FC01      		movw r30,r24
 7495 32e0 3183      		std Z+1,r19
 7496 32e2 2083      		st Z,r18
 7497 32e4 00C0      		rjmp .L315
 7498               	.L302:
 910:lp_solve_5.5/lp_mipbb.c ****     }
 911:lp_solve_5.5/lp_mipbb.c ****   }
 912:lp_solve_5.5/lp_mipbb.c **** 
 913:lp_solve_5.5/lp_mipbb.c ****   else { /* ... there is a good solution */
 914:lp_solve_5.5/lp_mipbb.c ****     construct_solution(lp, NULL);
 7499               		.loc 1 914 0
 7500 32e6 8B89      		ldd r24,Y+19
 7501 32e8 9C89      		ldd r25,Y+20
 7502 32ea 60E0      		ldi r22,0
 7503 32ec 70E0      		ldi r23,0
 7504 32ee 0E94 0000 		call construct_solution
 915:lp_solve_5.5/lp_mipbb.c ****     if((lp->bb_level <= 1) && (restored > 0))
 7505               		.loc 1 915 0
 7506 32f2 8B89      		ldd r24,Y+19
 7507 32f4 9C89      		ldd r25,Y+20
 7508 32f6 805D      		subi r24,-48
 7509 32f8 9C4F      		sbci r25,-4
 7510 32fa FC01      		movw r30,r24
 7511 32fc 8081      		ld r24,Z
 7512 32fe 9181      		ldd r25,Z+1
 7513 3300 0297      		sbiw r24,2
 7514 3302 04F4      		brge .L316
 7515               		.loc 1 915 0 is_stmt 0 discriminator 1
 7516 3304 8B81      		ldd r24,Y+3
 7517 3306 9C81      		ldd r25,Y+4
 7518 3308 1816      		cp __zero_reg__,r24
 7519 330a 1906      		cpc __zero_reg__,r25
 7520 330c 04F4      		brge .L316
 916:lp_solve_5.5/lp_mipbb.c ****       report(lp, DETAILED, "%s numerics encountered; validate accuracy\n",
 7521               		.loc 1 916 0 is_stmt 1
 7522 330e 8B81      		ldd r24,Y+3
 7523 3310 9C81      		ldd r25,Y+4
 7524 3312 0197      		sbiw r24,1
 7525 3314 01F4      		brne .L317
 7526               		.loc 1 916 0 is_stmt 0 discriminator 1
 7527 3316 80E0      		ldi r24,lo8(.LC12)
 7528 3318 90E0      		ldi r25,hi8(.LC12)
 7529 331a 00C0      		rjmp .L318
 7530               	.L317:
 7531               		.loc 1 916 0 discriminator 2
 7532 331c 80E0      		ldi r24,lo8(.LC13)
 7533 331e 90E0      		ldi r25,hi8(.LC13)
 7534               	.L318:
 7535               		.loc 1 916 0 discriminator 4
 7536 3320 292F      		mov r18,r25
 7537 3322 2F93      		push r18
 7538 3324 8F93      		push r24
 7539 3326 80E0      		ldi r24,lo8(.LC14)
 7540 3328 90E0      		ldi r25,hi8(.LC14)
 7541 332a 892F      		mov r24,r25
 7542 332c 8F93      		push r24
 7543 332e 80E0      		ldi r24,lo8(.LC14)
 7544 3330 90E0      		ldi r25,hi8(.LC14)
 7545 3332 8F93      		push r24
 7546 3334 1F92      		push __zero_reg__
 7547 3336 85E0      		ldi r24,lo8(5)
 7548 3338 8F93      		push r24
 7549 333a 8C89      		ldd r24,Y+20
 7550 333c 8F93      		push r24
 7551 333e 8B89      		ldd r24,Y+19
 7552 3340 8F93      		push r24
 7553 3342 0E94 0000 		call report
 7554 3346 8DB7      		in r24,__SP_L__
 7555 3348 9EB7      		in r25,__SP_H__
 7556 334a 0896      		adiw r24,8
 7557 334c 0FB6      		in __tmp_reg__,__SREG__
 7558 334e F894      		cli
 7559 3350 DEBF      		out __SP_H__,r29
 7560 3352 0FBE      		out __SREG__,__tmp_reg__
 7561 3354 CDBF      		out __SP_L__,r28
 7562               	.L316:
 917:lp_solve_5.5/lp_mipbb.c ****                  (restored == 1) ? "Difficult" : "Severe");
 918:lp_solve_5.5/lp_mipbb.c ****     /* Handle case where a user bound on the OF was found to
 919:lp_solve_5.5/lp_mipbb.c ****        have been set too aggressively, giving an infeasible model */
 920:lp_solve_5.5/lp_mipbb.c ****     if(lp->spx_status != OPTIMAL)
 7563               		.loc 1 920 0 is_stmt 1
 7564 3356 8B89      		ldd r24,Y+19
 7565 3358 9C89      		ldd r25,Y+20
 7566 335a 8A5F      		subi r24,-6
 7567 335c 9D4F      		sbci r25,-3
 7568 335e FC01      		movw r30,r24
 7569 3360 8081      		ld r24,Z
 7570 3362 9181      		ldd r25,Z+1
 7571 3364 892B      		or r24,r25
 7572 3366 01F0      		breq .L319
 921:lp_solve_5.5/lp_mipbb.c ****       status = lp->spx_status;
 7573               		.loc 1 921 0
 7574 3368 8B89      		ldd r24,Y+19
 7575 336a 9C89      		ldd r25,Y+20
 7576 336c 8A5F      		subi r24,-6
 7577 336e 9D4F      		sbci r25,-3
 7578 3370 FC01      		movw r30,r24
 7579 3372 8081      		ld r24,Z
 7580 3374 9181      		ldd r25,Z+1
 7581 3376 9E83      		std Y+6,r25
 7582 3378 8D83      		std Y+5,r24
 7583 337a 00C0      		rjmp .L320
 7584               	.L319:
 922:lp_solve_5.5/lp_mipbb.c **** 
 923:lp_solve_5.5/lp_mipbb.c ****     else if((lp->bb_totalnodes == 0) && (MIP_count(lp) > 0)) {
 7585               		.loc 1 923 0
 7586 337c 8B89      		ldd r24,Y+19
 7587 337e 9C89      		ldd r25,Y+20
 7588 3380 8A5C      		subi r24,-54
 7589 3382 9C4F      		sbci r25,-4
 7590 3384 FC01      		movw r30,r24
 7591 3386 A080      		ld r10,Z
 7592 3388 FC01      		movw r30,r24
 7593 338a B180      		ldd r11,Z+1
 7594 338c FC01      		movw r30,r24
 7595 338e C280      		ldd r12,Z+2
 7596 3390 FC01      		movw r30,r24
 7597 3392 D380      		ldd r13,Z+3
 7598 3394 FC01      		movw r30,r24
 7599 3396 E480      		ldd r14,Z+4
 7600 3398 FC01      		movw r30,r24
 7601 339a F580      		ldd r15,Z+5
 7602 339c FC01      		movw r30,r24
 7603 339e 0681      		ldd r16,Z+6
 7604 33a0 FC01      		movw r30,r24
 7605 33a2 1781      		ldd r17,Z+7
 7606 33a4 2A2D      		mov r18,r10
 7607 33a6 3B2D      		mov r19,r11
 7608 33a8 4C2D      		mov r20,r12
 7609 33aa 5D2D      		mov r21,r13
 7610 33ac 6E2D      		mov r22,r14
 7611 33ae 7F2D      		mov r23,r15
 7612 33b0 802F      		mov r24,r16
 7613 33b2 912F      		mov r25,r17
 7614 33b4 A0E0      		ldi r26,0
 7615 33b6 0E94 0000 		call __cmpdi2_s8
 7616 33ba 01F0      		breq .+2
 7617 33bc 00C0      		rjmp .L320
 7618               		.loc 1 923 0 is_stmt 0 discriminator 1
 7619 33be 8B89      		ldd r24,Y+19
 7620 33c0 9C89      		ldd r25,Y+20
 7621 33c2 0E94 0000 		call MIP_count
 7622 33c6 1816      		cp __zero_reg__,r24
 7623 33c8 1906      		cpc __zero_reg__,r25
 7624 33ca 04F0      		brlt .+2
 7625 33cc 00C0      		rjmp .L320
 924:lp_solve_5.5/lp_mipbb.c ****       if(lp->lag_status != RUNNING) {
 7626               		.loc 1 924 0 is_stmt 1
 7627 33ce 8B89      		ldd r24,Y+19
 7628 33d0 9C89      		ldd r25,Y+20
 7629 33d2 885F      		subi r24,-8
 7630 33d4 9D4F      		sbci r25,-3
 7631 33d6 FC01      		movw r30,r24
 7632 33d8 8081      		ld r24,Z
 7633 33da 9181      		ldd r25,Z+1
 7634 33dc 0897      		sbiw r24,8
 7635 33de 01F4      		brne .+2
 7636 33e0 00C0      		rjmp .L321
 925:lp_solve_5.5/lp_mipbb.c ****         report(lp, NORMAL, "\nRelaxed solution  " RESULTVALUEMASK " after %10.0f iter is B&B base.\
 926:lp_solve_5.5/lp_mipbb.c ****                            lp->solution[0], (double) lp->total_iter);
 7637               		.loc 1 926 0
 7638 33e2 8B89      		ldd r24,Y+19
 7639 33e4 9C89      		ldd r25,Y+20
 7640 33e6 885C      		subi r24,-56
 7641 33e8 9D4F      		sbci r25,-3
 7642 33ea FC01      		movw r30,r24
 7643 33ec A080      		ld r10,Z
 7644 33ee FC01      		movw r30,r24
 7645 33f0 B180      		ldd r11,Z+1
 7646 33f2 FC01      		movw r30,r24
 7647 33f4 C280      		ldd r12,Z+2
 7648 33f6 FC01      		movw r30,r24
 7649 33f8 D380      		ldd r13,Z+3
 7650 33fa FC01      		movw r30,r24
 7651 33fc E480      		ldd r14,Z+4
 7652 33fe FC01      		movw r30,r24
 7653 3400 F580      		ldd r15,Z+5
 7654 3402 FC01      		movw r30,r24
 7655 3404 0681      		ldd r16,Z+6
 7656 3406 FC01      		movw r30,r24
 7657 3408 1781      		ldd r17,Z+7
 925:lp_solve_5.5/lp_mipbb.c ****         report(lp, NORMAL, "\nRelaxed solution  " RESULTVALUEMASK " after %10.0f iter is B&B base.\
 7658               		.loc 1 925 0
 7659 340a 2A2D      		mov r18,r10
 7660 340c 3B2D      		mov r19,r11
 7661 340e 4C2D      		mov r20,r12
 7662 3410 5D2D      		mov r21,r13
 7663 3412 6E2D      		mov r22,r14
 7664 3414 7F2D      		mov r23,r15
 7665 3416 802F      		mov r24,r16
 7666 3418 912F      		mov r25,r17
 7667 341a 0E94 0000 		call __floatdisf
 7668 341e 9B01      		movw r18,r22
 7669 3420 AC01      		movw r20,r24
 7670               		.loc 1 926 0
 7671 3422 8B89      		ldd r24,Y+19
 7672 3424 9C89      		ldd r25,Y+20
 7673 3426 8E5E      		subi r24,-18
 7674 3428 9D4F      		sbci r25,-3
 7675 342a FC01      		movw r30,r24
 7676 342c 8081      		ld r24,Z
 7677 342e 9181      		ldd r25,Z+1
 925:lp_solve_5.5/lp_mipbb.c ****         report(lp, NORMAL, "\nRelaxed solution  " RESULTVALUEMASK " after %10.0f iter is B&B base.\
 7678               		.loc 1 925 0
 7679 3430 FC01      		movw r30,r24
 7680 3432 8081      		ld r24,Z
 7681 3434 9181      		ldd r25,Z+1
 7682 3436 A281      		ldd r26,Z+2
 7683 3438 B381      		ldd r27,Z+3
 7684 343a 652F      		mov r22,r21
 7685 343c 6F93      		push r22
 7686 343e 642F      		mov r22,r20
 7687 3440 6F93      		push r22
 7688 3442 632F      		mov r22,r19
 7689 3444 6F93      		push r22
 7690 3446 2F93      		push r18
 7691 3448 2B2F      		mov r18,r27
 7692 344a 2F93      		push r18
 7693 344c 2A2F      		mov r18,r26
 7694 344e 2F93      		push r18
 7695 3450 292F      		mov r18,r25
 7696 3452 2F93      		push r18
 7697 3454 8F93      		push r24
 7698 3456 80E0      		ldi r24,lo8(.LC15)
 7699 3458 90E0      		ldi r25,hi8(.LC15)
 7700 345a 892F      		mov r24,r25
 7701 345c 8F93      		push r24
 7702 345e 80E0      		ldi r24,lo8(.LC15)
 7703 3460 90E0      		ldi r25,hi8(.LC15)
 7704 3462 8F93      		push r24
 7705 3464 1F92      		push __zero_reg__
 7706 3466 84E0      		ldi r24,lo8(4)
 7707 3468 8F93      		push r24
 7708 346a 8C89      		ldd r24,Y+20
 7709 346c 8F93      		push r24
 7710 346e 8B89      		ldd r24,Y+19
 7711 3470 8F93      		push r24
 7712 3472 0E94 0000 		call report
 7713 3476 8DB7      		in r24,__SP_L__
 7714 3478 9EB7      		in r25,__SP_H__
 7715 347a 0E96      		adiw r24,14
 7716 347c 0FB6      		in __tmp_reg__,__SREG__
 7717 347e F894      		cli
 7718 3480 DEBF      		out __SP_H__,r29
 7719 3482 0FBE      		out __SREG__,__tmp_reg__
 7720 3484 CDBF      		out __SP_L__,r28
 927:lp_solve_5.5/lp_mipbb.c ****         report(lp, NORMAL, " \n");
 7721               		.loc 1 927 0
 7722 3486 80E0      		ldi r24,lo8(.LC16)
 7723 3488 90E0      		ldi r25,hi8(.LC16)
 7724 348a 892F      		mov r24,r25
 7725 348c 8F93      		push r24
 7726 348e 80E0      		ldi r24,lo8(.LC16)
 7727 3490 90E0      		ldi r25,hi8(.LC16)
 7728 3492 8F93      		push r24
 7729 3494 1F92      		push __zero_reg__
 7730 3496 84E0      		ldi r24,lo8(4)
 7731 3498 8F93      		push r24
 7732 349a 8C89      		ldd r24,Y+20
 7733 349c 8F93      		push r24
 7734 349e 8B89      		ldd r24,Y+19
 7735 34a0 8F93      		push r24
 7736 34a2 0E94 0000 		call report
 7737 34a6 0F90      		pop __tmp_reg__
 7738 34a8 0F90      		pop __tmp_reg__
 7739 34aa 0F90      		pop __tmp_reg__
 7740 34ac 0F90      		pop __tmp_reg__
 7741 34ae 0F90      		pop __tmp_reg__
 7742 34b0 0F90      		pop __tmp_reg__
 7743               	.L321:
 928:lp_solve_5.5/lp_mipbb.c ****       }
 929:lp_solve_5.5/lp_mipbb.c ****       if((lp->usermessage != NULL) && (lp->msgmask & MSG_LPOPTIMAL)) {
 7744               		.loc 1 929 0
 7745 34b2 8B89      		ldd r24,Y+19
 7746 34b4 9C89      		ldd r25,Y+20
 7747 34b6 9C5F      		subi r25,-4
 7748 34b8 FC01      		movw r30,r24
 7749 34ba 8081      		ld r24,Z
 7750 34bc 9181      		ldd r25,Z+1
 7751 34be 892B      		or r24,r25
 7752 34c0 01F4      		brne .+2
 7753 34c2 00C0      		rjmp .L322
 7754               		.loc 1 929 0 is_stmt 0 discriminator 1
 7755 34c4 8B89      		ldd r24,Y+19
 7756 34c6 9C89      		ldd r25,Y+20
 7757 34c8 8E5F      		subi r24,-2
 7758 34ca 9B4F      		sbci r25,-5
 7759 34cc FC01      		movw r30,r24
 7760 34ce 8081      		ld r24,Z
 7761 34d0 9181      		ldd r25,Z+1
 7762 34d2 8071      		andi r24,16
 7763 34d4 9927      		clr r25
 7764 34d6 892B      		or r24,r25
 7765 34d8 01F0      		breq .L322
 7766               	.LBB4:
 930:lp_solve_5.5/lp_mipbb.c ****         REAL *best_solution = lp->best_solution;
 7767               		.loc 1 930 0 is_stmt 1
 7768 34da 8B89      		ldd r24,Y+19
 7769 34dc 9C89      		ldd r25,Y+20
 7770 34de 8C5E      		subi r24,-20
 7771 34e0 9D4F      		sbci r25,-3
 7772 34e2 FC01      		movw r30,r24
 7773 34e4 8081      		ld r24,Z
 7774 34e6 9181      		ldd r25,Z+1
 7775 34e8 9C87      		std Y+12,r25
 7776 34ea 8B87      		std Y+11,r24
 931:lp_solve_5.5/lp_mipbb.c **** 
 932:lp_solve_5.5/lp_mipbb.c ****         /* transfer_solution(lp, TRUE); */
 933:lp_solve_5.5/lp_mipbb.c ****         lp->best_solution = lp->solution;
 7777               		.loc 1 933 0
 7778 34ec 8B89      		ldd r24,Y+19
 7779 34ee 9C89      		ldd r25,Y+20
 7780 34f0 8E5E      		subi r24,-18
 7781 34f2 9D4F      		sbci r25,-3
 7782 34f4 FC01      		movw r30,r24
 7783 34f6 2081      		ld r18,Z
 7784 34f8 3181      		ldd r19,Z+1
 7785 34fa 8B89      		ldd r24,Y+19
 7786 34fc 9C89      		ldd r25,Y+20
 7787 34fe 8C5E      		subi r24,-20
 7788 3500 9D4F      		sbci r25,-3
 7789 3502 FC01      		movw r30,r24
 7790 3504 3183      		std Z+1,r19
 7791 3506 2083      		st Z,r18
 934:lp_solve_5.5/lp_mipbb.c ****         lp->usermessage(lp, lp->msghandle, MSG_LPOPTIMAL);
 7792               		.loc 1 934 0
 7793 3508 8B89      		ldd r24,Y+19
 7794 350a 9C89      		ldd r25,Y+20
 7795 350c 9C5F      		subi r25,-4
 7796 350e FC01      		movw r30,r24
 7797 3510 2081      		ld r18,Z
 7798 3512 3181      		ldd r19,Z+1
 7799 3514 8B89      		ldd r24,Y+19
 7800 3516 9C89      		ldd r25,Y+20
 7801 3518 8C5F      		subi r24,-4
 7802 351a 9B4F      		sbci r25,-5
 7803 351c FC01      		movw r30,r24
 7804 351e 6081      		ld r22,Z
 7805 3520 7181      		ldd r23,Z+1
 7806 3522 8B89      		ldd r24,Y+19
 7807 3524 9C89      		ldd r25,Y+20
 7808 3526 40E1      		ldi r20,lo8(16)
 7809 3528 50E0      		ldi r21,0
 7810 352a F901      		movw r30,r18
 7811 352c 0995      		icall
 935:lp_solve_5.5/lp_mipbb.c ****         lp->best_solution = best_solution;
 7812               		.loc 1 935 0
 7813 352e 8B89      		ldd r24,Y+19
 7814 3530 9C89      		ldd r25,Y+20
 7815 3532 8C5E      		subi r24,-20
 7816 3534 9D4F      		sbci r25,-3
 7817 3536 2B85      		ldd r18,Y+11
 7818 3538 3C85      		ldd r19,Y+12
 7819 353a FC01      		movw r30,r24
 7820 353c 3183      		std Z+1,r19
 7821 353e 2083      		st Z,r18
 7822               	.L322:
 7823               	.LBE4:
 936:lp_solve_5.5/lp_mipbb.c ****       }
 937:lp_solve_5.5/lp_mipbb.c ****       set_var_priority(lp);
 7824               		.loc 1 937 0
 7825 3540 8B89      		ldd r24,Y+19
 7826 3542 9C89      		ldd r25,Y+20
 7827 3544 0E94 0000 		call set_var_priority
 7828               	.L320:
 938:lp_solve_5.5/lp_mipbb.c ****     }
 939:lp_solve_5.5/lp_mipbb.c **** 
 940:lp_solve_5.5/lp_mipbb.c ****    /* Check if we have a numeric problem (an earlier version of this code used the
 941:lp_solve_5.5/lp_mipbb.c ****       absolute difference, but it is not robust for large-valued OFs) */
 942:lp_solve_5.5/lp_mipbb.c ****     testOF = my_chsign(is_maxim(lp), my_reldiff(lp->solution[0], lp->real_solution));
 7829               		.loc 1 942 0
 7830 3548 8B89      		ldd r24,Y+19
 7831 354a 9C89      		ldd r25,Y+20
 7832 354c 0E94 0000 		call is_maxim
 7833 3550 8823      		tst r24
 7834 3552 01F4      		brne .+2
 7835 3554 00C0      		rjmp .L323
 7836               		.loc 1 942 0 is_stmt 0 discriminator 1
 7837 3556 8B89      		ldd r24,Y+19
 7838 3558 9C89      		ldd r25,Y+20
 7839 355a 8E5E      		subi r24,-18
 7840 355c 9D4F      		sbci r25,-3
 7841 355e FC01      		movw r30,r24
 7842 3560 8081      		ld r24,Z
 7843 3562 9181      		ldd r25,Z+1
 7844 3564 FC01      		movw r30,r24
 7845 3566 8081      		ld r24,Z
 7846 3568 9181      		ldd r25,Z+1
 7847 356a A281      		ldd r26,Z+2
 7848 356c B381      		ldd r27,Z+3
 7849 356e 2B89      		ldd r18,Y+19
 7850 3570 3C89      		ldd r19,Y+20
 7851 3572 225F      		subi r18,-14
 7852 3574 3D4F      		sbci r19,-3
 7853 3576 F901      		movw r30,r18
 7854 3578 2081      		ld r18,Z
 7855 357a 3181      		ldd r19,Z+1
 7856 357c 4281      		ldd r20,Z+2
 7857 357e 5381      		ldd r21,Z+3
 7858 3580 BC01      		movw r22,r24
 7859 3582 CD01      		movw r24,r26
 7860 3584 0E94 0000 		call __subsf3
 7861 3588 DC01      		movw r26,r24
 7862 358a CB01      		movw r24,r22
 7863 358c 6C01      		movw r12,r24
 7864 358e 7D01      		movw r14,r26
 7865 3590 8B89      		ldd r24,Y+19
 7866 3592 9C89      		ldd r25,Y+20
 7867 3594 825F      		subi r24,-14
 7868 3596 9D4F      		sbci r25,-3
 7869 3598 FC01      		movw r30,r24
 7870 359a 8081      		ld r24,Z
 7871 359c 9181      		ldd r25,Z+1
 7872 359e A281      		ldd r26,Z+2
 7873 35a0 B381      		ldd r27,Z+3
 7874 35a2 BF77      		andi r27,0x7f
 7875 35a4 20E0      		ldi r18,0
 7876 35a6 30E0      		ldi r19,0
 7877 35a8 40E8      		ldi r20,lo8(-128)
 7878 35aa 5FE3      		ldi r21,lo8(63)
 7879 35ac BC01      		movw r22,r24
 7880 35ae CD01      		movw r24,r26
 7881 35b0 0E94 0000 		call __addsf3
 7882 35b4 DC01      		movw r26,r24
 7883 35b6 CB01      		movw r24,r22
 7884 35b8 9C01      		movw r18,r24
 7885 35ba AD01      		movw r20,r26
 7886 35bc C701      		movw r24,r14
 7887 35be B601      		movw r22,r12
 7888 35c0 0E94 0000 		call __divsf3
 7889 35c4 DC01      		movw r26,r24
 7890 35c6 CB01      		movw r24,r22
 7891 35c8 20E0      		ldi r18,0
 7892 35ca 30E0      		ldi r19,0
 7893 35cc A901      		movw r20,r18
 7894 35ce BC01      		movw r22,r24
 7895 35d0 CD01      		movw r24,r26
 7896 35d2 0E94 0000 		call __nesf2
 7897 35d6 8823      		tst r24
 7898 35d8 01F0      		breq .L323
 7899               		.loc 1 942 0 discriminator 3
 7900 35da 8B89      		ldd r24,Y+19
 7901 35dc 9C89      		ldd r25,Y+20
 7902 35de 8E5E      		subi r24,-18
 7903 35e0 9D4F      		sbci r25,-3
 7904 35e2 FC01      		movw r30,r24
 7905 35e4 8081      		ld r24,Z
 7906 35e6 9181      		ldd r25,Z+1
 7907 35e8 FC01      		movw r30,r24
 7908 35ea 8081      		ld r24,Z
 7909 35ec 9181      		ldd r25,Z+1
 7910 35ee A281      		ldd r26,Z+2
 7911 35f0 B381      		ldd r27,Z+3
 7912 35f2 2B89      		ldd r18,Y+19
 7913 35f4 3C89      		ldd r19,Y+20
 7914 35f6 225F      		subi r18,-14
 7915 35f8 3D4F      		sbci r19,-3
 7916 35fa F901      		movw r30,r18
 7917 35fc 2081      		ld r18,Z
 7918 35fe 3181      		ldd r19,Z+1
 7919 3600 4281      		ldd r20,Z+2
 7920 3602 5381      		ldd r21,Z+3
 7921 3604 BC01      		movw r22,r24
 7922 3606 CD01      		movw r24,r26
 7923 3608 0E94 0000 		call __subsf3
 7924 360c DC01      		movw r26,r24
 7925 360e CB01      		movw r24,r22
 7926 3610 6C01      		movw r12,r24
 7927 3612 7D01      		movw r14,r26
 7928 3614 8B89      		ldd r24,Y+19
 7929 3616 9C89      		ldd r25,Y+20
 7930 3618 825F      		subi r24,-14
 7931 361a 9D4F      		sbci r25,-3
 7932 361c FC01      		movw r30,r24
 7933 361e 8081      		ld r24,Z
 7934 3620 9181      		ldd r25,Z+1
 7935 3622 A281      		ldd r26,Z+2
 7936 3624 B381      		ldd r27,Z+3
 7937 3626 BF77      		andi r27,0x7f
 7938 3628 20E0      		ldi r18,0
 7939 362a 30E0      		ldi r19,0
 7940 362c 40E8      		ldi r20,lo8(-128)
 7941 362e 5FE3      		ldi r21,lo8(63)
 7942 3630 BC01      		movw r22,r24
 7943 3632 CD01      		movw r24,r26
 7944 3634 0E94 0000 		call __addsf3
 7945 3638 DC01      		movw r26,r24
 7946 363a CB01      		movw r24,r22
 7947 363c 9C01      		movw r18,r24
 7948 363e AD01      		movw r20,r26
 7949 3640 C701      		movw r24,r14
 7950 3642 B601      		movw r22,r12
 7951 3644 0E94 0000 		call __divsf3
 7952 3648 DC01      		movw r26,r24
 7953 364a CB01      		movw r24,r22
 7954 364c B058      		subi r27,0x80
 7955 364e 00C0      		rjmp .L325
 7956               	.L323:
 7957               		.loc 1 942 0 discriminator 4
 7958 3650 8B89      		ldd r24,Y+19
 7959 3652 9C89      		ldd r25,Y+20
 7960 3654 8E5E      		subi r24,-18
 7961 3656 9D4F      		sbci r25,-3
 7962 3658 FC01      		movw r30,r24
 7963 365a 8081      		ld r24,Z
 7964 365c 9181      		ldd r25,Z+1
 7965 365e FC01      		movw r30,r24
 7966 3660 8081      		ld r24,Z
 7967 3662 9181      		ldd r25,Z+1
 7968 3664 A281      		ldd r26,Z+2
 7969 3666 B381      		ldd r27,Z+3
 7970 3668 2B89      		ldd r18,Y+19
 7971 366a 3C89      		ldd r19,Y+20
 7972 366c 225F      		subi r18,-14
 7973 366e 3D4F      		sbci r19,-3
 7974 3670 F901      		movw r30,r18
 7975 3672 2081      		ld r18,Z
 7976 3674 3181      		ldd r19,Z+1
 7977 3676 4281      		ldd r20,Z+2
 7978 3678 5381      		ldd r21,Z+3
 7979 367a BC01      		movw r22,r24
 7980 367c CD01      		movw r24,r26
 7981 367e 0E94 0000 		call __subsf3
 7982 3682 DC01      		movw r26,r24
 7983 3684 CB01      		movw r24,r22
 7984 3686 6C01      		movw r12,r24
 7985 3688 7D01      		movw r14,r26
 7986 368a 8B89      		ldd r24,Y+19
 7987 368c 9C89      		ldd r25,Y+20
 7988 368e 825F      		subi r24,-14
 7989 3690 9D4F      		sbci r25,-3
 7990 3692 FC01      		movw r30,r24
 7991 3694 8081      		ld r24,Z
 7992 3696 9181      		ldd r25,Z+1
 7993 3698 A281      		ldd r26,Z+2
 7994 369a B381      		ldd r27,Z+3
 7995 369c BF77      		andi r27,0x7f
 7996 369e 20E0      		ldi r18,0
 7997 36a0 30E0      		ldi r19,0
 7998 36a2 40E8      		ldi r20,lo8(-128)
 7999 36a4 5FE3      		ldi r21,lo8(63)
 8000 36a6 BC01      		movw r22,r24
 8001 36a8 CD01      		movw r24,r26
 8002 36aa 0E94 0000 		call __addsf3
 8003 36ae DC01      		movw r26,r24
 8004 36b0 CB01      		movw r24,r22
 8005 36b2 9C01      		movw r18,r24
 8006 36b4 AD01      		movw r20,r26
 8007 36b6 C701      		movw r24,r14
 8008 36b8 B601      		movw r22,r12
 8009 36ba 0E94 0000 		call __divsf3
 8010 36be DC01      		movw r26,r24
 8011 36c0 CB01      		movw r24,r22
 8012               	.L325:
 8013               		.loc 1 942 0 discriminator 6
 8014 36c2 8D87      		std Y+13,r24
 8015 36c4 9E87      		std Y+14,r25
 8016 36c6 AF87      		std Y+15,r26
 8017 36c8 B88B      		std Y+16,r27
 943:lp_solve_5.5/lp_mipbb.c ****     if(testOF < -lp->epsprimal) {
 8018               		.loc 1 943 0 is_stmt 1 discriminator 6
 8019 36ca 8B89      		ldd r24,Y+19
 8020 36cc 9C89      		ldd r25,Y+20
 8021 36ce 865E      		subi r24,-26
 8022 36d0 9C4F      		sbci r25,-4
 8023 36d2 FC01      		movw r30,r24
 8024 36d4 8081      		ld r24,Z
 8025 36d6 9181      		ldd r25,Z+1
 8026 36d8 A281      		ldd r26,Z+2
 8027 36da B381      		ldd r27,Z+3
 8028 36dc B058      		subi r27,0x80
 8029 36de 2D85      		ldd r18,Y+13
 8030 36e0 3E85      		ldd r19,Y+14
 8031 36e2 4F85      		ldd r20,Y+15
 8032 36e4 5889      		ldd r21,Y+16
 8033 36e6 BC01      		movw r22,r24
 8034 36e8 CD01      		movw r24,r26
 8035 36ea 0E94 0000 		call __gtsf2
 8036 36ee 1816      		cp __zero_reg__,r24
 8037 36f0 04F4      		brge .L333
 944:lp_solve_5.5/lp_mipbb.c ****       report(lp, DETAILED, "solve_LP: A MIP subproblem returned a value better than the base.\n");
 8038               		.loc 1 944 0
 8039 36f2 80E0      		ldi r24,lo8(.LC17)
 8040 36f4 90E0      		ldi r25,hi8(.LC17)
 8041 36f6 892F      		mov r24,r25
 8042 36f8 8F93      		push r24
 8043 36fa 80E0      		ldi r24,lo8(.LC17)
 8044 36fc 90E0      		ldi r25,hi8(.LC17)
 8045 36fe 8F93      		push r24
 8046 3700 1F92      		push __zero_reg__
 8047 3702 85E0      		ldi r24,lo8(5)
 8048 3704 8F93      		push r24
 8049 3706 8C89      		ldd r24,Y+20
 8050 3708 8F93      		push r24
 8051 370a 8B89      		ldd r24,Y+19
 8052 370c 8F93      		push r24
 8053 370e 0E94 0000 		call report
 8054 3712 0F90      		pop __tmp_reg__
 8055 3714 0F90      		pop __tmp_reg__
 8056 3716 0F90      		pop __tmp_reg__
 8057 3718 0F90      		pop __tmp_reg__
 8058 371a 0F90      		pop __tmp_reg__
 8059 371c 0F90      		pop __tmp_reg__
 945:lp_solve_5.5/lp_mipbb.c ****       status = INFEASIBLE;
 8060               		.loc 1 945 0
 8061 371e 82E0      		ldi r24,lo8(2)
 8062 3720 90E0      		ldi r25,0
 8063 3722 9E83      		std Y+6,r25
 8064 3724 8D83      		std Y+5,r24
 946:lp_solve_5.5/lp_mipbb.c ****       lp->spx_status = status;
 8065               		.loc 1 946 0
 8066 3726 8B89      		ldd r24,Y+19
 8067 3728 9C89      		ldd r25,Y+20
 8068 372a 8A5F      		subi r24,-6
 8069 372c 9D4F      		sbci r25,-3
 8070 372e 2D81      		ldd r18,Y+5
 8071 3730 3E81      		ldd r19,Y+6
 8072 3732 FC01      		movw r30,r24
 8073 3734 3183      		std Z+1,r19
 8074 3736 2083      		st Z,r18
 947:lp_solve_5.5/lp_mipbb.c ****       set_action(&lp->spx_action, ACTION_REBASE | ACTION_REINVERT | ACTION_RECOMPUTE);
 8075               		.loc 1 947 0
 8076 3738 8B89      		ldd r24,Y+19
 8077 373a 9C89      		ldd r25,Y+20
 8078 373c 8E50      		subi r24,14
 8079 373e 9D4F      		sbci r25,-3
 8080 3740 66E1      		ldi r22,lo8(22)
 8081 3742 70E0      		ldi r23,0
 8082 3744 0E94 0000 		call set_action
 8083 3748 00C0      		rjmp .L315
 8084               	.L333:
 948:lp_solve_5.5/lp_mipbb.c ****     }
 949:lp_solve_5.5/lp_mipbb.c ****     else if(testOF < 0)  /* Avoid problems later (could undo integer roundings, but usually Ok) */
 8085               		.loc 1 949 0
 8086 374a 20E0      		ldi r18,0
 8087 374c 30E0      		ldi r19,0
 8088 374e A901      		movw r20,r18
 8089 3750 6D85      		ldd r22,Y+13
 8090 3752 7E85      		ldd r23,Y+14
 8091 3754 8F85      		ldd r24,Y+15
 8092 3756 9889      		ldd r25,Y+16
 8093 3758 0E94 0000 		call __ltsf2
 8094 375c 8823      		tst r24
 8095 375e 04F4      		brge .L315
 950:lp_solve_5.5/lp_mipbb.c ****       lp->solution[0] = lp->real_solution;
 8096               		.loc 1 950 0
 8097 3760 8B89      		ldd r24,Y+19
 8098 3762 9C89      		ldd r25,Y+20
 8099 3764 8E5E      		subi r24,-18
 8100 3766 9D4F      		sbci r25,-3
 8101 3768 FC01      		movw r30,r24
 8102 376a 2081      		ld r18,Z
 8103 376c 3181      		ldd r19,Z+1
 8104 376e 8B89      		ldd r24,Y+19
 8105 3770 9C89      		ldd r25,Y+20
 8106 3772 825F      		subi r24,-14
 8107 3774 9D4F      		sbci r25,-3
 8108 3776 FC01      		movw r30,r24
 8109 3778 8081      		ld r24,Z
 8110 377a 9181      		ldd r25,Z+1
 8111 377c A281      		ldd r26,Z+2
 8112 377e B381      		ldd r27,Z+3
 8113 3780 F901      		movw r30,r18
 8114 3782 8083      		st Z,r24
 8115 3784 9183      		std Z+1,r25
 8116 3786 A283      		std Z+2,r26
 8117 3788 B383      		std Z+3,r27
 8118               	.L315:
 951:lp_solve_5.5/lp_mipbb.c **** 
 952:lp_solve_5.5/lp_mipbb.c ****   }
 953:lp_solve_5.5/lp_mipbb.c **** 
 954:lp_solve_5.5/lp_mipbb.c ****   /* status can have the following values:
 955:lp_solve_5.5/lp_mipbb.c ****      OPTIMAL, SUBOPTIMAL, TIMEOUT, USERABORT, PROCFAIL, UNBOUNDED and INFEASIBLE. */
 956:lp_solve_5.5/lp_mipbb.c **** 
 957:lp_solve_5.5/lp_mipbb.c ****   return( status );
 8119               		.loc 1 957 0
 8120 378a 8D81      		ldd r24,Y+5
 8121 378c 9E81      		ldd r25,Y+6
 8122               	.L329:
 8123               	/* epilogue start */
 958:lp_solve_5.5/lp_mipbb.c **** } /* solve_LP */
 8124               		.loc 1 958 0 discriminator 1
 8125 378e 6696      		adiw r28,22
 8126 3790 0FB6      		in __tmp_reg__,__SREG__
 8127 3792 F894      		cli
 8128 3794 DEBF      		out __SP_H__,r29
 8129 3796 0FBE      		out __SREG__,__tmp_reg__
 8130 3798 CDBF      		out __SP_L__,r28
 8131 379a DF91      		pop r29
 8132 379c CF91      		pop r28
 8133 379e 1F91      		pop r17
 8134 37a0 0F91      		pop r16
 8135 37a2 FF90      		pop r15
 8136 37a4 EF90      		pop r14
 8137 37a6 DF90      		pop r13
 8138 37a8 CF90      		pop r12
 8139 37aa BF90      		pop r11
 8140 37ac AF90      		pop r10
 8141 37ae 0895      		ret
 8142               		.cfi_endproc
 8143               	.LFE19:
 8145               	.global	findself_BB
 8147               	findself_BB:
 8148               	.LFB20:
 959:lp_solve_5.5/lp_mipbb.c **** 
 960:lp_solve_5.5/lp_mipbb.c **** STATIC BBrec *findself_BB(BBrec *BB)
 961:lp_solve_5.5/lp_mipbb.c **** {
 8149               		.loc 1 961 0
 8150               		.cfi_startproc
 8151 37b0 CF93      		push r28
 8152               	.LCFI84:
 8153               		.cfi_def_cfa_offset 3
 8154               		.cfi_offset 28, -2
 8155 37b2 DF93      		push r29
 8156               	.LCFI85:
 8157               		.cfi_def_cfa_offset 4
 8158               		.cfi_offset 29, -3
 8159 37b4 00D0      		rcall .
 8160 37b6 00D0      		rcall .
 8161 37b8 00D0      		rcall .
 8162               	.LCFI86:
 8163               		.cfi_def_cfa_offset 10
 8164 37ba CDB7      		in r28,__SP_L__
 8165 37bc DEB7      		in r29,__SP_H__
 8166               	.LCFI87:
 8167               		.cfi_def_cfa_register 28
 8168               	/* prologue: function */
 8169               	/* frame size = 6 */
 8170               	/* stack size = 8 */
 8171               	.L__stack_usage = 8
 8172 37be 9E83      		std Y+6,r25
 8173 37c0 8D83      		std Y+5,r24
 962:lp_solve_5.5/lp_mipbb.c ****   int   varno = BB->varno, vartype = BB->vartype;
 8174               		.loc 1 962 0
 8175 37c2 8D81      		ldd r24,Y+5
 8176 37c4 9E81      		ldd r25,Y+6
 8177 37c6 FC01      		movw r30,r24
 8178 37c8 8681      		ldd r24,Z+6
 8179 37ca 9781      		ldd r25,Z+7
 8180 37cc 9A83      		std Y+2,r25
 8181 37ce 8983      		std Y+1,r24
 8182 37d0 8D81      		ldd r24,Y+5
 8183 37d2 9E81      		ldd r25,Y+6
 8184 37d4 FC01      		movw r30,r24
 8185 37d6 8085      		ldd r24,Z+8
 8186 37d8 9185      		ldd r25,Z+9
 8187 37da 9C83      		std Y+4,r25
 8188 37dc 8B83      		std Y+3,r24
 963:lp_solve_5.5/lp_mipbb.c **** 
 964:lp_solve_5.5/lp_mipbb.c ****   BB = BB->parent;
 8189               		.loc 1 964 0
 8190 37de 8D81      		ldd r24,Y+5
 8191 37e0 9E81      		ldd r25,Y+6
 8192 37e2 FC01      		movw r30,r24
 8193 37e4 8081      		ld r24,Z
 8194 37e6 9181      		ldd r25,Z+1
 8195 37e8 9E83      		std Y+6,r25
 8196 37ea 8D83      		std Y+5,r24
 965:lp_solve_5.5/lp_mipbb.c ****   while((BB != NULL) && (BB->vartype != vartype) && (BB->varno != varno))
 8197               		.loc 1 965 0
 8198 37ec 00C0      		rjmp .L336
 8199               	.L338:
 966:lp_solve_5.5/lp_mipbb.c ****     BB = BB->parent;
 8200               		.loc 1 966 0
 8201 37ee 8D81      		ldd r24,Y+5
 8202 37f0 9E81      		ldd r25,Y+6
 8203 37f2 FC01      		movw r30,r24
 8204 37f4 8081      		ld r24,Z
 8205 37f6 9181      		ldd r25,Z+1
 8206 37f8 9E83      		std Y+6,r25
 8207 37fa 8D83      		std Y+5,r24
 8208               	.L336:
 965:lp_solve_5.5/lp_mipbb.c ****   while((BB != NULL) && (BB->vartype != vartype) && (BB->varno != varno))
 8209               		.loc 1 965 0
 8210 37fc 8D81      		ldd r24,Y+5
 8211 37fe 9E81      		ldd r25,Y+6
 8212 3800 892B      		or r24,r25
 8213 3802 01F0      		breq .L337
 965:lp_solve_5.5/lp_mipbb.c ****   while((BB != NULL) && (BB->vartype != vartype) && (BB->varno != varno))
 8214               		.loc 1 965 0 is_stmt 0 discriminator 1
 8215 3804 8D81      		ldd r24,Y+5
 8216 3806 9E81      		ldd r25,Y+6
 8217 3808 FC01      		movw r30,r24
 8218 380a 2085      		ldd r18,Z+8
 8219 380c 3185      		ldd r19,Z+9
 8220 380e 8B81      		ldd r24,Y+3
 8221 3810 9C81      		ldd r25,Y+4
 8222 3812 2817      		cp r18,r24
 8223 3814 3907      		cpc r19,r25
 8224 3816 01F0      		breq .L337
 965:lp_solve_5.5/lp_mipbb.c ****   while((BB != NULL) && (BB->vartype != vartype) && (BB->varno != varno))
 8225               		.loc 1 965 0 discriminator 2
 8226 3818 8D81      		ldd r24,Y+5
 8227 381a 9E81      		ldd r25,Y+6
 8228 381c FC01      		movw r30,r24
 8229 381e 2681      		ldd r18,Z+6
 8230 3820 3781      		ldd r19,Z+7
 8231 3822 8981      		ldd r24,Y+1
 8232 3824 9A81      		ldd r25,Y+2
 8233 3826 2817      		cp r18,r24
 8234 3828 3907      		cpc r19,r25
 8235 382a 01F4      		brne .L338
 8236               	.L337:
 967:lp_solve_5.5/lp_mipbb.c ****   return( BB );
 8237               		.loc 1 967 0 is_stmt 1
 8238 382c 8D81      		ldd r24,Y+5
 8239 382e 9E81      		ldd r25,Y+6
 8240               	/* epilogue start */
 968:lp_solve_5.5/lp_mipbb.c **** }
 8241               		.loc 1 968 0
 8242 3830 2696      		adiw r28,6
 8243 3832 0FB6      		in __tmp_reg__,__SREG__
 8244 3834 F894      		cli
 8245 3836 DEBF      		out __SP_H__,r29
 8246 3838 0FBE      		out __SREG__,__tmp_reg__
 8247 383a CDBF      		out __SP_L__,r28
 8248 383c DF91      		pop r29
 8249 383e CF91      		pop r28
 8250 3840 0895      		ret
 8251               		.cfi_endproc
 8252               	.LFE20:
 8254               	.global	rcfbound_BB
 8256               	rcfbound_BB:
 8257               	.LFB21:
 969:lp_solve_5.5/lp_mipbb.c **** 
 970:lp_solve_5.5/lp_mipbb.c **** /* Function to determine the opportunity for variable fixing and bound
 971:lp_solve_5.5/lp_mipbb.c ****    tightening based on a previous best MILP solution and a variable's
 972:lp_solve_5.5/lp_mipbb.c ****    reduced cost at the current relaxation - inspired by Wolsley */
 973:lp_solve_5.5/lp_mipbb.c **** STATIC int rcfbound_BB(BBrec *BB, int varno, MYBOOL isINT, REAL *newbound, MYBOOL *isfeasible)
 974:lp_solve_5.5/lp_mipbb.c **** {
 8258               		.loc 1 974 0
 8259               		.cfi_startproc
 8260 3842 EF92      		push r14
 8261               	.LCFI88:
 8262               		.cfi_def_cfa_offset 3
 8263               		.cfi_offset 14, -2
 8264 3844 FF92      		push r15
 8265               	.LCFI89:
 8266               		.cfi_def_cfa_offset 4
 8267               		.cfi_offset 15, -3
 8268 3846 0F93      		push r16
 8269               	.LCFI90:
 8270               		.cfi_def_cfa_offset 5
 8271               		.cfi_offset 16, -4
 8272 3848 1F93      		push r17
 8273               	.LCFI91:
 8274               		.cfi_def_cfa_offset 6
 8275               		.cfi_offset 17, -5
 8276 384a CF93      		push r28
 8277               	.LCFI92:
 8278               		.cfi_def_cfa_offset 7
 8279               		.cfi_offset 28, -6
 8280 384c DF93      		push r29
 8281               	.LCFI93:
 8282               		.cfi_def_cfa_offset 8
 8283               		.cfi_offset 29, -7
 8284 384e CDB7      		in r28,__SP_L__
 8285 3850 DEB7      		in r29,__SP_H__
 8286               	.LCFI94:
 8287               		.cfi_def_cfa_register 28
 8288 3852 A197      		sbiw r28,33
 8289               	.LCFI95:
 8290               		.cfi_def_cfa_offset 41
 8291 3854 0FB6      		in __tmp_reg__,__SREG__
 8292 3856 F894      		cli
 8293 3858 DEBF      		out __SP_H__,r29
 8294 385a 0FBE      		out __SREG__,__tmp_reg__
 8295 385c CDBF      		out __SP_L__,r28
 8296               	/* prologue: function */
 8297               	/* frame size = 33 */
 8298               	/* stack size = 39 */
 8299               	.L__stack_usage = 39
 8300 385e 9A8F      		std Y+26,r25
 8301 3860 898F      		std Y+25,r24
 8302 3862 7C8F      		std Y+28,r23
 8303 3864 6B8F      		std Y+27,r22
 8304 3866 4D8F      		std Y+29,r20
 8305 3868 3F8F      		std Y+31,r19
 8306 386a 2E8F      		std Y+30,r18
 8307 386c 19A3      		std Y+33,r17
 8308 386e 08A3      		std Y+32,r16
 975:lp_solve_5.5/lp_mipbb.c ****   int   i = FR;
 8309               		.loc 1 975 0
 8310 3870 1A82      		std Y+2,__zero_reg__
 8311 3872 1982      		std Y+1,__zero_reg__
 976:lp_solve_5.5/lp_mipbb.c ****   lprec *lp = BB->lp;
 8312               		.loc 1 976 0
 8313 3874 898D      		ldd r24,Y+25
 8314 3876 9A8D      		ldd r25,Y+26
 8315 3878 FC01      		movw r30,r24
 8316 387a 8481      		ldd r24,Z+4
 8317 387c 9581      		ldd r25,Z+5
 8318 387e 988B      		std Y+16,r25
 8319 3880 8F87      		std Y+15,r24
 977:lp_solve_5.5/lp_mipbb.c ****   REAL  deltaRC, rangeLU, deltaOF, lowbo, upbo;
 978:lp_solve_5.5/lp_mipbb.c **** 
 979:lp_solve_5.5/lp_mipbb.c ****   /* Make sure we only accept non-basic variables */
 980:lp_solve_5.5/lp_mipbb.c ****   if(lp->is_basic[varno])
 8320               		.loc 1 980 0
 8321 3882 8F85      		ldd r24,Y+15
 8322 3884 9889      		ldd r25,Y+16
 8323 3886 8053      		subi r24,48
 8324 3888 9D4F      		sbci r25,-3
 8325 388a FC01      		movw r30,r24
 8326 388c 2081      		ld r18,Z
 8327 388e 3181      		ldd r19,Z+1
 8328 3890 8B8D      		ldd r24,Y+27
 8329 3892 9C8D      		ldd r25,Y+28
 8330 3894 820F      		add r24,r18
 8331 3896 931F      		adc r25,r19
 8332 3898 FC01      		movw r30,r24
 8333 389a 8081      		ld r24,Z
 8334 389c 8823      		tst r24
 8335 389e 01F0      		breq .L341
 981:lp_solve_5.5/lp_mipbb.c ****     return( i );
 8336               		.loc 1 981 0
 8337 38a0 8981      		ldd r24,Y+1
 8338 38a2 9A81      		ldd r25,Y+2
 8339 38a4 00C0      		rjmp .L342
 8340               	.L341:
 982:lp_solve_5.5/lp_mipbb.c **** 
 983:lp_solve_5.5/lp_mipbb.c ****   /* Make sure we only accept non-fixed variables */
 984:lp_solve_5.5/lp_mipbb.c ****   lowbo = BB->lowbo[varno];
 8341               		.loc 1 984 0
 8342 38a6 898D      		ldd r24,Y+25
 8343 38a8 9A8D      		ldd r25,Y+26
 8344 38aa FC01      		movw r30,r24
 8345 38ac 22A1      		ldd r18,Z+34
 8346 38ae 33A1      		ldd r19,Z+35
 8347 38b0 8B8D      		ldd r24,Y+27
 8348 38b2 9C8D      		ldd r25,Y+28
 8349 38b4 880F      		lsl r24
 8350 38b6 991F      		rol r25
 8351 38b8 880F      		lsl r24
 8352 38ba 991F      		rol r25
 8353 38bc 820F      		add r24,r18
 8354 38be 931F      		adc r25,r19
 8355 38c0 FC01      		movw r30,r24
 8356 38c2 8081      		ld r24,Z
 8357 38c4 9181      		ldd r25,Z+1
 8358 38c6 A281      		ldd r26,Z+2
 8359 38c8 B381      		ldd r27,Z+3
 8360 38ca 8F83      		std Y+7,r24
 8361 38cc 9887      		std Y+8,r25
 8362 38ce A987      		std Y+9,r26
 8363 38d0 BA87      		std Y+10,r27
 985:lp_solve_5.5/lp_mipbb.c ****   upbo  = BB->upbo[varno];
 8364               		.loc 1 985 0
 8365 38d2 898D      		ldd r24,Y+25
 8366 38d4 9A8D      		ldd r25,Y+26
 8367 38d6 FC01      		movw r30,r24
 8368 38d8 20A1      		ldd r18,Z+32
 8369 38da 31A1      		ldd r19,Z+33
 8370 38dc 8B8D      		ldd r24,Y+27
 8371 38de 9C8D      		ldd r25,Y+28
 8372 38e0 880F      		lsl r24
 8373 38e2 991F      		rol r25
 8374 38e4 880F      		lsl r24
 8375 38e6 991F      		rol r25
 8376 38e8 820F      		add r24,r18
 8377 38ea 931F      		adc r25,r19
 8378 38ec FC01      		movw r30,r24
 8379 38ee 8081      		ld r24,Z
 8380 38f0 9181      		ldd r25,Z+1
 8381 38f2 A281      		ldd r26,Z+2
 8382 38f4 B381      		ldd r27,Z+3
 8383 38f6 8B87      		std Y+11,r24
 8384 38f8 9C87      		std Y+12,r25
 8385 38fa AD87      		std Y+13,r26
 8386 38fc BE87      		std Y+14,r27
 986:lp_solve_5.5/lp_mipbb.c ****   rangeLU = upbo - lowbo;
 8387               		.loc 1 986 0
 8388 38fe 2F81      		ldd r18,Y+7
 8389 3900 3885      		ldd r19,Y+8
 8390 3902 4985      		ldd r20,Y+9
 8391 3904 5A85      		ldd r21,Y+10
 8392 3906 6B85      		ldd r22,Y+11
 8393 3908 7C85      		ldd r23,Y+12
 8394 390a 8D85      		ldd r24,Y+13
 8395 390c 9E85      		ldd r25,Y+14
 8396 390e 0E94 0000 		call __subsf3
 8397 3912 DC01      		movw r26,r24
 8398 3914 CB01      		movw r24,r22
 8399 3916 898B      		std Y+17,r24
 8400 3918 9A8B      		std Y+18,r25
 8401 391a AB8B      		std Y+19,r26
 8402 391c BC8B      		std Y+20,r27
 987:lp_solve_5.5/lp_mipbb.c **** 
 988:lp_solve_5.5/lp_mipbb.c ****   if(rangeLU > lp->epsprimal) {
 8403               		.loc 1 988 0
 8404 391e 8F85      		ldd r24,Y+15
 8405 3920 9889      		ldd r25,Y+16
 8406 3922 865E      		subi r24,-26
 8407 3924 9C4F      		sbci r25,-4
 8408 3926 FC01      		movw r30,r24
 8409 3928 8081      		ld r24,Z
 8410 392a 9181      		ldd r25,Z+1
 8411 392c A281      		ldd r26,Z+2
 8412 392e B381      		ldd r27,Z+3
 8413 3930 2989      		ldd r18,Y+17
 8414 3932 3A89      		ldd r19,Y+18
 8415 3934 4B89      		ldd r20,Y+19
 8416 3936 5C89      		ldd r21,Y+20
 8417 3938 BC01      		movw r22,r24
 8418 393a CD01      		movw r24,r26
 8419 393c 0E94 0000 		call __ltsf2
 8420 3940 8823      		tst r24
 8421 3942 04F0      		brlt .+2
 8422 3944 00C0      		rjmp .L343
 989:lp_solve_5.5/lp_mipbb.c **** #if 1      /* v5.5 problematic - Gap between current node and the current best bound */
 990:lp_solve_5.5/lp_mipbb.c ****     deltaOF = lp->rhs[0] - lp->bb_workOF;
 8423               		.loc 1 990 0
 8424 3946 8F85      		ldd r24,Y+15
 8425 3948 9889      		ldd r25,Y+16
 8426 394a 8855      		subi r24,88
 8427 394c 9D4F      		sbci r25,-3
 8428 394e FC01      		movw r30,r24
 8429 3950 8081      		ld r24,Z
 8430 3952 9181      		ldd r25,Z+1
 8431 3954 FC01      		movw r30,r24
 8432 3956 8081      		ld r24,Z
 8433 3958 9181      		ldd r25,Z+1
 8434 395a A281      		ldd r26,Z+2
 8435 395c B381      		ldd r27,Z+3
 8436 395e 2F85      		ldd r18,Y+15
 8437 3960 3889      		ldd r19,Y+16
 8438 3962 2E59      		subi r18,-98
 8439 3964 3C4F      		sbci r19,-4
 8440 3966 F901      		movw r30,r18
 8441 3968 2081      		ld r18,Z
 8442 396a 3181      		ldd r19,Z+1
 8443 396c 4281      		ldd r20,Z+2
 8444 396e 5381      		ldd r21,Z+3
 8445 3970 BC01      		movw r22,r24
 8446 3972 CD01      		movw r24,r26
 8447 3974 0E94 0000 		call __subsf3
 8448 3978 DC01      		movw r26,r24
 8449 397a CB01      		movw r24,r22
 8450 397c 8D8B      		std Y+21,r24
 8451 397e 9E8B      		std Y+22,r25
 8452 3980 AF8B      		std Y+23,r26
 8453 3982 B88F      		std Y+24,r27
 991:lp_solve_5.5/lp_mipbb.c **** #elif 0    /* v6 less aggressive - Gap between current best bound and the relaxed problem */
 992:lp_solve_5.5/lp_mipbb.c ****     deltaOF = my_chsign(is_maxim(lp), lp->real_solution) - lp->bb_workOF;
 993:lp_solve_5.5/lp_mipbb.c **** #else      /* v6 more aggressive - Gap between current node and the relaxed problem */
 994:lp_solve_5.5/lp_mipbb.c ****     deltaOF = my_chsign(is_maxim(lp), lp->real_solution) - lp->rhs[0];
 995:lp_solve_5.5/lp_mipbb.c **** #endif
 996:lp_solve_5.5/lp_mipbb.c **** 
 997:lp_solve_5.5/lp_mipbb.c ****     deltaRC = my_chsign(!lp->is_lower[varno], lp->drow[varno]);
 8454               		.loc 1 997 0
 8455 3984 8F85      		ldd r24,Y+15
 8456 3986 9889      		ldd r25,Y+16
 8457 3988 8E52      		subi r24,46
 8458 398a 9D4F      		sbci r25,-3
 8459 398c FC01      		movw r30,r24
 8460 398e 2081      		ld r18,Z
 8461 3990 3181      		ldd r19,Z+1
 8462 3992 8B8D      		ldd r24,Y+27
 8463 3994 9C8D      		ldd r25,Y+28
 8464 3996 820F      		add r24,r18
 8465 3998 931F      		adc r25,r19
 8466 399a FC01      		movw r30,r24
 8467 399c 8081      		ld r24,Z
 8468 399e 8823      		tst r24
 8469 39a0 01F4      		brne .L345
 8470               		.loc 1 997 0 is_stmt 0 discriminator 1
 8471 39a2 8F85      		ldd r24,Y+15
 8472 39a4 9889      		ldd r25,Y+16
 8473 39a6 865E      		subi r24,-26
 8474 39a8 9D4F      		sbci r25,-3
 8475 39aa FC01      		movw r30,r24
 8476 39ac 2081      		ld r18,Z
 8477 39ae 3181      		ldd r19,Z+1
 8478 39b0 8B8D      		ldd r24,Y+27
 8479 39b2 9C8D      		ldd r25,Y+28
 8480 39b4 880F      		lsl r24
 8481 39b6 991F      		rol r25
 8482 39b8 880F      		lsl r24
 8483 39ba 991F      		rol r25
 8484 39bc 820F      		add r24,r18
 8485 39be 931F      		adc r25,r19
 8486 39c0 FC01      		movw r30,r24
 8487 39c2 8081      		ld r24,Z
 8488 39c4 9181      		ldd r25,Z+1
 8489 39c6 A281      		ldd r26,Z+2
 8490 39c8 B381      		ldd r27,Z+3
 8491 39ca 20E0      		ldi r18,0
 8492 39cc 30E0      		ldi r19,0
 8493 39ce A901      		movw r20,r18
 8494 39d0 BC01      		movw r22,r24
 8495 39d2 CD01      		movw r24,r26
 8496 39d4 0E94 0000 		call __nesf2
 8497 39d8 8823      		tst r24
 8498 39da 01F0      		breq .L345
 8499               		.loc 1 997 0 discriminator 3
 8500 39dc 8F85      		ldd r24,Y+15
 8501 39de 9889      		ldd r25,Y+16
 8502 39e0 865E      		subi r24,-26
 8503 39e2 9D4F      		sbci r25,-3
 8504 39e4 FC01      		movw r30,r24
 8505 39e6 2081      		ld r18,Z
 8506 39e8 3181      		ldd r19,Z+1
 8507 39ea 8B8D      		ldd r24,Y+27
 8508 39ec 9C8D      		ldd r25,Y+28
 8509 39ee 880F      		lsl r24
 8510 39f0 991F      		rol r25
 8511 39f2 880F      		lsl r24
 8512 39f4 991F      		rol r25
 8513 39f6 820F      		add r24,r18
 8514 39f8 931F      		adc r25,r19
 8515 39fa FC01      		movw r30,r24
 8516 39fc 8081      		ld r24,Z
 8517 39fe 9181      		ldd r25,Z+1
 8518 3a00 A281      		ldd r26,Z+2
 8519 3a02 B381      		ldd r27,Z+3
 8520 3a04 B058      		subi r27,0x80
 8521 3a06 00C0      		rjmp .L347
 8522               	.L345:
 8523               		.loc 1 997 0 discriminator 4
 8524 3a08 8F85      		ldd r24,Y+15
 8525 3a0a 9889      		ldd r25,Y+16
 8526 3a0c 865E      		subi r24,-26
 8527 3a0e 9D4F      		sbci r25,-3
 8528 3a10 FC01      		movw r30,r24
 8529 3a12 2081      		ld r18,Z
 8530 3a14 3181      		ldd r19,Z+1
 8531 3a16 8B8D      		ldd r24,Y+27
 8532 3a18 9C8D      		ldd r25,Y+28
 8533 3a1a 880F      		lsl r24
 8534 3a1c 991F      		rol r25
 8535 3a1e 880F      		lsl r24
 8536 3a20 991F      		rol r25
 8537 3a22 820F      		add r24,r18
 8538 3a24 931F      		adc r25,r19
 8539 3a26 FC01      		movw r30,r24
 8540 3a28 8081      		ld r24,Z
 8541 3a2a 9181      		ldd r25,Z+1
 8542 3a2c A281      		ldd r26,Z+2
 8543 3a2e B381      		ldd r27,Z+3
 8544               	.L347:
 8545               		.loc 1 997 0 discriminator 6
 8546 3a30 8B83      		std Y+3,r24
 8547 3a32 9C83      		std Y+4,r25
 8548 3a34 AD83      		std Y+5,r26
 8549 3a36 BE83      		std Y+6,r27
 998:lp_solve_5.5/lp_mipbb.c ****     /* Protect against divisions with tiny numbers and stray sign
 999:lp_solve_5.5/lp_mipbb.c ****        reversals of the reduced cost */
1000:lp_solve_5.5/lp_mipbb.c ****     if(deltaRC < lp->epspivot)
 8550               		.loc 1 1000 0 is_stmt 1 discriminator 6
 8551 3a38 8F85      		ldd r24,Y+15
 8552 3a3a 9889      		ldd r25,Y+16
 8553 3a3c 8E5D      		subi r24,-34
 8554 3a3e 9C4F      		sbci r25,-4
 8555 3a40 FC01      		movw r30,r24
 8556 3a42 8081      		ld r24,Z
 8557 3a44 9181      		ldd r25,Z+1
 8558 3a46 A281      		ldd r26,Z+2
 8559 3a48 B381      		ldd r27,Z+3
 8560 3a4a 2B81      		ldd r18,Y+3
 8561 3a4c 3C81      		ldd r19,Y+4
 8562 3a4e 4D81      		ldd r20,Y+5
 8563 3a50 5E81      		ldd r21,Y+6
 8564 3a52 BC01      		movw r22,r24
 8565 3a54 CD01      		movw r24,r26
 8566 3a56 0E94 0000 		call __gtsf2
 8567 3a5a 1816      		cp __zero_reg__,r24
 8568 3a5c 04F4      		brge .L368
1001:lp_solve_5.5/lp_mipbb.c ****       return( i );
 8569               		.loc 1 1001 0
 8570 3a5e 8981      		ldd r24,Y+1
 8571 3a60 9A81      		ldd r25,Y+2
 8572 3a62 00C0      		rjmp .L342
 8573               	.L368:
1002:lp_solve_5.5/lp_mipbb.c ****     deltaRC = deltaOF / deltaRC;  /* Should always be a positive number! */
 8574               		.loc 1 1002 0
 8575 3a64 2B81      		ldd r18,Y+3
 8576 3a66 3C81      		ldd r19,Y+4
 8577 3a68 4D81      		ldd r20,Y+5
 8578 3a6a 5E81      		ldd r21,Y+6
 8579 3a6c 6D89      		ldd r22,Y+21
 8580 3a6e 7E89      		ldd r23,Y+22
 8581 3a70 8F89      		ldd r24,Y+23
 8582 3a72 988D      		ldd r25,Y+24
 8583 3a74 0E94 0000 		call __divsf3
 8584 3a78 DC01      		movw r26,r24
 8585 3a7a CB01      		movw r24,r22
 8586 3a7c 8B83      		std Y+3,r24
 8587 3a7e 9C83      		std Y+4,r25
 8588 3a80 AD83      		std Y+5,r26
 8589 3a82 BE83      		std Y+6,r27
1003:lp_solve_5.5/lp_mipbb.c **** #ifdef Paranoia
1004:lp_solve_5.5/lp_mipbb.c ****     if(deltaRC <= 0)
1005:lp_solve_5.5/lp_mipbb.c ****       report(lp, SEVERE, "rcfbound_BB: A negative bound fixing level was encountered after node %.0
1006:lp_solve_5.5/lp_mipbb.c ****                          (double) lp->bb_totalnodes);
1007:lp_solve_5.5/lp_mipbb.c **** #endif
1008:lp_solve_5.5/lp_mipbb.c **** 
1009:lp_solve_5.5/lp_mipbb.c ****     /* Check if bound implied by the reduced cost is less than existing range */
1010:lp_solve_5.5/lp_mipbb.c ****     if(deltaRC < rangeLU + lp->epsint) {
 8590               		.loc 1 1010 0
 8591 3a84 8F85      		ldd r24,Y+15
 8592 3a86 9889      		ldd r25,Y+16
 8593 3a88 8659      		subi r24,-106
 8594 3a8a 9C4F      		sbci r25,-4
 8595 3a8c FC01      		movw r30,r24
 8596 3a8e 8081      		ld r24,Z
 8597 3a90 9181      		ldd r25,Z+1
 8598 3a92 A281      		ldd r26,Z+2
 8599 3a94 B381      		ldd r27,Z+3
 8600 3a96 2989      		ldd r18,Y+17
 8601 3a98 3A89      		ldd r19,Y+18
 8602 3a9a 4B89      		ldd r20,Y+19
 8603 3a9c 5C89      		ldd r21,Y+20
 8604 3a9e BC01      		movw r22,r24
 8605 3aa0 CD01      		movw r24,r26
 8606 3aa2 0E94 0000 		call __addsf3
 8607 3aa6 DC01      		movw r26,r24
 8608 3aa8 CB01      		movw r24,r22
 8609 3aaa 2B81      		ldd r18,Y+3
 8610 3aac 3C81      		ldd r19,Y+4
 8611 3aae 4D81      		ldd r20,Y+5
 8612 3ab0 5E81      		ldd r21,Y+6
 8613 3ab2 BC01      		movw r22,r24
 8614 3ab4 CD01      		movw r24,r26
 8615 3ab6 0E94 0000 		call __gtsf2
 8616 3aba 1816      		cp __zero_reg__,r24
 8617 3abc 04F0      		brlt .+2
 8618 3abe 00C0      		rjmp .L343
1011:lp_solve_5.5/lp_mipbb.c ****       if(lp->is_lower[varno]) {
 8619               		.loc 1 1011 0
 8620 3ac0 8F85      		ldd r24,Y+15
 8621 3ac2 9889      		ldd r25,Y+16
 8622 3ac4 8E52      		subi r24,46
 8623 3ac6 9D4F      		sbci r25,-3
 8624 3ac8 FC01      		movw r30,r24
 8625 3aca 2081      		ld r18,Z
 8626 3acc 3181      		ldd r19,Z+1
 8627 3ace 8B8D      		ldd r24,Y+27
 8628 3ad0 9C8D      		ldd r25,Y+28
 8629 3ad2 820F      		add r24,r18
 8630 3ad4 931F      		adc r25,r19
 8631 3ad6 FC01      		movw r30,r24
 8632 3ad8 8081      		ld r24,Z
 8633 3ada 8823      		tst r24
 8634 3adc 01F4      		brne .+2
 8635 3ade 00C0      		rjmp .L351
1012:lp_solve_5.5/lp_mipbb.c ****         if(isINT)
 8636               		.loc 1 1012 0
 8637 3ae0 8D8D      		ldd r24,Y+29
 8638 3ae2 8823      		tst r24
 8639 3ae4 01F0      		breq .L352
1013:lp_solve_5.5/lp_mipbb.c ****           deltaRC = scaled_floor(lp, varno, unscaled_value(lp, deltaRC, varno)+lp->epsprimal, 1);
 8640               		.loc 1 1013 0
 8641 3ae6 2B8D      		ldd r18,Y+27
 8642 3ae8 3C8D      		ldd r19,Y+28
 8643 3aea 8B81      		ldd r24,Y+3
 8644 3aec 9C81      		ldd r25,Y+4
 8645 3aee AD81      		ldd r26,Y+5
 8646 3af0 BE81      		ldd r27,Y+6
 8647 3af2 EF85      		ldd r30,Y+15
 8648 3af4 F889      		ldd r31,Y+16
 8649 3af6 AC01      		movw r20,r24
 8650 3af8 BD01      		movw r22,r26
 8651 3afa CF01      		movw r24,r30
 8652 3afc 0E94 0000 		call unscaled_value
 8653 3b00 7B01      		movw r14,r22
 8654 3b02 8C01      		movw r16,r24
 8655 3b04 8F85      		ldd r24,Y+15
 8656 3b06 9889      		ldd r25,Y+16
 8657 3b08 865E      		subi r24,-26
 8658 3b0a 9C4F      		sbci r25,-4
 8659 3b0c FC01      		movw r30,r24
 8660 3b0e 8081      		ld r24,Z
 8661 3b10 9181      		ldd r25,Z+1
 8662 3b12 A281      		ldd r26,Z+2
 8663 3b14 B381      		ldd r27,Z+3
 8664 3b16 9C01      		movw r18,r24
 8665 3b18 AD01      		movw r20,r26
 8666 3b1a C801      		movw r24,r16
 8667 3b1c B701      		movw r22,r14
 8668 3b1e 0E94 0000 		call __addsf3
 8669 3b22 DC01      		movw r26,r24
 8670 3b24 CB01      		movw r24,r22
 8671 3b26 9C01      		movw r18,r24
 8672 3b28 AD01      		movw r20,r26
 8673 3b2a 6B8D      		ldd r22,Y+27
 8674 3b2c 7C8D      		ldd r23,Y+28
 8675 3b2e 8F85      		ldd r24,Y+15
 8676 3b30 9889      		ldd r25,Y+16
 8677 3b32 E12C      		mov r14,__zero_reg__
 8678 3b34 F12C      		mov r15,__zero_reg__
 8679 3b36 00E8      		ldi r16,lo8(-128)
 8680 3b38 1FE3      		ldi r17,lo8(63)
 8681 3b3a 0E94 0000 		call scaled_floor
 8682 3b3e DC01      		movw r26,r24
 8683 3b40 CB01      		movw r24,r22
 8684 3b42 8B83      		std Y+3,r24
 8685 3b44 9C83      		std Y+4,r25
 8686 3b46 AD83      		std Y+5,r26
 8687 3b48 BE83      		std Y+6,r27
 8688               	.L352:
1014:lp_solve_5.5/lp_mipbb.c ****         upbo = lowbo + deltaRC;
 8689               		.loc 1 1014 0
 8690 3b4a 2B81      		ldd r18,Y+3
 8691 3b4c 3C81      		ldd r19,Y+4
 8692 3b4e 4D81      		ldd r20,Y+5
 8693 3b50 5E81      		ldd r21,Y+6
 8694 3b52 6F81      		ldd r22,Y+7
 8695 3b54 7885      		ldd r23,Y+8
 8696 3b56 8985      		ldd r24,Y+9
 8697 3b58 9A85      		ldd r25,Y+10
 8698 3b5a 0E94 0000 		call __addsf3
 8699 3b5e DC01      		movw r26,r24
 8700 3b60 CB01      		movw r24,r22
 8701 3b62 8B87      		std Y+11,r24
 8702 3b64 9C87      		std Y+12,r25
 8703 3b66 AD87      		std Y+13,r26
 8704 3b68 BE87      		std Y+14,r27
1015:lp_solve_5.5/lp_mipbb.c ****         deltaRC = upbo;
 8705               		.loc 1 1015 0
 8706 3b6a 8B85      		ldd r24,Y+11
 8707 3b6c 9C85      		ldd r25,Y+12
 8708 3b6e AD85      		ldd r26,Y+13
 8709 3b70 BE85      		ldd r27,Y+14
 8710 3b72 8B83      		std Y+3,r24
 8711 3b74 9C83      		std Y+4,r25
 8712 3b76 AD83      		std Y+5,r26
 8713 3b78 BE83      		std Y+6,r27
1016:lp_solve_5.5/lp_mipbb.c ****         i = LE;  /* Sets the upper bound */
 8714               		.loc 1 1016 0
 8715 3b7a 81E0      		ldi r24,lo8(1)
 8716 3b7c 90E0      		ldi r25,0
 8717 3b7e 9A83      		std Y+2,r25
 8718 3b80 8983      		std Y+1,r24
 8719 3b82 00C0      		rjmp .L353
 8720               	.L351:
1017:lp_solve_5.5/lp_mipbb.c ****       }
1018:lp_solve_5.5/lp_mipbb.c ****       else {
1019:lp_solve_5.5/lp_mipbb.c ****         if(isINT)
 8721               		.loc 1 1019 0
 8722 3b84 8D8D      		ldd r24,Y+29
 8723 3b86 8823      		tst r24
 8724 3b88 01F0      		breq .L354
1020:lp_solve_5.5/lp_mipbb.c ****           deltaRC = scaled_ceil(lp, varno, unscaled_value(lp, deltaRC, varno)+lp->epsprimal, 1);
 8725               		.loc 1 1020 0
 8726 3b8a 2B8D      		ldd r18,Y+27
 8727 3b8c 3C8D      		ldd r19,Y+28
 8728 3b8e 8B81      		ldd r24,Y+3
 8729 3b90 9C81      		ldd r25,Y+4
 8730 3b92 AD81      		ldd r26,Y+5
 8731 3b94 BE81      		ldd r27,Y+6
 8732 3b96 EF85      		ldd r30,Y+15
 8733 3b98 F889      		ldd r31,Y+16
 8734 3b9a AC01      		movw r20,r24
 8735 3b9c BD01      		movw r22,r26
 8736 3b9e CF01      		movw r24,r30
 8737 3ba0 0E94 0000 		call unscaled_value
 8738 3ba4 7B01      		movw r14,r22
 8739 3ba6 8C01      		movw r16,r24
 8740 3ba8 8F85      		ldd r24,Y+15
 8741 3baa 9889      		ldd r25,Y+16
 8742 3bac 865E      		subi r24,-26
 8743 3bae 9C4F      		sbci r25,-4
 8744 3bb0 FC01      		movw r30,r24
 8745 3bb2 8081      		ld r24,Z
 8746 3bb4 9181      		ldd r25,Z+1
 8747 3bb6 A281      		ldd r26,Z+2
 8748 3bb8 B381      		ldd r27,Z+3
 8749 3bba 9C01      		movw r18,r24
 8750 3bbc AD01      		movw r20,r26
 8751 3bbe C801      		movw r24,r16
 8752 3bc0 B701      		movw r22,r14
 8753 3bc2 0E94 0000 		call __addsf3
 8754 3bc6 DC01      		movw r26,r24
 8755 3bc8 CB01      		movw r24,r22
 8756 3bca 9C01      		movw r18,r24
 8757 3bcc AD01      		movw r20,r26
 8758 3bce 6B8D      		ldd r22,Y+27
 8759 3bd0 7C8D      		ldd r23,Y+28
 8760 3bd2 8F85      		ldd r24,Y+15
 8761 3bd4 9889      		ldd r25,Y+16
 8762 3bd6 E12C      		mov r14,__zero_reg__
 8763 3bd8 F12C      		mov r15,__zero_reg__
 8764 3bda 00E8      		ldi r16,lo8(-128)
 8765 3bdc 1FE3      		ldi r17,lo8(63)
 8766 3bde 0E94 0000 		call scaled_ceil
 8767 3be2 DC01      		movw r26,r24
 8768 3be4 CB01      		movw r24,r22
 8769 3be6 8B83      		std Y+3,r24
 8770 3be8 9C83      		std Y+4,r25
 8771 3bea AD83      		std Y+5,r26
 8772 3bec BE83      		std Y+6,r27
 8773               	.L354:
1021:lp_solve_5.5/lp_mipbb.c ****         lowbo = upbo - deltaRC;
 8774               		.loc 1 1021 0
 8775 3bee 2B81      		ldd r18,Y+3
 8776 3bf0 3C81      		ldd r19,Y+4
 8777 3bf2 4D81      		ldd r20,Y+5
 8778 3bf4 5E81      		ldd r21,Y+6
 8779 3bf6 6B85      		ldd r22,Y+11
 8780 3bf8 7C85      		ldd r23,Y+12
 8781 3bfa 8D85      		ldd r24,Y+13
 8782 3bfc 9E85      		ldd r25,Y+14
 8783 3bfe 0E94 0000 		call __subsf3
 8784 3c02 DC01      		movw r26,r24
 8785 3c04 CB01      		movw r24,r22
 8786 3c06 8F83      		std Y+7,r24
 8787 3c08 9887      		std Y+8,r25
 8788 3c0a A987      		std Y+9,r26
 8789 3c0c BA87      		std Y+10,r27
1022:lp_solve_5.5/lp_mipbb.c ****         deltaRC = lowbo;
 8790               		.loc 1 1022 0
 8791 3c0e 8F81      		ldd r24,Y+7
 8792 3c10 9885      		ldd r25,Y+8
 8793 3c12 A985      		ldd r26,Y+9
 8794 3c14 BA85      		ldd r27,Y+10
 8795 3c16 8B83      		std Y+3,r24
 8796 3c18 9C83      		std Y+4,r25
 8797 3c1a AD83      		std Y+5,r26
 8798 3c1c BE83      		std Y+6,r27
1023:lp_solve_5.5/lp_mipbb.c ****         i = GE;  /* Sets the lower bound */
 8799               		.loc 1 1023 0
 8800 3c1e 82E0      		ldi r24,lo8(2)
 8801 3c20 90E0      		ldi r25,0
 8802 3c22 9A83      		std Y+2,r25
 8803 3c24 8983      		std Y+1,r24
 8804               	.L353:
1024:lp_solve_5.5/lp_mipbb.c ****       }
1025:lp_solve_5.5/lp_mipbb.c **** 
1026:lp_solve_5.5/lp_mipbb.c ****       /* Check and set feasibility status */
1027:lp_solve_5.5/lp_mipbb.c ****       if((isfeasible != NULL) && (upbo - lowbo < -lp->epsprimal))
 8805               		.loc 1 1027 0
 8806 3c26 88A1      		ldd r24,Y+32
 8807 3c28 99A1      		ldd r25,Y+33
 8808 3c2a 892B      		or r24,r25
 8809 3c2c 01F0      		breq .L355
 8810               		.loc 1 1027 0 is_stmt 0 discriminator 1
 8811 3c2e 2F81      		ldd r18,Y+7
 8812 3c30 3885      		ldd r19,Y+8
 8813 3c32 4985      		ldd r20,Y+9
 8814 3c34 5A85      		ldd r21,Y+10
 8815 3c36 6B85      		ldd r22,Y+11
 8816 3c38 7C85      		ldd r23,Y+12
 8817 3c3a 8D85      		ldd r24,Y+13
 8818 3c3c 9E85      		ldd r25,Y+14
 8819 3c3e 0E94 0000 		call __subsf3
 8820 3c42 DC01      		movw r26,r24
 8821 3c44 CB01      		movw r24,r22
 8822 3c46 7C01      		movw r14,r24
 8823 3c48 8D01      		movw r16,r26
 8824 3c4a 8F85      		ldd r24,Y+15
 8825 3c4c 9889      		ldd r25,Y+16
 8826 3c4e 865E      		subi r24,-26
 8827 3c50 9C4F      		sbci r25,-4
 8828 3c52 FC01      		movw r30,r24
 8829 3c54 8081      		ld r24,Z
 8830 3c56 9181      		ldd r25,Z+1
 8831 3c58 A281      		ldd r26,Z+2
 8832 3c5a B381      		ldd r27,Z+3
 8833 3c5c B058      		subi r27,0x80
 8834 3c5e 9C01      		movw r18,r24
 8835 3c60 AD01      		movw r20,r26
 8836 3c62 C801      		movw r24,r16
 8837 3c64 B701      		movw r22,r14
 8838 3c66 0E94 0000 		call __ltsf2
 8839 3c6a 8823      		tst r24
 8840 3c6c 04F4      		brge .L355
1028:lp_solve_5.5/lp_mipbb.c ****         *isfeasible = FALSE;
 8841               		.loc 1 1028 0 is_stmt 1
 8842 3c6e 88A1      		ldd r24,Y+32
 8843 3c70 99A1      		ldd r25,Y+33
 8844 3c72 FC01      		movw r30,r24
 8845 3c74 1082      		st Z,__zero_reg__
 8846 3c76 00C0      		rjmp .L357
 8847               	.L355:
1029:lp_solve_5.5/lp_mipbb.c **** 
1030:lp_solve_5.5/lp_mipbb.c ****       /* Flag that we can fix the variable by returning the relation code negated */
1031:lp_solve_5.5/lp_mipbb.c ****       else if(fabs(upbo - lowbo) < lp->epsprimal)
 8848               		.loc 1 1031 0
 8849 3c78 2F81      		ldd r18,Y+7
 8850 3c7a 3885      		ldd r19,Y+8
 8851 3c7c 4985      		ldd r20,Y+9
 8852 3c7e 5A85      		ldd r21,Y+10
 8853 3c80 6B85      		ldd r22,Y+11
 8854 3c82 7C85      		ldd r23,Y+12
 8855 3c84 8D85      		ldd r24,Y+13
 8856 3c86 9E85      		ldd r25,Y+14
 8857 3c88 0E94 0000 		call __subsf3
 8858 3c8c DC01      		movw r26,r24
 8859 3c8e CB01      		movw r24,r22
 8860 3c90 BF77      		andi r27,0x7f
 8861 3c92 2F85      		ldd r18,Y+15
 8862 3c94 3889      		ldd r19,Y+16
 8863 3c96 265E      		subi r18,-26
 8864 3c98 3C4F      		sbci r19,-4
 8865 3c9a F901      		movw r30,r18
 8866 3c9c 2081      		ld r18,Z
 8867 3c9e 3181      		ldd r19,Z+1
 8868 3ca0 4281      		ldd r20,Z+2
 8869 3ca2 5381      		ldd r21,Z+3
 8870 3ca4 BC01      		movw r22,r24
 8871 3ca6 CD01      		movw r24,r26
 8872 3ca8 0E94 0000 		call __ltsf2
 8873 3cac 8823      		tst r24
 8874 3cae 04F4      		brge .L357
1032:lp_solve_5.5/lp_mipbb.c ****         i = -i;
 8875               		.loc 1 1032 0
 8876 3cb0 8981      		ldd r24,Y+1
 8877 3cb2 9A81      		ldd r25,Y+2
 8878 3cb4 9195      		neg r25
 8879 3cb6 8195      		neg r24
 8880 3cb8 9109      		sbc r25,__zero_reg__
 8881 3cba 9A83      		std Y+2,r25
 8882 3cbc 8983      		std Y+1,r24
 8883               	.L357:
1033:lp_solve_5.5/lp_mipbb.c ****       if(newbound != NULL) {
 8884               		.loc 1 1033 0
 8885 3cbe 8E8D      		ldd r24,Y+30
 8886 3cc0 9F8D      		ldd r25,Y+31
 8887 3cc2 892B      		or r24,r25
 8888 3cc4 01F0      		breq .L343
1034:lp_solve_5.5/lp_mipbb.c ****         my_roundzero(deltaRC, lp->epsprimal);
 8889               		.loc 1 1034 0
 8890 3cc6 8B81      		ldd r24,Y+3
 8891 3cc8 9C81      		ldd r25,Y+4
 8892 3cca AD81      		ldd r26,Y+5
 8893 3ccc BE81      		ldd r27,Y+6
 8894 3cce BF77      		andi r27,0x7f
 8895 3cd0 2F85      		ldd r18,Y+15
 8896 3cd2 3889      		ldd r19,Y+16
 8897 3cd4 265E      		subi r18,-26
 8898 3cd6 3C4F      		sbci r19,-4
 8899 3cd8 F901      		movw r30,r18
 8900 3cda 2081      		ld r18,Z
 8901 3cdc 3181      		ldd r19,Z+1
 8902 3cde 4281      		ldd r20,Z+2
 8903 3ce0 5381      		ldd r21,Z+3
 8904 3ce2 BC01      		movw r22,r24
 8905 3ce4 CD01      		movw r24,r26
 8906 3ce6 0E94 0000 		call __ltsf2
 8907 3cea 8823      		tst r24
 8908 3cec 04F4      		brge .L359
 8909               		.loc 1 1034 0 is_stmt 0 discriminator 1
 8910 3cee 1B82      		std Y+3,__zero_reg__
 8911 3cf0 1C82      		std Y+4,__zero_reg__
 8912 3cf2 1D82      		std Y+5,__zero_reg__
 8913 3cf4 1E82      		std Y+6,__zero_reg__
 8914               	.L359:
1035:lp_solve_5.5/lp_mipbb.c ****         *newbound = deltaRC;
 8915               		.loc 1 1035 0 is_stmt 1
 8916 3cf6 2E8D      		ldd r18,Y+30
 8917 3cf8 3F8D      		ldd r19,Y+31
 8918 3cfa 8B81      		ldd r24,Y+3
 8919 3cfc 9C81      		ldd r25,Y+4
 8920 3cfe AD81      		ldd r26,Y+5
 8921 3d00 BE81      		ldd r27,Y+6
 8922 3d02 F901      		movw r30,r18
 8923 3d04 8083      		st Z,r24
 8924 3d06 9183      		std Z+1,r25
 8925 3d08 A283      		std Z+2,r26
 8926 3d0a B383      		std Z+3,r27
 8927               	.L343:
1036:lp_solve_5.5/lp_mipbb.c ****       }
1037:lp_solve_5.5/lp_mipbb.c ****     }
1038:lp_solve_5.5/lp_mipbb.c **** 
1039:lp_solve_5.5/lp_mipbb.c ****   }
1040:lp_solve_5.5/lp_mipbb.c ****   return( i );
 8928               		.loc 1 1040 0
 8929 3d0c 8981      		ldd r24,Y+1
 8930 3d0e 9A81      		ldd r25,Y+2
 8931               	.L342:
 8932               	/* epilogue start */
1041:lp_solve_5.5/lp_mipbb.c **** }
 8933               		.loc 1 1041 0
 8934 3d10 A196      		adiw r28,33
 8935 3d12 0FB6      		in __tmp_reg__,__SREG__
 8936 3d14 F894      		cli
 8937 3d16 DEBF      		out __SP_H__,r29
 8938 3d18 0FBE      		out __SREG__,__tmp_reg__
 8939 3d1a CDBF      		out __SP_L__,r28
 8940 3d1c DF91      		pop r29
 8941 3d1e CF91      		pop r28
 8942 3d20 1F91      		pop r17
 8943 3d22 0F91      		pop r16
 8944 3d24 FF90      		pop r15
 8945 3d26 EF90      		pop r14
 8946 3d28 0895      		ret
 8947               		.cfi_endproc
 8948               	.LFE21:
 8950               		.section	.rodata
 8951               	.LC18:
 8952 0253 6669 6E64 		.string	"findnode_BB: Default B&B limit reached at %d; optionally change strategy or limit.\n\n"
 8952      6E6F 6465 
 8952      5F42 423A 
 8952      2044 6566 
 8952      6175 6C74 
 8953               	.LC19:
 8954 02a8 6669 6E64 		.string	"findnode_BB: Simplex failure due to loss of numeric accuracy\n"
 8954      6E6F 6465 
 8954      5F42 423A 
 8954      2053 696D 
 8954      706C 6578 
 8955               	.LC20:
 8956 02e6 4665 6173 		.string	"Feasible"
 8956      6962 6C65 
 8956      00
 8957               	.LC21:
 8958 02ef 496D 7072 		.string	"Improved"
 8958      6F76 6564 
 8958      00
 8959               	.LC22:
 8960 02f8 2573 2073 		.string	"%s solution %18.12g after %10.0f iter, %9.0f nodes (gap %.1f%%)\n"
 8960      6F6C 7574 
 8960      696F 6E20 
 8960      2531 382E 
 8960      3132 6720 
 8961               	.LC23:
 8962 0339 2020 2000 		.string	"   "
 8963               	.LC24:
 8964 033d 494E 5400 		.string	"INT"
 8965               	.LC25:
 8966 0341 4226 4220 		.string	"B&B level %5d OPT %16s value %18.12g\n"
 8966      6C65 7665 
 8966      6C20 2535 
 8966      6420 4F50 
 8966      5420 2531 
 8967               		.text
 8968               	.global	findnode_BB
 8970               	findnode_BB:
 8971               	.LFB22:
1042:lp_solve_5.5/lp_mipbb.c **** 
1043:lp_solve_5.5/lp_mipbb.c **** 
1044:lp_solve_5.5/lp_mipbb.c **** STATIC MYBOOL findnode_BB(BBrec *BB, int *varno, int *vartype, int *varcus)
1045:lp_solve_5.5/lp_mipbb.c **** {
 8972               		.loc 1 1045 0
 8973               		.cfi_startproc
 8974 3d2a 2F92      		push r2
 8975               	.LCFI96:
 8976               		.cfi_def_cfa_offset 3
 8977               		.cfi_offset 2, -2
 8978 3d2c 3F92      		push r3
 8979               	.LCFI97:
 8980               		.cfi_def_cfa_offset 4
 8981               		.cfi_offset 3, -3
 8982 3d2e 4F92      		push r4
 8983               	.LCFI98:
 8984               		.cfi_def_cfa_offset 5
 8985               		.cfi_offset 4, -4
 8986 3d30 5F92      		push r5
 8987               	.LCFI99:
 8988               		.cfi_def_cfa_offset 6
 8989               		.cfi_offset 5, -5
 8990 3d32 6F92      		push r6
 8991               	.LCFI100:
 8992               		.cfi_def_cfa_offset 7
 8993               		.cfi_offset 6, -6
 8994 3d34 7F92      		push r7
 8995               	.LCFI101:
 8996               		.cfi_def_cfa_offset 8
 8997               		.cfi_offset 7, -7
 8998 3d36 8F92      		push r8
 8999               	.LCFI102:
 9000               		.cfi_def_cfa_offset 9
 9001               		.cfi_offset 8, -8
 9002 3d38 9F92      		push r9
 9003               	.LCFI103:
 9004               		.cfi_def_cfa_offset 10
 9005               		.cfi_offset 9, -9
 9006 3d3a AF92      		push r10
 9007               	.LCFI104:
 9008               		.cfi_def_cfa_offset 11
 9009               		.cfi_offset 10, -10
 9010 3d3c BF92      		push r11
 9011               	.LCFI105:
 9012               		.cfi_def_cfa_offset 12
 9013               		.cfi_offset 11, -11
 9014 3d3e CF92      		push r12
 9015               	.LCFI106:
 9016               		.cfi_def_cfa_offset 13
 9017               		.cfi_offset 12, -12
 9018 3d40 DF92      		push r13
 9019               	.LCFI107:
 9020               		.cfi_def_cfa_offset 14
 9021               		.cfi_offset 13, -13
 9022 3d42 EF92      		push r14
 9023               	.LCFI108:
 9024               		.cfi_def_cfa_offset 15
 9025               		.cfi_offset 14, -14
 9026 3d44 FF92      		push r15
 9027               	.LCFI109:
 9028               		.cfi_def_cfa_offset 16
 9029               		.cfi_offset 15, -15
 9030 3d46 0F93      		push r16
 9031               	.LCFI110:
 9032               		.cfi_def_cfa_offset 17
 9033               		.cfi_offset 16, -16
 9034 3d48 1F93      		push r17
 9035               	.LCFI111:
 9036               		.cfi_def_cfa_offset 18
 9037               		.cfi_offset 17, -17
 9038 3d4a CF93      		push r28
 9039               	.LCFI112:
 9040               		.cfi_def_cfa_offset 19
 9041               		.cfi_offset 28, -18
 9042 3d4c DF93      		push r29
 9043               	.LCFI113:
 9044               		.cfi_def_cfa_offset 20
 9045               		.cfi_offset 29, -19
 9046 3d4e CDB7      		in r28,__SP_L__
 9047 3d50 DEB7      		in r29,__SP_H__
 9048               	.LCFI114:
 9049               		.cfi_def_cfa_register 28
 9050 3d52 6997      		sbiw r28,25
 9051               	.LCFI115:
 9052               		.cfi_def_cfa_offset 45
 9053 3d54 0FB6      		in __tmp_reg__,__SREG__
 9054 3d56 F894      		cli
 9055 3d58 DEBF      		out __SP_H__,r29
 9056 3d5a 0FBE      		out __SREG__,__tmp_reg__
 9057 3d5c CDBF      		out __SP_L__,r28
 9058               	/* prologue: function */
 9059               	/* frame size = 25 */
 9060               	/* stack size = 43 */
 9061               	.L__stack_usage = 43
 9062 3d5e 9B8B      		std Y+19,r25
 9063 3d60 8A8B      		std Y+18,r24
 9064 3d62 7D8B      		std Y+21,r23
 9065 3d64 6C8B      		std Y+20,r22
 9066 3d66 5F8B      		std Y+23,r21
 9067 3d68 4E8B      		std Y+22,r20
 9068 3d6a 398F      		std Y+25,r19
 9069 3d6c 288F      		std Y+24,r18
1046:lp_solve_5.5/lp_mipbb.c ****   int    countsossc, countnint, k, reasonmsg = MSG_NONE;
 9070               		.loc 1 1046 0
 9071 3d6e 1A82      		std Y+2,__zero_reg__
 9072 3d70 1982      		std Y+1,__zero_reg__
1047:lp_solve_5.5/lp_mipbb.c ****   REAL   varsol;
1048:lp_solve_5.5/lp_mipbb.c ****   MYBOOL is_better = FALSE, is_equal = FALSE, is_feasible = TRUE;
 9073               		.loc 1 1048 0
 9074 3d72 1B82      		std Y+3,__zero_reg__
 9075 3d74 1C82      		std Y+4,__zero_reg__
 9076 3d76 81E0      		ldi r24,lo8(1)
 9077 3d78 898B      		std Y+17,r24
1049:lp_solve_5.5/lp_mipbb.c ****   lprec  *lp = BB->lp;
 9078               		.loc 1 1049 0
 9079 3d7a 8A89      		ldd r24,Y+18
 9080 3d7c 9B89      		ldd r25,Y+19
 9081 3d7e DC01      		movw r26,r24
 9082 3d80 1496      		adiw r26,4
 9083 3d82 8D91      		ld r24,X+
 9084 3d84 9C91      		ld r25,X
 9085 3d86 1597      		sbiw r26,4+1
 9086 3d88 9E83      		std Y+6,r25
 9087 3d8a 8D83      		std Y+5,r24
1050:lp_solve_5.5/lp_mipbb.c **** 
1051:lp_solve_5.5/lp_mipbb.c ****   /* Initialize result and return variables */
1052:lp_solve_5.5/lp_mipbb.c ****   *varno    = 0;
 9088               		.loc 1 1052 0
 9089 3d8c 8C89      		ldd r24,Y+20
 9090 3d8e 9D89      		ldd r25,Y+21
 9091 3d90 FC01      		movw r30,r24
 9092 3d92 1182      		std Z+1,__zero_reg__
 9093 3d94 1082      		st Z,__zero_reg__
1053:lp_solve_5.5/lp_mipbb.c ****   *vartype  = BB_REAL;
 9094               		.loc 1 1053 0
 9095 3d96 8E89      		ldd r24,Y+22
 9096 3d98 9F89      		ldd r25,Y+23
 9097 3d9a DC01      		movw r26,r24
 9098 3d9c 1D92      		st X+,__zero_reg__
 9099 3d9e 1C92      		st X,__zero_reg__
1054:lp_solve_5.5/lp_mipbb.c ****   *varcus   = 0;
 9100               		.loc 1 1054 0
 9101 3da0 888D      		ldd r24,Y+24
 9102 3da2 998D      		ldd r25,Y+25
 9103 3da4 FC01      		movw r30,r24
 9104 3da6 1182      		std Z+1,__zero_reg__
 9105 3da8 1082      		st Z,__zero_reg__
1055:lp_solve_5.5/lp_mipbb.c ****   countnint = 0;
 9106               		.loc 1 1055 0
 9107 3daa 188A      		std Y+16,__zero_reg__
 9108 3dac 1F86      		std Y+15,__zero_reg__
1056:lp_solve_5.5/lp_mipbb.c ****   BB->nodestatus = lp->spx_status;
 9109               		.loc 1 1056 0
 9110 3dae 8D81      		ldd r24,Y+5
 9111 3db0 9E81      		ldd r25,Y+6
 9112 3db2 8A5F      		subi r24,-6
 9113 3db4 9D4F      		sbci r25,-3
 9114 3db6 DC01      		movw r26,r24
 9115 3db8 2D91      		ld r18,X+
 9116 3dba 3C91      		ld r19,X
 9117 3dbc 8A89      		ldd r24,Y+18
 9118 3dbe 9B89      		ldd r25,Y+19
 9119 3dc0 FC01      		movw r30,r24
 9120 3dc2 338B      		std Z+19,r19
 9121 3dc4 228B      		std Z+18,r18
1057:lp_solve_5.5/lp_mipbb.c ****   BB->noderesult = lp->solution[0];
 9122               		.loc 1 1057 0
 9123 3dc6 8D81      		ldd r24,Y+5
 9124 3dc8 9E81      		ldd r25,Y+6
 9125 3dca 8E5E      		subi r24,-18
 9126 3dcc 9D4F      		sbci r25,-3
 9127 3dce DC01      		movw r26,r24
 9128 3dd0 8D91      		ld r24,X+
 9129 3dd2 9C91      		ld r25,X
 9130 3dd4 FC01      		movw r30,r24
 9131 3dd6 8081      		ld r24,Z
 9132 3dd8 9181      		ldd r25,Z+1
 9133 3dda A281      		ldd r26,Z+2
 9134 3ddc B381      		ldd r27,Z+3
 9135 3dde 2A89      		ldd r18,Y+18
 9136 3de0 3B89      		ldd r19,Y+19
 9137 3de2 F901      		movw r30,r18
 9138 3de4 848B      		std Z+20,r24
 9139 3de6 958B      		std Z+21,r25
 9140 3de8 A68B      		std Z+22,r26
 9141 3dea B78B      		std Z+23,r27
1058:lp_solve_5.5/lp_mipbb.c **** 
1059:lp_solve_5.5/lp_mipbb.c ****   /* If this solution is worse than the best so far, this branch dies.
1060:lp_solve_5.5/lp_mipbb.c ****      If we can only have integer OF values, and we only need the first solution
1061:lp_solve_5.5/lp_mipbb.c ****      then the OF must be at least (unscaled) 1 better than the best so far */
1062:lp_solve_5.5/lp_mipbb.c ****   if((lp->bb_limitlevel != 1) && (MIP_count(lp) > 0)) {
 9142               		.loc 1 1062 0
 9143 3dec 8D81      		ldd r24,Y+5
 9144 3dee 9E81      		ldd r25,Y+6
 9145 3df0 8C5C      		subi r24,-52
 9146 3df2 9C4F      		sbci r25,-4
 9147 3df4 DC01      		movw r26,r24
 9148 3df6 8D91      		ld r24,X+
 9149 3df8 9C91      		ld r25,X
 9150 3dfa 0197      		sbiw r24,1
 9151 3dfc 01F4      		brne .+2
 9152 3dfe 00C0      		rjmp .L370
 9153               		.loc 1 1062 0 is_stmt 0 discriminator 1
 9154 3e00 8D81      		ldd r24,Y+5
 9155 3e02 9E81      		ldd r25,Y+6
 9156 3e04 0E94 0000 		call MIP_count
 9157 3e08 1816      		cp __zero_reg__,r24
 9158 3e0a 1906      		cpc __zero_reg__,r25
 9159 3e0c 04F0      		brlt .+2
 9160 3e0e 00C0      		rjmp .L370
1063:lp_solve_5.5/lp_mipbb.c **** 
1064:lp_solve_5.5/lp_mipbb.c ****     /* Check that we don't have a limit on the recursion level; two versions supported:
1065:lp_solve_5.5/lp_mipbb.c ****         1) Absolute B&B level (bb_limitlevel > 0), and
1066:lp_solve_5.5/lp_mipbb.c ****         2) B&B level relative to the "B&B order" (bb_limitlevel < 0). */
1067:lp_solve_5.5/lp_mipbb.c ****     countsossc =  lp->sos_vars + lp->sc_vars;
 9161               		.loc 1 1067 0 is_stmt 1
 9162 3e10 8D81      		ldd r24,Y+5
 9163 3e12 9E81      		ldd r25,Y+6
 9164 3e14 8656      		subi r24,102
 9165 3e16 9D4F      		sbci r25,-3
 9166 3e18 FC01      		movw r30,r24
 9167 3e1a 2081      		ld r18,Z
 9168 3e1c 3181      		ldd r19,Z+1
 9169 3e1e 8D81      		ldd r24,Y+5
 9170 3e20 9E81      		ldd r25,Y+6
 9171 3e22 8057      		subi r24,112
 9172 3e24 9D4F      		sbci r25,-3
 9173 3e26 DC01      		movw r26,r24
 9174 3e28 8D91      		ld r24,X+
 9175 3e2a 9C91      		ld r25,X
 9176 3e2c 820F      		add r24,r18
 9177 3e2e 931F      		adc r25,r19
 9178 3e30 9887      		std Y+8,r25
 9179 3e32 8F83      		std Y+7,r24
1068:lp_solve_5.5/lp_mipbb.c ****     if((lp->bb_limitlevel > 0) && (lp->bb_level > lp->bb_limitlevel+countsossc))
 9180               		.loc 1 1068 0
 9181 3e34 8D81      		ldd r24,Y+5
 9182 3e36 9E81      		ldd r25,Y+6
 9183 3e38 8C5C      		subi r24,-52
 9184 3e3a 9C4F      		sbci r25,-4
 9185 3e3c FC01      		movw r30,r24
 9186 3e3e 8081      		ld r24,Z
 9187 3e40 9181      		ldd r25,Z+1
 9188 3e42 1816      		cp __zero_reg__,r24
 9189 3e44 1906      		cpc __zero_reg__,r25
 9190 3e46 04F4      		brge .L371
 9191               		.loc 1 1068 0 is_stmt 0 discriminator 1
 9192 3e48 8D81      		ldd r24,Y+5
 9193 3e4a 9E81      		ldd r25,Y+6
 9194 3e4c 805D      		subi r24,-48
 9195 3e4e 9C4F      		sbci r25,-4
 9196 3e50 DC01      		movw r26,r24
 9197 3e52 2D91      		ld r18,X+
 9198 3e54 3C91      		ld r19,X
 9199 3e56 8D81      		ldd r24,Y+5
 9200 3e58 9E81      		ldd r25,Y+6
 9201 3e5a 8C5C      		subi r24,-52
 9202 3e5c 9C4F      		sbci r25,-4
 9203 3e5e FC01      		movw r30,r24
 9204 3e60 4081      		ld r20,Z
 9205 3e62 5181      		ldd r21,Z+1
 9206 3e64 8F81      		ldd r24,Y+7
 9207 3e66 9885      		ldd r25,Y+8
 9208 3e68 840F      		add r24,r20
 9209 3e6a 951F      		adc r25,r21
 9210 3e6c 8217      		cp r24,r18
 9211 3e6e 9307      		cpc r25,r19
 9212 3e70 04F4      		brge .L371
1069:lp_solve_5.5/lp_mipbb.c ****       return( FALSE );
 9213               		.loc 1 1069 0 is_stmt 1
 9214 3e72 80E0      		ldi r24,0
 9215 3e74 00C0      		rjmp .L423
 9216               	.L371:
1070:lp_solve_5.5/lp_mipbb.c ****     else if((lp->bb_limitlevel < 0) &&
 9217               		.loc 1 1070 0
 9218 3e76 8D81      		ldd r24,Y+5
 9219 3e78 9E81      		ldd r25,Y+6
 9220 3e7a 8C5C      		subi r24,-52
 9221 3e7c 9C4F      		sbci r25,-4
 9222 3e7e DC01      		movw r26,r24
 9223 3e80 8D91      		ld r24,X+
 9224 3e82 9C91      		ld r25,X
 9225 3e84 9923      		tst r25
 9226 3e86 04F0      		brlt .+2
 9227 3e88 00C0      		rjmp .L373
1071:lp_solve_5.5/lp_mipbb.c ****             (lp->bb_level > 2*(lp->int_vars+countsossc)*abs(lp->bb_limitlevel))) {
 9228               		.loc 1 1071 0 discriminator 1
 9229 3e8a 8D81      		ldd r24,Y+5
 9230 3e8c 9E81      		ldd r25,Y+6
 9231 3e8e 805D      		subi r24,-48
 9232 3e90 9C4F      		sbci r25,-4
 9233 3e92 FC01      		movw r30,r24
 9234 3e94 2081      		ld r18,Z
 9235 3e96 3181      		ldd r19,Z+1
 9236 3e98 8D81      		ldd r24,Y+5
 9237 3e9a 9E81      		ldd r25,Y+6
 9238 3e9c 8257      		subi r24,114
 9239 3e9e 9D4F      		sbci r25,-3
 9240 3ea0 DC01      		movw r26,r24
 9241 3ea2 4D91      		ld r20,X+
 9242 3ea4 5C91      		ld r21,X
 9243 3ea6 8F81      		ldd r24,Y+7
 9244 3ea8 9885      		ldd r25,Y+8
 9245 3eaa 840F      		add r24,r20
 9246 3eac 951F      		adc r25,r21
 9247 3eae AC01      		movw r20,r24
 9248 3eb0 440F      		lsl r20
 9249 3eb2 551F      		rol r21
 9250 3eb4 8D81      		ldd r24,Y+5
 9251 3eb6 9E81      		ldd r25,Y+6
 9252 3eb8 8C5C      		subi r24,-52
 9253 3eba 9C4F      		sbci r25,-4
 9254 3ebc FC01      		movw r30,r24
 9255 3ebe 8081      		ld r24,Z
 9256 3ec0 9181      		ldd r25,Z+1
 9257 3ec2 9923      		tst r25
 9258 3ec4 04F4      		brge .L374
 9259 3ec6 9195      		neg r25
 9260 3ec8 8195      		neg r24
 9261 3eca 9109      		sbc r25,__zero_reg__
 9262               	.L374:
 9263 3ecc BC01      		movw r22,r24
 9264 3ece 469F      		mul r20,r22
 9265 3ed0 C001      		movw r24,r0
 9266 3ed2 479F      		mul r20,r23
 9267 3ed4 900D      		add r25,r0
 9268 3ed6 569F      		mul r21,r22
 9269 3ed8 900D      		add r25,r0
 9270 3eda 1124      		clr r1
1070:lp_solve_5.5/lp_mipbb.c ****     else if((lp->bb_limitlevel < 0) &&
 9271               		.loc 1 1070 0 discriminator 1
 9272 3edc 8217      		cp r24,r18
 9273 3ede 9307      		cpc r25,r19
 9274 3ee0 04F4      		brge .L373
1072:lp_solve_5.5/lp_mipbb.c ****       if(lp->bb_limitlevel == DEF_BB_LIMITLEVEL)
 9275               		.loc 1 1072 0
 9276 3ee2 8D81      		ldd r24,Y+5
 9277 3ee4 9E81      		ldd r25,Y+6
 9278 3ee6 8C5C      		subi r24,-52
 9279 3ee8 9C4F      		sbci r25,-4
 9280 3eea DC01      		movw r26,r24
 9281 3eec 8D91      		ld r24,X+
 9282 3eee 9C91      		ld r25,X
 9283 3ef0 C296      		adiw r24,50
 9284 3ef2 01F4      		brne .L375
1073:lp_solve_5.5/lp_mipbb.c ****         report(lp, IMPORTANT, "findnode_BB: Default B&B limit reached at %d; optionally change stra
 9285               		.loc 1 1073 0
 9286 3ef4 8D81      		ldd r24,Y+5
 9287 3ef6 9E81      		ldd r25,Y+6
 9288 3ef8 805D      		subi r24,-48
 9289 3efa 9C4F      		sbci r25,-4
 9290 3efc FC01      		movw r30,r24
 9291 3efe 8081      		ld r24,Z
 9292 3f00 9181      		ldd r25,Z+1
 9293 3f02 292F      		mov r18,r25
 9294 3f04 2F93      		push r18
 9295 3f06 8F93      		push r24
 9296 3f08 80E0      		ldi r24,lo8(.LC18)
 9297 3f0a 90E0      		ldi r25,hi8(.LC18)
 9298 3f0c 892F      		mov r24,r25
 9299 3f0e 8F93      		push r24
 9300 3f10 80E0      		ldi r24,lo8(.LC18)
 9301 3f12 90E0      		ldi r25,hi8(.LC18)
 9302 3f14 8F93      		push r24
 9303 3f16 1F92      		push __zero_reg__
 9304 3f18 83E0      		ldi r24,lo8(3)
 9305 3f1a 8F93      		push r24
 9306 3f1c 8E81      		ldd r24,Y+6
 9307 3f1e 8F93      		push r24
 9308 3f20 8D81      		ldd r24,Y+5
 9309 3f22 8F93      		push r24
 9310 3f24 0E94 0000 		call report
 9311 3f28 4DB7      		in r20,__SP_L__
 9312 3f2a 5EB7      		in r21,__SP_H__
 9313 3f2c 485F      		subi r20,-8
 9314 3f2e 5F4F      		sbci r21,-1
 9315 3f30 0FB6      		in __tmp_reg__,__SREG__
 9316 3f32 F894      		cli
 9317 3f34 DEBF      		out __SP_H__,r29
 9318 3f36 0FBE      		out __SREG__,__tmp_reg__
 9319 3f38 CDBF      		out __SP_L__,r28
 9320               	.L375:
1074:lp_solve_5.5/lp_mipbb.c ****                               lp->bb_level);
1075:lp_solve_5.5/lp_mipbb.c ****       return( FALSE );
 9321               		.loc 1 1075 0
 9322 3f3a 80E0      		ldi r24,0
 9323 3f3c 00C0      		rjmp .L423
 9324               	.L373:
1076:lp_solve_5.5/lp_mipbb.c ****     }
1077:lp_solve_5.5/lp_mipbb.c **** 
1078:lp_solve_5.5/lp_mipbb.c ****     /* First initialize or update pseudo-costs from previous optimal solution */
1079:lp_solve_5.5/lp_mipbb.c ****     if(BB->varno == 0) {
 9325               		.loc 1 1079 0
 9326 3f3e 8A89      		ldd r24,Y+18
 9327 3f40 9B89      		ldd r25,Y+19
 9328 3f42 DC01      		movw r26,r24
 9329 3f44 1696      		adiw r26,6
 9330 3f46 8D91      		ld r24,X+
 9331 3f48 9C91      		ld r25,X
 9332 3f4a 1797      		sbiw r26,6+1
 9333 3f4c 892B      		or r24,r25
 9334 3f4e 01F0      		breq .+2
 9335 3f50 00C0      		rjmp .L376
1080:lp_solve_5.5/lp_mipbb.c ****       varsol = lp->infinite;
 9336               		.loc 1 1080 0
 9337 3f52 8D81      		ldd r24,Y+5
 9338 3f54 9E81      		ldd r25,Y+6
 9339 3f56 865F      		subi r24,-10
 9340 3f58 9C4F      		sbci r25,-4
 9341 3f5a FC01      		movw r30,r24
 9342 3f5c 8081      		ld r24,Z
 9343 3f5e 9181      		ldd r25,Z+1
 9344 3f60 A281      		ldd r26,Z+2
 9345 3f62 B381      		ldd r27,Z+3
 9346 3f64 8987      		std Y+9,r24
 9347 3f66 9A87      		std Y+10,r25
 9348 3f68 AB87      		std Y+11,r26
 9349 3f6a BC87      		std Y+12,r27
1081:lp_solve_5.5/lp_mipbb.c ****       if((lp->int_vars+lp->sc_vars > 0) && (lp->bb_PseudoCost == NULL))
 9350               		.loc 1 1081 0
 9351 3f6c 8D81      		ldd r24,Y+5
 9352 3f6e 9E81      		ldd r25,Y+6
 9353 3f70 8257      		subi r24,114
 9354 3f72 9D4F      		sbci r25,-3
 9355 3f74 DC01      		movw r26,r24
 9356 3f76 2D91      		ld r18,X+
 9357 3f78 3C91      		ld r19,X
 9358 3f7a 8D81      		ldd r24,Y+5
 9359 3f7c 9E81      		ldd r25,Y+6
 9360 3f7e 8057      		subi r24,112
 9361 3f80 9D4F      		sbci r25,-3
 9362 3f82 FC01      		movw r30,r24
 9363 3f84 8081      		ld r24,Z
 9364 3f86 9181      		ldd r25,Z+1
 9365 3f88 820F      		add r24,r18
 9366 3f8a 931F      		adc r25,r19
 9367 3f8c 1816      		cp __zero_reg__,r24
 9368 3f8e 1906      		cpc __zero_reg__,r25
 9369 3f90 04F0      		brlt .+2
 9370 3f92 00C0      		rjmp .L378
 9371               		.loc 1 1081 0 is_stmt 0 discriminator 1
 9372 3f94 8D81      		ldd r24,Y+5
 9373 3f96 9E81      		ldd r25,Y+6
 9374 3f98 8A52      		subi r24,42
 9375 3f9a 9D4F      		sbci r25,-3
 9376 3f9c DC01      		movw r26,r24
 9377 3f9e 8D91      		ld r24,X+
 9378 3fa0 9C91      		ld r25,X
 9379 3fa2 892B      		or r24,r25
 9380 3fa4 01F0      		breq .+2
 9381 3fa6 00C0      		rjmp .L378
1082:lp_solve_5.5/lp_mipbb.c ****         lp->bb_PseudoCost = init_pseudocost(lp, get_bb_rule(lp));
 9382               		.loc 1 1082 0 is_stmt 1
 9383 3fa8 8D81      		ldd r24,Y+5
 9384 3faa 9E81      		ldd r25,Y+6
 9385 3fac 0E94 0000 		call get_bb_rule
 9386 3fb0 9C01      		movw r18,r24
 9387 3fb2 8D81      		ldd r24,Y+5
 9388 3fb4 9E81      		ldd r25,Y+6
 9389 3fb6 B901      		movw r22,r18
 9390 3fb8 0E94 0000 		call init_pseudocost
 9391 3fbc 9C01      		movw r18,r24
 9392 3fbe 8D81      		ldd r24,Y+5
 9393 3fc0 9E81      		ldd r25,Y+6
 9394 3fc2 8A52      		subi r24,42
 9395 3fc4 9D4F      		sbci r25,-3
 9396 3fc6 FC01      		movw r30,r24
 9397 3fc8 3183      		std Z+1,r19
 9398 3fca 2083      		st Z,r18
 9399 3fcc 00C0      		rjmp .L378
 9400               	.L376:
1083:lp_solve_5.5/lp_mipbb.c ****     }
1084:lp_solve_5.5/lp_mipbb.c ****     else {
1085:lp_solve_5.5/lp_mipbb.c ****       varsol = lp->solution[BB->varno];
 9401               		.loc 1 1085 0
 9402 3fce 8D81      		ldd r24,Y+5
 9403 3fd0 9E81      		ldd r25,Y+6
 9404 3fd2 8E5E      		subi r24,-18
 9405 3fd4 9D4F      		sbci r25,-3
 9406 3fd6 DC01      		movw r26,r24
 9407 3fd8 2D91      		ld r18,X+
 9408 3fda 3C91      		ld r19,X
 9409 3fdc 8A89      		ldd r24,Y+18
 9410 3fde 9B89      		ldd r25,Y+19
 9411 3fe0 FC01      		movw r30,r24
 9412 3fe2 8681      		ldd r24,Z+6
 9413 3fe4 9781      		ldd r25,Z+7
 9414 3fe6 880F      		lsl r24
 9415 3fe8 991F      		rol r25
 9416 3fea 880F      		lsl r24
 9417 3fec 991F      		rol r25
 9418 3fee 820F      		add r24,r18
 9419 3ff0 931F      		adc r25,r19
 9420 3ff2 FC01      		movw r30,r24
 9421 3ff4 8081      		ld r24,Z
 9422 3ff6 9181      		ldd r25,Z+1
 9423 3ff8 A281      		ldd r26,Z+2
 9424 3ffa B381      		ldd r27,Z+3
 9425 3ffc 8987      		std Y+9,r24
 9426 3ffe 9A87      		std Y+10,r25
 9427 4000 AB87      		std Y+11,r26
 9428 4002 BC87      		std Y+12,r27
1086:lp_solve_5.5/lp_mipbb.c ****       if( ((lp->int_vars > 0) && (BB->vartype == BB_INT)) ||
 9429               		.loc 1 1086 0
 9430 4004 8D81      		ldd r24,Y+5
 9431 4006 9E81      		ldd r25,Y+6
 9432 4008 8257      		subi r24,114
 9433 400a 9D4F      		sbci r25,-3
 9434 400c DC01      		movw r26,r24
 9435 400e 8D91      		ld r24,X+
 9436 4010 9C91      		ld r25,X
 9437 4012 1816      		cp __zero_reg__,r24
 9438 4014 1906      		cpc __zero_reg__,r25
 9439 4016 04F4      		brge .L379
 9440               		.loc 1 1086 0 is_stmt 0 discriminator 1
 9441 4018 8A89      		ldd r24,Y+18
 9442 401a 9B89      		ldd r25,Y+19
 9443 401c FC01      		movw r30,r24
 9444 401e 8085      		ldd r24,Z+8
 9445 4020 9185      		ldd r25,Z+9
 9446 4022 0197      		sbiw r24,1
 9447 4024 01F0      		breq .L380
 9448               	.L379:
1087:lp_solve_5.5/lp_mipbb.c ****           ((lp->sc_vars > 0) && (BB->vartype == BB_SC) && !is_int(lp, BB->varno-lp->rows)) )
 9449               		.loc 1 1087 0 is_stmt 1 discriminator 3
 9450 4026 8D81      		ldd r24,Y+5
 9451 4028 9E81      		ldd r25,Y+6
 9452 402a 8057      		subi r24,112
 9453 402c 9D4F      		sbci r25,-3
 9454 402e DC01      		movw r26,r24
 9455 4030 8D91      		ld r24,X+
 9456 4032 9C91      		ld r25,X
1086:lp_solve_5.5/lp_mipbb.c ****       if( ((lp->int_vars > 0) && (BB->vartype == BB_INT)) ||
 9457               		.loc 1 1086 0 discriminator 3
 9458 4034 1816      		cp __zero_reg__,r24
 9459 4036 1906      		cpc __zero_reg__,r25
 9460 4038 04F0      		brlt .+2
 9461 403a 00C0      		rjmp .L378
 9462               		.loc 1 1087 0
 9463 403c 8A89      		ldd r24,Y+18
 9464 403e 9B89      		ldd r25,Y+19
 9465 4040 FC01      		movw r30,r24
 9466 4042 8085      		ldd r24,Z+8
 9467 4044 9185      		ldd r25,Z+9
 9468 4046 0297      		sbiw r24,2
 9469 4048 01F0      		breq .+2
 9470 404a 00C0      		rjmp .L378
 9471               		.loc 1 1087 0 is_stmt 0 discriminator 1
 9472 404c 8A89      		ldd r24,Y+18
 9473 404e 9B89      		ldd r25,Y+19
 9474 4050 DC01      		movw r26,r24
 9475 4052 1696      		adiw r26,6
 9476 4054 2D91      		ld r18,X+
 9477 4056 3C91      		ld r19,X
 9478 4058 1797      		sbiw r26,6+1
 9479 405a 8D81      		ldd r24,Y+5
 9480 405c 9E81      		ldd r25,Y+6
 9481 405e 8651      		subi r24,22
 9482 4060 9E4F      		sbci r25,-2
 9483 4062 FC01      		movw r30,r24
 9484 4064 8081      		ld r24,Z
 9485 4066 9181      		ldd r25,Z+1
 9486 4068 281B      		sub r18,r24
 9487 406a 390B      		sbc r19,r25
 9488 406c 8D81      		ldd r24,Y+5
 9489 406e 9E81      		ldd r25,Y+6
 9490 4070 B901      		movw r22,r18
 9491 4072 0E94 0000 		call is_int
 9492 4076 8823      		tst r24
 9493 4078 01F4      		brne .L378
 9494               	.L380:
1088:lp_solve_5.5/lp_mipbb.c ****         update_pseudocost(lp->bb_PseudoCost, BB->varno-lp->rows, BB->vartype, BB->isfloor, varsol);
 9495               		.loc 1 1088 0 is_stmt 1
 9496 407a 8A89      		ldd r24,Y+18
 9497 407c 9B89      		ldd r25,Y+19
 9498 407e DC01      		movw r26,r24
 9499 4080 D696      		adiw r26,54
 9500 4082 DC90      		ld r13,X
 9501 4084 8A89      		ldd r24,Y+18
 9502 4086 9B89      		ldd r25,Y+19
 9503 4088 FC01      		movw r30,r24
 9504 408a 4085      		ldd r20,Z+8
 9505 408c 5185      		ldd r21,Z+9
 9506 408e 8A89      		ldd r24,Y+18
 9507 4090 9B89      		ldd r25,Y+19
 9508 4092 DC01      		movw r26,r24
 9509 4094 1696      		adiw r26,6
 9510 4096 2D91      		ld r18,X+
 9511 4098 3C91      		ld r19,X
 9512 409a 1797      		sbiw r26,6+1
 9513 409c 8D81      		ldd r24,Y+5
 9514 409e 9E81      		ldd r25,Y+6
 9515 40a0 8651      		subi r24,22
 9516 40a2 9E4F      		sbci r25,-2
 9517 40a4 FC01      		movw r30,r24
 9518 40a6 8081      		ld r24,Z
 9519 40a8 9181      		ldd r25,Z+1
 9520 40aa B901      		movw r22,r18
 9521 40ac 681B      		sub r22,r24
 9522 40ae 790B      		sbc r23,r25
 9523 40b0 8D81      		ldd r24,Y+5
 9524 40b2 9E81      		ldd r25,Y+6
 9525 40b4 8A52      		subi r24,42
 9526 40b6 9D4F      		sbci r25,-3
 9527 40b8 DC01      		movw r26,r24
 9528 40ba ED91      		ld r30,X+
 9529 40bc FC91      		ld r31,X
 9530 40be 8985      		ldd r24,Y+9
 9531 40c0 9A85      		ldd r25,Y+10
 9532 40c2 AB85      		ldd r26,Y+11
 9533 40c4 BC85      		ldd r27,Y+12
 9534 40c6 7C01      		movw r14,r24
 9535 40c8 8D01      		movw r16,r26
 9536 40ca 2D2D      		mov r18,r13
 9537 40cc CF01      		movw r24,r30
 9538 40ce 0E94 0000 		call update_pseudocost
 9539               	.L378:
1089:lp_solve_5.5/lp_mipbb.c ****     }
1090:lp_solve_5.5/lp_mipbb.c **** 
1091:lp_solve_5.5/lp_mipbb.c ****     /* Make sure we don't have numeric problems (typically due to integer scaling) */
1092:lp_solve_5.5/lp_mipbb.c ****     if((lp->bb_totalnodes > 0) && !bb_better(lp, OF_RELAXED, OF_TEST_WE)) {
 9540               		.loc 1 1092 0
 9541 40d2 8D81      		ldd r24,Y+5
 9542 40d4 9E81      		ldd r25,Y+6
 9543 40d6 8A5C      		subi r24,-54
 9544 40d8 9C4F      		sbci r25,-4
 9545 40da FC01      		movw r30,r24
 9546 40dc A080      		ld r10,Z
 9547 40de DC01      		movw r26,r24
 9548 40e0 1196      		adiw r26,1
 9549 40e2 BC90      		ld r11,X
 9550 40e4 FC01      		movw r30,r24
 9551 40e6 C280      		ldd r12,Z+2
 9552 40e8 DC01      		movw r26,r24
 9553 40ea 1396      		adiw r26,3
 9554 40ec DC90      		ld r13,X
 9555 40ee FC01      		movw r30,r24
 9556 40f0 E480      		ldd r14,Z+4
 9557 40f2 DC01      		movw r26,r24
 9558 40f4 1596      		adiw r26,5
 9559 40f6 FC90      		ld r15,X
 9560 40f8 FC01      		movw r30,r24
 9561 40fa 0681      		ldd r16,Z+6
 9562 40fc DC01      		movw r26,r24
 9563 40fe 1796      		adiw r26,7
 9564 4100 1C91      		ld r17,X
 9565 4102 2A2D      		mov r18,r10
 9566 4104 3B2D      		mov r19,r11
 9567 4106 4C2D      		mov r20,r12
 9568 4108 5D2D      		mov r21,r13
 9569 410a 6E2D      		mov r22,r14
 9570 410c 7F2D      		mov r23,r15
 9571 410e 802F      		mov r24,r16
 9572 4110 912F      		mov r25,r17
 9573 4112 A0E0      		ldi r26,0
 9574 4114 0E94 0000 		call __cmpdi2_s8
 9575 4118 01F0      		breq .L381
 9576 411a 04F0      		brlt .L381
 9577               		.loc 1 1092 0 is_stmt 0 discriminator 1
 9578 411c 8D81      		ldd r24,Y+5
 9579 411e 9E81      		ldd r25,Y+6
 9580 4120 44E0      		ldi r20,lo8(4)
 9581 4122 50E0      		ldi r21,0
 9582 4124 60E0      		ldi r22,0
 9583 4126 70E0      		ldi r23,0
 9584 4128 0E94 0000 		call bb_better
 9585 412c 8823      		tst r24
 9586 412e 01F4      		brne .L381
1093:lp_solve_5.5/lp_mipbb.c ****       if(lp->bb_trace)
 9587               		.loc 1 1093 0 is_stmt 1
 9588 4130 8D81      		ldd r24,Y+5
 9589 4132 9E81      		ldd r25,Y+6
 9590 4134 8D5F      		subi r24,-3
 9591 4136 9D4F      		sbci r25,-3
 9592 4138 FC01      		movw r30,r24
 9593 413a 8081      		ld r24,Z
 9594 413c 8823      		tst r24
 9595 413e 01F0      		breq .L382
1094:lp_solve_5.5/lp_mipbb.c ****         report(lp, IMPORTANT, "findnode_BB: Simplex failure due to loss of numeric accuracy\n");
 9596               		.loc 1 1094 0
 9597 4140 80E0      		ldi r24,lo8(.LC19)
 9598 4142 90E0      		ldi r25,hi8(.LC19)
 9599 4144 892F      		mov r24,r25
 9600 4146 8F93      		push r24
 9601 4148 80E0      		ldi r24,lo8(.LC19)
 9602 414a 90E0      		ldi r25,hi8(.LC19)
 9603 414c 8F93      		push r24
 9604 414e 1F92      		push __zero_reg__
 9605 4150 83E0      		ldi r24,lo8(3)
 9606 4152 8F93      		push r24
 9607 4154 8E81      		ldd r24,Y+6
 9608 4156 8F93      		push r24
 9609 4158 8D81      		ldd r24,Y+5
 9610 415a 8F93      		push r24
 9611 415c 0E94 0000 		call report
 9612 4160 0F90      		pop __tmp_reg__
 9613 4162 0F90      		pop __tmp_reg__
 9614 4164 0F90      		pop __tmp_reg__
 9615 4166 0F90      		pop __tmp_reg__
 9616 4168 0F90      		pop __tmp_reg__
 9617 416a 0F90      		pop __tmp_reg__
 9618               	.L382:
1095:lp_solve_5.5/lp_mipbb.c ****       lp->spx_status = NUMFAILURE;
 9619               		.loc 1 1095 0
 9620 416c 8D81      		ldd r24,Y+5
 9621 416e 9E81      		ldd r25,Y+6
 9622 4170 8A5F      		subi r24,-6
 9623 4172 9D4F      		sbci r25,-3
 9624 4174 25E0      		ldi r18,lo8(5)
 9625 4176 30E0      		ldi r19,0
 9626 4178 DC01      		movw r26,r24
 9627 417a 2D93      		st X+,r18
 9628 417c 3C93      		st X,r19
1096:lp_solve_5.5/lp_mipbb.c ****       return( FALSE );
 9629               		.loc 1 1096 0
 9630 417e 80E0      		ldi r24,0
 9631 4180 00C0      		rjmp .L423
 9632               	.L381:
1097:lp_solve_5.5/lp_mipbb.c ****     }
1098:lp_solve_5.5/lp_mipbb.c **** 
1099:lp_solve_5.5/lp_mipbb.c ****     /* Abandon this branch if the solution is "worse" than a heuristically
1100:lp_solve_5.5/lp_mipbb.c ****       determined limit or the previous best MIP solution */
1101:lp_solve_5.5/lp_mipbb.c ****     if(((lp->solutioncount == 0) && !bb_better(lp, OF_HEURISTIC, OF_TEST_BE)) ||
 9633               		.loc 1 1101 0
 9634 4182 8D81      		ldd r24,Y+5
 9635 4184 9E81      		ldd r25,Y+6
 9636 4186 865F      		subi r24,-10
 9637 4188 9D4F      		sbci r25,-3
 9638 418a FC01      		movw r30,r24
 9639 418c 8081      		ld r24,Z
 9640 418e 9181      		ldd r25,Z+1
 9641 4190 892B      		or r24,r25
 9642 4192 01F4      		brne .L383
 9643               		.loc 1 1101 0 is_stmt 0 discriminator 1
 9644 4194 8D81      		ldd r24,Y+5
 9645 4196 9E81      		ldd r25,Y+6
 9646 4198 42E0      		ldi r20,lo8(2)
 9647 419a 50E0      		ldi r21,0
 9648 419c 64E0      		ldi r22,lo8(4)
 9649 419e 70E0      		ldi r23,0
 9650 41a0 0E94 0000 		call bb_better
 9651 41a4 8823      		tst r24
 9652 41a6 01F0      		breq .L384
 9653               	.L383:
1102:lp_solve_5.5/lp_mipbb.c ****        ((lp->solutioncount > 0) &&
 9654               		.loc 1 1102 0 is_stmt 1 discriminator 3
 9655 41a8 8D81      		ldd r24,Y+5
 9656 41aa 9E81      		ldd r25,Y+6
 9657 41ac 865F      		subi r24,-10
 9658 41ae 9D4F      		sbci r25,-3
 9659 41b0 DC01      		movw r26,r24
 9660 41b2 8D91      		ld r24,X+
 9661 41b4 9C91      		ld r25,X
1101:lp_solve_5.5/lp_mipbb.c ****        ((lp->solutioncount > 0) &&
 9662               		.loc 1 1101 0 discriminator 3
 9663 41b6 1816      		cp __zero_reg__,r24
 9664 41b8 1906      		cpc __zero_reg__,r25
 9665 41ba 04F4      		brge .L385
1103:lp_solve_5.5/lp_mipbb.c ****         (!bb_better(lp, OF_INCUMBENT | OF_DELTA, OF_TEST_BE | OF_TEST_RELGAP) ||
 9666               		.loc 1 1103 0
 9667 41bc 8D81      		ldd r24,Y+5
 9668 41be 9E81      		ldd r25,Y+6
 9669 41c0 4AE0      		ldi r20,lo8(10)
 9670 41c2 50E0      		ldi r21,0
 9671 41c4 69E0      		ldi r22,lo8(9)
 9672 41c6 70E0      		ldi r23,0
 9673 41c8 0E94 0000 		call bb_better
1102:lp_solve_5.5/lp_mipbb.c ****        ((lp->solutioncount > 0) &&
 9674               		.loc 1 1102 0
 9675 41cc 8823      		tst r24
 9676 41ce 01F0      		breq .L384
1104:lp_solve_5.5/lp_mipbb.c ****          !bb_better(lp, OF_INCUMBENT | OF_DELTA, OF_TEST_BE)))) {
 9677               		.loc 1 1104 0
 9678 41d0 8D81      		ldd r24,Y+5
 9679 41d2 9E81      		ldd r25,Y+6
 9680 41d4 42E0      		ldi r20,lo8(2)
 9681 41d6 50E0      		ldi r21,0
 9682 41d8 69E0      		ldi r22,lo8(9)
 9683 41da 70E0      		ldi r23,0
 9684 41dc 0E94 0000 		call bb_better
1103:lp_solve_5.5/lp_mipbb.c ****         (!bb_better(lp, OF_INCUMBENT | OF_DELTA, OF_TEST_BE | OF_TEST_RELGAP) ||
 9685               		.loc 1 1103 0
 9686 41e0 8823      		tst r24
 9687 41e2 01F4      		brne .L385
 9688               	.L384:
1105:lp_solve_5.5/lp_mipbb.c ****       return( FALSE );
 9689               		.loc 1 1105 0
 9690 41e4 80E0      		ldi r24,0
 9691 41e6 00C0      		rjmp .L423
 9692               	.L385:
1106:lp_solve_5.5/lp_mipbb.c ****     }
1107:lp_solve_5.5/lp_mipbb.c **** 
1108:lp_solve_5.5/lp_mipbb.c ****     /* Collect violated SC variables (since they can also be real-valued); the
1109:lp_solve_5.5/lp_mipbb.c ****        approach is to get them out of the way, since a 0-value is assumed to be "cheap" */
1110:lp_solve_5.5/lp_mipbb.c ****     if(lp->sc_vars > 0) {
 9693               		.loc 1 1110 0
 9694 41e8 8D81      		ldd r24,Y+5
 9695 41ea 9E81      		ldd r25,Y+6
 9696 41ec 8057      		subi r24,112
 9697 41ee 9D4F      		sbci r25,-3
 9698 41f0 FC01      		movw r30,r24
 9699 41f2 8081      		ld r24,Z
 9700 41f4 9181      		ldd r25,Z+1
 9701 41f6 1816      		cp __zero_reg__,r24
 9702 41f8 1906      		cpc __zero_reg__,r25
 9703 41fa 04F4      		brge .L386
1111:lp_solve_5.5/lp_mipbb.c ****       *varno = find_sc_bbvar(lp, &countnint);
 9704               		.loc 1 1111 0
 9705 41fc 9E01      		movw r18,r28
 9706 41fe 215F      		subi r18,-15
 9707 4200 3F4F      		sbci r19,-1
 9708 4202 8D81      		ldd r24,Y+5
 9709 4204 9E81      		ldd r25,Y+6
 9710 4206 B901      		movw r22,r18
 9711 4208 0E94 0000 		call find_sc_bbvar
 9712 420c 9C01      		movw r18,r24
 9713 420e 8C89      		ldd r24,Y+20
 9714 4210 9D89      		ldd r25,Y+21
 9715 4212 DC01      		movw r26,r24
 9716 4214 2D93      		st X+,r18
 9717 4216 3C93      		st X,r19
1112:lp_solve_5.5/lp_mipbb.c ****       if(*varno > 0)
 9718               		.loc 1 1112 0
 9719 4218 8C89      		ldd r24,Y+20
 9720 421a 9D89      		ldd r25,Y+21
 9721 421c FC01      		movw r30,r24
 9722 421e 8081      		ld r24,Z
 9723 4220 9181      		ldd r25,Z+1
 9724 4222 1816      		cp __zero_reg__,r24
 9725 4224 1906      		cpc __zero_reg__,r25
 9726 4226 04F4      		brge .L386
1113:lp_solve_5.5/lp_mipbb.c ****         *vartype = BB_SC;
 9727               		.loc 1 1113 0
 9728 4228 8E89      		ldd r24,Y+22
 9729 422a 9F89      		ldd r25,Y+23
 9730 422c 22E0      		ldi r18,lo8(2)
 9731 422e 30E0      		ldi r19,0
 9732 4230 DC01      		movw r26,r24
 9733 4232 2D93      		st X+,r18
 9734 4234 3C93      		st X,r19
 9735               	.L386:
1114:lp_solve_5.5/lp_mipbb.c ****     }
1115:lp_solve_5.5/lp_mipbb.c **** 
1116:lp_solve_5.5/lp_mipbb.c ****     /* Look among SOS variables if no SC candidate was found */
1117:lp_solve_5.5/lp_mipbb.c ****     if((SOS_count(lp) > 0) && (*varno == 0)) {
 9736               		.loc 1 1117 0
 9737 4236 8D81      		ldd r24,Y+5
 9738 4238 9E81      		ldd r25,Y+6
 9739 423a 0E94 0000 		call SOS_count
 9740 423e 1816      		cp __zero_reg__,r24
 9741 4240 1906      		cpc __zero_reg__,r25
 9742 4242 04F4      		brge .L387
 9743               		.loc 1 1117 0 is_stmt 0 discriminator 1
 9744 4244 8C89      		ldd r24,Y+20
 9745 4246 9D89      		ldd r25,Y+21
 9746 4248 FC01      		movw r30,r24
 9747 424a 8081      		ld r24,Z
 9748 424c 9181      		ldd r25,Z+1
 9749 424e 892B      		or r24,r25
 9750 4250 01F4      		brne .L387
1118:lp_solve_5.5/lp_mipbb.c ****       *varno = find_sos_bbvar(lp, &countnint, FALSE);
 9751               		.loc 1 1118 0 is_stmt 1
 9752 4252 9E01      		movw r18,r28
 9753 4254 215F      		subi r18,-15
 9754 4256 3F4F      		sbci r19,-1
 9755 4258 8D81      		ldd r24,Y+5
 9756 425a 9E81      		ldd r25,Y+6
 9757 425c 40E0      		ldi r20,0
 9758 425e B901      		movw r22,r18
 9759 4260 0E94 0000 		call find_sos_bbvar
 9760 4264 9C01      		movw r18,r24
 9761 4266 8C89      		ldd r24,Y+20
 9762 4268 9D89      		ldd r25,Y+21
 9763 426a DC01      		movw r26,r24
 9764 426c 2D93      		st X+,r18
 9765 426e 3C93      		st X,r19
1119:lp_solve_5.5/lp_mipbb.c ****       if(*varno < 0)
 9766               		.loc 1 1119 0
 9767 4270 8C89      		ldd r24,Y+20
 9768 4272 9D89      		ldd r25,Y+21
 9769 4274 FC01      		movw r30,r24
 9770 4276 8081      		ld r24,Z
 9771 4278 9181      		ldd r25,Z+1
 9772 427a 9923      		tst r25
 9773 427c 04F4      		brge .L388
1120:lp_solve_5.5/lp_mipbb.c ****         *varno = 0;
 9774               		.loc 1 1120 0
 9775 427e 8C89      		ldd r24,Y+20
 9776 4280 9D89      		ldd r25,Y+21
 9777 4282 DC01      		movw r26,r24
 9778 4284 1D92      		st X+,__zero_reg__
 9779 4286 1C92      		st X,__zero_reg__
 9780 4288 00C0      		rjmp .L387
 9781               	.L388:
1121:lp_solve_5.5/lp_mipbb.c ****       else if(*varno > 0)
 9782               		.loc 1 1121 0
 9783 428a 8C89      		ldd r24,Y+20
 9784 428c 9D89      		ldd r25,Y+21
 9785 428e FC01      		movw r30,r24
 9786 4290 8081      		ld r24,Z
 9787 4292 9181      		ldd r25,Z+1
 9788 4294 1816      		cp __zero_reg__,r24
 9789 4296 1906      		cpc __zero_reg__,r25
 9790 4298 04F4      		brge .L387
1122:lp_solve_5.5/lp_mipbb.c ****         *vartype = BB_SOS;
 9791               		.loc 1 1122 0
 9792 429a 8E89      		ldd r24,Y+22
 9793 429c 9F89      		ldd r25,Y+23
 9794 429e 23E0      		ldi r18,lo8(3)
 9795 42a0 30E0      		ldi r19,0
 9796 42a2 DC01      		movw r26,r24
 9797 42a4 2D93      		st X+,r18
 9798 42a6 3C93      		st X,r19
 9799               	.L387:
1123:lp_solve_5.5/lp_mipbb.c ****     }
1124:lp_solve_5.5/lp_mipbb.c **** 
1125:lp_solve_5.5/lp_mipbb.c ****     /* Then collect INTS that are not integer valued, and verify bounds */
1126:lp_solve_5.5/lp_mipbb.c ****     if((lp->int_vars > 0) && (*varno == 0)) {
 9800               		.loc 1 1126 0
 9801 42a8 8D81      		ldd r24,Y+5
 9802 42aa 9E81      		ldd r25,Y+6
 9803 42ac 8257      		subi r24,114
 9804 42ae 9D4F      		sbci r25,-3
 9805 42b0 FC01      		movw r30,r24
 9806 42b2 8081      		ld r24,Z
 9807 42b4 9181      		ldd r25,Z+1
 9808 42b6 1816      		cp __zero_reg__,r24
 9809 42b8 1906      		cpc __zero_reg__,r25
 9810 42ba 04F4      		brge .L389
 9811               		.loc 1 1126 0 is_stmt 0 discriminator 1
 9812 42bc 8C89      		ldd r24,Y+20
 9813 42be 9D89      		ldd r25,Y+21
 9814 42c0 DC01      		movw r26,r24
 9815 42c2 8D91      		ld r24,X+
 9816 42c4 9C91      		ld r25,X
 9817 42c6 892B      		or r24,r25
 9818 42c8 01F4      		brne .L389
1127:lp_solve_5.5/lp_mipbb.c ****       *varno = find_int_bbvar(lp, &countnint, BB, &is_feasible);
 9819               		.loc 1 1127 0 is_stmt 1
 9820 42ca 9E01      		movw r18,r28
 9821 42cc 2F5E      		subi r18,-17
 9822 42ce 3F4F      		sbci r19,-1
 9823 42d0 4A89      		ldd r20,Y+18
 9824 42d2 5B89      		ldd r21,Y+19
 9825 42d4 BE01      		movw r22,r28
 9826 42d6 615F      		subi r22,-15
 9827 42d8 7F4F      		sbci r23,-1
 9828 42da 8D81      		ldd r24,Y+5
 9829 42dc 9E81      		ldd r25,Y+6
 9830 42de 0E94 0000 		call find_int_bbvar
 9831 42e2 9C01      		movw r18,r24
 9832 42e4 8C89      		ldd r24,Y+20
 9833 42e6 9D89      		ldd r25,Y+21
 9834 42e8 FC01      		movw r30,r24
 9835 42ea 3183      		std Z+1,r19
 9836 42ec 2083      		st Z,r18
1128:lp_solve_5.5/lp_mipbb.c ****       if(*varno > 0) {
 9837               		.loc 1 1128 0
 9838 42ee 8C89      		ldd r24,Y+20
 9839 42f0 9D89      		ldd r25,Y+21
 9840 42f2 DC01      		movw r26,r24
 9841 42f4 8D91      		ld r24,X+
 9842 42f6 9C91      		ld r25,X
 9843 42f8 1816      		cp __zero_reg__,r24
 9844 42fa 1906      		cpc __zero_reg__,r25
 9845 42fc 04F4      		brge .L389
1129:lp_solve_5.5/lp_mipbb.c ****         *vartype = BB_INT;
 9846               		.loc 1 1129 0
 9847 42fe 8E89      		ldd r24,Y+22
 9848 4300 9F89      		ldd r25,Y+23
 9849 4302 21E0      		ldi r18,lo8(1)
 9850 4304 30E0      		ldi r19,0
 9851 4306 FC01      		movw r30,r24
 9852 4308 3183      		std Z+1,r19
 9853 430a 2083      		st Z,r18
1130:lp_solve_5.5/lp_mipbb.c ****         if((countnint == 1) && !is_feasible) {
 9854               		.loc 1 1130 0
 9855 430c 8F85      		ldd r24,Y+15
 9856 430e 9889      		ldd r25,Y+16
 9857 4310 0197      		sbiw r24,1
 9858 4312 01F4      		brne .L389
 9859               		.loc 1 1130 0 is_stmt 0 discriminator 1
 9860 4314 8989      		ldd r24,Y+17
 9861 4316 8823      		tst r24
 9862 4318 01F4      		brne .L389
1131:lp_solve_5.5/lp_mipbb.c ****           BB->lastrcf = 0;
 9863               		.loc 1 1131 0 is_stmt 1
 9864 431a 8A89      		ldd r24,Y+18
 9865 431c 9B89      		ldd r25,Y+19
 9866 431e DC01      		movw r26,r24
 9867 4320 1D96      		adiw r26,12+1
 9868 4322 1C92      		st X,__zero_reg__
 9869 4324 1E92      		st -X,__zero_reg__
 9870 4326 1C97      		sbiw r26,12
1132:lp_solve_5.5/lp_mipbb.c ****           return( FALSE );
 9871               		.loc 1 1132 0
 9872 4328 80E0      		ldi r24,0
 9873 432a 00C0      		rjmp .L423
 9874               	.L389:
1133:lp_solve_5.5/lp_mipbb.c ****         }
1134:lp_solve_5.5/lp_mipbb.c ****       }
1135:lp_solve_5.5/lp_mipbb.c ****     }
1136:lp_solve_5.5/lp_mipbb.c **** 
1137:lp_solve_5.5/lp_mipbb.c **** #if 1 /* peno */
1138:lp_solve_5.5/lp_mipbb.c ****     /* Check if we have reached the depth limit for any individual variable
1139:lp_solve_5.5/lp_mipbb.c ****       (protects against infinite recursions of mainly integer variables) */
1140:lp_solve_5.5/lp_mipbb.c ****     k = *varno-lp->rows;
 9875               		.loc 1 1140 0
 9876 432c 8C89      		ldd r24,Y+20
 9877 432e 9D89      		ldd r25,Y+21
 9878 4330 FC01      		movw r30,r24
 9879 4332 2081      		ld r18,Z
 9880 4334 3181      		ldd r19,Z+1
 9881 4336 8D81      		ldd r24,Y+5
 9882 4338 9E81      		ldd r25,Y+6
 9883 433a 8651      		subi r24,22
 9884 433c 9E4F      		sbci r25,-2
 9885 433e DC01      		movw r26,r24
 9886 4340 8D91      		ld r24,X+
 9887 4342 9C91      		ld r25,X
 9888 4344 F901      		movw r30,r18
 9889 4346 E81B      		sub r30,r24
 9890 4348 F90B      		sbc r31,r25
 9891 434a CF01      		movw r24,r30
 9892 434c 9E87      		std Y+14,r25
 9893 434e 8D87      		std Y+13,r24
1141:lp_solve_5.5/lp_mipbb.c ****     if((*varno > 0) && (lp->bb_limitlevel != 0) && (lp->bb_varactive[k] >= abs(lp->bb_limitlevel) /
 9894               		.loc 1 1141 0
 9895 4350 8C89      		ldd r24,Y+20
 9896 4352 9D89      		ldd r25,Y+21
 9897 4354 DC01      		movw r26,r24
 9898 4356 8D91      		ld r24,X+
 9899 4358 9C91      		ld r25,X
 9900 435a 1816      		cp __zero_reg__,r24
 9901 435c 1906      		cpc __zero_reg__,r25
 9902 435e 04F4      		brge .L390
 9903               		.loc 1 1141 0 is_stmt 0 discriminator 1
 9904 4360 8D81      		ldd r24,Y+5
 9905 4362 9E81      		ldd r25,Y+6
 9906 4364 8C5C      		subi r24,-52
 9907 4366 9C4F      		sbci r25,-4
 9908 4368 FC01      		movw r30,r24
 9909 436a 8081      		ld r24,Z
 9910 436c 9181      		ldd r25,Z+1
 9911 436e 892B      		or r24,r25
 9912 4370 01F0      		breq .L390
 9913               		.loc 1 1141 0 discriminator 2
 9914 4372 8D81      		ldd r24,Y+5
 9915 4374 9E81      		ldd r25,Y+6
 9916 4376 885B      		subi r24,-72
 9917 4378 9C4F      		sbci r25,-4
 9918 437a DC01      		movw r26,r24
 9919 437c 2D91      		ld r18,X+
 9920 437e 3C91      		ld r19,X
 9921 4380 8D85      		ldd r24,Y+13
 9922 4382 9E85      		ldd r25,Y+14
 9923 4384 880F      		lsl r24
 9924 4386 991F      		rol r25
 9925 4388 820F      		add r24,r18
 9926 438a 931F      		adc r25,r19
 9927 438c FC01      		movw r30,r24
 9928 438e 2081      		ld r18,Z
 9929 4390 3181      		ldd r19,Z+1
 9930 4392 8D81      		ldd r24,Y+5
 9931 4394 9E81      		ldd r25,Y+6
 9932 4396 8C5C      		subi r24,-52
 9933 4398 9C4F      		sbci r25,-4
 9934 439a DC01      		movw r26,r24
 9935 439c 8D91      		ld r24,X+
 9936 439e 9C91      		ld r25,X
 9937 43a0 9923      		tst r25
 9938 43a2 04F4      		brge .L391
 9939 43a4 9195      		neg r25
 9940 43a6 8195      		neg r24
 9941 43a8 9109      		sbc r25,__zero_reg__
 9942               	.L391:
 9943 43aa 2817      		cp r18,r24
 9944 43ac 3907      		cpc r19,r25
 9945 43ae 04F0      		brlt .L390
1142:lp_solve_5.5/lp_mipbb.c ****       /* if(!is_action(lp->nomessage, NOMSG_BBLIMIT)) {*/
1143:lp_solve_5.5/lp_mipbb.c **** /*
1144:lp_solve_5.5/lp_mipbb.c ****         report(lp, IMPORTANT, "findnode_BB: Reached B&B depth limit %d for variable %d; will not di
1145:lp_solve_5.5/lp_mipbb.c ****                               lp->bb_varactive[k], k);
1146:lp_solve_5.5/lp_mipbb.c **** */
1147:lp_solve_5.5/lp_mipbb.c ****       /*  set_action(&lp->nomessage, NOMSG_BBLIMIT); */
1148:lp_solve_5.5/lp_mipbb.c ****       /* } */
1149:lp_solve_5.5/lp_mipbb.c ****       return( FALSE );
 9946               		.loc 1 1149 0 is_stmt 1
 9947 43b0 80E0      		ldi r24,0
 9948 43b2 00C0      		rjmp .L423
 9949               	.L390:
1150:lp_solve_5.5/lp_mipbb.c ****     }
1151:lp_solve_5.5/lp_mipbb.c **** #endif
1152:lp_solve_5.5/lp_mipbb.c **** 
1153:lp_solve_5.5/lp_mipbb.c ****     /* Check if the current MIP solution is optimal; equal or better */
1154:lp_solve_5.5/lp_mipbb.c ****     if(*varno == 0) {
 9950               		.loc 1 1154 0
 9951 43b4 8C89      		ldd r24,Y+20
 9952 43b6 9D89      		ldd r25,Y+21
 9953 43b8 FC01      		movw r30,r24
 9954 43ba 8081      		ld r24,Z
 9955 43bc 9181      		ldd r25,Z+1
 9956 43be 892B      		or r24,r25
 9957 43c0 01F0      		breq .+2
 9958 43c2 00C0      		rjmp .L424
1155:lp_solve_5.5/lp_mipbb.c ****       is_better = (MYBOOL) (lp->solutioncount == 0) || bb_better(lp, OF_INCUMBENT | OF_DELTA, OF_TE
 9959               		.loc 1 1155 0
 9960 43c4 8D81      		ldd r24,Y+5
 9961 43c6 9E81      		ldd r25,Y+6
 9962 43c8 865F      		subi r24,-10
 9963 43ca 9D4F      		sbci r25,-3
 9964 43cc DC01      		movw r26,r24
 9965 43ce 8D91      		ld r24,X+
 9966 43d0 9C91      		ld r25,X
 9967 43d2 892B      		or r24,r25
 9968 43d4 01F0      		breq .L393
 9969               		.loc 1 1155 0 is_stmt 0 discriminator 2
 9970 43d6 8D81      		ldd r24,Y+5
 9971 43d8 9E81      		ldd r25,Y+6
 9972 43da 41E0      		ldi r20,lo8(1)
 9973 43dc 50E0      		ldi r21,0
 9974 43de 69E0      		ldi r22,lo8(9)
 9975 43e0 70E0      		ldi r23,0
 9976 43e2 0E94 0000 		call bb_better
 9977 43e6 8823      		tst r24
 9978 43e8 01F0      		breq .L394
 9979               	.L393:
 9980               		.loc 1 1155 0 discriminator 3
 9981 43ea 81E0      		ldi r24,lo8(1)
 9982 43ec 90E0      		ldi r25,0
 9983 43ee 00C0      		rjmp .L395
 9984               	.L394:
 9985               		.loc 1 1155 0 discriminator 4
 9986 43f0 80E0      		ldi r24,0
 9987 43f2 90E0      		ldi r25,0
 9988               	.L395:
 9989               		.loc 1 1155 0 discriminator 6
 9990 43f4 8B83      		std Y+3,r24
1156:lp_solve_5.5/lp_mipbb.c **** #if 1
1157:lp_solve_5.5/lp_mipbb.c ****       is_better &= bb_better(lp, OF_INCUMBENT | OF_DELTA, OF_TEST_BT | OF_TEST_RELGAP);
 9991               		.loc 1 1157 0 is_stmt 1 discriminator 6
 9992 43f6 8D81      		ldd r24,Y+5
 9993 43f8 9E81      		ldd r25,Y+6
 9994 43fa 49E0      		ldi r20,lo8(9)
 9995 43fc 50E0      		ldi r21,0
 9996 43fe 69E0      		ldi r22,lo8(9)
 9997 4400 70E0      		ldi r23,0
 9998 4402 0E94 0000 		call bb_better
 9999 4406 982F      		mov r25,r24
 10000 4408 8B81      		ldd r24,Y+3
 10001 440a 8923      		and r24,r25
 10002 440c 8B83      		std Y+3,r24
1158:lp_solve_5.5/lp_mipbb.c **** #else
1159:lp_solve_5.5/lp_mipbb.c ****       /* Check if we can determine clear improvement */
1160:lp_solve_5.5/lp_mipbb.c ****       is_better = (MYBOOL) (lp->solutioncount == 0) ||
1161:lp_solve_5.5/lp_mipbb.c ****                   (MYBOOL) ((lp->bb_deltaOF > 0) &&
1162:lp_solve_5.5/lp_mipbb.c ****                             (my_chsign(is_maxim(lp), lp->solution[0]-lp->best_solution[0]) < 0));
1163:lp_solve_5.5/lp_mipbb.c **** 
1164:lp_solve_5.5/lp_mipbb.c ****       /* Apply gap-based improvement testing if the current solution is not clearly better */
1165:lp_solve_5.5/lp_mipbb.c **** 
1166:lp_solve_5.5/lp_mipbb.c ****       if(!is_better) {
1167:lp_solve_5.5/lp_mipbb.c ****         is_better  = bb_better(lp, OF_INCUMBENT | OF_DELTA, OF_TEST_BT);
1168:lp_solve_5.5/lp_mipbb.c ****         is_better |= bb_better(lp, OF_INCUMBENT | OF_DELTA, OF_TEST_BT | OF_TEST_RELGAP);
1169:lp_solve_5.5/lp_mipbb.c ****       }
1170:lp_solve_5.5/lp_mipbb.c **** #endif
1171:lp_solve_5.5/lp_mipbb.c ****       is_equal  = !is_better;
 10003               		.loc 1 1171 0 discriminator 6
 10004 440e 81E0      		ldi r24,lo8(1)
 10005 4410 9B81      		ldd r25,Y+3
 10006 4412 9923      		tst r25
 10007 4414 01F0      		breq .L396
 10008 4416 80E0      		ldi r24,0
 10009               	.L396:
 10010 4418 8C83      		std Y+4,r24
1172:lp_solve_5.5/lp_mipbb.c **** 
1173:lp_solve_5.5/lp_mipbb.c ****       if(is_equal) {
 10011               		.loc 1 1173 0 discriminator 6
 10012 441a 8C81      		ldd r24,Y+4
 10013 441c 8823      		tst r24
 10014 441e 01F4      		brne .+2
 10015 4420 00C0      		rjmp .L397
1174:lp_solve_5.5/lp_mipbb.c ****         if((lp->solutionlimit <= 0) || (lp->solutioncount < lp->solutionlimit)) {
 10016               		.loc 1 1174 0
 10017 4422 8D81      		ldd r24,Y+5
 10018 4424 9E81      		ldd r25,Y+6
 10019 4426 845F      		subi r24,-12
 10020 4428 9D4F      		sbci r25,-3
 10021 442a FC01      		movw r30,r24
 10022 442c 8081      		ld r24,Z
 10023 442e 9181      		ldd r25,Z+1
 10024 4430 1816      		cp __zero_reg__,r24
 10025 4432 1906      		cpc __zero_reg__,r25
 10026 4434 04F4      		brge .L398
 10027               		.loc 1 1174 0 is_stmt 0 discriminator 1
 10028 4436 8D81      		ldd r24,Y+5
 10029 4438 9E81      		ldd r25,Y+6
 10030 443a 865F      		subi r24,-10
 10031 443c 9D4F      		sbci r25,-3
 10032 443e DC01      		movw r26,r24
 10033 4440 2D91      		ld r18,X+
 10034 4442 3C91      		ld r19,X
 10035 4444 8D81      		ldd r24,Y+5
 10036 4446 9E81      		ldd r25,Y+6
 10037 4448 845F      		subi r24,-12
 10038 444a 9D4F      		sbci r25,-3
 10039 444c FC01      		movw r30,r24
 10040 444e 8081      		ld r24,Z
 10041 4450 9181      		ldd r25,Z+1
 10042 4452 2817      		cp r18,r24
 10043 4454 3907      		cpc r19,r25
 10044 4456 04F0      		brlt .+2
 10045 4458 00C0      		rjmp .L424
 10046               	.L398:
1175:lp_solve_5.5/lp_mipbb.c ****           lp->solutioncount++;
 10047               		.loc 1 1175 0 is_stmt 1
 10048 445a 8D81      		ldd r24,Y+5
 10049 445c 9E81      		ldd r25,Y+6
 10050 445e 865F      		subi r24,-10
 10051 4460 9D4F      		sbci r25,-3
 10052 4462 DC01      		movw r26,r24
 10053 4464 8D91      		ld r24,X+
 10054 4466 9C91      		ld r25,X
 10055 4468 9C01      		movw r18,r24
 10056 446a 2F5F      		subi r18,-1
 10057 446c 3F4F      		sbci r19,-1
 10058 446e 8D81      		ldd r24,Y+5
 10059 4470 9E81      		ldd r25,Y+6
 10060 4472 865F      		subi r24,-10
 10061 4474 9D4F      		sbci r25,-3
 10062 4476 FC01      		movw r30,r24
 10063 4478 3183      		std Z+1,r19
 10064 447a 2083      		st Z,r18
1176:lp_solve_5.5/lp_mipbb.c ****           SETMIN(lp->bb_solutionlevel, lp->bb_level);
 10065               		.loc 1 1176 0
 10066 447c 8D81      		ldd r24,Y+5
 10067 447e 9E81      		ldd r25,Y+6
 10068 4480 825C      		subi r24,-62
 10069 4482 9C4F      		sbci r25,-4
 10070 4484 DC01      		movw r26,r24
 10071 4486 2D91      		ld r18,X+
 10072 4488 3C91      		ld r19,X
 10073 448a 8D81      		ldd r24,Y+5
 10074 448c 9E81      		ldd r25,Y+6
 10075 448e 805D      		subi r24,-48
 10076 4490 9C4F      		sbci r25,-4
 10077 4492 FC01      		movw r30,r24
 10078 4494 8081      		ld r24,Z
 10079 4496 9181      		ldd r25,Z+1
 10080 4498 8217      		cp r24,r18
 10081 449a 9307      		cpc r25,r19
 10082 449c 04F4      		brge .L400
 10083               		.loc 1 1176 0 is_stmt 0 discriminator 1
 10084 449e 8D81      		ldd r24,Y+5
 10085 44a0 9E81      		ldd r25,Y+6
 10086 44a2 805D      		subi r24,-48
 10087 44a4 9C4F      		sbci r25,-4
 10088 44a6 DC01      		movw r26,r24
 10089 44a8 2D91      		ld r18,X+
 10090 44aa 3C91      		ld r19,X
 10091 44ac 8D81      		ldd r24,Y+5
 10092 44ae 9E81      		ldd r25,Y+6
 10093 44b0 825C      		subi r24,-62
 10094 44b2 9C4F      		sbci r25,-4
 10095 44b4 FC01      		movw r30,r24
 10096 44b6 3183      		std Z+1,r19
 10097 44b8 2083      		st Z,r18
 10098               	.L400:
1177:lp_solve_5.5/lp_mipbb.c ****           reasonmsg = MSG_MILPEQUAL;
 10099               		.loc 1 1177 0 is_stmt 1
 10100 44ba 80E0      		ldi r24,0
 10101 44bc 91E0      		ldi r25,lo8(1)
 10102 44be 9A83      		std Y+2,r25
 10103 44c0 8983      		std Y+1,r24
1154:lp_solve_5.5/lp_mipbb.c ****       is_better = (MYBOOL) (lp->solutioncount == 0) || bb_better(lp, OF_INCUMBENT | OF_DELTA, OF_TE
 10104               		.loc 1 1154 0
 10105 44c2 00C0      		rjmp .L424
 10106               	.L397:
1178:lp_solve_5.5/lp_mipbb.c ****         }
1179:lp_solve_5.5/lp_mipbb.c ****       }
1180:lp_solve_5.5/lp_mipbb.c **** 
1181:lp_solve_5.5/lp_mipbb.c ****       /* Current solution is better */
1182:lp_solve_5.5/lp_mipbb.c ****       else if(is_better) {
 10107               		.loc 1 1182 0
 10108 44c4 8B81      		ldd r24,Y+3
 10109 44c6 8823      		tst r24
 10110 44c8 01F4      		brne .+2
 10111 44ca 00C0      		rjmp .L424
1183:lp_solve_5.5/lp_mipbb.c **** 
1184:lp_solve_5.5/lp_mipbb.c ****         /* Update grand total solution count and check if we should go from
1185:lp_solve_5.5/lp_mipbb.c ****            depth-first to best-first variable selection mode */
1186:lp_solve_5.5/lp_mipbb.c ****         if(lp->bb_varactive != NULL) {
 10112               		.loc 1 1186 0
 10113 44cc 8D81      		ldd r24,Y+5
 10114 44ce 9E81      		ldd r25,Y+6
 10115 44d0 885B      		subi r24,-72
 10116 44d2 9C4F      		sbci r25,-4
 10117 44d4 DC01      		movw r26,r24
 10118 44d6 8D91      		ld r24,X+
 10119 44d8 9C91      		ld r25,X
 10120 44da 892B      		or r24,r25
 10121 44dc 01F0      		breq .L401
1187:lp_solve_5.5/lp_mipbb.c ****           lp->bb_varactive[0]++;
 10122               		.loc 1 1187 0
 10123 44de 8D81      		ldd r24,Y+5
 10124 44e0 9E81      		ldd r25,Y+6
 10125 44e2 885B      		subi r24,-72
 10126 44e4 9C4F      		sbci r25,-4
 10127 44e6 FC01      		movw r30,r24
 10128 44e8 8081      		ld r24,Z
 10129 44ea 9181      		ldd r25,Z+1
 10130 44ec DC01      		movw r26,r24
 10131 44ee 2D91      		ld r18,X+
 10132 44f0 3C91      		ld r19,X
 10133 44f2 2F5F      		subi r18,-1
 10134 44f4 3F4F      		sbci r19,-1
 10135 44f6 FC01      		movw r30,r24
 10136 44f8 3183      		std Z+1,r19
 10137 44fa 2083      		st Z,r18
1188:lp_solve_5.5/lp_mipbb.c ****           if((lp->bb_varactive[0] == 1) &&
 10138               		.loc 1 1188 0
 10139 44fc 8D81      		ldd r24,Y+5
 10140 44fe 9E81      		ldd r25,Y+6
 10141 4500 885B      		subi r24,-72
 10142 4502 9C4F      		sbci r25,-4
 10143 4504 DC01      		movw r26,r24
 10144 4506 8D91      		ld r24,X+
 10145 4508 9C91      		ld r25,X
 10146 450a FC01      		movw r30,r24
 10147 450c 8081      		ld r24,Z
 10148 450e 9181      		ldd r25,Z+1
 10149 4510 0197      		sbiw r24,1
 10150 4512 01F4      		brne .L401
1189:lp_solve_5.5/lp_mipbb.c ****              is_bb_mode(lp, NODE_DEPTHFIRSTMODE) && is_bb_mode(lp, NODE_DYNAMICMODE))
 10151               		.loc 1 1189 0 discriminator 1
 10152 4514 8D81      		ldd r24,Y+5
 10153 4516 9E81      		ldd r25,Y+6
 10154 4518 60E8      		ldi r22,lo8(-128)
 10155 451a 70E0      		ldi r23,0
 10156 451c 0E94 0000 		call is_bb_mode
1188:lp_solve_5.5/lp_mipbb.c ****           if((lp->bb_varactive[0] == 1) &&
 10157               		.loc 1 1188 0 discriminator 1
 10158 4520 8823      		tst r24
 10159 4522 01F0      		breq .L401
 10160               		.loc 1 1189 0
 10161 4524 8D81      		ldd r24,Y+5
 10162 4526 9E81      		ldd r25,Y+6
 10163 4528 60E0      		ldi r22,0
 10164 452a 74E0      		ldi r23,lo8(4)
 10165 452c 0E94 0000 		call is_bb_mode
 10166 4530 8823      		tst r24
 10167 4532 01F0      		breq .L401
1190:lp_solve_5.5/lp_mipbb.c ****             lp->bb_rule &= !NODE_DEPTHFIRSTMODE;
 10168               		.loc 1 1190 0
 10169 4534 8D81      		ldd r24,Y+5
 10170 4536 9E81      		ldd r25,Y+6
 10171 4538 8C59      		subi r24,-100
 10172 453a 9D4F      		sbci r25,-3
 10173 453c DC01      		movw r26,r24
 10174 453e 1D92      		st X+,__zero_reg__
 10175 4540 1C92      		st X,__zero_reg__
 10176               	.L401:
1191:lp_solve_5.5/lp_mipbb.c ****         }
1192:lp_solve_5.5/lp_mipbb.c **** 
1193:lp_solve_5.5/lp_mipbb.c ****         if(lp->bb_trace ||
 10177               		.loc 1 1193 0
 10178 4542 8D81      		ldd r24,Y+5
 10179 4544 9E81      		ldd r25,Y+6
 10180 4546 8D5F      		subi r24,-3
 10181 4548 9D4F      		sbci r25,-3
 10182 454a FC01      		movw r30,r24
 10183 454c 8081      		ld r24,Z
 10184 454e 8823      		tst r24
 10185 4550 01F4      		brne .L402
1194:lp_solve_5.5/lp_mipbb.c ****            ((lp->verbose >= NORMAL) && (lp->print_sol == FALSE) && (lp->lag_status != RUNNING))) {
 10186               		.loc 1 1194 0 discriminator 1
 10187 4552 8D81      		ldd r24,Y+5
 10188 4554 9E81      		ldd r25,Y+6
 10189 4556 885A      		subi r24,-88
 10190 4558 9D4F      		sbci r25,-3
 10191 455a DC01      		movw r26,r24
 10192 455c 8D91      		ld r24,X+
 10193 455e 9C91      		ld r25,X
1193:lp_solve_5.5/lp_mipbb.c ****            ((lp->verbose >= NORMAL) && (lp->print_sol == FALSE) && (lp->lag_status != RUNNING))) {
 10194               		.loc 1 1193 0 discriminator 1
 10195 4560 0497      		sbiw r24,4
 10196 4562 04F4      		brge .+2
 10197 4564 00C0      		rjmp .L403
 10198               		.loc 1 1194 0
 10199 4566 8D81      		ldd r24,Y+5
 10200 4568 9E81      		ldd r25,Y+6
 10201 456a 865A      		subi r24,-90
 10202 456c 9D4F      		sbci r25,-3
 10203 456e FC01      		movw r30,r24
 10204 4570 8081      		ld r24,Z
 10205 4572 9181      		ldd r25,Z+1
 10206 4574 892B      		or r24,r25
 10207 4576 01F0      		breq .+2
 10208 4578 00C0      		rjmp .L403
 10209               		.loc 1 1194 0 is_stmt 0 discriminator 1
 10210 457a 8D81      		ldd r24,Y+5
 10211 457c 9E81      		ldd r25,Y+6
 10212 457e 885F      		subi r24,-8
 10213 4580 9D4F      		sbci r25,-3
 10214 4582 DC01      		movw r26,r24
 10215 4584 8D91      		ld r24,X+
 10216 4586 9C91      		ld r25,X
 10217 4588 0897      		sbiw r24,8
 10218 458a 01F4      		brne .+2
 10219 458c 00C0      		rjmp .L403
 10220               	.L402:
1195:lp_solve_5.5/lp_mipbb.c ****           report(lp, IMPORTANT,
1196:lp_solve_5.5/lp_mipbb.c ****                  "%s solution " RESULTVALUEMASK " after %10.0f iter, %9.0f nodes (gap %.1f%%)\n",
1197:lp_solve_5.5/lp_mipbb.c ****                  (lp->bb_improvements == 0) ? "Feasible" : "Improved",
1198:lp_solve_5.5/lp_mipbb.c ****                  lp->solution[0], (double) lp->total_iter, (double) lp->bb_totalnodes,
1199:lp_solve_5.5/lp_mipbb.c ****                  100.0*fabs(my_reldiff(lp->solution[0], lp->bb_limitOF)));
 10221               		.loc 1 1199 0 is_stmt 1
 10222 458e 8D81      		ldd r24,Y+5
 10223 4590 9E81      		ldd r25,Y+6
 10224 4592 8E5E      		subi r24,-18
 10225 4594 9D4F      		sbci r25,-3
 10226 4596 FC01      		movw r30,r24
 10227 4598 8081      		ld r24,Z
 10228 459a 9181      		ldd r25,Z+1
 10229 459c FC01      		movw r30,r24
 10230 459e 8081      		ld r24,Z
 10231 45a0 9181      		ldd r25,Z+1
 10232 45a2 A281      		ldd r26,Z+2
 10233 45a4 B381      		ldd r27,Z+3
 10234 45a6 2D81      		ldd r18,Y+5
 10235 45a8 3E81      		ldd r19,Y+6
 10236 45aa 2A5A      		subi r18,-86
 10237 45ac 3C4F      		sbci r19,-4
 10238 45ae F901      		movw r30,r18
 10239 45b0 2081      		ld r18,Z
 10240 45b2 3181      		ldd r19,Z+1
 10241 45b4 4281      		ldd r20,Z+2
 10242 45b6 5381      		ldd r21,Z+3
 10243 45b8 BC01      		movw r22,r24
 10244 45ba CD01      		movw r24,r26
 10245 45bc 0E94 0000 		call __subsf3
 10246 45c0 DC01      		movw r26,r24
 10247 45c2 CB01      		movw r24,r22
 10248 45c4 6C01      		movw r12,r24
 10249 45c6 7D01      		movw r14,r26
 10250 45c8 8D81      		ldd r24,Y+5
 10251 45ca 9E81      		ldd r25,Y+6
 10252 45cc 8A5A      		subi r24,-86
 10253 45ce 9C4F      		sbci r25,-4
 10254 45d0 FC01      		movw r30,r24
 10255 45d2 8081      		ld r24,Z
 10256 45d4 9181      		ldd r25,Z+1
 10257 45d6 A281      		ldd r26,Z+2
 10258 45d8 B381      		ldd r27,Z+3
 10259 45da BF77      		andi r27,0x7f
 10260 45dc 20E0      		ldi r18,0
 10261 45de 30E0      		ldi r19,0
 10262 45e0 40E8      		ldi r20,lo8(-128)
 10263 45e2 5FE3      		ldi r21,lo8(63)
 10264 45e4 BC01      		movw r22,r24
 10265 45e6 CD01      		movw r24,r26
 10266 45e8 0E94 0000 		call __addsf3
 10267 45ec DC01      		movw r26,r24
 10268 45ee CB01      		movw r24,r22
 10269 45f0 9C01      		movw r18,r24
 10270 45f2 AD01      		movw r20,r26
 10271 45f4 C701      		movw r24,r14
 10272 45f6 B601      		movw r22,r12
 10273 45f8 0E94 0000 		call __divsf3
 10274 45fc DC01      		movw r26,r24
 10275 45fe CB01      		movw r24,r22
 10276 4600 BF77      		andi r27,0x7f
1195:lp_solve_5.5/lp_mipbb.c ****           report(lp, IMPORTANT,
 10277               		.loc 1 1195 0
 10278 4602 20E0      		ldi r18,0
 10279 4604 30E0      		ldi r19,0
 10280 4606 48EC      		ldi r20,lo8(-56)
 10281 4608 52E4      		ldi r21,lo8(66)
 10282 460a BC01      		movw r22,r24
 10283 460c CD01      		movw r24,r26
 10284 460e 0E94 0000 		call __mulsf3
 10285 4612 DC01      		movw r26,r24
 10286 4614 CB01      		movw r24,r22
 10287 4616 1C01      		movw r2,r24
 10288 4618 2D01      		movw r4,r26
1198:lp_solve_5.5/lp_mipbb.c ****                  100.0*fabs(my_reldiff(lp->solution[0], lp->bb_limitOF)));
 10289               		.loc 1 1198 0
 10290 461a 8D81      		ldd r24,Y+5
 10291 461c 9E81      		ldd r25,Y+6
 10292 461e 8A5C      		subi r24,-54
 10293 4620 9C4F      		sbci r25,-4
 10294 4622 DC01      		movw r26,r24
 10295 4624 AC90      		ld r10,X
 10296 4626 FC01      		movw r30,r24
 10297 4628 B180      		ldd r11,Z+1
 10298 462a DC01      		movw r26,r24
 10299 462c 1296      		adiw r26,2
 10300 462e CC90      		ld r12,X
 10301 4630 FC01      		movw r30,r24
 10302 4632 D380      		ldd r13,Z+3
 10303 4634 DC01      		movw r26,r24
 10304 4636 1496      		adiw r26,4
 10305 4638 EC90      		ld r14,X
 10306 463a FC01      		movw r30,r24
 10307 463c F580      		ldd r15,Z+5
 10308 463e DC01      		movw r26,r24
 10309 4640 1696      		adiw r26,6
 10310 4642 0C91      		ld r16,X
 10311 4644 FC01      		movw r30,r24
 10312 4646 1781      		ldd r17,Z+7
1195:lp_solve_5.5/lp_mipbb.c ****           report(lp, IMPORTANT,
 10313               		.loc 1 1195 0
 10314 4648 2A2D      		mov r18,r10
 10315 464a 3B2D      		mov r19,r11
 10316 464c 4C2D      		mov r20,r12
 10317 464e 5D2D      		mov r21,r13
 10318 4650 6E2D      		mov r22,r14
 10319 4652 7F2D      		mov r23,r15
 10320 4654 802F      		mov r24,r16
 10321 4656 912F      		mov r25,r17
 10322 4658 0E94 0000 		call __floatdisf
 10323 465c 3B01      		movw r6,r22
 10324 465e 4C01      		movw r8,r24
1198:lp_solve_5.5/lp_mipbb.c ****                  100.0*fabs(my_reldiff(lp->solution[0], lp->bb_limitOF)));
 10325               		.loc 1 1198 0
 10326 4660 8D81      		ldd r24,Y+5
 10327 4662 9E81      		ldd r25,Y+6
 10328 4664 885C      		subi r24,-56
 10329 4666 9D4F      		sbci r25,-3
 10330 4668 DC01      		movw r26,r24
 10331 466a AC90      		ld r10,X
 10332 466c FC01      		movw r30,r24
 10333 466e B180      		ldd r11,Z+1
 10334 4670 DC01      		movw r26,r24
 10335 4672 1296      		adiw r26,2
 10336 4674 CC90      		ld r12,X
 10337 4676 FC01      		movw r30,r24
 10338 4678 D380      		ldd r13,Z+3
 10339 467a DC01      		movw r26,r24
 10340 467c 1496      		adiw r26,4
 10341 467e EC90      		ld r14,X
 10342 4680 FC01      		movw r30,r24
 10343 4682 F580      		ldd r15,Z+5
 10344 4684 DC01      		movw r26,r24
 10345 4686 1696      		adiw r26,6
 10346 4688 0C91      		ld r16,X
 10347 468a FC01      		movw r30,r24
 10348 468c 1781      		ldd r17,Z+7
1195:lp_solve_5.5/lp_mipbb.c ****           report(lp, IMPORTANT,
 10349               		.loc 1 1195 0
 10350 468e 2A2D      		mov r18,r10
 10351 4690 3B2D      		mov r19,r11
 10352 4692 4C2D      		mov r20,r12
 10353 4694 5D2D      		mov r21,r13
 10354 4696 6E2D      		mov r22,r14
 10355 4698 7F2D      		mov r23,r15
 10356 469a 802F      		mov r24,r16
 10357 469c 912F      		mov r25,r17
 10358 469e 0E94 0000 		call __floatdisf
 10359 46a2 AB01      		movw r20,r22
 10360 46a4 BC01      		movw r22,r24
1198:lp_solve_5.5/lp_mipbb.c ****                  100.0*fabs(my_reldiff(lp->solution[0], lp->bb_limitOF)));
 10361               		.loc 1 1198 0
 10362 46a6 8D81      		ldd r24,Y+5
 10363 46a8 9E81      		ldd r25,Y+6
 10364 46aa 8E5E      		subi r24,-18
 10365 46ac 9D4F      		sbci r25,-3
 10366 46ae DC01      		movw r26,r24
 10367 46b0 8D91      		ld r24,X+
 10368 46b2 9C91      		ld r25,X
1195:lp_solve_5.5/lp_mipbb.c ****           report(lp, IMPORTANT,
 10369               		.loc 1 1195 0
 10370 46b4 FC01      		movw r30,r24
 10371 46b6 8081      		ld r24,Z
 10372 46b8 9181      		ldd r25,Z+1
 10373 46ba A281      		ldd r26,Z+2
 10374 46bc B381      		ldd r27,Z+3
1197:lp_solve_5.5/lp_mipbb.c ****                  lp->solution[0], (double) lp->total_iter, (double) lp->bb_totalnodes,
 10375               		.loc 1 1197 0
 10376 46be 2D81      		ldd r18,Y+5
 10377 46c0 3E81      		ldd r19,Y+6
 10378 46c2 2252      		subi r18,34
 10379 46c4 3D4F      		sbci r19,-3
 10380 46c6 F901      		movw r30,r18
 10381 46c8 2081      		ld r18,Z
 10382 46ca 3181      		ldd r19,Z+1
1195:lp_solve_5.5/lp_mipbb.c ****           report(lp, IMPORTANT,
 10383               		.loc 1 1195 0
 10384 46cc 232B      		or r18,r19
 10385 46ce 01F4      		brne .L404
1195:lp_solve_5.5/lp_mipbb.c ****           report(lp, IMPORTANT,
 10386               		.loc 1 1195 0 is_stmt 0 discriminator 1
 10387 46d0 20E0      		ldi r18,lo8(.LC20)
 10388 46d2 30E0      		ldi r19,hi8(.LC20)
 10389 46d4 00C0      		rjmp .L405
 10390               	.L404:
1195:lp_solve_5.5/lp_mipbb.c ****           report(lp, IMPORTANT,
 10391               		.loc 1 1195 0 discriminator 2
 10392 46d6 20E0      		ldi r18,lo8(.LC21)
 10393 46d8 30E0      		ldi r19,hi8(.LC21)
 10394               	.L405:
1195:lp_solve_5.5/lp_mipbb.c ****           report(lp, IMPORTANT,
 10395               		.loc 1 1195 0 discriminator 4
 10396 46da E52D      		mov r30,r5
 10397 46dc EF93      		push r30
 10398 46de E42D      		mov r30,r4
 10399 46e0 EF93      		push r30
 10400 46e2 E32D      		mov r30,r3
 10401 46e4 EF93      		push r30
 10402 46e6 E22D      		mov r30,r2
 10403 46e8 EF93      		push r30
 10404 46ea E92D      		mov r30,r9
 10405 46ec EF93      		push r30
 10406 46ee E82D      		mov r30,r8
 10407 46f0 EF93      		push r30
 10408 46f2 E72D      		mov r30,r7
 10409 46f4 EF93      		push r30
 10410 46f6 E62D      		mov r30,r6
 10411 46f8 EF93      		push r30
 10412 46fa E72F      		mov r30,r23
 10413 46fc EF93      		push r30
 10414 46fe E62F      		mov r30,r22
 10415 4700 EF93      		push r30
 10416 4702 E52F      		mov r30,r21
 10417 4704 EF93      		push r30
 10418 4706 4F93      		push r20
 10419 4708 4B2F      		mov r20,r27
 10420 470a 4F93      		push r20
 10421 470c 4A2F      		mov r20,r26
 10422 470e 4F93      		push r20
 10423 4710 492F      		mov r20,r25
 10424 4712 4F93      		push r20
 10425 4714 8F93      		push r24
 10426 4716 832F      		mov r24,r19
 10427 4718 8F93      		push r24
 10428 471a 822F      		mov r24,r18
 10429 471c 8F93      		push r24
 10430 471e 80E0      		ldi r24,lo8(.LC22)
 10431 4720 90E0      		ldi r25,hi8(.LC22)
 10432 4722 892F      		mov r24,r25
 10433 4724 8F93      		push r24
 10434 4726 80E0      		ldi r24,lo8(.LC22)
 10435 4728 90E0      		ldi r25,hi8(.LC22)
 10436 472a 8F93      		push r24
 10437 472c 1F92      		push __zero_reg__
 10438 472e 83E0      		ldi r24,lo8(3)
 10439 4730 8F93      		push r24
 10440 4732 8E81      		ldd r24,Y+6
 10441 4734 8F93      		push r24
 10442 4736 8D81      		ldd r24,Y+5
 10443 4738 8F93      		push r24
 10444 473a 0E94 0000 		call report
 10445 473e 4DB7      		in r20,__SP_L__
 10446 4740 5EB7      		in r21,__SP_H__
 10447 4742 485E      		subi r20,-24
 10448 4744 5F4F      		sbci r21,-1
 10449 4746 0FB6      		in __tmp_reg__,__SREG__
 10450 4748 F894      		cli
 10451 474a DEBF      		out __SP_H__,r29
 10452 474c 0FBE      		out __SREG__,__tmp_reg__
 10453 474e CDBF      		out __SP_L__,r28
 10454               	.L403:
1200:lp_solve_5.5/lp_mipbb.c ****         }
1201:lp_solve_5.5/lp_mipbb.c ****         if(MIP_count(lp) > 0) {
 10455               		.loc 1 1201 0 is_stmt 1
 10456 4750 8D81      		ldd r24,Y+5
 10457 4752 9E81      		ldd r25,Y+6
 10458 4754 0E94 0000 		call MIP_count
 10459 4758 1816      		cp __zero_reg__,r24
 10460 475a 1906      		cpc __zero_reg__,r25
 10461 475c 04F4      		brge .L406
1202:lp_solve_5.5/lp_mipbb.c ****           if(lp->bb_improvements == 0)
 10462               		.loc 1 1202 0
 10463 475e 8D81      		ldd r24,Y+5
 10464 4760 9E81      		ldd r25,Y+6
 10465 4762 8252      		subi r24,34
 10466 4764 9D4F      		sbci r25,-3
 10467 4766 DC01      		movw r26,r24
 10468 4768 8D91      		ld r24,X+
 10469 476a 9C91      		ld r25,X
 10470 476c 892B      		or r24,r25
 10471 476e 01F4      		brne .L407
1203:lp_solve_5.5/lp_mipbb.c ****             reasonmsg = MSG_MILPFEASIBLE;
 10472               		.loc 1 1203 0
 10473 4770 80E8      		ldi r24,lo8(-128)
 10474 4772 90E0      		ldi r25,0
 10475 4774 9A83      		std Y+2,r25
 10476 4776 8983      		std Y+1,r24
 10477 4778 00C0      		rjmp .L406
 10478               	.L407:
1204:lp_solve_5.5/lp_mipbb.c ****           else
1205:lp_solve_5.5/lp_mipbb.c ****             reasonmsg = MSG_MILPBETTER;
 10479               		.loc 1 1205 0
 10480 477a 80E0      		ldi r24,0
 10481 477c 92E0      		ldi r25,lo8(2)
 10482 477e 9A83      		std Y+2,r25
 10483 4780 8983      		std Y+1,r24
 10484               	.L406:
1206:lp_solve_5.5/lp_mipbb.c ****         }
1207:lp_solve_5.5/lp_mipbb.c **** 
1208:lp_solve_5.5/lp_mipbb.c ****         lp->bb_status = FEASFOUND;
 10485               		.loc 1 1208 0
 10486 4782 8D81      		ldd r24,Y+5
 10487 4784 9E81      		ldd r25,Y+6
 10488 4786 825D      		subi r24,-46
 10489 4788 9C4F      		sbci r25,-4
 10490 478a 2CE0      		ldi r18,lo8(12)
 10491 478c 30E0      		ldi r19,0
 10492 478e FC01      		movw r30,r24
 10493 4790 3183      		std Z+1,r19
 10494 4792 2083      		st Z,r18
1209:lp_solve_5.5/lp_mipbb.c ****         lp->bb_solutionlevel = lp->bb_level;
 10495               		.loc 1 1209 0
 10496 4794 8D81      		ldd r24,Y+5
 10497 4796 9E81      		ldd r25,Y+6
 10498 4798 805D      		subi r24,-48
 10499 479a 9C4F      		sbci r25,-4
 10500 479c DC01      		movw r26,r24
 10501 479e 2D91      		ld r18,X+
 10502 47a0 3C91      		ld r19,X
 10503 47a2 8D81      		ldd r24,Y+5
 10504 47a4 9E81      		ldd r25,Y+6
 10505 47a6 825C      		subi r24,-62
 10506 47a8 9C4F      		sbci r25,-4
 10507 47aa FC01      		movw r30,r24
 10508 47ac 3183      		std Z+1,r19
 10509 47ae 2083      		st Z,r18
1210:lp_solve_5.5/lp_mipbb.c ****         lp->solutioncount = 1;
 10510               		.loc 1 1210 0
 10511 47b0 8D81      		ldd r24,Y+5
 10512 47b2 9E81      		ldd r25,Y+6
 10513 47b4 865F      		subi r24,-10
 10514 47b6 9D4F      		sbci r25,-3
 10515 47b8 21E0      		ldi r18,lo8(1)
 10516 47ba 30E0      		ldi r19,0
 10517 47bc DC01      		movw r26,r24
 10518 47be 2D93      		st X+,r18
 10519 47c0 3C93      		st X,r19
1211:lp_solve_5.5/lp_mipbb.c ****         lp->bb_improvements++;
 10520               		.loc 1 1211 0
 10521 47c2 8D81      		ldd r24,Y+5
 10522 47c4 9E81      		ldd r25,Y+6
 10523 47c6 8252      		subi r24,34
 10524 47c8 9D4F      		sbci r25,-3
 10525 47ca FC01      		movw r30,r24
 10526 47cc 8081      		ld r24,Z
 10527 47ce 9181      		ldd r25,Z+1
 10528 47d0 9C01      		movw r18,r24
 10529 47d2 2F5F      		subi r18,-1
 10530 47d4 3F4F      		sbci r19,-1
 10531 47d6 8D81      		ldd r24,Y+5
 10532 47d8 9E81      		ldd r25,Y+6
 10533 47da 8252      		subi r24,34
 10534 47dc 9D4F      		sbci r25,-3
 10535 47de DC01      		movw r26,r24
 10536 47e0 2D93      		st X+,r18
 10537 47e2 3C93      		st X,r19
1212:lp_solve_5.5/lp_mipbb.c ****         lp->bb_workOF = lp->rhs[0];
 10538               		.loc 1 1212 0
 10539 47e4 8D81      		ldd r24,Y+5
 10540 47e6 9E81      		ldd r25,Y+6
 10541 47e8 8855      		subi r24,88
 10542 47ea 9D4F      		sbci r25,-3
 10543 47ec FC01      		movw r30,r24
 10544 47ee 8081      		ld r24,Z
 10545 47f0 9181      		ldd r25,Z+1
 10546 47f2 FC01      		movw r30,r24
 10547 47f4 8081      		ld r24,Z
 10548 47f6 9181      		ldd r25,Z+1
 10549 47f8 A281      		ldd r26,Z+2
 10550 47fa B381      		ldd r27,Z+3
 10551 47fc 2D81      		ldd r18,Y+5
 10552 47fe 3E81      		ldd r19,Y+6
 10553 4800 2E59      		subi r18,-98
 10554 4802 3C4F      		sbci r19,-4
 10555 4804 F901      		movw r30,r18
 10556 4806 8083      		st Z,r24
 10557 4808 9183      		std Z+1,r25
 10558 480a A283      		std Z+2,r26
 10559 480c B383      		std Z+3,r27
1213:lp_solve_5.5/lp_mipbb.c **** 
1214:lp_solve_5.5/lp_mipbb.c ****         if(lp->bb_breakfirst ||
 10560               		.loc 1 1214 0
 10561 480e 8D81      		ldd r24,Y+5
 10562 4810 9E81      		ldd r25,Y+6
 10563 4812 8959      		subi r24,-103
 10564 4814 9D4F      		sbci r25,-3
 10565 4816 DC01      		movw r26,r24
 10566 4818 8C91      		ld r24,X
 10567 481a 8823      		tst r24
 10568 481c 01F4      		brne .L408
1215:lp_solve_5.5/lp_mipbb.c ****            (!is_infinite(lp, lp->bb_breakOF) && bb_better(lp, OF_USERBREAK, OF_TEST_BE)))
 10569               		.loc 1 1215 0 discriminator 1
 10570 481e 8D81      		ldd r24,Y+5
 10571 4820 9E81      		ldd r25,Y+6
 10572 4822 8E5A      		subi r24,-82
 10573 4824 9C4F      		sbci r25,-4
 10574 4826 FC01      		movw r30,r24
 10575 4828 8081      		ld r24,Z
 10576 482a 9181      		ldd r25,Z+1
 10577 482c A281      		ldd r26,Z+2
 10578 482e B381      		ldd r27,Z+3
 10579 4830 2D81      		ldd r18,Y+5
 10580 4832 3E81      		ldd r19,Y+6
 10581 4834 AC01      		movw r20,r24
 10582 4836 BD01      		movw r22,r26
 10583 4838 C901      		movw r24,r18
 10584 483a 0E94 0000 		call is_infinite
1214:lp_solve_5.5/lp_mipbb.c ****            (!is_infinite(lp, lp->bb_breakOF) && bb_better(lp, OF_USERBREAK, OF_TEST_BE)))
 10585               		.loc 1 1214 0 discriminator 1
 10586 483e 8823      		tst r24
 10587 4840 01F4      		brne .L424
 10588               		.loc 1 1215 0
 10589 4842 8D81      		ldd r24,Y+5
 10590 4844 9E81      		ldd r25,Y+6
 10591 4846 42E0      		ldi r20,lo8(2)
 10592 4848 50E0      		ldi r21,0
 10593 484a 63E0      		ldi r22,lo8(3)
 10594 484c 70E0      		ldi r23,0
 10595 484e 0E94 0000 		call bb_better
 10596 4852 8823      		tst r24
 10597 4854 01F0      		breq .L424
 10598               	.L408:
1216:lp_solve_5.5/lp_mipbb.c ****           lp->bb_break = TRUE;
 10599               		.loc 1 1216 0
 10600 4856 8D81      		ldd r24,Y+5
 10601 4858 9E81      		ldd r25,Y+6
 10602 485a 8B50      		subi r24,11
 10603 485c 9D4F      		sbci r25,-3
 10604 485e 21E0      		ldi r18,lo8(1)
 10605 4860 DC01      		movw r26,r24
 10606 4862 2C93      		st X,r18
1154:lp_solve_5.5/lp_mipbb.c ****       is_better = (MYBOOL) (lp->solutioncount == 0) || bb_better(lp, OF_INCUMBENT | OF_DELTA, OF_TE
 10607               		.loc 1 1154 0
 10608 4864 00C0      		rjmp .L424
 10609               	.L370:
1217:lp_solve_5.5/lp_mipbb.c ****       }
1218:lp_solve_5.5/lp_mipbb.c ****     }
1219:lp_solve_5.5/lp_mipbb.c ****   }
1220:lp_solve_5.5/lp_mipbb.c ****   else {
1221:lp_solve_5.5/lp_mipbb.c ****     is_better = TRUE;
 10610               		.loc 1 1221 0
 10611 4866 81E0      		ldi r24,lo8(1)
 10612 4868 8B83      		std Y+3,r24
1222:lp_solve_5.5/lp_mipbb.c ****     lp->solutioncount = 1;
 10613               		.loc 1 1222 0
 10614 486a 8D81      		ldd r24,Y+5
 10615 486c 9E81      		ldd r25,Y+6
 10616 486e 865F      		subi r24,-10
 10617 4870 9D4F      		sbci r25,-3
 10618 4872 21E0      		ldi r18,lo8(1)
 10619 4874 30E0      		ldi r19,0
 10620 4876 FC01      		movw r30,r24
 10621 4878 3183      		std Z+1,r19
 10622 487a 2083      		st Z,r18
 10623 487c 00C0      		rjmp .L409
 10624               	.L424:
1154:lp_solve_5.5/lp_mipbb.c ****       is_better = (MYBOOL) (lp->solutioncount == 0) || bb_better(lp, OF_INCUMBENT | OF_DELTA, OF_TE
 10625               		.loc 1 1154 0
 10626 487e 0000      		nop
 10627               	.L409:
1223:lp_solve_5.5/lp_mipbb.c ****   }
1224:lp_solve_5.5/lp_mipbb.c **** 
1225:lp_solve_5.5/lp_mipbb.c ****   /* Transfer the successful solution vector */
1226:lp_solve_5.5/lp_mipbb.c ****   if(is_better || is_equal) {
 10628               		.loc 1 1226 0
 10629 4880 8B81      		ldd r24,Y+3
 10630 4882 8823      		tst r24
 10631 4884 01F4      		brne .L410
 10632               		.loc 1 1226 0 is_stmt 0 discriminator 1
 10633 4886 8C81      		ldd r24,Y+4
 10634 4888 8823      		tst r24
 10635 488a 01F4      		brne .+2
 10636 488c 00C0      		rjmp .L411
 10637               	.L410:
1227:lp_solve_5.5/lp_mipbb.c **** #ifdef ParanoiaMIP
1228:lp_solve_5.5/lp_mipbb.c ****     if((lp->bb_level > 0) &&
1229:lp_solve_5.5/lp_mipbb.c ****        (check_solution(lp, lp->columns, lp->solution,
1230:lp_solve_5.5/lp_mipbb.c ****                            lp->orig_upbo, lp->orig_lowbo, lp->epssolution) != OPTIMAL)) {
1231:lp_solve_5.5/lp_mipbb.c ****       lp->solutioncount = 0;
1232:lp_solve_5.5/lp_mipbb.c ****       lp->spx_status = NUMFAILURE;
1233:lp_solve_5.5/lp_mipbb.c ****       lp->bb_status = lp->spx_status;
1234:lp_solve_5.5/lp_mipbb.c ****       lp->bb_break = TRUE;
1235:lp_solve_5.5/lp_mipbb.c ****       return( FALSE );
1236:lp_solve_5.5/lp_mipbb.c ****     }
1237:lp_solve_5.5/lp_mipbb.c **** #endif
1238:lp_solve_5.5/lp_mipbb.c ****     transfer_solution(lp, (MYBOOL) ((lp->do_presolve & PRESOLVE_LASTMASKMODE) != PRESOLVE_NONE));
 10638               		.loc 1 1238 0 is_stmt 1
 10639 488e 8D81      		ldd r24,Y+5
 10640 4890 9E81      		ldd r25,Y+6
 10641 4892 8C58      		subi r24,-116
 10642 4894 9D4F      		sbci r25,-3
 10643 4896 DC01      		movw r26,r24
 10644 4898 8D91      		ld r24,X+
 10645 489a 9C91      		ld r25,X
 10646 489c 092E      		mov __tmp_reg__,r25
 10647 489e 000C      		lsl r0
 10648 48a0 AA0B      		sbc r26,r26
 10649 48a2 BB0B      		sbc r27,r27
 10650 48a4 A770      		andi r26,7
 10651 48a6 BB27      		clr r27
 10652 48a8 21E0      		ldi r18,lo8(1)
 10653 48aa 892B      		or r24,r25
 10654 48ac 8A2B      		or r24,r26
 10655 48ae 8B2B      		or r24,r27
 10656 48b0 01F4      		brne .L412
 10657 48b2 20E0      		ldi r18,0
 10658               	.L412:
 10659 48b4 8D81      		ldd r24,Y+5
 10660 48b6 9E81      		ldd r25,Y+6
 10661 48b8 622F      		mov r22,r18
 10662 48ba 0E94 0000 		call transfer_solution
1239:lp_solve_5.5/lp_mipbb.c ****     if((MIP_count(lp) > 0) && (lp->bb_totalnodes > 0)) {
 10663               		.loc 1 1239 0
 10664 48be 8D81      		ldd r24,Y+5
 10665 48c0 9E81      		ldd r25,Y+6
 10666 48c2 0E94 0000 		call MIP_count
 10667 48c6 1816      		cp __zero_reg__,r24
 10668 48c8 1906      		cpc __zero_reg__,r25
 10669 48ca 04F4      		brge .L413
 10670               		.loc 1 1239 0 is_stmt 0 discriminator 1
 10671 48cc 8D81      		ldd r24,Y+5
 10672 48ce 9E81      		ldd r25,Y+6
 10673 48d0 8A5C      		subi r24,-54
 10674 48d2 9C4F      		sbci r25,-4
 10675 48d4 FC01      		movw r30,r24
 10676 48d6 A080      		ld r10,Z
 10677 48d8 DC01      		movw r26,r24
 10678 48da 1196      		adiw r26,1
 10679 48dc BC90      		ld r11,X
 10680 48de FC01      		movw r30,r24
 10681 48e0 C280      		ldd r12,Z+2
 10682 48e2 DC01      		movw r26,r24
 10683 48e4 1396      		adiw r26,3
 10684 48e6 DC90      		ld r13,X
 10685 48e8 FC01      		movw r30,r24
 10686 48ea E480      		ldd r14,Z+4
 10687 48ec DC01      		movw r26,r24
 10688 48ee 1596      		adiw r26,5
 10689 48f0 FC90      		ld r15,X
 10690 48f2 FC01      		movw r30,r24
 10691 48f4 0681      		ldd r16,Z+6
 10692 48f6 DC01      		movw r26,r24
 10693 48f8 1796      		adiw r26,7
 10694 48fa 1C91      		ld r17,X
 10695 48fc 2A2D      		mov r18,r10
 10696 48fe 3B2D      		mov r19,r11
 10697 4900 4C2D      		mov r20,r12
 10698 4902 5D2D      		mov r21,r13
 10699 4904 6E2D      		mov r22,r14
 10700 4906 7F2D      		mov r23,r15
 10701 4908 802F      		mov r24,r16
 10702 490a 912F      		mov r25,r17
 10703 490c A0E0      		ldi r26,0
 10704 490e 0E94 0000 		call __cmpdi2_s8
 10705 4912 01F0      		breq .L413
 10706 4914 04F0      		brlt .L413
1240:lp_solve_5.5/lp_mipbb.c ****       if ((!construct_duals(lp)) ||
 10707               		.loc 1 1240 0 is_stmt 1
 10708 4916 8D81      		ldd r24,Y+5
 10709 4918 9E81      		ldd r25,Y+6
 10710 491a 0E94 0000 		call construct_duals
 10711 491e 8823      		tst r24
 10712 4920 01F0      		breq .L413
1241:lp_solve_5.5/lp_mipbb.c ****           (is_presolve(lp, PRESOLVE_SENSDUALS) &&
 10713               		.loc 1 1241 0 discriminator 1
 10714 4922 8D81      		ldd r24,Y+5
 10715 4924 9E81      		ldd r25,Y+6
 10716 4926 60E0      		ldi r22,0
 10717 4928 70E0      		ldi r23,0
 10718 492a 0E94 0000 		call is_presolve
1240:lp_solve_5.5/lp_mipbb.c ****       if ((!construct_duals(lp)) ||
 10719               		.loc 1 1240 0 discriminator 1
 10720 492e 8823      		tst r24
 10721 4930 01F0      		breq .L413
1242:lp_solve_5.5/lp_mipbb.c ****            (!construct_sensitivity_duals(lp) || !construct_sensitivity_obj(lp))
 10722               		.loc 1 1242 0
 10723 4932 8D81      		ldd r24,Y+5
 10724 4934 9E81      		ldd r25,Y+6
 10725 4936 0E94 0000 		call construct_sensitivity_duals
1241:lp_solve_5.5/lp_mipbb.c ****           (is_presolve(lp, PRESOLVE_SENSDUALS) &&
 10726               		.loc 1 1241 0
 10727 493a 8823      		tst r24
 10728 493c 01F0      		breq .L413
 10729               		.loc 1 1242 0
 10730 493e 8D81      		ldd r24,Y+5
 10731 4940 9E81      		ldd r25,Y+6
 10732 4942 0E94 0000 		call construct_sensitivity_obj
 10733               	.L413:
1243:lp_solve_5.5/lp_mipbb.c ****           )
1244:lp_solve_5.5/lp_mipbb.c ****          ) {
1245:lp_solve_5.5/lp_mipbb.c ****       }
1246:lp_solve_5.5/lp_mipbb.c ****     }
1247:lp_solve_5.5/lp_mipbb.c ****     if((reasonmsg != MSG_NONE) && (lp->msgmask & reasonmsg) && (lp->usermessage != NULL))
 10734               		.loc 1 1247 0
 10735 4946 8981      		ldd r24,Y+1
 10736 4948 9A81      		ldd r25,Y+2
 10737 494a 892B      		or r24,r25
 10738 494c 01F0      		breq .L414
 10739               		.loc 1 1247 0 is_stmt 0 discriminator 1
 10740 494e 8D81      		ldd r24,Y+5
 10741 4950 9E81      		ldd r25,Y+6
 10742 4952 8E5F      		subi r24,-2
 10743 4954 9B4F      		sbci r25,-5
 10744 4956 FC01      		movw r30,r24
 10745 4958 2081      		ld r18,Z
 10746 495a 3181      		ldd r19,Z+1
 10747 495c 8981      		ldd r24,Y+1
 10748 495e 9A81      		ldd r25,Y+2
 10749 4960 8223      		and r24,r18
 10750 4962 9323      		and r25,r19
 10751 4964 892B      		or r24,r25
 10752 4966 01F0      		breq .L414
 10753               		.loc 1 1247 0 discriminator 2
 10754 4968 8D81      		ldd r24,Y+5
 10755 496a 9E81      		ldd r25,Y+6
 10756 496c 9C5F      		subi r25,-4
 10757 496e DC01      		movw r26,r24
 10758 4970 8D91      		ld r24,X+
 10759 4972 9C91      		ld r25,X
 10760 4974 892B      		or r24,r25
 10761 4976 01F0      		breq .L414
1248:lp_solve_5.5/lp_mipbb.c ****       lp->usermessage(lp, lp->msghandle, reasonmsg);
 10762               		.loc 1 1248 0 is_stmt 1
 10763 4978 8D81      		ldd r24,Y+5
 10764 497a 9E81      		ldd r25,Y+6
 10765 497c 9C5F      		subi r25,-4
 10766 497e FC01      		movw r30,r24
 10767 4980 2081      		ld r18,Z
 10768 4982 3181      		ldd r19,Z+1
 10769 4984 8D81      		ldd r24,Y+5
 10770 4986 9E81      		ldd r25,Y+6
 10771 4988 8C5F      		subi r24,-4
 10772 498a 9B4F      		sbci r25,-5
 10773 498c DC01      		movw r26,r24
 10774 498e 6D91      		ld r22,X+
 10775 4990 7C91      		ld r23,X
 10776 4992 4981      		ldd r20,Y+1
 10777 4994 5A81      		ldd r21,Y+2
 10778 4996 8D81      		ldd r24,Y+5
 10779 4998 9E81      		ldd r25,Y+6
 10780 499a F901      		movw r30,r18
 10781 499c 0995      		icall
 10782               	.L414:
1249:lp_solve_5.5/lp_mipbb.c **** 
1250:lp_solve_5.5/lp_mipbb.c ****     if(lp->print_sol != FALSE) {
 10783               		.loc 1 1250 0
 10784 499e 8D81      		ldd r24,Y+5
 10785 49a0 9E81      		ldd r25,Y+6
 10786 49a2 865A      		subi r24,-90
 10787 49a4 9D4F      		sbci r25,-3
 10788 49a6 DC01      		movw r26,r24
 10789 49a8 8D91      		ld r24,X+
 10790 49aa 9C91      		ld r25,X
 10791 49ac 892B      		or r24,r25
 10792 49ae 01F0      		breq .L411
1251:lp_solve_5.5/lp_mipbb.c ****       print_objective(lp);
 10793               		.loc 1 1251 0
 10794 49b0 8D81      		ldd r24,Y+5
 10795 49b2 9E81      		ldd r25,Y+6
 10796 49b4 0E94 0000 		call print_objective
1252:lp_solve_5.5/lp_mipbb.c ****       print_solution(lp, 1);
 10797               		.loc 1 1252 0
 10798 49b8 8D81      		ldd r24,Y+5
 10799 49ba 9E81      		ldd r25,Y+6
 10800 49bc 61E0      		ldi r22,lo8(1)
 10801 49be 70E0      		ldi r23,0
 10802 49c0 0E94 0000 		call print_solution
 10803               	.L411:
1253:lp_solve_5.5/lp_mipbb.c ****     }
1254:lp_solve_5.5/lp_mipbb.c ****   }
1255:lp_solve_5.5/lp_mipbb.c **** 
1256:lp_solve_5.5/lp_mipbb.c ****   /* Do tracing and determine if we have arrived at the estimated lower MIP limit */
1257:lp_solve_5.5/lp_mipbb.c ****   *varcus = countnint;
 10804               		.loc 1 1257 0
 10805 49c4 2F85      		ldd r18,Y+15
 10806 49c6 3889      		ldd r19,Y+16
 10807 49c8 888D      		ldd r24,Y+24
 10808 49ca 998D      		ldd r25,Y+25
 10809 49cc FC01      		movw r30,r24
 10810 49ce 3183      		std Z+1,r19
 10811 49d0 2083      		st Z,r18
1258:lp_solve_5.5/lp_mipbb.c ****   if(MIP_count(lp) > 0) {
 10812               		.loc 1 1258 0
 10813 49d2 8D81      		ldd r24,Y+5
 10814 49d4 9E81      		ldd r25,Y+6
 10815 49d6 0E94 0000 		call MIP_count
 10816 49da 1816      		cp __zero_reg__,r24
 10817 49dc 1906      		cpc __zero_reg__,r25
 10818 49de 04F0      		brlt .+2
 10819 49e0 00C0      		rjmp .L415
1259:lp_solve_5.5/lp_mipbb.c ****     if((countnint == 0) && (lp->solutioncount == 1) && (lp->solutionlimit == 1) &&
 10820               		.loc 1 1259 0
 10821 49e2 8F85      		ldd r24,Y+15
 10822 49e4 9889      		ldd r25,Y+16
 10823 49e6 892B      		or r24,r25
 10824 49e8 01F4      		brne .L416
 10825               		.loc 1 1259 0 is_stmt 0 discriminator 1
 10826 49ea 8D81      		ldd r24,Y+5
 10827 49ec 9E81      		ldd r25,Y+6
 10828 49ee 865F      		subi r24,-10
 10829 49f0 9D4F      		sbci r25,-3
 10830 49f2 DC01      		movw r26,r24
 10831 49f4 8D91      		ld r24,X+
 10832 49f6 9C91      		ld r25,X
 10833 49f8 0197      		sbiw r24,1
 10834 49fa 01F4      		brne .L416
 10835               		.loc 1 1259 0 discriminator 2
 10836 49fc 8D81      		ldd r24,Y+5
 10837 49fe 9E81      		ldd r25,Y+6
 10838 4a00 845F      		subi r24,-12
 10839 4a02 9D4F      		sbci r25,-3
 10840 4a04 FC01      		movw r30,r24
 10841 4a06 8081      		ld r24,Z
 10842 4a08 9181      		ldd r25,Z+1
 10843 4a0a 0197      		sbiw r24,1
 10844 4a0c 01F4      		brne .L416
1260:lp_solve_5.5/lp_mipbb.c ****        (bb_better(lp, OF_DUALLIMIT, OF_TEST_BE) || bb_better(lp, OF_USERBREAK, OF_TEST_BE | OF_TEST
 10845               		.loc 1 1260 0 is_stmt 1 discriminator 3
 10846 4a0e 8D81      		ldd r24,Y+5
 10847 4a10 9E81      		ldd r25,Y+6
 10848 4a12 42E0      		ldi r20,lo8(2)
 10849 4a14 50E0      		ldi r21,0
 10850 4a16 65E0      		ldi r22,lo8(5)
 10851 4a18 70E0      		ldi r23,0
 10852 4a1a 0E94 0000 		call bb_better
1259:lp_solve_5.5/lp_mipbb.c ****     if((countnint == 0) && (lp->solutioncount == 1) && (lp->solutionlimit == 1) &&
 10853               		.loc 1 1259 0 discriminator 3
 10854 4a1e 8823      		tst r24
 10855 4a20 01F4      		brne .L417
 10856               		.loc 1 1260 0
 10857 4a22 8D81      		ldd r24,Y+5
 10858 4a24 9E81      		ldd r25,Y+6
 10859 4a26 4AE0      		ldi r20,lo8(10)
 10860 4a28 50E0      		ldi r21,0
 10861 4a2a 63E0      		ldi r22,lo8(3)
 10862 4a2c 70E0      		ldi r23,0
 10863 4a2e 0E94 0000 		call bb_better
 10864 4a32 8823      		tst r24
 10865 4a34 01F0      		breq .L416
 10866               	.L417:
1261:lp_solve_5.5/lp_mipbb.c ****       lp->bb_break = (MYBOOL) (countnint == 0);
 10867               		.loc 1 1261 0
 10868 4a36 8F85      		ldd r24,Y+15
 10869 4a38 9889      		ldd r25,Y+16
 10870 4a3a 21E0      		ldi r18,lo8(1)
 10871 4a3c 892B      		or r24,r25
 10872 4a3e 01F0      		breq .L418
 10873 4a40 20E0      		ldi r18,0
 10874               	.L418:
 10875 4a42 8D81      		ldd r24,Y+5
 10876 4a44 9E81      		ldd r25,Y+6
 10877 4a46 8B50      		subi r24,11
 10878 4a48 9D4F      		sbci r25,-3
 10879 4a4a DC01      		movw r26,r24
 10880 4a4c 2C93      		st X,r18
1262:lp_solve_5.5/lp_mipbb.c ****       return( FALSE );
 10881               		.loc 1 1262 0
 10882 4a4e 80E0      		ldi r24,0
 10883 4a50 00C0      		rjmp .L423
 10884               	.L416:
1263:lp_solve_5.5/lp_mipbb.c ****     }
1264:lp_solve_5.5/lp_mipbb.c ****     else if(lp->bb_level > 0) {
 10885               		.loc 1 1264 0
 10886 4a52 8D81      		ldd r24,Y+5
 10887 4a54 9E81      		ldd r25,Y+6
 10888 4a56 805D      		subi r24,-48
 10889 4a58 9C4F      		sbci r25,-4
 10890 4a5a FC01      		movw r30,r24
 10891 4a5c 8081      		ld r24,Z
 10892 4a5e 9181      		ldd r25,Z+1
 10893 4a60 1816      		cp __zero_reg__,r24
 10894 4a62 1906      		cpc __zero_reg__,r25
 10895 4a64 04F0      		brlt .+2
 10896 4a66 00C0      		rjmp .L419
1265:lp_solve_5.5/lp_mipbb.c **** #ifdef MIPboundWithOF
1266:lp_solve_5.5/lp_mipbb.c ****       if((lp->constraintOF > 0) && (countnint == 0))
1267:lp_solve_5.5/lp_mipbb.c ****          set_rh(lp, lp->constraintOF, lp->solution[0] + my_chsign(!is_maxim(lp), lp->bb_deltaOF));
1268:lp_solve_5.5/lp_mipbb.c **** #endif
1269:lp_solve_5.5/lp_mipbb.c ****       if(lp->spx_trace)
 10897               		.loc 1 1269 0
 10898 4a68 8D81      		ldd r24,Y+5
 10899 4a6a 9E81      		ldd r25,Y+6
 10900 4a6c 8E5F      		subi r24,-2
 10901 4a6e 9D4F      		sbci r25,-3
 10902 4a70 DC01      		movw r26,r24
 10903 4a72 8C91      		ld r24,X
 10904 4a74 8823      		tst r24
 10905 4a76 01F4      		brne .+2
 10906 4a78 00C0      		rjmp .L419
1270:lp_solve_5.5/lp_mipbb.c ****         report(lp, DETAILED, "B&B level %5d OPT %16s value " RESULTVALUEMASK "\n",
1271:lp_solve_5.5/lp_mipbb.c ****                              lp->bb_level, (*varno) ? "   " : "INT", lp->solution[0]);
 10907               		.loc 1 1271 0
 10908 4a7a 8D81      		ldd r24,Y+5
 10909 4a7c 9E81      		ldd r25,Y+6
 10910 4a7e 8E5E      		subi r24,-18
 10911 4a80 9D4F      		sbci r25,-3
 10912 4a82 FC01      		movw r30,r24
 10913 4a84 8081      		ld r24,Z
 10914 4a86 9181      		ldd r25,Z+1
1270:lp_solve_5.5/lp_mipbb.c ****         report(lp, DETAILED, "B&B level %5d OPT %16s value " RESULTVALUEMASK "\n",
 10915               		.loc 1 1270 0
 10916 4a88 FC01      		movw r30,r24
 10917 4a8a 8081      		ld r24,Z
 10918 4a8c 9181      		ldd r25,Z+1
 10919 4a8e A281      		ldd r26,Z+2
 10920 4a90 B381      		ldd r27,Z+3
 10921               		.loc 1 1271 0
 10922 4a92 2C89      		ldd r18,Y+20
 10923 4a94 3D89      		ldd r19,Y+21
 10924 4a96 F901      		movw r30,r18
 10925 4a98 2081      		ld r18,Z
 10926 4a9a 3181      		ldd r19,Z+1
1270:lp_solve_5.5/lp_mipbb.c ****         report(lp, DETAILED, "B&B level %5d OPT %16s value " RESULTVALUEMASK "\n",
 10927               		.loc 1 1270 0
 10928 4a9c 232B      		or r18,r19
 10929 4a9e 01F0      		breq .L420
1270:lp_solve_5.5/lp_mipbb.c ****         report(lp, DETAILED, "B&B level %5d OPT %16s value " RESULTVALUEMASK "\n",
 10930               		.loc 1 1270 0 is_stmt 0 discriminator 1
 10931 4aa0 20E0      		ldi r18,lo8(.LC23)
 10932 4aa2 30E0      		ldi r19,hi8(.LC23)
 10933 4aa4 00C0      		rjmp .L421
 10934               	.L420:
1270:lp_solve_5.5/lp_mipbb.c ****         report(lp, DETAILED, "B&B level %5d OPT %16s value " RESULTVALUEMASK "\n",
 10935               		.loc 1 1270 0 discriminator 2
 10936 4aa6 20E0      		ldi r18,lo8(.LC24)
 10937 4aa8 30E0      		ldi r19,hi8(.LC24)
 10938               	.L421:
1270:lp_solve_5.5/lp_mipbb.c ****         report(lp, DETAILED, "B&B level %5d OPT %16s value " RESULTVALUEMASK "\n",
 10939               		.loc 1 1270 0 discriminator 4
 10940 4aaa 4D81      		ldd r20,Y+5
 10941 4aac 5E81      		ldd r21,Y+6
 10942 4aae 405D      		subi r20,-48
 10943 4ab0 5C4F      		sbci r21,-4
 10944 4ab2 FA01      		movw r30,r20
 10945 4ab4 4081      		ld r20,Z
 10946 4ab6 5181      		ldd r21,Z+1
 10947 4ab8 6B2F      		mov r22,r27
 10948 4aba 6F93      		push r22
 10949 4abc 6A2F      		mov r22,r26
 10950 4abe 6F93      		push r22
 10951 4ac0 692F      		mov r22,r25
 10952 4ac2 6F93      		push r22
 10953 4ac4 8F93      		push r24
 10954 4ac6 832F      		mov r24,r19
 10955 4ac8 8F93      		push r24
 10956 4aca 822F      		mov r24,r18
 10957 4acc 8F93      		push r24
 10958 4ace 852F      		mov r24,r21
 10959 4ad0 8F93      		push r24
 10960 4ad2 842F      		mov r24,r20
 10961 4ad4 8F93      		push r24
 10962 4ad6 80E0      		ldi r24,lo8(.LC25)
 10963 4ad8 90E0      		ldi r25,hi8(.LC25)
 10964 4ada 892F      		mov r24,r25
 10965 4adc 8F93      		push r24
 10966 4ade 80E0      		ldi r24,lo8(.LC25)
 10967 4ae0 90E0      		ldi r25,hi8(.LC25)
 10968 4ae2 8F93      		push r24
 10969 4ae4 1F92      		push __zero_reg__
 10970 4ae6 85E0      		ldi r24,lo8(5)
 10971 4ae8 8F93      		push r24
 10972 4aea 8E81      		ldd r24,Y+6
 10973 4aec 8F93      		push r24
 10974 4aee 8D81      		ldd r24,Y+5
 10975 4af0 8F93      		push r24
 10976 4af2 0E94 0000 		call report
 10977 4af6 4DB7      		in r20,__SP_L__
 10978 4af8 5EB7      		in r21,__SP_H__
 10979 4afa 425F      		subi r20,-14
 10980 4afc 5F4F      		sbci r21,-1
 10981 4afe 0FB6      		in __tmp_reg__,__SREG__
 10982 4b00 F894      		cli
 10983 4b02 DEBF      		out __SP_H__,r29
 10984 4b04 0FBE      		out __SREG__,__tmp_reg__
 10985 4b06 CDBF      		out __SP_L__,r28
 10986               	.L419:
1272:lp_solve_5.5/lp_mipbb.c ****     }
1273:lp_solve_5.5/lp_mipbb.c ****     return( (MYBOOL) (*varno > 0));
 10987               		.loc 1 1273 0 is_stmt 1
 10988 4b08 8C89      		ldd r24,Y+20
 10989 4b0a 9D89      		ldd r25,Y+21
 10990 4b0c DC01      		movw r26,r24
 10991 4b0e 8D91      		ld r24,X+
 10992 4b10 9C91      		ld r25,X
 10993 4b12 21E0      		ldi r18,lo8(1)
 10994 4b14 1816      		cp __zero_reg__,r24
 10995 4b16 1906      		cpc __zero_reg__,r25
 10996 4b18 04F0      		brlt .L422
 10997 4b1a 20E0      		ldi r18,0
 10998               	.L422:
 10999 4b1c 822F      		mov r24,r18
 11000 4b1e 00C0      		rjmp .L423
 11001               	.L415:
1274:lp_solve_5.5/lp_mipbb.c ****   }
1275:lp_solve_5.5/lp_mipbb.c ****   else
1276:lp_solve_5.5/lp_mipbb.c ****     return( FALSE );
 11002               		.loc 1 1276 0
 11003 4b20 80E0      		ldi r24,0
 11004               	.L423:
 11005               	/* epilogue start */
1277:lp_solve_5.5/lp_mipbb.c **** 
1278:lp_solve_5.5/lp_mipbb.c **** }
 11006               		.loc 1 1278 0 discriminator 2
 11007 4b22 6996      		adiw r28,25
 11008 4b24 0FB6      		in __tmp_reg__,__SREG__
 11009 4b26 F894      		cli
 11010 4b28 DEBF      		out __SP_H__,r29
 11011 4b2a 0FBE      		out __SREG__,__tmp_reg__
 11012 4b2c CDBF      		out __SP_L__,r28
 11013 4b2e DF91      		pop r29
 11014 4b30 CF91      		pop r28
 11015 4b32 1F91      		pop r17
 11016 4b34 0F91      		pop r16
 11017 4b36 FF90      		pop r15
 11018 4b38 EF90      		pop r14
 11019 4b3a DF90      		pop r13
 11020 4b3c CF90      		pop r12
 11021 4b3e BF90      		pop r11
 11022 4b40 AF90      		pop r10
 11023 4b42 9F90      		pop r9
 11024 4b44 8F90      		pop r8
 11025 4b46 7F90      		pop r7
 11026 4b48 6F90      		pop r6
 11027 4b4a 5F90      		pop r5
 11028 4b4c 4F90      		pop r4
 11029 4b4e 3F90      		pop r3
 11030 4b50 2F90      		pop r2
 11031 4b52 0895      		ret
 11032               		.cfi_endproc
 11033               	.LFE22:
 11035               	.global	solve_BB
 11037               	solve_BB:
 11038               	.LFB23:
1279:lp_solve_5.5/lp_mipbb.c **** 
1280:lp_solve_5.5/lp_mipbb.c **** STATIC int solve_BB(BBrec *BB)
1281:lp_solve_5.5/lp_mipbb.c **** {
 11039               		.loc 1 1281 0
 11040               		.cfi_startproc
 11041 4b54 0F93      		push r16
 11042               	.LCFI116:
 11043               		.cfi_def_cfa_offset 3
 11044               		.cfi_offset 16, -2
 11045 4b56 1F93      		push r17
 11046               	.LCFI117:
 11047               		.cfi_def_cfa_offset 4
 11048               		.cfi_offset 17, -3
 11049 4b58 CF93      		push r28
 11050               	.LCFI118:
 11051               		.cfi_def_cfa_offset 5
 11052               		.cfi_offset 28, -4
 11053 4b5a DF93      		push r29
 11054               	.LCFI119:
 11055               		.cfi_def_cfa_offset 6
 11056               		.cfi_offset 29, -5
 11057 4b5c CDB7      		in r28,__SP_L__
 11058 4b5e DEB7      		in r29,__SP_H__
 11059               	.LCFI120:
 11060               		.cfi_def_cfa_register 28
 11061 4b60 2A97      		sbiw r28,10
 11062               	.LCFI121:
 11063               		.cfi_def_cfa_offset 16
 11064 4b62 0FB6      		in __tmp_reg__,__SREG__
 11065 4b64 F894      		cli
 11066 4b66 DEBF      		out __SP_H__,r29
 11067 4b68 0FBE      		out __SREG__,__tmp_reg__
 11068 4b6a CDBF      		out __SP_L__,r28
 11069               	/* prologue: function */
 11070               	/* frame size = 10 */
 11071               	/* stack size = 14 */
 11072               	.L__stack_usage = 14
 11073 4b6c 9887      		std Y+8,r25
 11074 4b6e 8F83      		std Y+7,r24
1282:lp_solve_5.5/lp_mipbb.c ****   int   K, status;
1283:lp_solve_5.5/lp_mipbb.c ****   lprec *lp = BB->lp;
 11075               		.loc 1 1283 0
 11076 4b70 8F81      		ldd r24,Y+7
 11077 4b72 9885      		ldd r25,Y+8
 11078 4b74 FC01      		movw r30,r24
 11079 4b76 8481      		ldd r24,Z+4
 11080 4b78 9581      		ldd r25,Z+5
 11081 4b7a 9C83      		std Y+4,r25
 11082 4b7c 8B83      		std Y+3,r24
1284:lp_solve_5.5/lp_mipbb.c **** 
1285:lp_solve_5.5/lp_mipbb.c ****   /* Protect against infinite recursions do to integer rounding effects */
1286:lp_solve_5.5/lp_mipbb.c ****   status = PROCFAIL;
 11083               		.loc 1 1286 0
 11084 4b7e 8AE0      		ldi r24,lo8(10)
 11085 4b80 90E0      		ldi r25,0
 11086 4b82 9A83      		std Y+2,r25
 11087 4b84 8983      		std Y+1,r24
1287:lp_solve_5.5/lp_mipbb.c **** 
1288:lp_solve_5.5/lp_mipbb.c ****   /* Shortcut variables, set default bounds */
1289:lp_solve_5.5/lp_mipbb.c ****   K = BB->varno;
 11088               		.loc 1 1289 0
 11089 4b86 8F81      		ldd r24,Y+7
 11090 4b88 9885      		ldd r25,Y+8
 11091 4b8a FC01      		movw r30,r24
 11092 4b8c 8681      		ldd r24,Z+6
 11093 4b8e 9781      		ldd r25,Z+7
 11094 4b90 9E83      		std Y+6,r25
 11095 4b92 8D83      		std Y+5,r24
1290:lp_solve_5.5/lp_mipbb.c **** 
1291:lp_solve_5.5/lp_mipbb.c ****   /* Load simple MIP bounds */
1292:lp_solve_5.5/lp_mipbb.c ****   if(K > 0) {
 11096               		.loc 1 1292 0
 11097 4b94 8D81      		ldd r24,Y+5
 11098 4b96 9E81      		ldd r25,Y+6
 11099 4b98 1816      		cp __zero_reg__,r24
 11100 4b9a 1906      		cpc __zero_reg__,r25
 11101 4b9c 04F0      		brlt .+2
 11102 4b9e 00C0      		rjmp .L426
1293:lp_solve_5.5/lp_mipbb.c **** 
1294:lp_solve_5.5/lp_mipbb.c ****     /* Update cuts, if specified */
1295:lp_solve_5.5/lp_mipbb.c ****     updatecuts_BB(lp);
 11103               		.loc 1 1295 0
 11104 4ba0 8B81      		ldd r24,Y+3
 11105 4ba2 9C81      		ldd r25,Y+4
 11106 4ba4 0E94 0000 		call updatecuts_BB
1296:lp_solve_5.5/lp_mipbb.c **** 
1297:lp_solve_5.5/lp_mipbb.c ****     /* BRANCH_FLOOR: Force the variable to be smaller than the B&B upper bound */
1298:lp_solve_5.5/lp_mipbb.c ****     if(BB->isfloor)
 11107               		.loc 1 1298 0
 11108 4ba8 8F81      		ldd r24,Y+7
 11109 4baa 9885      		ldd r25,Y+8
 11110 4bac FC01      		movw r30,r24
 11111 4bae 86A9      		ldd r24,Z+54
 11112 4bb0 8823      		tst r24
 11113 4bb2 01F0      		breq .L427
1299:lp_solve_5.5/lp_mipbb.c ****       modifyUndoLadder(lp->bb_upperchange, K, BB->upbo, BB->UPbound);
 11114               		.loc 1 1299 0
 11115 4bb4 8F81      		ldd r24,Y+7
 11116 4bb6 9885      		ldd r25,Y+8
 11117 4bb8 FC01      		movw r30,r24
 11118 4bba 84A1      		ldd r24,Z+36
 11119 4bbc 95A1      		ldd r25,Z+37
 11120 4bbe A6A1      		ldd r26,Z+38
 11121 4bc0 B7A1      		ldd r27,Z+39
 11122 4bc2 2F81      		ldd r18,Y+7
 11123 4bc4 3885      		ldd r19,Y+8
 11124 4bc6 F901      		movw r30,r18
 11125 4bc8 40A1      		ldd r20,Z+32
 11126 4bca 51A1      		ldd r21,Z+33
 11127 4bcc 2B81      		ldd r18,Y+3
 11128 4bce 3C81      		ldd r19,Y+4
 11129 4bd0 265B      		subi r18,-74
 11130 4bd2 3C4F      		sbci r19,-4
 11131 4bd4 F901      		movw r30,r18
 11132 4bd6 0190      		ld __tmp_reg__,Z+
 11133 4bd8 F081      		ld r31,Z
 11134 4bda E02D      		mov r30,__tmp_reg__
 11135 4bdc FA87      		std Y+10,r31
 11136 4bde E987      		std Y+9,r30
 11137 4be0 6D81      		ldd r22,Y+5
 11138 4be2 7E81      		ldd r23,Y+6
 11139 4be4 8C01      		movw r16,r24
 11140 4be6 9D01      		movw r18,r26
 11141 4be8 8985      		ldd r24,Y+9
 11142 4bea 9A85      		ldd r25,Y+10
 11143 4bec 0E94 0000 		call modifyUndoLadder
 11144 4bf0 00C0      		rjmp .L428
 11145               	.L427:
1300:lp_solve_5.5/lp_mipbb.c **** 
1301:lp_solve_5.5/lp_mipbb.c ****     /* BRANCH_CEILING: Force the variable to be greater than the B&B lower bound */
1302:lp_solve_5.5/lp_mipbb.c ****     else
1303:lp_solve_5.5/lp_mipbb.c ****       modifyUndoLadder(lp->bb_lowerchange, K, BB->lowbo, BB->LObound);
 11146               		.loc 1 1303 0
 11147 4bf2 8F81      		ldd r24,Y+7
 11148 4bf4 9885      		ldd r25,Y+8
 11149 4bf6 FC01      		movw r30,r24
 11150 4bf8 80A5      		ldd r24,Z+40
 11151 4bfa 91A5      		ldd r25,Z+41
 11152 4bfc A2A5      		ldd r26,Z+42
 11153 4bfe B3A5      		ldd r27,Z+43
 11154 4c00 2F81      		ldd r18,Y+7
 11155 4c02 3885      		ldd r19,Y+8
 11156 4c04 F901      		movw r30,r18
 11157 4c06 42A1      		ldd r20,Z+34
 11158 4c08 53A1      		ldd r21,Z+35
 11159 4c0a 2B81      		ldd r18,Y+3
 11160 4c0c 3C81      		ldd r19,Y+4
 11161 4c0e 245B      		subi r18,-76
 11162 4c10 3C4F      		sbci r19,-4
 11163 4c12 F901      		movw r30,r18
 11164 4c14 0190      		ld __tmp_reg__,Z+
 11165 4c16 F081      		ld r31,Z
 11166 4c18 E02D      		mov r30,__tmp_reg__
 11167 4c1a FA87      		std Y+10,r31
 11168 4c1c E987      		std Y+9,r30
 11169 4c1e 6D81      		ldd r22,Y+5
 11170 4c20 7E81      		ldd r23,Y+6
 11171 4c22 8C01      		movw r16,r24
 11172 4c24 9D01      		movw r18,r26
 11173 4c26 8985      		ldd r24,Y+9
 11174 4c28 9A85      		ldd r25,Y+10
 11175 4c2a 0E94 0000 		call modifyUndoLadder
 11176               	.L428:
1304:lp_solve_5.5/lp_mipbb.c **** 
1305:lp_solve_5.5/lp_mipbb.c ****     /* Update MIP node count */
1306:lp_solve_5.5/lp_mipbb.c ****     BB->nodessolved++;
 11177               		.loc 1 1306 0
 11178 4c2e 8F81      		ldd r24,Y+7
 11179 4c30 9885      		ldd r25,Y+8
 11180 4c32 FC01      		movw r30,r24
 11181 4c34 8089      		ldd r24,Z+16
 11182 4c36 9189      		ldd r25,Z+17
 11183 4c38 9C01      		movw r18,r24
 11184 4c3a 2F5F      		subi r18,-1
 11185 4c3c 3F4F      		sbci r19,-1
 11186 4c3e 8F81      		ldd r24,Y+7
 11187 4c40 9885      		ldd r25,Y+8
 11188 4c42 FC01      		movw r30,r24
 11189 4c44 318B      		std Z+17,r19
 11190 4c46 208B      		std Z+16,r18
 11191               	.L426:
1307:lp_solve_5.5/lp_mipbb.c **** 
1308:lp_solve_5.5/lp_mipbb.c ****   }
1309:lp_solve_5.5/lp_mipbb.c **** 
1310:lp_solve_5.5/lp_mipbb.c ****   /* Solve! */
1311:lp_solve_5.5/lp_mipbb.c ****   status = solve_LP(lp, BB);
 11192               		.loc 1 1311 0
 11193 4c48 2F81      		ldd r18,Y+7
 11194 4c4a 3885      		ldd r19,Y+8
 11195 4c4c 8B81      		ldd r24,Y+3
 11196 4c4e 9C81      		ldd r25,Y+4
 11197 4c50 B901      		movw r22,r18
 11198 4c52 0E94 0000 		call solve_LP
 11199 4c56 9A83      		std Y+2,r25
 11200 4c58 8983      		std Y+1,r24
1312:lp_solve_5.5/lp_mipbb.c **** 
1313:lp_solve_5.5/lp_mipbb.c ****   /* Do special feasibility assessment of high order SOS'es */
1314:lp_solve_5.5/lp_mipbb.c **** #if 1
1315:lp_solve_5.5/lp_mipbb.c ****   if((status == OPTIMAL) && (BB->vartype == BB_SOS) && !SOS_is_feasible(lp->SOS, 0, lp->solution))
 11201               		.loc 1 1315 0
 11202 4c5a 8981      		ldd r24,Y+1
 11203 4c5c 9A81      		ldd r25,Y+2
 11204 4c5e 892B      		or r24,r25
 11205 4c60 01F4      		brne .L429
 11206               		.loc 1 1315 0 is_stmt 0 discriminator 1
 11207 4c62 8F81      		ldd r24,Y+7
 11208 4c64 9885      		ldd r25,Y+8
 11209 4c66 FC01      		movw r30,r24
 11210 4c68 8085      		ldd r24,Z+8
 11211 4c6a 9185      		ldd r25,Z+9
 11212 4c6c 0397      		sbiw r24,3
 11213 4c6e 01F4      		brne .L429
 11214               		.loc 1 1315 0 discriminator 2
 11215 4c70 8B81      		ldd r24,Y+3
 11216 4c72 9C81      		ldd r25,Y+4
 11217 4c74 8E5E      		subi r24,-18
 11218 4c76 9D4F      		sbci r25,-3
 11219 4c78 FC01      		movw r30,r24
 11220 4c7a 2081      		ld r18,Z
 11221 4c7c 3181      		ldd r19,Z+1
 11222 4c7e 8B81      		ldd r24,Y+3
 11223 4c80 9C81      		ldd r25,Y+4
 11224 4c82 8256      		subi r24,98
 11225 4c84 9D4F      		sbci r25,-3
 11226 4c86 FC01      		movw r30,r24
 11227 4c88 8081      		ld r24,Z
 11228 4c8a 9181      		ldd r25,Z+1
 11229 4c8c A901      		movw r20,r18
 11230 4c8e 60E0      		ldi r22,0
 11231 4c90 70E0      		ldi r23,0
 11232 4c92 0E94 0000 		call SOS_is_feasible
 11233 4c96 8823      		tst r24
 11234 4c98 01F4      		brne .L429
1316:lp_solve_5.5/lp_mipbb.c ****     status = INFEASIBLE;
 11235               		.loc 1 1316 0 is_stmt 1
 11236 4c9a 82E0      		ldi r24,lo8(2)
 11237 4c9c 90E0      		ldi r25,0
 11238 4c9e 9A83      		std Y+2,r25
 11239 4ca0 8983      		std Y+1,r24
 11240               	.L429:
1317:lp_solve_5.5/lp_mipbb.c **** #endif
1318:lp_solve_5.5/lp_mipbb.c **** 
1319:lp_solve_5.5/lp_mipbb.c ****   return( status );
 11241               		.loc 1 1319 0
 11242 4ca2 8981      		ldd r24,Y+1
 11243 4ca4 9A81      		ldd r25,Y+2
 11244               	/* epilogue start */
1320:lp_solve_5.5/lp_mipbb.c **** }
 11245               		.loc 1 1320 0
 11246 4ca6 2A96      		adiw r28,10
 11247 4ca8 0FB6      		in __tmp_reg__,__SREG__
 11248 4caa F894      		cli
 11249 4cac DEBF      		out __SP_H__,r29
 11250 4cae 0FBE      		out __SREG__,__tmp_reg__
 11251 4cb0 CDBF      		out __SP_L__,r28
 11252 4cb2 DF91      		pop r29
 11253 4cb4 CF91      		pop r28
 11254 4cb6 1F91      		pop r17
 11255 4cb8 0F91      		pop r16
 11256 4cba 0895      		ret
 11257               		.cfi_endproc
 11258               	.LFE23:
 11260               		.section	.rodata
 11261               	.LC26:
 11262 0367 7374 726F 		.string	"strongbranch_BB: Invalid bound settings restored for variable %d\n"
 11262      6E67 6272 
 11262      616E 6368 
 11262      5F42 423A 
 11262      2049 6E76 
 11263               		.text
 11264               	.global	strongbranch_BB
 11266               	strongbranch_BB:
 11267               	.LFB24:
1321:lp_solve_5.5/lp_mipbb.c **** 
1322:lp_solve_5.5/lp_mipbb.c **** /* Routine to compute a "strong" pseudo-cost update for a node */
1323:lp_solve_5.5/lp_mipbb.c **** STATIC MYBOOL strongbranch_BB(lprec *lp, BBrec *BB, int varno, int vartype, int varcus)
1324:lp_solve_5.5/lp_mipbb.c **** {
 11268               		.loc 1 1324 0
 11269               		.cfi_startproc
 11270 4cbc DF92      		push r13
 11271               	.LCFI122:
 11272               		.cfi_def_cfa_offset 3
 11273               		.cfi_offset 13, -2
 11274 4cbe EF92      		push r14
 11275               	.LCFI123:
 11276               		.cfi_def_cfa_offset 4
 11277               		.cfi_offset 14, -3
 11278 4cc0 FF92      		push r15
 11279               	.LCFI124:
 11280               		.cfi_def_cfa_offset 5
 11281               		.cfi_offset 15, -4
 11282 4cc2 0F93      		push r16
 11283               	.LCFI125:
 11284               		.cfi_def_cfa_offset 6
 11285               		.cfi_offset 16, -5
 11286 4cc4 1F93      		push r17
 11287               	.LCFI126:
 11288               		.cfi_def_cfa_offset 7
 11289               		.cfi_offset 17, -6
 11290 4cc6 CF93      		push r28
 11291               	.LCFI127:
 11292               		.cfi_def_cfa_offset 8
 11293               		.cfi_offset 28, -7
 11294 4cc8 DF93      		push r29
 11295               	.LCFI128:
 11296               		.cfi_def_cfa_offset 9
 11297               		.cfi_offset 29, -8
 11298 4cca CDB7      		in r28,__SP_L__
 11299 4ccc DEB7      		in r29,__SP_H__
 11300               	.LCFI129:
 11301               		.cfi_def_cfa_register 28
 11302 4cce 6197      		sbiw r28,17
 11303               	.LCFI130:
 11304               		.cfi_def_cfa_offset 26
 11305 4cd0 0FB6      		in __tmp_reg__,__SREG__
 11306 4cd2 F894      		cli
 11307 4cd4 DEBF      		out __SP_H__,r29
 11308 4cd6 0FBE      		out __SREG__,__tmp_reg__
 11309 4cd8 CDBF      		out __SP_L__,r28
 11310               	/* prologue: function */
 11311               	/* frame size = 17 */
 11312               	/* stack size = 24 */
 11313               	.L__stack_usage = 24
 11314 4cda 9F83      		std Y+7,r25
 11315 4cdc 8E83      		std Y+6,r24
 11316 4cde 7987      		std Y+9,r23
 11317 4ce0 6887      		std Y+8,r22
 11318 4ce2 5B87      		std Y+11,r21
 11319 4ce4 4A87      		std Y+10,r20
 11320 4ce6 3D87      		std Y+13,r19
 11321 4ce8 2C87      		std Y+12,r18
 11322 4cea 1F87      		std Y+15,r17
 11323 4cec 0E87      		std Y+14,r16
1325:lp_solve_5.5/lp_mipbb.c ****   MYBOOL   success = FALSE;
 11324               		.loc 1 1325 0
 11325 4cee 1982      		std Y+1,__zero_reg__
1326:lp_solve_5.5/lp_mipbb.c ****   int      i;
1327:lp_solve_5.5/lp_mipbb.c ****   BBrec    *strongBB;
1328:lp_solve_5.5/lp_mipbb.c **** 
1329:lp_solve_5.5/lp_mipbb.c ****   /* Create new B&B level and solve each of the branches */
1330:lp_solve_5.5/lp_mipbb.c ****   lp->is_strongbranch = TRUE;
 11326               		.loc 1 1330 0
 11327 4cf0 8E81      		ldd r24,Y+6
 11328 4cf2 9F81      		ldd r25,Y+7
 11329 4cf4 8452      		subi r24,36
 11330 4cf6 9D4F      		sbci r25,-3
 11331 4cf8 21E0      		ldi r18,lo8(1)
 11332 4cfa 30E0      		ldi r19,0
 11333 4cfc FC01      		movw r30,r24
 11334 4cfe 3183      		std Z+1,r19
 11335 4d00 2083      		st Z,r18
1331:lp_solve_5.5/lp_mipbb.c ****   push_basis(lp, lp->var_basic, lp->is_basic, lp->is_lower);
 11336               		.loc 1 1331 0
 11337 4d02 8E81      		ldd r24,Y+6
 11338 4d04 9F81      		ldd r25,Y+7
 11339 4d06 8E52      		subi r24,46
 11340 4d08 9D4F      		sbci r25,-3
 11341 4d0a FC01      		movw r30,r24
 11342 4d0c 2081      		ld r18,Z
 11343 4d0e 3181      		ldd r19,Z+1
 11344 4d10 8E81      		ldd r24,Y+6
 11345 4d12 9F81      		ldd r25,Y+7
 11346 4d14 8053      		subi r24,48
 11347 4d16 9D4F      		sbci r25,-3
 11348 4d18 FC01      		movw r30,r24
 11349 4d1a 4081      		ld r20,Z
 11350 4d1c 5181      		ldd r21,Z+1
 11351 4d1e 8E81      		ldd r24,Y+6
 11352 4d20 9F81      		ldd r25,Y+7
 11353 4d22 8453      		subi r24,52
 11354 4d24 9D4F      		sbci r25,-3
 11355 4d26 FC01      		movw r30,r24
 11356 4d28 6081      		ld r22,Z
 11357 4d2a 7181      		ldd r23,Z+1
 11358 4d2c 8E81      		ldd r24,Y+6
 11359 4d2e 9F81      		ldd r25,Y+7
 11360 4d30 0E94 0000 		call push_basis
1332:lp_solve_5.5/lp_mipbb.c ****   strongBB = push_BB(lp, BB, lp->rows+varno, vartype, varcus);
 11361               		.loc 1 1332 0
 11362 4d34 8E81      		ldd r24,Y+6
 11363 4d36 9F81      		ldd r25,Y+7
 11364 4d38 8651      		subi r24,22
 11365 4d3a 9E4F      		sbci r25,-2
 11366 4d3c FC01      		movw r30,r24
 11367 4d3e 2081      		ld r18,Z
 11368 4d40 3181      		ldd r19,Z+1
 11369 4d42 8A85      		ldd r24,Y+10
 11370 4d44 9B85      		ldd r25,Y+11
 11371 4d46 A901      		movw r20,r18
 11372 4d48 480F      		add r20,r24
 11373 4d4a 591F      		adc r21,r25
 11374 4d4c EE85      		ldd r30,Y+14
 11375 4d4e FF85      		ldd r31,Y+15
 11376 4d50 2C85      		ldd r18,Y+12
 11377 4d52 3D85      		ldd r19,Y+13
 11378 4d54 6885      		ldd r22,Y+8
 11379 4d56 7985      		ldd r23,Y+9
 11380 4d58 8E81      		ldd r24,Y+6
 11381 4d5a 9F81      		ldd r25,Y+7
 11382 4d5c 8F01      		movw r16,r30
 11383 4d5e 0E94 0000 		call push_BB
 11384 4d62 9D83      		std Y+5,r25
 11385 4d64 8C83      		std Y+4,r24
1333:lp_solve_5.5/lp_mipbb.c ****   if(strongBB == BB)
 11386               		.loc 1 1333 0
 11387 4d66 2C81      		ldd r18,Y+4
 11388 4d68 3D81      		ldd r19,Y+5
 11389 4d6a 8885      		ldd r24,Y+8
 11390 4d6c 9985      		ldd r25,Y+9
 11391 4d6e 2817      		cp r18,r24
 11392 4d70 3907      		cpc r19,r25
 11393 4d72 01F4      		brne .L432
1334:lp_solve_5.5/lp_mipbb.c ****     return( success );
 11394               		.loc 1 1334 0
 11395 4d74 8981      		ldd r24,Y+1
 11396 4d76 00C0      		rjmp .L433
 11397               	.L432:
1335:lp_solve_5.5/lp_mipbb.c **** 
1336:lp_solve_5.5/lp_mipbb.c ****   do {
1337:lp_solve_5.5/lp_mipbb.c **** 
1338:lp_solve_5.5/lp_mipbb.c ****     /* Solve incremental problem to local optimality */
1339:lp_solve_5.5/lp_mipbb.c ****     lp->bb_strongbranches++;
 11398               		.loc 1 1339 0
 11399 4d78 8E81      		ldd r24,Y+6
 11400 4d7a 9F81      		ldd r25,Y+7
 11401 4d7c 8652      		subi r24,38
 11402 4d7e 9D4F      		sbci r25,-3
 11403 4d80 FC01      		movw r30,r24
 11404 4d82 8081      		ld r24,Z
 11405 4d84 9181      		ldd r25,Z+1
 11406 4d86 9C01      		movw r18,r24
 11407 4d88 2F5F      		subi r18,-1
 11408 4d8a 3F4F      		sbci r19,-1
 11409 4d8c 8E81      		ldd r24,Y+6
 11410 4d8e 9F81      		ldd r25,Y+7
 11411 4d90 8652      		subi r24,38
 11412 4d92 9D4F      		sbci r25,-3
 11413 4d94 FC01      		movw r30,r24
 11414 4d96 3183      		std Z+1,r19
 11415 4d98 2083      		st Z,r18
1340:lp_solve_5.5/lp_mipbb.c **** /*    set_action(&lp->spx_action, ACTION_REBASE | ACTION_RECOMPUTE); */
1341:lp_solve_5.5/lp_mipbb.c ****     if(solve_BB(strongBB) == OPTIMAL) {
 11416               		.loc 1 1341 0
 11417 4d9a 8C81      		ldd r24,Y+4
 11418 4d9c 9D81      		ldd r25,Y+5
 11419 4d9e 0E94 0000 		call solve_BB
 11420 4da2 892B      		or r24,r25
 11421 4da4 01F0      		breq .+2
 11422 4da6 00C0      		rjmp .L434
1342:lp_solve_5.5/lp_mipbb.c **** 
1343:lp_solve_5.5/lp_mipbb.c ****       /* Update result indicator*/
1344:lp_solve_5.5/lp_mipbb.c ****       success |= 1 << strongBB->isfloor;
 11423               		.loc 1 1344 0
 11424 4da8 8C81      		ldd r24,Y+4
 11425 4daa 9D81      		ldd r25,Y+5
 11426 4dac FC01      		movw r30,r24
 11427 4dae 86A9      		ldd r24,Z+54
 11428 4db0 282F      		mov r18,r24
 11429 4db2 30E0      		ldi r19,0
 11430 4db4 81E0      		ldi r24,lo8(1)
 11431 4db6 90E0      		ldi r25,0
 11432 4db8 00C0      		rjmp 2f
 11433               		1:
 11434 4dba 880F      		lsl r24
 11435 4dbc 991F      		rol r25
 11436               		2:
 11437 4dbe 2A95      		dec r18
 11438 4dc0 02F4      		brpl 1b
 11439 4dc2 982F      		mov r25,r24
 11440 4dc4 8981      		ldd r24,Y+1
 11441 4dc6 892B      		or r24,r25
 11442 4dc8 8983      		std Y+1,r24
1345:lp_solve_5.5/lp_mipbb.c **** 
1346:lp_solve_5.5/lp_mipbb.c ****       /* Compute new count of non-ints */
1347:lp_solve_5.5/lp_mipbb.c ****       strongBB->lastvarcus = 0;
 11443               		.loc 1 1347 0
 11444 4dca 8C81      		ldd r24,Y+4
 11445 4dcc 9D81      		ldd r25,Y+5
 11446 4dce FC01      		movw r30,r24
 11447 4dd0 1386      		std Z+11,__zero_reg__
 11448 4dd2 1286      		std Z+10,__zero_reg__
1348:lp_solve_5.5/lp_mipbb.c ****       for(i = 1; i <= lp->columns; i++) {
 11449               		.loc 1 1348 0
 11450 4dd4 81E0      		ldi r24,lo8(1)
 11451 4dd6 90E0      		ldi r25,0
 11452 4dd8 9B83      		std Y+3,r25
 11453 4dda 8A83      		std Y+2,r24
 11454 4ddc 00C0      		rjmp .L435
 11455               	.L437:
1349:lp_solve_5.5/lp_mipbb.c ****         if(is_int(lp, i) && !solution_is_int(lp, lp->rows+i, FALSE))
 11456               		.loc 1 1349 0
 11457 4dde 2A81      		ldd r18,Y+2
 11458 4de0 3B81      		ldd r19,Y+3
 11459 4de2 8E81      		ldd r24,Y+6
 11460 4de4 9F81      		ldd r25,Y+7
 11461 4de6 B901      		movw r22,r18
 11462 4de8 0E94 0000 		call is_int
 11463 4dec 8823      		tst r24
 11464 4dee 01F0      		breq .L436
 11465               		.loc 1 1349 0 is_stmt 0 discriminator 1
 11466 4df0 8E81      		ldd r24,Y+6
 11467 4df2 9F81      		ldd r25,Y+7
 11468 4df4 8651      		subi r24,22
 11469 4df6 9E4F      		sbci r25,-2
 11470 4df8 FC01      		movw r30,r24
 11471 4dfa 2081      		ld r18,Z
 11472 4dfc 3181      		ldd r19,Z+1
 11473 4dfe 8A81      		ldd r24,Y+2
 11474 4e00 9B81      		ldd r25,Y+3
 11475 4e02 280F      		add r18,r24
 11476 4e04 391F      		adc r19,r25
 11477 4e06 8E81      		ldd r24,Y+6
 11478 4e08 9F81      		ldd r25,Y+7
 11479 4e0a 40E0      		ldi r20,0
 11480 4e0c B901      		movw r22,r18
 11481 4e0e 0E94 0000 		call solution_is_int
 11482 4e12 8823      		tst r24
 11483 4e14 01F4      		brne .L436
1350:lp_solve_5.5/lp_mipbb.c ****           strongBB->lastvarcus++;
 11484               		.loc 1 1350 0 is_stmt 1
 11485 4e16 8C81      		ldd r24,Y+4
 11486 4e18 9D81      		ldd r25,Y+5
 11487 4e1a FC01      		movw r30,r24
 11488 4e1c 8285      		ldd r24,Z+10
 11489 4e1e 9385      		ldd r25,Z+11
 11490 4e20 9C01      		movw r18,r24
 11491 4e22 2F5F      		subi r18,-1
 11492 4e24 3F4F      		sbci r19,-1
 11493 4e26 8C81      		ldd r24,Y+4
 11494 4e28 9D81      		ldd r25,Y+5
 11495 4e2a FC01      		movw r30,r24
 11496 4e2c 3387      		std Z+11,r19
 11497 4e2e 2287      		std Z+10,r18
 11498               	.L436:
1348:lp_solve_5.5/lp_mipbb.c ****       for(i = 1; i <= lp->columns; i++) {
 11499               		.loc 1 1348 0 discriminator 2
 11500 4e30 8A81      		ldd r24,Y+2
 11501 4e32 9B81      		ldd r25,Y+3
 11502 4e34 0196      		adiw r24,1
 11503 4e36 9B83      		std Y+3,r25
 11504 4e38 8A83      		std Y+2,r24
 11505               	.L435:
1348:lp_solve_5.5/lp_mipbb.c ****       for(i = 1; i <= lp->columns; i++) {
 11506               		.loc 1 1348 0 is_stmt 0 discriminator 1
 11507 4e3a 8E81      		ldd r24,Y+6
 11508 4e3c 9F81      		ldd r25,Y+7
 11509 4e3e 8451      		subi r24,20
 11510 4e40 9E4F      		sbci r25,-2
 11511 4e42 FC01      		movw r30,r24
 11512 4e44 2081      		ld r18,Z
 11513 4e46 3181      		ldd r19,Z+1
 11514 4e48 8A81      		ldd r24,Y+2
 11515 4e4a 9B81      		ldd r25,Y+3
 11516 4e4c 2817      		cp r18,r24
 11517 4e4e 3907      		cpc r19,r25
 11518 4e50 04F4      		brge .L437
1351:lp_solve_5.5/lp_mipbb.c ****       }
1352:lp_solve_5.5/lp_mipbb.c **** 
1353:lp_solve_5.5/lp_mipbb.c ****       /* Perform the pseudo-cost update */
1354:lp_solve_5.5/lp_mipbb.c ****       update_pseudocost(lp->bb_PseudoCost, varno, strongBB->vartype, strongBB->isfloor,
1355:lp_solve_5.5/lp_mipbb.c ****                                            lp->solution[strongBB->varno]);
 11519               		.loc 1 1355 0 is_stmt 1
 11520 4e52 8E81      		ldd r24,Y+6
 11521 4e54 9F81      		ldd r25,Y+7
 11522 4e56 8E5E      		subi r24,-18
 11523 4e58 9D4F      		sbci r25,-3
 11524 4e5a FC01      		movw r30,r24
 11525 4e5c 2081      		ld r18,Z
 11526 4e5e 3181      		ldd r19,Z+1
 11527 4e60 8C81      		ldd r24,Y+4
 11528 4e62 9D81      		ldd r25,Y+5
 11529 4e64 FC01      		movw r30,r24
 11530 4e66 8681      		ldd r24,Z+6
 11531 4e68 9781      		ldd r25,Z+7
 11532 4e6a 880F      		lsl r24
 11533 4e6c 991F      		rol r25
 11534 4e6e 880F      		lsl r24
 11535 4e70 991F      		rol r25
 11536 4e72 820F      		add r24,r18
 11537 4e74 931F      		adc r25,r19
1354:lp_solve_5.5/lp_mipbb.c ****                                            lp->solution[strongBB->varno]);
 11538               		.loc 1 1354 0
 11539 4e76 FC01      		movw r30,r24
 11540 4e78 8081      		ld r24,Z
 11541 4e7a 9181      		ldd r25,Z+1
 11542 4e7c A281      		ldd r26,Z+2
 11543 4e7e B381      		ldd r27,Z+3
 11544 4e80 2C81      		ldd r18,Y+4
 11545 4e82 3D81      		ldd r19,Y+5
 11546 4e84 F901      		movw r30,r18
 11547 4e86 D6A8      		ldd r13,Z+54
 11548 4e88 2C81      		ldd r18,Y+4
 11549 4e8a 3D81      		ldd r19,Y+5
 11550 4e8c F901      		movw r30,r18
 11551 4e8e 4085      		ldd r20,Z+8
 11552 4e90 5185      		ldd r21,Z+9
 11553 4e92 2E81      		ldd r18,Y+6
 11554 4e94 3F81      		ldd r19,Y+7
 11555 4e96 2A52      		subi r18,42
 11556 4e98 3D4F      		sbci r19,-3
 11557 4e9a F901      		movw r30,r18
 11558 4e9c 0190      		ld __tmp_reg__,Z+
 11559 4e9e F081      		ld r31,Z
 11560 4ea0 E02D      		mov r30,__tmp_reg__
 11561 4ea2 F98B      		std Y+17,r31
 11562 4ea4 E88B      		std Y+16,r30
 11563 4ea6 6A85      		ldd r22,Y+10
 11564 4ea8 7B85      		ldd r23,Y+11
 11565 4eaa 7C01      		movw r14,r24
 11566 4eac 8D01      		movw r16,r26
 11567 4eae 2D2D      		mov r18,r13
 11568 4eb0 8889      		ldd r24,Y+16
 11569 4eb2 9989      		ldd r25,Y+17
 11570 4eb4 0E94 0000 		call update_pseudocost
 11571               	.L434:
1356:lp_solve_5.5/lp_mipbb.c ****     }
1357:lp_solve_5.5/lp_mipbb.c ****   }
1358:lp_solve_5.5/lp_mipbb.c ****   while(nextbranch_BB(strongBB));
 11572               		.loc 1 1358 0
 11573 4eb8 8C81      		ldd r24,Y+4
 11574 4eba 9D81      		ldd r25,Y+5
 11575 4ebc 0E94 0000 		call nextbranch_BB
 11576 4ec0 8823      		tst r24
 11577 4ec2 01F0      		breq .+2
 11578 4ec4 00C0      		rjmp .L432
1359:lp_solve_5.5/lp_mipbb.c **** 
1360:lp_solve_5.5/lp_mipbb.c ****   strongBB = pop_BB(strongBB);
 11579               		.loc 1 1360 0
 11580 4ec6 8C81      		ldd r24,Y+4
 11581 4ec8 9D81      		ldd r25,Y+5
 11582 4eca 0E94 0000 		call pop_BB
 11583 4ece 9D83      		std Y+5,r25
 11584 4ed0 8C83      		std Y+4,r24
1361:lp_solve_5.5/lp_mipbb.c ****   if(strongBB != BB)
 11585               		.loc 1 1361 0
 11586 4ed2 2C81      		ldd r18,Y+4
 11587 4ed4 3D81      		ldd r19,Y+5
 11588 4ed6 8885      		ldd r24,Y+8
 11589 4ed8 9985      		ldd r25,Y+9
 11590 4eda 2817      		cp r18,r24
 11591 4edc 3907      		cpc r19,r25
 11592 4ede 01F0      		breq .L438
1362:lp_solve_5.5/lp_mipbb.c ****     report(lp, SEVERE, "strongbranch_BB: Invalid bound settings restored for variable %d\n",
 11593               		.loc 1 1362 0
 11594 4ee0 8B85      		ldd r24,Y+11
 11595 4ee2 8F93      		push r24
 11596 4ee4 8A85      		ldd r24,Y+10
 11597 4ee6 8F93      		push r24
 11598 4ee8 80E0      		ldi r24,lo8(.LC26)
 11599 4eea 90E0      		ldi r25,hi8(.LC26)
 11600 4eec 892F      		mov r24,r25
 11601 4eee 8F93      		push r24
 11602 4ef0 80E0      		ldi r24,lo8(.LC26)
 11603 4ef2 90E0      		ldi r25,hi8(.LC26)
 11604 4ef4 8F93      		push r24
 11605 4ef6 1F92      		push __zero_reg__
 11606 4ef8 82E0      		ldi r24,lo8(2)
 11607 4efa 8F93      		push r24
 11608 4efc 8F81      		ldd r24,Y+7
 11609 4efe 8F93      		push r24
 11610 4f00 8E81      		ldd r24,Y+6
 11611 4f02 8F93      		push r24
 11612 4f04 0E94 0000 		call report
 11613 4f08 6DB7      		in r22,__SP_L__
 11614 4f0a 7EB7      		in r23,__SP_H__
 11615 4f0c 685F      		subi r22,-8
 11616 4f0e 7F4F      		sbci r23,-1
 11617 4f10 0FB6      		in __tmp_reg__,__SREG__
 11618 4f12 F894      		cli
 11619 4f14 DEBF      		out __SP_H__,r29
 11620 4f16 0FBE      		out __SREG__,__tmp_reg__
 11621 4f18 CDBF      		out __SP_L__,r28
 11622               	.L438:
1363:lp_solve_5.5/lp_mipbb.c ****                        varno);
1364:lp_solve_5.5/lp_mipbb.c ****   pop_basis(lp, TRUE);
 11623               		.loc 1 1364 0
 11624 4f1a 8E81      		ldd r24,Y+6
 11625 4f1c 9F81      		ldd r25,Y+7
 11626 4f1e 61E0      		ldi r22,lo8(1)
 11627 4f20 0E94 0000 		call pop_basis
1365:lp_solve_5.5/lp_mipbb.c ****   set_action(&lp->spx_action, ACTION_REBASE | ACTION_REINVERT | ACTION_RECOMPUTE);
 11628               		.loc 1 1365 0
 11629 4f24 8E81      		ldd r24,Y+6
 11630 4f26 9F81      		ldd r25,Y+7
 11631 4f28 8E50      		subi r24,14
 11632 4f2a 9D4F      		sbci r25,-3
 11633 4f2c 66E1      		ldi r22,lo8(22)
 11634 4f2e 70E0      		ldi r23,0
 11635 4f30 0E94 0000 		call set_action
1366:lp_solve_5.5/lp_mipbb.c **** 
1367:lp_solve_5.5/lp_mipbb.c ****   lp->is_strongbranch = FALSE;
 11636               		.loc 1 1367 0
 11637 4f34 8E81      		ldd r24,Y+6
 11638 4f36 9F81      		ldd r25,Y+7
 11639 4f38 8452      		subi r24,36
 11640 4f3a 9D4F      		sbci r25,-3
 11641 4f3c FC01      		movw r30,r24
 11642 4f3e 1182      		std Z+1,__zero_reg__
 11643 4f40 1082      		st Z,__zero_reg__
1368:lp_solve_5.5/lp_mipbb.c **** 
1369:lp_solve_5.5/lp_mipbb.c ****   return( success );
 11644               		.loc 1 1369 0
 11645 4f42 8981      		ldd r24,Y+1
 11646               	.L433:
 11647               	/* epilogue start */
1370:lp_solve_5.5/lp_mipbb.c **** }
 11648               		.loc 1 1370 0
 11649 4f44 6196      		adiw r28,17
 11650 4f46 0FB6      		in __tmp_reg__,__SREG__
 11651 4f48 F894      		cli
 11652 4f4a DEBF      		out __SP_H__,r29
 11653 4f4c 0FBE      		out __SREG__,__tmp_reg__
 11654 4f4e CDBF      		out __SP_L__,r28
 11655 4f50 DF91      		pop r29
 11656 4f52 CF91      		pop r28
 11657 4f54 1F91      		pop r17
 11658 4f56 0F91      		pop r16
 11659 4f58 FF90      		pop r15
 11660 4f5a EF90      		pop r14
 11661 4f5c DF90      		pop r13
 11662 4f5e 0895      		ret
 11663               		.cfi_endproc
 11664               	.LFE24:
 11666               	.global	pre_BB
 11668               	pre_BB:
 11669               	.LFB25:
1371:lp_solve_5.5/lp_mipbb.c **** 
1372:lp_solve_5.5/lp_mipbb.c **** /* Future functions */
1373:lp_solve_5.5/lp_mipbb.c **** STATIC MYBOOL pre_BB(lprec *lp)
1374:lp_solve_5.5/lp_mipbb.c **** {
 11670               		.loc 1 1374 0
 11671               		.cfi_startproc
 11672 4f60 CF93      		push r28
 11673               	.LCFI131:
 11674               		.cfi_def_cfa_offset 3
 11675               		.cfi_offset 28, -2
 11676 4f62 DF93      		push r29
 11677               	.LCFI132:
 11678               		.cfi_def_cfa_offset 4
 11679               		.cfi_offset 29, -3
 11680 4f64 00D0      		rcall .
 11681               	.LCFI133:
 11682               		.cfi_def_cfa_offset 6
 11683 4f66 CDB7      		in r28,__SP_L__
 11684 4f68 DEB7      		in r29,__SP_H__
 11685               	.LCFI134:
 11686               		.cfi_def_cfa_register 28
 11687               	/* prologue: function */
 11688               	/* frame size = 2 */
 11689               	/* stack size = 4 */
 11690               	.L__stack_usage = 4
 11691 4f6a 9A83      		std Y+2,r25
 11692 4f6c 8983      		std Y+1,r24
1375:lp_solve_5.5/lp_mipbb.c ****   return( TRUE );
 11693               		.loc 1 1375 0
 11694 4f6e 81E0      		ldi r24,lo8(1)
 11695               	/* epilogue start */
1376:lp_solve_5.5/lp_mipbb.c **** }
 11696               		.loc 1 1376 0
 11697 4f70 0F90      		pop __tmp_reg__
 11698 4f72 0F90      		pop __tmp_reg__
 11699 4f74 DF91      		pop r29
 11700 4f76 CF91      		pop r28
 11701 4f78 0895      		ret
 11702               		.cfi_endproc
 11703               	.LFE25:
 11705               	.global	post_BB
 11707               	post_BB:
 11708               	.LFB26:
1377:lp_solve_5.5/lp_mipbb.c **** STATIC MYBOOL post_BB(lprec *lp)
1378:lp_solve_5.5/lp_mipbb.c **** {
 11709               		.loc 1 1378 0
 11710               		.cfi_startproc
 11711 4f7a CF93      		push r28
 11712               	.LCFI135:
 11713               		.cfi_def_cfa_offset 3
 11714               		.cfi_offset 28, -2
 11715 4f7c DF93      		push r29
 11716               	.LCFI136:
 11717               		.cfi_def_cfa_offset 4
 11718               		.cfi_offset 29, -3
 11719 4f7e 00D0      		rcall .
 11720               	.LCFI137:
 11721               		.cfi_def_cfa_offset 6
 11722 4f80 CDB7      		in r28,__SP_L__
 11723 4f82 DEB7      		in r29,__SP_H__
 11724               	.LCFI138:
 11725               		.cfi_def_cfa_register 28
 11726               	/* prologue: function */
 11727               	/* frame size = 2 */
 11728               	/* stack size = 4 */
 11729               	.L__stack_usage = 4
 11730 4f84 9A83      		std Y+2,r25
 11731 4f86 8983      		std Y+1,r24
1379:lp_solve_5.5/lp_mipbb.c ****   return( TRUE );
 11732               		.loc 1 1379 0
 11733 4f88 81E0      		ldi r24,lo8(1)
 11734               	/* epilogue start */
1380:lp_solve_5.5/lp_mipbb.c **** }
 11735               		.loc 1 1380 0
 11736 4f8a 0F90      		pop __tmp_reg__
 11737 4f8c 0F90      		pop __tmp_reg__
 11738 4f8e DF91      		pop r29
 11739 4f90 CF91      		pop r28
 11740 4f92 0895      		ret
 11741               		.cfi_endproc
 11742               	.LFE26:
 11744               	.global	run_BB
 11746               	run_BB:
 11747               	.LFB27:
1381:lp_solve_5.5/lp_mipbb.c **** 
1382:lp_solve_5.5/lp_mipbb.c **** /* This is the non-recursive B&B driver routine - beautifully simple, yet so subtle! */
1383:lp_solve_5.5/lp_mipbb.c **** STATIC int run_BB(lprec *lp)
1384:lp_solve_5.5/lp_mipbb.c **** {
 11748               		.loc 1 1384 0
 11749               		.cfi_startproc
 11750 4f94 AF92      		push r10
 11751               	.LCFI139:
 11752               		.cfi_def_cfa_offset 3
 11753               		.cfi_offset 10, -2
 11754 4f96 BF92      		push r11
 11755               	.LCFI140:
 11756               		.cfi_def_cfa_offset 4
 11757               		.cfi_offset 11, -3
 11758 4f98 CF92      		push r12
 11759               	.LCFI141:
 11760               		.cfi_def_cfa_offset 5
 11761               		.cfi_offset 12, -4
 11762 4f9a DF92      		push r13
 11763               	.LCFI142:
 11764               		.cfi_def_cfa_offset 6
 11765               		.cfi_offset 13, -5
 11766 4f9c EF92      		push r14
 11767               	.LCFI143:
 11768               		.cfi_def_cfa_offset 7
 11769               		.cfi_offset 14, -6
 11770 4f9e FF92      		push r15
 11771               	.LCFI144:
 11772               		.cfi_def_cfa_offset 8
 11773               		.cfi_offset 15, -7
 11774 4fa0 0F93      		push r16
 11775               	.LCFI145:
 11776               		.cfi_def_cfa_offset 9
 11777               		.cfi_offset 16, -8
 11778 4fa2 1F93      		push r17
 11779               	.LCFI146:
 11780               		.cfi_def_cfa_offset 10
 11781               		.cfi_offset 17, -9
 11782 4fa4 CF93      		push r28
 11783               	.LCFI147:
 11784               		.cfi_def_cfa_offset 11
 11785               		.cfi_offset 28, -10
 11786 4fa6 DF93      		push r29
 11787               	.LCFI148:
 11788               		.cfi_def_cfa_offset 12
 11789               		.cfi_offset 29, -11
 11790 4fa8 CDB7      		in r28,__SP_L__
 11791 4faa DEB7      		in r29,__SP_H__
 11792               	.LCFI149:
 11793               		.cfi_def_cfa_register 28
 11794 4fac 2E97      		sbiw r28,14
 11795               	.LCFI150:
 11796               		.cfi_def_cfa_offset 26
 11797 4fae 0FB6      		in __tmp_reg__,__SREG__
 11798 4fb0 F894      		cli
 11799 4fb2 DEBF      		out __SP_H__,r29
 11800 4fb4 0FBE      		out __SREG__,__tmp_reg__
 11801 4fb6 CDBF      		out __SP_L__,r28
 11802               	/* prologue: function */
 11803               	/* frame size = 14 */
 11804               	/* stack size = 24 */
 11805               	.L__stack_usage = 24
 11806 4fb8 9E87      		std Y+14,r25
 11807 4fba 8D87      		std Y+13,r24
1385:lp_solve_5.5/lp_mipbb.c ****   BBrec *currentBB;
1386:lp_solve_5.5/lp_mipbb.c ****   int   varno, vartype, varcus, prevsolutions;
1387:lp_solve_5.5/lp_mipbb.c ****   int   status = NOTRUN;
 11808               		.loc 1 1387 0
 11809 4fbc 8FEF      		ldi r24,lo8(-1)
 11810 4fbe 9FEF      		ldi r25,lo8(-1)
 11811 4fc0 9C83      		std Y+4,r25
 11812 4fc2 8B83      		std Y+3,r24
1388:lp_solve_5.5/lp_mipbb.c **** 
1389:lp_solve_5.5/lp_mipbb.c ****   /* Initialize */
1390:lp_solve_5.5/lp_mipbb.c ****   pre_BB(lp);
 11813               		.loc 1 1390 0
 11814 4fc4 8D85      		ldd r24,Y+13
 11815 4fc6 9E85      		ldd r25,Y+14
 11816 4fc8 0E94 0000 		call pre_BB
1391:lp_solve_5.5/lp_mipbb.c ****   prevsolutions = lp->solutioncount;
 11817               		.loc 1 1391 0
 11818 4fcc 8D85      		ldd r24,Y+13
 11819 4fce 9E85      		ldd r25,Y+14
 11820 4fd0 865F      		subi r24,-10
 11821 4fd2 9D4F      		sbci r25,-3
 11822 4fd4 FC01      		movw r30,r24
 11823 4fd6 8081      		ld r24,Z
 11824 4fd8 9181      		ldd r25,Z+1
 11825 4fda 9E83      		std Y+6,r25
 11826 4fdc 8D83      		std Y+5,r24
1392:lp_solve_5.5/lp_mipbb.c **** #ifdef UseMilpSlacksRCF  /* Check if we should include ranged constraints */
1393:lp_solve_5.5/lp_mipbb.c ****   varno = lp->sum;
1394:lp_solve_5.5/lp_mipbb.c **** #else
1395:lp_solve_5.5/lp_mipbb.c ****   varno = lp->columns;
 11827               		.loc 1 1395 0
 11828 4fde 8D85      		ldd r24,Y+13
 11829 4fe0 9E85      		ldd r25,Y+14
 11830 4fe2 8451      		subi r24,20
 11831 4fe4 9E4F      		sbci r25,-2
 11832 4fe6 FC01      		movw r30,r24
 11833 4fe8 8081      		ld r24,Z
 11834 4fea 9181      		ldd r25,Z+1
 11835 4fec 9887      		std Y+8,r25
 11836 4fee 8F83      		std Y+7,r24
1396:lp_solve_5.5/lp_mipbb.c **** #endif
1397:lp_solve_5.5/lp_mipbb.c ****   lp->bb_upperchange = createUndoLadder(lp, varno, 2*MIP_count(lp));
 11837               		.loc 1 1397 0
 11838 4ff0 8D85      		ldd r24,Y+13
 11839 4ff2 9E85      		ldd r25,Y+14
 11840 4ff4 0E94 0000 		call MIP_count
 11841 4ff8 AC01      		movw r20,r24
 11842 4ffa 440F      		lsl r20
 11843 4ffc 551F      		rol r21
 11844 4ffe 2F81      		ldd r18,Y+7
 11845 5000 3885      		ldd r19,Y+8
 11846 5002 8D85      		ldd r24,Y+13
 11847 5004 9E85      		ldd r25,Y+14
 11848 5006 B901      		movw r22,r18
 11849 5008 0E94 0000 		call createUndoLadder
 11850 500c 9C01      		movw r18,r24
 11851 500e 8D85      		ldd r24,Y+13
 11852 5010 9E85      		ldd r25,Y+14
 11853 5012 865B      		subi r24,-74
 11854 5014 9C4F      		sbci r25,-4
 11855 5016 FC01      		movw r30,r24
 11856 5018 3183      		std Z+1,r19
 11857 501a 2083      		st Z,r18
1398:lp_solve_5.5/lp_mipbb.c ****   lp->bb_lowerchange = createUndoLadder(lp, varno, 2*MIP_count(lp));
 11858               		.loc 1 1398 0
 11859 501c 8D85      		ldd r24,Y+13
 11860 501e 9E85      		ldd r25,Y+14
 11861 5020 0E94 0000 		call MIP_count
 11862 5024 AC01      		movw r20,r24
 11863 5026 440F      		lsl r20
 11864 5028 551F      		rol r21
 11865 502a 2F81      		ldd r18,Y+7
 11866 502c 3885      		ldd r19,Y+8
 11867 502e 8D85      		ldd r24,Y+13
 11868 5030 9E85      		ldd r25,Y+14
 11869 5032 B901      		movw r22,r18
 11870 5034 0E94 0000 		call createUndoLadder
 11871 5038 9C01      		movw r18,r24
 11872 503a 8D85      		ldd r24,Y+13
 11873 503c 9E85      		ldd r25,Y+14
 11874 503e 845B      		subi r24,-76
 11875 5040 9C4F      		sbci r25,-4
 11876 5042 FC01      		movw r30,r24
 11877 5044 3183      		std Z+1,r19
 11878 5046 2083      		st Z,r18
1399:lp_solve_5.5/lp_mipbb.c ****   lp->rootbounds = currentBB = push_BB(lp, NULL, 0, BB_REAL, 0);
 11879               		.loc 1 1399 0
 11880 5048 8D85      		ldd r24,Y+13
 11881 504a 9E85      		ldd r25,Y+14
 11882 504c 00E0      		ldi r16,0
 11883 504e 10E0      		ldi r17,0
 11884 5050 20E0      		ldi r18,0
 11885 5052 30E0      		ldi r19,0
 11886 5054 40E0      		ldi r20,0
 11887 5056 50E0      		ldi r21,0
 11888 5058 60E0      		ldi r22,0
 11889 505a 70E0      		ldi r23,0
 11890 505c 0E94 0000 		call push_BB
 11891 5060 9A83      		std Y+2,r25
 11892 5062 8983      		std Y+1,r24
 11893 5064 8D85      		ldd r24,Y+13
 11894 5066 9E85      		ldd r25,Y+14
 11895 5068 8454      		subi r24,68
 11896 506a 9D4F      		sbci r25,-3
 11897 506c 2981      		ldd r18,Y+1
 11898 506e 3A81      		ldd r19,Y+2
 11899 5070 FC01      		movw r30,r24
 11900 5072 3183      		std Z+1,r19
 11901 5074 2083      		st Z,r18
1400:lp_solve_5.5/lp_mipbb.c **** 
1401:lp_solve_5.5/lp_mipbb.c ****   /* Perform the branch & bound loop */
1402:lp_solve_5.5/lp_mipbb.c ****   while(lp->bb_level > 0) {
 11902               		.loc 1 1402 0
 11903 5076 00C0      		rjmp .L444
 11904               	.L448:
1403:lp_solve_5.5/lp_mipbb.c ****     status = solve_BB(currentBB);
 11905               		.loc 1 1403 0
 11906 5078 8981      		ldd r24,Y+1
 11907 507a 9A81      		ldd r25,Y+2
 11908 507c 0E94 0000 		call solve_BB
 11909 5080 9C83      		std Y+4,r25
 11910 5082 8B83      		std Y+3,r24
1404:lp_solve_5.5/lp_mipbb.c **** 
1405:lp_solve_5.5/lp_mipbb.c **** #if 0
1406:lp_solve_5.5/lp_mipbb.c ****     if((lp->bb_level == 1) && (MIP_count(lp) > 0)) {
1407:lp_solve_5.5/lp_mipbb.c ****       if(status == RUNNING)
1408:lp_solve_5.5/lp_mipbb.c ****         ;
1409:lp_solve_5.5/lp_mipbb.c **** 
1410:lp_solve_5.5/lp_mipbb.c ****       /* Check if there was an integer solution of an aborted model */
1411:lp_solve_5.5/lp_mipbb.c ****       else if((status == SUBOPTIMAL) && (lp->solutioncount == 1) &&
1412:lp_solve_5.5/lp_mipbb.c ****               findnode_BB(currentBB, &varno, &vartype, &varcus))
1413:lp_solve_5.5/lp_mipbb.c ****         status = USERABORT;
1414:lp_solve_5.5/lp_mipbb.c ****     }
1415:lp_solve_5.5/lp_mipbb.c **** #endif
1416:lp_solve_5.5/lp_mipbb.c **** 
1417:lp_solve_5.5/lp_mipbb.c ****     if((status == OPTIMAL) && findnode_BB(currentBB, &varno, &vartype, &varcus))
 11911               		.loc 1 1417 0
 11912 5084 8B81      		ldd r24,Y+3
 11913 5086 9C81      		ldd r25,Y+4
 11914 5088 892B      		or r24,r25
 11915 508a 01F4      		brne .L446
 11916               		.loc 1 1417 0 is_stmt 0 discriminator 1
 11917 508c 9E01      		movw r18,r28
 11918 508e 255F      		subi r18,-11
 11919 5090 3F4F      		sbci r19,-1
 11920 5092 AE01      		movw r20,r28
 11921 5094 475F      		subi r20,-9
 11922 5096 5F4F      		sbci r21,-1
 11923 5098 BE01      		movw r22,r28
 11924 509a 695F      		subi r22,-7
 11925 509c 7F4F      		sbci r23,-1
 11926 509e 8981      		ldd r24,Y+1
 11927 50a0 9A81      		ldd r25,Y+2
 11928 50a2 0E94 0000 		call findnode_BB
 11929 50a6 8823      		tst r24
 11930 50a8 01F0      		breq .L446
1418:lp_solve_5.5/lp_mipbb.c ****       currentBB = push_BB(lp, currentBB, varno, vartype, varcus);
 11931               		.loc 1 1418 0 is_stmt 1
 11932 50aa EB85      		ldd r30,Y+11
 11933 50ac FC85      		ldd r31,Y+12
 11934 50ae 2985      		ldd r18,Y+9
 11935 50b0 3A85      		ldd r19,Y+10
 11936 50b2 4F81      		ldd r20,Y+7
 11937 50b4 5885      		ldd r21,Y+8
 11938 50b6 6981      		ldd r22,Y+1
 11939 50b8 7A81      		ldd r23,Y+2
 11940 50ba 8D85      		ldd r24,Y+13
 11941 50bc 9E85      		ldd r25,Y+14
 11942 50be 8F01      		movw r16,r30
 11943 50c0 0E94 0000 		call push_BB
 11944 50c4 9A83      		std Y+2,r25
 11945 50c6 8983      		std Y+1,r24
 11946 50c8 00C0      		rjmp .L444
 11947               	.L447:
1419:lp_solve_5.5/lp_mipbb.c **** 
1420:lp_solve_5.5/lp_mipbb.c ****     else while((lp->bb_level > 0) && !nextbranch_BB(currentBB))
1421:lp_solve_5.5/lp_mipbb.c ****       currentBB = pop_BB(currentBB);
 11948               		.loc 1 1421 0
 11949 50ca 8981      		ldd r24,Y+1
 11950 50cc 9A81      		ldd r25,Y+2
 11951 50ce 0E94 0000 		call pop_BB
 11952 50d2 9A83      		std Y+2,r25
 11953 50d4 8983      		std Y+1,r24
 11954               	.L446:
1420:lp_solve_5.5/lp_mipbb.c ****       currentBB = pop_BB(currentBB);
 11955               		.loc 1 1420 0
 11956 50d6 8D85      		ldd r24,Y+13
 11957 50d8 9E85      		ldd r25,Y+14
 11958 50da 805D      		subi r24,-48
 11959 50dc 9C4F      		sbci r25,-4
 11960 50de FC01      		movw r30,r24
 11961 50e0 8081      		ld r24,Z
 11962 50e2 9181      		ldd r25,Z+1
 11963 50e4 1816      		cp __zero_reg__,r24
 11964 50e6 1906      		cpc __zero_reg__,r25
 11965 50e8 04F4      		brge .L444
1420:lp_solve_5.5/lp_mipbb.c ****       currentBB = pop_BB(currentBB);
 11966               		.loc 1 1420 0 is_stmt 0 discriminator 1
 11967 50ea 8981      		ldd r24,Y+1
 11968 50ec 9A81      		ldd r25,Y+2
 11969 50ee 0E94 0000 		call nextbranch_BB
 11970 50f2 8823      		tst r24
 11971 50f4 01F0      		breq .L447
 11972               	.L444:
1402:lp_solve_5.5/lp_mipbb.c ****     status = solve_BB(currentBB);
 11973               		.loc 1 1402 0 is_stmt 1
 11974 50f6 8D85      		ldd r24,Y+13
 11975 50f8 9E85      		ldd r25,Y+14
 11976 50fa 805D      		subi r24,-48
 11977 50fc 9C4F      		sbci r25,-4
 11978 50fe FC01      		movw r30,r24
 11979 5100 8081      		ld r24,Z
 11980 5102 9181      		ldd r25,Z+1
 11981 5104 1816      		cp __zero_reg__,r24
 11982 5106 1906      		cpc __zero_reg__,r25
 11983 5108 04F4      		brge .+2
 11984 510a 00C0      		rjmp .L448
1422:lp_solve_5.5/lp_mipbb.c **** 
1423:lp_solve_5.5/lp_mipbb.c ****   }
1424:lp_solve_5.5/lp_mipbb.c **** 
1425:lp_solve_5.5/lp_mipbb.c ****   /* Finalize */
1426:lp_solve_5.5/lp_mipbb.c ****   freeUndoLadder(&(lp->bb_upperchange));
 11985               		.loc 1 1426 0
 11986 510c 8D85      		ldd r24,Y+13
 11987 510e 9E85      		ldd r25,Y+14
 11988 5110 865B      		subi r24,-74
 11989 5112 9C4F      		sbci r25,-4
 11990 5114 0E94 0000 		call freeUndoLadder
1427:lp_solve_5.5/lp_mipbb.c ****   freeUndoLadder(&(lp->bb_lowerchange));
 11991               		.loc 1 1427 0
 11992 5118 8D85      		ldd r24,Y+13
 11993 511a 9E85      		ldd r25,Y+14
 11994 511c 845B      		subi r24,-76
 11995 511e 9C4F      		sbci r25,-4
 11996 5120 0E94 0000 		call freeUndoLadder
1428:lp_solve_5.5/lp_mipbb.c **** 
1429:lp_solve_5.5/lp_mipbb.c ****   /* Check if we should adjust status */
1430:lp_solve_5.5/lp_mipbb.c ****   if(lp->solutioncount > prevsolutions) {
 11997               		.loc 1 1430 0
 11998 5124 8D85      		ldd r24,Y+13
 11999 5126 9E85      		ldd r25,Y+14
 12000 5128 865F      		subi r24,-10
 12001 512a 9D4F      		sbci r25,-3
 12002 512c FC01      		movw r30,r24
 12003 512e 2081      		ld r18,Z
 12004 5130 3181      		ldd r19,Z+1
 12005 5132 8D81      		ldd r24,Y+5
 12006 5134 9E81      		ldd r25,Y+6
 12007 5136 8217      		cp r24,r18
 12008 5138 9307      		cpc r25,r19
 12009 513a 04F0      		brlt .+2
 12010 513c 00C0      		rjmp .L449
1431:lp_solve_5.5/lp_mipbb.c ****     if((status == PROCBREAK) || (status == USERABORT) || (status == TIMEOUT) || userabort(lp, -1))
 12011               		.loc 1 1431 0
 12012 513e 8B81      		ldd r24,Y+3
 12013 5140 9C81      		ldd r25,Y+4
 12014 5142 0B97      		sbiw r24,11
 12015 5144 01F0      		breq .L450
 12016               		.loc 1 1431 0 is_stmt 0 discriminator 1
 12017 5146 8B81      		ldd r24,Y+3
 12018 5148 9C81      		ldd r25,Y+4
 12019 514a 0697      		sbiw r24,6
 12020 514c 01F0      		breq .L450
 12021               		.loc 1 1431 0 discriminator 2
 12022 514e 8B81      		ldd r24,Y+3
 12023 5150 9C81      		ldd r25,Y+4
 12024 5152 0797      		sbiw r24,7
 12025 5154 01F0      		breq .L450
 12026               		.loc 1 1431 0 discriminator 3
 12027 5156 8D85      		ldd r24,Y+13
 12028 5158 9E85      		ldd r25,Y+14
 12029 515a 6FEF      		ldi r22,lo8(-1)
 12030 515c 7FEF      		ldi r23,lo8(-1)
 12031 515e 0E94 0000 		call userabort
 12032 5162 8823      		tst r24
 12033 5164 01F0      		breq .L451
 12034               	.L450:
1432:lp_solve_5.5/lp_mipbb.c ****       status = SUBOPTIMAL;
 12035               		.loc 1 1432 0 is_stmt 1
 12036 5166 81E0      		ldi r24,lo8(1)
 12037 5168 90E0      		ldi r25,0
 12038 516a 9C83      		std Y+4,r25
 12039 516c 8B83      		std Y+3,r24
 12040 516e 00C0      		rjmp .L452
 12041               	.L451:
1433:lp_solve_5.5/lp_mipbb.c ****     else
1434:lp_solve_5.5/lp_mipbb.c ****       status = OPTIMAL;
 12042               		.loc 1 1434 0
 12043 5170 1C82      		std Y+4,__zero_reg__
 12044 5172 1B82      		std Y+3,__zero_reg__
 12045               	.L452:
1435:lp_solve_5.5/lp_mipbb.c ****     if(lp->bb_totalnodes > 0)
 12046               		.loc 1 1435 0
 12047 5174 8D85      		ldd r24,Y+13
 12048 5176 9E85      		ldd r25,Y+14
 12049 5178 8A5C      		subi r24,-54
 12050 517a 9C4F      		sbci r25,-4
 12051 517c FC01      		movw r30,r24
 12052 517e A080      		ld r10,Z
 12053 5180 FC01      		movw r30,r24
 12054 5182 B180      		ldd r11,Z+1
 12055 5184 FC01      		movw r30,r24
 12056 5186 C280      		ldd r12,Z+2
 12057 5188 FC01      		movw r30,r24
 12058 518a D380      		ldd r13,Z+3
 12059 518c FC01      		movw r30,r24
 12060 518e E480      		ldd r14,Z+4
 12061 5190 FC01      		movw r30,r24
 12062 5192 F580      		ldd r15,Z+5
 12063 5194 FC01      		movw r30,r24
 12064 5196 0681      		ldd r16,Z+6
 12065 5198 FC01      		movw r30,r24
 12066 519a 1781      		ldd r17,Z+7
 12067 519c 2A2D      		mov r18,r10
 12068 519e 3B2D      		mov r19,r11
 12069 51a0 4C2D      		mov r20,r12
 12070 51a2 5D2D      		mov r21,r13
 12071 51a4 6E2D      		mov r22,r14
 12072 51a6 7F2D      		mov r23,r15
 12073 51a8 802F      		mov r24,r16
 12074 51aa 912F      		mov r25,r17
 12075 51ac A0E0      		ldi r26,0
 12076 51ae 0E94 0000 		call __cmpdi2_s8
 12077 51b2 01F0      		breq .L449
 12078 51b4 04F0      		brlt .L449
1436:lp_solve_5.5/lp_mipbb.c ****       lp->spx_status = OPTIMAL;
 12079               		.loc 1 1436 0
 12080 51b6 8D85      		ldd r24,Y+13
 12081 51b8 9E85      		ldd r25,Y+14
 12082 51ba 8A5F      		subi r24,-6
 12083 51bc 9D4F      		sbci r25,-3
 12084 51be FC01      		movw r30,r24
 12085 51c0 1182      		std Z+1,__zero_reg__
 12086 51c2 1082      		st Z,__zero_reg__
 12087               	.L449:
1437:lp_solve_5.5/lp_mipbb.c ****   }
1438:lp_solve_5.5/lp_mipbb.c ****   post_BB(lp);
 12088               		.loc 1 1438 0
 12089 51c4 8D85      		ldd r24,Y+13
 12090 51c6 9E85      		ldd r25,Y+14
 12091 51c8 0E94 0000 		call post_BB
1439:lp_solve_5.5/lp_mipbb.c ****   return( status );
 12092               		.loc 1 1439 0
 12093 51cc 8B81      		ldd r24,Y+3
 12094 51ce 9C81      		ldd r25,Y+4
 12095               	/* epilogue start */
1440:lp_solve_5.5/lp_mipbb.c **** }
 12096               		.loc 1 1440 0
 12097 51d0 2E96      		adiw r28,14
 12098 51d2 0FB6      		in __tmp_reg__,__SREG__
 12099 51d4 F894      		cli
 12100 51d6 DEBF      		out __SP_H__,r29
 12101 51d8 0FBE      		out __SREG__,__tmp_reg__
 12102 51da CDBF      		out __SP_L__,r28
 12103 51dc DF91      		pop r29
 12104 51de CF91      		pop r28
 12105 51e0 1F91      		pop r17
 12106 51e2 0F91      		pop r16
 12107 51e4 FF90      		pop r15
 12108 51e6 EF90      		pop r14
 12109 51e8 DF90      		pop r13
 12110 51ea CF90      		pop r12
 12111 51ec BF90      		pop r11
 12112 51ee AF90      		pop r10
 12113 51f0 0895      		ret
 12114               		.cfi_endproc
 12115               	.LFE27:
 12117               	.Letext0:
 12118               		.file 2 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\lib\\gc
 12119               		.file 3 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\in
 12120               		.file 4 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\in
 12121               		.file 5 "lp_solve_5.5\\shared/commonlib.h"
 12122               		.file 6 "lp_solve_5.5/lp_types.h"
 12123               		.file 7 "lp_solve_5.5/lp_lib.h"
 12124               		.file 8 "lp_solve_5.5/lp_utils.h"
 12125               		.file 9 "lp_solve_5.5/lp_Hash.h"
 12126               		.file 10 "lp_solve_5.5/lp_matrix.h"
 12127               		.file 11 "lp_solve_5.5/lp_mipbb.h"
 12128               		.file 12 "lp_solve_5.5/lp_SOS.h"
DEFINED SYMBOLS
                            *ABS*:00000000 lp_mipbb.c
C:\Users\GUILHE~1\AppData\Local\Temp\cc6JXpIw.s:2      *ABS*:0000003e __SP_H__
C:\Users\GUILHE~1\AppData\Local\Temp\cc6JXpIw.s:3      *ABS*:0000003d __SP_L__
C:\Users\GUILHE~1\AppData\Local\Temp\cc6JXpIw.s:4      *ABS*:0000003f __SREG__
C:\Users\GUILHE~1\AppData\Local\Temp\cc6JXpIw.s:5      *ABS*:0000003b __RAMPZ__
C:\Users\GUILHE~1\AppData\Local\Temp\cc6JXpIw.s:6      *ABS*:00000000 __tmp_reg__
C:\Users\GUILHE~1\AppData\Local\Temp\cc6JXpIw.s:7      *ABS*:00000001 __zero_reg__
C:\Users\GUILHE~1\AppData\Local\Temp\cc6JXpIw.s:13     .text:00000000 create_BB
C:\Users\GUILHE~1\AppData\Local\Temp\cc6JXpIw.s:336    .text:0000022a push_BB
C:\Users\GUILHE~1\AppData\Local\Temp\cc6JXpIw.s:8256   .text:00003842 rcfbound_BB
C:\Users\GUILHE~1\AppData\Local\Temp\cc6JXpIw.s:2461   .text:0000106c initbranches_BB
C:\Users\GUILHE~1\AppData\Local\Temp\cc6JXpIw.s:1454   .text:000009c2 pop_BB
C:\Users\GUILHE~1\AppData\Local\Temp\cc6JXpIw.s:6404   .text:00002c62 initcuts_BB
C:\Users\GUILHE~1\AppData\Local\Temp\cc6JXpIw.s:1231   .text:00000864 free_BB
C:\Users\GUILHE~1\AppData\Local\Temp\cc6JXpIw.s:6483   .text:00002c98 freecuts_BB
C:\Users\GUILHE~1\AppData\Local\Temp\cc6JXpIw.s:2019   .text:00000d8a probe_BB
C:\Users\GUILHE~1\AppData\Local\Temp\cc6JXpIw.s:2414   .text:0000104a presolve_BB
C:\Users\GUILHE~1\AppData\Local\Temp\cc6JXpIw.s:3519   .text:000017e8 fillbranches_BB
C:\Users\GUILHE~1\AppData\Local\Temp\cc6JXpIw.s:5615   .text:00002720 nextbranch_BB
C:\Users\GUILHE~1\AppData\Local\Temp\cc6JXpIw.s:6443   .text:00002c7c updatecuts_BB
C:\Users\GUILHE~1\AppData\Local\Temp\cc6JXpIw.s:6594   .text:00002cf6 solve_LP
C:\Users\GUILHE~1\AppData\Local\Temp\cc6JXpIw.s:8147   .text:000037b0 findself_BB
C:\Users\GUILHE~1\AppData\Local\Temp\cc6JXpIw.s:8970   .text:00003d2a findnode_BB
C:\Users\GUILHE~1\AppData\Local\Temp\cc6JXpIw.s:11037  .text:00004b54 solve_BB
C:\Users\GUILHE~1\AppData\Local\Temp\cc6JXpIw.s:11266  .text:00004cbc strongbranch_BB
C:\Users\GUILHE~1\AppData\Local\Temp\cc6JXpIw.s:11668  .text:00004f60 pre_BB
C:\Users\GUILHE~1\AppData\Local\Temp\cc6JXpIw.s:11707  .text:00004f7a post_BB
C:\Users\GUILHE~1\AppData\Local\Temp\cc6JXpIw.s:11746  .text:00004f94 run_BB

UNDEFINED SYMBOLS
calloc
allocREAL
memcpy
__ltsf2
__gtsf2
__eqsf2
incrementUndoLadder
is_int
modifyUndoLadder
report
MIP_count
allocINT
free
restoreUndoLadder
decrementUndoLadder
free_pseudocost
pop_basis
SOS_unmark
__subsf3
__mulsf3
__addsf3
is_infinite
__divsf3
__unordsf2
__lesf2
__nesf2
push_basis
SOS_is_member
SOS_can_activate
SOS_get_candidates
get_var_branch
get_pseudorange
modf
is_bb_mode
get_pseudonodecost
mat_getitem
get_pseudobranchcost
is_maxim
unscaled_value
floor
ceil
scaled_floor
__gesf2
userabort
scaled_ceil
SOS_is_member_of_type
countsUndoLadder
get_col_name
SOS_set_marked
SOS_fix_unmarked
SOS_fix_list
__adddi3_s8
__floatdisf
impose_bounds
restore_basis
spx_run
set_action
__cmpdi2_s8
is_anti_degen
perturb_bounds
get_statustext
construct_solution
transfer_solution
set_var_priority
get_bb_rule
init_pseudocost
update_pseudocost
bb_better
find_sc_bbvar
SOS_count
find_sos_bbvar
find_int_bbvar
construct_duals
is_presolve
construct_sensitivity_duals
construct_sensitivity_obj
print_objective
print_solution
SOS_is_feasible
solution_is_int
createUndoLadder
freeUndoLadder
__do_copy_data
