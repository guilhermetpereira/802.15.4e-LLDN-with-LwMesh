   1               		.file	"lp_crash.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__RAMPZ__ = 0x3b
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
   8               		.text
   9               	.Ltext0:
  10               		.cfi_sections	.debug_frame
  11               		.section	.rodata
  12               	.LC0:
  13 0000 6372 6173 		.string	"crash_basis: 'Most feasible' basis crashing selected\n"
  13      685F 6261 
  13      7369 733A 
  13      2027 4D6F 
  13      7374 2066 
  14               	.global	__ltsf2
  15               	.global	__mulsf3
  16               	.global	__gtsf2
  17               	.global	__gesf2
  18               	.global	__subsf3
  19               	.global	__floatsisf
  20               	.global	__lesf2
  21               	.global	__addsf3
  22               	.LC1:
  23 0036 6372 6173 		.string	"crash_basis: 'Least degenerate' basis crashing selected\n"
  23      685F 6261 
  23      7369 733A 
  23      2027 4C65 
  23      6173 7420 
  24               	.global	__nesf2
  25               	.global	__divsf3
  26               		.text
  27               	.global	crash_basis
  29               	crash_basis:
  30               	.LFB7:
  31               		.file 1 "lp_solve_5.5/lp_crash.c"
   1:lp_solve_5.5/lp_crash.c **** 
   2:lp_solve_5.5/lp_crash.c **** /*
   3:lp_solve_5.5/lp_crash.c ****    ----------------------------------------------------------------------------------
   4:lp_solve_5.5/lp_crash.c ****    Crash management routines in lp_solve v5.0+
   5:lp_solve_5.5/lp_crash.c ****    ----------------------------------------------------------------------------------
   6:lp_solve_5.5/lp_crash.c ****     Author:        Kjell Eikland
   7:lp_solve_5.5/lp_crash.c ****     Contact:       kjell.eikland@broadpark.no
   8:lp_solve_5.5/lp_crash.c ****     License terms: LGPL.
   9:lp_solve_5.5/lp_crash.c **** 
  10:lp_solve_5.5/lp_crash.c ****     Requires:      lp_lib.h, lp_utils.h, lp_matrix.h
  11:lp_solve_5.5/lp_crash.c **** 
  12:lp_solve_5.5/lp_crash.c ****     Release notes:
  13:lp_solve_5.5/lp_crash.c ****     v1.0.0  1 April   2004      First version.
  14:lp_solve_5.5/lp_crash.c ****     v1.1.0  20 July 2004        Reworked with flexible matrix storage model.
  15:lp_solve_5.5/lp_crash.c **** 
  16:lp_solve_5.5/lp_crash.c ****    ----------------------------------------------------------------------------------
  17:lp_solve_5.5/lp_crash.c **** */
  18:lp_solve_5.5/lp_crash.c **** 
  19:lp_solve_5.5/lp_crash.c **** #include <string.h>
  20:lp_solve_5.5/lp_crash.c **** 
  21:lp_solve_5.5/lp_crash.c **** #include "commonlib.h"
  22:lp_solve_5.5/lp_crash.c **** #include "lp_lib.h"
  23:lp_solve_5.5/lp_crash.c **** #include "lp_scale.h"
  24:lp_solve_5.5/lp_crash.c **** #include "lp_utils.h"
  25:lp_solve_5.5/lp_crash.c **** #include "lp_report.h"
  26:lp_solve_5.5/lp_crash.c **** #include "lp_matrix.h"
  27:lp_solve_5.5/lp_crash.c **** #include "lp_crash.h"
  28:lp_solve_5.5/lp_crash.c **** 
  29:lp_solve_5.5/lp_crash.c **** #ifdef FORTIFY
  30:lp_solve_5.5/lp_crash.c **** # include "lp_fortify.h"
  31:lp_solve_5.5/lp_crash.c **** #endif
  32:lp_solve_5.5/lp_crash.c **** 
  33:lp_solve_5.5/lp_crash.c **** 
  34:lp_solve_5.5/lp_crash.c **** MYBOOL crash_basis(lprec *lp)
  35:lp_solve_5.5/lp_crash.c **** {
  32               		.loc 1 35 0
  33               		.cfi_startproc
  34 0000 CF92      		push r12
  35               	.LCFI0:
  36               		.cfi_def_cfa_offset 3
  37               		.cfi_offset 12, -2
  38 0002 DF92      		push r13
  39               	.LCFI1:
  40               		.cfi_def_cfa_offset 4
  41               		.cfi_offset 13, -3
  42 0004 EF92      		push r14
  43               	.LCFI2:
  44               		.cfi_def_cfa_offset 5
  45               		.cfi_offset 14, -4
  46 0006 FF92      		push r15
  47               	.LCFI3:
  48               		.cfi_def_cfa_offset 6
  49               		.cfi_offset 15, -5
  50 0008 0F93      		push r16
  51               	.LCFI4:
  52               		.cfi_def_cfa_offset 7
  53               		.cfi_offset 16, -6
  54 000a 1F93      		push r17
  55               	.LCFI5:
  56               		.cfi_def_cfa_offset 8
  57               		.cfi_offset 17, -7
  58 000c CF93      		push r28
  59               	.LCFI6:
  60               		.cfi_def_cfa_offset 9
  61               		.cfi_offset 28, -8
  62 000e DF93      		push r29
  63               	.LCFI7:
  64               		.cfi_def_cfa_offset 10
  65               		.cfi_offset 29, -9
  66 0010 CDB7      		in r28,__SP_L__
  67 0012 DEB7      		in r29,__SP_H__
  68               	.LCFI8:
  69               		.cfi_def_cfa_register 28
  70 0014 C155      		subi r28,81
  71 0016 D109      		sbc r29,__zero_reg__
  72               	.LCFI9:
  73               		.cfi_def_cfa_offset 91
  74 0018 0FB6      		in __tmp_reg__,__SREG__
  75 001a F894      		cli
  76 001c DEBF      		out __SP_H__,r29
  77 001e 0FBE      		out __SREG__,__tmp_reg__
  78 0020 CDBF      		out __SP_L__,r28
  79               	/* prologue: function */
  80               	/* frame size = 81 */
  81               	/* stack size = 89 */
  82               	.L__stack_usage = 89
  83 0022 9E01      		movw r18,r28
  84 0024 205B      		subi r18,-80
  85 0026 3F4F      		sbci r19,-1
  86 0028 F901      		movw r30,r18
  87 002a 9183      		std Z+1,r25
  88 002c 8083      		st Z,r24
  36:lp_solve_5.5/lp_crash.c ****   int     i;
  37:lp_solve_5.5/lp_crash.c ****   MATrec  *mat = lp->matA;
  89               		.loc 1 37 0
  90 002e CE01      		movw r24,r28
  91 0030 805B      		subi r24,-80
  92 0032 9F4F      		sbci r25,-1
  93 0034 FC01      		movw r30,r24
  94 0036 8081      		ld r24,Z
  95 0038 9181      		ldd r25,Z+1
  96 003a 8A54      		subi r24,74
  97 003c 9D4F      		sbci r25,-3
  98 003e FC01      		movw r30,r24
  99 0040 8081      		ld r24,Z
 100 0042 9181      		ldd r25,Z+1
 101 0044 9DA3      		std Y+37,r25
 102 0046 8CA3      		std Y+36,r24
  38:lp_solve_5.5/lp_crash.c ****   MYBOOL  ok = TRUE;
 103               		.loc 1 38 0
 104 0048 81E0      		ldi r24,lo8(1)
 105 004a 8B83      		std Y+3,r24
  39:lp_solve_5.5/lp_crash.c **** 
  40:lp_solve_5.5/lp_crash.c ****   /* Initialize basis indicators */
  41:lp_solve_5.5/lp_crash.c ****   if(lp->basis_valid)
 106               		.loc 1 41 0
 107 004c CE01      		movw r24,r28
 108 004e 805B      		subi r24,-80
 109 0050 9F4F      		sbci r25,-1
 110 0052 FC01      		movw r30,r24
 111 0054 8081      		ld r24,Z
 112 0056 9181      		ldd r25,Z+1
 113 0058 8753      		subi r24,55
 114 005a 9D4F      		sbci r25,-3
 115 005c FC01      		movw r30,r24
 116 005e 8081      		ld r24,Z
 117 0060 8823      		tst r24
 118 0062 01F0      		breq .L2
  42:lp_solve_5.5/lp_crash.c ****     lp->var_basic[0] = FALSE;
 119               		.loc 1 42 0
 120 0064 CE01      		movw r24,r28
 121 0066 805B      		subi r24,-80
 122 0068 9F4F      		sbci r25,-1
 123 006a FC01      		movw r30,r24
 124 006c 8081      		ld r24,Z
 125 006e 9181      		ldd r25,Z+1
 126 0070 8453      		subi r24,52
 127 0072 9D4F      		sbci r25,-3
 128 0074 FC01      		movw r30,r24
 129 0076 8081      		ld r24,Z
 130 0078 9181      		ldd r25,Z+1
 131 007a FC01      		movw r30,r24
 132 007c 1182      		std Z+1,__zero_reg__
 133 007e 1082      		st Z,__zero_reg__
 134 0080 00C0      		rjmp .L3
 135               	.L2:
  43:lp_solve_5.5/lp_crash.c ****   else
  44:lp_solve_5.5/lp_crash.c ****     default_basis(lp);
 136               		.loc 1 44 0
 137 0082 CE01      		movw r24,r28
 138 0084 805B      		subi r24,-80
 139 0086 9F4F      		sbci r25,-1
 140 0088 FC01      		movw r30,r24
 141 008a 8081      		ld r24,Z
 142 008c 9181      		ldd r25,Z+1
 143 008e 0E94 0000 		call default_basis
 144               	.L3:
  45:lp_solve_5.5/lp_crash.c **** 
  46:lp_solve_5.5/lp_crash.c ****   /* Set initial partial pricing blocks */
  47:lp_solve_5.5/lp_crash.c ****   if(lp->rowblocks != NULL)
 145               		.loc 1 47 0
 146 0092 CE01      		movw r24,r28
 147 0094 805B      		subi r24,-80
 148 0096 9F4F      		sbci r25,-1
 149 0098 FC01      		movw r30,r24
 150 009a 8081      		ld r24,Z
 151 009c 9181      		ldd r25,Z+1
 152 009e 8E57      		subi r24,126
 153 00a0 9D4F      		sbci r25,-3
 154 00a2 FC01      		movw r30,r24
 155 00a4 8081      		ld r24,Z
 156 00a6 9181      		ldd r25,Z+1
 157 00a8 892B      		or r24,r25
 158 00aa 01F0      		breq .L4
  48:lp_solve_5.5/lp_crash.c ****     lp->rowblocks->blocknow = 1;
 159               		.loc 1 48 0
 160 00ac CE01      		movw r24,r28
 161 00ae 805B      		subi r24,-80
 162 00b0 9F4F      		sbci r25,-1
 163 00b2 FC01      		movw r30,r24
 164 00b4 8081      		ld r24,Z
 165 00b6 9181      		ldd r25,Z+1
 166 00b8 8E57      		subi r24,126
 167 00ba 9D4F      		sbci r25,-3
 168 00bc FC01      		movw r30,r24
 169 00be 8081      		ld r24,Z
 170 00c0 9181      		ldd r25,Z+1
 171 00c2 21E0      		ldi r18,lo8(1)
 172 00c4 30E0      		ldi r19,0
 173 00c6 FC01      		movw r30,r24
 174 00c8 3583      		std Z+5,r19
 175 00ca 2483      		std Z+4,r18
 176               	.L4:
  49:lp_solve_5.5/lp_crash.c ****   if(lp->colblocks != NULL)
 177               		.loc 1 49 0
 178 00cc CE01      		movw r24,r28
 179 00ce 805B      		subi r24,-80
 180 00d0 9F4F      		sbci r25,-1
 181 00d2 FC01      		movw r30,r24
 182 00d4 8081      		ld r24,Z
 183 00d6 9181      		ldd r25,Z+1
 184 00d8 8C57      		subi r24,124
 185 00da 9D4F      		sbci r25,-3
 186 00dc FC01      		movw r30,r24
 187 00de 8081      		ld r24,Z
 188 00e0 9181      		ldd r25,Z+1
 189 00e2 892B      		or r24,r25
 190 00e4 01F0      		breq .L5
  50:lp_solve_5.5/lp_crash.c ****     lp->colblocks->blocknow = ((lp->crashmode == CRASH_NONE) || (lp->colblocks->blockcount == 1) ? 
 191               		.loc 1 50 0
 192 00e6 CE01      		movw r24,r28
 193 00e8 805B      		subi r24,-80
 194 00ea 9F4F      		sbci r25,-1
 195 00ec FC01      		movw r30,r24
 196 00ee 8081      		ld r24,Z
 197 00f0 9181      		ldd r25,Z+1
 198 00f2 8C57      		subi r24,124
 199 00f4 9D4F      		sbci r25,-3
 200 00f6 FC01      		movw r30,r24
 201 00f8 2081      		ld r18,Z
 202 00fa 3181      		ldd r19,Z+1
 203 00fc CE01      		movw r24,r28
 204 00fe 805B      		subi r24,-80
 205 0100 9F4F      		sbci r25,-1
 206 0102 FC01      		movw r30,r24
 207 0104 8081      		ld r24,Z
 208 0106 9181      		ldd r25,Z+1
 209 0108 8653      		subi r24,54
 210 010a 9D4F      		sbci r25,-3
 211 010c FC01      		movw r30,r24
 212 010e 8081      		ld r24,Z
 213 0110 9181      		ldd r25,Z+1
 214 0112 892B      		or r24,r25
 215 0114 01F0      		breq .L6
 216               		.loc 1 50 0 is_stmt 0 discriminator 2
 217 0116 CE01      		movw r24,r28
 218 0118 805B      		subi r24,-80
 219 011a 9F4F      		sbci r25,-1
 220 011c FC01      		movw r30,r24
 221 011e 8081      		ld r24,Z
 222 0120 9181      		ldd r25,Z+1
 223 0122 8C57      		subi r24,124
 224 0124 9D4F      		sbci r25,-3
 225 0126 FC01      		movw r30,r24
 226 0128 8081      		ld r24,Z
 227 012a 9181      		ldd r25,Z+1
 228 012c FC01      		movw r30,r24
 229 012e 8281      		ldd r24,Z+2
 230 0130 9381      		ldd r25,Z+3
 231 0132 0197      		sbiw r24,1
 232 0134 01F4      		brne .L7
 233               	.L6:
 234               		.loc 1 50 0 discriminator 3
 235 0136 81E0      		ldi r24,lo8(1)
 236 0138 90E0      		ldi r25,0
 237 013a 00C0      		rjmp .L8
 238               	.L7:
 239               		.loc 1 50 0 discriminator 4
 240 013c 82E0      		ldi r24,lo8(2)
 241 013e 90E0      		ldi r25,0
 242               	.L8:
 243               		.loc 1 50 0 discriminator 6
 244 0140 F901      		movw r30,r18
 245 0142 9583      		std Z+5,r25
 246 0144 8483      		std Z+4,r24
 247               	.L5:
  51:lp_solve_5.5/lp_crash.c **** 
  52:lp_solve_5.5/lp_crash.c ****   /* Construct a basis that is in some measure the "most feasible" */
  53:lp_solve_5.5/lp_crash.c ****   if((lp->crashmode == CRASH_MOSTFEASIBLE) && mat_validate(mat)) {
 248               		.loc 1 53 0 is_stmt 1
 249 0146 CE01      		movw r24,r28
 250 0148 805B      		subi r24,-80
 251 014a 9F4F      		sbci r25,-1
 252 014c FC01      		movw r30,r24
 253 014e 8081      		ld r24,Z
 254 0150 9181      		ldd r25,Z+1
 255 0152 8653      		subi r24,54
 256 0154 9D4F      		sbci r25,-3
 257 0156 FC01      		movw r30,r24
 258 0158 8081      		ld r24,Z
 259 015a 9181      		ldd r25,Z+1
 260 015c 0297      		sbiw r24,2
 261 015e 01F0      		breq .+2
 262 0160 00C0      		rjmp .L9
 263               		.loc 1 53 0 is_stmt 0 discriminator 1
 264 0162 8CA1      		ldd r24,Y+36
 265 0164 9DA1      		ldd r25,Y+37
 266 0166 0E94 0000 		call mat_validate
 267 016a 8823      		tst r24
 268 016c 01F4      		brne .+2
 269 016e 00C0      		rjmp .L9
 270               	.LBB2:
  54:lp_solve_5.5/lp_crash.c ****     /* The logic here follows Maros */
  55:lp_solve_5.5/lp_crash.c ****     LLrec   *rowLL = NULL, *colLL = NULL;
 271               		.loc 1 55 0 is_stmt 1
 272 0170 1FAA      		std Y+55,__zero_reg__
 273 0172 1EAA      		std Y+54,__zero_reg__
 274 0174 19AE      		std Y+57,__zero_reg__
 275 0176 18AE      		std Y+56,__zero_reg__
  56:lp_solve_5.5/lp_crash.c ****     int     ii, rx, cx, ix, nz;
  57:lp_solve_5.5/lp_crash.c ****     REAL    wx, tx, *rowMAX = NULL, *colMAX = NULL;
 276               		.loc 1 57 0
 277 0178 1BAE      		std Y+59,__zero_reg__
 278 017a 1AAE      		std Y+58,__zero_reg__
 279 017c 1DAE      		std Y+61,__zero_reg__
 280 017e 1CAE      		std Y+60,__zero_reg__
  58:lp_solve_5.5/lp_crash.c ****     int     *rowNZ = NULL, *colNZ = NULL, *rowWT = NULL, *colWT = NULL;
 281               		.loc 1 58 0
 282 0180 1FAE      		std Y+63,__zero_reg__
 283 0182 1EAE      		std Y+62,__zero_reg__
 284 0184 CE01      		movw r24,r28
 285 0186 805C      		subi r24,-64
 286 0188 9F4F      		sbci r25,-1
 287 018a FC01      		movw r30,r24
 288 018c 1182      		std Z+1,__zero_reg__
 289 018e 1082      		st Z,__zero_reg__
 290 0190 CE01      		movw r24,r28
 291 0192 8E5B      		subi r24,-66
 292 0194 9F4F      		sbci r25,-1
 293 0196 FC01      		movw r30,r24
 294 0198 1182      		std Z+1,__zero_reg__
 295 019a 1082      		st Z,__zero_reg__
 296 019c CE01      		movw r24,r28
 297 019e 8C5B      		subi r24,-68
 298 01a0 9F4F      		sbci r25,-1
 299 01a2 FC01      		movw r30,r24
 300 01a4 1182      		std Z+1,__zero_reg__
 301 01a6 1082      		st Z,__zero_reg__
  59:lp_solve_5.5/lp_crash.c ****     REAL    *value;
  60:lp_solve_5.5/lp_crash.c ****     int     *rownr, *colnr;
  61:lp_solve_5.5/lp_crash.c **** 
  62:lp_solve_5.5/lp_crash.c ****     report(lp, NORMAL, "crash_basis: 'Most feasible' basis crashing selected\n");
 302               		.loc 1 62 0
 303 01a8 80E0      		ldi r24,lo8(.LC0)
 304 01aa 90E0      		ldi r25,hi8(.LC0)
 305 01ac 892F      		mov r24,r25
 306 01ae 8F93      		push r24
 307 01b0 80E0      		ldi r24,lo8(.LC0)
 308 01b2 90E0      		ldi r25,hi8(.LC0)
 309 01b4 8F93      		push r24
 310 01b6 1F92      		push __zero_reg__
 311 01b8 84E0      		ldi r24,lo8(4)
 312 01ba 8F93      		push r24
 313 01bc CE01      		movw r24,r28
 314 01be 805B      		subi r24,-80
 315 01c0 9F4F      		sbci r25,-1
 316 01c2 FC01      		movw r30,r24
 317 01c4 2181      		ldd r18,Z+1
 318 01c6 2F93      		push r18
 319 01c8 FC01      		movw r30,r24
 320 01ca 8081      		ld r24,Z
 321 01cc 8F93      		push r24
 322 01ce 0E94 0000 		call report
 323 01d2 0F90      		pop __tmp_reg__
 324 01d4 0F90      		pop __tmp_reg__
 325 01d6 0F90      		pop __tmp_reg__
 326 01d8 0F90      		pop __tmp_reg__
 327 01da 0F90      		pop __tmp_reg__
 328 01dc 0F90      		pop __tmp_reg__
  63:lp_solve_5.5/lp_crash.c **** 
  64:lp_solve_5.5/lp_crash.c ****     /* Tally row and column non-zero counts */
  65:lp_solve_5.5/lp_crash.c ****     ok = allocINT(lp,  &rowNZ, lp->rows+1,     TRUE) &&
 329               		.loc 1 65 0
 330 01de CE01      		movw r24,r28
 331 01e0 805B      		subi r24,-80
 332 01e2 9F4F      		sbci r25,-1
 333 01e4 FC01      		movw r30,r24
 334 01e6 8081      		ld r24,Z
 335 01e8 9181      		ldd r25,Z+1
 336 01ea 8651      		subi r24,22
 337 01ec 9E4F      		sbci r25,-2
 338 01ee FC01      		movw r30,r24
 339 01f0 8081      		ld r24,Z
 340 01f2 9181      		ldd r25,Z+1
 341 01f4 AC01      		movw r20,r24
 342 01f6 4F5F      		subi r20,-1
 343 01f8 5F4F      		sbci r21,-1
 344 01fa BE01      		movw r22,r28
 345 01fc 625C      		subi r22,-62
 346 01fe 7F4F      		sbci r23,-1
 347 0200 CE01      		movw r24,r28
 348 0202 805B      		subi r24,-80
 349 0204 9F4F      		sbci r25,-1
 350 0206 FC01      		movw r30,r24
 351 0208 8081      		ld r24,Z
 352 020a 9181      		ldd r25,Z+1
 353 020c 21E0      		ldi r18,lo8(1)
 354 020e 0E94 0000 		call allocINT
  66:lp_solve_5.5/lp_crash.c ****          allocINT(lp,  &colNZ, lp->columns+1,  TRUE) &&
  67:lp_solve_5.5/lp_crash.c ****          allocREAL(lp, &rowMAX, lp->rows+1,    FALSE) &&
 355               		.loc 1 67 0
 356 0212 8823      		tst r24
 357 0214 01F4      		brne .+2
 358 0216 00C0      		rjmp .L10
  66:lp_solve_5.5/lp_crash.c ****          allocINT(lp,  &colNZ, lp->columns+1,  TRUE) &&
 359               		.loc 1 66 0
 360 0218 CE01      		movw r24,r28
 361 021a 805B      		subi r24,-80
 362 021c 9F4F      		sbci r25,-1
 363 021e FC01      		movw r30,r24
 364 0220 8081      		ld r24,Z
 365 0222 9181      		ldd r25,Z+1
 366 0224 8451      		subi r24,20
 367 0226 9E4F      		sbci r25,-2
 368 0228 FC01      		movw r30,r24
 369 022a 8081      		ld r24,Z
 370 022c 9181      		ldd r25,Z+1
 371 022e AC01      		movw r20,r24
 372 0230 4F5F      		subi r20,-1
 373 0232 5F4F      		sbci r21,-1
 374 0234 BE01      		movw r22,r28
 375 0236 605C      		subi r22,-64
 376 0238 7F4F      		sbci r23,-1
 377 023a CE01      		movw r24,r28
 378 023c 805B      		subi r24,-80
 379 023e 9F4F      		sbci r25,-1
 380 0240 FC01      		movw r30,r24
 381 0242 8081      		ld r24,Z
 382 0244 9181      		ldd r25,Z+1
 383 0246 21E0      		ldi r18,lo8(1)
 384 0248 0E94 0000 		call allocINT
  65:lp_solve_5.5/lp_crash.c ****          allocINT(lp,  &colNZ, lp->columns+1,  TRUE) &&
 385               		.loc 1 65 0
 386 024c 8823      		tst r24
 387 024e 01F0      		breq .L10
 388               		.loc 1 67 0
 389 0250 CE01      		movw r24,r28
 390 0252 805B      		subi r24,-80
 391 0254 9F4F      		sbci r25,-1
 392 0256 FC01      		movw r30,r24
 393 0258 8081      		ld r24,Z
 394 025a 9181      		ldd r25,Z+1
 395 025c 8651      		subi r24,22
 396 025e 9E4F      		sbci r25,-2
 397 0260 FC01      		movw r30,r24
 398 0262 8081      		ld r24,Z
 399 0264 9181      		ldd r25,Z+1
 400 0266 AC01      		movw r20,r24
 401 0268 4F5F      		subi r20,-1
 402 026a 5F4F      		sbci r21,-1
 403 026c BE01      		movw r22,r28
 404 026e 665C      		subi r22,-58
 405 0270 7F4F      		sbci r23,-1
 406 0272 CE01      		movw r24,r28
 407 0274 805B      		subi r24,-80
 408 0276 9F4F      		sbci r25,-1
 409 0278 FC01      		movw r30,r24
 410 027a 8081      		ld r24,Z
 411 027c 9181      		ldd r25,Z+1
 412 027e 20E0      		ldi r18,0
 413 0280 0E94 0000 		call allocREAL
  66:lp_solve_5.5/lp_crash.c ****          allocINT(lp,  &colNZ, lp->columns+1,  TRUE) &&
 414               		.loc 1 66 0
 415 0284 8823      		tst r24
 416 0286 01F0      		breq .L10
  68:lp_solve_5.5/lp_crash.c ****          allocREAL(lp, &colMAX, lp->columns+1, FALSE);
 417               		.loc 1 68 0 discriminator 3
 418 0288 CE01      		movw r24,r28
 419 028a 805B      		subi r24,-80
 420 028c 9F4F      		sbci r25,-1
 421 028e FC01      		movw r30,r24
 422 0290 8081      		ld r24,Z
 423 0292 9181      		ldd r25,Z+1
 424 0294 8451      		subi r24,20
 425 0296 9E4F      		sbci r25,-2
 426 0298 FC01      		movw r30,r24
 427 029a 8081      		ld r24,Z
 428 029c 9181      		ldd r25,Z+1
 429 029e AC01      		movw r20,r24
 430 02a0 4F5F      		subi r20,-1
 431 02a2 5F4F      		sbci r21,-1
 432 02a4 BE01      		movw r22,r28
 433 02a6 645C      		subi r22,-60
 434 02a8 7F4F      		sbci r23,-1
 435 02aa CE01      		movw r24,r28
 436 02ac 805B      		subi r24,-80
 437 02ae 9F4F      		sbci r25,-1
 438 02b0 FC01      		movw r30,r24
 439 02b2 8081      		ld r24,Z
 440 02b4 9181      		ldd r25,Z+1
 441 02b6 20E0      		ldi r18,0
 442 02b8 0E94 0000 		call allocREAL
  67:lp_solve_5.5/lp_crash.c ****          allocREAL(lp, &colMAX, lp->columns+1, FALSE);
 443               		.loc 1 67 0 discriminator 3
 444 02bc 8823      		tst r24
 445 02be 01F0      		breq .L10
  67:lp_solve_5.5/lp_crash.c ****          allocREAL(lp, &colMAX, lp->columns+1, FALSE);
 446               		.loc 1 67 0 is_stmt 0 discriminator 2
 447 02c0 81E0      		ldi r24,lo8(1)
 448 02c2 90E0      		ldi r25,0
 449 02c4 00C0      		rjmp .L11
 450               	.L10:
  67:lp_solve_5.5/lp_crash.c ****          allocREAL(lp, &colMAX, lp->columns+1, FALSE);
 451               		.loc 1 67 0 discriminator 1
 452 02c6 80E0      		ldi r24,0
 453 02c8 90E0      		ldi r25,0
 454               	.L11:
  65:lp_solve_5.5/lp_crash.c ****          allocINT(lp,  &colNZ, lp->columns+1,  TRUE) &&
 455               		.loc 1 65 0 is_stmt 1
 456 02ca 8B83      		std Y+3,r24
  69:lp_solve_5.5/lp_crash.c ****     if(!ok)
 457               		.loc 1 69 0
 458 02cc 8B81      		ldd r24,Y+3
 459 02ce 8823      		tst r24
 460 02d0 01F4      		brne .+2
 461 02d2 00C0      		rjmp .L136
  70:lp_solve_5.5/lp_crash.c ****       goto Finish;
  71:lp_solve_5.5/lp_crash.c **** 
  72:lp_solve_5.5/lp_crash.c ****     nz = mat_nonzeros(mat);
 462               		.loc 1 72 0
 463 02d4 8CA1      		ldd r24,Y+36
 464 02d6 9DA1      		ldd r25,Y+37
 465 02d8 0E94 0000 		call mat_nonzeros
 466 02dc 9FA3      		std Y+39,r25
 467 02de 8EA3      		std Y+38,r24
  73:lp_solve_5.5/lp_crash.c ****     rownr = &COL_MAT_ROWNR(0);
 468               		.loc 1 73 0
 469 02e0 8CA1      		ldd r24,Y+36
 470 02e2 9DA1      		ldd r25,Y+37
 471 02e4 FC01      		movw r30,r24
 472 02e6 8685      		ldd r24,Z+14
 473 02e8 9785      		ldd r25,Z+15
 474 02ea 998B      		std Y+17,r25
 475 02ec 888B      		std Y+16,r24
  74:lp_solve_5.5/lp_crash.c ****     colnr = &COL_MAT_COLNR(0);
 476               		.loc 1 74 0
 477 02ee 8CA1      		ldd r24,Y+36
 478 02f0 9DA1      		ldd r25,Y+37
 479 02f2 FC01      		movw r30,r24
 480 02f4 8485      		ldd r24,Z+12
 481 02f6 9585      		ldd r25,Z+13
 482 02f8 9B8B      		std Y+19,r25
 483 02fa 8A8B      		std Y+18,r24
  75:lp_solve_5.5/lp_crash.c ****     value = &COL_MAT_VALUE(0);
 484               		.loc 1 75 0
 485 02fc 8CA1      		ldd r24,Y+36
 486 02fe 9DA1      		ldd r25,Y+37
 487 0300 FC01      		movw r30,r24
 488 0302 8089      		ldd r24,Z+16
 489 0304 9189      		ldd r25,Z+17
 490 0306 9F87      		std Y+15,r25
 491 0308 8E87      		std Y+14,r24
  76:lp_solve_5.5/lp_crash.c ****     for(i = 0; i < nz;
 492               		.loc 1 76 0
 493 030a 1A82      		std Y+2,__zero_reg__
 494 030c 1982      		std Y+1,__zero_reg__
 495 030e 00C0      		rjmp .L14
 496               	.L22:
  77:lp_solve_5.5/lp_crash.c ****         i++, rownr += matRowColStep, colnr += matRowColStep, value += matValueStep) {
  78:lp_solve_5.5/lp_crash.c ****       rx = *rownr;
 497               		.loc 1 78 0
 498 0310 8889      		ldd r24,Y+16
 499 0312 9989      		ldd r25,Y+17
 500 0314 FC01      		movw r30,r24
 501 0316 8081      		ld r24,Z
 502 0318 9181      		ldd r25,Z+1
 503 031a 9F83      		std Y+7,r25
 504 031c 8E83      		std Y+6,r24
  79:lp_solve_5.5/lp_crash.c ****       cx = *colnr;
 505               		.loc 1 79 0
 506 031e 8A89      		ldd r24,Y+18
 507 0320 9B89      		ldd r25,Y+19
 508 0322 FC01      		movw r30,r24
 509 0324 8081      		ld r24,Z
 510 0326 9181      		ldd r25,Z+1
 511 0328 9987      		std Y+9,r25
 512 032a 8887      		std Y+8,r24
  80:lp_solve_5.5/lp_crash.c ****       wx = fabs(*value);
 513               		.loc 1 80 0
 514 032c 8E85      		ldd r24,Y+14
 515 032e 9F85      		ldd r25,Y+15
 516 0330 FC01      		movw r30,r24
 517 0332 8081      		ld r24,Z
 518 0334 9181      		ldd r25,Z+1
 519 0336 A281      		ldd r26,Z+2
 520 0338 B381      		ldd r27,Z+3
 521 033a BF77      		andi r27,0x7f
 522 033c 8A87      		std Y+10,r24
 523 033e 9B87      		std Y+11,r25
 524 0340 AC87      		std Y+12,r26
 525 0342 BD87      		std Y+13,r27
  81:lp_solve_5.5/lp_crash.c ****       rowNZ[rx]++;
 526               		.loc 1 81 0
 527 0344 2EAD      		ldd r18,Y+62
 528 0346 3FAD      		ldd r19,Y+63
 529 0348 8E81      		ldd r24,Y+6
 530 034a 9F81      		ldd r25,Y+7
 531 034c 880F      		lsl r24
 532 034e 991F      		rol r25
 533 0350 820F      		add r24,r18
 534 0352 931F      		adc r25,r19
 535 0354 FC01      		movw r30,r24
 536 0356 2081      		ld r18,Z
 537 0358 3181      		ldd r19,Z+1
 538 035a 2F5F      		subi r18,-1
 539 035c 3F4F      		sbci r19,-1
 540 035e FC01      		movw r30,r24
 541 0360 3183      		std Z+1,r19
 542 0362 2083      		st Z,r18
  82:lp_solve_5.5/lp_crash.c ****       colNZ[cx]++;
 543               		.loc 1 82 0
 544 0364 CE01      		movw r24,r28
 545 0366 805C      		subi r24,-64
 546 0368 9F4F      		sbci r25,-1
 547 036a FC01      		movw r30,r24
 548 036c 2081      		ld r18,Z
 549 036e 3181      		ldd r19,Z+1
 550 0370 8885      		ldd r24,Y+8
 551 0372 9985      		ldd r25,Y+9
 552 0374 880F      		lsl r24
 553 0376 991F      		rol r25
 554 0378 820F      		add r24,r18
 555 037a 931F      		adc r25,r19
 556 037c FC01      		movw r30,r24
 557 037e 2081      		ld r18,Z
 558 0380 3181      		ldd r19,Z+1
 559 0382 2F5F      		subi r18,-1
 560 0384 3F4F      		sbci r19,-1
 561 0386 FC01      		movw r30,r24
 562 0388 3183      		std Z+1,r19
 563 038a 2083      		st Z,r18
  83:lp_solve_5.5/lp_crash.c ****       if(i == 0) {
 564               		.loc 1 83 0
 565 038c 8981      		ldd r24,Y+1
 566 038e 9A81      		ldd r25,Y+2
 567 0390 892B      		or r24,r25
 568 0392 01F4      		brne .L15
  84:lp_solve_5.5/lp_crash.c ****         rowMAX[rx] = wx;
 569               		.loc 1 84 0
 570 0394 2AAD      		ldd r18,Y+58
 571 0396 3BAD      		ldd r19,Y+59
 572 0398 8E81      		ldd r24,Y+6
 573 039a 9F81      		ldd r25,Y+7
 574 039c 880F      		lsl r24
 575 039e 991F      		rol r25
 576 03a0 880F      		lsl r24
 577 03a2 991F      		rol r25
 578 03a4 280F      		add r18,r24
 579 03a6 391F      		adc r19,r25
 580 03a8 8A85      		ldd r24,Y+10
 581 03aa 9B85      		ldd r25,Y+11
 582 03ac AC85      		ldd r26,Y+12
 583 03ae BD85      		ldd r27,Y+13
 584 03b0 F901      		movw r30,r18
 585 03b2 8083      		st Z,r24
 586 03b4 9183      		std Z+1,r25
 587 03b6 A283      		std Z+2,r26
 588 03b8 B383      		std Z+3,r27
  85:lp_solve_5.5/lp_crash.c ****         colMAX[cx] = wx;
 589               		.loc 1 85 0
 590 03ba 2CAD      		ldd r18,Y+60
 591 03bc 3DAD      		ldd r19,Y+61
 592 03be 8885      		ldd r24,Y+8
 593 03c0 9985      		ldd r25,Y+9
 594 03c2 880F      		lsl r24
 595 03c4 991F      		rol r25
 596 03c6 880F      		lsl r24
 597 03c8 991F      		rol r25
 598 03ca 280F      		add r18,r24
 599 03cc 391F      		adc r19,r25
 600 03ce 8A85      		ldd r24,Y+10
 601 03d0 9B85      		ldd r25,Y+11
 602 03d2 AC85      		ldd r26,Y+12
 603 03d4 BD85      		ldd r27,Y+13
 604 03d6 F901      		movw r30,r18
 605 03d8 8083      		st Z,r24
 606 03da 9183      		std Z+1,r25
 607 03dc A283      		std Z+2,r26
 608 03de B383      		std Z+3,r27
  86:lp_solve_5.5/lp_crash.c ****         colMAX[0]  = wx;
 609               		.loc 1 86 0
 610 03e0 2CAD      		ldd r18,Y+60
 611 03e2 3DAD      		ldd r19,Y+61
 612 03e4 8A85      		ldd r24,Y+10
 613 03e6 9B85      		ldd r25,Y+11
 614 03e8 AC85      		ldd r26,Y+12
 615 03ea BD85      		ldd r27,Y+13
 616 03ec F901      		movw r30,r18
 617 03ee 8083      		st Z,r24
 618 03f0 9183      		std Z+1,r25
 619 03f2 A283      		std Z+2,r26
 620 03f4 B383      		std Z+3,r27
 621 03f6 00C0      		rjmp .L16
 622               	.L15:
  87:lp_solve_5.5/lp_crash.c ****       }
  88:lp_solve_5.5/lp_crash.c ****       else {
  89:lp_solve_5.5/lp_crash.c ****         SETMAX(rowMAX[rx], wx);
 623               		.loc 1 89 0
 624 03f8 2AAD      		ldd r18,Y+58
 625 03fa 3BAD      		ldd r19,Y+59
 626 03fc 8E81      		ldd r24,Y+6
 627 03fe 9F81      		ldd r25,Y+7
 628 0400 880F      		lsl r24
 629 0402 991F      		rol r25
 630 0404 880F      		lsl r24
 631 0406 991F      		rol r25
 632 0408 820F      		add r24,r18
 633 040a 931F      		adc r25,r19
 634 040c FC01      		movw r30,r24
 635 040e 8081      		ld r24,Z
 636 0410 9181      		ldd r25,Z+1
 637 0412 A281      		ldd r26,Z+2
 638 0414 B381      		ldd r27,Z+3
 639 0416 2A85      		ldd r18,Y+10
 640 0418 3B85      		ldd r19,Y+11
 641 041a 4C85      		ldd r20,Y+12
 642 041c 5D85      		ldd r21,Y+13
 643 041e BC01      		movw r22,r24
 644 0420 CD01      		movw r24,r26
 645 0422 0E94 0000 		call __ltsf2
 646 0426 8823      		tst r24
 647 0428 04F4      		brge .L17
 648               		.loc 1 89 0 is_stmt 0 discriminator 1
 649 042a 2AAD      		ldd r18,Y+58
 650 042c 3BAD      		ldd r19,Y+59
 651 042e 8E81      		ldd r24,Y+6
 652 0430 9F81      		ldd r25,Y+7
 653 0432 880F      		lsl r24
 654 0434 991F      		rol r25
 655 0436 880F      		lsl r24
 656 0438 991F      		rol r25
 657 043a 280F      		add r18,r24
 658 043c 391F      		adc r19,r25
 659 043e 8A85      		ldd r24,Y+10
 660 0440 9B85      		ldd r25,Y+11
 661 0442 AC85      		ldd r26,Y+12
 662 0444 BD85      		ldd r27,Y+13
 663 0446 F901      		movw r30,r18
 664 0448 8083      		st Z,r24
 665 044a 9183      		std Z+1,r25
 666 044c A283      		std Z+2,r26
 667 044e B383      		std Z+3,r27
 668               	.L17:
  90:lp_solve_5.5/lp_crash.c ****         SETMAX(colMAX[cx], wx);
 669               		.loc 1 90 0 is_stmt 1
 670 0450 2CAD      		ldd r18,Y+60
 671 0452 3DAD      		ldd r19,Y+61
 672 0454 8885      		ldd r24,Y+8
 673 0456 9985      		ldd r25,Y+9
 674 0458 880F      		lsl r24
 675 045a 991F      		rol r25
 676 045c 880F      		lsl r24
 677 045e 991F      		rol r25
 678 0460 820F      		add r24,r18
 679 0462 931F      		adc r25,r19
 680 0464 FC01      		movw r30,r24
 681 0466 8081      		ld r24,Z
 682 0468 9181      		ldd r25,Z+1
 683 046a A281      		ldd r26,Z+2
 684 046c B381      		ldd r27,Z+3
 685 046e 2A85      		ldd r18,Y+10
 686 0470 3B85      		ldd r19,Y+11
 687 0472 4C85      		ldd r20,Y+12
 688 0474 5D85      		ldd r21,Y+13
 689 0476 BC01      		movw r22,r24
 690 0478 CD01      		movw r24,r26
 691 047a 0E94 0000 		call __ltsf2
 692 047e 8823      		tst r24
 693 0480 04F4      		brge .L19
 694               		.loc 1 90 0 is_stmt 0 discriminator 1
 695 0482 2CAD      		ldd r18,Y+60
 696 0484 3DAD      		ldd r19,Y+61
 697 0486 8885      		ldd r24,Y+8
 698 0488 9985      		ldd r25,Y+9
 699 048a 880F      		lsl r24
 700 048c 991F      		rol r25
 701 048e 880F      		lsl r24
 702 0490 991F      		rol r25
 703 0492 280F      		add r18,r24
 704 0494 391F      		adc r19,r25
 705 0496 8A85      		ldd r24,Y+10
 706 0498 9B85      		ldd r25,Y+11
 707 049a AC85      		ldd r26,Y+12
 708 049c BD85      		ldd r27,Y+13
 709 049e F901      		movw r30,r18
 710 04a0 8083      		st Z,r24
 711 04a2 9183      		std Z+1,r25
 712 04a4 A283      		std Z+2,r26
 713 04a6 B383      		std Z+3,r27
 714               	.L19:
  91:lp_solve_5.5/lp_crash.c ****         SETMAX(colMAX[0],  wx);
 715               		.loc 1 91 0 is_stmt 1
 716 04a8 8CAD      		ldd r24,Y+60
 717 04aa 9DAD      		ldd r25,Y+61
 718 04ac FC01      		movw r30,r24
 719 04ae 8081      		ld r24,Z
 720 04b0 9181      		ldd r25,Z+1
 721 04b2 A281      		ldd r26,Z+2
 722 04b4 B381      		ldd r27,Z+3
 723 04b6 2A85      		ldd r18,Y+10
 724 04b8 3B85      		ldd r19,Y+11
 725 04ba 4C85      		ldd r20,Y+12
 726 04bc 5D85      		ldd r21,Y+13
 727 04be BC01      		movw r22,r24
 728 04c0 CD01      		movw r24,r26
 729 04c2 0E94 0000 		call __ltsf2
 730 04c6 8823      		tst r24
 731 04c8 04F4      		brge .L16
 732               		.loc 1 91 0 is_stmt 0 discriminator 1
 733 04ca 2CAD      		ldd r18,Y+60
 734 04cc 3DAD      		ldd r19,Y+61
 735 04ce 8A85      		ldd r24,Y+10
 736 04d0 9B85      		ldd r25,Y+11
 737 04d2 AC85      		ldd r26,Y+12
 738 04d4 BD85      		ldd r27,Y+13
 739 04d6 F901      		movw r30,r18
 740 04d8 8083      		st Z,r24
 741 04da 9183      		std Z+1,r25
 742 04dc A283      		std Z+2,r26
 743 04de B383      		std Z+3,r27
 744               	.L16:
  77:lp_solve_5.5/lp_crash.c ****       rx = *rownr;
 745               		.loc 1 77 0 is_stmt 1
 746 04e0 8981      		ldd r24,Y+1
 747 04e2 9A81      		ldd r25,Y+2
 748 04e4 0196      		adiw r24,1
 749 04e6 9A83      		std Y+2,r25
 750 04e8 8983      		std Y+1,r24
 751 04ea 8889      		ldd r24,Y+16
 752 04ec 9989      		ldd r25,Y+17
 753 04ee 0296      		adiw r24,2
 754 04f0 998B      		std Y+17,r25
 755 04f2 888B      		std Y+16,r24
 756 04f4 8A89      		ldd r24,Y+18
 757 04f6 9B89      		ldd r25,Y+19
 758 04f8 0296      		adiw r24,2
 759 04fa 9B8B      		std Y+19,r25
 760 04fc 8A8B      		std Y+18,r24
 761 04fe 8E85      		ldd r24,Y+14
 762 0500 9F85      		ldd r25,Y+15
 763 0502 0496      		adiw r24,4
 764 0504 9F87      		std Y+15,r25
 765 0506 8E87      		std Y+14,r24
 766               	.L14:
  76:lp_solve_5.5/lp_crash.c ****         i++, rownr += matRowColStep, colnr += matRowColStep, value += matValueStep) {
 767               		.loc 1 76 0 discriminator 1
 768 0508 2981      		ldd r18,Y+1
 769 050a 3A81      		ldd r19,Y+2
 770 050c 8EA1      		ldd r24,Y+38
 771 050e 9FA1      		ldd r25,Y+39
 772 0510 2817      		cp r18,r24
 773 0512 3907      		cpc r19,r25
 774 0514 04F4      		brge .+2
 775 0516 00C0      		rjmp .L22
  92:lp_solve_5.5/lp_crash.c ****       }
  93:lp_solve_5.5/lp_crash.c ****     }
  94:lp_solve_5.5/lp_crash.c ****     /* Reduce counts for small magnitude to preserve stability */
  95:lp_solve_5.5/lp_crash.c ****     rownr = &COL_MAT_ROWNR(0);
 776               		.loc 1 95 0
 777 0518 8CA1      		ldd r24,Y+36
 778 051a 9DA1      		ldd r25,Y+37
 779 051c FC01      		movw r30,r24
 780 051e 8685      		ldd r24,Z+14
 781 0520 9785      		ldd r25,Z+15
 782 0522 998B      		std Y+17,r25
 783 0524 888B      		std Y+16,r24
  96:lp_solve_5.5/lp_crash.c ****     colnr = &COL_MAT_COLNR(0);
 784               		.loc 1 96 0
 785 0526 8CA1      		ldd r24,Y+36
 786 0528 9DA1      		ldd r25,Y+37
 787 052a FC01      		movw r30,r24
 788 052c 8485      		ldd r24,Z+12
 789 052e 9585      		ldd r25,Z+13
 790 0530 9B8B      		std Y+19,r25
 791 0532 8A8B      		std Y+18,r24
  97:lp_solve_5.5/lp_crash.c ****     value = &COL_MAT_VALUE(0);
 792               		.loc 1 97 0
 793 0534 8CA1      		ldd r24,Y+36
 794 0536 9DA1      		ldd r25,Y+37
 795 0538 FC01      		movw r30,r24
 796 053a 8089      		ldd r24,Z+16
 797 053c 9189      		ldd r25,Z+17
 798 053e 9F87      		std Y+15,r25
 799 0540 8E87      		std Y+14,r24
  98:lp_solve_5.5/lp_crash.c ****     for(i = 0; i < nz;
 800               		.loc 1 98 0
 801 0542 1A82      		std Y+2,__zero_reg__
 802 0544 1982      		std Y+1,__zero_reg__
 803 0546 00C0      		rjmp .L23
 804               	.L26:
  99:lp_solve_5.5/lp_crash.c ****         i++, rownr += matRowColStep, colnr += matRowColStep, value += matValueStep) {
 100:lp_solve_5.5/lp_crash.c ****       rx = *rownr;
 805               		.loc 1 100 0
 806 0548 8889      		ldd r24,Y+16
 807 054a 9989      		ldd r25,Y+17
 808 054c FC01      		movw r30,r24
 809 054e 8081      		ld r24,Z
 810 0550 9181      		ldd r25,Z+1
 811 0552 9F83      		std Y+7,r25
 812 0554 8E83      		std Y+6,r24
 101:lp_solve_5.5/lp_crash.c ****       cx = *colnr;
 813               		.loc 1 101 0
 814 0556 8A89      		ldd r24,Y+18
 815 0558 9B89      		ldd r25,Y+19
 816 055a FC01      		movw r30,r24
 817 055c 8081      		ld r24,Z
 818 055e 9181      		ldd r25,Z+1
 819 0560 9987      		std Y+9,r25
 820 0562 8887      		std Y+8,r24
 102:lp_solve_5.5/lp_crash.c ****       wx = fabs(*value);
 821               		.loc 1 102 0
 822 0564 8E85      		ldd r24,Y+14
 823 0566 9F85      		ldd r25,Y+15
 824 0568 FC01      		movw r30,r24
 825 056a 8081      		ld r24,Z
 826 056c 9181      		ldd r25,Z+1
 827 056e A281      		ldd r26,Z+2
 828 0570 B381      		ldd r27,Z+3
 829 0572 BF77      		andi r27,0x7f
 830 0574 8A87      		std Y+10,r24
 831 0576 9B87      		std Y+11,r25
 832 0578 AC87      		std Y+12,r26
 833 057a BD87      		std Y+13,r27
 103:lp_solve_5.5/lp_crash.c **** #ifdef CRASH_SIMPLESCALE
 104:lp_solve_5.5/lp_crash.c ****       if(wx < CRASH_THRESHOLD * colMAX[0]) {
 834               		.loc 1 104 0
 835 057c 8CAD      		ldd r24,Y+60
 836 057e 9DAD      		ldd r25,Y+61
 837 0580 FC01      		movw r30,r24
 838 0582 8081      		ld r24,Z
 839 0584 9181      		ldd r25,Z+1
 840 0586 A281      		ldd r26,Z+2
 841 0588 B381      		ldd r27,Z+3
 842 058a 2CE0      		ldi r18,lo8(12)
 843 058c 32E0      		ldi r19,lo8(2)
 844 058e 4BE2      		ldi r20,lo8(43)
 845 0590 5EE3      		ldi r21,lo8(62)
 846 0592 BC01      		movw r22,r24
 847 0594 CD01      		movw r24,r26
 848 0596 0E94 0000 		call __mulsf3
 849 059a DC01      		movw r26,r24
 850 059c CB01      		movw r24,r22
 851 059e 2A85      		ldd r18,Y+10
 852 05a0 3B85      		ldd r19,Y+11
 853 05a2 4C85      		ldd r20,Y+12
 854 05a4 5D85      		ldd r21,Y+13
 855 05a6 BC01      		movw r22,r24
 856 05a8 CD01      		movw r24,r26
 857 05aa 0E94 0000 		call __gtsf2
 858 05ae 1816      		cp __zero_reg__,r24
 859 05b0 04F4      		brge .L24
 105:lp_solve_5.5/lp_crash.c ****         rowNZ[rx]--;
 860               		.loc 1 105 0
 861 05b2 2EAD      		ldd r18,Y+62
 862 05b4 3FAD      		ldd r19,Y+63
 863 05b6 8E81      		ldd r24,Y+6
 864 05b8 9F81      		ldd r25,Y+7
 865 05ba 880F      		lsl r24
 866 05bc 991F      		rol r25
 867 05be 820F      		add r24,r18
 868 05c0 931F      		adc r25,r19
 869 05c2 FC01      		movw r30,r24
 870 05c4 2081      		ld r18,Z
 871 05c6 3181      		ldd r19,Z+1
 872 05c8 2150      		subi r18,1
 873 05ca 3109      		sbc r19,__zero_reg__
 874 05cc FC01      		movw r30,r24
 875 05ce 3183      		std Z+1,r19
 876 05d0 2083      		st Z,r18
 106:lp_solve_5.5/lp_crash.c ****         colNZ[cx]--;
 877               		.loc 1 106 0
 878 05d2 CE01      		movw r24,r28
 879 05d4 805C      		subi r24,-64
 880 05d6 9F4F      		sbci r25,-1
 881 05d8 FC01      		movw r30,r24
 882 05da 2081      		ld r18,Z
 883 05dc 3181      		ldd r19,Z+1
 884 05de 8885      		ldd r24,Y+8
 885 05e0 9985      		ldd r25,Y+9
 886 05e2 880F      		lsl r24
 887 05e4 991F      		rol r25
 888 05e6 820F      		add r24,r18
 889 05e8 931F      		adc r25,r19
 890 05ea FC01      		movw r30,r24
 891 05ec 2081      		ld r18,Z
 892 05ee 3181      		ldd r19,Z+1
 893 05f0 2150      		subi r18,1
 894 05f2 3109      		sbc r19,__zero_reg__
 895 05f4 FC01      		movw r30,r24
 896 05f6 3183      		std Z+1,r19
 897 05f8 2083      		st Z,r18
 898               	.L24:
  99:lp_solve_5.5/lp_crash.c ****       rx = *rownr;
 899               		.loc 1 99 0
 900 05fa 8981      		ldd r24,Y+1
 901 05fc 9A81      		ldd r25,Y+2
 902 05fe 0196      		adiw r24,1
 903 0600 9A83      		std Y+2,r25
 904 0602 8983      		std Y+1,r24
 905 0604 8889      		ldd r24,Y+16
 906 0606 9989      		ldd r25,Y+17
 907 0608 0296      		adiw r24,2
 908 060a 998B      		std Y+17,r25
 909 060c 888B      		std Y+16,r24
 910 060e 8A89      		ldd r24,Y+18
 911 0610 9B89      		ldd r25,Y+19
 912 0612 0296      		adiw r24,2
 913 0614 9B8B      		std Y+19,r25
 914 0616 8A8B      		std Y+18,r24
 915 0618 8E85      		ldd r24,Y+14
 916 061a 9F85      		ldd r25,Y+15
 917 061c 0496      		adiw r24,4
 918 061e 9F87      		std Y+15,r25
 919 0620 8E87      		std Y+14,r24
 920               	.L23:
  98:lp_solve_5.5/lp_crash.c ****         i++, rownr += matRowColStep, colnr += matRowColStep, value += matValueStep) {
 921               		.loc 1 98 0 discriminator 1
 922 0622 2981      		ldd r18,Y+1
 923 0624 3A81      		ldd r19,Y+2
 924 0626 8EA1      		ldd r24,Y+38
 925 0628 9FA1      		ldd r25,Y+39
 926 062a 2817      		cp r18,r24
 927 062c 3907      		cpc r19,r25
 928 062e 04F4      		brge .+2
 929 0630 00C0      		rjmp .L26
 107:lp_solve_5.5/lp_crash.c ****       }
 108:lp_solve_5.5/lp_crash.c **** #else
 109:lp_solve_5.5/lp_crash.c ****       if(wx < CRASH_THRESHOLD * rowMAX[rx])
 110:lp_solve_5.5/lp_crash.c ****         rowNZ[rx]--;
 111:lp_solve_5.5/lp_crash.c ****       if(wx < CRASH_THRESHOLD * colMAX[cx])
 112:lp_solve_5.5/lp_crash.c ****         colNZ[cx]--;
 113:lp_solve_5.5/lp_crash.c **** #endif
 114:lp_solve_5.5/lp_crash.c ****     }
 115:lp_solve_5.5/lp_crash.c **** 
 116:lp_solve_5.5/lp_crash.c ****     /* Set up priority tables */
 117:lp_solve_5.5/lp_crash.c ****     ok = allocINT(lp, &rowWT, lp->rows+1, TRUE);
 930               		.loc 1 117 0
 931 0632 CE01      		movw r24,r28
 932 0634 805B      		subi r24,-80
 933 0636 9F4F      		sbci r25,-1
 934 0638 FC01      		movw r30,r24
 935 063a 8081      		ld r24,Z
 936 063c 9181      		ldd r25,Z+1
 937 063e 8651      		subi r24,22
 938 0640 9E4F      		sbci r25,-2
 939 0642 FC01      		movw r30,r24
 940 0644 8081      		ld r24,Z
 941 0646 9181      		ldd r25,Z+1
 942 0648 AC01      		movw r20,r24
 943 064a 4F5F      		subi r20,-1
 944 064c 5F4F      		sbci r21,-1
 945 064e BE01      		movw r22,r28
 946 0650 6E5B      		subi r22,-66
 947 0652 7F4F      		sbci r23,-1
 948 0654 CE01      		movw r24,r28
 949 0656 805B      		subi r24,-80
 950 0658 9F4F      		sbci r25,-1
 951 065a FC01      		movw r30,r24
 952 065c 8081      		ld r24,Z
 953 065e 9181      		ldd r25,Z+1
 954 0660 21E0      		ldi r18,lo8(1)
 955 0662 0E94 0000 		call allocINT
 956 0666 8B83      		std Y+3,r24
 118:lp_solve_5.5/lp_crash.c ****     createLink(lp->rows,    &rowLL, NULL);
 957               		.loc 1 118 0
 958 0668 CE01      		movw r24,r28
 959 066a 805B      		subi r24,-80
 960 066c 9F4F      		sbci r25,-1
 961 066e FC01      		movw r30,r24
 962 0670 8081      		ld r24,Z
 963 0672 9181      		ldd r25,Z+1
 964 0674 8651      		subi r24,22
 965 0676 9E4F      		sbci r25,-2
 966 0678 FC01      		movw r30,r24
 967 067a 8081      		ld r24,Z
 968 067c 9181      		ldd r25,Z+1
 969 067e 9E01      		movw r18,r28
 970 0680 2A5C      		subi r18,-54
 971 0682 3F4F      		sbci r19,-1
 972 0684 40E0      		ldi r20,0
 973 0686 50E0      		ldi r21,0
 974 0688 B901      		movw r22,r18
 975 068a 0E94 0000 		call createLink
 119:lp_solve_5.5/lp_crash.c ****     ok &= (rowLL != NULL);
 976               		.loc 1 119 0
 977 068e 8EA9      		ldd r24,Y+54
 978 0690 9FA9      		ldd r25,Y+55
 979 0692 21E0      		ldi r18,lo8(1)
 980 0694 892B      		or r24,r25
 981 0696 01F4      		brne .L27
 982 0698 20E0      		ldi r18,0
 983               	.L27:
 984 069a 922F      		mov r25,r18
 985 069c 8B81      		ldd r24,Y+3
 986 069e 8923      		and r24,r25
 987 06a0 8B83      		std Y+3,r24
 120:lp_solve_5.5/lp_crash.c ****     if(!ok)
 988               		.loc 1 120 0
 989 06a2 8B81      		ldd r24,Y+3
 990 06a4 8823      		tst r24
 991 06a6 01F4      		brne .+2
 992 06a8 00C0      		rjmp .L137
 121:lp_solve_5.5/lp_crash.c ****       goto Finish;
 122:lp_solve_5.5/lp_crash.c ****     for(i = 1; i <= lp->rows; i++) {
 993               		.loc 1 122 0
 994 06aa 81E0      		ldi r24,lo8(1)
 995 06ac 90E0      		ldi r25,0
 996 06ae 9A83      		std Y+2,r25
 997 06b0 8983      		std Y+1,r24
 998 06b2 00C0      		rjmp .L29
 999               	.L37:
 123:lp_solve_5.5/lp_crash.c ****       if(get_constr_type(lp, i)==EQ)
 1000               		.loc 1 123 0
 1001 06b4 2981      		ldd r18,Y+1
 1002 06b6 3A81      		ldd r19,Y+2
 1003 06b8 CE01      		movw r24,r28
 1004 06ba 805B      		subi r24,-80
 1005 06bc 9F4F      		sbci r25,-1
 1006 06be FC01      		movw r30,r24
 1007 06c0 8081      		ld r24,Z
 1008 06c2 9181      		ldd r25,Z+1
 1009 06c4 B901      		movw r22,r18
 1010 06c6 0E94 0000 		call get_constr_type
 1011 06ca 0397      		sbiw r24,3
 1012 06cc 01F4      		brne .L30
 124:lp_solve_5.5/lp_crash.c ****         ii = 3;
 1013               		.loc 1 124 0
 1014 06ce 83E0      		ldi r24,lo8(3)
 1015 06d0 90E0      		ldi r25,0
 1016 06d2 9D83      		std Y+5,r25
 1017 06d4 8C83      		std Y+4,r24
 1018 06d6 00C0      		rjmp .L31
 1019               	.L30:
 125:lp_solve_5.5/lp_crash.c ****       else if(lp->upbo[i] < lp->infinite)
 1020               		.loc 1 125 0
 1021 06d8 CE01      		movw r24,r28
 1022 06da 805B      		subi r24,-80
 1023 06dc 9F4F      		sbci r25,-1
 1024 06de FC01      		movw r30,r24
 1025 06e0 8081      		ld r24,Z
 1026 06e2 9181      		ldd r25,Z+1
 1027 06e4 8055      		subi r24,80
 1028 06e6 9D4F      		sbci r25,-3
 1029 06e8 FC01      		movw r30,r24
 1030 06ea 2081      		ld r18,Z
 1031 06ec 3181      		ldd r19,Z+1
 1032 06ee 8981      		ldd r24,Y+1
 1033 06f0 9A81      		ldd r25,Y+2
 1034 06f2 880F      		lsl r24
 1035 06f4 991F      		rol r25
 1036 06f6 880F      		lsl r24
 1037 06f8 991F      		rol r25
 1038 06fa 820F      		add r24,r18
 1039 06fc 931F      		adc r25,r19
 1040 06fe FC01      		movw r30,r24
 1041 0700 8081      		ld r24,Z
 1042 0702 9181      		ldd r25,Z+1
 1043 0704 A281      		ldd r26,Z+2
 1044 0706 B381      		ldd r27,Z+3
 1045 0708 9E01      		movw r18,r28
 1046 070a 205B      		subi r18,-80
 1047 070c 3F4F      		sbci r19,-1
 1048 070e F901      		movw r30,r18
 1049 0710 2081      		ld r18,Z
 1050 0712 3181      		ldd r19,Z+1
 1051 0714 265F      		subi r18,-10
 1052 0716 3C4F      		sbci r19,-4
 1053 0718 F901      		movw r30,r18
 1054 071a 2081      		ld r18,Z
 1055 071c 3181      		ldd r19,Z+1
 1056 071e 4281      		ldd r20,Z+2
 1057 0720 5381      		ldd r21,Z+3
 1058 0722 BC01      		movw r22,r24
 1059 0724 CD01      		movw r24,r26
 1060 0726 0E94 0000 		call __ltsf2
 1061 072a 8823      		tst r24
 1062 072c 04F4      		brge .L130
 126:lp_solve_5.5/lp_crash.c ****         ii = 2;
 1063               		.loc 1 126 0
 1064 072e 82E0      		ldi r24,lo8(2)
 1065 0730 90E0      		ldi r25,0
 1066 0732 9D83      		std Y+5,r25
 1067 0734 8C83      		std Y+4,r24
 1068 0736 00C0      		rjmp .L31
 1069               	.L130:
 127:lp_solve_5.5/lp_crash.c ****       else if(fabs(lp->rhs[i]) < lp->infinite)
 1070               		.loc 1 127 0
 1071 0738 CE01      		movw r24,r28
 1072 073a 805B      		subi r24,-80
 1073 073c 9F4F      		sbci r25,-1
 1074 073e FC01      		movw r30,r24
 1075 0740 8081      		ld r24,Z
 1076 0742 9181      		ldd r25,Z+1
 1077 0744 8855      		subi r24,88
 1078 0746 9D4F      		sbci r25,-3
 1079 0748 FC01      		movw r30,r24
 1080 074a 2081      		ld r18,Z
 1081 074c 3181      		ldd r19,Z+1
 1082 074e 8981      		ldd r24,Y+1
 1083 0750 9A81      		ldd r25,Y+2
 1084 0752 880F      		lsl r24
 1085 0754 991F      		rol r25
 1086 0756 880F      		lsl r24
 1087 0758 991F      		rol r25
 1088 075a 820F      		add r24,r18
 1089 075c 931F      		adc r25,r19
 1090 075e FC01      		movw r30,r24
 1091 0760 8081      		ld r24,Z
 1092 0762 9181      		ldd r25,Z+1
 1093 0764 A281      		ldd r26,Z+2
 1094 0766 B381      		ldd r27,Z+3
 1095 0768 BF77      		andi r27,0x7f
 1096 076a 9E01      		movw r18,r28
 1097 076c 205B      		subi r18,-80
 1098 076e 3F4F      		sbci r19,-1
 1099 0770 F901      		movw r30,r18
 1100 0772 2081      		ld r18,Z
 1101 0774 3181      		ldd r19,Z+1
 1102 0776 265F      		subi r18,-10
 1103 0778 3C4F      		sbci r19,-4
 1104 077a F901      		movw r30,r18
 1105 077c 2081      		ld r18,Z
 1106 077e 3181      		ldd r19,Z+1
 1107 0780 4281      		ldd r20,Z+2
 1108 0782 5381      		ldd r21,Z+3
 1109 0784 BC01      		movw r22,r24
 1110 0786 CD01      		movw r24,r26
 1111 0788 0E94 0000 		call __ltsf2
 1112 078c 8823      		tst r24
 1113 078e 04F4      		brge .L131
 128:lp_solve_5.5/lp_crash.c ****         ii = 1;
 1114               		.loc 1 128 0
 1115 0790 81E0      		ldi r24,lo8(1)
 1116 0792 90E0      		ldi r25,0
 1117 0794 9D83      		std Y+5,r25
 1118 0796 8C83      		std Y+4,r24
 1119 0798 00C0      		rjmp .L31
 1120               	.L131:
 129:lp_solve_5.5/lp_crash.c ****       else
 130:lp_solve_5.5/lp_crash.c ****         ii = 0;
 1121               		.loc 1 130 0
 1122 079a 1D82      		std Y+5,__zero_reg__
 1123 079c 1C82      		std Y+4,__zero_reg__
 1124               	.L31:
 131:lp_solve_5.5/lp_crash.c ****       rowWT[i] = ii;
 1125               		.loc 1 131 0
 1126 079e CE01      		movw r24,r28
 1127 07a0 8E5B      		subi r24,-66
 1128 07a2 9F4F      		sbci r25,-1
 1129 07a4 FC01      		movw r30,r24
 1130 07a6 2081      		ld r18,Z
 1131 07a8 3181      		ldd r19,Z+1
 1132 07aa 8981      		ldd r24,Y+1
 1133 07ac 9A81      		ldd r25,Y+2
 1134 07ae 880F      		lsl r24
 1135 07b0 991F      		rol r25
 1136 07b2 820F      		add r24,r18
 1137 07b4 931F      		adc r25,r19
 1138 07b6 2C81      		ldd r18,Y+4
 1139 07b8 3D81      		ldd r19,Y+5
 1140 07ba FC01      		movw r30,r24
 1141 07bc 3183      		std Z+1,r19
 1142 07be 2083      		st Z,r18
 132:lp_solve_5.5/lp_crash.c ****       if(ii > 0)
 1143               		.loc 1 132 0
 1144 07c0 8C81      		ldd r24,Y+4
 1145 07c2 9D81      		ldd r25,Y+5
 1146 07c4 1816      		cp __zero_reg__,r24
 1147 07c6 1906      		cpc __zero_reg__,r25
 1148 07c8 04F4      		brge .L36
 133:lp_solve_5.5/lp_crash.c ****         appendLink(rowLL, i);
 1149               		.loc 1 133 0
 1150 07ca 8EA9      		ldd r24,Y+54
 1151 07cc 9FA9      		ldd r25,Y+55
 1152 07ce 2981      		ldd r18,Y+1
 1153 07d0 3A81      		ldd r19,Y+2
 1154 07d2 B901      		movw r22,r18
 1155 07d4 0E94 0000 		call appendLink
 1156               	.L36:
 122:lp_solve_5.5/lp_crash.c ****       if(get_constr_type(lp, i)==EQ)
 1157               		.loc 1 122 0 discriminator 2
 1158 07d8 8981      		ldd r24,Y+1
 1159 07da 9A81      		ldd r25,Y+2
 1160 07dc 0196      		adiw r24,1
 1161 07de 9A83      		std Y+2,r25
 1162 07e0 8983      		std Y+1,r24
 1163               	.L29:
 122:lp_solve_5.5/lp_crash.c ****       if(get_constr_type(lp, i)==EQ)
 1164               		.loc 1 122 0 is_stmt 0 discriminator 1
 1165 07e2 CE01      		movw r24,r28
 1166 07e4 805B      		subi r24,-80
 1167 07e6 9F4F      		sbci r25,-1
 1168 07e8 FC01      		movw r30,r24
 1169 07ea 8081      		ld r24,Z
 1170 07ec 9181      		ldd r25,Z+1
 1171 07ee 8651      		subi r24,22
 1172 07f0 9E4F      		sbci r25,-2
 1173 07f2 FC01      		movw r30,r24
 1174 07f4 2081      		ld r18,Z
 1175 07f6 3181      		ldd r19,Z+1
 1176 07f8 8981      		ldd r24,Y+1
 1177 07fa 9A81      		ldd r25,Y+2
 1178 07fc 2817      		cp r18,r24
 1179 07fe 3907      		cpc r19,r25
 1180 0800 04F0      		brlt .+2
 1181 0802 00C0      		rjmp .L37
 134:lp_solve_5.5/lp_crash.c ****     }
 135:lp_solve_5.5/lp_crash.c ****     ok = allocINT(lp, &colWT, lp->columns+1, TRUE);
 1182               		.loc 1 135 0 is_stmt 1
 1183 0804 CE01      		movw r24,r28
 1184 0806 805B      		subi r24,-80
 1185 0808 9F4F      		sbci r25,-1
 1186 080a FC01      		movw r30,r24
 1187 080c 8081      		ld r24,Z
 1188 080e 9181      		ldd r25,Z+1
 1189 0810 8451      		subi r24,20
 1190 0812 9E4F      		sbci r25,-2
 1191 0814 FC01      		movw r30,r24
 1192 0816 8081      		ld r24,Z
 1193 0818 9181      		ldd r25,Z+1
 1194 081a AC01      		movw r20,r24
 1195 081c 4F5F      		subi r20,-1
 1196 081e 5F4F      		sbci r21,-1
 1197 0820 BE01      		movw r22,r28
 1198 0822 6C5B      		subi r22,-68
 1199 0824 7F4F      		sbci r23,-1
 1200 0826 CE01      		movw r24,r28
 1201 0828 805B      		subi r24,-80
 1202 082a 9F4F      		sbci r25,-1
 1203 082c FC01      		movw r30,r24
 1204 082e 8081      		ld r24,Z
 1205 0830 9181      		ldd r25,Z+1
 1206 0832 21E0      		ldi r18,lo8(1)
 1207 0834 0E94 0000 		call allocINT
 1208 0838 8B83      		std Y+3,r24
 136:lp_solve_5.5/lp_crash.c ****     createLink(lp->columns, &colLL, NULL);
 1209               		.loc 1 136 0
 1210 083a CE01      		movw r24,r28
 1211 083c 805B      		subi r24,-80
 1212 083e 9F4F      		sbci r25,-1
 1213 0840 FC01      		movw r30,r24
 1214 0842 8081      		ld r24,Z
 1215 0844 9181      		ldd r25,Z+1
 1216 0846 8451      		subi r24,20
 1217 0848 9E4F      		sbci r25,-2
 1218 084a FC01      		movw r30,r24
 1219 084c 8081      		ld r24,Z
 1220 084e 9181      		ldd r25,Z+1
 1221 0850 9E01      		movw r18,r28
 1222 0852 285C      		subi r18,-56
 1223 0854 3F4F      		sbci r19,-1
 1224 0856 40E0      		ldi r20,0
 1225 0858 50E0      		ldi r21,0
 1226 085a B901      		movw r22,r18
 1227 085c 0E94 0000 		call createLink
 137:lp_solve_5.5/lp_crash.c ****     ok &= (colLL != NULL);
 1228               		.loc 1 137 0
 1229 0860 88AD      		ldd r24,Y+56
 1230 0862 99AD      		ldd r25,Y+57
 1231 0864 21E0      		ldi r18,lo8(1)
 1232 0866 892B      		or r24,r25
 1233 0868 01F4      		brne .L38
 1234 086a 20E0      		ldi r18,0
 1235               	.L38:
 1236 086c 922F      		mov r25,r18
 1237 086e 8B81      		ldd r24,Y+3
 1238 0870 8923      		and r24,r25
 1239 0872 8B83      		std Y+3,r24
 138:lp_solve_5.5/lp_crash.c ****     if(!ok)
 1240               		.loc 1 138 0
 1241 0874 8B81      		ldd r24,Y+3
 1242 0876 8823      		tst r24
 1243 0878 01F4      		brne .+2
 1244 087a 00C0      		rjmp .L138
 139:lp_solve_5.5/lp_crash.c ****       goto Finish;
 140:lp_solve_5.5/lp_crash.c ****     for(i = 1; i <= lp->columns; i++) {
 1245               		.loc 1 140 0
 1246 087c 81E0      		ldi r24,lo8(1)
 1247 087e 90E0      		ldi r25,0
 1248 0880 9A83      		std Y+2,r25
 1249 0882 8983      		std Y+1,r24
 1250 0884 00C0      		rjmp .L40
 1251               	.L48:
 141:lp_solve_5.5/lp_crash.c ****       ix = lp->rows+i;
 1252               		.loc 1 141 0
 1253 0886 CE01      		movw r24,r28
 1254 0888 805B      		subi r24,-80
 1255 088a 9F4F      		sbci r25,-1
 1256 088c FC01      		movw r30,r24
 1257 088e 8081      		ld r24,Z
 1258 0890 9181      		ldd r25,Z+1
 1259 0892 8651      		subi r24,22
 1260 0894 9E4F      		sbci r25,-2
 1261 0896 FC01      		movw r30,r24
 1262 0898 2081      		ld r18,Z
 1263 089a 3181      		ldd r19,Z+1
 1264 089c 8981      		ldd r24,Y+1
 1265 089e 9A81      		ldd r25,Y+2
 1266 08a0 820F      		add r24,r18
 1267 08a2 931F      		adc r25,r19
 1268 08a4 99A7      		std Y+41,r25
 1269 08a6 88A7      		std Y+40,r24
 142:lp_solve_5.5/lp_crash.c ****       if(is_unbounded(lp, i))
 1270               		.loc 1 142 0
 1271 08a8 2981      		ldd r18,Y+1
 1272 08aa 3A81      		ldd r19,Y+2
 1273 08ac CE01      		movw r24,r28
 1274 08ae 805B      		subi r24,-80
 1275 08b0 9F4F      		sbci r25,-1
 1276 08b2 FC01      		movw r30,r24
 1277 08b4 8081      		ld r24,Z
 1278 08b6 9181      		ldd r25,Z+1
 1279 08b8 B901      		movw r22,r18
 1280 08ba 0E94 0000 		call is_unbounded
 1281 08be 8823      		tst r24
 1282 08c0 01F0      		breq .L41
 143:lp_solve_5.5/lp_crash.c ****         ii = 3;
 1283               		.loc 1 143 0
 1284 08c2 83E0      		ldi r24,lo8(3)
 1285 08c4 90E0      		ldi r25,0
 1286 08c6 9D83      		std Y+5,r25
 1287 08c8 8C83      		std Y+4,r24
 1288 08ca 00C0      		rjmp .L42
 1289               	.L41:
 144:lp_solve_5.5/lp_crash.c ****       else if(lp->upbo[ix] >= lp->infinite)
 1290               		.loc 1 144 0
 1291 08cc CE01      		movw r24,r28
 1292 08ce 805B      		subi r24,-80
 1293 08d0 9F4F      		sbci r25,-1
 1294 08d2 FC01      		movw r30,r24
 1295 08d4 8081      		ld r24,Z
 1296 08d6 9181      		ldd r25,Z+1
 1297 08d8 8055      		subi r24,80
 1298 08da 9D4F      		sbci r25,-3
 1299 08dc FC01      		movw r30,r24
 1300 08de 2081      		ld r18,Z
 1301 08e0 3181      		ldd r19,Z+1
 1302 08e2 88A5      		ldd r24,Y+40
 1303 08e4 99A5      		ldd r25,Y+41
 1304 08e6 880F      		lsl r24
 1305 08e8 991F      		rol r25
 1306 08ea 880F      		lsl r24
 1307 08ec 991F      		rol r25
 1308 08ee 820F      		add r24,r18
 1309 08f0 931F      		adc r25,r19
 1310 08f2 FC01      		movw r30,r24
 1311 08f4 8081      		ld r24,Z
 1312 08f6 9181      		ldd r25,Z+1
 1313 08f8 A281      		ldd r26,Z+2
 1314 08fa B381      		ldd r27,Z+3
 1315 08fc 9E01      		movw r18,r28
 1316 08fe 205B      		subi r18,-80
 1317 0900 3F4F      		sbci r19,-1
 1318 0902 F901      		movw r30,r18
 1319 0904 2081      		ld r18,Z
 1320 0906 3181      		ldd r19,Z+1
 1321 0908 265F      		subi r18,-10
 1322 090a 3C4F      		sbci r19,-4
 1323 090c F901      		movw r30,r18
 1324 090e 2081      		ld r18,Z
 1325 0910 3181      		ldd r19,Z+1
 1326 0912 4281      		ldd r20,Z+2
 1327 0914 5381      		ldd r21,Z+3
 1328 0916 BC01      		movw r22,r24
 1329 0918 CD01      		movw r24,r26
 1330 091a 0E94 0000 		call __gesf2
 1331 091e 8823      		tst r24
 1332 0920 04F0      		brlt .L132
 145:lp_solve_5.5/lp_crash.c ****         ii = 2;
 1333               		.loc 1 145 0
 1334 0922 82E0      		ldi r24,lo8(2)
 1335 0924 90E0      		ldi r25,0
 1336 0926 9D83      		std Y+5,r25
 1337 0928 8C83      		std Y+4,r24
 1338 092a 00C0      		rjmp .L42
 1339               	.L132:
 146:lp_solve_5.5/lp_crash.c ****       else if(fabs(lp->upbo[ix]-lp->lowbo[ix]) > lp->epsmachine)
 1340               		.loc 1 146 0
 1341 092c CE01      		movw r24,r28
 1342 092e 805B      		subi r24,-80
 1343 0930 9F4F      		sbci r25,-1
 1344 0932 FC01      		movw r30,r24
 1345 0934 8081      		ld r24,Z
 1346 0936 9181      		ldd r25,Z+1
 1347 0938 8055      		subi r24,80
 1348 093a 9D4F      		sbci r25,-3
 1349 093c FC01      		movw r30,r24
 1350 093e 2081      		ld r18,Z
 1351 0940 3181      		ldd r19,Z+1
 1352 0942 88A5      		ldd r24,Y+40
 1353 0944 99A5      		ldd r25,Y+41
 1354 0946 880F      		lsl r24
 1355 0948 991F      		rol r25
 1356 094a 880F      		lsl r24
 1357 094c 991F      		rol r25
 1358 094e 820F      		add r24,r18
 1359 0950 931F      		adc r25,r19
 1360 0952 FC01      		movw r30,r24
 1361 0954 8081      		ld r24,Z
 1362 0956 9181      		ldd r25,Z+1
 1363 0958 A281      		ldd r26,Z+2
 1364 095a B381      		ldd r27,Z+3
 1365 095c 9E01      		movw r18,r28
 1366 095e 205B      		subi r18,-80
 1367 0960 3F4F      		sbci r19,-1
 1368 0962 F901      		movw r30,r18
 1369 0964 2081      		ld r18,Z
 1370 0966 3181      		ldd r19,Z+1
 1371 0968 2C54      		subi r18,76
 1372 096a 3D4F      		sbci r19,-3
 1373 096c F901      		movw r30,r18
 1374 096e 4081      		ld r20,Z
 1375 0970 5181      		ldd r21,Z+1
 1376 0972 28A5      		ldd r18,Y+40
 1377 0974 39A5      		ldd r19,Y+41
 1378 0976 220F      		lsl r18
 1379 0978 331F      		rol r19
 1380 097a 220F      		lsl r18
 1381 097c 331F      		rol r19
 1382 097e 240F      		add r18,r20
 1383 0980 351F      		adc r19,r21
 1384 0982 F901      		movw r30,r18
 1385 0984 2081      		ld r18,Z
 1386 0986 3181      		ldd r19,Z+1
 1387 0988 4281      		ldd r20,Z+2
 1388 098a 5381      		ldd r21,Z+3
 1389 098c BC01      		movw r22,r24
 1390 098e CD01      		movw r24,r26
 1391 0990 0E94 0000 		call __subsf3
 1392 0994 DC01      		movw r26,r24
 1393 0996 CB01      		movw r24,r22
 1394 0998 BF77      		andi r27,0x7f
 1395 099a 9E01      		movw r18,r28
 1396 099c 205B      		subi r18,-80
 1397 099e 3F4F      		sbci r19,-1
 1398 09a0 F901      		movw r30,r18
 1399 09a2 2081      		ld r18,Z
 1400 09a4 3181      		ldd r19,Z+1
 1401 09a6 2E5E      		subi r18,-18
 1402 09a8 3C4F      		sbci r19,-4
 1403 09aa F901      		movw r30,r18
 1404 09ac 2081      		ld r18,Z
 1405 09ae 3181      		ldd r19,Z+1
 1406 09b0 4281      		ldd r20,Z+2
 1407 09b2 5381      		ldd r21,Z+3
 1408 09b4 BC01      		movw r22,r24
 1409 09b6 CD01      		movw r24,r26
 1410 09b8 0E94 0000 		call __gtsf2
 1411 09bc 1816      		cp __zero_reg__,r24
 1412 09be 04F4      		brge .L133
 147:lp_solve_5.5/lp_crash.c ****         ii = 1;
 1413               		.loc 1 147 0
 1414 09c0 81E0      		ldi r24,lo8(1)
 1415 09c2 90E0      		ldi r25,0
 1416 09c4 9D83      		std Y+5,r25
 1417 09c6 8C83      		std Y+4,r24
 1418 09c8 00C0      		rjmp .L42
 1419               	.L133:
 148:lp_solve_5.5/lp_crash.c ****       else
 149:lp_solve_5.5/lp_crash.c ****         ii = 0;
 1420               		.loc 1 149 0
 1421 09ca 1D82      		std Y+5,__zero_reg__
 1422 09cc 1C82      		std Y+4,__zero_reg__
 1423               	.L42:
 150:lp_solve_5.5/lp_crash.c ****       colWT[i] = ii;
 1424               		.loc 1 150 0
 1425 09ce CE01      		movw r24,r28
 1426 09d0 8C5B      		subi r24,-68
 1427 09d2 9F4F      		sbci r25,-1
 1428 09d4 FC01      		movw r30,r24
 1429 09d6 2081      		ld r18,Z
 1430 09d8 3181      		ldd r19,Z+1
 1431 09da 8981      		ldd r24,Y+1
 1432 09dc 9A81      		ldd r25,Y+2
 1433 09de 880F      		lsl r24
 1434 09e0 991F      		rol r25
 1435 09e2 820F      		add r24,r18
 1436 09e4 931F      		adc r25,r19
 1437 09e6 2C81      		ldd r18,Y+4
 1438 09e8 3D81      		ldd r19,Y+5
 1439 09ea FC01      		movw r30,r24
 1440 09ec 3183      		std Z+1,r19
 1441 09ee 2083      		st Z,r18
 151:lp_solve_5.5/lp_crash.c ****       if(ii > 0)
 1442               		.loc 1 151 0
 1443 09f0 8C81      		ldd r24,Y+4
 1444 09f2 9D81      		ldd r25,Y+5
 1445 09f4 1816      		cp __zero_reg__,r24
 1446 09f6 1906      		cpc __zero_reg__,r25
 1447 09f8 04F4      		brge .L47
 152:lp_solve_5.5/lp_crash.c ****         appendLink(colLL, i);
 1448               		.loc 1 152 0
 1449 09fa 88AD      		ldd r24,Y+56
 1450 09fc 99AD      		ldd r25,Y+57
 1451 09fe 2981      		ldd r18,Y+1
 1452 0a00 3A81      		ldd r19,Y+2
 1453 0a02 B901      		movw r22,r18
 1454 0a04 0E94 0000 		call appendLink
 1455               	.L47:
 140:lp_solve_5.5/lp_crash.c ****       ix = lp->rows+i;
 1456               		.loc 1 140 0 discriminator 2
 1457 0a08 8981      		ldd r24,Y+1
 1458 0a0a 9A81      		ldd r25,Y+2
 1459 0a0c 0196      		adiw r24,1
 1460 0a0e 9A83      		std Y+2,r25
 1461 0a10 8983      		std Y+1,r24
 1462               	.L40:
 140:lp_solve_5.5/lp_crash.c ****       ix = lp->rows+i;
 1463               		.loc 1 140 0 is_stmt 0 discriminator 1
 1464 0a12 CE01      		movw r24,r28
 1465 0a14 805B      		subi r24,-80
 1466 0a16 9F4F      		sbci r25,-1
 1467 0a18 FC01      		movw r30,r24
 1468 0a1a 8081      		ld r24,Z
 1469 0a1c 9181      		ldd r25,Z+1
 1470 0a1e 8451      		subi r24,20
 1471 0a20 9E4F      		sbci r25,-2
 1472 0a22 FC01      		movw r30,r24
 1473 0a24 2081      		ld r18,Z
 1474 0a26 3181      		ldd r19,Z+1
 1475 0a28 8981      		ldd r24,Y+1
 1476 0a2a 9A81      		ldd r25,Y+2
 1477 0a2c 2817      		cp r18,r24
 1478 0a2e 3907      		cpc r19,r25
 1479 0a30 04F0      		brlt .+2
 1480 0a32 00C0      		rjmp .L48
 153:lp_solve_5.5/lp_crash.c ****     }
 154:lp_solve_5.5/lp_crash.c **** 
 155:lp_solve_5.5/lp_crash.c ****     /* Loop over all basis variables */
 156:lp_solve_5.5/lp_crash.c ****     for(i = 1; i <= lp->rows; i++) {
 1481               		.loc 1 156 0 is_stmt 1
 1482 0a34 81E0      		ldi r24,lo8(1)
 1483 0a36 90E0      		ldi r25,0
 1484 0a38 9A83      		std Y+2,r25
 1485 0a3a 8983      		std Y+1,r24
 1486 0a3c 00C0      		rjmp .L49
 1487               	.L75:
 157:lp_solve_5.5/lp_crash.c **** 
 158:lp_solve_5.5/lp_crash.c ****       /* Select row */
 159:lp_solve_5.5/lp_crash.c ****       rx = 0;
 1488               		.loc 1 159 0
 1489 0a3e 1F82      		std Y+7,__zero_reg__
 1490 0a40 1E82      		std Y+6,__zero_reg__
 160:lp_solve_5.5/lp_crash.c ****       wx = -lp->infinite;
 1491               		.loc 1 160 0
 1492 0a42 CE01      		movw r24,r28
 1493 0a44 805B      		subi r24,-80
 1494 0a46 9F4F      		sbci r25,-1
 1495 0a48 FC01      		movw r30,r24
 1496 0a4a 8081      		ld r24,Z
 1497 0a4c 9181      		ldd r25,Z+1
 1498 0a4e 865F      		subi r24,-10
 1499 0a50 9C4F      		sbci r25,-4
 1500 0a52 FC01      		movw r30,r24
 1501 0a54 8081      		ld r24,Z
 1502 0a56 9181      		ldd r25,Z+1
 1503 0a58 A281      		ldd r26,Z+2
 1504 0a5a B381      		ldd r27,Z+3
 1505 0a5c B058      		subi r27,0x80
 1506 0a5e 8A87      		std Y+10,r24
 1507 0a60 9B87      		std Y+11,r25
 1508 0a62 AC87      		std Y+12,r26
 1509 0a64 BD87      		std Y+13,r27
 161:lp_solve_5.5/lp_crash.c ****       for(ii = firstActiveLink(rowLL); ii > 0; ii = nextActiveLink(rowLL, ii)) {
 1510               		.loc 1 161 0
 1511 0a66 8EA9      		ldd r24,Y+54
 1512 0a68 9FA9      		ldd r25,Y+55
 1513 0a6a 0E94 0000 		call firstActiveLink
 1514 0a6e 9D83      		std Y+5,r25
 1515 0a70 8C83      		std Y+4,r24
 1516 0a72 00C0      		rjmp .L50
 1517               	.L53:
 162:lp_solve_5.5/lp_crash.c ****         tx = rowWT[ii] - CRASH_SPACER*rowNZ[ii];
 1518               		.loc 1 162 0
 1519 0a74 CE01      		movw r24,r28
 1520 0a76 8E5B      		subi r24,-66
 1521 0a78 9F4F      		sbci r25,-1
 1522 0a7a FC01      		movw r30,r24
 1523 0a7c 2081      		ld r18,Z
 1524 0a7e 3181      		ldd r19,Z+1
 1525 0a80 8C81      		ldd r24,Y+4
 1526 0a82 9D81      		ldd r25,Y+5
 1527 0a84 880F      		lsl r24
 1528 0a86 991F      		rol r25
 1529 0a88 820F      		add r24,r18
 1530 0a8a 931F      		adc r25,r19
 1531 0a8c FC01      		movw r30,r24
 1532 0a8e 2081      		ld r18,Z
 1533 0a90 3181      		ldd r19,Z+1
 1534 0a92 4EAD      		ldd r20,Y+62
 1535 0a94 5FAD      		ldd r21,Y+63
 1536 0a96 8C81      		ldd r24,Y+4
 1537 0a98 9D81      		ldd r25,Y+5
 1538 0a9a 880F      		lsl r24
 1539 0a9c 991F      		rol r25
 1540 0a9e 840F      		add r24,r20
 1541 0aa0 951F      		adc r25,r21
 1542 0aa2 FC01      		movw r30,r24
 1543 0aa4 4081      		ld r20,Z
 1544 0aa6 5181      		ldd r21,Z+1
 1545 0aa8 66EF      		ldi r22,lo8(-10)
 1546 0aaa 6403      		mulsu r22,r20
 1547 0aac C001      		movw r24,r0
 1548 0aae 659F      		mul r22,r21
 1549 0ab0 900D      		add r25,r0
 1550 0ab2 1124      		clr __zero_reg__
 1551 0ab4 820F      		add r24,r18
 1552 0ab6 931F      		adc r25,r19
 1553 0ab8 092E      		mov __tmp_reg__,r25
 1554 0aba 000C      		lsl r0
 1555 0abc AA0B      		sbc r26,r26
 1556 0abe BB0B      		sbc r27,r27
 1557 0ac0 BC01      		movw r22,r24
 1558 0ac2 CD01      		movw r24,r26
 1559 0ac4 0E94 0000 		call __floatsisf
 1560 0ac8 DC01      		movw r26,r24
 1561 0aca CB01      		movw r24,r22
 1562 0acc 8AA7      		std Y+42,r24
 1563 0ace 9BA7      		std Y+43,r25
 1564 0ad0 ACA7      		std Y+44,r26
 1565 0ad2 BDA7      		std Y+45,r27
 163:lp_solve_5.5/lp_crash.c ****         if(tx > wx) {
 1566               		.loc 1 163 0
 1567 0ad4 2A85      		ldd r18,Y+10
 1568 0ad6 3B85      		ldd r19,Y+11
 1569 0ad8 4C85      		ldd r20,Y+12
 1570 0ada 5D85      		ldd r21,Y+13
 1571 0adc 6AA5      		ldd r22,Y+42
 1572 0ade 7BA5      		ldd r23,Y+43
 1573 0ae0 8CA5      		ldd r24,Y+44
 1574 0ae2 9DA5      		ldd r25,Y+45
 1575 0ae4 0E94 0000 		call __gtsf2
 1576 0ae8 1816      		cp __zero_reg__,r24
 1577 0aea 04F4      		brge .L51
 164:lp_solve_5.5/lp_crash.c ****           rx = ii;
 1578               		.loc 1 164 0
 1579 0aec 8C81      		ldd r24,Y+4
 1580 0aee 9D81      		ldd r25,Y+5
 1581 0af0 9F83      		std Y+7,r25
 1582 0af2 8E83      		std Y+6,r24
 165:lp_solve_5.5/lp_crash.c ****           wx = tx;
 1583               		.loc 1 165 0
 1584 0af4 8AA5      		ldd r24,Y+42
 1585 0af6 9BA5      		ldd r25,Y+43
 1586 0af8 ACA5      		ldd r26,Y+44
 1587 0afa BDA5      		ldd r27,Y+45
 1588 0afc 8A87      		std Y+10,r24
 1589 0afe 9B87      		std Y+11,r25
 1590 0b00 AC87      		std Y+12,r26
 1591 0b02 BD87      		std Y+13,r27
 1592               	.L51:
 161:lp_solve_5.5/lp_crash.c ****         tx = rowWT[ii] - CRASH_SPACER*rowNZ[ii];
 1593               		.loc 1 161 0 discriminator 2
 1594 0b04 8EA9      		ldd r24,Y+54
 1595 0b06 9FA9      		ldd r25,Y+55
 1596 0b08 2C81      		ldd r18,Y+4
 1597 0b0a 3D81      		ldd r19,Y+5
 1598 0b0c B901      		movw r22,r18
 1599 0b0e 0E94 0000 		call nextActiveLink
 1600 0b12 9D83      		std Y+5,r25
 1601 0b14 8C83      		std Y+4,r24
 1602               	.L50:
 161:lp_solve_5.5/lp_crash.c ****         tx = rowWT[ii] - CRASH_SPACER*rowNZ[ii];
 1603               		.loc 1 161 0 is_stmt 0 discriminator 1
 1604 0b16 8C81      		ldd r24,Y+4
 1605 0b18 9D81      		ldd r25,Y+5
 1606 0b1a 1816      		cp __zero_reg__,r24
 1607 0b1c 1906      		cpc __zero_reg__,r25
 1608 0b1e 04F4      		brge .+2
 1609 0b20 00C0      		rjmp .L53
 166:lp_solve_5.5/lp_crash.c ****         }
 167:lp_solve_5.5/lp_crash.c ****       }
 168:lp_solve_5.5/lp_crash.c ****       if(rx == 0)
 1610               		.loc 1 168 0 is_stmt 1
 1611 0b22 8E81      		ldd r24,Y+6
 1612 0b24 9F81      		ldd r25,Y+7
 1613 0b26 892B      		or r24,r25
 1614 0b28 01F4      		brne .+2
 1615 0b2a 00C0      		rjmp .L139
 169:lp_solve_5.5/lp_crash.c ****         break;
 170:lp_solve_5.5/lp_crash.c ****       removeLink(rowLL, rx);
 1616               		.loc 1 170 0
 1617 0b2c 8EA9      		ldd r24,Y+54
 1618 0b2e 9FA9      		ldd r25,Y+55
 1619 0b30 2E81      		ldd r18,Y+6
 1620 0b32 3F81      		ldd r19,Y+7
 1621 0b34 B901      		movw r22,r18
 1622 0b36 0E94 0000 		call removeLink
 171:lp_solve_5.5/lp_crash.c **** 
 172:lp_solve_5.5/lp_crash.c ****       /* Select column */
 173:lp_solve_5.5/lp_crash.c ****       cx = 0;
 1623               		.loc 1 173 0
 1624 0b3a 1986      		std Y+9,__zero_reg__
 1625 0b3c 1886      		std Y+8,__zero_reg__
 174:lp_solve_5.5/lp_crash.c ****       wx = -lp->infinite;
 1626               		.loc 1 174 0
 1627 0b3e CE01      		movw r24,r28
 1628 0b40 805B      		subi r24,-80
 1629 0b42 9F4F      		sbci r25,-1
 1630 0b44 FC01      		movw r30,r24
 1631 0b46 8081      		ld r24,Z
 1632 0b48 9181      		ldd r25,Z+1
 1633 0b4a 865F      		subi r24,-10
 1634 0b4c 9C4F      		sbci r25,-4
 1635 0b4e FC01      		movw r30,r24
 1636 0b50 8081      		ld r24,Z
 1637 0b52 9181      		ldd r25,Z+1
 1638 0b54 A281      		ldd r26,Z+2
 1639 0b56 B381      		ldd r27,Z+3
 1640 0b58 B058      		subi r27,0x80
 1641 0b5a 8A87      		std Y+10,r24
 1642 0b5c 9B87      		std Y+11,r25
 1643 0b5e AC87      		std Y+12,r26
 1644 0b60 BD87      		std Y+13,r27
 175:lp_solve_5.5/lp_crash.c ****       for(ii = mat->row_end[rx-1]; ii < mat->row_end[rx]; ii++) {
 1645               		.loc 1 175 0
 1646 0b62 8CA1      		ldd r24,Y+36
 1647 0b64 9DA1      		ldd r25,Y+37
 1648 0b66 FC01      		movw r30,r24
 1649 0b68 208D      		ldd r18,Z+24
 1650 0b6a 318D      		ldd r19,Z+25
 1651 0b6c 8E81      		ldd r24,Y+6
 1652 0b6e 9F81      		ldd r25,Y+7
 1653 0b70 8150      		subi r24,1
 1654 0b72 9048      		sbci r25,-128
 1655 0b74 880F      		lsl r24
 1656 0b76 991F      		rol r25
 1657 0b78 820F      		add r24,r18
 1658 0b7a 931F      		adc r25,r19
 1659 0b7c FC01      		movw r30,r24
 1660 0b7e 8081      		ld r24,Z
 1661 0b80 9181      		ldd r25,Z+1
 1662 0b82 9D83      		std Y+5,r25
 1663 0b84 8C83      		std Y+4,r24
 1664 0b86 00C0      		rjmp .L55
 1665               	.L69:
 176:lp_solve_5.5/lp_crash.c **** 
 177:lp_solve_5.5/lp_crash.c ****         /* Update NZ column counts for row selected above */
 178:lp_solve_5.5/lp_crash.c ****         tx = fabs(ROW_MAT_VALUE(ii));
 1666               		.loc 1 178 0
 1667 0b88 8CA1      		ldd r24,Y+36
 1668 0b8a 9DA1      		ldd r25,Y+37
 1669 0b8c FC01      		movw r30,r24
 1670 0b8e 2089      		ldd r18,Z+16
 1671 0b90 3189      		ldd r19,Z+17
 1672 0b92 8CA1      		ldd r24,Y+36
 1673 0b94 9DA1      		ldd r25,Y+37
 1674 0b96 FC01      		movw r30,r24
 1675 0b98 4689      		ldd r20,Z+22
 1676 0b9a 5789      		ldd r21,Z+23
 1677 0b9c 8C81      		ldd r24,Y+4
 1678 0b9e 9D81      		ldd r25,Y+5
 1679 0ba0 880F      		lsl r24
 1680 0ba2 991F      		rol r25
 1681 0ba4 840F      		add r24,r20
 1682 0ba6 951F      		adc r25,r21
 1683 0ba8 FC01      		movw r30,r24
 1684 0baa 8081      		ld r24,Z
 1685 0bac 9181      		ldd r25,Z+1
 1686 0bae 880F      		lsl r24
 1687 0bb0 991F      		rol r25
 1688 0bb2 880F      		lsl r24
 1689 0bb4 991F      		rol r25
 1690 0bb6 820F      		add r24,r18
 1691 0bb8 931F      		adc r25,r19
 1692 0bba FC01      		movw r30,r24
 1693 0bbc 8081      		ld r24,Z
 1694 0bbe 9181      		ldd r25,Z+1
 1695 0bc0 A281      		ldd r26,Z+2
 1696 0bc2 B381      		ldd r27,Z+3
 1697 0bc4 BF77      		andi r27,0x7f
 1698 0bc6 8AA7      		std Y+42,r24
 1699 0bc8 9BA7      		std Y+43,r25
 1700 0bca ACA7      		std Y+44,r26
 1701 0bcc BDA7      		std Y+45,r27
 179:lp_solve_5.5/lp_crash.c ****         ix = ROW_MAT_COLNR(ii);
 1702               		.loc 1 179 0
 1703 0bce 8CA1      		ldd r24,Y+36
 1704 0bd0 9DA1      		ldd r25,Y+37
 1705 0bd2 FC01      		movw r30,r24
 1706 0bd4 2485      		ldd r18,Z+12
 1707 0bd6 3585      		ldd r19,Z+13
 1708 0bd8 8CA1      		ldd r24,Y+36
 1709 0bda 9DA1      		ldd r25,Y+37
 1710 0bdc FC01      		movw r30,r24
 1711 0bde 4689      		ldd r20,Z+22
 1712 0be0 5789      		ldd r21,Z+23
 1713 0be2 8C81      		ldd r24,Y+4
 1714 0be4 9D81      		ldd r25,Y+5
 1715 0be6 880F      		lsl r24
 1716 0be8 991F      		rol r25
 1717 0bea 840F      		add r24,r20
 1718 0bec 951F      		adc r25,r21
 1719 0bee FC01      		movw r30,r24
 1720 0bf0 8081      		ld r24,Z
 1721 0bf2 9181      		ldd r25,Z+1
 1722 0bf4 880F      		lsl r24
 1723 0bf6 991F      		rol r25
 1724 0bf8 820F      		add r24,r18
 1725 0bfa 931F      		adc r25,r19
 1726 0bfc FC01      		movw r30,r24
 1727 0bfe 8081      		ld r24,Z
 1728 0c00 9181      		ldd r25,Z+1
 1729 0c02 99A7      		std Y+41,r25
 1730 0c04 88A7      		std Y+40,r24
 180:lp_solve_5.5/lp_crash.c **** #ifdef CRASH_SIMPLESCALE
 181:lp_solve_5.5/lp_crash.c ****         if(tx >= CRASH_THRESHOLD * colMAX[0])
 1731               		.loc 1 181 0
 1732 0c06 8CAD      		ldd r24,Y+60
 1733 0c08 9DAD      		ldd r25,Y+61
 1734 0c0a FC01      		movw r30,r24
 1735 0c0c 8081      		ld r24,Z
 1736 0c0e 9181      		ldd r25,Z+1
 1737 0c10 A281      		ldd r26,Z+2
 1738 0c12 B381      		ldd r27,Z+3
 1739 0c14 2CE0      		ldi r18,lo8(12)
 1740 0c16 32E0      		ldi r19,lo8(2)
 1741 0c18 4BE2      		ldi r20,lo8(43)
 1742 0c1a 5EE3      		ldi r21,lo8(62)
 1743 0c1c BC01      		movw r22,r24
 1744 0c1e CD01      		movw r24,r26
 1745 0c20 0E94 0000 		call __mulsf3
 1746 0c24 DC01      		movw r26,r24
 1747 0c26 CB01      		movw r24,r22
 1748 0c28 2AA5      		ldd r18,Y+42
 1749 0c2a 3BA5      		ldd r19,Y+43
 1750 0c2c 4CA5      		ldd r20,Y+44
 1751 0c2e 5DA5      		ldd r21,Y+45
 1752 0c30 BC01      		movw r22,r24
 1753 0c32 CD01      		movw r24,r26
 1754 0c34 0E94 0000 		call __lesf2
 1755 0c38 1816      		cp __zero_reg__,r24
 1756 0c3a 04F0      		brlt .L56
 182:lp_solve_5.5/lp_crash.c **** #else
 183:lp_solve_5.5/lp_crash.c ****         if(tx >= CRASH_THRESHOLD * colMAX[ix])
 184:lp_solve_5.5/lp_crash.c **** #endif
 185:lp_solve_5.5/lp_crash.c ****           colNZ[ix]--;
 1757               		.loc 1 185 0
 1758 0c3c CE01      		movw r24,r28
 1759 0c3e 805C      		subi r24,-64
 1760 0c40 9F4F      		sbci r25,-1
 1761 0c42 FC01      		movw r30,r24
 1762 0c44 2081      		ld r18,Z
 1763 0c46 3181      		ldd r19,Z+1
 1764 0c48 88A5      		ldd r24,Y+40
 1765 0c4a 99A5      		ldd r25,Y+41
 1766 0c4c 880F      		lsl r24
 1767 0c4e 991F      		rol r25
 1768 0c50 820F      		add r24,r18
 1769 0c52 931F      		adc r25,r19
 1770 0c54 FC01      		movw r30,r24
 1771 0c56 2081      		ld r18,Z
 1772 0c58 3181      		ldd r19,Z+1
 1773 0c5a 2150      		subi r18,1
 1774 0c5c 3109      		sbc r19,__zero_reg__
 1775 0c5e FC01      		movw r30,r24
 1776 0c60 3183      		std Z+1,r19
 1777 0c62 2083      		st Z,r18
 1778               	.L56:
 186:lp_solve_5.5/lp_crash.c ****         if(!isActiveLink(colLL, ix) || (tx < CRASH_THRESHOLD * rowMAX[rx]))
 1779               		.loc 1 186 0
 1780 0c64 88AD      		ldd r24,Y+56
 1781 0c66 99AD      		ldd r25,Y+57
 1782 0c68 28A5      		ldd r18,Y+40
 1783 0c6a 39A5      		ldd r19,Y+41
 1784 0c6c B901      		movw r22,r18
 1785 0c6e 0E94 0000 		call isActiveLink
 1786 0c72 8823      		tst r24
 1787 0c74 01F4      		brne .+2
 1788 0c76 00C0      		rjmp .L140
 1789               		.loc 1 186 0 is_stmt 0 discriminator 1
 1790 0c78 2AAD      		ldd r18,Y+58
 1791 0c7a 3BAD      		ldd r19,Y+59
 1792 0c7c 8E81      		ldd r24,Y+6
 1793 0c7e 9F81      		ldd r25,Y+7
 1794 0c80 880F      		lsl r24
 1795 0c82 991F      		rol r25
 1796 0c84 880F      		lsl r24
 1797 0c86 991F      		rol r25
 1798 0c88 820F      		add r24,r18
 1799 0c8a 931F      		adc r25,r19
 1800 0c8c FC01      		movw r30,r24
 1801 0c8e 8081      		ld r24,Z
 1802 0c90 9181      		ldd r25,Z+1
 1803 0c92 A281      		ldd r26,Z+2
 1804 0c94 B381      		ldd r27,Z+3
 1805 0c96 2CE0      		ldi r18,lo8(12)
 1806 0c98 32E0      		ldi r19,lo8(2)
 1807 0c9a 4BE2      		ldi r20,lo8(43)
 1808 0c9c 5EE3      		ldi r21,lo8(62)
 1809 0c9e BC01      		movw r22,r24
 1810 0ca0 CD01      		movw r24,r26
 1811 0ca2 0E94 0000 		call __mulsf3
 1812 0ca6 DC01      		movw r26,r24
 1813 0ca8 CB01      		movw r24,r22
 1814 0caa 2AA5      		ldd r18,Y+42
 1815 0cac 3BA5      		ldd r19,Y+43
 1816 0cae 4CA5      		ldd r20,Y+44
 1817 0cb0 5DA5      		ldd r21,Y+45
 1818 0cb2 BC01      		movw r22,r24
 1819 0cb4 CD01      		movw r24,r26
 1820 0cb6 0E94 0000 		call __gtsf2
 1821 0cba 1816      		cp __zero_reg__,r24
 1822 0cbc 04F4      		brge .+2
 1823 0cbe 00C0      		rjmp .L140
 187:lp_solve_5.5/lp_crash.c ****           continue;
 188:lp_solve_5.5/lp_crash.c **** 
 189:lp_solve_5.5/lp_crash.c ****         /* Now do the test for best pivot */
 190:lp_solve_5.5/lp_crash.c ****         tx = my_sign(lp->orig_obj[ix]) - my_sign(ROW_MAT_VALUE(ii));
 1824               		.loc 1 190 0 is_stmt 1 discriminator 1
 1825 0cc0 CE01      		movw r24,r28
 1826 0cc2 805B      		subi r24,-80
 1827 0cc4 9F4F      		sbci r25,-1
 1828 0cc6 FC01      		movw r30,r24
 1829 0cc8 8081      		ld r24,Z
 1830 0cca 9181      		ldd r25,Z+1
 1831 0ccc 845D      		subi r24,-44
 1832 0cce 9D4F      		sbci r25,-3
 1833 0cd0 FC01      		movw r30,r24
 1834 0cd2 2081      		ld r18,Z
 1835 0cd4 3181      		ldd r19,Z+1
 1836 0cd6 88A5      		ldd r24,Y+40
 1837 0cd8 99A5      		ldd r25,Y+41
 1838 0cda 880F      		lsl r24
 1839 0cdc 991F      		rol r25
 1840 0cde 880F      		lsl r24
 1841 0ce0 991F      		rol r25
 1842 0ce2 820F      		add r24,r18
 1843 0ce4 931F      		adc r25,r19
 1844 0ce6 FC01      		movw r30,r24
 1845 0ce8 8081      		ld r24,Z
 1846 0cea 9181      		ldd r25,Z+1
 1847 0cec A281      		ldd r26,Z+2
 1848 0cee B381      		ldd r27,Z+3
 1849 0cf0 20E0      		ldi r18,0
 1850 0cf2 30E0      		ldi r19,0
 1851 0cf4 A901      		movw r20,r18
 1852 0cf6 BC01      		movw r22,r24
 1853 0cf8 CD01      		movw r24,r26
 1854 0cfa 0E94 0000 		call __ltsf2
 1855 0cfe 8823      		tst r24
 1856 0d00 04F4      		brge .L134
 1857 0d02 0FEF      		ldi r16,lo8(-1)
 1858 0d04 1FEF      		ldi r17,lo8(-1)
 1859 0d06 00C0      		rjmp .L64
 1860               	.L134:
 1861               		.loc 1 190 0 is_stmt 0 discriminator 2
 1862 0d08 01E0      		ldi r16,lo8(1)
 1863 0d0a 10E0      		ldi r17,0
 1864               	.L64:
 1865               		.loc 1 190 0 discriminator 4
 1866 0d0c 8CA1      		ldd r24,Y+36
 1867 0d0e 9DA1      		ldd r25,Y+37
 1868 0d10 FC01      		movw r30,r24
 1869 0d12 2089      		ldd r18,Z+16
 1870 0d14 3189      		ldd r19,Z+17
 1871 0d16 8CA1      		ldd r24,Y+36
 1872 0d18 9DA1      		ldd r25,Y+37
 1873 0d1a FC01      		movw r30,r24
 1874 0d1c 4689      		ldd r20,Z+22
 1875 0d1e 5789      		ldd r21,Z+23
 1876 0d20 8C81      		ldd r24,Y+4
 1877 0d22 9D81      		ldd r25,Y+5
 1878 0d24 880F      		lsl r24
 1879 0d26 991F      		rol r25
 1880 0d28 840F      		add r24,r20
 1881 0d2a 951F      		adc r25,r21
 1882 0d2c FC01      		movw r30,r24
 1883 0d2e 8081      		ld r24,Z
 1884 0d30 9181      		ldd r25,Z+1
 1885 0d32 880F      		lsl r24
 1886 0d34 991F      		rol r25
 1887 0d36 880F      		lsl r24
 1888 0d38 991F      		rol r25
 1889 0d3a 820F      		add r24,r18
 1890 0d3c 931F      		adc r25,r19
 1891 0d3e FC01      		movw r30,r24
 1892 0d40 8081      		ld r24,Z
 1893 0d42 9181      		ldd r25,Z+1
 1894 0d44 A281      		ldd r26,Z+2
 1895 0d46 B381      		ldd r27,Z+3
 1896 0d48 20E0      		ldi r18,0
 1897 0d4a 30E0      		ldi r19,0
 1898 0d4c A901      		movw r20,r18
 1899 0d4e BC01      		movw r22,r24
 1900 0d50 CD01      		movw r24,r26
 1901 0d52 0E94 0000 		call __ltsf2
 1902 0d56 8823      		tst r24
 1903 0d58 04F4      		brge .L135
 1904               		.loc 1 190 0 discriminator 5
 1905 0d5a 8FEF      		ldi r24,lo8(-1)
 1906 0d5c 9FEF      		ldi r25,lo8(-1)
 1907 0d5e 00C0      		rjmp .L67
 1908               	.L135:
 1909               		.loc 1 190 0 discriminator 6
 1910 0d60 81E0      		ldi r24,lo8(1)
 1911 0d62 90E0      		ldi r25,0
 1912               	.L67:
 1913               		.loc 1 190 0 discriminator 8
 1914 0d64 9801      		movw r18,r16
 1915 0d66 281B      		sub r18,r24
 1916 0d68 390B      		sbc r19,r25
 1917 0d6a C901      		movw r24,r18
 1918 0d6c 092E      		mov __tmp_reg__,r25
 1919 0d6e 000C      		lsl r0
 1920 0d70 AA0B      		sbc r26,r26
 1921 0d72 BB0B      		sbc r27,r27
 1922 0d74 BC01      		movw r22,r24
 1923 0d76 CD01      		movw r24,r26
 1924 0d78 0E94 0000 		call __floatsisf
 1925 0d7c DC01      		movw r26,r24
 1926 0d7e CB01      		movw r24,r22
 1927 0d80 8AA7      		std Y+42,r24
 1928 0d82 9BA7      		std Y+43,r25
 1929 0d84 ACA7      		std Y+44,r26
 1930 0d86 BDA7      		std Y+45,r27
 191:lp_solve_5.5/lp_crash.c ****         tx = colWT[ix] + CRASH_WEIGHT*tx - CRASH_SPACER*colNZ[ix];
 1931               		.loc 1 191 0 is_stmt 1 discriminator 8
 1932 0d88 CE01      		movw r24,r28
 1933 0d8a 8C5B      		subi r24,-68
 1934 0d8c 9F4F      		sbci r25,-1
 1935 0d8e FC01      		movw r30,r24
 1936 0d90 2081      		ld r18,Z
 1937 0d92 3181      		ldd r19,Z+1
 1938 0d94 88A5      		ldd r24,Y+40
 1939 0d96 99A5      		ldd r25,Y+41
 1940 0d98 880F      		lsl r24
 1941 0d9a 991F      		rol r25
 1942 0d9c 820F      		add r24,r18
 1943 0d9e 931F      		adc r25,r19
 1944 0da0 FC01      		movw r30,r24
 1945 0da2 8081      		ld r24,Z
 1946 0da4 9181      		ldd r25,Z+1
 1947 0da6 092E      		mov __tmp_reg__,r25
 1948 0da8 000C      		lsl r0
 1949 0daa AA0B      		sbc r26,r26
 1950 0dac BB0B      		sbc r27,r27
 1951 0dae BC01      		movw r22,r24
 1952 0db0 CD01      		movw r24,r26
 1953 0db2 0E94 0000 		call __floatsisf
 1954 0db6 6B01      		movw r12,r22
 1955 0db8 7C01      		movw r14,r24
 1956 0dba 20E0      		ldi r18,0
 1957 0dbc 30E0      		ldi r19,0
 1958 0dbe 40E0      		ldi r20,0
 1959 0dc0 5FE3      		ldi r21,lo8(63)
 1960 0dc2 6AA5      		ldd r22,Y+42
 1961 0dc4 7BA5      		ldd r23,Y+43
 1962 0dc6 8CA5      		ldd r24,Y+44
 1963 0dc8 9DA5      		ldd r25,Y+45
 1964 0dca 0E94 0000 		call __mulsf3
 1965 0dce DC01      		movw r26,r24
 1966 0dd0 CB01      		movw r24,r22
 1967 0dd2 9C01      		movw r18,r24
 1968 0dd4 AD01      		movw r20,r26
 1969 0dd6 C701      		movw r24,r14
 1970 0dd8 B601      		movw r22,r12
 1971 0dda 0E94 0000 		call __addsf3
 1972 0dde DC01      		movw r26,r24
 1973 0de0 CB01      		movw r24,r22
 1974 0de2 6C01      		movw r12,r24
 1975 0de4 7D01      		movw r14,r26
 1976 0de6 CE01      		movw r24,r28
 1977 0de8 805C      		subi r24,-64
 1978 0dea 9F4F      		sbci r25,-1
 1979 0dec FC01      		movw r30,r24
 1980 0dee 2081      		ld r18,Z
 1981 0df0 3181      		ldd r19,Z+1
 1982 0df2 88A5      		ldd r24,Y+40
 1983 0df4 99A5      		ldd r25,Y+41
 1984 0df6 880F      		lsl r24
 1985 0df8 991F      		rol r25
 1986 0dfa 820F      		add r24,r18
 1987 0dfc 931F      		adc r25,r19
 1988 0dfe FC01      		movw r30,r24
 1989 0e00 8081      		ld r24,Z
 1990 0e02 9181      		ldd r25,Z+1
 1991 0e04 880F      		lsl r24
 1992 0e06 991F      		rol r25
 1993 0e08 9C01      		movw r18,r24
 1994 0e0a 220F      		lsl r18
 1995 0e0c 331F      		rol r19
 1996 0e0e 220F      		lsl r18
 1997 0e10 331F      		rol r19
 1998 0e12 820F      		add r24,r18
 1999 0e14 931F      		adc r25,r19
 2000 0e16 092E      		mov __tmp_reg__,r25
 2001 0e18 000C      		lsl r0
 2002 0e1a AA0B      		sbc r26,r26
 2003 0e1c BB0B      		sbc r27,r27
 2004 0e1e BC01      		movw r22,r24
 2005 0e20 CD01      		movw r24,r26
 2006 0e22 0E94 0000 		call __floatsisf
 2007 0e26 DC01      		movw r26,r24
 2008 0e28 CB01      		movw r24,r22
 2009 0e2a 9C01      		movw r18,r24
 2010 0e2c AD01      		movw r20,r26
 2011 0e2e C701      		movw r24,r14
 2012 0e30 B601      		movw r22,r12
 2013 0e32 0E94 0000 		call __subsf3
 2014 0e36 DC01      		movw r26,r24
 2015 0e38 CB01      		movw r24,r22
 2016 0e3a 8AA7      		std Y+42,r24
 2017 0e3c 9BA7      		std Y+43,r25
 2018 0e3e ACA7      		std Y+44,r26
 2019 0e40 BDA7      		std Y+45,r27
 192:lp_solve_5.5/lp_crash.c ****         if(tx > wx) {
 2020               		.loc 1 192 0 discriminator 8
 2021 0e42 2A85      		ldd r18,Y+10
 2022 0e44 3B85      		ldd r19,Y+11
 2023 0e46 4C85      		ldd r20,Y+12
 2024 0e48 5D85      		ldd r21,Y+13
 2025 0e4a 6AA5      		ldd r22,Y+42
 2026 0e4c 7BA5      		ldd r23,Y+43
 2027 0e4e 8CA5      		ldd r24,Y+44
 2028 0e50 9DA5      		ldd r25,Y+45
 2029 0e52 0E94 0000 		call __gtsf2
 2030 0e56 1816      		cp __zero_reg__,r24
 2031 0e58 04F4      		brge .L61
 193:lp_solve_5.5/lp_crash.c ****           cx = ix;
 2032               		.loc 1 193 0
 2033 0e5a 88A5      		ldd r24,Y+40
 2034 0e5c 99A5      		ldd r25,Y+41
 2035 0e5e 9987      		std Y+9,r25
 2036 0e60 8887      		std Y+8,r24
 194:lp_solve_5.5/lp_crash.c ****           wx = tx;
 2037               		.loc 1 194 0
 2038 0e62 8AA5      		ldd r24,Y+42
 2039 0e64 9BA5      		ldd r25,Y+43
 2040 0e66 ACA5      		ldd r26,Y+44
 2041 0e68 BDA5      		ldd r27,Y+45
 2042 0e6a 8A87      		std Y+10,r24
 2043 0e6c 9B87      		std Y+11,r25
 2044 0e6e AC87      		std Y+12,r26
 2045 0e70 BD87      		std Y+13,r27
 2046 0e72 00C0      		rjmp .L61
 2047               	.L140:
 187:lp_solve_5.5/lp_crash.c **** 
 2048               		.loc 1 187 0
 2049 0e74 0000      		nop
 2050               	.L61:
 175:lp_solve_5.5/lp_crash.c **** 
 2051               		.loc 1 175 0 discriminator 2
 2052 0e76 8C81      		ldd r24,Y+4
 2053 0e78 9D81      		ldd r25,Y+5
 2054 0e7a 0196      		adiw r24,1
 2055 0e7c 9D83      		std Y+5,r25
 2056 0e7e 8C83      		std Y+4,r24
 2057               	.L55:
 175:lp_solve_5.5/lp_crash.c **** 
 2058               		.loc 1 175 0 is_stmt 0 discriminator 1
 2059 0e80 8CA1      		ldd r24,Y+36
 2060 0e82 9DA1      		ldd r25,Y+37
 2061 0e84 FC01      		movw r30,r24
 2062 0e86 208D      		ldd r18,Z+24
 2063 0e88 318D      		ldd r19,Z+25
 2064 0e8a 8E81      		ldd r24,Y+6
 2065 0e8c 9F81      		ldd r25,Y+7
 2066 0e8e 880F      		lsl r24
 2067 0e90 991F      		rol r25
 2068 0e92 820F      		add r24,r18
 2069 0e94 931F      		adc r25,r19
 2070 0e96 FC01      		movw r30,r24
 2071 0e98 2081      		ld r18,Z
 2072 0e9a 3181      		ldd r19,Z+1
 2073 0e9c 8C81      		ldd r24,Y+4
 2074 0e9e 9D81      		ldd r25,Y+5
 2075 0ea0 8217      		cp r24,r18
 2076 0ea2 9307      		cpc r25,r19
 2077 0ea4 04F4      		brge .+2
 2078 0ea6 00C0      		rjmp .L69
 195:lp_solve_5.5/lp_crash.c ****         }
 196:lp_solve_5.5/lp_crash.c ****       }
 197:lp_solve_5.5/lp_crash.c ****       if(cx == 0)
 2079               		.loc 1 197 0 is_stmt 1
 2080 0ea8 8885      		ldd r24,Y+8
 2081 0eaa 9985      		ldd r25,Y+9
 2082 0eac 892B      		or r24,r25
 2083 0eae 01F4      		brne .+2
 2084 0eb0 00C0      		rjmp .L141
 198:lp_solve_5.5/lp_crash.c ****         break;
 199:lp_solve_5.5/lp_crash.c ****       removeLink(colLL, cx);
 2085               		.loc 1 199 0
 2086 0eb2 88AD      		ldd r24,Y+56
 2087 0eb4 99AD      		ldd r25,Y+57
 2088 0eb6 2885      		ldd r18,Y+8
 2089 0eb8 3985      		ldd r19,Y+9
 2090 0eba B901      		movw r22,r18
 2091 0ebc 0E94 0000 		call removeLink
 200:lp_solve_5.5/lp_crash.c **** 
 201:lp_solve_5.5/lp_crash.c ****       /* Update row NZ counts */
 202:lp_solve_5.5/lp_crash.c ****       ii = mat->col_end[cx-1];
 2092               		.loc 1 202 0
 2093 0ec0 8CA1      		ldd r24,Y+36
 2094 0ec2 9DA1      		ldd r25,Y+37
 2095 0ec4 FC01      		movw r30,r24
 2096 0ec6 2289      		ldd r18,Z+18
 2097 0ec8 3389      		ldd r19,Z+19
 2098 0eca 8885      		ldd r24,Y+8
 2099 0ecc 9985      		ldd r25,Y+9
 2100 0ece 8150      		subi r24,1
 2101 0ed0 9048      		sbci r25,-128
 2102 0ed2 880F      		lsl r24
 2103 0ed4 991F      		rol r25
 2104 0ed6 820F      		add r24,r18
 2105 0ed8 931F      		adc r25,r19
 2106 0eda FC01      		movw r30,r24
 2107 0edc 8081      		ld r24,Z
 2108 0ede 9181      		ldd r25,Z+1
 2109 0ee0 9D83      		std Y+5,r25
 2110 0ee2 8C83      		std Y+4,r24
 203:lp_solve_5.5/lp_crash.c ****       rownr = &COL_MAT_ROWNR(ii);
 2111               		.loc 1 203 0
 2112 0ee4 8CA1      		ldd r24,Y+36
 2113 0ee6 9DA1      		ldd r25,Y+37
 2114 0ee8 FC01      		movw r30,r24
 2115 0eea 2685      		ldd r18,Z+14
 2116 0eec 3785      		ldd r19,Z+15
 2117 0eee 8C81      		ldd r24,Y+4
 2118 0ef0 9D81      		ldd r25,Y+5
 2119 0ef2 880F      		lsl r24
 2120 0ef4 991F      		rol r25
 2121 0ef6 820F      		add r24,r18
 2122 0ef8 931F      		adc r25,r19
 2123 0efa 998B      		std Y+17,r25
 2124 0efc 888B      		std Y+16,r24
 204:lp_solve_5.5/lp_crash.c ****       value = &COL_MAT_VALUE(ii);
 2125               		.loc 1 204 0
 2126 0efe 8CA1      		ldd r24,Y+36
 2127 0f00 9DA1      		ldd r25,Y+37
 2128 0f02 FC01      		movw r30,r24
 2129 0f04 2089      		ldd r18,Z+16
 2130 0f06 3189      		ldd r19,Z+17
 2131 0f08 8C81      		ldd r24,Y+4
 2132 0f0a 9D81      		ldd r25,Y+5
 2133 0f0c 880F      		lsl r24
 2134 0f0e 991F      		rol r25
 2135 0f10 880F      		lsl r24
 2136 0f12 991F      		rol r25
 2137 0f14 820F      		add r24,r18
 2138 0f16 931F      		adc r25,r19
 2139 0f18 9F87      		std Y+15,r25
 2140 0f1a 8E87      		std Y+14,r24
 205:lp_solve_5.5/lp_crash.c ****       for(; ii < mat->col_end[cx];
 2141               		.loc 1 205 0
 2142 0f1c 00C0      		rjmp .L71
 2143               	.L74:
 206:lp_solve_5.5/lp_crash.c ****           ii++, rownr += matRowColStep, value += matValueStep) {
 207:lp_solve_5.5/lp_crash.c ****         wx = fabs(*value);
 2144               		.loc 1 207 0
 2145 0f1e 8E85      		ldd r24,Y+14
 2146 0f20 9F85      		ldd r25,Y+15
 2147 0f22 FC01      		movw r30,r24
 2148 0f24 8081      		ld r24,Z
 2149 0f26 9181      		ldd r25,Z+1
 2150 0f28 A281      		ldd r26,Z+2
 2151 0f2a B381      		ldd r27,Z+3
 2152 0f2c BF77      		andi r27,0x7f
 2153 0f2e 8A87      		std Y+10,r24
 2154 0f30 9B87      		std Y+11,r25
 2155 0f32 AC87      		std Y+12,r26
 2156 0f34 BD87      		std Y+13,r27
 208:lp_solve_5.5/lp_crash.c ****         ix = *rownr;
 2157               		.loc 1 208 0
 2158 0f36 8889      		ldd r24,Y+16
 2159 0f38 9989      		ldd r25,Y+17
 2160 0f3a FC01      		movw r30,r24
 2161 0f3c 8081      		ld r24,Z
 2162 0f3e 9181      		ldd r25,Z+1
 2163 0f40 99A7      		std Y+41,r25
 2164 0f42 88A7      		std Y+40,r24
 209:lp_solve_5.5/lp_crash.c **** #ifdef CRASH_SIMPLESCALE
 210:lp_solve_5.5/lp_crash.c ****         if(wx >= CRASH_THRESHOLD * colMAX[0])
 2165               		.loc 1 210 0
 2166 0f44 8CAD      		ldd r24,Y+60
 2167 0f46 9DAD      		ldd r25,Y+61
 2168 0f48 FC01      		movw r30,r24
 2169 0f4a 8081      		ld r24,Z
 2170 0f4c 9181      		ldd r25,Z+1
 2171 0f4e A281      		ldd r26,Z+2
 2172 0f50 B381      		ldd r27,Z+3
 2173 0f52 2CE0      		ldi r18,lo8(12)
 2174 0f54 32E0      		ldi r19,lo8(2)
 2175 0f56 4BE2      		ldi r20,lo8(43)
 2176 0f58 5EE3      		ldi r21,lo8(62)
 2177 0f5a BC01      		movw r22,r24
 2178 0f5c CD01      		movw r24,r26
 2179 0f5e 0E94 0000 		call __mulsf3
 2180 0f62 DC01      		movw r26,r24
 2181 0f64 CB01      		movw r24,r22
 2182 0f66 2A85      		ldd r18,Y+10
 2183 0f68 3B85      		ldd r19,Y+11
 2184 0f6a 4C85      		ldd r20,Y+12
 2185 0f6c 5D85      		ldd r21,Y+13
 2186 0f6e BC01      		movw r22,r24
 2187 0f70 CD01      		movw r24,r26
 2188 0f72 0E94 0000 		call __lesf2
 2189 0f76 1816      		cp __zero_reg__,r24
 2190 0f78 04F0      		brlt .L72
 211:lp_solve_5.5/lp_crash.c **** #else
 212:lp_solve_5.5/lp_crash.c ****         if(wx >= CRASH_THRESHOLD * rowMAX[ix])
 213:lp_solve_5.5/lp_crash.c **** #endif
 214:lp_solve_5.5/lp_crash.c ****           rowNZ[ix]--;
 2191               		.loc 1 214 0
 2192 0f7a 2EAD      		ldd r18,Y+62
 2193 0f7c 3FAD      		ldd r19,Y+63
 2194 0f7e 88A5      		ldd r24,Y+40
 2195 0f80 99A5      		ldd r25,Y+41
 2196 0f82 880F      		lsl r24
 2197 0f84 991F      		rol r25
 2198 0f86 820F      		add r24,r18
 2199 0f88 931F      		adc r25,r19
 2200 0f8a FC01      		movw r30,r24
 2201 0f8c 2081      		ld r18,Z
 2202 0f8e 3181      		ldd r19,Z+1
 2203 0f90 2150      		subi r18,1
 2204 0f92 3109      		sbc r19,__zero_reg__
 2205 0f94 FC01      		movw r30,r24
 2206 0f96 3183      		std Z+1,r19
 2207 0f98 2083      		st Z,r18
 2208               	.L72:
 206:lp_solve_5.5/lp_crash.c ****         wx = fabs(*value);
 2209               		.loc 1 206 0
 2210 0f9a 8C81      		ldd r24,Y+4
 2211 0f9c 9D81      		ldd r25,Y+5
 2212 0f9e 0196      		adiw r24,1
 2213 0fa0 9D83      		std Y+5,r25
 2214 0fa2 8C83      		std Y+4,r24
 2215 0fa4 8889      		ldd r24,Y+16
 2216 0fa6 9989      		ldd r25,Y+17
 2217 0fa8 0296      		adiw r24,2
 2218 0faa 998B      		std Y+17,r25
 2219 0fac 888B      		std Y+16,r24
 2220 0fae 8E85      		ldd r24,Y+14
 2221 0fb0 9F85      		ldd r25,Y+15
 2222 0fb2 0496      		adiw r24,4
 2223 0fb4 9F87      		std Y+15,r25
 2224 0fb6 8E87      		std Y+14,r24
 2225               	.L71:
 205:lp_solve_5.5/lp_crash.c ****           ii++, rownr += matRowColStep, value += matValueStep) {
 2226               		.loc 1 205 0
 2227 0fb8 8CA1      		ldd r24,Y+36
 2228 0fba 9DA1      		ldd r25,Y+37
 2229 0fbc FC01      		movw r30,r24
 2230 0fbe 2289      		ldd r18,Z+18
 2231 0fc0 3389      		ldd r19,Z+19
 2232 0fc2 8885      		ldd r24,Y+8
 2233 0fc4 9985      		ldd r25,Y+9
 2234 0fc6 880F      		lsl r24
 2235 0fc8 991F      		rol r25
 2236 0fca 820F      		add r24,r18
 2237 0fcc 931F      		adc r25,r19
 2238 0fce FC01      		movw r30,r24
 2239 0fd0 2081      		ld r18,Z
 2240 0fd2 3181      		ldd r19,Z+1
 2241 0fd4 8C81      		ldd r24,Y+4
 2242 0fd6 9D81      		ldd r25,Y+5
 2243 0fd8 8217      		cp r24,r18
 2244 0fda 9307      		cpc r25,r19
 2245 0fdc 04F4      		brge .+2
 2246 0fde 00C0      		rjmp .L74
 215:lp_solve_5.5/lp_crash.c ****       }
 216:lp_solve_5.5/lp_crash.c **** 
 217:lp_solve_5.5/lp_crash.c ****       /* Set new basis variable */
 218:lp_solve_5.5/lp_crash.c ****       set_basisvar(lp, rx, lp->rows+cx);
 2247               		.loc 1 218 0 discriminator 2
 2248 0fe0 CE01      		movw r24,r28
 2249 0fe2 805B      		subi r24,-80
 2250 0fe4 9F4F      		sbci r25,-1
 2251 0fe6 FC01      		movw r30,r24
 2252 0fe8 8081      		ld r24,Z
 2253 0fea 9181      		ldd r25,Z+1
 2254 0fec 8651      		subi r24,22
 2255 0fee 9E4F      		sbci r25,-2
 2256 0ff0 FC01      		movw r30,r24
 2257 0ff2 2081      		ld r18,Z
 2258 0ff4 3181      		ldd r19,Z+1
 2259 0ff6 8885      		ldd r24,Y+8
 2260 0ff8 9985      		ldd r25,Y+9
 2261 0ffa A901      		movw r20,r18
 2262 0ffc 480F      		add r20,r24
 2263 0ffe 591F      		adc r21,r25
 2264 1000 2E81      		ldd r18,Y+6
 2265 1002 3F81      		ldd r19,Y+7
 2266 1004 CE01      		movw r24,r28
 2267 1006 805B      		subi r24,-80
 2268 1008 9F4F      		sbci r25,-1
 2269 100a FC01      		movw r30,r24
 2270 100c 8081      		ld r24,Z
 2271 100e 9181      		ldd r25,Z+1
 2272 1010 B901      		movw r22,r18
 2273 1012 0E94 0000 		call set_basisvar
 156:lp_solve_5.5/lp_crash.c **** 
 2274               		.loc 1 156 0 discriminator 2
 2275 1016 8981      		ldd r24,Y+1
 2276 1018 9A81      		ldd r25,Y+2
 2277 101a 0196      		adiw r24,1
 2278 101c 9A83      		std Y+2,r25
 2279 101e 8983      		std Y+1,r24
 2280               	.L49:
 156:lp_solve_5.5/lp_crash.c **** 
 2281               		.loc 1 156 0 is_stmt 0 discriminator 1
 2282 1020 CE01      		movw r24,r28
 2283 1022 805B      		subi r24,-80
 2284 1024 9F4F      		sbci r25,-1
 2285 1026 FC01      		movw r30,r24
 2286 1028 8081      		ld r24,Z
 2287 102a 9181      		ldd r25,Z+1
 2288 102c 8651      		subi r24,22
 2289 102e 9E4F      		sbci r25,-2
 2290 1030 FC01      		movw r30,r24
 2291 1032 2081      		ld r18,Z
 2292 1034 3181      		ldd r19,Z+1
 2293 1036 8981      		ldd r24,Y+1
 2294 1038 9A81      		ldd r25,Y+2
 2295 103a 2817      		cp r18,r24
 2296 103c 3907      		cpc r19,r25
 2297 103e 04F0      		brlt .+2
 2298 1040 00C0      		rjmp .L75
 2299 1042 00C0      		rjmp .L13
 2300               	.L136:
  70:lp_solve_5.5/lp_crash.c **** 
 2301               		.loc 1 70 0 is_stmt 1
 2302 1044 0000      		nop
 2303 1046 00C0      		rjmp .L13
 2304               	.L137:
 121:lp_solve_5.5/lp_crash.c ****     for(i = 1; i <= lp->rows; i++) {
 2305               		.loc 1 121 0
 2306 1048 0000      		nop
 2307 104a 00C0      		rjmp .L13
 2308               	.L138:
 139:lp_solve_5.5/lp_crash.c ****     for(i = 1; i <= lp->columns; i++) {
 2309               		.loc 1 139 0
 2310 104c 0000      		nop
 2311 104e 00C0      		rjmp .L13
 2312               	.L139:
 169:lp_solve_5.5/lp_crash.c ****       removeLink(rowLL, rx);
 2313               		.loc 1 169 0
 2314 1050 0000      		nop
 2315 1052 00C0      		rjmp .L13
 2316               	.L141:
 198:lp_solve_5.5/lp_crash.c ****       removeLink(colLL, cx);
 2317               		.loc 1 198 0
 2318 1054 0000      		nop
 2319               	.L13:
 219:lp_solve_5.5/lp_crash.c ****     }
 220:lp_solve_5.5/lp_crash.c **** 
 221:lp_solve_5.5/lp_crash.c ****     /* Clean up */
 222:lp_solve_5.5/lp_crash.c **** Finish:
 223:lp_solve_5.5/lp_crash.c ****     FREE(rowNZ);
 2320               		.loc 1 223 0
 2321 1056 8EAD      		ldd r24,Y+62
 2322 1058 9FAD      		ldd r25,Y+63
 2323 105a 892B      		or r24,r25
 2324 105c 01F0      		breq .L76
 2325               		.loc 1 223 0 is_stmt 0 discriminator 1
 2326 105e 8EAD      		ldd r24,Y+62
 2327 1060 9FAD      		ldd r25,Y+63
 2328 1062 0E94 0000 		call free
 2329 1066 1FAE      		std Y+63,__zero_reg__
 2330 1068 1EAE      		std Y+62,__zero_reg__
 2331               	.L76:
 224:lp_solve_5.5/lp_crash.c ****     FREE(colNZ);
 2332               		.loc 1 224 0 is_stmt 1
 2333 106a CE01      		movw r24,r28
 2334 106c 805C      		subi r24,-64
 2335 106e 9F4F      		sbci r25,-1
 2336 1070 FC01      		movw r30,r24
 2337 1072 8081      		ld r24,Z
 2338 1074 9181      		ldd r25,Z+1
 2339 1076 892B      		or r24,r25
 2340 1078 01F0      		breq .L77
 2341               		.loc 1 224 0 is_stmt 0 discriminator 1
 2342 107a CE01      		movw r24,r28
 2343 107c 805C      		subi r24,-64
 2344 107e 9F4F      		sbci r25,-1
 2345 1080 FC01      		movw r30,r24
 2346 1082 8081      		ld r24,Z
 2347 1084 9181      		ldd r25,Z+1
 2348 1086 0E94 0000 		call free
 2349 108a CE01      		movw r24,r28
 2350 108c 805C      		subi r24,-64
 2351 108e 9F4F      		sbci r25,-1
 2352 1090 FC01      		movw r30,r24
 2353 1092 1182      		std Z+1,__zero_reg__
 2354 1094 1082      		st Z,__zero_reg__
 2355               	.L77:
 225:lp_solve_5.5/lp_crash.c ****     FREE(rowMAX);
 2356               		.loc 1 225 0 is_stmt 1
 2357 1096 8AAD      		ldd r24,Y+58
 2358 1098 9BAD      		ldd r25,Y+59
 2359 109a 892B      		or r24,r25
 2360 109c 01F0      		breq .L78
 2361               		.loc 1 225 0 is_stmt 0 discriminator 1
 2362 109e 8AAD      		ldd r24,Y+58
 2363 10a0 9BAD      		ldd r25,Y+59
 2364 10a2 0E94 0000 		call free
 2365 10a6 1BAE      		std Y+59,__zero_reg__
 2366 10a8 1AAE      		std Y+58,__zero_reg__
 2367               	.L78:
 226:lp_solve_5.5/lp_crash.c ****     FREE(colMAX);
 2368               		.loc 1 226 0 is_stmt 1
 2369 10aa 8CAD      		ldd r24,Y+60
 2370 10ac 9DAD      		ldd r25,Y+61
 2371 10ae 892B      		or r24,r25
 2372 10b0 01F0      		breq .L79
 2373               		.loc 1 226 0 is_stmt 0 discriminator 1
 2374 10b2 8CAD      		ldd r24,Y+60
 2375 10b4 9DAD      		ldd r25,Y+61
 2376 10b6 0E94 0000 		call free
 2377 10ba 1DAE      		std Y+61,__zero_reg__
 2378 10bc 1CAE      		std Y+60,__zero_reg__
 2379               	.L79:
 227:lp_solve_5.5/lp_crash.c ****     FREE(rowWT);
 2380               		.loc 1 227 0 is_stmt 1
 2381 10be CE01      		movw r24,r28
 2382 10c0 8E5B      		subi r24,-66
 2383 10c2 9F4F      		sbci r25,-1
 2384 10c4 FC01      		movw r30,r24
 2385 10c6 8081      		ld r24,Z
 2386 10c8 9181      		ldd r25,Z+1
 2387 10ca 892B      		or r24,r25
 2388 10cc 01F0      		breq .L80
 2389               		.loc 1 227 0 is_stmt 0 discriminator 1
 2390 10ce CE01      		movw r24,r28
 2391 10d0 8E5B      		subi r24,-66
 2392 10d2 9F4F      		sbci r25,-1
 2393 10d4 FC01      		movw r30,r24
 2394 10d6 8081      		ld r24,Z
 2395 10d8 9181      		ldd r25,Z+1
 2396 10da 0E94 0000 		call free
 2397 10de CE01      		movw r24,r28
 2398 10e0 8E5B      		subi r24,-66
 2399 10e2 9F4F      		sbci r25,-1
 2400 10e4 FC01      		movw r30,r24
 2401 10e6 1182      		std Z+1,__zero_reg__
 2402 10e8 1082      		st Z,__zero_reg__
 2403               	.L80:
 228:lp_solve_5.5/lp_crash.c ****     FREE(colWT);
 2404               		.loc 1 228 0 is_stmt 1
 2405 10ea CE01      		movw r24,r28
 2406 10ec 8C5B      		subi r24,-68
 2407 10ee 9F4F      		sbci r25,-1
 2408 10f0 FC01      		movw r30,r24
 2409 10f2 8081      		ld r24,Z
 2410 10f4 9181      		ldd r25,Z+1
 2411 10f6 892B      		or r24,r25
 2412 10f8 01F0      		breq .L81
 2413               		.loc 1 228 0 is_stmt 0 discriminator 1
 2414 10fa CE01      		movw r24,r28
 2415 10fc 8C5B      		subi r24,-68
 2416 10fe 9F4F      		sbci r25,-1
 2417 1100 FC01      		movw r30,r24
 2418 1102 8081      		ld r24,Z
 2419 1104 9181      		ldd r25,Z+1
 2420 1106 0E94 0000 		call free
 2421 110a CE01      		movw r24,r28
 2422 110c 8C5B      		subi r24,-68
 2423 110e 9F4F      		sbci r25,-1
 2424 1110 FC01      		movw r30,r24
 2425 1112 1182      		std Z+1,__zero_reg__
 2426 1114 1082      		st Z,__zero_reg__
 2427               	.L81:
 229:lp_solve_5.5/lp_crash.c ****     freeLink(&rowLL);
 2428               		.loc 1 229 0 is_stmt 1
 2429 1116 CE01      		movw r24,r28
 2430 1118 C696      		adiw r24,54
 2431 111a 0E94 0000 		call freeLink
 230:lp_solve_5.5/lp_crash.c ****     freeLink(&colLL);
 2432               		.loc 1 230 0
 2433 111e CE01      		movw r24,r28
 2434 1120 C896      		adiw r24,56
 2435 1122 0E94 0000 		call freeLink
 2436               	.LBE2:
  53:lp_solve_5.5/lp_crash.c ****     /* The logic here follows Maros */
 2437               		.loc 1 53 0
 2438 1126 00C0      		rjmp .L82
 2439               	.L9:
 231:lp_solve_5.5/lp_crash.c ****   }
 232:lp_solve_5.5/lp_crash.c **** 
 233:lp_solve_5.5/lp_crash.c ****   /* Construct a basis that is in some measure the "least degenerate" */
 234:lp_solve_5.5/lp_crash.c ****   else if((lp->crashmode == CRASH_LEASTDEGENERATE) && mat_validate(mat)) {
 2440               		.loc 1 234 0
 2441 1128 CE01      		movw r24,r28
 2442 112a 805B      		subi r24,-80
 2443 112c 9F4F      		sbci r25,-1
 2444 112e FC01      		movw r30,r24
 2445 1130 8081      		ld r24,Z
 2446 1132 9181      		ldd r25,Z+1
 2447 1134 8653      		subi r24,54
 2448 1136 9D4F      		sbci r25,-3
 2449 1138 FC01      		movw r30,r24
 2450 113a 8081      		ld r24,Z
 2451 113c 9181      		ldd r25,Z+1
 2452 113e 0397      		sbiw r24,3
 2453 1140 01F0      		breq .+2
 2454 1142 00C0      		rjmp .L82
 2455               		.loc 1 234 0 is_stmt 0 discriminator 1
 2456 1144 8CA1      		ldd r24,Y+36
 2457 1146 9DA1      		ldd r25,Y+37
 2458 1148 0E94 0000 		call mat_validate
 2459 114c 8823      		tst r24
 2460 114e 01F4      		brne .+2
 2461 1150 00C0      		rjmp .L82
 2462               	.LBB3:
 235:lp_solve_5.5/lp_crash.c ****     /* The logic here follows Maros */
 236:lp_solve_5.5/lp_crash.c ****     LLrec   *rowLL = NULL, *colLL = NULL;
 2463               		.loc 1 236 0 is_stmt 1
 2464 1152 CE01      		movw r24,r28
 2465 1154 8A5B      		subi r24,-70
 2466 1156 9F4F      		sbci r25,-1
 2467 1158 FC01      		movw r30,r24
 2468 115a 1182      		std Z+1,__zero_reg__
 2469 115c 1082      		st Z,__zero_reg__
 2470 115e CE01      		movw r24,r28
 2471 1160 885B      		subi r24,-72
 2472 1162 9F4F      		sbci r25,-1
 2473 1164 FC01      		movw r30,r24
 2474 1166 1182      		std Z+1,__zero_reg__
 2475 1168 1082      		st Z,__zero_reg__
 237:lp_solve_5.5/lp_crash.c ****     int     ii, rx, cx, ix, nz, *merit = NULL;
 2476               		.loc 1 237 0
 2477 116a CE01      		movw r24,r28
 2478 116c 865B      		subi r24,-74
 2479 116e 9F4F      		sbci r25,-1
 2480 1170 FC01      		movw r30,r24
 2481 1172 1182      		std Z+1,__zero_reg__
 2482 1174 1082      		st Z,__zero_reg__
 238:lp_solve_5.5/lp_crash.c ****     REAL    *value, wx, hold, *rhs = NULL, *eta = NULL;
 2483               		.loc 1 238 0
 2484 1176 CE01      		movw r24,r28
 2485 1178 845B      		subi r24,-76
 2486 117a 9F4F      		sbci r25,-1
 2487 117c FC01      		movw r30,r24
 2488 117e 1182      		std Z+1,__zero_reg__
 2489 1180 1082      		st Z,__zero_reg__
 2490 1182 CE01      		movw r24,r28
 2491 1184 825B      		subi r24,-78
 2492 1186 9F4F      		sbci r25,-1
 2493 1188 FC01      		movw r30,r24
 2494 118a 1182      		std Z+1,__zero_reg__
 2495 118c 1082      		st Z,__zero_reg__
 239:lp_solve_5.5/lp_crash.c ****     int     *rownr, *colnr;
 240:lp_solve_5.5/lp_crash.c **** 
 241:lp_solve_5.5/lp_crash.c ****     report(lp, NORMAL, "crash_basis: 'Least degenerate' basis crashing selected\n");
 2496               		.loc 1 241 0
 2497 118e 80E0      		ldi r24,lo8(.LC1)
 2498 1190 90E0      		ldi r25,hi8(.LC1)
 2499 1192 892F      		mov r24,r25
 2500 1194 8F93      		push r24
 2501 1196 80E0      		ldi r24,lo8(.LC1)
 2502 1198 90E0      		ldi r25,hi8(.LC1)
 2503 119a 8F93      		push r24
 2504 119c 1F92      		push __zero_reg__
 2505 119e 84E0      		ldi r24,lo8(4)
 2506 11a0 8F93      		push r24
 2507 11a2 CE01      		movw r24,r28
 2508 11a4 805B      		subi r24,-80
 2509 11a6 9F4F      		sbci r25,-1
 2510 11a8 FC01      		movw r30,r24
 2511 11aa 2181      		ldd r18,Z+1
 2512 11ac 2F93      		push r18
 2513 11ae FC01      		movw r30,r24
 2514 11b0 8081      		ld r24,Z
 2515 11b2 8F93      		push r24
 2516 11b4 0E94 0000 		call report
 2517 11b8 0F90      		pop __tmp_reg__
 2518 11ba 0F90      		pop __tmp_reg__
 2519 11bc 0F90      		pop __tmp_reg__
 2520 11be 0F90      		pop __tmp_reg__
 2521 11c0 0F90      		pop __tmp_reg__
 2522 11c2 0F90      		pop __tmp_reg__
 242:lp_solve_5.5/lp_crash.c **** 
 243:lp_solve_5.5/lp_crash.c ****     /* Create temporary arrays */
 244:lp_solve_5.5/lp_crash.c ****     ok = allocINT(lp,  &merit, lp->columns + 1, FALSE) &&
 2523               		.loc 1 244 0
 2524 11c4 CE01      		movw r24,r28
 2525 11c6 805B      		subi r24,-80
 2526 11c8 9F4F      		sbci r25,-1
 2527 11ca FC01      		movw r30,r24
 2528 11cc 8081      		ld r24,Z
 2529 11ce 9181      		ldd r25,Z+1
 2530 11d0 8451      		subi r24,20
 2531 11d2 9E4F      		sbci r25,-2
 2532 11d4 FC01      		movw r30,r24
 2533 11d6 8081      		ld r24,Z
 2534 11d8 9181      		ldd r25,Z+1
 2535 11da AC01      		movw r20,r24
 2536 11dc 4F5F      		subi r20,-1
 2537 11de 5F4F      		sbci r21,-1
 2538 11e0 BE01      		movw r22,r28
 2539 11e2 665B      		subi r22,-74
 2540 11e4 7F4F      		sbci r23,-1
 2541 11e6 CE01      		movw r24,r28
 2542 11e8 805B      		subi r24,-80
 2543 11ea 9F4F      		sbci r25,-1
 2544 11ec FC01      		movw r30,r24
 2545 11ee 8081      		ld r24,Z
 2546 11f0 9181      		ldd r25,Z+1
 2547 11f2 20E0      		ldi r18,0
 2548 11f4 0E94 0000 		call allocINT
 245:lp_solve_5.5/lp_crash.c ****          allocREAL(lp, &eta, lp->rows + 1, FALSE) &&
 2549               		.loc 1 245 0
 2550 11f8 8823      		tst r24
 2551 11fa 01F0      		breq .L83
 2552               		.loc 1 245 0 is_stmt 0 discriminator 1
 2553 11fc CE01      		movw r24,r28
 2554 11fe 805B      		subi r24,-80
 2555 1200 9F4F      		sbci r25,-1
 2556 1202 FC01      		movw r30,r24
 2557 1204 8081      		ld r24,Z
 2558 1206 9181      		ldd r25,Z+1
 2559 1208 8651      		subi r24,22
 2560 120a 9E4F      		sbci r25,-2
 2561 120c FC01      		movw r30,r24
 2562 120e 8081      		ld r24,Z
 2563 1210 9181      		ldd r25,Z+1
 2564 1212 AC01      		movw r20,r24
 2565 1214 4F5F      		subi r20,-1
 2566 1216 5F4F      		sbci r21,-1
 2567 1218 BE01      		movw r22,r28
 2568 121a 625B      		subi r22,-78
 2569 121c 7F4F      		sbci r23,-1
 2570 121e CE01      		movw r24,r28
 2571 1220 805B      		subi r24,-80
 2572 1222 9F4F      		sbci r25,-1
 2573 1224 FC01      		movw r30,r24
 2574 1226 8081      		ld r24,Z
 2575 1228 9181      		ldd r25,Z+1
 2576 122a 20E0      		ldi r18,0
 2577 122c 0E94 0000 		call allocREAL
 244:lp_solve_5.5/lp_crash.c ****          allocREAL(lp, &eta, lp->rows + 1, FALSE) &&
 2578               		.loc 1 244 0 is_stmt 1 discriminator 1
 2579 1230 8823      		tst r24
 2580 1232 01F0      		breq .L83
 246:lp_solve_5.5/lp_crash.c ****          allocREAL(lp, &rhs, lp->rows + 1, FALSE);
 2581               		.loc 1 246 0 discriminator 4
 2582 1234 CE01      		movw r24,r28
 2583 1236 805B      		subi r24,-80
 2584 1238 9F4F      		sbci r25,-1
 2585 123a FC01      		movw r30,r24
 2586 123c 8081      		ld r24,Z
 2587 123e 9181      		ldd r25,Z+1
 2588 1240 8651      		subi r24,22
 2589 1242 9E4F      		sbci r25,-2
 2590 1244 FC01      		movw r30,r24
 2591 1246 8081      		ld r24,Z
 2592 1248 9181      		ldd r25,Z+1
 2593 124a AC01      		movw r20,r24
 2594 124c 4F5F      		subi r20,-1
 2595 124e 5F4F      		sbci r21,-1
 2596 1250 BE01      		movw r22,r28
 2597 1252 645B      		subi r22,-76
 2598 1254 7F4F      		sbci r23,-1
 2599 1256 CE01      		movw r24,r28
 2600 1258 805B      		subi r24,-80
 2601 125a 9F4F      		sbci r25,-1
 2602 125c FC01      		movw r30,r24
 2603 125e 8081      		ld r24,Z
 2604 1260 9181      		ldd r25,Z+1
 2605 1262 20E0      		ldi r18,0
 2606 1264 0E94 0000 		call allocREAL
 245:lp_solve_5.5/lp_crash.c ****          allocREAL(lp, &eta, lp->rows + 1, FALSE) &&
 2607               		.loc 1 245 0 discriminator 4
 2608 1268 8823      		tst r24
 2609 126a 01F0      		breq .L83
 245:lp_solve_5.5/lp_crash.c ****          allocREAL(lp, &eta, lp->rows + 1, FALSE) &&
 2610               		.loc 1 245 0 is_stmt 0 discriminator 3
 2611 126c 81E0      		ldi r24,lo8(1)
 2612 126e 90E0      		ldi r25,0
 2613 1270 00C0      		rjmp .L84
 2614               	.L83:
 245:lp_solve_5.5/lp_crash.c ****          allocREAL(lp, &eta, lp->rows + 1, FALSE) &&
 2615               		.loc 1 245 0 discriminator 2
 2616 1272 80E0      		ldi r24,0
 2617 1274 90E0      		ldi r25,0
 2618               	.L84:
 244:lp_solve_5.5/lp_crash.c ****          allocREAL(lp, &eta, lp->rows + 1, FALSE) &&
 2619               		.loc 1 244 0 is_stmt 1
 2620 1276 8B83      		std Y+3,r24
 247:lp_solve_5.5/lp_crash.c ****     createLink(lp->columns, &colLL, NULL);
 2621               		.loc 1 247 0
 2622 1278 CE01      		movw r24,r28
 2623 127a 805B      		subi r24,-80
 2624 127c 9F4F      		sbci r25,-1
 2625 127e FC01      		movw r30,r24
 2626 1280 8081      		ld r24,Z
 2627 1282 9181      		ldd r25,Z+1
 2628 1284 8451      		subi r24,20
 2629 1286 9E4F      		sbci r25,-2
 2630 1288 FC01      		movw r30,r24
 2631 128a 8081      		ld r24,Z
 2632 128c 9181      		ldd r25,Z+1
 2633 128e 9E01      		movw r18,r28
 2634 1290 285B      		subi r18,-72
 2635 1292 3F4F      		sbci r19,-1
 2636 1294 40E0      		ldi r20,0
 2637 1296 50E0      		ldi r21,0
 2638 1298 B901      		movw r22,r18
 2639 129a 0E94 0000 		call createLink
 248:lp_solve_5.5/lp_crash.c ****     createLink(lp->rows, &rowLL, NULL);
 2640               		.loc 1 248 0
 2641 129e CE01      		movw r24,r28
 2642 12a0 805B      		subi r24,-80
 2643 12a2 9F4F      		sbci r25,-1
 2644 12a4 FC01      		movw r30,r24
 2645 12a6 8081      		ld r24,Z
 2646 12a8 9181      		ldd r25,Z+1
 2647 12aa 8651      		subi r24,22
 2648 12ac 9E4F      		sbci r25,-2
 2649 12ae FC01      		movw r30,r24
 2650 12b0 8081      		ld r24,Z
 2651 12b2 9181      		ldd r25,Z+1
 2652 12b4 9E01      		movw r18,r28
 2653 12b6 2A5B      		subi r18,-70
 2654 12b8 3F4F      		sbci r19,-1
 2655 12ba 40E0      		ldi r20,0
 2656 12bc 50E0      		ldi r21,0
 2657 12be B901      		movw r22,r18
 2658 12c0 0E94 0000 		call createLink
 249:lp_solve_5.5/lp_crash.c ****     ok &= (colLL != NULL) && (rowLL != NULL);
 2659               		.loc 1 249 0
 2660 12c4 CE01      		movw r24,r28
 2661 12c6 885B      		subi r24,-72
 2662 12c8 9F4F      		sbci r25,-1
 2663 12ca FC01      		movw r30,r24
 2664 12cc 8081      		ld r24,Z
 2665 12ce 9181      		ldd r25,Z+1
 2666 12d0 892B      		or r24,r25
 2667 12d2 01F0      		breq .L85
 2668               		.loc 1 249 0 is_stmt 0 discriminator 1
 2669 12d4 CE01      		movw r24,r28
 2670 12d6 8A5B      		subi r24,-70
 2671 12d8 9F4F      		sbci r25,-1
 2672 12da FC01      		movw r30,r24
 2673 12dc 8081      		ld r24,Z
 2674 12de 9181      		ldd r25,Z+1
 2675 12e0 892B      		or r24,r25
 2676 12e2 01F0      		breq .L85
 2677               		.loc 1 249 0 discriminator 3
 2678 12e4 81E0      		ldi r24,lo8(1)
 2679 12e6 90E0      		ldi r25,0
 2680 12e8 00C0      		rjmp .L86
 2681               	.L85:
 2682               		.loc 1 249 0 discriminator 4
 2683 12ea 80E0      		ldi r24,0
 2684 12ec 90E0      		ldi r25,0
 2685               	.L86:
 2686               		.loc 1 249 0 discriminator 6
 2687 12ee 982F      		mov r25,r24
 2688 12f0 8B81      		ldd r24,Y+3
 2689 12f2 8923      		and r24,r25
 2690 12f4 8B83      		std Y+3,r24
 250:lp_solve_5.5/lp_crash.c ****     if(!ok)
 2691               		.loc 1 250 0 is_stmt 1 discriminator 6
 2692 12f6 8B81      		ldd r24,Y+3
 2693 12f8 8823      		tst r24
 2694 12fa 01F4      		brne .+2
 2695 12fc 00C0      		rjmp .L142
 251:lp_solve_5.5/lp_crash.c ****       goto FinishLD;
 252:lp_solve_5.5/lp_crash.c ****     MEMCOPY(rhs, lp->orig_rhs, lp->rows + 1);
 2696               		.loc 1 252 0
 2697 12fe CE01      		movw r24,r28
 2698 1300 805B      		subi r24,-80
 2699 1302 9F4F      		sbci r25,-1
 2700 1304 FC01      		movw r30,r24
 2701 1306 8081      		ld r24,Z
 2702 1308 9181      		ldd r25,Z+1
 2703 130a 8651      		subi r24,22
 2704 130c 9E4F      		sbci r25,-2
 2705 130e FC01      		movw r30,r24
 2706 1310 8081      		ld r24,Z
 2707 1312 9181      		ldd r25,Z+1
 2708 1314 0196      		adiw r24,1
 2709 1316 AC01      		movw r20,r24
 2710 1318 440F      		lsl r20
 2711 131a 551F      		rol r21
 2712 131c 440F      		lsl r20
 2713 131e 551F      		rol r21
 2714 1320 CE01      		movw r24,r28
 2715 1322 805B      		subi r24,-80
 2716 1324 9F4F      		sbci r25,-1
 2717 1326 FC01      		movw r30,r24
 2718 1328 8081      		ld r24,Z
 2719 132a 9181      		ldd r25,Z+1
 2720 132c 8A55      		subi r24,90
 2721 132e 9D4F      		sbci r25,-3
 2722 1330 FC01      		movw r30,r24
 2723 1332 2081      		ld r18,Z
 2724 1334 3181      		ldd r19,Z+1
 2725 1336 CE01      		movw r24,r28
 2726 1338 845B      		subi r24,-76
 2727 133a 9F4F      		sbci r25,-1
 2728 133c FC01      		movw r30,r24
 2729 133e 8081      		ld r24,Z
 2730 1340 9181      		ldd r25,Z+1
 2731 1342 B901      		movw r22,r18
 2732 1344 0E94 0000 		call memcpy
 253:lp_solve_5.5/lp_crash.c ****     for(i = 1; i <= lp->columns; i++)
 2733               		.loc 1 253 0
 2734 1348 81E0      		ldi r24,lo8(1)
 2735 134a 90E0      		ldi r25,0
 2736 134c 9A83      		std Y+2,r25
 2737 134e 8983      		std Y+1,r24
 2738 1350 00C0      		rjmp .L89
 2739               	.L90:
 254:lp_solve_5.5/lp_crash.c ****       appendLink(colLL, i);
 2740               		.loc 1 254 0 discriminator 3
 2741 1352 CE01      		movw r24,r28
 2742 1354 885B      		subi r24,-72
 2743 1356 9F4F      		sbci r25,-1
 2744 1358 FC01      		movw r30,r24
 2745 135a 8081      		ld r24,Z
 2746 135c 9181      		ldd r25,Z+1
 2747 135e 2981      		ldd r18,Y+1
 2748 1360 3A81      		ldd r19,Y+2
 2749 1362 B901      		movw r22,r18
 2750 1364 0E94 0000 		call appendLink
 253:lp_solve_5.5/lp_crash.c ****     for(i = 1; i <= lp->columns; i++)
 2751               		.loc 1 253 0 discriminator 3
 2752 1368 8981      		ldd r24,Y+1
 2753 136a 9A81      		ldd r25,Y+2
 2754 136c 0196      		adiw r24,1
 2755 136e 9A83      		std Y+2,r25
 2756 1370 8983      		std Y+1,r24
 2757               	.L89:
 253:lp_solve_5.5/lp_crash.c ****     for(i = 1; i <= lp->columns; i++)
 2758               		.loc 1 253 0 is_stmt 0 discriminator 1
 2759 1372 CE01      		movw r24,r28
 2760 1374 805B      		subi r24,-80
 2761 1376 9F4F      		sbci r25,-1
 2762 1378 FC01      		movw r30,r24
 2763 137a 8081      		ld r24,Z
 2764 137c 9181      		ldd r25,Z+1
 2765 137e 8451      		subi r24,20
 2766 1380 9E4F      		sbci r25,-2
 2767 1382 FC01      		movw r30,r24
 2768 1384 2081      		ld r18,Z
 2769 1386 3181      		ldd r19,Z+1
 2770 1388 8981      		ldd r24,Y+1
 2771 138a 9A81      		ldd r25,Y+2
 2772 138c 2817      		cp r18,r24
 2773 138e 3907      		cpc r19,r25
 2774 1390 04F4      		brge .L90
 255:lp_solve_5.5/lp_crash.c ****     for(i = 1; i <= lp->rows; i++)
 2775               		.loc 1 255 0 is_stmt 1
 2776 1392 81E0      		ldi r24,lo8(1)
 2777 1394 90E0      		ldi r25,0
 2778 1396 9A83      		std Y+2,r25
 2779 1398 8983      		std Y+1,r24
 2780 139a 00C0      		rjmp .L91
 2781               	.L92:
 256:lp_solve_5.5/lp_crash.c ****       appendLink(rowLL, i);
 2782               		.loc 1 256 0 discriminator 3
 2783 139c CE01      		movw r24,r28
 2784 139e 8A5B      		subi r24,-70
 2785 13a0 9F4F      		sbci r25,-1
 2786 13a2 FC01      		movw r30,r24
 2787 13a4 8081      		ld r24,Z
 2788 13a6 9181      		ldd r25,Z+1
 2789 13a8 2981      		ldd r18,Y+1
 2790 13aa 3A81      		ldd r19,Y+2
 2791 13ac B901      		movw r22,r18
 2792 13ae 0E94 0000 		call appendLink
 255:lp_solve_5.5/lp_crash.c ****     for(i = 1; i <= lp->rows; i++)
 2793               		.loc 1 255 0 discriminator 3
 2794 13b2 8981      		ldd r24,Y+1
 2795 13b4 9A81      		ldd r25,Y+2
 2796 13b6 0196      		adiw r24,1
 2797 13b8 9A83      		std Y+2,r25
 2798 13ba 8983      		std Y+1,r24
 2799               	.L91:
 255:lp_solve_5.5/lp_crash.c ****     for(i = 1; i <= lp->rows; i++)
 2800               		.loc 1 255 0 is_stmt 0 discriminator 1
 2801 13bc CE01      		movw r24,r28
 2802 13be 805B      		subi r24,-80
 2803 13c0 9F4F      		sbci r25,-1
 2804 13c2 FC01      		movw r30,r24
 2805 13c4 8081      		ld r24,Z
 2806 13c6 9181      		ldd r25,Z+1
 2807 13c8 8651      		subi r24,22
 2808 13ca 9E4F      		sbci r25,-2
 2809 13cc FC01      		movw r30,r24
 2810 13ce 2081      		ld r18,Z
 2811 13d0 3181      		ldd r19,Z+1
 2812 13d2 8981      		ldd r24,Y+1
 2813 13d4 9A81      		ldd r25,Y+2
 2814 13d6 2817      		cp r18,r24
 2815 13d8 3907      		cpc r19,r25
 2816 13da 04F4      		brge .L92
 257:lp_solve_5.5/lp_crash.c **** 
 258:lp_solve_5.5/lp_crash.c ****     /* Loop until we have found enough new bases */
 259:lp_solve_5.5/lp_crash.c ****     while(colLL->count > 0) {
 2817               		.loc 1 259 0 is_stmt 1
 2818 13dc 00C0      		rjmp .L93
 2819               	.L110:
 260:lp_solve_5.5/lp_crash.c **** 
 261:lp_solve_5.5/lp_crash.c ****       /* Tally non-zeros matching in RHS and each active column */
 262:lp_solve_5.5/lp_crash.c ****       nz = mat_nonzeros(mat);
 2820               		.loc 1 262 0
 2821 13de 8CA1      		ldd r24,Y+36
 2822 13e0 9DA1      		ldd r25,Y+37
 2823 13e2 0E94 0000 		call mat_nonzeros
 2824 13e6 9FA7      		std Y+47,r25
 2825 13e8 8EA7      		std Y+46,r24
 263:lp_solve_5.5/lp_crash.c ****       rownr = &COL_MAT_ROWNR(0);
 2826               		.loc 1 263 0
 2827 13ea 8CA1      		ldd r24,Y+36
 2828 13ec 9DA1      		ldd r25,Y+37
 2829 13ee FC01      		movw r30,r24
 2830 13f0 8685      		ldd r24,Z+14
 2831 13f2 9785      		ldd r25,Z+15
 2832 13f4 99A3      		std Y+33,r25
 2833 13f6 88A3      		std Y+32,r24
 264:lp_solve_5.5/lp_crash.c ****       colnr = &COL_MAT_COLNR(0);
 2834               		.loc 1 264 0
 2835 13f8 8CA1      		ldd r24,Y+36
 2836 13fa 9DA1      		ldd r25,Y+37
 2837 13fc FC01      		movw r30,r24
 2838 13fe 8485      		ldd r24,Z+12
 2839 1400 9585      		ldd r25,Z+13
 2840 1402 9BA3      		std Y+35,r25
 2841 1404 8AA3      		std Y+34,r24
 265:lp_solve_5.5/lp_crash.c ****       ii = 0;
 2842               		.loc 1 265 0
 2843 1406 1D8A      		std Y+21,__zero_reg__
 2844 1408 1C8A      		std Y+20,__zero_reg__
 266:lp_solve_5.5/lp_crash.c ****       MEMCLEAR(merit, lp->columns + 1);
 2845               		.loc 1 266 0
 2846 140a CE01      		movw r24,r28
 2847 140c 805B      		subi r24,-80
 2848 140e 9F4F      		sbci r25,-1
 2849 1410 FC01      		movw r30,r24
 2850 1412 8081      		ld r24,Z
 2851 1414 9181      		ldd r25,Z+1
 2852 1416 8451      		subi r24,20
 2853 1418 9E4F      		sbci r25,-2
 2854 141a FC01      		movw r30,r24
 2855 141c 8081      		ld r24,Z
 2856 141e 9181      		ldd r25,Z+1
 2857 1420 0196      		adiw r24,1
 2858 1422 9C01      		movw r18,r24
 2859 1424 220F      		lsl r18
 2860 1426 331F      		rol r19
 2861 1428 CE01      		movw r24,r28
 2862 142a 865B      		subi r24,-74
 2863 142c 9F4F      		sbci r25,-1
 2864 142e FC01      		movw r30,r24
 2865 1430 8081      		ld r24,Z
 2866 1432 9181      		ldd r25,Z+1
 2867 1434 A901      		movw r20,r18
 2868 1436 60E0      		ldi r22,0
 2869 1438 70E0      		ldi r23,0
 2870 143a 0E94 0000 		call memset
 267:lp_solve_5.5/lp_crash.c ****       for(i = 0; i < nz;
 2871               		.loc 1 267 0
 2872 143e 1A82      		std Y+2,__zero_reg__
 2873 1440 1982      		std Y+1,__zero_reg__
 2874 1442 00C0      		rjmp .L94
 2875               	.L97:
 268:lp_solve_5.5/lp_crash.c ****           i++, rownr += matRowColStep, colnr += matRowColStep) {
 269:lp_solve_5.5/lp_crash.c ****         rx = *rownr;
 2876               		.loc 1 269 0
 2877 1444 88A1      		ldd r24,Y+32
 2878 1446 99A1      		ldd r25,Y+33
 2879 1448 FC01      		movw r30,r24
 2880 144a 8081      		ld r24,Z
 2881 144c 9181      		ldd r25,Z+1
 2882 144e 9F8B      		std Y+23,r25
 2883 1450 8E8B      		std Y+22,r24
 270:lp_solve_5.5/lp_crash.c ****         cx = *colnr;
 2884               		.loc 1 270 0
 2885 1452 8AA1      		ldd r24,Y+34
 2886 1454 9BA1      		ldd r25,Y+35
 2887 1456 FC01      		movw r30,r24
 2888 1458 8081      		ld r24,Z
 2889 145a 9181      		ldd r25,Z+1
 2890 145c 998F      		std Y+25,r25
 2891 145e 888F      		std Y+24,r24
 271:lp_solve_5.5/lp_crash.c ****         if(isActiveLink(colLL, cx) && (rhs[rx] != 0)) {
 2892               		.loc 1 271 0
 2893 1460 CE01      		movw r24,r28
 2894 1462 885B      		subi r24,-72
 2895 1464 9F4F      		sbci r25,-1
 2896 1466 FC01      		movw r30,r24
 2897 1468 8081      		ld r24,Z
 2898 146a 9181      		ldd r25,Z+1
 2899 146c 288D      		ldd r18,Y+24
 2900 146e 398D      		ldd r19,Y+25
 2901 1470 B901      		movw r22,r18
 2902 1472 0E94 0000 		call isActiveLink
 2903 1476 8823      		tst r24
 2904 1478 01F0      		breq .L95
 2905               		.loc 1 271 0 is_stmt 0 discriminator 1
 2906 147a CE01      		movw r24,r28
 2907 147c 845B      		subi r24,-76
 2908 147e 9F4F      		sbci r25,-1
 2909 1480 FC01      		movw r30,r24
 2910 1482 2081      		ld r18,Z
 2911 1484 3181      		ldd r19,Z+1
 2912 1486 8E89      		ldd r24,Y+22
 2913 1488 9F89      		ldd r25,Y+23
 2914 148a 880F      		lsl r24
 2915 148c 991F      		rol r25
 2916 148e 880F      		lsl r24
 2917 1490 991F      		rol r25
 2918 1492 820F      		add r24,r18
 2919 1494 931F      		adc r25,r19
 2920 1496 FC01      		movw r30,r24
 2921 1498 8081      		ld r24,Z
 2922 149a 9181      		ldd r25,Z+1
 2923 149c A281      		ldd r26,Z+2
 2924 149e B381      		ldd r27,Z+3
 2925 14a0 20E0      		ldi r18,0
 2926 14a2 30E0      		ldi r19,0
 2927 14a4 A901      		movw r20,r18
 2928 14a6 BC01      		movw r22,r24
 2929 14a8 CD01      		movw r24,r26
 2930 14aa 0E94 0000 		call __nesf2
 2931 14ae 8823      		tst r24
 2932 14b0 01F0      		breq .L95
 272:lp_solve_5.5/lp_crash.c ****           merit[cx]++;
 2933               		.loc 1 272 0 is_stmt 1
 2934 14b2 CE01      		movw r24,r28
 2935 14b4 865B      		subi r24,-74
 2936 14b6 9F4F      		sbci r25,-1
 2937 14b8 FC01      		movw r30,r24
 2938 14ba 2081      		ld r18,Z
 2939 14bc 3181      		ldd r19,Z+1
 2940 14be 888D      		ldd r24,Y+24
 2941 14c0 998D      		ldd r25,Y+25
 2942 14c2 880F      		lsl r24
 2943 14c4 991F      		rol r25
 2944 14c6 820F      		add r24,r18
 2945 14c8 931F      		adc r25,r19
 2946 14ca FC01      		movw r30,r24
 2947 14cc 2081      		ld r18,Z
 2948 14ce 3181      		ldd r19,Z+1
 2949 14d0 2F5F      		subi r18,-1
 2950 14d2 3F4F      		sbci r19,-1
 2951 14d4 FC01      		movw r30,r24
 2952 14d6 3183      		std Z+1,r19
 2953 14d8 2083      		st Z,r18
 273:lp_solve_5.5/lp_crash.c ****           ii++;
 2954               		.loc 1 273 0
 2955 14da 8C89      		ldd r24,Y+20
 2956 14dc 9D89      		ldd r25,Y+21
 2957 14de 0196      		adiw r24,1
 2958 14e0 9D8B      		std Y+21,r25
 2959 14e2 8C8B      		std Y+20,r24
 2960               	.L95:
 268:lp_solve_5.5/lp_crash.c ****         rx = *rownr;
 2961               		.loc 1 268 0
 2962 14e4 8981      		ldd r24,Y+1
 2963 14e6 9A81      		ldd r25,Y+2
 2964 14e8 0196      		adiw r24,1
 2965 14ea 9A83      		std Y+2,r25
 2966 14ec 8983      		std Y+1,r24
 2967 14ee 88A1      		ldd r24,Y+32
 2968 14f0 99A1      		ldd r25,Y+33
 2969 14f2 0296      		adiw r24,2
 2970 14f4 99A3      		std Y+33,r25
 2971 14f6 88A3      		std Y+32,r24
 2972 14f8 8AA1      		ldd r24,Y+34
 2973 14fa 9BA1      		ldd r25,Y+35
 2974 14fc 0296      		adiw r24,2
 2975 14fe 9BA3      		std Y+35,r25
 2976 1500 8AA3      		std Y+34,r24
 2977               	.L94:
 267:lp_solve_5.5/lp_crash.c ****           i++, rownr += matRowColStep, colnr += matRowColStep) {
 2978               		.loc 1 267 0 discriminator 1
 2979 1502 2981      		ldd r18,Y+1
 2980 1504 3A81      		ldd r19,Y+2
 2981 1506 8EA5      		ldd r24,Y+46
 2982 1508 9FA5      		ldd r25,Y+47
 2983 150a 2817      		cp r18,r24
 2984 150c 3907      		cpc r19,r25
 2985 150e 04F4      		brge .+2
 2986 1510 00C0      		rjmp .L97
 274:lp_solve_5.5/lp_crash.c ****         }
 275:lp_solve_5.5/lp_crash.c ****       }
 276:lp_solve_5.5/lp_crash.c ****       if(ii == 0)
 2987               		.loc 1 276 0
 2988 1512 8C89      		ldd r24,Y+20
 2989 1514 9D89      		ldd r25,Y+21
 2990 1516 892B      		or r24,r25
 2991 1518 01F4      		brne .+2
 2992 151a 00C0      		rjmp .L143
 277:lp_solve_5.5/lp_crash.c ****         break;
 278:lp_solve_5.5/lp_crash.c **** 
 279:lp_solve_5.5/lp_crash.c ****       /* Find maximal match; break ties with column length */
 280:lp_solve_5.5/lp_crash.c ****       i = firstActiveLink(colLL);
 2993               		.loc 1 280 0
 2994 151c CE01      		movw r24,r28
 2995 151e 885B      		subi r24,-72
 2996 1520 9F4F      		sbci r25,-1
 2997 1522 FC01      		movw r30,r24
 2998 1524 8081      		ld r24,Z
 2999 1526 9181      		ldd r25,Z+1
 3000 1528 0E94 0000 		call firstActiveLink
 3001 152c 9A83      		std Y+2,r25
 3002 152e 8983      		std Y+1,r24
 281:lp_solve_5.5/lp_crash.c ****       cx = i;
 3003               		.loc 1 281 0
 3004 1530 8981      		ldd r24,Y+1
 3005 1532 9A81      		ldd r25,Y+2
 3006 1534 998F      		std Y+25,r25
 3007 1536 888F      		std Y+24,r24
 282:lp_solve_5.5/lp_crash.c ****       for(i = nextActiveLink(colLL, i); i != 0; i = nextActiveLink(colLL, i)) {
 3008               		.loc 1 282 0
 3009 1538 CE01      		movw r24,r28
 3010 153a 885B      		subi r24,-72
 3011 153c 9F4F      		sbci r25,-1
 3012 153e FC01      		movw r30,r24
 3013 1540 8081      		ld r24,Z
 3014 1542 9181      		ldd r25,Z+1
 3015 1544 2981      		ldd r18,Y+1
 3016 1546 3A81      		ldd r19,Y+2
 3017 1548 B901      		movw r22,r18
 3018 154a 0E94 0000 		call nextActiveLink
 3019 154e 9A83      		std Y+2,r25
 3020 1550 8983      		std Y+1,r24
 3021 1552 00C0      		rjmp .L99
 3022               	.L102:
 283:lp_solve_5.5/lp_crash.c ****         if(merit[i] >= merit[cx]) {
 3023               		.loc 1 283 0
 3024 1554 CE01      		movw r24,r28
 3025 1556 865B      		subi r24,-74
 3026 1558 9F4F      		sbci r25,-1
 3027 155a FC01      		movw r30,r24
 3028 155c 2081      		ld r18,Z
 3029 155e 3181      		ldd r19,Z+1
 3030 1560 8981      		ldd r24,Y+1
 3031 1562 9A81      		ldd r25,Y+2
 3032 1564 880F      		lsl r24
 3033 1566 991F      		rol r25
 3034 1568 820F      		add r24,r18
 3035 156a 931F      		adc r25,r19
 3036 156c FC01      		movw r30,r24
 3037 156e 2081      		ld r18,Z
 3038 1570 3181      		ldd r19,Z+1
 3039 1572 CE01      		movw r24,r28
 3040 1574 865B      		subi r24,-74
 3041 1576 9F4F      		sbci r25,-1
 3042 1578 FC01      		movw r30,r24
 3043 157a 4081      		ld r20,Z
 3044 157c 5181      		ldd r21,Z+1
 3045 157e 888D      		ldd r24,Y+24
 3046 1580 998D      		ldd r25,Y+25
 3047 1582 880F      		lsl r24
 3048 1584 991F      		rol r25
 3049 1586 840F      		add r24,r20
 3050 1588 951F      		adc r25,r21
 3051 158a FC01      		movw r30,r24
 3052 158c 8081      		ld r24,Z
 3053 158e 9181      		ldd r25,Z+1
 3054 1590 2817      		cp r18,r24
 3055 1592 3907      		cpc r19,r25
 3056 1594 04F0      		brlt .L100
 284:lp_solve_5.5/lp_crash.c ****           if((merit[i] > merit[cx]) || (mat_collength(mat, i) > mat_collength(mat, cx)))
 3057               		.loc 1 284 0
 3058 1596 CE01      		movw r24,r28
 3059 1598 865B      		subi r24,-74
 3060 159a 9F4F      		sbci r25,-1
 3061 159c FC01      		movw r30,r24
 3062 159e 2081      		ld r18,Z
 3063 15a0 3181      		ldd r19,Z+1
 3064 15a2 8981      		ldd r24,Y+1
 3065 15a4 9A81      		ldd r25,Y+2
 3066 15a6 880F      		lsl r24
 3067 15a8 991F      		rol r25
 3068 15aa 820F      		add r24,r18
 3069 15ac 931F      		adc r25,r19
 3070 15ae FC01      		movw r30,r24
 3071 15b0 2081      		ld r18,Z
 3072 15b2 3181      		ldd r19,Z+1
 3073 15b4 CE01      		movw r24,r28
 3074 15b6 865B      		subi r24,-74
 3075 15b8 9F4F      		sbci r25,-1
 3076 15ba FC01      		movw r30,r24
 3077 15bc 4081      		ld r20,Z
 3078 15be 5181      		ldd r21,Z+1
 3079 15c0 888D      		ldd r24,Y+24
 3080 15c2 998D      		ldd r25,Y+25
 3081 15c4 880F      		lsl r24
 3082 15c6 991F      		rol r25
 3083 15c8 840F      		add r24,r20
 3084 15ca 951F      		adc r25,r21
 3085 15cc FC01      		movw r30,r24
 3086 15ce 8081      		ld r24,Z
 3087 15d0 9181      		ldd r25,Z+1
 3088 15d2 8217      		cp r24,r18
 3089 15d4 9307      		cpc r25,r19
 3090 15d6 04F0      		brlt .L101
 3091               		.loc 1 284 0 is_stmt 0 discriminator 1
 3092 15d8 2981      		ldd r18,Y+1
 3093 15da 3A81      		ldd r19,Y+2
 3094 15dc 8CA1      		ldd r24,Y+36
 3095 15de 9DA1      		ldd r25,Y+37
 3096 15e0 B901      		movw r22,r18
 3097 15e2 0E94 0000 		call mat_collength
 3098 15e6 8C01      		movw r16,r24
 3099 15e8 288D      		ldd r18,Y+24
 3100 15ea 398D      		ldd r19,Y+25
 3101 15ec 8CA1      		ldd r24,Y+36
 3102 15ee 9DA1      		ldd r25,Y+37
 3103 15f0 B901      		movw r22,r18
 3104 15f2 0E94 0000 		call mat_collength
 3105 15f6 8017      		cp r24,r16
 3106 15f8 9107      		cpc r25,r17
 3107 15fa 04F4      		brge .L100
 3108               	.L101:
 285:lp_solve_5.5/lp_crash.c ****             cx = i;
 3109               		.loc 1 285 0 is_stmt 1
 3110 15fc 8981      		ldd r24,Y+1
 3111 15fe 9A81      		ldd r25,Y+2
 3112 1600 998F      		std Y+25,r25
 3113 1602 888F      		std Y+24,r24
 3114               	.L100:
 282:lp_solve_5.5/lp_crash.c ****         if(merit[i] >= merit[cx]) {
 3115               		.loc 1 282 0 discriminator 2
 3116 1604 CE01      		movw r24,r28
 3117 1606 885B      		subi r24,-72
 3118 1608 9F4F      		sbci r25,-1
 3119 160a FC01      		movw r30,r24
 3120 160c 8081      		ld r24,Z
 3121 160e 9181      		ldd r25,Z+1
 3122 1610 2981      		ldd r18,Y+1
 3123 1612 3A81      		ldd r19,Y+2
 3124 1614 B901      		movw r22,r18
 3125 1616 0E94 0000 		call nextActiveLink
 3126 161a 9A83      		std Y+2,r25
 3127 161c 8983      		std Y+1,r24
 3128               	.L99:
 282:lp_solve_5.5/lp_crash.c ****         if(merit[i] >= merit[cx]) {
 3129               		.loc 1 282 0 is_stmt 0 discriminator 1
 3130 161e 8981      		ldd r24,Y+1
 3131 1620 9A81      		ldd r25,Y+2
 3132 1622 892B      		or r24,r25
 3133 1624 01F0      		breq .+2
 3134 1626 00C0      		rjmp .L102
 286:lp_solve_5.5/lp_crash.c ****         }
 287:lp_solve_5.5/lp_crash.c ****       }
 288:lp_solve_5.5/lp_crash.c **** 
 289:lp_solve_5.5/lp_crash.c ****       /* Determine the best pivot row */
 290:lp_solve_5.5/lp_crash.c ****       i = mat->col_end[cx-1];
 3135               		.loc 1 290 0 is_stmt 1
 3136 1628 8CA1      		ldd r24,Y+36
 3137 162a 9DA1      		ldd r25,Y+37
 3138 162c FC01      		movw r30,r24
 3139 162e 2289      		ldd r18,Z+18
 3140 1630 3389      		ldd r19,Z+19
 3141 1632 888D      		ldd r24,Y+24
 3142 1634 998D      		ldd r25,Y+25
 3143 1636 8150      		subi r24,1
 3144 1638 9048      		sbci r25,-128
 3145 163a 880F      		lsl r24
 3146 163c 991F      		rol r25
 3147 163e 820F      		add r24,r18
 3148 1640 931F      		adc r25,r19
 3149 1642 FC01      		movw r30,r24
 3150 1644 8081      		ld r24,Z
 3151 1646 9181      		ldd r25,Z+1
 3152 1648 9A83      		std Y+2,r25
 3153 164a 8983      		std Y+1,r24
 291:lp_solve_5.5/lp_crash.c ****       nz = mat->col_end[cx];
 3154               		.loc 1 291 0
 3155 164c 8CA1      		ldd r24,Y+36
 3156 164e 9DA1      		ldd r25,Y+37
 3157 1650 FC01      		movw r30,r24
 3158 1652 2289      		ldd r18,Z+18
 3159 1654 3389      		ldd r19,Z+19
 3160 1656 888D      		ldd r24,Y+24
 3161 1658 998D      		ldd r25,Y+25
 3162 165a 880F      		lsl r24
 3163 165c 991F      		rol r25
 3164 165e 820F      		add r24,r18
 3165 1660 931F      		adc r25,r19
 3166 1662 FC01      		movw r30,r24
 3167 1664 8081      		ld r24,Z
 3168 1666 9181      		ldd r25,Z+1
 3169 1668 9FA7      		std Y+47,r25
 3170 166a 8EA7      		std Y+46,r24
 292:lp_solve_5.5/lp_crash.c ****       rownr = &COL_MAT_ROWNR(i);
 3171               		.loc 1 292 0
 3172 166c 8CA1      		ldd r24,Y+36
 3173 166e 9DA1      		ldd r25,Y+37
 3174 1670 FC01      		movw r30,r24
 3175 1672 2685      		ldd r18,Z+14
 3176 1674 3785      		ldd r19,Z+15
 3177 1676 8981      		ldd r24,Y+1
 3178 1678 9A81      		ldd r25,Y+2
 3179 167a 880F      		lsl r24
 3180 167c 991F      		rol r25
 3181 167e 820F      		add r24,r18
 3182 1680 931F      		adc r25,r19
 3183 1682 99A3      		std Y+33,r25
 3184 1684 88A3      		std Y+32,r24
 293:lp_solve_5.5/lp_crash.c ****       value = &COL_MAT_VALUE(i);
 3185               		.loc 1 293 0
 3186 1686 8CA1      		ldd r24,Y+36
 3187 1688 9DA1      		ldd r25,Y+37
 3188 168a FC01      		movw r30,r24
 3189 168c 2089      		ldd r18,Z+16
 3190 168e 3189      		ldd r19,Z+17
 3191 1690 8981      		ldd r24,Y+1
 3192 1692 9A81      		ldd r25,Y+2
 3193 1694 880F      		lsl r24
 3194 1696 991F      		rol r25
 3195 1698 880F      		lsl r24
 3196 169a 991F      		rol r25
 3197 169c 820F      		add r24,r18
 3198 169e 931F      		adc r25,r19
 3199 16a0 9B8F      		std Y+27,r25
 3200 16a2 8A8F      		std Y+26,r24
 294:lp_solve_5.5/lp_crash.c ****       rx = 0;
 3201               		.loc 1 294 0
 3202 16a4 1F8A      		std Y+23,__zero_reg__
 3203 16a6 1E8A      		std Y+22,__zero_reg__
 295:lp_solve_5.5/lp_crash.c ****       wx = 0;
 3204               		.loc 1 295 0
 3205 16a8 1C8E      		std Y+28,__zero_reg__
 3206 16aa 1D8E      		std Y+29,__zero_reg__
 3207 16ac 1E8E      		std Y+30,__zero_reg__
 3208 16ae 1F8E      		std Y+31,__zero_reg__
 296:lp_solve_5.5/lp_crash.c ****       MEMCLEAR(eta, lp->rows + 1);
 3209               		.loc 1 296 0
 3210 16b0 CE01      		movw r24,r28
 3211 16b2 805B      		subi r24,-80
 3212 16b4 9F4F      		sbci r25,-1
 3213 16b6 FC01      		movw r30,r24
 3214 16b8 8081      		ld r24,Z
 3215 16ba 9181      		ldd r25,Z+1
 3216 16bc 8651      		subi r24,22
 3217 16be 9E4F      		sbci r25,-2
 3218 16c0 FC01      		movw r30,r24
 3219 16c2 8081      		ld r24,Z
 3220 16c4 9181      		ldd r25,Z+1
 3221 16c6 0196      		adiw r24,1
 3222 16c8 9C01      		movw r18,r24
 3223 16ca 220F      		lsl r18
 3224 16cc 331F      		rol r19
 3225 16ce 220F      		lsl r18
 3226 16d0 331F      		rol r19
 3227 16d2 CE01      		movw r24,r28
 3228 16d4 825B      		subi r24,-78
 3229 16d6 9F4F      		sbci r25,-1
 3230 16d8 FC01      		movw r30,r24
 3231 16da 8081      		ld r24,Z
 3232 16dc 9181      		ldd r25,Z+1
 3233 16de A901      		movw r20,r18
 3234 16e0 60E0      		ldi r22,0
 3235 16e2 70E0      		ldi r23,0
 3236 16e4 0E94 0000 		call memset
 297:lp_solve_5.5/lp_crash.c ****       for(; i < nz;
 3237               		.loc 1 297 0
 3238 16e8 00C0      		rjmp .L103
 3239               	.L106:
 298:lp_solve_5.5/lp_crash.c ****           i++, rownr += matRowColStep, value += matValueStep) {
 299:lp_solve_5.5/lp_crash.c ****         ix = *rownr;
 3240               		.loc 1 299 0
 3241 16ea 88A1      		ldd r24,Y+32
 3242 16ec 99A1      		ldd r25,Y+33
 3243 16ee FC01      		movw r30,r24
 3244 16f0 8081      		ld r24,Z
 3245 16f2 9181      		ldd r25,Z+1
 3246 16f4 99AB      		std Y+49,r25
 3247 16f6 88AB      		std Y+48,r24
 300:lp_solve_5.5/lp_crash.c ****         hold = *value;
 3248               		.loc 1 300 0
 3249 16f8 8A8D      		ldd r24,Y+26
 3250 16fa 9B8D      		ldd r25,Y+27
 3251 16fc FC01      		movw r30,r24
 3252 16fe 8081      		ld r24,Z
 3253 1700 9181      		ldd r25,Z+1
 3254 1702 A281      		ldd r26,Z+2
 3255 1704 B381      		ldd r27,Z+3
 3256 1706 8AAB      		std Y+50,r24
 3257 1708 9BAB      		std Y+51,r25
 3258 170a ACAB      		std Y+52,r26
 3259 170c BDAB      		std Y+53,r27
 301:lp_solve_5.5/lp_crash.c ****         eta[ix] = rhs[ix] / hold;
 3260               		.loc 1 301 0
 3261 170e CE01      		movw r24,r28
 3262 1710 825B      		subi r24,-78
 3263 1712 9F4F      		sbci r25,-1
 3264 1714 FC01      		movw r30,r24
 3265 1716 2081      		ld r18,Z
 3266 1718 3181      		ldd r19,Z+1
 3267 171a 88A9      		ldd r24,Y+48
 3268 171c 99A9      		ldd r25,Y+49
 3269 171e 880F      		lsl r24
 3270 1720 991F      		rol r25
 3271 1722 880F      		lsl r24
 3272 1724 991F      		rol r25
 3273 1726 8901      		movw r16,r18
 3274 1728 080F      		add r16,r24
 3275 172a 191F      		adc r17,r25
 3276 172c CE01      		movw r24,r28
 3277 172e 845B      		subi r24,-76
 3278 1730 9F4F      		sbci r25,-1
 3279 1732 FC01      		movw r30,r24
 3280 1734 2081      		ld r18,Z
 3281 1736 3181      		ldd r19,Z+1
 3282 1738 88A9      		ldd r24,Y+48
 3283 173a 99A9      		ldd r25,Y+49
 3284 173c 880F      		lsl r24
 3285 173e 991F      		rol r25
 3286 1740 880F      		lsl r24
 3287 1742 991F      		rol r25
 3288 1744 820F      		add r24,r18
 3289 1746 931F      		adc r25,r19
 3290 1748 FC01      		movw r30,r24
 3291 174a 8081      		ld r24,Z
 3292 174c 9181      		ldd r25,Z+1
 3293 174e A281      		ldd r26,Z+2
 3294 1750 B381      		ldd r27,Z+3
 3295 1752 2AA9      		ldd r18,Y+50
 3296 1754 3BA9      		ldd r19,Y+51
 3297 1756 4CA9      		ldd r20,Y+52
 3298 1758 5DA9      		ldd r21,Y+53
 3299 175a BC01      		movw r22,r24
 3300 175c CD01      		movw r24,r26
 3301 175e 0E94 0000 		call __divsf3
 3302 1762 DC01      		movw r26,r24
 3303 1764 CB01      		movw r24,r22
 3304 1766 F801      		movw r30,r16
 3305 1768 8083      		st Z,r24
 3306 176a 9183      		std Z+1,r25
 3307 176c A283      		std Z+2,r26
 3308 176e B383      		std Z+3,r27
 302:lp_solve_5.5/lp_crash.c ****         hold = fabs(hold);
 3309               		.loc 1 302 0
 3310 1770 8AA9      		ldd r24,Y+50
 3311 1772 9BA9      		ldd r25,Y+51
 3312 1774 ACA9      		ldd r26,Y+52
 3313 1776 BDA9      		ldd r27,Y+53
 3314 1778 BF77      		andi r27,0x7f
 3315 177a 8AAB      		std Y+50,r24
 3316 177c 9BAB      		std Y+51,r25
 3317 177e ACAB      		std Y+52,r26
 3318 1780 BDAB      		std Y+53,r27
 303:lp_solve_5.5/lp_crash.c ****         if(isActiveLink(rowLL, ix) && (hold > wx)) {
 3319               		.loc 1 303 0
 3320 1782 CE01      		movw r24,r28
 3321 1784 8A5B      		subi r24,-70
 3322 1786 9F4F      		sbci r25,-1
 3323 1788 FC01      		movw r30,r24
 3324 178a 8081      		ld r24,Z
 3325 178c 9181      		ldd r25,Z+1
 3326 178e 28A9      		ldd r18,Y+48
 3327 1790 39A9      		ldd r19,Y+49
 3328 1792 B901      		movw r22,r18
 3329 1794 0E94 0000 		call isActiveLink
 3330 1798 8823      		tst r24
 3331 179a 01F0      		breq .L104
 3332               		.loc 1 303 0 is_stmt 0 discriminator 1
 3333 179c 2C8D      		ldd r18,Y+28
 3334 179e 3D8D      		ldd r19,Y+29
 3335 17a0 4E8D      		ldd r20,Y+30
 3336 17a2 5F8D      		ldd r21,Y+31
 3337 17a4 6AA9      		ldd r22,Y+50
 3338 17a6 7BA9      		ldd r23,Y+51
 3339 17a8 8CA9      		ldd r24,Y+52
 3340 17aa 9DA9      		ldd r25,Y+53
 3341 17ac 0E94 0000 		call __gtsf2
 3342 17b0 1816      		cp __zero_reg__,r24
 3343 17b2 04F4      		brge .L104
 304:lp_solve_5.5/lp_crash.c ****           wx = hold;
 3344               		.loc 1 304 0 is_stmt 1
 3345 17b4 8AA9      		ldd r24,Y+50
 3346 17b6 9BA9      		ldd r25,Y+51
 3347 17b8 ACA9      		ldd r26,Y+52
 3348 17ba BDA9      		ldd r27,Y+53
 3349 17bc 8C8F      		std Y+28,r24
 3350 17be 9D8F      		std Y+29,r25
 3351 17c0 AE8F      		std Y+30,r26
 3352 17c2 BF8F      		std Y+31,r27
 305:lp_solve_5.5/lp_crash.c ****           rx = ix;
 3353               		.loc 1 305 0
 3354 17c4 88A9      		ldd r24,Y+48
 3355 17c6 99A9      		ldd r25,Y+49
 3356 17c8 9F8B      		std Y+23,r25
 3357 17ca 8E8B      		std Y+22,r24
 3358               	.L104:
 298:lp_solve_5.5/lp_crash.c ****         ix = *rownr;
 3359               		.loc 1 298 0
 3360 17cc 8981      		ldd r24,Y+1
 3361 17ce 9A81      		ldd r25,Y+2
 3362 17d0 0196      		adiw r24,1
 3363 17d2 9A83      		std Y+2,r25
 3364 17d4 8983      		std Y+1,r24
 3365 17d6 88A1      		ldd r24,Y+32
 3366 17d8 99A1      		ldd r25,Y+33
 3367 17da 0296      		adiw r24,2
 3368 17dc 99A3      		std Y+33,r25
 3369 17de 88A3      		std Y+32,r24
 3370 17e0 8A8D      		ldd r24,Y+26
 3371 17e2 9B8D      		ldd r25,Y+27
 3372 17e4 0496      		adiw r24,4
 3373 17e6 9B8F      		std Y+27,r25
 3374 17e8 8A8F      		std Y+26,r24
 3375               	.L103:
 297:lp_solve_5.5/lp_crash.c ****           i++, rownr += matRowColStep, value += matValueStep) {
 3376               		.loc 1 297 0
 3377 17ea 2981      		ldd r18,Y+1
 3378 17ec 3A81      		ldd r19,Y+2
 3379 17ee 8EA5      		ldd r24,Y+46
 3380 17f0 9FA5      		ldd r25,Y+47
 3381 17f2 2817      		cp r18,r24
 3382 17f4 3907      		cpc r19,r25
 3383 17f6 04F4      		brge .+2
 3384 17f8 00C0      		rjmp .L106
 306:lp_solve_5.5/lp_crash.c ****         }
 307:lp_solve_5.5/lp_crash.c ****       }
 308:lp_solve_5.5/lp_crash.c **** 
 309:lp_solve_5.5/lp_crash.c ****       /* Set new basis variable */
 310:lp_solve_5.5/lp_crash.c ****       if(rx > 0) {
 3385               		.loc 1 310 0
 3386 17fa 8E89      		ldd r24,Y+22
 3387 17fc 9F89      		ldd r25,Y+23
 3388 17fe 1816      		cp __zero_reg__,r24
 3389 1800 1906      		cpc __zero_reg__,r25
 3390 1802 04F0      		brlt .+2
 3391 1804 00C0      		rjmp .L107
 311:lp_solve_5.5/lp_crash.c **** 
 312:lp_solve_5.5/lp_crash.c ****         /* We have to update the rhs vector for the implied transformation
 313:lp_solve_5.5/lp_crash.c ****           in order to be able to find the new RHS non-zero pattern */
 314:lp_solve_5.5/lp_crash.c ****         for(i = 1; i <= lp->rows; i++)
 3392               		.loc 1 314 0
 3393 1806 81E0      		ldi r24,lo8(1)
 3394 1808 90E0      		ldi r25,0
 3395 180a 9A83      		std Y+2,r25
 3396 180c 8983      		std Y+1,r24
 3397 180e 00C0      		rjmp .L108
 3398               	.L109:
 315:lp_solve_5.5/lp_crash.c ****            rhs[i] -= wx * eta[i];
 3399               		.loc 1 315 0 discriminator 3
 3400 1810 CE01      		movw r24,r28
 3401 1812 845B      		subi r24,-76
 3402 1814 9F4F      		sbci r25,-1
 3403 1816 FC01      		movw r30,r24
 3404 1818 2081      		ld r18,Z
 3405 181a 3181      		ldd r19,Z+1
 3406 181c 8981      		ldd r24,Y+1
 3407 181e 9A81      		ldd r25,Y+2
 3408 1820 880F      		lsl r24
 3409 1822 991F      		rol r25
 3410 1824 880F      		lsl r24
 3411 1826 991F      		rol r25
 3412 1828 8901      		movw r16,r18
 3413 182a 080F      		add r16,r24
 3414 182c 191F      		adc r17,r25
 3415 182e CE01      		movw r24,r28
 3416 1830 845B      		subi r24,-76
 3417 1832 9F4F      		sbci r25,-1
 3418 1834 FC01      		movw r30,r24
 3419 1836 2081      		ld r18,Z
 3420 1838 3181      		ldd r19,Z+1
 3421 183a 8981      		ldd r24,Y+1
 3422 183c 9A81      		ldd r25,Y+2
 3423 183e 880F      		lsl r24
 3424 1840 991F      		rol r25
 3425 1842 880F      		lsl r24
 3426 1844 991F      		rol r25
 3427 1846 820F      		add r24,r18
 3428 1848 931F      		adc r25,r19
 3429 184a FC01      		movw r30,r24
 3430 184c C080      		ld r12,Z
 3431 184e D180      		ldd r13,Z+1
 3432 1850 E280      		ldd r14,Z+2
 3433 1852 F380      		ldd r15,Z+3
 3434 1854 CE01      		movw r24,r28
 3435 1856 825B      		subi r24,-78
 3436 1858 9F4F      		sbci r25,-1
 3437 185a FC01      		movw r30,r24
 3438 185c 2081      		ld r18,Z
 3439 185e 3181      		ldd r19,Z+1
 3440 1860 8981      		ldd r24,Y+1
 3441 1862 9A81      		ldd r25,Y+2
 3442 1864 880F      		lsl r24
 3443 1866 991F      		rol r25
 3444 1868 880F      		lsl r24
 3445 186a 991F      		rol r25
 3446 186c 820F      		add r24,r18
 3447 186e 931F      		adc r25,r19
 3448 1870 FC01      		movw r30,r24
 3449 1872 8081      		ld r24,Z
 3450 1874 9181      		ldd r25,Z+1
 3451 1876 A281      		ldd r26,Z+2
 3452 1878 B381      		ldd r27,Z+3
 3453 187a 2C8D      		ldd r18,Y+28
 3454 187c 3D8D      		ldd r19,Y+29
 3455 187e 4E8D      		ldd r20,Y+30
 3456 1880 5F8D      		ldd r21,Y+31
 3457 1882 BC01      		movw r22,r24
 3458 1884 CD01      		movw r24,r26
 3459 1886 0E94 0000 		call __mulsf3
 3460 188a DC01      		movw r26,r24
 3461 188c CB01      		movw r24,r22
 3462 188e 9C01      		movw r18,r24
 3463 1890 AD01      		movw r20,r26
 3464 1892 C701      		movw r24,r14
 3465 1894 B601      		movw r22,r12
 3466 1896 0E94 0000 		call __subsf3
 3467 189a DC01      		movw r26,r24
 3468 189c CB01      		movw r24,r22
 3469 189e F801      		movw r30,r16
 3470 18a0 8083      		st Z,r24
 3471 18a2 9183      		std Z+1,r25
 3472 18a4 A283      		std Z+2,r26
 3473 18a6 B383      		std Z+3,r27
 314:lp_solve_5.5/lp_crash.c ****            rhs[i] -= wx * eta[i];
 3474               		.loc 1 314 0 discriminator 3
 3475 18a8 8981      		ldd r24,Y+1
 3476 18aa 9A81      		ldd r25,Y+2
 3477 18ac 0196      		adiw r24,1
 3478 18ae 9A83      		std Y+2,r25
 3479 18b0 8983      		std Y+1,r24
 3480               	.L108:
 314:lp_solve_5.5/lp_crash.c ****            rhs[i] -= wx * eta[i];
 3481               		.loc 1 314 0 is_stmt 0 discriminator 1
 3482 18b2 CE01      		movw r24,r28
 3483 18b4 805B      		subi r24,-80
 3484 18b6 9F4F      		sbci r25,-1
 3485 18b8 FC01      		movw r30,r24
 3486 18ba 8081      		ld r24,Z
 3487 18bc 9181      		ldd r25,Z+1
 3488 18be 8651      		subi r24,22
 3489 18c0 9E4F      		sbci r25,-2
 3490 18c2 FC01      		movw r30,r24
 3491 18c4 2081      		ld r18,Z
 3492 18c6 3181      		ldd r19,Z+1
 3493 18c8 8981      		ldd r24,Y+1
 3494 18ca 9A81      		ldd r25,Y+2
 3495 18cc 2817      		cp r18,r24
 3496 18ce 3907      		cpc r19,r25
 3497 18d0 04F0      		brlt .+2
 3498 18d2 00C0      		rjmp .L109
 316:lp_solve_5.5/lp_crash.c ****         rhs[rx] = wx;
 3499               		.loc 1 316 0 is_stmt 1
 3500 18d4 CE01      		movw r24,r28
 3501 18d6 845B      		subi r24,-76
 3502 18d8 9F4F      		sbci r25,-1
 3503 18da FC01      		movw r30,r24
 3504 18dc 2081      		ld r18,Z
 3505 18de 3181      		ldd r19,Z+1
 3506 18e0 8E89      		ldd r24,Y+22
 3507 18e2 9F89      		ldd r25,Y+23
 3508 18e4 880F      		lsl r24
 3509 18e6 991F      		rol r25
 3510 18e8 880F      		lsl r24
 3511 18ea 991F      		rol r25
 3512 18ec 280F      		add r18,r24
 3513 18ee 391F      		adc r19,r25
 3514 18f0 8C8D      		ldd r24,Y+28
 3515 18f2 9D8D      		ldd r25,Y+29
 3516 18f4 AE8D      		ldd r26,Y+30
 3517 18f6 BF8D      		ldd r27,Y+31
 3518 18f8 F901      		movw r30,r18
 3519 18fa 8083      		st Z,r24
 3520 18fc 9183      		std Z+1,r25
 3521 18fe A283      		std Z+2,r26
 3522 1900 B383      		std Z+3,r27
 317:lp_solve_5.5/lp_crash.c **** 
 318:lp_solve_5.5/lp_crash.c ****         /* Do the exchange */
 319:lp_solve_5.5/lp_crash.c ****         set_basisvar(lp, rx, lp->rows+cx);
 3523               		.loc 1 319 0
 3524 1902 CE01      		movw r24,r28
 3525 1904 805B      		subi r24,-80
 3526 1906 9F4F      		sbci r25,-1
 3527 1908 FC01      		movw r30,r24
 3528 190a 8081      		ld r24,Z
 3529 190c 9181      		ldd r25,Z+1
 3530 190e 8651      		subi r24,22
 3531 1910 9E4F      		sbci r25,-2
 3532 1912 FC01      		movw r30,r24
 3533 1914 2081      		ld r18,Z
 3534 1916 3181      		ldd r19,Z+1
 3535 1918 888D      		ldd r24,Y+24
 3536 191a 998D      		ldd r25,Y+25
 3537 191c A901      		movw r20,r18
 3538 191e 480F      		add r20,r24
 3539 1920 591F      		adc r21,r25
 3540 1922 2E89      		ldd r18,Y+22
 3541 1924 3F89      		ldd r19,Y+23
 3542 1926 CE01      		movw r24,r28
 3543 1928 805B      		subi r24,-80
 3544 192a 9F4F      		sbci r25,-1
 3545 192c FC01      		movw r30,r24
 3546 192e 8081      		ld r24,Z
 3547 1930 9181      		ldd r25,Z+1
 3548 1932 B901      		movw r22,r18
 3549 1934 0E94 0000 		call set_basisvar
 320:lp_solve_5.5/lp_crash.c ****         removeLink(rowLL, rx);
 3550               		.loc 1 320 0
 3551 1938 CE01      		movw r24,r28
 3552 193a 8A5B      		subi r24,-70
 3553 193c 9F4F      		sbci r25,-1
 3554 193e FC01      		movw r30,r24
 3555 1940 8081      		ld r24,Z
 3556 1942 9181      		ldd r25,Z+1
 3557 1944 2E89      		ldd r18,Y+22
 3558 1946 3F89      		ldd r19,Y+23
 3559 1948 B901      		movw r22,r18
 3560 194a 0E94 0000 		call removeLink
 3561               	.L107:
 321:lp_solve_5.5/lp_crash.c ****       }
 322:lp_solve_5.5/lp_crash.c ****       removeLink(colLL, cx);
 3562               		.loc 1 322 0
 3563 194e CE01      		movw r24,r28
 3564 1950 885B      		subi r24,-72
 3565 1952 9F4F      		sbci r25,-1
 3566 1954 FC01      		movw r30,r24
 3567 1956 8081      		ld r24,Z
 3568 1958 9181      		ldd r25,Z+1
 3569 195a 288D      		ldd r18,Y+24
 3570 195c 398D      		ldd r19,Y+25
 3571 195e B901      		movw r22,r18
 3572 1960 0E94 0000 		call removeLink
 3573               	.L93:
 259:lp_solve_5.5/lp_crash.c **** 
 3574               		.loc 1 259 0
 3575 1964 CE01      		movw r24,r28
 3576 1966 885B      		subi r24,-72
 3577 1968 9F4F      		sbci r25,-1
 3578 196a FC01      		movw r30,r24
 3579 196c 8081      		ld r24,Z
 3580 196e 9181      		ldd r25,Z+1
 3581 1970 FC01      		movw r30,r24
 3582 1972 8281      		ldd r24,Z+2
 3583 1974 9381      		ldd r25,Z+3
 3584 1976 1816      		cp __zero_reg__,r24
 3585 1978 1906      		cpc __zero_reg__,r25
 3586 197a 04F4      		brge .+2
 3587 197c 00C0      		rjmp .L110
 3588 197e 00C0      		rjmp .L88
 3589               	.L142:
 251:lp_solve_5.5/lp_crash.c ****     MEMCOPY(rhs, lp->orig_rhs, lp->rows + 1);
 3590               		.loc 1 251 0
 3591 1980 0000      		nop
 3592 1982 00C0      		rjmp .L88
 3593               	.L143:
 277:lp_solve_5.5/lp_crash.c **** 
 3594               		.loc 1 277 0
 3595 1984 0000      		nop
 3596               	.L88:
 323:lp_solve_5.5/lp_crash.c **** 
 324:lp_solve_5.5/lp_crash.c ****     }
 325:lp_solve_5.5/lp_crash.c **** 
 326:lp_solve_5.5/lp_crash.c ****     /* Clean up */
 327:lp_solve_5.5/lp_crash.c **** FinishLD:
 328:lp_solve_5.5/lp_crash.c ****     FREE(merit);
 3597               		.loc 1 328 0
 3598 1986 CE01      		movw r24,r28
 3599 1988 865B      		subi r24,-74
 3600 198a 9F4F      		sbci r25,-1
 3601 198c FC01      		movw r30,r24
 3602 198e 8081      		ld r24,Z
 3603 1990 9181      		ldd r25,Z+1
 3604 1992 892B      		or r24,r25
 3605 1994 01F0      		breq .L111
 3606               		.loc 1 328 0 is_stmt 0 discriminator 1
 3607 1996 CE01      		movw r24,r28
 3608 1998 865B      		subi r24,-74
 3609 199a 9F4F      		sbci r25,-1
 3610 199c FC01      		movw r30,r24
 3611 199e 8081      		ld r24,Z
 3612 19a0 9181      		ldd r25,Z+1
 3613 19a2 0E94 0000 		call free
 3614 19a6 CE01      		movw r24,r28
 3615 19a8 865B      		subi r24,-74
 3616 19aa 9F4F      		sbci r25,-1
 3617 19ac FC01      		movw r30,r24
 3618 19ae 1182      		std Z+1,__zero_reg__
 3619 19b0 1082      		st Z,__zero_reg__
 3620               	.L111:
 329:lp_solve_5.5/lp_crash.c ****     FREE(rhs);
 3621               		.loc 1 329 0 is_stmt 1
 3622 19b2 CE01      		movw r24,r28
 3623 19b4 845B      		subi r24,-76
 3624 19b6 9F4F      		sbci r25,-1
 3625 19b8 FC01      		movw r30,r24
 3626 19ba 8081      		ld r24,Z
 3627 19bc 9181      		ldd r25,Z+1
 3628 19be 892B      		or r24,r25
 3629 19c0 01F0      		breq .L112
 3630               		.loc 1 329 0 is_stmt 0 discriminator 1
 3631 19c2 CE01      		movw r24,r28
 3632 19c4 845B      		subi r24,-76
 3633 19c6 9F4F      		sbci r25,-1
 3634 19c8 FC01      		movw r30,r24
 3635 19ca 8081      		ld r24,Z
 3636 19cc 9181      		ldd r25,Z+1
 3637 19ce 0E94 0000 		call free
 3638 19d2 CE01      		movw r24,r28
 3639 19d4 845B      		subi r24,-76
 3640 19d6 9F4F      		sbci r25,-1
 3641 19d8 FC01      		movw r30,r24
 3642 19da 1182      		std Z+1,__zero_reg__
 3643 19dc 1082      		st Z,__zero_reg__
 3644               	.L112:
 330:lp_solve_5.5/lp_crash.c ****     freeLink(&rowLL);
 3645               		.loc 1 330 0 is_stmt 1
 3646 19de CE01      		movw r24,r28
 3647 19e0 8A5B      		subi r24,-70
 3648 19e2 9F4F      		sbci r25,-1
 3649 19e4 0E94 0000 		call freeLink
 331:lp_solve_5.5/lp_crash.c ****     freeLink(&colLL);
 3650               		.loc 1 331 0
 3651 19e8 CE01      		movw r24,r28
 3652 19ea 885B      		subi r24,-72
 3653 19ec 9F4F      		sbci r25,-1
 3654 19ee 0E94 0000 		call freeLink
 3655               	.L82:
 3656               	.LBE3:
 332:lp_solve_5.5/lp_crash.c **** 
 333:lp_solve_5.5/lp_crash.c ****   }
 334:lp_solve_5.5/lp_crash.c ****   return( ok );
 3657               		.loc 1 334 0
 3658 19f2 8B81      		ldd r24,Y+3
 3659               	/* epilogue start */
 335:lp_solve_5.5/lp_crash.c **** }
 3660               		.loc 1 335 0
 3661 19f4 CF5A      		subi r28,-81
 3662 19f6 DF4F      		sbci r29,-1
 3663 19f8 0FB6      		in __tmp_reg__,__SREG__
 3664 19fa F894      		cli
 3665 19fc DEBF      		out __SP_H__,r29
 3666 19fe 0FBE      		out __SREG__,__tmp_reg__
 3667 1a00 CDBF      		out __SP_L__,r28
 3668 1a02 DF91      		pop r29
 3669 1a04 CF91      		pop r28
 3670 1a06 1F91      		pop r17
 3671 1a08 0F91      		pop r16
 3672 1a0a FF90      		pop r15
 3673 1a0c EF90      		pop r14
 3674 1a0e DF90      		pop r13
 3675 1a10 CF90      		pop r12
 3676 1a12 0895      		ret
 3677               		.cfi_endproc
 3678               	.LFE7:
 3680               		.section	.rodata
 3681               	.LC2:
 3682 006f 6775 6573 		.string	"guess_basis: Internal error"
 3682      735F 6261 
 3682      7369 733A 
 3682      2049 6E74 
 3682      6572 6E61 
 3683               		.text
 3684               	.global	guess_basis
 3686               	guess_basis:
 3687               	.LFB8:
 336:lp_solve_5.5/lp_crash.c **** 
 337:lp_solve_5.5/lp_crash.c **** #if 0
 338:lp_solve_5.5/lp_crash.c **** MYBOOL __WINAPI guess_basis(lprec *lp, REAL *guessvector, int *basisvector)
 339:lp_solve_5.5/lp_crash.c **** {
 340:lp_solve_5.5/lp_crash.c ****   MYBOOL status = FALSE;
 341:lp_solve_5.5/lp_crash.c ****   REAL   *values = NULL, *violation = NULL,
 342:lp_solve_5.5/lp_crash.c ****          *value, error, upB, loB, sortorder = 1.0;
 343:lp_solve_5.5/lp_crash.c ****   int    i, n, *rownr, *colnr;
 344:lp_solve_5.5/lp_crash.c ****   MATrec *mat = lp->matA;
 345:lp_solve_5.5/lp_crash.c **** 
 346:lp_solve_5.5/lp_crash.c ****   if(!mat_validate(lp->matA))
 347:lp_solve_5.5/lp_crash.c ****     return( status );
 348:lp_solve_5.5/lp_crash.c **** 
 349:lp_solve_5.5/lp_crash.c ****   /* Create helper arrays */
 350:lp_solve_5.5/lp_crash.c ****   if(!allocREAL(lp, &values, lp->sum+1, TRUE) ||
 351:lp_solve_5.5/lp_crash.c ****      !allocREAL(lp, &violation, lp->sum+1, TRUE))
 352:lp_solve_5.5/lp_crash.c ****     goto Finish;
 353:lp_solve_5.5/lp_crash.c **** 
 354:lp_solve_5.5/lp_crash.c ****   /* Compute values of slack variables for given guess vector */
 355:lp_solve_5.5/lp_crash.c ****   i = 0;
 356:lp_solve_5.5/lp_crash.c ****   n = get_nonzeros(lp);
 357:lp_solve_5.5/lp_crash.c ****   rownr = &COL_MAT_ROWNR(i);
 358:lp_solve_5.5/lp_crash.c ****   colnr = &COL_MAT_COLNR(i);
 359:lp_solve_5.5/lp_crash.c ****   value = &COL_MAT_VALUE(i);
 360:lp_solve_5.5/lp_crash.c ****   for(; i < n; i++, rownr += matRowColStep, colnr += matRowColStep, value += matValueStep)
 361:lp_solve_5.5/lp_crash.c ****     values[*rownr] += unscaled_mat(lp, my_chsign(is_chsign(lp, *rownr), *value), *rownr, *colnr) *
 362:lp_solve_5.5/lp_crash.c ****                       guessvector[*colnr];
 363:lp_solve_5.5/lp_crash.c ****   MEMMOVE(values+lp->rows+1, guessvector+1, lp->columns);
 364:lp_solve_5.5/lp_crash.c **** 
 365:lp_solve_5.5/lp_crash.c ****   /* Initialize constraint bound violation measures */
 366:lp_solve_5.5/lp_crash.c ****   for(i = 1; i <= lp->rows; i++) {
 367:lp_solve_5.5/lp_crash.c ****     upB = get_rh_upper(lp, i);
 368:lp_solve_5.5/lp_crash.c ****     loB = get_rh_lower(lp, i);
 369:lp_solve_5.5/lp_crash.c ****     error = values[i] - upB;
 370:lp_solve_5.5/lp_crash.c ****     if(error > lp->epsprimal)
 371:lp_solve_5.5/lp_crash.c ****       violation[i] = sortorder*error;
 372:lp_solve_5.5/lp_crash.c ****     else {
 373:lp_solve_5.5/lp_crash.c ****       error = loB - values[i];
 374:lp_solve_5.5/lp_crash.c ****       if(error > lp->epsprimal)
 375:lp_solve_5.5/lp_crash.c ****         violation[i] = sortorder*error;
 376:lp_solve_5.5/lp_crash.c ****       else if(is_infinite(lp, loB) && is_infinite(lp, upB))
 377:lp_solve_5.5/lp_crash.c ****         ;
 378:lp_solve_5.5/lp_crash.c ****       else if(is_infinite(lp, upB))
 379:lp_solve_5.5/lp_crash.c ****         violation[i] = sortorder*(loB - values[i]);
 380:lp_solve_5.5/lp_crash.c ****       else if(is_infinite(lp, loB))
 381:lp_solve_5.5/lp_crash.c ****         violation[i] = sortorder*(values[i] - upB);
 382:lp_solve_5.5/lp_crash.c ****       else
 383:lp_solve_5.5/lp_crash.c ****         violation[i] = - sortorder*MAX(upB - values[i], values[i] - loB);
 384:lp_solve_5.5/lp_crash.c ****     }
 385:lp_solve_5.5/lp_crash.c ****     basisvector[i] = i;
 386:lp_solve_5.5/lp_crash.c ****   }
 387:lp_solve_5.5/lp_crash.c **** 
 388:lp_solve_5.5/lp_crash.c ****   /* Initialize user variable bound violation measures */
 389:lp_solve_5.5/lp_crash.c ****   for(i = 1; i <= lp->columns; i++) {
 390:lp_solve_5.5/lp_crash.c ****     n = lp->rows+i;
 391:lp_solve_5.5/lp_crash.c ****     upB = get_upbo(lp, i);
 392:lp_solve_5.5/lp_crash.c ****     loB = get_lowbo(lp, i);
 393:lp_solve_5.5/lp_crash.c ****     error = guessvector[i] - upB;
 394:lp_solve_5.5/lp_crash.c ****     if(error > lp->epsprimal)
 395:lp_solve_5.5/lp_crash.c ****       violation[n] = sortorder*error;
 396:lp_solve_5.5/lp_crash.c ****     else {
 397:lp_solve_5.5/lp_crash.c ****       error = loB - values[n];
 398:lp_solve_5.5/lp_crash.c ****       if(error > lp->epsprimal)
 399:lp_solve_5.5/lp_crash.c ****         violation[n] = sortorder*error;
 400:lp_solve_5.5/lp_crash.c ****       else if(is_infinite(lp, loB) && is_infinite(lp, upB))
 401:lp_solve_5.5/lp_crash.c ****         ;
 402:lp_solve_5.5/lp_crash.c ****       else if(is_infinite(lp, upB))
 403:lp_solve_5.5/lp_crash.c ****         violation[n] = sortorder*(loB - values[n]);
 404:lp_solve_5.5/lp_crash.c ****       else if(is_infinite(lp, loB))
 405:lp_solve_5.5/lp_crash.c ****         violation[n] = sortorder*(values[n] - upB);
 406:lp_solve_5.5/lp_crash.c ****       else
 407:lp_solve_5.5/lp_crash.c ****         violation[n] = - sortorder*MAX(upB - values[n], values[n] - loB);
 408:lp_solve_5.5/lp_crash.c ****     }
 409:lp_solve_5.5/lp_crash.c ****     basisvector[n] = n;
 410:lp_solve_5.5/lp_crash.c ****   }
 411:lp_solve_5.5/lp_crash.c **** 
 412:lp_solve_5.5/lp_crash.c ****   /* Sort decending by violation; this means that variables with
 413:lp_solve_5.5/lp_crash.c ****      the largest violations will be designated as basic */
 414:lp_solve_5.5/lp_crash.c ****   sortByREAL(basisvector, violation, lp->sum, 1, FALSE);
 415:lp_solve_5.5/lp_crash.c **** 
 416:lp_solve_5.5/lp_crash.c ****   /* Adjust the non-basic indeces for the (proximal) bound state */
 417:lp_solve_5.5/lp_crash.c ****   error = lp->epsprimal;
 418:lp_solve_5.5/lp_crash.c ****   for(i = lp->rows+1, rownr = basisvector+i; i <= lp->sum; i++, rownr++) {
 419:lp_solve_5.5/lp_crash.c ****     if(*rownr <= lp->rows) {
 420:lp_solve_5.5/lp_crash.c ****       if(values[*rownr] <= get_rh_lower(lp, *rownr)+error)
 421:lp_solve_5.5/lp_crash.c ****         *rownr = -(*rownr);
 422:lp_solve_5.5/lp_crash.c ****     }
 423:lp_solve_5.5/lp_crash.c ****     else
 424:lp_solve_5.5/lp_crash.c ****       if(values[i] <= get_lowbo(lp, (*rownr)-lp->rows)+error)
 425:lp_solve_5.5/lp_crash.c ****         *rownr = -(*rownr);
 426:lp_solve_5.5/lp_crash.c ****   }
 427:lp_solve_5.5/lp_crash.c **** 
 428:lp_solve_5.5/lp_crash.c ****   /* Clean up and return status */
 429:lp_solve_5.5/lp_crash.c ****   status = (MYBOOL) (violation[1] == 0);
 430:lp_solve_5.5/lp_crash.c **** Finish:
 431:lp_solve_5.5/lp_crash.c ****   FREE(values);
 432:lp_solve_5.5/lp_crash.c ****   FREE(violation);
 433:lp_solve_5.5/lp_crash.c **** 
 434:lp_solve_5.5/lp_crash.c **** 
 435:lp_solve_5.5/lp_crash.c ****   return( status );
 436:lp_solve_5.5/lp_crash.c **** }
 437:lp_solve_5.5/lp_crash.c **** #endif
 438:lp_solve_5.5/lp_crash.c **** 
 439:lp_solve_5.5/lp_crash.c **** #if 0
 440:lp_solve_5.5/lp_crash.c **** MYBOOL __WINAPI guess_basis(lprec *lp, REAL *guessvector, int *basisvector)
 441:lp_solve_5.5/lp_crash.c **** {
 442:lp_solve_5.5/lp_crash.c ****   MYBOOL *isnz, status = FALSE;
 443:lp_solve_5.5/lp_crash.c ****   REAL   *values = NULL, *violation = NULL,
 444:lp_solve_5.5/lp_crash.c ****          eps = lp->epsprimal,
 445:lp_solve_5.5/lp_crash.c ****          *value, error, upB, loB, sortorder = 1.0;
 446:lp_solve_5.5/lp_crash.c ****   int    i, j, n, *rownr, *colnr, *slkpos,
 447:lp_solve_5.5/lp_crash.c ****          nrows = lp->rows, ncols = lp->columns;
 448:lp_solve_5.5/lp_crash.c ****   MATrec *mat = lp->matA;
 449:lp_solve_5.5/lp_crash.c **** 
 450:lp_solve_5.5/lp_crash.c ****   if(!mat_validate(mat))
 451:lp_solve_5.5/lp_crash.c ****     return( status );
 452:lp_solve_5.5/lp_crash.c **** 
 453:lp_solve_5.5/lp_crash.c ****   /* Create helper arrays */
 454:lp_solve_5.5/lp_crash.c ****   if(!allocREAL(lp, &values, lp->sum+1, TRUE) ||
 455:lp_solve_5.5/lp_crash.c ****      !allocREAL(lp, &violation, lp->sum+1, TRUE))
 456:lp_solve_5.5/lp_crash.c ****     goto Finish;
 457:lp_solve_5.5/lp_crash.c **** 
 458:lp_solve_5.5/lp_crash.c ****   /* Compute values of slack variables for given guess vector */
 459:lp_solve_5.5/lp_crash.c ****   i = 0;
 460:lp_solve_5.5/lp_crash.c ****   n = get_nonzeros(lp);
 461:lp_solve_5.5/lp_crash.c ****   rownr = &COL_MAT_ROWNR(i);
 462:lp_solve_5.5/lp_crash.c ****   colnr = &COL_MAT_COLNR(i);
 463:lp_solve_5.5/lp_crash.c ****   value = &COL_MAT_VALUE(i);
 464:lp_solve_5.5/lp_crash.c ****   for(; i < n; i++, rownr += matRowColStep, colnr += matRowColStep, value += matValueStep)
 465:lp_solve_5.5/lp_crash.c ****     values[*rownr] += unscaled_mat(lp, my_chsign(is_chsign(lp, *rownr), *value), *rownr, *colnr) *
 466:lp_solve_5.5/lp_crash.c ****                       guessvector[*colnr];
 467:lp_solve_5.5/lp_crash.c ****   MEMMOVE(values+nrows+1, guessvector+1, ncols);
 468:lp_solve_5.5/lp_crash.c **** 
 469:lp_solve_5.5/lp_crash.c ****   /* Initialize constraint bound violation measures (expressed as positive values) */
 470:lp_solve_5.5/lp_crash.c ****   for(i = 1; i <= nrows; i++) {
 471:lp_solve_5.5/lp_crash.c ****     upB = get_rh_upper(lp, i);
 472:lp_solve_5.5/lp_crash.c ****     loB = get_rh_lower(lp, i);
 473:lp_solve_5.5/lp_crash.c ****     error = values[i] - upB;
 474:lp_solve_5.5/lp_crash.c ****     if(error > eps)
 475:lp_solve_5.5/lp_crash.c ****       violation[i] = sortorder*error;
 476:lp_solve_5.5/lp_crash.c ****     else {
 477:lp_solve_5.5/lp_crash.c ****       error = loB - values[i];
 478:lp_solve_5.5/lp_crash.c ****       if(error > eps)
 479:lp_solve_5.5/lp_crash.c ****         violation[i] = sortorder*error;
 480:lp_solve_5.5/lp_crash.c ****       else if(my_infinite(lp, loB) && my_infinite(lp, upB))
 481:lp_solve_5.5/lp_crash.c ****         ;
 482:lp_solve_5.5/lp_crash.c ****       else if(my_infinite(lp, upB))
 483:lp_solve_5.5/lp_crash.c ****         violation[i] = sortorder*(loB - values[i]);
 484:lp_solve_5.5/lp_crash.c ****       else if(my_infinite(lp, loB))
 485:lp_solve_5.5/lp_crash.c ****         violation[i] = sortorder*(values[i] - upB);
 486:lp_solve_5.5/lp_crash.c ****       else
 487:lp_solve_5.5/lp_crash.c ****         violation[i] = -sortorder*MAX(upB - values[i], values[i] - loB);
 488:lp_solve_5.5/lp_crash.c ****     }
 489:lp_solve_5.5/lp_crash.c ****     basisvector[i] = i;
 490:lp_solve_5.5/lp_crash.c ****   }
 491:lp_solve_5.5/lp_crash.c **** 
 492:lp_solve_5.5/lp_crash.c ****   /* Initialize user variable bound violation measures (expressed as positive values) */
 493:lp_solve_5.5/lp_crash.c ****   for(i = 1; i <= ncols; i++) {
 494:lp_solve_5.5/lp_crash.c ****     n = nrows+i;
 495:lp_solve_5.5/lp_crash.c ****     upB = get_upbo(lp, i);
 496:lp_solve_5.5/lp_crash.c ****     loB = get_lowbo(lp, i);
 497:lp_solve_5.5/lp_crash.c ****     error = guessvector[i] - upB;
 498:lp_solve_5.5/lp_crash.c ****     if(error > eps)
 499:lp_solve_5.5/lp_crash.c ****       violation[n] = sortorder*error;
 500:lp_solve_5.5/lp_crash.c ****     else {
 501:lp_solve_5.5/lp_crash.c ****       error = loB - values[n];
 502:lp_solve_5.5/lp_crash.c ****       if(error > eps)
 503:lp_solve_5.5/lp_crash.c ****         violation[n] = sortorder*error;
 504:lp_solve_5.5/lp_crash.c ****       else if(my_infinite(lp, loB) && my_infinite(lp, upB))
 505:lp_solve_5.5/lp_crash.c ****         ;
 506:lp_solve_5.5/lp_crash.c ****       else if(my_infinite(lp, upB))
 507:lp_solve_5.5/lp_crash.c ****         violation[n] = sortorder*(loB - values[n]);
 508:lp_solve_5.5/lp_crash.c ****       else if(my_infinite(lp, loB))
 509:lp_solve_5.5/lp_crash.c ****         violation[n] = sortorder*(values[n] - upB);
 510:lp_solve_5.5/lp_crash.c ****       else
 511:lp_solve_5.5/lp_crash.c ****         violation[n] = -sortorder*MAX(upB - values[n], values[n] - loB);
 512:lp_solve_5.5/lp_crash.c ****     }
 513:lp_solve_5.5/lp_crash.c ****     basisvector[n] = n;
 514:lp_solve_5.5/lp_crash.c ****   }
 515:lp_solve_5.5/lp_crash.c **** 
 516:lp_solve_5.5/lp_crash.c ****   /* Sort decending by violation; this means that variables with
 517:lp_solve_5.5/lp_crash.c ****      the largest violations will be designated as basic */
 518:lp_solve_5.5/lp_crash.c ****   sortByREAL(basisvector, violation, lp->sum, 1, FALSE);
 519:lp_solve_5.5/lp_crash.c ****   error = violation[1];
 520:lp_solve_5.5/lp_crash.c **** 
 521:lp_solve_5.5/lp_crash.c ****   /* Adjust the non-basic indeces for the (proximal) bound state */
 522:lp_solve_5.5/lp_crash.c ****   for(i = nrows+1, rownr = basisvector+i; i <= lp->sum; i++, rownr++) {
 523:lp_solve_5.5/lp_crash.c ****     if(*rownr <= nrows) {
 524:lp_solve_5.5/lp_crash.c ****       if(values[*rownr] <= get_rh_lower(lp, *rownr)+eps)
 525:lp_solve_5.5/lp_crash.c ****         *rownr = -(*rownr);
 526:lp_solve_5.5/lp_crash.c ****     }
 527:lp_solve_5.5/lp_crash.c ****     else
 528:lp_solve_5.5/lp_crash.c ****       if(values[i] <= get_lowbo(lp, (*rownr)-nrows)+eps)
 529:lp_solve_5.5/lp_crash.c ****         *rownr = -(*rownr);
 530:lp_solve_5.5/lp_crash.c ****   }
 531:lp_solve_5.5/lp_crash.c **** 
 532:lp_solve_5.5/lp_crash.c **** #if 1
 533:lp_solve_5.5/lp_crash.c ****   /* Let us check for obvious row singularities and try to fix these;
 534:lp_solve_5.5/lp_crash.c ****      First assemble necessary basis statistics... */
 535:lp_solve_5.5/lp_crash.c ****   isnz = (MYBOOL *) values;
 536:lp_solve_5.5/lp_crash.c ****   MEMCLEAR(isnz, nrows+1);
 537:lp_solve_5.5/lp_crash.c ****   slkpos = (int *) violation;
 538:lp_solve_5.5/lp_crash.c ****   MEMCLEAR(slkpos, nrows+1);
 539:lp_solve_5.5/lp_crash.c ****   for(i = 1; i <= nrows; i++) {
 540:lp_solve_5.5/lp_crash.c ****     j = abs(basisvector[i]);
 541:lp_solve_5.5/lp_crash.c ****     if(j <= nrows) {
 542:lp_solve_5.5/lp_crash.c ****       isnz[j] = TRUE;
 543:lp_solve_5.5/lp_crash.c ****       slkpos[j] = i;
 544:lp_solve_5.5/lp_crash.c ****     }
 545:lp_solve_5.5/lp_crash.c ****     else {
 546:lp_solve_5.5/lp_crash.c ****       j-= nrows;
 547:lp_solve_5.5/lp_crash.c ****       j = mat->col_end[j-1];
 548:lp_solve_5.5/lp_crash.c ****       isnz[COL_MAT_ROWNR(j)] = TRUE;
 549:lp_solve_5.5/lp_crash.c ****       /*isnz[COL_MAT_ROWNR(j+1)] = TRUE;*/
 550:lp_solve_5.5/lp_crash.c ****     }
 551:lp_solve_5.5/lp_crash.c ****   }
 552:lp_solve_5.5/lp_crash.c ****   for(; i <= lp->sum; i++) {
 553:lp_solve_5.5/lp_crash.c ****     j = abs(basisvector[i]);
 554:lp_solve_5.5/lp_crash.c ****     if(j <= nrows)
 555:lp_solve_5.5/lp_crash.c ****       slkpos[j] = i;
 556:lp_solve_5.5/lp_crash.c ****   }
 557:lp_solve_5.5/lp_crash.c **** 
 558:lp_solve_5.5/lp_crash.c ****   /* ...then set the corresponding slacks basic for row rank deficient positions */
 559:lp_solve_5.5/lp_crash.c ****   for(j = 1; j <= nrows; j++) {
 560:lp_solve_5.5/lp_crash.c **** #ifdef Paranoia
 561:lp_solve_5.5/lp_crash.c ****     if(slkpos[j] == 0)
 562:lp_solve_5.5/lp_crash.c ****       report(lp, SEVERE, "guess_basis: Internal error");
 563:lp_solve_5.5/lp_crash.c **** #endif
 564:lp_solve_5.5/lp_crash.c ****     if(!isnz[j]) {
 565:lp_solve_5.5/lp_crash.c ****       isnz[j] = TRUE;
 566:lp_solve_5.5/lp_crash.c ****       i = slkpos[j];
 567:lp_solve_5.5/lp_crash.c ****       swapINT(&basisvector[i], &basisvector[j]);
 568:lp_solve_5.5/lp_crash.c ****       basisvector[j] = abs(basisvector[j]);
 569:lp_solve_5.5/lp_crash.c ****     }
 570:lp_solve_5.5/lp_crash.c ****   }
 571:lp_solve_5.5/lp_crash.c **** #endif
 572:lp_solve_5.5/lp_crash.c **** 
 573:lp_solve_5.5/lp_crash.c ****   /* Clean up and return status */
 574:lp_solve_5.5/lp_crash.c ****   status = (MYBOOL) (error <= eps);
 575:lp_solve_5.5/lp_crash.c **** Finish:
 576:lp_solve_5.5/lp_crash.c ****   FREE(values);
 577:lp_solve_5.5/lp_crash.c ****   FREE(violation);
 578:lp_solve_5.5/lp_crash.c **** 
 579:lp_solve_5.5/lp_crash.c ****   return( status );
 580:lp_solve_5.5/lp_crash.c **** }
 581:lp_solve_5.5/lp_crash.c **** #endif
 582:lp_solve_5.5/lp_crash.c **** 
 583:lp_solve_5.5/lp_crash.c **** #if 0
 584:lp_solve_5.5/lp_crash.c **** MYBOOL __WINAPI guess_basis(lprec *lp, REAL *guessvector, int *basisvector)
 585:lp_solve_5.5/lp_crash.c **** {
 586:lp_solve_5.5/lp_crash.c ****   MYBOOL *isnz, status = FALSE;
 587:lp_solve_5.5/lp_crash.c ****   REAL   *values = NULL, *violation = NULL,
 588:lp_solve_5.5/lp_crash.c ****          eps = lp->epsprimal,
 589:lp_solve_5.5/lp_crash.c ****          *value, error, upB, loB, sortorder = 1.0;
 590:lp_solve_5.5/lp_crash.c ****   int    i, j, jj, n, *rownr, *colnr, *slkpos,
 591:lp_solve_5.5/lp_crash.c ****          nrows = lp->rows, ncols = lp->columns;
 592:lp_solve_5.5/lp_crash.c ****   MATrec *mat = lp->matA;
 593:lp_solve_5.5/lp_crash.c **** 
 594:lp_solve_5.5/lp_crash.c ****   if(!mat_validate(mat))
 595:lp_solve_5.5/lp_crash.c ****     return( status );
 596:lp_solve_5.5/lp_crash.c **** 
 597:lp_solve_5.5/lp_crash.c ****   /* Create helper arrays */
 598:lp_solve_5.5/lp_crash.c ****   if(!allocREAL(lp, &values, lp->sum+1, TRUE) ||
 599:lp_solve_5.5/lp_crash.c ****      !allocREAL(lp, &violation, lp->sum+1, TRUE))
 600:lp_solve_5.5/lp_crash.c ****     goto Finish;
 601:lp_solve_5.5/lp_crash.c **** 
 602:lp_solve_5.5/lp_crash.c ****   /* Compute values of slack variables for given guess vector */
 603:lp_solve_5.5/lp_crash.c ****   i = 0;
 604:lp_solve_5.5/lp_crash.c ****   n = get_nonzeros(lp);
 605:lp_solve_5.5/lp_crash.c ****   rownr = &COL_MAT_ROWNR(i);
 606:lp_solve_5.5/lp_crash.c ****   colnr = &COL_MAT_COLNR(i);
 607:lp_solve_5.5/lp_crash.c ****   value = &COL_MAT_VALUE(i);
 608:lp_solve_5.5/lp_crash.c ****   for(; i < n; i++, rownr += matRowColStep, colnr += matRowColStep, value += matValueStep)
 609:lp_solve_5.5/lp_crash.c ****     values[*rownr] += unscaled_mat(lp, my_chsign(is_chsign(lp, *rownr), *value), *rownr, *colnr) *
 610:lp_solve_5.5/lp_crash.c ****                       guessvector[*colnr];
 611:lp_solve_5.5/lp_crash.c ****   MEMMOVE(values+nrows+1, guessvector+1, ncols);
 612:lp_solve_5.5/lp_crash.c **** 
 613:lp_solve_5.5/lp_crash.c ****   /* Initialize constraint bound violation measures (expressed as positive values) */
 614:lp_solve_5.5/lp_crash.c ****   for(i = 1; i <= nrows; i++) {
 615:lp_solve_5.5/lp_crash.c ****     upB = get_rh_upper(lp, i);
 616:lp_solve_5.5/lp_crash.c ****     loB = get_rh_lower(lp, i);
 617:lp_solve_5.5/lp_crash.c ****     error = values[i] - upB;
 618:lp_solve_5.5/lp_crash.c ****     if(error > -eps)
 619:lp_solve_5.5/lp_crash.c ****       violation[i] = sortorder*MAX(0,error);
 620:lp_solve_5.5/lp_crash.c ****     else {
 621:lp_solve_5.5/lp_crash.c ****       error = loB - values[i];
 622:lp_solve_5.5/lp_crash.c ****       if(error > -eps)
 623:lp_solve_5.5/lp_crash.c ****         violation[i] = sortorder*MAX(0,error);
 624:lp_solve_5.5/lp_crash.c ****       else if(my_infinite(lp, loB) && my_infinite(lp, upB))
 625:lp_solve_5.5/lp_crash.c ****         ;
 626:lp_solve_5.5/lp_crash.c ****       else if(my_infinite(lp, upB))
 627:lp_solve_5.5/lp_crash.c ****         violation[i] = sortorder*(loB - values[i]);
 628:lp_solve_5.5/lp_crash.c ****       else if(my_infinite(lp, loB))
 629:lp_solve_5.5/lp_crash.c ****         violation[i] = sortorder*(values[i] - upB);
 630:lp_solve_5.5/lp_crash.c ****       else
 631:lp_solve_5.5/lp_crash.c ****         violation[i] = -sortorder*MAX(upB - values[i], values[i] - loB);
 632:lp_solve_5.5/lp_crash.c ****     }
 633:lp_solve_5.5/lp_crash.c ****     basisvector[i] = i;
 634:lp_solve_5.5/lp_crash.c ****   }
 635:lp_solve_5.5/lp_crash.c **** 
 636:lp_solve_5.5/lp_crash.c ****   /* Initialize user variable bound violation measures (expressed as positive values) */
 637:lp_solve_5.5/lp_crash.c ****   for(i = 1; i <= ncols; i++) {
 638:lp_solve_5.5/lp_crash.c ****     n = nrows+i;
 639:lp_solve_5.5/lp_crash.c ****     upB = get_upbo(lp, i);
 640:lp_solve_5.5/lp_crash.c ****     loB = get_lowbo(lp, i);
 641:lp_solve_5.5/lp_crash.c ****     error = guessvector[i] - upB;
 642:lp_solve_5.5/lp_crash.c ****     if(error > -eps)
 643:lp_solve_5.5/lp_crash.c ****       violation[n] = sortorder*MAX(0,error);
 644:lp_solve_5.5/lp_crash.c ****     else {
 645:lp_solve_5.5/lp_crash.c ****       error = loB - values[n];
 646:lp_solve_5.5/lp_crash.c ****       if(error > -eps)
 647:lp_solve_5.5/lp_crash.c ****         violation[n] = sortorder*MAX(0,error);
 648:lp_solve_5.5/lp_crash.c ****       else if(my_infinite(lp, loB) && my_infinite(lp, upB))
 649:lp_solve_5.5/lp_crash.c ****         ;
 650:lp_solve_5.5/lp_crash.c ****       else if(my_infinite(lp, upB))
 651:lp_solve_5.5/lp_crash.c ****         violation[n] = sortorder*(loB - values[n]);
 652:lp_solve_5.5/lp_crash.c ****       else if(my_infinite(lp, loB))
 653:lp_solve_5.5/lp_crash.c ****         violation[n] = sortorder*(values[n] - upB);
 654:lp_solve_5.5/lp_crash.c ****       else
 655:lp_solve_5.5/lp_crash.c ****         violation[n] = -sortorder*MAX(upB - values[n], values[n] - loB);
 656:lp_solve_5.5/lp_crash.c ****     }
 657:lp_solve_5.5/lp_crash.c ****     basisvector[n] = n;
 658:lp_solve_5.5/lp_crash.c ****   }
 659:lp_solve_5.5/lp_crash.c **** 
 660:lp_solve_5.5/lp_crash.c ****   /* Sort decending by violation; this means that variables with
 661:lp_solve_5.5/lp_crash.c ****      the largest violations will be designated as basic */
 662:lp_solve_5.5/lp_crash.c ****   sortByREAL(basisvector, violation, lp->sum, 1, FALSE);
 663:lp_solve_5.5/lp_crash.c ****   error = violation[1];
 664:lp_solve_5.5/lp_crash.c **** 
 665:lp_solve_5.5/lp_crash.c ****   /* Adjust the non-basic indeces for the (proximal) bound state */
 666:lp_solve_5.5/lp_crash.c ****   for(i = nrows+1, rownr = basisvector+i; i <= lp->sum; i++, rownr++) {
 667:lp_solve_5.5/lp_crash.c ****     if(*rownr <= nrows) {
 668:lp_solve_5.5/lp_crash.c ****       values[*rownr] -= lp->orig_rhs[*rownr];
 669:lp_solve_5.5/lp_crash.c ****       if(values[*rownr] <= eps)
 670:lp_solve_5.5/lp_crash.c ****         *rownr = -(*rownr);
 671:lp_solve_5.5/lp_crash.c ****     }
 672:lp_solve_5.5/lp_crash.c ****     else
 673:lp_solve_5.5/lp_crash.c ****       if(values[i] <= get_lowbo(lp, (*rownr)-nrows)+eps)
 674:lp_solve_5.5/lp_crash.c ****         *rownr = -(*rownr);
 675:lp_solve_5.5/lp_crash.c ****   }
 676:lp_solve_5.5/lp_crash.c **** 
 677:lp_solve_5.5/lp_crash.c ****   /* Let us check for obvious row singularities and try to fix these;
 678:lp_solve_5.5/lp_crash.c ****      First assemble necessary basis statistics... */
 679:lp_solve_5.5/lp_crash.c ****   isnz = (MYBOOL *) values;
 680:lp_solve_5.5/lp_crash.c ****   MEMCLEAR(isnz, nrows+1);
 681:lp_solve_5.5/lp_crash.c ****   slkpos = (int *) violation;
 682:lp_solve_5.5/lp_crash.c ****   MEMCLEAR(slkpos, nrows+1);
 683:lp_solve_5.5/lp_crash.c ****   for(i = 1; i <= nrows; i++) {
 684:lp_solve_5.5/lp_crash.c ****     j = abs(basisvector[i]);
 685:lp_solve_5.5/lp_crash.c ****     if(j <= nrows) {
 686:lp_solve_5.5/lp_crash.c ****       isnz[j] = TRUE;
 687:lp_solve_5.5/lp_crash.c ****       slkpos[j] = i;
 688:lp_solve_5.5/lp_crash.c ****     }
 689:lp_solve_5.5/lp_crash.c ****     else {
 690:lp_solve_5.5/lp_crash.c ****       j-= nrows;
 691:lp_solve_5.5/lp_crash.c ****       jj = mat->col_end[j-1];
 692:lp_solve_5.5/lp_crash.c ****       isnz[COL_MAT_ROWNR(jj)] = TRUE;
 693:lp_solve_5.5/lp_crash.c **** /*      if(++jj < mat->col_end[j])
 694:lp_solve_5.5/lp_crash.c ****         isnz[COL_MAT_ROWNR(jj)] = TRUE; */
 695:lp_solve_5.5/lp_crash.c ****     }
 696:lp_solve_5.5/lp_crash.c ****   }
 697:lp_solve_5.5/lp_crash.c ****   for(; i <= lp->sum; i++) {
 698:lp_solve_5.5/lp_crash.c ****     j = abs(basisvector[i]);
 699:lp_solve_5.5/lp_crash.c ****     if(j <= nrows)
 700:lp_solve_5.5/lp_crash.c ****       slkpos[j] = i;
 701:lp_solve_5.5/lp_crash.c ****   }
 702:lp_solve_5.5/lp_crash.c **** 
 703:lp_solve_5.5/lp_crash.c ****   /* ...then set the corresponding slacks basic for row rank deficient positions */
 704:lp_solve_5.5/lp_crash.c ****   for(j = 1; j <= nrows; j++) {
 705:lp_solve_5.5/lp_crash.c **** #ifdef Paranoia
 706:lp_solve_5.5/lp_crash.c ****     if(slkpos[j] == 0)
 707:lp_solve_5.5/lp_crash.c ****       report(lp, SEVERE, "guess_basis: Internal error");
 708:lp_solve_5.5/lp_crash.c **** #endif
 709:lp_solve_5.5/lp_crash.c ****     if(!isnz[j]) {
 710:lp_solve_5.5/lp_crash.c ****       isnz[j] = TRUE;
 711:lp_solve_5.5/lp_crash.c ****       i = slkpos[j];
 712:lp_solve_5.5/lp_crash.c ****       swapINT(&basisvector[i], &basisvector[j]);
 713:lp_solve_5.5/lp_crash.c ****       basisvector[j] = abs(basisvector[j]);
 714:lp_solve_5.5/lp_crash.c ****     }
 715:lp_solve_5.5/lp_crash.c ****   }
 716:lp_solve_5.5/lp_crash.c **** 
 717:lp_solve_5.5/lp_crash.c ****   /* Lastly normalize all basic variables to be coded as lower-bounded */
 718:lp_solve_5.5/lp_crash.c ****   for(i = 1; i <= nrows; i++)
 719:lp_solve_5.5/lp_crash.c ****     basisvector[i] = -abs(basisvector[i]);
 720:lp_solve_5.5/lp_crash.c **** 
 721:lp_solve_5.5/lp_crash.c ****   /* Clean up and return status */
 722:lp_solve_5.5/lp_crash.c ****   status = (MYBOOL) (error <= eps);
 723:lp_solve_5.5/lp_crash.c **** Finish:
 724:lp_solve_5.5/lp_crash.c ****   FREE(values);
 725:lp_solve_5.5/lp_crash.c ****   FREE(violation);
 726:lp_solve_5.5/lp_crash.c **** 
 727:lp_solve_5.5/lp_crash.c ****   return( status );
 728:lp_solve_5.5/lp_crash.c **** }
 729:lp_solve_5.5/lp_crash.c **** #endif
 730:lp_solve_5.5/lp_crash.c **** 
 731:lp_solve_5.5/lp_crash.c **** MYBOOL __WINAPI guess_basis(lprec *lp, REAL *guessvector, int *basisvector)
 732:lp_solve_5.5/lp_crash.c **** {
 3688               		.loc 1 732 0
 3689               		.cfi_startproc
 3690 1a14 CF92      		push r12
 3691               	.LCFI10:
 3692               		.cfi_def_cfa_offset 3
 3693               		.cfi_offset 12, -2
 3694 1a16 DF92      		push r13
 3695               	.LCFI11:
 3696               		.cfi_def_cfa_offset 4
 3697               		.cfi_offset 13, -3
 3698 1a18 EF92      		push r14
 3699               	.LCFI12:
 3700               		.cfi_def_cfa_offset 5
 3701               		.cfi_offset 14, -4
 3702 1a1a FF92      		push r15
 3703               	.LCFI13:
 3704               		.cfi_def_cfa_offset 6
 3705               		.cfi_offset 15, -5
 3706 1a1c 0F93      		push r16
 3707               	.LCFI14:
 3708               		.cfi_def_cfa_offset 7
 3709               		.cfi_offset 16, -6
 3710 1a1e 1F93      		push r17
 3711               	.LCFI15:
 3712               		.cfi_def_cfa_offset 8
 3713               		.cfi_offset 17, -7
 3714 1a20 CF93      		push r28
 3715               	.LCFI16:
 3716               		.cfi_def_cfa_offset 9
 3717               		.cfi_offset 28, -8
 3718 1a22 DF93      		push r29
 3719               	.LCFI17:
 3720               		.cfi_def_cfa_offset 10
 3721               		.cfi_offset 29, -9
 3722 1a24 CDB7      		in r28,__SP_L__
 3723 1a26 DEB7      		in r29,__SP_H__
 3724               	.LCFI18:
 3725               		.cfi_def_cfa_register 28
 3726 1a28 EB97      		sbiw r28,59
 3727               	.LCFI19:
 3728               		.cfi_def_cfa_offset 69
 3729 1a2a 0FB6      		in __tmp_reg__,__SREG__
 3730 1a2c F894      		cli
 3731 1a2e DEBF      		out __SP_H__,r29
 3732 1a30 0FBE      		out __SREG__,__tmp_reg__
 3733 1a32 CDBF      		out __SP_L__,r28
 3734               	/* prologue: function */
 3735               	/* frame size = 59 */
 3736               	/* stack size = 67 */
 3737               	.L__stack_usage = 67
 3738 1a34 9FAB      		std Y+55,r25
 3739 1a36 8EAB      		std Y+54,r24
 3740 1a38 79AF      		std Y+57,r23
 3741 1a3a 68AF      		std Y+56,r22
 3742 1a3c 5BAF      		std Y+59,r21
 3743 1a3e 4AAF      		std Y+58,r20
 733:lp_solve_5.5/lp_crash.c ****   MYBOOL *isnz = NULL, status = FALSE;
 3744               		.loc 1 733 0
 3745 1a40 1B8E      		std Y+27,__zero_reg__
 3746 1a42 1A8E      		std Y+26,__zero_reg__
 3747 1a44 1982      		std Y+1,__zero_reg__
 734:lp_solve_5.5/lp_crash.c ****   REAL   *values = NULL, *violation = NULL,
 3748               		.loc 1 734 0
 3749 1a46 1BAA      		std Y+51,__zero_reg__
 3750 1a48 1AAA      		std Y+50,__zero_reg__
 3751 1a4a 1DAA      		std Y+53,__zero_reg__
 3752 1a4c 1CAA      		std Y+52,__zero_reg__
 735:lp_solve_5.5/lp_crash.c ****          eps = lp->epsprimal,
 3753               		.loc 1 735 0
 3754 1a4e 8EA9      		ldd r24,Y+54
 3755 1a50 9FA9      		ldd r25,Y+55
 3756 1a52 865E      		subi r24,-26
 3757 1a54 9C4F      		sbci r25,-4
 3758 1a56 FC01      		movw r30,r24
 3759 1a58 8081      		ld r24,Z
 3760 1a5a 9181      		ldd r25,Z+1
 3761 1a5c A281      		ldd r26,Z+2
 3762 1a5e B381      		ldd r27,Z+3
 3763 1a60 8C8F      		std Y+28,r24
 3764 1a62 9D8F      		std Y+29,r25
 3765 1a64 AE8F      		std Y+30,r26
 3766 1a66 BF8F      		std Y+31,r27
 736:lp_solve_5.5/lp_crash.c ****          *value, error, upB, loB, sortorder = -1.0;
 3767               		.loc 1 736 0
 3768 1a68 80E0      		ldi r24,0
 3769 1a6a 90E0      		ldi r25,0
 3770 1a6c A0E8      		ldi r26,lo8(-128)
 3771 1a6e BFEB      		ldi r27,lo8(-65)
 3772 1a70 88A3      		std Y+32,r24
 3773 1a72 99A3      		std Y+33,r25
 3774 1a74 AAA3      		std Y+34,r26
 3775 1a76 BBA3      		std Y+35,r27
 737:lp_solve_5.5/lp_crash.c ****   int    i, j, jj, n, *rownr, *colnr, *slkpos = NULL,
 3776               		.loc 1 737 0
 3777 1a78 1DA2      		std Y+37,__zero_reg__
 3778 1a7a 1CA2      		std Y+36,__zero_reg__
 738:lp_solve_5.5/lp_crash.c ****          nrows = lp->rows, ncols = lp->columns, nsum = lp->sum;
 3779               		.loc 1 738 0
 3780 1a7c 8EA9      		ldd r24,Y+54
 3781 1a7e 9FA9      		ldd r25,Y+55
 3782 1a80 8651      		subi r24,22
 3783 1a82 9E4F      		sbci r25,-2
 3784 1a84 FC01      		movw r30,r24
 3785 1a86 8081      		ld r24,Z
 3786 1a88 9181      		ldd r25,Z+1
 3787 1a8a 9FA3      		std Y+39,r25
 3788 1a8c 8EA3      		std Y+38,r24
 3789 1a8e 8EA9      		ldd r24,Y+54
 3790 1a90 9FA9      		ldd r25,Y+55
 3791 1a92 8451      		subi r24,20
 3792 1a94 9E4F      		sbci r25,-2
 3793 1a96 FC01      		movw r30,r24
 3794 1a98 8081      		ld r24,Z
 3795 1a9a 9181      		ldd r25,Z+1
 3796 1a9c 99A7      		std Y+41,r25
 3797 1a9e 88A7      		std Y+40,r24
 3798 1aa0 8EA9      		ldd r24,Y+54
 3799 1aa2 9FA9      		ldd r25,Y+55
 3800 1aa4 8851      		subi r24,24
 3801 1aa6 9E4F      		sbci r25,-2
 3802 1aa8 FC01      		movw r30,r24
 3803 1aaa 8081      		ld r24,Z
 3804 1aac 9181      		ldd r25,Z+1
 3805 1aae 9BA7      		std Y+43,r25
 3806 1ab0 8AA7      		std Y+42,r24
 739:lp_solve_5.5/lp_crash.c ****   int    *basisnr;
 740:lp_solve_5.5/lp_crash.c ****   MATrec *mat = lp->matA;
 3807               		.loc 1 740 0
 3808 1ab2 8EA9      		ldd r24,Y+54
 3809 1ab4 9FA9      		ldd r25,Y+55
 3810 1ab6 8A54      		subi r24,74
 3811 1ab8 9D4F      		sbci r25,-3
 3812 1aba FC01      		movw r30,r24
 3813 1abc 8081      		ld r24,Z
 3814 1abe 9181      		ldd r25,Z+1
 3815 1ac0 9DA7      		std Y+45,r25
 3816 1ac2 8CA7      		std Y+44,r24
 741:lp_solve_5.5/lp_crash.c **** 
 742:lp_solve_5.5/lp_crash.c ****   if(!mat_validate(mat))
 3817               		.loc 1 742 0
 3818 1ac4 8CA5      		ldd r24,Y+44
 3819 1ac6 9DA5      		ldd r25,Y+45
 3820 1ac8 0E94 0000 		call mat_validate
 3821 1acc 8823      		tst r24
 3822 1ace 01F4      		brne .L145
 743:lp_solve_5.5/lp_crash.c ****     return( status );
 3823               		.loc 1 743 0
 3824 1ad0 8981      		ldd r24,Y+1
 3825 1ad2 00C0      		rjmp .L207
 3826               	.L145:
 744:lp_solve_5.5/lp_crash.c **** 
 745:lp_solve_5.5/lp_crash.c ****   /* Create helper arrays, providing for multiple use of the violation array */
 746:lp_solve_5.5/lp_crash.c ****   if(!allocREAL(lp, &values, nsum+1, TRUE) ||
 3827               		.loc 1 746 0
 3828 1ad4 8AA5      		ldd r24,Y+42
 3829 1ad6 9BA5      		ldd r25,Y+43
 3830 1ad8 AC01      		movw r20,r24
 3831 1ada 4F5F      		subi r20,-1
 3832 1adc 5F4F      		sbci r21,-1
 3833 1ade BE01      		movw r22,r28
 3834 1ae0 6E5C      		subi r22,-50
 3835 1ae2 7F4F      		sbci r23,-1
 3836 1ae4 8EA9      		ldd r24,Y+54
 3837 1ae6 9FA9      		ldd r25,Y+55
 3838 1ae8 21E0      		ldi r18,lo8(1)
 3839 1aea 0E94 0000 		call allocREAL
 3840 1aee 8823      		tst r24
 3841 1af0 01F4      		brne .+2
 3842 1af2 00C0      		rjmp .L147
 747:lp_solve_5.5/lp_crash.c ****      !allocREAL(lp, &violation, nsum+1, TRUE))
 3843               		.loc 1 747 0 discriminator 1
 3844 1af4 8AA5      		ldd r24,Y+42
 3845 1af6 9BA5      		ldd r25,Y+43
 3846 1af8 AC01      		movw r20,r24
 3847 1afa 4F5F      		subi r20,-1
 3848 1afc 5F4F      		sbci r21,-1
 3849 1afe BE01      		movw r22,r28
 3850 1b00 6C5C      		subi r22,-52
 3851 1b02 7F4F      		sbci r23,-1
 3852 1b04 8EA9      		ldd r24,Y+54
 3853 1b06 9FA9      		ldd r25,Y+55
 3854 1b08 21E0      		ldi r18,lo8(1)
 3855 1b0a 0E94 0000 		call allocREAL
 746:lp_solve_5.5/lp_crash.c ****      !allocREAL(lp, &violation, nsum+1, TRUE))
 3856               		.loc 1 746 0 discriminator 1
 3857 1b0e 8823      		tst r24
 3858 1b10 01F4      		brne .+2
 3859 1b12 00C0      		rjmp .L147
 748:lp_solve_5.5/lp_crash.c ****     goto Finish;
 749:lp_solve_5.5/lp_crash.c **** 
 750:lp_solve_5.5/lp_crash.c ****   /* Compute the values of the constraints for the given guess vector */
 751:lp_solve_5.5/lp_crash.c ****   i = 0;
 3860               		.loc 1 751 0
 3861 1b14 198A      		std Y+17,__zero_reg__
 3862 1b16 188A      		std Y+16,__zero_reg__
 752:lp_solve_5.5/lp_crash.c ****   n = get_nonzeros(lp);
 3863               		.loc 1 752 0
 3864 1b18 8EA9      		ldd r24,Y+54
 3865 1b1a 9FA9      		ldd r25,Y+55
 3866 1b1c 0E94 0000 		call get_nonzeros
 3867 1b20 9FA7      		std Y+47,r25
 3868 1b22 8EA7      		std Y+46,r24
 753:lp_solve_5.5/lp_crash.c ****   rownr = &COL_MAT_ROWNR(i);
 3869               		.loc 1 753 0
 3870 1b24 8CA5      		ldd r24,Y+44
 3871 1b26 9DA5      		ldd r25,Y+45
 3872 1b28 FC01      		movw r30,r24
 3873 1b2a 2685      		ldd r18,Z+14
 3874 1b2c 3785      		ldd r19,Z+15
 3875 1b2e 8889      		ldd r24,Y+16
 3876 1b30 9989      		ldd r25,Y+17
 3877 1b32 880F      		lsl r24
 3878 1b34 991F      		rol r25
 3879 1b36 820F      		add r24,r18
 3880 1b38 931F      		adc r25,r19
 3881 1b3a 9D8B      		std Y+21,r25
 3882 1b3c 8C8B      		std Y+20,r24
 754:lp_solve_5.5/lp_crash.c ****   colnr = &COL_MAT_COLNR(i);
 3883               		.loc 1 754 0
 3884 1b3e 8CA5      		ldd r24,Y+44
 3885 1b40 9DA5      		ldd r25,Y+45
 3886 1b42 FC01      		movw r30,r24
 3887 1b44 2485      		ldd r18,Z+12
 3888 1b46 3585      		ldd r19,Z+13
 3889 1b48 8889      		ldd r24,Y+16
 3890 1b4a 9989      		ldd r25,Y+17
 3891 1b4c 880F      		lsl r24
 3892 1b4e 991F      		rol r25
 3893 1b50 820F      		add r24,r18
 3894 1b52 931F      		adc r25,r19
 3895 1b54 9F8B      		std Y+23,r25
 3896 1b56 8E8B      		std Y+22,r24
 755:lp_solve_5.5/lp_crash.c ****   value = &COL_MAT_VALUE(i);
 3897               		.loc 1 755 0
 3898 1b58 8CA5      		ldd r24,Y+44
 3899 1b5a 9DA5      		ldd r25,Y+45
 3900 1b5c FC01      		movw r30,r24
 3901 1b5e 2089      		ldd r18,Z+16
 3902 1b60 3189      		ldd r19,Z+17
 3903 1b62 8889      		ldd r24,Y+16
 3904 1b64 9989      		ldd r25,Y+17
 3905 1b66 880F      		lsl r24
 3906 1b68 991F      		rol r25
 3907 1b6a 880F      		lsl r24
 3908 1b6c 991F      		rol r25
 3909 1b6e 820F      		add r24,r18
 3910 1b70 931F      		adc r25,r19
 3911 1b72 9B83      		std Y+3,r25
 3912 1b74 8A83      		std Y+2,r24
 756:lp_solve_5.5/lp_crash.c ****   for(; i < n; i++, rownr += matRowColStep, colnr += matRowColStep, value += matValueStep)
 3913               		.loc 1 756 0
 3914 1b76 00C0      		rjmp .L148
 3915               	.L152:
 757:lp_solve_5.5/lp_crash.c ****     values[*rownr] += unscaled_mat(lp, my_chsign(is_chsign(lp, *rownr), *value), *rownr, *colnr) *
 3916               		.loc 1 757 0
 3917 1b78 8E89      		ldd r24,Y+22
 3918 1b7a 9F89      		ldd r25,Y+23
 3919 1b7c FC01      		movw r30,r24
 3920 1b7e 0081      		ld r16,Z
 3921 1b80 1181      		ldd r17,Z+1
 3922 1b82 8C89      		ldd r24,Y+20
 3923 1b84 9D89      		ldd r25,Y+21
 3924 1b86 FC01      		movw r30,r24
 3925 1b88 E080      		ld r14,Z
 3926 1b8a F180      		ldd r15,Z+1
 3927 1b8c 8C89      		ldd r24,Y+20
 3928 1b8e 9D89      		ldd r25,Y+21
 3929 1b90 FC01      		movw r30,r24
 3930 1b92 2081      		ld r18,Z
 3931 1b94 3181      		ldd r19,Z+1
 3932 1b96 8EA9      		ldd r24,Y+54
 3933 1b98 9FA9      		ldd r25,Y+55
 3934 1b9a B901      		movw r22,r18
 3935 1b9c 0E94 0000 		call is_chsign
 3936 1ba0 8823      		tst r24
 3937 1ba2 01F0      		breq .L149
 3938               		.loc 1 757 0 is_stmt 0 discriminator 1
 3939 1ba4 8A81      		ldd r24,Y+2
 3940 1ba6 9B81      		ldd r25,Y+3
 3941 1ba8 FC01      		movw r30,r24
 3942 1baa 8081      		ld r24,Z
 3943 1bac 9181      		ldd r25,Z+1
 3944 1bae A281      		ldd r26,Z+2
 3945 1bb0 B381      		ldd r27,Z+3
 3946 1bb2 20E0      		ldi r18,0
 3947 1bb4 30E0      		ldi r19,0
 3948 1bb6 A901      		movw r20,r18
 3949 1bb8 BC01      		movw r22,r24
 3950 1bba CD01      		movw r24,r26
 3951 1bbc 0E94 0000 		call __nesf2
 3952 1bc0 8823      		tst r24
 3953 1bc2 01F0      		breq .L149
 3954               		.loc 1 757 0 discriminator 3
 3955 1bc4 8A81      		ldd r24,Y+2
 3956 1bc6 9B81      		ldd r25,Y+3
 3957 1bc8 FC01      		movw r30,r24
 3958 1bca 8081      		ld r24,Z
 3959 1bcc 9181      		ldd r25,Z+1
 3960 1bce A281      		ldd r26,Z+2
 3961 1bd0 B381      		ldd r27,Z+3
 3962 1bd2 B058      		subi r27,0x80
 3963 1bd4 00C0      		rjmp .L151
 3964               	.L149:
 3965               		.loc 1 757 0 discriminator 4
 3966 1bd6 8A81      		ldd r24,Y+2
 3967 1bd8 9B81      		ldd r25,Y+3
 3968 1bda FC01      		movw r30,r24
 3969 1bdc 8081      		ld r24,Z
 3970 1bde 9181      		ldd r25,Z+1
 3971 1be0 A281      		ldd r26,Z+2
 3972 1be2 B381      		ldd r27,Z+3
 3973               	.L151:
 3974               		.loc 1 757 0 discriminator 6
 3975 1be4 EEA9      		ldd r30,Y+54
 3976 1be6 FFA9      		ldd r31,Y+55
 3977 1be8 9701      		movw r18,r14
 3978 1bea AC01      		movw r20,r24
 3979 1bec BD01      		movw r22,r26
 3980 1bee CF01      		movw r24,r30
 3981 1bf0 0E94 0000 		call unscaled_mat
 3982 1bf4 7B01      		movw r14,r22
 3983 1bf6 8C01      		movw r16,r24
 758:lp_solve_5.5/lp_crash.c ****                       guessvector[*colnr];
 3984               		.loc 1 758 0 is_stmt 1 discriminator 6
 3985 1bf8 8E89      		ldd r24,Y+22
 3986 1bfa 9F89      		ldd r25,Y+23
 3987 1bfc FC01      		movw r30,r24
 3988 1bfe 8081      		ld r24,Z
 3989 1c00 9181      		ldd r25,Z+1
 3990 1c02 880F      		lsl r24
 3991 1c04 991F      		rol r25
 3992 1c06 880F      		lsl r24
 3993 1c08 991F      		rol r25
 3994 1c0a 28AD      		ldd r18,Y+56
 3995 1c0c 39AD      		ldd r19,Y+57
 3996 1c0e 820F      		add r24,r18
 3997 1c10 931F      		adc r25,r19
 3998 1c12 FC01      		movw r30,r24
 3999 1c14 8081      		ld r24,Z
 4000 1c16 9181      		ldd r25,Z+1
 4001 1c18 A281      		ldd r26,Z+2
 4002 1c1a B381      		ldd r27,Z+3
 757:lp_solve_5.5/lp_crash.c ****     values[*rownr] += unscaled_mat(lp, my_chsign(is_chsign(lp, *rownr), *value), *rownr, *colnr) *
 4003               		.loc 1 757 0 discriminator 6
 4004 1c1c 9C01      		movw r18,r24
 4005 1c1e AD01      		movw r20,r26
 4006 1c20 C801      		movw r24,r16
 4007 1c22 B701      		movw r22,r14
 4008 1c24 0E94 0000 		call __mulsf3
 4009 1c28 DC01      		movw r26,r24
 4010 1c2a CB01      		movw r24,r22
 4011 1c2c AC01      		movw r20,r24
 4012 1c2e BD01      		movw r22,r26
 4013 1c30 2AA9      		ldd r18,Y+50
 4014 1c32 3BA9      		ldd r19,Y+51
 4015 1c34 8C89      		ldd r24,Y+20
 4016 1c36 9D89      		ldd r25,Y+21
 4017 1c38 FC01      		movw r30,r24
 4018 1c3a 8081      		ld r24,Z
 4019 1c3c 9181      		ldd r25,Z+1
 4020 1c3e 880F      		lsl r24
 4021 1c40 991F      		rol r25
 4022 1c42 880F      		lsl r24
 4023 1c44 991F      		rol r25
 4024 1c46 8901      		movw r16,r18
 4025 1c48 080F      		add r16,r24
 4026 1c4a 191F      		adc r17,r25
 4027 1c4c 2AA9      		ldd r18,Y+50
 4028 1c4e 3BA9      		ldd r19,Y+51
 4029 1c50 8C89      		ldd r24,Y+20
 4030 1c52 9D89      		ldd r25,Y+21
 4031 1c54 FC01      		movw r30,r24
 4032 1c56 8081      		ld r24,Z
 4033 1c58 9181      		ldd r25,Z+1
 4034 1c5a 880F      		lsl r24
 4035 1c5c 991F      		rol r25
 4036 1c5e 880F      		lsl r24
 4037 1c60 991F      		rol r25
 4038 1c62 820F      		add r24,r18
 4039 1c64 931F      		adc r25,r19
 4040 1c66 FC01      		movw r30,r24
 4041 1c68 8081      		ld r24,Z
 4042 1c6a 9181      		ldd r25,Z+1
 4043 1c6c A281      		ldd r26,Z+2
 4044 1c6e B381      		ldd r27,Z+3
 4045 1c70 9A01      		movw r18,r20
 4046 1c72 AB01      		movw r20,r22
 4047 1c74 BC01      		movw r22,r24
 4048 1c76 CD01      		movw r24,r26
 4049 1c78 0E94 0000 		call __addsf3
 4050 1c7c DC01      		movw r26,r24
 4051 1c7e CB01      		movw r24,r22
 4052 1c80 F801      		movw r30,r16
 4053 1c82 8083      		st Z,r24
 4054 1c84 9183      		std Z+1,r25
 4055 1c86 A283      		std Z+2,r26
 4056 1c88 B383      		std Z+3,r27
 756:lp_solve_5.5/lp_crash.c ****   for(; i < n; i++, rownr += matRowColStep, colnr += matRowColStep, value += matValueStep)
 4057               		.loc 1 756 0 discriminator 6
 4058 1c8a 8889      		ldd r24,Y+16
 4059 1c8c 9989      		ldd r25,Y+17
 4060 1c8e 0196      		adiw r24,1
 4061 1c90 998B      		std Y+17,r25
 4062 1c92 888B      		std Y+16,r24
 4063 1c94 8C89      		ldd r24,Y+20
 4064 1c96 9D89      		ldd r25,Y+21
 4065 1c98 0296      		adiw r24,2
 4066 1c9a 9D8B      		std Y+21,r25
 4067 1c9c 8C8B      		std Y+20,r24
 4068 1c9e 8E89      		ldd r24,Y+22
 4069 1ca0 9F89      		ldd r25,Y+23
 4070 1ca2 0296      		adiw r24,2
 4071 1ca4 9F8B      		std Y+23,r25
 4072 1ca6 8E8B      		std Y+22,r24
 4073 1ca8 8A81      		ldd r24,Y+2
 4074 1caa 9B81      		ldd r25,Y+3
 4075 1cac 0496      		adiw r24,4
 4076 1cae 9B83      		std Y+3,r25
 4077 1cb0 8A83      		std Y+2,r24
 4078               	.L148:
 756:lp_solve_5.5/lp_crash.c ****   for(; i < n; i++, rownr += matRowColStep, colnr += matRowColStep, value += matValueStep)
 4079               		.loc 1 756 0 is_stmt 0 discriminator 1
 4080 1cb2 2889      		ldd r18,Y+16
 4081 1cb4 3989      		ldd r19,Y+17
 4082 1cb6 8EA5      		ldd r24,Y+46
 4083 1cb8 9FA5      		ldd r25,Y+47
 4084 1cba 2817      		cp r18,r24
 4085 1cbc 3907      		cpc r19,r25
 4086 1cbe 04F4      		brge .+2
 4087 1cc0 00C0      		rjmp .L152
 759:lp_solve_5.5/lp_crash.c ****   MEMMOVE(values+nrows+1, guessvector+1, ncols);
 4088               		.loc 1 759 0 is_stmt 1
 4089 1cc2 88A5      		ldd r24,Y+40
 4090 1cc4 99A5      		ldd r25,Y+41
 4091 1cc6 AC01      		movw r20,r24
 4092 1cc8 440F      		lsl r20
 4093 1cca 551F      		rol r21
 4094 1ccc 440F      		lsl r20
 4095 1cce 551F      		rol r21
 4096 1cd0 88AD      		ldd r24,Y+56
 4097 1cd2 99AD      		ldd r25,Y+57
 4098 1cd4 BC01      		movw r22,r24
 4099 1cd6 6C5F      		subi r22,-4
 4100 1cd8 7F4F      		sbci r23,-1
 4101 1cda 2AA9      		ldd r18,Y+50
 4102 1cdc 3BA9      		ldd r19,Y+51
 4103 1cde 8EA1      		ldd r24,Y+38
 4104 1ce0 9FA1      		ldd r25,Y+39
 4105 1ce2 0196      		adiw r24,1
 4106 1ce4 880F      		lsl r24
 4107 1ce6 991F      		rol r25
 4108 1ce8 880F      		lsl r24
 4109 1cea 991F      		rol r25
 4110 1cec 820F      		add r24,r18
 4111 1cee 931F      		adc r25,r19
 4112 1cf0 0E94 0000 		call memmove
 760:lp_solve_5.5/lp_crash.c **** 
 761:lp_solve_5.5/lp_crash.c ****   /* Initialize bound "violation" or primal non-degeneracy measures, expressed
 762:lp_solve_5.5/lp_crash.c ****      as the absolute value of the differences from the closest bound. */
 763:lp_solve_5.5/lp_crash.c ****   for(i = 1; i <= nsum; i++) {
 4113               		.loc 1 763 0
 4114 1cf4 81E0      		ldi r24,lo8(1)
 4115 1cf6 90E0      		ldi r25,0
 4116 1cf8 998B      		std Y+17,r25
 4117 1cfa 888B      		std Y+16,r24
 4118 1cfc 00C0      		rjmp .L153
 4119               	.L179:
 764:lp_solve_5.5/lp_crash.c ****     if(i <= nrows) {
 4120               		.loc 1 764 0
 4121 1cfe 2889      		ldd r18,Y+16
 4122 1d00 3989      		ldd r19,Y+17
 4123 1d02 8EA1      		ldd r24,Y+38
 4124 1d04 9FA1      		ldd r25,Y+39
 4125 1d06 8217      		cp r24,r18
 4126 1d08 9307      		cpc r25,r19
 4127 1d0a 04F0      		brlt .L154
 765:lp_solve_5.5/lp_crash.c ****       loB = get_rh_lower(lp, i);
 4128               		.loc 1 765 0
 4129 1d0c 2889      		ldd r18,Y+16
 4130 1d0e 3989      		ldd r19,Y+17
 4131 1d10 8EA9      		ldd r24,Y+54
 4132 1d12 9FA9      		ldd r25,Y+55
 4133 1d14 B901      		movw r22,r18
 4134 1d16 0E94 0000 		call get_rh_lower
 4135 1d1a DC01      		movw r26,r24
 4136 1d1c CB01      		movw r24,r22
 4137 1d1e 8C87      		std Y+12,r24
 4138 1d20 9D87      		std Y+13,r25
 4139 1d22 AE87      		std Y+14,r26
 4140 1d24 BF87      		std Y+15,r27
 766:lp_solve_5.5/lp_crash.c ****       upB = get_rh_upper(lp, i);
 4141               		.loc 1 766 0
 4142 1d26 2889      		ldd r18,Y+16
 4143 1d28 3989      		ldd r19,Y+17
 4144 1d2a 8EA9      		ldd r24,Y+54
 4145 1d2c 9FA9      		ldd r25,Y+55
 4146 1d2e B901      		movw r22,r18
 4147 1d30 0E94 0000 		call get_rh_upper
 4148 1d34 DC01      		movw r26,r24
 4149 1d36 CB01      		movw r24,r22
 4150 1d38 8887      		std Y+8,r24
 4151 1d3a 9987      		std Y+9,r25
 4152 1d3c AA87      		std Y+10,r26
 4153 1d3e BB87      		std Y+11,r27
 4154 1d40 00C0      		rjmp .L155
 4155               	.L154:
 767:lp_solve_5.5/lp_crash.c ****     }
 768:lp_solve_5.5/lp_crash.c ****     else {
 769:lp_solve_5.5/lp_crash.c ****       loB = get_lowbo(lp, i-nrows);
 4156               		.loc 1 769 0
 4157 1d42 2889      		ldd r18,Y+16
 4158 1d44 3989      		ldd r19,Y+17
 4159 1d46 8EA1      		ldd r24,Y+38
 4160 1d48 9FA1      		ldd r25,Y+39
 4161 1d4a 281B      		sub r18,r24
 4162 1d4c 390B      		sbc r19,r25
 4163 1d4e 8EA9      		ldd r24,Y+54
 4164 1d50 9FA9      		ldd r25,Y+55
 4165 1d52 B901      		movw r22,r18
 4166 1d54 0E94 0000 		call get_lowbo
 4167 1d58 DC01      		movw r26,r24
 4168 1d5a CB01      		movw r24,r22
 4169 1d5c 8C87      		std Y+12,r24
 4170 1d5e 9D87      		std Y+13,r25
 4171 1d60 AE87      		std Y+14,r26
 4172 1d62 BF87      		std Y+15,r27
 770:lp_solve_5.5/lp_crash.c ****       upB = get_upbo(lp, i-nrows);
 4173               		.loc 1 770 0
 4174 1d64 2889      		ldd r18,Y+16
 4175 1d66 3989      		ldd r19,Y+17
 4176 1d68 8EA1      		ldd r24,Y+38
 4177 1d6a 9FA1      		ldd r25,Y+39
 4178 1d6c 281B      		sub r18,r24
 4179 1d6e 390B      		sbc r19,r25
 4180 1d70 8EA9      		ldd r24,Y+54
 4181 1d72 9FA9      		ldd r25,Y+55
 4182 1d74 B901      		movw r22,r18
 4183 1d76 0E94 0000 		call get_upbo
 4184 1d7a DC01      		movw r26,r24
 4185 1d7c CB01      		movw r24,r22
 4186 1d7e 8887      		std Y+8,r24
 4187 1d80 9987      		std Y+9,r25
 4188 1d82 AA87      		std Y+10,r26
 4189 1d84 BB87      		std Y+11,r27
 4190               	.L155:
 771:lp_solve_5.5/lp_crash.c ****     }
 772:lp_solve_5.5/lp_crash.c **** 
 773:lp_solve_5.5/lp_crash.c ****     /* Free constraints/variables */
 774:lp_solve_5.5/lp_crash.c ****     if(my_infinite(lp, loB) && my_infinite(lp, upB))
 4191               		.loc 1 774 0
 4192 1d86 8C85      		ldd r24,Y+12
 4193 1d88 9D85      		ldd r25,Y+13
 4194 1d8a AE85      		ldd r26,Y+14
 4195 1d8c BF85      		ldd r27,Y+15
 4196 1d8e BF77      		andi r27,0x7f
 4197 1d90 2EA9      		ldd r18,Y+54
 4198 1d92 3FA9      		ldd r19,Y+55
 4199 1d94 265F      		subi r18,-10
 4200 1d96 3C4F      		sbci r19,-4
 4201 1d98 F901      		movw r30,r18
 4202 1d9a 2081      		ld r18,Z
 4203 1d9c 3181      		ldd r19,Z+1
 4204 1d9e 4281      		ldd r20,Z+2
 4205 1da0 5381      		ldd r21,Z+3
 4206 1da2 BC01      		movw r22,r24
 4207 1da4 CD01      		movw r24,r26
 4208 1da6 0E94 0000 		call __gesf2
 4209 1daa 8823      		tst r24
 4210 1dac 04F0      		brlt .L156
 4211               		.loc 1 774 0 is_stmt 0 discriminator 1
 4212 1dae 8885      		ldd r24,Y+8
 4213 1db0 9985      		ldd r25,Y+9
 4214 1db2 AA85      		ldd r26,Y+10
 4215 1db4 BB85      		ldd r27,Y+11
 4216 1db6 BF77      		andi r27,0x7f
 4217 1db8 2EA9      		ldd r18,Y+54
 4218 1dba 3FA9      		ldd r19,Y+55
 4219 1dbc 265F      		subi r18,-10
 4220 1dbe 3C4F      		sbci r19,-4
 4221 1dc0 F901      		movw r30,r18
 4222 1dc2 2081      		ld r18,Z
 4223 1dc4 3181      		ldd r19,Z+1
 4224 1dc6 4281      		ldd r20,Z+2
 4225 1dc8 5381      		ldd r21,Z+3
 4226 1dca BC01      		movw r22,r24
 4227 1dcc CD01      		movw r24,r26
 4228 1dce 0E94 0000 		call __gesf2
 4229 1dd2 8823      		tst r24
 4230 1dd4 04F0      		brlt .L156
 775:lp_solve_5.5/lp_crash.c ****       error = 0;
 4231               		.loc 1 775 0 is_stmt 1
 4232 1dd6 1C82      		std Y+4,__zero_reg__
 4233 1dd8 1D82      		std Y+5,__zero_reg__
 4234 1dda 1E82      		std Y+6,__zero_reg__
 4235 1ddc 1F82      		std Y+7,__zero_reg__
 4236 1dde 00C0      		rjmp .L159
 4237               	.L156:
 776:lp_solve_5.5/lp_crash.c ****     /* Violated constraints/variable bounds */
 777:lp_solve_5.5/lp_crash.c ****     else if(values[i]+eps < loB)
 4238               		.loc 1 777 0
 4239 1de0 2AA9      		ldd r18,Y+50
 4240 1de2 3BA9      		ldd r19,Y+51
 4241 1de4 8889      		ldd r24,Y+16
 4242 1de6 9989      		ldd r25,Y+17
 4243 1de8 880F      		lsl r24
 4244 1dea 991F      		rol r25
 4245 1dec 880F      		lsl r24
 4246 1dee 991F      		rol r25
 4247 1df0 820F      		add r24,r18
 4248 1df2 931F      		adc r25,r19
 4249 1df4 FC01      		movw r30,r24
 4250 1df6 8081      		ld r24,Z
 4251 1df8 9181      		ldd r25,Z+1
 4252 1dfa A281      		ldd r26,Z+2
 4253 1dfc B381      		ldd r27,Z+3
 4254 1dfe 2C8D      		ldd r18,Y+28
 4255 1e00 3D8D      		ldd r19,Y+29
 4256 1e02 4E8D      		ldd r20,Y+30
 4257 1e04 5F8D      		ldd r21,Y+31
 4258 1e06 BC01      		movw r22,r24
 4259 1e08 CD01      		movw r24,r26
 4260 1e0a 0E94 0000 		call __addsf3
 4261 1e0e DC01      		movw r26,r24
 4262 1e10 CB01      		movw r24,r22
 4263 1e12 2C85      		ldd r18,Y+12
 4264 1e14 3D85      		ldd r19,Y+13
 4265 1e16 4E85      		ldd r20,Y+14
 4266 1e18 5F85      		ldd r21,Y+15
 4267 1e1a BC01      		movw r22,r24
 4268 1e1c CD01      		movw r24,r26
 4269 1e1e 0E94 0000 		call __ltsf2
 4270 1e22 8823      		tst r24
 4271 1e24 04F4      		brge .L221
 778:lp_solve_5.5/lp_crash.c ****       error = loB-values[i];
 4272               		.loc 1 778 0
 4273 1e26 2AA9      		ldd r18,Y+50
 4274 1e28 3BA9      		ldd r19,Y+51
 4275 1e2a 8889      		ldd r24,Y+16
 4276 1e2c 9989      		ldd r25,Y+17
 4277 1e2e 880F      		lsl r24
 4278 1e30 991F      		rol r25
 4279 1e32 880F      		lsl r24
 4280 1e34 991F      		rol r25
 4281 1e36 820F      		add r24,r18
 4282 1e38 931F      		adc r25,r19
 4283 1e3a FC01      		movw r30,r24
 4284 1e3c 8081      		ld r24,Z
 4285 1e3e 9181      		ldd r25,Z+1
 4286 1e40 A281      		ldd r26,Z+2
 4287 1e42 B381      		ldd r27,Z+3
 4288 1e44 9C01      		movw r18,r24
 4289 1e46 AD01      		movw r20,r26
 4290 1e48 6C85      		ldd r22,Y+12
 4291 1e4a 7D85      		ldd r23,Y+13
 4292 1e4c 8E85      		ldd r24,Y+14
 4293 1e4e 9F85      		ldd r25,Y+15
 4294 1e50 0E94 0000 		call __subsf3
 4295 1e54 DC01      		movw r26,r24
 4296 1e56 CB01      		movw r24,r22
 4297 1e58 8C83      		std Y+4,r24
 4298 1e5a 9D83      		std Y+5,r25
 4299 1e5c AE83      		std Y+6,r26
 4300 1e5e BF83      		std Y+7,r27
 4301 1e60 00C0      		rjmp .L159
 4302               	.L221:
 779:lp_solve_5.5/lp_crash.c ****     else if(values[i]-eps > upB)
 4303               		.loc 1 779 0
 4304 1e62 2AA9      		ldd r18,Y+50
 4305 1e64 3BA9      		ldd r19,Y+51
 4306 1e66 8889      		ldd r24,Y+16
 4307 1e68 9989      		ldd r25,Y+17
 4308 1e6a 880F      		lsl r24
 4309 1e6c 991F      		rol r25
 4310 1e6e 880F      		lsl r24
 4311 1e70 991F      		rol r25
 4312 1e72 820F      		add r24,r18
 4313 1e74 931F      		adc r25,r19
 4314 1e76 FC01      		movw r30,r24
 4315 1e78 8081      		ld r24,Z
 4316 1e7a 9181      		ldd r25,Z+1
 4317 1e7c A281      		ldd r26,Z+2
 4318 1e7e B381      		ldd r27,Z+3
 4319 1e80 2C8D      		ldd r18,Y+28
 4320 1e82 3D8D      		ldd r19,Y+29
 4321 1e84 4E8D      		ldd r20,Y+30
 4322 1e86 5F8D      		ldd r21,Y+31
 4323 1e88 BC01      		movw r22,r24
 4324 1e8a CD01      		movw r24,r26
 4325 1e8c 0E94 0000 		call __subsf3
 4326 1e90 DC01      		movw r26,r24
 4327 1e92 CB01      		movw r24,r22
 4328 1e94 2885      		ldd r18,Y+8
 4329 1e96 3985      		ldd r19,Y+9
 4330 1e98 4A85      		ldd r20,Y+10
 4331 1e9a 5B85      		ldd r21,Y+11
 4332 1e9c BC01      		movw r22,r24
 4333 1e9e CD01      		movw r24,r26
 4334 1ea0 0E94 0000 		call __gtsf2
 4335 1ea4 1816      		cp __zero_reg__,r24
 4336 1ea6 04F4      		brge .L222
 780:lp_solve_5.5/lp_crash.c ****       error = values[i]-upB;
 4337               		.loc 1 780 0
 4338 1ea8 2AA9      		ldd r18,Y+50
 4339 1eaa 3BA9      		ldd r19,Y+51
 4340 1eac 8889      		ldd r24,Y+16
 4341 1eae 9989      		ldd r25,Y+17
 4342 1eb0 880F      		lsl r24
 4343 1eb2 991F      		rol r25
 4344 1eb4 880F      		lsl r24
 4345 1eb6 991F      		rol r25
 4346 1eb8 820F      		add r24,r18
 4347 1eba 931F      		adc r25,r19
 4348 1ebc FC01      		movw r30,r24
 4349 1ebe 8081      		ld r24,Z
 4350 1ec0 9181      		ldd r25,Z+1
 4351 1ec2 A281      		ldd r26,Z+2
 4352 1ec4 B381      		ldd r27,Z+3
 4353 1ec6 2885      		ldd r18,Y+8
 4354 1ec8 3985      		ldd r19,Y+9
 4355 1eca 4A85      		ldd r20,Y+10
 4356 1ecc 5B85      		ldd r21,Y+11
 4357 1ece BC01      		movw r22,r24
 4358 1ed0 CD01      		movw r24,r26
 4359 1ed2 0E94 0000 		call __subsf3
 4360 1ed6 DC01      		movw r26,r24
 4361 1ed8 CB01      		movw r24,r22
 4362 1eda 8C83      		std Y+4,r24
 4363 1edc 9D83      		std Y+5,r25
 4364 1ede AE83      		std Y+6,r26
 4365 1ee0 BF83      		std Y+7,r27
 4366 1ee2 00C0      		rjmp .L159
 4367               	.L222:
 781:lp_solve_5.5/lp_crash.c ****     /* Non-violated constraints/variables bounds */
 782:lp_solve_5.5/lp_crash.c ****     else if(my_infinite(lp, upB))
 4368               		.loc 1 782 0
 4369 1ee4 8885      		ldd r24,Y+8
 4370 1ee6 9985      		ldd r25,Y+9
 4371 1ee8 AA85      		ldd r26,Y+10
 4372 1eea BB85      		ldd r27,Y+11
 4373 1eec BF77      		andi r27,0x7f
 4374 1eee 2EA9      		ldd r18,Y+54
 4375 1ef0 3FA9      		ldd r19,Y+55
 4376 1ef2 265F      		subi r18,-10
 4377 1ef4 3C4F      		sbci r19,-4
 4378 1ef6 F901      		movw r30,r18
 4379 1ef8 2081      		ld r18,Z
 4380 1efa 3181      		ldd r19,Z+1
 4381 1efc 4281      		ldd r20,Z+2
 4382 1efe 5381      		ldd r21,Z+3
 4383 1f00 BC01      		movw r22,r24
 4384 1f02 CD01      		movw r24,r26
 4385 1f04 0E94 0000 		call __gesf2
 4386 1f08 8823      		tst r24
 4387 1f0a 04F4      		brge .+2
 4388 1f0c 00C0      		rjmp .L223
 783:lp_solve_5.5/lp_crash.c ****       error = MAX(0, values[i]-loB);
 4389               		.loc 1 783 0
 4390 1f0e 2AA9      		ldd r18,Y+50
 4391 1f10 3BA9      		ldd r19,Y+51
 4392 1f12 8889      		ldd r24,Y+16
 4393 1f14 9989      		ldd r25,Y+17
 4394 1f16 880F      		lsl r24
 4395 1f18 991F      		rol r25
 4396 1f1a 880F      		lsl r24
 4397 1f1c 991F      		rol r25
 4398 1f1e 820F      		add r24,r18
 4399 1f20 931F      		adc r25,r19
 4400 1f22 FC01      		movw r30,r24
 4401 1f24 8081      		ld r24,Z
 4402 1f26 9181      		ldd r25,Z+1
 4403 1f28 A281      		ldd r26,Z+2
 4404 1f2a B381      		ldd r27,Z+3
 4405 1f2c 2C85      		ldd r18,Y+12
 4406 1f2e 3D85      		ldd r19,Y+13
 4407 1f30 4E85      		ldd r20,Y+14
 4408 1f32 5F85      		ldd r21,Y+15
 4409 1f34 BC01      		movw r22,r24
 4410 1f36 CD01      		movw r24,r26
 4411 1f38 0E94 0000 		call __subsf3
 4412 1f3c DC01      		movw r26,r24
 4413 1f3e CB01      		movw r24,r22
 4414 1f40 20E0      		ldi r18,0
 4415 1f42 30E0      		ldi r19,0
 4416 1f44 A901      		movw r20,r18
 4417 1f46 BC01      		movw r22,r24
 4418 1f48 CD01      		movw r24,r26
 4419 1f4a 0E94 0000 		call __ltsf2
 4420 1f4e 8823      		tst r24
 4421 1f50 04F4      		brge .L224
 4422               		.loc 1 783 0 is_stmt 0 discriminator 1
 4423 1f52 80E0      		ldi r24,0
 4424 1f54 90E0      		ldi r25,0
 4425 1f56 DC01      		movw r26,r24
 4426 1f58 00C0      		rjmp .L168
 4427               	.L224:
 4428               		.loc 1 783 0 discriminator 2
 4429 1f5a 2AA9      		ldd r18,Y+50
 4430 1f5c 3BA9      		ldd r19,Y+51
 4431 1f5e 8889      		ldd r24,Y+16
 4432 1f60 9989      		ldd r25,Y+17
 4433 1f62 880F      		lsl r24
 4434 1f64 991F      		rol r25
 4435 1f66 880F      		lsl r24
 4436 1f68 991F      		rol r25
 4437 1f6a 820F      		add r24,r18
 4438 1f6c 931F      		adc r25,r19
 4439 1f6e FC01      		movw r30,r24
 4440 1f70 8081      		ld r24,Z
 4441 1f72 9181      		ldd r25,Z+1
 4442 1f74 A281      		ldd r26,Z+2
 4443 1f76 B381      		ldd r27,Z+3
 4444 1f78 2C85      		ldd r18,Y+12
 4445 1f7a 3D85      		ldd r19,Y+13
 4446 1f7c 4E85      		ldd r20,Y+14
 4447 1f7e 5F85      		ldd r21,Y+15
 4448 1f80 BC01      		movw r22,r24
 4449 1f82 CD01      		movw r24,r26
 4450 1f84 0E94 0000 		call __subsf3
 4451 1f88 DC01      		movw r26,r24
 4452 1f8a CB01      		movw r24,r22
 4453               	.L168:
 4454               		.loc 1 783 0 discriminator 4
 4455 1f8c 8C83      		std Y+4,r24
 4456 1f8e 9D83      		std Y+5,r25
 4457 1f90 AE83      		std Y+6,r26
 4458 1f92 BF83      		std Y+7,r27
 4459 1f94 00C0      		rjmp .L159
 4460               	.L223:
 784:lp_solve_5.5/lp_crash.c ****     else if(my_infinite(lp, loB))
 4461               		.loc 1 784 0 is_stmt 1
 4462 1f96 8C85      		ldd r24,Y+12
 4463 1f98 9D85      		ldd r25,Y+13
 4464 1f9a AE85      		ldd r26,Y+14
 4465 1f9c BF85      		ldd r27,Y+15
 4466 1f9e BF77      		andi r27,0x7f
 4467 1fa0 2EA9      		ldd r18,Y+54
 4468 1fa2 3FA9      		ldd r19,Y+55
 4469 1fa4 265F      		subi r18,-10
 4470 1fa6 3C4F      		sbci r19,-4
 4471 1fa8 F901      		movw r30,r18
 4472 1faa 2081      		ld r18,Z
 4473 1fac 3181      		ldd r19,Z+1
 4474 1fae 4281      		ldd r20,Z+2
 4475 1fb0 5381      		ldd r21,Z+3
 4476 1fb2 BC01      		movw r22,r24
 4477 1fb4 CD01      		movw r24,r26
 4478 1fb6 0E94 0000 		call __gesf2
 4479 1fba 8823      		tst r24
 4480 1fbc 04F4      		brge .+2
 4481 1fbe 00C0      		rjmp .L225
 785:lp_solve_5.5/lp_crash.c ****       error = MAX(0, upB-values[i]);
 4482               		.loc 1 785 0
 4483 1fc0 2AA9      		ldd r18,Y+50
 4484 1fc2 3BA9      		ldd r19,Y+51
 4485 1fc4 8889      		ldd r24,Y+16
 4486 1fc6 9989      		ldd r25,Y+17
 4487 1fc8 880F      		lsl r24
 4488 1fca 991F      		rol r25
 4489 1fcc 880F      		lsl r24
 4490 1fce 991F      		rol r25
 4491 1fd0 820F      		add r24,r18
 4492 1fd2 931F      		adc r25,r19
 4493 1fd4 FC01      		movw r30,r24
 4494 1fd6 8081      		ld r24,Z
 4495 1fd8 9181      		ldd r25,Z+1
 4496 1fda A281      		ldd r26,Z+2
 4497 1fdc B381      		ldd r27,Z+3
 4498 1fde 9C01      		movw r18,r24
 4499 1fe0 AD01      		movw r20,r26
 4500 1fe2 6885      		ldd r22,Y+8
 4501 1fe4 7985      		ldd r23,Y+9
 4502 1fe6 8A85      		ldd r24,Y+10
 4503 1fe8 9B85      		ldd r25,Y+11
 4504 1fea 0E94 0000 		call __subsf3
 4505 1fee DC01      		movw r26,r24
 4506 1ff0 CB01      		movw r24,r22
 4507 1ff2 20E0      		ldi r18,0
 4508 1ff4 30E0      		ldi r19,0
 4509 1ff6 A901      		movw r20,r18
 4510 1ff8 BC01      		movw r22,r24
 4511 1ffa CD01      		movw r24,r26
 4512 1ffc 0E94 0000 		call __ltsf2
 4513 2000 8823      		tst r24
 4514 2002 04F4      		brge .L226
 4515               		.loc 1 785 0 is_stmt 0 discriminator 1
 4516 2004 80E0      		ldi r24,0
 4517 2006 90E0      		ldi r25,0
 4518 2008 DC01      		movw r26,r24
 4519 200a 00C0      		rjmp .L173
 4520               	.L226:
 4521               		.loc 1 785 0 discriminator 2
 4522 200c 2AA9      		ldd r18,Y+50
 4523 200e 3BA9      		ldd r19,Y+51
 4524 2010 8889      		ldd r24,Y+16
 4525 2012 9989      		ldd r25,Y+17
 4526 2014 880F      		lsl r24
 4527 2016 991F      		rol r25
 4528 2018 880F      		lsl r24
 4529 201a 991F      		rol r25
 4530 201c 820F      		add r24,r18
 4531 201e 931F      		adc r25,r19
 4532 2020 FC01      		movw r30,r24
 4533 2022 8081      		ld r24,Z
 4534 2024 9181      		ldd r25,Z+1
 4535 2026 A281      		ldd r26,Z+2
 4536 2028 B381      		ldd r27,Z+3
 4537 202a 9C01      		movw r18,r24
 4538 202c AD01      		movw r20,r26
 4539 202e 6885      		ldd r22,Y+8
 4540 2030 7985      		ldd r23,Y+9
 4541 2032 8A85      		ldd r24,Y+10
 4542 2034 9B85      		ldd r25,Y+11
 4543 2036 0E94 0000 		call __subsf3
 4544 203a DC01      		movw r26,r24
 4545 203c CB01      		movw r24,r22
 4546               	.L173:
 4547               		.loc 1 785 0 discriminator 4
 4548 203e 8C83      		std Y+4,r24
 4549 2040 9D83      		std Y+5,r25
 4550 2042 AE83      		std Y+6,r26
 4551 2044 BF83      		std Y+7,r27
 4552 2046 00C0      		rjmp .L159
 4553               	.L225:
 786:lp_solve_5.5/lp_crash.c ****     else
 787:lp_solve_5.5/lp_crash.c ****       error = MIN(upB-values[i], values[i]-loB); /* MAX(upB-values[i], values[i]-loB); */
 4554               		.loc 1 787 0 is_stmt 1
 4555 2048 2AA9      		ldd r18,Y+50
 4556 204a 3BA9      		ldd r19,Y+51
 4557 204c 8889      		ldd r24,Y+16
 4558 204e 9989      		ldd r25,Y+17
 4559 2050 880F      		lsl r24
 4560 2052 991F      		rol r25
 4561 2054 880F      		lsl r24
 4562 2056 991F      		rol r25
 4563 2058 820F      		add r24,r18
 4564 205a 931F      		adc r25,r19
 4565 205c FC01      		movw r30,r24
 4566 205e 8081      		ld r24,Z
 4567 2060 9181      		ldd r25,Z+1
 4568 2062 A281      		ldd r26,Z+2
 4569 2064 B381      		ldd r27,Z+3
 4570 2066 9C01      		movw r18,r24
 4571 2068 AD01      		movw r20,r26
 4572 206a 6885      		ldd r22,Y+8
 4573 206c 7985      		ldd r23,Y+9
 4574 206e 8A85      		ldd r24,Y+10
 4575 2070 9B85      		ldd r25,Y+11
 4576 2072 0E94 0000 		call __subsf3
 4577 2076 DC01      		movw r26,r24
 4578 2078 CB01      		movw r24,r22
 4579 207a 6C01      		movw r12,r24
 4580 207c 7D01      		movw r14,r26
 4581 207e 2AA9      		ldd r18,Y+50
 4582 2080 3BA9      		ldd r19,Y+51
 4583 2082 8889      		ldd r24,Y+16
 4584 2084 9989      		ldd r25,Y+17
 4585 2086 880F      		lsl r24
 4586 2088 991F      		rol r25
 4587 208a 880F      		lsl r24
 4588 208c 991F      		rol r25
 4589 208e 820F      		add r24,r18
 4590 2090 931F      		adc r25,r19
 4591 2092 FC01      		movw r30,r24
 4592 2094 8081      		ld r24,Z
 4593 2096 9181      		ldd r25,Z+1
 4594 2098 A281      		ldd r26,Z+2
 4595 209a B381      		ldd r27,Z+3
 4596 209c 2C85      		ldd r18,Y+12
 4597 209e 3D85      		ldd r19,Y+13
 4598 20a0 4E85      		ldd r20,Y+14
 4599 20a2 5F85      		ldd r21,Y+15
 4600 20a4 BC01      		movw r22,r24
 4601 20a6 CD01      		movw r24,r26
 4602 20a8 0E94 0000 		call __subsf3
 4603 20ac DC01      		movw r26,r24
 4604 20ae CB01      		movw r24,r22
 4605 20b0 9C01      		movw r18,r24
 4606 20b2 AD01      		movw r20,r26
 4607 20b4 C701      		movw r24,r14
 4608 20b6 B601      		movw r22,r12
 4609 20b8 0E94 0000 		call __ltsf2
 4610 20bc 8823      		tst r24
 4611 20be 04F4      		brge .L227
 4612               		.loc 1 787 0 is_stmt 0 discriminator 1
 4613 20c0 2AA9      		ldd r18,Y+50
 4614 20c2 3BA9      		ldd r19,Y+51
 4615 20c4 8889      		ldd r24,Y+16
 4616 20c6 9989      		ldd r25,Y+17
 4617 20c8 880F      		lsl r24
 4618 20ca 991F      		rol r25
 4619 20cc 880F      		lsl r24
 4620 20ce 991F      		rol r25
 4621 20d0 820F      		add r24,r18
 4622 20d2 931F      		adc r25,r19
 4623 20d4 FC01      		movw r30,r24
 4624 20d6 8081      		ld r24,Z
 4625 20d8 9181      		ldd r25,Z+1
 4626 20da A281      		ldd r26,Z+2
 4627 20dc B381      		ldd r27,Z+3
 4628 20de 9C01      		movw r18,r24
 4629 20e0 AD01      		movw r20,r26
 4630 20e2 6885      		ldd r22,Y+8
 4631 20e4 7985      		ldd r23,Y+9
 4632 20e6 8A85      		ldd r24,Y+10
 4633 20e8 9B85      		ldd r25,Y+11
 4634 20ea 0E94 0000 		call __subsf3
 4635 20ee DC01      		movw r26,r24
 4636 20f0 CB01      		movw r24,r22
 4637 20f2 00C0      		rjmp .L176
 4638               	.L227:
 4639               		.loc 1 787 0 discriminator 2
 4640 20f4 2AA9      		ldd r18,Y+50
 4641 20f6 3BA9      		ldd r19,Y+51
 4642 20f8 8889      		ldd r24,Y+16
 4643 20fa 9989      		ldd r25,Y+17
 4644 20fc 880F      		lsl r24
 4645 20fe 991F      		rol r25
 4646 2100 880F      		lsl r24
 4647 2102 991F      		rol r25
 4648 2104 820F      		add r24,r18
 4649 2106 931F      		adc r25,r19
 4650 2108 FC01      		movw r30,r24
 4651 210a 8081      		ld r24,Z
 4652 210c 9181      		ldd r25,Z+1
 4653 210e A281      		ldd r26,Z+2
 4654 2110 B381      		ldd r27,Z+3
 4655 2112 2C85      		ldd r18,Y+12
 4656 2114 3D85      		ldd r19,Y+13
 4657 2116 4E85      		ldd r20,Y+14
 4658 2118 5F85      		ldd r21,Y+15
 4659 211a BC01      		movw r22,r24
 4660 211c CD01      		movw r24,r26
 4661 211e 0E94 0000 		call __subsf3
 4662 2122 DC01      		movw r26,r24
 4663 2124 CB01      		movw r24,r22
 4664               	.L176:
 4665               		.loc 1 787 0 discriminator 4
 4666 2126 8C83      		std Y+4,r24
 4667 2128 9D83      		std Y+5,r25
 4668 212a AE83      		std Y+6,r26
 4669 212c BF83      		std Y+7,r27
 4670               	.L159:
 788:lp_solve_5.5/lp_crash.c ****     if(error != 0)
 4671               		.loc 1 788 0 is_stmt 1
 4672 212e 20E0      		ldi r18,0
 4673 2130 30E0      		ldi r19,0
 4674 2132 A901      		movw r20,r18
 4675 2134 6C81      		ldd r22,Y+4
 4676 2136 7D81      		ldd r23,Y+5
 4677 2138 8E81      		ldd r24,Y+6
 4678 213a 9F81      		ldd r25,Y+7
 4679 213c 0E94 0000 		call __nesf2
 4680 2140 8823      		tst r24
 4681 2142 01F0      		breq .L177
 789:lp_solve_5.5/lp_crash.c ****       violation[i] = sortorder*error;
 4682               		.loc 1 789 0
 4683 2144 2CA9      		ldd r18,Y+52
 4684 2146 3DA9      		ldd r19,Y+53
 4685 2148 8889      		ldd r24,Y+16
 4686 214a 9989      		ldd r25,Y+17
 4687 214c 880F      		lsl r24
 4688 214e 991F      		rol r25
 4689 2150 880F      		lsl r24
 4690 2152 991F      		rol r25
 4691 2154 8901      		movw r16,r18
 4692 2156 080F      		add r16,r24
 4693 2158 191F      		adc r17,r25
 4694 215a 2C81      		ldd r18,Y+4
 4695 215c 3D81      		ldd r19,Y+5
 4696 215e 4E81      		ldd r20,Y+6
 4697 2160 5F81      		ldd r21,Y+7
 4698 2162 68A1      		ldd r22,Y+32
 4699 2164 79A1      		ldd r23,Y+33
 4700 2166 8AA1      		ldd r24,Y+34
 4701 2168 9BA1      		ldd r25,Y+35
 4702 216a 0E94 0000 		call __mulsf3
 4703 216e DC01      		movw r26,r24
 4704 2170 CB01      		movw r24,r22
 4705 2172 F801      		movw r30,r16
 4706 2174 8083      		st Z,r24
 4707 2176 9183      		std Z+1,r25
 4708 2178 A283      		std Z+2,r26
 4709 217a B383      		std Z+3,r27
 4710               	.L177:
 790:lp_solve_5.5/lp_crash.c ****     basisvector[i] = i;
 4711               		.loc 1 790 0 discriminator 2
 4712 217c 8889      		ldd r24,Y+16
 4713 217e 9989      		ldd r25,Y+17
 4714 2180 880F      		lsl r24
 4715 2182 991F      		rol r25
 4716 2184 2AAD      		ldd r18,Y+58
 4717 2186 3BAD      		ldd r19,Y+59
 4718 2188 820F      		add r24,r18
 4719 218a 931F      		adc r25,r19
 4720 218c 2889      		ldd r18,Y+16
 4721 218e 3989      		ldd r19,Y+17
 4722 2190 FC01      		movw r30,r24
 4723 2192 3183      		std Z+1,r19
 4724 2194 2083      		st Z,r18
 763:lp_solve_5.5/lp_crash.c ****     if(i <= nrows) {
 4725               		.loc 1 763 0 discriminator 2
 4726 2196 8889      		ldd r24,Y+16
 4727 2198 9989      		ldd r25,Y+17
 4728 219a 0196      		adiw r24,1
 4729 219c 998B      		std Y+17,r25
 4730 219e 888B      		std Y+16,r24
 4731               	.L153:
 763:lp_solve_5.5/lp_crash.c ****     if(i <= nrows) {
 4732               		.loc 1 763 0 is_stmt 0 discriminator 1
 4733 21a0 2889      		ldd r18,Y+16
 4734 21a2 3989      		ldd r19,Y+17
 4735 21a4 8AA5      		ldd r24,Y+42
 4736 21a6 9BA5      		ldd r25,Y+43
 4737 21a8 8217      		cp r24,r18
 4738 21aa 9307      		cpc r25,r19
 4739 21ac 04F0      		brlt .+2
 4740 21ae 00C0      		rjmp .L179
 791:lp_solve_5.5/lp_crash.c ****   }
 792:lp_solve_5.5/lp_crash.c **** 
 793:lp_solve_5.5/lp_crash.c ****   /* Sort decending , meaning that variables with the largest
 794:lp_solve_5.5/lp_crash.c ****      "violations" will be designated basic. Effectively, we are performing a
 795:lp_solve_5.5/lp_crash.c ****      greedy type algorithm, but start at the "least interesting" end. */
 796:lp_solve_5.5/lp_crash.c ****   sortByREAL(basisvector, violation, nsum, 1, FALSE);
 4741               		.loc 1 796 0 is_stmt 1
 4742 21b0 6CA9      		ldd r22,Y+52
 4743 21b2 7DA9      		ldd r23,Y+53
 4744 21b4 4AA5      		ldd r20,Y+42
 4745 21b6 5BA5      		ldd r21,Y+43
 4746 21b8 8AAD      		ldd r24,Y+58
 4747 21ba 9BAD      		ldd r25,Y+59
 4748 21bc 00E0      		ldi r16,0
 4749 21be 21E0      		ldi r18,lo8(1)
 4750 21c0 30E0      		ldi r19,0
 4751 21c2 0E94 0000 		call sortByREAL
 797:lp_solve_5.5/lp_crash.c ****   error = violation[1]; /* Used for setting the return value */
 4752               		.loc 1 797 0
 4753 21c6 8CA9      		ldd r24,Y+52
 4754 21c8 9DA9      		ldd r25,Y+53
 4755 21ca FC01      		movw r30,r24
 4756 21cc 8481      		ldd r24,Z+4
 4757 21ce 9581      		ldd r25,Z+5
 4758 21d0 A681      		ldd r26,Z+6
 4759 21d2 B781      		ldd r27,Z+7
 4760 21d4 8C83      		std Y+4,r24
 4761 21d6 9D83      		std Y+5,r25
 4762 21d8 AE83      		std Y+6,r26
 4763 21da BF83      		std Y+7,r27
 798:lp_solve_5.5/lp_crash.c **** 
 799:lp_solve_5.5/lp_crash.c ****   /* Let us check for obvious row singularities and try to fix these.
 800:lp_solve_5.5/lp_crash.c ****      Note that we reuse the memory allocated to the violation array.
 801:lp_solve_5.5/lp_crash.c ****      First assemble necessary basis statistics... */
 802:lp_solve_5.5/lp_crash.c ****   slkpos = (int *) violation;
 4764               		.loc 1 802 0
 4765 21dc 8CA9      		ldd r24,Y+52
 4766 21de 9DA9      		ldd r25,Y+53
 4767 21e0 9DA3      		std Y+37,r25
 4768 21e2 8CA3      		std Y+36,r24
 803:lp_solve_5.5/lp_crash.c ****   n = nrows+1;
 4769               		.loc 1 803 0
 4770 21e4 8EA1      		ldd r24,Y+38
 4771 21e6 9FA1      		ldd r25,Y+39
 4772 21e8 0196      		adiw r24,1
 4773 21ea 9FA7      		std Y+47,r25
 4774 21ec 8EA7      		std Y+46,r24
 804:lp_solve_5.5/lp_crash.c ****   MEMCLEAR(slkpos, n);
 4775               		.loc 1 804 0
 4776 21ee 8EA5      		ldd r24,Y+46
 4777 21f0 9FA5      		ldd r25,Y+47
 4778 21f2 9C01      		movw r18,r24
 4779 21f4 220F      		lsl r18
 4780 21f6 331F      		rol r19
 4781 21f8 8CA1      		ldd r24,Y+36
 4782 21fa 9DA1      		ldd r25,Y+37
 4783 21fc A901      		movw r20,r18
 4784 21fe 60E0      		ldi r22,0
 4785 2200 70E0      		ldi r23,0
 4786 2202 0E94 0000 		call memset
 805:lp_solve_5.5/lp_crash.c ****   isnz = (MYBOOL *) (slkpos+n+1);
 4787               		.loc 1 805 0
 4788 2206 8EA5      		ldd r24,Y+46
 4789 2208 9FA5      		ldd r25,Y+47
 4790 220a 0196      		adiw r24,1
 4791 220c 880F      		lsl r24
 4792 220e 991F      		rol r25
 4793 2210 2CA1      		ldd r18,Y+36
 4794 2212 3DA1      		ldd r19,Y+37
 4795 2214 820F      		add r24,r18
 4796 2216 931F      		adc r25,r19
 4797 2218 9B8F      		std Y+27,r25
 4798 221a 8A8F      		std Y+26,r24
 806:lp_solve_5.5/lp_crash.c ****   MEMCLEAR(isnz, n);
 4799               		.loc 1 806 0
 4800 221c 2EA5      		ldd r18,Y+46
 4801 221e 3FA5      		ldd r19,Y+47
 4802 2220 8A8D      		ldd r24,Y+26
 4803 2222 9B8D      		ldd r25,Y+27
 4804 2224 A901      		movw r20,r18
 4805 2226 60E0      		ldi r22,0
 4806 2228 70E0      		ldi r23,0
 4807 222a 0E94 0000 		call memset
 807:lp_solve_5.5/lp_crash.c ****   for(i = 1; i <= nrows; i++) {
 4808               		.loc 1 807 0
 4809 222e 81E0      		ldi r24,lo8(1)
 4810 2230 90E0      		ldi r25,0
 4811 2232 998B      		std Y+17,r25
 4812 2234 888B      		std Y+16,r24
 4813 2236 00C0      		rjmp .L180
 4814               	.L184:
 808:lp_solve_5.5/lp_crash.c ****     j = abs(basisvector[i]);
 4815               		.loc 1 808 0
 4816 2238 8889      		ldd r24,Y+16
 4817 223a 9989      		ldd r25,Y+17
 4818 223c 880F      		lsl r24
 4819 223e 991F      		rol r25
 4820 2240 2AAD      		ldd r18,Y+58
 4821 2242 3BAD      		ldd r19,Y+59
 4822 2244 820F      		add r24,r18
 4823 2246 931F      		adc r25,r19
 4824 2248 FC01      		movw r30,r24
 4825 224a 8081      		ld r24,Z
 4826 224c 9181      		ldd r25,Z+1
 4827 224e 9923      		tst r25
 4828 2250 04F4      		brge .L181
 4829 2252 9195      		neg r25
 4830 2254 8195      		neg r24
 4831 2256 9109      		sbc r25,__zero_reg__
 4832               	.L181:
 4833 2258 9B8B      		std Y+19,r25
 4834 225a 8A8B      		std Y+18,r24
 809:lp_solve_5.5/lp_crash.c ****     if(j <= nrows) {
 4835               		.loc 1 809 0
 4836 225c 2A89      		ldd r18,Y+18
 4837 225e 3B89      		ldd r19,Y+19
 4838 2260 8EA1      		ldd r24,Y+38
 4839 2262 9FA1      		ldd r25,Y+39
 4840 2264 8217      		cp r24,r18
 4841 2266 9307      		cpc r25,r19
 4842 2268 04F0      		brlt .L182
 810:lp_solve_5.5/lp_crash.c ****       isnz[j] = TRUE;
 4843               		.loc 1 810 0
 4844 226a 8A89      		ldd r24,Y+18
 4845 226c 9B89      		ldd r25,Y+19
 4846 226e 2A8D      		ldd r18,Y+26
 4847 2270 3B8D      		ldd r19,Y+27
 4848 2272 820F      		add r24,r18
 4849 2274 931F      		adc r25,r19
 4850 2276 21E0      		ldi r18,lo8(1)
 4851 2278 FC01      		movw r30,r24
 4852 227a 2083      		st Z,r18
 811:lp_solve_5.5/lp_crash.c ****       slkpos[j] = i;
 4853               		.loc 1 811 0
 4854 227c 8A89      		ldd r24,Y+18
 4855 227e 9B89      		ldd r25,Y+19
 4856 2280 880F      		lsl r24
 4857 2282 991F      		rol r25
 4858 2284 2CA1      		ldd r18,Y+36
 4859 2286 3DA1      		ldd r19,Y+37
 4860 2288 820F      		add r24,r18
 4861 228a 931F      		adc r25,r19
 4862 228c 2889      		ldd r18,Y+16
 4863 228e 3989      		ldd r19,Y+17
 4864 2290 FC01      		movw r30,r24
 4865 2292 3183      		std Z+1,r19
 4866 2294 2083      		st Z,r18
 4867 2296 00C0      		rjmp .L183
 4868               	.L182:
 812:lp_solve_5.5/lp_crash.c ****     }
 813:lp_solve_5.5/lp_crash.c ****     else {
 814:lp_solve_5.5/lp_crash.c ****       j-= nrows;
 4869               		.loc 1 814 0
 4870 2298 2A89      		ldd r18,Y+18
 4871 229a 3B89      		ldd r19,Y+19
 4872 229c 8EA1      		ldd r24,Y+38
 4873 229e 9FA1      		ldd r25,Y+39
 4874 22a0 A901      		movw r20,r18
 4875 22a2 481B      		sub r20,r24
 4876 22a4 590B      		sbc r21,r25
 4877 22a6 CA01      		movw r24,r20
 4878 22a8 9B8B      		std Y+19,r25
 4879 22aa 8A8B      		std Y+18,r24
 815:lp_solve_5.5/lp_crash.c ****       jj = mat->col_end[j-1];
 4880               		.loc 1 815 0
 4881 22ac 8CA5      		ldd r24,Y+44
 4882 22ae 9DA5      		ldd r25,Y+45
 4883 22b0 FC01      		movw r30,r24
 4884 22b2 2289      		ldd r18,Z+18
 4885 22b4 3389      		ldd r19,Z+19
 4886 22b6 8A89      		ldd r24,Y+18
 4887 22b8 9B89      		ldd r25,Y+19
 4888 22ba 8150      		subi r24,1
 4889 22bc 9048      		sbci r25,-128
 4890 22be 880F      		lsl r24
 4891 22c0 991F      		rol r25
 4892 22c2 820F      		add r24,r18
 4893 22c4 931F      		adc r25,r19
 4894 22c6 FC01      		movw r30,r24
 4895 22c8 8081      		ld r24,Z
 4896 22ca 9181      		ldd r25,Z+1
 4897 22cc 99AB      		std Y+49,r25
 4898 22ce 88AB      		std Y+48,r24
 816:lp_solve_5.5/lp_crash.c ****       jj = COL_MAT_ROWNR(jj);
 4899               		.loc 1 816 0
 4900 22d0 8CA5      		ldd r24,Y+44
 4901 22d2 9DA5      		ldd r25,Y+45
 4902 22d4 FC01      		movw r30,r24
 4903 22d6 2685      		ldd r18,Z+14
 4904 22d8 3785      		ldd r19,Z+15
 4905 22da 88A9      		ldd r24,Y+48
 4906 22dc 99A9      		ldd r25,Y+49
 4907 22de 880F      		lsl r24
 4908 22e0 991F      		rol r25
 4909 22e2 820F      		add r24,r18
 4910 22e4 931F      		adc r25,r19
 4911 22e6 FC01      		movw r30,r24
 4912 22e8 8081      		ld r24,Z
 4913 22ea 9181      		ldd r25,Z+1
 4914 22ec 99AB      		std Y+49,r25
 4915 22ee 88AB      		std Y+48,r24
 817:lp_solve_5.5/lp_crash.c ****       isnz[jj] = TRUE;
 4916               		.loc 1 817 0
 4917 22f0 88A9      		ldd r24,Y+48
 4918 22f2 99A9      		ldd r25,Y+49
 4919 22f4 2A8D      		ldd r18,Y+26
 4920 22f6 3B8D      		ldd r19,Y+27
 4921 22f8 820F      		add r24,r18
 4922 22fa 931F      		adc r25,r19
 4923 22fc 21E0      		ldi r18,lo8(1)
 4924 22fe FC01      		movw r30,r24
 4925 2300 2083      		st Z,r18
 4926               	.L183:
 807:lp_solve_5.5/lp_crash.c ****     j = abs(basisvector[i]);
 4927               		.loc 1 807 0 discriminator 2
 4928 2302 8889      		ldd r24,Y+16
 4929 2304 9989      		ldd r25,Y+17
 4930 2306 0196      		adiw r24,1
 4931 2308 998B      		std Y+17,r25
 4932 230a 888B      		std Y+16,r24
 4933               	.L180:
 807:lp_solve_5.5/lp_crash.c ****     j = abs(basisvector[i]);
 4934               		.loc 1 807 0 is_stmt 0 discriminator 1
 4935 230c 2889      		ldd r18,Y+16
 4936 230e 3989      		ldd r19,Y+17
 4937 2310 8EA1      		ldd r24,Y+38
 4938 2312 9FA1      		ldd r25,Y+39
 4939 2314 8217      		cp r24,r18
 4940 2316 9307      		cpc r25,r19
 4941 2318 04F0      		brlt .+2
 4942 231a 00C0      		rjmp .L184
 818:lp_solve_5.5/lp_crash.c ****     }
 819:lp_solve_5.5/lp_crash.c ****   }
 820:lp_solve_5.5/lp_crash.c ****   for(; i <= nsum; i++) {
 4943               		.loc 1 820 0 is_stmt 1
 4944 231c 00C0      		rjmp .L185
 4945               	.L188:
 821:lp_solve_5.5/lp_crash.c ****     j = abs(basisvector[i]);
 4946               		.loc 1 821 0
 4947 231e 8889      		ldd r24,Y+16
 4948 2320 9989      		ldd r25,Y+17
 4949 2322 880F      		lsl r24
 4950 2324 991F      		rol r25
 4951 2326 2AAD      		ldd r18,Y+58
 4952 2328 3BAD      		ldd r19,Y+59
 4953 232a 820F      		add r24,r18
 4954 232c 931F      		adc r25,r19
 4955 232e FC01      		movw r30,r24
 4956 2330 8081      		ld r24,Z
 4957 2332 9181      		ldd r25,Z+1
 4958 2334 9923      		tst r25
 4959 2336 04F4      		brge .L186
 4960 2338 9195      		neg r25
 4961 233a 8195      		neg r24
 4962 233c 9109      		sbc r25,__zero_reg__
 4963               	.L186:
 4964 233e 9B8B      		std Y+19,r25
 4965 2340 8A8B      		std Y+18,r24
 822:lp_solve_5.5/lp_crash.c ****     if(j <= nrows)
 4966               		.loc 1 822 0
 4967 2342 2A89      		ldd r18,Y+18
 4968 2344 3B89      		ldd r19,Y+19
 4969 2346 8EA1      		ldd r24,Y+38
 4970 2348 9FA1      		ldd r25,Y+39
 4971 234a 8217      		cp r24,r18
 4972 234c 9307      		cpc r25,r19
 4973 234e 04F0      		brlt .L187
 823:lp_solve_5.5/lp_crash.c ****       slkpos[j] = i;
 4974               		.loc 1 823 0
 4975 2350 8A89      		ldd r24,Y+18
 4976 2352 9B89      		ldd r25,Y+19
 4977 2354 880F      		lsl r24
 4978 2356 991F      		rol r25
 4979 2358 2CA1      		ldd r18,Y+36
 4980 235a 3DA1      		ldd r19,Y+37
 4981 235c 820F      		add r24,r18
 4982 235e 931F      		adc r25,r19
 4983 2360 2889      		ldd r18,Y+16
 4984 2362 3989      		ldd r19,Y+17
 4985 2364 FC01      		movw r30,r24
 4986 2366 3183      		std Z+1,r19
 4987 2368 2083      		st Z,r18
 4988               	.L187:
 820:lp_solve_5.5/lp_crash.c ****     j = abs(basisvector[i]);
 4989               		.loc 1 820 0
 4990 236a 8889      		ldd r24,Y+16
 4991 236c 9989      		ldd r25,Y+17
 4992 236e 0196      		adiw r24,1
 4993 2370 998B      		std Y+17,r25
 4994 2372 888B      		std Y+16,r24
 4995               	.L185:
 820:lp_solve_5.5/lp_crash.c ****     j = abs(basisvector[i]);
 4996               		.loc 1 820 0 is_stmt 0 discriminator 1
 4997 2374 2889      		ldd r18,Y+16
 4998 2376 3989      		ldd r19,Y+17
 4999 2378 8AA5      		ldd r24,Y+42
 5000 237a 9BA5      		ldd r25,Y+43
 5001 237c 8217      		cp r24,r18
 5002 237e 9307      		cpc r25,r19
 5003 2380 04F4      		brge .L188
 824:lp_solve_5.5/lp_crash.c ****   }
 825:lp_solve_5.5/lp_crash.c **** 
 826:lp_solve_5.5/lp_crash.c ****   /* ...then set the corresponding slacks basic for row rank deficient positions */
 827:lp_solve_5.5/lp_crash.c ****   for(j = 1; j <= nrows; j++) {
 5004               		.loc 1 827 0 is_stmt 1
 5005 2382 81E0      		ldi r24,lo8(1)
 5006 2384 90E0      		ldi r25,0
 5007 2386 9B8B      		std Y+19,r25
 5008 2388 8A8B      		std Y+18,r24
 5009 238a 00C0      		rjmp .L189
 5010               	.L193:
 828:lp_solve_5.5/lp_crash.c ****     if(slkpos[j] == 0)
 5011               		.loc 1 828 0
 5012 238c 8A89      		ldd r24,Y+18
 5013 238e 9B89      		ldd r25,Y+19
 5014 2390 880F      		lsl r24
 5015 2392 991F      		rol r25
 5016 2394 2CA1      		ldd r18,Y+36
 5017 2396 3DA1      		ldd r19,Y+37
 5018 2398 820F      		add r24,r18
 5019 239a 931F      		adc r25,r19
 5020 239c FC01      		movw r30,r24
 5021 239e 8081      		ld r24,Z
 5022 23a0 9181      		ldd r25,Z+1
 5023 23a2 892B      		or r24,r25
 5024 23a4 01F4      		brne .L190
 829:lp_solve_5.5/lp_crash.c ****       report(lp, SEVERE, "guess_basis: Internal error");
 5025               		.loc 1 829 0
 5026 23a6 80E0      		ldi r24,lo8(.LC2)
 5027 23a8 90E0      		ldi r25,hi8(.LC2)
 5028 23aa 892F      		mov r24,r25
 5029 23ac 8F93      		push r24
 5030 23ae 80E0      		ldi r24,lo8(.LC2)
 5031 23b0 90E0      		ldi r25,hi8(.LC2)
 5032 23b2 8F93      		push r24
 5033 23b4 1F92      		push __zero_reg__
 5034 23b6 82E0      		ldi r24,lo8(2)
 5035 23b8 8F93      		push r24
 5036 23ba 8FA9      		ldd r24,Y+55
 5037 23bc 8F93      		push r24
 5038 23be 8EA9      		ldd r24,Y+54
 5039 23c0 8F93      		push r24
 5040 23c2 0E94 0000 		call report
 5041 23c6 0F90      		pop __tmp_reg__
 5042 23c8 0F90      		pop __tmp_reg__
 5043 23ca 0F90      		pop __tmp_reg__
 5044 23cc 0F90      		pop __tmp_reg__
 5045 23ce 0F90      		pop __tmp_reg__
 5046 23d0 0F90      		pop __tmp_reg__
 5047               	.L190:
 830:lp_solve_5.5/lp_crash.c ****     if(!isnz[j]) {
 5048               		.loc 1 830 0
 5049 23d2 8A89      		ldd r24,Y+18
 5050 23d4 9B89      		ldd r25,Y+19
 5051 23d6 2A8D      		ldd r18,Y+26
 5052 23d8 3B8D      		ldd r19,Y+27
 5053 23da 820F      		add r24,r18
 5054 23dc 931F      		adc r25,r19
 5055 23de FC01      		movw r30,r24
 5056 23e0 8081      		ld r24,Z
 5057 23e2 8823      		tst r24
 5058 23e4 01F0      		breq .+2
 5059 23e6 00C0      		rjmp .L191
 831:lp_solve_5.5/lp_crash.c ****       isnz[j] = TRUE;
 5060               		.loc 1 831 0
 5061 23e8 8A89      		ldd r24,Y+18
 5062 23ea 9B89      		ldd r25,Y+19
 5063 23ec 2A8D      		ldd r18,Y+26
 5064 23ee 3B8D      		ldd r19,Y+27
 5065 23f0 820F      		add r24,r18
 5066 23f2 931F      		adc r25,r19
 5067 23f4 21E0      		ldi r18,lo8(1)
 5068 23f6 FC01      		movw r30,r24
 5069 23f8 2083      		st Z,r18
 832:lp_solve_5.5/lp_crash.c ****       i = slkpos[j];
 5070               		.loc 1 832 0
 5071 23fa 8A89      		ldd r24,Y+18
 5072 23fc 9B89      		ldd r25,Y+19
 5073 23fe 880F      		lsl r24
 5074 2400 991F      		rol r25
 5075 2402 2CA1      		ldd r18,Y+36
 5076 2404 3DA1      		ldd r19,Y+37
 5077 2406 820F      		add r24,r18
 5078 2408 931F      		adc r25,r19
 5079 240a FC01      		movw r30,r24
 5080 240c 8081      		ld r24,Z
 5081 240e 9181      		ldd r25,Z+1
 5082 2410 998B      		std Y+17,r25
 5083 2412 888B      		std Y+16,r24
 833:lp_solve_5.5/lp_crash.c ****       swapINT(&basisvector[i], &basisvector[j]);
 5084               		.loc 1 833 0
 5085 2414 8A89      		ldd r24,Y+18
 5086 2416 9B89      		ldd r25,Y+19
 5087 2418 880F      		lsl r24
 5088 241a 991F      		rol r25
 5089 241c 2AAD      		ldd r18,Y+58
 5090 241e 3BAD      		ldd r19,Y+59
 5091 2420 A901      		movw r20,r18
 5092 2422 480F      		add r20,r24
 5093 2424 591F      		adc r21,r25
 5094 2426 8889      		ldd r24,Y+16
 5095 2428 9989      		ldd r25,Y+17
 5096 242a 880F      		lsl r24
 5097 242c 991F      		rol r25
 5098 242e 2AAD      		ldd r18,Y+58
 5099 2430 3BAD      		ldd r19,Y+59
 5100 2432 820F      		add r24,r18
 5101 2434 931F      		adc r25,r19
 5102 2436 BA01      		movw r22,r20
 5103 2438 0E94 0000 		call swapINT
 834:lp_solve_5.5/lp_crash.c ****       basisvector[j] = abs(basisvector[j]);
 5104               		.loc 1 834 0
 5105 243c 8A89      		ldd r24,Y+18
 5106 243e 9B89      		ldd r25,Y+19
 5107 2440 880F      		lsl r24
 5108 2442 991F      		rol r25
 5109 2444 2AAD      		ldd r18,Y+58
 5110 2446 3BAD      		ldd r19,Y+59
 5111 2448 280F      		add r18,r24
 5112 244a 391F      		adc r19,r25
 5113 244c 8A89      		ldd r24,Y+18
 5114 244e 9B89      		ldd r25,Y+19
 5115 2450 880F      		lsl r24
 5116 2452 991F      		rol r25
 5117 2454 4AAD      		ldd r20,Y+58
 5118 2456 5BAD      		ldd r21,Y+59
 5119 2458 840F      		add r24,r20
 5120 245a 951F      		adc r25,r21
 5121 245c FC01      		movw r30,r24
 5122 245e 8081      		ld r24,Z
 5123 2460 9181      		ldd r25,Z+1
 5124 2462 9923      		tst r25
 5125 2464 04F4      		brge .L192
 5126 2466 9195      		neg r25
 5127 2468 8195      		neg r24
 5128 246a 9109      		sbc r25,__zero_reg__
 5129               	.L192:
 5130 246c F901      		movw r30,r18
 5131 246e 9183      		std Z+1,r25
 5132 2470 8083      		st Z,r24
 5133               	.L191:
 827:lp_solve_5.5/lp_crash.c ****     if(slkpos[j] == 0)
 5134               		.loc 1 827 0 discriminator 2
 5135 2472 8A89      		ldd r24,Y+18
 5136 2474 9B89      		ldd r25,Y+19
 5137 2476 0196      		adiw r24,1
 5138 2478 9B8B      		std Y+19,r25
 5139 247a 8A8B      		std Y+18,r24
 5140               	.L189:
 827:lp_solve_5.5/lp_crash.c ****     if(slkpos[j] == 0)
 5141               		.loc 1 827 0 is_stmt 0 discriminator 1
 5142 247c 2A89      		ldd r18,Y+18
 5143 247e 3B89      		ldd r19,Y+19
 5144 2480 8EA1      		ldd r24,Y+38
 5145 2482 9FA1      		ldd r25,Y+39
 5146 2484 8217      		cp r24,r18
 5147 2486 9307      		cpc r25,r19
 5148 2488 04F0      		brlt .+2
 5149 248a 00C0      		rjmp .L193
 835:lp_solve_5.5/lp_crash.c ****     }
 836:lp_solve_5.5/lp_crash.c ****   }
 837:lp_solve_5.5/lp_crash.c **** 
 838:lp_solve_5.5/lp_crash.c ****   /* Adjust the non-basic indeces for the (proximal) bound state */
 839:lp_solve_5.5/lp_crash.c ****   for(i = nrows+1, basisnr = basisvector+i; i <= nsum; i++, basisnr++) {
 5150               		.loc 1 839 0 is_stmt 1
 5151 248c 8EA1      		ldd r24,Y+38
 5152 248e 9FA1      		ldd r25,Y+39
 5153 2490 0196      		adiw r24,1
 5154 2492 998B      		std Y+17,r25
 5155 2494 888B      		std Y+16,r24
 5156 2496 8889      		ldd r24,Y+16
 5157 2498 9989      		ldd r25,Y+17
 5158 249a 880F      		lsl r24
 5159 249c 991F      		rol r25
 5160 249e 2AAD      		ldd r18,Y+58
 5161 24a0 3BAD      		ldd r19,Y+59
 5162 24a2 820F      		add r24,r18
 5163 24a4 931F      		adc r25,r19
 5164 24a6 998F      		std Y+25,r25
 5165 24a8 888F      		std Y+24,r24
 5166 24aa 00C0      		rjmp .L194
 5167               	.L200:
 840:lp_solve_5.5/lp_crash.c ****     n = *basisnr;
 5168               		.loc 1 840 0
 5169 24ac 888D      		ldd r24,Y+24
 5170 24ae 998D      		ldd r25,Y+25
 5171 24b0 FC01      		movw r30,r24
 5172 24b2 8081      		ld r24,Z
 5173 24b4 9181      		ldd r25,Z+1
 5174 24b6 9FA7      		std Y+47,r25
 5175 24b8 8EA7      		std Y+46,r24
 841:lp_solve_5.5/lp_crash.c ****     if(n <= nrows) {
 5176               		.loc 1 841 0
 5177 24ba 2EA5      		ldd r18,Y+46
 5178 24bc 3FA5      		ldd r19,Y+47
 5179 24be 8EA1      		ldd r24,Y+38
 5180 24c0 9FA1      		ldd r25,Y+39
 5181 24c2 8217      		cp r24,r18
 5182 24c4 9307      		cpc r25,r19
 5183 24c6 04F4      		brge .+2
 5184 24c8 00C0      		rjmp .L195
 842:lp_solve_5.5/lp_crash.c ****       values[n] -= get_rh_lower(lp, n);
 5185               		.loc 1 842 0
 5186 24ca 2EA5      		ldd r18,Y+46
 5187 24cc 3FA5      		ldd r19,Y+47
 5188 24ce 8EA9      		ldd r24,Y+54
 5189 24d0 9FA9      		ldd r25,Y+55
 5190 24d2 B901      		movw r22,r18
 5191 24d4 0E94 0000 		call get_rh_lower
 5192 24d8 AB01      		movw r20,r22
 5193 24da BC01      		movw r22,r24
 5194 24dc 2AA9      		ldd r18,Y+50
 5195 24de 3BA9      		ldd r19,Y+51
 5196 24e0 8EA5      		ldd r24,Y+46
 5197 24e2 9FA5      		ldd r25,Y+47
 5198 24e4 880F      		lsl r24
 5199 24e6 991F      		rol r25
 5200 24e8 880F      		lsl r24
 5201 24ea 991F      		rol r25
 5202 24ec 8901      		movw r16,r18
 5203 24ee 080F      		add r16,r24
 5204 24f0 191F      		adc r17,r25
 5205 24f2 2AA9      		ldd r18,Y+50
 5206 24f4 3BA9      		ldd r19,Y+51
 5207 24f6 8EA5      		ldd r24,Y+46
 5208 24f8 9FA5      		ldd r25,Y+47
 5209 24fa 880F      		lsl r24
 5210 24fc 991F      		rol r25
 5211 24fe 880F      		lsl r24
 5212 2500 991F      		rol r25
 5213 2502 820F      		add r24,r18
 5214 2504 931F      		adc r25,r19
 5215 2506 FC01      		movw r30,r24
 5216 2508 8081      		ld r24,Z
 5217 250a 9181      		ldd r25,Z+1
 5218 250c A281      		ldd r26,Z+2
 5219 250e B381      		ldd r27,Z+3
 5220 2510 9A01      		movw r18,r20
 5221 2512 AB01      		movw r20,r22
 5222 2514 BC01      		movw r22,r24
 5223 2516 CD01      		movw r24,r26
 5224 2518 0E94 0000 		call __subsf3
 5225 251c DC01      		movw r26,r24
 5226 251e CB01      		movw r24,r22
 5227 2520 F801      		movw r30,r16
 5228 2522 8083      		st Z,r24
 5229 2524 9183      		std Z+1,r25
 5230 2526 A283      		std Z+2,r26
 5231 2528 B383      		std Z+3,r27
 843:lp_solve_5.5/lp_crash.c ****       if(values[n] <= eps)
 5232               		.loc 1 843 0
 5233 252a 2AA9      		ldd r18,Y+50
 5234 252c 3BA9      		ldd r19,Y+51
 5235 252e 8EA5      		ldd r24,Y+46
 5236 2530 9FA5      		ldd r25,Y+47
 5237 2532 880F      		lsl r24
 5238 2534 991F      		rol r25
 5239 2536 880F      		lsl r24
 5240 2538 991F      		rol r25
 5241 253a 820F      		add r24,r18
 5242 253c 931F      		adc r25,r19
 5243 253e FC01      		movw r30,r24
 5244 2540 8081      		ld r24,Z
 5245 2542 9181      		ldd r25,Z+1
 5246 2544 A281      		ldd r26,Z+2
 5247 2546 B381      		ldd r27,Z+3
 5248 2548 2C8D      		ldd r18,Y+28
 5249 254a 3D8D      		ldd r19,Y+29
 5250 254c 4E8D      		ldd r20,Y+30
 5251 254e 5F8D      		ldd r21,Y+31
 5252 2550 BC01      		movw r22,r24
 5253 2552 CD01      		movw r24,r26
 5254 2554 0E94 0000 		call __lesf2
 5255 2558 1816      		cp __zero_reg__,r24
 5256 255a 04F4      		brge .+2
 5257 255c 00C0      		rjmp .L198
 844:lp_solve_5.5/lp_crash.c ****         *basisnr = -(*basisnr);
 5258               		.loc 1 844 0
 5259 255e 888D      		ldd r24,Y+24
 5260 2560 998D      		ldd r25,Y+25
 5261 2562 FC01      		movw r30,r24
 5262 2564 8081      		ld r24,Z
 5263 2566 9181      		ldd r25,Z+1
 5264 2568 2227      		clr r18
 5265 256a 3327      		clr r19
 5266 256c 281B      		sub r18,r24
 5267 256e 390B      		sbc r19,r25
 5268 2570 888D      		ldd r24,Y+24
 5269 2572 998D      		ldd r25,Y+25
 5270 2574 FC01      		movw r30,r24
 5271 2576 3183      		std Z+1,r19
 5272 2578 2083      		st Z,r18
 5273 257a 00C0      		rjmp .L198
 5274               	.L195:
 845:lp_solve_5.5/lp_crash.c ****     }
 846:lp_solve_5.5/lp_crash.c ****     else
 847:lp_solve_5.5/lp_crash.c ****       if(values[n]-eps <= get_lowbo(lp, n-nrows))
 5275               		.loc 1 847 0
 5276 257c 2AA9      		ldd r18,Y+50
 5277 257e 3BA9      		ldd r19,Y+51
 5278 2580 8EA5      		ldd r24,Y+46
 5279 2582 9FA5      		ldd r25,Y+47
 5280 2584 880F      		lsl r24
 5281 2586 991F      		rol r25
 5282 2588 880F      		lsl r24
 5283 258a 991F      		rol r25
 5284 258c 820F      		add r24,r18
 5285 258e 931F      		adc r25,r19
 5286 2590 FC01      		movw r30,r24
 5287 2592 8081      		ld r24,Z
 5288 2594 9181      		ldd r25,Z+1
 5289 2596 A281      		ldd r26,Z+2
 5290 2598 B381      		ldd r27,Z+3
 5291 259a 2C8D      		ldd r18,Y+28
 5292 259c 3D8D      		ldd r19,Y+29
 5293 259e 4E8D      		ldd r20,Y+30
 5294 25a0 5F8D      		ldd r21,Y+31
 5295 25a2 BC01      		movw r22,r24
 5296 25a4 CD01      		movw r24,r26
 5297 25a6 0E94 0000 		call __subsf3
 5298 25aa DC01      		movw r26,r24
 5299 25ac CB01      		movw r24,r22
 5300 25ae 6C01      		movw r12,r24
 5301 25b0 7D01      		movw r14,r26
 5302 25b2 2EA5      		ldd r18,Y+46
 5303 25b4 3FA5      		ldd r19,Y+47
 5304 25b6 8EA1      		ldd r24,Y+38
 5305 25b8 9FA1      		ldd r25,Y+39
 5306 25ba 281B      		sub r18,r24
 5307 25bc 390B      		sbc r19,r25
 5308 25be 8EA9      		ldd r24,Y+54
 5309 25c0 9FA9      		ldd r25,Y+55
 5310 25c2 B901      		movw r22,r18
 5311 25c4 0E94 0000 		call get_lowbo
 5312 25c8 DC01      		movw r26,r24
 5313 25ca CB01      		movw r24,r22
 5314 25cc 9C01      		movw r18,r24
 5315 25ce AD01      		movw r20,r26
 5316 25d0 C701      		movw r24,r14
 5317 25d2 B601      		movw r22,r12
 5318 25d4 0E94 0000 		call __lesf2
 5319 25d8 1816      		cp __zero_reg__,r24
 5320 25da 04F0      		brlt .L198
 848:lp_solve_5.5/lp_crash.c ****         *basisnr = -(*basisnr);
 5321               		.loc 1 848 0
 5322 25dc 888D      		ldd r24,Y+24
 5323 25de 998D      		ldd r25,Y+25
 5324 25e0 FC01      		movw r30,r24
 5325 25e2 8081      		ld r24,Z
 5326 25e4 9181      		ldd r25,Z+1
 5327 25e6 2227      		clr r18
 5328 25e8 3327      		clr r19
 5329 25ea 281B      		sub r18,r24
 5330 25ec 390B      		sbc r19,r25
 5331 25ee 888D      		ldd r24,Y+24
 5332 25f0 998D      		ldd r25,Y+25
 5333 25f2 FC01      		movw r30,r24
 5334 25f4 3183      		std Z+1,r19
 5335 25f6 2083      		st Z,r18
 5336               	.L198:
 839:lp_solve_5.5/lp_crash.c ****     n = *basisnr;
 5337               		.loc 1 839 0 discriminator 2
 5338 25f8 8889      		ldd r24,Y+16
 5339 25fa 9989      		ldd r25,Y+17
 5340 25fc 0196      		adiw r24,1
 5341 25fe 998B      		std Y+17,r25
 5342 2600 888B      		std Y+16,r24
 5343 2602 888D      		ldd r24,Y+24
 5344 2604 998D      		ldd r25,Y+25
 5345 2606 0296      		adiw r24,2
 5346 2608 998F      		std Y+25,r25
 5347 260a 888F      		std Y+24,r24
 5348               	.L194:
 839:lp_solve_5.5/lp_crash.c ****     n = *basisnr;
 5349               		.loc 1 839 0 is_stmt 0 discriminator 1
 5350 260c 2889      		ldd r18,Y+16
 5351 260e 3989      		ldd r19,Y+17
 5352 2610 8AA5      		ldd r24,Y+42
 5353 2612 9BA5      		ldd r25,Y+43
 5354 2614 8217      		cp r24,r18
 5355 2616 9307      		cpc r25,r19
 5356 2618 04F0      		brlt .+2
 5357 261a 00C0      		rjmp .L200
 849:lp_solve_5.5/lp_crash.c ****   }
 850:lp_solve_5.5/lp_crash.c **** 
 851:lp_solve_5.5/lp_crash.c **** /* Lastly normalize all basic variables to be coded as lower-bounded,
 852:lp_solve_5.5/lp_crash.c ****    or effectively zero-based in the case of free variables. */
 853:lp_solve_5.5/lp_crash.c ****   for(i = 1; i <= nrows; i++)
 5358               		.loc 1 853 0 is_stmt 1
 5359 261c 81E0      		ldi r24,lo8(1)
 5360 261e 90E0      		ldi r25,0
 5361 2620 998B      		std Y+17,r25
 5362 2622 888B      		std Y+16,r24
 5363 2624 00C0      		rjmp .L201
 5364               	.L203:
 854:lp_solve_5.5/lp_crash.c ****     basisvector[i] = -abs(basisvector[i]);
 5365               		.loc 1 854 0 discriminator 3
 5366 2626 8889      		ldd r24,Y+16
 5367 2628 9989      		ldd r25,Y+17
 5368 262a 880F      		lsl r24
 5369 262c 991F      		rol r25
 5370 262e 2AAD      		ldd r18,Y+58
 5371 2630 3BAD      		ldd r19,Y+59
 5372 2632 280F      		add r18,r24
 5373 2634 391F      		adc r19,r25
 5374 2636 8889      		ldd r24,Y+16
 5375 2638 9989      		ldd r25,Y+17
 5376 263a 880F      		lsl r24
 5377 263c 991F      		rol r25
 5378 263e 4AAD      		ldd r20,Y+58
 5379 2640 5BAD      		ldd r21,Y+59
 5380 2642 840F      		add r24,r20
 5381 2644 951F      		adc r25,r21
 5382 2646 FC01      		movw r30,r24
 5383 2648 8081      		ld r24,Z
 5384 264a 9181      		ldd r25,Z+1
 5385 264c 9923      		tst r25
 5386 264e 04F4      		brge .L202
 5387 2650 9195      		neg r25
 5388 2652 8195      		neg r24
 5389 2654 9109      		sbc r25,__zero_reg__
 5390               	.L202:
 5391 2656 9195      		neg r25
 5392 2658 8195      		neg r24
 5393 265a 9109      		sbc r25,__zero_reg__
 5394 265c F901      		movw r30,r18
 5395 265e 9183      		std Z+1,r25
 5396 2660 8083      		st Z,r24
 853:lp_solve_5.5/lp_crash.c ****     basisvector[i] = -abs(basisvector[i]);
 5397               		.loc 1 853 0 discriminator 3
 5398 2662 8889      		ldd r24,Y+16
 5399 2664 9989      		ldd r25,Y+17
 5400 2666 0196      		adiw r24,1
 5401 2668 998B      		std Y+17,r25
 5402 266a 888B      		std Y+16,r24
 5403               	.L201:
 853:lp_solve_5.5/lp_crash.c ****     basisvector[i] = -abs(basisvector[i]);
 5404               		.loc 1 853 0 is_stmt 0 discriminator 1
 5405 266c 2889      		ldd r18,Y+16
 5406 266e 3989      		ldd r19,Y+17
 5407 2670 8EA1      		ldd r24,Y+38
 5408 2672 9FA1      		ldd r25,Y+39
 5409 2674 8217      		cp r24,r18
 5410 2676 9307      		cpc r25,r19
 5411 2678 04F4      		brge .L203
 855:lp_solve_5.5/lp_crash.c **** 
 856:lp_solve_5.5/lp_crash.c ****   /* Clean up and return status */
 857:lp_solve_5.5/lp_crash.c ****   status = (MYBOOL) (error <= eps);
 5412               		.loc 1 857 0 is_stmt 1
 5413 267a 11E0      		ldi r17,lo8(1)
 5414 267c 2C8D      		ldd r18,Y+28
 5415 267e 3D8D      		ldd r19,Y+29
 5416 2680 4E8D      		ldd r20,Y+30
 5417 2682 5F8D      		ldd r21,Y+31
 5418 2684 6C81      		ldd r22,Y+4
 5419 2686 7D81      		ldd r23,Y+5
 5420 2688 8E81      		ldd r24,Y+6
 5421 268a 9F81      		ldd r25,Y+7
 5422 268c 0E94 0000 		call __lesf2
 5423 2690 1816      		cp __zero_reg__,r24
 5424 2692 04F4      		brge .L204
 5425 2694 10E0      		ldi r17,0
 5426               	.L204:
 5427 2696 1983      		std Y+1,r17
 5428               	.L147:
 858:lp_solve_5.5/lp_crash.c **** Finish:
 859:lp_solve_5.5/lp_crash.c ****   FREE(values);
 5429               		.loc 1 859 0
 5430 2698 8AA9      		ldd r24,Y+50
 5431 269a 9BA9      		ldd r25,Y+51
 5432 269c 892B      		or r24,r25
 5433 269e 01F0      		breq .L205
 5434               		.loc 1 859 0 is_stmt 0 discriminator 1
 5435 26a0 8AA9      		ldd r24,Y+50
 5436 26a2 9BA9      		ldd r25,Y+51
 5437 26a4 0E94 0000 		call free
 5438 26a8 1BAA      		std Y+51,__zero_reg__
 5439 26aa 1AAA      		std Y+50,__zero_reg__
 5440               	.L205:
 860:lp_solve_5.5/lp_crash.c ****   FREE(violation);
 5441               		.loc 1 860 0 is_stmt 1
 5442 26ac 8CA9      		ldd r24,Y+52
 5443 26ae 9DA9      		ldd r25,Y+53
 5444 26b0 892B      		or r24,r25
 5445 26b2 01F0      		breq .L206
 5446               		.loc 1 860 0 is_stmt 0 discriminator 1
 5447 26b4 8CA9      		ldd r24,Y+52
 5448 26b6 9DA9      		ldd r25,Y+53
 5449 26b8 0E94 0000 		call free
 5450 26bc 1DAA      		std Y+53,__zero_reg__
 5451 26be 1CAA      		std Y+52,__zero_reg__
 5452               	.L206:
 861:lp_solve_5.5/lp_crash.c **** 
 862:lp_solve_5.5/lp_crash.c ****   return( status );
 5453               		.loc 1 862 0 is_stmt 1
 5454 26c0 8981      		ldd r24,Y+1
 5455               	.L207:
 5456               	/* epilogue start */
 863:lp_solve_5.5/lp_crash.c **** }
 5457               		.loc 1 863 0 discriminator 1
 5458 26c2 EB96      		adiw r28,59
 5459 26c4 0FB6      		in __tmp_reg__,__SREG__
 5460 26c6 F894      		cli
 5461 26c8 DEBF      		out __SP_H__,r29
 5462 26ca 0FBE      		out __SREG__,__tmp_reg__
 5463 26cc CDBF      		out __SP_L__,r28
 5464 26ce DF91      		pop r29
 5465 26d0 CF91      		pop r28
 5466 26d2 1F91      		pop r17
 5467 26d4 0F91      		pop r16
 5468 26d6 FF90      		pop r15
 5469 26d8 EF90      		pop r14
 5470 26da DF90      		pop r13
 5471 26dc CF90      		pop r12
 5472 26de 0895      		ret
 5473               		.cfi_endproc
 5474               	.LFE8:
 5476               	.Letext0:
 5477               		.file 2 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\lib\\gc
 5478               		.file 3 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\in
 5479               		.file 4 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\in
 5480               		.file 5 "lp_solve_5.5\\shared/commonlib.h"
 5481               		.file 6 "lp_solve_5.5/lp_types.h"
 5482               		.file 7 "lp_solve_5.5/lp_lib.h"
 5483               		.file 8 "lp_solve_5.5/lp_utils.h"
 5484               		.file 9 "lp_solve_5.5/lp_Hash.h"
 5485               		.file 10 "lp_solve_5.5/lp_matrix.h"
 5486               		.file 11 "lp_solve_5.5/lp_mipbb.h"
 5487               		.file 12 "lp_solve_5.5/lp_SOS.h"
DEFINED SYMBOLS
                            *ABS*:00000000 lp_crash.c
C:\Users\GUILHE~1\AppData\Local\Temp\cckVpphr.s:2      *ABS*:0000003e __SP_H__
C:\Users\GUILHE~1\AppData\Local\Temp\cckVpphr.s:3      *ABS*:0000003d __SP_L__
C:\Users\GUILHE~1\AppData\Local\Temp\cckVpphr.s:4      *ABS*:0000003f __SREG__
C:\Users\GUILHE~1\AppData\Local\Temp\cckVpphr.s:5      *ABS*:0000003b __RAMPZ__
C:\Users\GUILHE~1\AppData\Local\Temp\cckVpphr.s:6      *ABS*:00000000 __tmp_reg__
C:\Users\GUILHE~1\AppData\Local\Temp\cckVpphr.s:7      *ABS*:00000001 __zero_reg__
C:\Users\GUILHE~1\AppData\Local\Temp\cckVpphr.s:29     .text:00000000 crash_basis
C:\Users\GUILHE~1\AppData\Local\Temp\cckVpphr.s:3686   .text:00001a14 guess_basis

UNDEFINED SYMBOLS
__ltsf2
__mulsf3
__gtsf2
__gesf2
__subsf3
__floatsisf
__lesf2
__addsf3
__nesf2
__divsf3
default_basis
mat_validate
report
allocINT
allocREAL
mat_nonzeros
createLink
get_constr_type
appendLink
is_unbounded
firstActiveLink
nextActiveLink
removeLink
isActiveLink
set_basisvar
free
freeLink
memcpy
memset
mat_collength
get_nonzeros
is_chsign
unscaled_mat
memmove
get_rh_lower
get_rh_upper
get_lowbo
get_upbo
sortByREAL
swapINT
__do_copy_data
