   1              	 .cpu cortex-m4
   2              	 .eabi_attribute 20,1
   3              	 .eabi_attribute 21,1
   4              	 .eabi_attribute 23,3
   5              	 .eabi_attribute 24,1
   6              	 .eabi_attribute 25,1
   7              	 .eabi_attribute 26,1
   8              	 .eabi_attribute 30,6
   9              	 .eabi_attribute 34,1
  10              	 .eabi_attribute 18,4
  11              	 .file "Energy.c"
  12              	 .text
  13              	.Ltext0:
  14              	 .cfi_sections .debug_frame
  15              	 .section .bss.cpu_irq_critical_section_counter,"aw",%nobits
  16              	 .align 2
  19              	cpu_irq_critical_section_counter:
  20 0000 00000000 	 .space 4
  21              	 .section .bss.cpu_irq_prev_interrupt_state,"aw",%nobits
  24              	cpu_irq_prev_interrupt_state:
  25 0000 00       	 .space 1
  26              	 .comm n,1,1
  27              	 .section .bss.tTS,"aw",%nobits
  28              	 .align 2
  31              	tTS:
  32 0000 00000000 	 .space 4
  33              	 .section .bss.n_collab,"aw",%nobits
  36              	n_collab:
  37 0000 00       	 .space 1
  38              	 .section .bss.SamLoss,"aw",%nobits
  41              	SamLoss:
  42 0000 00       	 .space 1
  43              	 .section .data.alpha,"aw",%progbits
  44              	 .align 2
  47              	alpha:
  48 0000 CDCC4C3E 	 .word 1045220557
  49              	 .section .data.betha,"aw",%progbits
  50              	 .align 2
  53              	betha:
  54 0000 CDCC4C3E 	 .word 1045220557
  55              	 .section .data.ganho,"aw",%progbits
  56              	 .align 2
  59              	ganho:
  60 0000 00000040 	 .word 1073741824
  61              	 .section .bss.EstLoss,"aw",%nobits
  62              	 .align 2
  65              	EstLoss:
  66 0000 00000000 	 .space 4
  67              	 .section .bss.DevLoss,"aw",%nobits
  68              	 .align 2
  71              	DevLoss:
  72 0000 00000000 	 .space 4
  73              	 .section .bss.motes,"aw",%nobits
  74              	 .align 2
  77              	motes:
  78 0000 00000000 	 .space 294
  78      00000000 
  78      00000000 
  78      00000000 
  78      00000000 
  79              	 .section .bss.motes_aux,"aw",%nobits
  80              	 .align 2
  83              	motes_aux:
  84 0000 00000000 	 .space 294
  84      00000000 
  84      00000000 
  84      00000000 
  84      00000000 
  85              	 .section .bss.motes_connected_n,"aw",%nobits
  88              	motes_connected_n:
  89 0000 00       	 .space 1
  90              	 .section .bss.motes_connected_vector,"aw",%nobits
  91              	 .align 2
  94              	motes_connected_vector:
  95 0000 00000000 	 .space 14
  95      00000000 
  95      00000000 
  95      0000
  96              	 .section .bss.collab_vector,"aw",%nobits
  97              	 .align 2
 100              	collab_vector:
 101 0000 00000000 	 .space 32
 101      00000000 
 101      00000000 
 101      00000000 
 101      00000000 
 102              	 .text
 103              	 .align 1
 104              	 .syntax unified
 105              	 .thumb
 106              	 .thumb_func
 107              	 .fpu softvfp
 109              	cmp_EnergyStatistics_t_func:
 110              	.LFB127:
 111              	 .file 1 "Energy.c"
   1:Energy.c      **** /*
   2:Energy.c      ****  * Energy.c
   3:Energy.c      ****  *
   4:Energy.c      ****  * Created: 27/09/2014 17:10:18
   5:Energy.c      ****  *  Author: nando
   6:Energy.c      ****  */ 
   7:Energy.c      **** 
   8:Energy.c      **** #include <math.h>
   9:Energy.c      **** #include <string.h>
  10:Energy.c      **** 
  11:Energy.c      **** #include "Energy.h"
  12:Energy.c      **** #include "Solver.h"
  13:Energy.c      **** 
  14:Energy.c      **** static uint8_t					n_collab					= 0;
  15:Energy.c      **** static int8_t					SamLoss						= 0;				// Número de Amostras Perdidas.
  16:Energy.c      **** static float					alpha						= 0.2;
  17:Energy.c      **** static float					betha						= 0.2;
  18:Energy.c      **** static float					ganho						= 2.0;
  19:Energy.c      **** static float					EstLoss						= 0.0;
  20:Energy.c      **** static float					DevLoss						= 0.0;
  21:Energy.c      **** static EnergyStatistics_t		motes						[N_MOTES_COLLAB_MAX];
  22:Energy.c      **** static EnergyStatistics_t		motes_aux					[N_MOTES_COLLAB_MAX];
  23:Energy.c      **** static uint8_t					motes_connected_n			= 0;
  24:Energy.c      **** static uint8_t					motes_connected_vector		[N_MOTES_COLLAB_MAX];
  25:Energy.c      **** static uint8_t					collab_vector				[N_COLLAB_VECTOR];
  26:Energy.c      **** 
  27:Energy.c      **** 								// Add 1 byte to size,
  28:Energy.c      **** 								// Add 1 byte to count,
  29:Energy.c      **** 								// Mul by 2 (actual list, next list)
  30:Energy.c      **** 
  31:Energy.c      **** // Rotina de ordenação do algoritmo quicksort. É chamado recursivamente até
  32:Energy.c      **** // ordenar o vetor de dados.
  33:Energy.c      **** static int cmp_EnergyStatistics_t_func(const void * a, const void * b)
  34:Energy.c      **** {
 112              	 .loc 1 34 0
 113              	 .cfi_startproc
 114              	 
 115              	 
 116              	 
 117 0000 90B4     	 push {r4,r7}
 118              	.LCFI0:
 119              	 .cfi_def_cfa_offset 8
 120              	 .cfi_offset 4,-8
 121              	 .cfi_offset 7,-4
 122 0002 88B0     	 sub sp,sp,#32
 123              	.LCFI1:
 124              	 .cfi_def_cfa_offset 40
 125 0004 00AF     	 add r7,sp,#0
 126              	.LCFI2:
 127              	 .cfi_def_cfa_register 7
 128 0006 7860     	 str r0,[r7,#4]
 129 0008 3960     	 str r1,[r7]
  35:Energy.c      **** 	// Se a diferênça da potência do sinal for maior que 10% [25 de 256] ordenar
  36:Energy.c      **** 	// ignorando a taxa de transmissão.
  37:Energy.c      **** 	//
  38:Energy.c      **** 	// Retorno:
  39:Energy.c      **** 	// value_a > value_b		>=1
  40:Energy.c      **** 	// value_a = value_b		0
  41:Energy.c      **** 	// value_a < value_b		<=-1
  42:Energy.c      **** 
  43:Energy.c      **** 	EnergyStatistics_t*			value_a						= (EnergyStatistics_t*) a;
 130              	 .loc 1 43 0
 131 000a 7B68     	 ldr r3,[r7,#4]
 132 000c FB61     	 str r3,[r7,#28]
  44:Energy.c      **** 	EnergyStatistics_t*			value_b						= (EnergyStatistics_t*) b;
 133              	 .loc 1 44 0
 134 000e 3B68     	 ldr r3,[r7]
 135 0010 BB61     	 str r3,[r7,#24]
  45:Energy.c      **** 	
  46:Energy.c      **** 	int							diff						= (value_b->rssi - value_a->rssi);
 136              	 .loc 1 46 0
 137 0012 BB69     	 ldr r3,[r7,#24]
 138 0014 5B78     	 ldrb r3,[r3,#1]
 139 0016 1A46     	 mov r2,r3
 140 0018 FB69     	 ldr r3,[r7,#28]
 141 001a 5B78     	 ldrb r3,[r3,#1]
 142 001c D31A     	 subs r3,r2,r3
 143 001e 7B61     	 str r3,[r7,#20]
  47:Energy.c      **** 
  48:Energy.c      **** 	// Condição de Ordenação.
  49:Energy.c      **** 	// Se a diferença absoluta for >= 25, significa que independente das transmissões é necessário
  50:Energy.c      **** 	// ordenar pela qualidade de sinal de transmissão, ou seja, não utilizar nodos com LQI baixo como 
  51:Energy.c      **** 	if(abs(diff) >= 25)
 144              	 .loc 1 51 0
 145 0020 7B69     	 ldr r3,[r7,#20]
 146 0022 002B     	 cmp r3,#0
 147 0024 B8BF     	 it lt
 148 0026 5B42     	 rsblt r3,r3,#0
 149 0028 182B     	 cmp r3,#24
 150 002a 01DD     	 ble .L2
  52:Energy.c      **** 	{
  53:Energy.c      **** 		return(diff);
 151              	 .loc 1 53 0
 152 002c 7B69     	 ldr r3,[r7,#20]
 153 002e 37E0     	 b .L3
 154              	.L2:
  54:Energy.c      **** 	}
  55:Energy.c      **** 
  56:Energy.c      **** 	// Condição de Ordenação.
  57:Energy.c      **** 	// Se o nodo A e B alcançam pelo menos n% das vezes o coordenador, então pode-se utilizar a regra 
  58:Energy.c      **** 	// Isto é de suma importância para garantir que os nodos que nunca alcançam o coordenador, ou estã
  59:Energy.c      **** 	// não sejam indicados como colaboradores. Assim, somente quem tem um certo nível de participação 
  60:Energy.c      **** 	// Exemplo, Acabou a bateria de um nodo. O número de colaboração dele pode ser 0. Sem esta regra e
  61:Energy.c      **** 	// ser o colaborador e nunca colaboraria com o sistema.
  62:Energy.c      **** 	if(value_a->reach_coord && value_b->reach_coord)
 155              	 .loc 1 62 0
 156 0030 FB69     	 ldr r3,[r7,#28]
 157 0032 1B7D     	 ldrb r3,[r3,#20]
 158 0034 002B     	 cmp r3,#0
 159 0036 25D0     	 beq .L4
 160              	 .loc 1 62 0 is_stmt 0 discriminator 1
 161 0038 BB69     	 ldr r3,[r7,#24]
 162 003a 1B7D     	 ldrb r3,[r3,#20]
 163 003c 002B     	 cmp r3,#0
 164 003e 21D0     	 beq .L4
 165              	.LBB2:
  63:Energy.c      **** 	{	
  64:Energy.c      **** 		// Caso contrário (pouca diferença entre o LQI dos nodos), organizar nodos cooperantes da seginte
  65:Energy.c      **** 		// Selecionar o nodo cooperante pelo número de mensagens transmitidas alternando (rotacionar) os 
  66:Energy.c      **** 		// Neste caso, a ordenação será decrescente (quem transmitiu menos será o primeiro da lista)
  67:Energy.c      **** 		// Isto visa economizar bateria por alguns ciclos conforme as condições da rede.
  68:Energy.c      **** 		int64_t					diff_collab					= (value_a->n_collab_msg - value_b->n_collab_msg);
 166              	 .loc 1 68 0 is_stmt 1
 167 0040 FB69     	 ldr r3,[r7,#28]
 168 0042 D3F80B10 	 ldr r1,[r3,#11]
 169 0046 D3F80F20 	 ldr r2,[r3,#15]
 170 004a B869     	 ldr r0,[r7,#24]
 171 004c D0F80B30 	 ldr r3,[r0,#11]
 172 0050 D0F80F40 	 ldr r4,[r0,#15]
 173 0054 CB1A     	 subs r3,r1,r3
 174 0056 62EB0404 	 sbc r4,r2,r4
 175 005a C7E90234 	 strd r3,[r7,#8]
  69:Energy.c      **** 
  70:Energy.c      **** 		if(diff_collab > 0)									// A transmitiu > que B
 176              	 .loc 1 70 0
 177 005e D7E90234 	 ldrd r3,[r7,#8]
 178 0062 012B     	 cmp r3,#1
 179 0064 74F10003 	 sbcs r3,r4,#0
 180 0068 02DB     	 blt .L5
  71:Energy.c      **** 			return(-1);										// Indica que A < B para reordenar
 181              	 .loc 1 71 0
 182 006a 4FF0FF33 	 mov r3,#-1
 183 006e 17E0     	 b .L3
 184              	.L5:
  72:Energy.c      **** 		else if(diff_collab < 0)							// A transmitiu < que B
 185              	 .loc 1 72 0
 186 0070 D7E90234 	 ldrd r3,[r7,#8]
 187 0074 002B     	 cmp r3,#0
 188 0076 74F10003 	 sbcs r3,r4,#0
 189 007a 01DA     	 bge .L6
  73:Energy.c      **** 			return(1);										// Indica que A > B para reordenar
 190              	 .loc 1 73 0
 191 007c 0123     	 movs r3,#1
 192 007e 0FE0     	 b .L3
 193              	.L6:
  74:Energy.c      **** 		else
  75:Energy.c      **** 			return(0);										// A transmitiu == B, não importa
 194              	 .loc 1 75 0
 195 0080 0023     	 movs r3,#0
 196 0082 0DE0     	 b .L3
 197              	.L4:
 198              	.LBE2:
  76:Energy.c      **** 	}
  77:Energy.c      **** 	// Se apenas o nodo A alcança o coordenador, deixar ele antes de B
  78:Energy.c      **** 	else if(value_a->reach_coord)
 199              	 .loc 1 78 0
 200 0084 FB69     	 ldr r3,[r7,#28]
 201 0086 1B7D     	 ldrb r3,[r3,#20]
 202 0088 002B     	 cmp r3,#0
 203 008a 01D0     	 beq .L7
  79:Energy.c      **** 	{
  80:Energy.c      **** 		return(1);
 204              	 .loc 1 80 0
 205 008c 0123     	 movs r3,#1
 206 008e 07E0     	 b .L3
 207              	.L7:
  81:Energy.c      **** 	}
  82:Energy.c      **** 	// Se apenas o nodo B alcança o coordenador, deixar ele antes de A
  83:Energy.c      **** 	else if(value_b->reach_coord)
 208              	 .loc 1 83 0
 209 0090 BB69     	 ldr r3,[r7,#24]
 210 0092 1B7D     	 ldrb r3,[r3,#20]
 211 0094 002B     	 cmp r3,#0
 212 0096 02D0     	 beq .L8
  84:Energy.c      **** 	{
  85:Energy.c      **** 		return(-1);
 213              	 .loc 1 85 0
 214 0098 4FF0FF33 	 mov r3,#-1
 215 009c 00E0     	 b .L3
 216              	.L8:
  86:Energy.c      **** 	}
  87:Energy.c      **** 	// Se nenhuma alcança o coordenador, não deixar como esta
  88:Energy.c      **** 	else
  89:Energy.c      **** 	{
  90:Energy.c      **** 		return(0);
 217              	 .loc 1 90 0
 218 009e 0023     	 movs r3,#0
 219              	.L3:
  91:Energy.c      **** 	}
  92:Energy.c      **** }
 220              	 .loc 1 92 0
 221 00a0 1846     	 mov r0,r3
 222 00a2 2037     	 adds r7,r7,#32
 223              	.LCFI3:
 224              	 .cfi_def_cfa_offset 8
 225 00a4 BD46     	 mov sp,r7
 226              	.LCFI4:
 227              	 .cfi_def_cfa_register 13
 228              	 
 229 00a6 90BC     	 pop {r4,r7}
 230              	.LCFI5:
 231              	 .cfi_restore 7
 232              	 .cfi_restore 4
 233              	 .cfi_def_cfa_offset 0
 234 00a8 7047     	 bx lr
 235              	 .cfi_endproc
 236              	.LFE127:
 238              	 .global __aeabi_f2d
 239              	 .global __aeabi_dsub
 240              	 .global __aeabi_dmul
 241              	 .global __aeabi_i2f
 242              	 .global __aeabi_fmul
 243              	 .global __aeabi_dadd
 244              	 .global __aeabi_d2f
 245              	 .global __aeabi_fsub
 246              	 .global __aeabi_f2iz
 247              	 .global __aeabi_fadd
 248              	 .global __aeabi_d2uiz
 249              	 .align 1
 250              	 .syntax unified
 251              	 .thumb
 252              	 .thumb_func
 253              	 .fpu softvfp
 255              	energy_Calc_NumMotes:
 256              	.LFB128:
  93:Energy.c      **** static void energy_Calc_NumMotes(void)
  94:Energy.c      **** {
 257              	 .loc 1 94 0
 258              	 .cfi_startproc
 259              	 
 260              	 
 261 00aa F8B5     	 push {r3,r4,r5,r6,r7,lr}
 262              	.LCFI6:
 263              	 .cfi_def_cfa_offset 24
 264              	 .cfi_offset 3,-24
 265              	 .cfi_offset 4,-20
 266              	 .cfi_offset 5,-16
 267              	 .cfi_offset 6,-12
 268              	 .cfi_offset 7,-8
 269              	 .cfi_offset 14,-4
 270 00ac 00AF     	 add r7,sp,#0
 271              	.LCFI7:
 272              	 .cfi_def_cfa_register 7
  95:Energy.c      **** 	// taxa de perda
  96:Energy.c      **** //	SamLoss								= N_MOTES_COLLAB_MAX - solver_get_n_received();	// Exclude Coordinator Node
  97:Energy.c      **** 	SamLoss								= motes_connected_n - solver_get_n_received();	// Exclude Coordinator Node
 273              	 .loc 1 97 0
 274 00ae 684B     	 ldr r3,.L13
 275 00b0 1C78     	 ldrb r4,[r3]
 276 00b2 684B     	 ldr r3,.L13+4
 277 00b4 9847     	 blx r3
 278              	.LVL0:
 279 00b6 0346     	 mov r3,r0
 280 00b8 E31A     	 subs r3,r4,r3
 281 00ba DBB2     	 uxtb r3,r3
 282 00bc 5AB2     	 sxtb r2,r3
 283 00be 664B     	 ldr r3,.L13+8
 284 00c0 1A70     	 strb r2,[r3]
  98:Energy.c      **** 	if(SamLoss < 0)
 285              	 .loc 1 98 0
 286 00c2 654B     	 ldr r3,.L13+8
 287 00c4 93F90030 	 ldrsb r3,[r3]
 288 00c8 002B     	 cmp r3,#0
 289 00ca 02DA     	 bge .L10
  99:Energy.c      **** 	{
 100:Energy.c      **** 		SamLoss							= 0;
 290              	 .loc 1 100 0
 291 00cc 624B     	 ldr r3,.L13+8
 292 00ce 0022     	 movs r2,#0
 293 00d0 1A70     	 strb r2,[r3]
 294              	.L10:
 101:Energy.c      **** 	}
 102:Energy.c      **** 
 103:Energy.c      **** 	//vectortaxaperda.recordWithTimestamp(simTime(),SamLoss);
 104:Energy.c      **** 	//
 105:Energy.c      **** 	//if (alpha > limiaralpha)
 106:Energy.c      **** 	//alpha							= alpha - 0.1;
 107:Energy.c      **** 	//
 108:Energy.c      **** 	//if (betha > limiarbetha)
 109:Energy.c      **** 	//betha							= betha - 0.1;
 110:Energy.c      **** 
 111:Energy.c      **** 	EstLoss								= (1.0 - alpha) * EstLoss + alpha * SamLoss;
 295              	 .loc 1 111 0
 296 00d2 624B     	 ldr r3,.L13+12
 297 00d4 1A68     	 ldr r2,[r3]
 298 00d6 624B     	 ldr r3,.L13+16
 299 00d8 1046     	 mov r0,r2
 300 00da 9847     	 blx r3
 301              	.LVL1:
 302 00dc 0246     	 mov r2,r0
 303 00de 0B46     	 mov r3,r1
 304 00e0 604C     	 ldr r4,.L13+20
 305 00e2 4FF00000 	 mov r0,#0
 306 00e6 6049     	 ldr r1,.L13+24
 307 00e8 A047     	 blx r4
 308              	.LVL2:
 309 00ea 0346     	 mov r3,r0
 310 00ec 0C46     	 mov r4,r1
 311 00ee 1D46     	 mov r5,r3
 312 00f0 2646     	 mov r6,r4
 313 00f2 5E4B     	 ldr r3,.L13+28
 314 00f4 1A68     	 ldr r2,[r3]
 315 00f6 5A4B     	 ldr r3,.L13+16
 316 00f8 1046     	 mov r0,r2
 317 00fa 9847     	 blx r3
 318              	.LVL3:
 319 00fc 0246     	 mov r2,r0
 320 00fe 0B46     	 mov r3,r1
 321 0100 5B4C     	 ldr r4,.L13+32
 322 0102 2846     	 mov r0,r5
 323 0104 3146     	 mov r1,r6
 324 0106 A047     	 blx r4
 325              	.LVL4:
 326 0108 0346     	 mov r3,r0
 327 010a 0C46     	 mov r4,r1
 328 010c 1D46     	 mov r5,r3
 329 010e 2646     	 mov r6,r4
 330 0110 514B     	 ldr r3,.L13+8
 331 0112 93F90020 	 ldrsb r2,[r3]
 332 0116 574B     	 ldr r3,.L13+36
 333 0118 1046     	 mov r0,r2
 334 011a 9847     	 blx r3
 335              	.LVL5:
 336 011c 4F4B     	 ldr r3,.L13+12
 337 011e 1A68     	 ldr r2,[r3]
 338 0120 554B     	 ldr r3,.L13+40
 339 0122 1146     	 mov r1,r2
 340 0124 9847     	 blx r3
 341              	.LVL6:
 342 0126 0346     	 mov r3,r0
 343 0128 1A46     	 mov r2,r3
 344 012a 4D4B     	 ldr r3,.L13+16
 345 012c 1046     	 mov r0,r2
 346 012e 9847     	 blx r3
 347              	.LVL7:
 348 0130 0246     	 mov r2,r0
 349 0132 0B46     	 mov r3,r1
 350 0134 514C     	 ldr r4,.L13+44
 351 0136 2846     	 mov r0,r5
 352 0138 3146     	 mov r1,r6
 353 013a A047     	 blx r4
 354              	.LVL8:
 355 013c 0346     	 mov r3,r0
 356 013e 0C46     	 mov r4,r1
 357 0140 1946     	 mov r1,r3
 358 0142 2246     	 mov r2,r4
 359 0144 4E4B     	 ldr r3,.L13+48
 360 0146 0846     	 mov r0,r1
 361 0148 1146     	 mov r1,r2
 362 014a 9847     	 blx r3
 363              	.LVL9:
 364 014c 0246     	 mov r2,r0
 365 014e 474B     	 ldr r3,.L13+28
 366 0150 1A60     	 str r2,[r3]
 112:Energy.c      **** 	DevLoss								= (1.0 - betha) * DevLoss + betha * abs(SamLoss - EstLoss);
 367              	 .loc 1 112 0
 368 0152 4C4B     	 ldr r3,.L13+52
 369 0154 1A68     	 ldr r2,[r3]
 370 0156 424B     	 ldr r3,.L13+16
 371 0158 1046     	 mov r0,r2
 372 015a 9847     	 blx r3
 373              	.LVL10:
 374 015c 0246     	 mov r2,r0
 375 015e 0B46     	 mov r3,r1
 376 0160 404C     	 ldr r4,.L13+20
 377 0162 4FF00000 	 mov r0,#0
 378 0166 4049     	 ldr r1,.L13+24
 379 0168 A047     	 blx r4
 380              	.LVL11:
 381 016a 0346     	 mov r3,r0
 382 016c 0C46     	 mov r4,r1
 383 016e 1D46     	 mov r5,r3
 384 0170 2646     	 mov r6,r4
 385 0172 454B     	 ldr r3,.L13+56
 386 0174 1A68     	 ldr r2,[r3]
 387 0176 3A4B     	 ldr r3,.L13+16
 388 0178 1046     	 mov r0,r2
 389 017a 9847     	 blx r3
 390              	.LVL12:
 391 017c 0246     	 mov r2,r0
 392 017e 0B46     	 mov r3,r1
 393 0180 3B4C     	 ldr r4,.L13+32
 394 0182 2846     	 mov r0,r5
 395 0184 3146     	 mov r1,r6
 396 0186 A047     	 blx r4
 397              	.LVL13:
 398 0188 0346     	 mov r3,r0
 399 018a 0C46     	 mov r4,r1
 400 018c 1D46     	 mov r5,r3
 401 018e 2646     	 mov r6,r4
 402 0190 314B     	 ldr r3,.L13+8
 403 0192 93F90020 	 ldrsb r2,[r3]
 404 0196 374B     	 ldr r3,.L13+36
 405 0198 1046     	 mov r0,r2
 406 019a 9847     	 blx r3
 407              	.LVL14:
 408 019c 334B     	 ldr r3,.L13+28
 409 019e 1A68     	 ldr r2,[r3]
 410 01a0 3A4B     	 ldr r3,.L13+60
 411 01a2 1146     	 mov r1,r2
 412 01a4 9847     	 blx r3
 413              	.LVL15:
 414 01a6 0346     	 mov r3,r0
 415 01a8 1A46     	 mov r2,r3
 416 01aa 394B     	 ldr r3,.L13+64
 417 01ac 1046     	 mov r0,r2
 418 01ae 9847     	 blx r3
 419              	.LVL16:
 420 01b0 0346     	 mov r3,r0
 421 01b2 83EAE372 	 eor r2,r3,r3,asr#31
 422 01b6 A2EBE372 	 sub r2,r2,r3,asr#31
 423 01ba 2E4B     	 ldr r3,.L13+36
 424 01bc 1046     	 mov r0,r2
 425 01be 9847     	 blx r3
 426              	.LVL17:
 427 01c0 304B     	 ldr r3,.L13+52
 428 01c2 1A68     	 ldr r2,[r3]
 429 01c4 2C4B     	 ldr r3,.L13+40
 430 01c6 1146     	 mov r1,r2
 431 01c8 9847     	 blx r3
 432              	.LVL18:
 433 01ca 0346     	 mov r3,r0
 434 01cc 1A46     	 mov r2,r3
 435 01ce 244B     	 ldr r3,.L13+16
 436 01d0 1046     	 mov r0,r2
 437 01d2 9847     	 blx r3
 438              	.LVL19:
 439 01d4 0246     	 mov r2,r0
 440 01d6 0B46     	 mov r3,r1
 441 01d8 284C     	 ldr r4,.L13+44
 442 01da 2846     	 mov r0,r5
 443 01dc 3146     	 mov r1,r6
 444 01de A047     	 blx r4
 445              	.LVL20:
 446 01e0 0346     	 mov r3,r0
 447 01e2 0C46     	 mov r4,r1
 448 01e4 1946     	 mov r1,r3
 449 01e6 2246     	 mov r2,r4
 450 01e8 254B     	 ldr r3,.L13+48
 451 01ea 0846     	 mov r0,r1
 452 01ec 1146     	 mov r1,r2
 453 01ee 9847     	 blx r3
 454              	.LVL21:
 455 01f0 0246     	 mov r2,r0
 456 01f2 254B     	 ldr r3,.L13+56
 457 01f4 1A60     	 str r2,[r3]
 113:Energy.c      **** 	n_collab							= ceil(ganho * EstLoss + DevLoss);
 458              	 .loc 1 113 0
 459 01f6 274B     	 ldr r3,.L13+68
 460 01f8 1A68     	 ldr r2,[r3]
 461 01fa 1C4B     	 ldr r3,.L13+28
 462 01fc 1968     	 ldr r1,[r3]
 463 01fe 1E4B     	 ldr r3,.L13+40
 464 0200 1046     	 mov r0,r2
 465 0202 9847     	 blx r3
 466              	.LVL22:
 467 0204 0346     	 mov r3,r0
 468 0206 1846     	 mov r0,r3
 469 0208 1F4B     	 ldr r3,.L13+56
 470 020a 1A68     	 ldr r2,[r3]
 471 020c 224B     	 ldr r3,.L13+72
 472 020e 1146     	 mov r1,r2
 473 0210 9847     	 blx r3
 474              	.LVL23:
 475 0212 0346     	 mov r3,r0
 476 0214 1A46     	 mov r2,r3
 477 0216 124B     	 ldr r3,.L13+16
 478 0218 1046     	 mov r0,r2
 479 021a 9847     	 blx r3
 480              	.LVL24:
 481 021c 0346     	 mov r3,r0
 482 021e 0C46     	 mov r4,r1
 483 0220 1846     	 mov r0,r3
 484 0222 2146     	 mov r1,r4
 485 0224 1D4B     	 ldr r3,.L13+76
 486 0226 9847     	 blx r3
 487              	.LVL25:
 488 0228 0A46     	 mov r2,r1
 489 022a 0146     	 mov r1,r0
 490 022c 1C4B     	 ldr r3,.L13+80
 491 022e 0846     	 mov r0,r1
 492 0230 1146     	 mov r1,r2
 493 0232 9847     	 blx r3
 494              	.LVL26:
 495 0234 0346     	 mov r3,r0
 496 0236 DAB2     	 uxtb r2,r3
 497 0238 1A4B     	 ldr r3,.L13+84
 498 023a 1A70     	 strb r2,[r3]
 114:Energy.c      **** 	
 115:Energy.c      **** 	if(n_collab > N_MOTES_COLLAB_MAX)
 499              	 .loc 1 115 0
 500 023c 194B     	 ldr r3,.L13+84
 501 023e 1B78     	 ldrb r3,[r3]
 502 0240 0E2B     	 cmp r3,#14
 503 0242 02D9     	 bls .L12
 116:Energy.c      **** 	{
 117:Energy.c      **** 		n_collab						= N_MOTES_COLLAB_MAX;
 504              	 .loc 1 117 0
 505 0244 174B     	 ldr r3,.L13+84
 506 0246 0E22     	 movs r2,#14
 507 0248 1A70     	 strb r2,[r3]
 508              	.L12:
 118:Energy.c      **** 	}
 119:Energy.c      **** }
 509              	 .loc 1 119 0
 510 024a 00BF     	 nop
 511 024c F8BD     	 pop {r3,r4,r5,r6,r7,pc}
 512              	.L14:
 513 024e 00BF     	 .align 2
 514              	.L13:
 515 0250 00000000 	 .word motes_connected_n
 516 0254 00000000 	 .word solver_get_n_received
 517 0258 00000000 	 .word SamLoss
 518 025c 00000000 	 .word alpha
 519 0260 00000000 	 .word __aeabi_f2d
 520 0264 00000000 	 .word __aeabi_dsub
 521 0268 0000F03F 	 .word 1072693248
 522 026c 00000000 	 .word EstLoss
 523 0270 00000000 	 .word __aeabi_dmul
 524 0274 00000000 	 .word __aeabi_i2f
 525 0278 00000000 	 .word __aeabi_fmul
 526 027c 00000000 	 .word __aeabi_dadd
 527 0280 00000000 	 .word __aeabi_d2f
 528 0284 00000000 	 .word betha
 529 0288 00000000 	 .word DevLoss
 530 028c 00000000 	 .word __aeabi_fsub
 531 0290 00000000 	 .word __aeabi_f2iz
 532 0294 00000000 	 .word ganho
 533 0298 00000000 	 .word __aeabi_fadd
 534 029c 00000000 	 .word ceil
 535 02a0 00000000 	 .word __aeabi_d2uiz
 536 02a4 00000000 	 .word n_collab
 537              	 .cfi_endproc
 538              	.LFE128:
 540              	 .align 1
 541              	 .syntax unified
 542              	 .thumb
 543              	 .thumb_func
 544              	 .fpu softvfp
 546              	energy_check_each_coordinator:
 547              	.LFB129:
 120:Energy.c      **** static void energy_check_each_coordinator(void)
 121:Energy.c      **** {
 548              	 .loc 1 121 0
 549              	 .cfi_startproc
 550              	 
 551              	 
 552              	 
 553 02a8 80B4     	 push {r7}
 554              	.LCFI8:
 555              	 .cfi_def_cfa_offset 4
 556              	 .cfi_offset 7,-4
 557 02aa 83B0     	 sub sp,sp,#12
 558              	.LCFI9:
 559              	 .cfi_def_cfa_offset 16
 560 02ac 00AF     	 add r7,sp,#0
 561              	.LCFI10:
 562              	 .cfi_def_cfa_register 7
 563              	.LBB3:
 122:Energy.c      **** 	for (int i = 0; i <= N_MOTES_COLLAB_MAX; ++i)
 564              	 .loc 1 122 0
 565 02ae 0023     	 movs r3,#0
 566 02b0 7B60     	 str r3,[r7,#4]
 567 02b2 3EE0     	 b .L16
 568              	.L17:
 123:Energy.c      **** 	{
 124:Energy.c      **** 		// 50 %
 125:Energy.c      **** 		motes[i].reach_coord			= ((motes[i].n_recv_msg_turn + motes[i].n_collab_msg_turn) >= COLLAB_ALG_T
 569              	 .loc 1 125 0 discriminator 3
 570 02b4 2349     	 ldr r1,.L18
 571 02b6 7A68     	 ldr r2,[r7,#4]
 572 02b8 1346     	 mov r3,r2
 573 02ba 5B00     	 lsls r3,r3,#1
 574 02bc 1344     	 add r3,r3,r2
 575 02be DA00     	 lsls r2,r3,#3
 576 02c0 D21A     	 subs r2,r2,r3
 577 02c2 8B18     	 adds r3,r1,r2
 578 02c4 0A33     	 adds r3,r3,#10
 579 02c6 1B78     	 ldrb r3,[r3]
 580 02c8 1846     	 mov r0,r3
 581 02ca 1E49     	 ldr r1,.L18
 582 02cc 7A68     	 ldr r2,[r7,#4]
 583 02ce 1346     	 mov r3,r2
 584 02d0 5B00     	 lsls r3,r3,#1
 585 02d2 1344     	 add r3,r3,r2
 586 02d4 DA00     	 lsls r2,r3,#3
 587 02d6 D21A     	 subs r2,r2,r3
 588 02d8 8B18     	 adds r3,r1,r2
 589 02da 1333     	 adds r3,r3,#19
 590 02dc 1B78     	 ldrb r3,[r3]
 591 02de 0344     	 add r3,r3,r0
 592 02e0 032B     	 cmp r3,#3
 593 02e2 CCBF     	 ite gt
 594 02e4 0123     	 movgt r3,#1
 595 02e6 0023     	 movle r3,#0
 596 02e8 D8B2     	 uxtb r0,r3
 597 02ea 1649     	 ldr r1,.L18
 598 02ec 7A68     	 ldr r2,[r7,#4]
 599 02ee 1346     	 mov r3,r2
 600 02f0 5B00     	 lsls r3,r3,#1
 601 02f2 1344     	 add r3,r3,r2
 602 02f4 DA00     	 lsls r2,r3,#3
 603 02f6 D21A     	 subs r2,r2,r3
 604 02f8 8B18     	 adds r3,r1,r2
 605 02fa 1433     	 adds r3,r3,#20
 606 02fc 0246     	 mov r2,r0
 607 02fe 1A70     	 strb r2,[r3]
 126:Energy.c      **** 		
 127:Energy.c      **** 		// Reset to calc again after next COLLAB_ALG_TURN.
 128:Energy.c      **** 		motes[i].n_recv_msg_turn		= 0;
 608              	 .loc 1 128 0 discriminator 3
 609 0300 1049     	 ldr r1,.L18
 610 0302 7A68     	 ldr r2,[r7,#4]
 611 0304 1346     	 mov r3,r2
 612 0306 5B00     	 lsls r3,r3,#1
 613 0308 1344     	 add r3,r3,r2
 614 030a DA00     	 lsls r2,r3,#3
 615 030c D21A     	 subs r2,r2,r3
 616 030e 8B18     	 adds r3,r1,r2
 617 0310 0A33     	 adds r3,r3,#10
 618 0312 0022     	 movs r2,#0
 619 0314 1A70     	 strb r2,[r3]
 129:Energy.c      **** 		motes[i].n_collab_msg_turn		= 0;
 620              	 .loc 1 129 0 discriminator 3
 621 0316 0B49     	 ldr r1,.L18
 622 0318 7A68     	 ldr r2,[r7,#4]
 623 031a 1346     	 mov r3,r2
 624 031c 5B00     	 lsls r3,r3,#1
 625 031e 1344     	 add r3,r3,r2
 626 0320 DA00     	 lsls r2,r3,#3
 627 0322 D21A     	 subs r2,r2,r3
 628 0324 8B18     	 adds r3,r1,r2
 629 0326 1333     	 adds r3,r3,#19
 630 0328 0022     	 movs r2,#0
 631 032a 1A70     	 strb r2,[r3]
 122:Energy.c      **** 	{
 632              	 .loc 1 122 0 discriminator 3
 633 032c 7B68     	 ldr r3,[r7,#4]
 634 032e 0133     	 adds r3,r3,#1
 635 0330 7B60     	 str r3,[r7,#4]
 636              	.L16:
 122:Energy.c      **** 	{
 637              	 .loc 1 122 0 is_stmt 0 discriminator 1
 638 0332 7B68     	 ldr r3,[r7,#4]
 639 0334 0E2B     	 cmp r3,#14
 640 0336 BDDD     	 ble .L17
 641              	.LBE3:
 130:Energy.c      **** 	}
 131:Energy.c      **** }
 642              	 .loc 1 131 0 is_stmt 1
 643 0338 00BF     	 nop
 644 033a 0C37     	 adds r7,r7,#12
 645              	.LCFI11:
 646              	 .cfi_def_cfa_offset 4
 647 033c BD46     	 mov sp,r7
 648              	.LCFI12:
 649              	 .cfi_def_cfa_register 13
 650              	 
 651 033e 80BC     	 pop {r7}
 652              	.LCFI13:
 653              	 .cfi_restore 7
 654              	 .cfi_def_cfa_offset 0
 655 0340 7047     	 bx lr
 656              	.L19:
 657 0342 00BF     	 .align 2
 658              	.L18:
 659 0344 00000000 	 .word motes
 660              	 .cfi_endproc
 661              	.LFE129:
 663              	 .align 1
 664              	 .syntax unified
 665              	 .thumb
 666              	 .thumb_func
 667              	 .fpu softvfp
 669              	energy_generate_collab_vector:
 670              	.LFB130:
 132:Energy.c      **** // Método do PAN
 133:Energy.c      **** static void energy_generate_collab_vector(void)
 134:Energy.c      **** {
 671              	 .loc 1 134 0
 672              	 .cfi_startproc
 673              	 
 674              	 
 675 0348 90B5     	 push {r4,r7,lr}
 676              	.LCFI14:
 677              	 .cfi_def_cfa_offset 12
 678              	 .cfi_offset 4,-12
 679              	 .cfi_offset 7,-8
 680              	 .cfi_offset 14,-4
 681 034a 85B0     	 sub sp,sp,#20
 682              	.LCFI15:
 683              	 .cfi_def_cfa_offset 32
 684 034c 00AF     	 add r7,sp,#0
 685              	.LCFI16:
 686              	 .cfi_def_cfa_register 7
 135:Energy.c      **** 	// Lógica para escolher os nodos cooperantes.
 136:Energy.c      **** 	// Utilizar SNR médio (média ou (pior+melhor)/nº de nodos).
 137:Energy.c      **** 	// Verificação simples, melhorar depois. Está pegando os nodos cooperantes com SNR acima da média,
 138:Energy.c      **** 	// os N primeiros da lista, sendo N= nº de nodos cooperantes.
 139:Energy.c      **** 	// O número máximo de nodos cooperantes está limitado a 20, pela classe Ieee802154BeaconFrame.msg
 140:Energy.c      **** 	// na propriedade listanodoscooperantes
 141:Energy.c      **** 
 142:Energy.c      **** 	uint32_t snrmedio					= 0.0;
 687              	 .loc 1 142 0
 688 034e 0023     	 movs r3,#0
 689 0350 FB60     	 str r3,[r7,#12]
 143:Energy.c      **** 	memcpy(motes_aux, motes, sizeof(motes));		// Copia toda a estrutura motes para motes_aux
 690              	 .loc 1 143 0
 691 0352 4C4A     	 ldr r2,.L30
 692 0354 4C4B     	 ldr r3,.L30+4
 693 0356 1046     	 mov r0,r2
 694 0358 1946     	 mov r1,r3
 695 035a 4FF49373 	 mov r3,#294
 696 035e 1A46     	 mov r2,r3
 697 0360 4A4B     	 ldr r3,.L30+8
 698 0362 9847     	 blx r3
 699              	.LVL27:
 700              	.LBB4:
 144:Energy.c      **** 
 145:Energy.c      **** 	// Calcula o SNR médio para ponto de corte...
 146:Energy.c      **** 	for (int i = 0; i <= N_MOTES_COLLAB_MAX; ++i)
 701              	 .loc 1 146 0
 702 0364 0023     	 movs r3,#0
 703 0366 BB60     	 str r3,[r7,#8]
 704 0368 27E0     	 b .L21
 705              	.L23:
 147:Energy.c      **** 	{
 148:Energy.c      **** 		// Estabelece um SNR bem baixo (23) para os nodos que não tiveram sucesso ao enviar msg para o PA
 149:Energy.c      **** 		if(motes_aux[i].rssi == 0)
 706              	 .loc 1 149 0
 707 036a 4649     	 ldr r1,.L30
 708 036c BA68     	 ldr r2,[r7,#8]
 709 036e 1346     	 mov r3,r2
 710 0370 5B00     	 lsls r3,r3,#1
 711 0372 1344     	 add r3,r3,r2
 712 0374 DA00     	 lsls r2,r3,#3
 713 0376 D21A     	 subs r2,r2,r3
 714 0378 8B18     	 adds r3,r1,r2
 715 037a 0133     	 adds r3,r3,#1
 716 037c 1B78     	 ldrb r3,[r3]
 717 037e 002B     	 cmp r3,#0
 718 0380 0AD1     	 bne .L22
 150:Energy.c      **** 		{
 151:Energy.c      **** 			motes_aux[i].rssi			= 23;
 719              	 .loc 1 151 0
 720 0382 4049     	 ldr r1,.L30
 721 0384 BA68     	 ldr r2,[r7,#8]
 722 0386 1346     	 mov r3,r2
 723 0388 5B00     	 lsls r3,r3,#1
 724 038a 1344     	 add r3,r3,r2
 725 038c DA00     	 lsls r2,r3,#3
 726 038e D21A     	 subs r2,r2,r3
 727 0390 8B18     	 adds r3,r1,r2
 728 0392 0133     	 adds r3,r3,#1
 729 0394 1722     	 movs r2,#23
 730 0396 1A70     	 strb r2,[r3]
 731              	.L22:
 152:Energy.c      **** 		}
 153:Energy.c      **** 		snrmedio						+= motes_aux[i].rssi;
 732              	 .loc 1 153 0 discriminator 2
 733 0398 3A49     	 ldr r1,.L30
 734 039a BA68     	 ldr r2,[r7,#8]
 735 039c 1346     	 mov r3,r2
 736 039e 5B00     	 lsls r3,r3,#1
 737 03a0 1344     	 add r3,r3,r2
 738 03a2 DA00     	 lsls r2,r3,#3
 739 03a4 D21A     	 subs r2,r2,r3
 740 03a6 8B18     	 adds r3,r1,r2
 741 03a8 0133     	 adds r3,r3,#1
 742 03aa 1B78     	 ldrb r3,[r3]
 743 03ac 1A46     	 mov r2,r3
 744 03ae FB68     	 ldr r3,[r7,#12]
 745 03b0 1344     	 add r3,r3,r2
 746 03b2 FB60     	 str r3,[r7,#12]
 146:Energy.c      **** 	{
 747              	 .loc 1 146 0 discriminator 2
 748 03b4 BB68     	 ldr r3,[r7,#8]
 749 03b6 0133     	 adds r3,r3,#1
 750 03b8 BB60     	 str r3,[r7,#8]
 751              	.L21:
 146:Energy.c      **** 	{
 752              	 .loc 1 146 0 is_stmt 0 discriminator 1
 753 03ba BB68     	 ldr r3,[r7,#8]
 754 03bc 0E2B     	 cmp r3,#14
 755 03be D4DD     	 ble .L23
 756              	.LBE4:
 154:Energy.c      **** 	}
 155:Energy.c      **** 	snrmedio							/= N_MOTES_COLLAB_MAX;
 757              	 .loc 1 155 0 is_stmt 1
 758 03c0 FB68     	 ldr r3,[r7,#12]
 759 03c2 5B08     	 lsrs r3,r3,#1
 760 03c4 324A     	 ldr r2,.L30+12
 761 03c6 A2FB0323 	 umull r2,r3,r2,r3
 762 03ca 9B08     	 lsrs r3,r3,#2
 763 03cc FB60     	 str r3,[r7,#12]
 156:Energy.c      **** 	
 157:Energy.c      **** 	// Força um valor mínimo de SNR para nodos colaboradores. Isto remove os nodos com baixa taxa de s
 158:Energy.c      **** 	if(snrmedio <= 23)
 764              	 .loc 1 158 0
 765 03ce FB68     	 ldr r3,[r7,#12]
 766 03d0 172B     	 cmp r3,#23
 767 03d2 01D8     	 bhi .L24
 159:Energy.c      **** 	{
 160:Energy.c      **** 		snrmedio						= 25;
 768              	 .loc 1 160 0
 769 03d4 1923     	 movs r3,#25
 770 03d6 FB60     	 str r3,[r7,#12]
 771              	.L24:
 161:Energy.c      **** 	}
 162:Energy.c      **** 	
 163:Energy.c      **** 	// Ordena motes_aux da MAIOR potência para a MENOR
 164:Energy.c      **** 	qsort(motes_aux, N_MOTES_COLLAB_MAX, sizeof(EnergyStatistics_t), cmp_EnergyStatistics_t_func);
 772              	 .loc 1 164 0
 773 03d8 2E4B     	 ldr r3,.L30+16
 774 03da 1522     	 movs r2,#21
 775 03dc 0E21     	 movs r1,#14
 776 03de 2948     	 ldr r0,.L30
 777 03e0 2D4C     	 ldr r4,.L30+20
 778 03e2 A047     	 blx r4
 779              	.LVL28:
 165:Energy.c      **** 
 166:Energy.c      **** 	// Diversidade temporal
 167:Energy.c      **** 	// 1° Copia o next vector para o first
 168:Energy.c      **** 	// 2° Cria next vector com no máximo n_collab
 169:Energy.c      **** 
 170:Energy.c      **** 	// 1°
 171:Energy.c      **** 	uint8_t			n_collab_next_index	= collab_vector[0] + 2;						// Header (number os collabs + count ==
 780              	 .loc 1 171 0
 781 03e4 2D4B     	 ldr r3,.L30+24
 782 03e6 1B78     	 ldrb r3,[r3]
 783 03e8 0233     	 adds r3,r3,#2
 784 03ea 7B71     	 strb r3,[r7,#5]
 172:Energy.c      **** 	memcpy(collab_vector, collab_vector + n_collab_next_index, collab_vector[n_collab_next_index] + 2)
 785              	 .loc 1 172 0
 786 03ec 7B79     	 ldrb r3,[r7,#5]
 787 03ee 2B4A     	 ldr r2,.L30+24
 788 03f0 9918     	 adds r1,r3,r2
 789 03f2 7B79     	 ldrb r3,[r7,#5]
 790 03f4 294A     	 ldr r2,.L30+24
 791 03f6 D35C     	 ldrb r3,[r2,r3]
 792 03f8 0233     	 adds r3,r3,#2
 793 03fa 1A46     	 mov r2,r3
 794 03fc 2748     	 ldr r0,.L30+24
 795 03fe 234B     	 ldr r3,.L30+8
 796 0400 9847     	 blx r3
 797              	.LVL29:
 173:Energy.c      **** 	n_collab_next_index					= collab_vector[0] + 2;
 798              	 .loc 1 173 0
 799 0402 264B     	 ldr r3,.L30+24
 800 0404 1B78     	 ldrb r3,[r3]
 801 0406 0233     	 adds r3,r3,#2
 802 0408 7B71     	 strb r3,[r7,#5]
 174:Energy.c      **** 
 175:Energy.c      **** 	// 2°
 176:Energy.c      **** 	uint8_t			n_collab_cycle		= 0;
 803              	 .loc 1 176 0
 804 040a 0023     	 movs r3,#0
 805 040c FB71     	 strb r3,[r7,#7]
 806              	.LBB5:
 177:Energy.c      **** 	for(uint8_t i = 0; i < n_collab; ++i)
 807              	 .loc 1 177 0
 808 040e 0023     	 movs r3,#0
 809 0410 BB71     	 strb r3,[r7,#6]
 810 0412 24E0     	 b .L25
 811              	.L28:
 178:Energy.c      **** 	{
 179:Energy.c      **** 		// Verifica se os possíveis nodos colaborantes tenham condições de atender. Se a rede esta muito 
 180:Energy.c      **** 		// os nodos devem ser ignorados independente da ordenação gerada. 
 181:Energy.c      **** 		if(motes_aux[i].rssi < snrmedio)
 812              	 .loc 1 181 0
 813 0414 BA79     	 ldrb r2,[r7,#6]
 814 0416 1B49     	 ldr r1,.L30
 815 0418 1346     	 mov r3,r2
 816 041a 5B00     	 lsls r3,r3,#1
 817 041c 1344     	 add r3,r3,r2
 818 041e DA00     	 lsls r2,r3,#3
 819 0420 D21A     	 subs r2,r2,r3
 820 0422 8B18     	 adds r3,r1,r2
 821 0424 0133     	 adds r3,r3,#1
 822 0426 1B78     	 ldrb r3,[r3]
 823 0428 1A46     	 mov r2,r3
 824 042a FB68     	 ldr r3,[r7,#12]
 825 042c 9A42     	 cmp r2,r3
 826 042e 12D3     	 bcc .L29
 182:Energy.c      **** 		{
 183:Energy.c      **** 			continue;
 184:Energy.c      **** 		}
 185:Energy.c      **** 
 186:Energy.c      **** 		collab_vector[n_collab_next_index + n_collab_cycle + 2]	= motes_aux[n_collab_cycle].address;
 827              	 .loc 1 186 0
 828 0430 7A79     	 ldrb r2,[r7,#5]
 829 0432 FB79     	 ldrb r3,[r7,#7]
 830 0434 1344     	 add r3,r3,r2
 831 0436 991C     	 adds r1,r3,#2
 832 0438 FA79     	 ldrb r2,[r7,#7]
 833 043a 1248     	 ldr r0,.L30
 834 043c 1346     	 mov r3,r2
 835 043e 5B00     	 lsls r3,r3,#1
 836 0440 1344     	 add r3,r3,r2
 837 0442 DA00     	 lsls r2,r3,#3
 838 0444 D21A     	 subs r2,r2,r3
 839 0446 8318     	 adds r3,r0,r2
 840 0448 1A78     	 ldrb r2,[r3]
 841 044a 144B     	 ldr r3,.L30+24
 842 044c 5A54     	 strb r2,[r3,r1]
 187:Energy.c      **** 		++n_collab_cycle;
 843              	 .loc 1 187 0
 844 044e FB79     	 ldrb r3,[r7,#7]
 845 0450 0133     	 adds r3,r3,#1
 846 0452 FB71     	 strb r3,[r7,#7]
 847 0454 00E0     	 b .L27
 848              	.L29:
 183:Energy.c      **** 		}
 849              	 .loc 1 183 0
 850 0456 00BF     	 nop
 851              	.L27:
 177:Energy.c      **** 	{
 852              	 .loc 1 177 0 discriminator 2
 853 0458 BB79     	 ldrb r3,[r7,#6]
 854 045a 0133     	 adds r3,r3,#1
 855 045c BB71     	 strb r3,[r7,#6]
 856              	.L25:
 177:Energy.c      **** 	{
 857              	 .loc 1 177 0 is_stmt 0 discriminator 1
 858 045e 104B     	 ldr r3,.L30+28
 859 0460 1B78     	 ldrb r3,[r3]
 860 0462 BA79     	 ldrb r2,[r7,#6]
 861 0464 9A42     	 cmp r2,r3
 862 0466 D5D3     	 bcc .L28
 863              	.LBE5:
 188:Energy.c      **** 	}
 189:Energy.c      **** 	collab_vector[n_collab_next_index]	= n_collab_cycle;
 864              	 .loc 1 189 0 is_stmt 1
 865 0468 7B79     	 ldrb r3,[r7,#5]
 866 046a 0C49     	 ldr r1,.L30+24
 867 046c FA79     	 ldrb r2,[r7,#7]
 868 046e CA54     	 strb r2,[r1,r3]
 190:Energy.c      **** 	collab_vector[n_collab_next_index + 1] = COLLAB_ALG_TURN;
 869              	 .loc 1 190 0
 870 0470 7B79     	 ldrb r3,[r7,#5]
 871 0472 0133     	 adds r3,r3,#1
 872 0474 094A     	 ldr r2,.L30+24
 873 0476 0421     	 movs r1,#4
 874 0478 D154     	 strb r1,[r2,r3]
 191:Energy.c      **** }
 875              	 .loc 1 191 0
 876 047a 00BF     	 nop
 877 047c 1437     	 adds r7,r7,#20
 878              	.LCFI17:
 879              	 .cfi_def_cfa_offset 12
 880 047e BD46     	 mov sp,r7
 881              	.LCFI18:
 882              	 .cfi_def_cfa_register 13
 883              	 
 884 0480 90BD     	 pop {r4,r7,pc}
 885              	.L31:
 886 0482 00BF     	 .align 2
 887              	.L30:
 888 0484 00000000 	 .word motes_aux
 889 0488 00000000 	 .word motes
 890 048c 00000000 	 .word memcpy
 891 0490 93244992 	 .word -1840700269
 892 0494 00000000 	 .word cmp_EnergyStatistics_t_func
 893 0498 00000000 	 .word qsort
 894 049c 00000000 	 .word collab_vector
 895 04a0 00000000 	 .word n_collab
 896              	 .cfi_endproc
 897              	.LFE130:
 899              	 .align 1
 900              	 .global energy_init
 901              	 .syntax unified
 902              	 .thumb
 903              	 .thumb_func
 904              	 .fpu softvfp
 906              	energy_init:
 907              	.LFB131:
 192:Energy.c      **** void energy_init(void)
 193:Energy.c      **** {
 908              	 .loc 1 193 0
 909              	 .cfi_startproc
 910              	 
 911              	 
 912 04a4 80B5     	 push {r7,lr}
 913              	.LCFI19:
 914              	 .cfi_def_cfa_offset 8
 915              	 .cfi_offset 7,-8
 916              	 .cfi_offset 14,-4
 917 04a6 82B0     	 sub sp,sp,#8
 918              	.LCFI20:
 919              	 .cfi_def_cfa_offset 16
 920 04a8 00AF     	 add r7,sp,#0
 921              	.LCFI21:
 922              	 .cfi_def_cfa_register 7
 194:Energy.c      **** 	n_collab					= 0;
 923              	 .loc 1 194 0
 924 04aa 444B     	 ldr r3,.L35
 925 04ac 0022     	 movs r2,#0
 926 04ae 1A70     	 strb r2,[r3]
 195:Energy.c      **** 	motes_connected_n			= 0;
 927              	 .loc 1 195 0
 928 04b0 434B     	 ldr r3,.L35+4
 929 04b2 0022     	 movs r2,#0
 930 04b4 1A70     	 strb r2,[r3]
 931              	.LBB6:
 196:Energy.c      **** 	for(uint8_t i = 0; i < N_MOTES_COLLAB_MAX; ++i)
 932              	 .loc 1 196 0
 933 04b6 0023     	 movs r3,#0
 934 04b8 FB71     	 strb r3,[r7,#7]
 935 04ba 72E0     	 b .L33
 936              	.L34:
 197:Energy.c      **** 	{
 198:Energy.c      **** 		motes[i].address				= i + 1;	// 0 is coordinator
 937              	 .loc 1 198 0 discriminator 3
 938 04bc FA79     	 ldrb r2,[r7,#7]
 939 04be FB79     	 ldrb r3,[r7,#7]
 940 04c0 0133     	 adds r3,r3,#1
 941 04c2 D8B2     	 uxtb r0,r3
 942 04c4 3F49     	 ldr r1,.L35+8
 943 04c6 1346     	 mov r3,r2
 944 04c8 5B00     	 lsls r3,r3,#1
 945 04ca 1344     	 add r3,r3,r2
 946 04cc DA00     	 lsls r2,r3,#3
 947 04ce D21A     	 subs r2,r2,r3
 948 04d0 8B18     	 adds r3,r1,r2
 949 04d2 0246     	 mov r2,r0
 950 04d4 1A70     	 strb r2,[r3]
 199:Energy.c      **** 		motes[i].rssi					= 0;
 951              	 .loc 1 199 0 discriminator 3
 952 04d6 FA79     	 ldrb r2,[r7,#7]
 953 04d8 3A49     	 ldr r1,.L35+8
 954 04da 1346     	 mov r3,r2
 955 04dc 5B00     	 lsls r3,r3,#1
 956 04de 1344     	 add r3,r3,r2
 957 04e0 DA00     	 lsls r2,r3,#3
 958 04e2 D21A     	 subs r2,r2,r3
 959 04e4 8B18     	 adds r3,r1,r2
 960 04e6 0133     	 adds r3,r3,#1
 961 04e8 0022     	 movs r2,#0
 962 04ea 1A70     	 strb r2,[r3]
 200:Energy.c      **** 		motes[i].n_recv_msg				= 0;
 963              	 .loc 1 200 0 discriminator 3
 964 04ec FA79     	 ldrb r2,[r7,#7]
 965 04ee 3549     	 ldr r1,.L35+8
 966 04f0 1346     	 mov r3,r2
 967 04f2 5B00     	 lsls r3,r3,#1
 968 04f4 1344     	 add r3,r3,r2
 969 04f6 DA00     	 lsls r2,r3,#3
 970 04f8 D21A     	 subs r2,r2,r3
 971 04fa 8B18     	 adds r3,r1,r2
 972 04fc 0233     	 adds r3,r3,#2
 973 04fe 0022     	 movs r2,#0
 974 0500 1A70     	 strb r2,[r3]
 975 0502 0022     	 movs r2,#0
 976 0504 5A70     	 strb r2,[r3,#1]
 977 0506 0022     	 movs r2,#0
 978 0508 9A70     	 strb r2,[r3,#2]
 979 050a 0022     	 movs r2,#0
 980 050c DA70     	 strb r2,[r3,#3]
 981 050e 0022     	 movs r2,#0
 982 0510 1A71     	 strb r2,[r3,#4]
 983 0512 0022     	 movs r2,#0
 984 0514 5A71     	 strb r2,[r3,#5]
 985 0516 0022     	 movs r2,#0
 986 0518 9A71     	 strb r2,[r3,#6]
 987 051a 0022     	 movs r2,#0
 988 051c DA71     	 strb r2,[r3,#7]
 201:Energy.c      **** 		motes[i].n_collab_msg			= 0;
 989              	 .loc 1 201 0 discriminator 3
 990 051e FA79     	 ldrb r2,[r7,#7]
 991 0520 2849     	 ldr r1,.L35+8
 992 0522 1346     	 mov r3,r2
 993 0524 5B00     	 lsls r3,r3,#1
 994 0526 1344     	 add r3,r3,r2
 995 0528 DA00     	 lsls r2,r3,#3
 996 052a D21A     	 subs r2,r2,r3
 997 052c 8B18     	 adds r3,r1,r2
 998 052e 0833     	 adds r3,r3,#8
 999 0530 0333     	 adds r3,r3,#3
 1000 0532 0022     	 movs r2,#0
 1001 0534 1A70     	 strb r2,[r3]
 1002 0536 0022     	 movs r2,#0
 1003 0538 5A70     	 strb r2,[r3,#1]
 1004 053a 0022     	 movs r2,#0
 1005 053c 9A70     	 strb r2,[r3,#2]
 1006 053e 0022     	 movs r2,#0
 1007 0540 DA70     	 strb r2,[r3,#3]
 1008 0542 0022     	 movs r2,#0
 1009 0544 1A71     	 strb r2,[r3,#4]
 1010 0546 0022     	 movs r2,#0
 1011 0548 5A71     	 strb r2,[r3,#5]
 1012 054a 0022     	 movs r2,#0
 1013 054c 9A71     	 strb r2,[r3,#6]
 1014 054e 0022     	 movs r2,#0
 1015 0550 DA71     	 strb r2,[r3,#7]
 202:Energy.c      **** 		motes[i].n_recv_msg_turn		= 0;
 1016              	 .loc 1 202 0 discriminator 3
 1017 0552 FA79     	 ldrb r2,[r7,#7]
 1018 0554 1B49     	 ldr r1,.L35+8
 1019 0556 1346     	 mov r3,r2
 1020 0558 5B00     	 lsls r3,r3,#1
 1021 055a 1344     	 add r3,r3,r2
 1022 055c DA00     	 lsls r2,r3,#3
 1023 055e D21A     	 subs r2,r2,r3
 1024 0560 8B18     	 adds r3,r1,r2
 1025 0562 0A33     	 adds r3,r3,#10
 1026 0564 0022     	 movs r2,#0
 1027 0566 1A70     	 strb r2,[r3]
 203:Energy.c      **** 		motes[i].n_collab_msg_turn		= 0;
 1028              	 .loc 1 203 0 discriminator 3
 1029 0568 FA79     	 ldrb r2,[r7,#7]
 1030 056a 1649     	 ldr r1,.L35+8
 1031 056c 1346     	 mov r3,r2
 1032 056e 5B00     	 lsls r3,r3,#1
 1033 0570 1344     	 add r3,r3,r2
 1034 0572 DA00     	 lsls r2,r3,#3
 1035 0574 D21A     	 subs r2,r2,r3
 1036 0576 8B18     	 adds r3,r1,r2
 1037 0578 1333     	 adds r3,r3,#19
 1038 057a 0022     	 movs r2,#0
 1039 057c 1A70     	 strb r2,[r3]
 204:Energy.c      **** 		motes[i].reach_coord			= 0;
 1040              	 .loc 1 204 0 discriminator 3
 1041 057e FA79     	 ldrb r2,[r7,#7]
 1042 0580 1049     	 ldr r1,.L35+8
 1043 0582 1346     	 mov r3,r2
 1044 0584 5B00     	 lsls r3,r3,#1
 1045 0586 1344     	 add r3,r3,r2
 1046 0588 DA00     	 lsls r2,r3,#3
 1047 058a D21A     	 subs r2,r2,r3
 1048 058c 8B18     	 adds r3,r1,r2
 1049 058e 1433     	 adds r3,r3,#20
 1050 0590 0022     	 movs r2,#0
 1051 0592 1A70     	 strb r2,[r3]
 205:Energy.c      **** 		
 206:Energy.c      **** 		motes_connected_vector[i]		= 0;
 1052              	 .loc 1 206 0 discriminator 3
 1053 0594 FB79     	 ldrb r3,[r7,#7]
 1054 0596 0C4A     	 ldr r2,.L35+12
 1055 0598 0021     	 movs r1,#0
 1056 059a D154     	 strb r1,[r2,r3]
 196:Energy.c      **** 	{
 1057              	 .loc 1 196 0 discriminator 3
 1058 059c FB79     	 ldrb r3,[r7,#7]
 1059 059e 0133     	 adds r3,r3,#1
 1060 05a0 FB71     	 strb r3,[r7,#7]
 1061              	.L33:
 196:Energy.c      **** 	{
 1062              	 .loc 1 196 0 is_stmt 0 discriminator 1
 1063 05a2 FB79     	 ldrb r3,[r7,#7]
 1064 05a4 0D2B     	 cmp r3,#13
 1065 05a6 89D9     	 bls .L34
 1066              	.LBE6:
 207:Energy.c      **** 	}
 208:Energy.c      **** 	memset(collab_vector, 0x00, N_COLLAB_VECTOR);
 1067              	 .loc 1 208 0 is_stmt 1
 1068 05a8 2022     	 movs r2,#32
 1069 05aa 0021     	 movs r1,#0
 1070 05ac 0748     	 ldr r0,.L35+16
 1071 05ae 084B     	 ldr r3,.L35+20
 1072 05b0 9847     	 blx r3
 1073              	.LVL30:
 209:Energy.c      **** }
 1074              	 .loc 1 209 0
 1075 05b2 00BF     	 nop
 1076 05b4 0837     	 adds r7,r7,#8
 1077              	.LCFI22:
 1078              	 .cfi_def_cfa_offset 8
 1079 05b6 BD46     	 mov sp,r7
 1080              	.LCFI23:
 1081              	 .cfi_def_cfa_register 13
 1082              	 
 1083 05b8 80BD     	 pop {r7,pc}
 1084              	.L36:
 1085 05ba 00BF     	 .align 2
 1086              	.L35:
 1087 05bc 00000000 	 .word n_collab
 1088 05c0 00000000 	 .word motes_connected_n
 1089 05c4 00000000 	 .word motes
 1090 05c8 00000000 	 .word motes_connected_vector
 1091 05cc 00000000 	 .word collab_vector
 1092 05d0 00000000 	 .word memset
 1093              	 .cfi_endproc
 1094              	.LFE131:
 1096              	 .align 1
 1097              	 .global energy_receive_statistics
 1098              	 .syntax unified
 1099              	 .thumb
 1100              	 .thumb_func
 1101              	 .fpu softvfp
 1103              	energy_receive_statistics:
 1104              	.LFB132:
 210:Energy.c      **** void energy_receive_statistics(NWK_DataInd_t *ind)
 211:Energy.c      **** {
 1105              	 .loc 1 211 0
 1106              	 .cfi_startproc
 1107              	 
 1108              	 
 1109              	 
 1110 05d4 90B4     	 push {r4,r7}
 1111              	.LCFI24:
 1112              	 .cfi_def_cfa_offset 8
 1113              	 .cfi_offset 4,-8
 1114              	 .cfi_offset 7,-4
 1115 05d6 84B0     	 sub sp,sp,#16
 1116              	.LCFI25:
 1117              	 .cfi_def_cfa_offset 24
 1118 05d8 00AF     	 add r7,sp,#0
 1119              	.LCFI26:
 1120              	 .cfi_def_cfa_register 7
 1121 05da 7860     	 str r0,[r7,#4]
 212:Energy.c      **** 	// Sanity check!
 213:Energy.c      **** 	if(ind->srcAddr == 0 || ind->srcAddr >= N_MOTES_MAX)
 1122              	 .loc 1 213 0
 1123 05dc 7B68     	 ldr r3,[r7,#4]
 1124 05de 1B88     	 ldrh r3,[r3]
 1125 05e0 002B     	 cmp r3,#0
 1126 05e2 00F0A480 	 beq .L43
 1127              	 .loc 1 213 0 is_stmt 0 discriminator 1
 1128 05e6 7B68     	 ldr r3,[r7,#4]
 1129 05e8 1B88     	 ldrh r3,[r3]
 1130 05ea 0E2B     	 cmp r3,#14
 1131 05ec 00F29F80 	 bhi .L43
 214:Energy.c      **** 		return;
 215:Energy.c      **** 
 216:Energy.c      **** 	AppMessageFrame_t*	frame_struct= (AppMessageFrame_t*) ind->data;
 1132              	 .loc 1 216 0 is_stmt 1
 1133 05f0 7B68     	 ldr r3,[r7,#4]
 1134 05f2 9B68     	 ldr r3,[r3,#8]
 1135 05f4 FB60     	 str r3,[r7,#12]
 217:Energy.c      **** 
 218:Energy.c      **** 	motes[ind->srcAddr - 1].rssi	= ind->rssi;
 1136              	 .loc 1 218 0
 1137 05f6 7B68     	 ldr r3,[r7,#4]
 1138 05f8 1B88     	 ldrh r3,[r3]
 1139 05fa 5A1E     	 subs r2,r3,#1
 1140 05fc 7B68     	 ldr r3,[r7,#4]
 1141 05fe 93F90E30 	 ldrsb r3,[r3,#14]
 1142 0602 D8B2     	 uxtb r0,r3
 1143 0604 4C49     	 ldr r1,.L44
 1144 0606 1346     	 mov r3,r2
 1145 0608 5B00     	 lsls r3,r3,#1
 1146 060a 1344     	 add r3,r3,r2
 1147 060c DA00     	 lsls r2,r3,#3
 1148 060e D21A     	 subs r2,r2,r3
 1149 0610 8B18     	 adds r3,r1,r2
 1150 0612 0133     	 adds r3,r3,#1
 1151 0614 0246     	 mov r2,r0
 1152 0616 1A70     	 strb r2,[r3]
 219:Energy.c      **** 
 220:Energy.c      **** 	if(frame_struct->frameType == MSG_STATE_DATA)
 1153              	 .loc 1 220 0
 1154 0618 FB68     	 ldr r3,[r7,#12]
 1155 061a 1B78     	 ldrb r3,[r3]
 1156 061c 012B     	 cmp r3,#1
 1157 061e 33D1     	 bne .L41
 221:Energy.c      **** 	{
 222:Energy.c      **** 		motes[ind->srcAddr - 1].n_recv_msg++;
 1158              	 .loc 1 222 0
 1159 0620 7B68     	 ldr r3,[r7,#4]
 1160 0622 1B88     	 ldrh r3,[r3]
 1161 0624 581E     	 subs r0,r3,#1
 1162 0626 4449     	 ldr r1,.L44
 1163 0628 0346     	 mov r3,r0
 1164 062a 5B00     	 lsls r3,r3,#1
 1165 062c 0344     	 add r3,r3,r0
 1166 062e DA00     	 lsls r2,r3,#3
 1167 0630 D21A     	 subs r2,r2,r3
 1168 0632 0A44     	 add r2,r2,r1
 1169 0634 D2F80230 	 ldr r3,[r2,#2]
 1170 0638 D2F80640 	 ldr r4,[r2,#6]
 1171 063c 591C     	 adds r1,r3,#1
 1172 063e 44F10002 	 adc r2,r4,#0
 1173 0642 3D4C     	 ldr r4,.L44
 1174 0644 0346     	 mov r3,r0
 1175 0646 5B00     	 lsls r3,r3,#1
 1176 0648 0344     	 add r3,r3,r0
 1177 064a D800     	 lsls r0,r3,#3
 1178 064c C01A     	 subs r0,r0,r3
 1179 064e 2318     	 adds r3,r4,r0
 1180 0650 0233     	 adds r3,r3,#2
 1181 0652 1960     	 str r1,[r3]
 1182 0654 5A60     	 str r2,[r3,#4]
 223:Energy.c      **** 		motes[ind->srcAddr - 1].n_recv_msg_turn++;
 1183              	 .loc 1 223 0
 1184 0656 7B68     	 ldr r3,[r7,#4]
 1185 0658 1B88     	 ldrh r3,[r3]
 1186 065a 591E     	 subs r1,r3,#1
 1187 065c 3648     	 ldr r0,.L44
 1188 065e 0B46     	 mov r3,r1
 1189 0660 5B00     	 lsls r3,r3,#1
 1190 0662 0B44     	 add r3,r3,r1
 1191 0664 DA00     	 lsls r2,r3,#3
 1192 0666 D21A     	 subs r2,r2,r3
 1193 0668 8318     	 adds r3,r0,r2
 1194 066a 0A33     	 adds r3,r3,#10
 1195 066c 1B78     	 ldrb r3,[r3]
 1196 066e 0133     	 adds r3,r3,#1
 1197 0670 DCB2     	 uxtb r4,r3
 1198 0672 3148     	 ldr r0,.L44
 1199 0674 0B46     	 mov r3,r1
 1200 0676 5B00     	 lsls r3,r3,#1
 1201 0678 0B44     	 add r3,r3,r1
 1202 067a DA00     	 lsls r2,r3,#3
 1203 067c D21A     	 subs r2,r2,r3
 1204 067e 8318     	 adds r3,r0,r2
 1205 0680 0A33     	 adds r3,r3,#10
 1206 0682 2246     	 mov r2,r4
 1207 0684 1A70     	 strb r2,[r3]
 1208 0686 53E0     	 b .L37
 1209              	.L41:
 224:Energy.c      **** 	}
 225:Energy.c      **** #if APP_COORDINATOR
 226:Energy.c      **** 	else if(frame_struct->frameType == MSG_STATE_ENCODED_DATA)
 1210              	 .loc 1 226 0
 1211 0688 FB68     	 ldr r3,[r7,#12]
 1212 068a 1B78     	 ldrb r3,[r3]
 1213 068c 022B     	 cmp r3,#2
 1214 068e 36D1     	 bne .L42
 227:Energy.c      **** 	{
 228:Energy.c      **** 		motes[ind->srcAddr - 1].n_collab_msg++;
 1215              	 .loc 1 228 0
 1216 0690 7B68     	 ldr r3,[r7,#4]
 1217 0692 1B88     	 ldrh r3,[r3]
 1218 0694 581E     	 subs r0,r3,#1
 1219 0696 2849     	 ldr r1,.L44
 1220 0698 0346     	 mov r3,r0
 1221 069a 5B00     	 lsls r3,r3,#1
 1222 069c 0344     	 add r3,r3,r0
 1223 069e DA00     	 lsls r2,r3,#3
 1224 06a0 D21A     	 subs r2,r2,r3
 1225 06a2 8B18     	 adds r3,r1,r2
 1226 06a4 03F10802 	 add r2,r3,#8
 1227 06a8 D2F80330 	 ldr r3,[r2,#3]
 1228 06ac D2F80740 	 ldr r4,[r2,#7]
 1229 06b0 591C     	 adds r1,r3,#1
 1230 06b2 44F10002 	 adc r2,r4,#0
 1231 06b6 204C     	 ldr r4,.L44
 1232 06b8 0346     	 mov r3,r0
 1233 06ba 5B00     	 lsls r3,r3,#1
 1234 06bc 0344     	 add r3,r3,r0
 1235 06be D800     	 lsls r0,r3,#3
 1236 06c0 C01A     	 subs r0,r0,r3
 1237 06c2 2318     	 adds r3,r4,r0
 1238 06c4 0833     	 adds r3,r3,#8
 1239 06c6 0333     	 adds r3,r3,#3
 1240 06c8 1960     	 str r1,[r3]
 1241 06ca 5A60     	 str r2,[r3,#4]
 229:Energy.c      **** 		motes[ind->srcAddr - 1].n_collab_msg_turn++;
 1242              	 .loc 1 229 0
 1243 06cc 7B68     	 ldr r3,[r7,#4]
 1244 06ce 1B88     	 ldrh r3,[r3]
 1245 06d0 591E     	 subs r1,r3,#1
 1246 06d2 1948     	 ldr r0,.L44
 1247 06d4 0B46     	 mov r3,r1
 1248 06d6 5B00     	 lsls r3,r3,#1
 1249 06d8 0B44     	 add r3,r3,r1
 1250 06da DA00     	 lsls r2,r3,#3
 1251 06dc D21A     	 subs r2,r2,r3
 1252 06de 8318     	 adds r3,r0,r2
 1253 06e0 1333     	 adds r3,r3,#19
 1254 06e2 1B78     	 ldrb r3,[r3]
 1255 06e4 0133     	 adds r3,r3,#1
 1256 06e6 DCB2     	 uxtb r4,r3
 1257 06e8 1348     	 ldr r0,.L44
 1258 06ea 0B46     	 mov r3,r1
 1259 06ec 5B00     	 lsls r3,r3,#1
 1260 06ee 0B44     	 add r3,r3,r1
 1261 06f0 DA00     	 lsls r2,r3,#3
 1262 06f2 D21A     	 subs r2,r2,r3
 1263 06f4 8318     	 adds r3,r0,r2
 1264 06f6 1333     	 adds r3,r3,#19
 1265 06f8 2246     	 mov r2,r4
 1266 06fa 1A70     	 strb r2,[r3]
 1267 06fc 18E0     	 b .L37
 1268              	.L42:
 230:Energy.c      **** 	}
 231:Energy.c      **** 	else if(frame_struct->frameType == MSG_STATE_CONNECTION)
 1269              	 .loc 1 231 0
 1270 06fe FB68     	 ldr r3,[r7,#12]
 1271 0700 1B78     	 ldrb r3,[r3]
 1272 0702 032B     	 cmp r3,#3
 1273 0704 14D1     	 bne .L37
 232:Energy.c      **** 	{
 233:Energy.c      **** 		if(motes_connected_vector[ind->srcAddr - 1] == 0)
 1274              	 .loc 1 233 0
 1275 0706 7B68     	 ldr r3,[r7,#4]
 1276 0708 1B88     	 ldrh r3,[r3]
 1277 070a 013B     	 subs r3,r3,#1
 1278 070c 0B4A     	 ldr r2,.L44+4
 1279 070e D35C     	 ldrb r3,[r2,r3]
 1280 0710 002B     	 cmp r3,#0
 1281 0712 0DD1     	 bne .L37
 234:Energy.c      **** 		{
 235:Energy.c      **** 			motes_connected_vector[ind->srcAddr - 1]	= 1;
 1282              	 .loc 1 235 0
 1283 0714 7B68     	 ldr r3,[r7,#4]
 1284 0716 1B88     	 ldrh r3,[r3]
 1285 0718 013B     	 subs r3,r3,#1
 1286 071a 084A     	 ldr r2,.L44+4
 1287 071c 0121     	 movs r1,#1
 1288 071e D154     	 strb r1,[r2,r3]
 236:Energy.c      **** 			motes_connected_n++;
 1289              	 .loc 1 236 0
 1290 0720 074B     	 ldr r3,.L44+8
 1291 0722 1B78     	 ldrb r3,[r3]
 1292 0724 0133     	 adds r3,r3,#1
 1293 0726 DAB2     	 uxtb r2,r3
 1294 0728 054B     	 ldr r3,.L44+8
 1295 072a 1A70     	 strb r2,[r3]
 1296 072c 00E0     	 b .L37
 1297              	.L43:
 214:Energy.c      **** 
 1298              	 .loc 1 214 0
 1299 072e 00BF     	 nop
 1300              	.L37:
 237:Energy.c      **** 		}
 238:Energy.c      **** 	}
 239:Energy.c      **** #endif
 240:Energy.c      **** }
 1301              	 .loc 1 240 0
 1302 0730 1037     	 adds r7,r7,#16
 1303              	.LCFI27:
 1304              	 .cfi_def_cfa_offset 8
 1305 0732 BD46     	 mov sp,r7
 1306              	.LCFI28:
 1307              	 .cfi_def_cfa_register 13
 1308              	 
 1309 0734 90BC     	 pop {r4,r7}
 1310              	.LCFI29:
 1311              	 .cfi_restore 7
 1312              	 .cfi_restore 4
 1313              	 .cfi_def_cfa_offset 0
 1314 0736 7047     	 bx lr
 1315              	.L45:
 1316              	 .align 2
 1317              	.L44:
 1318 0738 00000000 	 .word motes
 1319 073c 00000000 	 .word motes_connected_vector
 1320 0740 00000000 	 .word motes_connected_n
 1321              	 .cfi_endproc
 1322              	.LFE132:
 1324              	 .align 1
 1325              	 .global energy_prepare_next_turn
 1326              	 .syntax unified
 1327              	 .thumb
 1328              	 .thumb_func
 1329              	 .fpu softvfp
 1331              	energy_prepare_next_turn:
 1332              	.LFB133:
 241:Energy.c      **** void energy_prepare_next_turn(void)
 242:Energy.c      **** {
 1333              	 .loc 1 242 0
 1334              	 .cfi_startproc
 1335              	 
 1336              	 
 1337 0744 80B5     	 push {r7,lr}
 1338              	.LCFI30:
 1339              	 .cfi_def_cfa_offset 8
 1340              	 .cfi_offset 7,-8
 1341              	 .cfi_offset 14,-4
 1342 0746 82B0     	 sub sp,sp,#8
 1343              	.LCFI31:
 1344              	 .cfi_def_cfa_offset 16
 1345 0748 00AF     	 add r7,sp,#0
 1346              	.LCFI32:
 1347              	 .cfi_def_cfa_register 7
 243:Energy.c      **** #if APP_ENDDEVICE
 244:Energy.c      **** 	return;
 245:Energy.c      **** #endif
 246:Energy.c      **** 	
 247:Energy.c      **** 	energy_Calc_NumMotes();
 1348              	 .loc 1 247 0
 1349 074a FFF7AEFC 	 bl energy_Calc_NumMotes
 248:Energy.c      **** 	if(collab_vector[1] > 0)
 1350              	 .loc 1 248 0
 1351 074e 154B     	 ldr r3,.L51
 1352 0750 5B78     	 ldrb r3,[r3,#1]
 1353 0752 002B     	 cmp r3,#0
 1354 0754 05D0     	 beq .L47
 249:Energy.c      **** 	{
 250:Energy.c      **** 		collab_vector[1]--;
 1355              	 .loc 1 250 0
 1356 0756 134B     	 ldr r3,.L51
 1357 0758 5B78     	 ldrb r3,[r3,#1]
 1358 075a 013B     	 subs r3,r3,#1
 1359 075c DAB2     	 uxtb r2,r3
 1360 075e 114B     	 ldr r3,.L51
 1361 0760 5A70     	 strb r2,[r3,#1]
 1362              	.L47:
 251:Energy.c      **** 	}
 252:Energy.c      **** 
 253:Energy.c      **** 	if(collab_vector[1] == 0)
 1363              	 .loc 1 253 0
 1364 0762 104B     	 ldr r3,.L51
 1365 0764 5B78     	 ldrb r3,[r3,#1]
 1366 0766 002B     	 cmp r3,#0
 1367 0768 03D1     	 bne .L48
 254:Energy.c      **** 	{
 255:Energy.c      **** 		energy_check_each_coordinator();
 1368              	 .loc 1 255 0
 1369 076a FFF79DFD 	 bl energy_check_each_coordinator
 256:Energy.c      **** 		energy_generate_collab_vector();
 1370              	 .loc 1 256 0
 1371 076e FFF7EBFD 	 bl energy_generate_collab_vector
 1372              	.L48:
 1373              	.LBB7:
 257:Energy.c      **** 	}
 258:Energy.c      **** 
 259:Energy.c      **** 	for(uint8_t i = 0; i < N_MOTES_COLLAB_MAX; ++i)
 1374              	 .loc 1 259 0
 1375 0772 0023     	 movs r3,#0
 1376 0774 FB71     	 strb r3,[r7,#7]
 1377 0776 0DE0     	 b .L49
 1378              	.L50:
 260:Energy.c      **** 	{
 261:Energy.c      **** 		motes[i].rssi			= 0;
 1379              	 .loc 1 261 0 discriminator 3
 1380 0778 FA79     	 ldrb r2,[r7,#7]
 1381 077a 0B49     	 ldr r1,.L51+4
 1382 077c 1346     	 mov r3,r2
 1383 077e 5B00     	 lsls r3,r3,#1
 1384 0780 1344     	 add r3,r3,r2
 1385 0782 DA00     	 lsls r2,r3,#3
 1386 0784 D21A     	 subs r2,r2,r3
 1387 0786 8B18     	 adds r3,r1,r2
 1388 0788 0133     	 adds r3,r3,#1
 1389 078a 0022     	 movs r2,#0
 1390 078c 1A70     	 strb r2,[r3]
 259:Energy.c      **** 	{
 1391              	 .loc 1 259 0 discriminator 3
 1392 078e FB79     	 ldrb r3,[r7,#7]
 1393 0790 0133     	 adds r3,r3,#1
 1394 0792 FB71     	 strb r3,[r7,#7]
 1395              	.L49:
 259:Energy.c      **** 	{
 1396              	 .loc 1 259 0 is_stmt 0 discriminator 1
 1397 0794 FB79     	 ldrb r3,[r7,#7]
 1398 0796 0D2B     	 cmp r3,#13
 1399 0798 EED9     	 bls .L50
 1400              	.LBE7:
 262:Energy.c      **** 	}
 263:Energy.c      **** }
 1401              	 .loc 1 263 0 is_stmt 1
 1402 079a 00BF     	 nop
 1403 079c 0837     	 adds r7,r7,#8
 1404              	.LCFI33:
 1405              	 .cfi_def_cfa_offset 8
 1406 079e BD46     	 mov sp,r7
 1407              	.LCFI34:
 1408              	 .cfi_def_cfa_register 13
 1409              	 
 1410 07a0 80BD     	 pop {r7,pc}
 1411              	.L52:
 1412 07a2 00BF     	 .align 2
 1413              	.L51:
 1414 07a4 00000000 	 .word collab_vector
 1415 07a8 00000000 	 .word motes
 1416              	 .cfi_endproc
 1417              	.LFE133:
 1419              	 .align 1
 1420              	 .global energy_get_collab_vector
 1421              	 .syntax unified
 1422              	 .thumb
 1423              	 .thumb_func
 1424              	 .fpu softvfp
 1426              	energy_get_collab_vector:
 1427              	.LFB134:
 264:Energy.c      **** void energy_get_collab_vector(uint8_t* vector)
 265:Energy.c      **** {
 1428              	 .loc 1 265 0
 1429              	 .cfi_startproc
 1430              	 
 1431              	 
 1432              	 
 1433 07ac B0B4     	 push {r4,r5,r7}
 1434              	.LCFI35:
 1435              	 .cfi_def_cfa_offset 12
 1436              	 .cfi_offset 4,-12
 1437              	 .cfi_offset 5,-8
 1438              	 .cfi_offset 7,-4
 1439 07ae 83B0     	 sub sp,sp,#12
 1440              	.LCFI36:
 1441              	 .cfi_def_cfa_offset 24
 1442 07b0 00AF     	 add r7,sp,#0
 1443              	.LCFI37:
 1444              	 .cfi_def_cfa_register 7
 1445 07b2 7860     	 str r0,[r7,#4]
 266:Energy.c      **** 	memcpy(vector, collab_vector, N_COLLAB_VECTOR);
 1446              	 .loc 1 266 0
 1447 07b4 7B68     	 ldr r3,[r7,#4]
 1448 07b6 094A     	 ldr r2,.L54
 1449 07b8 1C46     	 mov r4,r3
 1450 07ba 1546     	 mov r5,r2
 1451 07bc 0FCD     	 ldmia r5!,{r0,r1,r2,r3}
 1452 07be 2060     	 str r0,[r4]
 1453 07c0 6160     	 str r1,[r4,#4]
 1454 07c2 A260     	 str r2,[r4,#8]
 1455 07c4 E360     	 str r3,[r4,#12]
 1456 07c6 0FCD     	 ldmia r5!,{r0,r1,r2,r3}
 1457 07c8 2061     	 str r0,[r4,#16]
 1458 07ca 6161     	 str r1,[r4,#20]
 1459 07cc A261     	 str r2,[r4,#24]
 1460 07ce E361     	 str r3,[r4,#28]
 267:Energy.c      **** }
 1461              	 .loc 1 267 0
 1462 07d0 00BF     	 nop
 1463 07d2 0C37     	 adds r7,r7,#12
 1464              	.LCFI38:
 1465              	 .cfi_def_cfa_offset 12
 1466 07d4 BD46     	 mov sp,r7
 1467              	.LCFI39:
 1468              	 .cfi_def_cfa_register 13
 1469              	 
 1470 07d6 B0BC     	 pop {r4,r5,r7}
 1471              	.LCFI40:
 1472              	 .cfi_restore 7
 1473              	 .cfi_restore 5
 1474              	 .cfi_restore 4
 1475              	 .cfi_def_cfa_offset 0
 1476 07d8 7047     	 bx lr
 1477              	.L55:
 1478 07da 00BF     	 .align 2
 1479              	.L54:
 1480 07dc 00000000 	 .word collab_vector
 1481              	 .cfi_endproc
 1482              	.LFE134:
 1484              	 .align 1
 1485              	 .global energy_get_connected_vector
 1486              	 .syntax unified
 1487              	 .thumb
 1488              	 .thumb_func
 1489              	 .fpu softvfp
 1491              	energy_get_connected_vector:
 1492              	.LFB135:
 268:Energy.c      **** uint8_t energy_get_connected_vector(uint8_t* vector)
 269:Energy.c      **** {
 1493              	 .loc 1 269 0
 1494              	 .cfi_startproc
 1495              	 
 1496              	 
 1497              	 
 1498 07e0 90B4     	 push {r4,r7}
 1499              	.LCFI41:
 1500              	 .cfi_def_cfa_offset 8
 1501              	 .cfi_offset 4,-8
 1502              	 .cfi_offset 7,-4
 1503 07e2 82B0     	 sub sp,sp,#8
 1504              	.LCFI42:
 1505              	 .cfi_def_cfa_offset 16
 1506 07e4 00AF     	 add r7,sp,#0
 1507              	.LCFI43:
 1508              	 .cfi_def_cfa_register 7
 1509 07e6 7860     	 str r0,[r7,#4]
 270:Energy.c      **** 	memcpy(vector, motes_connected_vector, N_MOTES_COLLAB_MAX);
 1510              	 .loc 1 270 0
 1511 07e8 7B68     	 ldr r3,[r7,#4]
 1512 07ea 084A     	 ldr r2,.L58
 1513 07ec 1C46     	 mov r4,r3
 1514 07ee 1346     	 mov r3,r2
 1515 07f0 07CB     	 ldmia r3!,{r0,r1,r2}
 1516 07f2 2060     	 str r0,[r4]
 1517 07f4 6160     	 str r1,[r4,#4]
 1518 07f6 A260     	 str r2,[r4,#8]
 1519 07f8 1B88     	 ldrh r3,[r3]
 1520 07fa A381     	 strh r3,[r4,#12]
 271:Energy.c      **** 
 272:Energy.c      **** 	return(motes_connected_n);
 1521              	 .loc 1 272 0
 1522 07fc 044B     	 ldr r3,.L58+4
 1523 07fe 1B78     	 ldrb r3,[r3]
 273:Energy.c      **** }
 1524              	 .loc 1 273 0
 1525 0800 1846     	 mov r0,r3
 1526 0802 0837     	 adds r7,r7,#8
 1527              	.LCFI44:
 1528              	 .cfi_def_cfa_offset 8
 1529 0804 BD46     	 mov sp,r7
 1530              	.LCFI45:
 1531              	 .cfi_def_cfa_register 13
 1532              	 
 1533 0806 90BC     	 pop {r4,r7}
 1534              	.LCFI46:
 1535              	 .cfi_restore 7
 1536              	 .cfi_restore 4
 1537              	 .cfi_def_cfa_offset 0
 1538 0808 7047     	 bx lr
 1539              	.L59:
 1540 080a 00BF     	 .align 2
 1541              	.L58:
 1542 080c 00000000 	 .word motes_connected_vector
 1543 0810 00000000 	 .word motes_connected_n
 1544              	 .cfi_endproc
 1545              	.LFE135:
 1547              	 .align 1
 1548              	 .global energy_get_statistics
 1549              	 .syntax unified
 1550              	 .thumb
 1551              	 .thumb_func
 1552              	 .fpu softvfp
 1554              	energy_get_statistics:
 1555              	.LFB136:
 274:Energy.c      **** EnergyStatistics_t* energy_get_statistics(uint8_t index)
 275:Energy.c      **** {
 1556              	 .loc 1 275 0
 1557              	 .cfi_startproc
 1558              	 
 1559              	 
 1560              	 
 1561 0814 80B4     	 push {r7}
 1562              	.LCFI47:
 1563              	 .cfi_def_cfa_offset 4
 1564              	 .cfi_offset 7,-4
 1565 0816 83B0     	 sub sp,sp,#12
 1566              	.LCFI48:
 1567              	 .cfi_def_cfa_offset 16
 1568 0818 00AF     	 add r7,sp,#0
 1569              	.LCFI49:
 1570              	 .cfi_def_cfa_register 7
 1571 081a 0346     	 mov r3,r0
 1572 081c FB71     	 strb r3,[r7,#7]
 276:Energy.c      **** 	return(&motes[index]);
 1573              	 .loc 1 276 0
 1574 081e FA79     	 ldrb r2,[r7,#7]
 1575 0820 1346     	 mov r3,r2
 1576 0822 5B00     	 lsls r3,r3,#1
 1577 0824 1344     	 add r3,r3,r2
 1578 0826 DA00     	 lsls r2,r3,#3
 1579 0828 D21A     	 subs r2,r2,r3
 1580 082a 034B     	 ldr r3,.L62
 1581 082c 1344     	 add r3,r3,r2
 277:Energy.c      **** }...
 1582              	 .loc 1 277 0
 1583 082e 1846     	 mov r0,r3
 1584 0830 0C37     	 adds r7,r7,#12
 1585              	.LCFI50:
 1586              	 .cfi_def_cfa_offset 4
 1587 0832 BD46     	 mov sp,r7
 1588              	.LCFI51:
 1589              	 .cfi_def_cfa_register 13
 1590              	 
 1591 0834 80BC     	 pop {r7}
 1592              	.LCFI52:
 1593              	 .cfi_restore 7
 1594              	 .cfi_def_cfa_offset 0
 1595 0836 7047     	 bx lr
 1596              	.L63:
 1597              	 .align 2
 1598              	.L62:
 1599 0838 00000000 	 .word motes
 1600              	 .cfi_endproc
 1601              	.LFE136:
 1603              	.Letext0:
 1604              	 .file 2 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\arm\\arm-gnu-toolchain\\arm-none-eabi\\include\\machine\\_default_types.h"
 1605              	 .file 3 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\arm\\arm-gnu-toolchain\\arm-none-eabi\\include\\sys\\lock.h"
 1606              	 .file 4 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\arm\\arm-gnu-toolchain\\arm-none-eabi\\include\\sys\\_types.h"
 1607              	 .file 5 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\arm\\arm-gnu-toolchain\\lib\\gcc\\arm-none-eabi\\6.3.1\\include\\stddef.h"
 1608              	 .file 6 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\arm\\arm-gnu-toolchain\\arm-none-eabi\\include\\sys\\reent.h"
 1609              	 .file 7 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\arm\\arm-gnu-toolchain\\arm-none-eabi\\include\\math.h"
 1610              	 .file 8 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\arm\\arm-gnu-toolchain\\arm-none-eabi\\include\\sys\\_stdint.h"
 1611              	 .file 9 "../../../platform/thirdparty/CMSIS/include/core_cm4.h"
 1612              	 .file 10 "../../../platform/sam/utils/cmsis/sam4l/source/templates/system_sam4l.h"
 1613              	 .file 11 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\arm\\arm-gnu-toolchain\\arm-none-eabi\\include\\stdlib.h"
 1614              	 .file 12 "../../../platform/common/utils/interrupt/interrupt_sam_nvic.h"
 1615              	 .file 13 "../../../platform/sam/utils/compiler.h"
 1616              	 .file 14 "../../../platform/common/services/usb/usb_protocol.h"
 1617              	 .file 15 "../../../platform/common/services/usb/udc/udi.h"
 1618              	 .file 16 "../../../platform/common/services/usb/udc/udc_desc.h"
 1619              	 .file 17 "../../../platform/common/services/usb/udc/udd.h"
 1620              	 .file 18 "../../../platform/common/services/usb/class/cdc/device/udi_cdc.h"
 1621              	 .file 19 "../../../platform/common/utils/stdio/stdio_usb/stdio_usb.h"
 1622              	 .file 20 "../../../stack/LwMesh/TDMA/nwk/inc/nwkRx.h"
 1623              	 .file 21 "../../../stack/LwMesh/TDMA/nwk/inc/nwk.h"
 1624              	 .file 22 "Solver.h"
 1625              	 .file 23 "Energy.h"
 1626              	 .file 24 "config/config.h"
 1627              	 .file 25 "<built-in>"
DEFINED SYMBOLS
                            *ABS*:00000000 Energy.c
    {standard input}:16     .bss.cpu_irq_critical_section_counter:00000000 $d
    {standard input}:19     .bss.cpu_irq_critical_section_counter:00000000 cpu_irq_critical_section_counter
    {standard input}:24     .bss.cpu_irq_prev_interrupt_state:00000000 cpu_irq_prev_interrupt_state
    {standard input}:25     .bss.cpu_irq_prev_interrupt_state:00000000 $d
                            *COM*:00000001 n
    {standard input}:28     .bss.tTS:00000000 $d
    {standard input}:31     .bss.tTS:00000000 tTS
    {standard input}:36     .bss.n_collab:00000000 n_collab
    {standard input}:37     .bss.n_collab:00000000 $d
    {standard input}:41     .bss.SamLoss:00000000 SamLoss
    {standard input}:42     .bss.SamLoss:00000000 $d
    {standard input}:44     .data.alpha:00000000 $d
    {standard input}:47     .data.alpha:00000000 alpha
    {standard input}:50     .data.betha:00000000 $d
    {standard input}:53     .data.betha:00000000 betha
    {standard input}:56     .data.ganho:00000000 $d
    {standard input}:59     .data.ganho:00000000 ganho
    {standard input}:62     .bss.EstLoss:00000000 $d
    {standard input}:65     .bss.EstLoss:00000000 EstLoss
    {standard input}:68     .bss.DevLoss:00000000 $d
    {standard input}:71     .bss.DevLoss:00000000 DevLoss
    {standard input}:74     .bss.motes:00000000 $d
    {standard input}:77     .bss.motes:00000000 motes
    {standard input}:80     .bss.motes_aux:00000000 $d
    {standard input}:83     .bss.motes_aux:00000000 motes_aux
    {standard input}:88     .bss.motes_connected_n:00000000 motes_connected_n
    {standard input}:89     .bss.motes_connected_n:00000000 $d
    {standard input}:91     .bss.motes_connected_vector:00000000 $d
    {standard input}:94     .bss.motes_connected_vector:00000000 motes_connected_vector
    {standard input}:97     .bss.collab_vector:00000000 $d
    {standard input}:100    .bss.collab_vector:00000000 collab_vector
    {standard input}:103    .text:00000000 $t
    {standard input}:109    .text:00000000 cmp_EnergyStatistics_t_func
    {standard input}:255    .text:000000aa energy_Calc_NumMotes
    {standard input}:515    .text:00000250 $d
    {standard input}:540    .text:000002a8 $t
    {standard input}:546    .text:000002a8 energy_check_each_coordinator
    {standard input}:659    .text:00000344 $d
    {standard input}:663    .text:00000348 $t
    {standard input}:669    .text:00000348 energy_generate_collab_vector
    {standard input}:888    .text:00000484 $d
    {standard input}:899    .text:000004a4 $t
    {standard input}:906    .text:000004a4 energy_init
    {standard input}:1087   .text:000005bc $d
    {standard input}:1096   .text:000005d4 $t
    {standard input}:1103   .text:000005d4 energy_receive_statistics
    {standard input}:1318   .text:00000738 $d
    {standard input}:1324   .text:00000744 $t
    {standard input}:1331   .text:00000744 energy_prepare_next_turn
    {standard input}:1414   .text:000007a4 $d
    {standard input}:1419   .text:000007ac $t
    {standard input}:1426   .text:000007ac energy_get_collab_vector
    {standard input}:1480   .text:000007dc $d
    {standard input}:1484   .text:000007e0 $t
    {standard input}:1491   .text:000007e0 energy_get_connected_vector
    {standard input}:1542   .text:0000080c $d
    {standard input}:1547   .text:00000814 $t
    {standard input}:1554   .text:00000814 energy_get_statistics
    {standard input}:1599   .text:00000838 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
__aeabi_f2d
__aeabi_dsub
__aeabi_dmul
__aeabi_i2f
__aeabi_fmul
__aeabi_dadd
__aeabi_d2f
__aeabi_fsub
__aeabi_f2iz
__aeabi_fadd
__aeabi_d2uiz
solver_get_n_received
ceil
memcpy
qsort
memset
