   1               		.file	"test_sync_timers.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__RAMPZ__ = 0x3b
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
   8               		.text
   9               	.Ltext0:
  10               		.cfi_sections	.debug_frame
  11               		.comm	n,1,1
  12               		.comm	tTS,4,1
  13               		.comm	macLLDNnumTimeSlots,2,1
  14               		.comm	macLLDNnumUplinkTS,2,1
  15               		.comm	macLLDNRetransmitTS,2,1
  17               	sysclk_get_main_hz:
  18               	.LFB67:
  19               		.file 1 "../../../platform/common/services/clock/mega/sysclk.h"
   1:../../../platform/common/services/clock/mega/sysclk.h **** /**
   2:../../../platform/common/services/clock/mega/sysclk.h ****  * \file
   3:../../../platform/common/services/clock/mega/sysclk.h ****  *
   4:../../../platform/common/services/clock/mega/sysclk.h ****  * \brief Chip-specific system clock management functions
   5:../../../platform/common/services/clock/mega/sysclk.h ****  *
   6:../../../platform/common/services/clock/mega/sysclk.h ****  * Copyright (c) 2012 Atmel Corporation. All rights reserved.
   7:../../../platform/common/services/clock/mega/sysclk.h ****  *
   8:../../../platform/common/services/clock/mega/sysclk.h ****  * \asf_license_start
   9:../../../platform/common/services/clock/mega/sysclk.h ****  *
  10:../../../platform/common/services/clock/mega/sysclk.h ****  * \page License
  11:../../../platform/common/services/clock/mega/sysclk.h ****  *
  12:../../../platform/common/services/clock/mega/sysclk.h ****  * Redistribution and use in source and binary forms, with or without
  13:../../../platform/common/services/clock/mega/sysclk.h ****  * modification, are permitted provided that the following conditions are met:
  14:../../../platform/common/services/clock/mega/sysclk.h ****  *
  15:../../../platform/common/services/clock/mega/sysclk.h ****  * 1. Redistributions of source code must retain the above copyright notice,
  16:../../../platform/common/services/clock/mega/sysclk.h ****  *    this list of conditions and the following disclaimer.
  17:../../../platform/common/services/clock/mega/sysclk.h ****  *
  18:../../../platform/common/services/clock/mega/sysclk.h ****  * 2. Redistributions in binary form must reproduce the above copyright notice,
  19:../../../platform/common/services/clock/mega/sysclk.h ****  *    this list of conditions and the following disclaimer in the documentation
  20:../../../platform/common/services/clock/mega/sysclk.h ****  *    and/or other materials provided with the distribution.
  21:../../../platform/common/services/clock/mega/sysclk.h ****  *
  22:../../../platform/common/services/clock/mega/sysclk.h ****  * 3. The name of Atmel may not be used to endorse or promote products derived
  23:../../../platform/common/services/clock/mega/sysclk.h ****  *    from this software without specific prior written permission.
  24:../../../platform/common/services/clock/mega/sysclk.h ****  *
  25:../../../platform/common/services/clock/mega/sysclk.h ****  * 4. This software may only be redistributed and used in connection with an
  26:../../../platform/common/services/clock/mega/sysclk.h ****  *    Atmel microcontroller product.
  27:../../../platform/common/services/clock/mega/sysclk.h ****  *
  28:../../../platform/common/services/clock/mega/sysclk.h ****  * THIS SOFTWARE IS PROVIDED BY ATMEL "AS IS" AND ANY EXPRESS OR IMPLIED
  29:../../../platform/common/services/clock/mega/sysclk.h ****  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
  30:../../../platform/common/services/clock/mega/sysclk.h ****  * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE
  31:../../../platform/common/services/clock/mega/sysclk.h ****  * EXPRESSLY AND SPECIFICALLY DISCLAIMED. IN NO EVENT SHALL ATMEL BE LIABLE FOR
  32:../../../platform/common/services/clock/mega/sysclk.h ****  * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  33:../../../platform/common/services/clock/mega/sysclk.h ****  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
  34:../../../platform/common/services/clock/mega/sysclk.h ****  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
  35:../../../platform/common/services/clock/mega/sysclk.h ****  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
  36:../../../platform/common/services/clock/mega/sysclk.h ****  * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
  37:../../../platform/common/services/clock/mega/sysclk.h ****  * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  38:../../../platform/common/services/clock/mega/sysclk.h ****  * POSSIBILITY OF SUCH DAMAGE.
  39:../../../platform/common/services/clock/mega/sysclk.h ****  *
  40:../../../platform/common/services/clock/mega/sysclk.h ****  * \asf_license_stop
  41:../../../platform/common/services/clock/mega/sysclk.h ****  *
  42:../../../platform/common/services/clock/mega/sysclk.h ****  */
  43:../../../platform/common/services/clock/mega/sysclk.h **** #ifndef MEGA_SYSCLK_H_INCLUDED
  44:../../../platform/common/services/clock/mega/sysclk.h **** #define MEGA_SYSCLK_H_INCLUDED
  45:../../../platform/common/services/clock/mega/sysclk.h **** 
  46:../../../platform/common/services/clock/mega/sysclk.h **** #include <board.h>
  47:../../../platform/common/services/clock/mega/sysclk.h **** #include <compiler.h>
  48:../../../platform/common/services/clock/mega/sysclk.h **** #include <parts.h>
  49:../../../platform/common/services/clock/mega/sysclk.h **** 
  50:../../../platform/common/services/clock/mega/sysclk.h **** /* Include clock configuration for the project. */
  51:../../../platform/common/services/clock/mega/sysclk.h **** #include <conf_clock.h>
  52:../../../platform/common/services/clock/mega/sysclk.h **** 
  53:../../../platform/common/services/clock/mega/sysclk.h **** #ifdef __cplusplus
  54:../../../platform/common/services/clock/mega/sysclk.h **** extern "C" {
  55:../../../platform/common/services/clock/mega/sysclk.h **** #endif
  56:../../../platform/common/services/clock/mega/sysclk.h **** #define ASM __asm__
  57:../../../platform/common/services/clock/mega/sysclk.h **** 
  58:../../../platform/common/services/clock/mega/sysclk.h **** /* CONFIG_SYSCLK_PSDIV  to use default if not defined*/
  59:../../../platform/common/services/clock/mega/sysclk.h **** #ifndef CONFIG_SYSCLK_PSDIV
  60:../../../platform/common/services/clock/mega/sysclk.h **** # define CONFIG_SYSCLK_PSDIV    SYSCLK_PSDIV_8
  61:../../../platform/common/services/clock/mega/sysclk.h **** #endif
  62:../../../platform/common/services/clock/mega/sysclk.h **** 
  63:../../../platform/common/services/clock/mega/sysclk.h **** /* ! \name Prescaler Setting (relative to CLKsys) */
  64:../../../platform/common/services/clock/mega/sysclk.h **** /* @{ */
  65:../../../platform/common/services/clock/mega/sysclk.h **** #define SYSCLK_PSDIV_1      0   /* !< Do not prescale */
  66:../../../platform/common/services/clock/mega/sysclk.h **** #define SYSCLK_PSDIV_2      1   /* !< Prescale CLKper4 by 2 */
  67:../../../platform/common/services/clock/mega/sysclk.h **** #define SYSCLK_PSDIV_4      2   /* !< Prescale CLKper4 by 4 */
  68:../../../platform/common/services/clock/mega/sysclk.h **** #define SYSCLK_PSDIV_8      3   /* !< Prescale CLKper4 by 8 */
  69:../../../platform/common/services/clock/mega/sysclk.h **** #define SYSCLK_PSDIV_16     4   /* !< Prescale CLKper4 by 16 */
  70:../../../platform/common/services/clock/mega/sysclk.h **** #define SYSCLK_PSDIV_32     5   /* !< Prescale CLKper4 by 32 */
  71:../../../platform/common/services/clock/mega/sysclk.h **** #define SYSCLK_PSDIV_64     6   /* !< Prescale CLKper4 by 64 */
  72:../../../platform/common/services/clock/mega/sysclk.h **** #define SYSCLK_PSDIV_128    7   /* !< Prescale CLKper4 by 128 */
  73:../../../platform/common/services/clock/mega/sysclk.h **** #define SYSCLK_PSDIV_256    8   /* !< Prescale CLKper4 by 256 */
  74:../../../platform/common/services/clock/mega/sysclk.h **** 
  75:../../../platform/common/services/clock/mega/sysclk.h **** /* @} */
  76:../../../platform/common/services/clock/mega/sysclk.h **** 
  77:../../../platform/common/services/clock/mega/sysclk.h **** #if MEGA_RF || MEGA_XX0_1 || MEGA_XX4 || MEGA_XX4_A
  78:../../../platform/common/services/clock/mega/sysclk.h **** 
  79:../../../platform/common/services/clock/mega/sysclk.h **** #define NUMBER_OF_POWER_REG       2
  80:../../../platform/common/services/clock/mega/sysclk.h **** /*Starting Address for power reduction*/
  81:../../../platform/common/services/clock/mega/sysclk.h **** #define POWER_REG_ADD             PRR0
  82:../../../platform/common/services/clock/mega/sysclk.h **** 
  83:../../../platform/common/services/clock/mega/sysclk.h **** /* ! \name Power Reduction  Clock Port Numbers */
  84:../../../platform/common/services/clock/mega/sysclk.h **** enum power_red_id {
  85:../../../platform/common/services/clock/mega/sysclk.h **** 	POWER_RED_REG0,     /* !< Devices on PRR0 */
  86:../../../platform/common/services/clock/mega/sysclk.h **** #if !MEGA_XX4 || !MEGA_XX4_A || MEGA_XX0_1
  87:../../../platform/common/services/clock/mega/sysclk.h **** 	POWER_RED_REG1,     /* !< Devices on PRR1 */
  88:../../../platform/common/services/clock/mega/sysclk.h **** #endif
  89:../../../platform/common/services/clock/mega/sysclk.h **** };
  90:../../../platform/common/services/clock/mega/sysclk.h **** #endif
  91:../../../platform/common/services/clock/mega/sysclk.h **** 
  92:../../../platform/common/services/clock/mega/sysclk.h **** /****************************************************
  93:../../../platform/common/services/clock/mega/sysclk.h ****  * Given a dummy type but not used for these groups
  94:../../../platform/common/services/clock/mega/sysclk.h ****  * to support for otherthen megaRF device.
  95:../../../platform/common/services/clock/mega/sysclk.h ****  **************************************************/
  96:../../../platform/common/services/clock/mega/sysclk.h **** #if MEGA_XX8 || MEGA_XX8_A || MEGA_UNSPECIFIED
  97:../../../platform/common/services/clock/mega/sysclk.h **** #define NUMBER_OF_POWER_REG       1
  98:../../../platform/common/services/clock/mega/sysclk.h **** /*Starting Address for power reduction*/
  99:../../../platform/common/services/clock/mega/sysclk.h **** #define POWER_REG_ADD             PRR
 100:../../../platform/common/services/clock/mega/sysclk.h **** 
 101:../../../platform/common/services/clock/mega/sysclk.h **** /* ! \name Power Reduction  Clock Port Numbers */
 102:../../../platform/common/services/clock/mega/sysclk.h **** enum power_red_id {
 103:../../../platform/common/services/clock/mega/sysclk.h **** 	POWER_RED_REG0,     /* !< Devices on PRR */
 104:../../../platform/common/services/clock/mega/sysclk.h **** };
 105:../../../platform/common/services/clock/mega/sysclk.h **** #endif
 106:../../../platform/common/services/clock/mega/sysclk.h **** 
 107:../../../platform/common/services/clock/mega/sysclk.h **** /* Bit mask for the power reduction register based on */
 108:../../../platform/common/services/clock/mega/sysclk.h **** /*   MCU ARCH.                                        */
 109:../../../platform/common/services/clock/mega/sysclk.h **** #if MEGA_RF
 110:../../../platform/common/services/clock/mega/sysclk.h **** /*Bit mask for PRR2 */
 111:../../../platform/common/services/clock/mega/sysclk.h **** 
 112:../../../platform/common/services/clock/mega/sysclk.h **** #define PRRAM0_bm                       1 << PRRAM0
 113:../../../platform/common/services/clock/mega/sysclk.h **** #define PRRAM1_bm                       1 << PRRAM1
 114:../../../platform/common/services/clock/mega/sysclk.h **** #define PRRAM2_bm                       1 << PRRAM2
 115:../../../platform/common/services/clock/mega/sysclk.h **** #define PRRAM3_bm                       1 << PRRAM3
 116:../../../platform/common/services/clock/mega/sysclk.h **** #endif
 117:../../../platform/common/services/clock/mega/sysclk.h **** 
 118:../../../platform/common/services/clock/mega/sysclk.h **** /*Bit mask for the power reduction 0 or PRR*/
 119:../../../platform/common/services/clock/mega/sysclk.h **** #if !MEGA_XX_UN0 && !MEGA_XX_UN0
 120:../../../platform/common/services/clock/mega/sysclk.h **** #define PRADC_bm                        1 << PRADC
 121:../../../platform/common/services/clock/mega/sysclk.h **** #define PRUSART0_bm                     1 << PRUSART0
 122:../../../platform/common/services/clock/mega/sysclk.h **** #define PRSPI_bm                        1 << PRSPI
 123:../../../platform/common/services/clock/mega/sysclk.h **** #define PRTIM1_bm                       1 << PRTIM1
 124:../../../platform/common/services/clock/mega/sysclk.h **** #endif
 125:../../../platform/common/services/clock/mega/sysclk.h **** 
 126:../../../platform/common/services/clock/mega/sysclk.h **** #if MEGA_RF
 127:../../../platform/common/services/clock/mega/sysclk.h **** #define PRPGA_bm                        1 << PRPGA
 128:../../../platform/common/services/clock/mega/sysclk.h **** #endif
 129:../../../platform/common/services/clock/mega/sysclk.h **** 
 130:../../../platform/common/services/clock/mega/sysclk.h **** #if !MEGA_UNSPECIFIED
 131:../../../platform/common/services/clock/mega/sysclk.h **** #define PRTIM0_bm                       1 << PRTIM0
 132:../../../platform/common/services/clock/mega/sysclk.h **** #define PRTIM2_bm                       1 << PRTIM2
 133:../../../platform/common/services/clock/mega/sysclk.h **** #define PRTWI_bm                        1 << PRTWI
 134:../../../platform/common/services/clock/mega/sysclk.h **** #endif
 135:../../../platform/common/services/clock/mega/sysclk.h **** 
 136:../../../platform/common/services/clock/mega/sysclk.h **** #if MEGA_XX_UN2
 137:../../../platform/common/services/clock/mega/sysclk.h **** #define PRLCD_bm                        1 << PRLCD
 138:../../../platform/common/services/clock/mega/sysclk.h **** #endif
 139:../../../platform/common/services/clock/mega/sysclk.h **** 
 140:../../../platform/common/services/clock/mega/sysclk.h **** /*Bit mask for  PRR1  */
 141:../../../platform/common/services/clock/mega/sysclk.h **** #ifdef PRR1
 142:../../../platform/common/services/clock/mega/sysclk.h **** #if (MEGA_XX4 || MEGA_XX4_A)
 143:../../../platform/common/services/clock/mega/sysclk.h **** #define PRTIM3_bm                       1 << PRTIM3
 144:../../../platform/common/services/clock/mega/sysclk.h **** #endif
 145:../../../platform/common/services/clock/mega/sysclk.h **** #endif
 146:../../../platform/common/services/clock/mega/sysclk.h **** 
 147:../../../platform/common/services/clock/mega/sysclk.h **** #if MEGA_RF || MEGA_XX4 || MEGA_XX4_A
 148:../../../platform/common/services/clock/mega/sysclk.h **** #define PRUSART1_bm                     1 << PRUSART1
 149:../../../platform/common/services/clock/mega/sysclk.h **** #define PRUSART2_bm                     1 << PRUSART2
 150:../../../platform/common/services/clock/mega/sysclk.h **** #define PRUSART3_bm                     1 << PRUSART3
 151:../../../platform/common/services/clock/mega/sysclk.h **** #define PRTIM3_bm                       1 << PRTIM3
 152:../../../platform/common/services/clock/mega/sysclk.h **** #define PRTIM4_bm                       1 << PRTIM4
 153:../../../platform/common/services/clock/mega/sysclk.h **** #define PRTIM5_bm                       1 << PRTIM5
 154:../../../platform/common/services/clock/mega/sysclk.h **** #endif
 155:../../../platform/common/services/clock/mega/sysclk.h **** 
 156:../../../platform/common/services/clock/mega/sysclk.h **** #if MEGA_RF
 157:../../../platform/common/services/clock/mega/sysclk.h **** #define PRTRX24_bm                      1 << PRTRX24
 158:../../../platform/common/services/clock/mega/sysclk.h **** #endif
 159:../../../platform/common/services/clock/mega/sysclk.h **** 
 160:../../../platform/common/services/clock/mega/sysclk.h **** /**
 161:../../../platform/common/services/clock/mega/sysclk.h ****  * \name Querying the system clock and its derived clocks
 162:../../../platform/common/services/clock/mega/sysclk.h ****  */
 163:../../../platform/common/services/clock/mega/sysclk.h **** /* @{ */
 164:../../../platform/common/services/clock/mega/sysclk.h **** 
 165:../../../platform/common/services/clock/mega/sysclk.h **** /**
 166:../../../platform/common/services/clock/mega/sysclk.h ****  * \brief Return the current rate in Hz of the main system clock
 167:../../../platform/common/services/clock/mega/sysclk.h ****  * To know the clock value at what frequency the main clock is running
 168:../../../platform/common/services/clock/mega/sysclk.h ****  * \return Frequency of the main system clock, in Hz.
 169:../../../platform/common/services/clock/mega/sysclk.h ****  * \todo : please initialize the SYSCLK_SOURCE in conf_clock.h file for
 170:../../../platform/common/services/clock/mega/sysclk.h ****  * configured source clock using fuses.
 171:../../../platform/common/services/clock/mega/sysclk.h ****  * \eg. #define SYSCLK_SOURCE SYSCLK_SRC_RC16MHZ to use internal RC
 172:../../../platform/common/services/clock/mega/sysclk.h ****  * oscillator for clock source.
 173:../../../platform/common/services/clock/mega/sysclk.h ****  */
 174:../../../platform/common/services/clock/mega/sysclk.h **** static inline uint32_t sysclk_get_main_hz(void)
 175:../../../platform/common/services/clock/mega/sysclk.h **** {
  20               		.loc 1 175 0
  21               		.cfi_startproc
  22 0000 CF93      		push r28
  23               	.LCFI0:
  24               		.cfi_def_cfa_offset 3
  25               		.cfi_offset 28, -2
  26 0002 DF93      		push r29
  27               	.LCFI1:
  28               		.cfi_def_cfa_offset 4
  29               		.cfi_offset 29, -3
  30 0004 CDB7      		in r28,__SP_L__
  31 0006 DEB7      		in r29,__SP_H__
  32               	.LCFI2:
  33               		.cfi_def_cfa_register 28
  34               	/* prologue: function */
  35               	/* frame size = 0 */
  36               	/* stack size = 2 */
  37               	.L__stack_usage = 2
 176:../../../platform/common/services/clock/mega/sysclk.h **** 	switch (SYSCLK_SOURCE) {
 177:../../../platform/common/services/clock/mega/sysclk.h **** 	case SYSCLK_SRC_RC16MHZ:
 178:../../../platform/common/services/clock/mega/sysclk.h **** 		return 16000000UL;
 179:../../../platform/common/services/clock/mega/sysclk.h **** 
 180:../../../platform/common/services/clock/mega/sysclk.h **** 	case SYSCLK_SRC_RC128KHZ:
 181:../../../platform/common/services/clock/mega/sysclk.h **** 		return 128000UL;
 182:../../../platform/common/services/clock/mega/sysclk.h **** 
 183:../../../platform/common/services/clock/mega/sysclk.h **** #if MEGA_RF
 184:../../../platform/common/services/clock/mega/sysclk.h **** 	case SYSCLK_SRC_TRS16MHZ:
 185:../../../platform/common/services/clock/mega/sysclk.h **** 		return 16000000UL;
  38               		.loc 1 185 0
  39 0008 80E0      		ldi r24,0
  40 000a 94E2      		ldi r25,lo8(36)
  41 000c A4EF      		ldi r26,lo8(-12)
  42 000e B0E0      		ldi r27,0
 186:../../../platform/common/services/clock/mega/sysclk.h **** #endif
 187:../../../platform/common/services/clock/mega/sysclk.h **** #ifdef BOARD_EXTERNAL_CLK
 188:../../../platform/common/services/clock/mega/sysclk.h **** 	case SYSCLK_SRC_EXTERNAL:
 189:../../../platform/common/services/clock/mega/sysclk.h **** 		return BOARD_EXTERNAL_CLK;
 190:../../../platform/common/services/clock/mega/sysclk.h **** #endif
 191:../../../platform/common/services/clock/mega/sysclk.h **** 	default:
 192:../../../platform/common/services/clock/mega/sysclk.h **** 
 193:../../../platform/common/services/clock/mega/sysclk.h **** 		return 1000000UL;
 194:../../../platform/common/services/clock/mega/sysclk.h **** 	}
 195:../../../platform/common/services/clock/mega/sysclk.h **** }
  43               		.loc 1 195 0
  44 0010 BC01      		movw r22,r24
  45 0012 CD01      		movw r24,r26
  46               	/* epilogue start */
  47 0014 DF91      		pop r29
  48 0016 CF91      		pop r28
  49 0018 0895      		ret
  50               		.cfi_endproc
  51               	.LFE67:
  54               	sysclk_get_source_clock_hz:
  55               	.LFB68:
 196:../../../platform/common/services/clock/mega/sysclk.h **** 
 197:../../../platform/common/services/clock/mega/sysclk.h **** /**
 198:../../../platform/common/services/clock/mega/sysclk.h ****  * \brief Return the current rate in Hz of source clock in Hz.
 199:../../../platform/common/services/clock/mega/sysclk.h ****  *
 200:../../../platform/common/services/clock/mega/sysclk.h ****  * This clock always runs at the same rate as the CPU clock unless the divider
 201:../../../platform/common/services/clock/mega/sysclk.h ****  * is set.
 202:../../../platform/common/services/clock/mega/sysclk.h ****  *
 203:../../../platform/common/services/clock/mega/sysclk.h ****  * \return Frequency of the system clock, in Hz.
 204:../../../platform/common/services/clock/mega/sysclk.h ****  */
 205:../../../platform/common/services/clock/mega/sysclk.h **** static inline uint32_t sysclk_get_source_clock_hz(void)
 206:../../../platform/common/services/clock/mega/sysclk.h **** {
  56               		.loc 1 206 0
  57               		.cfi_startproc
  58 001a CF93      		push r28
  59               	.LCFI3:
  60               		.cfi_def_cfa_offset 3
  61               		.cfi_offset 28, -2
  62 001c DF93      		push r29
  63               	.LCFI4:
  64               		.cfi_def_cfa_offset 4
  65               		.cfi_offset 29, -3
  66 001e CDB7      		in r28,__SP_L__
  67 0020 DEB7      		in r29,__SP_H__
  68               	.LCFI5:
  69               		.cfi_def_cfa_register 28
  70               	/* prologue: function */
  71               	/* frame size = 0 */
  72               	/* stack size = 2 */
  73               	.L__stack_usage = 2
 207:../../../platform/common/services/clock/mega/sysclk.h **** 	switch (CONFIG_SYSCLK_PSDIV) {
 208:../../../platform/common/services/clock/mega/sysclk.h **** 	case SYSCLK_PSDIV_1: /* Fall through */
 209:../../../platform/common/services/clock/mega/sysclk.h **** 		if (SYSCLK_SOURCE == SYSCLK_SRC_RC16MHZ ||
 210:../../../platform/common/services/clock/mega/sysclk.h **** 				SYSCLK_SOURCE == SYSCLK_SRC_RC128KHZ) {
 211:../../../platform/common/services/clock/mega/sysclk.h **** 			return sysclk_get_main_hz() / 2;
 212:../../../platform/common/services/clock/mega/sysclk.h **** 		} else {
 213:../../../platform/common/services/clock/mega/sysclk.h **** 			return sysclk_get_main_hz();
  74               		.loc 1 213 0
  75 0022 0E94 0000 		call sysclk_get_main_hz
  76 0026 DC01      		movw r26,r24
  77 0028 CB01      		movw r24,r22
 214:../../../platform/common/services/clock/mega/sysclk.h **** 		}
 215:../../../platform/common/services/clock/mega/sysclk.h **** 
 216:../../../platform/common/services/clock/mega/sysclk.h **** 	case SYSCLK_PSDIV_2:
 217:../../../platform/common/services/clock/mega/sysclk.h **** 		if (SYSCLK_SOURCE == SYSCLK_SRC_RC16MHZ ||
 218:../../../platform/common/services/clock/mega/sysclk.h **** 				SYSCLK_SOURCE == SYSCLK_SRC_RC128KHZ) {
 219:../../../platform/common/services/clock/mega/sysclk.h **** 			return sysclk_get_main_hz() / 4;
 220:../../../platform/common/services/clock/mega/sysclk.h **** 		} else {
 221:../../../platform/common/services/clock/mega/sysclk.h **** 			return sysclk_get_main_hz() / 2;
 222:../../../platform/common/services/clock/mega/sysclk.h **** 		}
 223:../../../platform/common/services/clock/mega/sysclk.h **** 
 224:../../../platform/common/services/clock/mega/sysclk.h **** 	case SYSCLK_PSDIV_4:
 225:../../../platform/common/services/clock/mega/sysclk.h **** 		if (SYSCLK_SOURCE == SYSCLK_SRC_RC16MHZ ||
 226:../../../platform/common/services/clock/mega/sysclk.h **** 				SYSCLK_SOURCE == SYSCLK_SRC_RC128KHZ) {
 227:../../../platform/common/services/clock/mega/sysclk.h **** 			return sysclk_get_main_hz() / 8;
 228:../../../platform/common/services/clock/mega/sysclk.h **** 		} else {
 229:../../../platform/common/services/clock/mega/sysclk.h **** 			return sysclk_get_main_hz() / 4;
 230:../../../platform/common/services/clock/mega/sysclk.h **** 		}
 231:../../../platform/common/services/clock/mega/sysclk.h **** 
 232:../../../platform/common/services/clock/mega/sysclk.h **** 	case SYSCLK_PSDIV_8:
 233:../../../platform/common/services/clock/mega/sysclk.h **** 		if (SYSCLK_SOURCE == SYSCLK_SRC_RC16MHZ ||
 234:../../../platform/common/services/clock/mega/sysclk.h **** 				SYSCLK_SOURCE == SYSCLK_SRC_RC128KHZ) {
 235:../../../platform/common/services/clock/mega/sysclk.h **** 			return sysclk_get_main_hz() / 16;
 236:../../../platform/common/services/clock/mega/sysclk.h **** 		} else {
 237:../../../platform/common/services/clock/mega/sysclk.h **** 			return sysclk_get_main_hz() / 8;
 238:../../../platform/common/services/clock/mega/sysclk.h **** 		}
 239:../../../platform/common/services/clock/mega/sysclk.h **** 
 240:../../../platform/common/services/clock/mega/sysclk.h **** 	case SYSCLK_PSDIV_16:
 241:../../../platform/common/services/clock/mega/sysclk.h **** 		if (SYSCLK_SOURCE == SYSCLK_SRC_RC16MHZ ||
 242:../../../platform/common/services/clock/mega/sysclk.h **** 				SYSCLK_SOURCE == SYSCLK_SRC_RC128KHZ) {
 243:../../../platform/common/services/clock/mega/sysclk.h **** 			return sysclk_get_main_hz() / 32;
 244:../../../platform/common/services/clock/mega/sysclk.h **** 		} else {
 245:../../../platform/common/services/clock/mega/sysclk.h **** 			return sysclk_get_main_hz() / 16;
 246:../../../platform/common/services/clock/mega/sysclk.h **** 		}
 247:../../../platform/common/services/clock/mega/sysclk.h **** 
 248:../../../platform/common/services/clock/mega/sysclk.h **** 	case SYSCLK_PSDIV_32:
 249:../../../platform/common/services/clock/mega/sysclk.h **** 		if (SYSCLK_SOURCE == SYSCLK_SRC_RC16MHZ ||
 250:../../../platform/common/services/clock/mega/sysclk.h **** 				SYSCLK_SOURCE == SYSCLK_SRC_RC128KHZ) {
 251:../../../platform/common/services/clock/mega/sysclk.h **** 			return sysclk_get_main_hz() / 64;
 252:../../../platform/common/services/clock/mega/sysclk.h **** 		} else {
 253:../../../platform/common/services/clock/mega/sysclk.h **** 			return sysclk_get_main_hz() / 32;
 254:../../../platform/common/services/clock/mega/sysclk.h **** 		}
 255:../../../platform/common/services/clock/mega/sysclk.h **** 
 256:../../../platform/common/services/clock/mega/sysclk.h **** 	case SYSCLK_PSDIV_64:
 257:../../../platform/common/services/clock/mega/sysclk.h **** 		if (SYSCLK_SOURCE == SYSCLK_SRC_RC16MHZ ||
 258:../../../platform/common/services/clock/mega/sysclk.h **** 				SYSCLK_SOURCE == SYSCLK_SRC_RC128KHZ) {
 259:../../../platform/common/services/clock/mega/sysclk.h **** 			return sysclk_get_main_hz() / 128;
 260:../../../platform/common/services/clock/mega/sysclk.h **** 		} else {
 261:../../../platform/common/services/clock/mega/sysclk.h **** 			return sysclk_get_main_hz() / 64;
 262:../../../platform/common/services/clock/mega/sysclk.h **** 		}
 263:../../../platform/common/services/clock/mega/sysclk.h **** 
 264:../../../platform/common/services/clock/mega/sysclk.h **** 	case SYSCLK_PSDIV_128:
 265:../../../platform/common/services/clock/mega/sysclk.h **** 		if (SYSCLK_SOURCE == SYSCLK_SRC_RC16MHZ ||
 266:../../../platform/common/services/clock/mega/sysclk.h **** 				SYSCLK_SOURCE == SYSCLK_SRC_RC128KHZ) {
 267:../../../platform/common/services/clock/mega/sysclk.h **** 			return sysclk_get_main_hz() / 256;
 268:../../../platform/common/services/clock/mega/sysclk.h **** 		} else {
 269:../../../platform/common/services/clock/mega/sysclk.h **** 			return sysclk_get_main_hz() / 128;
 270:../../../platform/common/services/clock/mega/sysclk.h **** 		}
 271:../../../platform/common/services/clock/mega/sysclk.h **** 
 272:../../../platform/common/services/clock/mega/sysclk.h **** 	case SYSCLK_PSDIV_256:
 273:../../../platform/common/services/clock/mega/sysclk.h **** 		if (SYSCLK_SOURCE == SYSCLK_SRC_RC16MHZ ||
 274:../../../platform/common/services/clock/mega/sysclk.h **** 				SYSCLK_SOURCE == SYSCLK_SRC_RC128KHZ) {
 275:../../../platform/common/services/clock/mega/sysclk.h **** 			return sysclk_get_main_hz() / 512;
 276:../../../platform/common/services/clock/mega/sysclk.h **** 		} else {
 277:../../../platform/common/services/clock/mega/sysclk.h **** 			return sysclk_get_main_hz() / 256;
 278:../../../platform/common/services/clock/mega/sysclk.h **** 		}
 279:../../../platform/common/services/clock/mega/sysclk.h **** 
 280:../../../platform/common/services/clock/mega/sysclk.h **** 	default:
 281:../../../platform/common/services/clock/mega/sysclk.h **** 		/*Invalide case*/
 282:../../../platform/common/services/clock/mega/sysclk.h **** 		return 0;
 283:../../../platform/common/services/clock/mega/sysclk.h **** 	}
 284:../../../platform/common/services/clock/mega/sysclk.h **** }
  78               		.loc 1 284 0
  79 002a BC01      		movw r22,r24
  80 002c CD01      		movw r24,r26
  81               	/* epilogue start */
  82 002e DF91      		pop r29
  83 0030 CF91      		pop r28
  84 0032 0895      		ret
  85               		.cfi_endproc
  86               	.LFE68:
  88               		.section	.progmem.data.baudctrl_1mhz,"a",@progbits
  91               	baudctrl_1mhz:
  92 0000 3300      		.word	51
  93 0002 1900      		.word	25
  94 0004 0C00      		.word	12
  95 0006 0600      		.word	6
  96 0008 0300      		.word	3
  97 000a 0200      		.word	2
  98 000c 0100      		.word	1
  99 000e FF00      		.word	255
 100               		.section	.progmem.data.baudctrl_8mhz,"a",@progbits
 103               	baudctrl_8mhz:
 104 0000 A001      		.word	416
 105 0002 CF00      		.word	207
 106 0004 6700      		.word	103
 107 0006 3300      		.word	51
 108 0008 1900      		.word	25
 109 000a 0C00      		.word	12
 110 000c 0700      		.word	7
 111 000e 0800      		.word	8
 112               		.section	.progmem.data.baudctrl_16mhz,"a",@progbits
 115               	baudctrl_16mhz:
 116 0000 4003      		.word	832
 117 0002 A001      		.word	416
 118 0004 CF00      		.word	207
 119 0006 6700      		.word	103
 120 0008 3300      		.word	51
 121 000a 1900      		.word	25
 122 000c 1000      		.word	16
 123 000e 1000      		.word	16
 124               		.text
 126               	usart_double_baud_enable:
 127               	.LFB101:
 128               		.file 2 "../../../platform/mega_rf/drivers/usart/usart_megarf.h"
   1:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** /**
   2:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * \file
   3:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  *
   4:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * \brief USART driver for AVR MEGARF.
   5:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  *
   6:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * This file contains basic functions for the AVR MEGA USART, with support for
   7:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * all modes, settings and clock speeds.
   8:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  *
   9:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * Copyright (c) 2013-2015 Atmel Corporation. All rights reserved.
  10:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  *
  11:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * \asf_license_start
  12:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  *
  13:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * \page License
  14:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  *
  15:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * Redistribution and use in source and binary forms, with or without
  16:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * modification, are permitted provided that the following conditions are met:
  17:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  *
  18:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * 1. Redistributions of source code must retain the above copyright notice,
  19:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  *    this list of conditions and the following disclaimer.
  20:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  *
  21:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * 2. Redistributions in binary form must reproduce the above copyright notice,
  22:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  *    this list of conditions and the following disclaimer in the documentation
  23:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  *    and/or other materials provided with the distribution.
  24:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  *
  25:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * 3. The name of Atmel may not be used to endorse or promote products derived
  26:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  *    from this software without specific prior written permission.
  27:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  *
  28:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * 4. This software may only be redistributed and used in connection with an
  29:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  *    Atmel microcontroller product.
  30:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  *
  31:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * THIS SOFTWARE IS PROVIDED BY ATMEL "AS IS" AND ANY EXPRESS OR IMPLIED
  32:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
  33:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE
  34:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * EXPRESSLY AND SPECIFICALLY DISCLAIMED. IN NO EVENT SHALL ATMEL BE LIABLE FOR
  35:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  36:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
  37:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
  38:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
  39:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
  40:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  41:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * POSSIBILITY OF SUCH DAMAGE.
  42:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  *
  43:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * \asf_license_stop
  44:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  *
  45:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  */
  46:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #ifndef _USART_MEGARF_H_
  47:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define _USART_MEGARF_H_
  48:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
  49:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #ifdef __cplusplus
  50:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** extern "C" {
  51:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #endif
  52:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
  53:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #include "compiler.h"
  54:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #include "status_codes.h"
  55:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
  56:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** /**
  57:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * \defgroup megarf_usart_group USART module (USART)
  58:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  *
  59:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * See \ref megarf_usart_quickstart.
  60:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  *
  61:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * This is a driver for configuring, enabling, disabling and use of the on-chip
  62:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * USART.
  63:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  *
  64:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * \section dependencies Dependencies
  65:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  *
  66:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * The USART module depends on the following modules:
  67:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  *  - \ref sysclk_group for peripheral clock control.
  68:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  *  - \ref port_driver_group for peripheral io port control.
  69:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  *
  70:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * @{
  71:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  */
  72:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
  73:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** /* ! Offset in lookup table for baudrate 1200 */
  74:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_BAUD_1200      0x00
  75:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** /* ! Offset in lookup table for baudrate 2400 */
  76:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_BAUD_2400      0x01
  77:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** /* ! Offset in lookup table for baudrate 4800 */
  78:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_BAUD_4800      0x02
  79:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** /* ! Offset in lookup table for baudrate 9600 */
  80:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_BAUD_9600      0x03
  81:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** /* ! Offset in lookup table for baudrate 19200 */
  82:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_BAUD_19200     0x04
  83:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** /* ! Offset in lookup table for baudrate 38400 */
  84:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_BAUD_38400     0x05
  85:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** /* ! Offset in lookup table for baudrate 57600 */
  86:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_BAUD_57600     0x06
  87:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** /* ! Offset in lookup table for baudrate 115200 */
  88:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_BAUD_115200    0x07
  89:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** /* ! Baudrate not in lookup table */
  90:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_BAUD_UNDEFINED 0xFF
  91:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
  92:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** typedef volatile uint8_t register8_t;
  93:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** typedef volatile uint16_t register16_t;
  94:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** /* Universal Synchronous/Asynchronous Receiver/Transmitter */
  95:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** typedef struct USART_struct {
  96:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	register8_t UCSRnA;  /* Control Register A */
  97:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	register8_t UCSRnB;  /* Control Register B */
  98:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	register8_t UCSRnC;  /* Control Register C */
  99:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	register8_t reserved;
 100:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	register16_t UBRR;  /* Baud Rate Register Value */
 101:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	register8_t UDR;  /* I/O Data Register */
 102:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** } USART_t;
 103:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 104:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USARTA0    (*(USART_t *)0xC0)   /* Universal Asynchronous
 105:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	                                 * Receiver-Transmitter A0 */
 106:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USARTA1    (*(USART_t *)0XC8)   /* Universal Asynchronous
 107:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	                                 * Receiver-Transmitter A1 */
 108:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 109:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** /* USART.UCSRxA  bit masks and bit positions */
 110:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_RXC_bm  0x80 /* RX complete bit mask.*/
 111:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_RXC_bp  7 /* RX complete bit position.*/
 112:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 113:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_TXC_bm  0x40 /* TX complete bit mask.*/
 114:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_TXC_bp  6 /* TX complete bit position.*/
 115:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 116:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_DRE_bm  0x20 /* DATA Register Empty Bit mask.*/
 117:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_DRE_bp  5 /*  DATA Register Empty bit position.*/
 118:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 119:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_FE_bm   0x10 /* Frame Error bit mask.*/
 120:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_FE_bp   4 /*Frame error bit position.*/
 121:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 122:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_DOR_bm  0x08 /* Data Over Run bit mask.*/
 123:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_DOR_bp  3 /* Data Over Run bit position.*/
 124:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 125:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_UPE_bm  0x04 /* Parity error bit mask.*/
 126:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_UPE_bp  2 /* Parity error bit position.*/
 127:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 128:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_U2X_bm  0x02 /* Double TX speed bit mask.*/
 129:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_U2X_bp  1 /* Double TX speed bit position.*/
 130:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 131:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_MPCM_bm  0x01 /* Multi Processor bit mask.*/
 132:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_MPMC_bp  0 /* Multi processor bit position.*/
 133:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 134:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** /* USART.UCSRxB  bit masks and bit positions */
 135:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_RXCIE_bm  0x80 /* RX complete interrupt Enable bit mask.*/
 136:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_RXCIE_bp  7 /* RX complete interrupt Enable bit position.*/
 137:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 138:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_TXCIE_bm  0x40 /* TX complete interrupt Enable bit mask.*/
 139:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_TXCIE_bp  6 /* TX complete interrupt Enable bit position.*/
 140:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 141:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_DRIE_bm  0x20 /* Data register empty interrupt Enable bit mask.*/
 142:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_DRIE_bp  5 /* Data register empty interrupt Enable bit position.*/
 143:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 144:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_RXEN_bm  0x10  /* Receiver Enable bit mask. */
 145:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_RXEN_bp  4  /* Receiver Enable bit position. */
 146:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 147:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_TXEN_bm  0x08  /* Transmitter Enable bit mask. */
 148:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_TXEN_bp  3  /* Transmitter Enable bit position. */
 149:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 150:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_CHSIZE2_bm  0x04  /* Character Size bit mask. */
 151:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_CHSIZE2_bp  2 /* Character Size bit position. */
 152:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 153:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_RXB8_bm  0x02  /* Transmit bit 8 bit mask. */
 154:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_RXB8_bp  1  /* Transmit bit 8 bit position. */
 155:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 156:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_TXB8_bm  0x01  /* Transmit bit 8 bit mask. */
 157:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_TXB8_bp  0  /* Transmit bit 8 bit position. */
 158:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 159:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** /* USART.UCSRxC  bit masks and bit positions */
 160:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_UMSEL01_gm  0xC0 /* USART Mode Select 01 grp mask.*/
 161:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_UMSEL01_gp  6 /* USART Mode Select 01 grp position.*/
 162:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 163:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_UMSEL01_bm  0x80 /* USART Mode Select 01 bit mask.*/
 164:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_UMSEL01_bp  7 /* USART Mode Select 01 bit position.*/
 165:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 166:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_UMSEL00_bm  0x40 /* USART Mode Select 00 bit mask.*/
 167:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_UMSEL00_bp  6 /* USART Mode Select 00 bit position.*/
 168:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 169:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_PMODE_gm  0x30 /* USART Parity Mode Select grp mask.*/
 170:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_PMODE_gp  4 /* USART Parity Mode Select grp position.*/
 171:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 172:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_PMODE01_bm  0x20 /* USART Parity Mode Select 01 bit mask.*/
 173:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_PMODE01_bp  5 /* USART Parity Mode Select 01 bit position.*/
 174:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 175:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_PMODE00_bm  0x10 /* USART Parity Mode Select 00 bit mask.*/
 176:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_PMODE00_bp  4 /* USART Parity Mode Select 00 bit position.*/
 177:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 178:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_STOPB_bm  0x08 /* USART stop bit mask.*/
 179:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_STOPB_bp  3 /* USART stop bit Position.*/
 180:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 181:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_CHSIZE01C_gm  0x06  /* Character Size 10 bit 1 mask. */
 182:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_CHSIZE01C_gp  1 /* Character Size 10 bit position. */
 183:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 184:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_CHSIZE01_bm  0x04  /* Character Size 10 bit 1 mask. */
 185:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_CHSIZE01_bp  2 /* Character Size 10 bit position. */
 186:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 187:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_CHSIZE00_bm  0x02  /* Character Size 00 bit 1 mask. */
 188:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_CHSIZE00_bp  1 /* Character Size bit 00 position. */
 189:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 190:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_UCPOL_bm  0x01  /* Sync mode Pol bit 1 mask. */
 191:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_UCPOL_bp  0 /*Sync mode Pol bit 0 position */
 192:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 193:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_UCPHA_bm 0x02 /* Clock Phase bit mask. */
 194:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_UCPHA_bp 1 /* Clock Phase bit position. */
 195:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 196:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_DORD_bm 0x04 /* Data order bit mask. */
 197:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_DORD_bp 2 /* Data order bit position. */
 198:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 199:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** /* Character Size */
 200:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** typedef enum USART_CHSIZE_enum {
 201:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	USART_CHSIZE_5BIT_gc = (0x00),  /* Character size: 5 bit */
 202:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	USART_CHSIZE_6BIT_gc = (0x01),  /* Character size: 6 bit */
 203:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	USART_CHSIZE_7BIT_gc = (0x02),  /* Character size: 7 bit */
 204:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	USART_CHSIZE_8BIT_gc = (0x03),  /* Character size: 8 bit */
 205:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	USART_CHSIZE_9BIT_gc = (0x07),  /* Character size: 9 bit */
 206:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** } USART_CHSIZE_t;
 207:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 208:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** /* Communication Mode */
 209:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** typedef enum USART_CMODE_enum {
 210:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	USART_CMODE_ASYNCHRONOUS_gc = (0x00 << USART_UMSEL01_gp),  /*
 211:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	                                                            *
 212:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	                                                            *
 213:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	                                                            *Asynchronous
 214:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	                                                            * Mode */
 215:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	USART_CMODE_SYNCHRONOUS_gc = (0x01 << USART_UMSEL01_gp),  /* Synchronous
 216:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	                                                           * Mode */
 217:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	USART_CMODE_IRDA_gc = (0x02 << USART_UMSEL01_gp),  /* IrDA Mode */
 218:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	USART_CMODE_MSPI_gc = (0x03 << USART_UMSEL01_gp),  /* Master SPI Mode */
 219:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** } USART_CMODE_t;
 220:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 221:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** /* Parity Mode */
 222:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** typedef enum USART_PMODE_enum {
 223:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	USART_PMODE_DISABLED_gc = (0x00 << USART_PMODE_gp),  /* No Parity */
 224:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	USART_PMODE_EVEN_gc = (0x02 << USART_PMODE_gp),  /* Even Parity */
 225:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	USART_PMODE_ODD_gc = (0x03 << USART_PMODE_gp),  /* Odd Parity */
 226:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** } USART_PMODE_t;
 227:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 228:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** /* ! Lookup table containing baudctrl values for CPU frequency 1 Mhz */
 229:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** static PROGMEM_DECLARE(uint16_t, baudctrl_1mhz[]) = {
 230:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	0x0033, /* Baud: 1200 */
 231:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	0x0019, /* Baud: 2400 */
 232:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	0x000C, /* Baud: 4800 */
 233:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	0x0006, /* Baud: 9600 */
 234:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	0x0003, /* Baud: 19200 */
 235:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	0x0002, /* Baud: 38400 */
 236:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	0x0001, /* Baud: 57600 */
 237:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	USART_BAUD_UNDEFINED, /* Baud: 115200 */
 238:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** };
 239:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 240:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** /* ! Lookup table containing baudctrl values for CPU frequency 8 Mhz */
 241:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** static PROGMEM_DECLARE(uint16_t, baudctrl_8mhz[]) = {
 242:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	0x01A0, /* Baud: 1200 */
 243:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	0x00CF, /* Baud: 2400 */
 244:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	0x0067, /* Baud: 4800 */
 245:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	0x0033, /* Baud: 9600 */
 246:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	0x0019, /* Baud: 19200 */
 247:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	0x000C, /* Baud: 38400 */
 248:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	0x0007, /* Baud: 57600 */
 249:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	0x0008, /* Baud: 115200 */
 250:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** };
 251:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 252:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** /* ! Lookup table containing baudctrl values for CPU frequency 16 Mhz */
 253:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** static PROGMEM_DECLARE(uint16_t, baudctrl_16mhz[]) = {
 254:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	0x0340, /* Baud: 1200 */
 255:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	0x01A0, /* Baud: 2400 */
 256:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	0x00CF, /* Baud: 4800 */
 257:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	0x0067, /* Baud: 9600 */
 258:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	0x0033, /* Baud: 19200 */
 259:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	0x0019, /* Baud: 38400 */
 260:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	0x0010, /* Baud: 57600 */
 261:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	0x0010, /* Baud: 115200 */
 262:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** };
 263:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 264:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 265:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** /* ! Input parameters when initializing RS232 and similar modes. */
 266:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** typedef struct usart_rs232_options {
 267:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	/* ! Set baud rate of the USART (unused in slave modes). */
 268:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	uint32_t baudrate;
 269:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 270:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	/* ! Number of bits to transmit as a character (5 to 9). */
 271:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	USART_CHSIZE_t charlength;
 272:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 273:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	/* ! Parity type: USART_PMODE_DISABLED_gc, USART_PMODE_EVEN_gc, */
 274:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	/* ! USART_PMODE_ODD_gc. */
 275:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	USART_PMODE_t paritytype;
 276:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 277:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	/* ! Number of stop bits between two characters: */
 278:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	/* ! true: 2 stop bits */
 279:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	/* ! false: 1 stop bit */
 280:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	bool stopbits;
 281:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** } usart_rs232_options_t;
 282:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 283:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** /* ! Input parameters when initializing SPI master mode. */
 284:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** typedef struct usart_spi_options {
 285:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	/* ! Set baud rate of the USART in SPI mode. */
 286:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	uint32_t baudrate;
 287:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 288:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	/* ! SPI transmission mode. */
 289:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	uint8_t spimode;
 290:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 291:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	uint8_t data_order;
 292:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** } usart_spi_options_t;
 293:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 294:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 295:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** /**
 296:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * \brief Enable USART receiver.
 297:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  *
 298:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * \param usart Pointer to the USART module
 299:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  */
 300:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** static inline void usart_rx_enable(USART_t *usart)
 301:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** {
 302:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	(usart)->UCSRnB |= USART_RXEN_bm;
 303:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** }
 304:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 305:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** /**
 306:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * \brief Disable USART receiver.
 307:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  *
 308:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * \param usart Pointer to the USART module.
 309:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  */
 310:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** static inline void usart_rx_disable(USART_t *usart)
 311:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** {
 312:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	(usart)->UCSRnB &= ~USART_RXEN_bm;
 313:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** }
 314:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 315:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** /**
 316:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * \brief  Configure the USART frame format.
 317:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  *
 318:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  *  Sets the frame format, Frame Size, parity mode and number of stop bits.
 319:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  *
 320:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  *  \param usart Pointer to the USART module
 321:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  *  \param charSize The character size. Use USART_CHSIZE_t type.
 322:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  *  \param parityMode The parity Mode. Use USART_PMODE_t type.
 323:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  *  \param twoStopBits Enable two stop bit mode. Use bool type.
 324:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  */
 325:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** static inline void usart_format_set(USART_t *usart, USART_CHSIZE_t charSize,
 326:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 		USART_PMODE_t parityMode, bool twoStopBits)
 327:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** {
 328:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	(usart)->UCSRnC
 329:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 		= ((usart)->UCSRnC &
 330:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 			(~USART_CHSIZE01C_gm)) | ((charSize & 0x03)
 331:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 			<< USART_CHSIZE01C_gp);
 332:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	(usart)->UCSRnB
 333:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 		= ((usart)->UCSRnB &
 334:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 			(~USART_CHSIZE2_bm)) | ((charSize & 0x04)
 335:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 			<< USART_CHSIZE2_bp);
 336:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 337:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	(usart)->UCSRnC = ((usart)->UCSRnC & (~USART_PMODE_gm)) | parityMode;
 338:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 339:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	(usart)->UCSRnC = ((usart)->UCSRnC & (~USART_STOPB_bm)) | (twoStopBits
 340:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 			<< USART_STOPB_bp);
 341:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** }
 342:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 343:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** /**
 344:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * \brief Enable USART transmitter.
 345:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  *
 346:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * \param usart Pointer to the USART module.
 347:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  */
 348:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** static inline void usart_tx_enable(USART_t *usart)
 349:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** {
 350:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	(usart)->UCSRnB |= USART_TXEN_bm;
 351:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** }
 352:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 353:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** /**
 354:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * \brief Disable USART transmitter.
 355:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  *
 356:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * \param usart Pointer to the USART module.
 357:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  */
 358:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** static inline void usart_tx_disable(USART_t *usart)
 359:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** {
 360:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	(usart)->UCSRnB &= ~USART_TXEN_bm;
 361:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** }
 362:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 363:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** /**
 364:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * \brief Enable USART transmit complete interrupt.
 365:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  *
 366:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * \param usart Pointer to the USART module.
 367:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  */
 368:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** static inline void usart_tx_complete_interrupt_enable(USART_t *usart)
 369:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** {
 370:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	(usart)->UCSRnB |= USART_TXC_bm;
 371:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** }
 372:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 373:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** /**
 374:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * \brief Enable USART receive complete interrupt.
 375:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  *
 376:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * \param usart Pointer to the USART module.
 377:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  */
 378:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** static inline void usart_rx_complete_interrupt_enable(USART_t *usart)
 379:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** {
 380:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	(usart)->UCSRnB |= USART_RXC_bm;
 381:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** }
 382:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 383:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** /**
 384:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * \brief Enable USART data register empty interrupt.
 385:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  *
 386:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * \param usart Pointer to the USART module.
 387:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  */
 388:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** static inline void usart_data_empty_interrupt_enable(USART_t *usart)
 389:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** {
 390:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	(usart)->UCSRnB |= USART_DRIE_bm;
 391:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** }
 392:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 393:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** /**
 394:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * \brief Disable USART transmit complete interrupt.
 395:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  *
 396:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * \param usart Pointer to the USART module.
 397:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  */
 398:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** static inline void usart_tx_complete_interrupt_disable(USART_t *usart)
 399:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** {
 400:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	(usart)->UCSRnB &= ~USART_TXC_bm;
 401:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** }
 402:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 403:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** /**
 404:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * \brief Disable USART receive complete interrupt.
 405:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  *
 406:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * \param usart Pointer to the USART module.
 407:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  */
 408:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** static inline void usart_rx_complete_interrupt_disable(USART_t *usart)
 409:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** {
 410:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	(usart)->UCSRnB &= ~USART_RXC_bm;
 411:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** }
 412:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 413:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** /**
 414:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * \brief Disable USART data register empty interrupt.
 415:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  *
 416:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * \param usart Pointer to the USART module.
 417:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  */
 418:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** static inline void usart_data_empty_interrupt_disable(USART_t *usart)
 419:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** {
 420:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	(usart)->UCSRnB &= ~USART_DRIE_bm;
 421:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** }
 422:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 423:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** /**
 424:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * \brief Set the mode the USART run in.
 425:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  *
 426:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * Set the mode the USART run in. The default mode is asynchronous mode.
 427:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  *
 428:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * \param usart Pointer to the USART module register section.
 429:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * \param usartmode Selects the USART mode. Use USART_CMODE_t type.
 430:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  *
 431:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * USART modes:
 432:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * - 0x0        : Asynchronous mode.
 433:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * - 0x1        : Synchronous mode.
 434:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * - 0x2        : IrDA mode.
 435:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * - 0x3        : Master SPI mode.
 436:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  */
 437:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
 438:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** {
 439:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	(usart)->UCSRnC = ((usart)->UCSRnC & (~USART_UMSEL01_gm)) | usartmode;
 440:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** }
 441:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 442:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** /**
 443:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * \brief Check if data register empty flag is set.
 444:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  *
 445:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * \param usart The USART module.
 446:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  */
 447:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** static inline bool usart_data_register_is_empty(USART_t *usart)
 448:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** {
 449:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	return (usart)->UCSRnA & USART_DRE_bm;
 450:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** }
 451:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 452:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** /**
 453:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * \brief Checks if the RX complete interrupt flag is set.
 454:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  *
 455:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * Checks if the RX complete interrupt flag is set.
 456:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  *
 457:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * \param usart The USART module.
 458:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  */
 459:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** static inline bool usart_rx_is_complete(USART_t *usart)
 460:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** {
 461:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	return (usart)->UCSRnA & USART_RXC_bm;
 462:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** }
 463:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 464:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** /**
 465:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * \brief Checks if the TX complete interrupt flag is set.
 466:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  *
 467:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * Checks if the TX complete interrupt flag is set.
 468:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  *
 469:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * \param usart The USART module.
 470:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  */
 471:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** static inline bool usart_tx_is_complete(USART_t *usart)
 472:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** {
 473:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	return (usart)->UCSRnA & USART_TXC_bm;
 474:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** }
 475:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 476:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** /**
 477:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * \brief Clear TX complete interrupt flag.
 478:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * TX flag is clear after complete transmission, automatically.
 479:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * \param usart The USART module.
 480:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  */
 481:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** static inline void usart_clear_tx_complete(USART_t *usart)
 482:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** {
 483:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****          usart->UCSRnA |=  USART_TXC_bm;
 484:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** }
 485:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 486:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** /**
 487:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * \brief Write a data to the USART data register.
 488:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  *
 489:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * \param usart The USART module.
 490:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * \param txdata The data to be transmitted.
 491:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  */
 492:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** static inline void usart_put(USART_t *usart, uint8_t txdata)
 493:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** {
 494:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	(usart)->UDR = txdata;
 495:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** }
 496:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 497:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** /**
 498:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * \brief  Read a data to the USART data register.
 499:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  *
 500:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * \param usart The USART module.
 501:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  *
 502:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * \return The received data
 503:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  */
 504:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** static inline uint8_t usart_get(USART_t *usart)
 505:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** {
 506:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	return (usart)->UDR;
 507:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** }
 508:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 509:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** /**
 510:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * \brief Double the USART transmission speed.
 511:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  *
 512:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * \param usart The USART module.
 513:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  */
 514:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** static inline void usart_double_baud_enable(USART_t *usart)
 515:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** {
 129               		.loc 2 515 0
 130               		.cfi_startproc
 131 0034 CF93      		push r28
 132               	.LCFI6:
 133               		.cfi_def_cfa_offset 3
 134               		.cfi_offset 28, -2
 135 0036 DF93      		push r29
 136               	.LCFI7:
 137               		.cfi_def_cfa_offset 4
 138               		.cfi_offset 29, -3
 139 0038 00D0      		rcall .
 140               	.LCFI8:
 141               		.cfi_def_cfa_offset 6
 142 003a CDB7      		in r28,__SP_L__
 143 003c DEB7      		in r29,__SP_H__
 144               	.LCFI9:
 145               		.cfi_def_cfa_register 28
 146               	/* prologue: function */
 147               	/* frame size = 2 */
 148               	/* stack size = 4 */
 149               	.L__stack_usage = 4
 150 003e 9A83      		std Y+2,r25
 151 0040 8983      		std Y+1,r24
 516:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	usart->UCSRnA |=  USART_U2X_bm;
 152               		.loc 2 516 0
 153 0042 8981      		ldd r24,Y+1
 154 0044 9A81      		ldd r25,Y+2
 155 0046 FC01      		movw r30,r24
 156 0048 8081      		ld r24,Z
 157 004a 282F      		mov r18,r24
 158 004c 2260      		ori r18,lo8(2)
 159 004e 8981      		ldd r24,Y+1
 160 0050 9A81      		ldd r25,Y+2
 161 0052 FC01      		movw r30,r24
 162 0054 2083      		st Z,r18
 517:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** }
 163               		.loc 2 517 0
 164 0056 0000      		nop
 165               	/* epilogue start */
 166 0058 0F90      		pop __tmp_reg__
 167 005a 0F90      		pop __tmp_reg__
 168 005c DF91      		pop r29
 169 005e CF91      		pop r28
 170 0060 0895      		ret
 171               		.cfi_endproc
 172               	.LFE101:
 175               	usart_serial_init:
 176               	.LFB104:
 177               		.file 3 "../../../platform/common/services/serial/megarf_usart/usart_serial.h"
   1:../../../platform/common/services/serial/megarf_usart/usart_serial.h **** /**
   2:../../../platform/common/services/serial/megarf_usart/usart_serial.h ****  * \file
   3:../../../platform/common/services/serial/megarf_usart/usart_serial.h ****  *
   4:../../../platform/common/services/serial/megarf_usart/usart_serial.h ****  * \brief This file defines a useful set of functions for the Serial interface on 
   5:../../../platform/common/services/serial/megarf_usart/usart_serial.h ****  * AVR MEGARF devices.
   6:../../../platform/common/services/serial/megarf_usart/usart_serial.h ****  *
   7:../../../platform/common/services/serial/megarf_usart/usart_serial.h ****  * Copyright (c) 2013 Atmel Corporation. All rights reserved.
   8:../../../platform/common/services/serial/megarf_usart/usart_serial.h ****  *
   9:../../../platform/common/services/serial/megarf_usart/usart_serial.h ****  * \asf_license_start
  10:../../../platform/common/services/serial/megarf_usart/usart_serial.h ****  *
  11:../../../platform/common/services/serial/megarf_usart/usart_serial.h ****  * \page License
  12:../../../platform/common/services/serial/megarf_usart/usart_serial.h ****  *
  13:../../../platform/common/services/serial/megarf_usart/usart_serial.h ****  * Redistribution and use in source and binary forms, with or without
  14:../../../platform/common/services/serial/megarf_usart/usart_serial.h ****  * modification, are permitted provided that the following conditions are met:
  15:../../../platform/common/services/serial/megarf_usart/usart_serial.h ****  *
  16:../../../platform/common/services/serial/megarf_usart/usart_serial.h ****  * 1. Redistributions of source code must retain the above copyright notice,
  17:../../../platform/common/services/serial/megarf_usart/usart_serial.h ****  *    this list of conditions and the following disclaimer.
  18:../../../platform/common/services/serial/megarf_usart/usart_serial.h ****  *
  19:../../../platform/common/services/serial/megarf_usart/usart_serial.h ****  * 2. Redistributions in binary form must reproduce the above copyright notice,
  20:../../../platform/common/services/serial/megarf_usart/usart_serial.h ****  *    this list of conditions and the following disclaimer in the documentation
  21:../../../platform/common/services/serial/megarf_usart/usart_serial.h ****  *    and/or other materials provided with the distribution.
  22:../../../platform/common/services/serial/megarf_usart/usart_serial.h ****  *
  23:../../../platform/common/services/serial/megarf_usart/usart_serial.h ****  * 3. The name of Atmel may not be used to endorse or promote products derived
  24:../../../platform/common/services/serial/megarf_usart/usart_serial.h ****  *    from this software without specific prior written permission.
  25:../../../platform/common/services/serial/megarf_usart/usart_serial.h ****  *
  26:../../../platform/common/services/serial/megarf_usart/usart_serial.h ****  * 4. This software may only be redistributed and used in connection with an
  27:../../../platform/common/services/serial/megarf_usart/usart_serial.h ****  *    Atmel microcontroller product.
  28:../../../platform/common/services/serial/megarf_usart/usart_serial.h ****  *
  29:../../../platform/common/services/serial/megarf_usart/usart_serial.h ****  * THIS SOFTWARE IS PROVIDED BY ATMEL "AS IS" AND ANY EXPRESS OR IMPLIED
  30:../../../platform/common/services/serial/megarf_usart/usart_serial.h ****  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
  31:../../../platform/common/services/serial/megarf_usart/usart_serial.h ****  * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE
  32:../../../platform/common/services/serial/megarf_usart/usart_serial.h ****  * EXPRESSLY AND SPECIFICALLY DISCLAIMED. IN NO EVENT SHALL ATMEL BE LIABLE FOR
  33:../../../platform/common/services/serial/megarf_usart/usart_serial.h ****  * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  34:../../../platform/common/services/serial/megarf_usart/usart_serial.h ****  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
  35:../../../platform/common/services/serial/megarf_usart/usart_serial.h ****  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
  36:../../../platform/common/services/serial/megarf_usart/usart_serial.h ****  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
  37:../../../platform/common/services/serial/megarf_usart/usart_serial.h ****  * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
  38:../../../platform/common/services/serial/megarf_usart/usart_serial.h ****  * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  39:../../../platform/common/services/serial/megarf_usart/usart_serial.h ****  * POSSIBILITY OF SUCH DAMAGE.
  40:../../../platform/common/services/serial/megarf_usart/usart_serial.h ****  *
  41:../../../platform/common/services/serial/megarf_usart/usart_serial.h ****  * \asf_license_stop
  42:../../../platform/common/services/serial/megarf_usart/usart_serial.h ****  *
  43:../../../platform/common/services/serial/megarf_usart/usart_serial.h ****  */
  44:../../../platform/common/services/serial/megarf_usart/usart_serial.h **** #ifndef _USART_SERIAL_H_
  45:../../../platform/common/services/serial/megarf_usart/usart_serial.h **** #define _USART_SERIAL_H_
  46:../../../platform/common/services/serial/megarf_usart/usart_serial.h **** 
  47:../../../platform/common/services/serial/megarf_usart/usart_serial.h **** #ifdef __cplusplus
  48:../../../platform/common/services/serial/megarf_usart/usart_serial.h **** extern "C" {
  49:../../../platform/common/services/serial/megarf_usart/usart_serial.h **** #endif
  50:../../../platform/common/services/serial/megarf_usart/usart_serial.h **** 
  51:../../../platform/common/services/serial/megarf_usart/usart_serial.h **** #include "compiler.h"
  52:../../../platform/common/services/serial/megarf_usart/usart_serial.h **** #include "sysclk.h"
  53:../../../platform/common/services/serial/megarf_usart/usart_serial.h **** #include "status_codes.h"
  54:../../../platform/common/services/serial/megarf_usart/usart_serial.h **** #include "usart_megarf.h"
  55:../../../platform/common/services/serial/megarf_usart/usart_serial.h **** 
  56:../../../platform/common/services/serial/megarf_usart/usart_serial.h **** /*! \name Serial Management Configuration
  57:../../../platform/common/services/serial/megarf_usart/usart_serial.h ****  */
  58:../../../platform/common/services/serial/megarf_usart/usart_serial.h **** /* ! @{ */
  59:../../../platform/common/services/serial/megarf_usart/usart_serial.h **** #include "conf_usart_serial.h"
  60:../../../platform/common/services/serial/megarf_usart/usart_serial.h **** /* ! @} */
  61:../../../platform/common/services/serial/megarf_usart/usart_serial.h **** 
  62:../../../platform/common/services/serial/megarf_usart/usart_serial.h **** typedef usart_rs232_options_t usart_serial_options_t;
  63:../../../platform/common/services/serial/megarf_usart/usart_serial.h **** 
  64:../../../platform/common/services/serial/megarf_usart/usart_serial.h **** typedef USART_t *usart_if;
  65:../../../platform/common/services/serial/megarf_usart/usart_serial.h **** 
  66:../../../platform/common/services/serial/megarf_usart/usart_serial.h **** /*! \brief Initializes the Usart in master mode.
  67:../../../platform/common/services/serial/megarf_usart/usart_serial.h ****  *
  68:../../../platform/common/services/serial/megarf_usart/usart_serial.h ****  * \param usart       Base address of the USART instance.
  69:../../../platform/common/services/serial/megarf_usart/usart_serial.h ****  * \param options     Options needed to set up RS232 communication (see \ref
  70:../../../platform/common/services/serial/megarf_usart/usart_serial.h ****  * usart_serial_options_t).
  71:../../../platform/common/services/serial/megarf_usart/usart_serial.h ****  *
  72:../../../platform/common/services/serial/megarf_usart/usart_serial.h ****  * \retval true if the initialization was successful
  73:../../../platform/common/services/serial/megarf_usart/usart_serial.h ****  * \retval false if initialization failed (error in baud rate calculation)
  74:../../../platform/common/services/serial/megarf_usart/usart_serial.h ****  */
  75:../../../platform/common/services/serial/megarf_usart/usart_serial.h **** static inline bool usart_serial_init(usart_if usart, const
  76:../../../platform/common/services/serial/megarf_usart/usart_serial.h **** 		usart_serial_options_t *options)
  77:../../../platform/common/services/serial/megarf_usart/usart_serial.h **** {
 178               		.loc 3 77 0
 179               		.cfi_startproc
 180 0062 CF93      		push r28
 181               	.LCFI10:
 182               		.cfi_def_cfa_offset 3
 183               		.cfi_offset 28, -2
 184 0064 DF93      		push r29
 185               	.LCFI11:
 186               		.cfi_def_cfa_offset 4
 187               		.cfi_offset 29, -3
 188 0066 CDB7      		in r28,__SP_L__
 189 0068 DEB7      		in r29,__SP_H__
 190               	.LCFI12:
 191               		.cfi_def_cfa_register 28
 192 006a 2B97      		sbiw r28,11
 193               	.LCFI13:
 194               		.cfi_def_cfa_offset 15
 195 006c 0FB6      		in __tmp_reg__,__SREG__
 196 006e F894      		cli
 197 0070 DEBF      		out __SP_H__,r29
 198 0072 0FBE      		out __SREG__,__tmp_reg__
 199 0074 CDBF      		out __SP_L__,r28
 200               	/* prologue: function */
 201               	/* frame size = 11 */
 202               	/* stack size = 13 */
 203               	.L__stack_usage = 13
 204 0076 9987      		std Y+9,r25
 205 0078 8887      		std Y+8,r24
 206 007a 7B87      		std Y+11,r23
 207 007c 6A87      		std Y+10,r22
  78:../../../platform/common/services/serial/megarf_usart/usart_serial.h **** 	/* USART options. */
  79:../../../platform/common/services/serial/megarf_usart/usart_serial.h **** 	usart_rs232_options_t usart_rs232_options;
  80:../../../platform/common/services/serial/megarf_usart/usart_serial.h **** 	usart_rs232_options.charlength   = options->charlength;
 208               		.loc 3 80 0
 209 007e 8A85      		ldd r24,Y+10
 210 0080 9B85      		ldd r25,Y+11
 211 0082 FC01      		movw r30,r24
 212 0084 8481      		ldd r24,Z+4
 213 0086 8D83      		std Y+5,r24
  81:../../../platform/common/services/serial/megarf_usart/usart_serial.h **** 	usart_rs232_options.paritytype   = options->paritytype;
 214               		.loc 3 81 0
 215 0088 8A85      		ldd r24,Y+10
 216 008a 9B85      		ldd r25,Y+11
 217 008c FC01      		movw r30,r24
 218 008e 8581      		ldd r24,Z+5
 219 0090 8E83      		std Y+6,r24
  82:../../../platform/common/services/serial/megarf_usart/usart_serial.h **** 	usart_rs232_options.stopbits     = options->stopbits;
 220               		.loc 3 82 0
 221 0092 8A85      		ldd r24,Y+10
 222 0094 9B85      		ldd r25,Y+11
 223 0096 FC01      		movw r30,r24
 224 0098 8681      		ldd r24,Z+6
 225 009a 8F83      		std Y+7,r24
  83:../../../platform/common/services/serial/megarf_usart/usart_serial.h **** 	usart_rs232_options.baudrate     = options->baudrate;
 226               		.loc 3 83 0
 227 009c 8A85      		ldd r24,Y+10
 228 009e 9B85      		ldd r25,Y+11
 229 00a0 FC01      		movw r30,r24
 230 00a2 8081      		ld r24,Z
 231 00a4 9181      		ldd r25,Z+1
 232 00a6 A281      		ldd r26,Z+2
 233 00a8 B381      		ldd r27,Z+3
 234 00aa 8983      		std Y+1,r24
 235 00ac 9A83      		std Y+2,r25
 236 00ae AB83      		std Y+3,r26
 237 00b0 BC83      		std Y+4,r27
  84:../../../platform/common/services/serial/megarf_usart/usart_serial.h **** 
  85:../../../platform/common/services/serial/megarf_usart/usart_serial.h **** 	if (usart_init_rs232(usart, &usart_rs232_options)) {
 238               		.loc 3 85 0
 239 00b2 8885      		ldd r24,Y+8
 240 00b4 9985      		ldd r25,Y+9
 241 00b6 9E01      		movw r18,r28
 242 00b8 2F5F      		subi r18,-1
 243 00ba 3F4F      		sbci r19,-1
 244 00bc B901      		movw r22,r18
 245 00be 0E94 0000 		call usart_init_rs232
 246 00c2 8823      		tst r24
 247 00c4 01F0      		breq .L7
  86:../../../platform/common/services/serial/megarf_usart/usart_serial.h **** 		return true;
 248               		.loc 3 86 0
 249 00c6 81E0      		ldi r24,lo8(1)
 250 00c8 00C0      		rjmp .L9
 251               	.L7:
  87:../../../platform/common/services/serial/megarf_usart/usart_serial.h **** 	} else {
  88:../../../platform/common/services/serial/megarf_usart/usart_serial.h **** 		return false;
 252               		.loc 3 88 0
 253 00ca 80E0      		ldi r24,0
 254               	.L9:
 255               	/* epilogue start */
  89:../../../platform/common/services/serial/megarf_usart/usart_serial.h **** 	}
  90:../../../platform/common/services/serial/megarf_usart/usart_serial.h **** }
 256               		.loc 3 90 0 discriminator 1
 257 00cc 2B96      		adiw r28,11
 258 00ce 0FB6      		in __tmp_reg__,__SREG__
 259 00d0 F894      		cli
 260 00d2 DEBF      		out __SP_H__,r29
 261 00d4 0FBE      		out __SREG__,__tmp_reg__
 262 00d6 CDBF      		out __SP_L__,r28
 263 00d8 DF91      		pop r29
 264 00da CF91      		pop r28
 265 00dc 0895      		ret
 266               		.cfi_endproc
 267               	.LFE104:
 270               	usart_serial_putchar:
 271               	.LFB105:
  91:../../../platform/common/services/serial/megarf_usart/usart_serial.h **** 
  92:../../../platform/common/services/serial/megarf_usart/usart_serial.h **** /*! \brief Sends a character with the USART.
  93:../../../platform/common/services/serial/megarf_usart/usart_serial.h ****  *
  94:../../../platform/common/services/serial/megarf_usart/usart_serial.h ****  * \param usart   Base address of the USART instance.
  95:../../../platform/common/services/serial/megarf_usart/usart_serial.h ****  * \param c       Character to write.
  96:../../../platform/common/services/serial/megarf_usart/usart_serial.h ****  *
  97:../../../platform/common/services/serial/megarf_usart/usart_serial.h ****  * \return Status code
  98:../../../platform/common/services/serial/megarf_usart/usart_serial.h ****  */
  99:../../../platform/common/services/serial/megarf_usart/usart_serial.h **** static inline status_code_t usart_serial_putchar(usart_if usart, uint8_t c)
 100:../../../platform/common/services/serial/megarf_usart/usart_serial.h **** {
 272               		.loc 3 100 0
 273               		.cfi_startproc
 274 00de CF93      		push r28
 275               	.LCFI14:
 276               		.cfi_def_cfa_offset 3
 277               		.cfi_offset 28, -2
 278 00e0 DF93      		push r29
 279               	.LCFI15:
 280               		.cfi_def_cfa_offset 4
 281               		.cfi_offset 29, -3
 282 00e2 00D0      		rcall .
 283 00e4 1F92      		push __zero_reg__
 284               	.LCFI16:
 285               		.cfi_def_cfa_offset 7
 286 00e6 CDB7      		in r28,__SP_L__
 287 00e8 DEB7      		in r29,__SP_H__
 288               	.LCFI17:
 289               		.cfi_def_cfa_register 28
 290               	/* prologue: function */
 291               	/* frame size = 3 */
 292               	/* stack size = 5 */
 293               	.L__stack_usage = 5
 294 00ea 9A83      		std Y+2,r25
 295 00ec 8983      		std Y+1,r24
 296 00ee 6B83      		std Y+3,r22
 101:../../../platform/common/services/serial/megarf_usart/usart_serial.h **** 	return usart_putchar(usart, c);
 297               		.loc 3 101 0
 298 00f0 8981      		ldd r24,Y+1
 299 00f2 9A81      		ldd r25,Y+2
 300 00f4 6B81      		ldd r22,Y+3
 301 00f6 0E94 0000 		call usart_putchar
 302               	/* epilogue start */
 102:../../../platform/common/services/serial/megarf_usart/usart_serial.h **** }
 303               		.loc 3 102 0
 304 00fa 0F90      		pop __tmp_reg__
 305 00fc 0F90      		pop __tmp_reg__
 306 00fe 0F90      		pop __tmp_reg__
 307 0100 DF91      		pop r29
 308 0102 CF91      		pop r28
 309 0104 0895      		ret
 310               		.cfi_endproc
 311               	.LFE105:
 314               	usart_serial_getchar:
 315               	.LFB106:
 103:../../../platform/common/services/serial/megarf_usart/usart_serial.h **** 
 104:../../../platform/common/services/serial/megarf_usart/usart_serial.h **** /*! \brief Waits until a character is received, and returns it.
 105:../../../platform/common/services/serial/megarf_usart/usart_serial.h ****  *
 106:../../../platform/common/services/serial/megarf_usart/usart_serial.h ****  * \param usart   Base address of the USART instance.
 107:../../../platform/common/services/serial/megarf_usart/usart_serial.h ****  * \param data   Data to read
 108:../../../platform/common/services/serial/megarf_usart/usart_serial.h ****  *
 109:../../../platform/common/services/serial/megarf_usart/usart_serial.h ****  */
 110:../../../platform/common/services/serial/megarf_usart/usart_serial.h **** static inline void usart_serial_getchar(usart_if usart, uint8_t *data)
 111:../../../platform/common/services/serial/megarf_usart/usart_serial.h **** {
 316               		.loc 3 111 0
 317               		.cfi_startproc
 318 0106 CF93      		push r28
 319               	.LCFI18:
 320               		.cfi_def_cfa_offset 3
 321               		.cfi_offset 28, -2
 322 0108 DF93      		push r29
 323               	.LCFI19:
 324               		.cfi_def_cfa_offset 4
 325               		.cfi_offset 29, -3
 326 010a 00D0      		rcall .
 327 010c 00D0      		rcall .
 328               	.LCFI20:
 329               		.cfi_def_cfa_offset 8
 330 010e CDB7      		in r28,__SP_L__
 331 0110 DEB7      		in r29,__SP_H__
 332               	.LCFI21:
 333               		.cfi_def_cfa_register 28
 334               	/* prologue: function */
 335               	/* frame size = 4 */
 336               	/* stack size = 6 */
 337               	.L__stack_usage = 6
 338 0112 9A83      		std Y+2,r25
 339 0114 8983      		std Y+1,r24
 340 0116 7C83      		std Y+4,r23
 341 0118 6B83      		std Y+3,r22
 112:../../../platform/common/services/serial/megarf_usart/usart_serial.h **** 	*data = usart_getchar(usart);
 342               		.loc 3 112 0
 343 011a 8981      		ldd r24,Y+1
 344 011c 9A81      		ldd r25,Y+2
 345 011e 0E94 0000 		call usart_getchar
 346 0122 282F      		mov r18,r24
 347 0124 8B81      		ldd r24,Y+3
 348 0126 9C81      		ldd r25,Y+4
 349 0128 FC01      		movw r30,r24
 350 012a 2083      		st Z,r18
 113:../../../platform/common/services/serial/megarf_usart/usart_serial.h **** }
 351               		.loc 3 113 0
 352 012c 0000      		nop
 353               	/* epilogue start */
 354 012e 0F90      		pop __tmp_reg__
 355 0130 0F90      		pop __tmp_reg__
 356 0132 0F90      		pop __tmp_reg__
 357 0134 0F90      		pop __tmp_reg__
 358 0136 DF91      		pop r29
 359 0138 CF91      		pop r28
 360 013a 0895      		ret
 361               		.cfi_endproc
 362               	.LFE106:
 365               	stdio_serial_init:
 366               	.LFB107:
 367               		.file 4 "../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h"
   1:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h **** /**
   2:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h ****  *
   3:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h ****  * \file
   4:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h ****  *
   5:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h ****  * \brief Common Standard I/O Serial Management.
   6:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h ****  *
   7:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h ****  * This file defines a useful set of functions for the Stdio Serial interface on AVR
   8:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h ****  * and SAM devices.
   9:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h ****  *
  10:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h ****  * Copyright (c) 2009-2013 Atmel Corporation. All rights reserved.
  11:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h ****  *
  12:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h ****  * \asf_license_start
  13:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h ****  *
  14:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h ****  * \page License
  15:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h ****  *
  16:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h ****  * Redistribution and use in source and binary forms, with or without
  17:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h ****  * modification, are permitted provided that the following conditions are met:
  18:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h ****  *
  19:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h ****  * 1. Redistributions of source code must retain the above copyright notice,
  20:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h ****  *    this list of conditions and the following disclaimer.
  21:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h ****  *
  22:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h ****  * 2. Redistributions in binary form must reproduce the above copyright notice,
  23:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h ****  *    this list of conditions and the following disclaimer in the documentation
  24:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h ****  *    and/or other materials provided with the distribution.
  25:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h ****  *
  26:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h ****  * 3. The name of Atmel may not be used to endorse or promote products derived
  27:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h ****  *    from this software without specific prior written permission.
  28:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h ****  *
  29:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h ****  * 4. This software may only be redistributed and used in connection with an
  30:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h ****  *    Atmel microcontroller product.
  31:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h ****  *
  32:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h ****  * THIS SOFTWARE IS PROVIDED BY ATMEL "AS IS" AND ANY EXPRESS OR IMPLIED
  33:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h ****  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
  34:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h ****  * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE
  35:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h ****  * EXPRESSLY AND SPECIFICALLY DISCLAIMED. IN NO EVENT SHALL ATMEL BE LIABLE FOR
  36:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h ****  * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  37:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h ****  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
  38:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h ****  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
  39:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h ****  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
  40:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h ****  * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
  41:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h ****  * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  42:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h ****  * POSSIBILITY OF SUCH DAMAGE.
  43:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h ****  *
  44:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h ****  * \asf_license_stop
  45:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h ****  *
  46:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h ****  ******************************************************************************/
  47:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h **** 
  48:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h **** 
  49:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h **** #ifndef _STDIO_SERIAL_H_
  50:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h **** #define _STDIO_SERIAL_H_
  51:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h **** 
  52:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h **** /**
  53:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h ****  * \defgroup group_common_utils_stdio_stdio_serial Standard serial I/O (stdio)
  54:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h ****  * \ingroup group_common_utils_stdio
  55:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h ****  *
  56:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h ****  * Common standard serial I/O management driver that
  57:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h ****  * implements a stdio serial interface on AVR and SAM devices.
  58:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h ****  *
  59:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h ****  * \{
  60:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h ****  */
  61:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h **** 
  62:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h **** #include <stdio.h>
  63:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h **** #include "compiler.h"
  64:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h **** #ifndef SAMD20
  65:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h **** # include "sysclk.h"
  66:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h **** #endif
  67:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h **** #include "serial.h"
  68:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h **** 
  69:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h **** #if (XMEGA || MEGA_RF) && defined(__GNUC__)
  70:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h **** 	extern int _write (char c, int *f);
  71:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h **** 	extern int _read (int *f);
  72:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h **** #endif
  73:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h **** 
  74:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h **** 
  75:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h **** //! Pointer to the base of the USART module instance to use for stdio.
  76:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h **** extern volatile void *volatile stdio_base;
  77:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h **** //! Pointer to the external low level write function.
  78:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h **** extern int (*ptr_put)(void volatile*, char);
  79:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h **** 
  80:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h **** //! Pointer to the external low level read function.
  81:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h **** extern void (*ptr_get)(void volatile*, char*);
  82:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h **** 
  83:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h **** /*! \brief Initializes the stdio in Serial Mode.
  84:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h ****  *
  85:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h ****  * \param usart       Base address of the USART instance.
  86:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h ****  * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
  87:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h ****  *
  88:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h ****  */
  89:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h **** static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
  90:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h **** {
 368               		.loc 4 90 0
 369               		.cfi_startproc
 370 013c CF93      		push r28
 371               	.LCFI22:
 372               		.cfi_def_cfa_offset 3
 373               		.cfi_offset 28, -2
 374 013e DF93      		push r29
 375               	.LCFI23:
 376               		.cfi_def_cfa_offset 4
 377               		.cfi_offset 29, -3
 378 0140 00D0      		rcall .
 379 0142 00D0      		rcall .
 380               	.LCFI24:
 381               		.cfi_def_cfa_offset 8
 382 0144 CDB7      		in r28,__SP_L__
 383 0146 DEB7      		in r29,__SP_H__
 384               	.LCFI25:
 385               		.cfi_def_cfa_register 28
 386               	/* prologue: function */
 387               	/* frame size = 4 */
 388               	/* stack size = 6 */
 389               	.L__stack_usage = 6
 390 0148 9A83      		std Y+2,r25
 391 014a 8983      		std Y+1,r24
 392 014c 7C83      		std Y+4,r23
 393 014e 6B83      		std Y+3,r22
  91:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h **** 	stdio_base = (void *)usart;
 394               		.loc 4 91 0
 395 0150 8981      		ldd r24,Y+1
 396 0152 9A81      		ldd r25,Y+2
 397 0154 9093 0000 		sts stdio_base+1,r25
 398 0158 8093 0000 		sts stdio_base,r24
  92:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h **** 	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
 399               		.loc 4 92 0
 400 015c 80E0      		ldi r24,lo8(gs(usart_serial_putchar))
 401 015e 90E0      		ldi r25,hi8(gs(usart_serial_putchar))
 402 0160 9093 0000 		sts ptr_put+1,r25
 403 0164 8093 0000 		sts ptr_put,r24
  93:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h **** 	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
 404               		.loc 4 93 0
 405 0168 80E0      		ldi r24,lo8(gs(usart_serial_getchar))
 406 016a 90E0      		ldi r25,hi8(gs(usart_serial_getchar))
 407 016c 9093 0000 		sts ptr_get+1,r25
 408 0170 8093 0000 		sts ptr_get,r24
  94:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h **** # if (XMEGA || MEGA_RF)
  95:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h **** 	usart_serial_init((USART_t *)usart,opt);
 409               		.loc 4 95 0
 410 0174 2B81      		ldd r18,Y+3
 411 0176 3C81      		ldd r19,Y+4
 412 0178 8981      		ldd r24,Y+1
 413 017a 9A81      		ldd r25,Y+2
 414 017c B901      		movw r22,r18
 415 017e 0E94 0000 		call usart_serial_init
  96:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h **** # elif UC3
  97:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h **** 	usart_serial_init(usart,(usart_serial_options_t *)opt);
  98:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h **** # elif SAM
  99:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h **** 	usart_serial_init((Usart *)usart,(usart_serial_options_t *)opt);
 100:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h **** # else
 101:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h **** #  error Unsupported chip type
 102:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h **** # endif
 103:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h **** 
 104:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h **** # if defined(__GNUC__)
 105:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h **** #  if (XMEGA || MEGA_RF)
 106:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h **** 	// For AVR GCC libc print redirection uses fdevopen.
 107:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h **** 	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
 416               		.loc 4 107 0
 417 0182 60E0      		ldi r22,lo8(gs(_read))
 418 0184 70E0      		ldi r23,hi8(gs(_read))
 419 0186 80E0      		ldi r24,lo8(gs(_write))
 420 0188 90E0      		ldi r25,hi8(gs(_write))
 421 018a 0E94 0000 		call fdevopen
 108:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h **** #  endif
 109:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h **** #  if UC3 || SAM
 110:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h **** 	// For AVR32 and SAM GCC
 111:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h **** 	// Specify that stdout and stdin should not be buffered.
 112:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h **** 	setbuf(stdout, NULL);
 113:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h **** 	setbuf(stdin, NULL);
 114:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h **** 	// Note: Already the case in IAR's Normal DLIB default configuration
 115:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h **** 	// and AVR GCC library:
 116:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h **** 	// - printf() emits one character at a time.
 117:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h **** 	// - getchar() requests only 1 byte to exit.
 118:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h **** #  endif
 119:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h **** # endif
 120:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h **** }
 422               		.loc 4 120 0
 423 018e 0000      		nop
 424               	/* epilogue start */
 425 0190 0F90      		pop __tmp_reg__
 426 0192 0F90      		pop __tmp_reg__
 427 0194 0F90      		pop __tmp_reg__
 428 0196 0F90      		pop __tmp_reg__
 429 0198 DF91      		pop r29
 430 019a CF91      		pop r28
 431 019c 0895      		ret
 432               		.cfi_endproc
 433               	.LFE107:
 436               	macsc_read32:
 437               	.LFB108:
 438               		.file 5 "../../../platform/mega_rf/drivers/macsc/macsc_megarf.h"
   1:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** /**
   2:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * \file
   3:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  *
   4:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * \brief AVR MEGARF MAC Symbol Counter Driver Definitions
   5:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  *
   6:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * Copyright (c) 2013 Atmel Corporation. All rights reserved.
   7:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  *
   8:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * \asf_license_start
   9:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  *
  10:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * \page License
  11:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  *
  12:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * Redistribution and use in source and binary forms, with or without
  13:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * modification, are permitted provided that the following conditions are met:
  14:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  *
  15:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * 1. Redistributions of source code must retain the above copyright notice,
  16:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  *    this list of conditions and the following disclaimer.
  17:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  *
  18:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * 2. Redistributions in binary form must reproduce the above copyright notice,
  19:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  *    this list of conditions and the following disclaimer in the documentation
  20:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  *    and/or other materials provided with the distribution.
  21:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  *
  22:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * 3. The name of Atmel may not be used to endorse or promote products derived
  23:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  *    from this software without specific prior written permission.
  24:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  *
  25:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * 4. This software may only be redistributed and used in connection with an
  26:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  *    Atmel microcontroller product.
  27:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  *
  28:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * THIS SOFTWARE IS PROVIDED BY ATMEL "AS IS" AND ANY EXPRESS OR IMPLIED
  29:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
  30:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE
  31:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * EXPRESSLY AND SPECIFICALLY DISCLAIMED. IN NO EVENT SHALL ATMEL BE LIABLE FOR
  32:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  33:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
  34:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
  35:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
  36:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
  37:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  38:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * POSSIBILITY OF SUCH DAMAGE.
  39:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  *
  40:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * \asf_license_stop
  41:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  *
  42:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  */
  43:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** #ifndef MACSC_MEGARF_H
  44:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** #define MACSC_MEGARF_H
  45:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 
  46:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** #include <compiler.h>
  47:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** #include <parts.h>
  48:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** #include "status_codes.h"
  49:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 
  50:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** #ifdef __cplusplus
  51:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** extern "C" {
  52:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** #endif
  53:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 
  54:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** /**
  55:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * \defgroup macsc_group MAC Symbol Counter Driver(MACSC)
  56:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  *
  57:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * See \ref megarf_macsc_quickstart
  58:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  *
  59:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * This is a driver for the AVR MEGARF MAC Symbol Counter Driver(MACSC).
  60:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * It provides functions for enabling, disabling and configuring the module.
  61:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  *
  62:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * \section dependencies Dependencies
  63:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * This driver depends on the following modules:
  64:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * - \ref interrupt_group for ISR definition and disabling interrupts during
  65:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * critical code sections.
  66:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * @{
  67:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  */
  68:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 
  69:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** /**
  70:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * \brief Interrupt event callback function type
  71:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  *
  72:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * The interrupt handler can be configured to do a function callback,
  73:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * the callback function must match the macsc_callback_t type.
  74:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  *
  75:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  */
  76:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** typedef void (*macsc_callback_t)(void);
  77:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 
  78:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** /* ! MAC symbol counter compare Channel index */
  79:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** enum macsc_cc_channel {
  80:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 	/* ! Channel 1 */
  81:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 	MACSC_CC1 = 1,
  82:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 	/* ! Channel 2 */
  83:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 	MACSC_CC2 = 2,
  84:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 	/* ! Channel 3 */
  85:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 	MACSC_CC3 = 3,
  86:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** };
  87:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** /**
  88:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * \brief MAC SC clock source select
  89:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  *
  90:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * uses the SCCKSEL bit in SSCR register to select macsc clk src
  91:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  *
  92:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * If the bit is one,the RTC clock from TOSC1 is selected, otherwise the symbol
  93:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * counter operates with the clock from XTAL1.
  94:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * During transceiver sleep modes the clock falls back to the RTC clock source,
  95:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * regardless of the selected clock. After wakeup, it switches back to the
  96:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * previosly
  97:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * selected clock source.
  98:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  */
  99:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 
 100:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** enum macsc_xtal {
 101:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 	/* ! 16MHz as macsc clock */
 102:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 	MACSC_16MHz = 0,
 103:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 	MACSC_32KHz = 1,
 104:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** };
 105:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 
 106:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** /**
 107:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * @brief Reads the 32-bit timer register in the required order of bytes
 108:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  *
 109:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * @param hh hh octet of 32-bit register
 110:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * @param hl hl octet of 32-bit register
 111:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * @param lh lh octet of 32-bit register
 112:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * @param ll ll octet of 32-bit register
 113:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  *
 114:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * @returns uint32_t Value of timer register
 115:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  */
 116:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** static inline uint32_t macsc_read32(volatile uint8_t *hh,
 117:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 		volatile uint8_t *hl,
 118:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 		volatile uint8_t *lh,
 119:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 		volatile uint8_t *ll)
 120:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** {
 439               		.loc 5 120 0
 440               		.cfi_startproc
 441 019e CF93      		push r28
 442               	.LCFI26:
 443               		.cfi_def_cfa_offset 3
 444               		.cfi_offset 28, -2
 445 01a0 DF93      		push r29
 446               	.LCFI27:
 447               		.cfi_def_cfa_offset 4
 448               		.cfi_offset 29, -3
 449 01a2 CDB7      		in r28,__SP_L__
 450 01a4 DEB7      		in r29,__SP_H__
 451               	.LCFI28:
 452               		.cfi_def_cfa_register 28
 453 01a6 2C97      		sbiw r28,12
 454               	.LCFI29:
 455               		.cfi_def_cfa_offset 16
 456 01a8 0FB6      		in __tmp_reg__,__SREG__
 457 01aa F894      		cli
 458 01ac DEBF      		out __SP_H__,r29
 459 01ae 0FBE      		out __SREG__,__tmp_reg__
 460 01b0 CDBF      		out __SP_L__,r28
 461               	/* prologue: function */
 462               	/* frame size = 12 */
 463               	/* stack size = 14 */
 464               	.L__stack_usage = 14
 465 01b2 9E83      		std Y+6,r25
 466 01b4 8D83      		std Y+5,r24
 467 01b6 7887      		std Y+8,r23
 468 01b8 6F83      		std Y+7,r22
 469 01ba 5A87      		std Y+10,r21
 470 01bc 4987      		std Y+9,r20
 471 01be 3C87      		std Y+12,r19
 472 01c0 2B87      		std Y+11,r18
 121:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 	union {
 122:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 		uint8_t a[4];
 123:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 		uint32_t rv;
 124:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 	}
 125:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 	x;
 126:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 
 127:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 	x.a[0] = *ll;
 473               		.loc 5 127 0
 474 01c2 8B85      		ldd r24,Y+11
 475 01c4 9C85      		ldd r25,Y+12
 476 01c6 FC01      		movw r30,r24
 477 01c8 8081      		ld r24,Z
 478 01ca 8983      		std Y+1,r24
 128:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 	x.a[1] = *lh;
 479               		.loc 5 128 0
 480 01cc 8985      		ldd r24,Y+9
 481 01ce 9A85      		ldd r25,Y+10
 482 01d0 FC01      		movw r30,r24
 483 01d2 8081      		ld r24,Z
 484 01d4 8A83      		std Y+2,r24
 129:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 	x.a[2] = *hl;
 485               		.loc 5 129 0
 486 01d6 8F81      		ldd r24,Y+7
 487 01d8 9885      		ldd r25,Y+8
 488 01da FC01      		movw r30,r24
 489 01dc 8081      		ld r24,Z
 490 01de 8B83      		std Y+3,r24
 130:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 	x.a[3] = *hh;
 491               		.loc 5 130 0
 492 01e0 8D81      		ldd r24,Y+5
 493 01e2 9E81      		ldd r25,Y+6
 494 01e4 FC01      		movw r30,r24
 495 01e6 8081      		ld r24,Z
 496 01e8 8C83      		std Y+4,r24
 131:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 
 132:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 	return x.rv;
 497               		.loc 5 132 0
 498 01ea 8981      		ldd r24,Y+1
 499 01ec 9A81      		ldd r25,Y+2
 500 01ee AB81      		ldd r26,Y+3
 501 01f0 BC81      		ldd r27,Y+4
 133:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** }
 502               		.loc 5 133 0
 503 01f2 BC01      		movw r22,r24
 504 01f4 CD01      		movw r24,r26
 505               	/* epilogue start */
 506 01f6 2C96      		adiw r28,12
 507 01f8 0FB6      		in __tmp_reg__,__SREG__
 508 01fa F894      		cli
 509 01fc DEBF      		out __SP_H__,r29
 510 01fe 0FBE      		out __SREG__,__tmp_reg__
 511 0200 CDBF      		out __SP_L__,r28
 512 0202 DF91      		pop r29
 513 0204 CF91      		pop r28
 514 0206 0895      		ret
 515               		.cfi_endproc
 516               	.LFE108:
 519               	macsc_read_count:
 520               	.LFB114:
 134:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 
 135:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** /* ! compare modes */
 136:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** #define MACSC_ABSOLUTE_CMP 0
 137:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** #define MACSC_RELATIVE_CMP 1
 138:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 
 139:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** /** String concatenation by preprocessor used to create proper register names.
 140:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  **/
 141:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** #define CONCAT(a, b) a ## b
 142:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 
 143:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** /** Creates proper subregister names and reads the corresponding values. */
 144:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** #define MACSC_READ32(reg)                  macsc_read32(&CONCAT(reg, HH), \
 145:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 		&CONCAT(reg, HL), \
 146:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 		&CONCAT(reg, LH), \
 147:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 		&CONCAT(reg, LL))
 148:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 
 149:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** #define MACSC_WRITE32(reg, val)	\
 150:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 	do { \
 151:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 		union { uint8_t a[4]; uint32_t v; } \
 152:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 		x; \
 153:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 		x.v = val; \
 154:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 		CONCAT(reg, HH) = x.a[3]; \
 155:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 		CONCAT(reg, HL) = x.a[2]; \
 156:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 		CONCAT(reg, LH) = x.a[1]; \
 157:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 		CONCAT(reg, LL) = x.a[0]; \
 158:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 	} \
 159:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 	while (0)
 160:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 
 161:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** /**
 162:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * \brief Enable MAC SC
 163:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  *
 164:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * Enables the SC
 165:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  *
 166:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * \param clk_src selection of clk source,avalable options in macsc_xtal,fixed
 167:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  *  prescalar
 168:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * \param sleep_enable enable RTC as clock source during sleep
 169:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * \param auto_ts enable automatic timestamping
 170:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  *
 171:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  */
 172:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** void macsc_enable(void);
 173:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 
 174:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** /**
 175:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * \brief Check if MACSC is enabled
 176:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  *
 177:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * check if the MACSC is enabled.
 178:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  *
 179:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * \param none
 180:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  *
 181:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  */
 182:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** bool is_macsc_enable(void);
 183:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 
 184:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** /**
 185:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * \brief Disable MAC SC
 186:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  *
 187:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * Disables the MAC SC
 188:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  *
 189:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * \param none
 190:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  *
 191:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  */
 192:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** void macsc_disable(void);
 193:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 
 194:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** /**
 195:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * \brief Check if back-off slot counter is enabled
 196:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  *
 197:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * check if the back-off slot counter is enabled.
 198:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  *
 199:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * \param none
 200:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  *
 201:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  */
 202:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** bool is_macsc_backoff_enable(void);
 203:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 
 204:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** /**
 205:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * \brief Enables compare interrupts of the MACSC
 206:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  *
 207:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * \param channel Compare channel
 208:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  */
 209:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** void macsc_enable_cmp_int(enum macsc_cc_channel channel);
 210:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 
 211:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** /**
 212:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * \brief Disables compare interrupts of the MACSC
 213:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  *
 214:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * \param channel Compare channel
 215:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  */void macsc_disable_cmp_int(enum macsc_cc_channel channel);
 216:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 
 217:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** /**
 218:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * \brief Usage of Absolute compare mode of the MACSC
 219:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  *
 220:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * \param abs_rel  0 for absoulte cmp;1 for relative cmp
 221:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * \param cmp compare value for SCOCRx register
 222:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * \param channel Compare channel
 223:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  */
 224:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** void macsc_use_cmp(bool abs_rel, uint32_t cmp,enum macsc_cc_channel channel);
 225:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 
 226:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** /**
 227:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * \ingroup macsc_group
 228:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * \defgroup macsc_interrupt_group MAC Symbol Counter (MACSC) interrupt
 229:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * management
 230:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * This group provides functions to configure MACSC module interrupts
 231:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  *
 232:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * @{
 233:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  */
 234:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 
 235:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** /**
 236:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * \brief Set MACSC overflow interrupt callback function
 237:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  *
 238:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * This function allows the caller to set and change the interrupt callback
 239:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * function. Without setting a callback function the interrupt handler in the
 240:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * driver will only clear the interrupt flags.
 241:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  *
 242:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * \param callback Reference to a callback function
 243:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  */
 244:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** void macsc_set_ovf_int_cb(macsc_callback_t callback);
 245:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 
 246:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** /**
 247:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * \brief Set MACSC Compare Channel 1 interrupt callback function
 248:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  *
 249:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * This function allows the caller to set and change the interrupt callback
 250:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * function. Without setting a callback function the interrupt handler in the
 251:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * driver will only clear the interrupt flags.
 252:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  *
 253:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * \param callback Reference to a callback function
 254:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  */
 255:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** void macsc_set_cmp1_int_cb(macsc_callback_t callback);
 256:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 
 257:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** /**
 258:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * \brief Set MACSC Compare Channel 2 interrupt callback function
 259:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  *
 260:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * This function allows the caller to set and change the interrupt callback
 261:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * function. Without setting a callback function the interrupt handler in the
 262:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * driver will only clear the interrupt flags.
 263:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  *
 264:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * \param callback Reference to a callback function
 265:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  */
 266:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** void macsc_set_cmp2_int_cb(macsc_callback_t callback);
 267:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 
 268:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** /**
 269:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * \brief Set MACSC Compare Channel 3 interrupt callback function
 270:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  *
 271:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * This function allows the caller to set and change the interrupt callback
 272:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * function. Without setting a callback function the interrupt handler in the
 273:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * driver will only clear the interrupt flags.
 274:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  *
 275:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * \param callback Reference to a callback function
 276:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  */
 277:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** void macsc_set_cmp3_int_cb(macsc_callback_t callback);
 278:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 
 279:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** /**
 280:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * \brief Set MACSC backoff slot counter interrupt callback function
 281:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  *
 282:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * This function allows the caller to set and change the interrupt callback
 283:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * function. Without setting a callback function the interrupt handler in the
 284:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * driver will only clear the interrupt flags.
 285:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  *
 286:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * \param callback Reference to a callback function
 287:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  */
 288:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** void macsc_set_backoff_slot_cntr_int_cb(macsc_callback_t callback);
 289:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** //@}
 290:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 
 291:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** /**
 292:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * \brief Enable 32.768KHz clk using timer 2 async register
 293:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  *
 294:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * \param none
 295:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  */
 296:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 
 297:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** static inline void macsc_sleep_clk_enable(void)
 298:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** {
 299:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 	ASSR |= (1 << AS2);
 300:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** }
 301:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 
 302:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** /**
 303:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * \brief Disable 32.768KHz clk using timer 2 async register
 304:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  *
 305:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * \param none
 306:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  */
 307:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** static inline void macsc_sleep_clk_disable(void)
 308:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** {
 309:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 	ASSR &= ~(1 << AS2);
 310:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** }
 311:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 
 312:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** /* @} */
 313:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 
 314:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** /**
 315:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * \brief Configure MAC Symbol Counter Clock Source
 316:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  *
 317:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * \param macsc macsc clk src
 318:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  */
 319:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** static inline void macsc_write_clock_source(enum macsc_xtal source)
 320:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** {
 321:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 	if (source == MACSC_16MHz) {
 322:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 		SCCR0 |= (source << SCCKSEL);
 323:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 	} else if (source == MACSC_32KHz) {
 324:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 		SCCR0 &= ~(1 << SCCKSEL);
 325:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 	}
 326:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** }
 327:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 
 328:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** /**
 329:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * \brief Read MAC SC Clock Source
 330:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  *
 331:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * \param none
 332:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * \return macsc_xtal enum Clock source selection
 333:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  */
 334:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** static inline enum macsc_xtal macsc_read_clock_source(void)
 335:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** {
 336:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 	return (enum macsc_xtal)(SCCR0 & (1 << SCCKSEL));
 337:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** }
 338:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 
 339:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** /**
 340:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * \brief Write the Counter value of the MAC Symbol counter
 341:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  *
 342:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * \param cnt_value Counter value
 343:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  */
 344:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** static inline void macsc_write_count(uint32_t cnt_value)
 345:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** {
 346:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 	MACSC_WRITE32(SCCNT, cnt_value);
 347:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** }
 348:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 
 349:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** /**
 350:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * \brief Reads the Counter value of the MAC Symbol counter
 351:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  *
 352:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * \note Output the Counter value
 353:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  */
 354:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** static inline uint32_t macsc_read_count(void)
 355:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** {
 521               		.loc 5 355 0
 522               		.cfi_startproc
 523 0208 CF93      		push r28
 524               	.LCFI30:
 525               		.cfi_def_cfa_offset 3
 526               		.cfi_offset 28, -2
 527 020a DF93      		push r29
 528               	.LCFI31:
 529               		.cfi_def_cfa_offset 4
 530               		.cfi_offset 29, -3
 531 020c CDB7      		in r28,__SP_L__
 532 020e DEB7      		in r29,__SP_H__
 533               	.LCFI32:
 534               		.cfi_def_cfa_register 28
 535               	/* prologue: function */
 536               	/* frame size = 0 */
 537               	/* stack size = 2 */
 538               	.L__stack_usage = 2
 356:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 	return (MACSC_READ32(SCCNT));
 539               		.loc 5 356 0
 540 0210 21EE      		ldi r18,lo8(-31)
 541 0212 30E0      		ldi r19,0
 542 0214 42EE      		ldi r20,lo8(-30)
 543 0216 50E0      		ldi r21,0
 544 0218 63EE      		ldi r22,lo8(-29)
 545 021a 70E0      		ldi r23,0
 546 021c 84EE      		ldi r24,lo8(-28)
 547 021e 90E0      		ldi r25,0
 548 0220 0E94 0000 		call macsc_read32
 549 0224 DC01      		movw r26,r24
 550 0226 CB01      		movw r24,r22
 357:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** }
 551               		.loc 5 357 0
 552 0228 BC01      		movw r22,r24
 553 022a CD01      		movw r24,r26
 554               	/* epilogue start */
 555 022c DF91      		pop r29
 556 022e CF91      		pop r28
 557 0230 0895      		ret
 558               		.cfi_endproc
 559               	.LFE114:
 562               	macsc_enable_manual_bts:
 563               	.LFB121:
 358:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 
 359:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** /**
 360:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * \brief enable back-off slot counter
 361:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  *
 362:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * \param none
 363:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * \note  Enables interrupt as well	.
 364:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * \note This counter works only if transceiver clock is running.So check Trx
 365:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * state in app before using this function in IEEE802.15.4 applications.
 366:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  */
 367:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** static inline bool macsc_backoff_slot_cnt_enable(void)
 368:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** {
 369:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 	if (!(PRR1 & (1 << PRTRX24))) {
 370:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 		SCCR1 = (1 << SCENBO);
 371:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 		SCIRQS |= (1 << IRQSBO);
 372:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 		SCIRQM |= (1 << IRQMBO);
 373:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 		return true;
 374:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 	}
 375:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 	else return false;
 376:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** }
 377:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 
 378:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** /**
 379:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * \brief Disable back-off slot counter
 380:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  *
 381:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * \param none
 382:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * \note    Disables interrupt as well	.
 383:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * \note This counter works only if transceiver clock is running.So check Trx
 384:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * state in app before using this function in IEEE802.15.4 applications.
 385:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  */
 386:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** static inline void macsc_backoff_slot_cnt_disable(void)
 387:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** {
 388:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 	SCCR1 &= ~(1 << SCENBO);
 389:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 	SCIRQM &= ~(1 << IRQMBO);
 390:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** }
 391:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 
 392:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** /**
 393:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * \brief Tests if the Backoff slot cntr interrupt flag is set
 394:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  *
 395:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * \return  backoff slot cntr interrupt has occurred or not : IRQSBO
 396:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  */
 397:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** static inline bool macsc_is_slot_cntr_interrupt_flag_set(void)
 398:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** {
 399:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 	return (SCIRQS & (1 << IRQSBO));
 400:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** }
 401:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 
 402:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** /**
 403:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * \brief Clears the Backoff Slot cntr interrupt flag
 404:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  *
 405:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * \note  IRQSBO is cleared
 406:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  */
 407:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** static inline void macsc_clear_slot_cntr_interrupt_flag(void)
 408:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** {
 409:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 	SCIRQS |= (1 << IRQSBO);
 410:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** }
 411:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 
 412:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** /**
 413:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * \brief Reads the SFD Timestamp register
 414:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  *
 415:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * \return Timestamp of last received frame :SCTSR(read-only register)
 416:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  */
 417:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** static inline uint32_t macsc_read_ts(void)
 418:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** {
 419:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 	return (MACSC_READ32(SCTSR));
 420:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** }
 421:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 
 422:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** /**
 423:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * \brief Reads the Beacon Timestamp register
 424:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  *
 425:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * \return Timestamp of last received beacon frame :SCBTSR
 426:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  */
 427:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** static inline uint32_t macsc_read_bts(void)
 428:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** {
 429:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 	return (MACSC_READ32(SCBTSR));
 430:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** }
 431:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 
 432:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** /**
 433:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * \brief Write the Beacon Timestamp register of the MAC Symbol counter
 434:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * The manual beacon timestamping can be used in conjunction with the
 435:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * relative compare mode of the three compare units to generate compare match
 436:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * interrupts without having a beacon frame received
 437:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  *
 438:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * If set to 1, the current symbol counter value is stored into the beacon
 439:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * timestamp register.
 440:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * The bit is cleared afterwards.
 441:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  *
 442:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  */
 443:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** static inline void macsc_enable_manual_bts(void)
 444:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** {
 564               		.loc 5 444 0
 565               		.cfi_startproc
 566 0232 CF93      		push r28
 567               	.LCFI33:
 568               		.cfi_def_cfa_offset 3
 569               		.cfi_offset 28, -2
 570 0234 DF93      		push r29
 571               	.LCFI34:
 572               		.cfi_def_cfa_offset 4
 573               		.cfi_offset 29, -3
 574 0236 CDB7      		in r28,__SP_L__
 575 0238 DEB7      		in r29,__SP_H__
 576               	.LCFI35:
 577               		.cfi_def_cfa_register 28
 578               	/* prologue: function */
 579               	/* frame size = 0 */
 580               	/* stack size = 2 */
 581               	.L__stack_usage = 2
 445:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 	SCCR0 |= (1 << SCMBTS);
 582               		.loc 5 445 0
 583 023a 8CED      		ldi r24,lo8(-36)
 584 023c 90E0      		ldi r25,0
 585 023e 2CED      		ldi r18,lo8(-36)
 586 0240 30E0      		ldi r19,0
 587 0242 F901      		movw r30,r18
 588 0244 2081      		ld r18,Z
 589 0246 2064      		ori r18,lo8(64)
 590 0248 FC01      		movw r30,r24
 591 024a 2083      		st Z,r18
 446:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 	SCCR0 &= ~(1 << SCTSE);
 592               		.loc 5 446 0
 593 024c 8CED      		ldi r24,lo8(-36)
 594 024e 90E0      		ldi r25,0
 595 0250 2CED      		ldi r18,lo8(-36)
 596 0252 30E0      		ldi r19,0
 597 0254 F901      		movw r30,r18
 598 0256 2081      		ld r18,Z
 599 0258 277F      		andi r18,lo8(-9)
 600 025a FC01      		movw r30,r24
 601 025c 2083      		st Z,r18
 447:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** }
 602               		.loc 5 447 0
 603 025e 0000      		nop
 604               	/* epilogue start */
 605 0260 DF91      		pop r29
 606 0262 CF91      		pop r28
 607 0264 0895      		ret
 608               		.cfi_endproc
 609               	.LFE121:
 611               	.global	state
 612               		.section	.bss.state,"aw",@nobits
 615               	state:
 616 0000 00        		.zero	1
 617               		.comm	rec_beacon,8,1
 618               		.section	.bss.msgReq,"aw",@nobits
 621               	msgReq:
 622 0000 0000 0000 		.zero	20
 622      0000 0000 
 622      0000 0000 
 622      0000 0000 
 622      0000 0000 
 623               		.section	.bss.PanId,"aw",@nobits
 626               	PanId:
 627 0000 00        		.zero	1
 628               	.global	beaconInterval_association
 629               		.section	.bss.beaconInterval_association,"aw",@nobits
 632               	beaconInterval_association:
 633 0000 0000 0000 		.zero	4
 634               	.global	counter
 635               		.section	.bss.counter,"aw",@nobits
 638               	counter:
 639 0000 0000      		.zero	2
 640               	.global	media
 641               		.section	.bss.media,"aw",@nobits
 644               	media:
 645 0000 0000      		.zero	2
 646               	.global	be_read
 647               		.section	.bss.be_read,"aw",@nobits
 650               	be_read:
 651 0000 0000 0000 		.zero	4
 652               	.global	anterior
 653               		.section	.bss.anterior,"aw",@nobits
 656               	anterior:
 657 0000 0000 0000 		.zero	4
 658               	.global	tmr_read
 659               		.section	.bss.tmr_read,"aw",@nobits
 662               	tmr_read:
 663 0000 0000 0000 		.zero	4
 664               	.global	beacon_tmr
 665               		.section	.bss.beacon_tmr,"aw",@nobits
 668               	beacon_tmr:
 669 0000 00        		.zero	1
 670               	.global	beacon_received
 671               		.section	.bss.beacon_received,"aw",@nobits
 674               	beacon_received:
 675 0000 0000      		.zero	2
 676               	.global	error
 677               		.section	.data.error,"aw",@progbits
 680               	error:
 681 0000 3200      		.word	50
 682               		.comm	msg_wait_time,2,1
 683               		.section	.rodata
 684               	.LC1:
 685 0000 0A62 2C20 		.string	"\nb, %lu "
 685      256C 7520 
 685      00
 686               		.text
 688               	lldn_server_beacon:
 689               	.LFB130:
 690               		.file 6 "test_sync_timers.c"
   1:test_sync_timers.c **** /*
   2:test_sync_timers.c ****  * test_sync_timers.c
   3:test_sync_timers.c ****  *
   4:test_sync_timers.c ****  * Created: 09/07/2020 22:48:19
   5:test_sync_timers.c ****  *  Author: Guilherme
   6:test_sync_timers.c ****  */ 
   7:test_sync_timers.c **** 
   8:test_sync_timers.c **** #include <stdlib.h>
   9:test_sync_timers.c **** #include <stdio.h>
  10:test_sync_timers.c **** #include <string.h>
  11:test_sync_timers.c **** #include <inttypes.h>
  12:test_sync_timers.c **** #include "config.h"
  13:test_sync_timers.c **** #include "sys.h"
  14:test_sync_timers.c **** #include "phy.h"
  15:test_sync_timers.c **** #include "sys.h"
  16:test_sync_timers.c **** #include "nwk.h"
  17:test_sync_timers.c **** #include "sysclk.h"
  18:test_sync_timers.c **** #include "sysTimer.h"
  19:test_sync_timers.c **** #include "sleep_mgr.h"
  20:test_sync_timers.c **** #include "sleepmgr.h"
  21:test_sync_timers.c **** #include "led.h"
  22:test_sync_timers.c **** #include "ioport.h"
  23:test_sync_timers.c **** #include "conf_sleepmgr.h"
  24:test_sync_timers.c **** #include "board.h"
  25:test_sync_timers.c **** #include "platform.h"
  26:test_sync_timers.c **** 
  27:test_sync_timers.c **** #include "conf_sio2host.h"
  28:test_sync_timers.c **** 
  29:test_sync_timers.c **** #include "macsc_megarf.h"
  30:test_sync_timers.c **** 
  31:test_sync_timers.c **** typedef enum {
  32:test_sync_timers.c **** 	APP_STATE_INITIAL,
  33:test_sync_timers.c **** 	APP_STATE_IDLE,
  34:test_sync_timers.c **** } AppState_t;
  35:test_sync_timers.c **** 
  36:test_sync_timers.c **** AppState_t state = APP_STATE_INITIAL;
  37:test_sync_timers.c **** NwkFrameBeaconHeaderLLDN_t rec_beacon;
  38:test_sync_timers.c **** static NWK_DataReq_t msgReq;
  39:test_sync_timers.c **** static uint8_t PanId;
  40:test_sync_timers.c **** float beaconInterval_association = 0;
  41:test_sync_timers.c **** int counter = 0;
  42:test_sync_timers.c **** int media = 0;
  43:test_sync_timers.c **** uint32_t be_read = 0;
  44:test_sync_timers.c **** uint32_t anterior = 0;
  45:test_sync_timers.c **** uint32_t tmr_read= 0;
  46:test_sync_timers.c **** bool beacon_tmr = false;
  47:test_sync_timers.c **** int beacon_received = 0;
  48:test_sync_timers.c **** int error = 50;
  49:test_sync_timers.c **** int msg_wait_time;
  50:test_sync_timers.c **** 
  51:test_sync_timers.c **** static void lldn_server_beacon(void)
  52:test_sync_timers.c **** {
 691               		.loc 6 52 0
 692               		.cfi_startproc
 693 0266 CF93      		push r28
 694               	.LCFI36:
 695               		.cfi_def_cfa_offset 3
 696               		.cfi_offset 28, -2
 697 0268 DF93      		push r29
 698               	.LCFI37:
 699               		.cfi_def_cfa_offset 4
 700               		.cfi_offset 29, -3
 701 026a 00D0      		rcall .
 702 026c 00D0      		rcall .
 703               	.LCFI38:
 704               		.cfi_def_cfa_offset 8
 705 026e CDB7      		in r28,__SP_L__
 706 0270 DEB7      		in r29,__SP_H__
 707               	.LCFI39:
 708               		.cfi_def_cfa_register 28
 709               	/* prologue: function */
 710               	/* frame size = 4 */
 711               	/* stack size = 6 */
 712               	.L__stack_usage = 6
  53:test_sync_timers.c **** 	counter++;
 713               		.loc 6 53 0
 714 0272 8091 0000 		lds r24,counter
 715 0276 9091 0000 		lds r25,counter+1
 716 027a 0196      		adiw r24,1
 717 027c 9093 0000 		sts counter+1,r25
 718 0280 8093 0000 		sts counter,r24
  54:test_sync_timers.c **** 		NWK_DataReq(&msgReq);
 719               		.loc 6 54 0
 720 0284 80E0      		ldi r24,lo8(msgReq)
 721 0286 90E0      		ldi r25,hi8(msgReq)
 722 0288 0E94 0000 		call NWK_DataReq
  55:test_sync_timers.c **** 	uint32_t tmp = macsc_read_count();
 723               		.loc 6 55 0
 724 028c 0E94 0000 		call macsc_read_count
 725 0290 DC01      		movw r26,r24
 726 0292 CB01      		movw r24,r22
 727 0294 8983      		std Y+1,r24
 728 0296 9A83      		std Y+2,r25
 729 0298 AB83      		std Y+3,r26
 730 029a BC83      		std Y+4,r27
  56:test_sync_timers.c **** 	printf("\nb, %" PRIu32 " ", tmp);
 731               		.loc 6 56 0
 732 029c 8C81      		ldd r24,Y+4
 733 029e 8F93      		push r24
 734 02a0 8B81      		ldd r24,Y+3
 735 02a2 8F93      		push r24
 736 02a4 8A81      		ldd r24,Y+2
 737 02a6 8F93      		push r24
 738 02a8 8981      		ldd r24,Y+1
 739 02aa 8F93      		push r24
 740 02ac 80E0      		ldi r24,lo8(.LC1)
 741 02ae 90E0      		ldi r25,hi8(.LC1)
 742 02b0 892F      		mov r24,r25
 743 02b2 8F93      		push r24
 744 02b4 80E0      		ldi r24,lo8(.LC1)
 745 02b6 90E0      		ldi r25,hi8(.LC1)
 746 02b8 8F93      		push r24
 747 02ba 0E94 0000 		call printf
 748 02be 0F90      		pop __tmp_reg__
 749 02c0 0F90      		pop __tmp_reg__
 750 02c2 0F90      		pop __tmp_reg__
 751 02c4 0F90      		pop __tmp_reg__
 752 02c6 0F90      		pop __tmp_reg__
 753 02c8 0F90      		pop __tmp_reg__
  57:test_sync_timers.c **** 	if(counter < 20)
 754               		.loc 6 57 0
 755 02ca 8091 0000 		lds r24,counter
 756 02ce 9091 0000 		lds r25,counter+1
 757 02d2 4497      		sbiw r24,20
 758 02d4 04F4      		brge .L21
  58:test_sync_timers.c **** 		macsc_enable_manual_bts();
 759               		.loc 6 58 0
 760 02d6 0E94 0000 		call macsc_enable_manual_bts
 761               	.L21:
  59:test_sync_timers.c **** 
  60:test_sync_timers.c **** }
 762               		.loc 6 60 0
 763 02da 0000      		nop
 764               	/* epilogue start */
 765 02dc 0F90      		pop __tmp_reg__
 766 02de 0F90      		pop __tmp_reg__
 767 02e0 0F90      		pop __tmp_reg__
 768 02e2 0F90      		pop __tmp_reg__
 769 02e4 DF91      		pop r29
 770 02e6 CF91      		pop r28
 771 02e8 0895      		ret
 772               		.cfi_endproc
 773               	.LFE130:
 775               		.section	.rodata
 776               	.LC2:
 777 0009 0A2D 00   		.string	"\n-"
 778               		.text
 780               	time_slot:
 781               	.LFB131:
  61:test_sync_timers.c **** static void time_slot(void)
  62:test_sync_timers.c **** {
 782               		.loc 6 62 0
 783               		.cfi_startproc
 784 02ea CF93      		push r28
 785               	.LCFI40:
 786               		.cfi_def_cfa_offset 3
 787               		.cfi_offset 28, -2
 788 02ec DF93      		push r29
 789               	.LCFI41:
 790               		.cfi_def_cfa_offset 4
 791               		.cfi_offset 29, -3
 792 02ee CDB7      		in r28,__SP_L__
 793 02f0 DEB7      		in r29,__SP_H__
 794               	.LCFI42:
 795               		.cfi_def_cfa_register 28
 796               	/* prologue: function */
 797               	/* frame size = 0 */
 798               	/* stack size = 2 */
 799               	.L__stack_usage = 2
  63:test_sync_timers.c **** 	printf("\n-");
 800               		.loc 6 63 0
 801 02f2 80E0      		ldi r24,lo8(.LC2)
 802 02f4 90E0      		ldi r25,hi8(.LC2)
 803 02f6 892F      		mov r24,r25
 804 02f8 8F93      		push r24
 805 02fa 80E0      		ldi r24,lo8(.LC2)
 806 02fc 90E0      		ldi r25,hi8(.LC2)
 807 02fe 8F93      		push r24
 808 0300 0E94 0000 		call printf
 809 0304 0F90      		pop __tmp_reg__
 810 0306 0F90      		pop __tmp_reg__
  64:test_sync_timers.c **** }
 811               		.loc 6 64 0
 812 0308 0000      		nop
 813               	/* epilogue start */
 814 030a DF91      		pop r29
 815 030c CF91      		pop r28
 816 030e 0895      		ret
 817               		.cfi_endproc
 818               	.LFE131:
 821               	send:
 822               	.LFB132:
  65:test_sync_timers.c **** 
  66:test_sync_timers.c **** 
  67:test_sync_timers.c **** static void send(void)
  68:test_sync_timers.c **** {
 823               		.loc 6 68 0
 824               		.cfi_startproc
 825 0310 CF93      		push r28
 826               	.LCFI43:
 827               		.cfi_def_cfa_offset 3
 828               		.cfi_offset 28, -2
 829 0312 DF93      		push r29
 830               	.LCFI44:
 831               		.cfi_def_cfa_offset 4
 832               		.cfi_offset 29, -3
 833 0314 CDB7      		in r28,__SP_L__
 834 0316 DEB7      		in r29,__SP_H__
 835               	.LCFI45:
 836               		.cfi_def_cfa_register 28
 837               	/* prologue: function */
 838               	/* frame size = 0 */
 839               	/* stack size = 2 */
 840               	.L__stack_usage = 2
  69:test_sync_timers.c **** 	printf("S");
 841               		.loc 6 69 0
 842 0318 83E5      		ldi r24,lo8(83)
 843 031a 90E0      		ldi r25,0
 844 031c 0E94 0000 		call putchar
  70:test_sync_timers.c **** 	macsc_set_cmp2_int_cb(0);
 845               		.loc 6 70 0
 846 0320 80E0      		ldi r24,0
 847 0322 90E0      		ldi r25,0
 848 0324 0E94 0000 		call macsc_set_cmp2_int_cb
  71:test_sync_timers.c **** 
  72:test_sync_timers.c **** 	NWK_DataReq(&msgReq);
 849               		.loc 6 72 0
 850 0328 80E0      		ldi r24,lo8(msgReq)
 851 032a 90E0      		ldi r25,hi8(msgReq)
 852 032c 0E94 0000 		call NWK_DataReq
  73:test_sync_timers.c **** }
 853               		.loc 6 73 0
 854 0330 0000      		nop
 855               	/* epilogue start */
 856 0332 DF91      		pop r29
 857 0334 CF91      		pop r28
 858 0336 0895      		ret
 859               		.cfi_endproc
 860               	.LFE132:
 863               	node_time_handler:
 864               	.LFB133:
  74:test_sync_timers.c **** static void node_time_handler(void)
  75:test_sync_timers.c **** {
 865               		.loc 6 75 0
 866               		.cfi_startproc
 867 0338 CF93      		push r28
 868               	.LCFI46:
 869               		.cfi_def_cfa_offset 3
 870               		.cfi_offset 28, -2
 871 033a DF93      		push r29
 872               	.LCFI47:
 873               		.cfi_def_cfa_offset 4
 874               		.cfi_offset 29, -3
 875 033c CDB7      		in r28,__SP_L__
 876 033e DEB7      		in r29,__SP_H__
 877               	.LCFI48:
 878               		.cfi_def_cfa_register 28
 879               	/* prologue: function */
 880               	/* frame size = 0 */
 881               	/* stack size = 2 */
 882               	.L__stack_usage = 2
  76:test_sync_timers.c **** 	beacon_tmr = true;
 883               		.loc 6 76 0
 884 0340 81E0      		ldi r24,lo8(1)
 885 0342 8093 0000 		sts beacon_tmr,r24
  77:test_sync_timers.c **** 	tmr_read = macsc_read_count();
 886               		.loc 6 77 0
 887 0346 0E94 0000 		call macsc_read_count
 888 034a DC01      		movw r26,r24
 889 034c CB01      		movw r24,r22
 890 034e 8093 0000 		sts tmr_read,r24
 891 0352 9093 0000 		sts tmr_read+1,r25
 892 0356 A093 0000 		sts tmr_read+2,r26
 893 035a B093 0000 		sts tmr_read+3,r27
  78:test_sync_timers.c **** 	return;
 894               		.loc 6 78 0
 895 035e 0000      		nop
 896               	/* epilogue start */
  79:test_sync_timers.c **** }
 897               		.loc 6 79 0
 898 0360 DF91      		pop r29
 899 0362 CF91      		pop r28
 900 0364 0895      		ret
 901               		.cfi_endproc
 902               	.LFE133:
 904               		.section	.rodata
 905               	.LC3:
 906 000c 0A25 6420 		.string	"\n%d "
 906      00
 907               		.text
 909               	appBeaconInd:
 910               	.LFB134:
  80:test_sync_timers.c **** 
  81:test_sync_timers.c **** static bool appBeaconInd(NWK_DataInd_t *ind)
  82:test_sync_timers.c **** {
 911               		.loc 6 82 0
 912               		.cfi_startproc
 913 0366 CF93      		push r28
 914               	.LCFI49:
 915               		.cfi_def_cfa_offset 3
 916               		.cfi_offset 28, -2
 917 0368 DF93      		push r29
 918               	.LCFI50:
 919               		.cfi_def_cfa_offset 4
 920               		.cfi_offset 29, -3
 921 036a 00D0      		rcall .
 922 036c 00D0      		rcall .
 923               	.LCFI51:
 924               		.cfi_def_cfa_offset 8
 925 036e CDB7      		in r28,__SP_L__
 926 0370 DEB7      		in r29,__SP_H__
 927               	.LCFI52:
 928               		.cfi_def_cfa_register 28
 929               	/* prologue: function */
 930               	/* frame size = 4 */
 931               	/* stack size = 6 */
 932               	.L__stack_usage = 6
 933 0372 9C83      		std Y+4,r25
 934 0374 8B83      		std Y+3,r24
  83:test_sync_timers.c **** 	printf("\n%d ",counter);
 935               		.loc 6 83 0
 936 0376 8091 0000 		lds r24,counter
 937 037a 9091 0000 		lds r25,counter+1
 938 037e 292F      		mov r18,r25
 939 0380 2F93      		push r18
 940 0382 8F93      		push r24
 941 0384 80E0      		ldi r24,lo8(.LC3)
 942 0386 90E0      		ldi r25,hi8(.LC3)
 943 0388 892F      		mov r24,r25
 944 038a 8F93      		push r24
 945 038c 80E0      		ldi r24,lo8(.LC3)
 946 038e 90E0      		ldi r25,hi8(.LC3)
 947 0390 8F93      		push r24
 948 0392 0E94 0000 		call printf
 949 0396 0F90      		pop __tmp_reg__
 950 0398 0F90      		pop __tmp_reg__
 951 039a 0F90      		pop __tmp_reg__
 952 039c 0F90      		pop __tmp_reg__
  84:test_sync_timers.c **** 	beacon_received = true;
 953               		.loc 6 84 0
 954 039e 81E0      		ldi r24,lo8(1)
 955 03a0 90E0      		ldi r25,0
 956 03a2 9093 0000 		sts beacon_received+1,r25
 957 03a6 8093 0000 		sts beacon_received,r24
  85:test_sync_timers.c **** 	
  86:test_sync_timers.c **** 	macsc_disable_cmp_int(MACSC_CC1);
 958               		.loc 6 86 0
 959 03aa 81E0      		ldi r24,lo8(1)
 960 03ac 0E94 0000 		call macsc_disable_cmp_int
  87:test_sync_timers.c **** 	macsc_disable_cmp_int(MACSC_CC2);
 961               		.loc 6 87 0
 962 03b0 82E0      		ldi r24,lo8(2)
 963 03b2 0E94 0000 		call macsc_disable_cmp_int
  88:test_sync_timers.c **** 	
  89:test_sync_timers.c **** 		NWK_DataReq(&msgReq);
 964               		.loc 6 89 0
 965 03b6 80E0      		ldi r24,lo8(msgReq)
 966 03b8 90E0      		ldi r25,hi8(msgReq)
 967 03ba 0E94 0000 		call NWK_DataReq
  90:test_sync_timers.c **** 
  91:test_sync_timers.c **** 	
  92:test_sync_timers.c **** 	NwkFrameBeaconHeaderLLDN_t *tmp_beacon = (NwkFrameBeaconHeaderLLDN_t*)ind->data;
 968               		.loc 6 92 0
 969 03be 8B81      		ldd r24,Y+3
 970 03c0 9C81      		ldd r25,Y+4
 971 03c2 FC01      		movw r30,r24
 972 03c4 8085      		ldd r24,Z+8
 973 03c6 9185      		ldd r25,Z+9
 974 03c8 9A83      		std Y+2,r25
 975 03ca 8983      		std Y+1,r24
  93:test_sync_timers.c **** 	rec_beacon = *tmp_beacon;
 976               		.loc 6 93 0
 977 03cc 8981      		ldd r24,Y+1
 978 03ce 9A81      		ldd r25,Y+2
 979 03d0 28E0      		ldi r18,lo8(8)
 980 03d2 FC01      		movw r30,r24
 981 03d4 A0E0      		ldi r26,lo8(rec_beacon)
 982 03d6 B0E0      		ldi r27,hi8(rec_beacon)
 983               		0:
 984 03d8 0190      		ld r0,Z+
 985 03da 0D92      		st X+,r0
 986 03dc 2A95      		dec r18
 987 03de 01F4      		brne 0b
  94:test_sync_timers.c **** 	
  95:test_sync_timers.c **** 	
  96:test_sync_timers.c **** 	/*
  97:test_sync_timers.c **** 	if(counter == 0 )
  98:test_sync_timers.c **** 	{
  99:test_sync_timers.c **** 		tTS =  ((p_var*sp + (m+ tmp_beacon->TimeSlotSize  )*sm + macMinLIFSPeriod)/v_var)  / (SYMBOL_TIME
 100:test_sync_timers.c **** 		msg_wait_time = tmp_beacon->Flags.numBaseMgmtTimeslots * tTS * 2;
 101:test_sync_timers.c **** 		printf(" %d",  msg_wait_time );
 102:test_sync_timers.c **** 
 103:test_sync_timers.c ****  		macsc_set_cmp1_int_cb(node_time_handler);
 104:test_sync_timers.c **** 		macsc_set_cmp2_int_cb(send);
 105:test_sync_timers.c **** 
 106:test_sync_timers.c **** 		macsc_enable_cmp_int(MACSC_CC1);
 107:test_sync_timers.c **** 
 108:test_sync_timers.c **** 		macsc_use_cmp(MACSC_RELATIVE_CMP, msg_wait_time, MACSC_CC1);
 109:test_sync_timers.c **** 		
 110:test_sync_timers.c **** 		
 111:test_sync_timers.c **** 		macsc_enable_manual_bts();
 112:test_sync_timers.c **** 	}
 113:test_sync_timers.c **** 	else if(beacon_tmr)
 114:test_sync_timers.c **** 	{
 115:test_sync_timers.c **** 		beacon_tmr = false;
 116:test_sync_timers.c **** 		be_read = macsc_read_count();
 117:test_sync_timers.c **** 		int erro = be_read - tmr_read;
 118:test_sync_timers.c **** 		if(erro > 35)
 119:test_sync_timers.c **** 		{
 120:test_sync_timers.c **** 			macsc_disable_cmp_int(MACSC_CC1);
 121:test_sync_timers.c **** 			macsc_disable_cmp_int(MACSC_CC2);
 122:test_sync_timers.c **** 
 123:test_sync_timers.c **** 			msg_wait_time+=10;
 124:test_sync_timers.c **** 			macsc_enable_cmp_int(MACSC_CC1);
 125:test_sync_timers.c **** 			macsc_use_cmp(MACSC_RELATIVE_CMP, msg_wait_time, MACSC_CC1);
 126:test_sync_timers.c **** 			macsc_use_cmp(MACSC_RELATIVE_CMP, msg_wait_time/2, MACSC_CC2);
 127:test_sync_timers.c **** 
 128:test_sync_timers.c **** 			macsc_enable_manual_bts();
 129:test_sync_timers.c **** 		}
 130:test_sync_timers.c **** 		else
 131:test_sync_timers.c **** 		{
 132:test_sync_timers.c **** 			printf(" OK");
 133:test_sync_timers.c **** 			macsc_set_cmp2_int_cb(send);
 134:test_sync_timers.c **** 
 135:test_sync_timers.c **** 			macsc_use_cmp(MACSC_RELATIVE_CMP, msg_wait_time/2, MACSC_CC2);
 136:test_sync_timers.c **** 	
 137:test_sync_timers.c **** 			macsc_enable_cmp_int(MACSC_CC1);			
 138:test_sync_timers.c **** 			macsc_enable_cmp_int(MACSC_CC2);
 139:test_sync_timers.c **** 
 140:test_sync_timers.c **** 			macsc_enable_manual_bts();
 141:test_sync_timers.c **** 		}
 142:test_sync_timers.c **** 	}
 143:test_sync_timers.c **** 	else
 144:test_sync_timers.c **** 	{
 145:test_sync_timers.c **** 		macsc_disable_cmp_int(MACSC_CC1);
 146:test_sync_timers.c **** 		macsc_disable_cmp_int(MACSC_CC2);
 147:test_sync_timers.c **** 		
 148:test_sync_timers.c **** 		msg_wait_time-=10;
 149:test_sync_timers.c **** 		macsc_enable_cmp_int(MACSC_CC1);
 150:test_sync_timers.c **** 		macsc_use_cmp(MACSC_RELATIVE_CMP, msg_wait_time, MACSC_CC1);
 151:test_sync_timers.c **** 		macsc_enable_manual_bts();
 152:test_sync_timers.c **** 	}
 153:test_sync_timers.c **** 	counter++;*/
 154:test_sync_timers.c **** }
 988               		.loc 6 154 0
 989 03e0 0000      		nop
 990               	/* epilogue start */
 991 03e2 0F90      		pop __tmp_reg__
 992 03e4 0F90      		pop __tmp_reg__
 993 03e6 0F90      		pop __tmp_reg__
 994 03e8 0F90      		pop __tmp_reg__
 995 03ea DF91      		pop r29
 996 03ec CF91      		pop r28
 997 03ee 0895      		ret
 998               		.cfi_endproc
 999               	.LFE134:
 1001               		.section	.rodata
 1002               	.LC4:
 1003 0011 0A64 2C20 		.string	"\nd, %lu "
 1003      256C 7520 
 1003      00
 1004               		.text
 1006               	appBeaconInd_2:
 1007               	.LFB135:
 155:test_sync_timers.c **** 
 156:test_sync_timers.c **** static bool appBeaconInd_2(NWK_DataInd_t *ind)
 157:test_sync_timers.c **** {
 1008               		.loc 6 157 0
 1009               		.cfi_startproc
 1010 03f0 CF93      		push r28
 1011               	.LCFI53:
 1012               		.cfi_def_cfa_offset 3
 1013               		.cfi_offset 28, -2
 1014 03f2 DF93      		push r29
 1015               	.LCFI54:
 1016               		.cfi_def_cfa_offset 4
 1017               		.cfi_offset 29, -3
 1018 03f4 00D0      		rcall .
 1019 03f6 00D0      		rcall .
 1020 03f8 00D0      		rcall .
 1021               	.LCFI55:
 1022               		.cfi_def_cfa_offset 10
 1023 03fa CDB7      		in r28,__SP_L__
 1024 03fc DEB7      		in r29,__SP_H__
 1025               	.LCFI56:
 1026               		.cfi_def_cfa_register 28
 1027               	/* prologue: function */
 1028               	/* frame size = 6 */
 1029               	/* stack size = 8 */
 1030               	.L__stack_usage = 8
 1031 03fe 9E83      		std Y+6,r25
 1032 0400 8D83      		std Y+5,r24
 158:test_sync_timers.c **** 
 159:test_sync_timers.c **** 	uint32_t tmp = macsc_read_count();
 1033               		.loc 6 159 0
 1034 0402 0E94 0000 		call macsc_read_count
 1035 0406 DC01      		movw r26,r24
 1036 0408 CB01      		movw r24,r22
 1037 040a 8983      		std Y+1,r24
 1038 040c 9A83      		std Y+2,r25
 1039 040e AB83      		std Y+3,r26
 1040 0410 BC83      		std Y+4,r27
 160:test_sync_timers.c **** 	printf("\nd, %" PRIu32 " ", tmp);
 1041               		.loc 6 160 0
 1042 0412 8C81      		ldd r24,Y+4
 1043 0414 8F93      		push r24
 1044 0416 8B81      		ldd r24,Y+3
 1045 0418 8F93      		push r24
 1046 041a 8A81      		ldd r24,Y+2
 1047 041c 8F93      		push r24
 1048 041e 8981      		ldd r24,Y+1
 1049 0420 8F93      		push r24
 1050 0422 80E0      		ldi r24,lo8(.LC4)
 1051 0424 90E0      		ldi r25,hi8(.LC4)
 1052 0426 892F      		mov r24,r25
 1053 0428 8F93      		push r24
 1054 042a 80E0      		ldi r24,lo8(.LC4)
 1055 042c 90E0      		ldi r25,hi8(.LC4)
 1056 042e 8F93      		push r24
 1057 0430 0E94 0000 		call printf
 1058 0434 0F90      		pop __tmp_reg__
 1059 0436 0F90      		pop __tmp_reg__
 1060 0438 0F90      		pop __tmp_reg__
 1061 043a 0F90      		pop __tmp_reg__
 1062 043c 0F90      		pop __tmp_reg__
 1063 043e 0F90      		pop __tmp_reg__
 161:test_sync_timers.c **** 
 162:test_sync_timers.c **** }
 1064               		.loc 6 162 0
 1065 0440 0000      		nop
 1066               	/* epilogue start */
 1067 0442 2696      		adiw r28,6
 1068 0444 0FB6      		in __tmp_reg__,__SREG__
 1069 0446 F894      		cli
 1070 0448 DEBF      		out __SP_H__,r29
 1071 044a 0FBE      		out __SREG__,__tmp_reg__
 1072 044c CDBF      		out __SP_L__,r28
 1073 044e DF91      		pop r29
 1074 0450 CF91      		pop r28
 1075 0452 0895      		ret
 1076               		.cfi_endproc
 1077               	.LFE135:
 1079               	.global	__floatsisf
 1080               	.global	__addsf3
 1081               	.global	__divsf3
 1082               	.global	__mulsf3
 1083               	.global	__fixunssfsi
 1085               	appInit:
 1086               	.LFB136:
 163:test_sync_timers.c **** 
 164:test_sync_timers.c **** static void appInit(void)
 165:test_sync_timers.c **** {
 1087               		.loc 6 165 0
 1088               		.cfi_startproc
 1089 0454 CF93      		push r28
 1090               	.LCFI57:
 1091               		.cfi_def_cfa_offset 3
 1092               		.cfi_offset 28, -2
 1093 0456 DF93      		push r29
 1094               	.LCFI58:
 1095               		.cfi_def_cfa_offset 4
 1096               		.cfi_offset 29, -3
 1097 0458 CDB7      		in r28,__SP_L__
 1098 045a DEB7      		in r29,__SP_H__
 1099               	.LCFI59:
 1100               		.cfi_def_cfa_register 28
 1101               	/* prologue: function */
 1102               	/* frame size = 0 */
 1103               	/* stack size = 2 */
 1104               	.L__stack_usage = 2
 166:test_sync_timers.c **** 	NWK_SetAddr(APP_ADDR);
 1105               		.loc 6 166 0
 1106 045c 80E0      		ldi r24,0
 1107 045e 90E0      		ldi r25,0
 1108 0460 0E94 0000 		call NWK_SetAddr
 167:test_sync_timers.c **** 	PHY_SetChannel(APP_CHANNEL);
 1109               		.loc 6 167 0
 1110 0464 8FE0      		ldi r24,lo8(15)
 1111 0466 0E94 0000 		call PHY_SetChannel
 168:test_sync_timers.c **** 	PHY_SetRxState(true);
 1112               		.loc 6 168 0
 1113 046a 81E0      		ldi r24,lo8(1)
 1114 046c 0E94 0000 		call PHY_SetRxState
 169:test_sync_timers.c **** 	n = 50;
 1115               		.loc 6 169 0
 1116 0470 82E3      		ldi r24,lo8(50)
 1117 0472 8093 0000 		sts n,r24
 170:test_sync_timers.c **** 			/* prepare beacon */
 171:test_sync_timers.c **** 			msgReq.dstAddr				= 0;
 1118               		.loc 6 171 0
 1119 0476 1092 0000 		sts msgReq+5+1,__zero_reg__
 1120 047a 1092 0000 		sts msgReq+5,__zero_reg__
 172:test_sync_timers.c **** 			msgReq.dstEndpoint			= APP_BEACON_ENDPOINT;
 1121               		.loc 6 172 0
 1122 047e 1092 0000 		sts msgReq+7,__zero_reg__
 173:test_sync_timers.c **** 			msgReq.srcEndpoint			= APP_BEACON_ENDPOINT;
 1123               		.loc 6 173 0
 1124 0482 1092 0000 		sts msgReq+8,__zero_reg__
 174:test_sync_timers.c **** 			msgReq.options				= NWK_OPT_LLDN_BEACON | NWK_OPT_DISCOVERY_STATE;
 1125               		.loc 6 174 0
 1126 0486 80E4      		ldi r24,lo8(64)
 1127 0488 91E0      		ldi r25,lo8(1)
 1128 048a 9093 0000 		sts msgReq+9+1,r25
 1129 048e 8093 0000 		sts msgReq+9,r24
 175:test_sync_timers.c **** 			msgReq.data					= NULL;
 1130               		.loc 6 175 0
 1131 0492 1092 0000 		sts msgReq+13+1,__zero_reg__
 1132 0496 1092 0000 		sts msgReq+13,__zero_reg__
 176:test_sync_timers.c **** 			msgReq.size					= 0;
 1133               		.loc 6 176 0
 1134 049a 1092 0000 		sts msgReq+15,__zero_reg__
 177:test_sync_timers.c **** 			
 178:test_sync_timers.c **** 	#if APP_COORDINATOR	 
 179:test_sync_timers.c **** 		/* 
 180:test_sync_timers.c **** 		* Disable CSMA/CA
 181:test_sync_timers.c **** 		* Disable auto ACK
 182:test_sync_timers.c **** 		*/
 183:test_sync_timers.c **** 		NWK_SetPanId(APP_PANID);
 1135               		.loc 6 183 0
 1136 049e 8EEF      		ldi r24,lo8(-2)
 1137 04a0 9AEC      		ldi r25,lo8(-54)
 1138 04a2 0E94 0000 		call NWK_SetPanId
 184:test_sync_timers.c **** 		PanId = APP_PANID;
 1139               		.loc 6 184 0
 1140 04a6 8EEF      		ldi r24,lo8(-2)
 1141 04a8 8093 0000 		sts PanId,r24
 185:test_sync_timers.c **** 		PHY_SetTdmaMode(true);
 1142               		.loc 6 185 0
 1143 04ac 81E0      		ldi r24,lo8(1)
 1144 04ae 0E94 0000 		call PHY_SetTdmaMode
 186:test_sync_timers.c **** 		
 187:test_sync_timers.c **** 			
 188:test_sync_timers.c **** 		tTS =  ((p_var*sp + (m+ n)*sm + macMinLIFSPeriod)/v_var);
 1145               		.loc 6 188 0
 1146 04b2 8091 0000 		lds r24,n
 1147 04b6 882F      		mov r24,r24
 1148 04b8 90E0      		ldi r25,0
 1149 04ba 0396      		adiw r24,3
 1150 04bc 880F      		lsl r24
 1151 04be 991F      		rol r25
 1152 04c0 092E      		mov __tmp_reg__,r25
 1153 04c2 000C      		lsl r0
 1154 04c4 AA0B      		sbc r26,r26
 1155 04c6 BB0B      		sbc r27,r27
 1156 04c8 BC01      		movw r22,r24
 1157 04ca CD01      		movw r24,r26
 1158 04cc 0E94 0000 		call __floatsisf
 1159 04d0 DC01      		movw r26,r24
 1160 04d2 CB01      		movw r24,r22
 1161 04d4 20E0      		ldi r18,0
 1162 04d6 30E0      		ldi r19,0
 1163 04d8 40E4      		ldi r20,lo8(64)
 1164 04da 51E4      		ldi r21,lo8(65)
 1165 04dc BC01      		movw r22,r24
 1166 04de CD01      		movw r24,r26
 1167 04e0 0E94 0000 		call __addsf3
 1168 04e4 DC01      		movw r26,r24
 1169 04e6 CB01      		movw r24,r22
 1170 04e8 20E0      		ldi r18,0
 1171 04ea 30E0      		ldi r19,0
 1172 04ec 40E2      		ldi r20,lo8(32)
 1173 04ee 52E4      		ldi r21,lo8(66)
 1174 04f0 BC01      		movw r22,r24
 1175 04f2 CD01      		movw r24,r26
 1176 04f4 0E94 0000 		call __addsf3
 1177 04f8 DC01      		movw r26,r24
 1178 04fa CB01      		movw r24,r22
 1179 04fc 20E0      		ldi r18,0
 1180 04fe 34E2      		ldi r19,lo8(36)
 1181 0500 44E7      		ldi r20,lo8(116)
 1182 0502 57E4      		ldi r21,lo8(71)
 1183 0504 BC01      		movw r22,r24
 1184 0506 CD01      		movw r24,r26
 1185 0508 0E94 0000 		call __divsf3
 1186 050c DC01      		movw r26,r24
 1187 050e CB01      		movw r24,r22
 1188 0510 8093 0000 		sts tTS,r24
 1189 0514 9093 0000 		sts tTS+1,r25
 1190 0518 A093 0000 		sts tTS+2,r26
 1191 051c B093 0000 		sts tTS+3,r27
 189:test_sync_timers.c **** 		beaconInterval_association = 2 * numBaseTimeSlotperMgmt_association * (tTS) / (SYMBOL_TIME);
 1192               		.loc 6 189 0
 1193 0520 8091 0000 		lds r24,tTS
 1194 0524 9091 0000 		lds r25,tTS+1
 1195 0528 A091 0000 		lds r26,tTS+2
 1196 052c B091 0000 		lds r27,tTS+3
 1197 0530 20E0      		ldi r18,0
 1198 0532 30E0      		ldi r19,0
 1199 0534 40E8      		ldi r20,lo8(-128)
 1200 0536 50E4      		ldi r21,lo8(64)
 1201 0538 BC01      		movw r22,r24
 1202 053a CD01      		movw r24,r26
 1203 053c 0E94 0000 		call __mulsf3
 1204 0540 DC01      		movw r26,r24
 1205 0542 CB01      		movw r24,r22
 1206 0544 2DEB      		ldi r18,lo8(-67)
 1207 0546 37E3      		ldi r19,lo8(55)
 1208 0548 46E8      		ldi r20,lo8(-122)
 1209 054a 57E3      		ldi r21,lo8(55)
 1210 054c BC01      		movw r22,r24
 1211 054e CD01      		movw r24,r26
 1212 0550 0E94 0000 		call __divsf3
 1213 0554 DC01      		movw r26,r24
 1214 0556 CB01      		movw r24,r22
 1215 0558 8093 0000 		sts beaconInterval_association,r24
 1216 055c 9093 0000 		sts beaconInterval_association+1,r25
 1217 0560 A093 0000 		sts beaconInterval_association+2,r26
 1218 0564 B093 0000 		sts beaconInterval_association+3,r27
 190:test_sync_timers.c **** 		macsc_set_cmp1_int_cb(lldn_server_beacon);
 1219               		.loc 6 190 0
 1220 0568 80E0      		ldi r24,lo8(gs(lldn_server_beacon))
 1221 056a 90E0      		ldi r25,hi8(gs(lldn_server_beacon))
 1222 056c 0E94 0000 		call macsc_set_cmp1_int_cb
 191:test_sync_timers.c **** 		macsc_set_cmp2_int_cb(time_slot);
 1223               		.loc 6 191 0
 1224 0570 80E0      		ldi r24,lo8(gs(time_slot))
 1225 0572 90E0      		ldi r25,hi8(gs(time_slot))
 1226 0574 0E94 0000 		call macsc_set_cmp2_int_cb
 192:test_sync_timers.c **** 		macsc_set_cmp3_int_cb(time_slot);
 1227               		.loc 6 192 0
 1228 0578 80E0      		ldi r24,lo8(gs(time_slot))
 1229 057a 90E0      		ldi r25,hi8(gs(time_slot))
 1230 057c 0E94 0000 		call macsc_set_cmp3_int_cb
 193:test_sync_timers.c **** 
 194:test_sync_timers.c **** 		
 195:test_sync_timers.c **** 		macsc_enable_manual_bts();
 1231               		.loc 6 195 0
 1232 0580 0E94 0000 		call macsc_enable_manual_bts
 196:test_sync_timers.c **** 		macsc_enable_cmp_int(MACSC_CC1);
 1233               		.loc 6 196 0
 1234 0584 81E0      		ldi r24,lo8(1)
 1235 0586 0E94 0000 		call macsc_enable_cmp_int
 197:test_sync_timers.c **** // 		macsc_enable_cmp_int(MACSC_CC3);
 198:test_sync_timers.c **** // 
 199:test_sync_timers.c **** // 		macsc_enable_cmp_int(MACSC_CC2);
 200:test_sync_timers.c **** 
 201:test_sync_timers.c **** 		macsc_use_cmp(MACSC_RELATIVE_CMP, beaconInterval_association , MACSC_CC1);
 1236               		.loc 6 201 0
 1237 058a 8091 0000 		lds r24,beaconInterval_association
 1238 058e 9091 0000 		lds r25,beaconInterval_association+1
 1239 0592 A091 0000 		lds r26,beaconInterval_association+2
 1240 0596 B091 0000 		lds r27,beaconInterval_association+3
 1241 059a BC01      		movw r22,r24
 1242 059c CD01      		movw r24,r26
 1243 059e 0E94 0000 		call __fixunssfsi
 1244 05a2 DC01      		movw r26,r24
 1245 05a4 CB01      		movw r24,r22
 1246 05a6 21E0      		ldi r18,lo8(1)
 1247 05a8 AC01      		movw r20,r24
 1248 05aa BD01      		movw r22,r26
 1249 05ac 81E0      		ldi r24,lo8(1)
 1250 05ae 0E94 0000 		call macsc_use_cmp
 202:test_sync_timers.c **** // 		macsc_use_cmp(MACSC_RELATIVE_CMP, beaconInterval_association/4 , MACSC_CC2);
 203:test_sync_timers.c **** // 		macsc_use_cmp(MACSC_RELATIVE_CMP, 2*beaconInterval_association/4 , MACSC_CC3);
 204:test_sync_timers.c **** 
 205:test_sync_timers.c **** 		NWK_OpenEndpoint(APP_COMMAND_ENDPOINT, appBeaconInd_2);
 1251               		.loc 6 205 0
 1252 05b2 60E0      		ldi r22,lo8(gs(appBeaconInd_2))
 1253 05b4 70E0      		ldi r23,hi8(gs(appBeaconInd_2))
 1254 05b6 83E0      		ldi r24,lo8(3)
 1255 05b8 0E94 0000 		call NWK_OpenEndpoint
 206:test_sync_timers.c **** 
 207:test_sync_timers.c **** 		
 208:test_sync_timers.c **** 		
 209:test_sync_timers.c **** 	#else
 210:test_sync_timers.c **** 		PHY_SetTdmaMode(false);
 211:test_sync_timers.c **** 		
 212:test_sync_timers.c **** 		NWK_OpenEndpoint(APP_BEACON_ENDPOINT, appBeaconInd);
 213:test_sync_timers.c **** 		
 214:test_sync_timers.c **** 
 215:test_sync_timers.c **** 	#endif // APP_COORDENATOR
 216:test_sync_timers.c **** 	PHY_SetPromiscuousMode(true);
 1256               		.loc 6 216 0
 1257 05bc 81E0      		ldi r24,lo8(1)
 1258 05be 0E94 0000 		call PHY_SetPromiscuousMode
 217:test_sync_timers.c **** 
 218:test_sync_timers.c **** }
 1259               		.loc 6 218 0
 1260 05c2 0000      		nop
 1261               	/* epilogue start */
 1262 05c4 DF91      		pop r29
 1263 05c6 CF91      		pop r28
 1264 05c8 0895      		ret
 1265               		.cfi_endproc
 1266               	.LFE136:
 1268               	.global	APP_TaskHandler
 1270               	APP_TaskHandler:
 1271               	.LFB137:
 219:test_sync_timers.c **** 
 220:test_sync_timers.c **** 
 221:test_sync_timers.c **** void APP_TaskHandler(void)
 222:test_sync_timers.c **** {
 1272               		.loc 6 222 0
 1273               		.cfi_startproc
 1274 05ca CF93      		push r28
 1275               	.LCFI60:
 1276               		.cfi_def_cfa_offset 3
 1277               		.cfi_offset 28, -2
 1278 05cc DF93      		push r29
 1279               	.LCFI61:
 1280               		.cfi_def_cfa_offset 4
 1281               		.cfi_offset 29, -3
 1282 05ce CDB7      		in r28,__SP_L__
 1283 05d0 DEB7      		in r29,__SP_H__
 1284               	.LCFI62:
 1285               		.cfi_def_cfa_register 28
 1286               	/* prologue: function */
 1287               	/* frame size = 0 */
 1288               	/* stack size = 2 */
 1289               	.L__stack_usage = 2
 223:test_sync_timers.c **** 	switch(state)
 1290               		.loc 6 223 0
 1291 05d2 8091 0000 		lds r24,state
 1292 05d6 882F      		mov r24,r24
 1293 05d8 90E0      		ldi r25,0
 1294 05da 892B      		or r24,r25
 1295 05dc 01F0      		breq .L31
 224:test_sync_timers.c **** 	{
 225:test_sync_timers.c **** 		case APP_STATE_INITIAL:
 226:test_sync_timers.c **** 			appInit();
 227:test_sync_timers.c **** 			state = APP_STATE_IDLE;
 228:test_sync_timers.c **** 		break;
 229:test_sync_timers.c **** 		default:
 230:test_sync_timers.c **** 		break;
 1296               		.loc 6 230 0
 1297 05de 00C0      		rjmp .L32
 1298               	.L31:
 226:test_sync_timers.c **** 			state = APP_STATE_IDLE;
 1299               		.loc 6 226 0
 1300 05e0 0E94 0000 		call appInit
 227:test_sync_timers.c **** 		break;
 1301               		.loc 6 227 0
 1302 05e4 81E0      		ldi r24,lo8(1)
 1303 05e6 8093 0000 		sts state,r24
 228:test_sync_timers.c **** 		default:
 1304               		.loc 6 228 0
 1305 05ea 0000      		nop
 1306               	.L32:
 231:test_sync_timers.c **** 		
 232:test_sync_timers.c **** 	}
 233:test_sync_timers.c **** }
 1307               		.loc 6 233 0
 1308 05ec 0000      		nop
 1309               	/* epilogue start */
 1310 05ee DF91      		pop r29
 1311 05f0 CF91      		pop r28
 1312 05f2 0895      		ret
 1313               		.cfi_endproc
 1314               	.LFE137:
 1316               		.section	.rodata
 1317               	.LC0:
 1318 001a 00        		.byte	0
 1319 001b C2        		.byte	-62
 1320 001c 01        		.byte	1
 1321 001d 00        		.byte	0
 1322 001e 03        		.byte	3
 1323 001f 00        		.byte	0
 1324 0020 00        		.byte	0
 1325               		.text
 1326               	.global	main
 1328               	main:
 1329               	.LFB138:
 234:test_sync_timers.c **** 
 235:test_sync_timers.c **** 
 236:test_sync_timers.c **** 
 237:test_sync_timers.c **** int main(void)
 238:test_sync_timers.c **** {
 1330               		.loc 6 238 0
 1331               		.cfi_startproc
 1332 05f4 0F93      		push r16
 1333               	.LCFI63:
 1334               		.cfi_def_cfa_offset 3
 1335               		.cfi_offset 16, -2
 1336 05f6 1F93      		push r17
 1337               	.LCFI64:
 1338               		.cfi_def_cfa_offset 4
 1339               		.cfi_offset 17, -3
 1340 05f8 CF93      		push r28
 1341               	.LCFI65:
 1342               		.cfi_def_cfa_offset 5
 1343               		.cfi_offset 28, -4
 1344 05fa DF93      		push r29
 1345               	.LCFI66:
 1346               		.cfi_def_cfa_offset 6
 1347               		.cfi_offset 29, -5
 1348 05fc CDB7      		in r28,__SP_L__
 1349 05fe DEB7      		in r29,__SP_H__
 1350               	.LCFI67:
 1351               		.cfi_def_cfa_register 28
 1352 0600 2797      		sbiw r28,7
 1353               	.LCFI68:
 1354               		.cfi_def_cfa_offset 13
 1355 0602 0FB6      		in __tmp_reg__,__SREG__
 1356 0604 F894      		cli
 1357 0606 DEBF      		out __SP_H__,r29
 1358 0608 0FBE      		out __SREG__,__tmp_reg__
 1359 060a CDBF      		out __SP_L__,r28
 1360               	/* prologue: function */
 1361               	/* frame size = 7 */
 1362               	/* stack size = 11 */
 1363               	.L__stack_usage = 11
 239:test_sync_timers.c **** 	sysclk_init();
 1364               		.loc 6 239 0
 1365 060c 0E94 0000 		call sysclk_init
 240:test_sync_timers.c **** 	board_init();
 1366               		.loc 6 240 0
 1367 0610 0E94 0000 		call board_init
 241:test_sync_timers.c **** 
 242:test_sync_timers.c **** 	SYS_Init();
 1368               		.loc 6 242 0
 1369 0614 0E94 0000 		call SYS_Init
 243:test_sync_timers.c **** 	/* Disable CSMA/CA
 244:test_sync_timers.c **** 		* Disable auto ACK
 245:test_sync_timers.c **** 		* Enable Rx of LLDN Frame Type as described in 802.15.4e - 2012 
 246:test_sync_timers.c **** 		*/
 247:test_sync_timers.c **** 
 248:test_sync_timers.c **** 	sm_init();
 1370               		.loc 6 248 0
 1371 0618 0E94 0000 		call sm_init
 249:test_sync_timers.c **** 
 250:test_sync_timers.c **** 	// Initialize interrupt vector table support.
 251:test_sync_timers.c **** 
 252:test_sync_timers.c **** 	cpu_irq_enable();
 1372               		.loc 6 252 0
 1373               	/* #APP */
 1374               	 ;  252 "test_sync_timers.c" 1
 1375 061c 7894      		sei
 1376               	 ;  0 "" 2
 253:test_sync_timers.c **** 	
 254:test_sync_timers.c **** 	const usart_serial_options_t usart_serial_options =
 1377               		.loc 6 254 0
 1378               	/* #NOAPP */
 1379 061e 27E0      		ldi r18,lo8(7)
 1380 0620 E0E0      		ldi r30,lo8(.LC0)
 1381 0622 F0E0      		ldi r31,hi8(.LC0)
 1382 0624 CE01      		movw r24,r28
 1383 0626 0196      		adiw r24,1
 1384 0628 DC01      		movw r26,r24
 1385               		0:
 1386 062a 0190      		ld r0,Z+
 1387 062c 0D92      		st X+,r0
 1388 062e 2A95      		dec r18
 1389 0630 01F4      		brne 0b
 255:test_sync_timers.c **** 	{
 256:test_sync_timers.c **** 		.baudrate     = USART_HOST_BAUDRATE,
 257:test_sync_timers.c **** 		.charlength   = USART_HOST_CHAR_LENGTH,
 258:test_sync_timers.c **** 		.paritytype   = USART_HOST_PARITY,
 259:test_sync_timers.c **** 		.stopbits     = USART_HOST_STOP_BITS
 260:test_sync_timers.c **** 	};
 261:test_sync_timers.c **** 
 262:test_sync_timers.c **** 	stdio_serial_init(USART_HOST, &usart_serial_options);
 1390               		.loc 6 262 0
 1391 0632 CE01      		movw r24,r28
 1392 0634 0196      		adiw r24,1
 1393 0636 BC01      		movw r22,r24
 1394 0638 80EC      		ldi r24,lo8(-64)
 1395 063a 90E0      		ldi r25,0
 1396 063c 0E94 0000 		call stdio_serial_init
 263:test_sync_timers.c **** 	usart_double_baud_enable(USART_HOST);
 1397               		.loc 6 263 0
 1398 0640 80EC      		ldi r24,lo8(-64)
 1399 0642 90E0      		ldi r25,0
 1400 0644 0E94 0000 		call usart_double_baud_enable
 264:test_sync_timers.c **** 	usart_set_baudrate_precalculated(USART_HOST, USART_HOST_BAUDRATE, sysclk_get_source_clock_hz());
 1401               		.loc 6 264 0
 1402 0648 0E94 0000 		call sysclk_get_source_clock_hz
 1403 064c DC01      		movw r26,r24
 1404 064e CB01      		movw r24,r22
 1405 0650 8C01      		movw r16,r24
 1406 0652 9D01      		movw r18,r26
 1407 0654 40E0      		ldi r20,0
 1408 0656 52EC      		ldi r21,lo8(-62)
 1409 0658 61E0      		ldi r22,lo8(1)
 1410 065a 70E0      		ldi r23,0
 1411 065c 80EC      		ldi r24,lo8(-64)
 1412 065e 90E0      		ldi r25,0
 1413 0660 0E94 0000 		call usart_set_baudrate_precalculated
 1414               	.L34:
 265:test_sync_timers.c **** 
 266:test_sync_timers.c **** 	for(;;)
 267:test_sync_timers.c **** 	{
 268:test_sync_timers.c **** 		SYS_TaskHandler();
 1415               		.loc 6 268 0 discriminator 1
 1416 0664 0E94 0000 		call SYS_TaskHandler
 269:test_sync_timers.c **** 		APP_TaskHandler();
 1417               		.loc 6 269 0 discriminator 1
 1418 0668 0E94 0000 		call APP_TaskHandler
 270:test_sync_timers.c **** 	}
 1419               		.loc 6 270 0 discriminator 1
 1420 066c 00C0      		rjmp .L34
 1421               		.cfi_endproc
 1422               	.LFE138:
 1424               	.Letext0:
 1425               		.file 7 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\in
 1426               		.file 8 "../../../stack/LwMesh/TDMA/nwk/inc/nwkFrame.h"
 1427               		.file 9 "../../../stack/LwMesh/TDMA/nwk/inc/nwkRx.h"
 1428               		.file 10 "../../../stack/LwMesh/TDMA/nwk/inc/nwkDataReq.h"
 1429               		.file 11 "../../../platform/mega_rf/drivers/sleep/sleep.h"
 1430               		.file 12 "../../../platform/mega_rf/utils/status_codes.h"
 1431               		.file 13 "config/config.h"
 1432               		.file 14 "../../../platform/common/services/sleepmgr/mega_rf/sleepmgr.h"
DEFINED SYMBOLS
                            *ABS*:00000000 test_sync_timers.c
C:\Users\GUILHE~1\AppData\Local\Temp\cconLJCd.s:2      *ABS*:0000003e __SP_H__
C:\Users\GUILHE~1\AppData\Local\Temp\cconLJCd.s:3      *ABS*:0000003d __SP_L__
C:\Users\GUILHE~1\AppData\Local\Temp\cconLJCd.s:4      *ABS*:0000003f __SREG__
C:\Users\GUILHE~1\AppData\Local\Temp\cconLJCd.s:5      *ABS*:0000003b __RAMPZ__
C:\Users\GUILHE~1\AppData\Local\Temp\cconLJCd.s:6      *ABS*:00000000 __tmp_reg__
C:\Users\GUILHE~1\AppData\Local\Temp\cconLJCd.s:7      *ABS*:00000001 __zero_reg__
                            *COM*:00000001 n
                            *COM*:00000004 tTS
                            *COM*:00000002 macLLDNnumTimeSlots
                            *COM*:00000002 macLLDNnumUplinkTS
                            *COM*:00000002 macLLDNRetransmitTS
C:\Users\GUILHE~1\AppData\Local\Temp\cconLJCd.s:17     .text:00000000 sysclk_get_main_hz
C:\Users\GUILHE~1\AppData\Local\Temp\cconLJCd.s:54     .text:0000001a sysclk_get_source_clock_hz
C:\Users\GUILHE~1\AppData\Local\Temp\cconLJCd.s:91     .progmem.data.baudctrl_1mhz:00000000 baudctrl_1mhz
C:\Users\GUILHE~1\AppData\Local\Temp\cconLJCd.s:103    .progmem.data.baudctrl_8mhz:00000000 baudctrl_8mhz
C:\Users\GUILHE~1\AppData\Local\Temp\cconLJCd.s:115    .progmem.data.baudctrl_16mhz:00000000 baudctrl_16mhz
C:\Users\GUILHE~1\AppData\Local\Temp\cconLJCd.s:126    .text:00000034 usart_double_baud_enable
C:\Users\GUILHE~1\AppData\Local\Temp\cconLJCd.s:175    .text:00000062 usart_serial_init
C:\Users\GUILHE~1\AppData\Local\Temp\cconLJCd.s:270    .text:000000de usart_serial_putchar
C:\Users\GUILHE~1\AppData\Local\Temp\cconLJCd.s:314    .text:00000106 usart_serial_getchar
C:\Users\GUILHE~1\AppData\Local\Temp\cconLJCd.s:365    .text:0000013c stdio_serial_init
C:\Users\GUILHE~1\AppData\Local\Temp\cconLJCd.s:436    .text:0000019e macsc_read32
C:\Users\GUILHE~1\AppData\Local\Temp\cconLJCd.s:519    .text:00000208 macsc_read_count
C:\Users\GUILHE~1\AppData\Local\Temp\cconLJCd.s:562    .text:00000232 macsc_enable_manual_bts
C:\Users\GUILHE~1\AppData\Local\Temp\cconLJCd.s:615    .bss.state:00000000 state
                            *COM*:00000008 rec_beacon
C:\Users\GUILHE~1\AppData\Local\Temp\cconLJCd.s:621    .bss.msgReq:00000000 msgReq
C:\Users\GUILHE~1\AppData\Local\Temp\cconLJCd.s:626    .bss.PanId:00000000 PanId
C:\Users\GUILHE~1\AppData\Local\Temp\cconLJCd.s:632    .bss.beaconInterval_association:00000000 beaconInterval_association
C:\Users\GUILHE~1\AppData\Local\Temp\cconLJCd.s:638    .bss.counter:00000000 counter
C:\Users\GUILHE~1\AppData\Local\Temp\cconLJCd.s:644    .bss.media:00000000 media
C:\Users\GUILHE~1\AppData\Local\Temp\cconLJCd.s:650    .bss.be_read:00000000 be_read
C:\Users\GUILHE~1\AppData\Local\Temp\cconLJCd.s:656    .bss.anterior:00000000 anterior
C:\Users\GUILHE~1\AppData\Local\Temp\cconLJCd.s:662    .bss.tmr_read:00000000 tmr_read
C:\Users\GUILHE~1\AppData\Local\Temp\cconLJCd.s:668    .bss.beacon_tmr:00000000 beacon_tmr
C:\Users\GUILHE~1\AppData\Local\Temp\cconLJCd.s:674    .bss.beacon_received:00000000 beacon_received
C:\Users\GUILHE~1\AppData\Local\Temp\cconLJCd.s:680    .data.error:00000000 error
                            *COM*:00000002 msg_wait_time
C:\Users\GUILHE~1\AppData\Local\Temp\cconLJCd.s:688    .text:00000266 lldn_server_beacon
C:\Users\GUILHE~1\AppData\Local\Temp\cconLJCd.s:780    .text:000002ea time_slot
C:\Users\GUILHE~1\AppData\Local\Temp\cconLJCd.s:821    .text:00000310 send
C:\Users\GUILHE~1\AppData\Local\Temp\cconLJCd.s:863    .text:00000338 node_time_handler
C:\Users\GUILHE~1\AppData\Local\Temp\cconLJCd.s:909    .text:00000366 appBeaconInd
C:\Users\GUILHE~1\AppData\Local\Temp\cconLJCd.s:1006   .text:000003f0 appBeaconInd_2
C:\Users\GUILHE~1\AppData\Local\Temp\cconLJCd.s:1085   .text:00000454 appInit
C:\Users\GUILHE~1\AppData\Local\Temp\cconLJCd.s:1270   .text:000005ca APP_TaskHandler
C:\Users\GUILHE~1\AppData\Local\Temp\cconLJCd.s:1328   .text:000005f4 main

UNDEFINED SYMBOLS
usart_init_rs232
usart_putchar
usart_getchar
stdio_base
ptr_put
ptr_get
_read
_write
fdevopen
NWK_DataReq
printf
putchar
macsc_set_cmp2_int_cb
macsc_disable_cmp_int
__floatsisf
__addsf3
__divsf3
__mulsf3
__fixunssfsi
NWK_SetAddr
PHY_SetChannel
PHY_SetRxState
NWK_SetPanId
PHY_SetTdmaMode
macsc_set_cmp1_int_cb
macsc_set_cmp3_int_cb
macsc_enable_cmp_int
macsc_use_cmp
NWK_OpenEndpoint
PHY_SetPromiscuousMode
sysclk_init
board_init
SYS_Init
sm_init
usart_set_baudrate_precalculated
SYS_TaskHandler
__do_copy_data
__do_clear_bss
