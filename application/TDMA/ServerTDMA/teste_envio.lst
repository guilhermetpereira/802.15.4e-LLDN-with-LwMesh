   1               		.file	"teste_envio.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__RAMPZ__ = 0x3b
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
   8               		.text
   9               	.Ltext0:
  10               		.cfi_sections	.debug_frame
  11               		.comm	n,1,1
  12               		.comm	tTS,4,1
  13               		.comm	macLLDNnumTimeSlots,2,1
  14               		.comm	macLLDNnumUplinkTS,2,1
  15               		.comm	macLLDNRetransmitTS,2,1
  17               	sysclk_get_main_hz:
  18               	.LFB67:
  19               		.file 1 "../../../platform/common/services/clock/mega/sysclk.h"
   1:../../../platform/common/services/clock/mega/sysclk.h **** /**
   2:../../../platform/common/services/clock/mega/sysclk.h ****  * \file
   3:../../../platform/common/services/clock/mega/sysclk.h ****  *
   4:../../../platform/common/services/clock/mega/sysclk.h ****  * \brief Chip-specific system clock management functions
   5:../../../platform/common/services/clock/mega/sysclk.h ****  *
   6:../../../platform/common/services/clock/mega/sysclk.h ****  * Copyright (c) 2012 Atmel Corporation. All rights reserved.
   7:../../../platform/common/services/clock/mega/sysclk.h ****  *
   8:../../../platform/common/services/clock/mega/sysclk.h ****  * \asf_license_start
   9:../../../platform/common/services/clock/mega/sysclk.h ****  *
  10:../../../platform/common/services/clock/mega/sysclk.h ****  * \page License
  11:../../../platform/common/services/clock/mega/sysclk.h ****  *
  12:../../../platform/common/services/clock/mega/sysclk.h ****  * Redistribution and use in source and binary forms, with or without
  13:../../../platform/common/services/clock/mega/sysclk.h ****  * modification, are permitted provided that the following conditions are met:
  14:../../../platform/common/services/clock/mega/sysclk.h ****  *
  15:../../../platform/common/services/clock/mega/sysclk.h ****  * 1. Redistributions of source code must retain the above copyright notice,
  16:../../../platform/common/services/clock/mega/sysclk.h ****  *    this list of conditions and the following disclaimer.
  17:../../../platform/common/services/clock/mega/sysclk.h ****  *
  18:../../../platform/common/services/clock/mega/sysclk.h ****  * 2. Redistributions in binary form must reproduce the above copyright notice,
  19:../../../platform/common/services/clock/mega/sysclk.h ****  *    this list of conditions and the following disclaimer in the documentation
  20:../../../platform/common/services/clock/mega/sysclk.h ****  *    and/or other materials provided with the distribution.
  21:../../../platform/common/services/clock/mega/sysclk.h ****  *
  22:../../../platform/common/services/clock/mega/sysclk.h ****  * 3. The name of Atmel may not be used to endorse or promote products derived
  23:../../../platform/common/services/clock/mega/sysclk.h ****  *    from this software without specific prior written permission.
  24:../../../platform/common/services/clock/mega/sysclk.h ****  *
  25:../../../platform/common/services/clock/mega/sysclk.h ****  * 4. This software may only be redistributed and used in connection with an
  26:../../../platform/common/services/clock/mega/sysclk.h ****  *    Atmel microcontroller product.
  27:../../../platform/common/services/clock/mega/sysclk.h ****  *
  28:../../../platform/common/services/clock/mega/sysclk.h ****  * THIS SOFTWARE IS PROVIDED BY ATMEL "AS IS" AND ANY EXPRESS OR IMPLIED
  29:../../../platform/common/services/clock/mega/sysclk.h ****  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
  30:../../../platform/common/services/clock/mega/sysclk.h ****  * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE
  31:../../../platform/common/services/clock/mega/sysclk.h ****  * EXPRESSLY AND SPECIFICALLY DISCLAIMED. IN NO EVENT SHALL ATMEL BE LIABLE FOR
  32:../../../platform/common/services/clock/mega/sysclk.h ****  * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  33:../../../platform/common/services/clock/mega/sysclk.h ****  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
  34:../../../platform/common/services/clock/mega/sysclk.h ****  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
  35:../../../platform/common/services/clock/mega/sysclk.h ****  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
  36:../../../platform/common/services/clock/mega/sysclk.h ****  * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
  37:../../../platform/common/services/clock/mega/sysclk.h ****  * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  38:../../../platform/common/services/clock/mega/sysclk.h ****  * POSSIBILITY OF SUCH DAMAGE.
  39:../../../platform/common/services/clock/mega/sysclk.h ****  *
  40:../../../platform/common/services/clock/mega/sysclk.h ****  * \asf_license_stop
  41:../../../platform/common/services/clock/mega/sysclk.h ****  *
  42:../../../platform/common/services/clock/mega/sysclk.h ****  */
  43:../../../platform/common/services/clock/mega/sysclk.h **** #ifndef MEGA_SYSCLK_H_INCLUDED
  44:../../../platform/common/services/clock/mega/sysclk.h **** #define MEGA_SYSCLK_H_INCLUDED
  45:../../../platform/common/services/clock/mega/sysclk.h **** 
  46:../../../platform/common/services/clock/mega/sysclk.h **** #include <board.h>
  47:../../../platform/common/services/clock/mega/sysclk.h **** #include <compiler.h>
  48:../../../platform/common/services/clock/mega/sysclk.h **** #include <parts.h>
  49:../../../platform/common/services/clock/mega/sysclk.h **** 
  50:../../../platform/common/services/clock/mega/sysclk.h **** /* Include clock configuration for the project. */
  51:../../../platform/common/services/clock/mega/sysclk.h **** #include <conf_clock.h>
  52:../../../platform/common/services/clock/mega/sysclk.h **** 
  53:../../../platform/common/services/clock/mega/sysclk.h **** #ifdef __cplusplus
  54:../../../platform/common/services/clock/mega/sysclk.h **** extern "C" {
  55:../../../platform/common/services/clock/mega/sysclk.h **** #endif
  56:../../../platform/common/services/clock/mega/sysclk.h **** #define ASM __asm__
  57:../../../platform/common/services/clock/mega/sysclk.h **** 
  58:../../../platform/common/services/clock/mega/sysclk.h **** /* CONFIG_SYSCLK_PSDIV  to use default if not defined*/
  59:../../../platform/common/services/clock/mega/sysclk.h **** #ifndef CONFIG_SYSCLK_PSDIV
  60:../../../platform/common/services/clock/mega/sysclk.h **** # define CONFIG_SYSCLK_PSDIV    SYSCLK_PSDIV_8
  61:../../../platform/common/services/clock/mega/sysclk.h **** #endif
  62:../../../platform/common/services/clock/mega/sysclk.h **** 
  63:../../../platform/common/services/clock/mega/sysclk.h **** /* ! \name Prescaler Setting (relative to CLKsys) */
  64:../../../platform/common/services/clock/mega/sysclk.h **** /* @{ */
  65:../../../platform/common/services/clock/mega/sysclk.h **** #define SYSCLK_PSDIV_1      0   /* !< Do not prescale */
  66:../../../platform/common/services/clock/mega/sysclk.h **** #define SYSCLK_PSDIV_2      1   /* !< Prescale CLKper4 by 2 */
  67:../../../platform/common/services/clock/mega/sysclk.h **** #define SYSCLK_PSDIV_4      2   /* !< Prescale CLKper4 by 4 */
  68:../../../platform/common/services/clock/mega/sysclk.h **** #define SYSCLK_PSDIV_8      3   /* !< Prescale CLKper4 by 8 */
  69:../../../platform/common/services/clock/mega/sysclk.h **** #define SYSCLK_PSDIV_16     4   /* !< Prescale CLKper4 by 16 */
  70:../../../platform/common/services/clock/mega/sysclk.h **** #define SYSCLK_PSDIV_32     5   /* !< Prescale CLKper4 by 32 */
  71:../../../platform/common/services/clock/mega/sysclk.h **** #define SYSCLK_PSDIV_64     6   /* !< Prescale CLKper4 by 64 */
  72:../../../platform/common/services/clock/mega/sysclk.h **** #define SYSCLK_PSDIV_128    7   /* !< Prescale CLKper4 by 128 */
  73:../../../platform/common/services/clock/mega/sysclk.h **** #define SYSCLK_PSDIV_256    8   /* !< Prescale CLKper4 by 256 */
  74:../../../platform/common/services/clock/mega/sysclk.h **** 
  75:../../../platform/common/services/clock/mega/sysclk.h **** /* @} */
  76:../../../platform/common/services/clock/mega/sysclk.h **** 
  77:../../../platform/common/services/clock/mega/sysclk.h **** #if MEGA_RF || MEGA_XX0_1 || MEGA_XX4 || MEGA_XX4_A
  78:../../../platform/common/services/clock/mega/sysclk.h **** 
  79:../../../platform/common/services/clock/mega/sysclk.h **** #define NUMBER_OF_POWER_REG       2
  80:../../../platform/common/services/clock/mega/sysclk.h **** /*Starting Address for power reduction*/
  81:../../../platform/common/services/clock/mega/sysclk.h **** #define POWER_REG_ADD             PRR0
  82:../../../platform/common/services/clock/mega/sysclk.h **** 
  83:../../../platform/common/services/clock/mega/sysclk.h **** /* ! \name Power Reduction  Clock Port Numbers */
  84:../../../platform/common/services/clock/mega/sysclk.h **** enum power_red_id {
  85:../../../platform/common/services/clock/mega/sysclk.h **** 	POWER_RED_REG0,     /* !< Devices on PRR0 */
  86:../../../platform/common/services/clock/mega/sysclk.h **** #if !MEGA_XX4 || !MEGA_XX4_A || MEGA_XX0_1
  87:../../../platform/common/services/clock/mega/sysclk.h **** 	POWER_RED_REG1,     /* !< Devices on PRR1 */
  88:../../../platform/common/services/clock/mega/sysclk.h **** #endif
  89:../../../platform/common/services/clock/mega/sysclk.h **** };
  90:../../../platform/common/services/clock/mega/sysclk.h **** #endif
  91:../../../platform/common/services/clock/mega/sysclk.h **** 
  92:../../../platform/common/services/clock/mega/sysclk.h **** /****************************************************
  93:../../../platform/common/services/clock/mega/sysclk.h ****  * Given a dummy type but not used for these groups
  94:../../../platform/common/services/clock/mega/sysclk.h ****  * to support for otherthen megaRF device.
  95:../../../platform/common/services/clock/mega/sysclk.h ****  **************************************************/
  96:../../../platform/common/services/clock/mega/sysclk.h **** #if MEGA_XX8 || MEGA_XX8_A || MEGA_UNSPECIFIED
  97:../../../platform/common/services/clock/mega/sysclk.h **** #define NUMBER_OF_POWER_REG       1
  98:../../../platform/common/services/clock/mega/sysclk.h **** /*Starting Address for power reduction*/
  99:../../../platform/common/services/clock/mega/sysclk.h **** #define POWER_REG_ADD             PRR
 100:../../../platform/common/services/clock/mega/sysclk.h **** 
 101:../../../platform/common/services/clock/mega/sysclk.h **** /* ! \name Power Reduction  Clock Port Numbers */
 102:../../../platform/common/services/clock/mega/sysclk.h **** enum power_red_id {
 103:../../../platform/common/services/clock/mega/sysclk.h **** 	POWER_RED_REG0,     /* !< Devices on PRR */
 104:../../../platform/common/services/clock/mega/sysclk.h **** };
 105:../../../platform/common/services/clock/mega/sysclk.h **** #endif
 106:../../../platform/common/services/clock/mega/sysclk.h **** 
 107:../../../platform/common/services/clock/mega/sysclk.h **** /* Bit mask for the power reduction register based on */
 108:../../../platform/common/services/clock/mega/sysclk.h **** /*   MCU ARCH.                                        */
 109:../../../platform/common/services/clock/mega/sysclk.h **** #if MEGA_RF
 110:../../../platform/common/services/clock/mega/sysclk.h **** /*Bit mask for PRR2 */
 111:../../../platform/common/services/clock/mega/sysclk.h **** 
 112:../../../platform/common/services/clock/mega/sysclk.h **** #define PRRAM0_bm                       1 << PRRAM0
 113:../../../platform/common/services/clock/mega/sysclk.h **** #define PRRAM1_bm                       1 << PRRAM1
 114:../../../platform/common/services/clock/mega/sysclk.h **** #define PRRAM2_bm                       1 << PRRAM2
 115:../../../platform/common/services/clock/mega/sysclk.h **** #define PRRAM3_bm                       1 << PRRAM3
 116:../../../platform/common/services/clock/mega/sysclk.h **** #endif
 117:../../../platform/common/services/clock/mega/sysclk.h **** 
 118:../../../platform/common/services/clock/mega/sysclk.h **** /*Bit mask for the power reduction 0 or PRR*/
 119:../../../platform/common/services/clock/mega/sysclk.h **** #if !MEGA_XX_UN0 && !MEGA_XX_UN0
 120:../../../platform/common/services/clock/mega/sysclk.h **** #define PRADC_bm                        1 << PRADC
 121:../../../platform/common/services/clock/mega/sysclk.h **** #define PRUSART0_bm                     1 << PRUSART0
 122:../../../platform/common/services/clock/mega/sysclk.h **** #define PRSPI_bm                        1 << PRSPI
 123:../../../platform/common/services/clock/mega/sysclk.h **** #define PRTIM1_bm                       1 << PRTIM1
 124:../../../platform/common/services/clock/mega/sysclk.h **** #endif
 125:../../../platform/common/services/clock/mega/sysclk.h **** 
 126:../../../platform/common/services/clock/mega/sysclk.h **** #if MEGA_RF
 127:../../../platform/common/services/clock/mega/sysclk.h **** #define PRPGA_bm                        1 << PRPGA
 128:../../../platform/common/services/clock/mega/sysclk.h **** #endif
 129:../../../platform/common/services/clock/mega/sysclk.h **** 
 130:../../../platform/common/services/clock/mega/sysclk.h **** #if !MEGA_UNSPECIFIED
 131:../../../platform/common/services/clock/mega/sysclk.h **** #define PRTIM0_bm                       1 << PRTIM0
 132:../../../platform/common/services/clock/mega/sysclk.h **** #define PRTIM2_bm                       1 << PRTIM2
 133:../../../platform/common/services/clock/mega/sysclk.h **** #define PRTWI_bm                        1 << PRTWI
 134:../../../platform/common/services/clock/mega/sysclk.h **** #endif
 135:../../../platform/common/services/clock/mega/sysclk.h **** 
 136:../../../platform/common/services/clock/mega/sysclk.h **** #if MEGA_XX_UN2
 137:../../../platform/common/services/clock/mega/sysclk.h **** #define PRLCD_bm                        1 << PRLCD
 138:../../../platform/common/services/clock/mega/sysclk.h **** #endif
 139:../../../platform/common/services/clock/mega/sysclk.h **** 
 140:../../../platform/common/services/clock/mega/sysclk.h **** /*Bit mask for  PRR1  */
 141:../../../platform/common/services/clock/mega/sysclk.h **** #ifdef PRR1
 142:../../../platform/common/services/clock/mega/sysclk.h **** #if (MEGA_XX4 || MEGA_XX4_A)
 143:../../../platform/common/services/clock/mega/sysclk.h **** #define PRTIM3_bm                       1 << PRTIM3
 144:../../../platform/common/services/clock/mega/sysclk.h **** #endif
 145:../../../platform/common/services/clock/mega/sysclk.h **** #endif
 146:../../../platform/common/services/clock/mega/sysclk.h **** 
 147:../../../platform/common/services/clock/mega/sysclk.h **** #if MEGA_RF || MEGA_XX4 || MEGA_XX4_A
 148:../../../platform/common/services/clock/mega/sysclk.h **** #define PRUSART1_bm                     1 << PRUSART1
 149:../../../platform/common/services/clock/mega/sysclk.h **** #define PRUSART2_bm                     1 << PRUSART2
 150:../../../platform/common/services/clock/mega/sysclk.h **** #define PRUSART3_bm                     1 << PRUSART3
 151:../../../platform/common/services/clock/mega/sysclk.h **** #define PRTIM3_bm                       1 << PRTIM3
 152:../../../platform/common/services/clock/mega/sysclk.h **** #define PRTIM4_bm                       1 << PRTIM4
 153:../../../platform/common/services/clock/mega/sysclk.h **** #define PRTIM5_bm                       1 << PRTIM5
 154:../../../platform/common/services/clock/mega/sysclk.h **** #endif
 155:../../../platform/common/services/clock/mega/sysclk.h **** 
 156:../../../platform/common/services/clock/mega/sysclk.h **** #if MEGA_RF
 157:../../../platform/common/services/clock/mega/sysclk.h **** #define PRTRX24_bm                      1 << PRTRX24
 158:../../../platform/common/services/clock/mega/sysclk.h **** #endif
 159:../../../platform/common/services/clock/mega/sysclk.h **** 
 160:../../../platform/common/services/clock/mega/sysclk.h **** /**
 161:../../../platform/common/services/clock/mega/sysclk.h ****  * \name Querying the system clock and its derived clocks
 162:../../../platform/common/services/clock/mega/sysclk.h ****  */
 163:../../../platform/common/services/clock/mega/sysclk.h **** /* @{ */
 164:../../../platform/common/services/clock/mega/sysclk.h **** 
 165:../../../platform/common/services/clock/mega/sysclk.h **** /**
 166:../../../platform/common/services/clock/mega/sysclk.h ****  * \brief Return the current rate in Hz of the main system clock
 167:../../../platform/common/services/clock/mega/sysclk.h ****  * To know the clock value at what frequency the main clock is running
 168:../../../platform/common/services/clock/mega/sysclk.h ****  * \return Frequency of the main system clock, in Hz.
 169:../../../platform/common/services/clock/mega/sysclk.h ****  * \todo : please initialize the SYSCLK_SOURCE in conf_clock.h file for
 170:../../../platform/common/services/clock/mega/sysclk.h ****  * configured source clock using fuses.
 171:../../../platform/common/services/clock/mega/sysclk.h ****  * \eg. #define SYSCLK_SOURCE SYSCLK_SRC_RC16MHZ to use internal RC
 172:../../../platform/common/services/clock/mega/sysclk.h ****  * oscillator for clock source.
 173:../../../platform/common/services/clock/mega/sysclk.h ****  */
 174:../../../platform/common/services/clock/mega/sysclk.h **** static inline uint32_t sysclk_get_main_hz(void)
 175:../../../platform/common/services/clock/mega/sysclk.h **** {
  20               		.loc 1 175 0
  21               		.cfi_startproc
  22 0000 CF93      		push r28
  23               	.LCFI0:
  24               		.cfi_def_cfa_offset 3
  25               		.cfi_offset 28, -2
  26 0002 DF93      		push r29
  27               	.LCFI1:
  28               		.cfi_def_cfa_offset 4
  29               		.cfi_offset 29, -3
  30 0004 CDB7      		in r28,__SP_L__
  31 0006 DEB7      		in r29,__SP_H__
  32               	.LCFI2:
  33               		.cfi_def_cfa_register 28
  34               	/* prologue: function */
  35               	/* frame size = 0 */
  36               	/* stack size = 2 */
  37               	.L__stack_usage = 2
 176:../../../platform/common/services/clock/mega/sysclk.h **** 	switch (SYSCLK_SOURCE) {
 177:../../../platform/common/services/clock/mega/sysclk.h **** 	case SYSCLK_SRC_RC16MHZ:
 178:../../../platform/common/services/clock/mega/sysclk.h **** 		return 16000000UL;
 179:../../../platform/common/services/clock/mega/sysclk.h **** 
 180:../../../platform/common/services/clock/mega/sysclk.h **** 	case SYSCLK_SRC_RC128KHZ:
 181:../../../platform/common/services/clock/mega/sysclk.h **** 		return 128000UL;
 182:../../../platform/common/services/clock/mega/sysclk.h **** 
 183:../../../platform/common/services/clock/mega/sysclk.h **** #if MEGA_RF
 184:../../../platform/common/services/clock/mega/sysclk.h **** 	case SYSCLK_SRC_TRS16MHZ:
 185:../../../platform/common/services/clock/mega/sysclk.h **** 		return 16000000UL;
  38               		.loc 1 185 0
  39 0008 80E0      		ldi r24,0
  40 000a 94E2      		ldi r25,lo8(36)
  41 000c A4EF      		ldi r26,lo8(-12)
  42 000e B0E0      		ldi r27,0
 186:../../../platform/common/services/clock/mega/sysclk.h **** #endif
 187:../../../platform/common/services/clock/mega/sysclk.h **** #ifdef BOARD_EXTERNAL_CLK
 188:../../../platform/common/services/clock/mega/sysclk.h **** 	case SYSCLK_SRC_EXTERNAL:
 189:../../../platform/common/services/clock/mega/sysclk.h **** 		return BOARD_EXTERNAL_CLK;
 190:../../../platform/common/services/clock/mega/sysclk.h **** #endif
 191:../../../platform/common/services/clock/mega/sysclk.h **** 	default:
 192:../../../platform/common/services/clock/mega/sysclk.h **** 
 193:../../../platform/common/services/clock/mega/sysclk.h **** 		return 1000000UL;
 194:../../../platform/common/services/clock/mega/sysclk.h **** 	}
 195:../../../platform/common/services/clock/mega/sysclk.h **** }
  43               		.loc 1 195 0
  44 0010 BC01      		movw r22,r24
  45 0012 CD01      		movw r24,r26
  46               	/* epilogue start */
  47 0014 DF91      		pop r29
  48 0016 CF91      		pop r28
  49 0018 0895      		ret
  50               		.cfi_endproc
  51               	.LFE67:
  54               	sysclk_get_source_clock_hz:
  55               	.LFB68:
 196:../../../platform/common/services/clock/mega/sysclk.h **** 
 197:../../../platform/common/services/clock/mega/sysclk.h **** /**
 198:../../../platform/common/services/clock/mega/sysclk.h ****  * \brief Return the current rate in Hz of source clock in Hz.
 199:../../../platform/common/services/clock/mega/sysclk.h ****  *
 200:../../../platform/common/services/clock/mega/sysclk.h ****  * This clock always runs at the same rate as the CPU clock unless the divider
 201:../../../platform/common/services/clock/mega/sysclk.h ****  * is set.
 202:../../../platform/common/services/clock/mega/sysclk.h ****  *
 203:../../../platform/common/services/clock/mega/sysclk.h ****  * \return Frequency of the system clock, in Hz.
 204:../../../platform/common/services/clock/mega/sysclk.h ****  */
 205:../../../platform/common/services/clock/mega/sysclk.h **** static inline uint32_t sysclk_get_source_clock_hz(void)
 206:../../../platform/common/services/clock/mega/sysclk.h **** {
  56               		.loc 1 206 0
  57               		.cfi_startproc
  58 001a CF93      		push r28
  59               	.LCFI3:
  60               		.cfi_def_cfa_offset 3
  61               		.cfi_offset 28, -2
  62 001c DF93      		push r29
  63               	.LCFI4:
  64               		.cfi_def_cfa_offset 4
  65               		.cfi_offset 29, -3
  66 001e CDB7      		in r28,__SP_L__
  67 0020 DEB7      		in r29,__SP_H__
  68               	.LCFI5:
  69               		.cfi_def_cfa_register 28
  70               	/* prologue: function */
  71               	/* frame size = 0 */
  72               	/* stack size = 2 */
  73               	.L__stack_usage = 2
 207:../../../platform/common/services/clock/mega/sysclk.h **** 	switch (CONFIG_SYSCLK_PSDIV) {
 208:../../../platform/common/services/clock/mega/sysclk.h **** 	case SYSCLK_PSDIV_1: /* Fall through */
 209:../../../platform/common/services/clock/mega/sysclk.h **** 		if (SYSCLK_SOURCE == SYSCLK_SRC_RC16MHZ ||
 210:../../../platform/common/services/clock/mega/sysclk.h **** 				SYSCLK_SOURCE == SYSCLK_SRC_RC128KHZ) {
 211:../../../platform/common/services/clock/mega/sysclk.h **** 			return sysclk_get_main_hz() / 2;
 212:../../../platform/common/services/clock/mega/sysclk.h **** 		} else {
 213:../../../platform/common/services/clock/mega/sysclk.h **** 			return sysclk_get_main_hz();
  74               		.loc 1 213 0
  75 0022 0E94 0000 		call sysclk_get_main_hz
  76 0026 DC01      		movw r26,r24
  77 0028 CB01      		movw r24,r22
 214:../../../platform/common/services/clock/mega/sysclk.h **** 		}
 215:../../../platform/common/services/clock/mega/sysclk.h **** 
 216:../../../platform/common/services/clock/mega/sysclk.h **** 	case SYSCLK_PSDIV_2:
 217:../../../platform/common/services/clock/mega/sysclk.h **** 		if (SYSCLK_SOURCE == SYSCLK_SRC_RC16MHZ ||
 218:../../../platform/common/services/clock/mega/sysclk.h **** 				SYSCLK_SOURCE == SYSCLK_SRC_RC128KHZ) {
 219:../../../platform/common/services/clock/mega/sysclk.h **** 			return sysclk_get_main_hz() / 4;
 220:../../../platform/common/services/clock/mega/sysclk.h **** 		} else {
 221:../../../platform/common/services/clock/mega/sysclk.h **** 			return sysclk_get_main_hz() / 2;
 222:../../../platform/common/services/clock/mega/sysclk.h **** 		}
 223:../../../platform/common/services/clock/mega/sysclk.h **** 
 224:../../../platform/common/services/clock/mega/sysclk.h **** 	case SYSCLK_PSDIV_4:
 225:../../../platform/common/services/clock/mega/sysclk.h **** 		if (SYSCLK_SOURCE == SYSCLK_SRC_RC16MHZ ||
 226:../../../platform/common/services/clock/mega/sysclk.h **** 				SYSCLK_SOURCE == SYSCLK_SRC_RC128KHZ) {
 227:../../../platform/common/services/clock/mega/sysclk.h **** 			return sysclk_get_main_hz() / 8;
 228:../../../platform/common/services/clock/mega/sysclk.h **** 		} else {
 229:../../../platform/common/services/clock/mega/sysclk.h **** 			return sysclk_get_main_hz() / 4;
 230:../../../platform/common/services/clock/mega/sysclk.h **** 		}
 231:../../../platform/common/services/clock/mega/sysclk.h **** 
 232:../../../platform/common/services/clock/mega/sysclk.h **** 	case SYSCLK_PSDIV_8:
 233:../../../platform/common/services/clock/mega/sysclk.h **** 		if (SYSCLK_SOURCE == SYSCLK_SRC_RC16MHZ ||
 234:../../../platform/common/services/clock/mega/sysclk.h **** 				SYSCLK_SOURCE == SYSCLK_SRC_RC128KHZ) {
 235:../../../platform/common/services/clock/mega/sysclk.h **** 			return sysclk_get_main_hz() / 16;
 236:../../../platform/common/services/clock/mega/sysclk.h **** 		} else {
 237:../../../platform/common/services/clock/mega/sysclk.h **** 			return sysclk_get_main_hz() / 8;
 238:../../../platform/common/services/clock/mega/sysclk.h **** 		}
 239:../../../platform/common/services/clock/mega/sysclk.h **** 
 240:../../../platform/common/services/clock/mega/sysclk.h **** 	case SYSCLK_PSDIV_16:
 241:../../../platform/common/services/clock/mega/sysclk.h **** 		if (SYSCLK_SOURCE == SYSCLK_SRC_RC16MHZ ||
 242:../../../platform/common/services/clock/mega/sysclk.h **** 				SYSCLK_SOURCE == SYSCLK_SRC_RC128KHZ) {
 243:../../../platform/common/services/clock/mega/sysclk.h **** 			return sysclk_get_main_hz() / 32;
 244:../../../platform/common/services/clock/mega/sysclk.h **** 		} else {
 245:../../../platform/common/services/clock/mega/sysclk.h **** 			return sysclk_get_main_hz() / 16;
 246:../../../platform/common/services/clock/mega/sysclk.h **** 		}
 247:../../../platform/common/services/clock/mega/sysclk.h **** 
 248:../../../platform/common/services/clock/mega/sysclk.h **** 	case SYSCLK_PSDIV_32:
 249:../../../platform/common/services/clock/mega/sysclk.h **** 		if (SYSCLK_SOURCE == SYSCLK_SRC_RC16MHZ ||
 250:../../../platform/common/services/clock/mega/sysclk.h **** 				SYSCLK_SOURCE == SYSCLK_SRC_RC128KHZ) {
 251:../../../platform/common/services/clock/mega/sysclk.h **** 			return sysclk_get_main_hz() / 64;
 252:../../../platform/common/services/clock/mega/sysclk.h **** 		} else {
 253:../../../platform/common/services/clock/mega/sysclk.h **** 			return sysclk_get_main_hz() / 32;
 254:../../../platform/common/services/clock/mega/sysclk.h **** 		}
 255:../../../platform/common/services/clock/mega/sysclk.h **** 
 256:../../../platform/common/services/clock/mega/sysclk.h **** 	case SYSCLK_PSDIV_64:
 257:../../../platform/common/services/clock/mega/sysclk.h **** 		if (SYSCLK_SOURCE == SYSCLK_SRC_RC16MHZ ||
 258:../../../platform/common/services/clock/mega/sysclk.h **** 				SYSCLK_SOURCE == SYSCLK_SRC_RC128KHZ) {
 259:../../../platform/common/services/clock/mega/sysclk.h **** 			return sysclk_get_main_hz() / 128;
 260:../../../platform/common/services/clock/mega/sysclk.h **** 		} else {
 261:../../../platform/common/services/clock/mega/sysclk.h **** 			return sysclk_get_main_hz() / 64;
 262:../../../platform/common/services/clock/mega/sysclk.h **** 		}
 263:../../../platform/common/services/clock/mega/sysclk.h **** 
 264:../../../platform/common/services/clock/mega/sysclk.h **** 	case SYSCLK_PSDIV_128:
 265:../../../platform/common/services/clock/mega/sysclk.h **** 		if (SYSCLK_SOURCE == SYSCLK_SRC_RC16MHZ ||
 266:../../../platform/common/services/clock/mega/sysclk.h **** 				SYSCLK_SOURCE == SYSCLK_SRC_RC128KHZ) {
 267:../../../platform/common/services/clock/mega/sysclk.h **** 			return sysclk_get_main_hz() / 256;
 268:../../../platform/common/services/clock/mega/sysclk.h **** 		} else {
 269:../../../platform/common/services/clock/mega/sysclk.h **** 			return sysclk_get_main_hz() / 128;
 270:../../../platform/common/services/clock/mega/sysclk.h **** 		}
 271:../../../platform/common/services/clock/mega/sysclk.h **** 
 272:../../../platform/common/services/clock/mega/sysclk.h **** 	case SYSCLK_PSDIV_256:
 273:../../../platform/common/services/clock/mega/sysclk.h **** 		if (SYSCLK_SOURCE == SYSCLK_SRC_RC16MHZ ||
 274:../../../platform/common/services/clock/mega/sysclk.h **** 				SYSCLK_SOURCE == SYSCLK_SRC_RC128KHZ) {
 275:../../../platform/common/services/clock/mega/sysclk.h **** 			return sysclk_get_main_hz() / 512;
 276:../../../platform/common/services/clock/mega/sysclk.h **** 		} else {
 277:../../../platform/common/services/clock/mega/sysclk.h **** 			return sysclk_get_main_hz() / 256;
 278:../../../platform/common/services/clock/mega/sysclk.h **** 		}
 279:../../../platform/common/services/clock/mega/sysclk.h **** 
 280:../../../platform/common/services/clock/mega/sysclk.h **** 	default:
 281:../../../platform/common/services/clock/mega/sysclk.h **** 		/*Invalide case*/
 282:../../../platform/common/services/clock/mega/sysclk.h **** 		return 0;
 283:../../../platform/common/services/clock/mega/sysclk.h **** 	}
 284:../../../platform/common/services/clock/mega/sysclk.h **** }
  78               		.loc 1 284 0
  79 002a BC01      		movw r22,r24
  80 002c CD01      		movw r24,r26
  81               	/* epilogue start */
  82 002e DF91      		pop r29
  83 0030 CF91      		pop r28
  84 0032 0895      		ret
  85               		.cfi_endproc
  86               	.LFE68:
  88               		.section	.progmem.data.baudctrl_1mhz,"a",@progbits
  91               	baudctrl_1mhz:
  92 0000 3300      		.word	51
  93 0002 1900      		.word	25
  94 0004 0C00      		.word	12
  95 0006 0600      		.word	6
  96 0008 0300      		.word	3
  97 000a 0200      		.word	2
  98 000c 0100      		.word	1
  99 000e FF00      		.word	255
 100               		.section	.progmem.data.baudctrl_8mhz,"a",@progbits
 103               	baudctrl_8mhz:
 104 0000 A001      		.word	416
 105 0002 CF00      		.word	207
 106 0004 6700      		.word	103
 107 0006 3300      		.word	51
 108 0008 1900      		.word	25
 109 000a 0C00      		.word	12
 110 000c 0700      		.word	7
 111 000e 0800      		.word	8
 112               		.section	.progmem.data.baudctrl_16mhz,"a",@progbits
 115               	baudctrl_16mhz:
 116 0000 4003      		.word	832
 117 0002 A001      		.word	416
 118 0004 CF00      		.word	207
 119 0006 6700      		.word	103
 120 0008 3300      		.word	51
 121 000a 1900      		.word	25
 122 000c 1000      		.word	16
 123 000e 1000      		.word	16
 124               		.text
 126               	usart_double_baud_enable:
 127               	.LFB101:
 128               		.file 2 "../../../platform/mega_rf/drivers/usart/usart_megarf.h"
   1:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** /**
   2:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * \file
   3:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  *
   4:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * \brief USART driver for AVR MEGARF.
   5:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  *
   6:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * This file contains basic functions for the AVR MEGA USART, with support for
   7:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * all modes, settings and clock speeds.
   8:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  *
   9:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * Copyright (c) 2013-2015 Atmel Corporation. All rights reserved.
  10:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  *
  11:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * \asf_license_start
  12:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  *
  13:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * \page License
  14:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  *
  15:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * Redistribution and use in source and binary forms, with or without
  16:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * modification, are permitted provided that the following conditions are met:
  17:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  *
  18:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * 1. Redistributions of source code must retain the above copyright notice,
  19:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  *    this list of conditions and the following disclaimer.
  20:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  *
  21:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * 2. Redistributions in binary form must reproduce the above copyright notice,
  22:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  *    this list of conditions and the following disclaimer in the documentation
  23:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  *    and/or other materials provided with the distribution.
  24:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  *
  25:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * 3. The name of Atmel may not be used to endorse or promote products derived
  26:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  *    from this software without specific prior written permission.
  27:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  *
  28:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * 4. This software may only be redistributed and used in connection with an
  29:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  *    Atmel microcontroller product.
  30:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  *
  31:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * THIS SOFTWARE IS PROVIDED BY ATMEL "AS IS" AND ANY EXPRESS OR IMPLIED
  32:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
  33:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE
  34:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * EXPRESSLY AND SPECIFICALLY DISCLAIMED. IN NO EVENT SHALL ATMEL BE LIABLE FOR
  35:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  36:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
  37:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
  38:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
  39:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
  40:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  41:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * POSSIBILITY OF SUCH DAMAGE.
  42:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  *
  43:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * \asf_license_stop
  44:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  *
  45:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  */
  46:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #ifndef _USART_MEGARF_H_
  47:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define _USART_MEGARF_H_
  48:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
  49:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #ifdef __cplusplus
  50:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** extern "C" {
  51:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #endif
  52:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
  53:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #include "compiler.h"
  54:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #include "status_codes.h"
  55:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
  56:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** /**
  57:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * \defgroup megarf_usart_group USART module (USART)
  58:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  *
  59:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * See \ref megarf_usart_quickstart.
  60:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  *
  61:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * This is a driver for configuring, enabling, disabling and use of the on-chip
  62:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * USART.
  63:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  *
  64:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * \section dependencies Dependencies
  65:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  *
  66:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * The USART module depends on the following modules:
  67:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  *  - \ref sysclk_group for peripheral clock control.
  68:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  *  - \ref port_driver_group for peripheral io port control.
  69:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  *
  70:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * @{
  71:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  */
  72:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
  73:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** /* ! Offset in lookup table for baudrate 1200 */
  74:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_BAUD_1200      0x00
  75:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** /* ! Offset in lookup table for baudrate 2400 */
  76:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_BAUD_2400      0x01
  77:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** /* ! Offset in lookup table for baudrate 4800 */
  78:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_BAUD_4800      0x02
  79:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** /* ! Offset in lookup table for baudrate 9600 */
  80:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_BAUD_9600      0x03
  81:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** /* ! Offset in lookup table for baudrate 19200 */
  82:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_BAUD_19200     0x04
  83:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** /* ! Offset in lookup table for baudrate 38400 */
  84:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_BAUD_38400     0x05
  85:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** /* ! Offset in lookup table for baudrate 57600 */
  86:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_BAUD_57600     0x06
  87:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** /* ! Offset in lookup table for baudrate 115200 */
  88:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_BAUD_115200    0x07
  89:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** /* ! Baudrate not in lookup table */
  90:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_BAUD_UNDEFINED 0xFF
  91:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
  92:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** typedef volatile uint8_t register8_t;
  93:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** typedef volatile uint16_t register16_t;
  94:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** /* Universal Synchronous/Asynchronous Receiver/Transmitter */
  95:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** typedef struct USART_struct {
  96:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	register8_t UCSRnA;  /* Control Register A */
  97:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	register8_t UCSRnB;  /* Control Register B */
  98:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	register8_t UCSRnC;  /* Control Register C */
  99:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	register8_t reserved;
 100:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	register16_t UBRR;  /* Baud Rate Register Value */
 101:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	register8_t UDR;  /* I/O Data Register */
 102:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** } USART_t;
 103:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 104:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USARTA0    (*(USART_t *)0xC0)   /* Universal Asynchronous
 105:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	                                 * Receiver-Transmitter A0 */
 106:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USARTA1    (*(USART_t *)0XC8)   /* Universal Asynchronous
 107:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	                                 * Receiver-Transmitter A1 */
 108:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 109:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** /* USART.UCSRxA  bit masks and bit positions */
 110:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_RXC_bm  0x80 /* RX complete bit mask.*/
 111:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_RXC_bp  7 /* RX complete bit position.*/
 112:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 113:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_TXC_bm  0x40 /* TX complete bit mask.*/
 114:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_TXC_bp  6 /* TX complete bit position.*/
 115:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 116:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_DRE_bm  0x20 /* DATA Register Empty Bit mask.*/
 117:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_DRE_bp  5 /*  DATA Register Empty bit position.*/
 118:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 119:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_FE_bm   0x10 /* Frame Error bit mask.*/
 120:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_FE_bp   4 /*Frame error bit position.*/
 121:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 122:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_DOR_bm  0x08 /* Data Over Run bit mask.*/
 123:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_DOR_bp  3 /* Data Over Run bit position.*/
 124:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 125:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_UPE_bm  0x04 /* Parity error bit mask.*/
 126:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_UPE_bp  2 /* Parity error bit position.*/
 127:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 128:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_U2X_bm  0x02 /* Double TX speed bit mask.*/
 129:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_U2X_bp  1 /* Double TX speed bit position.*/
 130:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 131:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_MPCM_bm  0x01 /* Multi Processor bit mask.*/
 132:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_MPMC_bp  0 /* Multi processor bit position.*/
 133:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 134:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** /* USART.UCSRxB  bit masks and bit positions */
 135:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_RXCIE_bm  0x80 /* RX complete interrupt Enable bit mask.*/
 136:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_RXCIE_bp  7 /* RX complete interrupt Enable bit position.*/
 137:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 138:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_TXCIE_bm  0x40 /* TX complete interrupt Enable bit mask.*/
 139:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_TXCIE_bp  6 /* TX complete interrupt Enable bit position.*/
 140:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 141:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_DRIE_bm  0x20 /* Data register empty interrupt Enable bit mask.*/
 142:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_DRIE_bp  5 /* Data register empty interrupt Enable bit position.*/
 143:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 144:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_RXEN_bm  0x10  /* Receiver Enable bit mask. */
 145:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_RXEN_bp  4  /* Receiver Enable bit position. */
 146:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 147:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_TXEN_bm  0x08  /* Transmitter Enable bit mask. */
 148:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_TXEN_bp  3  /* Transmitter Enable bit position. */
 149:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 150:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_CHSIZE2_bm  0x04  /* Character Size bit mask. */
 151:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_CHSIZE2_bp  2 /* Character Size bit position. */
 152:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 153:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_RXB8_bm  0x02  /* Transmit bit 8 bit mask. */
 154:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_RXB8_bp  1  /* Transmit bit 8 bit position. */
 155:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 156:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_TXB8_bm  0x01  /* Transmit bit 8 bit mask. */
 157:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_TXB8_bp  0  /* Transmit bit 8 bit position. */
 158:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 159:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** /* USART.UCSRxC  bit masks and bit positions */
 160:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_UMSEL01_gm  0xC0 /* USART Mode Select 01 grp mask.*/
 161:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_UMSEL01_gp  6 /* USART Mode Select 01 grp position.*/
 162:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 163:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_UMSEL01_bm  0x80 /* USART Mode Select 01 bit mask.*/
 164:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_UMSEL01_bp  7 /* USART Mode Select 01 bit position.*/
 165:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 166:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_UMSEL00_bm  0x40 /* USART Mode Select 00 bit mask.*/
 167:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_UMSEL00_bp  6 /* USART Mode Select 00 bit position.*/
 168:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 169:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_PMODE_gm  0x30 /* USART Parity Mode Select grp mask.*/
 170:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_PMODE_gp  4 /* USART Parity Mode Select grp position.*/
 171:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 172:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_PMODE01_bm  0x20 /* USART Parity Mode Select 01 bit mask.*/
 173:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_PMODE01_bp  5 /* USART Parity Mode Select 01 bit position.*/
 174:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 175:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_PMODE00_bm  0x10 /* USART Parity Mode Select 00 bit mask.*/
 176:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_PMODE00_bp  4 /* USART Parity Mode Select 00 bit position.*/
 177:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 178:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_STOPB_bm  0x08 /* USART stop bit mask.*/
 179:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_STOPB_bp  3 /* USART stop bit Position.*/
 180:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 181:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_CHSIZE01C_gm  0x06  /* Character Size 10 bit 1 mask. */
 182:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_CHSIZE01C_gp  1 /* Character Size 10 bit position. */
 183:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 184:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_CHSIZE01_bm  0x04  /* Character Size 10 bit 1 mask. */
 185:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_CHSIZE01_bp  2 /* Character Size 10 bit position. */
 186:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 187:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_CHSIZE00_bm  0x02  /* Character Size 00 bit 1 mask. */
 188:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_CHSIZE00_bp  1 /* Character Size bit 00 position. */
 189:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 190:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_UCPOL_bm  0x01  /* Sync mode Pol bit 1 mask. */
 191:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_UCPOL_bp  0 /*Sync mode Pol bit 0 position */
 192:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 193:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_UCPHA_bm 0x02 /* Clock Phase bit mask. */
 194:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_UCPHA_bp 1 /* Clock Phase bit position. */
 195:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 196:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_DORD_bm 0x04 /* Data order bit mask. */
 197:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_DORD_bp 2 /* Data order bit position. */
 198:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 199:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** /* Character Size */
 200:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** typedef enum USART_CHSIZE_enum {
 201:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	USART_CHSIZE_5BIT_gc = (0x00),  /* Character size: 5 bit */
 202:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	USART_CHSIZE_6BIT_gc = (0x01),  /* Character size: 6 bit */
 203:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	USART_CHSIZE_7BIT_gc = (0x02),  /* Character size: 7 bit */
 204:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	USART_CHSIZE_8BIT_gc = (0x03),  /* Character size: 8 bit */
 205:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	USART_CHSIZE_9BIT_gc = (0x07),  /* Character size: 9 bit */
 206:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** } USART_CHSIZE_t;
 207:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 208:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** /* Communication Mode */
 209:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** typedef enum USART_CMODE_enum {
 210:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	USART_CMODE_ASYNCHRONOUS_gc = (0x00 << USART_UMSEL01_gp),  /*
 211:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	                                                            *
 212:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	                                                            *
 213:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	                                                            *Asynchronous
 214:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	                                                            * Mode */
 215:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	USART_CMODE_SYNCHRONOUS_gc = (0x01 << USART_UMSEL01_gp),  /* Synchronous
 216:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	                                                           * Mode */
 217:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	USART_CMODE_IRDA_gc = (0x02 << USART_UMSEL01_gp),  /* IrDA Mode */
 218:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	USART_CMODE_MSPI_gc = (0x03 << USART_UMSEL01_gp),  /* Master SPI Mode */
 219:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** } USART_CMODE_t;
 220:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 221:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** /* Parity Mode */
 222:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** typedef enum USART_PMODE_enum {
 223:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	USART_PMODE_DISABLED_gc = (0x00 << USART_PMODE_gp),  /* No Parity */
 224:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	USART_PMODE_EVEN_gc = (0x02 << USART_PMODE_gp),  /* Even Parity */
 225:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	USART_PMODE_ODD_gc = (0x03 << USART_PMODE_gp),  /* Odd Parity */
 226:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** } USART_PMODE_t;
 227:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 228:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** /* ! Lookup table containing baudctrl values for CPU frequency 1 Mhz */
 229:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** static PROGMEM_DECLARE(uint16_t, baudctrl_1mhz[]) = {
 230:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	0x0033, /* Baud: 1200 */
 231:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	0x0019, /* Baud: 2400 */
 232:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	0x000C, /* Baud: 4800 */
 233:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	0x0006, /* Baud: 9600 */
 234:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	0x0003, /* Baud: 19200 */
 235:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	0x0002, /* Baud: 38400 */
 236:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	0x0001, /* Baud: 57600 */
 237:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	USART_BAUD_UNDEFINED, /* Baud: 115200 */
 238:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** };
 239:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 240:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** /* ! Lookup table containing baudctrl values for CPU frequency 8 Mhz */
 241:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** static PROGMEM_DECLARE(uint16_t, baudctrl_8mhz[]) = {
 242:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	0x01A0, /* Baud: 1200 */
 243:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	0x00CF, /* Baud: 2400 */
 244:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	0x0067, /* Baud: 4800 */
 245:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	0x0033, /* Baud: 9600 */
 246:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	0x0019, /* Baud: 19200 */
 247:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	0x000C, /* Baud: 38400 */
 248:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	0x0007, /* Baud: 57600 */
 249:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	0x0008, /* Baud: 115200 */
 250:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** };
 251:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 252:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** /* ! Lookup table containing baudctrl values for CPU frequency 16 Mhz */
 253:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** static PROGMEM_DECLARE(uint16_t, baudctrl_16mhz[]) = {
 254:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	0x0340, /* Baud: 1200 */
 255:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	0x01A0, /* Baud: 2400 */
 256:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	0x00CF, /* Baud: 4800 */
 257:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	0x0067, /* Baud: 9600 */
 258:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	0x0033, /* Baud: 19200 */
 259:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	0x0019, /* Baud: 38400 */
 260:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	0x0010, /* Baud: 57600 */
 261:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	0x0010, /* Baud: 115200 */
 262:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** };
 263:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 264:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 265:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** /* ! Input parameters when initializing RS232 and similar modes. */
 266:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** typedef struct usart_rs232_options {
 267:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	/* ! Set baud rate of the USART (unused in slave modes). */
 268:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	uint32_t baudrate;
 269:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 270:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	/* ! Number of bits to transmit as a character (5 to 9). */
 271:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	USART_CHSIZE_t charlength;
 272:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 273:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	/* ! Parity type: USART_PMODE_DISABLED_gc, USART_PMODE_EVEN_gc, */
 274:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	/* ! USART_PMODE_ODD_gc. */
 275:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	USART_PMODE_t paritytype;
 276:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 277:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	/* ! Number of stop bits between two characters: */
 278:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	/* ! true: 2 stop bits */
 279:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	/* ! false: 1 stop bit */
 280:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	bool stopbits;
 281:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** } usart_rs232_options_t;
 282:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 283:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** /* ! Input parameters when initializing SPI master mode. */
 284:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** typedef struct usart_spi_options {
 285:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	/* ! Set baud rate of the USART in SPI mode. */
 286:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	uint32_t baudrate;
 287:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 288:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	/* ! SPI transmission mode. */
 289:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	uint8_t spimode;
 290:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 291:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	uint8_t data_order;
 292:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** } usart_spi_options_t;
 293:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 294:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 295:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** /**
 296:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * \brief Enable USART receiver.
 297:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  *
 298:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * \param usart Pointer to the USART module
 299:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  */
 300:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** static inline void usart_rx_enable(USART_t *usart)
 301:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** {
 302:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	(usart)->UCSRnB |= USART_RXEN_bm;
 303:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** }
 304:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 305:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** /**
 306:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * \brief Disable USART receiver.
 307:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  *
 308:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * \param usart Pointer to the USART module.
 309:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  */
 310:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** static inline void usart_rx_disable(USART_t *usart)
 311:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** {
 312:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	(usart)->UCSRnB &= ~USART_RXEN_bm;
 313:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** }
 314:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 315:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** /**
 316:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * \brief  Configure the USART frame format.
 317:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  *
 318:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  *  Sets the frame format, Frame Size, parity mode and number of stop bits.
 319:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  *
 320:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  *  \param usart Pointer to the USART module
 321:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  *  \param charSize The character size. Use USART_CHSIZE_t type.
 322:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  *  \param parityMode The parity Mode. Use USART_PMODE_t type.
 323:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  *  \param twoStopBits Enable two stop bit mode. Use bool type.
 324:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  */
 325:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** static inline void usart_format_set(USART_t *usart, USART_CHSIZE_t charSize,
 326:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 		USART_PMODE_t parityMode, bool twoStopBits)
 327:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** {
 328:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	(usart)->UCSRnC
 329:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 		= ((usart)->UCSRnC &
 330:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 			(~USART_CHSIZE01C_gm)) | ((charSize & 0x03)
 331:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 			<< USART_CHSIZE01C_gp);
 332:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	(usart)->UCSRnB
 333:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 		= ((usart)->UCSRnB &
 334:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 			(~USART_CHSIZE2_bm)) | ((charSize & 0x04)
 335:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 			<< USART_CHSIZE2_bp);
 336:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 337:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	(usart)->UCSRnC = ((usart)->UCSRnC & (~USART_PMODE_gm)) | parityMode;
 338:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 339:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	(usart)->UCSRnC = ((usart)->UCSRnC & (~USART_STOPB_bm)) | (twoStopBits
 340:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 			<< USART_STOPB_bp);
 341:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** }
 342:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 343:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** /**
 344:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * \brief Enable USART transmitter.
 345:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  *
 346:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * \param usart Pointer to the USART module.
 347:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  */
 348:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** static inline void usart_tx_enable(USART_t *usart)
 349:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** {
 350:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	(usart)->UCSRnB |= USART_TXEN_bm;
 351:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** }
 352:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 353:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** /**
 354:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * \brief Disable USART transmitter.
 355:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  *
 356:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * \param usart Pointer to the USART module.
 357:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  */
 358:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** static inline void usart_tx_disable(USART_t *usart)
 359:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** {
 360:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	(usart)->UCSRnB &= ~USART_TXEN_bm;
 361:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** }
 362:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 363:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** /**
 364:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * \brief Enable USART transmit complete interrupt.
 365:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  *
 366:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * \param usart Pointer to the USART module.
 367:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  */
 368:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** static inline void usart_tx_complete_interrupt_enable(USART_t *usart)
 369:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** {
 370:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	(usart)->UCSRnB |= USART_TXC_bm;
 371:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** }
 372:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 373:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** /**
 374:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * \brief Enable USART receive complete interrupt.
 375:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  *
 376:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * \param usart Pointer to the USART module.
 377:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  */
 378:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** static inline void usart_rx_complete_interrupt_enable(USART_t *usart)
 379:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** {
 380:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	(usart)->UCSRnB |= USART_RXC_bm;
 381:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** }
 382:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 383:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** /**
 384:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * \brief Enable USART data register empty interrupt.
 385:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  *
 386:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * \param usart Pointer to the USART module.
 387:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  */
 388:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** static inline void usart_data_empty_interrupt_enable(USART_t *usart)
 389:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** {
 390:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	(usart)->UCSRnB |= USART_DRIE_bm;
 391:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** }
 392:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 393:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** /**
 394:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * \brief Disable USART transmit complete interrupt.
 395:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  *
 396:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * \param usart Pointer to the USART module.
 397:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  */
 398:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** static inline void usart_tx_complete_interrupt_disable(USART_t *usart)
 399:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** {
 400:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	(usart)->UCSRnB &= ~USART_TXC_bm;
 401:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** }
 402:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 403:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** /**
 404:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * \brief Disable USART receive complete interrupt.
 405:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  *
 406:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * \param usart Pointer to the USART module.
 407:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  */
 408:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** static inline void usart_rx_complete_interrupt_disable(USART_t *usart)
 409:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** {
 410:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	(usart)->UCSRnB &= ~USART_RXC_bm;
 411:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** }
 412:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 413:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** /**
 414:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * \brief Disable USART data register empty interrupt.
 415:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  *
 416:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * \param usart Pointer to the USART module.
 417:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  */
 418:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** static inline void usart_data_empty_interrupt_disable(USART_t *usart)
 419:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** {
 420:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	(usart)->UCSRnB &= ~USART_DRIE_bm;
 421:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** }
 422:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 423:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** /**
 424:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * \brief Set the mode the USART run in.
 425:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  *
 426:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * Set the mode the USART run in. The default mode is asynchronous mode.
 427:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  *
 428:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * \param usart Pointer to the USART module register section.
 429:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * \param usartmode Selects the USART mode. Use USART_CMODE_t type.
 430:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  *
 431:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * USART modes:
 432:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * - 0x0        : Asynchronous mode.
 433:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * - 0x1        : Synchronous mode.
 434:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * - 0x2        : IrDA mode.
 435:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * - 0x3        : Master SPI mode.
 436:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  */
 437:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
 438:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** {
 439:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	(usart)->UCSRnC = ((usart)->UCSRnC & (~USART_UMSEL01_gm)) | usartmode;
 440:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** }
 441:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 442:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** /**
 443:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * \brief Check if data register empty flag is set.
 444:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  *
 445:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * \param usart The USART module.
 446:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  */
 447:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** static inline bool usart_data_register_is_empty(USART_t *usart)
 448:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** {
 449:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	return (usart)->UCSRnA & USART_DRE_bm;
 450:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** }
 451:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 452:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** /**
 453:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * \brief Checks if the RX complete interrupt flag is set.
 454:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  *
 455:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * Checks if the RX complete interrupt flag is set.
 456:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  *
 457:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * \param usart The USART module.
 458:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  */
 459:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** static inline bool usart_rx_is_complete(USART_t *usart)
 460:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** {
 461:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	return (usart)->UCSRnA & USART_RXC_bm;
 462:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** }
 463:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 464:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** /**
 465:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * \brief Checks if the TX complete interrupt flag is set.
 466:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  *
 467:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * Checks if the TX complete interrupt flag is set.
 468:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  *
 469:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * \param usart The USART module.
 470:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  */
 471:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** static inline bool usart_tx_is_complete(USART_t *usart)
 472:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** {
 473:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	return (usart)->UCSRnA & USART_TXC_bm;
 474:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** }
 475:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 476:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** /**
 477:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * \brief Clear TX complete interrupt flag.
 478:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * TX flag is clear after complete transmission, automatically.
 479:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * \param usart The USART module.
 480:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  */
 481:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** static inline void usart_clear_tx_complete(USART_t *usart)
 482:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** {
 483:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****          usart->UCSRnA |=  USART_TXC_bm;
 484:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** }
 485:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 486:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** /**
 487:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * \brief Write a data to the USART data register.
 488:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  *
 489:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * \param usart The USART module.
 490:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * \param txdata The data to be transmitted.
 491:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  */
 492:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** static inline void usart_put(USART_t *usart, uint8_t txdata)
 493:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** {
 494:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	(usart)->UDR = txdata;
 495:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** }
 496:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 497:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** /**
 498:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * \brief  Read a data to the USART data register.
 499:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  *
 500:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * \param usart The USART module.
 501:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  *
 502:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * \return The received data
 503:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  */
 504:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** static inline uint8_t usart_get(USART_t *usart)
 505:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** {
 506:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	return (usart)->UDR;
 507:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** }
 508:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 509:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** /**
 510:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * \brief Double the USART transmission speed.
 511:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  *
 512:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * \param usart The USART module.
 513:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  */
 514:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** static inline void usart_double_baud_enable(USART_t *usart)
 515:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** {
 129               		.loc 2 515 0
 130               		.cfi_startproc
 131 0034 CF93      		push r28
 132               	.LCFI6:
 133               		.cfi_def_cfa_offset 3
 134               		.cfi_offset 28, -2
 135 0036 DF93      		push r29
 136               	.LCFI7:
 137               		.cfi_def_cfa_offset 4
 138               		.cfi_offset 29, -3
 139 0038 00D0      		rcall .
 140               	.LCFI8:
 141               		.cfi_def_cfa_offset 6
 142 003a CDB7      		in r28,__SP_L__
 143 003c DEB7      		in r29,__SP_H__
 144               	.LCFI9:
 145               		.cfi_def_cfa_register 28
 146               	/* prologue: function */
 147               	/* frame size = 2 */
 148               	/* stack size = 4 */
 149               	.L__stack_usage = 4
 150 003e 9A83      		std Y+2,r25
 151 0040 8983      		std Y+1,r24
 516:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	usart->UCSRnA |=  USART_U2X_bm;
 152               		.loc 2 516 0
 153 0042 8981      		ldd r24,Y+1
 154 0044 9A81      		ldd r25,Y+2
 155 0046 FC01      		movw r30,r24
 156 0048 8081      		ld r24,Z
 157 004a 282F      		mov r18,r24
 158 004c 2260      		ori r18,lo8(2)
 159 004e 8981      		ldd r24,Y+1
 160 0050 9A81      		ldd r25,Y+2
 161 0052 FC01      		movw r30,r24
 162 0054 2083      		st Z,r18
 517:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** }
 163               		.loc 2 517 0
 164 0056 0000      		nop
 165               	/* epilogue start */
 166 0058 0F90      		pop __tmp_reg__
 167 005a 0F90      		pop __tmp_reg__
 168 005c DF91      		pop r29
 169 005e CF91      		pop r28
 170 0060 0895      		ret
 171               		.cfi_endproc
 172               	.LFE101:
 175               	usart_serial_init:
 176               	.LFB104:
 177               		.file 3 "../../../platform/common/services/serial/megarf_usart/usart_serial.h"
   1:../../../platform/common/services/serial/megarf_usart/usart_serial.h **** /**
   2:../../../platform/common/services/serial/megarf_usart/usart_serial.h ****  * \file
   3:../../../platform/common/services/serial/megarf_usart/usart_serial.h ****  *
   4:../../../platform/common/services/serial/megarf_usart/usart_serial.h ****  * \brief This file defines a useful set of functions for the Serial interface on 
   5:../../../platform/common/services/serial/megarf_usart/usart_serial.h ****  * AVR MEGARF devices.
   6:../../../platform/common/services/serial/megarf_usart/usart_serial.h ****  *
   7:../../../platform/common/services/serial/megarf_usart/usart_serial.h ****  * Copyright (c) 2013 Atmel Corporation. All rights reserved.
   8:../../../platform/common/services/serial/megarf_usart/usart_serial.h ****  *
   9:../../../platform/common/services/serial/megarf_usart/usart_serial.h ****  * \asf_license_start
  10:../../../platform/common/services/serial/megarf_usart/usart_serial.h ****  *
  11:../../../platform/common/services/serial/megarf_usart/usart_serial.h ****  * \page License
  12:../../../platform/common/services/serial/megarf_usart/usart_serial.h ****  *
  13:../../../platform/common/services/serial/megarf_usart/usart_serial.h ****  * Redistribution and use in source and binary forms, with or without
  14:../../../platform/common/services/serial/megarf_usart/usart_serial.h ****  * modification, are permitted provided that the following conditions are met:
  15:../../../platform/common/services/serial/megarf_usart/usart_serial.h ****  *
  16:../../../platform/common/services/serial/megarf_usart/usart_serial.h ****  * 1. Redistributions of source code must retain the above copyright notice,
  17:../../../platform/common/services/serial/megarf_usart/usart_serial.h ****  *    this list of conditions and the following disclaimer.
  18:../../../platform/common/services/serial/megarf_usart/usart_serial.h ****  *
  19:../../../platform/common/services/serial/megarf_usart/usart_serial.h ****  * 2. Redistributions in binary form must reproduce the above copyright notice,
  20:../../../platform/common/services/serial/megarf_usart/usart_serial.h ****  *    this list of conditions and the following disclaimer in the documentation
  21:../../../platform/common/services/serial/megarf_usart/usart_serial.h ****  *    and/or other materials provided with the distribution.
  22:../../../platform/common/services/serial/megarf_usart/usart_serial.h ****  *
  23:../../../platform/common/services/serial/megarf_usart/usart_serial.h ****  * 3. The name of Atmel may not be used to endorse or promote products derived
  24:../../../platform/common/services/serial/megarf_usart/usart_serial.h ****  *    from this software without specific prior written permission.
  25:../../../platform/common/services/serial/megarf_usart/usart_serial.h ****  *
  26:../../../platform/common/services/serial/megarf_usart/usart_serial.h ****  * 4. This software may only be redistributed and used in connection with an
  27:../../../platform/common/services/serial/megarf_usart/usart_serial.h ****  *    Atmel microcontroller product.
  28:../../../platform/common/services/serial/megarf_usart/usart_serial.h ****  *
  29:../../../platform/common/services/serial/megarf_usart/usart_serial.h ****  * THIS SOFTWARE IS PROVIDED BY ATMEL "AS IS" AND ANY EXPRESS OR IMPLIED
  30:../../../platform/common/services/serial/megarf_usart/usart_serial.h ****  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
  31:../../../platform/common/services/serial/megarf_usart/usart_serial.h ****  * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE
  32:../../../platform/common/services/serial/megarf_usart/usart_serial.h ****  * EXPRESSLY AND SPECIFICALLY DISCLAIMED. IN NO EVENT SHALL ATMEL BE LIABLE FOR
  33:../../../platform/common/services/serial/megarf_usart/usart_serial.h ****  * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  34:../../../platform/common/services/serial/megarf_usart/usart_serial.h ****  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
  35:../../../platform/common/services/serial/megarf_usart/usart_serial.h ****  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
  36:../../../platform/common/services/serial/megarf_usart/usart_serial.h ****  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
  37:../../../platform/common/services/serial/megarf_usart/usart_serial.h ****  * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
  38:../../../platform/common/services/serial/megarf_usart/usart_serial.h ****  * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  39:../../../platform/common/services/serial/megarf_usart/usart_serial.h ****  * POSSIBILITY OF SUCH DAMAGE.
  40:../../../platform/common/services/serial/megarf_usart/usart_serial.h ****  *
  41:../../../platform/common/services/serial/megarf_usart/usart_serial.h ****  * \asf_license_stop
  42:../../../platform/common/services/serial/megarf_usart/usart_serial.h ****  *
  43:../../../platform/common/services/serial/megarf_usart/usart_serial.h ****  */
  44:../../../platform/common/services/serial/megarf_usart/usart_serial.h **** #ifndef _USART_SERIAL_H_
  45:../../../platform/common/services/serial/megarf_usart/usart_serial.h **** #define _USART_SERIAL_H_
  46:../../../platform/common/services/serial/megarf_usart/usart_serial.h **** 
  47:../../../platform/common/services/serial/megarf_usart/usart_serial.h **** #ifdef __cplusplus
  48:../../../platform/common/services/serial/megarf_usart/usart_serial.h **** extern "C" {
  49:../../../platform/common/services/serial/megarf_usart/usart_serial.h **** #endif
  50:../../../platform/common/services/serial/megarf_usart/usart_serial.h **** 
  51:../../../platform/common/services/serial/megarf_usart/usart_serial.h **** #include "compiler.h"
  52:../../../platform/common/services/serial/megarf_usart/usart_serial.h **** #include "sysclk.h"
  53:../../../platform/common/services/serial/megarf_usart/usart_serial.h **** #include "status_codes.h"
  54:../../../platform/common/services/serial/megarf_usart/usart_serial.h **** #include "usart_megarf.h"
  55:../../../platform/common/services/serial/megarf_usart/usart_serial.h **** 
  56:../../../platform/common/services/serial/megarf_usart/usart_serial.h **** /*! \name Serial Management Configuration
  57:../../../platform/common/services/serial/megarf_usart/usart_serial.h ****  */
  58:../../../platform/common/services/serial/megarf_usart/usart_serial.h **** /* ! @{ */
  59:../../../platform/common/services/serial/megarf_usart/usart_serial.h **** #include "conf_usart_serial.h"
  60:../../../platform/common/services/serial/megarf_usart/usart_serial.h **** /* ! @} */
  61:../../../platform/common/services/serial/megarf_usart/usart_serial.h **** 
  62:../../../platform/common/services/serial/megarf_usart/usart_serial.h **** typedef usart_rs232_options_t usart_serial_options_t;
  63:../../../platform/common/services/serial/megarf_usart/usart_serial.h **** 
  64:../../../platform/common/services/serial/megarf_usart/usart_serial.h **** typedef USART_t *usart_if;
  65:../../../platform/common/services/serial/megarf_usart/usart_serial.h **** 
  66:../../../platform/common/services/serial/megarf_usart/usart_serial.h **** /*! \brief Initializes the Usart in master mode.
  67:../../../platform/common/services/serial/megarf_usart/usart_serial.h ****  *
  68:../../../platform/common/services/serial/megarf_usart/usart_serial.h ****  * \param usart       Base address of the USART instance.
  69:../../../platform/common/services/serial/megarf_usart/usart_serial.h ****  * \param options     Options needed to set up RS232 communication (see \ref
  70:../../../platform/common/services/serial/megarf_usart/usart_serial.h ****  * usart_serial_options_t).
  71:../../../platform/common/services/serial/megarf_usart/usart_serial.h ****  *
  72:../../../platform/common/services/serial/megarf_usart/usart_serial.h ****  * \retval true if the initialization was successful
  73:../../../platform/common/services/serial/megarf_usart/usart_serial.h ****  * \retval false if initialization failed (error in baud rate calculation)
  74:../../../platform/common/services/serial/megarf_usart/usart_serial.h ****  */
  75:../../../platform/common/services/serial/megarf_usart/usart_serial.h **** static inline bool usart_serial_init(usart_if usart, const
  76:../../../platform/common/services/serial/megarf_usart/usart_serial.h **** 		usart_serial_options_t *options)
  77:../../../platform/common/services/serial/megarf_usart/usart_serial.h **** {
 178               		.loc 3 77 0
 179               		.cfi_startproc
 180 0062 CF93      		push r28
 181               	.LCFI10:
 182               		.cfi_def_cfa_offset 3
 183               		.cfi_offset 28, -2
 184 0064 DF93      		push r29
 185               	.LCFI11:
 186               		.cfi_def_cfa_offset 4
 187               		.cfi_offset 29, -3
 188 0066 CDB7      		in r28,__SP_L__
 189 0068 DEB7      		in r29,__SP_H__
 190               	.LCFI12:
 191               		.cfi_def_cfa_register 28
 192 006a 2B97      		sbiw r28,11
 193               	.LCFI13:
 194               		.cfi_def_cfa_offset 15
 195 006c 0FB6      		in __tmp_reg__,__SREG__
 196 006e F894      		cli
 197 0070 DEBF      		out __SP_H__,r29
 198 0072 0FBE      		out __SREG__,__tmp_reg__
 199 0074 CDBF      		out __SP_L__,r28
 200               	/* prologue: function */
 201               	/* frame size = 11 */
 202               	/* stack size = 13 */
 203               	.L__stack_usage = 13
 204 0076 9987      		std Y+9,r25
 205 0078 8887      		std Y+8,r24
 206 007a 7B87      		std Y+11,r23
 207 007c 6A87      		std Y+10,r22
  78:../../../platform/common/services/serial/megarf_usart/usart_serial.h **** 	/* USART options. */
  79:../../../platform/common/services/serial/megarf_usart/usart_serial.h **** 	usart_rs232_options_t usart_rs232_options;
  80:../../../platform/common/services/serial/megarf_usart/usart_serial.h **** 	usart_rs232_options.charlength   = options->charlength;
 208               		.loc 3 80 0
 209 007e 8A85      		ldd r24,Y+10
 210 0080 9B85      		ldd r25,Y+11
 211 0082 FC01      		movw r30,r24
 212 0084 8481      		ldd r24,Z+4
 213 0086 8D83      		std Y+5,r24
  81:../../../platform/common/services/serial/megarf_usart/usart_serial.h **** 	usart_rs232_options.paritytype   = options->paritytype;
 214               		.loc 3 81 0
 215 0088 8A85      		ldd r24,Y+10
 216 008a 9B85      		ldd r25,Y+11
 217 008c FC01      		movw r30,r24
 218 008e 8581      		ldd r24,Z+5
 219 0090 8E83      		std Y+6,r24
  82:../../../platform/common/services/serial/megarf_usart/usart_serial.h **** 	usart_rs232_options.stopbits     = options->stopbits;
 220               		.loc 3 82 0
 221 0092 8A85      		ldd r24,Y+10
 222 0094 9B85      		ldd r25,Y+11
 223 0096 FC01      		movw r30,r24
 224 0098 8681      		ldd r24,Z+6
 225 009a 8F83      		std Y+7,r24
  83:../../../platform/common/services/serial/megarf_usart/usart_serial.h **** 	usart_rs232_options.baudrate     = options->baudrate;
 226               		.loc 3 83 0
 227 009c 8A85      		ldd r24,Y+10
 228 009e 9B85      		ldd r25,Y+11
 229 00a0 FC01      		movw r30,r24
 230 00a2 8081      		ld r24,Z
 231 00a4 9181      		ldd r25,Z+1
 232 00a6 A281      		ldd r26,Z+2
 233 00a8 B381      		ldd r27,Z+3
 234 00aa 8983      		std Y+1,r24
 235 00ac 9A83      		std Y+2,r25
 236 00ae AB83      		std Y+3,r26
 237 00b0 BC83      		std Y+4,r27
  84:../../../platform/common/services/serial/megarf_usart/usart_serial.h **** 
  85:../../../platform/common/services/serial/megarf_usart/usart_serial.h **** 	if (usart_init_rs232(usart, &usart_rs232_options)) {
 238               		.loc 3 85 0
 239 00b2 8885      		ldd r24,Y+8
 240 00b4 9985      		ldd r25,Y+9
 241 00b6 9E01      		movw r18,r28
 242 00b8 2F5F      		subi r18,-1
 243 00ba 3F4F      		sbci r19,-1
 244 00bc B901      		movw r22,r18
 245 00be 0E94 0000 		call usart_init_rs232
 246 00c2 8823      		tst r24
 247 00c4 01F0      		breq .L7
  86:../../../platform/common/services/serial/megarf_usart/usart_serial.h **** 		return true;
 248               		.loc 3 86 0
 249 00c6 81E0      		ldi r24,lo8(1)
 250 00c8 00C0      		rjmp .L9
 251               	.L7:
  87:../../../platform/common/services/serial/megarf_usart/usart_serial.h **** 	} else {
  88:../../../platform/common/services/serial/megarf_usart/usart_serial.h **** 		return false;
 252               		.loc 3 88 0
 253 00ca 80E0      		ldi r24,0
 254               	.L9:
 255               	/* epilogue start */
  89:../../../platform/common/services/serial/megarf_usart/usart_serial.h **** 	}
  90:../../../platform/common/services/serial/megarf_usart/usart_serial.h **** }
 256               		.loc 3 90 0 discriminator 1
 257 00cc 2B96      		adiw r28,11
 258 00ce 0FB6      		in __tmp_reg__,__SREG__
 259 00d0 F894      		cli
 260 00d2 DEBF      		out __SP_H__,r29
 261 00d4 0FBE      		out __SREG__,__tmp_reg__
 262 00d6 CDBF      		out __SP_L__,r28
 263 00d8 DF91      		pop r29
 264 00da CF91      		pop r28
 265 00dc 0895      		ret
 266               		.cfi_endproc
 267               	.LFE104:
 270               	usart_serial_putchar:
 271               	.LFB105:
  91:../../../platform/common/services/serial/megarf_usart/usart_serial.h **** 
  92:../../../platform/common/services/serial/megarf_usart/usart_serial.h **** /*! \brief Sends a character with the USART.
  93:../../../platform/common/services/serial/megarf_usart/usart_serial.h ****  *
  94:../../../platform/common/services/serial/megarf_usart/usart_serial.h ****  * \param usart   Base address of the USART instance.
  95:../../../platform/common/services/serial/megarf_usart/usart_serial.h ****  * \param c       Character to write.
  96:../../../platform/common/services/serial/megarf_usart/usart_serial.h ****  *
  97:../../../platform/common/services/serial/megarf_usart/usart_serial.h ****  * \return Status code
  98:../../../platform/common/services/serial/megarf_usart/usart_serial.h ****  */
  99:../../../platform/common/services/serial/megarf_usart/usart_serial.h **** static inline status_code_t usart_serial_putchar(usart_if usart, uint8_t c)
 100:../../../platform/common/services/serial/megarf_usart/usart_serial.h **** {
 272               		.loc 3 100 0
 273               		.cfi_startproc
 274 00de CF93      		push r28
 275               	.LCFI14:
 276               		.cfi_def_cfa_offset 3
 277               		.cfi_offset 28, -2
 278 00e0 DF93      		push r29
 279               	.LCFI15:
 280               		.cfi_def_cfa_offset 4
 281               		.cfi_offset 29, -3
 282 00e2 00D0      		rcall .
 283 00e4 1F92      		push __zero_reg__
 284               	.LCFI16:
 285               		.cfi_def_cfa_offset 7
 286 00e6 CDB7      		in r28,__SP_L__
 287 00e8 DEB7      		in r29,__SP_H__
 288               	.LCFI17:
 289               		.cfi_def_cfa_register 28
 290               	/* prologue: function */
 291               	/* frame size = 3 */
 292               	/* stack size = 5 */
 293               	.L__stack_usage = 5
 294 00ea 9A83      		std Y+2,r25
 295 00ec 8983      		std Y+1,r24
 296 00ee 6B83      		std Y+3,r22
 101:../../../platform/common/services/serial/megarf_usart/usart_serial.h **** 	return usart_putchar(usart, c);
 297               		.loc 3 101 0
 298 00f0 8981      		ldd r24,Y+1
 299 00f2 9A81      		ldd r25,Y+2
 300 00f4 6B81      		ldd r22,Y+3
 301 00f6 0E94 0000 		call usart_putchar
 302               	/* epilogue start */
 102:../../../platform/common/services/serial/megarf_usart/usart_serial.h **** }
 303               		.loc 3 102 0
 304 00fa 0F90      		pop __tmp_reg__
 305 00fc 0F90      		pop __tmp_reg__
 306 00fe 0F90      		pop __tmp_reg__
 307 0100 DF91      		pop r29
 308 0102 CF91      		pop r28
 309 0104 0895      		ret
 310               		.cfi_endproc
 311               	.LFE105:
 314               	usart_serial_getchar:
 315               	.LFB106:
 103:../../../platform/common/services/serial/megarf_usart/usart_serial.h **** 
 104:../../../platform/common/services/serial/megarf_usart/usart_serial.h **** /*! \brief Waits until a character is received, and returns it.
 105:../../../platform/common/services/serial/megarf_usart/usart_serial.h ****  *
 106:../../../platform/common/services/serial/megarf_usart/usart_serial.h ****  * \param usart   Base address of the USART instance.
 107:../../../platform/common/services/serial/megarf_usart/usart_serial.h ****  * \param data   Data to read
 108:../../../platform/common/services/serial/megarf_usart/usart_serial.h ****  *
 109:../../../platform/common/services/serial/megarf_usart/usart_serial.h ****  */
 110:../../../platform/common/services/serial/megarf_usart/usart_serial.h **** static inline void usart_serial_getchar(usart_if usart, uint8_t *data)
 111:../../../platform/common/services/serial/megarf_usart/usart_serial.h **** {
 316               		.loc 3 111 0
 317               		.cfi_startproc
 318 0106 CF93      		push r28
 319               	.LCFI18:
 320               		.cfi_def_cfa_offset 3
 321               		.cfi_offset 28, -2
 322 0108 DF93      		push r29
 323               	.LCFI19:
 324               		.cfi_def_cfa_offset 4
 325               		.cfi_offset 29, -3
 326 010a 00D0      		rcall .
 327 010c 00D0      		rcall .
 328               	.LCFI20:
 329               		.cfi_def_cfa_offset 8
 330 010e CDB7      		in r28,__SP_L__
 331 0110 DEB7      		in r29,__SP_H__
 332               	.LCFI21:
 333               		.cfi_def_cfa_register 28
 334               	/* prologue: function */
 335               	/* frame size = 4 */
 336               	/* stack size = 6 */
 337               	.L__stack_usage = 6
 338 0112 9A83      		std Y+2,r25
 339 0114 8983      		std Y+1,r24
 340 0116 7C83      		std Y+4,r23
 341 0118 6B83      		std Y+3,r22
 112:../../../platform/common/services/serial/megarf_usart/usart_serial.h **** 	*data = usart_getchar(usart);
 342               		.loc 3 112 0
 343 011a 8981      		ldd r24,Y+1
 344 011c 9A81      		ldd r25,Y+2
 345 011e 0E94 0000 		call usart_getchar
 346 0122 282F      		mov r18,r24
 347 0124 8B81      		ldd r24,Y+3
 348 0126 9C81      		ldd r25,Y+4
 349 0128 FC01      		movw r30,r24
 350 012a 2083      		st Z,r18
 113:../../../platform/common/services/serial/megarf_usart/usart_serial.h **** }
 351               		.loc 3 113 0
 352 012c 0000      		nop
 353               	/* epilogue start */
 354 012e 0F90      		pop __tmp_reg__
 355 0130 0F90      		pop __tmp_reg__
 356 0132 0F90      		pop __tmp_reg__
 357 0134 0F90      		pop __tmp_reg__
 358 0136 DF91      		pop r29
 359 0138 CF91      		pop r28
 360 013a 0895      		ret
 361               		.cfi_endproc
 362               	.LFE106:
 365               	stdio_serial_init:
 366               	.LFB107:
 367               		.file 4 "../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h"
   1:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h **** /**
   2:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h ****  *
   3:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h ****  * \file
   4:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h ****  *
   5:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h ****  * \brief Common Standard I/O Serial Management.
   6:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h ****  *
   7:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h ****  * This file defines a useful set of functions for the Stdio Serial interface on AVR
   8:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h ****  * and SAM devices.
   9:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h ****  *
  10:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h ****  * Copyright (c) 2009-2013 Atmel Corporation. All rights reserved.
  11:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h ****  *
  12:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h ****  * \asf_license_start
  13:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h ****  *
  14:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h ****  * \page License
  15:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h ****  *
  16:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h ****  * Redistribution and use in source and binary forms, with or without
  17:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h ****  * modification, are permitted provided that the following conditions are met:
  18:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h ****  *
  19:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h ****  * 1. Redistributions of source code must retain the above copyright notice,
  20:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h ****  *    this list of conditions and the following disclaimer.
  21:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h ****  *
  22:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h ****  * 2. Redistributions in binary form must reproduce the above copyright notice,
  23:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h ****  *    this list of conditions and the following disclaimer in the documentation
  24:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h ****  *    and/or other materials provided with the distribution.
  25:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h ****  *
  26:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h ****  * 3. The name of Atmel may not be used to endorse or promote products derived
  27:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h ****  *    from this software without specific prior written permission.
  28:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h ****  *
  29:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h ****  * 4. This software may only be redistributed and used in connection with an
  30:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h ****  *    Atmel microcontroller product.
  31:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h ****  *
  32:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h ****  * THIS SOFTWARE IS PROVIDED BY ATMEL "AS IS" AND ANY EXPRESS OR IMPLIED
  33:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h ****  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
  34:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h ****  * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE
  35:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h ****  * EXPRESSLY AND SPECIFICALLY DISCLAIMED. IN NO EVENT SHALL ATMEL BE LIABLE FOR
  36:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h ****  * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  37:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h ****  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
  38:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h ****  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
  39:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h ****  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
  40:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h ****  * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
  41:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h ****  * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  42:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h ****  * POSSIBILITY OF SUCH DAMAGE.
  43:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h ****  *
  44:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h ****  * \asf_license_stop
  45:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h ****  *
  46:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h ****  ******************************************************************************/
  47:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h **** 
  48:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h **** 
  49:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h **** #ifndef _STDIO_SERIAL_H_
  50:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h **** #define _STDIO_SERIAL_H_
  51:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h **** 
  52:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h **** /**
  53:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h ****  * \defgroup group_common_utils_stdio_stdio_serial Standard serial I/O (stdio)
  54:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h ****  * \ingroup group_common_utils_stdio
  55:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h ****  *
  56:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h ****  * Common standard serial I/O management driver that
  57:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h ****  * implements a stdio serial interface on AVR and SAM devices.
  58:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h ****  *
  59:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h ****  * \{
  60:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h ****  */
  61:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h **** 
  62:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h **** #include <stdio.h>
  63:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h **** #include "compiler.h"
  64:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h **** #ifndef SAMD20
  65:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h **** # include "sysclk.h"
  66:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h **** #endif
  67:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h **** #include "serial.h"
  68:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h **** 
  69:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h **** #if (XMEGA || MEGA_RF) && defined(__GNUC__)
  70:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h **** 	extern int _write (char c, int *f);
  71:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h **** 	extern int _read (int *f);
  72:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h **** #endif
  73:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h **** 
  74:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h **** 
  75:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h **** //! Pointer to the base of the USART module instance to use for stdio.
  76:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h **** extern volatile void *volatile stdio_base;
  77:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h **** //! Pointer to the external low level write function.
  78:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h **** extern int (*ptr_put)(void volatile*, char);
  79:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h **** 
  80:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h **** //! Pointer to the external low level read function.
  81:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h **** extern void (*ptr_get)(void volatile*, char*);
  82:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h **** 
  83:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h **** /*! \brief Initializes the stdio in Serial Mode.
  84:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h ****  *
  85:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h ****  * \param usart       Base address of the USART instance.
  86:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h ****  * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
  87:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h ****  *
  88:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h ****  */
  89:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h **** static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
  90:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h **** {
 368               		.loc 4 90 0
 369               		.cfi_startproc
 370 013c CF93      		push r28
 371               	.LCFI22:
 372               		.cfi_def_cfa_offset 3
 373               		.cfi_offset 28, -2
 374 013e DF93      		push r29
 375               	.LCFI23:
 376               		.cfi_def_cfa_offset 4
 377               		.cfi_offset 29, -3
 378 0140 00D0      		rcall .
 379 0142 00D0      		rcall .
 380               	.LCFI24:
 381               		.cfi_def_cfa_offset 8
 382 0144 CDB7      		in r28,__SP_L__
 383 0146 DEB7      		in r29,__SP_H__
 384               	.LCFI25:
 385               		.cfi_def_cfa_register 28
 386               	/* prologue: function */
 387               	/* frame size = 4 */
 388               	/* stack size = 6 */
 389               	.L__stack_usage = 6
 390 0148 9A83      		std Y+2,r25
 391 014a 8983      		std Y+1,r24
 392 014c 7C83      		std Y+4,r23
 393 014e 6B83      		std Y+3,r22
  91:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h **** 	stdio_base = (void *)usart;
 394               		.loc 4 91 0
 395 0150 8981      		ldd r24,Y+1
 396 0152 9A81      		ldd r25,Y+2
 397 0154 9093 0000 		sts stdio_base+1,r25
 398 0158 8093 0000 		sts stdio_base,r24
  92:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h **** 	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
 399               		.loc 4 92 0
 400 015c 80E0      		ldi r24,lo8(gs(usart_serial_putchar))
 401 015e 90E0      		ldi r25,hi8(gs(usart_serial_putchar))
 402 0160 9093 0000 		sts ptr_put+1,r25
 403 0164 8093 0000 		sts ptr_put,r24
  93:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h **** 	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
 404               		.loc 4 93 0
 405 0168 80E0      		ldi r24,lo8(gs(usart_serial_getchar))
 406 016a 90E0      		ldi r25,hi8(gs(usart_serial_getchar))
 407 016c 9093 0000 		sts ptr_get+1,r25
 408 0170 8093 0000 		sts ptr_get,r24
  94:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h **** # if (XMEGA || MEGA_RF)
  95:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h **** 	usart_serial_init((USART_t *)usart,opt);
 409               		.loc 4 95 0
 410 0174 2B81      		ldd r18,Y+3
 411 0176 3C81      		ldd r19,Y+4
 412 0178 8981      		ldd r24,Y+1
 413 017a 9A81      		ldd r25,Y+2
 414 017c B901      		movw r22,r18
 415 017e 0E94 0000 		call usart_serial_init
  96:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h **** # elif UC3
  97:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h **** 	usart_serial_init(usart,(usart_serial_options_t *)opt);
  98:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h **** # elif SAM
  99:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h **** 	usart_serial_init((Usart *)usart,(usart_serial_options_t *)opt);
 100:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h **** # else
 101:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h **** #  error Unsupported chip type
 102:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h **** # endif
 103:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h **** 
 104:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h **** # if defined(__GNUC__)
 105:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h **** #  if (XMEGA || MEGA_RF)
 106:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h **** 	// For AVR GCC libc print redirection uses fdevopen.
 107:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h **** 	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
 416               		.loc 4 107 0
 417 0182 60E0      		ldi r22,lo8(gs(_read))
 418 0184 70E0      		ldi r23,hi8(gs(_read))
 419 0186 80E0      		ldi r24,lo8(gs(_write))
 420 0188 90E0      		ldi r25,hi8(gs(_write))
 421 018a 0E94 0000 		call fdevopen
 108:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h **** #  endif
 109:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h **** #  if UC3 || SAM
 110:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h **** 	// For AVR32 and SAM GCC
 111:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h **** 	// Specify that stdout and stdin should not be buffered.
 112:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h **** 	setbuf(stdout, NULL);
 113:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h **** 	setbuf(stdin, NULL);
 114:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h **** 	// Note: Already the case in IAR's Normal DLIB default configuration
 115:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h **** 	// and AVR GCC library:
 116:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h **** 	// - printf() emits one character at a time.
 117:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h **** 	// - getchar() requests only 1 byte to exit.
 118:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h **** #  endif
 119:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h **** # endif
 120:../../../platform/common/utils/stdio/stdio_serial/stdio_serial.h **** }
 422               		.loc 4 120 0
 423 018e 0000      		nop
 424               	/* epilogue start */
 425 0190 0F90      		pop __tmp_reg__
 426 0192 0F90      		pop __tmp_reg__
 427 0194 0F90      		pop __tmp_reg__
 428 0196 0F90      		pop __tmp_reg__
 429 0198 DF91      		pop r29
 430 019a CF91      		pop r28
 431 019c 0895      		ret
 432               		.cfi_endproc
 433               	.LFE107:
 435               		.section	.bss.tmrDelay,"aw",@nobits
 438               	tmrDelay:
 439 0000 0000 0000 		.zero	13
 439      0000 0000 
 439      0000 0000 
 439      00
 440               	.global	appState
 441               		.section	.bss.appState,"aw",@nobits
 444               	appState:
 445 0000 00        		.zero	1
 446               	.global	scan
 447               		.section	.data.scan,"aw",@progbits
 450               	scan:
 451 0000 53        		.byte	83
 452               		.section	.rodata
 453               	.LC1:
 454 0000 2568 6878 		.string	"%hhx"
 454      00
 455               	.LC2:
 456 0005 4E25 6868 		.string	"N%hhx%02x%02x%02x%02x"
 456      7825 3032 
 456      7825 3032 
 456      7825 3032 
 456      7825 3032 
 457               	.LC3:
 458 001b 2530 3278 		.string	"%02x"
 458      00
 459               		.text
 461               	tmrDelayHandler:
 462               	.LFB130:
 463               		.file 5 "teste_envio.c"
   1:teste_envio.c **** /*
   2:teste_envio.c **** 	* ServerLLDN.c
   3:teste_envio.c **** 	*
   4:teste_envio.c **** 	* Created: 10/18/2019 5:15:37 PM
   5:teste_envio.c **** 	*  Author: guilherme
   6:teste_envio.c **** 	*/ 
   7:teste_envio.c **** 
   8:teste_envio.c **** #include <stdlib.h>
   9:teste_envio.c **** #include <stdio.h>
  10:teste_envio.c **** #include <string.h>
  11:teste_envio.c **** #include <inttypes.h>
  12:teste_envio.c **** #include "config.h"
  13:teste_envio.c **** #include "sys.h"
  14:teste_envio.c **** #include "phy.h"
  15:teste_envio.c **** #include "sys.h"
  16:teste_envio.c **** #include "nwk.h"
  17:teste_envio.c **** #include "sysclk.h"
  18:teste_envio.c **** #include "sysTimer.h"
  19:teste_envio.c **** #include "sleep_mgr.h"
  20:teste_envio.c **** #include "sleepmgr.h"
  21:teste_envio.c **** #include "led.h"
  22:teste_envio.c **** #include "ioport.h"
  23:teste_envio.c **** #include "conf_sleepmgr.h"
  24:teste_envio.c **** #include "board.h"
  25:teste_envio.c **** #include "platform.h"
  26:teste_envio.c **** 
  27:teste_envio.c **** #include "lldn.h"
  28:teste_envio.c **** 
  29:teste_envio.c **** 
  30:teste_envio.c **** 
  31:teste_envio.c **** #if 1
  32:teste_envio.c **** #if (SIO2HOST_CHANNEL == SIO_USB)
  33:teste_envio.c **** /* Only ARM */
  34:teste_envio.c **** #include "hw_timer_lldn.h"
  35:teste_envio.c **** #include "stdio_usb.h"
  36:teste_envio.c **** #define MASTER_MACSC	0
  37:teste_envio.c **** #else
  38:teste_envio.c **** /* Only megarf series */
  39:teste_envio.c **** #include "conf_sio2host.h"
  40:teste_envio.c **** #define MASTER_MACSC	1
  41:teste_envio.c **** #endif
  42:teste_envio.c **** #else
  43:teste_envio.c **** /* Only megarf series */
  44:teste_envio.c **** #define MASTER_MACSC		1
  45:teste_envio.c **** #endif
  46:teste_envio.c **** 
  47:teste_envio.c **** 
  48:teste_envio.c **** #if (MASTER_MACSC == 1)
  49:teste_envio.c **** #include "macsc_megarf.h"
  50:teste_envio.c **** #else
  51:teste_envio.c **** static SYS_Timer_t				tmrBeaconInterval;			// Beacon
  52:teste_envio.c **** static SYS_Timer_t				tmrComputeData;				// Compute data
  53:teste_envio.c **** #endif
  54:teste_envio.c **** 
  55:teste_envio.c **** static SYS_Timer_t tmrDelay;	
  56:teste_envio.c **** AppState_t	appState = APP_STATE_INITIAL;
  57:teste_envio.c **** 
  58:teste_envio.c **** char scan = 'S';
  59:teste_envio.c **** 
  60:teste_envio.c **** 
  61:teste_envio.c **** static void tmrDelayHandler(SYS_Timer_t *timer)
  62:teste_envio.c **** {
 464               		.loc 5 62 0
 465               		.cfi_startproc
 466 019e CF93      		push r28
 467               	.LCFI26:
 468               		.cfi_def_cfa_offset 3
 469               		.cfi_offset 28, -2
 470 01a0 DF93      		push r29
 471               	.LCFI27:
 472               		.cfi_def_cfa_offset 4
 473               		.cfi_offset 29, -3
 474 01a2 CDB7      		in r28,__SP_L__
 475 01a4 DEB7      		in r29,__SP_H__
 476               	.LCFI28:
 477               		.cfi_def_cfa_register 28
 478 01a6 2F97      		sbiw r28,15
 479               	.LCFI29:
 480               		.cfi_def_cfa_offset 19
 481 01a8 0FB6      		in __tmp_reg__,__SREG__
 482 01aa F894      		cli
 483 01ac DEBF      		out __SP_H__,r29
 484 01ae 0FBE      		out __SREG__,__tmp_reg__
 485 01b0 CDBF      		out __SP_L__,r28
 486               	/* prologue: function */
 487               	/* frame size = 15 */
 488               	/* stack size = 17 */
 489               	.L__stack_usage = 17
 490 01b2 9F87      		std Y+15,r25
 491 01b4 8E87      		std Y+14,r24
  63:teste_envio.c **** 	int B = 54;
 492               		.loc 5 63 0
 493 01b6 86E3      		ldi r24,lo8(54)
 494 01b8 90E0      		ldi r25,0
 495 01ba 9E83      		std Y+6,r25
 496 01bc 8D83      		std Y+5,r24
  64:teste_envio.c **** 	char hex_int[4];
  65:teste_envio.c **** 	hex_int[0] = (B >> 24) & 0xFF;
 497               		.loc 5 65 0
 498 01be 28E1      		ldi r18,lo8(24)
 499 01c0 30E0      		ldi r19,0
 500 01c2 8D81      		ldd r24,Y+5
 501 01c4 9E81      		ldd r25,Y+6
 502 01c6 00C0      		rjmp 2f
 503               		1:
 504 01c8 9595      		asr r25
 505 01ca 8795      		ror r24
 506               		2:
 507 01cc 2A95      		dec r18
 508 01ce 02F4      		brpl 1b
 509 01d0 8A87      		std Y+10,r24
  66:teste_envio.c **** 	hex_int[1] = (B >> 16) & 0xFF;
 510               		.loc 5 66 0
 511 01d2 20E1      		ldi r18,lo8(16)
 512 01d4 30E0      		ldi r19,0
 513 01d6 8D81      		ldd r24,Y+5
 514 01d8 9E81      		ldd r25,Y+6
 515 01da 00C0      		rjmp 2f
 516               		1:
 517 01dc 9595      		asr r25
 518 01de 8795      		ror r24
 519               		2:
 520 01e0 2A95      		dec r18
 521 01e2 02F4      		brpl 1b
 522 01e4 8B87      		std Y+11,r24
  67:teste_envio.c **** 	hex_int[2] = (B >> 8) & 0xFF;
 523               		.loc 5 67 0
 524 01e6 8D81      		ldd r24,Y+5
 525 01e8 9E81      		ldd r25,Y+6
 526 01ea 892F      		mov r24,r25
 527 01ec 9927      		clr r25
 528 01ee 8C87      		std Y+12,r24
  68:teste_envio.c **** 	hex_int[3] = B & 0xFF;
 529               		.loc 5 68 0
 530 01f0 8D81      		ldd r24,Y+5
 531 01f2 8D87      		std Y+13,r24
  69:teste_envio.c **** 
  70:teste_envio.c **** 	printf("S");
 532               		.loc 5 70 0
 533 01f4 83E5      		ldi r24,lo8(83)
 534 01f6 90E0      		ldi r25,0
 535 01f8 0E94 0000 		call putchar
  71:teste_envio.c **** 	uint8_t assigned_time_slot = 0x01;
 536               		.loc 5 71 0
 537 01fc 81E0      		ldi r24,lo8(1)
 538 01fe 8F83      		std Y+7,r24
  72:teste_envio.c **** 	uint8_t assTimeSlot = 0x0a;
 539               		.loc 5 72 0
 540 0200 8AE0      		ldi r24,lo8(10)
 541 0202 8887      		std Y+8,r24
  73:teste_envio.c **** 	uint8_t bitmap = 0x0f;
 542               		.loc 5 73 0
 543 0204 8FE0      		ldi r24,lo8(15)
 544 0206 8987      		std Y+9,r24
  74:teste_envio.c **** 	printf("%hhx",assTimeSlot);
 545               		.loc 5 74 0
 546 0208 8885      		ldd r24,Y+8
 547 020a 882F      		mov r24,r24
 548 020c 90E0      		ldi r25,0
 549 020e 292F      		mov r18,r25
 550 0210 2F93      		push r18
 551 0212 8F93      		push r24
 552 0214 80E0      		ldi r24,lo8(.LC1)
 553 0216 90E0      		ldi r25,hi8(.LC1)
 554 0218 892F      		mov r24,r25
 555 021a 8F93      		push r24
 556 021c 80E0      		ldi r24,lo8(.LC1)
 557 021e 90E0      		ldi r25,hi8(.LC1)
 558 0220 8F93      		push r24
 559 0222 0E94 0000 		call printf
 560 0226 0F90      		pop __tmp_reg__
 561 0228 0F90      		pop __tmp_reg__
 562 022a 0F90      		pop __tmp_reg__
 563 022c 0F90      		pop __tmp_reg__
 564               	.LBB2:
  75:teste_envio.c **** 	for (int i = 0; i < assTimeSlot; i++)
 565               		.loc 5 75 0
 566 022e 1A82      		std Y+2,__zero_reg__
 567 0230 1982      		std Y+1,__zero_reg__
 568 0232 00C0      		rjmp .L15
 569               	.L18:
  76:teste_envio.c **** 	{
  77:teste_envio.c **** 		printf("N%hhx%02x%02x%02x%02x",assigned_time_slot,(unsigned char)hex_int[3],
  78:teste_envio.c **** 												(unsigned char)hex_int[2],
  79:teste_envio.c **** 												(unsigned char)hex_int[1],
  80:teste_envio.c **** 												(unsigned char)hex_int[0]);
 570               		.loc 5 80 0
 571 0234 8A85      		ldd r24,Y+10
  77:teste_envio.c **** 												(unsigned char)hex_int[2],
 572               		.loc 5 77 0
 573 0236 E82F      		mov r30,r24
 574 0238 F0E0      		ldi r31,0
  79:teste_envio.c **** 												(unsigned char)hex_int[0]);
 575               		.loc 5 79 0
 576 023a 8B85      		ldd r24,Y+11
  77:teste_envio.c **** 												(unsigned char)hex_int[2],
 577               		.loc 5 77 0
 578 023c 682F      		mov r22,r24
 579 023e 70E0      		ldi r23,0
  78:teste_envio.c **** 												(unsigned char)hex_int[1],
 580               		.loc 5 78 0
 581 0240 8C85      		ldd r24,Y+12
  77:teste_envio.c **** 												(unsigned char)hex_int[2],
 582               		.loc 5 77 0
 583 0242 482F      		mov r20,r24
 584 0244 50E0      		ldi r21,0
 585 0246 8D85      		ldd r24,Y+13
 586 0248 282F      		mov r18,r24
 587 024a 30E0      		ldi r19,0
 588 024c 8F81      		ldd r24,Y+7
 589 024e 882F      		mov r24,r24
 590 0250 90E0      		ldi r25,0
 591 0252 AF2F      		mov r26,r31
 592 0254 AF93      		push r26
 593 0256 EF93      		push r30
 594 0258 E72F      		mov r30,r23
 595 025a EF93      		push r30
 596 025c 6F93      		push r22
 597 025e 652F      		mov r22,r21
 598 0260 6F93      		push r22
 599 0262 4F93      		push r20
 600 0264 432F      		mov r20,r19
 601 0266 4F93      		push r20
 602 0268 2F93      		push r18
 603 026a 292F      		mov r18,r25
 604 026c 2F93      		push r18
 605 026e 8F93      		push r24
 606 0270 80E0      		ldi r24,lo8(.LC2)
 607 0272 90E0      		ldi r25,hi8(.LC2)
 608 0274 892F      		mov r24,r25
 609 0276 8F93      		push r24
 610 0278 80E0      		ldi r24,lo8(.LC2)
 611 027a 90E0      		ldi r25,hi8(.LC2)
 612 027c 8F93      		push r24
 613 027e 0E94 0000 		call printf
 614 0282 8DB7      		in r24,__SP_L__
 615 0284 9EB7      		in r25,__SP_H__
 616 0286 0C96      		adiw r24,12
 617 0288 0FB6      		in __tmp_reg__,__SREG__
 618 028a F894      		cli
 619 028c DEBF      		out __SP_H__,r29
 620 028e 0FBE      		out __SREG__,__tmp_reg__
 621 0290 CDBF      		out __SP_L__,r28
 622               	.LBB3:
  81:teste_envio.c **** 		for (int j = 0; j <= assTimeSlot/8; j++)
 623               		.loc 5 81 0
 624 0292 1C82      		std Y+4,__zero_reg__
 625 0294 1B82      		std Y+3,__zero_reg__
 626 0296 00C0      		rjmp .L16
 627               	.L17:
  82:teste_envio.c **** 		{
  83:teste_envio.c **** 			printf("%02x",bitmap);
 628               		.loc 5 83 0 discriminator 3
 629 0298 8985      		ldd r24,Y+9
 630 029a 882F      		mov r24,r24
 631 029c 90E0      		ldi r25,0
 632 029e 292F      		mov r18,r25
 633 02a0 2F93      		push r18
 634 02a2 8F93      		push r24
 635 02a4 80E0      		ldi r24,lo8(.LC3)
 636 02a6 90E0      		ldi r25,hi8(.LC3)
 637 02a8 892F      		mov r24,r25
 638 02aa 8F93      		push r24
 639 02ac 80E0      		ldi r24,lo8(.LC3)
 640 02ae 90E0      		ldi r25,hi8(.LC3)
 641 02b0 8F93      		push r24
 642 02b2 0E94 0000 		call printf
 643 02b6 0F90      		pop __tmp_reg__
 644 02b8 0F90      		pop __tmp_reg__
 645 02ba 0F90      		pop __tmp_reg__
 646 02bc 0F90      		pop __tmp_reg__
  81:teste_envio.c **** 		for (int j = 0; j <= assTimeSlot/8; j++)
 647               		.loc 5 81 0 discriminator 3
 648 02be 8B81      		ldd r24,Y+3
 649 02c0 9C81      		ldd r25,Y+4
 650 02c2 0196      		adiw r24,1
 651 02c4 9C83      		std Y+4,r25
 652 02c6 8B83      		std Y+3,r24
 653               	.L16:
  81:teste_envio.c **** 		for (int j = 0; j <= assTimeSlot/8; j++)
 654               		.loc 5 81 0 is_stmt 0 discriminator 1
 655 02c8 8885      		ldd r24,Y+8
 656 02ca 8695      		lsr r24
 657 02cc 8695      		lsr r24
 658 02ce 8695      		lsr r24
 659 02d0 282F      		mov r18,r24
 660 02d2 30E0      		ldi r19,0
 661 02d4 8B81      		ldd r24,Y+3
 662 02d6 9C81      		ldd r25,Y+4
 663 02d8 2817      		cp r18,r24
 664 02da 3907      		cpc r19,r25
 665 02dc 04F4      		brge .L17
 666               	.LBE3:
  75:teste_envio.c **** 	{
 667               		.loc 5 75 0 is_stmt 1 discriminator 2
 668 02de 8981      		ldd r24,Y+1
 669 02e0 9A81      		ldd r25,Y+2
 670 02e2 0196      		adiw r24,1
 671 02e4 9A83      		std Y+2,r25
 672 02e6 8983      		std Y+1,r24
 673               	.L15:
  75:teste_envio.c **** 	{
 674               		.loc 5 75 0 is_stmt 0 discriminator 1
 675 02e8 8885      		ldd r24,Y+8
 676 02ea 282F      		mov r18,r24
 677 02ec 30E0      		ldi r19,0
 678 02ee 8981      		ldd r24,Y+1
 679 02f0 9A81      		ldd r25,Y+2
 680 02f2 8217      		cp r24,r18
 681 02f4 9307      		cpc r25,r19
 682 02f6 04F4      		brge .+2
 683 02f8 00C0      		rjmp .L18
 684               	.LBE2:
  84:teste_envio.c **** 		}
  85:teste_envio.c **** 	}
  86:teste_envio.c **** 	printf("T");
 685               		.loc 5 86 0 is_stmt 1
 686 02fa 84E5      		ldi r24,lo8(84)
 687 02fc 90E0      		ldi r25,0
 688 02fe 0E94 0000 		call putchar
  87:teste_envio.c **** 	appState = APP_STATE_INITIAL;
 689               		.loc 5 87 0
 690 0302 1092 0000 		sts appState,__zero_reg__
  88:teste_envio.c **** }
 691               		.loc 5 88 0
 692 0306 0000      		nop
 693               	/* epilogue start */
 694 0308 2F96      		adiw r28,15
 695 030a 0FB6      		in __tmp_reg__,__SREG__
 696 030c F894      		cli
 697 030e DEBF      		out __SP_H__,r29
 698 0310 0FBE      		out __SREG__,__tmp_reg__
 699 0312 CDBF      		out __SP_L__,r28
 700 0314 DF91      		pop r29
 701 0316 CF91      		pop r28
 702 0318 0895      		ret
 703               		.cfi_endproc
 704               	.LFE130:
 706               		.section	.rodata
 707               	.LC4:
 708 0020 2563 00   		.string	"%c"
 709               		.text
 711               	readStrinig:
 712               	.LFB131:
  89:teste_envio.c **** 
  90:teste_envio.c **** 
  91:teste_envio.c **** static int readStrinig(char *receivedString, char finalChar, unsigned int maxNbBytes)
  92:teste_envio.c **** {
 713               		.loc 5 92 0
 714               		.cfi_startproc
 715 031a CF93      		push r28
 716               	.LCFI30:
 717               		.cfi_def_cfa_offset 3
 718               		.cfi_offset 28, -2
 719 031c DF93      		push r29
 720               	.LCFI31:
 721               		.cfi_def_cfa_offset 4
 722               		.cfi_offset 29, -3
 723 031e CDB7      		in r28,__SP_L__
 724 0320 DEB7      		in r29,__SP_H__
 725               	.LCFI32:
 726               		.cfi_def_cfa_register 28
 727 0322 2997      		sbiw r28,9
 728               	.LCFI33:
 729               		.cfi_def_cfa_offset 13
 730 0324 0FB6      		in __tmp_reg__,__SREG__
 731 0326 F894      		cli
 732 0328 DEBF      		out __SP_H__,r29
 733 032a 0FBE      		out __SREG__,__tmp_reg__
 734 032c CDBF      		out __SP_L__,r28
 735               	/* prologue: function */
 736               	/* frame size = 9 */
 737               	/* stack size = 11 */
 738               	.L__stack_usage = 11
 739 032e 9E83      		std Y+6,r25
 740 0330 8D83      		std Y+5,r24
 741 0332 6F83      		std Y+7,r22
 742 0334 5987      		std Y+9,r21
 743 0336 4887      		std Y+8,r20
  93:teste_envio.c ****     // Number of characters read
  94:teste_envio.c ****     unsigned int    NbBytes=0;
 744               		.loc 5 94 0
 745 0338 1A82      		std Y+2,__zero_reg__
 746 033a 1982      		std Y+1,__zero_reg__
  95:teste_envio.c ****     // Returned value from Read
  96:teste_envio.c ****     char            charRead;
  97:teste_envio.c **** 	while (NbBytes<maxNbBytes)
 747               		.loc 5 97 0
 748 033c 00C0      		rjmp .L20
 749               	.L25:
  98:teste_envio.c **** 	{
  99:teste_envio.c **** 		// Read a character with the restant time
 100:teste_envio.c **** 		scanf("%c",&receivedString[NbBytes]);
 750               		.loc 5 100 0
 751 033e 2D81      		ldd r18,Y+5
 752 0340 3E81      		ldd r19,Y+6
 753 0342 8981      		ldd r24,Y+1
 754 0344 9A81      		ldd r25,Y+2
 755 0346 820F      		add r24,r18
 756 0348 931F      		adc r25,r19
 757 034a 292F      		mov r18,r25
 758 034c 2F93      		push r18
 759 034e 8F93      		push r24
 760 0350 80E0      		ldi r24,lo8(.LC4)
 761 0352 90E0      		ldi r25,hi8(.LC4)
 762 0354 892F      		mov r24,r25
 763 0356 8F93      		push r24
 764 0358 80E0      		ldi r24,lo8(.LC4)
 765 035a 90E0      		ldi r25,hi8(.LC4)
 766 035c 8F93      		push r24
 767 035e 0E94 0000 		call scanf
 768 0362 0F90      		pop __tmp_reg__
 769 0364 0F90      		pop __tmp_reg__
 770 0366 0F90      		pop __tmp_reg__
 771 0368 0F90      		pop __tmp_reg__
 101:teste_envio.c **** 
 102:teste_envio.c **** 
 103:teste_envio.c **** 		// Check if this is the final char
 104:teste_envio.c **** 		if (receivedString[NbBytes]==finalChar)
 772               		.loc 5 104 0
 773 036a 2D81      		ldd r18,Y+5
 774 036c 3E81      		ldd r19,Y+6
 775 036e 8981      		ldd r24,Y+1
 776 0370 9A81      		ldd r25,Y+2
 777 0372 820F      		add r24,r18
 778 0374 931F      		adc r25,r19
 779 0376 FC01      		movw r30,r24
 780 0378 9081      		ld r25,Z
 781 037a 8F81      		ldd r24,Y+7
 782 037c 9817      		cp r25,r24
 783 037e 01F4      		brne .L21
 784               	.LBB4:
 105:teste_envio.c **** 		{
 106:teste_envio.c **** 			for (int i = 0; i < NbBytes; i++)
 785               		.loc 5 106 0
 786 0380 1C82      		std Y+4,__zero_reg__
 787 0382 1B82      		std Y+3,__zero_reg__
 788 0384 00C0      		rjmp .L22
 789               	.L23:
 107:teste_envio.c **** 			{
 108:teste_envio.c **** 				printf("%c",receivedString[i]);
 790               		.loc 5 108 0 discriminator 3
 791 0386 8B81      		ldd r24,Y+3
 792 0388 9C81      		ldd r25,Y+4
 793 038a 2D81      		ldd r18,Y+5
 794 038c 3E81      		ldd r19,Y+6
 795 038e 820F      		add r24,r18
 796 0390 931F      		adc r25,r19
 797 0392 FC01      		movw r30,r24
 798 0394 8081      		ld r24,Z
 799 0396 882F      		mov r24,r24
 800 0398 90E0      		ldi r25,0
 801 039a 0E94 0000 		call putchar
 106:teste_envio.c **** 			{
 802               		.loc 5 106 0 discriminator 3
 803 039e 8B81      		ldd r24,Y+3
 804 03a0 9C81      		ldd r25,Y+4
 805 03a2 0196      		adiw r24,1
 806 03a4 9C83      		std Y+4,r25
 807 03a6 8B83      		std Y+3,r24
 808               	.L22:
 106:teste_envio.c **** 			{
 809               		.loc 5 106 0 is_stmt 0 discriminator 1
 810 03a8 2B81      		ldd r18,Y+3
 811 03aa 3C81      		ldd r19,Y+4
 812 03ac 8981      		ldd r24,Y+1
 813 03ae 9A81      		ldd r25,Y+2
 814 03b0 2817      		cp r18,r24
 815 03b2 3907      		cpc r19,r25
 816 03b4 00F0      		brlo .L23
 817               	.LBE4:
 109:teste_envio.c **** 			}
 110:teste_envio.c **** 			// This is the final char, add zero (end of string)
 111:teste_envio.c **** 			receivedString  [++NbBytes]=0;
 818               		.loc 5 111 0 is_stmt 1
 819 03b6 8981      		ldd r24,Y+1
 820 03b8 9A81      		ldd r25,Y+2
 821 03ba 0196      		adiw r24,1
 822 03bc 9A83      		std Y+2,r25
 823 03be 8983      		std Y+1,r24
 824 03c0 2D81      		ldd r18,Y+5
 825 03c2 3E81      		ldd r19,Y+6
 826 03c4 8981      		ldd r24,Y+1
 827 03c6 9A81      		ldd r25,Y+2
 828 03c8 820F      		add r24,r18
 829 03ca 931F      		adc r25,r19
 830 03cc FC01      		movw r30,r24
 831 03ce 1082      		st Z,__zero_reg__
 112:teste_envio.c **** 			// Return the number of bytes read
 113:teste_envio.c **** 			return NbBytes;
 832               		.loc 5 113 0
 833 03d0 8981      		ldd r24,Y+1
 834 03d2 9A81      		ldd r25,Y+2
 835 03d4 00C0      		rjmp .L19
 836               	.L21:
 114:teste_envio.c **** 		}
 115:teste_envio.c **** 
 116:teste_envio.c **** 		// The character is not the final char, increase the number of bytes read
 117:teste_envio.c **** 		NbBytes++;
 837               		.loc 5 117 0
 838 03d6 8981      		ldd r24,Y+1
 839 03d8 9A81      		ldd r25,Y+2
 840 03da 0196      		adiw r24,1
 841 03dc 9A83      		std Y+2,r25
 842 03de 8983      		std Y+1,r24
 843               	.L20:
  97:teste_envio.c **** 	{
 844               		.loc 5 97 0
 845 03e0 2981      		ldd r18,Y+1
 846 03e2 3A81      		ldd r19,Y+2
 847 03e4 8885      		ldd r24,Y+8
 848 03e6 9985      		ldd r25,Y+9
 849 03e8 2817      		cp r18,r24
 850 03ea 3907      		cpc r19,r25
 851 03ec 00F4      		brsh .+2
 852 03ee 00C0      		rjmp .L25
 118:teste_envio.c **** 
 119:teste_envio.c **** 		// An error occured while reading, return the error number
 120:teste_envio.c **** 		if (charRead<0) return charRead;
 121:teste_envio.c **** 	}
 122:teste_envio.c **** 	printf("f");
 853               		.loc 5 122 0
 854 03f0 86E6      		ldi r24,lo8(102)
 855 03f2 90E0      		ldi r25,0
 856 03f4 0E94 0000 		call putchar
 857               	.L19:
 858               	/* epilogue start */
 123:teste_envio.c **** }
 859               		.loc 5 123 0
 860 03f8 2996      		adiw r28,9
 861 03fa 0FB6      		in __tmp_reg__,__SREG__
 862 03fc F894      		cli
 863 03fe DEBF      		out __SP_H__,r29
 864 0400 0FBE      		out __SREG__,__tmp_reg__
 865 0402 CDBF      		out __SP_L__,r28
 866 0404 DF91      		pop r29
 867 0406 CF91      		pop r28
 868 0408 0895      		ret
 869               		.cfi_endproc
 870               	.LFE131:
 873               	APP_TaskHandler:
 874               	.LFB132:
 124:teste_envio.c **** static void APP_TaskHandler(void)
 125:teste_envio.c **** {
 875               		.loc 5 125 0
 876               		.cfi_startproc
 877 040a CF93      		push r28
 878               	.LCFI34:
 879               		.cfi_def_cfa_offset 3
 880               		.cfi_offset 28, -2
 881 040c DF93      		push r29
 882               	.LCFI35:
 883               		.cfi_def_cfa_offset 4
 884               		.cfi_offset 29, -3
 885 040e CDB7      		in r28,__SP_L__
 886 0410 DEB7      		in r29,__SP_H__
 887               	.LCFI36:
 888               		.cfi_def_cfa_register 28
 889               	/* prologue: function */
 890               	/* frame size = 0 */
 891               	/* stack size = 2 */
 892               	.L__stack_usage = 2
 126:teste_envio.c **** 	switch (appState){
 893               		.loc 5 126 0
 894 0412 8091 0000 		lds r24,appState
 895 0416 882F      		mov r24,r24
 896 0418 90E0      		ldi r25,0
 897 041a 892B      		or r24,r25
 898 041c 01F0      		breq .L28
 127:teste_envio.c **** 		case APP_STATE_INITIAL:
 128:teste_envio.c **** 		{
 129:teste_envio.c **** 			SYS_TimerStart(&tmrDelay);
 130:teste_envio.c **** // 			char stringreceived[10];
 131:teste_envio.c **** // 			readStrinig(stringreceived,'d',10);
 132:teste_envio.c **** 			appState = APP_STATE_IDLE;
 133:teste_envio.c **** 		}
 134:teste_envio.c **** 		
 135:teste_envio.c **** 		default:
 136:teste_envio.c **** 		break;
 899               		.loc 5 136 0
 900 041e 00C0      		rjmp .L30
 901               	.L28:
 129:teste_envio.c **** // 			char stringreceived[10];
 902               		.loc 5 129 0
 903 0420 80E0      		ldi r24,lo8(tmrDelay)
 904 0422 90E0      		ldi r25,hi8(tmrDelay)
 905 0424 0E94 0000 		call SYS_TimerStart
 132:teste_envio.c **** 		}
 906               		.loc 5 132 0
 907 0428 81E0      		ldi r24,lo8(1)
 908 042a 8093 0000 		sts appState,r24
 909               	.L30:
 910               		.loc 5 136 0
 911 042e 0000      		nop
 137:teste_envio.c **** 	}
 138:teste_envio.c **** }
 912               		.loc 5 138 0
 913 0430 0000      		nop
 914               	/* epilogue start */
 915 0432 DF91      		pop r29
 916 0434 CF91      		pop r28
 917 0436 0895      		ret
 918               		.cfi_endproc
 919               	.LFE132:
 921               		.section	.rodata
 922               	.LC0:
 923 0023 00        		.byte	0
 924 0024 C2        		.byte	-62
 925 0025 01        		.byte	1
 926 0026 00        		.byte	0
 927 0027 03        		.byte	3
 928 0028 00        		.byte	0
 929 0029 01        		.byte	1
 930               		.text
 931               	.global	main
 933               	main:
 934               	.LFB133:
 139:teste_envio.c **** 
 140:teste_envio.c **** 	/*****************************************************************************
 141:teste_envio.c **** 	*****************************************************************************/
 142:teste_envio.c **** 	int main(void)
 143:teste_envio.c **** 	{
 935               		.loc 5 143 0
 936               		.cfi_startproc
 937 0438 0F93      		push r16
 938               	.LCFI37:
 939               		.cfi_def_cfa_offset 3
 940               		.cfi_offset 16, -2
 941 043a 1F93      		push r17
 942               	.LCFI38:
 943               		.cfi_def_cfa_offset 4
 944               		.cfi_offset 17, -3
 945 043c CF93      		push r28
 946               	.LCFI39:
 947               		.cfi_def_cfa_offset 5
 948               		.cfi_offset 28, -4
 949 043e DF93      		push r29
 950               	.LCFI40:
 951               		.cfi_def_cfa_offset 6
 952               		.cfi_offset 29, -5
 953 0440 CDB7      		in r28,__SP_L__
 954 0442 DEB7      		in r29,__SP_H__
 955               	.LCFI41:
 956               		.cfi_def_cfa_register 28
 957 0444 2797      		sbiw r28,7
 958               	.LCFI42:
 959               		.cfi_def_cfa_offset 13
 960 0446 0FB6      		in __tmp_reg__,__SREG__
 961 0448 F894      		cli
 962 044a DEBF      		out __SP_H__,r29
 963 044c 0FBE      		out __SREG__,__tmp_reg__
 964 044e CDBF      		out __SP_L__,r28
 965               	/* prologue: function */
 966               	/* frame size = 7 */
 967               	/* stack size = 11 */
 968               	.L__stack_usage = 11
 144:teste_envio.c **** 		sysclk_init();
 969               		.loc 5 144 0
 970 0450 0E94 0000 		call sysclk_init
 145:teste_envio.c **** 		board_init();
 971               		.loc 5 145 0
 972 0454 0E94 0000 		call board_init
 146:teste_envio.c **** 
 147:teste_envio.c **** 		SYS_Init();
 973               		.loc 5 147 0
 974 0458 0E94 0000 		call SYS_Init
 148:teste_envio.c **** 		/* Disable CSMA/CA
 149:teste_envio.c **** 		 * Disable auto ACK
 150:teste_envio.c **** 		 * Enable Rx of LLDN Frame Type as described in 802.15.4e - 2012 
 151:teste_envio.c **** 		 */
 152:teste_envio.c **** 
 153:teste_envio.c **** 		sm_init();
 975               		.loc 5 153 0
 976 045c 0E94 0000 		call sm_init
 154:teste_envio.c **** 
 155:teste_envio.c **** 		tmrDelay.interval = 3*1000;
 977               		.loc 5 155 0
 978 0460 88EB      		ldi r24,lo8(-72)
 979 0462 9BE0      		ldi r25,lo8(11)
 980 0464 A0E0      		ldi r26,0
 981 0466 B0E0      		ldi r27,0
 982 0468 8093 0000 		sts tmrDelay+6,r24
 983 046c 9093 0000 		sts tmrDelay+6+1,r25
 984 0470 A093 0000 		sts tmrDelay+6+2,r26
 985 0474 B093 0000 		sts tmrDelay+6+3,r27
 156:teste_envio.c **** 		tmrDelay.mode = SYS_TIMER_INTERVAL_MODE;
 986               		.loc 5 156 0
 987 0478 1092 0000 		sts tmrDelay+10,__zero_reg__
 157:teste_envio.c **** 		tmrDelay.handler = tmrDelayHandler;
 988               		.loc 5 157 0
 989 047c 80E0      		ldi r24,lo8(gs(tmrDelayHandler))
 990 047e 90E0      		ldi r25,hi8(gs(tmrDelayHandler))
 991 0480 9093 0000 		sts tmrDelay+11+1,r25
 992 0484 8093 0000 		sts tmrDelay+11,r24
 158:teste_envio.c **** 
 159:teste_envio.c **** 		// Initialize interrupt vector table support.
 160:teste_envio.c **** 	#if (SIO2HOST_CHANNEL == SIO_USB)
 161:teste_envio.c **** 		irq_initialize_vectors();
 162:teste_envio.c **** 	#endif
 163:teste_envio.c **** 		cpu_irq_enable();
 993               		.loc 5 163 0
 994               	/* #APP */
 995               	 ;  163 "teste_envio.c" 1
 996 0488 7894      		sei
 997               	 ;  0 "" 2
 164:teste_envio.c **** 
 165:teste_envio.c **** 	#if 1
 166:teste_envio.c **** 	#if (SIO2HOST_CHANNEL == SIO_USB)
 167:teste_envio.c **** 		stdio_usb_init();
 168:teste_envio.c **** 	#else
 169:teste_envio.c **** 		const usart_serial_options_t usart_serial_options =
 998               		.loc 5 169 0
 999               	/* #NOAPP */
 1000 048a 27E0      		ldi r18,lo8(7)
 1001 048c E0E0      		ldi r30,lo8(.LC0)
 1002 048e F0E0      		ldi r31,hi8(.LC0)
 1003 0490 CE01      		movw r24,r28
 1004 0492 0196      		adiw r24,1
 1005 0494 DC01      		movw r26,r24
 1006               		0:
 1007 0496 0190      		ld r0,Z+
 1008 0498 0D92      		st X+,r0
 1009 049a 2A95      		dec r18
 1010 049c 01F4      		brne 0b
 170:teste_envio.c **** 		{
 171:teste_envio.c **** 			.baudrate     = USART_HOST_BAUDRATE,
 172:teste_envio.c **** 			.charlength   = USART_HOST_CHAR_LENGTH,
 173:teste_envio.c **** 			.paritytype   = USART_HOST_PARITY,
 174:teste_envio.c **** 			.stopbits     = USART_HOST_STOP_BITS
 175:teste_envio.c **** 		};
 176:teste_envio.c **** 
 177:teste_envio.c **** 		stdio_serial_init(USART_HOST, &usart_serial_options);
 1011               		.loc 5 177 0
 1012 049e CE01      		movw r24,r28
 1013 04a0 0196      		adiw r24,1
 1014 04a2 BC01      		movw r22,r24
 1015 04a4 80EC      		ldi r24,lo8(-64)
 1016 04a6 90E0      		ldi r25,0
 1017 04a8 0E94 0000 		call stdio_serial_init
 178:teste_envio.c **** 		usart_double_baud_enable(USART_HOST);
 1018               		.loc 5 178 0
 1019 04ac 80EC      		ldi r24,lo8(-64)
 1020 04ae 90E0      		ldi r25,0
 1021 04b0 0E94 0000 		call usart_double_baud_enable
 179:teste_envio.c **** 		usart_set_baudrate_precalculated(USART_HOST, USART_HOST_BAUDRATE, sysclk_get_source_clock_hz());
 1022               		.loc 5 179 0
 1023 04b4 0E94 0000 		call sysclk_get_source_clock_hz
 1024 04b8 DC01      		movw r26,r24
 1025 04ba CB01      		movw r24,r22
 1026 04bc 8C01      		movw r16,r24
 1027 04be 9D01      		movw r18,r26
 1028 04c0 40E0      		ldi r20,0
 1029 04c2 52EC      		ldi r21,lo8(-62)
 1030 04c4 61E0      		ldi r22,lo8(1)
 1031 04c6 70E0      		ldi r23,0
 1032 04c8 80EC      		ldi r24,lo8(-64)
 1033 04ca 90E0      		ldi r25,0
 1034 04cc 0E94 0000 		call usart_set_baudrate_precalculated
 1035               	.L32:
 180:teste_envio.c **** 
 181:teste_envio.c **** 	#endif
 182:teste_envio.c **** 	#endif
 183:teste_envio.c **** 		for(;;)
 184:teste_envio.c **** 		{
 185:teste_envio.c **** 			SYS_TaskHandler();
 1036               		.loc 5 185 0 discriminator 1
 1037 04d0 0E94 0000 		call SYS_TaskHandler
 186:teste_envio.c **** 			APP_TaskHandler();
 1038               		.loc 5 186 0 discriminator 1
 1039 04d4 0E94 0000 		call APP_TaskHandler
 187:teste_envio.c **** 		}
 1040               		.loc 5 187 0 discriminator 1
 1041 04d8 00C0      		rjmp .L32
 1042               		.cfi_endproc
 1043               	.LFE133:
 1045               	.Letext0:
 1046               		.file 6 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\in
 1047               		.file 7 "../../../stack/LwMesh/TDMA/sys/inc/sysTimer.h"
 1048               		.file 8 "../../../platform/mega_rf/drivers/sleep/sleep.h"
 1049               		.file 9 "lldn.h"
 1050               		.file 10 "../../../platform/mega_rf/utils/status_codes.h"
 1051               		.file 11 "config/config.h"
 1052               		.file 12 "../../../platform/common/services/sleepmgr/mega_rf/sleepmgr.h"
DEFINED SYMBOLS
                            *ABS*:00000000 teste_envio.c
C:\Users\GUILHE~1\AppData\Local\Temp\ccSCB5uN.s:2      *ABS*:0000003e __SP_H__
C:\Users\GUILHE~1\AppData\Local\Temp\ccSCB5uN.s:3      *ABS*:0000003d __SP_L__
C:\Users\GUILHE~1\AppData\Local\Temp\ccSCB5uN.s:4      *ABS*:0000003f __SREG__
C:\Users\GUILHE~1\AppData\Local\Temp\ccSCB5uN.s:5      *ABS*:0000003b __RAMPZ__
C:\Users\GUILHE~1\AppData\Local\Temp\ccSCB5uN.s:6      *ABS*:00000000 __tmp_reg__
C:\Users\GUILHE~1\AppData\Local\Temp\ccSCB5uN.s:7      *ABS*:00000001 __zero_reg__
                            *COM*:00000001 n
                            *COM*:00000004 tTS
                            *COM*:00000002 macLLDNnumTimeSlots
                            *COM*:00000002 macLLDNnumUplinkTS
                            *COM*:00000002 macLLDNRetransmitTS
C:\Users\GUILHE~1\AppData\Local\Temp\ccSCB5uN.s:17     .text:00000000 sysclk_get_main_hz
C:\Users\GUILHE~1\AppData\Local\Temp\ccSCB5uN.s:54     .text:0000001a sysclk_get_source_clock_hz
C:\Users\GUILHE~1\AppData\Local\Temp\ccSCB5uN.s:91     .progmem.data.baudctrl_1mhz:00000000 baudctrl_1mhz
C:\Users\GUILHE~1\AppData\Local\Temp\ccSCB5uN.s:103    .progmem.data.baudctrl_8mhz:00000000 baudctrl_8mhz
C:\Users\GUILHE~1\AppData\Local\Temp\ccSCB5uN.s:115    .progmem.data.baudctrl_16mhz:00000000 baudctrl_16mhz
C:\Users\GUILHE~1\AppData\Local\Temp\ccSCB5uN.s:126    .text:00000034 usart_double_baud_enable
C:\Users\GUILHE~1\AppData\Local\Temp\ccSCB5uN.s:175    .text:00000062 usart_serial_init
C:\Users\GUILHE~1\AppData\Local\Temp\ccSCB5uN.s:270    .text:000000de usart_serial_putchar
C:\Users\GUILHE~1\AppData\Local\Temp\ccSCB5uN.s:314    .text:00000106 usart_serial_getchar
C:\Users\GUILHE~1\AppData\Local\Temp\ccSCB5uN.s:365    .text:0000013c stdio_serial_init
C:\Users\GUILHE~1\AppData\Local\Temp\ccSCB5uN.s:438    .bss.tmrDelay:00000000 tmrDelay
C:\Users\GUILHE~1\AppData\Local\Temp\ccSCB5uN.s:444    .bss.appState:00000000 appState
C:\Users\GUILHE~1\AppData\Local\Temp\ccSCB5uN.s:450    .data.scan:00000000 scan
C:\Users\GUILHE~1\AppData\Local\Temp\ccSCB5uN.s:461    .text:0000019e tmrDelayHandler
C:\Users\GUILHE~1\AppData\Local\Temp\ccSCB5uN.s:711    .text:0000031a readStrinig
C:\Users\GUILHE~1\AppData\Local\Temp\ccSCB5uN.s:873    .text:0000040a APP_TaskHandler
C:\Users\GUILHE~1\AppData\Local\Temp\ccSCB5uN.s:933    .text:00000438 main

UNDEFINED SYMBOLS
usart_init_rs232
usart_putchar
usart_getchar
stdio_base
ptr_put
ptr_get
_read
_write
fdevopen
putchar
printf
scanf
SYS_TimerStart
sysclk_init
board_init
SYS_Init
sm_init
usart_set_baudrate_precalculated
SYS_TaskHandler
__do_copy_data
__do_clear_bss
