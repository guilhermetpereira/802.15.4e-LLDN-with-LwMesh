   1              	 .cpu cortex-m4
   2              	 .eabi_attribute 20,1
   3              	 .eabi_attribute 21,1
   4              	 .eabi_attribute 23,3
   5              	 .eabi_attribute 24,1
   6              	 .eabi_attribute 25,1
   7              	 .eabi_attribute 26,1
   8              	 .eabi_attribute 30,6
   9              	 .eabi_attribute 34,1
  10              	 .eabi_attribute 18,4
  11              	 .file "board_init.c"
  12              	 .text
  13              	.Ltext0:
  14              	 .cfi_sections .debug_frame
  15              	 .section .bss.cpu_irq_critical_section_counter,"aw",%nobits
  16              	 .align 2
  19              	cpu_irq_critical_section_counter:
  20 0000 00000000 	 .space 4
  21              	 .section .bss.cpu_irq_prev_interrupt_state,"aw",%nobits
  24              	cpu_irq_prev_interrupt_state:
  25 0000 00       	 .space 1
  26              	 .comm n,1,1
  27              	 .section .bss.tTS,"aw",%nobits
  28              	 .align 2
  31              	tTS:
  32 0000 00000000 	 .space 4
  33              	 .text
  34              	 .align 1
  35              	 .syntax unified
  36              	 .thumb
  37              	 .thumb_func
  38              	 .fpu softvfp
  40              	ioport_init:
  41              	.LFB202:
  42              	 .file 1 "../../../platform/common/services/ioport/ioport.h"
   1:../../../platform/common/services/ioport/ioport.h **** /**
   2:../../../platform/common/services/ioport/ioport.h ****  * \file
   3:../../../platform/common/services/ioport/ioport.h ****  *
   4:../../../platform/common/services/ioport/ioport.h ****  * \brief Common IOPORT service main header file for AVR, UC3 and ARM
   5:../../../platform/common/services/ioport/ioport.h ****  *        architectures.
   6:../../../platform/common/services/ioport/ioport.h ****  *
   7:../../../platform/common/services/ioport/ioport.h ****  * Copyright (c) 2012 Atmel Corporation. All rights reserved.
   8:../../../platform/common/services/ioport/ioport.h ****  *
   9:../../../platform/common/services/ioport/ioport.h ****  * \asf_license_start
  10:../../../platform/common/services/ioport/ioport.h ****  *
  11:../../../platform/common/services/ioport/ioport.h ****  * \page License
  12:../../../platform/common/services/ioport/ioport.h ****  *
  13:../../../platform/common/services/ioport/ioport.h ****  * Redistribution and use in source and binary forms, with or without
  14:../../../platform/common/services/ioport/ioport.h ****  * modification, are permitted provided that the following conditions are met:
  15:../../../platform/common/services/ioport/ioport.h ****  *
  16:../../../platform/common/services/ioport/ioport.h ****  * 1. Redistributions of source code must retain the above copyright notice,
  17:../../../platform/common/services/ioport/ioport.h ****  *    this list of conditions and the following disclaimer.
  18:../../../platform/common/services/ioport/ioport.h ****  *
  19:../../../platform/common/services/ioport/ioport.h ****  * 2. Redistributions in binary form must reproduce the above copyright notice,
  20:../../../platform/common/services/ioport/ioport.h ****  *    this list of conditions and the following disclaimer in the documentation
  21:../../../platform/common/services/ioport/ioport.h ****  *    and/or other materials provided with the distribution.
  22:../../../platform/common/services/ioport/ioport.h ****  *
  23:../../../platform/common/services/ioport/ioport.h ****  * 3. The name of Atmel may not be used to endorse or promote products derived
  24:../../../platform/common/services/ioport/ioport.h ****  *    from this software without specific prior written permission.
  25:../../../platform/common/services/ioport/ioport.h ****  *
  26:../../../platform/common/services/ioport/ioport.h ****  * 4. This software may only be redistributed and used in connection with an
  27:../../../platform/common/services/ioport/ioport.h ****  *    Atmel microcontroller product.
  28:../../../platform/common/services/ioport/ioport.h ****  *
  29:../../../platform/common/services/ioport/ioport.h ****  * THIS SOFTWARE IS PROVIDED BY ATMEL "AS IS" AND ANY EXPRESS OR IMPLIED
  30:../../../platform/common/services/ioport/ioport.h ****  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
  31:../../../platform/common/services/ioport/ioport.h ****  * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE
  32:../../../platform/common/services/ioport/ioport.h ****  * EXPRESSLY AND SPECIFICALLY DISCLAIMED. IN NO EVENT SHALL ATMEL BE LIABLE FOR
  33:../../../platform/common/services/ioport/ioport.h ****  * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  34:../../../platform/common/services/ioport/ioport.h ****  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
  35:../../../platform/common/services/ioport/ioport.h ****  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
  36:../../../platform/common/services/ioport/ioport.h ****  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
  37:../../../platform/common/services/ioport/ioport.h ****  * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
  38:../../../platform/common/services/ioport/ioport.h ****  * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  39:../../../platform/common/services/ioport/ioport.h ****  * POSSIBILITY OF SUCH DAMAGE.
  40:../../../platform/common/services/ioport/ioport.h ****  *
  41:../../../platform/common/services/ioport/ioport.h ****  * \asf_license_stop
  42:../../../platform/common/services/ioport/ioport.h ****  *
  43:../../../platform/common/services/ioport/ioport.h ****  */
  44:../../../platform/common/services/ioport/ioport.h **** #ifndef IOPORT_H
  45:../../../platform/common/services/ioport/ioport.h **** #define IOPORT_H
  46:../../../platform/common/services/ioport/ioport.h **** 
  47:../../../platform/common/services/ioport/ioport.h **** #ifdef __cplusplus
  48:../../../platform/common/services/ioport/ioport.h **** extern "C" {
  49:../../../platform/common/services/ioport/ioport.h **** #endif
  50:../../../platform/common/services/ioport/ioport.h **** 
  51:../../../platform/common/services/ioport/ioport.h **** #include <parts.h>
  52:../../../platform/common/services/ioport/ioport.h **** #include <compiler.h>
  53:../../../platform/common/services/ioport/ioport.h **** 
  54:../../../platform/common/services/ioport/ioport.h **** /**
  55:../../../platform/common/services/ioport/ioport.h ****  * \defgroup ioport_group Common IOPORT API
  56:../../../platform/common/services/ioport/ioport.h ****  *
  57:../../../platform/common/services/ioport/ioport.h ****  * See \ref ioport_quickstart.
  58:../../../platform/common/services/ioport/ioport.h ****  *
  59:../../../platform/common/services/ioport/ioport.h ****  * This is common IOPORT service for GPIO pin configuration and control in a
  60:../../../platform/common/services/ioport/ioport.h ****  * standardized manner across the MEGA, MEGA_RF, XMEGA, UC3 and ARM devices.
  61:../../../platform/common/services/ioport/ioport.h ****  *
  62:../../../platform/common/services/ioport/ioport.h ****  * Port pin control code is optimized for each platform, and should produce
  63:../../../platform/common/services/ioport/ioport.h ****  * both compact and fast execution times when used with constant values.
  64:../../../platform/common/services/ioport/ioport.h ****  *
  65:../../../platform/common/services/ioport/ioport.h ****  * \section dependencies Dependencies
  66:../../../platform/common/services/ioport/ioport.h ****  * This driver depends on the following modules:
  67:../../../platform/common/services/ioport/ioport.h ****  * - \ref sysclk_group for clock speed and functions.
  68:../../../platform/common/services/ioport/ioport.h ****  * @{
  69:../../../platform/common/services/ioport/ioport.h ****  */
  70:../../../platform/common/services/ioport/ioport.h **** 
  71:../../../platform/common/services/ioport/ioport.h **** /**
  72:../../../platform/common/services/ioport/ioport.h ****  * \def IOPORT_CREATE_PIN(port, pin)
  73:../../../platform/common/services/ioport/ioport.h ****  * \brief Create IOPORT pin number
  74:../../../platform/common/services/ioport/ioport.h ****  *
  75:../../../platform/common/services/ioport/ioport.h ****  * Create a IOPORT pin number for use with the IOPORT functions.
  76:../../../platform/common/services/ioport/ioport.h ****  *
  77:../../../platform/common/services/ioport/ioport.h ****  * \param port IOPORT port (e.g. PORTA, PA or PIOA depending on chosen
  78:../../../platform/common/services/ioport/ioport.h ****  *             architecture)
  79:../../../platform/common/services/ioport/ioport.h ****  * \param pin IOPORT zero-based index of the I/O pin
  80:../../../platform/common/services/ioport/ioport.h ****  */
  81:../../../platform/common/services/ioport/ioport.h **** 
  82:../../../platform/common/services/ioport/ioport.h **** /** \brief IOPORT pin directions */
  83:../../../platform/common/services/ioport/ioport.h **** enum ioport_direction {
  84:../../../platform/common/services/ioport/ioport.h **** 	IOPORT_DIR_INPUT,  /*!< IOPORT input direction */
  85:../../../platform/common/services/ioport/ioport.h **** 	IOPORT_DIR_OUTPUT, /*!< IOPORT output direction */
  86:../../../platform/common/services/ioport/ioport.h **** };
  87:../../../platform/common/services/ioport/ioport.h **** 
  88:../../../platform/common/services/ioport/ioport.h **** /** \brief IOPORT levels */
  89:../../../platform/common/services/ioport/ioport.h **** enum ioport_value {
  90:../../../platform/common/services/ioport/ioport.h **** 	IOPORT_PIN_LEVEL_LOW,  /*!< IOPORT pin value low */
  91:../../../platform/common/services/ioport/ioport.h **** 	IOPORT_PIN_LEVEL_HIGH, /*!< IOPORT pin value high */
  92:../../../platform/common/services/ioport/ioport.h **** };
  93:../../../platform/common/services/ioport/ioport.h **** 
  94:../../../platform/common/services/ioport/ioport.h **** #if MEGA_RF
  95:../../../platform/common/services/ioport/ioport.h **** /** \brief IOPORT edge sense modes */
  96:../../../platform/common/services/ioport/ioport.h **** enum ioport_sense {
  97:../../../platform/common/services/ioport/ioport.h **** 	IOPORT_SENSE_LEVEL,     /*!< IOPORT sense low level  */
  98:../../../platform/common/services/ioport/ioport.h **** 	IOPORT_SENSE_BOTHEDGES, /*!< IOPORT sense both rising and falling edges */
  99:../../../platform/common/services/ioport/ioport.h **** 	IOPORT_SENSE_FALLING,   /*!< IOPORT sense falling edges */
 100:../../../platform/common/services/ioport/ioport.h **** 	IOPORT_SENSE_RISING,    /*!< IOPORT sense rising edges */
 101:../../../platform/common/services/ioport/ioport.h **** };
 102:../../../platform/common/services/ioport/ioport.h **** #elif SAM && !SAM4L
 103:../../../platform/common/services/ioport/ioport.h **** /** \brief IOPORT edge sense modes */
 104:../../../platform/common/services/ioport/ioport.h **** enum ioport_sense {
 105:../../../platform/common/services/ioport/ioport.h **** 	IOPORT_SENSE_BOTHEDGES, /*!< IOPORT sense both rising and falling edges */
 106:../../../platform/common/services/ioport/ioport.h **** 	IOPORT_SENSE_FALLING,   /*!< IOPORT sense falling edges */
 107:../../../platform/common/services/ioport/ioport.h **** 	IOPORT_SENSE_RISING,    /*!< IOPORT sense rising edges */
 108:../../../platform/common/services/ioport/ioport.h **** 	IOPORT_SENSE_LEVEL_LOW, /*!< IOPORT sense low level  */
 109:../../../platform/common/services/ioport/ioport.h **** 	IOPORT_SENSE_LEVEL_HIGH,/*!< IOPORT sense High level  */
 110:../../../platform/common/services/ioport/ioport.h **** };
 111:../../../platform/common/services/ioport/ioport.h **** #else
 112:../../../platform/common/services/ioport/ioport.h **** enum ioport_sense {
 113:../../../platform/common/services/ioport/ioport.h **** 	IOPORT_SENSE_BOTHEDGES, /*!< IOPORT sense both rising and falling edges */
 114:../../../platform/common/services/ioport/ioport.h **** 	IOPORT_SENSE_RISING,    /*!< IOPORT sense rising edges */
 115:../../../platform/common/services/ioport/ioport.h **** 	IOPORT_SENSE_FALLING,   /*!< IOPORT sense falling edges */
 116:../../../platform/common/services/ioport/ioport.h **** };
 117:../../../platform/common/services/ioport/ioport.h **** #endif
 118:../../../platform/common/services/ioport/ioport.h **** 
 119:../../../platform/common/services/ioport/ioport.h **** 
 120:../../../platform/common/services/ioport/ioport.h **** #if XMEGA
 121:../../../platform/common/services/ioport/ioport.h **** # include "xmega/ioport.h"
 122:../../../platform/common/services/ioport/ioport.h **** # if defined(IOPORT_XMEGA_COMPAT)
 123:../../../platform/common/services/ioport/ioport.h **** #  include "xmega/ioport_compat.h"
 124:../../../platform/common/services/ioport/ioport.h **** # endif
 125:../../../platform/common/services/ioport/ioport.h **** #elif MEGA
 126:../../../platform/common/services/ioport/ioport.h **** #  include "mega_rf/ioport.h"
 127:../../../platform/common/services/ioport/ioport.h **** #elif UC3
 128:../../../platform/common/services/ioport/ioport.h **** # include "uc3/ioport.h"
 129:../../../platform/common/services/ioport/ioport.h **** #elif SAM
 130:../../../platform/common/services/ioport/ioport.h **** # if SAM4L
 131:../../../platform/common/services/ioport/ioport.h **** #  include "sam/ioport_gpio.h"
 132:../../../platform/common/services/ioport/ioport.h **** # elif SAMD20
 133:../../../platform/common/services/ioport/ioport.h **** #  include "sam0/ioport.h"
 134:../../../platform/common/services/ioport/ioport.h **** # else
 135:../../../platform/common/services/ioport/ioport.h **** #  include "sam/ioport_pio.h"
 136:../../../platform/common/services/ioport/ioport.h **** # endif
 137:../../../platform/common/services/ioport/ioport.h **** #endif
 138:../../../platform/common/services/ioport/ioport.h **** 
 139:../../../platform/common/services/ioport/ioport.h **** /**
 140:../../../platform/common/services/ioport/ioport.h ****  * \brief Initializes the IOPORT service, ready for use.
 141:../../../platform/common/services/ioport/ioport.h ****  *
 142:../../../platform/common/services/ioport/ioport.h ****  * This function must be called before using any other functions in the IOPORT
 143:../../../platform/common/services/ioport/ioport.h ****  * service.
 144:../../../platform/common/services/ioport/ioport.h ****  */
 145:../../../platform/common/services/ioport/ioport.h **** static inline void ioport_init(void)
 146:../../../platform/common/services/ioport/ioport.h **** {
  43              	 .loc 1 146 0
  44              	 .cfi_startproc
  45              	 
  46              	 
  47 0000 80B5     	 push {r7,lr}
  48              	.LCFI0:
  49              	 .cfi_def_cfa_offset 8
  50              	 .cfi_offset 7,-8
  51              	 .cfi_offset 14,-4
  52 0002 00AF     	 add r7,sp,#0
  53              	.LCFI1:
  54              	 .cfi_def_cfa_register 7
  55              	.LBB168:
  56              	.LBB169:
  57              	 .file 2 "../../../platform/common/services/ioport/sam/ioport_gpio.h"
   1:../../../platform/common/services/ioport/sam/ioport_gpio.h **** /**
   2:../../../platform/common/services/ioport/sam/ioport_gpio.h ****  * \file
   3:../../../platform/common/services/ioport/sam/ioport_gpio.h ****  *
   4:../../../platform/common/services/ioport/sam/ioport_gpio.h ****  * \brief SAM architecture specific IOPORT service implementation header file.
   5:../../../platform/common/services/ioport/sam/ioport_gpio.h ****  *
   6:../../../platform/common/services/ioport/sam/ioport_gpio.h ****  * Copyright (c) 2012-2013 Atmel Corporation. All rights reserved.
   7:../../../platform/common/services/ioport/sam/ioport_gpio.h ****  *
   8:../../../platform/common/services/ioport/sam/ioport_gpio.h ****  * \asf_license_start
   9:../../../platform/common/services/ioport/sam/ioport_gpio.h ****  *
  10:../../../platform/common/services/ioport/sam/ioport_gpio.h ****  * \page License
  11:../../../platform/common/services/ioport/sam/ioport_gpio.h ****  *
  12:../../../platform/common/services/ioport/sam/ioport_gpio.h ****  * Redistribution and use in source and binary forms, with or without
  13:../../../platform/common/services/ioport/sam/ioport_gpio.h ****  * modification, are permitted provided that the following conditions are met:
  14:../../../platform/common/services/ioport/sam/ioport_gpio.h ****  *
  15:../../../platform/common/services/ioport/sam/ioport_gpio.h ****  * 1. Redistributions of source code must retain the above copyright notice,
  16:../../../platform/common/services/ioport/sam/ioport_gpio.h ****  *    this list of conditions and the following disclaimer.
  17:../../../platform/common/services/ioport/sam/ioport_gpio.h ****  *
  18:../../../platform/common/services/ioport/sam/ioport_gpio.h ****  * 2. Redistributions in binary form must reproduce the above copyright notice,
  19:../../../platform/common/services/ioport/sam/ioport_gpio.h ****  *    this list of conditions and the following disclaimer in the documentation
  20:../../../platform/common/services/ioport/sam/ioport_gpio.h ****  *    and/or other materials provided with the distribution.
  21:../../../platform/common/services/ioport/sam/ioport_gpio.h ****  *
  22:../../../platform/common/services/ioport/sam/ioport_gpio.h ****  * 3. The name of Atmel may not be used to endorse or promote products derived
  23:../../../platform/common/services/ioport/sam/ioport_gpio.h ****  *    from this software without specific prior written permission.
  24:../../../platform/common/services/ioport/sam/ioport_gpio.h ****  *
  25:../../../platform/common/services/ioport/sam/ioport_gpio.h ****  * 4. This software may only be redistributed and used in connection with an
  26:../../../platform/common/services/ioport/sam/ioport_gpio.h ****  *    Atmel microcontroller product.
  27:../../../platform/common/services/ioport/sam/ioport_gpio.h ****  *
  28:../../../platform/common/services/ioport/sam/ioport_gpio.h ****  * THIS SOFTWARE IS PROVIDED BY ATMEL "AS IS" AND ANY EXPRESS OR IMPLIED
  29:../../../platform/common/services/ioport/sam/ioport_gpio.h ****  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
  30:../../../platform/common/services/ioport/sam/ioport_gpio.h ****  * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE
  31:../../../platform/common/services/ioport/sam/ioport_gpio.h ****  * EXPRESSLY AND SPECIFICALLY DISCLAIMED. IN NO EVENT SHALL ATMEL BE LIABLE FOR
  32:../../../platform/common/services/ioport/sam/ioport_gpio.h ****  * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  33:../../../platform/common/services/ioport/sam/ioport_gpio.h ****  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
  34:../../../platform/common/services/ioport/sam/ioport_gpio.h ****  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
  35:../../../platform/common/services/ioport/sam/ioport_gpio.h ****  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
  36:../../../platform/common/services/ioport/sam/ioport_gpio.h ****  * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
  37:../../../platform/common/services/ioport/sam/ioport_gpio.h ****  * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  38:../../../platform/common/services/ioport/sam/ioport_gpio.h ****  * POSSIBILITY OF SUCH DAMAGE.
  39:../../../platform/common/services/ioport/sam/ioport_gpio.h ****  *
  40:../../../platform/common/services/ioport/sam/ioport_gpio.h ****  * \asf_license_stop
  41:../../../platform/common/services/ioport/sam/ioport_gpio.h ****  *
  42:../../../platform/common/services/ioport/sam/ioport_gpio.h ****  */
  43:../../../platform/common/services/ioport/sam/ioport_gpio.h **** #ifndef IOPORT_SAM_H
  44:../../../platform/common/services/ioport/sam/ioport_gpio.h **** #define IOPORT_SAM_H
  45:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 
  46:../../../platform/common/services/ioport/sam/ioport_gpio.h **** #include <sysclk.h>
  47:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 
  48:../../../platform/common/services/ioport/sam/ioport_gpio.h **** #define IOPORT_CREATE_PIN(port, pin) ((port) * 32 + (pin))
  49:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 
  50:../../../platform/common/services/ioport/sam/ioport_gpio.h **** // Aliases
  51:../../../platform/common/services/ioport/sam/ioport_gpio.h **** #define IOPORT_GPIOA     0
  52:../../../platform/common/services/ioport/sam/ioport_gpio.h **** #define IOPORT_GPIOB     1
  53:../../../platform/common/services/ioport/sam/ioport_gpio.h **** #define IOPORT_GPIOC     2
  54:../../../platform/common/services/ioport/sam/ioport_gpio.h **** #define IOPORT_GPIOD     3
  55:../../../platform/common/services/ioport/sam/ioport_gpio.h **** #define IOPORT_GPIOE     4
  56:../../../platform/common/services/ioport/sam/ioport_gpio.h **** #define IOPORT_GPIOF     5
  57:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 
  58:../../../platform/common/services/ioport/sam/ioport_gpio.h **** /**
  59:../../../platform/common/services/ioport/sam/ioport_gpio.h ****  * \weakgroup ioport_group
  60:../../../platform/common/services/ioport/sam/ioport_gpio.h ****  * \section ioport_modes IOPORT Modes
  61:../../../platform/common/services/ioport/sam/ioport_gpio.h ****  *
  62:../../../platform/common/services/ioport/sam/ioport_gpio.h ****  * For details on these please see the device datasheet.
  63:../../../platform/common/services/ioport/sam/ioport_gpio.h ****  *
  64:../../../platform/common/services/ioport/sam/ioport_gpio.h ****  * @{
  65:../../../platform/common/services/ioport/sam/ioport_gpio.h ****  */
  66:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 
  67:../../../platform/common/services/ioport/sam/ioport_gpio.h **** /** \name IOPORT Mode bit definitions */
  68:../../../platform/common/services/ioport/sam/ioport_gpio.h **** /** @{ */
  69:../../../platform/common/services/ioport/sam/ioport_gpio.h **** #define IOPORT_MODE_MUX_MASK            (7 << 0) /*!< MUX bits mask */
  70:../../../platform/common/services/ioport/sam/ioport_gpio.h **** #define IOPORT_MODE_MUX_BIT0            (1 << 0) /*!< MUX BIT0 mask */
  71:../../../platform/common/services/ioport/sam/ioport_gpio.h **** #define IOPORT_MODE_MUX_BIT1            (1 << 1) /*!< MUX BIT1 mask */
  72:../../../platform/common/services/ioport/sam/ioport_gpio.h **** #define IOPORT_MODE_MUX_A               (0 << 0) /*!< MUX function A */
  73:../../../platform/common/services/ioport/sam/ioport_gpio.h **** #define IOPORT_MODE_MUX_B               (1 << 0) /*!< MUX function B */
  74:../../../platform/common/services/ioport/sam/ioport_gpio.h **** #define IOPORT_MODE_MUX_C               (2 << 0) /*!< MUX function C */
  75:../../../platform/common/services/ioport/sam/ioport_gpio.h **** #define IOPORT_MODE_MUX_D               (3 << 0) /*!< MUX function D */
  76:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 
  77:../../../platform/common/services/ioport/sam/ioport_gpio.h **** #define IOPORT_MODE_MUX_BIT2            (1 << 2) /*!< MUX BIT2 mask */
  78:../../../platform/common/services/ioport/sam/ioport_gpio.h **** #define IOPORT_MODE_MUX_E               (4 << 0) /*!< MUX function E */
  79:../../../platform/common/services/ioport/sam/ioport_gpio.h **** #define IOPORT_MODE_MUX_F               (5 << 0) /*!< MUX function F */
  80:../../../platform/common/services/ioport/sam/ioport_gpio.h **** #define IOPORT_MODE_MUX_G               (6 << 0) /*!< MUX function G */
  81:../../../platform/common/services/ioport/sam/ioport_gpio.h **** #define IOPORT_MODE_MUX_H               (7 << 0) /*!< MUX function H */
  82:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 
  83:../../../platform/common/services/ioport/sam/ioport_gpio.h **** #define IOPORT_MODE_PULLUP              (1 << 3) /*!< Pull-up */
  84:../../../platform/common/services/ioport/sam/ioport_gpio.h **** #define IOPORT_MODE_PULLDOWN            (1 << 4) /*!< Pull-down */
  85:../../../platform/common/services/ioport/sam/ioport_gpio.h **** #define IOPORT_MODE_GLITCH_FILTER       (1 << 6) /*!< Glitch filter */
  86:../../../platform/common/services/ioport/sam/ioport_gpio.h **** #define IOPORT_MODE_DRIVE_STRENGTH      (1 << 7) /*!< Extra drive strength */
  87:../../../platform/common/services/ioport/sam/ioport_gpio.h **** /** @} */
  88:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 
  89:../../../platform/common/services/ioport/sam/ioport_gpio.h **** /** @} */
  90:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 
  91:../../../platform/common/services/ioport/sam/ioport_gpio.h **** typedef uint32_t ioport_mode_t;
  92:../../../platform/common/services/ioport/sam/ioport_gpio.h **** typedef uint32_t ioport_pin_t;
  93:../../../platform/common/services/ioport/sam/ioport_gpio.h **** typedef uint32_t ioport_port_t;
  94:../../../platform/common/services/ioport/sam/ioport_gpio.h **** typedef uint32_t ioport_port_mask_t;
  95:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 
  96:../../../platform/common/services/ioport/sam/ioport_gpio.h **** __always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
  97:../../../platform/common/services/ioport/sam/ioport_gpio.h **** {
  98:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 	return pin >> 5;
  99:../../../platform/common/services/ioport/sam/ioport_gpio.h **** }
 100:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 
 101:../../../platform/common/services/ioport/sam/ioport_gpio.h **** __always_inline static volatile GpioPort *arch_ioport_port_to_base(
 102:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 		ioport_port_t port)
 103:../../../platform/common/services/ioport/sam/ioport_gpio.h **** {
 104:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 	return (volatile GpioPort *)(GPIO_ADDR
 105:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 		+ port * sizeof(GpioPort));
 106:../../../platform/common/services/ioport/sam/ioport_gpio.h **** }
 107:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 
 108:../../../platform/common/services/ioport/sam/ioport_gpio.h **** __always_inline static volatile GpioPort *arch_ioport_pin_to_base(ioport_pin_t pin)
 109:../../../platform/common/services/ioport/sam/ioport_gpio.h **** {
 110:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
 111:../../../platform/common/services/ioport/sam/ioport_gpio.h **** }
 112:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 
 113:../../../platform/common/services/ioport/sam/ioport_gpio.h **** __always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
 114:../../../platform/common/services/ioport/sam/ioport_gpio.h **** {
 115:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 	return 1U << (pin & 0x1F);
 116:../../../platform/common/services/ioport/sam/ioport_gpio.h **** }
 117:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 
 118:../../../platform/common/services/ioport/sam/ioport_gpio.h **** __always_inline static void arch_ioport_init(void)
 119:../../../platform/common/services/ioport/sam/ioport_gpio.h **** {
 120:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 	sysclk_enable_peripheral_clock(GPIO);
  58              	 .loc 2 120 0
  59 0004 0248     	 ldr r0,.L2
  60 0006 034B     	 ldr r3,.L2+4
  61 0008 9847     	 blx r3
  62              	.LVL0:
  63              	.LBE169:
  64              	.LBE168:
 147:../../../platform/common/services/ioport/ioport.h **** 	arch_ioport_init();
 148:../../../platform/common/services/ioport/ioport.h **** }
  65              	 .loc 1 148 0
  66 000a 00BF     	 nop
  67 000c 80BD     	 pop {r7,pc}
  68              	.L3:
  69 000e 00BF     	 .align 2
  70              	.L2:
  71 0010 00100E40 	 .word 1074663424
  72 0014 00000000 	 .word sysclk_enable_peripheral_clock
  73              	 .cfi_endproc
  74              	.LFE202:
  76              	 .align 1
  77              	 .syntax unified
  78              	 .thumb
  79              	 .thumb_func
  80              	 .fpu softvfp
  82              	ioport_enable_pin:
  83              	.LFB203:
 149:../../../platform/common/services/ioport/ioport.h **** 
 150:../../../platform/common/services/ioport/ioport.h **** /**
 151:../../../platform/common/services/ioport/ioport.h ****  * \brief Enable an IOPORT pin, based on a pin created with \ref
 152:../../../platform/common/services/ioport/ioport.h ****  * IOPORT_CREATE_PIN().
 153:../../../platform/common/services/ioport/ioport.h ****  *
 154:../../../platform/common/services/ioport/ioport.h ****  * \param pin  IOPORT pin to enable
 155:../../../platform/common/services/ioport/ioport.h ****  */
 156:../../../platform/common/services/ioport/ioport.h **** static inline void ioport_enable_pin(ioport_pin_t pin)
 157:../../../platform/common/services/ioport/ioport.h **** {
  84              	 .loc 1 157 0
  85              	 .cfi_startproc
  86              	 
  87              	 
  88              	 
  89 0018 80B4     	 push {r7}
  90              	.LCFI2:
  91              	 .cfi_def_cfa_offset 4
  92              	 .cfi_offset 7,-4
  93 001a 89B0     	 sub sp,sp,#36
  94              	.LCFI3:
  95              	 .cfi_def_cfa_offset 40
  96 001c 00AF     	 add r7,sp,#0
  97              	.LCFI4:
  98              	 .cfi_def_cfa_register 7
  99 001e 7860     	 str r0,[r7,#4]
 100 0020 7B68     	 ldr r3,[r7,#4]
 101 0022 FB61     	 str r3,[r7,#28]
 102 0024 FB69     	 ldr r3,[r7,#28]
 103 0026 BB61     	 str r3,[r7,#24]
 104              	.LBB170:
 105              	.LBB171:
 106              	.LBB172:
 107              	.LBB173:
  98:../../../platform/common/services/ioport/sam/ioport_gpio.h **** }
 108              	 .loc 2 98 0
 109 0028 BB69     	 ldr r3,[r7,#24]
 110 002a 5A09     	 lsrs r2,r3,#5
 111 002c FB69     	 ldr r3,[r7,#28]
 112 002e 7B61     	 str r3,[r7,#20]
 113              	.LBE173:
 114              	.LBE172:
 115              	.LBB174:
 116              	.LBB175:
 115:../../../platform/common/services/ioport/sam/ioport_gpio.h **** }
 117              	 .loc 2 115 0
 118 0030 7B69     	 ldr r3,[r7,#20]
 119 0032 03F01F03 	 and r3,r3,#31
 120 0036 0121     	 movs r1,#1
 121 0038 01FA03F3 	 lsl r3,r1,r3
 122 003c 3A61     	 str r2,[r7,#16]
 123 003e FB60     	 str r3,[r7,#12]
 124 0040 3B69     	 ldr r3,[r7,#16]
 125 0042 BB60     	 str r3,[r7,#8]
 126              	.LBE175:
 127              	.LBE174:
 128              	.LBB176:
 129              	.LBB177:
 130              	.LBB178:
 131              	.LBB179:
 105:../../../platform/common/services/ioport/sam/ioport_gpio.h **** }
 132              	 .loc 2 105 0
 133 0044 BB68     	 ldr r3,[r7,#8]
 134 0046 03F50013 	 add r3,r3,#2097152
 135 004a 03F5E163 	 add r3,r3,#1800
 136 004e 5B02     	 lsls r3,r3,#9
 104:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 		+ port * sizeof(GpioPort));
 137              	 .loc 2 104 0
 138 0050 1A46     	 mov r2,r3
 139              	.LBE179:
 140              	.LBE178:
 121:../../../platform/common/services/ioport/sam/ioport_gpio.h **** }
 122:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 
 123:../../../platform/common/services/ioport/sam/ioport_gpio.h **** __always_inline static void arch_ioport_enable_port(ioport_port_t port,
 124:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 		ioport_port_mask_t mask)
 125:../../../platform/common/services/ioport/sam/ioport_gpio.h **** {
 126:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 	arch_ioport_port_to_base(port)->GPIO_GPERS = mask;
 141              	 .loc 2 126 0
 142 0052 FB68     	 ldr r3,[r7,#12]
 143 0054 5360     	 str r3,[r2,#4]
 144              	.LBE177:
 145              	.LBE176:
 146              	.LBE171:
 147              	.LBE170:
 158:../../../platform/common/services/ioport/ioport.h **** 	arch_ioport_enable_pin(pin);
 159:../../../platform/common/services/ioport/ioport.h **** }
 148              	 .loc 1 159 0
 149 0056 00BF     	 nop
 150 0058 2437     	 adds r7,r7,#36
 151              	.LCFI5:
 152              	 .cfi_def_cfa_offset 4
 153 005a BD46     	 mov sp,r7
 154              	.LCFI6:
 155              	 .cfi_def_cfa_register 13
 156              	 
 157 005c 80BC     	 pop {r7}
 158              	.LCFI7:
 159              	 .cfi_restore 7
 160              	 .cfi_def_cfa_offset 0
 161 005e 7047     	 bx lr
 162              	 .cfi_endproc
 163              	.LFE203:
 165              	 .align 1
 166              	 .syntax unified
 167              	 .thumb
 168              	 .thumb_func
 169              	 .fpu softvfp
 171              	ioport_disable_pin:
 172              	.LFB205:
 160:../../../platform/common/services/ioport/ioport.h **** 
 161:../../../platform/common/services/ioport/ioport.h **** /**
 162:../../../platform/common/services/ioport/ioport.h ****  * \brief Enable multiple pins in a single IOPORT port.
 163:../../../platform/common/services/ioport/ioport.h ****  *
 164:../../../platform/common/services/ioport/ioport.h ****  * \param port IOPORT port to enable
 165:../../../platform/common/services/ioport/ioport.h ****  * \param mask Mask of pins within the port to enable
 166:../../../platform/common/services/ioport/ioport.h ****  */
 167:../../../platform/common/services/ioport/ioport.h **** static inline void ioport_enable_port(ioport_port_t port,
 168:../../../platform/common/services/ioport/ioport.h **** 		ioport_port_mask_t mask)
 169:../../../platform/common/services/ioport/ioport.h **** {
 170:../../../platform/common/services/ioport/ioport.h **** 	arch_ioport_enable_port(port, mask);
 171:../../../platform/common/services/ioport/ioport.h **** }
 172:../../../platform/common/services/ioport/ioport.h **** 
 173:../../../platform/common/services/ioport/ioport.h **** /**
 174:../../../platform/common/services/ioport/ioport.h ****  * \brief Disable IOPORT pin, based on a pin created with \ref
 175:../../../platform/common/services/ioport/ioport.h ****  *        IOPORT_CREATE_PIN().
 176:../../../platform/common/services/ioport/ioport.h ****  *
 177:../../../platform/common/services/ioport/ioport.h ****  * \param pin IOPORT pin to disable
 178:../../../platform/common/services/ioport/ioport.h ****  */
 179:../../../platform/common/services/ioport/ioport.h **** static inline void ioport_disable_pin(ioport_pin_t pin)
 180:../../../platform/common/services/ioport/ioport.h **** {
 173              	 .loc 1 180 0
 174              	 .cfi_startproc
 175              	 
 176              	 
 177              	 
 178 0060 80B4     	 push {r7}
 179              	.LCFI8:
 180              	 .cfi_def_cfa_offset 4
 181              	 .cfi_offset 7,-4
 182 0062 89B0     	 sub sp,sp,#36
 183              	.LCFI9:
 184              	 .cfi_def_cfa_offset 40
 185 0064 00AF     	 add r7,sp,#0
 186              	.LCFI10:
 187              	 .cfi_def_cfa_register 7
 188 0066 7860     	 str r0,[r7,#4]
 189 0068 7B68     	 ldr r3,[r7,#4]
 190 006a FB61     	 str r3,[r7,#28]
 191 006c FB69     	 ldr r3,[r7,#28]
 192 006e BB61     	 str r3,[r7,#24]
 193              	.LBB180:
 194              	.LBB181:
 195              	.LBB182:
 196              	.LBB183:
  98:../../../platform/common/services/ioport/sam/ioport_gpio.h **** }
 197              	 .loc 2 98 0
 198 0070 BB69     	 ldr r3,[r7,#24]
 199 0072 5A09     	 lsrs r2,r3,#5
 200 0074 FB69     	 ldr r3,[r7,#28]
 201 0076 7B61     	 str r3,[r7,#20]
 202              	.LBE183:
 203              	.LBE182:
 204              	.LBB184:
 205              	.LBB185:
 115:../../../platform/common/services/ioport/sam/ioport_gpio.h **** }
 206              	 .loc 2 115 0
 207 0078 7B69     	 ldr r3,[r7,#20]
 208 007a 03F01F03 	 and r3,r3,#31
 209 007e 0121     	 movs r1,#1
 210 0080 01FA03F3 	 lsl r3,r1,r3
 211 0084 3A61     	 str r2,[r7,#16]
 212 0086 FB60     	 str r3,[r7,#12]
 213 0088 3B69     	 ldr r3,[r7,#16]
 214 008a BB60     	 str r3,[r7,#8]
 215              	.LBE185:
 216              	.LBE184:
 217              	.LBB186:
 218              	.LBB187:
 219              	.LBB188:
 220              	.LBB189:
 105:../../../platform/common/services/ioport/sam/ioport_gpio.h **** }
 221              	 .loc 2 105 0
 222 008c BB68     	 ldr r3,[r7,#8]
 223 008e 03F50013 	 add r3,r3,#2097152
 224 0092 03F5E163 	 add r3,r3,#1800
 225 0096 5B02     	 lsls r3,r3,#9
 104:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 		+ port * sizeof(GpioPort));
 226              	 .loc 2 104 0
 227 0098 1A46     	 mov r2,r3
 228              	.LBE189:
 229              	.LBE188:
 127:../../../platform/common/services/ioport/sam/ioport_gpio.h **** }
 128:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 
 129:../../../platform/common/services/ioport/sam/ioport_gpio.h **** __always_inline static void arch_ioport_disable_port(ioport_port_t port,
 130:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 		ioport_port_mask_t mask)
 131:../../../platform/common/services/ioport/sam/ioport_gpio.h **** {
 132:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 	arch_ioport_port_to_base(port)->GPIO_GPERC = mask;
 230              	 .loc 2 132 0
 231 009a FB68     	 ldr r3,[r7,#12]
 232 009c 9360     	 str r3,[r2,#8]
 233              	.LBE187:
 234              	.LBE186:
 235              	.LBE181:
 236              	.LBE180:
 181:../../../platform/common/services/ioport/ioport.h **** 	arch_ioport_disable_pin(pin);
 182:../../../platform/common/services/ioport/ioport.h **** }
 237              	 .loc 1 182 0
 238 009e 00BF     	 nop
 239 00a0 2437     	 adds r7,r7,#36
 240              	.LCFI11:
 241              	 .cfi_def_cfa_offset 4
 242 00a2 BD46     	 mov sp,r7
 243              	.LCFI12:
 244              	 .cfi_def_cfa_register 13
 245              	 
 246 00a4 80BC     	 pop {r7}
 247              	.LCFI13:
 248              	 .cfi_restore 7
 249              	 .cfi_def_cfa_offset 0
 250 00a6 7047     	 bx lr
 251              	 .cfi_endproc
 252              	.LFE205:
 254              	 .align 1
 255              	 .syntax unified
 256              	 .thumb
 257              	 .thumb_func
 258              	 .fpu softvfp
 260              	ioport_set_pin_mode:
 261              	.LFB208:
 183:../../../platform/common/services/ioport/ioport.h **** 
 184:../../../platform/common/services/ioport/ioport.h **** /**
 185:../../../platform/common/services/ioport/ioport.h ****  * \brief Disable multiple pins in a single IOPORT port.
 186:../../../platform/common/services/ioport/ioport.h ****  *
 187:../../../platform/common/services/ioport/ioport.h ****  * \param port IOPORT port to disable
 188:../../../platform/common/services/ioport/ioport.h ****  * \param mask Pin mask of pins to disable
 189:../../../platform/common/services/ioport/ioport.h ****  */
 190:../../../platform/common/services/ioport/ioport.h **** static inline void ioport_disable_port(ioport_port_t port,
 191:../../../platform/common/services/ioport/ioport.h **** 		ioport_port_mask_t mask)
 192:../../../platform/common/services/ioport/ioport.h **** {
 193:../../../platform/common/services/ioport/ioport.h **** 	arch_ioport_disable_port(port, mask);
 194:../../../platform/common/services/ioport/ioport.h **** }
 195:../../../platform/common/services/ioport/ioport.h **** 
 196:../../../platform/common/services/ioport/ioport.h **** /**
 197:../../../platform/common/services/ioport/ioport.h ****  * \brief Set multiple pin modes in a single IOPORT port, such as pull-up,
 198:../../../platform/common/services/ioport/ioport.h ****  * pull-down, etc. configuration.
 199:../../../platform/common/services/ioport/ioport.h ****  *
 200:../../../platform/common/services/ioport/ioport.h ****  * \param port IOPORT port to configure
 201:../../../platform/common/services/ioport/ioport.h ****  * \param mask Pin mask of pins to configure
 202:../../../platform/common/services/ioport/ioport.h ****  * \param mode Mode masks to configure for the specified pins (\ref
 203:../../../platform/common/services/ioport/ioport.h ****  * ioport_modes)
 204:../../../platform/common/services/ioport/ioport.h ****  */
 205:../../../platform/common/services/ioport/ioport.h **** static inline void ioport_set_port_mode(ioport_port_t port,
 206:../../../platform/common/services/ioport/ioport.h **** 		ioport_port_mask_t mask, ioport_mode_t mode)
 207:../../../platform/common/services/ioport/ioport.h **** {
 208:../../../platform/common/services/ioport/ioport.h **** 	arch_ioport_set_port_mode(port, mask, mode);
 209:../../../platform/common/services/ioport/ioport.h **** }
 210:../../../platform/common/services/ioport/ioport.h **** 
 211:../../../platform/common/services/ioport/ioport.h **** /**
 212:../../../platform/common/services/ioport/ioport.h ****  * \brief Set pin mode for one single IOPORT pin.
 213:../../../platform/common/services/ioport/ioport.h ****  *
 214:../../../platform/common/services/ioport/ioport.h ****  * \param pin IOPORT pin to configure
 215:../../../platform/common/services/ioport/ioport.h ****  * \param mode Mode masks to configure for the specified pin (\ref ioport_modes)
 216:../../../platform/common/services/ioport/ioport.h ****  */
 217:../../../platform/common/services/ioport/ioport.h **** static inline void ioport_set_pin_mode(ioport_pin_t pin, ioport_mode_t mode)
 218:../../../platform/common/services/ioport/ioport.h **** {
 262              	 .loc 1 218 0
 263              	 .cfi_startproc
 264              	 
 265              	 
 266              	 
 267 00a8 80B4     	 push {r7}
 268              	.LCFI14:
 269              	 .cfi_def_cfa_offset 4
 270              	 .cfi_offset 7,-4
 271 00aa 8DB0     	 sub sp,sp,#52
 272              	.LCFI15:
 273              	 .cfi_def_cfa_offset 56
 274 00ac 00AF     	 add r7,sp,#0
 275              	.LCFI16:
 276              	 .cfi_def_cfa_register 7
 277 00ae 7860     	 str r0,[r7,#4]
 278 00b0 3960     	 str r1,[r7]
 279 00b2 7B68     	 ldr r3,[r7,#4]
 280 00b4 FB62     	 str r3,[r7,#44]
 281 00b6 3B68     	 ldr r3,[r7]
 282 00b8 BB62     	 str r3,[r7,#40]
 283 00ba FB6A     	 ldr r3,[r7,#44]
 284 00bc 7B62     	 str r3,[r7,#36]
 285              	.LBB190:
 286              	.LBB191:
 287              	.LBB192:
 288              	.LBB193:
  98:../../../platform/common/services/ioport/sam/ioport_gpio.h **** }
 289              	 .loc 2 98 0
 290 00be 7B6A     	 ldr r3,[r7,#36]
 291 00c0 5A09     	 lsrs r2,r3,#5
 292 00c2 FB6A     	 ldr r3,[r7,#44]
 293 00c4 3B62     	 str r3,[r7,#32]
 294              	.LBE193:
 295              	.LBE192:
 296              	.LBB194:
 297              	.LBB195:
 115:../../../platform/common/services/ioport/sam/ioport_gpio.h **** }
 298              	 .loc 2 115 0
 299 00c6 3B6A     	 ldr r3,[r7,#32]
 300 00c8 03F01F03 	 and r3,r3,#31
 301 00cc 0121     	 movs r1,#1
 302 00ce 01FA03F3 	 lsl r3,r1,r3
 303 00d2 FA61     	 str r2,[r7,#28]
 304 00d4 BB61     	 str r3,[r7,#24]
 305 00d6 BB6A     	 ldr r3,[r7,#40]
 306 00d8 7B61     	 str r3,[r7,#20]
 307 00da FB69     	 ldr r3,[r7,#28]
 308 00dc 3B61     	 str r3,[r7,#16]
 309              	.LBE195:
 310              	.LBE194:
 311              	.LBB196:
 312              	.LBB197:
 313              	.LBB198:
 314              	.LBB199:
 105:../../../platform/common/services/ioport/sam/ioport_gpio.h **** }
 315              	 .loc 2 105 0
 316 00de 3B69     	 ldr r3,[r7,#16]
 317 00e0 03F50013 	 add r3,r3,#2097152
 318 00e4 03F5E163 	 add r3,r3,#1800
 319 00e8 5B02     	 lsls r3,r3,#9
 320              	.LBE199:
 321              	.LBE198:
 133:../../../platform/common/services/ioport/sam/ioport_gpio.h **** }
 134:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 
 135:../../../platform/common/services/ioport/sam/ioport_gpio.h **** __always_inline static void arch_ioport_enable_pin(ioport_pin_t pin)
 136:../../../platform/common/services/ioport/sam/ioport_gpio.h **** {
 137:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 	arch_ioport_enable_port(arch_ioport_pin_to_port_id(pin),
 138:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 			arch_ioport_pin_to_mask(pin));
 139:../../../platform/common/services/ioport/sam/ioport_gpio.h **** }
 140:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 
 141:../../../platform/common/services/ioport/sam/ioport_gpio.h **** __always_inline static void arch_ioport_disable_pin(ioport_pin_t pin)
 142:../../../platform/common/services/ioport/sam/ioport_gpio.h **** {
 143:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 	arch_ioport_disable_port(arch_ioport_pin_to_port_id(pin),
 144:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 			arch_ioport_pin_to_mask(pin));
 145:../../../platform/common/services/ioport/sam/ioport_gpio.h **** }
 146:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 
 147:../../../platform/common/services/ioport/sam/ioport_gpio.h **** __always_inline static void arch_ioport_set_port_mode(ioport_port_t port,
 148:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 		ioport_port_mask_t mask, ioport_mode_t mode)
 149:../../../platform/common/services/ioport/sam/ioport_gpio.h **** {
 150:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 	volatile GpioPort *base = arch_ioport_port_to_base(port);
 322              	 .loc 2 150 0
 323 00ea FB60     	 str r3,[r7,#12]
 151:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 
 152:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 	if (mode & IOPORT_MODE_PULLUP) {
 324              	 .loc 2 152 0
 325 00ec 7B69     	 ldr r3,[r7,#20]
 326 00ee 03F00803 	 and r3,r3,#8
 327 00f2 002B     	 cmp r3,#0
 328 00f4 03D0     	 beq .L16
 153:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 		base->GPIO_PUERS = mask;
 329              	 .loc 2 153 0
 330 00f6 FB68     	 ldr r3,[r7,#12]
 331 00f8 BA69     	 ldr r2,[r7,#24]
 332 00fa 5A67     	 str r2,[r3,#116]
 333 00fc 02E0     	 b .L17
 334              	.L16:
 154:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 	} else {
 155:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 		base->GPIO_PUERC = mask;
 335              	 .loc 2 155 0
 336 00fe FB68     	 ldr r3,[r7,#12]
 337 0100 BA69     	 ldr r2,[r7,#24]
 338 0102 9A67     	 str r2,[r3,#120]
 339              	.L17:
 156:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 	}
 157:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 
 158:../../../platform/common/services/ioport/sam/ioport_gpio.h **** #ifdef IOPORT_MODE_PULLDOWN
 159:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 	if (mode & IOPORT_MODE_PULLDOWN) {
 340              	 .loc 2 159 0
 341 0104 7B69     	 ldr r3,[r7,#20]
 342 0106 03F01003 	 and r3,r3,#16
 343 010a 002B     	 cmp r3,#0
 344 010c 04D0     	 beq .L18
 160:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 		base->GPIO_PDERS = mask;
 345              	 .loc 2 160 0
 346 010e FB68     	 ldr r3,[r7,#12]
 347 0110 BA69     	 ldr r2,[r7,#24]
 348 0112 C3F88420 	 str r2,[r3,#132]
 349 0116 03E0     	 b .L19
 350              	.L18:
 161:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 	} else {
 162:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 		base->GPIO_PDERC = mask;
 351              	 .loc 2 162 0
 352 0118 FB68     	 ldr r3,[r7,#12]
 353 011a BA69     	 ldr r2,[r7,#24]
 354 011c C3F88820 	 str r2,[r3,#136]
 355              	.L19:
 163:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 	}
 164:../../../platform/common/services/ioport/sam/ioport_gpio.h **** #endif
 165:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 
 166:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 	if (mode & IOPORT_MODE_GLITCH_FILTER) {
 356              	 .loc 2 166 0
 357 0120 7B69     	 ldr r3,[r7,#20]
 358 0122 03F04003 	 and r3,r3,#64
 359 0126 002B     	 cmp r3,#0
 360 0128 04D0     	 beq .L20
 167:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 		base->GPIO_GFERS = mask;
 361              	 .loc 2 167 0
 362 012a FB68     	 ldr r3,[r7,#12]
 363 012c BA69     	 ldr r2,[r7,#24]
 364 012e C3F8C420 	 str r2,[r3,#196]
 365 0132 03E0     	 b .L21
 366              	.L20:
 168:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 	} else {
 169:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 		base->GPIO_GFERC = mask;
 367              	 .loc 2 169 0
 368 0134 FB68     	 ldr r3,[r7,#12]
 369 0136 BA69     	 ldr r2,[r7,#24]
 370 0138 C3F8C820 	 str r2,[r3,#200]
 371              	.L21:
 170:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 	}
 171:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 
 172:../../../platform/common/services/ioport/sam/ioport_gpio.h **** #ifdef IOPORT_MODE_DRIVE_STRENGTH
 173:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 	if (mode & IOPORT_MODE_DRIVE_STRENGTH) {
 372              	 .loc 2 173 0
 373 013c 7B69     	 ldr r3,[r7,#20]
 374 013e 03F08003 	 and r3,r3,#128
 375 0142 002B     	 cmp r3,#0
 376 0144 04D0     	 beq .L22
 174:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 		base->GPIO_ODCR0S = mask;
 377              	 .loc 2 174 0
 378 0146 FB68     	 ldr r3,[r7,#12]
 379 0148 BA69     	 ldr r2,[r7,#24]
 380 014a C3F80421 	 str r2,[r3,#260]
 381 014e 03E0     	 b .L23
 382              	.L22:
 175:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 	} else {
 176:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 		base->GPIO_ODCR0C = mask;
 383              	 .loc 2 176 0
 384 0150 FB68     	 ldr r3,[r7,#12]
 385 0152 BA69     	 ldr r2,[r7,#24]
 386 0154 C3F80821 	 str r2,[r3,#264]
 387              	.L23:
 177:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 	}
 178:../../../platform/common/services/ioport/sam/ioport_gpio.h **** #endif
 179:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 
 180:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 	if (mode & IOPORT_MODE_MUX_BIT0) {
 388              	 .loc 2 180 0
 389 0158 7B69     	 ldr r3,[r7,#20]
 390 015a 03F00103 	 and r3,r3,#1
 391 015e 002B     	 cmp r3,#0
 392 0160 03D0     	 beq .L24
 181:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 		base->GPIO_PMR0S = mask;
 393              	 .loc 2 181 0
 394 0162 FB68     	 ldr r3,[r7,#12]
 395 0164 BA69     	 ldr r2,[r7,#24]
 396 0166 5A61     	 str r2,[r3,#20]
 397 0168 02E0     	 b .L25
 398              	.L24:
 182:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 	} else {
 183:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 		base->GPIO_PMR0C = mask;
 399              	 .loc 2 183 0
 400 016a FB68     	 ldr r3,[r7,#12]
 401 016c BA69     	 ldr r2,[r7,#24]
 402 016e 9A61     	 str r2,[r3,#24]
 403              	.L25:
 184:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 	}
 185:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 
 186:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 	if (mode & IOPORT_MODE_MUX_BIT1) {
 404              	 .loc 2 186 0
 405 0170 7B69     	 ldr r3,[r7,#20]
 406 0172 03F00203 	 and r3,r3,#2
 407 0176 002B     	 cmp r3,#0
 408 0178 03D0     	 beq .L26
 187:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 		base->GPIO_PMR1S = mask;
 409              	 .loc 2 187 0
 410 017a FB68     	 ldr r3,[r7,#12]
 411 017c BA69     	 ldr r2,[r7,#24]
 412 017e 5A62     	 str r2,[r3,#36]
 413 0180 02E0     	 b .L27
 414              	.L26:
 188:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 	} else {
 189:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 		base->GPIO_PMR1C = mask;
 415              	 .loc 2 189 0
 416 0182 FB68     	 ldr r3,[r7,#12]
 417 0184 BA69     	 ldr r2,[r7,#24]
 418 0186 9A62     	 str r2,[r3,#40]
 419              	.L27:
 190:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 	}
 191:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 
 192:../../../platform/common/services/ioport/sam/ioport_gpio.h **** #ifdef IOPORT_MODE_MUX_BIT2
 193:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 	if (mode & IOPORT_MODE_MUX_BIT2) {
 420              	 .loc 2 193 0
 421 0188 7B69     	 ldr r3,[r7,#20]
 422 018a 03F00403 	 and r3,r3,#4
 423 018e 002B     	 cmp r3,#0
 424 0190 03D0     	 beq .L28
 194:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 		base->GPIO_PMR2S = mask;
 425              	 .loc 2 194 0
 426 0192 FB68     	 ldr r3,[r7,#12]
 427 0194 BA69     	 ldr r2,[r7,#24]
 428 0196 5A63     	 str r2,[r3,#52]
 429              	.LBE197:
 430              	.LBE196:
 431              	.LBE191:
 432              	.LBE190:
 219:../../../platform/common/services/ioport/ioport.h **** 	arch_ioport_set_pin_mode(pin, mode);
 220:../../../platform/common/services/ioport/ioport.h **** }
 433              	 .loc 1 220 0
 434 0198 02E0     	 b .L30
 435              	.L28:
 436              	.LBB203:
 437              	.LBB202:
 438              	.LBB201:
 439              	.LBB200:
 195:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 	} else {
 196:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 		base->GPIO_PMR2C = mask;
 440              	 .loc 2 196 0
 441 019a FB68     	 ldr r3,[r7,#12]
 442 019c BA69     	 ldr r2,[r7,#24]
 443 019e 9A63     	 str r2,[r3,#56]
 444              	.L30:
 445              	.LBE200:
 446              	.LBE201:
 447              	.LBE202:
 448              	.LBE203:
 449              	 .loc 1 220 0
 450 01a0 00BF     	 nop
 451 01a2 3437     	 adds r7,r7,#52
 452              	.LCFI17:
 453              	 .cfi_def_cfa_offset 4
 454 01a4 BD46     	 mov sp,r7
 455              	.LCFI18:
 456              	 .cfi_def_cfa_register 13
 457              	 
 458 01a6 80BC     	 pop {r7}
 459              	.LCFI19:
 460              	 .cfi_restore 7
 461              	 .cfi_def_cfa_offset 0
 462 01a8 7047     	 bx lr
 463              	 .cfi_endproc
 464              	.LFE208:
 466              	 .align 1
 467              	 .syntax unified
 468              	 .thumb
 469              	 .thumb_func
 470              	 .fpu softvfp
 472              	ioport_set_pin_dir:
 473              	.LFB212:
 221:../../../platform/common/services/ioport/ioport.h **** 
 222:../../../platform/common/services/ioport/ioport.h **** /**
 223:../../../platform/common/services/ioport/ioport.h ****  * \brief Reset multiple pin modes in a specified IOPORT port to defaults.
 224:../../../platform/common/services/ioport/ioport.h ****  *
 225:../../../platform/common/services/ioport/ioport.h ****  * \param port IOPORT port to configure
 226:../../../platform/common/services/ioport/ioport.h ****  * \param mask Mask of pins whose mode configuration is to be reset
 227:../../../platform/common/services/ioport/ioport.h ****  */
 228:../../../platform/common/services/ioport/ioport.h **** static inline void ioport_reset_port_mode(ioport_port_t port,
 229:../../../platform/common/services/ioport/ioport.h **** 		ioport_port_mask_t mask)
 230:../../../platform/common/services/ioport/ioport.h **** {
 231:../../../platform/common/services/ioport/ioport.h **** 	arch_ioport_set_port_mode(port, mask, 0);
 232:../../../platform/common/services/ioport/ioport.h **** }
 233:../../../platform/common/services/ioport/ioport.h **** 
 234:../../../platform/common/services/ioport/ioport.h **** /**
 235:../../../platform/common/services/ioport/ioport.h ****  * \brief Reset pin mode configuration for a single IOPORT pin
 236:../../../platform/common/services/ioport/ioport.h ****  *
 237:../../../platform/common/services/ioport/ioport.h ****  * \param pin IOPORT pin to configure
 238:../../../platform/common/services/ioport/ioport.h ****  */
 239:../../../platform/common/services/ioport/ioport.h **** static inline void ioport_reset_pin_mode(ioport_pin_t pin)
 240:../../../platform/common/services/ioport/ioport.h **** {
 241:../../../platform/common/services/ioport/ioport.h **** 	arch_ioport_set_pin_mode(pin, 0);
 242:../../../platform/common/services/ioport/ioport.h **** }
 243:../../../platform/common/services/ioport/ioport.h **** 
 244:../../../platform/common/services/ioport/ioport.h **** /**
 245:../../../platform/common/services/ioport/ioport.h ****  * \brief Set I/O direction for a group of pins in a single IOPORT.
 246:../../../platform/common/services/ioport/ioport.h ****  *
 247:../../../platform/common/services/ioport/ioport.h ****  * \param port IOPORT port to configure
 248:../../../platform/common/services/ioport/ioport.h ****  * \param mask Pin mask of pins to configure
 249:../../../platform/common/services/ioport/ioport.h ****  * \param dir Direction to set for the specified pins (\ref ioport_direction)
 250:../../../platform/common/services/ioport/ioport.h ****  */
 251:../../../platform/common/services/ioport/ioport.h **** static inline void ioport_set_port_dir(ioport_port_t port,
 252:../../../platform/common/services/ioport/ioport.h **** 		ioport_port_mask_t mask, enum ioport_direction dir)
 253:../../../platform/common/services/ioport/ioport.h **** {
 254:../../../platform/common/services/ioport/ioport.h **** 	arch_ioport_set_port_dir(port, mask, dir);
 255:../../../platform/common/services/ioport/ioport.h **** }
 256:../../../platform/common/services/ioport/ioport.h **** 
 257:../../../platform/common/services/ioport/ioport.h **** /**
 258:../../../platform/common/services/ioport/ioport.h ****  * \brief Set direction for a single IOPORT pin.
 259:../../../platform/common/services/ioport/ioport.h ****  *
 260:../../../platform/common/services/ioport/ioport.h ****  * \param pin IOPORT pin to configure
 261:../../../platform/common/services/ioport/ioport.h ****  * \param dir Direction to set for the specified pin (\ref ioport_direction)
 262:../../../platform/common/services/ioport/ioport.h ****  */
 263:../../../platform/common/services/ioport/ioport.h **** static inline void ioport_set_pin_dir(ioport_pin_t pin,
 264:../../../platform/common/services/ioport/ioport.h **** 		enum ioport_direction dir)
 265:../../../platform/common/services/ioport/ioport.h **** {
 474              	 .loc 1 265 0
 475              	 .cfi_startproc
 476              	 
 477              	 
 478              	 
 479 01aa 80B4     	 push {r7}
 480              	.LCFI20:
 481              	 .cfi_def_cfa_offset 4
 482              	 .cfi_offset 7,-4
 483 01ac 95B0     	 sub sp,sp,#84
 484              	.LCFI21:
 485              	 .cfi_def_cfa_offset 88
 486 01ae 00AF     	 add r7,sp,#0
 487              	.LCFI22:
 488              	 .cfi_def_cfa_register 7
 489 01b0 7860     	 str r0,[r7,#4]
 490 01b2 0B46     	 mov r3,r1
 491 01b4 FB70     	 strb r3,[r7,#3]
 492 01b6 7B68     	 ldr r3,[r7,#4]
 493 01b8 FB64     	 str r3,[r7,#76]
 494 01ba FB78     	 ldrb r3,[r7,#3]
 495 01bc 87F84B30 	 strb r3,[r7,#75]
 496              	.LBB204:
 497              	.LBB205:
 197:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 	}
 198:../../../platform/common/services/ioport/sam/ioport_gpio.h **** #endif
 199:../../../platform/common/services/ioport/sam/ioport_gpio.h **** }
 200:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 
 201:../../../platform/common/services/ioport/sam/ioport_gpio.h **** __always_inline static void arch_ioport_set_pin_mode(ioport_pin_t pin,
 202:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 		ioport_mode_t mode)
 203:../../../platform/common/services/ioport/sam/ioport_gpio.h **** {
 204:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 	arch_ioport_set_port_mode(arch_ioport_pin_to_port_id(pin),
 205:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 			arch_ioport_pin_to_mask(pin), mode);
 206:../../../platform/common/services/ioport/sam/ioport_gpio.h **** }
 207:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 
 208:../../../platform/common/services/ioport/sam/ioport_gpio.h **** __always_inline static void arch_ioport_set_port_dir(ioport_port_t port,
 209:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 		ioport_port_mask_t mask, unsigned char group_direction)
 210:../../../platform/common/services/ioport/sam/ioport_gpio.h **** {
 211:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 	if (group_direction == IOPORT_DIR_OUTPUT) {
 212:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 		arch_ioport_port_to_base(port)->GPIO_ODERS = mask;
 213:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 		// Always disable the Schmitt trigger for output pins.
 214:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 		arch_ioport_port_to_base(port)->GPIO_STERC = mask;
 215:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 	} else if (group_direction == IOPORT_DIR_INPUT) {
 216:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 		arch_ioport_port_to_base(port)->GPIO_ODERC = mask;
 217:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 		// Always enable the Schmitt trigger for input pins.
 218:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 		arch_ioport_port_to_base(port)->GPIO_STERS = mask;
 219:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 	}
 220:../../../platform/common/services/ioport/sam/ioport_gpio.h **** }
 221:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 
 222:../../../platform/common/services/ioport/sam/ioport_gpio.h **** __always_inline static void arch_ioport_set_pin_dir(ioport_pin_t pin,
 223:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 		enum ioport_direction dir)
 224:../../../platform/common/services/ioport/sam/ioport_gpio.h **** {
 225:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 	if (dir == IOPORT_DIR_OUTPUT) {
 498              	 .loc 2 225 0
 499 01c0 97F84B30 	 ldrb r3,[r7,#75]
 500 01c4 012B     	 cmp r3,#1
 501 01c6 2FD1     	 bne .L32
 502 01c8 FB6C     	 ldr r3,[r7,#76]
 503 01ca 7B64     	 str r3,[r7,#68]
 504 01cc 7B6C     	 ldr r3,[r7,#68]
 505 01ce 3B64     	 str r3,[r7,#64]
 506              	.LBB206:
 507              	.LBB207:
 508              	.LBB208:
 509              	.LBB209:
  98:../../../platform/common/services/ioport/sam/ioport_gpio.h **** }
 510              	 .loc 2 98 0
 511 01d0 3B6C     	 ldr r3,[r7,#64]
 512 01d2 5B09     	 lsrs r3,r3,#5
 513 01d4 FB63     	 str r3,[r7,#60]
 514              	.LBE209:
 515              	.LBE208:
 516              	.LBB210:
 517              	.LBB211:
 105:../../../platform/common/services/ioport/sam/ioport_gpio.h **** }
 518              	 .loc 2 105 0
 519 01d6 FB6B     	 ldr r3,[r7,#60]
 520 01d8 03F50013 	 add r3,r3,#2097152
 521 01dc 03F5E163 	 add r3,r3,#1800
 522 01e0 5B02     	 lsls r3,r3,#9
 104:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 		+ port * sizeof(GpioPort));
 523              	 .loc 2 104 0
 524 01e2 1946     	 mov r1,r3
 525 01e4 FB6C     	 ldr r3,[r7,#76]
 526 01e6 BB63     	 str r3,[r7,#56]
 527              	.LBE211:
 528              	.LBE210:
 529              	.LBE207:
 530              	.LBE206:
 531              	.LBB212:
 532              	.LBB213:
 115:../../../platform/common/services/ioport/sam/ioport_gpio.h **** }
 533              	 .loc 2 115 0
 534 01e8 BB6B     	 ldr r3,[r7,#56]
 535 01ea 03F01F03 	 and r3,r3,#31
 536 01ee 0122     	 movs r2,#1
 537 01f0 02FA03F3 	 lsl r3,r2,r3
 538              	.LBE213:
 539              	.LBE212:
 226:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 		arch_ioport_pin_to_base(pin)->GPIO_ODERS = arch_ioport_pin_to_mask(pin);
 540              	 .loc 2 226 0
 541 01f4 4B64     	 str r3,[r1,#68]
 542 01f6 FB6C     	 ldr r3,[r7,#76]
 543 01f8 7B63     	 str r3,[r7,#52]
 544 01fa 7B6B     	 ldr r3,[r7,#52]
 545 01fc 3B63     	 str r3,[r7,#48]
 546              	.LBB214:
 547              	.LBB215:
 548              	.LBB216:
 549              	.LBB217:
  98:../../../platform/common/services/ioport/sam/ioport_gpio.h **** }
 550              	 .loc 2 98 0
 551 01fe 3B6B     	 ldr r3,[r7,#48]
 552 0200 5B09     	 lsrs r3,r3,#5
 553 0202 FB62     	 str r3,[r7,#44]
 554              	.LBE217:
 555              	.LBE216:
 556              	.LBB218:
 557              	.LBB219:
 105:../../../platform/common/services/ioport/sam/ioport_gpio.h **** }
 558              	 .loc 2 105 0
 559 0204 FB6A     	 ldr r3,[r7,#44]
 560 0206 03F50013 	 add r3,r3,#2097152
 561 020a 03F5E163 	 add r3,r3,#1800
 562 020e 5B02     	 lsls r3,r3,#9
 104:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 		+ port * sizeof(GpioPort));
 563              	 .loc 2 104 0
 564 0210 1946     	 mov r1,r3
 565 0212 FB6C     	 ldr r3,[r7,#76]
 566 0214 BB62     	 str r3,[r7,#40]
 567              	.LBE219:
 568              	.LBE218:
 569              	.LBE215:
 570              	.LBE214:
 571              	.LBB220:
 572              	.LBB221:
 115:../../../platform/common/services/ioport/sam/ioport_gpio.h **** }
 573              	 .loc 2 115 0
 574 0216 BB6A     	 ldr r3,[r7,#40]
 575 0218 03F01F03 	 and r3,r3,#31
 576 021c 0122     	 movs r2,#1
 577 021e 02FA03F3 	 lsl r3,r2,r3
 578              	.LBE221:
 579              	.LBE220:
 227:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 		// Always disable the Schmitt trigger for output pins.
 228:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 		arch_ioport_pin_to_base(pin)->GPIO_STERC = arch_ioport_pin_to_mask(pin);
 580              	 .loc 2 228 0
 581 0222 C1F86831 	 str r3,[r1,#360]
 582              	.LBE205:
 583              	.LBE204:
 266:../../../platform/common/services/ioport/ioport.h **** 	arch_ioport_set_pin_dir(pin, dir);
 267:../../../platform/common/services/ioport/ioport.h **** }
 584              	 .loc 1 267 0
 585 0226 32E0     	 b .L50
 586              	.L32:
 587              	.LBB239:
 588              	.LBB238:
 229:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 	} else if (dir == IOPORT_DIR_INPUT) {
 589              	 .loc 2 229 0
 590 0228 97F84B30 	 ldrb r3,[r7,#75]
 591 022c 002B     	 cmp r3,#0
 592 022e 2ED1     	 bne .L50
 593 0230 FB6C     	 ldr r3,[r7,#76]
 594 0232 7B62     	 str r3,[r7,#36]
 595 0234 7B6A     	 ldr r3,[r7,#36]
 596 0236 3B62     	 str r3,[r7,#32]
 597              	.LBB222:
 598              	.LBB223:
 599              	.LBB224:
 600              	.LBB225:
  98:../../../platform/common/services/ioport/sam/ioport_gpio.h **** }
 601              	 .loc 2 98 0
 602 0238 3B6A     	 ldr r3,[r7,#32]
 603 023a 5B09     	 lsrs r3,r3,#5
 604 023c FB61     	 str r3,[r7,#28]
 605              	.LBE225:
 606              	.LBE224:
 607              	.LBB226:
 608              	.LBB227:
 105:../../../platform/common/services/ioport/sam/ioport_gpio.h **** }
 609              	 .loc 2 105 0
 610 023e FB69     	 ldr r3,[r7,#28]
 611 0240 03F50013 	 add r3,r3,#2097152
 612 0244 03F5E163 	 add r3,r3,#1800
 613 0248 5B02     	 lsls r3,r3,#9
 104:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 		+ port * sizeof(GpioPort));
 614              	 .loc 2 104 0
 615 024a 1946     	 mov r1,r3
 616 024c FB6C     	 ldr r3,[r7,#76]
 617 024e BB61     	 str r3,[r7,#24]
 618              	.LBE227:
 619              	.LBE226:
 620              	.LBE223:
 621              	.LBE222:
 622              	.LBB228:
 623              	.LBB229:
 115:../../../platform/common/services/ioport/sam/ioport_gpio.h **** }
 624              	 .loc 2 115 0
 625 0250 BB69     	 ldr r3,[r7,#24]
 626 0252 03F01F03 	 and r3,r3,#31
 627 0256 0122     	 movs r2,#1
 628 0258 02FA03F3 	 lsl r3,r2,r3
 629              	.LBE229:
 630              	.LBE228:
 230:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 		arch_ioport_pin_to_base(pin)->GPIO_ODERC = arch_ioport_pin_to_mask(pin);
 631              	 .loc 2 230 0
 632 025c 8B64     	 str r3,[r1,#72]
 633 025e FB6C     	 ldr r3,[r7,#76]
 634 0260 7B61     	 str r3,[r7,#20]
 635 0262 7B69     	 ldr r3,[r7,#20]
 636 0264 3B61     	 str r3,[r7,#16]
 637              	.LBB230:
 638              	.LBB231:
 639              	.LBB232:
 640              	.LBB233:
  98:../../../platform/common/services/ioport/sam/ioport_gpio.h **** }
 641              	 .loc 2 98 0
 642 0266 3B69     	 ldr r3,[r7,#16]
 643 0268 5B09     	 lsrs r3,r3,#5
 644 026a FB60     	 str r3,[r7,#12]
 645              	.LBE233:
 646              	.LBE232:
 647              	.LBB234:
 648              	.LBB235:
 105:../../../platform/common/services/ioport/sam/ioport_gpio.h **** }
 649              	 .loc 2 105 0
 650 026c FB68     	 ldr r3,[r7,#12]
 651 026e 03F50013 	 add r3,r3,#2097152
 652 0272 03F5E163 	 add r3,r3,#1800
 653 0276 5B02     	 lsls r3,r3,#9
 104:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 		+ port * sizeof(GpioPort));
 654              	 .loc 2 104 0
 655 0278 1946     	 mov r1,r3
 656 027a FB6C     	 ldr r3,[r7,#76]
 657 027c BB60     	 str r3,[r7,#8]
 658              	.LBE235:
 659              	.LBE234:
 660              	.LBE231:
 661              	.LBE230:
 662              	.LBB236:
 663              	.LBB237:
 115:../../../platform/common/services/ioport/sam/ioport_gpio.h **** }
 664              	 .loc 2 115 0
 665 027e BB68     	 ldr r3,[r7,#8]
 666 0280 03F01F03 	 and r3,r3,#31
 667 0284 0122     	 movs r2,#1
 668 0286 02FA03F3 	 lsl r3,r2,r3
 669              	.LBE237:
 670              	.LBE236:
 231:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 		// Always enable the Schmitt trigger for input pins.
 232:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 		arch_ioport_pin_to_base(pin)->GPIO_STERS = arch_ioport_pin_to_mask(pin);
 671              	 .loc 2 232 0
 672 028a C1F86431 	 str r3,[r1,#356]
 673              	.L50:
 674              	.LBE238:
 675              	.LBE239:
 676              	 .loc 1 267 0
 677 028e 00BF     	 nop
 678 0290 5437     	 adds r7,r7,#84
 679              	.LCFI23:
 680              	 .cfi_def_cfa_offset 4
 681 0292 BD46     	 mov sp,r7
 682              	.LCFI24:
 683              	 .cfi_def_cfa_register 13
 684              	 
 685 0294 80BC     	 pop {r7}
 686              	.LCFI25:
 687              	 .cfi_restore 7
 688              	 .cfi_def_cfa_offset 0
 689 0296 7047     	 bx lr
 690              	 .cfi_endproc
 691              	.LFE212:
 693              	 .align 1
 694              	 .syntax unified
 695              	 .thumb
 696              	 .thumb_func
 697              	 .fpu softvfp
 699              	ioport_set_pin_level:
 700              	.LFB213:
 268:../../../platform/common/services/ioport/ioport.h **** 
 269:../../../platform/common/services/ioport/ioport.h **** /**
 270:../../../platform/common/services/ioport/ioport.h ****  * \brief Set an IOPORT pin to a specified logical value.
 271:../../../platform/common/services/ioport/ioport.h ****  *
 272:../../../platform/common/services/ioport/ioport.h ****  * \param pin IOPORT pin to configure
 273:../../../platform/common/services/ioport/ioport.h ****  * \param level Logical value of the pin
 274:../../../platform/common/services/ioport/ioport.h ****  */
 275:../../../platform/common/services/ioport/ioport.h **** static inline void ioport_set_pin_level(ioport_pin_t pin, bool level)
 276:../../../platform/common/services/ioport/ioport.h **** {
 701              	 .loc 1 276 0
 702              	 .cfi_startproc
 703              	 
 704              	 
 705              	 
 706 0298 80B4     	 push {r7}
 707              	.LCFI26:
 708              	 .cfi_def_cfa_offset 4
 709              	 .cfi_offset 7,-4
 710 029a 8DB0     	 sub sp,sp,#52
 711              	.LCFI27:
 712              	 .cfi_def_cfa_offset 56
 713 029c 00AF     	 add r7,sp,#0
 714              	.LCFI28:
 715              	 .cfi_def_cfa_register 7
 716 029e 7860     	 str r0,[r7,#4]
 717 02a0 0B46     	 mov r3,r1
 718 02a2 FB70     	 strb r3,[r7,#3]
 719 02a4 7B68     	 ldr r3,[r7,#4]
 720 02a6 FB62     	 str r3,[r7,#44]
 721 02a8 FB78     	 ldrb r3,[r7,#3]
 722 02aa 87F82B30 	 strb r3,[r7,#43]
 723              	.LBB240:
 724              	.LBB241:
 233:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 	}
 234:../../../platform/common/services/ioport/sam/ioport_gpio.h **** }
 235:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 
 236:../../../platform/common/services/ioport/sam/ioport_gpio.h **** __always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
 237:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 		bool level)
 238:../../../platform/common/services/ioport/sam/ioport_gpio.h **** {
 239:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 	if (level) {
 725              	 .loc 2 239 0
 726 02ae 97F82B30 	 ldrb r3,[r7,#43]
 727 02b2 002B     	 cmp r3,#0
 728 02b4 17D0     	 beq .L52
 729 02b6 FB6A     	 ldr r3,[r7,#44]
 730 02b8 7B62     	 str r3,[r7,#36]
 731 02ba 7B6A     	 ldr r3,[r7,#36]
 732 02bc 3B62     	 str r3,[r7,#32]
 733              	.LBB242:
 734              	.LBB243:
 735              	.LBB244:
 736              	.LBB245:
  98:../../../platform/common/services/ioport/sam/ioport_gpio.h **** }
 737              	 .loc 2 98 0
 738 02be 3B6A     	 ldr r3,[r7,#32]
 739 02c0 5B09     	 lsrs r3,r3,#5
 740 02c2 FB61     	 str r3,[r7,#28]
 741              	.LBE245:
 742              	.LBE244:
 743              	.LBB246:
 744              	.LBB247:
 105:../../../platform/common/services/ioport/sam/ioport_gpio.h **** }
 745              	 .loc 2 105 0
 746 02c4 FB69     	 ldr r3,[r7,#28]
 747 02c6 03F50013 	 add r3,r3,#2097152
 748 02ca 03F5E163 	 add r3,r3,#1800
 749 02ce 5B02     	 lsls r3,r3,#9
 104:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 		+ port * sizeof(GpioPort));
 750              	 .loc 2 104 0
 751 02d0 1946     	 mov r1,r3
 752 02d2 FB6A     	 ldr r3,[r7,#44]
 753 02d4 BB61     	 str r3,[r7,#24]
 754              	.LBE247:
 755              	.LBE246:
 756              	.LBE243:
 757              	.LBE242:
 758              	.LBB248:
 759              	.LBB249:
 115:../../../platform/common/services/ioport/sam/ioport_gpio.h **** }
 760              	 .loc 2 115 0
 761 02d6 BB69     	 ldr r3,[r7,#24]
 762 02d8 03F01F03 	 and r3,r3,#31
 763 02dc 0122     	 movs r2,#1
 764 02de 02FA03F3 	 lsl r3,r2,r3
 765              	.LBE249:
 766              	.LBE248:
 240:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 		arch_ioport_pin_to_base(pin)->GPIO_OVRS = arch_ioport_pin_to_mask(pin);
 767              	 .loc 2 240 0
 768 02e2 4B65     	 str r3,[r1,#84]
 769              	.LBE241:
 770              	.LBE240:
 277:../../../platform/common/services/ioport/ioport.h **** 	arch_ioport_set_pin_level(pin, level);
 278:../../../platform/common/services/ioport/ioport.h **** }
 771              	 .loc 1 278 0
 772 02e4 16E0     	 b .L62
 773              	.L52:
 774 02e6 FB6A     	 ldr r3,[r7,#44]
 775 02e8 7B61     	 str r3,[r7,#20]
 776 02ea 7B69     	 ldr r3,[r7,#20]
 777 02ec 3B61     	 str r3,[r7,#16]
 778              	.LBB259:
 779              	.LBB258:
 780              	.LBB250:
 781              	.LBB251:
 782              	.LBB252:
 783              	.LBB253:
  98:../../../platform/common/services/ioport/sam/ioport_gpio.h **** }
 784              	 .loc 2 98 0
 785 02ee 3B69     	 ldr r3,[r7,#16]
 786 02f0 5B09     	 lsrs r3,r3,#5
 787 02f2 FB60     	 str r3,[r7,#12]
 788              	.LBE253:
 789              	.LBE252:
 790              	.LBB254:
 791              	.LBB255:
 105:../../../platform/common/services/ioport/sam/ioport_gpio.h **** }
 792              	 .loc 2 105 0
 793 02f4 FB68     	 ldr r3,[r7,#12]
 794 02f6 03F50013 	 add r3,r3,#2097152
 795 02fa 03F5E163 	 add r3,r3,#1800
 796 02fe 5B02     	 lsls r3,r3,#9
 104:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 		+ port * sizeof(GpioPort));
 797              	 .loc 2 104 0
 798 0300 1946     	 mov r1,r3
 799 0302 FB6A     	 ldr r3,[r7,#44]
 800 0304 BB60     	 str r3,[r7,#8]
 801              	.LBE255:
 802              	.LBE254:
 803              	.LBE251:
 804              	.LBE250:
 805              	.LBB256:
 806              	.LBB257:
 115:../../../platform/common/services/ioport/sam/ioport_gpio.h **** }
 807              	 .loc 2 115 0
 808 0306 BB68     	 ldr r3,[r7,#8]
 809 0308 03F01F03 	 and r3,r3,#31
 810 030c 0122     	 movs r2,#1
 811 030e 02FA03F3 	 lsl r3,r2,r3
 812              	.LBE257:
 813              	.LBE256:
 241:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 	} else {
 242:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 		arch_ioport_pin_to_base(pin)->GPIO_OVRC = arch_ioport_pin_to_mask(pin);
 814              	 .loc 2 242 0
 815 0312 8B65     	 str r3,[r1,#88]
 816              	.L62:
 817              	.LBE258:
 818              	.LBE259:
 819              	 .loc 1 278 0
 820 0314 00BF     	 nop
 821 0316 3437     	 adds r7,r7,#52
 822              	.LCFI29:
 823              	 .cfi_def_cfa_offset 4
 824 0318 BD46     	 mov sp,r7
 825              	.LCFI30:
 826              	 .cfi_def_cfa_register 13
 827              	 
 828 031a 80BC     	 pop {r7}
 829              	.LCFI31:
 830              	 .cfi_restore 7
 831              	 .cfi_def_cfa_offset 0
 832 031c 7047     	 bx lr
 833              	 .cfi_endproc
 834              	.LFE213:
 836              	 .align 1
 837              	 .global board_init
 838              	 .syntax unified
 839              	 .thumb
 840              	 .thumb_func
 841              	 .fpu softvfp
 843              	board_init:
 844              	.LFB224:
 845              	 .file 3 "../../../board/WM400/src/board_init.c"
   1:../../../board/WM400/src/board_init.c **** /**
   2:../../../board/WM400/src/board_init.c ****  * \file
   3:../../../board/WM400/src/board_init.c ****  *
   4:../../../board/WM400/src/board_init.c ****  * \brief SAM4S-EK board init.
   5:../../../board/WM400/src/board_init.c ****  *
   6:../../../board/WM400/src/board_init.c ****  * Copyright (c) 2011 - 2013 Atmel Corporation. All rights reserved.
   7:../../../board/WM400/src/board_init.c ****  *
   8:../../../board/WM400/src/board_init.c ****  * \asf_license_start
   9:../../../board/WM400/src/board_init.c ****  *
  10:../../../board/WM400/src/board_init.c ****  * \page License
  11:../../../board/WM400/src/board_init.c ****  *
  12:../../../board/WM400/src/board_init.c ****  * Redistribution and use in source and binary forms, with or without
  13:../../../board/WM400/src/board_init.c ****  * modification, are permitted provided that the following conditions are met:
  14:../../../board/WM400/src/board_init.c ****  *
  15:../../../board/WM400/src/board_init.c ****  * 1. Redistributions of source code must retain the above copyright notice,
  16:../../../board/WM400/src/board_init.c ****  *    this list of conditions and the following disclaimer.
  17:../../../board/WM400/src/board_init.c ****  *
  18:../../../board/WM400/src/board_init.c ****  * 2. Redistributions in binary form must reproduce the above copyright notice,
  19:../../../board/WM400/src/board_init.c ****  *    this list of conditions and the following disclaimer in the documentation
  20:../../../board/WM400/src/board_init.c ****  *    and/or other materials provided with the distribution.
  21:../../../board/WM400/src/board_init.c ****  *
  22:../../../board/WM400/src/board_init.c ****  * 3. The name of Atmel may not be used to endorse or promote products derived
  23:../../../board/WM400/src/board_init.c ****  *    from this software without specific prior written permission.
  24:../../../board/WM400/src/board_init.c ****  *
  25:../../../board/WM400/src/board_init.c ****  * 4. This software may only be redistributed and used in connection with an
  26:../../../board/WM400/src/board_init.c ****  *    Atmel microcontroller product.
  27:../../../board/WM400/src/board_init.c ****  *
  28:../../../board/WM400/src/board_init.c ****  * THIS SOFTWARE IS PROVIDED BY ATMEL "AS IS" AND ANY EXPRESS OR IMPLIED
  29:../../../board/WM400/src/board_init.c ****  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
  30:../../../board/WM400/src/board_init.c ****  * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE
  31:../../../board/WM400/src/board_init.c ****  * EXPRESSLY AND SPECIFICALLY DISCLAIMED. IN NO EVENT SHALL ATMEL BE LIABLE FOR
  32:../../../board/WM400/src/board_init.c ****  * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  33:../../../board/WM400/src/board_init.c ****  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
  34:../../../board/WM400/src/board_init.c ****  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
  35:../../../board/WM400/src/board_init.c ****  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
  36:../../../board/WM400/src/board_init.c ****  * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
  37:../../../board/WM400/src/board_init.c ****  * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  38:../../../board/WM400/src/board_init.c ****  * POSSIBILITY OF SUCH DAMAGE.
  39:../../../board/WM400/src/board_init.c ****  *
  40:../../../board/WM400/src/board_init.c ****  * \asf_license_stop
  41:../../../board/WM400/src/board_init.c ****  *
  42:../../../board/WM400/src/board_init.c ****  */
  43:../../../board/WM400/src/board_init.c **** 
  44:../../../board/WM400/src/board_init.c **** #include <board.h>
  45:../../../board/WM400/src/board_init.c **** #include <ioport.h>
  46:../../../board/WM400/src/board_init.c **** #include <wdt_sam4l.h>
  47:../../../board/WM400/src/board_init.c **** #include "conf_board.h"
  48:../../../board/WM400/src/board_init.c **** 
  49:../../../board/WM400/src/board_init.c **** /**
  50:../../../board/WM400/src/board_init.c ****  * \brief Set peripheral mode for one single IOPORT pin.
  51:../../../board/WM400/src/board_init.c ****  * It will configure port mode and disable pin mode (but enable peripheral).
  52:../../../board/WM400/src/board_init.c ****  * \param pin IOPORT pin to configure
  53:../../../board/WM400/src/board_init.c ****  * \param mode Mode masks to configure for the specified pin (\ref ioport_modes)
  54:../../../board/WM400/src/board_init.c ****  */
  55:../../../board/WM400/src/board_init.c **** #define ioport_set_pin_peripheral_mode(pin, mode) \
  56:../../../board/WM400/src/board_init.c **** 	do {\
  57:../../../board/WM400/src/board_init.c **** 		ioport_set_pin_mode(pin, mode);\
  58:../../../board/WM400/src/board_init.c **** 		ioport_disable_pin(pin);\
  59:../../../board/WM400/src/board_init.c **** 	} while (0)
  60:../../../board/WM400/src/board_init.c **** 
  61:../../../board/WM400/src/board_init.c **** void board_init(void)
  62:../../../board/WM400/src/board_init.c **** {
 846              	 .loc 3 62 0
 847              	 .cfi_startproc
 848              	 
 849              	 
 850 031e 80B5     	 push {r7,lr}
 851              	.LCFI32:
 852              	 .cfi_def_cfa_offset 8
 853              	 .cfi_offset 7,-8
 854              	 .cfi_offset 14,-4
 855 0320 86B0     	 sub sp,sp,#24
 856              	.LCFI33:
 857              	 .cfi_def_cfa_offset 32
 858 0322 00AF     	 add r7,sp,#0
 859              	.LCFI34:
 860              	 .cfi_def_cfa_register 7
  63:../../../board/WM400/src/board_init.c **** #ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
  64:../../../board/WM400/src/board_init.c **** 	struct wdt_dev_inst wdt_inst;
  65:../../../board/WM400/src/board_init.c **** 	struct wdt_config   wdt_cfg;
  66:../../../board/WM400/src/board_init.c **** 
  67:../../../board/WM400/src/board_init.c **** 	wdt_get_config_defaults(&wdt_cfg);
 861              	 .loc 3 67 0
 862 0324 3B46     	 mov r3,r7
 863 0326 1846     	 mov r0,r3
 864 0328 4D4B     	 ldr r3,.L64
 865 032a 9847     	 blx r3
 866              	.LVL1:
  68:../../../board/WM400/src/board_init.c **** 	wdt_init(&wdt_inst, WDT, &wdt_cfg);
 867              	 .loc 3 68 0
 868 032c 3A46     	 mov r2,r7
 869 032e 07F11003 	 add r3,r7,#16
 870 0332 4C49     	 ldr r1,.L64+4
 871 0334 1846     	 mov r0,r3
 872 0336 4C4B     	 ldr r3,.L64+8
 873 0338 9847     	 blx r3
 874              	.LVL2:
  69:../../../board/WM400/src/board_init.c **** 	wdt_disable(&wdt_inst);
 875              	 .loc 3 69 0
 876 033a 07F11003 	 add r3,r7,#16
 877 033e 1846     	 mov r0,r3
 878 0340 4A4B     	 ldr r3,.L64+12
 879 0342 9847     	 blx r3
 880              	.LVL3:
  70:../../../board/WM400/src/board_init.c **** #endif
  71:../../../board/WM400/src/board_init.c **** 
  72:../../../board/WM400/src/board_init.c **** 	/* GPIO has been deprecated, the old code just keeps it for compatibility.
  73:../../../board/WM400/src/board_init.c **** 	 * In new designs IOPORT is used instead.
  74:../../../board/WM400/src/board_init.c **** 	 * Here IOPORT must be initialized for others to use before setting up IO.
  75:../../../board/WM400/src/board_init.c **** 	 */
  76:../../../board/WM400/src/board_init.c **** 	ioport_init();
 881              	 .loc 3 76 0
 882 0344 FFF75CFE 	 bl ioport_init
  77:../../../board/WM400/src/board_init.c **** 
  78:../../../board/WM400/src/board_init.c **** 	/* Configure LED pins */
  79:../../../board/WM400/src/board_init.c **** 	ioport_set_pin_dir(LED_0_PIN, IOPORT_DIR_OUTPUT);
 883              	 .loc 3 79 0
 884 0348 0121     	 movs r1,#1
 885 034a 0820     	 movs r0,#8
 886 034c FFF72DFF 	 bl ioport_set_pin_dir
  80:../../../board/WM400/src/board_init.c **** 	ioport_set_pin_level(LED_0_PIN, IOPORT_PIN_LEVEL_HIGH);
 887              	 .loc 3 80 0
 888 0350 0121     	 movs r1,#1
 889 0352 0820     	 movs r0,#8
 890 0354 FFF7A0FF 	 bl ioport_set_pin_level
  81:../../../board/WM400/src/board_init.c **** 	ioport_set_pin_dir(LED_1_PIN, IOPORT_DIR_OUTPUT);
 891              	 .loc 3 81 0
 892 0358 0121     	 movs r1,#1
 893 035a 2620     	 movs r0,#38
 894 035c FFF725FF 	 bl ioport_set_pin_dir
  82:../../../board/WM400/src/board_init.c **** 	ioport_set_pin_level(LED_1_PIN, IOPORT_PIN_LEVEL_HIGH);
 895              	 .loc 3 82 0
 896 0360 0121     	 movs r1,#1
 897 0362 2620     	 movs r0,#38
 898 0364 FFF798FF 	 bl ioport_set_pin_level
  83:../../../board/WM400/src/board_init.c **** 	ioport_set_pin_dir(LED_2_PIN, IOPORT_DIR_OUTPUT);
 899              	 .loc 3 83 0
 900 0368 0121     	 movs r1,#1
 901 036a 2720     	 movs r0,#39
 902 036c FFF71DFF 	 bl ioport_set_pin_dir
  84:../../../board/WM400/src/board_init.c **** 	ioport_set_pin_level(LED_2_PIN, IOPORT_PIN_LEVEL_HIGH);
 903              	 .loc 3 84 0
 904 0370 0121     	 movs r1,#1
 905 0372 2720     	 movs r0,#39
 906 0374 FFF790FF 	 bl ioport_set_pin_level
  85:../../../board/WM400/src/board_init.c **** 
  86:../../../board/WM400/src/board_init.c **** 	/* Configure Push Button pins */
  87:../../../board/WM400/src/board_init.c **** 	ioport_set_pin_dir(BUTTON_0_PIN, IOPORT_DIR_INPUT);
 907              	 .loc 3 87 0
 908 0378 0021     	 movs r1,#0
 909 037a 2320     	 movs r0,#35
 910 037c FFF715FF 	 bl ioport_set_pin_dir
  88:../../../board/WM400/src/board_init.c **** 	ioport_set_pin_mode(BUTTON_0_PIN, IOPORT_MODE_PULLUP);
 911              	 .loc 3 88 0
 912 0380 0821     	 movs r1,#8
 913 0382 2320     	 movs r0,#35
 914 0384 FFF790FE 	 bl ioport_set_pin_mode
  89:../../../board/WM400/src/board_init.c **** 
  90:../../../board/WM400/src/board_init.c **** #ifdef CONF_BOARD_ADC_AD2
  91:../../../board/WM400/src/board_init.c **** 	ioport_set_pin_peripheral_mode(ADCIFE_AD2_PIN, ADCIFE_AD2_MUX);
  92:../../../board/WM400/src/board_init.c **** #endif
  93:../../../board/WM400/src/board_init.c **** #ifdef CONF_BOARD_ADC_AD5
  94:../../../board/WM400/src/board_init.c **** 	ioport_set_pin_peripheral_mode(ADCIFE_AD5_PIN, ADCIFE_AD5_MUX);
  95:../../../board/WM400/src/board_init.c **** #endif
  96:../../../board/WM400/src/board_init.c **** #ifdef CONF_BOARD_ADC_AD6
  97:../../../board/WM400/src/board_init.c **** 	ioport_set_pin_peripheral_mode(ADCIFE_AD6_PIN, ADCIFE_AD6_MUX);
  98:../../../board/WM400/src/board_init.c **** #endif
  99:../../../board/WM400/src/board_init.c **** 
 100:../../../board/WM400/src/board_init.c **** #ifdef CONF_BOARD_PWM_LED0
 101:../../../board/WM400/src/board_init.c **** 	/* Configure PWM LED0 pin */
 102:../../../board/WM400/src/board_init.c **** 	gpio_configure_pin(PIN_PWM_LED0_GPIO, PIN_PWM_LED0_FLAGS);
 103:../../../board/WM400/src/board_init.c **** #endif
 104:../../../board/WM400/src/board_init.c **** 
 105:../../../board/WM400/src/board_init.c **** #ifdef CONF_BOARD_PWM_LED1
 106:../../../board/WM400/src/board_init.c **** 	/* Configure PWM LED1 pin */
 107:../../../board/WM400/src/board_init.c **** 	gpio_configure_pin(PIN_PWM_LED1_GPIO, PIN_PWM_LED1_FLAGS);
 108:../../../board/WM400/src/board_init.c **** #endif
 109:../../../board/WM400/src/board_init.c **** 
 110:../../../board/WM400/src/board_init.c **** #ifdef CONF_BOARD_PWM_LED2
 111:../../../board/WM400/src/board_init.c **** 	/* Configure PWM LED2 pin */
 112:../../../board/WM400/src/board_init.c **** 	gpio_configure_pin(PIN_PWM_LED2_GPIO, PIN_PWM_LED2_FLAGS);
 113:../../../board/WM400/src/board_init.c **** #endif
 114:../../../board/WM400/src/board_init.c **** 
 115:../../../board/WM400/src/board_init.c **** #if defined (CONF_BOARD_COM_PORT)
 116:../../../board/WM400/src/board_init.c **** 	ioport_set_pin_peripheral_mode(COM_PORT_RX_PIN, COM_PORT_RX_MUX);
 915              	 .loc 3 116 0
 916 0388 0021     	 movs r1,#0
 917 038a 2E20     	 movs r0,#46
 918 038c FFF78CFE 	 bl ioport_set_pin_mode
 919 0390 2E20     	 movs r0,#46
 920 0392 FFF765FE 	 bl ioport_disable_pin
 117:../../../board/WM400/src/board_init.c **** 	ioport_set_pin_peripheral_mode(COM_PORT_TX_PIN, COM_PORT_TX_MUX);
 921              	 .loc 3 117 0
 922 0396 0021     	 movs r1,#0
 923 0398 2F20     	 movs r0,#47
 924 039a FFF785FE 	 bl ioport_set_pin_mode
 925 039e 2F20     	 movs r0,#47
 926 03a0 FFF75EFE 	 bl ioport_disable_pin
 118:../../../board/WM400/src/board_init.c **** #endif
 119:../../../board/WM400/src/board_init.c **** 
 120:../../../board/WM400/src/board_init.c **** #ifdef CONF_BOARD_RS485
 121:../../../board/WM400/src/board_init.c **** 	ioport_set_pin_peripheral_mode(RS485_USART_RX_PIN, RS485_USART_RX_MUX);
 122:../../../board/WM400/src/board_init.c **** 	ioport_set_pin_peripheral_mode(RS485_USART_TX_PIN, RS485_USART_TX_MUX);
 123:../../../board/WM400/src/board_init.c **** 	ioport_set_pin_peripheral_mode(RS485_USART_RTS_PIN, RS485_USART_RTS_MUX);
 124:../../../board/WM400/src/board_init.c **** 	ioport_set_pin_dir(RS485_USART_CTS_PIN, IOPORT_DIR_OUTPUT);
 125:../../../board/WM400/src/board_init.c **** 	ioport_set_pin_level(RS485_USART_CTS_PIN, IOPORT_PIN_LEVEL_LOW);
 126:../../../board/WM400/src/board_init.c **** #endif
 127:../../../board/WM400/src/board_init.c **** 
 128:../../../board/WM400/src/board_init.c **** #if defined (CONF_BOARD_WM_PORT)
 129:../../../board/WM400/src/board_init.c **** ioport_set_pin_peripheral_mode(WM_PORT_RX_PIN, WM_PORT_RX_MUX);
 130:../../../board/WM400/src/board_init.c **** ioport_set_pin_peripheral_mode(WM_PORT_TX_PIN, WM_PORT_TX_MUX);
 131:../../../board/WM400/src/board_init.c **** #endif
 132:../../../board/WM400/src/board_init.c **** 
 133:../../../board/WM400/src/board_init.c **** #if defined (CONF_BOARD_TWIMS1)
 134:../../../board/WM400/src/board_init.c **** 	ioport_set_pin_peripheral_mode(TWIMS1_TWI_SCL_PIN, TWIMS1_TWI_SCL_MUX);
 927              	 .loc 3 134 0
 928 03a4 0021     	 movs r1,#0
 929 03a6 2120     	 movs r0,#33
 930 03a8 FFF77EFE 	 bl ioport_set_pin_mode
 931 03ac 2120     	 movs r0,#33
 932 03ae FFF757FE 	 bl ioport_disable_pin
 135:../../../board/WM400/src/board_init.c **** 	ioport_set_pin_peripheral_mode(TWIMS1_TWI_SDA_PIN, TWIMS1_TWI_SDA_MUX);
 933              	 .loc 3 135 0
 934 03b2 0021     	 movs r1,#0
 935 03b4 2020     	 movs r0,#32
 936 03b6 FFF777FE 	 bl ioport_set_pin_mode
 937 03ba 2020     	 movs r0,#32
 938 03bc FFF750FE 	 bl ioport_disable_pin
 136:../../../board/WM400/src/board_init.c **** #endif
 137:../../../board/WM400/src/board_init.c **** 
 138:../../../board/WM400/src/board_init.c **** #if defined (CONF_BOARD_USART0)
 139:../../../board/WM400/src/board_init.c **** 	ioport_set_pin_peripheral_mode(EXT1_PIN_UART_RX, EXT1_UART_RX_MUX);
 140:../../../board/WM400/src/board_init.c **** 	ioport_set_pin_peripheral_mode(EXT1_PIN_UART_TX, EXT1_UART_TX_MUX);
 141:../../../board/WM400/src/board_init.c **** #endif
 142:../../../board/WM400/src/board_init.c **** 
 143:../../../board/WM400/src/board_init.c **** #if (defined CONF_BOARD_USB_PORT)
 144:../../../board/WM400/src/board_init.c **** 	ioport_set_pin_peripheral_mode(PIN_PA25A_USBC_DM, MUX_PA25A_USBC_DM);
 939              	 .loc 3 144 0
 940 03c0 0021     	 movs r1,#0
 941 03c2 1920     	 movs r0,#25
 942 03c4 FFF770FE 	 bl ioport_set_pin_mode
 943 03c8 1920     	 movs r0,#25
 944 03ca FFF749FE 	 bl ioport_disable_pin
 145:../../../board/WM400/src/board_init.c **** 	ioport_set_pin_peripheral_mode(PIN_PA26A_USBC_DP, MUX_PA26A_USBC_DP);
 945              	 .loc 3 145 0
 946 03ce 0021     	 movs r1,#0
 947 03d0 1A20     	 movs r0,#26
 948 03d2 FFF769FE 	 bl ioport_set_pin_mode
 949 03d6 1A20     	 movs r0,#26
 950 03d8 FFF742FE 	 bl ioport_disable_pin
 146:../../../board/WM400/src/board_init.c **** 
 147:../../../board/WM400/src/board_init.c **** 	#if defined(CONF_BOARD_USB_VBUS_DETECT)
 148:../../../board/WM400/src/board_init.c **** 		#if defined(USB_VBUS_EIC)
 149:../../../board/WM400/src/board_init.c **** 			ioport_set_pin_peripheral_mode(USB_VBUS_EIC, USB_VBUS_EIC_MUX | USB_VBUS_FLAGS);
 150:../../../board/WM400/src/board_init.c **** 		#elif defined(USB_VBUS_PIN)
 151:../../../board/WM400/src/board_init.c **** 			ioport_set_pin_dir(USB_VBUS_PIN, IOPORT_DIR_INPUT);
 152:../../../board/WM400/src/board_init.c **** 		#else
 153:../../../board/WM400/src/board_init.c **** 			#warning USB_VBUS pin not defined
 154:../../../board/WM400/src/board_init.c **** 		#endif		/* !(defined USB_VBUS_EIC) */
 155:../../../board/WM400/src/board_init.c **** 	#endif			/* !(defined CONF_BOARD_USB_VBUS_DETECT) */
 156:../../../board/WM400/src/board_init.c **** 	#if defined(CONF_BOARD_USB_ID_DETECT)
 157:../../../board/WM400/src/board_init.c **** 		#if defined(USB_ID_EIC)
 158:../../../board/WM400/src/board_init.c **** 			ioport_set_pin_peripheral_mode(USB_ID_EIC, USB_ID_EIC_MUX | USB_ID_FLAGS);
 159:../../../board/WM400/src/board_init.c **** 		#elif defined(USB_ID_PIN)
 160:../../../board/WM400/src/board_init.c **** 			ioport_set_pin_dir(USB_ID_PIN, IOPORT_DIR_INPUT);
 161:../../../board/WM400/src/board_init.c **** 		#else
 162:../../../board/WM400/src/board_init.c **** 			#warning USB_ID pin not defined
 163:../../../board/WM400/src/board_init.c **** 		#endif		/* !(defined USB_ID_EIC) */
 164:../../../board/WM400/src/board_init.c **** 	#endif			/* !(defined CONF_BOARD_USB_ID_DETECT) */
 165:../../../board/WM400/src/board_init.c **** 	#if defined(CONF_BOARD_USB_VBUS_CONTROL)
 166:../../../board/WM400/src/board_init.c **** 		#if defined(USB_VBOF_PIN)
 167:../../../board/WM400/src/board_init.c **** 			ioport_set_pin_dir(USB_VBOF_PIN, IOPORT_DIR_OUTPUT);
 168:../../../board/WM400/src/board_init.c **** 			ioport_set_pin_level(USB_VBOF_PIN, USB_VBOF_INACTIVE_LEVEL);
 169:../../../board/WM400/src/board_init.c **** 		#else
 170:../../../board/WM400/src/board_init.c **** 			#warning USB_VBOF pin not defined
 171:../../../board/WM400/src/board_init.c **** 		#endif		/* !(defined USB_VBOF_PIN) */
 172:../../../board/WM400/src/board_init.c **** 		#if defined(CONF_BOARD_USB_VBUS_ERR_DETECT)
 173:../../../board/WM400/src/board_init.c **** 			#if defined(USB_VBERR_EIC)
 174:../../../board/WM400/src/board_init.c **** 				ioport_set_pin_peripheral_mode(USB_VBERR_EIC, USB_VBERR_EIC_MUX | USB_VBERR_FLAGS);
 175:../../../board/WM400/src/board_init.c **** 			#elif defined(USB_VBERR_PIN)
 176:../../../board/WM400/src/board_init.c **** 				ioport_set_pin_dir(USB_VBERR_PIN, IOPORT_DIR_INPUT);
 177:../../../board/WM400/src/board_init.c **** 			#else
 178:../../../board/WM400/src/board_init.c **** 				#warning USB_VBERR pin not defined
 179:../../../board/WM400/src/board_init.c **** 			#endif
 180:../../../board/WM400/src/board_init.c **** 		#endif		/* !(defined CONF_BOARD_USB_VBUS_ERR_DETECT) */
 181:../../../board/WM400/src/board_init.c **** 	#endif			/* !(defined CONF_BOARD_USB_NO_VBUS_CONTROL) */
 182:../../../board/WM400/src/board_init.c **** #endif				/* (defined CONF_BOARD_USB_PORT) */
 183:../../../board/WM400/src/board_init.c **** 
 184:../../../board/WM400/src/board_init.c **** #ifdef CONF_BOARD_AT86RFX
 185:../../../board/WM400/src/board_init.c **** 	#define CONF_BOARD_SPI
 186:../../../board/WM400/src/board_init.c **** 	#define CONF_BOARD_SPI_NPCS1
 187:../../../board/WM400/src/board_init.c **** //	ioport_set_pin_peripheral_mode(AT86RFX_IRQ0_PIN, AT86RFX_IRQ0_FLAGS);
 188:../../../board/WM400/src/board_init.c **** //	ioport_set_pin_peripheral_mode(AT86RFX_IRQ1_PIN, AT86RFX_IRQ1_FLAGS);
 189:../../../board/WM400/src/board_init.c **** 
 190:../../../board/WM400/src/board_init.c **** 	/* Initialize TRX_RST and SLP_TR as GPIO. */
 191:../../../board/WM400/src/board_init.c **** 	ioport_set_pin_dir(AT86RFX_RST_PIN, IOPORT_DIR_OUTPUT);
 951              	 .loc 3 191 0
 952 03dc 0121     	 movs r1,#1
 953 03de 0A20     	 movs r0,#10
 954 03e0 FFF7E3FE 	 bl ioport_set_pin_dir
 192:../../../board/WM400/src/board_init.c **** 	ioport_set_pin_level(AT86RFX_RST_PIN, IOPORT_PIN_LEVEL_HIGH);
 955              	 .loc 3 192 0
 956 03e4 0121     	 movs r1,#1
 957 03e6 0A20     	 movs r0,#10
 958 03e8 FFF756FF 	 bl ioport_set_pin_level
 193:../../../board/WM400/src/board_init.c **** 	ioport_enable_pin(AT86RFX_RST_PIN);
 959              	 .loc 3 193 0
 960 03ec 0A20     	 movs r0,#10
 961 03ee FFF713FE 	 bl ioport_enable_pin
 194:../../../board/WM400/src/board_init.c **** 	ioport_set_pin_dir(AT86RFX_SLP_PIN, IOPORT_DIR_OUTPUT);
 962              	 .loc 3 194 0
 963 03f2 0121     	 movs r1,#1
 964 03f4 0920     	 movs r0,#9
 965 03f6 FFF7D8FE 	 bl ioport_set_pin_dir
 195:../../../board/WM400/src/board_init.c **** 	ioport_set_pin_level(AT86RFX_SLP_PIN, IOPORT_PIN_LEVEL_LOW);
 966              	 .loc 3 195 0
 967 03fa 0021     	 movs r1,#0
 968 03fc 0920     	 movs r0,#9
 969 03fe FFF74BFF 	 bl ioport_set_pin_level
 196:../../../board/WM400/src/board_init.c **** 	ioport_enable_pin(AT86RFX_SLP_PIN);
 970              	 .loc 3 196 0
 971 0402 0920     	 movs r0,#9
 972 0404 FFF708FE 	 bl ioport_enable_pin
 197:../../../board/WM400/src/board_init.c **** 
 198:../../../board/WM400/src/board_init.c **** 	#ifdef EXT_RF_FRONT_END_CTRL
 199:../../../board/WM400/src/board_init.c **** //		ioport_set_pin_dir(AT86RFX_CPS_PIN, IOPORT_DIR_OUTPUT);
 200:../../../board/WM400/src/board_init.c **** //		ioport_set_pin_level(AT86RFX_CPS_PIN, IOPORT_PIN_LEVEL_HIGH);
 201:../../../board/WM400/src/board_init.c **** //		ioport_enable_pin(AT86RFX_CPS_PIN);
 202:../../../board/WM400/src/board_init.c **** 		ioport_set_pin_dir(AT86RFX_CSD, IOPORT_DIR_OUTPUT);
 973              	 .loc 3 202 0
 974 0408 0121     	 movs r1,#1
 975 040a 0B20     	 movs r0,#11
 976 040c FFF7CDFE 	 bl ioport_set_pin_dir
 203:../../../board/WM400/src/board_init.c **** 		ioport_set_pin_level(AT86RFX_CSD, IOPORT_PIN_LEVEL_LOW);
 977              	 .loc 3 203 0
 978 0410 0021     	 movs r1,#0
 979 0412 0B20     	 movs r0,#11
 980 0414 FFF740FF 	 bl ioport_set_pin_level
 204:../../../board/WM400/src/board_init.c **** 		ioport_enable_pin(AT86RFX_CSD);
 981              	 .loc 3 204 0
 982 0418 0B20     	 movs r0,#11
 983 041a FFF7FDFD 	 bl ioport_enable_pin
 205:../../../board/WM400/src/board_init.c **** 	#endif
 206:../../../board/WM400/src/board_init.c **** #endif
 207:../../../board/WM400/src/board_init.c **** 
 208:../../../board/WM400/src/board_init.c **** 	/* Configure SPI pins */
 209:../../../board/WM400/src/board_init.c **** #ifdef CONF_BOARD_SPI
 210:../../../board/WM400/src/board_init.c **** 	ioport_set_pin_peripheral_mode(SPI_MISO_GPIO, SPI_MISO_FLAGS);
 984              	 .loc 3 210 0
 985 041e 0021     	 movs r1,#0
 986 0420 1520     	 movs r0,#21
 987 0422 FFF741FE 	 bl ioport_set_pin_mode
 988 0426 1520     	 movs r0,#21
 989 0428 FFF71AFE 	 bl ioport_disable_pin
 211:../../../board/WM400/src/board_init.c **** 	ioport_set_pin_peripheral_mode(SPI_MOSI_GPIO, SPI_MOSI_FLAGS);
 990              	 .loc 3 211 0
 991 042c 0021     	 movs r1,#0
 992 042e 1620     	 movs r0,#22
 993 0430 FFF73AFE 	 bl ioport_set_pin_mode
 994 0434 1620     	 movs r0,#22
 995 0436 FFF713FE 	 bl ioport_disable_pin
 212:../../../board/WM400/src/board_init.c **** 	ioport_set_pin_peripheral_mode(SPI_SPCK_GPIO, SPI_SPCK_FLAGS);
 996              	 .loc 3 212 0
 997 043a 0021     	 movs r1,#0
 998 043c 1720     	 movs r0,#23
 999 043e FFF733FE 	 bl ioport_set_pin_mode
 1000 0442 1720     	 movs r0,#23
 1001 0444 FFF70CFE 	 bl ioport_disable_pin
 213:../../../board/WM400/src/board_init.c **** 
 214:../../../board/WM400/src/board_init.c **** 	/**
 215:../../../board/WM400/src/board_init.c **** 	 * For NPCS 1, 2, and 3, different PINs can be used to access the same NPCS line.
 216:../../../board/WM400/src/board_init.c **** 	 * Depending on the application requirements, the default PIN may not be available.
 217:../../../board/WM400/src/board_init.c **** 	 * Hence a different PIN should be selected using the CONF_BOARD_SPI_NPCS_GPIO and
 218:../../../board/WM400/src/board_init.c **** 	 * CONF_BOARD_SPI_NPCS_FLAGS macros.
 219:../../../board/WM400/src/board_init.c **** 	 */
 220:../../../board/WM400/src/board_init.c **** 
 221:../../../board/WM400/src/board_init.c **** #  ifdef CONF_BOARD_SPI_NPCS0
 222:../../../board/WM400/src/board_init.c **** 	ioport_set_pin_peripheral_mode(SPI_NPCS0_GPIO, SPI_NPCS0_FLAGS);
 223:../../../board/WM400/src/board_init.c **** #  endif
 224:../../../board/WM400/src/board_init.c **** 
 225:../../../board/WM400/src/board_init.c **** #  ifdef CONF_BOARD_SPI_NPCS1
 226:../../../board/WM400/src/board_init.c **** #    if defined(CONF_BOARD_SPI_NPCS1_GPIO) && defined(CONF_BOARD_SPI_NPCS1_FLAGS)
 227:../../../board/WM400/src/board_init.c **** 	ioport_set_pin_peripheral_mode(CONF_BOARD_SPI_NPCS1_GPIO, CONF_BOARD_SPI_NPCS1_FLAGS);
 1002              	 .loc 3 227 0
 1003 0448 0221     	 movs r1,#2
 1004 044a 0D20     	 movs r0,#13
 1005 044c FFF72CFE 	 bl ioport_set_pin_mode
 1006 0450 0D20     	 movs r0,#13
 1007 0452 FFF705FE 	 bl ioport_disable_pin
 228:../../../board/WM400/src/board_init.c **** #    else
 229:../../../board/WM400/src/board_init.c **** 	ioport_set_pin_peripheral_mode(SPI_NPCS1_PA31_GPIO, SPI_NPCS1_PA31_FLAGS);
 230:../../../board/WM400/src/board_init.c **** #    endif
 231:../../../board/WM400/src/board_init.c **** #  endif
 232:../../../board/WM400/src/board_init.c **** 
 233:../../../board/WM400/src/board_init.c **** #  ifdef CONF_BOARD_SPI_NPCS2
 234:../../../board/WM400/src/board_init.c **** #    if defined(CONF_BOARD_SPI_NPCS2_GPIO) && defined(CONF_BOARD_SPI_NPCS2_FLAGS)
 235:../../../board/WM400/src/board_init.c **** 	ioport_set_pin_peripheral_mode(CONF_BOARD_SPI_NPCS2_GPIO, CONF_BOARD_SPI_NPCS2_FLAGS);
 236:../../../board/WM400/src/board_init.c **** #    else
 237:../../../board/WM400/src/board_init.c **** 	ioport_set_pin_peripheral_mode(SPI_NPCS2_PA30_GPIO, SPI_NPCS2_PA30_FLAGS);
 238:../../../board/WM400/src/board_init.c **** #    endif
 239:../../../board/WM400/src/board_init.c **** #  endif
 240:../../../board/WM400/src/board_init.c **** 
 241:../../../board/WM400/src/board_init.c **** #  ifdef CONF_BOARD_SPI_NPCS3
 242:../../../board/WM400/src/board_init.c **** #    if defined(CONF_BOARD_SPI_NPCS3_GPIO) && defined(CONF_BOARD_SPI_NPCS3_FLAGS)
 243:../../../board/WM400/src/board_init.c **** 	ioport_set_pin_peripheral_mode(CONF_BOARD_SPI_NPCS3_GPIO, CONF_BOARD_SPI_NPCS3_FLAGS);
 244:../../../board/WM400/src/board_init.c **** #    else
 245:../../../board/WM400/src/board_init.c **** 	ioport_set_pin_peripheral_mode(SPI_NPCS3_PA22_GPIO, SPI_NPCS3_PA22_FLAGS);
 246:../../../board/WM400/src/board_init.c **** #    endif
 247:../../../board/WM400/src/board_init.c **** #  endif
 248:../../../board/WM400/src/board_init.c **** #endif /* CONF_BOARD_SPI */
 249:../../../board/WM400/src/board_init.c **** 
 250:../../../board/WM400/src/board_init.c **** 
 251:../../../board/WM400/src/board_init.c **** #ifdef CONF_BOARD_USART_SCK
 252:../../../board/WM400/src/board_init.c **** 	/* Configure USART synchronous communication SCK pin */
 253:../../../board/WM400/src/board_init.c **** 	gpio_configure_pin(PIN_USART1_SCK_IDX, PIN_USART1_SCK_FLAGS);
 254:../../../board/WM400/src/board_init.c **** #endif
 255:../../../board/WM400/src/board_init.c **** 
 256:../../../board/WM400/src/board_init.c **** #if defined(CONF_BOARD_USB_PORT)
 257:../../../board/WM400/src/board_init.c **** # if defined(CONF_BOARD_USB_VBUS_DETECT)
 258:../../../board/WM400/src/board_init.c **** 	gpio_configure_pin(USB_VBUS_PIN, USB_VBUS_FLAGS);
 259:../../../board/WM400/src/board_init.c **** # endif
 260:../../../board/WM400/src/board_init.c **** #endif
 261:../../../board/WM400/src/board_init.c **** }
 1008              	 .loc 3 261 0
 1009 0456 00BF     	 nop
 1010 0458 1837     	 adds r7,r7,#24
 1011              	.LCFI35:
 1012              	 .cfi_def_cfa_offset 8
 1013 045a BD46     	 mov sp,r7
 1014              	.LCFI36:
 1015              	 .cfi_def_cfa_register 13
 1016              	 
 1017 045c 80BD     	 pop {r7,pc}
 1018              	.L65:
 1019 045e 00BF     	 .align 2
 1020              	.L64:
 1021 0460 00000000 	 .word wdt_get_config_defaults
 1022 0464 000C0F40 	 .word 1074727936
 1023 0468 00000000 	 .word wdt_init
 1024 046c 00000000 	 .word wdt_disable
 1025              	 .cfi_endproc
 1026              	.LFE224:
 1028              	.Letext0:
 1029              	 .file 4 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\arm\\arm-gnu-toolchain\\arm-none-eabi\\include\\machine\\_default_types.h"
 1030              	 .file 5 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\arm\\arm-gnu-toolchain\\arm-none-eabi\\include\\sys\\_stdint.h"
 1031              	 .file 6 "../../../platform/sam/utils/cmsis/sam4l/include/sam4lc4b.h"
 1032              	 .file 7 "../../../platform/thirdparty/CMSIS/include/core_cm4.h"
 1033              	 .file 8 "../../../platform/sam/utils/cmsis/sam4l/source/templates/system_sam4l.h"
 1034              	 .file 9 "../../../platform/sam/utils/cmsis/sam4l/include/component/component_gpio.h"
 1035              	 .file 10 "../../../platform/sam/utils/cmsis/sam4l/include/component/component_wdt.h"
 1036              	 .file 11 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\arm\\arm-gnu-toolchain\\arm-none-eabi\\include\\sys\\lock.h"
 1037              	 .file 12 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\arm\\arm-gnu-toolchain\\arm-none-eabi\\include\\sys\\_types.h"
 1038              	 .file 13 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\arm\\arm-gnu-toolchain\\lib\\gcc\\arm-none-eabi\\6.3.1\\include\\stddef.h"
 1039              	 .file 14 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\arm\\arm-gnu-toolchain\\arm-none-eabi\\include\\sys\\reent.h"
 1040              	 .file 15 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\arm\\arm-gnu-toolchain\\arm-none-eabi\\include\\stdlib.h"
 1041              	 .file 16 "../../../platform/common/utils/interrupt/interrupt_sam_nvic.h"
 1042              	 .file 17 "../../../platform/sam/utils/compiler.h"
 1043              	 .file 18 "../../../platform/common/services/usb/usb_protocol.h"
 1044              	 .file 19 "../../../platform/common/services/usb/udc/udi.h"
 1045              	 .file 20 "../../../platform/common/services/usb/udc/udc_desc.h"
 1046              	 .file 21 "../../../platform/common/services/usb/udc/udd.h"
 1047              	 .file 22 "../../../platform/common/services/usb/class/cdc/device/udi_cdc.h"
 1048              	 .file 23 "../../../platform/common/utils/stdio/stdio_usb/stdio_usb.h"
 1049              	 .file 24 "../../../platform/sam/drivers/wdt/wdt_sam4l.h"
 1050              	 .file 25 "../../../platform/common/services/clock/sam4l/sysclk.h"
 1051              	 .file 26 "config/config.h"
DEFINED SYMBOLS
                            *ABS*:00000000 board_init.c
    {standard input}:16     .bss.cpu_irq_critical_section_counter:00000000 $d
    {standard input}:19     .bss.cpu_irq_critical_section_counter:00000000 cpu_irq_critical_section_counter
    {standard input}:24     .bss.cpu_irq_prev_interrupt_state:00000000 cpu_irq_prev_interrupt_state
    {standard input}:25     .bss.cpu_irq_prev_interrupt_state:00000000 $d
                            *COM*:00000001 n
    {standard input}:28     .bss.tTS:00000000 $d
    {standard input}:31     .bss.tTS:00000000 tTS
    {standard input}:34     .text:00000000 $t
    {standard input}:40     .text:00000000 ioport_init
    {standard input}:71     .text:00000010 $d
    {standard input}:76     .text:00000018 $t
    {standard input}:82     .text:00000018 ioport_enable_pin
    {standard input}:171    .text:00000060 ioport_disable_pin
    {standard input}:260    .text:000000a8 ioport_set_pin_mode
    {standard input}:472    .text:000001aa ioport_set_pin_dir
    {standard input}:699    .text:00000298 ioport_set_pin_level
    {standard input}:843    .text:0000031e board_init
    {standard input}:1021   .text:00000460 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
sysclk_enable_peripheral_clock
wdt_get_config_defaults
wdt_init
wdt_disable
