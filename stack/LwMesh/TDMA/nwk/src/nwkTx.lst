   1              	 .cpu cortex-m4
   2              	 .eabi_attribute 20,1
   3              	 .eabi_attribute 21,1
   4              	 .eabi_attribute 23,3
   5              	 .eabi_attribute 24,1
   6              	 .eabi_attribute 25,1
   7              	 .eabi_attribute 26,1
   8              	 .eabi_attribute 30,6
   9              	 .eabi_attribute 34,1
  10              	 .eabi_attribute 18,4
  11              	 .file "nwkTx.c"
  12              	 .text
  13              	.Ltext0:
  14              	 .cfi_sections .debug_frame
  15              	 .section .bss.cpu_irq_critical_section_counter,"aw",%nobits
  16              	 .align 2
  19              	cpu_irq_critical_section_counter:
  20 0000 00000000 	 .space 4
  21              	 .section .bss.cpu_irq_prev_interrupt_state,"aw",%nobits
  24              	cpu_irq_prev_interrupt_state:
  25 0000 00       	 .space 1
  26              	 .comm n,1,1
  27              	 .section .bss.tTS,"aw",%nobits
  28              	 .align 2
  31              	tTS:
  32 0000 00000000 	 .space 4
  33              	 .section .bss.nwkTxPhyActiveFrame,"aw",%nobits
  34              	 .align 2
  37              	nwkTxPhyActiveFrame:
  38 0000 00000000 	 .space 4
  39              	 .section .bss.nwkTxAckWaitTimer,"aw",%nobits
  40              	 .align 2
  43              	nwkTxAckWaitTimer:
  44 0000 00000000 	 .space 20
  44      00000000 
  44      00000000 
  44      00000000 
  44      00000000 
  45              	 .section .bss.nwkTxDelayTimer,"aw",%nobits
  46              	 .align 2
  49              	nwkTxDelayTimer:
  50 0000 00000000 	 .space 20
  50      00000000 
  50      00000000 
  50      00000000 
  50      00000000 
  51              	 .text
  52              	 .align 1
  53              	 .global nwkTxInit
  54              	 .syntax unified
  55              	 .thumb
  56              	 .thumb_func
  57              	 .fpu softvfp
  59              	nwkTxInit:
  60              	.LFB127:
  61              	 .file 1 "../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c"
   1:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** /**
   2:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c ****  * \file nwkTx.c
   3:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c ****  *
   4:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c ****  * \brief Transmit routines implementation
   5:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c ****  *
   6:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c ****  * Copyright (C) 2014 Atmel Corporation. All rights reserved.
   7:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c ****  *
   8:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c ****  * \asf_license_start
   9:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c ****  *
  10:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c ****  * Redistribution and use in source and binary forms, with or without
  11:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c ****  * modification, are permitted provided that the following conditions are met:
  12:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c ****  *
  13:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c ****  * 1. Redistributions of source code must retain the above copyright notice,
  14:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c ****  *    this list of conditions and the following disclaimer.
  15:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c ****  *
  16:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c ****  * 2. Redistributions in binary form must reproduce the above copyright notice,
  17:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c ****  *    this list of conditions and the following disclaimer in the documentation
  18:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c ****  *    and/or other materials provided with the distribution.
  19:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c ****  *
  20:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c ****  * 3. The name of Atmel may not be used to endorse or promote products derived
  21:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c ****  *    from this software without specific prior written permission.
  22:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c ****  *
  23:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c ****  * 4. This software may only be redistributed and used in connection with an
  24:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c ****  *    Atmel microcontroller product.
  25:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c ****  *
  26:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c ****  * THIS SOFTWARE IS PROVIDED BY ATMEL "AS IS" AND ANY EXPRESS OR IMPLIED
  27:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c ****  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
  28:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c ****  * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE
  29:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c ****  * EXPRESSLY AND SPECIFICALLY DISCLAIMED. IN NO EVENT SHALL ATMEL BE LIABLE FOR
  30:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c ****  * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  31:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c ****  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
  32:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c ****  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
  33:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c ****  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
  34:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c ****  * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
  35:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c ****  * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  36:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c ****  * POSSIBILITY OF SUCH DAMAGE.
  37:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c ****  *
  38:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c ****  * \asf_license_stop
  39:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c ****  *
  40:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c ****  *
  41:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c ****  */
  42:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 
  43:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** /*
  44:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c ****  * Copyright (c) 2014, Atmel Corporation All rights reserved.
  45:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c ****  *
  46:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c ****  * Licensed under Atmel's Limited License Agreement --> EULA.txt
  47:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c ****  */
  48:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 
  49:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** /*- Includes ---------------------------------------------------------------*/
  50:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** #include <stdlib.h>
  51:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** #include <stdint.h>
  52:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** #include <stdbool.h>
  53:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** #include <string.h>
  54:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** #include "phy.h"
  55:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** #include "sysConfig.h"
  56:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** #include "sysTimer.h"
  57:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** #include "nwk.h"
  58:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** #include "nwkTx.h"
  59:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** #include "nwkFrame.h"
  60:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** #include "nwkRoute.h"
  61:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** #include "nwkCommand.h"
  62:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** #include "nwkSecurity.h"
  63:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 
  64:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** /*- Definitions ------------------------------------------------------------*/
  65:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** #define NWK_TX_ACK_WAIT_TIMER_INTERVAL    50 /* ms */
  66:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** #define NWK_TX_DELAY_TIMER_INTERVAL       10 /* ms */
  67:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** #define NWK_TX_DELAY_JITTER_MASK          0x07
  68:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 
  69:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** /*- Types ------------------------------------------------------------------*/
  70:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** enum {
  71:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 	NWK_TX_STATE_ENCRYPT    = 0x10,
  72:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 	NWK_TX_STATE_WAIT_DELAY = 0x11,
  73:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 	NWK_TX_STATE_DELAY      = 0x12,
  74:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 	NWK_TX_STATE_SEND       = 0x13,
  75:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 	NWK_TX_STATE_WAIT_CONF  = 0x14,
  76:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 	NWK_TX_STATE_SENT       = 0x15,
  77:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 	NWK_TX_STATE_WAIT_ACK   = 0x16,
  78:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 	NWK_TX_STATE_CONFIRM    = 0x17,
  79:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** };
  80:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 
  81:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** /*- Prototypes -------------------------------------------------------------*/
  82:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** static void nwkTxAckWaitTimerHandler(SYS_Timer_t *timer);
  83:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** static void nwkTxDelayTimerHandler(SYS_Timer_t *timer);
  84:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 
  85:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** /*- Variables --------------------------------------------------------------*/
  86:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** static NwkFrame_t *nwkTxPhyActiveFrame;
  87:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** static SYS_Timer_t nwkTxAckWaitTimer;
  88:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** static SYS_Timer_t nwkTxDelayTimer;
  89:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 
  90:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** /*- Implementations --------------------------------------------------------*/
  91:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 
  92:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** /*************************************************************************//**
  93:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** *  @brief Initializes the Tx module
  94:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** *****************************************************************************/
  95:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** void nwkTxInit(void)
  96:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** {
  62              	 .loc 1 96 0
  63              	 .cfi_startproc
  64              	 
  65              	 
  66              	 
  67 0000 80B4     	 push {r7}
  68              	.LCFI0:
  69              	 .cfi_def_cfa_offset 4
  70              	 .cfi_offset 7,-4
  71 0002 00AF     	 add r7,sp,#0
  72              	.LCFI1:
  73              	 .cfi_def_cfa_register 7
  97:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 	nwkTxPhyActiveFrame = NULL;
  74              	 .loc 1 97 0
  75 0004 0C4B     	 ldr r3,.L2
  76 0006 0022     	 movs r2,#0
  77 0008 1A60     	 str r2,[r3]
  98:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 
  99:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 	nwkTxAckWaitTimer.interval = NWK_TX_ACK_WAIT_TIMER_INTERVAL;
  78              	 .loc 1 99 0
  79 000a 0C4B     	 ldr r3,.L2+4
  80 000c 3222     	 movs r2,#50
  81 000e 9A60     	 str r2,[r3,#8]
 100:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 	nwkTxAckWaitTimer.mode = SYS_TIMER_INTERVAL_MODE;
  82              	 .loc 1 100 0
  83 0010 0A4B     	 ldr r3,.L2+4
  84 0012 0022     	 movs r2,#0
  85 0014 1A73     	 strb r2,[r3,#12]
 101:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 	nwkTxAckWaitTimer.handler = nwkTxAckWaitTimerHandler;
  86              	 .loc 1 101 0
  87 0016 094B     	 ldr r3,.L2+4
  88 0018 094A     	 ldr r2,.L2+8
  89 001a 1A61     	 str r2,[r3,#16]
 102:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 
 103:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 	nwkTxDelayTimer.interval = NWK_TX_DELAY_TIMER_INTERVAL;
  90              	 .loc 1 103 0
  91 001c 094B     	 ldr r3,.L2+12
  92 001e 0A22     	 movs r2,#10
  93 0020 9A60     	 str r2,[r3,#8]
 104:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 	nwkTxDelayTimer.mode = SYS_TIMER_INTERVAL_MODE;
  94              	 .loc 1 104 0
  95 0022 084B     	 ldr r3,.L2+12
  96 0024 0022     	 movs r2,#0
  97 0026 1A73     	 strb r2,[r3,#12]
 105:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 	nwkTxDelayTimer.handler = nwkTxDelayTimerHandler;
  98              	 .loc 1 105 0
  99 0028 064B     	 ldr r3,.L2+12
 100 002a 074A     	 ldr r2,.L2+16
 101 002c 1A61     	 str r2,[r3,#16]
 106:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** }
 102              	 .loc 1 106 0
 103 002e 00BF     	 nop
 104 0030 BD46     	 mov sp,r7
 105              	.LCFI2:
 106              	 .cfi_def_cfa_register 13
 107              	 
 108 0032 80BC     	 pop {r7}
 109              	.LCFI3:
 110              	 .cfi_restore 7
 111              	 .cfi_def_cfa_offset 0
 112 0034 7047     	 bx lr
 113              	.L3:
 114 0036 00BF     	 .align 2
 115              	.L2:
 116 0038 00000000 	 .word nwkTxPhyActiveFrame
 117 003c 00000000 	 .word nwkTxAckWaitTimer
 118 0040 00000000 	 .word nwkTxAckWaitTimerHandler
 119 0044 00000000 	 .word nwkTxDelayTimer
 120 0048 00000000 	 .word nwkTxDelayTimerHandler
 121              	 .cfi_endproc
 122              	.LFE127:
 124              	 .align 1
 125              	 .global nwkTxBeaconFrame
 126              	 .syntax unified
 127              	 .thumb
 128              	 .thumb_func
 129              	 .fpu softvfp
 131              	nwkTxBeaconFrame:
 132              	.LFB128:
 107:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 
 108:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** /*************************************************************************//**
 109:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** *****************************************************************************/
 110:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** void nwkTxBeaconFrame(NwkFrame_t *frame)
 111:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** {
 133              	 .loc 1 111 0
 134              	 .cfi_startproc
 135              	 
 136              	 
 137              	 
 138 004c 80B4     	 push {r7}
 139              	.LCFI4:
 140              	 .cfi_def_cfa_offset 4
 141              	 .cfi_offset 7,-4
 142 004e 85B0     	 sub sp,sp,#20
 143              	.LCFI5:
 144              	 .cfi_def_cfa_offset 24
 145 0050 00AF     	 add r7,sp,#0
 146              	.LCFI6:
 147              	 .cfi_def_cfa_register 7
 148 0052 7860     	 str r0,[r7,#4]
 112:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 	NwkFrameBeaconHeader_t *beacon = &frame->beacon;
 149              	 .loc 1 112 0
 150 0054 7B68     	 ldr r3,[r7,#4]
 151 0056 0233     	 adds r3,r3,#2
 152 0058 FB60     	 str r3,[r7,#12]
 113:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 
 114:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 	frame->state = NWK_TX_STATE_SEND;
 153              	 .loc 1 114 0
 154 005a 7B68     	 ldr r3,[r7,#4]
 155 005c 1322     	 movs r2,#19
 156 005e 1A70     	 strb r2,[r3]
 115:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 	frame->tx.status = NWK_SUCCESS_STATUS;
 157              	 .loc 1 115 0
 158 0060 7B68     	 ldr r3,[r7,#4]
 159 0062 0022     	 movs r2,#0
 160 0064 83F88520 	 strb r2,[r3,#133]
 116:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 	frame->tx.timeout = 0;
 161              	 .loc 1 116 0
 162 0068 7B68     	 ldr r3,[r7,#4]
 163 006a 0022     	 movs r2,#0
 164 006c 83F88620 	 strb r2,[r3,#134]
 165 0070 0022     	 movs r2,#0
 166 0072 83F88720 	 strb r2,[r3,#135]
 117:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 
 118:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 	beacon->macFcf = 0x8000;
 167              	 .loc 1 118 0
 168 0076 FB68     	 ldr r3,[r7,#12]
 169 0078 0022     	 movs r2,#0
 170 007a 1A70     	 strb r2,[r3]
 171 007c 0022     	 movs r2,#0
 172 007e 62F07F02 	 orn r2,r2,#127
 173 0082 5A70     	 strb r2,[r3,#1]
 119:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 	beacon->macSeq = ++nwkIb.macSeqNum;
 174              	 .loc 1 119 0
 175 0084 0C4B     	 ldr r3,.L5
 176 0086 5B79     	 ldrb r3,[r3,#5]
 177 0088 0133     	 adds r3,r3,#1
 178 008a DAB2     	 uxtb r2,r3
 179 008c 0A4B     	 ldr r3,.L5
 180 008e 5A71     	 strb r2,[r3,#5]
 181 0090 094B     	 ldr r3,.L5
 182 0092 5A79     	 ldrb r2,[r3,#5]
 183 0094 FB68     	 ldr r3,[r7,#12]
 184 0096 9A70     	 strb r2,[r3,#2]
 120:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 	beacon->macSrcPanId = nwkIb.panId;
 185              	 .loc 1 120 0
 186 0098 074B     	 ldr r3,.L5
 187 009a 5A88     	 ldrh r2,[r3,#2]
 188 009c FB68     	 ldr r3,[r7,#12]
 189 009e A3F80320 	 strh r2,[r3,#3]
 121:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 	beacon->macSrcAddr = nwkIb.addr;
 190              	 .loc 1 121 0
 191 00a2 054B     	 ldr r3,.L5
 192 00a4 1A88     	 ldrh r2,[r3]
 193 00a6 FB68     	 ldr r3,[r7,#12]
 194 00a8 A3F80520 	 strh r2,[r3,#5]
 122:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** }
 195              	 .loc 1 122 0
 196 00ac 00BF     	 nop
 197 00ae 1437     	 adds r7,r7,#20
 198              	.LCFI7:
 199              	 .cfi_def_cfa_offset 4
 200 00b0 BD46     	 mov sp,r7
 201              	.LCFI8:
 202              	 .cfi_def_cfa_register 13
 203              	 
 204 00b2 80BC     	 pop {r7}
 205              	.LCFI9:
 206              	 .cfi_restore 7
 207              	 .cfi_def_cfa_offset 0
 208 00b4 7047     	 bx lr
 209              	.L6:
 210 00b6 00BF     	 .align 2
 211              	.L5:
 212 00b8 00000000 	 .word nwkIb
 213              	 .cfi_endproc
 214              	.LFE128:
 216              	 .align 1
 217              	 .global nwkTxBeaconFrameLLDN
 218              	 .syntax unified
 219              	 .thumb
 220              	 .thumb_func
 221              	 .fpu softvfp
 223              	nwkTxBeaconFrameLLDN:
 224              	.LFB129:
 123:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 
 124:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 
 125:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** /*************************************************************************//**
 126:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** *****************************************************************************/
 127:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** void nwkTxBeaconFrameLLDN(NwkFrame_t *frame)
 128:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** {
 225              	 .loc 1 128 0
 226              	 .cfi_startproc
 227              	 
 228              	 
 229              	 
 230 00bc 80B4     	 push {r7}
 231              	.LCFI10:
 232              	 .cfi_def_cfa_offset 4
 233              	 .cfi_offset 7,-4
 234 00be 85B0     	 sub sp,sp,#20
 235              	.LCFI11:
 236              	 .cfi_def_cfa_offset 24
 237 00c0 00AF     	 add r7,sp,#0
 238              	.LCFI12:
 239              	 .cfi_def_cfa_register 7
 240 00c2 7860     	 str r0,[r7,#4]
 129:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 	NwkFrameBeaconHeaderLLDN_t *beacon = &frame->LLbeacon;
 241              	 .loc 1 129 0
 242 00c4 7B68     	 ldr r3,[r7,#4]
 243 00c6 0233     	 adds r3,r3,#2
 244 00c8 FB60     	 str r3,[r7,#12]
 130:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 	frame->state = NWK_TX_STATE_SEND;
 245              	 .loc 1 130 0
 246 00ca 7B68     	 ldr r3,[r7,#4]
 247 00cc 1322     	 movs r2,#19
 248 00ce 1A70     	 strb r2,[r3]
 131:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 	frame->tx.status = NWK_SUCCESS_STATUS;
 249              	 .loc 1 131 0
 250 00d0 7B68     	 ldr r3,[r7,#4]
 251 00d2 0022     	 movs r2,#0
 252 00d4 83F88520 	 strb r2,[r3,#133]
 132:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 	frame->tx.timeout = 0;
 253              	 .loc 1 132 0
 254 00d8 7B68     	 ldr r3,[r7,#4]
 255 00da 0022     	 movs r2,#0
 256 00dc 83F88620 	 strb r2,[r3,#134]
 257 00e0 0022     	 movs r2,#0
 258 00e2 83F88720 	 strb r2,[r3,#135]
 133:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 
 134:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 	// beacon->macFcf.FrameType				= 0b100; 	// LLDN type
 135:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 	// beacon->macFcf.SecurityEnabled 	= 0b1;	// 1 to enable security header and sequence number
 136:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 	// beacon->macFcf.FrameVersion			= 0b0;	// zero to indicate compatible with IEEE Std 802.15.4.
 137:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 	// beacon->macFcf.ackRequest				= 0b0;	// zero to indicade no ACK
 138:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 	// beacon->macFcf.SubFrameType			= 0b00; // Subtype = LL-Beacon
 139:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 	beacon->macFcf = 0x0c;
 259              	 .loc 1 139 0
 260 00e6 FB68     	 ldr r3,[r7,#12]
 261 00e8 0C22     	 movs r2,#12
 262 00ea 1A70     	 strb r2,[r3]
 140:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 	beacon->macSeqNumber = ++nwkIb.macSeqNum;
 263              	 .loc 1 140 0
 264 00ec 114B     	 ldr r3,.L8
 265 00ee 5B79     	 ldrb r3,[r3,#5]
 266 00f0 0133     	 adds r3,r3,#1
 267 00f2 DAB2     	 uxtb r2,r3
 268 00f4 0F4B     	 ldr r3,.L8
 269 00f6 5A71     	 strb r2,[r3,#5]
 270 00f8 0E4B     	 ldr r3,.L8
 271 00fa 5A79     	 ldrb r2,[r3,#5]
 272 00fc FB68     	 ldr r3,[r7,#12]
 273 00fe 5A70     	 strb r2,[r3,#1]
 141:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 
 142:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 	// Auxiliarty Security is not fully implemented, it is only enabled so Sequence Number is present 
 143:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 	beacon->macSecHeader.secLevel	= 0b000;
 274              	 .loc 1 143 0
 275 0100 FA68     	 ldr r2,[r7,#12]
 276 0102 9378     	 ldrb r3,[r2,#2]
 277 0104 6FF30203 	 bfc r3,#0,#3
 278 0108 9370     	 strb r3,[r2,#2]
 144:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 	beacon->macSecHeader.KeyId		= 0b00;
 279              	 .loc 1 144 0
 280 010a FA68     	 ldr r2,[r7,#12]
 281 010c 9378     	 ldrb r3,[r2,#2]
 282 010e 6FF3C403 	 bfc r3,#3,#2
 283 0112 9370     	 strb r3,[r2,#2]
 145:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 	beacon->macSecHeader.countSup	= 0b0;
 284              	 .loc 1 145 0
 285 0114 FA68     	 ldr r2,[r7,#12]
 286 0116 9378     	 ldrb r3,[r2,#2]
 287 0118 6FF34513 	 bfc r3,#5,#1
 288 011c 9370     	 strb r3,[r2,#2]
 146:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 	beacon->macSecHeader.countSize= 0b0;
 289              	 .loc 1 146 0
 290 011e FA68     	 ldr r2,[r7,#12]
 291 0120 9378     	 ldrb r3,[r2,#2]
 292 0122 6FF38613 	 bfc r3,#6,#1
 293 0126 9370     	 strb r3,[r2,#2]
 147:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** }
 294              	 .loc 1 147 0
 295 0128 00BF     	 nop
 296 012a 1437     	 adds r7,r7,#20
 297              	.LCFI13:
 298              	 .cfi_def_cfa_offset 4
 299 012c BD46     	 mov sp,r7
 300              	.LCFI14:
 301              	 .cfi_def_cfa_register 13
 302              	 
 303 012e 80BC     	 pop {r7}
 304              	.LCFI15:
 305              	 .cfi_restore 7
 306              	 .cfi_def_cfa_offset 0
 307 0130 7047     	 bx lr
 308              	.L9:
 309 0132 00BF     	 .align 2
 310              	.L8:
 311 0134 00000000 	 .word nwkIb
 312              	 .cfi_endproc
 313              	.LFE129:
 315              	 .align 1
 316              	 .global nwkTxMacCommandFrameLLDN
 317              	 .syntax unified
 318              	 .thumb
 319              	 .thumb_func
 320              	 .fpu softvfp
 322              	nwkTxMacCommandFrameLLDN:
 323              	.LFB130:
 148:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 
 149:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** void nwkTxMacCommandFrameLLDN(NwkFrame_t *frame, uint16_t subtype)
 150:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** {
 324              	 .loc 1 150 0
 325              	 .cfi_startproc
 326              	 
 327              	 
 328              	 
 329 0138 80B4     	 push {r7}
 330              	.LCFI16:
 331              	 .cfi_def_cfa_offset 4
 332              	 .cfi_offset 7,-4
 333 013a 85B0     	 sub sp,sp,#20
 334              	.LCFI17:
 335              	 .cfi_def_cfa_offset 24
 336 013c 00AF     	 add r7,sp,#0
 337              	.LCFI18:
 338              	 .cfi_def_cfa_register 7
 339 013e 7860     	 str r0,[r7,#4]
 340 0140 0B46     	 mov r3,r1
 341 0142 7B80     	 strh r3,[r7,#2]
 151:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 	NwkFrameGeneralHeaderLLDN_t *mac_command = &frame->LLgeneral;
 342              	 .loc 1 151 0
 343 0144 7B68     	 ldr r3,[r7,#4]
 344 0146 0233     	 adds r3,r3,#2
 345 0148 FB60     	 str r3,[r7,#12]
 152:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 	frame->state = NWK_TX_STATE_SEND;
 346              	 .loc 1 152 0
 347 014a 7B68     	 ldr r3,[r7,#4]
 348 014c 1322     	 movs r2,#19
 349 014e 1A70     	 strb r2,[r3]
 153:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 	frame->tx.status = NWK_SUCCESS_STATUS;
 350              	 .loc 1 153 0
 351 0150 7B68     	 ldr r3,[r7,#4]
 352 0152 0022     	 movs r2,#0
 353 0154 83F88520 	 strb r2,[r3,#133]
 154:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 	frame->tx.timeout = 0;
 354              	 .loc 1 154 0
 355 0158 7B68     	 ldr r3,[r7,#4]
 356 015a 0022     	 movs r2,#0
 357 015c 83F88620 	 strb r2,[r3,#134]
 358 0160 0022     	 movs r2,#0
 359 0162 83F88720 	 strb r2,[r3,#135]
 155:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 
 156:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 	// beacon->macFcf.FrameType					= 0b100; // LLDN type
 157:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 	// beacon->macFcf.SecurityEnabled 	= 0b1;	// 1 to enable security header and sequence number
 158:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 	// beacon->macFcf.FrameVersion			= 0b0;	// zero to indicate compatible with IEEE Std 802.15.4.
 159:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 	// beacon->macFcf.ackRequest				= 0b0;	// zero to indicade no ACK
 160:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 	// beacon->macFcf.SubFrameType			= 0b11; // Subtype = LL-MAC command
 161:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 	if (subtype & NWK_OPT_MAC_COMMAND) 		mac_command->macFcf = 0xcc; //LL-MAC Command
 360              	 .loc 1 161 0
 361 0166 B7F90230 	 ldrsh r3,[r7,#2]
 362 016a 002B     	 cmp r3,#0
 363 016c 03DA     	 bge .L11
 364              	 .loc 1 161 0 is_stmt 0 discriminator 1
 365 016e FB68     	 ldr r3,[r7,#12]
 366 0170 CC22     	 movs r2,#204
 367 0172 1A70     	 strb r2,[r3]
 368 0174 10E0     	 b .L12
 369              	.L11:
 162:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 	else if (subtype & NWK_OPT_LLDN_DATA)	mac_command->macFcf = 0x4c; //LL-Data
 370              	 .loc 1 162 0 is_stmt 1
 371 0176 7B88     	 ldrh r3,[r7,#2]
 372 0178 03F40053 	 and r3,r3,#8192
 373 017c 002B     	 cmp r3,#0
 374 017e 03D0     	 beq .L13
 375              	 .loc 1 162 0 is_stmt 0 discriminator 1
 376 0180 FB68     	 ldr r3,[r7,#12]
 377 0182 4C22     	 movs r2,#76
 378 0184 1A70     	 strb r2,[r3]
 379 0186 07E0     	 b .L12
 380              	.L13:
 163:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 	else if (subtype & NWK_OPT_LLDN_ACK) 	mac_command->macFcf = 0x8c;	//LL-Acknowledgment
 381              	 .loc 1 163 0 is_stmt 1
 382 0188 7B88     	 ldrh r3,[r7,#2]
 383 018a 03F48043 	 and r3,r3,#16384
 384 018e 002B     	 cmp r3,#0
 385 0190 02D0     	 beq .L12
 386              	 .loc 1 163 0 is_stmt 0 discriminator 1
 387 0192 FB68     	 ldr r3,[r7,#12]
 388 0194 8C22     	 movs r2,#140
 389 0196 1A70     	 strb r2,[r3]
 390              	.L12:
 164:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 	mac_command->macSeqNumber = ++nwkIb.macSeqNum;
 391              	 .loc 1 164 0 is_stmt 1
 392 0198 114B     	 ldr r3,.L14
 393 019a 5B79     	 ldrb r3,[r3,#5]
 394 019c 0133     	 adds r3,r3,#1
 395 019e DAB2     	 uxtb r2,r3
 396 01a0 0F4B     	 ldr r3,.L14
 397 01a2 5A71     	 strb r2,[r3,#5]
 398 01a4 0E4B     	 ldr r3,.L14
 399 01a6 5A79     	 ldrb r2,[r3,#5]
 400 01a8 FB68     	 ldr r3,[r7,#12]
 401 01aa 5A70     	 strb r2,[r3,#1]
 165:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 
 166:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 	// Auxiliarty Security is not fully implemented, it is only enabled so Sequence Number is present 
 167:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 	mac_command->macSecHeader.secLevel	= 0b000;
 402              	 .loc 1 167 0
 403 01ac FA68     	 ldr r2,[r7,#12]
 404 01ae 9378     	 ldrb r3,[r2,#2]
 405 01b0 6FF30203 	 bfc r3,#0,#3
 406 01b4 9370     	 strb r3,[r2,#2]
 168:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 	mac_command->macSecHeader.KeyId		= 0b00;
 407              	 .loc 1 168 0
 408 01b6 FA68     	 ldr r2,[r7,#12]
 409 01b8 9378     	 ldrb r3,[r2,#2]
 410 01ba 6FF3C403 	 bfc r3,#3,#2
 411 01be 9370     	 strb r3,[r2,#2]
 169:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 	mac_command->macSecHeader.countSup	= 0b0;
 412              	 .loc 1 169 0
 413 01c0 FA68     	 ldr r2,[r7,#12]
 414 01c2 9378     	 ldrb r3,[r2,#2]
 415 01c4 6FF34513 	 bfc r3,#5,#1
 416 01c8 9370     	 strb r3,[r2,#2]
 170:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 	mac_command->macSecHeader.countSize= 0b0;
 417              	 .loc 1 170 0
 418 01ca FA68     	 ldr r2,[r7,#12]
 419 01cc 9378     	 ldrb r3,[r2,#2]
 420 01ce 6FF38613 	 bfc r3,#6,#1
 421 01d2 9370     	 strb r3,[r2,#2]
 171:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** }
 422              	 .loc 1 171 0
 423 01d4 00BF     	 nop
 424 01d6 1437     	 adds r7,r7,#20
 425              	.LCFI19:
 426              	 .cfi_def_cfa_offset 4
 427 01d8 BD46     	 mov sp,r7
 428              	.LCFI20:
 429              	 .cfi_def_cfa_register 13
 430              	 
 431 01da 80BC     	 pop {r7}
 432              	.LCFI21:
 433              	 .cfi_restore 7
 434              	 .cfi_def_cfa_offset 0
 435 01dc 7047     	 bx lr
 436              	.L15:
 437 01de 00BF     	 .align 2
 438              	.L14:
 439 01e0 00000000 	 .word nwkIb
 440              	 .cfi_endproc
 441              	.LFE130:
 443              	 .align 1
 444              	 .global nwkTxFrame
 445              	 .syntax unified
 446              	 .thumb
 447              	 .thumb_func
 448              	 .fpu softvfp
 450              	nwkTxFrame:
 451              	.LFB131:
 172:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 
 173:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 
 174:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** /*************************************************************************//**
 175:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** *****************************************************************************/
 176:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** void nwkTxFrame(NwkFrame_t *frame)
 177:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** {
 452              	 .loc 1 177 0
 453              	 .cfi_startproc
 454              	 
 455              	 
 456 01e4 80B5     	 push {r7,lr}
 457              	.LCFI22:
 458              	 .cfi_def_cfa_offset 8
 459              	 .cfi_offset 7,-8
 460              	 .cfi_offset 14,-4
 461 01e6 84B0     	 sub sp,sp,#16
 462              	.LCFI23:
 463              	 .cfi_def_cfa_offset 24
 464 01e8 00AF     	 add r7,sp,#0
 465              	.LCFI24:
 466              	 .cfi_def_cfa_register 7
 467 01ea 7860     	 str r0,[r7,#4]
 178:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 	NwkFrameHeader_t *header = &frame->header;
 468              	 .loc 1 178 0
 469 01ec 7B68     	 ldr r3,[r7,#4]
 470 01ee 0233     	 adds r3,r3,#2
 471 01f0 FB60     	 str r3,[r7,#12]
 179:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 
 180:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 	if (frame->tx.control & NWK_TX_CONTROL_ROUTING) {
 472              	 .loc 1 180 0
 473 01f2 7B68     	 ldr r3,[r7,#4]
 474 01f4 93F88830 	 ldrb r3,[r3,#136]
 475 01f8 03F00203 	 and r3,r3,#2
 476 01fc 002B     	 cmp r3,#0
 477 01fe 03D0     	 beq .L17
 181:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 		frame->state = NWK_TX_STATE_DELAY;
 478              	 .loc 1 181 0
 479 0200 7B68     	 ldr r3,[r7,#4]
 480 0202 1222     	 movs r2,#18
 481 0204 1A70     	 strb r2,[r3]
 482 0206 02E0     	 b .L18
 483              	.L17:
 182:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 		} else {
 183:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** #ifdef NWK_ENABLE_SECURITY
 184:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 		if (header->nwkFcf.security) {
 185:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 			frame->state = NWK_TX_STATE_ENCRYPT;
 186:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 		} else
 187:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** #endif
 188:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 		frame->state = NWK_TX_STATE_DELAY;
 484              	 .loc 1 188 0
 485 0208 7B68     	 ldr r3,[r7,#4]
 486 020a 1222     	 movs r2,#18
 487 020c 1A70     	 strb r2,[r3]
 488              	.L18:
 189:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 	}
 190:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 
 191:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 	frame->tx.status = NWK_SUCCESS_STATUS;
 489              	 .loc 1 191 0
 490 020e 7B68     	 ldr r3,[r7,#4]
 491 0210 0022     	 movs r2,#0
 492 0212 83F88520 	 strb r2,[r3,#133]
 192:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 
 193:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 	if (frame->tx.control & NWK_TX_CONTROL_BROADCAST_PAN_ID) {
 493              	 .loc 1 193 0
 494 0216 7B68     	 ldr r3,[r7,#4]
 495 0218 93F88830 	 ldrb r3,[r3,#136]
 496 021c 03F00103 	 and r3,r3,#1
 497 0220 002B     	 cmp r3,#0
 498 0222 07D0     	 beq .L19
 194:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 		header->macDstPanId = NWK_BROADCAST_PANID;
 499              	 .loc 1 194 0
 500 0224 FB68     	 ldr r3,[r7,#12]
 501 0226 4FF0FF32 	 mov r2,#-1
 502 022a DA70     	 strb r2,[r3,#3]
 503 022c 4FF0FF32 	 mov r2,#-1
 504 0230 1A71     	 strb r2,[r3,#4]
 505 0232 04E0     	 b .L20
 506              	.L19:
 195:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 		} else {
 196:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 		header->macDstPanId = nwkIb.panId;
 507              	 .loc 1 196 0
 508 0234 264B     	 ldr r3,.L24
 509 0236 5A88     	 ldrh r2,[r3,#2]
 510 0238 FB68     	 ldr r3,[r7,#12]
 511 023a A3F80320 	 strh r2,[r3,#3]
 512              	.L20:
 197:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 	}
 198:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 
 199:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** #ifdef NWK_ENABLE_ROUTING
 200:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 	if (0 == (frame->tx.control & NWK_TX_CONTROL_DIRECT_LINK) &&
 201:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 	0 ==
 202:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 	(frame->tx.control & NWK_TX_CONTROL_BROADCAST_PAN_ID)) {
 203:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 		nwkRoutePrepareTx(frame);
 204:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 	} else
 205:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** #endif
 206:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 
 207:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 	header->macDstAddr = header->nwkDstAddr;
 513              	 .loc 1 207 0
 514 023e FB68     	 ldr r3,[r7,#12]
 515 0240 B3F80D30 	 ldrh r3,[r3,#13]
 516 0244 9AB2     	 uxth r2,r3
 517 0246 FB68     	 ldr r3,[r7,#12]
 518 0248 A3F80520 	 strh r2,[r3,#5]
 208:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 	header->macSrcAddr = nwkIb.addr;
 519              	 .loc 1 208 0
 520 024c 204B     	 ldr r3,.L24
 521 024e 1A88     	 ldrh r2,[r3]
 522 0250 FB68     	 ldr r3,[r7,#12]
 523 0252 A3F80720 	 strh r2,[r3,#7]
 209:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 	header->macSeq = ++nwkIb.macSeqNum;
 524              	 .loc 1 209 0
 525 0256 1E4B     	 ldr r3,.L24
 526 0258 5B79     	 ldrb r3,[r3,#5]
 527 025a 0133     	 adds r3,r3,#1
 528 025c DAB2     	 uxtb r2,r3
 529 025e 1C4B     	 ldr r3,.L24
 530 0260 5A71     	 strb r2,[r3,#5]
 531 0262 1B4B     	 ldr r3,.L24
 532 0264 5A79     	 ldrb r2,[r3,#5]
 533 0266 FB68     	 ldr r3,[r7,#12]
 534 0268 9A70     	 strb r2,[r3,#2]
 210:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 
 211:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 	if (NWK_BROADCAST_ADDR == header->macDstAddr) {
 535              	 .loc 1 211 0
 536 026a FB68     	 ldr r3,[r7,#12]
 537 026c B3F80530 	 ldrh r3,[r3,#5]
 538 0270 9BB2     	 uxth r3,r3
 539 0272 4FF6FF72 	 movw r2,#65535
 540 0276 9342     	 cmp r3,r2
 541 0278 15D1     	 bne .L21
 212:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 		header->macFcf = 0x8841;
 542              	 .loc 1 212 0
 543 027a FB68     	 ldr r3,[r7,#12]
 544 027c 0022     	 movs r2,#0
 545 027e 42F04102 	 orr r2,r2,#65
 546 0282 1A70     	 strb r2,[r3]
 547 0284 0022     	 movs r2,#0
 548 0286 62F07702 	 orn r2,r2,#119
 549 028a 5A70     	 strb r2,[r3,#1]
 213:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 		frame->tx.timeout = (rand() & NWK_TX_DELAY_JITTER_MASK) + 1;
 550              	 .loc 1 213 0
 551 028c 114B     	 ldr r3,.L24+4
 552 028e 9847     	 blx r3
 553              	.LVL0:
 554 0290 0346     	 mov r3,r0
 555 0292 9BB2     	 uxth r3,r3
 556 0294 03F00703 	 and r3,r3,#7
 557 0298 9BB2     	 uxth r3,r3
 558 029a 0133     	 adds r3,r3,#1
 559 029c 9AB2     	 uxth r2,r3
 560 029e 7B68     	 ldr r3,[r7,#4]
 561 02a0 A3F88620 	 strh r2,[r3,#134]
 214:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 		} else {
 215:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 		header->macFcf = 0x8841;
 216:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 		frame->tx.timeout = 0;
 217:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 	}
 218:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** }
 562              	 .loc 1 218 0
 563 02a4 0FE0     	 b .L23
 564              	.L21:
 215:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 		frame->tx.timeout = 0;
 565              	 .loc 1 215 0
 566 02a6 FB68     	 ldr r3,[r7,#12]
 567 02a8 0022     	 movs r2,#0
 568 02aa 42F04102 	 orr r2,r2,#65
 569 02ae 1A70     	 strb r2,[r3]
 570 02b0 0022     	 movs r2,#0
 571 02b2 62F07702 	 orn r2,r2,#119
 572 02b6 5A70     	 strb r2,[r3,#1]
 216:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 	}
 573              	 .loc 1 216 0
 574 02b8 7B68     	 ldr r3,[r7,#4]
 575 02ba 0022     	 movs r2,#0
 576 02bc 83F88620 	 strb r2,[r3,#134]
 577 02c0 0022     	 movs r2,#0
 578 02c2 83F88720 	 strb r2,[r3,#135]
 579              	.L23:
 580              	 .loc 1 218 0
 581 02c6 00BF     	 nop
 582 02c8 1037     	 adds r7,r7,#16
 583              	.LCFI25:
 584              	 .cfi_def_cfa_offset 8
 585 02ca BD46     	 mov sp,r7
 586              	.LCFI26:
 587              	 .cfi_def_cfa_register 13
 588              	 
 589 02cc 80BD     	 pop {r7,pc}
 590              	.L25:
 591 02ce 00BF     	 .align 2
 592              	.L24:
 593 02d0 00000000 	 .word nwkIb
 594 02d4 00000000 	 .word rand
 595              	 .cfi_endproc
 596              	.LFE131:
 598              	 .align 1
 599              	 .global nwkTxBroadcastFrame
 600              	 .syntax unified
 601              	 .thumb
 602              	 .thumb_func
 603              	 .fpu softvfp
 605              	nwkTxBroadcastFrame:
 606              	.LFB132:
 219:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 
 220:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** /*************************************************************************//**
 221:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** *****************************************************************************/
 222:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** void nwkTxBroadcastFrame(NwkFrame_t *frame)
 223:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** {
 607              	 .loc 1 223 0
 608              	 .cfi_startproc
 609              	 
 610              	 
 611 02d8 80B5     	 push {r7,lr}
 612              	.LCFI27:
 613              	 .cfi_def_cfa_offset 8
 614              	 .cfi_offset 7,-8
 615              	 .cfi_offset 14,-4
 616 02da 84B0     	 sub sp,sp,#16
 617              	.LCFI28:
 618              	 .cfi_def_cfa_offset 24
 619 02dc 00AF     	 add r7,sp,#0
 620              	.LCFI29:
 621              	 .cfi_def_cfa_register 7
 622 02de 7860     	 str r0,[r7,#4]
 224:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 	NwkFrame_t *newFrame;
 225:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 
 226:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 	if (NULL == (newFrame = nwkFrameAlloc())) {
 623              	 .loc 1 226 0
 624 02e0 324B     	 ldr r3,.L30
 625 02e2 9847     	 blx r3
 626              	.LVL1:
 627 02e4 F860     	 str r0,[r7,#12]
 628 02e6 FB68     	 ldr r3,[r7,#12]
 629 02e8 002B     	 cmp r3,#0
 630 02ea 5BD0     	 beq .L29
 227:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 		return;
 228:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 	}
 229:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 
 230:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 	newFrame->payload += sizeof(NwkFrameHeader_t);
 631              	 .loc 1 230 0
 632 02ec FB68     	 ldr r3,[r7,#12]
 633 02ee D3F88130 	 ldr r3,[r3,#129]
 634 02f2 03F11002 	 add r2,r3,#16
 635 02f6 FB68     	 ldr r3,[r7,#12]
 636 02f8 C3F88120 	 str r2,[r3,#129]
 231:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 
 232:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 	newFrame->state = NWK_TX_STATE_DELAY;
 637              	 .loc 1 232 0
 638 02fc FB68     	 ldr r3,[r7,#12]
 639 02fe 1222     	 movs r2,#18
 640 0300 1A70     	 strb r2,[r3]
 233:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 	newFrame->size = frame->size;
 641              	 .loc 1 233 0
 642 0302 7B68     	 ldr r3,[r7,#4]
 643 0304 5A78     	 ldrb r2,[r3,#1]
 644 0306 FB68     	 ldr r3,[r7,#12]
 645 0308 5A70     	 strb r2,[r3,#1]
 234:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 	newFrame->tx.status = NWK_SUCCESS_STATUS;
 646              	 .loc 1 234 0
 647 030a FB68     	 ldr r3,[r7,#12]
 648 030c 0022     	 movs r2,#0
 649 030e 83F88520 	 strb r2,[r3,#133]
 235:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 	newFrame->tx.timeout = (rand() & NWK_TX_DELAY_JITTER_MASK) + 1;
 650              	 .loc 1 235 0
 651 0312 274B     	 ldr r3,.L30+4
 652 0314 9847     	 blx r3
 653              	.LVL2:
 654 0316 0346     	 mov r3,r0
 655 0318 9BB2     	 uxth r3,r3
 656 031a 03F00703 	 and r3,r3,#7
 657 031e 9BB2     	 uxth r3,r3
 658 0320 0133     	 adds r3,r3,#1
 659 0322 9AB2     	 uxth r2,r3
 660 0324 FB68     	 ldr r3,[r7,#12]
 661 0326 A3F88620 	 strh r2,[r3,#134]
 236:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 	newFrame->tx.confirm = NULL;
 662              	 .loc 1 236 0
 663 032a FB68     	 ldr r3,[r7,#12]
 664 032c 0022     	 movs r2,#0
 665 032e 83F88920 	 strb r2,[r3,#137]
 666 0332 0022     	 movs r2,#0
 667 0334 83F88A20 	 strb r2,[r3,#138]
 668 0338 0022     	 movs r2,#0
 669 033a 83F88B20 	 strb r2,[r3,#139]
 670 033e 0022     	 movs r2,#0
 671 0340 83F88C20 	 strb r2,[r3,#140]
 237:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 	memcpy(newFrame->data, frame->data, frame->size);
 672              	 .loc 1 237 0
 673 0344 FB68     	 ldr r3,[r7,#12]
 674 0346 981C     	 adds r0,r3,#2
 675 0348 7B68     	 ldr r3,[r7,#4]
 676 034a 991C     	 adds r1,r3,#2
 677 034c 7B68     	 ldr r3,[r7,#4]
 678 034e 5B78     	 ldrb r3,[r3,#1]
 679 0350 1A46     	 mov r2,r3
 680 0352 184B     	 ldr r3,.L30+8
 681 0354 9847     	 blx r3
 682              	.LVL3:
 238:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 
 239:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 	newFrame->header.macFcf = 0x8841;
 683              	 .loc 1 239 0
 684 0356 FB68     	 ldr r3,[r7,#12]
 685 0358 0022     	 movs r2,#0
 686 035a 42F04102 	 orr r2,r2,#65
 687 035e 9A70     	 strb r2,[r3,#2]
 688 0360 0022     	 movs r2,#0
 689 0362 62F07702 	 orn r2,r2,#119
 690 0366 DA70     	 strb r2,[r3,#3]
 240:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 	newFrame->header.macDstAddr = NWK_BROADCAST_ADDR;
 691              	 .loc 1 240 0
 692 0368 FB68     	 ldr r3,[r7,#12]
 693 036a 4FF0FF32 	 mov r2,#-1
 694 036e DA71     	 strb r2,[r3,#7]
 695 0370 4FF0FF32 	 mov r2,#-1
 696 0374 1A72     	 strb r2,[r3,#8]
 241:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 	newFrame->header.macDstPanId = frame->header.macDstPanId;
 697              	 .loc 1 241 0
 698 0376 7B68     	 ldr r3,[r7,#4]
 699 0378 B3F80530 	 ldrh r3,[r3,#5]
 700 037c 9AB2     	 uxth r2,r3
 701 037e FB68     	 ldr r3,[r7,#12]
 702 0380 A3F80520 	 strh r2,[r3,#5]
 242:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 	newFrame->header.macSrcAddr = nwkIb.addr;
 703              	 .loc 1 242 0
 704 0384 0C4B     	 ldr r3,.L30+12
 705 0386 1A88     	 ldrh r2,[r3]
 706 0388 FB68     	 ldr r3,[r7,#12]
 707 038a A3F80920 	 strh r2,[r3,#9]
 243:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 	newFrame->header.macSeq = ++nwkIb.macSeqNum;
 708              	 .loc 1 243 0
 709 038e 0A4B     	 ldr r3,.L30+12
 710 0390 5B79     	 ldrb r3,[r3,#5]
 711 0392 0133     	 adds r3,r3,#1
 712 0394 DAB2     	 uxtb r2,r3
 713 0396 084B     	 ldr r3,.L30+12
 714 0398 5A71     	 strb r2,[r3,#5]
 715 039a 074B     	 ldr r3,.L30+12
 716 039c 5A79     	 ldrb r2,[r3,#5]
 717 039e FB68     	 ldr r3,[r7,#12]
 718 03a0 1A71     	 strb r2,[r3,#4]
 719 03a2 00E0     	 b .L26
 720              	.L29:
 227:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 	}
 721              	 .loc 1 227 0
 722 03a4 00BF     	 nop
 723              	.L26:
 244:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** }
 724              	 .loc 1 244 0
 725 03a6 1037     	 adds r7,r7,#16
 726              	.LCFI30:
 727              	 .cfi_def_cfa_offset 8
 728 03a8 BD46     	 mov sp,r7
 729              	.LCFI31:
 730              	 .cfi_def_cfa_register 13
 731              	 
 732 03aa 80BD     	 pop {r7,pc}
 733              	.L31:
 734              	 .align 2
 735              	.L30:
 736 03ac 00000000 	 .word nwkFrameAlloc
 737 03b0 00000000 	 .word rand
 738 03b4 00000000 	 .word memcpy
 739 03b8 00000000 	 .word nwkIb
 740              	 .cfi_endproc
 741              	.LFE132:
 743              	 .align 1
 744              	 .global nwkTxAckReceived
 745              	 .syntax unified
 746              	 .thumb
 747              	 .thumb_func
 748              	 .fpu softvfp
 750              	nwkTxAckReceived:
 751              	.LFB133:
 245:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 
 246:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** /*************************************************************************//**
 247:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** *****************************************************************************/
 248:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** bool nwkTxAckReceived(NWK_DataInd_t *ind)
 249:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** {
 752              	 .loc 1 249 0
 753              	 .cfi_startproc
 754              	 
 755              	 
 756 03bc 80B5     	 push {r7,lr}
 757              	.LCFI32:
 758              	 .cfi_def_cfa_offset 8
 759              	 .cfi_offset 7,-8
 760              	 .cfi_offset 14,-4
 761 03be 84B0     	 sub sp,sp,#16
 762              	.LCFI33:
 763              	 .cfi_def_cfa_offset 24
 764 03c0 00AF     	 add r7,sp,#0
 765              	.LCFI34:
 766              	 .cfi_def_cfa_register 7
 767 03c2 7860     	 str r0,[r7,#4]
 250:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 	NwkCommandAck_t *command = (NwkCommandAck_t *)ind->data;
 768              	 .loc 1 250 0
 769 03c4 7B68     	 ldr r3,[r7,#4]
 770 03c6 9B68     	 ldr r3,[r3,#8]
 771 03c8 BB60     	 str r3,[r7,#8]
 251:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 	NwkFrame_t *frame = NULL;
 772              	 .loc 1 251 0
 773 03ca 0023     	 movs r3,#0
 774 03cc FB60     	 str r3,[r7,#12]
 252:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 
 253:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 	if (sizeof(NwkCommandAck_t) != ind->size) {
 775              	 .loc 1 253 0
 776 03ce 7B68     	 ldr r3,[r7,#4]
 777 03d0 1B7B     	 ldrb r3,[r3,#12]
 778 03d2 032B     	 cmp r3,#3
 779 03d4 15D0     	 beq .L35
 254:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 		return false;
 780              	 .loc 1 254 0
 781 03d6 0023     	 movs r3,#0
 782 03d8 1BE0     	 b .L34
 783              	.L36:
 255:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 	}
 256:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 
 257:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 	while (NULL != (frame = nwkFrameNext(frame))) {
 258:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 		if (NWK_TX_STATE_WAIT_ACK == frame->state &&
 784              	 .loc 1 258 0
 785 03da FB68     	 ldr r3,[r7,#12]
 786 03dc 1B78     	 ldrb r3,[r3]
 787 03de 162B     	 cmp r3,#22
 788 03e0 0FD1     	 bne .L35
 259:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 				frame->header.nwkSeq == command->seq) {
 789              	 .loc 1 259 0 discriminator 1
 790 03e2 FB68     	 ldr r3,[r7,#12]
 791 03e4 1A7B     	 ldrb r2,[r3,#12]
 792 03e6 BB68     	 ldr r3,[r7,#8]
 793 03e8 5B78     	 ldrb r3,[r3,#1]
 258:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 				frame->header.nwkSeq == command->seq) {
 794              	 .loc 1 258 0 discriminator 1
 795 03ea 9A42     	 cmp r2,r3
 796 03ec 09D1     	 bne .L35
 260:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 			frame->state = NWK_TX_STATE_CONFIRM;
 797              	 .loc 1 260 0
 798 03ee FB68     	 ldr r3,[r7,#12]
 799 03f0 1722     	 movs r2,#23
 800 03f2 1A70     	 strb r2,[r3]
 261:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 			frame->tx.control = command->control;
 801              	 .loc 1 261 0
 802 03f4 BB68     	 ldr r3,[r7,#8]
 803 03f6 9A78     	 ldrb r2,[r3,#2]
 804 03f8 FB68     	 ldr r3,[r7,#12]
 805 03fa 83F88820 	 strb r2,[r3,#136]
 262:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 			return true;
 806              	 .loc 1 262 0
 807 03fe 0123     	 movs r3,#1
 808 0400 07E0     	 b .L34
 809              	.L35:
 257:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 		if (NWK_TX_STATE_WAIT_ACK == frame->state &&
 810              	 .loc 1 257 0
 811 0402 F868     	 ldr r0,[r7,#12]
 812 0404 054B     	 ldr r3,.L37
 813 0406 9847     	 blx r3
 814              	.LVL4:
 815 0408 F860     	 str r0,[r7,#12]
 816 040a FB68     	 ldr r3,[r7,#12]
 817 040c 002B     	 cmp r3,#0
 818 040e E4D1     	 bne .L36
 263:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 		}
 264:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 	}
 265:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 
 266:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 	return false;
 819              	 .loc 1 266 0
 820 0410 0023     	 movs r3,#0
 821              	.L34:
 267:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** }
 822              	 .loc 1 267 0
 823 0412 1846     	 mov r0,r3
 824 0414 1037     	 adds r7,r7,#16
 825              	.LCFI35:
 826              	 .cfi_def_cfa_offset 8
 827 0416 BD46     	 mov sp,r7
 828              	.LCFI36:
 829              	 .cfi_def_cfa_register 13
 830              	 
 831 0418 80BD     	 pop {r7,pc}
 832              	.L38:
 833 041a 00BF     	 .align 2
 834              	.L37:
 835 041c 00000000 	 .word nwkFrameNext
 836              	 .cfi_endproc
 837              	.LFE133:
 839              	 .align 1
 840              	 .syntax unified
 841              	 .thumb
 842              	 .thumb_func
 843              	 .fpu softvfp
 845              	nwkTxAckWaitTimerHandler:
 846              	.LFB134:
 268:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 
 269:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** /*************************************************************************//**
 270:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** *****************************************************************************/
 271:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** static void nwkTxAckWaitTimerHandler(SYS_Timer_t *timer)
 272:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** {
 847              	 .loc 1 272 0
 848              	 .cfi_startproc
 849              	 
 850              	 
 851 0420 80B5     	 push {r7,lr}
 852              	.LCFI37:
 853              	 .cfi_def_cfa_offset 8
 854              	 .cfi_offset 7,-8
 855              	 .cfi_offset 14,-4
 856 0422 84B0     	 sub sp,sp,#16
 857              	.LCFI38:
 858              	 .cfi_def_cfa_offset 24
 859 0424 00AF     	 add r7,sp,#0
 860              	.LCFI39:
 861              	 .cfi_def_cfa_register 7
 862 0426 7860     	 str r0,[r7,#4]
 273:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 	NwkFrame_t *frame = NULL;
 863              	 .loc 1 273 0
 864 0428 0023     	 movs r3,#0
 865 042a FB60     	 str r3,[r7,#12]
 274:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 	bool restart = false;
 866              	 .loc 1 274 0
 867 042c 0023     	 movs r3,#0
 868 042e FB72     	 strb r3,[r7,#11]
 275:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 
 276:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 	while (NULL != (frame = nwkFrameNext(frame))) {
 869              	 .loc 1 276 0
 870 0430 18E0     	 b .L40
 871              	.L41:
 277:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 		if (NWK_TX_STATE_WAIT_ACK == frame->state) {
 872              	 .loc 1 277 0
 873 0432 FB68     	 ldr r3,[r7,#12]
 874 0434 1B78     	 ldrb r3,[r3]
 875 0436 162B     	 cmp r3,#22
 876 0438 14D1     	 bne .L40
 278:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 			restart = true;
 877              	 .loc 1 278 0
 878 043a 0123     	 movs r3,#1
 879 043c FB72     	 strb r3,[r7,#11]
 279:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 
 280:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 			if (0 == --frame->tx.timeout) {
 880              	 .loc 1 280 0
 881 043e FB68     	 ldr r3,[r7,#12]
 882 0440 B3F88630 	 ldrh r3,[r3,#134]
 883 0444 9BB2     	 uxth r3,r3
 884 0446 013B     	 subs r3,r3,#1
 885 0448 9AB2     	 uxth r2,r3
 886 044a FB68     	 ldr r3,[r7,#12]
 887 044c A3F88620 	 strh r2,[r3,#134]
 888 0450 FB68     	 ldr r3,[r7,#12]
 889 0452 B3F88630 	 ldrh r3,[r3,#134]
 890 0456 9BB2     	 uxth r3,r3
 891 0458 002B     	 cmp r3,#0
 892 045a 03D1     	 bne .L40
 281:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 				nwkTxConfirm(frame, NWK_NO_ACK_STATUS);
 893              	 .loc 1 281 0
 894 045c 1021     	 movs r1,#16
 895 045e F868     	 ldr r0,[r7,#12]
 896 0460 FFF7FEFF 	 bl nwkTxConfirm
 897              	.L40:
 276:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 		if (NWK_TX_STATE_WAIT_ACK == frame->state) {
 898              	 .loc 1 276 0
 899 0464 F868     	 ldr r0,[r7,#12]
 900 0466 084B     	 ldr r3,.L44
 901 0468 9847     	 blx r3
 902              	.LVL5:
 903 046a F860     	 str r0,[r7,#12]
 904 046c FB68     	 ldr r3,[r7,#12]
 905 046e 002B     	 cmp r3,#0
 906 0470 DFD1     	 bne .L41
 282:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 			}
 283:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 		}
 284:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 	}
 285:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 
 286:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 	if (restart) {
 907              	 .loc 1 286 0
 908 0472 FB7A     	 ldrb r3,[r7,#11]
 909 0474 002B     	 cmp r3,#0
 910 0476 02D0     	 beq .L43
 287:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 		SYS_TimerStart(timer);
 911              	 .loc 1 287 0
 912 0478 7868     	 ldr r0,[r7,#4]
 913 047a 044B     	 ldr r3,.L44+4
 914 047c 9847     	 blx r3
 915              	.LVL6:
 916              	.L43:
 288:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 	}
 289:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** }
 917              	 .loc 1 289 0
 918 047e 00BF     	 nop
 919 0480 1037     	 adds r7,r7,#16
 920              	.LCFI40:
 921              	 .cfi_def_cfa_offset 8
 922 0482 BD46     	 mov sp,r7
 923              	.LCFI41:
 924              	 .cfi_def_cfa_register 13
 925              	 
 926 0484 80BD     	 pop {r7,pc}
 927              	.L45:
 928 0486 00BF     	 .align 2
 929              	.L44:
 930 0488 00000000 	 .word nwkFrameNext
 931 048c 00000000 	 .word SYS_TimerStart
 932              	 .cfi_endproc
 933              	.LFE134:
 935              	 .align 1
 936              	 .global nwkTxConfirm
 937              	 .syntax unified
 938              	 .thumb
 939              	 .thumb_func
 940              	 .fpu softvfp
 942              	nwkTxConfirm:
 943              	.LFB135:
 290:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 
 291:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** /*************************************************************************//**
 292:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** *****************************************************************************/
 293:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** void nwkTxConfirm(NwkFrame_t *frame, uint8_t status)
 294:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** {
 944              	 .loc 1 294 0
 945              	 .cfi_startproc
 946              	 
 947              	 
 948              	 
 949 0490 80B4     	 push {r7}
 950              	.LCFI42:
 951              	 .cfi_def_cfa_offset 4
 952              	 .cfi_offset 7,-4
 953 0492 83B0     	 sub sp,sp,#12
 954              	.LCFI43:
 955              	 .cfi_def_cfa_offset 16
 956 0494 00AF     	 add r7,sp,#0
 957              	.LCFI44:
 958              	 .cfi_def_cfa_register 7
 959 0496 7860     	 str r0,[r7,#4]
 960 0498 0B46     	 mov r3,r1
 961 049a FB70     	 strb r3,[r7,#3]
 295:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 	frame->state = NWK_TX_STATE_CONFIRM;
 962              	 .loc 1 295 0
 963 049c 7B68     	 ldr r3,[r7,#4]
 964 049e 1722     	 movs r2,#23
 965 04a0 1A70     	 strb r2,[r3]
 296:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 	frame->tx.status = status;
 966              	 .loc 1 296 0
 967 04a2 7B68     	 ldr r3,[r7,#4]
 968 04a4 FA78     	 ldrb r2,[r7,#3]
 969 04a6 83F88520 	 strb r2,[r3,#133]
 297:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** }
 970              	 .loc 1 297 0
 971 04aa 00BF     	 nop
 972 04ac 0C37     	 adds r7,r7,#12
 973              	.LCFI45:
 974              	 .cfi_def_cfa_offset 4
 975 04ae BD46     	 mov sp,r7
 976              	.LCFI46:
 977              	 .cfi_def_cfa_register 13
 978              	 
 979 04b0 80BC     	 pop {r7}
 980              	.LCFI47:
 981              	 .cfi_restore 7
 982              	 .cfi_def_cfa_offset 0
 983 04b2 7047     	 bx lr
 984              	 .cfi_endproc
 985              	.LFE135:
 987              	 .align 1
 988              	 .syntax unified
 989              	 .thumb
 990              	 .thumb_func
 991              	 .fpu softvfp
 993              	nwkTxDelayTimerHandler:
 994              	.LFB136:
 298:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 
 299:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** #ifdef NWK_ENABLE_SECURITY
 300:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 
 301:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** /*************************************************************************//**
 302:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** *****************************************************************************/
 303:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** void nwkTxEncryptConf(NwkFrame_t *frame)
 304:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** {
 305:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 	frame->state = NWK_TX_STATE_DELAY;
 306:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** }
 307:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 
 308:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** #endif
 309:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 
 310:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** /*************************************************************************//**
 311:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** *****************************************************************************/
 312:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** static void nwkTxDelayTimerHandler(SYS_Timer_t *timer)
 313:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** {
 995              	 .loc 1 313 0
 996              	 .cfi_startproc
 997              	 
 998              	 
 999 04b4 80B5     	 push {r7,lr}
 1000              	.LCFI48:
 1001              	 .cfi_def_cfa_offset 8
 1002              	 .cfi_offset 7,-8
 1003              	 .cfi_offset 14,-4
 1004 04b6 84B0     	 sub sp,sp,#16
 1005              	.LCFI49:
 1006              	 .cfi_def_cfa_offset 24
 1007 04b8 00AF     	 add r7,sp,#0
 1008              	.LCFI50:
 1009              	 .cfi_def_cfa_register 7
 1010 04ba 7860     	 str r0,[r7,#4]
 314:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 	NwkFrame_t *frame = NULL;
 1011              	 .loc 1 314 0
 1012 04bc 0023     	 movs r3,#0
 1013 04be FB60     	 str r3,[r7,#12]
 315:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 	bool restart = false;
 1014              	 .loc 1 315 0
 1015 04c0 0023     	 movs r3,#0
 1016 04c2 FB72     	 strb r3,[r7,#11]
 316:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 
 317:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 	while (NULL != (frame = nwkFrameNext(frame))) {
 1017              	 .loc 1 317 0
 1018 04c4 17E0     	 b .L48
 1019              	.L49:
 318:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 		if (NWK_TX_STATE_WAIT_DELAY == frame->state) {
 1020              	 .loc 1 318 0
 1021 04c6 FB68     	 ldr r3,[r7,#12]
 1022 04c8 1B78     	 ldrb r3,[r3]
 1023 04ca 112B     	 cmp r3,#17
 1024 04cc 13D1     	 bne .L48
 319:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 			restart = true;
 1025              	 .loc 1 319 0
 1026 04ce 0123     	 movs r3,#1
 1027 04d0 FB72     	 strb r3,[r7,#11]
 320:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 
 321:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 			if (0 == --frame->tx.timeout) {
 1028              	 .loc 1 321 0
 1029 04d2 FB68     	 ldr r3,[r7,#12]
 1030 04d4 B3F88630 	 ldrh r3,[r3,#134]
 1031 04d8 9BB2     	 uxth r3,r3
 1032 04da 013B     	 subs r3,r3,#1
 1033 04dc 9AB2     	 uxth r2,r3
 1034 04de FB68     	 ldr r3,[r7,#12]
 1035 04e0 A3F88620 	 strh r2,[r3,#134]
 1036 04e4 FB68     	 ldr r3,[r7,#12]
 1037 04e6 B3F88630 	 ldrh r3,[r3,#134]
 1038 04ea 9BB2     	 uxth r3,r3
 1039 04ec 002B     	 cmp r3,#0
 1040 04ee 02D1     	 bne .L48
 322:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 				frame->state = NWK_TX_STATE_SEND;
 1041              	 .loc 1 322 0
 1042 04f0 FB68     	 ldr r3,[r7,#12]
 1043 04f2 1322     	 movs r2,#19
 1044 04f4 1A70     	 strb r2,[r3]
 1045              	.L48:
 317:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 		if (NWK_TX_STATE_WAIT_DELAY == frame->state) {
 1046              	 .loc 1 317 0
 1047 04f6 F868     	 ldr r0,[r7,#12]
 1048 04f8 074B     	 ldr r3,.L52
 1049 04fa 9847     	 blx r3
 1050              	.LVL7:
 1051 04fc F860     	 str r0,[r7,#12]
 1052 04fe FB68     	 ldr r3,[r7,#12]
 1053 0500 002B     	 cmp r3,#0
 1054 0502 E0D1     	 bne .L49
 323:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 			}
 324:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 		}
 325:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 	}
 326:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 
 327:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 	if (restart) {
 1055              	 .loc 1 327 0
 1056 0504 FB7A     	 ldrb r3,[r7,#11]
 1057 0506 002B     	 cmp r3,#0
 1058 0508 02D0     	 beq .L51
 328:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 		SYS_TimerStart(timer);
 1059              	 .loc 1 328 0
 1060 050a 7868     	 ldr r0,[r7,#4]
 1061 050c 034B     	 ldr r3,.L52+4
 1062 050e 9847     	 blx r3
 1063              	.LVL8:
 1064              	.L51:
 329:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 	}
 330:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** }
 1065              	 .loc 1 330 0
 1066 0510 00BF     	 nop
 1067 0512 1037     	 adds r7,r7,#16
 1068              	.LCFI51:
 1069              	 .cfi_def_cfa_offset 8
 1070 0514 BD46     	 mov sp,r7
 1071              	.LCFI52:
 1072              	 .cfi_def_cfa_register 13
 1073              	 
 1074 0516 80BD     	 pop {r7,pc}
 1075              	.L53:
 1076              	 .align 2
 1077              	.L52:
 1078 0518 00000000 	 .word nwkFrameNext
 1079 051c 00000000 	 .word SYS_TimerStart
 1080              	 .cfi_endproc
 1081              	.LFE136:
 1083              	 .align 1
 1084              	 .syntax unified
 1085              	 .thumb
 1086              	 .thumb_func
 1087              	 .fpu softvfp
 1089              	nwkTxConvertPhyStatus:
 1090              	.LFB137:
 331:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 
 332:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** /*************************************************************************//**
 333:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** *****************************************************************************/
 334:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** static uint8_t nwkTxConvertPhyStatus(uint8_t status)
 335:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** {
 1091              	 .loc 1 335 0
 1092              	 .cfi_startproc
 1093              	 
 1094              	 
 1095              	 
 1096 0520 80B4     	 push {r7}
 1097              	.LCFI53:
 1098              	 .cfi_def_cfa_offset 4
 1099              	 .cfi_offset 7,-4
 1100 0522 83B0     	 sub sp,sp,#12
 1101              	.LCFI54:
 1102              	 .cfi_def_cfa_offset 16
 1103 0524 00AF     	 add r7,sp,#0
 1104              	.LCFI55:
 1105              	 .cfi_def_cfa_register 7
 1106 0526 0346     	 mov r3,r0
 1107 0528 FB71     	 strb r3,[r7,#7]
 336:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 	switch (status) {
 1108              	 .loc 1 336 0
 1109 052a FB79     	 ldrb r3,[r7,#7]
 1110 052c 012B     	 cmp r3,#1
 1111 052e 05D0     	 beq .L56
 1112 0530 022B     	 cmp r3,#2
 1113 0532 05D0     	 beq .L57
 1114 0534 002B     	 cmp r3,#0
 1115 0536 05D1     	 bne .L60
 337:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 	case PHY_STATUS_SUCCESS:
 338:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 		return NWK_SUCCESS_STATUS;
 1116              	 .loc 1 338 0
 1117 0538 0023     	 movs r3,#0
 1118 053a 04E0     	 b .L59
 1119              	.L56:
 339:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 
 340:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 	case PHY_STATUS_CHANNEL_ACCESS_FAILURE:
 341:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 		return NWK_PHY_CHANNEL_ACCESS_FAILURE_STATUS;
 1120              	 .loc 1 341 0
 1121 053c 2023     	 movs r3,#32
 1122 053e 02E0     	 b .L59
 1123              	.L57:
 342:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 
 343:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 	case PHY_STATUS_NO_ACK:
 344:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 		return NWK_PHY_NO_ACK_STATUS;
 1124              	 .loc 1 344 0
 1125 0540 2123     	 movs r3,#33
 1126 0542 00E0     	 b .L59
 1127              	.L60:
 345:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 
 346:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 	default:
 347:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 		return NWK_ERROR_STATUS;
 1128              	 .loc 1 347 0
 1129 0544 0123     	 movs r3,#1
 1130              	.L59:
 348:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 	}
 349:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** }
 1131              	 .loc 1 349 0
 1132 0546 1846     	 mov r0,r3
 1133 0548 0C37     	 adds r7,r7,#12
 1134              	.LCFI56:
 1135              	 .cfi_def_cfa_offset 4
 1136 054a BD46     	 mov sp,r7
 1137              	.LCFI57:
 1138              	 .cfi_def_cfa_register 13
 1139              	 
 1140 054c 80BC     	 pop {r7}
 1141              	.LCFI58:
 1142              	 .cfi_restore 7
 1143              	 .cfi_def_cfa_offset 0
 1144 054e 7047     	 bx lr
 1145              	 .cfi_endproc
 1146              	.LFE137:
 1148              	 .align 1
 1149              	 .global PHY_DataConf
 1150              	 .syntax unified
 1151              	 .thumb
 1152              	 .thumb_func
 1153              	 .fpu softvfp
 1155              	PHY_DataConf:
 1156              	.LFB138:
 350:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 
 351:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** /*************************************************************************//**
 352:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** *****************************************************************************/
 353:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** void PHY_DataConf(uint8_t status)
 354:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** {
 1157              	 .loc 1 354 0
 1158              	 .cfi_startproc
 1159              	 
 1160              	 
 1161 0550 90B5     	 push {r4,r7,lr}
 1162              	.LCFI59:
 1163              	 .cfi_def_cfa_offset 12
 1164              	 .cfi_offset 4,-12
 1165              	 .cfi_offset 7,-8
 1166              	 .cfi_offset 14,-4
 1167 0552 83B0     	 sub sp,sp,#12
 1168              	.LCFI60:
 1169              	 .cfi_def_cfa_offset 24
 1170 0554 00AF     	 add r7,sp,#0
 1171              	.LCFI61:
 1172              	 .cfi_def_cfa_register 7
 1173 0556 0346     	 mov r3,r0
 1174 0558 FB71     	 strb r3,[r7,#7]
 355:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 	nwkTxPhyActiveFrame->tx.status = nwkTxConvertPhyStatus(status);
 1175              	 .loc 1 355 0
 1176 055a 0E4B     	 ldr r3,.L62
 1177 055c 1C68     	 ldr r4,[r3]
 1178 055e FB79     	 ldrb r3,[r7,#7]
 1179 0560 1846     	 mov r0,r3
 1180 0562 FFF7DDFF 	 bl nwkTxConvertPhyStatus
 1181 0566 0346     	 mov r3,r0
 1182 0568 84F88530 	 strb r3,[r4,#133]
 356:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 	nwkTxPhyActiveFrame->state = NWK_TX_STATE_SENT;
 1183              	 .loc 1 356 0
 1184 056c 094B     	 ldr r3,.L62
 1185 056e 1B68     	 ldr r3,[r3]
 1186 0570 1522     	 movs r2,#21
 1187 0572 1A70     	 strb r2,[r3]
 357:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 	nwkTxPhyActiveFrame = NULL;
 1188              	 .loc 1 357 0
 1189 0574 074B     	 ldr r3,.L62
 1190 0576 0022     	 movs r2,#0
 1191 0578 1A60     	 str r2,[r3]
 358:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 	nwkIb.lock--;
 1192              	 .loc 1 358 0
 1193 057a 074B     	 ldr r3,.L62+4
 1194 057c B3F84830 	 ldrh r3,[r3,#72]
 1195 0580 013B     	 subs r3,r3,#1
 1196 0582 9AB2     	 uxth r2,r3
 1197 0584 044B     	 ldr r3,.L62+4
 1198 0586 A3F84820 	 strh r2,[r3,#72]
 359:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** }
 1199              	 .loc 1 359 0
 1200 058a 00BF     	 nop
 1201 058c 0C37     	 adds r7,r7,#12
 1202              	.LCFI62:
 1203              	 .cfi_def_cfa_offset 12
 1204 058e BD46     	 mov sp,r7
 1205              	.LCFI63:
 1206              	 .cfi_def_cfa_register 13
 1207              	 
 1208 0590 90BD     	 pop {r4,r7,pc}
 1209              	.L63:
 1210 0592 00BF     	 .align 2
 1211              	.L62:
 1212 0594 00000000 	 .word nwkTxPhyActiveFrame
 1213 0598 00000000 	 .word nwkIb
 1214              	 .cfi_endproc
 1215              	.LFE138:
 1217              	 .align 1
 1218              	 .global nwkTxTaskHandler
 1219              	 .syntax unified
 1220              	 .thumb
 1221              	 .thumb_func
 1222              	 .fpu softvfp
 1224              	nwkTxTaskHandler:
 1225              	.LFB139:
 360:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 
 361:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** /*************************************************************************//**
 362:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** *  @brief Tx Module task handler
 363:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** *****************************************************************************/
 364:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** void nwkTxTaskHandler(void)
 365:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** {
 1226              	 .loc 1 365 0
 1227              	 .cfi_startproc
 1228              	 
 1229              	 
 1230 059c 80B5     	 push {r7,lr}
 1231              	.LCFI64:
 1232              	 .cfi_def_cfa_offset 8
 1233              	 .cfi_offset 7,-8
 1234              	 .cfi_offset 14,-4
 1235 059e 82B0     	 sub sp,sp,#8
 1236              	.LCFI65:
 1237              	 .cfi_def_cfa_offset 16
 1238 05a0 00AF     	 add r7,sp,#0
 1239              	.LCFI66:
 1240              	 .cfi_def_cfa_register 7
 366:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 	NwkFrame_t *frame = NULL;
 1241              	 .loc 1 366 0
 1242 05a2 0023     	 movs r3,#0
 1243 05a4 7B60     	 str r3,[r7,#4]
 367:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 
 368:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 	while (NULL != (frame = nwkFrameNext(frame))) {
 1244              	 .loc 1 368 0
 1245 05a6 7BE0     	 b .L65
 1246              	.L83:
 369:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 		switch (frame->state) {
 1247              	 .loc 1 369 0
 1248 05a8 7B68     	 ldr r3,[r7,#4]
 1249 05aa 1B78     	 ldrb r3,[r3]
 1250 05ac 123B     	 subs r3,r3,#18
 1251 05ae 052B     	 cmp r3,#5
 1252 05b0 75D8     	 bhi .L84
 1253 05b2 01A2     	 adr r2,.L68
 1254 05b4 52F823F0 	 ldr pc,[r2,r3,lsl#2]
 1255              	 .p2align 2
 1256              	.L68:
 1257 05b8 D1050000 	 .word .L67+1
 1258 05bc F3050000 	 .word .L69+1
 1259 05c0 A1060000 	 .word .L65+1
 1260 05c4 29060000 	 .word .L71+1
 1261 05c8 A1060000 	 .word .L65+1
 1262 05cc 81060000 	 .word .L73+1
 1263              	 .p2align 1
 1264              	.L67:
 370:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** #ifdef NWK_ENABLE_SECURITY
 371:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 		case NWK_TX_STATE_ENCRYPT:
 372:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 		{
 373:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 			nwkSecurityProcess(frame, true);
 374:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 		}
 375:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 		break;
 376:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** #endif
 377:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 
 378:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 		case NWK_TX_STATE_DELAY:
 379:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 		{
 380:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 			if (frame->tx.timeout > 0) {
 1265              	 .loc 1 380 0
 1266 05d0 7B68     	 ldr r3,[r7,#4]
 1267 05d2 B3F88630 	 ldrh r3,[r3,#134]
 1268 05d6 9BB2     	 uxth r3,r3
 1269 05d8 002B     	 cmp r3,#0
 1270 05da 06D0     	 beq .L74
 381:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 				frame->state = NWK_TX_STATE_WAIT_DELAY;
 1271              	 .loc 1 381 0
 1272 05dc 7B68     	 ldr r3,[r7,#4]
 1273 05de 1122     	 movs r2,#17
 1274 05e0 1A70     	 strb r2,[r3]
 382:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 				SYS_TimerStart(&nwkTxDelayTimer);
 1275              	 .loc 1 382 0
 1276 05e2 3548     	 ldr r0,.L85
 1277 05e4 354B     	 ldr r3,.L85+4
 1278 05e6 9847     	 blx r3
 1279              	.LVL9:
 1280 05e8 5AE0     	 b .L65
 1281              	.L74:
 383:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 			} else {
 384:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 				frame->state = NWK_TX_STATE_SEND;
 1282              	 .loc 1 384 0
 1283 05ea 7B68     	 ldr r3,[r7,#4]
 1284 05ec 1322     	 movs r2,#19
 1285 05ee 1A70     	 strb r2,[r3]
 385:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 			}
 386:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 		}
 387:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 		break;
 1286              	 .loc 1 387 0
 1287 05f0 56E0     	 b .L65
 1288              	.L69:
 388:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 
 389:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 		case NWK_TX_STATE_SEND:
 390:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 		{
 391:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 			if (NULL == nwkTxPhyActiveFrame) {
 1289              	 .loc 1 391 0
 1290 05f2 334B     	 ldr r3,.L85+8
 1291 05f4 1B68     	 ldr r3,[r3]
 1292 05f6 002B     	 cmp r3,#0
 1293 05f8 52D1     	 bne .L65
 392:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 				nwkTxPhyActiveFrame = frame;
 1294              	 .loc 1 392 0
 1295 05fa 314A     	 ldr r2,.L85+8
 1296 05fc 7B68     	 ldr r3,[r7,#4]
 1297 05fe 1360     	 str r3,[r2]
 393:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 				frame->state = NWK_TX_STATE_WAIT_CONF;
 1298              	 .loc 1 393 0
 1299 0600 7B68     	 ldr r3,[r7,#4]
 1300 0602 1422     	 movs r2,#20
 1301 0604 1A70     	 strb r2,[r3]
 394:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 				PHY_DataReq(frame->data, frame->size);
 1302              	 .loc 1 394 0
 1303 0606 7B68     	 ldr r3,[r7,#4]
 1304 0608 9A1C     	 adds r2,r3,#2
 1305 060a 7B68     	 ldr r3,[r7,#4]
 1306 060c 5B78     	 ldrb r3,[r3,#1]
 1307 060e 1946     	 mov r1,r3
 1308 0610 1046     	 mov r0,r2
 1309 0612 2C4B     	 ldr r3,.L85+12
 1310 0614 9847     	 blx r3
 1311              	.LVL10:
 395:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 				nwkIb.lock++;
 1312              	 .loc 1 395 0
 1313 0616 2C4B     	 ldr r3,.L85+16
 1314 0618 B3F84830 	 ldrh r3,[r3,#72]
 1315 061c 0133     	 adds r3,r3,#1
 1316 061e 9AB2     	 uxth r2,r3
 1317 0620 294B     	 ldr r3,.L85+16
 1318 0622 A3F84820 	 strh r2,[r3,#72]
 396:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 			}
 397:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 		}
 398:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 		break;
 1319              	 .loc 1 398 0
 1320 0626 3BE0     	 b .L65
 1321              	.L71:
 399:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 
 400:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 		case NWK_TX_STATE_WAIT_CONF:
 401:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 			break;
 402:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 
 403:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 		case NWK_TX_STATE_SENT:
 404:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 		{
 405:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 			if (NWK_SUCCESS_STATUS == frame->tx.status) {
 1322              	 .loc 1 405 0
 1323 0628 7B68     	 ldr r3,[r7,#4]
 1324 062a 93F88530 	 ldrb r3,[r3,#133]
 1325 062e 002B     	 cmp r3,#0
 1326 0630 22D1     	 bne .L77
 406:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 				if (frame->header.nwkSrcAddr == nwkIb.addr &&
 1327              	 .loc 1 406 0
 1328 0632 7B68     	 ldr r3,[r7,#4]
 1329 0634 B3F80D30 	 ldrh r3,[r3,#13]
 1330 0638 9AB2     	 uxth r2,r3
 1331 063a 234B     	 ldr r3,.L85+16
 1332 063c 1B88     	 ldrh r3,[r3]
 1333 063e 9A42     	 cmp r2,r3
 1334 0640 16D1     	 bne .L78
 1335              	 .loc 1 406 0 is_stmt 0 discriminator 1
 1336 0642 7B68     	 ldr r3,[r7,#4]
 1337 0644 DB7A     	 ldrb r3,[r3,#11]
 1338 0646 03F00103 	 and r3,r3,#1
 1339 064a DBB2     	 uxtb r3,r3
 1340 064c 002B     	 cmp r3,#0
 1341 064e 0FD0     	 beq .L78
 407:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 						frame->header.nwkFcf.
 408:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 						ackRequest) {
 409:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 					frame->state = NWK_TX_STATE_WAIT_ACK;
 1342              	 .loc 1 409 0 is_stmt 1
 1343 0650 7B68     	 ldr r3,[r7,#4]
 1344 0652 1622     	 movs r2,#22
 1345 0654 1A70     	 strb r2,[r3]
 410:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 					frame->tx.timeout = NWK_ACK_WAIT_TIME /
 1346              	 .loc 1 410 0
 1347 0656 7B68     	 ldr r3,[r7,#4]
 1348 0658 0022     	 movs r2,#0
 1349 065a 42F01502 	 orr r2,r2,#21
 1350 065e 83F88620 	 strb r2,[r3,#134]
 1351 0662 0022     	 movs r2,#0
 1352 0664 83F88720 	 strb r2,[r3,#135]
 411:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 							NWK_TX_ACK_WAIT_TIMER_INTERVAL
 412:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 							+ 1;
 413:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 					SYS_TimerStart(&nwkTxAckWaitTimer);
 1353              	 .loc 1 413 0
 1354 0668 1848     	 ldr r0,.L85+20
 1355 066a 144B     	 ldr r3,.L85+4
 1356 066c 9847     	 blx r3
 1357              	.LVL11:
 1358 066e 06E0     	 b .L80
 1359              	.L78:
 414:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 				} else {
 415:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 					
 416:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 					frame->state = NWK_TX_STATE_CONFIRM;
 1360              	 .loc 1 416 0
 1361 0670 7B68     	 ldr r3,[r7,#4]
 1362 0672 1722     	 movs r2,#23
 1363 0674 1A70     	 strb r2,[r3]
 1364 0676 13E0     	 b .L65
 1365              	.L77:
 417:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 				}
 418:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 			} else {
 419:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 				frame->state = NWK_TX_STATE_CONFIRM;
 1366              	 .loc 1 419 0
 1367 0678 7B68     	 ldr r3,[r7,#4]
 1368 067a 1722     	 movs r2,#23
 1369 067c 1A70     	 strb r2,[r3]
 1370              	.L80:
 420:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 			}
 421:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 		}
 422:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 		break;
 1371              	 .loc 1 422 0 discriminator 1
 1372 067e 0FE0     	 b .L65
 1373              	.L73:
 423:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 
 424:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 		case NWK_TX_STATE_WAIT_ACK:
 425:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 			break;
 426:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 
 427:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 		case NWK_TX_STATE_CONFIRM:
 428:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 		{
 429:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** #ifdef NWK_ENABLE_ROUTING
 430:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 			nwkRouteFrameSent(frame);
 431:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** #endif
 432:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 			if (NULL == frame->tx.confirm) {
 1374              	 .loc 1 432 0
 1375 0680 7B68     	 ldr r3,[r7,#4]
 1376 0682 D3F88930 	 ldr r3,[r3,#137]
 1377 0686 002B     	 cmp r3,#0
 1378 0688 03D1     	 bne .L81
 433:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 				nwkFrameFree(frame);
 1379              	 .loc 1 433 0
 1380 068a 7868     	 ldr r0,[r7,#4]
 1381 068c 104B     	 ldr r3,.L85+24
 1382 068e 9847     	 blx r3
 1383              	.LVL12:
 1384 0690 06E0     	 b .L65
 1385              	.L81:
 434:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 			} else {
 435:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 				frame->tx.confirm(frame);
 1386              	 .loc 1 435 0
 1387 0692 7B68     	 ldr r3,[r7,#4]
 1388 0694 D3F88930 	 ldr r3,[r3,#137]
 1389 0698 7868     	 ldr r0,[r7,#4]
 1390 069a 9847     	 blx r3
 1391              	.LVL13:
 436:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 			}
 437:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 		}
 438:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 		break;
 1392              	 .loc 1 438 0
 1393 069c 00E0     	 b .L65
 1394              	.L84:
 439:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 
 440:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 		default:
 441:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 			break;
 1395              	 .loc 1 441 0
 1396 069e 00BF     	 nop
 1397              	.L65:
 368:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 		switch (frame->state) {
 1398              	 .loc 1 368 0
 1399 06a0 7868     	 ldr r0,[r7,#4]
 1400 06a2 0C4B     	 ldr r3,.L85+28
 1401 06a4 9847     	 blx r3
 1402              	.LVL14:
 1403 06a6 7860     	 str r0,[r7,#4]
 1404 06a8 7B68     	 ldr r3,[r7,#4]
 1405 06aa 002B     	 cmp r3,#0
 1406 06ac 7FF47CAF 	 bne .L83
 442:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 		}
 443:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** 	}
 444:../../../stack/LwMesh/TDMA/nwk/src/nwkTx.c **** }
 1407              	 .loc 1 444 0
 1408 06b0 00BF     	 nop
 1409 06b2 0837     	 adds r7,r7,#8
 1410              	.LCFI67:
 1411              	 .cfi_def_cfa_offset 8
 1412 06b4 BD46     	 mov sp,r7
 1413              	.LCFI68:
 1414              	 .cfi_def_cfa_register 13
 1415              	 
 1416 06b6 80BD     	 pop {r7,pc}
 1417              	.L86:
 1418              	 .align 2
 1419              	.L85:
 1420 06b8 00000000 	 .word nwkTxDelayTimer
 1421 06bc 00000000 	 .word SYS_TimerStart
 1422 06c0 00000000 	 .word nwkTxPhyActiveFrame
 1423 06c4 00000000 	 .word PHY_DataReq
 1424 06c8 00000000 	 .word nwkIb
 1425 06cc 00000000 	 .word nwkTxAckWaitTimer
 1426 06d0 00000000 	 .word nwkFrameFree
 1427 06d4 00000000 	 .word nwkFrameNext
 1428              	 .cfi_endproc
 1429              	.LFE139:
 1431              	.Letext0:
 1432              	 .file 2 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\arm\\arm-gnu-toolchain\\arm-none-eabi\\include\\machine\\_default_types.h"
 1433              	 .file 3 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\arm\\arm-gnu-toolchain\\arm-none-eabi\\include\\sys\\lock.h"
 1434              	 .file 4 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\arm\\arm-gnu-toolchain\\arm-none-eabi\\include\\sys\\_types.h"
 1435              	 .file 5 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\arm\\arm-gnu-toolchain\\lib\\gcc\\arm-none-eabi\\6.3.1\\include\\stddef.h"
 1436              	 .file 6 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\arm\\arm-gnu-toolchain\\arm-none-eabi\\include\\sys\\reent.h"
 1437              	 .file 7 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\arm\\arm-gnu-toolchain\\arm-none-eabi\\include\\stdlib.h"
 1438              	 .file 8 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\arm\\arm-gnu-toolchain\\arm-none-eabi\\include\\sys\\_stdint.h"
 1439              	 .file 9 "../../../platform/thirdparty/CMSIS/include/core_cm4.h"
 1440              	 .file 10 "../../../platform/sam/utils/cmsis/sam4l/source/templates/system_sam4l.h"
 1441              	 .file 11 "../../../platform/common/utils/interrupt/interrupt_sam_nvic.h"
 1442              	 .file 12 "../../../platform/sam/utils/compiler.h"
 1443              	 .file 13 "../../../platform/common/services/usb/usb_protocol.h"
 1444              	 .file 14 "../../../platform/common/services/usb/udc/udi.h"
 1445              	 .file 15 "../../../platform/common/services/usb/udc/udc_desc.h"
 1446              	 .file 16 "../../../platform/common/services/usb/udc/udd.h"
 1447              	 .file 17 "../../../platform/common/services/usb/class/cdc/device/udi_cdc.h"
 1448              	 .file 18 "../../../platform/common/utils/stdio/stdio_usb/stdio_usb.h"
 1449              	 .file 19 "../../../stack/LwMesh/TDMA/sys/inc/sysTimer.h"
 1450              	 .file 20 "../../../stack/LwMesh/TDMA/nwk/inc/nwkFrame.h"
 1451              	 .file 21 "../../../stack/LwMesh/TDMA/nwk/inc/nwkRx.h"
 1452              	 .file 22 "../../../stack/LwMesh/TDMA/phy/AT86RF233/inc/phy.h"
 1453              	 .file 23 "../../../stack/LwMesh/TDMA/nwk/inc/nwkDataReq.h"
 1454              	 .file 24 "../../../stack/LwMesh/TDMA/nwk/inc/nwk.h"
 1455              	 .file 25 "../../../stack/LwMesh/TDMA/nwk/inc/nwkTx.h"
 1456              	 .file 26 "../../../stack/LwMesh/TDMA/nwk/inc/nwkCommand.h"
 1457              	 .file 27 "config/config.h"
 1458              	 .file 28 "<built-in>"
DEFINED SYMBOLS
                            *ABS*:00000000 nwkTx.c
    {standard input}:16     .bss.cpu_irq_critical_section_counter:00000000 $d
    {standard input}:19     .bss.cpu_irq_critical_section_counter:00000000 cpu_irq_critical_section_counter
    {standard input}:24     .bss.cpu_irq_prev_interrupt_state:00000000 cpu_irq_prev_interrupt_state
    {standard input}:25     .bss.cpu_irq_prev_interrupt_state:00000000 $d
                            *COM*:00000001 n
    {standard input}:28     .bss.tTS:00000000 $d
    {standard input}:31     .bss.tTS:00000000 tTS
    {standard input}:34     .bss.nwkTxPhyActiveFrame:00000000 $d
    {standard input}:37     .bss.nwkTxPhyActiveFrame:00000000 nwkTxPhyActiveFrame
    {standard input}:40     .bss.nwkTxAckWaitTimer:00000000 $d
    {standard input}:43     .bss.nwkTxAckWaitTimer:00000000 nwkTxAckWaitTimer
    {standard input}:46     .bss.nwkTxDelayTimer:00000000 $d
    {standard input}:49     .bss.nwkTxDelayTimer:00000000 nwkTxDelayTimer
    {standard input}:52     .text:00000000 $t
    {standard input}:59     .text:00000000 nwkTxInit
    {standard input}:116    .text:00000038 $d
    {standard input}:845    .text:00000420 nwkTxAckWaitTimerHandler
    {standard input}:993    .text:000004b4 nwkTxDelayTimerHandler
    {standard input}:124    .text:0000004c $t
    {standard input}:131    .text:0000004c nwkTxBeaconFrame
    {standard input}:212    .text:000000b8 $d
    {standard input}:216    .text:000000bc $t
    {standard input}:223    .text:000000bc nwkTxBeaconFrameLLDN
    {standard input}:311    .text:00000134 $d
    {standard input}:315    .text:00000138 $t
    {standard input}:322    .text:00000138 nwkTxMacCommandFrameLLDN
    {standard input}:439    .text:000001e0 $d
    {standard input}:443    .text:000001e4 $t
    {standard input}:450    .text:000001e4 nwkTxFrame
    {standard input}:593    .text:000002d0 $d
    {standard input}:598    .text:000002d8 $t
    {standard input}:605    .text:000002d8 nwkTxBroadcastFrame
    {standard input}:736    .text:000003ac $d
    {standard input}:743    .text:000003bc $t
    {standard input}:750    .text:000003bc nwkTxAckReceived
    {standard input}:835    .text:0000041c $d
    {standard input}:839    .text:00000420 $t
    {standard input}:942    .text:00000490 nwkTxConfirm
    {standard input}:930    .text:00000488 $d
    {standard input}:935    .text:00000490 $t
    {standard input}:1078   .text:00000518 $d
    {standard input}:1083   .text:00000520 $t
    {standard input}:1089   .text:00000520 nwkTxConvertPhyStatus
    {standard input}:1155   .text:00000550 PHY_DataConf
    {standard input}:1212   .text:00000594 $d
    {standard input}:1217   .text:0000059c $t
    {standard input}:1224   .text:0000059c nwkTxTaskHandler
    {standard input}:1257   .text:000005b8 $d
    {standard input}:1263   .text:000005d0 $t
    {standard input}:1420   .text:000006b8 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
nwkIb
rand
nwkFrameAlloc
memcpy
nwkFrameNext
SYS_TimerStart
PHY_DataReq
nwkFrameFree
