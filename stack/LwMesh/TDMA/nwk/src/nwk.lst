   1               		.file	"nwk.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__RAMPZ__ = 0x3b
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
   8               		.text
   9               	.Ltext0:
  10               		.cfi_sections	.debug_frame
  11               		.comm	nwkIb,40,1
  12               	.global	NWK_Init
  14               	NWK_Init:
  15               	.LFB66:
  16               		.file 1 "../../../stack/LwMesh/TDMA/nwk/src/nwk.c"
   1:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** /**
   2:../../../stack/LwMesh/TDMA/nwk/src/nwk.c ****  * \file nwk.c
   3:../../../stack/LwMesh/TDMA/nwk/src/nwk.c ****  *
   4:../../../stack/LwMesh/TDMA/nwk/src/nwk.c ****  * \brief Network layer management functions implementation
   5:../../../stack/LwMesh/TDMA/nwk/src/nwk.c ****  *
   6:../../../stack/LwMesh/TDMA/nwk/src/nwk.c ****  * Copyright (C) 2014 Atmel Corporation. All rights reserved.
   7:../../../stack/LwMesh/TDMA/nwk/src/nwk.c ****  *
   8:../../../stack/LwMesh/TDMA/nwk/src/nwk.c ****  * \asf_license_start
   9:../../../stack/LwMesh/TDMA/nwk/src/nwk.c ****  *
  10:../../../stack/LwMesh/TDMA/nwk/src/nwk.c ****  * Redistribution and use in source and binary forms, with or without
  11:../../../stack/LwMesh/TDMA/nwk/src/nwk.c ****  * modification, are permitted provided that the following conditions are met:
  12:../../../stack/LwMesh/TDMA/nwk/src/nwk.c ****  *
  13:../../../stack/LwMesh/TDMA/nwk/src/nwk.c ****  * 1. Redistributions of source code must retain the above copyright notice,
  14:../../../stack/LwMesh/TDMA/nwk/src/nwk.c ****  *    this list of conditions and the following disclaimer.
  15:../../../stack/LwMesh/TDMA/nwk/src/nwk.c ****  *
  16:../../../stack/LwMesh/TDMA/nwk/src/nwk.c ****  * 2. Redistributions in binary form must reproduce the above copyright notice,
  17:../../../stack/LwMesh/TDMA/nwk/src/nwk.c ****  *    this list of conditions and the following disclaimer in the documentation
  18:../../../stack/LwMesh/TDMA/nwk/src/nwk.c ****  *    and/or other materials provided with the distribution.
  19:../../../stack/LwMesh/TDMA/nwk/src/nwk.c ****  *
  20:../../../stack/LwMesh/TDMA/nwk/src/nwk.c ****  * 3. The name of Atmel may not be used to endorse or promote products derived
  21:../../../stack/LwMesh/TDMA/nwk/src/nwk.c ****  *    from this software without specific prior written permission.
  22:../../../stack/LwMesh/TDMA/nwk/src/nwk.c ****  *
  23:../../../stack/LwMesh/TDMA/nwk/src/nwk.c ****  * 4. This software may only be redistributed and used in connection with an
  24:../../../stack/LwMesh/TDMA/nwk/src/nwk.c ****  *    Atmel microcontroller product.
  25:../../../stack/LwMesh/TDMA/nwk/src/nwk.c ****  *
  26:../../../stack/LwMesh/TDMA/nwk/src/nwk.c ****  * THIS SOFTWARE IS PROVIDED BY ATMEL "AS IS" AND ANY EXPRESS OR IMPLIED
  27:../../../stack/LwMesh/TDMA/nwk/src/nwk.c ****  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
  28:../../../stack/LwMesh/TDMA/nwk/src/nwk.c ****  * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE
  29:../../../stack/LwMesh/TDMA/nwk/src/nwk.c ****  * EXPRESSLY AND SPECIFICALLY DISCLAIMED. IN NO EVENT SHALL ATMEL BE LIABLE FOR
  30:../../../stack/LwMesh/TDMA/nwk/src/nwk.c ****  * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  31:../../../stack/LwMesh/TDMA/nwk/src/nwk.c ****  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
  32:../../../stack/LwMesh/TDMA/nwk/src/nwk.c ****  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
  33:../../../stack/LwMesh/TDMA/nwk/src/nwk.c ****  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
  34:../../../stack/LwMesh/TDMA/nwk/src/nwk.c ****  * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
  35:../../../stack/LwMesh/TDMA/nwk/src/nwk.c ****  * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  36:../../../stack/LwMesh/TDMA/nwk/src/nwk.c ****  * POSSIBILITY OF SUCH DAMAGE.
  37:../../../stack/LwMesh/TDMA/nwk/src/nwk.c ****  *
  38:../../../stack/LwMesh/TDMA/nwk/src/nwk.c ****  * \asf_license_stop
  39:../../../stack/LwMesh/TDMA/nwk/src/nwk.c ****  *
  40:../../../stack/LwMesh/TDMA/nwk/src/nwk.c ****  *
  41:../../../stack/LwMesh/TDMA/nwk/src/nwk.c ****  */
  42:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 
  43:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** /*
  44:../../../stack/LwMesh/TDMA/nwk/src/nwk.c ****  * Copyright (c) 2014, Atmel Corporation All rights reserved.
  45:../../../stack/LwMesh/TDMA/nwk/src/nwk.c ****  *
  46:../../../stack/LwMesh/TDMA/nwk/src/nwk.c ****  * Licensed under Atmel's Limited License Agreement --> EULA.txt
  47:../../../stack/LwMesh/TDMA/nwk/src/nwk.c ****  */
  48:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 
  49:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** /*- Includes ---------------------------------------------------------------*/
  50:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** #include <stdlib.h>
  51:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** #include <stdint.h>
  52:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** #include <stdbool.h>
  53:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** #include <string.h>
  54:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** #include "phy.h"
  55:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** #include "sysConfig.h"
  56:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** #include "nwkRx.h"
  57:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** #include "nwkTx.h"
  58:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** #include "nwkGroup.h"
  59:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** #include "nwkFrame.h"
  60:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** #include "nwkRoute.h"
  61:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** #include "nwkSecurity.h"
  62:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** #include "nwkRouteDiscovery.h"
  63:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 
  64:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** /*- Variables --------------------------------------------------------------*/
  65:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** NwkIb_t nwkIb;
  66:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 
  67:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** /*- Implementations --------------------------------------------------------*/
  68:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 
  69:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** /*************************************************************************//**
  70:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** *  @brief Initializes all network layer modules
  71:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** *****************************************************************************/
  72:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** void NWK_Init(void)
  73:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** {
  17               		.loc 1 73 0
  18               		.cfi_startproc
  19 0000 CF93      		push r28
  20               	.LCFI0:
  21               		.cfi_def_cfa_offset 3
  22               		.cfi_offset 28, -2
  23 0002 DF93      		push r29
  24               	.LCFI1:
  25               		.cfi_def_cfa_offset 4
  26               		.cfi_offset 29, -3
  27 0004 1F92      		push __zero_reg__
  28               	.LCFI2:
  29               		.cfi_def_cfa_offset 5
  30 0006 CDB7      		in r28,__SP_L__
  31 0008 DEB7      		in r29,__SP_H__
  32               	.LCFI3:
  33               		.cfi_def_cfa_register 28
  34               	/* prologue: function */
  35               	/* frame size = 1 */
  36               	/* stack size = 3 */
  37               	.L__stack_usage = 3
  74:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 	nwkIb.nwkSeqNum = 0;
  38               		.loc 1 74 0
  39 000a 1092 0000 		sts nwkIb+4,__zero_reg__
  75:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 	nwkIb.macSeqNum = 0;
  40               		.loc 1 75 0
  41 000e 1092 0000 		sts nwkIb+5,__zero_reg__
  76:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 	nwkIb.addr = 0;
  42               		.loc 1 76 0
  43 0012 1092 0000 		sts nwkIb+1,__zero_reg__
  44 0016 1092 0000 		sts nwkIb,__zero_reg__
  77:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 	nwkIb.lock = 0;
  45               		.loc 1 77 0
  46 001a 1092 0000 		sts nwkIb+38+1,__zero_reg__
  47 001e 1092 0000 		sts nwkIb+38,__zero_reg__
  48               	.LBB2:
  78:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 
  79:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 	for (uint8_t i = 0; i < NWK_ENDPOINTS_AMOUNT; i++) {
  49               		.loc 1 79 0
  50 0022 1982      		std Y+1,__zero_reg__
  51 0024 00C0      		rjmp .L2
  52               	.L3:
  80:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 		nwkIb.endpoint[i] = NULL;
  53               		.loc 1 80 0 discriminator 3
  54 0026 8981      		ldd r24,Y+1
  55 0028 882F      		mov r24,r24
  56 002a 90E0      		ldi r25,0
  57 002c 0396      		adiw r24,3
  58 002e 880F      		lsl r24
  59 0030 991F      		rol r25
  60 0032 8050      		subi r24,lo8(-(nwkIb))
  61 0034 9040      		sbci r25,hi8(-(nwkIb))
  62 0036 FC01      		movw r30,r24
  63 0038 1182      		std Z+1,__zero_reg__
  64 003a 1082      		st Z,__zero_reg__
  79:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 		nwkIb.endpoint[i] = NULL;
  65               		.loc 1 79 0 discriminator 3
  66 003c 8981      		ldd r24,Y+1
  67 003e 8F5F      		subi r24,lo8(-(1))
  68 0040 8983      		std Y+1,r24
  69               	.L2:
  79:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 		nwkIb.endpoint[i] = NULL;
  70               		.loc 1 79 0 is_stmt 0 discriminator 1
  71 0042 8981      		ldd r24,Y+1
  72 0044 8031      		cpi r24,lo8(16)
  73 0046 00F0      		brlo .L3
  74               	.LBE2:
  81:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 	}
  82:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 
  83:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 	nwkTxInit();
  75               		.loc 1 83 0 is_stmt 1
  76 0048 0E94 0000 		call nwkTxInit
  84:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 	nwkRxInit();
  77               		.loc 1 84 0
  78 004c 0E94 0000 		call nwkRxInit
  85:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 	nwkFrameInit();
  79               		.loc 1 85 0
  80 0050 0E94 0000 		call nwkFrameInit
  86:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 	nwkDataReqInit();
  81               		.loc 1 86 0
  82 0054 0E94 0000 		call nwkDataReqInit
  87:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 
  88:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** #ifdef NWK_ENABLE_ROUTING
  89:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 	nwkRouteInit();
  90:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** #endif
  91:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 
  92:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** #ifdef NWK_ENABLE_SECURITY
  93:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 	nwkSecurityInit();
  94:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** #endif
  95:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 
  96:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** #ifdef NWK_ENABLE_MULTICAST
  97:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 	nwkGroupInit();
  83               		.loc 1 97 0
  84 0058 0E94 0000 		call nwkGroupInit
  98:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** #endif
  99:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 
 100:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** #ifdef NWK_ENABLE_ROUTE_DISCOVERY
 101:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 	nwkRouteDiscoveryInit();
 102:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** #endif
 103:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** }
  85               		.loc 1 103 0
  86 005c 0000      		nop
  87               	/* epilogue start */
  88 005e 0F90      		pop __tmp_reg__
  89 0060 DF91      		pop r29
  90 0062 CF91      		pop r28
  91 0064 0895      		ret
  92               		.cfi_endproc
  93               	.LFE66:
  95               	.global	NWK_SetAddr
  97               	NWK_SetAddr:
  98               	.LFB67:
 104:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 
 105:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** /*************************************************************************//**
 106:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** *  @brief Sets network address of the node
 107:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** *  @param[in] addr Adddress to set
 108:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** *****************************************************************************/
 109:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** void NWK_SetAddr(uint16_t addr)
 110:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** {
  99               		.loc 1 110 0
 100               		.cfi_startproc
 101 0066 CF93      		push r28
 102               	.LCFI4:
 103               		.cfi_def_cfa_offset 3
 104               		.cfi_offset 28, -2
 105 0068 DF93      		push r29
 106               	.LCFI5:
 107               		.cfi_def_cfa_offset 4
 108               		.cfi_offset 29, -3
 109 006a 00D0      		rcall .
 110               	.LCFI6:
 111               		.cfi_def_cfa_offset 6
 112 006c CDB7      		in r28,__SP_L__
 113 006e DEB7      		in r29,__SP_H__
 114               	.LCFI7:
 115               		.cfi_def_cfa_register 28
 116               	/* prologue: function */
 117               	/* frame size = 2 */
 118               	/* stack size = 4 */
 119               	.L__stack_usage = 4
 120 0070 9A83      		std Y+2,r25
 121 0072 8983      		std Y+1,r24
 111:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 	nwkIb.addr = addr;
 122               		.loc 1 111 0
 123 0074 8981      		ldd r24,Y+1
 124 0076 9A81      		ldd r25,Y+2
 125 0078 9093 0000 		sts nwkIb+1,r25
 126 007c 8093 0000 		sts nwkIb,r24
 112:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 	PHY_SetShortAddr(addr);
 127               		.loc 1 112 0
 128 0080 8981      		ldd r24,Y+1
 129 0082 9A81      		ldd r25,Y+2
 130 0084 0E94 0000 		call PHY_SetShortAddr
 113:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** }
 131               		.loc 1 113 0
 132 0088 0000      		nop
 133               	/* epilogue start */
 134 008a 0F90      		pop __tmp_reg__
 135 008c 0F90      		pop __tmp_reg__
 136 008e DF91      		pop r29
 137 0090 CF91      		pop r28
 138 0092 0895      		ret
 139               		.cfi_endproc
 140               	.LFE67:
 142               	.global	NWK_SetPanId
 144               	NWK_SetPanId:
 145               	.LFB68:
 114:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 
 115:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** /*************************************************************************//**
 116:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** *  @brief Sets network identifier (PAN) of the node
 117:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** *  @param[in] panId PAN ID to set
 118:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** *****************************************************************************/
 119:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** void NWK_SetPanId(uint16_t panId)
 120:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** {
 146               		.loc 1 120 0
 147               		.cfi_startproc
 148 0094 CF93      		push r28
 149               	.LCFI8:
 150               		.cfi_def_cfa_offset 3
 151               		.cfi_offset 28, -2
 152 0096 DF93      		push r29
 153               	.LCFI9:
 154               		.cfi_def_cfa_offset 4
 155               		.cfi_offset 29, -3
 156 0098 00D0      		rcall .
 157               	.LCFI10:
 158               		.cfi_def_cfa_offset 6
 159 009a CDB7      		in r28,__SP_L__
 160 009c DEB7      		in r29,__SP_H__
 161               	.LCFI11:
 162               		.cfi_def_cfa_register 28
 163               	/* prologue: function */
 164               	/* frame size = 2 */
 165               	/* stack size = 4 */
 166               	.L__stack_usage = 4
 167 009e 9A83      		std Y+2,r25
 168 00a0 8983      		std Y+1,r24
 121:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 	nwkIb.panId = panId;
 169               		.loc 1 121 0
 170 00a2 8981      		ldd r24,Y+1
 171 00a4 9A81      		ldd r25,Y+2
 172 00a6 9093 0000 		sts nwkIb+2+1,r25
 173 00aa 8093 0000 		sts nwkIb+2,r24
 122:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 	PHY_SetPanId(panId);
 174               		.loc 1 122 0
 175 00ae 8981      		ldd r24,Y+1
 176 00b0 9A81      		ldd r25,Y+2
 177 00b2 0E94 0000 		call PHY_SetPanId
 123:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** }
 178               		.loc 1 123 0
 179 00b6 0000      		nop
 180               	/* epilogue start */
 181 00b8 0F90      		pop __tmp_reg__
 182 00ba 0F90      		pop __tmp_reg__
 183 00bc DF91      		pop r29
 184 00be CF91      		pop r28
 185 00c0 0895      		ret
 186               		.cfi_endproc
 187               	.LFE68:
 189               	.global	NWK_OpenEndpoint
 191               	NWK_OpenEndpoint:
 192               	.LFB69:
 124:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 
 125:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** /*************************************************************************//**
 126:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** *  @brief Registers callback @a ind for the endpoint @a endpoint
 127:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** *  @param[in] id Endpoint index (1-15)
 128:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** *  @param[in] handler Pointer to the callback function
 129:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** *****************************************************************************/
 130:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** void NWK_OpenEndpoint(uint8_t id, bool (*handler)(NWK_DataInd_t *ind))
 131:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** {
 193               		.loc 1 131 0
 194               		.cfi_startproc
 195 00c2 CF93      		push r28
 196               	.LCFI12:
 197               		.cfi_def_cfa_offset 3
 198               		.cfi_offset 28, -2
 199 00c4 DF93      		push r29
 200               	.LCFI13:
 201               		.cfi_def_cfa_offset 4
 202               		.cfi_offset 29, -3
 203 00c6 00D0      		rcall .
 204 00c8 1F92      		push __zero_reg__
 205               	.LCFI14:
 206               		.cfi_def_cfa_offset 7
 207 00ca CDB7      		in r28,__SP_L__
 208 00cc DEB7      		in r29,__SP_H__
 209               	.LCFI15:
 210               		.cfi_def_cfa_register 28
 211               	/* prologue: function */
 212               	/* frame size = 3 */
 213               	/* stack size = 5 */
 214               	.L__stack_usage = 5
 215 00ce 8983      		std Y+1,r24
 216 00d0 7B83      		std Y+3,r23
 217 00d2 6A83      		std Y+2,r22
 132:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 	nwkIb.endpoint[id] = handler;
 218               		.loc 1 132 0
 219 00d4 8981      		ldd r24,Y+1
 220 00d6 882F      		mov r24,r24
 221 00d8 90E0      		ldi r25,0
 222 00da 0396      		adiw r24,3
 223 00dc 880F      		lsl r24
 224 00de 991F      		rol r25
 225 00e0 8050      		subi r24,lo8(-(nwkIb))
 226 00e2 9040      		sbci r25,hi8(-(nwkIb))
 227 00e4 2A81      		ldd r18,Y+2
 228 00e6 3B81      		ldd r19,Y+3
 229 00e8 FC01      		movw r30,r24
 230 00ea 3183      		std Z+1,r19
 231 00ec 2083      		st Z,r18
 133:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** }
 232               		.loc 1 133 0
 233 00ee 0000      		nop
 234               	/* epilogue start */
 235 00f0 0F90      		pop __tmp_reg__
 236 00f2 0F90      		pop __tmp_reg__
 237 00f4 0F90      		pop __tmp_reg__
 238 00f6 DF91      		pop r29
 239 00f8 CF91      		pop r28
 240 00fa 0895      		ret
 241               		.cfi_endproc
 242               	.LFE69:
 244               	.global	NWK_Busy
 246               	NWK_Busy:
 247               	.LFB70:
 134:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 
 135:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** /*************************************************************************//**
 136:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** *  @brief Checks if network layer is ready for sleep
 137:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** *  @return @c true if network layer is ready for sleep or @c false otherwise
 138:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** *****************************************************************************/
 139:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** bool NWK_Busy(void)
 140:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** {
 248               		.loc 1 140 0
 249               		.cfi_startproc
 250 00fc CF93      		push r28
 251               	.LCFI16:
 252               		.cfi_def_cfa_offset 3
 253               		.cfi_offset 28, -2
 254 00fe DF93      		push r29
 255               	.LCFI17:
 256               		.cfi_def_cfa_offset 4
 257               		.cfi_offset 29, -3
 258 0100 CDB7      		in r28,__SP_L__
 259 0102 DEB7      		in r29,__SP_H__
 260               	.LCFI18:
 261               		.cfi_def_cfa_register 28
 262               	/* prologue: function */
 263               	/* frame size = 0 */
 264               	/* stack size = 2 */
 265               	.L__stack_usage = 2
 141:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 	return nwkIb.lock > 0;
 266               		.loc 1 141 0
 267 0104 8091 0000 		lds r24,nwkIb+38
 268 0108 9091 0000 		lds r25,nwkIb+38+1
 269 010c 21E0      		ldi r18,lo8(1)
 270 010e 892B      		or r24,r25
 271 0110 01F4      		brne .L9
 272 0112 20E0      		ldi r18,0
 273               	.L9:
 274               		.loc 1 141 0 is_stmt 0 discriminator 1
 275 0114 822F      		mov r24,r18
 276               	/* epilogue start */
 142:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** }
 277               		.loc 1 142 0 is_stmt 1 discriminator 1
 278 0116 DF91      		pop r29
 279 0118 CF91      		pop r28
 280 011a 0895      		ret
 281               		.cfi_endproc
 282               	.LFE70:
 284               	.global	NWK_Lock
 286               	NWK_Lock:
 287               	.LFB71:
 143:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 
 144:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** /*************************************************************************//**
 145:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** *  @brief Increases the lock counter and sets a busy state
 146:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** *****************************************************************************/
 147:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** void NWK_Lock(void)
 148:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** {
 288               		.loc 1 148 0
 289               		.cfi_startproc
 290 011c CF93      		push r28
 291               	.LCFI19:
 292               		.cfi_def_cfa_offset 3
 293               		.cfi_offset 28, -2
 294 011e DF93      		push r29
 295               	.LCFI20:
 296               		.cfi_def_cfa_offset 4
 297               		.cfi_offset 29, -3
 298 0120 CDB7      		in r28,__SP_L__
 299 0122 DEB7      		in r29,__SP_H__
 300               	.LCFI21:
 301               		.cfi_def_cfa_register 28
 302               	/* prologue: function */
 303               	/* frame size = 0 */
 304               	/* stack size = 2 */
 305               	.L__stack_usage = 2
 149:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 	nwkIb.lock++;
 306               		.loc 1 149 0
 307 0124 8091 0000 		lds r24,nwkIb+38
 308 0128 9091 0000 		lds r25,nwkIb+38+1
 309 012c 0196      		adiw r24,1
 310 012e 9093 0000 		sts nwkIb+38+1,r25
 311 0132 8093 0000 		sts nwkIb+38,r24
 150:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** }
 312               		.loc 1 150 0
 313 0136 0000      		nop
 314               	/* epilogue start */
 315 0138 DF91      		pop r29
 316 013a CF91      		pop r28
 317 013c 0895      		ret
 318               		.cfi_endproc
 319               	.LFE71:
 321               	.global	NWK_Unlock
 323               	NWK_Unlock:
 324               	.LFB72:
 151:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 
 152:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** /*************************************************************************//**
 153:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** *  @brief Decreases the lock counter and sets a free state if counter reaches 0
 154:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** *****************************************************************************/
 155:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** void NWK_Unlock(void)
 156:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** {
 325               		.loc 1 156 0
 326               		.cfi_startproc
 327 013e CF93      		push r28
 328               	.LCFI22:
 329               		.cfi_def_cfa_offset 3
 330               		.cfi_offset 28, -2
 331 0140 DF93      		push r29
 332               	.LCFI23:
 333               		.cfi_def_cfa_offset 4
 334               		.cfi_offset 29, -3
 335 0142 CDB7      		in r28,__SP_L__
 336 0144 DEB7      		in r29,__SP_H__
 337               	.LCFI24:
 338               		.cfi_def_cfa_register 28
 339               	/* prologue: function */
 340               	/* frame size = 0 */
 341               	/* stack size = 2 */
 342               	.L__stack_usage = 2
 157:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 	nwkIb.lock--;
 343               		.loc 1 157 0
 344 0146 8091 0000 		lds r24,nwkIb+38
 345 014a 9091 0000 		lds r25,nwkIb+38+1
 346 014e 0197      		sbiw r24,1
 347 0150 9093 0000 		sts nwkIb+38+1,r25
 348 0154 8093 0000 		sts nwkIb+38,r24
 158:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** }
 349               		.loc 1 158 0
 350 0158 0000      		nop
 351               	/* epilogue start */
 352 015a DF91      		pop r29
 353 015c CF91      		pop r28
 354 015e 0895      		ret
 355               		.cfi_endproc
 356               	.LFE72:
 358               	.global	NWK_SleepReq
 360               	NWK_SleepReq:
 361               	.LFB73:
 159:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 
 160:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** /*************************************************************************//**
 161:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** *  @brief Puts network layer to a sleeping state
 162:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** *****************************************************************************/
 163:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** void NWK_SleepReq(void)
 164:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** {
 362               		.loc 1 164 0
 363               		.cfi_startproc
 364 0160 CF93      		push r28
 365               	.LCFI25:
 366               		.cfi_def_cfa_offset 3
 367               		.cfi_offset 28, -2
 368 0162 DF93      		push r29
 369               	.LCFI26:
 370               		.cfi_def_cfa_offset 4
 371               		.cfi_offset 29, -3
 372 0164 CDB7      		in r28,__SP_L__
 373 0166 DEB7      		in r29,__SP_H__
 374               	.LCFI27:
 375               		.cfi_def_cfa_register 28
 376               	/* prologue: function */
 377               	/* frame size = 0 */
 378               	/* stack size = 2 */
 379               	.L__stack_usage = 2
 165:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 	PHY_Sleep();
 380               		.loc 1 165 0
 381 0168 0E94 0000 		call PHY_Sleep
 166:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** }
 382               		.loc 1 166 0
 383 016c 0000      		nop
 384               	/* epilogue start */
 385 016e DF91      		pop r29
 386 0170 CF91      		pop r28
 387 0172 0895      		ret
 388               		.cfi_endproc
 389               	.LFE73:
 391               	.global	NWK_WakeupReq
 393               	NWK_WakeupReq:
 394               	.LFB74:
 167:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 
 168:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** /*************************************************************************//**
 169:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** *  @brief Puts network layer to an active state
 170:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** *****************************************************************************/
 171:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** void NWK_WakeupReq(void)
 172:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** {
 395               		.loc 1 172 0
 396               		.cfi_startproc
 397 0174 CF93      		push r28
 398               	.LCFI28:
 399               		.cfi_def_cfa_offset 3
 400               		.cfi_offset 28, -2
 401 0176 DF93      		push r29
 402               	.LCFI29:
 403               		.cfi_def_cfa_offset 4
 404               		.cfi_offset 29, -3
 405 0178 CDB7      		in r28,__SP_L__
 406 017a DEB7      		in r29,__SP_H__
 407               	.LCFI30:
 408               		.cfi_def_cfa_register 28
 409               	/* prologue: function */
 410               	/* frame size = 0 */
 411               	/* stack size = 2 */
 412               	.L__stack_usage = 2
 173:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 	PHY_Wakeup();
 413               		.loc 1 173 0
 414 017c 0E94 0000 		call PHY_Wakeup
 174:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** }
 415               		.loc 1 174 0
 416 0180 0000      		nop
 417               	/* epilogue start */
 418 0182 DF91      		pop r29
 419 0184 CF91      		pop r28
 420 0186 0895      		ret
 421               		.cfi_endproc
 422               	.LFE74:
 424               		.section	.rodata
 425               	.LC0:
 426 0000 03        		.byte	3
 427 0001 08        		.byte	8
 428 0002 1A        		.byte	26
 429 0003 40        		.byte	64
 430 0004 80        		.byte	-128
 431 0005 BE        		.byte	-66
 432 0006 E6        		.byte	-26
 433 0007 F7        		.byte	-9
 434 0008 FC        		.byte	-4
 435               		.text
 436               	.global	NWK_LinearizeLqi
 438               	NWK_LinearizeLqi:
 439               	.LFB75:
 175:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 
 176:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** /*************************************************************************//**
 177:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** *  @brief Calculates linearized value for the given value of the LQI
 178:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** *  @param[in] lqi LQI value as provided by the transceiver
 179:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** *  @return linearized value directly proportional to the probability of delivery
 180:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** *****************************************************************************/
 181:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** uint8_t NWK_LinearizeLqi(uint8_t lqi)
 182:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** {
 440               		.loc 1 182 0
 441               		.cfi_startproc
 442 0188 CF93      		push r28
 443               	.LCFI31:
 444               		.cfi_def_cfa_offset 3
 445               		.cfi_offset 28, -2
 446 018a DF93      		push r29
 447               	.LCFI32:
 448               		.cfi_def_cfa_offset 4
 449               		.cfi_offset 29, -3
 450 018c CDB7      		in r28,__SP_L__
 451 018e DEB7      		in r29,__SP_H__
 452               	.LCFI33:
 453               		.cfi_def_cfa_register 28
 454 0190 2C97      		sbiw r28,12
 455               	.LCFI34:
 456               		.cfi_def_cfa_offset 16
 457 0192 0FB6      		in __tmp_reg__,__SREG__
 458 0194 F894      		cli
 459 0196 DEBF      		out __SP_H__,r29
 460 0198 0FBE      		out __SREG__,__tmp_reg__
 461 019a CDBF      		out __SP_L__,r28
 462               	/* prologue: function */
 463               	/* frame size = 12 */
 464               	/* stack size = 14 */
 465               	.L__stack_usage = 14
 466 019c 8C87      		std Y+12,r24
 183:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 	const uint8_t val[] = { 3, 8, 26, 64, 128, 190, 230, 247, 252 };
 467               		.loc 1 183 0
 468 019e 89E0      		ldi r24,lo8(9)
 469 01a0 E0E0      		ldi r30,lo8(.LC0)
 470 01a2 F0E0      		ldi r31,hi8(.LC0)
 471 01a4 DE01      		movw r26,r28
 472 01a6 1396      		adiw r26,3
 473               		0:
 474 01a8 0190      		ld r0,Z+
 475 01aa 0D92      		st X+,r0
 476 01ac 8A95      		dec r24
 477 01ae 01F4      		brne 0b
 184:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 	uint8_t cl = 25;
 478               		.loc 1 184 0
 479 01b0 89E1      		ldi r24,lo8(25)
 480 01b2 8983      		std Y+1,r24
 481               	.LBB3:
 185:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 
 186:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 	for (uint8_t i = 0; i < sizeof(val); i++) {
 482               		.loc 1 186 0
 483 01b4 1A82      		std Y+2,__zero_reg__
 484 01b6 00C0      		rjmp .L15
 485               	.L18:
 187:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 		if (lqi < cl) {
 486               		.loc 1 187 0
 487 01b8 9C85      		ldd r25,Y+12
 488 01ba 8981      		ldd r24,Y+1
 489 01bc 9817      		cp r25,r24
 490 01be 00F4      		brsh .L16
 188:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 			return val[i];
 491               		.loc 1 188 0
 492 01c0 8A81      		ldd r24,Y+2
 493 01c2 882F      		mov r24,r24
 494 01c4 90E0      		ldi r25,0
 495 01c6 9E01      		movw r18,r28
 496 01c8 2D5F      		subi r18,-3
 497 01ca 3F4F      		sbci r19,-1
 498 01cc 820F      		add r24,r18
 499 01ce 931F      		adc r25,r19
 500 01d0 FC01      		movw r30,r24
 501 01d2 8081      		ld r24,Z
 502 01d4 00C0      		rjmp .L19
 503               	.L16:
 189:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 		}
 190:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 
 191:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 		cl += 25;
 504               		.loc 1 191 0 discriminator 2
 505 01d6 8981      		ldd r24,Y+1
 506 01d8 875E      		subi r24,lo8(-(25))
 507 01da 8983      		std Y+1,r24
 186:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 		if (lqi < cl) {
 508               		.loc 1 186 0 discriminator 2
 509 01dc 8A81      		ldd r24,Y+2
 510 01de 8F5F      		subi r24,lo8(-(1))
 511 01e0 8A83      		std Y+2,r24
 512               	.L15:
 186:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 		if (lqi < cl) {
 513               		.loc 1 186 0 is_stmt 0 discriminator 1
 514 01e2 8A81      		ldd r24,Y+2
 515 01e4 8930      		cpi r24,lo8(9)
 516 01e6 00F0      		brlo .L18
 517               	.LBE3:
 192:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 	}
 193:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 
 194:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 	return 255;
 518               		.loc 1 194 0 is_stmt 1
 519 01e8 8FEF      		ldi r24,lo8(-1)
 520               	.L19:
 521               	/* epilogue start */
 195:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** }
 522               		.loc 1 195 0 discriminator 1
 523 01ea 2C96      		adiw r28,12
 524 01ec 0FB6      		in __tmp_reg__,__SREG__
 525 01ee F894      		cli
 526 01f0 DEBF      		out __SP_H__,r29
 527 01f2 0FBE      		out __SREG__,__tmp_reg__
 528 01f4 CDBF      		out __SP_L__,r28
 529 01f6 DF91      		pop r29
 530 01f8 CF91      		pop r28
 531 01fa 0895      		ret
 532               		.cfi_endproc
 533               	.LFE75:
 535               	.global	NWK_TaskHandler
 537               	NWK_TaskHandler:
 538               	.LFB76:
 196:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 
 197:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** /*************************************************************************//**
 198:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** *  @brief Network layer task handler
 199:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** *****************************************************************************/
 200:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** void NWK_TaskHandler(void)
 201:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** {
 539               		.loc 1 201 0
 540               		.cfi_startproc
 541 01fc CF93      		push r28
 542               	.LCFI35:
 543               		.cfi_def_cfa_offset 3
 544               		.cfi_offset 28, -2
 545 01fe DF93      		push r29
 546               	.LCFI36:
 547               		.cfi_def_cfa_offset 4
 548               		.cfi_offset 29, -3
 549 0200 CDB7      		in r28,__SP_L__
 550 0202 DEB7      		in r29,__SP_H__
 551               	.LCFI37:
 552               		.cfi_def_cfa_register 28
 553               	/* prologue: function */
 554               	/* frame size = 0 */
 555               	/* stack size = 2 */
 556               	.L__stack_usage = 2
 202:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 	nwkRxTaskHandler();
 557               		.loc 1 202 0
 558 0204 0E94 0000 		call nwkRxTaskHandler
 203:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 	nwkTxTaskHandler();
 559               		.loc 1 203 0
 560 0208 0E94 0000 		call nwkTxTaskHandler
 204:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 	nwkDataReqTaskHandler();
 561               		.loc 1 204 0
 562 020c 0E94 0000 		call nwkDataReqTaskHandler
 205:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** #ifdef NWK_ENABLE_SECURITY
 206:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 	nwkSecurityTaskHandler();
 207:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** #endif
 208:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** }
 563               		.loc 1 208 0
 564 0210 0000      		nop
 565               	/* epilogue start */
 566 0212 DF91      		pop r29
 567 0214 CF91      		pop r28
 568 0216 0895      		ret
 569               		.cfi_endproc
 570               	.LFE76:
 572               	.Letext0:
 573               		.file 2 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\in
 574               		.file 3 "../../../stack/LwMesh/TDMA/nwk/inc/nwkRx.h"
 575               		.file 4 "../../../stack/LwMesh/TDMA/nwk/inc/nwk.h"
DEFINED SYMBOLS
                            *ABS*:00000000 nwk.c
C:\Users\guilh\AppData\Local\Temp\cc0NFH4k.s:2      *ABS*:0000003e __SP_H__
C:\Users\guilh\AppData\Local\Temp\cc0NFH4k.s:3      *ABS*:0000003d __SP_L__
C:\Users\guilh\AppData\Local\Temp\cc0NFH4k.s:4      *ABS*:0000003f __SREG__
C:\Users\guilh\AppData\Local\Temp\cc0NFH4k.s:5      *ABS*:0000003b __RAMPZ__
C:\Users\guilh\AppData\Local\Temp\cc0NFH4k.s:6      *ABS*:00000000 __tmp_reg__
C:\Users\guilh\AppData\Local\Temp\cc0NFH4k.s:7      *ABS*:00000001 __zero_reg__
                            *COM*:00000028 nwkIb
C:\Users\guilh\AppData\Local\Temp\cc0NFH4k.s:14     .text:00000000 NWK_Init
C:\Users\guilh\AppData\Local\Temp\cc0NFH4k.s:97     .text:00000066 NWK_SetAddr
C:\Users\guilh\AppData\Local\Temp\cc0NFH4k.s:144    .text:00000094 NWK_SetPanId
C:\Users\guilh\AppData\Local\Temp\cc0NFH4k.s:191    .text:000000c2 NWK_OpenEndpoint
C:\Users\guilh\AppData\Local\Temp\cc0NFH4k.s:246    .text:000000fc NWK_Busy
C:\Users\guilh\AppData\Local\Temp\cc0NFH4k.s:286    .text:0000011c NWK_Lock
C:\Users\guilh\AppData\Local\Temp\cc0NFH4k.s:323    .text:0000013e NWK_Unlock
C:\Users\guilh\AppData\Local\Temp\cc0NFH4k.s:360    .text:00000160 NWK_SleepReq
C:\Users\guilh\AppData\Local\Temp\cc0NFH4k.s:393    .text:00000174 NWK_WakeupReq
C:\Users\guilh\AppData\Local\Temp\cc0NFH4k.s:438    .text:00000188 NWK_LinearizeLqi
C:\Users\guilh\AppData\Local\Temp\cc0NFH4k.s:537    .text:000001fc NWK_TaskHandler

UNDEFINED SYMBOLS
nwkTxInit
nwkRxInit
nwkFrameInit
nwkDataReqInit
nwkGroupInit
PHY_SetShortAddr
PHY_SetPanId
PHY_Sleep
PHY_Wakeup
nwkRxTaskHandler
nwkTxTaskHandler
nwkDataReqTaskHandler
__do_copy_data
__do_clear_bss
