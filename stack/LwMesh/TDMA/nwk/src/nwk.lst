   1               		.file	"nwk.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__RAMPZ__ = 0x3b
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
   8               		.text
   9               	.Ltext0:
  10               		.cfi_sections	.debug_frame
  11               		.comm	n,1,1
  12               		.comm	tTS,4,1
  13               		.comm	macLLDNnumTimeSlots,2,1
  14               		.comm	macLLDNnumUplinkTS,2,1
  15               		.comm	macLLDNRetransmitTS,2,1
  16               		.comm	nwkIb,40,1
  17               	.global	NWK_Init
  19               	NWK_Init:
  20               	.LFB66:
  21               		.file 1 "../../../stack/LwMesh/TDMA/nwk/src/nwk.c"
   1:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** /**
   2:../../../stack/LwMesh/TDMA/nwk/src/nwk.c ****  * \file nwk.c
   3:../../../stack/LwMesh/TDMA/nwk/src/nwk.c ****  *
   4:../../../stack/LwMesh/TDMA/nwk/src/nwk.c ****  * \brief Network layer management functions implementation
   5:../../../stack/LwMesh/TDMA/nwk/src/nwk.c ****  *
   6:../../../stack/LwMesh/TDMA/nwk/src/nwk.c ****  * Copyright (C) 2014 Atmel Corporation. All rights reserved.
   7:../../../stack/LwMesh/TDMA/nwk/src/nwk.c ****  *
   8:../../../stack/LwMesh/TDMA/nwk/src/nwk.c ****  * \asf_license_start
   9:../../../stack/LwMesh/TDMA/nwk/src/nwk.c ****  *
  10:../../../stack/LwMesh/TDMA/nwk/src/nwk.c ****  * Redistribution and use in source and binary forms, with or without
  11:../../../stack/LwMesh/TDMA/nwk/src/nwk.c ****  * modification, are permitted provided that the following conditions are met:
  12:../../../stack/LwMesh/TDMA/nwk/src/nwk.c ****  *
  13:../../../stack/LwMesh/TDMA/nwk/src/nwk.c ****  * 1. Redistributions of source code must retain the above copyright notice,
  14:../../../stack/LwMesh/TDMA/nwk/src/nwk.c ****  *    this list of conditions and the following disclaimer.
  15:../../../stack/LwMesh/TDMA/nwk/src/nwk.c ****  *
  16:../../../stack/LwMesh/TDMA/nwk/src/nwk.c ****  * 2. Redistributions in binary form must reproduce the above copyright notice,
  17:../../../stack/LwMesh/TDMA/nwk/src/nwk.c ****  *    this list of conditions and the following disclaimer in the documentation
  18:../../../stack/LwMesh/TDMA/nwk/src/nwk.c ****  *    and/or other materials provided with the distribution.
  19:../../../stack/LwMesh/TDMA/nwk/src/nwk.c ****  *
  20:../../../stack/LwMesh/TDMA/nwk/src/nwk.c ****  * 3. The name of Atmel may not be used to endorse or promote products derived
  21:../../../stack/LwMesh/TDMA/nwk/src/nwk.c ****  *    from this software without specific prior written permission.
  22:../../../stack/LwMesh/TDMA/nwk/src/nwk.c ****  *
  23:../../../stack/LwMesh/TDMA/nwk/src/nwk.c ****  * 4. This software may only be redistributed and used in connection with an
  24:../../../stack/LwMesh/TDMA/nwk/src/nwk.c ****  *    Atmel microcontroller product.
  25:../../../stack/LwMesh/TDMA/nwk/src/nwk.c ****  *
  26:../../../stack/LwMesh/TDMA/nwk/src/nwk.c ****  * THIS SOFTWARE IS PROVIDED BY ATMEL "AS IS" AND ANY EXPRESS OR IMPLIED
  27:../../../stack/LwMesh/TDMA/nwk/src/nwk.c ****  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
  28:../../../stack/LwMesh/TDMA/nwk/src/nwk.c ****  * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE
  29:../../../stack/LwMesh/TDMA/nwk/src/nwk.c ****  * EXPRESSLY AND SPECIFICALLY DISCLAIMED. IN NO EVENT SHALL ATMEL BE LIABLE FOR
  30:../../../stack/LwMesh/TDMA/nwk/src/nwk.c ****  * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  31:../../../stack/LwMesh/TDMA/nwk/src/nwk.c ****  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
  32:../../../stack/LwMesh/TDMA/nwk/src/nwk.c ****  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
  33:../../../stack/LwMesh/TDMA/nwk/src/nwk.c ****  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
  34:../../../stack/LwMesh/TDMA/nwk/src/nwk.c ****  * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
  35:../../../stack/LwMesh/TDMA/nwk/src/nwk.c ****  * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  36:../../../stack/LwMesh/TDMA/nwk/src/nwk.c ****  * POSSIBILITY OF SUCH DAMAGE.
  37:../../../stack/LwMesh/TDMA/nwk/src/nwk.c ****  *
  38:../../../stack/LwMesh/TDMA/nwk/src/nwk.c ****  * \asf_license_stop
  39:../../../stack/LwMesh/TDMA/nwk/src/nwk.c ****  *
  40:../../../stack/LwMesh/TDMA/nwk/src/nwk.c ****  *
  41:../../../stack/LwMesh/TDMA/nwk/src/nwk.c ****  */
  42:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 
  43:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** /*
  44:../../../stack/LwMesh/TDMA/nwk/src/nwk.c ****  * Copyright (c) 2014, Atmel Corporation All rights reserved.
  45:../../../stack/LwMesh/TDMA/nwk/src/nwk.c ****  *
  46:../../../stack/LwMesh/TDMA/nwk/src/nwk.c ****  * Licensed under Atmel's Limited License Agreement --> EULA.txt
  47:../../../stack/LwMesh/TDMA/nwk/src/nwk.c ****  */
  48:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 
  49:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** /*- Includes ---------------------------------------------------------------*/
  50:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** #include <stdlib.h>
  51:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** #include <stdint.h>
  52:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** #include <stdbool.h>
  53:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** #include <string.h>
  54:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** #include "phy.h"
  55:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** #include "sysConfig.h"
  56:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** #include "nwkRx.h"
  57:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** #include "nwkTx.h"
  58:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** #include "nwkGroup.h"
  59:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** #include "nwkFrame.h"
  60:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** #include "nwkRoute.h"
  61:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** #include "nwkSecurity.h"
  62:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** #include "nwkRouteDiscovery.h"
  63:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 
  64:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** /*- Variables --------------------------------------------------------------*/
  65:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** NwkIb_t nwkIb;
  66:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 
  67:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** /*- Implementations --------------------------------------------------------*/
  68:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 
  69:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** /*************************************************************************//**
  70:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** *  @brief Initializes all network layer modules
  71:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** *****************************************************************************/
  72:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** void NWK_Init(void)
  73:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** {
  22               		.loc 1 73 0
  23               		.cfi_startproc
  24 0000 CF93      		push r28
  25               	.LCFI0:
  26               		.cfi_def_cfa_offset 3
  27               		.cfi_offset 28, -2
  28 0002 DF93      		push r29
  29               	.LCFI1:
  30               		.cfi_def_cfa_offset 4
  31               		.cfi_offset 29, -3
  32 0004 1F92      		push __zero_reg__
  33               	.LCFI2:
  34               		.cfi_def_cfa_offset 5
  35 0006 CDB7      		in r28,__SP_L__
  36 0008 DEB7      		in r29,__SP_H__
  37               	.LCFI3:
  38               		.cfi_def_cfa_register 28
  39               	/* prologue: function */
  40               	/* frame size = 1 */
  41               	/* stack size = 3 */
  42               	.L__stack_usage = 3
  74:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 	nwkIb.nwkSeqNum = 0;
  43               		.loc 1 74 0
  44 000a 1092 0000 		sts nwkIb+4,__zero_reg__
  75:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 	nwkIb.macSeqNum = 0;
  45               		.loc 1 75 0
  46 000e 1092 0000 		sts nwkIb+5,__zero_reg__
  76:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 	nwkIb.addr = 0;
  47               		.loc 1 76 0
  48 0012 1092 0000 		sts nwkIb+1,__zero_reg__
  49 0016 1092 0000 		sts nwkIb,__zero_reg__
  77:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 	nwkIb.lock = 0;
  50               		.loc 1 77 0
  51 001a 1092 0000 		sts nwkIb+38+1,__zero_reg__
  52 001e 1092 0000 		sts nwkIb+38,__zero_reg__
  53               	.LBB2:
  78:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 
  79:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 	for (uint8_t i = 0; i < NWK_ENDPOINTS_AMOUNT; i++) {
  54               		.loc 1 79 0
  55 0022 1982      		std Y+1,__zero_reg__
  56 0024 00C0      		rjmp .L2
  57               	.L3:
  80:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 		nwkIb.endpoint[i] = NULL;
  58               		.loc 1 80 0 discriminator 3
  59 0026 8981      		ldd r24,Y+1
  60 0028 882F      		mov r24,r24
  61 002a 90E0      		ldi r25,0
  62 002c 0396      		adiw r24,3
  63 002e 880F      		lsl r24
  64 0030 991F      		rol r25
  65 0032 8050      		subi r24,lo8(-(nwkIb))
  66 0034 9040      		sbci r25,hi8(-(nwkIb))
  67 0036 FC01      		movw r30,r24
  68 0038 1182      		std Z+1,__zero_reg__
  69 003a 1082      		st Z,__zero_reg__
  79:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 		nwkIb.endpoint[i] = NULL;
  70               		.loc 1 79 0 discriminator 3
  71 003c 8981      		ldd r24,Y+1
  72 003e 8F5F      		subi r24,lo8(-(1))
  73 0040 8983      		std Y+1,r24
  74               	.L2:
  79:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 		nwkIb.endpoint[i] = NULL;
  75               		.loc 1 79 0 is_stmt 0 discriminator 1
  76 0042 8981      		ldd r24,Y+1
  77 0044 8031      		cpi r24,lo8(16)
  78 0046 00F0      		brlo .L3
  79               	.LBE2:
  81:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 	}
  82:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 
  83:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 	nwkTxInit();
  80               		.loc 1 83 0 is_stmt 1
  81 0048 0E94 0000 		call nwkTxInit
  84:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 	nwkRxInit();
  82               		.loc 1 84 0
  83 004c 0E94 0000 		call nwkRxInit
  85:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 	nwkFrameInit();
  84               		.loc 1 85 0
  85 0050 0E94 0000 		call nwkFrameInit
  86:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 	nwkDataReqInit();
  86               		.loc 1 86 0
  87 0054 0E94 0000 		call nwkDataReqInit
  87:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 
  88:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** #ifdef NWK_ENABLE_ROUTING
  89:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 	nwkRouteInit();
  90:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** #endif
  91:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 
  92:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** #ifdef NWK_ENABLE_SECURITY
  93:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 	nwkSecurityInit();
  94:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** #endif
  95:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 
  96:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** #ifdef NWK_ENABLE_MULTICAST
  97:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 	nwkGroupInit();
  88               		.loc 1 97 0
  89 0058 0E94 0000 		call nwkGroupInit
  98:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** #endif
  99:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 
 100:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** #ifdef NWK_ENABLE_ROUTE_DISCOVERY
 101:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 	nwkRouteDiscoveryInit();
 102:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** #endif
 103:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** }
  90               		.loc 1 103 0
  91 005c 0000      		nop
  92               	/* epilogue start */
  93 005e 0F90      		pop __tmp_reg__
  94 0060 DF91      		pop r29
  95 0062 CF91      		pop r28
  96 0064 0895      		ret
  97               		.cfi_endproc
  98               	.LFE66:
 100               	.global	NWK_SetAddr
 102               	NWK_SetAddr:
 103               	.LFB67:
 104:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 
 105:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** /*************************************************************************//**
 106:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** *  @brief Sets network address of the node
 107:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** *  @param[in] addr Adddress to set
 108:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** *****************************************************************************/
 109:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** void NWK_SetAddr(uint16_t addr)
 110:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** {
 104               		.loc 1 110 0
 105               		.cfi_startproc
 106 0066 CF93      		push r28
 107               	.LCFI4:
 108               		.cfi_def_cfa_offset 3
 109               		.cfi_offset 28, -2
 110 0068 DF93      		push r29
 111               	.LCFI5:
 112               		.cfi_def_cfa_offset 4
 113               		.cfi_offset 29, -3
 114 006a 00D0      		rcall .
 115               	.LCFI6:
 116               		.cfi_def_cfa_offset 6
 117 006c CDB7      		in r28,__SP_L__
 118 006e DEB7      		in r29,__SP_H__
 119               	.LCFI7:
 120               		.cfi_def_cfa_register 28
 121               	/* prologue: function */
 122               	/* frame size = 2 */
 123               	/* stack size = 4 */
 124               	.L__stack_usage = 4
 125 0070 9A83      		std Y+2,r25
 126 0072 8983      		std Y+1,r24
 111:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 	nwkIb.addr = addr;
 127               		.loc 1 111 0
 128 0074 8981      		ldd r24,Y+1
 129 0076 9A81      		ldd r25,Y+2
 130 0078 9093 0000 		sts nwkIb+1,r25
 131 007c 8093 0000 		sts nwkIb,r24
 112:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 	PHY_SetShortAddr(addr);
 132               		.loc 1 112 0
 133 0080 8981      		ldd r24,Y+1
 134 0082 9A81      		ldd r25,Y+2
 135 0084 0E94 0000 		call PHY_SetShortAddr
 113:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** }
 136               		.loc 1 113 0
 137 0088 0000      		nop
 138               	/* epilogue start */
 139 008a 0F90      		pop __tmp_reg__
 140 008c 0F90      		pop __tmp_reg__
 141 008e DF91      		pop r29
 142 0090 CF91      		pop r28
 143 0092 0895      		ret
 144               		.cfi_endproc
 145               	.LFE67:
 147               	.global	NWK_SetPanId
 149               	NWK_SetPanId:
 150               	.LFB68:
 114:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 
 115:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** /*************************************************************************//**
 116:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** *  @brief Sets network identifier (PAN) of the node
 117:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** *  @param[in] panId PAN ID to set
 118:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** *****************************************************************************/
 119:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** void NWK_SetPanId(uint16_t panId)
 120:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** {
 151               		.loc 1 120 0
 152               		.cfi_startproc
 153 0094 CF93      		push r28
 154               	.LCFI8:
 155               		.cfi_def_cfa_offset 3
 156               		.cfi_offset 28, -2
 157 0096 DF93      		push r29
 158               	.LCFI9:
 159               		.cfi_def_cfa_offset 4
 160               		.cfi_offset 29, -3
 161 0098 00D0      		rcall .
 162               	.LCFI10:
 163               		.cfi_def_cfa_offset 6
 164 009a CDB7      		in r28,__SP_L__
 165 009c DEB7      		in r29,__SP_H__
 166               	.LCFI11:
 167               		.cfi_def_cfa_register 28
 168               	/* prologue: function */
 169               	/* frame size = 2 */
 170               	/* stack size = 4 */
 171               	.L__stack_usage = 4
 172 009e 9A83      		std Y+2,r25
 173 00a0 8983      		std Y+1,r24
 121:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 	nwkIb.panId = panId;
 174               		.loc 1 121 0
 175 00a2 8981      		ldd r24,Y+1
 176 00a4 9A81      		ldd r25,Y+2
 177 00a6 9093 0000 		sts nwkIb+2+1,r25
 178 00aa 8093 0000 		sts nwkIb+2,r24
 122:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 	PHY_SetPanId(panId);
 179               		.loc 1 122 0
 180 00ae 8981      		ldd r24,Y+1
 181 00b0 9A81      		ldd r25,Y+2
 182 00b2 0E94 0000 		call PHY_SetPanId
 123:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** }
 183               		.loc 1 123 0
 184 00b6 0000      		nop
 185               	/* epilogue start */
 186 00b8 0F90      		pop __tmp_reg__
 187 00ba 0F90      		pop __tmp_reg__
 188 00bc DF91      		pop r29
 189 00be CF91      		pop r28
 190 00c0 0895      		ret
 191               		.cfi_endproc
 192               	.LFE68:
 194               	.global	NWK_OpenEndpoint
 196               	NWK_OpenEndpoint:
 197               	.LFB69:
 124:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 
 125:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** /*************************************************************************//**
 126:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** *  @brief Registers callback @a ind for the endpoint @a endpoint
 127:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** *  @param[in] id Endpoint index (1-15)
 128:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** *  @param[in] handler Pointer to the callback function
 129:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** *****************************************************************************/
 130:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** void NWK_OpenEndpoint(uint8_t id, bool (*handler)(NWK_DataInd_t *ind))
 131:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** {
 198               		.loc 1 131 0
 199               		.cfi_startproc
 200 00c2 CF93      		push r28
 201               	.LCFI12:
 202               		.cfi_def_cfa_offset 3
 203               		.cfi_offset 28, -2
 204 00c4 DF93      		push r29
 205               	.LCFI13:
 206               		.cfi_def_cfa_offset 4
 207               		.cfi_offset 29, -3
 208 00c6 00D0      		rcall .
 209 00c8 1F92      		push __zero_reg__
 210               	.LCFI14:
 211               		.cfi_def_cfa_offset 7
 212 00ca CDB7      		in r28,__SP_L__
 213 00cc DEB7      		in r29,__SP_H__
 214               	.LCFI15:
 215               		.cfi_def_cfa_register 28
 216               	/* prologue: function */
 217               	/* frame size = 3 */
 218               	/* stack size = 5 */
 219               	.L__stack_usage = 5
 220 00ce 8983      		std Y+1,r24
 221 00d0 7B83      		std Y+3,r23
 222 00d2 6A83      		std Y+2,r22
 132:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 	nwkIb.endpoint[id] = handler;
 223               		.loc 1 132 0
 224 00d4 8981      		ldd r24,Y+1
 225 00d6 882F      		mov r24,r24
 226 00d8 90E0      		ldi r25,0
 227 00da 0396      		adiw r24,3
 228 00dc 880F      		lsl r24
 229 00de 991F      		rol r25
 230 00e0 8050      		subi r24,lo8(-(nwkIb))
 231 00e2 9040      		sbci r25,hi8(-(nwkIb))
 232 00e4 2A81      		ldd r18,Y+2
 233 00e6 3B81      		ldd r19,Y+3
 234 00e8 FC01      		movw r30,r24
 235 00ea 3183      		std Z+1,r19
 236 00ec 2083      		st Z,r18
 133:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** }
 237               		.loc 1 133 0
 238 00ee 0000      		nop
 239               	/* epilogue start */
 240 00f0 0F90      		pop __tmp_reg__
 241 00f2 0F90      		pop __tmp_reg__
 242 00f4 0F90      		pop __tmp_reg__
 243 00f6 DF91      		pop r29
 244 00f8 CF91      		pop r28
 245 00fa 0895      		ret
 246               		.cfi_endproc
 247               	.LFE69:
 249               	.global	NWK_Busy
 251               	NWK_Busy:
 252               	.LFB70:
 134:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 
 135:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** /*************************************************************************//**
 136:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** *  @brief Checks if network layer is ready for sleep
 137:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** *  @return @c true if network layer is ready for sleep or @c false otherwise
 138:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** *****************************************************************************/
 139:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** bool NWK_Busy(void)
 140:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** {
 253               		.loc 1 140 0
 254               		.cfi_startproc
 255 00fc CF93      		push r28
 256               	.LCFI16:
 257               		.cfi_def_cfa_offset 3
 258               		.cfi_offset 28, -2
 259 00fe DF93      		push r29
 260               	.LCFI17:
 261               		.cfi_def_cfa_offset 4
 262               		.cfi_offset 29, -3
 263 0100 CDB7      		in r28,__SP_L__
 264 0102 DEB7      		in r29,__SP_H__
 265               	.LCFI18:
 266               		.cfi_def_cfa_register 28
 267               	/* prologue: function */
 268               	/* frame size = 0 */
 269               	/* stack size = 2 */
 270               	.L__stack_usage = 2
 141:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 	return nwkIb.lock > 0;
 271               		.loc 1 141 0
 272 0104 8091 0000 		lds r24,nwkIb+38
 273 0108 9091 0000 		lds r25,nwkIb+38+1
 274 010c 21E0      		ldi r18,lo8(1)
 275 010e 892B      		or r24,r25
 276 0110 01F4      		brne .L9
 277 0112 20E0      		ldi r18,0
 278               	.L9:
 279               		.loc 1 141 0 is_stmt 0 discriminator 1
 280 0114 822F      		mov r24,r18
 281               	/* epilogue start */
 142:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** }
 282               		.loc 1 142 0 is_stmt 1 discriminator 1
 283 0116 DF91      		pop r29
 284 0118 CF91      		pop r28
 285 011a 0895      		ret
 286               		.cfi_endproc
 287               	.LFE70:
 289               	.global	NWK_Lock
 291               	NWK_Lock:
 292               	.LFB71:
 143:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 
 144:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** /*************************************************************************//**
 145:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** *  @brief Increases the lock counter and sets a busy state
 146:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** *****************************************************************************/
 147:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** void NWK_Lock(void)
 148:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** {
 293               		.loc 1 148 0
 294               		.cfi_startproc
 295 011c CF93      		push r28
 296               	.LCFI19:
 297               		.cfi_def_cfa_offset 3
 298               		.cfi_offset 28, -2
 299 011e DF93      		push r29
 300               	.LCFI20:
 301               		.cfi_def_cfa_offset 4
 302               		.cfi_offset 29, -3
 303 0120 CDB7      		in r28,__SP_L__
 304 0122 DEB7      		in r29,__SP_H__
 305               	.LCFI21:
 306               		.cfi_def_cfa_register 28
 307               	/* prologue: function */
 308               	/* frame size = 0 */
 309               	/* stack size = 2 */
 310               	.L__stack_usage = 2
 149:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 	nwkIb.lock++;
 311               		.loc 1 149 0
 312 0124 8091 0000 		lds r24,nwkIb+38
 313 0128 9091 0000 		lds r25,nwkIb+38+1
 314 012c 0196      		adiw r24,1
 315 012e 9093 0000 		sts nwkIb+38+1,r25
 316 0132 8093 0000 		sts nwkIb+38,r24
 150:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** }
 317               		.loc 1 150 0
 318 0136 0000      		nop
 319               	/* epilogue start */
 320 0138 DF91      		pop r29
 321 013a CF91      		pop r28
 322 013c 0895      		ret
 323               		.cfi_endproc
 324               	.LFE71:
 326               	.global	NWK_Unlock
 328               	NWK_Unlock:
 329               	.LFB72:
 151:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 
 152:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** /*************************************************************************//**
 153:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** *  @brief Decreases the lock counter and sets a free state if counter reaches 0
 154:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** *****************************************************************************/
 155:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** void NWK_Unlock(void)
 156:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** {
 330               		.loc 1 156 0
 331               		.cfi_startproc
 332 013e CF93      		push r28
 333               	.LCFI22:
 334               		.cfi_def_cfa_offset 3
 335               		.cfi_offset 28, -2
 336 0140 DF93      		push r29
 337               	.LCFI23:
 338               		.cfi_def_cfa_offset 4
 339               		.cfi_offset 29, -3
 340 0142 CDB7      		in r28,__SP_L__
 341 0144 DEB7      		in r29,__SP_H__
 342               	.LCFI24:
 343               		.cfi_def_cfa_register 28
 344               	/* prologue: function */
 345               	/* frame size = 0 */
 346               	/* stack size = 2 */
 347               	.L__stack_usage = 2
 157:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 	nwkIb.lock--;
 348               		.loc 1 157 0
 349 0146 8091 0000 		lds r24,nwkIb+38
 350 014a 9091 0000 		lds r25,nwkIb+38+1
 351 014e 0197      		sbiw r24,1
 352 0150 9093 0000 		sts nwkIb+38+1,r25
 353 0154 8093 0000 		sts nwkIb+38,r24
 158:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** }
 354               		.loc 1 158 0
 355 0158 0000      		nop
 356               	/* epilogue start */
 357 015a DF91      		pop r29
 358 015c CF91      		pop r28
 359 015e 0895      		ret
 360               		.cfi_endproc
 361               	.LFE72:
 363               	.global	NWK_SleepReq
 365               	NWK_SleepReq:
 366               	.LFB73:
 159:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 
 160:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** /*************************************************************************//**
 161:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** *  @brief Puts network layer to a sleeping state
 162:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** *****************************************************************************/
 163:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** void NWK_SleepReq(void)
 164:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** {
 367               		.loc 1 164 0
 368               		.cfi_startproc
 369 0160 CF93      		push r28
 370               	.LCFI25:
 371               		.cfi_def_cfa_offset 3
 372               		.cfi_offset 28, -2
 373 0162 DF93      		push r29
 374               	.LCFI26:
 375               		.cfi_def_cfa_offset 4
 376               		.cfi_offset 29, -3
 377 0164 CDB7      		in r28,__SP_L__
 378 0166 DEB7      		in r29,__SP_H__
 379               	.LCFI27:
 380               		.cfi_def_cfa_register 28
 381               	/* prologue: function */
 382               	/* frame size = 0 */
 383               	/* stack size = 2 */
 384               	.L__stack_usage = 2
 165:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 	PHY_Sleep();
 385               		.loc 1 165 0
 386 0168 0E94 0000 		call PHY_Sleep
 166:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** }
 387               		.loc 1 166 0
 388 016c 0000      		nop
 389               	/* epilogue start */
 390 016e DF91      		pop r29
 391 0170 CF91      		pop r28
 392 0172 0895      		ret
 393               		.cfi_endproc
 394               	.LFE73:
 396               	.global	NWK_WakeupReq
 398               	NWK_WakeupReq:
 399               	.LFB74:
 167:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 
 168:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** /*************************************************************************//**
 169:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** *  @brief Puts network layer to an active state
 170:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** *****************************************************************************/
 171:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** void NWK_WakeupReq(void)
 172:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** {
 400               		.loc 1 172 0
 401               		.cfi_startproc
 402 0174 CF93      		push r28
 403               	.LCFI28:
 404               		.cfi_def_cfa_offset 3
 405               		.cfi_offset 28, -2
 406 0176 DF93      		push r29
 407               	.LCFI29:
 408               		.cfi_def_cfa_offset 4
 409               		.cfi_offset 29, -3
 410 0178 CDB7      		in r28,__SP_L__
 411 017a DEB7      		in r29,__SP_H__
 412               	.LCFI30:
 413               		.cfi_def_cfa_register 28
 414               	/* prologue: function */
 415               	/* frame size = 0 */
 416               	/* stack size = 2 */
 417               	.L__stack_usage = 2
 173:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 	PHY_Wakeup();
 418               		.loc 1 173 0
 419 017c 0E94 0000 		call PHY_Wakeup
 174:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** }
 420               		.loc 1 174 0
 421 0180 0000      		nop
 422               	/* epilogue start */
 423 0182 DF91      		pop r29
 424 0184 CF91      		pop r28
 425 0186 0895      		ret
 426               		.cfi_endproc
 427               	.LFE74:
 429               		.section	.rodata
 430               	.LC0:
 431 0000 03        		.byte	3
 432 0001 08        		.byte	8
 433 0002 1A        		.byte	26
 434 0003 40        		.byte	64
 435 0004 80        		.byte	-128
 436 0005 BE        		.byte	-66
 437 0006 E6        		.byte	-26
 438 0007 F7        		.byte	-9
 439 0008 FC        		.byte	-4
 440               		.text
 441               	.global	NWK_LinearizeLqi
 443               	NWK_LinearizeLqi:
 444               	.LFB75:
 175:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 
 176:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** /*************************************************************************//**
 177:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** *  @brief Calculates linearized value for the given value of the LQI
 178:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** *  @param[in] lqi LQI value as provided by the transceiver
 179:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** *  @return linearized value directly proportional to the probability of delivery
 180:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** *****************************************************************************/
 181:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** uint8_t NWK_LinearizeLqi(uint8_t lqi)
 182:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** {
 445               		.loc 1 182 0
 446               		.cfi_startproc
 447 0188 CF93      		push r28
 448               	.LCFI31:
 449               		.cfi_def_cfa_offset 3
 450               		.cfi_offset 28, -2
 451 018a DF93      		push r29
 452               	.LCFI32:
 453               		.cfi_def_cfa_offset 4
 454               		.cfi_offset 29, -3
 455 018c CDB7      		in r28,__SP_L__
 456 018e DEB7      		in r29,__SP_H__
 457               	.LCFI33:
 458               		.cfi_def_cfa_register 28
 459 0190 2C97      		sbiw r28,12
 460               	.LCFI34:
 461               		.cfi_def_cfa_offset 16
 462 0192 0FB6      		in __tmp_reg__,__SREG__
 463 0194 F894      		cli
 464 0196 DEBF      		out __SP_H__,r29
 465 0198 0FBE      		out __SREG__,__tmp_reg__
 466 019a CDBF      		out __SP_L__,r28
 467               	/* prologue: function */
 468               	/* frame size = 12 */
 469               	/* stack size = 14 */
 470               	.L__stack_usage = 14
 471 019c 8C87      		std Y+12,r24
 183:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 	const uint8_t val[] = { 3, 8, 26, 64, 128, 190, 230, 247, 252 };
 472               		.loc 1 183 0
 473 019e 89E0      		ldi r24,lo8(9)
 474 01a0 E0E0      		ldi r30,lo8(.LC0)
 475 01a2 F0E0      		ldi r31,hi8(.LC0)
 476 01a4 DE01      		movw r26,r28
 477 01a6 1396      		adiw r26,3
 478               		0:
 479 01a8 0190      		ld r0,Z+
 480 01aa 0D92      		st X+,r0
 481 01ac 8A95      		dec r24
 482 01ae 01F4      		brne 0b
 184:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 	uint8_t cl = 25;
 483               		.loc 1 184 0
 484 01b0 89E1      		ldi r24,lo8(25)
 485 01b2 8983      		std Y+1,r24
 486               	.LBB3:
 185:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 
 186:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 	for (uint8_t i = 0; i < sizeof(val); i++) {
 487               		.loc 1 186 0
 488 01b4 1A82      		std Y+2,__zero_reg__
 489 01b6 00C0      		rjmp .L15
 490               	.L18:
 187:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 		if (lqi < cl) {
 491               		.loc 1 187 0
 492 01b8 9C85      		ldd r25,Y+12
 493 01ba 8981      		ldd r24,Y+1
 494 01bc 9817      		cp r25,r24
 495 01be 00F4      		brsh .L16
 188:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 			return val[i];
 496               		.loc 1 188 0
 497 01c0 8A81      		ldd r24,Y+2
 498 01c2 882F      		mov r24,r24
 499 01c4 90E0      		ldi r25,0
 500 01c6 9E01      		movw r18,r28
 501 01c8 2D5F      		subi r18,-3
 502 01ca 3F4F      		sbci r19,-1
 503 01cc 820F      		add r24,r18
 504 01ce 931F      		adc r25,r19
 505 01d0 FC01      		movw r30,r24
 506 01d2 8081      		ld r24,Z
 507 01d4 00C0      		rjmp .L19
 508               	.L16:
 189:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 		}
 190:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 
 191:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 		cl += 25;
 509               		.loc 1 191 0 discriminator 2
 510 01d6 8981      		ldd r24,Y+1
 511 01d8 875E      		subi r24,lo8(-(25))
 512 01da 8983      		std Y+1,r24
 186:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 		if (lqi < cl) {
 513               		.loc 1 186 0 discriminator 2
 514 01dc 8A81      		ldd r24,Y+2
 515 01de 8F5F      		subi r24,lo8(-(1))
 516 01e0 8A83      		std Y+2,r24
 517               	.L15:
 186:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 		if (lqi < cl) {
 518               		.loc 1 186 0 is_stmt 0 discriminator 1
 519 01e2 8A81      		ldd r24,Y+2
 520 01e4 8930      		cpi r24,lo8(9)
 521 01e6 00F0      		brlo .L18
 522               	.LBE3:
 192:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 	}
 193:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 
 194:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 	return 255;
 523               		.loc 1 194 0 is_stmt 1
 524 01e8 8FEF      		ldi r24,lo8(-1)
 525               	.L19:
 526               	/* epilogue start */
 195:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** }
 527               		.loc 1 195 0 discriminator 1
 528 01ea 2C96      		adiw r28,12
 529 01ec 0FB6      		in __tmp_reg__,__SREG__
 530 01ee F894      		cli
 531 01f0 DEBF      		out __SP_H__,r29
 532 01f2 0FBE      		out __SREG__,__tmp_reg__
 533 01f4 CDBF      		out __SP_L__,r28
 534 01f6 DF91      		pop r29
 535 01f8 CF91      		pop r28
 536 01fa 0895      		ret
 537               		.cfi_endproc
 538               	.LFE75:
 540               	.global	NWK_TaskHandler
 542               	NWK_TaskHandler:
 543               	.LFB76:
 196:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 
 197:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** /*************************************************************************//**
 198:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** *  @brief Network layer task handler
 199:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** *****************************************************************************/
 200:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** void NWK_TaskHandler(void)
 201:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** {
 544               		.loc 1 201 0
 545               		.cfi_startproc
 546 01fc CF93      		push r28
 547               	.LCFI35:
 548               		.cfi_def_cfa_offset 3
 549               		.cfi_offset 28, -2
 550 01fe DF93      		push r29
 551               	.LCFI36:
 552               		.cfi_def_cfa_offset 4
 553               		.cfi_offset 29, -3
 554 0200 CDB7      		in r28,__SP_L__
 555 0202 DEB7      		in r29,__SP_H__
 556               	.LCFI37:
 557               		.cfi_def_cfa_register 28
 558               	/* prologue: function */
 559               	/* frame size = 0 */
 560               	/* stack size = 2 */
 561               	.L__stack_usage = 2
 202:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 	nwkRxTaskHandler();
 562               		.loc 1 202 0
 563 0204 0E94 0000 		call nwkRxTaskHandler
 203:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 	nwkTxTaskHandler();
 564               		.loc 1 203 0
 565 0208 0E94 0000 		call nwkTxTaskHandler
 204:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 	nwkDataReqTaskHandler();
 566               		.loc 1 204 0
 567 020c 0E94 0000 		call nwkDataReqTaskHandler
 205:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** #ifdef NWK_ENABLE_SECURITY
 206:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 	nwkSecurityTaskHandler();
 207:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** #endif
 208:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** }
 568               		.loc 1 208 0
 569 0210 0000      		nop
 570               	/* epilogue start */
 571 0212 DF91      		pop r29
 572 0214 CF91      		pop r28
 573 0216 0895      		ret
 574               		.cfi_endproc
 575               	.LFE76:
 577               	.Letext0:
 578               		.file 2 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\in
 579               		.file 3 "../../../stack/LwMesh/TDMA/nwk/inc/nwkRx.h"
 580               		.file 4 "../../../stack/LwMesh/TDMA/nwk/inc/nwk.h"
 581               		.file 5 "config/config.h"
DEFINED SYMBOLS
                            *ABS*:00000000 nwk.c
C:\Users\GUILHE~1\AppData\Local\Temp\ccdmH7ae.s:2      *ABS*:0000003e __SP_H__
C:\Users\GUILHE~1\AppData\Local\Temp\ccdmH7ae.s:3      *ABS*:0000003d __SP_L__
C:\Users\GUILHE~1\AppData\Local\Temp\ccdmH7ae.s:4      *ABS*:0000003f __SREG__
C:\Users\GUILHE~1\AppData\Local\Temp\ccdmH7ae.s:5      *ABS*:0000003b __RAMPZ__
C:\Users\GUILHE~1\AppData\Local\Temp\ccdmH7ae.s:6      *ABS*:00000000 __tmp_reg__
C:\Users\GUILHE~1\AppData\Local\Temp\ccdmH7ae.s:7      *ABS*:00000001 __zero_reg__
                            *COM*:00000001 n
                            *COM*:00000004 tTS
                            *COM*:00000002 macLLDNnumTimeSlots
                            *COM*:00000002 macLLDNnumUplinkTS
                            *COM*:00000002 macLLDNRetransmitTS
                            *COM*:00000028 nwkIb
C:\Users\GUILHE~1\AppData\Local\Temp\ccdmH7ae.s:19     .text:00000000 NWK_Init
C:\Users\GUILHE~1\AppData\Local\Temp\ccdmH7ae.s:102    .text:00000066 NWK_SetAddr
C:\Users\GUILHE~1\AppData\Local\Temp\ccdmH7ae.s:149    .text:00000094 NWK_SetPanId
C:\Users\GUILHE~1\AppData\Local\Temp\ccdmH7ae.s:196    .text:000000c2 NWK_OpenEndpoint
C:\Users\GUILHE~1\AppData\Local\Temp\ccdmH7ae.s:251    .text:000000fc NWK_Busy
C:\Users\GUILHE~1\AppData\Local\Temp\ccdmH7ae.s:291    .text:0000011c NWK_Lock
C:\Users\GUILHE~1\AppData\Local\Temp\ccdmH7ae.s:328    .text:0000013e NWK_Unlock
C:\Users\GUILHE~1\AppData\Local\Temp\ccdmH7ae.s:365    .text:00000160 NWK_SleepReq
C:\Users\GUILHE~1\AppData\Local\Temp\ccdmH7ae.s:398    .text:00000174 NWK_WakeupReq
C:\Users\GUILHE~1\AppData\Local\Temp\ccdmH7ae.s:443    .text:00000188 NWK_LinearizeLqi
C:\Users\GUILHE~1\AppData\Local\Temp\ccdmH7ae.s:542    .text:000001fc NWK_TaskHandler

UNDEFINED SYMBOLS
nwkTxInit
nwkRxInit
nwkFrameInit
nwkDataReqInit
nwkGroupInit
PHY_SetShortAddr
PHY_SetPanId
PHY_Sleep
PHY_Wakeup
nwkRxTaskHandler
nwkTxTaskHandler
nwkDataReqTaskHandler
__do_copy_data
__do_clear_bss
