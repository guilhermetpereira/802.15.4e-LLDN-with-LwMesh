   1               		.file	"nwk.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__RAMPZ__ = 0x3b
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
   8               		.text
   9               	.Ltext0:
  10               		.cfi_sections	.debug_frame
  11               		.comm	n,1,1
  12               		.section	.bss.tTS,"aw",@nobits
  15               	tTS:
  16 0000 0000 0000 		.zero	4
  17               		.comm	nwkIb,40,1
  18               		.text
  19               	.global	NWK_Init
  21               	NWK_Init:
  22               	.LFB66:
  23               		.file 1 "../../../stack/LwMesh/TDMA/nwk/src/nwk.c"
   1:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** /**
   2:../../../stack/LwMesh/TDMA/nwk/src/nwk.c ****  * \file nwk.c
   3:../../../stack/LwMesh/TDMA/nwk/src/nwk.c ****  *
   4:../../../stack/LwMesh/TDMA/nwk/src/nwk.c ****  * \brief Network layer management functions implementation
   5:../../../stack/LwMesh/TDMA/nwk/src/nwk.c ****  *
   6:../../../stack/LwMesh/TDMA/nwk/src/nwk.c ****  * Copyright (C) 2014 Atmel Corporation. All rights reserved.
   7:../../../stack/LwMesh/TDMA/nwk/src/nwk.c ****  *
   8:../../../stack/LwMesh/TDMA/nwk/src/nwk.c ****  * \asf_license_start
   9:../../../stack/LwMesh/TDMA/nwk/src/nwk.c ****  *
  10:../../../stack/LwMesh/TDMA/nwk/src/nwk.c ****  * Redistribution and use in source and binary forms, with or without
  11:../../../stack/LwMesh/TDMA/nwk/src/nwk.c ****  * modification, are permitted provided that the following conditions are met:
  12:../../../stack/LwMesh/TDMA/nwk/src/nwk.c ****  *
  13:../../../stack/LwMesh/TDMA/nwk/src/nwk.c ****  * 1. Redistributions of source code must retain the above copyright notice,
  14:../../../stack/LwMesh/TDMA/nwk/src/nwk.c ****  *    this list of conditions and the following disclaimer.
  15:../../../stack/LwMesh/TDMA/nwk/src/nwk.c ****  *
  16:../../../stack/LwMesh/TDMA/nwk/src/nwk.c ****  * 2. Redistributions in binary form must reproduce the above copyright notice,
  17:../../../stack/LwMesh/TDMA/nwk/src/nwk.c ****  *    this list of conditions and the following disclaimer in the documentation
  18:../../../stack/LwMesh/TDMA/nwk/src/nwk.c ****  *    and/or other materials provided with the distribution.
  19:../../../stack/LwMesh/TDMA/nwk/src/nwk.c ****  *
  20:../../../stack/LwMesh/TDMA/nwk/src/nwk.c ****  * 3. The name of Atmel may not be used to endorse or promote products derived
  21:../../../stack/LwMesh/TDMA/nwk/src/nwk.c ****  *    from this software without specific prior written permission.
  22:../../../stack/LwMesh/TDMA/nwk/src/nwk.c ****  *
  23:../../../stack/LwMesh/TDMA/nwk/src/nwk.c ****  * 4. This software may only be redistributed and used in connection with an
  24:../../../stack/LwMesh/TDMA/nwk/src/nwk.c ****  *    Atmel microcontroller product.
  25:../../../stack/LwMesh/TDMA/nwk/src/nwk.c ****  *
  26:../../../stack/LwMesh/TDMA/nwk/src/nwk.c ****  * THIS SOFTWARE IS PROVIDED BY ATMEL "AS IS" AND ANY EXPRESS OR IMPLIED
  27:../../../stack/LwMesh/TDMA/nwk/src/nwk.c ****  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
  28:../../../stack/LwMesh/TDMA/nwk/src/nwk.c ****  * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE
  29:../../../stack/LwMesh/TDMA/nwk/src/nwk.c ****  * EXPRESSLY AND SPECIFICALLY DISCLAIMED. IN NO EVENT SHALL ATMEL BE LIABLE FOR
  30:../../../stack/LwMesh/TDMA/nwk/src/nwk.c ****  * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  31:../../../stack/LwMesh/TDMA/nwk/src/nwk.c ****  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
  32:../../../stack/LwMesh/TDMA/nwk/src/nwk.c ****  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
  33:../../../stack/LwMesh/TDMA/nwk/src/nwk.c ****  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
  34:../../../stack/LwMesh/TDMA/nwk/src/nwk.c ****  * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
  35:../../../stack/LwMesh/TDMA/nwk/src/nwk.c ****  * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  36:../../../stack/LwMesh/TDMA/nwk/src/nwk.c ****  * POSSIBILITY OF SUCH DAMAGE.
  37:../../../stack/LwMesh/TDMA/nwk/src/nwk.c ****  *
  38:../../../stack/LwMesh/TDMA/nwk/src/nwk.c ****  * \asf_license_stop
  39:../../../stack/LwMesh/TDMA/nwk/src/nwk.c ****  *
  40:../../../stack/LwMesh/TDMA/nwk/src/nwk.c ****  *
  41:../../../stack/LwMesh/TDMA/nwk/src/nwk.c ****  */
  42:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 
  43:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** /*
  44:../../../stack/LwMesh/TDMA/nwk/src/nwk.c ****  * Copyright (c) 2014, Atmel Corporation All rights reserved.
  45:../../../stack/LwMesh/TDMA/nwk/src/nwk.c ****  *
  46:../../../stack/LwMesh/TDMA/nwk/src/nwk.c ****  * Licensed under Atmel's Limited License Agreement --> EULA.txt
  47:../../../stack/LwMesh/TDMA/nwk/src/nwk.c ****  */
  48:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 
  49:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** /*- Includes ---------------------------------------------------------------*/
  50:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** #include <stdlib.h>
  51:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** #include <stdint.h>
  52:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** #include <stdbool.h>
  53:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** #include <string.h>
  54:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** #include "phy.h"
  55:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** #include "sysConfig.h"
  56:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** #include "nwkRx.h"
  57:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** #include "nwkTx.h"
  58:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** #include "nwkGroup.h"
  59:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** #include "nwkFrame.h"
  60:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** #include "nwkRoute.h"
  61:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** #include "nwkSecurity.h"
  62:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** #include "nwkRouteDiscovery.h"
  63:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 
  64:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** /*- Variables --------------------------------------------------------------*/
  65:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** NwkIb_t nwkIb;
  66:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 
  67:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** /*- Implementations --------------------------------------------------------*/
  68:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 
  69:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** /*************************************************************************//**
  70:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** *  @brief Initializes all network layer modules
  71:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** *****************************************************************************/
  72:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** void NWK_Init(void)
  73:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** {
  24               		.loc 1 73 0
  25               		.cfi_startproc
  26 0000 CF93      		push r28
  27               	.LCFI0:
  28               		.cfi_def_cfa_offset 3
  29               		.cfi_offset 28, -2
  30 0002 DF93      		push r29
  31               	.LCFI1:
  32               		.cfi_def_cfa_offset 4
  33               		.cfi_offset 29, -3
  34 0004 1F92      		push __zero_reg__
  35               	.LCFI2:
  36               		.cfi_def_cfa_offset 5
  37 0006 CDB7      		in r28,__SP_L__
  38 0008 DEB7      		in r29,__SP_H__
  39               	.LCFI3:
  40               		.cfi_def_cfa_register 28
  41               	/* prologue: function */
  42               	/* frame size = 1 */
  43               	/* stack size = 3 */
  44               	.L__stack_usage = 3
  74:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 	nwkIb.nwkSeqNum = 0;
  45               		.loc 1 74 0
  46 000a 1092 0000 		sts nwkIb+4,__zero_reg__
  75:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 	nwkIb.macSeqNum = 0;
  47               		.loc 1 75 0
  48 000e 1092 0000 		sts nwkIb+5,__zero_reg__
  76:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 	nwkIb.addr = 0;
  49               		.loc 1 76 0
  50 0012 1092 0000 		sts nwkIb+1,__zero_reg__
  51 0016 1092 0000 		sts nwkIb,__zero_reg__
  77:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 	nwkIb.lock = 0;
  52               		.loc 1 77 0
  53 001a 1092 0000 		sts nwkIb+38+1,__zero_reg__
  54 001e 1092 0000 		sts nwkIb+38,__zero_reg__
  55               	.LBB2:
  78:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 
  79:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 	for (uint8_t i = 0; i < NWK_ENDPOINTS_AMOUNT; i++) {
  56               		.loc 1 79 0
  57 0022 1982      		std Y+1,__zero_reg__
  58 0024 00C0      		rjmp .L2
  59               	.L3:
  80:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 		nwkIb.endpoint[i] = NULL;
  60               		.loc 1 80 0 discriminator 3
  61 0026 8981      		ldd r24,Y+1
  62 0028 882F      		mov r24,r24
  63 002a 90E0      		ldi r25,0
  64 002c 0396      		adiw r24,3
  65 002e 880F      		lsl r24
  66 0030 991F      		rol r25
  67 0032 8050      		subi r24,lo8(-(nwkIb))
  68 0034 9040      		sbci r25,hi8(-(nwkIb))
  69 0036 FC01      		movw r30,r24
  70 0038 1182      		std Z+1,__zero_reg__
  71 003a 1082      		st Z,__zero_reg__
  79:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 		nwkIb.endpoint[i] = NULL;
  72               		.loc 1 79 0 discriminator 3
  73 003c 8981      		ldd r24,Y+1
  74 003e 8F5F      		subi r24,lo8(-(1))
  75 0040 8983      		std Y+1,r24
  76               	.L2:
  79:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 		nwkIb.endpoint[i] = NULL;
  77               		.loc 1 79 0 is_stmt 0 discriminator 1
  78 0042 8981      		ldd r24,Y+1
  79 0044 8031      		cpi r24,lo8(16)
  80 0046 00F0      		brlo .L3
  81               	.LBE2:
  81:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 	}
  82:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 
  83:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 	nwkTxInit();
  82               		.loc 1 83 0 is_stmt 1
  83 0048 0E94 0000 		call nwkTxInit
  84:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 	nwkRxInit();
  84               		.loc 1 84 0
  85 004c 0E94 0000 		call nwkRxInit
  85:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 	nwkFrameInit();
  86               		.loc 1 85 0
  87 0050 0E94 0000 		call nwkFrameInit
  86:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 	nwkDataReqInit();
  88               		.loc 1 86 0
  89 0054 0E94 0000 		call nwkDataReqInit
  87:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 
  88:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** #ifdef NWK_ENABLE_ROUTING
  89:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 	nwkRouteInit();
  90:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** #endif
  91:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 
  92:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** #ifdef NWK_ENABLE_SECURITY
  93:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 	nwkSecurityInit();
  94:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** #endif
  95:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 
  96:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** #ifdef NWK_ENABLE_MULTICAST
  97:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 	nwkGroupInit();
  90               		.loc 1 97 0
  91 0058 0E94 0000 		call nwkGroupInit
  98:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** #endif
  99:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 
 100:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** #ifdef NWK_ENABLE_ROUTE_DISCOVERY
 101:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 	nwkRouteDiscoveryInit();
 102:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** #endif
 103:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** }
  92               		.loc 1 103 0
  93 005c 0000      		nop
  94               	/* epilogue start */
  95 005e 0F90      		pop __tmp_reg__
  96 0060 DF91      		pop r29
  97 0062 CF91      		pop r28
  98 0064 0895      		ret
  99               		.cfi_endproc
 100               	.LFE66:
 102               	.global	NWK_SetAddr
 104               	NWK_SetAddr:
 105               	.LFB67:
 104:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 
 105:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** /*************************************************************************//**
 106:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** *  @brief Sets network address of the node
 107:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** *  @param[in] addr Adddress to set
 108:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** *****************************************************************************/
 109:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** void NWK_SetAddr(uint16_t addr)
 110:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** {
 106               		.loc 1 110 0
 107               		.cfi_startproc
 108 0066 CF93      		push r28
 109               	.LCFI4:
 110               		.cfi_def_cfa_offset 3
 111               		.cfi_offset 28, -2
 112 0068 DF93      		push r29
 113               	.LCFI5:
 114               		.cfi_def_cfa_offset 4
 115               		.cfi_offset 29, -3
 116 006a 00D0      		rcall .
 117               	.LCFI6:
 118               		.cfi_def_cfa_offset 6
 119 006c CDB7      		in r28,__SP_L__
 120 006e DEB7      		in r29,__SP_H__
 121               	.LCFI7:
 122               		.cfi_def_cfa_register 28
 123               	/* prologue: function */
 124               	/* frame size = 2 */
 125               	/* stack size = 4 */
 126               	.L__stack_usage = 4
 127 0070 9A83      		std Y+2,r25
 128 0072 8983      		std Y+1,r24
 111:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 	nwkIb.addr = addr;
 129               		.loc 1 111 0
 130 0074 8981      		ldd r24,Y+1
 131 0076 9A81      		ldd r25,Y+2
 132 0078 9093 0000 		sts nwkIb+1,r25
 133 007c 8093 0000 		sts nwkIb,r24
 112:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 	PHY_SetShortAddr(addr);
 134               		.loc 1 112 0
 135 0080 8981      		ldd r24,Y+1
 136 0082 9A81      		ldd r25,Y+2
 137 0084 0E94 0000 		call PHY_SetShortAddr
 113:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** }
 138               		.loc 1 113 0
 139 0088 0000      		nop
 140               	/* epilogue start */
 141 008a 0F90      		pop __tmp_reg__
 142 008c 0F90      		pop __tmp_reg__
 143 008e DF91      		pop r29
 144 0090 CF91      		pop r28
 145 0092 0895      		ret
 146               		.cfi_endproc
 147               	.LFE67:
 149               	.global	NWK_SetPanId
 151               	NWK_SetPanId:
 152               	.LFB68:
 114:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 
 115:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** /*************************************************************************//**
 116:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** *  @brief Sets network identifier (PAN) of the node
 117:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** *  @param[in] panId PAN ID to set
 118:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** *****************************************************************************/
 119:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** void NWK_SetPanId(uint16_t panId)
 120:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** {
 153               		.loc 1 120 0
 154               		.cfi_startproc
 155 0094 CF93      		push r28
 156               	.LCFI8:
 157               		.cfi_def_cfa_offset 3
 158               		.cfi_offset 28, -2
 159 0096 DF93      		push r29
 160               	.LCFI9:
 161               		.cfi_def_cfa_offset 4
 162               		.cfi_offset 29, -3
 163 0098 00D0      		rcall .
 164               	.LCFI10:
 165               		.cfi_def_cfa_offset 6
 166 009a CDB7      		in r28,__SP_L__
 167 009c DEB7      		in r29,__SP_H__
 168               	.LCFI11:
 169               		.cfi_def_cfa_register 28
 170               	/* prologue: function */
 171               	/* frame size = 2 */
 172               	/* stack size = 4 */
 173               	.L__stack_usage = 4
 174 009e 9A83      		std Y+2,r25
 175 00a0 8983      		std Y+1,r24
 121:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 	nwkIb.panId = panId;
 176               		.loc 1 121 0
 177 00a2 8981      		ldd r24,Y+1
 178 00a4 9A81      		ldd r25,Y+2
 179 00a6 9093 0000 		sts nwkIb+2+1,r25
 180 00aa 8093 0000 		sts nwkIb+2,r24
 122:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 	PHY_SetPanId(panId);
 181               		.loc 1 122 0
 182 00ae 8981      		ldd r24,Y+1
 183 00b0 9A81      		ldd r25,Y+2
 184 00b2 0E94 0000 		call PHY_SetPanId
 123:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** }
 185               		.loc 1 123 0
 186 00b6 0000      		nop
 187               	/* epilogue start */
 188 00b8 0F90      		pop __tmp_reg__
 189 00ba 0F90      		pop __tmp_reg__
 190 00bc DF91      		pop r29
 191 00be CF91      		pop r28
 192 00c0 0895      		ret
 193               		.cfi_endproc
 194               	.LFE68:
 196               	.global	NWK_OpenEndpoint
 198               	NWK_OpenEndpoint:
 199               	.LFB69:
 124:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 
 125:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** /*************************************************************************//**
 126:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** *  @brief Registers callback @a ind for the endpoint @a endpoint
 127:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** *  @param[in] id Endpoint index (1-15)
 128:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** *  @param[in] handler Pointer to the callback function
 129:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** *****************************************************************************/
 130:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** void NWK_OpenEndpoint(uint8_t id, bool (*handler)(NWK_DataInd_t *ind))
 131:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** {
 200               		.loc 1 131 0
 201               		.cfi_startproc
 202 00c2 CF93      		push r28
 203               	.LCFI12:
 204               		.cfi_def_cfa_offset 3
 205               		.cfi_offset 28, -2
 206 00c4 DF93      		push r29
 207               	.LCFI13:
 208               		.cfi_def_cfa_offset 4
 209               		.cfi_offset 29, -3
 210 00c6 00D0      		rcall .
 211 00c8 1F92      		push __zero_reg__
 212               	.LCFI14:
 213               		.cfi_def_cfa_offset 7
 214 00ca CDB7      		in r28,__SP_L__
 215 00cc DEB7      		in r29,__SP_H__
 216               	.LCFI15:
 217               		.cfi_def_cfa_register 28
 218               	/* prologue: function */
 219               	/* frame size = 3 */
 220               	/* stack size = 5 */
 221               	.L__stack_usage = 5
 222 00ce 8983      		std Y+1,r24
 223 00d0 7B83      		std Y+3,r23
 224 00d2 6A83      		std Y+2,r22
 132:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 	nwkIb.endpoint[id] = handler;
 225               		.loc 1 132 0
 226 00d4 8981      		ldd r24,Y+1
 227 00d6 882F      		mov r24,r24
 228 00d8 90E0      		ldi r25,0
 229 00da 0396      		adiw r24,3
 230 00dc 880F      		lsl r24
 231 00de 991F      		rol r25
 232 00e0 8050      		subi r24,lo8(-(nwkIb))
 233 00e2 9040      		sbci r25,hi8(-(nwkIb))
 234 00e4 2A81      		ldd r18,Y+2
 235 00e6 3B81      		ldd r19,Y+3
 236 00e8 FC01      		movw r30,r24
 237 00ea 3183      		std Z+1,r19
 238 00ec 2083      		st Z,r18
 133:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** }
 239               		.loc 1 133 0
 240 00ee 0000      		nop
 241               	/* epilogue start */
 242 00f0 0F90      		pop __tmp_reg__
 243 00f2 0F90      		pop __tmp_reg__
 244 00f4 0F90      		pop __tmp_reg__
 245 00f6 DF91      		pop r29
 246 00f8 CF91      		pop r28
 247 00fa 0895      		ret
 248               		.cfi_endproc
 249               	.LFE69:
 251               	.global	NWK_Busy
 253               	NWK_Busy:
 254               	.LFB70:
 134:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 
 135:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** /*************************************************************************//**
 136:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** *  @brief Checks if network layer is ready for sleep
 137:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** *  @return @c true if network layer is ready for sleep or @c false otherwise
 138:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** *****************************************************************************/
 139:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** bool NWK_Busy(void)
 140:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** {
 255               		.loc 1 140 0
 256               		.cfi_startproc
 257 00fc CF93      		push r28
 258               	.LCFI16:
 259               		.cfi_def_cfa_offset 3
 260               		.cfi_offset 28, -2
 261 00fe DF93      		push r29
 262               	.LCFI17:
 263               		.cfi_def_cfa_offset 4
 264               		.cfi_offset 29, -3
 265 0100 CDB7      		in r28,__SP_L__
 266 0102 DEB7      		in r29,__SP_H__
 267               	.LCFI18:
 268               		.cfi_def_cfa_register 28
 269               	/* prologue: function */
 270               	/* frame size = 0 */
 271               	/* stack size = 2 */
 272               	.L__stack_usage = 2
 141:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 	return nwkIb.lock > 0;
 273               		.loc 1 141 0
 274 0104 8091 0000 		lds r24,nwkIb+38
 275 0108 9091 0000 		lds r25,nwkIb+38+1
 276 010c 21E0      		ldi r18,lo8(1)
 277 010e 892B      		or r24,r25
 278 0110 01F4      		brne .L9
 279 0112 20E0      		ldi r18,0
 280               	.L9:
 281               		.loc 1 141 0 is_stmt 0 discriminator 1
 282 0114 822F      		mov r24,r18
 283               	/* epilogue start */
 142:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** }
 284               		.loc 1 142 0 is_stmt 1 discriminator 1
 285 0116 DF91      		pop r29
 286 0118 CF91      		pop r28
 287 011a 0895      		ret
 288               		.cfi_endproc
 289               	.LFE70:
 291               	.global	NWK_Lock
 293               	NWK_Lock:
 294               	.LFB71:
 143:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 
 144:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** /*************************************************************************//**
 145:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** *  @brief Increases the lock counter and sets a busy state
 146:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** *****************************************************************************/
 147:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** void NWK_Lock(void)
 148:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** {
 295               		.loc 1 148 0
 296               		.cfi_startproc
 297 011c CF93      		push r28
 298               	.LCFI19:
 299               		.cfi_def_cfa_offset 3
 300               		.cfi_offset 28, -2
 301 011e DF93      		push r29
 302               	.LCFI20:
 303               		.cfi_def_cfa_offset 4
 304               		.cfi_offset 29, -3
 305 0120 CDB7      		in r28,__SP_L__
 306 0122 DEB7      		in r29,__SP_H__
 307               	.LCFI21:
 308               		.cfi_def_cfa_register 28
 309               	/* prologue: function */
 310               	/* frame size = 0 */
 311               	/* stack size = 2 */
 312               	.L__stack_usage = 2
 149:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 	nwkIb.lock++;
 313               		.loc 1 149 0
 314 0124 8091 0000 		lds r24,nwkIb+38
 315 0128 9091 0000 		lds r25,nwkIb+38+1
 316 012c 0196      		adiw r24,1
 317 012e 9093 0000 		sts nwkIb+38+1,r25
 318 0132 8093 0000 		sts nwkIb+38,r24
 150:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** }
 319               		.loc 1 150 0
 320 0136 0000      		nop
 321               	/* epilogue start */
 322 0138 DF91      		pop r29
 323 013a CF91      		pop r28
 324 013c 0895      		ret
 325               		.cfi_endproc
 326               	.LFE71:
 328               	.global	NWK_Unlock
 330               	NWK_Unlock:
 331               	.LFB72:
 151:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 
 152:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** /*************************************************************************//**
 153:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** *  @brief Decreases the lock counter and sets a free state if counter reaches 0
 154:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** *****************************************************************************/
 155:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** void NWK_Unlock(void)
 156:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** {
 332               		.loc 1 156 0
 333               		.cfi_startproc
 334 013e CF93      		push r28
 335               	.LCFI22:
 336               		.cfi_def_cfa_offset 3
 337               		.cfi_offset 28, -2
 338 0140 DF93      		push r29
 339               	.LCFI23:
 340               		.cfi_def_cfa_offset 4
 341               		.cfi_offset 29, -3
 342 0142 CDB7      		in r28,__SP_L__
 343 0144 DEB7      		in r29,__SP_H__
 344               	.LCFI24:
 345               		.cfi_def_cfa_register 28
 346               	/* prologue: function */
 347               	/* frame size = 0 */
 348               	/* stack size = 2 */
 349               	.L__stack_usage = 2
 157:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 	nwkIb.lock--;
 350               		.loc 1 157 0
 351 0146 8091 0000 		lds r24,nwkIb+38
 352 014a 9091 0000 		lds r25,nwkIb+38+1
 353 014e 0197      		sbiw r24,1
 354 0150 9093 0000 		sts nwkIb+38+1,r25
 355 0154 8093 0000 		sts nwkIb+38,r24
 158:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** }
 356               		.loc 1 158 0
 357 0158 0000      		nop
 358               	/* epilogue start */
 359 015a DF91      		pop r29
 360 015c CF91      		pop r28
 361 015e 0895      		ret
 362               		.cfi_endproc
 363               	.LFE72:
 365               	.global	NWK_SleepReq
 367               	NWK_SleepReq:
 368               	.LFB73:
 159:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 
 160:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** /*************************************************************************//**
 161:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** *  @brief Puts network layer to a sleeping state
 162:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** *****************************************************************************/
 163:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** void NWK_SleepReq(void)
 164:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** {
 369               		.loc 1 164 0
 370               		.cfi_startproc
 371 0160 CF93      		push r28
 372               	.LCFI25:
 373               		.cfi_def_cfa_offset 3
 374               		.cfi_offset 28, -2
 375 0162 DF93      		push r29
 376               	.LCFI26:
 377               		.cfi_def_cfa_offset 4
 378               		.cfi_offset 29, -3
 379 0164 CDB7      		in r28,__SP_L__
 380 0166 DEB7      		in r29,__SP_H__
 381               	.LCFI27:
 382               		.cfi_def_cfa_register 28
 383               	/* prologue: function */
 384               	/* frame size = 0 */
 385               	/* stack size = 2 */
 386               	.L__stack_usage = 2
 165:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 	PHY_Sleep();
 387               		.loc 1 165 0
 388 0168 0E94 0000 		call PHY_Sleep
 166:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** }
 389               		.loc 1 166 0
 390 016c 0000      		nop
 391               	/* epilogue start */
 392 016e DF91      		pop r29
 393 0170 CF91      		pop r28
 394 0172 0895      		ret
 395               		.cfi_endproc
 396               	.LFE73:
 398               	.global	NWK_WakeupReq
 400               	NWK_WakeupReq:
 401               	.LFB74:
 167:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 
 168:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** /*************************************************************************//**
 169:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** *  @brief Puts network layer to an active state
 170:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** *****************************************************************************/
 171:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** void NWK_WakeupReq(void)
 172:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** {
 402               		.loc 1 172 0
 403               		.cfi_startproc
 404 0174 CF93      		push r28
 405               	.LCFI28:
 406               		.cfi_def_cfa_offset 3
 407               		.cfi_offset 28, -2
 408 0176 DF93      		push r29
 409               	.LCFI29:
 410               		.cfi_def_cfa_offset 4
 411               		.cfi_offset 29, -3
 412 0178 CDB7      		in r28,__SP_L__
 413 017a DEB7      		in r29,__SP_H__
 414               	.LCFI30:
 415               		.cfi_def_cfa_register 28
 416               	/* prologue: function */
 417               	/* frame size = 0 */
 418               	/* stack size = 2 */
 419               	.L__stack_usage = 2
 173:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 	PHY_Wakeup();
 420               		.loc 1 173 0
 421 017c 0E94 0000 		call PHY_Wakeup
 174:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** }
 422               		.loc 1 174 0
 423 0180 0000      		nop
 424               	/* epilogue start */
 425 0182 DF91      		pop r29
 426 0184 CF91      		pop r28
 427 0186 0895      		ret
 428               		.cfi_endproc
 429               	.LFE74:
 431               		.section	.rodata
 432               	.LC0:
 433 0000 03        		.byte	3
 434 0001 08        		.byte	8
 435 0002 1A        		.byte	26
 436 0003 40        		.byte	64
 437 0004 80        		.byte	-128
 438 0005 BE        		.byte	-66
 439 0006 E6        		.byte	-26
 440 0007 F7        		.byte	-9
 441 0008 FC        		.byte	-4
 442               		.text
 443               	.global	NWK_LinearizeLqi
 445               	NWK_LinearizeLqi:
 446               	.LFB75:
 175:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 
 176:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** /*************************************************************************//**
 177:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** *  @brief Calculates linearized value for the given value of the LQI
 178:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** *  @param[in] lqi LQI value as provided by the transceiver
 179:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** *  @return linearized value directly proportional to the probability of delivery
 180:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** *****************************************************************************/
 181:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** uint8_t NWK_LinearizeLqi(uint8_t lqi)
 182:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** {
 447               		.loc 1 182 0
 448               		.cfi_startproc
 449 0188 CF93      		push r28
 450               	.LCFI31:
 451               		.cfi_def_cfa_offset 3
 452               		.cfi_offset 28, -2
 453 018a DF93      		push r29
 454               	.LCFI32:
 455               		.cfi_def_cfa_offset 4
 456               		.cfi_offset 29, -3
 457 018c CDB7      		in r28,__SP_L__
 458 018e DEB7      		in r29,__SP_H__
 459               	.LCFI33:
 460               		.cfi_def_cfa_register 28
 461 0190 2C97      		sbiw r28,12
 462               	.LCFI34:
 463               		.cfi_def_cfa_offset 16
 464 0192 0FB6      		in __tmp_reg__,__SREG__
 465 0194 F894      		cli
 466 0196 DEBF      		out __SP_H__,r29
 467 0198 0FBE      		out __SREG__,__tmp_reg__
 468 019a CDBF      		out __SP_L__,r28
 469               	/* prologue: function */
 470               	/* frame size = 12 */
 471               	/* stack size = 14 */
 472               	.L__stack_usage = 14
 473 019c 8C87      		std Y+12,r24
 183:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 	const uint8_t val[] = { 3, 8, 26, 64, 128, 190, 230, 247, 252 };
 474               		.loc 1 183 0
 475 019e 89E0      		ldi r24,lo8(9)
 476 01a0 E0E0      		ldi r30,lo8(.LC0)
 477 01a2 F0E0      		ldi r31,hi8(.LC0)
 478 01a4 DE01      		movw r26,r28
 479 01a6 1396      		adiw r26,3
 480               		0:
 481 01a8 0190      		ld r0,Z+
 482 01aa 0D92      		st X+,r0
 483 01ac 8A95      		dec r24
 484 01ae 01F4      		brne 0b
 184:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 	uint8_t cl = 25;
 485               		.loc 1 184 0
 486 01b0 89E1      		ldi r24,lo8(25)
 487 01b2 8983      		std Y+1,r24
 488               	.LBB3:
 185:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 
 186:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 	for (uint8_t i = 0; i < sizeof(val); i++) {
 489               		.loc 1 186 0
 490 01b4 1A82      		std Y+2,__zero_reg__
 491 01b6 00C0      		rjmp .L15
 492               	.L18:
 187:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 		if (lqi < cl) {
 493               		.loc 1 187 0
 494 01b8 9C85      		ldd r25,Y+12
 495 01ba 8981      		ldd r24,Y+1
 496 01bc 9817      		cp r25,r24
 497 01be 00F4      		brsh .L16
 188:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 			return val[i];
 498               		.loc 1 188 0
 499 01c0 8A81      		ldd r24,Y+2
 500 01c2 882F      		mov r24,r24
 501 01c4 90E0      		ldi r25,0
 502 01c6 9E01      		movw r18,r28
 503 01c8 2D5F      		subi r18,-3
 504 01ca 3F4F      		sbci r19,-1
 505 01cc 820F      		add r24,r18
 506 01ce 931F      		adc r25,r19
 507 01d0 FC01      		movw r30,r24
 508 01d2 8081      		ld r24,Z
 509 01d4 00C0      		rjmp .L19
 510               	.L16:
 189:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 		}
 190:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 
 191:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 		cl += 25;
 511               		.loc 1 191 0 discriminator 2
 512 01d6 8981      		ldd r24,Y+1
 513 01d8 875E      		subi r24,lo8(-(25))
 514 01da 8983      		std Y+1,r24
 186:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 		if (lqi < cl) {
 515               		.loc 1 186 0 discriminator 2
 516 01dc 8A81      		ldd r24,Y+2
 517 01de 8F5F      		subi r24,lo8(-(1))
 518 01e0 8A83      		std Y+2,r24
 519               	.L15:
 186:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 		if (lqi < cl) {
 520               		.loc 1 186 0 is_stmt 0 discriminator 1
 521 01e2 8A81      		ldd r24,Y+2
 522 01e4 8930      		cpi r24,lo8(9)
 523 01e6 00F0      		brlo .L18
 524               	.LBE3:
 192:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 	}
 193:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 
 194:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 	return 255;
 525               		.loc 1 194 0 is_stmt 1
 526 01e8 8FEF      		ldi r24,lo8(-1)
 527               	.L19:
 528               	/* epilogue start */
 195:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** }
 529               		.loc 1 195 0 discriminator 1
 530 01ea 2C96      		adiw r28,12
 531 01ec 0FB6      		in __tmp_reg__,__SREG__
 532 01ee F894      		cli
 533 01f0 DEBF      		out __SP_H__,r29
 534 01f2 0FBE      		out __SREG__,__tmp_reg__
 535 01f4 CDBF      		out __SP_L__,r28
 536 01f6 DF91      		pop r29
 537 01f8 CF91      		pop r28
 538 01fa 0895      		ret
 539               		.cfi_endproc
 540               	.LFE75:
 542               	.global	NWK_TaskHandler
 544               	NWK_TaskHandler:
 545               	.LFB76:
 196:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 
 197:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** /*************************************************************************//**
 198:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** *  @brief Network layer task handler
 199:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** *****************************************************************************/
 200:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** void NWK_TaskHandler(void)
 201:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** {
 546               		.loc 1 201 0
 547               		.cfi_startproc
 548 01fc CF93      		push r28
 549               	.LCFI35:
 550               		.cfi_def_cfa_offset 3
 551               		.cfi_offset 28, -2
 552 01fe DF93      		push r29
 553               	.LCFI36:
 554               		.cfi_def_cfa_offset 4
 555               		.cfi_offset 29, -3
 556 0200 CDB7      		in r28,__SP_L__
 557 0202 DEB7      		in r29,__SP_H__
 558               	.LCFI37:
 559               		.cfi_def_cfa_register 28
 560               	/* prologue: function */
 561               	/* frame size = 0 */
 562               	/* stack size = 2 */
 563               	.L__stack_usage = 2
 202:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 	nwkRxTaskHandler();
 564               		.loc 1 202 0
 565 0204 0E94 0000 		call nwkRxTaskHandler
 203:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 	nwkTxTaskHandler();
 566               		.loc 1 203 0
 567 0208 0E94 0000 		call nwkTxTaskHandler
 204:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 	nwkDataReqTaskHandler();
 568               		.loc 1 204 0
 569 020c 0E94 0000 		call nwkDataReqTaskHandler
 205:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** #ifdef NWK_ENABLE_SECURITY
 206:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 	nwkSecurityTaskHandler();
 207:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** #endif
 208:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** }
 570               		.loc 1 208 0
 571 0210 0000      		nop
 572               	/* epilogue start */
 573 0212 DF91      		pop r29
 574 0214 CF91      		pop r28
 575 0216 0895      		ret
 576               		.cfi_endproc
 577               	.LFE76:
 579               	.Letext0:
 580               		.file 2 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\in
 581               		.file 3 "../../../stack/LwMesh/TDMA/nwk/inc/nwkRx.h"
 582               		.file 4 "../../../stack/LwMesh/TDMA/nwk/inc/nwk.h"
 583               		.file 5 "config/config.h"
DEFINED SYMBOLS
                            *ABS*:00000000 nwk.c
C:\Users\guilh\AppData\Local\Temp\ccwLAU6N.s:2      *ABS*:0000003e __SP_H__
C:\Users\guilh\AppData\Local\Temp\ccwLAU6N.s:3      *ABS*:0000003d __SP_L__
C:\Users\guilh\AppData\Local\Temp\ccwLAU6N.s:4      *ABS*:0000003f __SREG__
C:\Users\guilh\AppData\Local\Temp\ccwLAU6N.s:5      *ABS*:0000003b __RAMPZ__
C:\Users\guilh\AppData\Local\Temp\ccwLAU6N.s:6      *ABS*:00000000 __tmp_reg__
C:\Users\guilh\AppData\Local\Temp\ccwLAU6N.s:7      *ABS*:00000001 __zero_reg__
                            *COM*:00000001 n
C:\Users\guilh\AppData\Local\Temp\ccwLAU6N.s:15     .bss.tTS:00000000 tTS
                            *COM*:00000028 nwkIb
C:\Users\guilh\AppData\Local\Temp\ccwLAU6N.s:21     .text:00000000 NWK_Init
C:\Users\guilh\AppData\Local\Temp\ccwLAU6N.s:104    .text:00000066 NWK_SetAddr
C:\Users\guilh\AppData\Local\Temp\ccwLAU6N.s:151    .text:00000094 NWK_SetPanId
C:\Users\guilh\AppData\Local\Temp\ccwLAU6N.s:198    .text:000000c2 NWK_OpenEndpoint
C:\Users\guilh\AppData\Local\Temp\ccwLAU6N.s:253    .text:000000fc NWK_Busy
C:\Users\guilh\AppData\Local\Temp\ccwLAU6N.s:293    .text:0000011c NWK_Lock
C:\Users\guilh\AppData\Local\Temp\ccwLAU6N.s:330    .text:0000013e NWK_Unlock
C:\Users\guilh\AppData\Local\Temp\ccwLAU6N.s:367    .text:00000160 NWK_SleepReq
C:\Users\guilh\AppData\Local\Temp\ccwLAU6N.s:400    .text:00000174 NWK_WakeupReq
C:\Users\guilh\AppData\Local\Temp\ccwLAU6N.s:445    .text:00000188 NWK_LinearizeLqi
C:\Users\guilh\AppData\Local\Temp\ccwLAU6N.s:544    .text:000001fc NWK_TaskHandler

UNDEFINED SYMBOLS
nwkTxInit
nwkRxInit
nwkFrameInit
nwkDataReqInit
nwkGroupInit
PHY_SetShortAddr
PHY_SetPanId
PHY_Sleep
PHY_Wakeup
nwkRxTaskHandler
nwkTxTaskHandler
nwkDataReqTaskHandler
__do_copy_data
__do_clear_bss
