   1               		.file	"nwk.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__RAMPZ__ = 0x3b
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
   8               		.text
   9               	.Ltext0:
  10               		.cfi_sections	.debug_frame
  11               		.section	.bss.tTS,"aw",@nobits
  14               	tTS:
  15 0000 0000 0000 		.zero	4
  16               		.comm	nwkIb,40,1
  17               		.text
  18               	.global	NWK_Init
  20               	NWK_Init:
  21               	.LFB66:
  22               		.file 1 "../../../stack/LwMesh/TDMA/nwk/src/nwk.c"
   1:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** /**
   2:../../../stack/LwMesh/TDMA/nwk/src/nwk.c ****  * \file nwk.c
   3:../../../stack/LwMesh/TDMA/nwk/src/nwk.c ****  *
   4:../../../stack/LwMesh/TDMA/nwk/src/nwk.c ****  * \brief Network layer management functions implementation
   5:../../../stack/LwMesh/TDMA/nwk/src/nwk.c ****  *
   6:../../../stack/LwMesh/TDMA/nwk/src/nwk.c ****  * Copyright (C) 2014 Atmel Corporation. All rights reserved.
   7:../../../stack/LwMesh/TDMA/nwk/src/nwk.c ****  *
   8:../../../stack/LwMesh/TDMA/nwk/src/nwk.c ****  * \asf_license_start
   9:../../../stack/LwMesh/TDMA/nwk/src/nwk.c ****  *
  10:../../../stack/LwMesh/TDMA/nwk/src/nwk.c ****  * Redistribution and use in source and binary forms, with or without
  11:../../../stack/LwMesh/TDMA/nwk/src/nwk.c ****  * modification, are permitted provided that the following conditions are met:
  12:../../../stack/LwMesh/TDMA/nwk/src/nwk.c ****  *
  13:../../../stack/LwMesh/TDMA/nwk/src/nwk.c ****  * 1. Redistributions of source code must retain the above copyright notice,
  14:../../../stack/LwMesh/TDMA/nwk/src/nwk.c ****  *    this list of conditions and the following disclaimer.
  15:../../../stack/LwMesh/TDMA/nwk/src/nwk.c ****  *
  16:../../../stack/LwMesh/TDMA/nwk/src/nwk.c ****  * 2. Redistributions in binary form must reproduce the above copyright notice,
  17:../../../stack/LwMesh/TDMA/nwk/src/nwk.c ****  *    this list of conditions and the following disclaimer in the documentation
  18:../../../stack/LwMesh/TDMA/nwk/src/nwk.c ****  *    and/or other materials provided with the distribution.
  19:../../../stack/LwMesh/TDMA/nwk/src/nwk.c ****  *
  20:../../../stack/LwMesh/TDMA/nwk/src/nwk.c ****  * 3. The name of Atmel may not be used to endorse or promote products derived
  21:../../../stack/LwMesh/TDMA/nwk/src/nwk.c ****  *    from this software without specific prior written permission.
  22:../../../stack/LwMesh/TDMA/nwk/src/nwk.c ****  *
  23:../../../stack/LwMesh/TDMA/nwk/src/nwk.c ****  * 4. This software may only be redistributed and used in connection with an
  24:../../../stack/LwMesh/TDMA/nwk/src/nwk.c ****  *    Atmel microcontroller product.
  25:../../../stack/LwMesh/TDMA/nwk/src/nwk.c ****  *
  26:../../../stack/LwMesh/TDMA/nwk/src/nwk.c ****  * THIS SOFTWARE IS PROVIDED BY ATMEL "AS IS" AND ANY EXPRESS OR IMPLIED
  27:../../../stack/LwMesh/TDMA/nwk/src/nwk.c ****  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
  28:../../../stack/LwMesh/TDMA/nwk/src/nwk.c ****  * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE
  29:../../../stack/LwMesh/TDMA/nwk/src/nwk.c ****  * EXPRESSLY AND SPECIFICALLY DISCLAIMED. IN NO EVENT SHALL ATMEL BE LIABLE FOR
  30:../../../stack/LwMesh/TDMA/nwk/src/nwk.c ****  * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  31:../../../stack/LwMesh/TDMA/nwk/src/nwk.c ****  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
  32:../../../stack/LwMesh/TDMA/nwk/src/nwk.c ****  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
  33:../../../stack/LwMesh/TDMA/nwk/src/nwk.c ****  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
  34:../../../stack/LwMesh/TDMA/nwk/src/nwk.c ****  * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
  35:../../../stack/LwMesh/TDMA/nwk/src/nwk.c ****  * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  36:../../../stack/LwMesh/TDMA/nwk/src/nwk.c ****  * POSSIBILITY OF SUCH DAMAGE.
  37:../../../stack/LwMesh/TDMA/nwk/src/nwk.c ****  *
  38:../../../stack/LwMesh/TDMA/nwk/src/nwk.c ****  * \asf_license_stop
  39:../../../stack/LwMesh/TDMA/nwk/src/nwk.c ****  *
  40:../../../stack/LwMesh/TDMA/nwk/src/nwk.c ****  *
  41:../../../stack/LwMesh/TDMA/nwk/src/nwk.c ****  */
  42:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 
  43:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** /*
  44:../../../stack/LwMesh/TDMA/nwk/src/nwk.c ****  * Copyright (c) 2014, Atmel Corporation All rights reserved.
  45:../../../stack/LwMesh/TDMA/nwk/src/nwk.c ****  *
  46:../../../stack/LwMesh/TDMA/nwk/src/nwk.c ****  * Licensed under Atmel's Limited License Agreement --> EULA.txt
  47:../../../stack/LwMesh/TDMA/nwk/src/nwk.c ****  */
  48:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 
  49:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** /*- Includes ---------------------------------------------------------------*/
  50:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** #include <stdlib.h>
  51:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** #include <stdint.h>
  52:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** #include <stdbool.h>
  53:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** #include <string.h>
  54:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** #include "phy.h"
  55:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** #include "sysConfig.h"
  56:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** #include "nwkRx.h"
  57:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** #include "nwkTx.h"
  58:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** #include "nwkGroup.h"
  59:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** #include "nwkFrame.h"
  60:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** #include "nwkRoute.h"
  61:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** #include "nwkSecurity.h"
  62:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** #include "nwkRouteDiscovery.h"
  63:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 
  64:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** /*- Variables --------------------------------------------------------------*/
  65:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** NwkIb_t nwkIb;
  66:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 
  67:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** /*- Implementations --------------------------------------------------------*/
  68:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 
  69:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** /*************************************************************************//**
  70:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** *  @brief Initializes all network layer modules
  71:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** *****************************************************************************/
  72:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** void NWK_Init(void)
  73:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** {
  23               		.loc 1 73 0
  24               		.cfi_startproc
  25 0000 CF93      		push r28
  26               	.LCFI0:
  27               		.cfi_def_cfa_offset 3
  28               		.cfi_offset 28, -2
  29 0002 DF93      		push r29
  30               	.LCFI1:
  31               		.cfi_def_cfa_offset 4
  32               		.cfi_offset 29, -3
  33 0004 1F92      		push __zero_reg__
  34               	.LCFI2:
  35               		.cfi_def_cfa_offset 5
  36 0006 CDB7      		in r28,__SP_L__
  37 0008 DEB7      		in r29,__SP_H__
  38               	.LCFI3:
  39               		.cfi_def_cfa_register 28
  40               	/* prologue: function */
  41               	/* frame size = 1 */
  42               	/* stack size = 3 */
  43               	.L__stack_usage = 3
  74:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 	nwkIb.nwkSeqNum = 0;
  44               		.loc 1 74 0
  45 000a 1092 0000 		sts nwkIb+4,__zero_reg__
  75:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 	nwkIb.macSeqNum = 0;
  46               		.loc 1 75 0
  47 000e 1092 0000 		sts nwkIb+5,__zero_reg__
  76:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 	nwkIb.addr = 0;
  48               		.loc 1 76 0
  49 0012 1092 0000 		sts nwkIb+1,__zero_reg__
  50 0016 1092 0000 		sts nwkIb,__zero_reg__
  77:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 	nwkIb.lock = 0;
  51               		.loc 1 77 0
  52 001a 1092 0000 		sts nwkIb+38+1,__zero_reg__
  53 001e 1092 0000 		sts nwkIb+38,__zero_reg__
  54               	.LBB2:
  78:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 
  79:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 	for (uint8_t i = 0; i < NWK_ENDPOINTS_AMOUNT; i++) {
  55               		.loc 1 79 0
  56 0022 1982      		std Y+1,__zero_reg__
  57 0024 00C0      		rjmp .L2
  58               	.L3:
  80:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 		nwkIb.endpoint[i] = NULL;
  59               		.loc 1 80 0 discriminator 3
  60 0026 8981      		ldd r24,Y+1
  61 0028 882F      		mov r24,r24
  62 002a 90E0      		ldi r25,0
  63 002c 0396      		adiw r24,3
  64 002e 880F      		lsl r24
  65 0030 991F      		rol r25
  66 0032 8050      		subi r24,lo8(-(nwkIb))
  67 0034 9040      		sbci r25,hi8(-(nwkIb))
  68 0036 FC01      		movw r30,r24
  69 0038 1182      		std Z+1,__zero_reg__
  70 003a 1082      		st Z,__zero_reg__
  79:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 		nwkIb.endpoint[i] = NULL;
  71               		.loc 1 79 0 discriminator 3
  72 003c 8981      		ldd r24,Y+1
  73 003e 8F5F      		subi r24,lo8(-(1))
  74 0040 8983      		std Y+1,r24
  75               	.L2:
  79:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 		nwkIb.endpoint[i] = NULL;
  76               		.loc 1 79 0 is_stmt 0 discriminator 1
  77 0042 8981      		ldd r24,Y+1
  78 0044 8031      		cpi r24,lo8(16)
  79 0046 00F0      		brlo .L3
  80               	.LBE2:
  81:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 	}
  82:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 
  83:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 	nwkTxInit();
  81               		.loc 1 83 0 is_stmt 1
  82 0048 0E94 0000 		call nwkTxInit
  84:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 	nwkRxInit();
  83               		.loc 1 84 0
  84 004c 0E94 0000 		call nwkRxInit
  85:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 	nwkFrameInit();
  85               		.loc 1 85 0
  86 0050 0E94 0000 		call nwkFrameInit
  86:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 	nwkDataReqInit();
  87               		.loc 1 86 0
  88 0054 0E94 0000 		call nwkDataReqInit
  87:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 
  88:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** #ifdef NWK_ENABLE_ROUTING
  89:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 	nwkRouteInit();
  90:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** #endif
  91:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 
  92:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** #ifdef NWK_ENABLE_SECURITY
  93:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 	nwkSecurityInit();
  94:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** #endif
  95:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 
  96:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** #ifdef NWK_ENABLE_MULTICAST
  97:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 	nwkGroupInit();
  89               		.loc 1 97 0
  90 0058 0E94 0000 		call nwkGroupInit
  98:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** #endif
  99:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 
 100:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** #ifdef NWK_ENABLE_ROUTE_DISCOVERY
 101:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 	nwkRouteDiscoveryInit();
 102:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** #endif
 103:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** }
  91               		.loc 1 103 0
  92 005c 0000      		nop
  93               	/* epilogue start */
  94 005e 0F90      		pop __tmp_reg__
  95 0060 DF91      		pop r29
  96 0062 CF91      		pop r28
  97 0064 0895      		ret
  98               		.cfi_endproc
  99               	.LFE66:
 101               	.global	NWK_SetAddr
 103               	NWK_SetAddr:
 104               	.LFB67:
 104:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 
 105:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** /*************************************************************************//**
 106:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** *  @brief Sets network address of the node
 107:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** *  @param[in] addr Adddress to set
 108:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** *****************************************************************************/
 109:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** void NWK_SetAddr(uint16_t addr)
 110:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** {
 105               		.loc 1 110 0
 106               		.cfi_startproc
 107 0066 CF93      		push r28
 108               	.LCFI4:
 109               		.cfi_def_cfa_offset 3
 110               		.cfi_offset 28, -2
 111 0068 DF93      		push r29
 112               	.LCFI5:
 113               		.cfi_def_cfa_offset 4
 114               		.cfi_offset 29, -3
 115 006a 00D0      		rcall .
 116               	.LCFI6:
 117               		.cfi_def_cfa_offset 6
 118 006c CDB7      		in r28,__SP_L__
 119 006e DEB7      		in r29,__SP_H__
 120               	.LCFI7:
 121               		.cfi_def_cfa_register 28
 122               	/* prologue: function */
 123               	/* frame size = 2 */
 124               	/* stack size = 4 */
 125               	.L__stack_usage = 4
 126 0070 9A83      		std Y+2,r25
 127 0072 8983      		std Y+1,r24
 111:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 	nwkIb.addr = addr;
 128               		.loc 1 111 0
 129 0074 8981      		ldd r24,Y+1
 130 0076 9A81      		ldd r25,Y+2
 131 0078 9093 0000 		sts nwkIb+1,r25
 132 007c 8093 0000 		sts nwkIb,r24
 112:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 	PHY_SetShortAddr(addr);
 133               		.loc 1 112 0
 134 0080 8981      		ldd r24,Y+1
 135 0082 9A81      		ldd r25,Y+2
 136 0084 0E94 0000 		call PHY_SetShortAddr
 113:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** }
 137               		.loc 1 113 0
 138 0088 0000      		nop
 139               	/* epilogue start */
 140 008a 0F90      		pop __tmp_reg__
 141 008c 0F90      		pop __tmp_reg__
 142 008e DF91      		pop r29
 143 0090 CF91      		pop r28
 144 0092 0895      		ret
 145               		.cfi_endproc
 146               	.LFE67:
 148               	.global	NWK_SetPanId
 150               	NWK_SetPanId:
 151               	.LFB68:
 114:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 
 115:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** /*************************************************************************//**
 116:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** *  @brief Sets network identifier (PAN) of the node
 117:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** *  @param[in] panId PAN ID to set
 118:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** *****************************************************************************/
 119:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** void NWK_SetPanId(uint16_t panId)
 120:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** {
 152               		.loc 1 120 0
 153               		.cfi_startproc
 154 0094 CF93      		push r28
 155               	.LCFI8:
 156               		.cfi_def_cfa_offset 3
 157               		.cfi_offset 28, -2
 158 0096 DF93      		push r29
 159               	.LCFI9:
 160               		.cfi_def_cfa_offset 4
 161               		.cfi_offset 29, -3
 162 0098 00D0      		rcall .
 163               	.LCFI10:
 164               		.cfi_def_cfa_offset 6
 165 009a CDB7      		in r28,__SP_L__
 166 009c DEB7      		in r29,__SP_H__
 167               	.LCFI11:
 168               		.cfi_def_cfa_register 28
 169               	/* prologue: function */
 170               	/* frame size = 2 */
 171               	/* stack size = 4 */
 172               	.L__stack_usage = 4
 173 009e 9A83      		std Y+2,r25
 174 00a0 8983      		std Y+1,r24
 121:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 	nwkIb.panId = panId;
 175               		.loc 1 121 0
 176 00a2 8981      		ldd r24,Y+1
 177 00a4 9A81      		ldd r25,Y+2
 178 00a6 9093 0000 		sts nwkIb+2+1,r25
 179 00aa 8093 0000 		sts nwkIb+2,r24
 122:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 	PHY_SetPanId(panId);
 180               		.loc 1 122 0
 181 00ae 8981      		ldd r24,Y+1
 182 00b0 9A81      		ldd r25,Y+2
 183 00b2 0E94 0000 		call PHY_SetPanId
 123:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** }
 184               		.loc 1 123 0
 185 00b6 0000      		nop
 186               	/* epilogue start */
 187 00b8 0F90      		pop __tmp_reg__
 188 00ba 0F90      		pop __tmp_reg__
 189 00bc DF91      		pop r29
 190 00be CF91      		pop r28
 191 00c0 0895      		ret
 192               		.cfi_endproc
 193               	.LFE68:
 195               	.global	NWK_OpenEndpoint
 197               	NWK_OpenEndpoint:
 198               	.LFB69:
 124:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 
 125:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** /*************************************************************************//**
 126:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** *  @brief Registers callback @a ind for the endpoint @a endpoint
 127:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** *  @param[in] id Endpoint index (1-15)
 128:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** *  @param[in] handler Pointer to the callback function
 129:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** *****************************************************************************/
 130:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** void NWK_OpenEndpoint(uint8_t id, bool (*handler)(NWK_DataInd_t *ind))
 131:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** {
 199               		.loc 1 131 0
 200               		.cfi_startproc
 201 00c2 CF93      		push r28
 202               	.LCFI12:
 203               		.cfi_def_cfa_offset 3
 204               		.cfi_offset 28, -2
 205 00c4 DF93      		push r29
 206               	.LCFI13:
 207               		.cfi_def_cfa_offset 4
 208               		.cfi_offset 29, -3
 209 00c6 00D0      		rcall .
 210 00c8 1F92      		push __zero_reg__
 211               	.LCFI14:
 212               		.cfi_def_cfa_offset 7
 213 00ca CDB7      		in r28,__SP_L__
 214 00cc DEB7      		in r29,__SP_H__
 215               	.LCFI15:
 216               		.cfi_def_cfa_register 28
 217               	/* prologue: function */
 218               	/* frame size = 3 */
 219               	/* stack size = 5 */
 220               	.L__stack_usage = 5
 221 00ce 8983      		std Y+1,r24
 222 00d0 7B83      		std Y+3,r23
 223 00d2 6A83      		std Y+2,r22
 132:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 	nwkIb.endpoint[id] = handler;
 224               		.loc 1 132 0
 225 00d4 8981      		ldd r24,Y+1
 226 00d6 882F      		mov r24,r24
 227 00d8 90E0      		ldi r25,0
 228 00da 0396      		adiw r24,3
 229 00dc 880F      		lsl r24
 230 00de 991F      		rol r25
 231 00e0 8050      		subi r24,lo8(-(nwkIb))
 232 00e2 9040      		sbci r25,hi8(-(nwkIb))
 233 00e4 2A81      		ldd r18,Y+2
 234 00e6 3B81      		ldd r19,Y+3
 235 00e8 FC01      		movw r30,r24
 236 00ea 3183      		std Z+1,r19
 237 00ec 2083      		st Z,r18
 133:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** }
 238               		.loc 1 133 0
 239 00ee 0000      		nop
 240               	/* epilogue start */
 241 00f0 0F90      		pop __tmp_reg__
 242 00f2 0F90      		pop __tmp_reg__
 243 00f4 0F90      		pop __tmp_reg__
 244 00f6 DF91      		pop r29
 245 00f8 CF91      		pop r28
 246 00fa 0895      		ret
 247               		.cfi_endproc
 248               	.LFE69:
 250               	.global	NWK_Busy
 252               	NWK_Busy:
 253               	.LFB70:
 134:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 
 135:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** /*************************************************************************//**
 136:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** *  @brief Checks if network layer is ready for sleep
 137:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** *  @return @c true if network layer is ready for sleep or @c false otherwise
 138:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** *****************************************************************************/
 139:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** bool NWK_Busy(void)
 140:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** {
 254               		.loc 1 140 0
 255               		.cfi_startproc
 256 00fc CF93      		push r28
 257               	.LCFI16:
 258               		.cfi_def_cfa_offset 3
 259               		.cfi_offset 28, -2
 260 00fe DF93      		push r29
 261               	.LCFI17:
 262               		.cfi_def_cfa_offset 4
 263               		.cfi_offset 29, -3
 264 0100 CDB7      		in r28,__SP_L__
 265 0102 DEB7      		in r29,__SP_H__
 266               	.LCFI18:
 267               		.cfi_def_cfa_register 28
 268               	/* prologue: function */
 269               	/* frame size = 0 */
 270               	/* stack size = 2 */
 271               	.L__stack_usage = 2
 141:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 	return nwkIb.lock > 0;
 272               		.loc 1 141 0
 273 0104 8091 0000 		lds r24,nwkIb+38
 274 0108 9091 0000 		lds r25,nwkIb+38+1
 275 010c 21E0      		ldi r18,lo8(1)
 276 010e 892B      		or r24,r25
 277 0110 01F4      		brne .L9
 278 0112 20E0      		ldi r18,0
 279               	.L9:
 280               		.loc 1 141 0 is_stmt 0 discriminator 1
 281 0114 822F      		mov r24,r18
 282               	/* epilogue start */
 142:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** }
 283               		.loc 1 142 0 is_stmt 1 discriminator 1
 284 0116 DF91      		pop r29
 285 0118 CF91      		pop r28
 286 011a 0895      		ret
 287               		.cfi_endproc
 288               	.LFE70:
 290               	.global	NWK_Lock
 292               	NWK_Lock:
 293               	.LFB71:
 143:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 
 144:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** /*************************************************************************//**
 145:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** *  @brief Increases the lock counter and sets a busy state
 146:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** *****************************************************************************/
 147:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** void NWK_Lock(void)
 148:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** {
 294               		.loc 1 148 0
 295               		.cfi_startproc
 296 011c CF93      		push r28
 297               	.LCFI19:
 298               		.cfi_def_cfa_offset 3
 299               		.cfi_offset 28, -2
 300 011e DF93      		push r29
 301               	.LCFI20:
 302               		.cfi_def_cfa_offset 4
 303               		.cfi_offset 29, -3
 304 0120 CDB7      		in r28,__SP_L__
 305 0122 DEB7      		in r29,__SP_H__
 306               	.LCFI21:
 307               		.cfi_def_cfa_register 28
 308               	/* prologue: function */
 309               	/* frame size = 0 */
 310               	/* stack size = 2 */
 311               	.L__stack_usage = 2
 149:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 	nwkIb.lock++;
 312               		.loc 1 149 0
 313 0124 8091 0000 		lds r24,nwkIb+38
 314 0128 9091 0000 		lds r25,nwkIb+38+1
 315 012c 0196      		adiw r24,1
 316 012e 9093 0000 		sts nwkIb+38+1,r25
 317 0132 8093 0000 		sts nwkIb+38,r24
 150:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** }
 318               		.loc 1 150 0
 319 0136 0000      		nop
 320               	/* epilogue start */
 321 0138 DF91      		pop r29
 322 013a CF91      		pop r28
 323 013c 0895      		ret
 324               		.cfi_endproc
 325               	.LFE71:
 327               	.global	NWK_Unlock
 329               	NWK_Unlock:
 330               	.LFB72:
 151:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 
 152:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** /*************************************************************************//**
 153:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** *  @brief Decreases the lock counter and sets a free state if counter reaches 0
 154:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** *****************************************************************************/
 155:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** void NWK_Unlock(void)
 156:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** {
 331               		.loc 1 156 0
 332               		.cfi_startproc
 333 013e CF93      		push r28
 334               	.LCFI22:
 335               		.cfi_def_cfa_offset 3
 336               		.cfi_offset 28, -2
 337 0140 DF93      		push r29
 338               	.LCFI23:
 339               		.cfi_def_cfa_offset 4
 340               		.cfi_offset 29, -3
 341 0142 CDB7      		in r28,__SP_L__
 342 0144 DEB7      		in r29,__SP_H__
 343               	.LCFI24:
 344               		.cfi_def_cfa_register 28
 345               	/* prologue: function */
 346               	/* frame size = 0 */
 347               	/* stack size = 2 */
 348               	.L__stack_usage = 2
 157:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 	nwkIb.lock--;
 349               		.loc 1 157 0
 350 0146 8091 0000 		lds r24,nwkIb+38
 351 014a 9091 0000 		lds r25,nwkIb+38+1
 352 014e 0197      		sbiw r24,1
 353 0150 9093 0000 		sts nwkIb+38+1,r25
 354 0154 8093 0000 		sts nwkIb+38,r24
 158:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** }
 355               		.loc 1 158 0
 356 0158 0000      		nop
 357               	/* epilogue start */
 358 015a DF91      		pop r29
 359 015c CF91      		pop r28
 360 015e 0895      		ret
 361               		.cfi_endproc
 362               	.LFE72:
 364               	.global	NWK_SleepReq
 366               	NWK_SleepReq:
 367               	.LFB73:
 159:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 
 160:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** /*************************************************************************//**
 161:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** *  @brief Puts network layer to a sleeping state
 162:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** *****************************************************************************/
 163:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** void NWK_SleepReq(void)
 164:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** {
 368               		.loc 1 164 0
 369               		.cfi_startproc
 370 0160 CF93      		push r28
 371               	.LCFI25:
 372               		.cfi_def_cfa_offset 3
 373               		.cfi_offset 28, -2
 374 0162 DF93      		push r29
 375               	.LCFI26:
 376               		.cfi_def_cfa_offset 4
 377               		.cfi_offset 29, -3
 378 0164 CDB7      		in r28,__SP_L__
 379 0166 DEB7      		in r29,__SP_H__
 380               	.LCFI27:
 381               		.cfi_def_cfa_register 28
 382               	/* prologue: function */
 383               	/* frame size = 0 */
 384               	/* stack size = 2 */
 385               	.L__stack_usage = 2
 165:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 	PHY_Sleep();
 386               		.loc 1 165 0
 387 0168 0E94 0000 		call PHY_Sleep
 166:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** }
 388               		.loc 1 166 0
 389 016c 0000      		nop
 390               	/* epilogue start */
 391 016e DF91      		pop r29
 392 0170 CF91      		pop r28
 393 0172 0895      		ret
 394               		.cfi_endproc
 395               	.LFE73:
 397               	.global	NWK_WakeupReq
 399               	NWK_WakeupReq:
 400               	.LFB74:
 167:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 
 168:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** /*************************************************************************//**
 169:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** *  @brief Puts network layer to an active state
 170:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** *****************************************************************************/
 171:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** void NWK_WakeupReq(void)
 172:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** {
 401               		.loc 1 172 0
 402               		.cfi_startproc
 403 0174 CF93      		push r28
 404               	.LCFI28:
 405               		.cfi_def_cfa_offset 3
 406               		.cfi_offset 28, -2
 407 0176 DF93      		push r29
 408               	.LCFI29:
 409               		.cfi_def_cfa_offset 4
 410               		.cfi_offset 29, -3
 411 0178 CDB7      		in r28,__SP_L__
 412 017a DEB7      		in r29,__SP_H__
 413               	.LCFI30:
 414               		.cfi_def_cfa_register 28
 415               	/* prologue: function */
 416               	/* frame size = 0 */
 417               	/* stack size = 2 */
 418               	.L__stack_usage = 2
 173:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 	PHY_Wakeup();
 419               		.loc 1 173 0
 420 017c 0E94 0000 		call PHY_Wakeup
 174:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** }
 421               		.loc 1 174 0
 422 0180 0000      		nop
 423               	/* epilogue start */
 424 0182 DF91      		pop r29
 425 0184 CF91      		pop r28
 426 0186 0895      		ret
 427               		.cfi_endproc
 428               	.LFE74:
 430               		.section	.rodata
 431               	.LC0:
 432 0000 03        		.byte	3
 433 0001 08        		.byte	8
 434 0002 1A        		.byte	26
 435 0003 40        		.byte	64
 436 0004 80        		.byte	-128
 437 0005 BE        		.byte	-66
 438 0006 E6        		.byte	-26
 439 0007 F7        		.byte	-9
 440 0008 FC        		.byte	-4
 441               		.text
 442               	.global	NWK_LinearizeLqi
 444               	NWK_LinearizeLqi:
 445               	.LFB75:
 175:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 
 176:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** /*************************************************************************//**
 177:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** *  @brief Calculates linearized value for the given value of the LQI
 178:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** *  @param[in] lqi LQI value as provided by the transceiver
 179:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** *  @return linearized value directly proportional to the probability of delivery
 180:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** *****************************************************************************/
 181:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** uint8_t NWK_LinearizeLqi(uint8_t lqi)
 182:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** {
 446               		.loc 1 182 0
 447               		.cfi_startproc
 448 0188 CF93      		push r28
 449               	.LCFI31:
 450               		.cfi_def_cfa_offset 3
 451               		.cfi_offset 28, -2
 452 018a DF93      		push r29
 453               	.LCFI32:
 454               		.cfi_def_cfa_offset 4
 455               		.cfi_offset 29, -3
 456 018c CDB7      		in r28,__SP_L__
 457 018e DEB7      		in r29,__SP_H__
 458               	.LCFI33:
 459               		.cfi_def_cfa_register 28
 460 0190 2C97      		sbiw r28,12
 461               	.LCFI34:
 462               		.cfi_def_cfa_offset 16
 463 0192 0FB6      		in __tmp_reg__,__SREG__
 464 0194 F894      		cli
 465 0196 DEBF      		out __SP_H__,r29
 466 0198 0FBE      		out __SREG__,__tmp_reg__
 467 019a CDBF      		out __SP_L__,r28
 468               	/* prologue: function */
 469               	/* frame size = 12 */
 470               	/* stack size = 14 */
 471               	.L__stack_usage = 14
 472 019c 8C87      		std Y+12,r24
 183:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 	const uint8_t val[] = { 3, 8, 26, 64, 128, 190, 230, 247, 252 };
 473               		.loc 1 183 0
 474 019e 89E0      		ldi r24,lo8(9)
 475 01a0 E0E0      		ldi r30,lo8(.LC0)
 476 01a2 F0E0      		ldi r31,hi8(.LC0)
 477 01a4 DE01      		movw r26,r28
 478 01a6 1396      		adiw r26,3
 479               		0:
 480 01a8 0190      		ld r0,Z+
 481 01aa 0D92      		st X+,r0
 482 01ac 8A95      		dec r24
 483 01ae 01F4      		brne 0b
 184:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 	uint8_t cl = 25;
 484               		.loc 1 184 0
 485 01b0 89E1      		ldi r24,lo8(25)
 486 01b2 8983      		std Y+1,r24
 487               	.LBB3:
 185:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 
 186:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 	for (uint8_t i = 0; i < sizeof(val); i++) {
 488               		.loc 1 186 0
 489 01b4 1A82      		std Y+2,__zero_reg__
 490 01b6 00C0      		rjmp .L15
 491               	.L18:
 187:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 		if (lqi < cl) {
 492               		.loc 1 187 0
 493 01b8 9C85      		ldd r25,Y+12
 494 01ba 8981      		ldd r24,Y+1
 495 01bc 9817      		cp r25,r24
 496 01be 00F4      		brsh .L16
 188:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 			return val[i];
 497               		.loc 1 188 0
 498 01c0 8A81      		ldd r24,Y+2
 499 01c2 882F      		mov r24,r24
 500 01c4 90E0      		ldi r25,0
 501 01c6 9E01      		movw r18,r28
 502 01c8 2D5F      		subi r18,-3
 503 01ca 3F4F      		sbci r19,-1
 504 01cc 820F      		add r24,r18
 505 01ce 931F      		adc r25,r19
 506 01d0 FC01      		movw r30,r24
 507 01d2 8081      		ld r24,Z
 508 01d4 00C0      		rjmp .L19
 509               	.L16:
 189:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 		}
 190:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 
 191:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 		cl += 25;
 510               		.loc 1 191 0 discriminator 2
 511 01d6 8981      		ldd r24,Y+1
 512 01d8 875E      		subi r24,lo8(-(25))
 513 01da 8983      		std Y+1,r24
 186:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 		if (lqi < cl) {
 514               		.loc 1 186 0 discriminator 2
 515 01dc 8A81      		ldd r24,Y+2
 516 01de 8F5F      		subi r24,lo8(-(1))
 517 01e0 8A83      		std Y+2,r24
 518               	.L15:
 186:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 		if (lqi < cl) {
 519               		.loc 1 186 0 is_stmt 0 discriminator 1
 520 01e2 8A81      		ldd r24,Y+2
 521 01e4 8930      		cpi r24,lo8(9)
 522 01e6 00F0      		brlo .L18
 523               	.LBE3:
 192:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 	}
 193:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 
 194:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 	return 255;
 524               		.loc 1 194 0 is_stmt 1
 525 01e8 8FEF      		ldi r24,lo8(-1)
 526               	.L19:
 527               	/* epilogue start */
 195:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** }
 528               		.loc 1 195 0 discriminator 1
 529 01ea 2C96      		adiw r28,12
 530 01ec 0FB6      		in __tmp_reg__,__SREG__
 531 01ee F894      		cli
 532 01f0 DEBF      		out __SP_H__,r29
 533 01f2 0FBE      		out __SREG__,__tmp_reg__
 534 01f4 CDBF      		out __SP_L__,r28
 535 01f6 DF91      		pop r29
 536 01f8 CF91      		pop r28
 537 01fa 0895      		ret
 538               		.cfi_endproc
 539               	.LFE75:
 541               	.global	NWK_TaskHandler
 543               	NWK_TaskHandler:
 544               	.LFB76:
 196:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 
 197:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** /*************************************************************************//**
 198:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** *  @brief Network layer task handler
 199:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** *****************************************************************************/
 200:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** void NWK_TaskHandler(void)
 201:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** {
 545               		.loc 1 201 0
 546               		.cfi_startproc
 547 01fc CF93      		push r28
 548               	.LCFI35:
 549               		.cfi_def_cfa_offset 3
 550               		.cfi_offset 28, -2
 551 01fe DF93      		push r29
 552               	.LCFI36:
 553               		.cfi_def_cfa_offset 4
 554               		.cfi_offset 29, -3
 555 0200 CDB7      		in r28,__SP_L__
 556 0202 DEB7      		in r29,__SP_H__
 557               	.LCFI37:
 558               		.cfi_def_cfa_register 28
 559               	/* prologue: function */
 560               	/* frame size = 0 */
 561               	/* stack size = 2 */
 562               	.L__stack_usage = 2
 202:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 	nwkRxTaskHandler();
 563               		.loc 1 202 0
 564 0204 0E94 0000 		call nwkRxTaskHandler
 203:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 	nwkTxTaskHandler();
 565               		.loc 1 203 0
 566 0208 0E94 0000 		call nwkTxTaskHandler
 204:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 	nwkDataReqTaskHandler();
 567               		.loc 1 204 0
 568 020c 0E94 0000 		call nwkDataReqTaskHandler
 205:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** #ifdef NWK_ENABLE_SECURITY
 206:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** 	nwkSecurityTaskHandler();
 207:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** #endif
 208:../../../stack/LwMesh/TDMA/nwk/src/nwk.c **** }
 569               		.loc 1 208 0
 570 0210 0000      		nop
 571               	/* epilogue start */
 572 0212 DF91      		pop r29
 573 0214 CF91      		pop r28
 574 0216 0895      		ret
 575               		.cfi_endproc
 576               	.LFE76:
 578               	.Letext0:
 579               		.file 2 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\in
 580               		.file 3 "../../../stack/LwMesh/TDMA/nwk/inc/nwkRx.h"
 581               		.file 4 "../../../stack/LwMesh/TDMA/nwk/inc/nwk.h"
 582               		.file 5 "config/config.h"
DEFINED SYMBOLS
                            *ABS*:00000000 nwk.c
C:\Users\guilh\AppData\Local\Temp\ccGq3aAC.s:2      *ABS*:0000003e __SP_H__
C:\Users\guilh\AppData\Local\Temp\ccGq3aAC.s:3      *ABS*:0000003d __SP_L__
C:\Users\guilh\AppData\Local\Temp\ccGq3aAC.s:4      *ABS*:0000003f __SREG__
C:\Users\guilh\AppData\Local\Temp\ccGq3aAC.s:5      *ABS*:0000003b __RAMPZ__
C:\Users\guilh\AppData\Local\Temp\ccGq3aAC.s:6      *ABS*:00000000 __tmp_reg__
C:\Users\guilh\AppData\Local\Temp\ccGq3aAC.s:7      *ABS*:00000001 __zero_reg__
C:\Users\guilh\AppData\Local\Temp\ccGq3aAC.s:14     .bss.tTS:00000000 tTS
                            *COM*:00000028 nwkIb
C:\Users\guilh\AppData\Local\Temp\ccGq3aAC.s:20     .text:00000000 NWK_Init
C:\Users\guilh\AppData\Local\Temp\ccGq3aAC.s:103    .text:00000066 NWK_SetAddr
C:\Users\guilh\AppData\Local\Temp\ccGq3aAC.s:150    .text:00000094 NWK_SetPanId
C:\Users\guilh\AppData\Local\Temp\ccGq3aAC.s:197    .text:000000c2 NWK_OpenEndpoint
C:\Users\guilh\AppData\Local\Temp\ccGq3aAC.s:252    .text:000000fc NWK_Busy
C:\Users\guilh\AppData\Local\Temp\ccGq3aAC.s:292    .text:0000011c NWK_Lock
C:\Users\guilh\AppData\Local\Temp\ccGq3aAC.s:329    .text:0000013e NWK_Unlock
C:\Users\guilh\AppData\Local\Temp\ccGq3aAC.s:366    .text:00000160 NWK_SleepReq
C:\Users\guilh\AppData\Local\Temp\ccGq3aAC.s:399    .text:00000174 NWK_WakeupReq
C:\Users\guilh\AppData\Local\Temp\ccGq3aAC.s:444    .text:00000188 NWK_LinearizeLqi
C:\Users\guilh\AppData\Local\Temp\ccGq3aAC.s:543    .text:000001fc NWK_TaskHandler

UNDEFINED SYMBOLS
nwkTxInit
nwkRxInit
nwkFrameInit
nwkDataReqInit
nwkGroupInit
PHY_SetShortAddr
PHY_SetPanId
PHY_Sleep
PHY_Wakeup
nwkRxTaskHandler
nwkTxTaskHandler
nwkDataReqTaskHandler
__do_copy_data
__do_clear_bss
