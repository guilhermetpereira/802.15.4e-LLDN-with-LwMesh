   1              	 .cpu cortex-m4
   2              	 .eabi_attribute 20,1
   3              	 .eabi_attribute 21,1
   4              	 .eabi_attribute 23,3
   5              	 .eabi_attribute 24,1
   6              	 .eabi_attribute 25,1
   7              	 .eabi_attribute 26,1
   8              	 .eabi_attribute 30,6
   9              	 .eabi_attribute 34,1
  10              	 .eabi_attribute 18,4
  11              	 .file "nwkRx.c"
  12              	 .text
  13              	.Ltext0:
  14              	 .cfi_sections .debug_frame
  15              	 .section .bss.cpu_irq_critical_section_counter,"aw",%nobits
  16              	 .align 2
  19              	cpu_irq_critical_section_counter:
  20 0000 00000000 	 .space 4
  21              	 .section .bss.cpu_irq_prev_interrupt_state,"aw",%nobits
  24              	cpu_irq_prev_interrupt_state:
  25 0000 00       	 .space 1
  26              	 .comm n,1,1
  27              	 .section .bss.tTS,"aw",%nobits
  28              	 .align 2
  31              	tTS:
  32 0000 00000000 	 .space 4
  33              	 .text
  34              	 .align 1
  35              	 .syntax unified
  36              	 .thumb
  37              	 .thumb_func
  38              	 .fpu softvfp
  40              	nwkFramePayloadSize:
  41              	.LFB126:
  42              	 .file 1 "../../../stack/LwMesh/TDMA/nwk/inc/nwkFrame.h"
   1:../../../stack/LwMesh/TDMA/nwk/inc/nwkFrame.h **** /**
   2:../../../stack/LwMesh/TDMA/nwk/inc/nwkFrame.h ****  * \file nwkFrame.h
   3:../../../stack/LwMesh/TDMA/nwk/inc/nwkFrame.h ****  *
   4:../../../stack/LwMesh/TDMA/nwk/inc/nwkFrame.h ****  * \brief Frame buffers management interface
   5:../../../stack/LwMesh/TDMA/nwk/inc/nwkFrame.h ****  *
   6:../../../stack/LwMesh/TDMA/nwk/inc/nwkFrame.h ****  * Copyright (C) 2014 Atmel Corporation. All rights reserved.
   7:../../../stack/LwMesh/TDMA/nwk/inc/nwkFrame.h ****  *
   8:../../../stack/LwMesh/TDMA/nwk/inc/nwkFrame.h ****  * \asf_license_start
   9:../../../stack/LwMesh/TDMA/nwk/inc/nwkFrame.h ****  *
  10:../../../stack/LwMesh/TDMA/nwk/inc/nwkFrame.h ****  * Redistribution and use in source and binary forms, with or without
  11:../../../stack/LwMesh/TDMA/nwk/inc/nwkFrame.h ****  * modification, are permitted provided that the following conditions are met:
  12:../../../stack/LwMesh/TDMA/nwk/inc/nwkFrame.h ****  *
  13:../../../stack/LwMesh/TDMA/nwk/inc/nwkFrame.h ****  * 1. Redistributions of source code must retain the above copyright notice,
  14:../../../stack/LwMesh/TDMA/nwk/inc/nwkFrame.h ****  *    this list of conditions and the following disclaimer.
  15:../../../stack/LwMesh/TDMA/nwk/inc/nwkFrame.h ****  *
  16:../../../stack/LwMesh/TDMA/nwk/inc/nwkFrame.h ****  * 2. Redistributions in binary form must reproduce the above copyright notice,
  17:../../../stack/LwMesh/TDMA/nwk/inc/nwkFrame.h ****  *    this list of conditions and the following disclaimer in the documentation
  18:../../../stack/LwMesh/TDMA/nwk/inc/nwkFrame.h ****  *    and/or other materials provided with the distribution.
  19:../../../stack/LwMesh/TDMA/nwk/inc/nwkFrame.h ****  *
  20:../../../stack/LwMesh/TDMA/nwk/inc/nwkFrame.h ****  * 3. The name of Atmel may not be used to endorse or promote products derived
  21:../../../stack/LwMesh/TDMA/nwk/inc/nwkFrame.h ****  *    from this software without specific prior written permission.
  22:../../../stack/LwMesh/TDMA/nwk/inc/nwkFrame.h ****  *
  23:../../../stack/LwMesh/TDMA/nwk/inc/nwkFrame.h ****  * 4. This software may only be redistributed and used in connection with an
  24:../../../stack/LwMesh/TDMA/nwk/inc/nwkFrame.h ****  *    Atmel microcontroller product.
  25:../../../stack/LwMesh/TDMA/nwk/inc/nwkFrame.h ****  *
  26:../../../stack/LwMesh/TDMA/nwk/inc/nwkFrame.h ****  * THIS SOFTWARE IS PROVIDED BY ATMEL "AS IS" AND ANY EXPRESS OR IMPLIED
  27:../../../stack/LwMesh/TDMA/nwk/inc/nwkFrame.h ****  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
  28:../../../stack/LwMesh/TDMA/nwk/inc/nwkFrame.h ****  * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE
  29:../../../stack/LwMesh/TDMA/nwk/inc/nwkFrame.h ****  * EXPRESSLY AND SPECIFICALLY DISCLAIMED. IN NO EVENT SHALL ATMEL BE LIABLE FOR
  30:../../../stack/LwMesh/TDMA/nwk/inc/nwkFrame.h ****  * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  31:../../../stack/LwMesh/TDMA/nwk/inc/nwkFrame.h ****  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
  32:../../../stack/LwMesh/TDMA/nwk/inc/nwkFrame.h ****  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
  33:../../../stack/LwMesh/TDMA/nwk/inc/nwkFrame.h ****  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
  34:../../../stack/LwMesh/TDMA/nwk/inc/nwkFrame.h ****  * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
  35:../../../stack/LwMesh/TDMA/nwk/inc/nwkFrame.h ****  * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  36:../../../stack/LwMesh/TDMA/nwk/inc/nwkFrame.h ****  * POSSIBILITY OF SUCH DAMAGE.
  37:../../../stack/LwMesh/TDMA/nwk/inc/nwkFrame.h ****  *
  38:../../../stack/LwMesh/TDMA/nwk/inc/nwkFrame.h ****  * \asf_license_stop
  39:../../../stack/LwMesh/TDMA/nwk/inc/nwkFrame.h ****  *
  40:../../../stack/LwMesh/TDMA/nwk/inc/nwkFrame.h ****  *
  41:../../../stack/LwMesh/TDMA/nwk/inc/nwkFrame.h ****  */
  42:../../../stack/LwMesh/TDMA/nwk/inc/nwkFrame.h **** 
  43:../../../stack/LwMesh/TDMA/nwk/inc/nwkFrame.h **** /*
  44:../../../stack/LwMesh/TDMA/nwk/inc/nwkFrame.h ****  * Copyright (c) 2014, Atmel Corporation All rights reserved.
  45:../../../stack/LwMesh/TDMA/nwk/inc/nwkFrame.h ****  *
  46:../../../stack/LwMesh/TDMA/nwk/inc/nwkFrame.h ****  * Licensed under Atmel's Limited License Agreement --> EULA.txt
  47:../../../stack/LwMesh/TDMA/nwk/inc/nwkFrame.h ****  */
  48:../../../stack/LwMesh/TDMA/nwk/inc/nwkFrame.h **** 
  49:../../../stack/LwMesh/TDMA/nwk/inc/nwkFrame.h **** #ifndef _NWK_FRAME_H_
  50:../../../stack/LwMesh/TDMA/nwk/inc/nwkFrame.h **** #define _NWK_FRAME_H_
  51:../../../stack/LwMesh/TDMA/nwk/inc/nwkFrame.h **** 
  52:../../../stack/LwMesh/TDMA/nwk/inc/nwkFrame.h **** /*- Includes ---------------------------------------------------------------*/
  53:../../../stack/LwMesh/TDMA/nwk/inc/nwkFrame.h **** #include <stdint.h>
  54:../../../stack/LwMesh/TDMA/nwk/inc/nwkFrame.h **** #include "compiler.h"
  55:../../../stack/LwMesh/TDMA/nwk/inc/nwkFrame.h **** 
  56:../../../stack/LwMesh/TDMA/nwk/inc/nwkFrame.h **** /*- Definitions ------------------------------------------------------------*/
  57:../../../stack/LwMesh/TDMA/nwk/inc/nwkFrame.h **** #define NWK_FRAME_MAX_PAYLOAD_SIZE   127
  58:../../../stack/LwMesh/TDMA/nwk/inc/nwkFrame.h **** 
  59:../../../stack/LwMesh/TDMA/nwk/inc/nwkFrame.h **** /*- Types ------------------------------------------------------------------*/
  60:../../../stack/LwMesh/TDMA/nwk/inc/nwkFrame.h **** COMPILER_PACK_SET(1)
  61:../../../stack/LwMesh/TDMA/nwk/inc/nwkFrame.h **** typedef struct  NwkFrameHeader_t {
  62:../../../stack/LwMesh/TDMA/nwk/inc/nwkFrame.h **** 	uint16_t macFcf;
  63:../../../stack/LwMesh/TDMA/nwk/inc/nwkFrame.h **** 	uint8_t macSeq;
  64:../../../stack/LwMesh/TDMA/nwk/inc/nwkFrame.h **** 	uint16_t macDstPanId;
  65:../../../stack/LwMesh/TDMA/nwk/inc/nwkFrame.h **** 	uint16_t macDstAddr;
  66:../../../stack/LwMesh/TDMA/nwk/inc/nwkFrame.h **** 	uint16_t macSrcAddr;
  67:../../../stack/LwMesh/TDMA/nwk/inc/nwkFrame.h **** 
  68:../../../stack/LwMesh/TDMA/nwk/inc/nwkFrame.h **** 	struct {
  69:../../../stack/LwMesh/TDMA/nwk/inc/nwkFrame.h **** 		uint8_t ackRequest : 1;
  70:../../../stack/LwMesh/TDMA/nwk/inc/nwkFrame.h **** 		uint8_t security   : 1;
  71:../../../stack/LwMesh/TDMA/nwk/inc/nwkFrame.h **** 		uint8_t linkLocal  : 1;
  72:../../../stack/LwMesh/TDMA/nwk/inc/nwkFrame.h **** 		uint8_t multicast  : 1;
  73:../../../stack/LwMesh/TDMA/nwk/inc/nwkFrame.h **** 		uint8_t beacon     : 1;
  74:../../../stack/LwMesh/TDMA/nwk/inc/nwkFrame.h **** 		uint8_t reserved   : 3;
  75:../../../stack/LwMesh/TDMA/nwk/inc/nwkFrame.h **** 	} nwkFcf;
  76:../../../stack/LwMesh/TDMA/nwk/inc/nwkFrame.h **** 	uint8_t nwkSeq;
  77:../../../stack/LwMesh/TDMA/nwk/inc/nwkFrame.h **** 	uint16_t nwkSrcAddr;
  78:../../../stack/LwMesh/TDMA/nwk/inc/nwkFrame.h **** 	uint16_t nwkDstAddr;
  79:../../../stack/LwMesh/TDMA/nwk/inc/nwkFrame.h **** 	struct {
  80:../../../stack/LwMesh/TDMA/nwk/inc/nwkFrame.h **** 		uint8_t nwkSrcEndpoint : 4;
  81:../../../stack/LwMesh/TDMA/nwk/inc/nwkFrame.h **** 		uint8_t nwkDstEndpoint : 4;
  82:../../../stack/LwMesh/TDMA/nwk/inc/nwkFrame.h **** 	};
  83:../../../stack/LwMesh/TDMA/nwk/inc/nwkFrame.h **** } NwkFrameHeader_t;
  84:../../../stack/LwMesh/TDMA/nwk/inc/nwkFrame.h **** 
  85:../../../stack/LwMesh/TDMA/nwk/inc/nwkFrame.h **** typedef struct  NwkFrameBeaconHeader_t {
  86:../../../stack/LwMesh/TDMA/nwk/inc/nwkFrame.h **** 	uint16_t macFcf;
  87:../../../stack/LwMesh/TDMA/nwk/inc/nwkFrame.h **** 	uint8_t macSeq;
  88:../../../stack/LwMesh/TDMA/nwk/inc/nwkFrame.h **** 	uint16_t macSrcPanId;
  89:../../../stack/LwMesh/TDMA/nwk/inc/nwkFrame.h **** 	uint16_t macSrcAddr;
  90:../../../stack/LwMesh/TDMA/nwk/inc/nwkFrame.h **** 	struct
  91:../../../stack/LwMesh/TDMA/nwk/inc/nwkFrame.h **** 	{
  92:../../../stack/LwMesh/TDMA/nwk/inc/nwkFrame.h **** 		uint16_t beaconOrder			: 4;
  93:../../../stack/LwMesh/TDMA/nwk/inc/nwkFrame.h **** 		uint16_t superframeOrder		: 4;
  94:../../../stack/LwMesh/TDMA/nwk/inc/nwkFrame.h **** 		uint16_t finalCAPslot			: 4;
  95:../../../stack/LwMesh/TDMA/nwk/inc/nwkFrame.h **** 		uint16_t BatteryLifeExtension	: 1;
  96:../../../stack/LwMesh/TDMA/nwk/inc/nwkFrame.h **** 		uint16_t Reserved				: 1;
  97:../../../stack/LwMesh/TDMA/nwk/inc/nwkFrame.h **** 		uint16_t PANCoordinator			: 1;
  98:../../../stack/LwMesh/TDMA/nwk/inc/nwkFrame.h **** 		uint16_t AssociationPermit		: 1;
  99:../../../stack/LwMesh/TDMA/nwk/inc/nwkFrame.h **** 	} macSFS;
 100:../../../stack/LwMesh/TDMA/nwk/inc/nwkFrame.h **** 	uint8_t macGTS;
 101:../../../stack/LwMesh/TDMA/nwk/inc/nwkFrame.h **** 	uint8_t macPending;
 102:../../../stack/LwMesh/TDMA/nwk/inc/nwkFrame.h **** } NwkFrameBeaconHeader_t;
 103:../../../stack/LwMesh/TDMA/nwk/inc/nwkFrame.h **** 
 104:../../../stack/LwMesh/TDMA/nwk/inc/nwkFrame.h **** 
 105:../../../stack/LwMesh/TDMA/nwk/inc/nwkFrame.h **** typedef struct  NwkFrameBeaconHeaderLLDN_t {
 106:../../../stack/LwMesh/TDMA/nwk/inc/nwkFrame.h **** 	/******* MHR *****/
 107:../../../stack/LwMesh/TDMA/nwk/inc/nwkFrame.h **** 	// struct
 108:../../../stack/LwMesh/TDMA/nwk/inc/nwkFrame.h **** 	// {
 109:../../../stack/LwMesh/TDMA/nwk/inc/nwkFrame.h **** 	// 	uint8_t FrameType 				: 3;
 110:../../../stack/LwMesh/TDMA/nwk/inc/nwkFrame.h **** 	// 	uint8_t SecurityEnabled 	: 1;
 111:../../../stack/LwMesh/TDMA/nwk/inc/nwkFrame.h **** 	// 	uint8_t FrameVersion			: 1;
 112:../../../stack/LwMesh/TDMA/nwk/inc/nwkFrame.h **** 	// 	uint8_t ackRequest				: 1;
 113:../../../stack/LwMesh/TDMA/nwk/inc/nwkFrame.h **** 	// 	uint8_t SubFrameType			: 2;
 114:../../../stack/LwMesh/TDMA/nwk/inc/nwkFrame.h **** 	// } macFcf;
 115:../../../stack/LwMesh/TDMA/nwk/inc/nwkFrame.h **** 	uint8_t macFcf;
 116:../../../stack/LwMesh/TDMA/nwk/inc/nwkFrame.h **** 	uint8_t macSeqNumber;
 117:../../../stack/LwMesh/TDMA/nwk/inc/nwkFrame.h **** 	struct
 118:../../../stack/LwMesh/TDMA/nwk/inc/nwkFrame.h **** 	{
 119:../../../stack/LwMesh/TDMA/nwk/inc/nwkFrame.h **** 		uint8_t secLevel 	: 3;
 120:../../../stack/LwMesh/TDMA/nwk/inc/nwkFrame.h **** 		uint8_t KeyId			: 2;
 121:../../../stack/LwMesh/TDMA/nwk/inc/nwkFrame.h **** 		uint8_t countSup 	: 1;
 122:../../../stack/LwMesh/TDMA/nwk/inc/nwkFrame.h **** 		uint8_t countSize	: 1;
 123:../../../stack/LwMesh/TDMA/nwk/inc/nwkFrame.h **** 		uint8_t reserved 	: 1;
 124:../../../stack/LwMesh/TDMA/nwk/inc/nwkFrame.h **** 	} macSecHeader;
 125:../../../stack/LwMesh/TDMA/nwk/inc/nwkFrame.h **** 	/****** MAC Payload *******/
 126:../../../stack/LwMesh/TDMA/nwk/inc/nwkFrame.h **** 	struct
 127:../../../stack/LwMesh/TDMA/nwk/inc/nwkFrame.h **** 	{
 128:../../../stack/LwMesh/TDMA/nwk/inc/nwkFrame.h **** 		uint8_t txState 			: 3;
 129:../../../stack/LwMesh/TDMA/nwk/inc/nwkFrame.h **** 		uint8_t txDir 				: 1;
 130:../../../stack/LwMesh/TDMA/nwk/inc/nwkFrame.h **** 		uint8_t reserved			: 1;
 131:../../../stack/LwMesh/TDMA/nwk/inc/nwkFrame.h **** 		uint8_t numBaseMgmtTimeslots: 3; // number of managment time slots
 132:../../../stack/LwMesh/TDMA/nwk/inc/nwkFrame.h **** 										// uplink and downlink must be equal
 133:../../../stack/LwMesh/TDMA/nwk/inc/nwkFrame.h **** 	} Flags;
 134:../../../stack/LwMesh/TDMA/nwk/inc/nwkFrame.h **** 
 135:../../../stack/LwMesh/TDMA/nwk/inc/nwkFrame.h **** 	uint8_t PanId;
 136:../../../stack/LwMesh/TDMA/nwk/inc/nwkFrame.h **** 	uint8_t confSeqNumber;
 137:../../../stack/LwMesh/TDMA/nwk/inc/nwkFrame.h **** 	uint8_t TimeSlotSize;
 138:../../../stack/LwMesh/TDMA/nwk/inc/nwkFrame.h **** 
 139:../../../stack/LwMesh/TDMA/nwk/inc/nwkFrame.h **** 
 140:../../../stack/LwMesh/TDMA/nwk/inc/nwkFrame.h **** } NwkFrameBeaconHeaderLLDN_t;
 141:../../../stack/LwMesh/TDMA/nwk/inc/nwkFrame.h **** 
 142:../../../stack/LwMesh/TDMA/nwk/inc/nwkFrame.h **** typedef struct  NwkFrameGeneralHeaderLLDN_t {
 143:../../../stack/LwMesh/TDMA/nwk/inc/nwkFrame.h **** 	uint8_t macFcf;
 144:../../../stack/LwMesh/TDMA/nwk/inc/nwkFrame.h **** 	uint8_t macSeqNumber;
 145:../../../stack/LwMesh/TDMA/nwk/inc/nwkFrame.h **** 	struct
 146:../../../stack/LwMesh/TDMA/nwk/inc/nwkFrame.h **** 	{
 147:../../../stack/LwMesh/TDMA/nwk/inc/nwkFrame.h **** 		uint8_t secLevel 	: 3;
 148:../../../stack/LwMesh/TDMA/nwk/inc/nwkFrame.h **** 		uint8_t KeyId			: 2;
 149:../../../stack/LwMesh/TDMA/nwk/inc/nwkFrame.h **** 		uint8_t countSup 	: 1;
 150:../../../stack/LwMesh/TDMA/nwk/inc/nwkFrame.h **** 		uint8_t countSize	: 1;
 151:../../../stack/LwMesh/TDMA/nwk/inc/nwkFrame.h **** 		uint8_t reserved 	: 1;
 152:../../../stack/LwMesh/TDMA/nwk/inc/nwkFrame.h **** 	} macSecHeader;
 153:../../../stack/LwMesh/TDMA/nwk/inc/nwkFrame.h **** } NwkFrameGeneralHeaderLLDN_t;
 154:../../../stack/LwMesh/TDMA/nwk/inc/nwkFrame.h **** 
 155:../../../stack/LwMesh/TDMA/nwk/inc/nwkFrame.h **** 
 156:../../../stack/LwMesh/TDMA/nwk/inc/nwkFrame.h **** typedef struct  NwkFrameMulticastHeader_t {
 157:../../../stack/LwMesh/TDMA/nwk/inc/nwkFrame.h **** 	uint16_t nonMemberRadius    : 4;
 158:../../../stack/LwMesh/TDMA/nwk/inc/nwkFrame.h **** 	uint16_t maxNonMemberRadius : 4;
 159:../../../stack/LwMesh/TDMA/nwk/inc/nwkFrame.h **** 	uint16_t memberRadius       : 4;
 160:../../../stack/LwMesh/TDMA/nwk/inc/nwkFrame.h **** 	uint16_t maxMemberRadius    : 4;
 161:../../../stack/LwMesh/TDMA/nwk/inc/nwkFrame.h **** } NwkFrameMulticastHeader_t;
 162:../../../stack/LwMesh/TDMA/nwk/inc/nwkFrame.h **** 
 163:../../../stack/LwMesh/TDMA/nwk/inc/nwkFrame.h **** typedef struct NwkFrame_t {
 164:../../../stack/LwMesh/TDMA/nwk/inc/nwkFrame.h **** 	uint8_t state;
 165:../../../stack/LwMesh/TDMA/nwk/inc/nwkFrame.h **** 	uint8_t size;
 166:../../../stack/LwMesh/TDMA/nwk/inc/nwkFrame.h **** 
 167:../../../stack/LwMesh/TDMA/nwk/inc/nwkFrame.h **** 	union {
 168:../../../stack/LwMesh/TDMA/nwk/inc/nwkFrame.h **** 		NwkFrameHeader_t header;
 169:../../../stack/LwMesh/TDMA/nwk/inc/nwkFrame.h **** 		NwkFrameBeaconHeader_t beacon;
 170:../../../stack/LwMesh/TDMA/nwk/inc/nwkFrame.h **** 		NwkFrameBeaconHeaderLLDN_t LLbeacon;
 171:../../../stack/LwMesh/TDMA/nwk/inc/nwkFrame.h **** 		NwkFrameGeneralHeaderLLDN_t LLgeneral;
 172:../../../stack/LwMesh/TDMA/nwk/inc/nwkFrame.h **** 		uint8_t data[NWK_FRAME_MAX_PAYLOAD_SIZE];
 173:../../../stack/LwMesh/TDMA/nwk/inc/nwkFrame.h **** 	};
 174:../../../stack/LwMesh/TDMA/nwk/inc/nwkFrame.h **** 
 175:../../../stack/LwMesh/TDMA/nwk/inc/nwkFrame.h **** 	uint8_t *payload;
 176:../../../stack/LwMesh/TDMA/nwk/inc/nwkFrame.h **** 
 177:../../../stack/LwMesh/TDMA/nwk/inc/nwkFrame.h **** 	union {
 178:../../../stack/LwMesh/TDMA/nwk/inc/nwkFrame.h **** 		struct {
 179:../../../stack/LwMesh/TDMA/nwk/inc/nwkFrame.h **** 			uint8_t lqi;
 180:../../../stack/LwMesh/TDMA/nwk/inc/nwkFrame.h **** 			int8_t rssi;
 181:../../../stack/LwMesh/TDMA/nwk/inc/nwkFrame.h **** 		} rx;
 182:../../../stack/LwMesh/TDMA/nwk/inc/nwkFrame.h **** 
 183:../../../stack/LwMesh/TDMA/nwk/inc/nwkFrame.h **** 		struct {
 184:../../../stack/LwMesh/TDMA/nwk/inc/nwkFrame.h **** 			uint8_t status;
 185:../../../stack/LwMesh/TDMA/nwk/inc/nwkFrame.h **** 			uint16_t timeout;
 186:../../../stack/LwMesh/TDMA/nwk/inc/nwkFrame.h **** 			uint8_t control;
 187:../../../stack/LwMesh/TDMA/nwk/inc/nwkFrame.h **** 			void (*confirm)(struct NwkFrame_t *frame);
 188:../../../stack/LwMesh/TDMA/nwk/inc/nwkFrame.h **** 		} tx;
 189:../../../stack/LwMesh/TDMA/nwk/inc/nwkFrame.h **** 	};
 190:../../../stack/LwMesh/TDMA/nwk/inc/nwkFrame.h **** } NwkFrame_t;
 191:../../../stack/LwMesh/TDMA/nwk/inc/nwkFrame.h **** COMPILER_PACK_RESET()
 192:../../../stack/LwMesh/TDMA/nwk/inc/nwkFrame.h **** /*- Prototypes -------------------------------------------------------------*/
 193:../../../stack/LwMesh/TDMA/nwk/inc/nwkFrame.h **** void nwkFrameInit(void);
 194:../../../stack/LwMesh/TDMA/nwk/inc/nwkFrame.h **** NwkFrame_t *nwkFrameAlloc(void);
 195:../../../stack/LwMesh/TDMA/nwk/inc/nwkFrame.h **** void nwkFrameFree(NwkFrame_t *frame);
 196:../../../stack/LwMesh/TDMA/nwk/inc/nwkFrame.h **** NwkFrame_t *nwkFrameNext(NwkFrame_t *frame);
 197:../../../stack/LwMesh/TDMA/nwk/inc/nwkFrame.h **** void nwkFrameCommandInit(NwkFrame_t *frame);
 198:../../../stack/LwMesh/TDMA/nwk/inc/nwkFrame.h **** 
 199:../../../stack/LwMesh/TDMA/nwk/inc/nwkFrame.h **** NwkFrame_t *nwkFrameAlloc_LLDN(bool beacon_frame);
 200:../../../stack/LwMesh/TDMA/nwk/inc/nwkFrame.h **** /*- Implementations --------------------------------------------------------*/
 201:../../../stack/LwMesh/TDMA/nwk/inc/nwkFrame.h **** 
 202:../../../stack/LwMesh/TDMA/nwk/inc/nwkFrame.h **** /*************************************************************************//**
 203:../../../stack/LwMesh/TDMA/nwk/inc/nwkFrame.h **** *****************************************************************************/
 204:../../../stack/LwMesh/TDMA/nwk/inc/nwkFrame.h **** static inline uint8_t nwkFramePayloadSize(NwkFrame_t *frame)
 205:../../../stack/LwMesh/TDMA/nwk/inc/nwkFrame.h **** {
  43              	 .loc 1 205 0
  44              	 .cfi_startproc
  45              	 
  46              	 
  47              	 
  48 0000 80B4     	 push {r7}
  49              	.LCFI0:
  50              	 .cfi_def_cfa_offset 4
  51              	 .cfi_offset 7,-4
  52 0002 83B0     	 sub sp,sp,#12
  53              	.LCFI1:
  54              	 .cfi_def_cfa_offset 16
  55 0004 00AF     	 add r7,sp,#0
  56              	.LCFI2:
  57              	 .cfi_def_cfa_register 7
  58 0006 7860     	 str r0,[r7,#4]
 206:../../../stack/LwMesh/TDMA/nwk/inc/nwkFrame.h **** 	return frame->size - (frame->payload - frame->data);
  59              	 .loc 1 206 0
  60 0008 7B68     	 ldr r3,[r7,#4]
  61 000a 5A78     	 ldrb r2,[r3,#1]
  62 000c 7B68     	 ldr r3,[r7,#4]
  63 000e D3F88130 	 ldr r3,[r3,#129]
  64 0012 1946     	 mov r1,r3
  65 0014 7B68     	 ldr r3,[r7,#4]
  66 0016 0233     	 adds r3,r3,#2
  67 0018 CB1A     	 subs r3,r1,r3
  68 001a DBB2     	 uxtb r3,r3
  69 001c D31A     	 subs r3,r2,r3
  70 001e DBB2     	 uxtb r3,r3
 207:../../../stack/LwMesh/TDMA/nwk/inc/nwkFrame.h **** }
  71              	 .loc 1 207 0
  72 0020 1846     	 mov r0,r3
  73 0022 0C37     	 adds r7,r7,#12
  74              	.LCFI3:
  75              	 .cfi_def_cfa_offset 4
  76 0024 BD46     	 mov sp,r7
  77              	.LCFI4:
  78              	 .cfi_def_cfa_register 13
  79              	 
  80 0026 80BC     	 pop {r7}
  81              	.LCFI5:
  82              	 .cfi_restore 7
  83              	 .cfi_def_cfa_offset 0
  84 0028 7047     	 bx lr
  85              	 .cfi_endproc
  86              	.LFE126:
  88              	 .section .bss.nwkRxDuplicateRejectionTable,"aw",%nobits
  89              	 .align 2
  92              	nwkRxDuplicateRejectionTable:
  93 0000 00000000 	 .space 300
  93      00000000 
  93      00000000 
  93      00000000 
  93      00000000 
  94              	 .section .bss.nwkRxAckControl,"aw",%nobits
  97              	nwkRxAckControl:
  98 0000 00       	 .space 1
  99              	 .section .bss.nwkRxDuplicateRejectionTimer,"aw",%nobits
 100              	 .align 2
 103              	nwkRxDuplicateRejectionTimer:
 104 0000 00000000 	 .space 20
 104      00000000 
 104      00000000 
 104      00000000 
 104      00000000 
 105              	 .text
 106              	 .align 1
 107              	 .global nwkRxInit
 108              	 .syntax unified
 109              	 .thumb
 110              	 .thumb_func
 111              	 .fpu softvfp
 113              	nwkRxInit:
 114              	.LFB127:
 115              	 .file 2 "../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c"
   1:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** /**
   2:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c ****  * \file nwkRx.c
   3:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c ****  *
   4:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c ****  * \brief Receive routines implementation
   5:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c ****  *
   6:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c ****  * Copyright (C) 2014 Atmel Corporation. All rights reserved.
   7:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c ****  *
   8:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c ****  * \asf_license_start
   9:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c ****  *
  10:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c ****  * Redistribution and use in source and binary forms, with or without
  11:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c ****  * modification, are permitted provided that the following conditions are met:
  12:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c ****  *
  13:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c ****  * 1. Redistributions of source code must retain the above copyright notice,
  14:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c ****  *    this list of conditions and the following disclaimer.
  15:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c ****  *
  16:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c ****  * 2. Redistributions in binary form must reproduce the above copyright notice,
  17:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c ****  *    this list of conditions and the following disclaimer in the documentation
  18:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c ****  *    and/or other materials provided with the distribution.
  19:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c ****  *
  20:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c ****  * 3. The name of Atmel may not be used to endorse or promote products derived
  21:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c ****  *    from this software without specific prior written permission.
  22:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c ****  *
  23:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c ****  * 4. This software may only be redistributed and used in connection with an
  24:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c ****  *    Atmel microcontroller product.
  25:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c ****  *
  26:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c ****  * THIS SOFTWARE IS PROVIDED BY ATMEL "AS IS" AND ANY EXPRESS OR IMPLIED
  27:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c ****  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
  28:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c ****  * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE
  29:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c ****  * EXPRESSLY AND SPECIFICALLY DISCLAIMED. IN NO EVENT SHALL ATMEL BE LIABLE FOR
  30:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c ****  * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  31:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c ****  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
  32:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c ****  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
  33:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c ****  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
  34:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c ****  * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
  35:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c ****  * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  36:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c ****  * POSSIBILITY OF SUCH DAMAGE.
  37:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c ****  *
  38:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c ****  * \asf_license_stop
  39:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c ****  *
  40:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c ****  *
  41:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c ****  */
  42:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 
  43:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** /*
  44:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c ****  * Copyright (c) 2014, Atmel Corporation All rights reserved.
  45:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c ****  *
  46:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c ****  * Licensed under Atmel's Limited License Agreement --> EULA.txt
  47:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c ****  */
  48:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 
  49:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** /*- Includes ---------------------------------------------------------------*/
  50:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** #include <stdlib.h>
  51:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** #include <stdint.h>
  52:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** #include <stdbool.h>
  53:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** #include <string.h>
  54:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** #include "phy.h"
  55:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** #include "sysConfig.h"
  56:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** #include "sysTimer.h"
  57:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** #include "nwk.h"
  58:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** #include "nwkTx.h"
  59:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** #include "nwkFrame.h"
  60:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** #include "nwkGroup.h"
  61:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** #include "nwkRoute.h"
  62:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** #include "nwkCommand.h"
  63:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** #include "nwkSecurity.h"
  64:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** #include "nwkRouteDiscovery.h"
  65:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 
  66:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** /*- Definitions ------------------------------------------------------------*/
  67:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** #define NWK_RX_DUPLICATE_REJECTION_TIMER_INTERVAL   100 /* ms */
  68:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** #define DUPLICATE_REJECTION_TTL	\
  69:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	((NWK_DUPLICATE_REJECTION_TTL /	\
  70:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	NWK_RX_DUPLICATE_REJECTION_TIMER_INTERVAL) + 1)
  71:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** #define NWK_SERVICE_ENDPOINT_ID    0
  72:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 
  73:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** /*- Types ------------------------------------------------------------------*/
  74:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** enum {
  75:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	NWK_RX_STATE_RECEIVED = 0x20,
  76:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	NWK_RX_STATE_DECRYPT  = 0x21,
  77:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	NWK_RX_STATE_INDICATE = 0x22,
  78:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	NWK_RX_STATE_ROUTE    = 0x23,
  79:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	NWK_RX_STATE_FINISH   = 0x24,
  80:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	NWK_RX_STATE_BEACON   = 0x25,
  81:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	NWK_RX_STATE_LLBEACON 	= 0x26,
  82:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	NWK_RX_STATE_LLCOMMAND 	= 0x27,
  83:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	NWK_RX_STATE_LLACKFRAME = 0x28,
  84:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** };
  85:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 
  86:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** typedef struct NwkDuplicateRejectionEntry_t {
  87:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	uint16_t src;
  88:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	uint8_t seq;
  89:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	uint8_t mask;
  90:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	uint8_t ttl;
  91:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** } NwkDuplicateRejectionEntry_t;
  92:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 
  93:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** /*- Prototypes -------------------------------------------------------------*/
  94:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** static void nwkRxDuplicateRejectionTimerHandler(SYS_Timer_t *timer);
  95:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** static bool nwkRxSeriveDataInd(NWK_DataInd_t *ind);
  96:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 
  97:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** /*- Variables --------------------------------------------------------------*/
  98:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** static NwkDuplicateRejectionEntry_t nwkRxDuplicateRejectionTable[
  99:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	NWK_DUPLICATE_REJECTION_TABLE_SIZE];
 100:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** static uint8_t nwkRxAckControl;
 101:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** static SYS_Timer_t nwkRxDuplicateRejectionTimer;
 102:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 
 103:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** /*- Implementations --------------------------------------------------------*/
 104:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 
 105:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** /*************************************************************************//**
 106:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** *  @brief Initializes the Rx module
 107:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** *****************************************************************************/
 108:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** void nwkRxInit(void)
 109:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** {
 116              	 .loc 2 109 0
 117              	 .cfi_startproc
 118              	 
 119              	 
 120 002a 80B5     	 push {r7,lr}
 121              	.LCFI6:
 122              	 .cfi_def_cfa_offset 8
 123              	 .cfi_offset 7,-8
 124              	 .cfi_offset 14,-4
 125 002c 82B0     	 sub sp,sp,#8
 126              	.LCFI7:
 127              	 .cfi_def_cfa_offset 16
 128 002e 00AF     	 add r7,sp,#0
 129              	.LCFI8:
 130              	 .cfi_def_cfa_register 7
 131              	.LBB2:
 110:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++) {
 132              	 .loc 2 110 0
 133 0030 0023     	 movs r3,#0
 134 0032 FB71     	 strb r3,[r7,#7]
 135 0034 0CE0     	 b .L4
 136              	.L5:
 111:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 		nwkRxDuplicateRejectionTable[i].ttl = 0;
 137              	 .loc 2 111 0 discriminator 3
 138 0036 FA79     	 ldrb r2,[r7,#7]
 139 0038 0F49     	 ldr r1,.L6
 140 003a 1346     	 mov r3,r2
 141 003c 5B00     	 lsls r3,r3,#1
 142 003e 1344     	 add r3,r3,r2
 143 0040 5B00     	 lsls r3,r3,#1
 144 0042 0B44     	 add r3,r3,r1
 145 0044 0433     	 adds r3,r3,#4
 146 0046 0022     	 movs r2,#0
 147 0048 1A70     	 strb r2,[r3]
 110:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++) {
 148              	 .loc 2 110 0 discriminator 3
 149 004a FB79     	 ldrb r3,[r7,#7]
 150 004c 0133     	 adds r3,r3,#1
 151 004e FB71     	 strb r3,[r7,#7]
 152              	.L4:
 110:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++) {
 153              	 .loc 2 110 0 is_stmt 0 discriminator 1
 154 0050 FB79     	 ldrb r3,[r7,#7]
 155 0052 312B     	 cmp r3,#49
 156 0054 EFD9     	 bls .L5
 157              	.LBE2:
 112:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	}
 113:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 
 114:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	nwkRxDuplicateRejectionTimer.interval
 115:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 		= NWK_RX_DUPLICATE_REJECTION_TIMER_INTERVAL;
 158              	 .loc 2 115 0 is_stmt 1
 159 0056 094B     	 ldr r3,.L6+4
 160 0058 6422     	 movs r2,#100
 161 005a 9A60     	 str r2,[r3,#8]
 116:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	nwkRxDuplicateRejectionTimer.mode = SYS_TIMER_INTERVAL_MODE;
 162              	 .loc 2 116 0
 163 005c 074B     	 ldr r3,.L6+4
 164 005e 0022     	 movs r2,#0
 165 0060 1A73     	 strb r2,[r3,#12]
 117:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	nwkRxDuplicateRejectionTimer.handler
 118:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 		= nwkRxDuplicateRejectionTimerHandler;
 166              	 .loc 2 118 0
 167 0062 064B     	 ldr r3,.L6+4
 168 0064 064A     	 ldr r2,.L6+8
 169 0066 1A61     	 str r2,[r3,#16]
 119:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 
 120:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	NWK_OpenEndpoint(NWK_SERVICE_ENDPOINT_ID, nwkRxSeriveDataInd);
 170              	 .loc 2 120 0
 171 0068 0649     	 ldr r1,.L6+12
 172 006a 0020     	 movs r0,#0
 173 006c 064B     	 ldr r3,.L6+16
 174 006e 9847     	 blx r3
 175              	.LVL0:
 121:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** }
 176              	 .loc 2 121 0
 177 0070 00BF     	 nop
 178 0072 0837     	 adds r7,r7,#8
 179              	.LCFI9:
 180              	 .cfi_def_cfa_offset 8
 181 0074 BD46     	 mov sp,r7
 182              	.LCFI10:
 183              	 .cfi_def_cfa_register 13
 184              	 
 185 0076 80BD     	 pop {r7,pc}
 186              	.L7:
 187              	 .align 2
 188              	.L6:
 189 0078 00000000 	 .word nwkRxDuplicateRejectionTable
 190 007c 00000000 	 .word nwkRxDuplicateRejectionTimer
 191 0080 00000000 	 .word nwkRxDuplicateRejectionTimerHandler
 192 0084 00000000 	 .word nwkRxSeriveDataInd
 193 0088 00000000 	 .word NWK_OpenEndpoint
 194              	 .cfi_endproc
 195              	.LFE127:
 197              	 .align 1
 198              	 .weak PHY_DataInd
 199              	 .syntax unified
 200              	 .thumb
 201              	 .thumb_func
 202              	 .fpu softvfp
 204              	PHY_DataInd:
 205              	.LFB128:
 122:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 
 123:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** /*************************************************************************//**
 124:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** *****************************************************************************/
 125:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** void __attribute__((weak)) PHY_DataInd(PHY_DataInd_t *ind)
 126:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** {
 206              	 .loc 2 126 0
 207              	 .cfi_startproc
 208              	 
 209              	 
 210 008c 80B5     	 push {r7,lr}
 211              	.LCFI11:
 212              	 .cfi_def_cfa_offset 8
 213              	 .cfi_offset 7,-8
 214              	 .cfi_offset 14,-4
 215 008e 84B0     	 sub sp,sp,#16
 216              	.LCFI12:
 217              	 .cfi_def_cfa_offset 24
 218 0090 00AF     	 add r7,sp,#0
 219              	.LCFI13:
 220              	 .cfi_def_cfa_register 7
 221 0092 7860     	 str r0,[r7,#4]
 127:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	NwkFrame_t *frame;
 128:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	// check frame control for a LL-Beacon frame
 129:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	if(0x0c == ind->data[0])
 222              	 .loc 2 129 0
 223 0094 7B68     	 ldr r3,[r7,#4]
 224 0096 1B68     	 ldr r3,[r3]
 225 0098 1B78     	 ldrb r3,[r3]
 226 009a 0C2B     	 cmp r3,#12
 227 009c 04D1     	 bne .L9
 130:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	{
 131:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 		if(ind->size < sizeof(NwkFrameBeaconHeaderLLDN_t))
 228              	 .loc 2 131 0
 229 009e 7B68     	 ldr r3,[r7,#4]
 230 00a0 1B79     	 ldrb r3,[r3,#4]
 231 00a2 062B     	 cmp r3,#6
 232 00a4 33D8     	 bhi .L10
 132:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 		{
 133:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 			return;
 233              	 .loc 2 133 0
 234 00a6 97E0     	 b .L8
 235              	.L9:
 134:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 		}
 135:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	}
 136:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	// check frame control for a LL-MAC Command frame
 137:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	else if(0xcc == ind->data[0] || 0x8c == ind->data[0])
 236              	 .loc 2 137 0
 237 00a8 7B68     	 ldr r3,[r7,#4]
 238 00aa 1B68     	 ldr r3,[r3]
 239 00ac 1B78     	 ldrb r3,[r3]
 240 00ae CC2B     	 cmp r3,#204
 241 00b0 04D0     	 beq .L12
 242              	 .loc 2 137 0 is_stmt 0 discriminator 1
 243 00b2 7B68     	 ldr r3,[r7,#4]
 244 00b4 1B68     	 ldr r3,[r3]
 245 00b6 1B78     	 ldrb r3,[r3]
 246 00b8 8C2B     	 cmp r3,#140
 247 00ba 04D1     	 bne .L13
 248              	.L12:
 138:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	{
 139:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 		if(ind->size < sizeof(NwkFrameGeneralHeaderLLDN_t))
 249              	 .loc 2 139 0 is_stmt 1
 250 00bc 7B68     	 ldr r3,[r7,#4]
 251 00be 1B79     	 ldrb r3,[r3,#4]
 252 00c0 022B     	 cmp r3,#2
 253 00c2 24D8     	 bhi .L10
 140:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 		{
 141:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 			return;
 254              	 .loc 2 141 0
 255 00c4 88E0     	 b .L8
 256              	.L13:
 142:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 		}
 143:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	}
 144:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	else if(0x88 == ind->data[1])
 257              	 .loc 2 144 0
 258 00c6 7B68     	 ldr r3,[r7,#4]
 259 00c8 1B68     	 ldr r3,[r3]
 260 00ca 0133     	 adds r3,r3,#1
 261 00cc 1B78     	 ldrb r3,[r3]
 262 00ce 882B     	 cmp r3,#136
 263 00d0 0ED1     	 bne .L15
 145:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	{
 146:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 		if((0x61 != ind->data[0] && 0x41 != ind->data[0]) || ind->size < sizeof(NwkFrameHeader_t))
 264              	 .loc 2 146 0
 265 00d2 7B68     	 ldr r3,[r7,#4]
 266 00d4 1B68     	 ldr r3,[r3]
 267 00d6 1B78     	 ldrb r3,[r3]
 268 00d8 612B     	 cmp r3,#97
 269 00da 04D0     	 beq .L16
 270              	 .loc 2 146 0 is_stmt 0 discriminator 1
 271 00dc 7B68     	 ldr r3,[r7,#4]
 272 00de 1B68     	 ldr r3,[r3]
 273 00e0 1B78     	 ldrb r3,[r3]
 274 00e2 412B     	 cmp r3,#65
 275 00e4 6DD1     	 bne .L30
 276              	.L16:
 277              	 .loc 2 146 0 discriminator 3
 278 00e6 7B68     	 ldr r3,[r7,#4]
 279 00e8 1B79     	 ldrb r3,[r3,#4]
 280 00ea 0F2B     	 cmp r3,#15
 281 00ec 0FD8     	 bhi .L10
 147:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 		{
 148:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 			return;
 282              	 .loc 2 148 0 is_stmt 1
 283 00ee 68E0     	 b .L30
 284              	.L15:
 149:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 		}
 150:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	}
 151:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	else if(0x80 == ind->data[1])
 285              	 .loc 2 151 0
 286 00f0 7B68     	 ldr r3,[r7,#4]
 287 00f2 1B68     	 ldr r3,[r3]
 288 00f4 0133     	 adds r3,r3,#1
 289 00f6 1B78     	 ldrb r3,[r3]
 290 00f8 802B     	 cmp r3,#128
 291 00fa 64D1     	 bne .L31
 152:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	{
 153:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 		if((0x00 != ind->data[0]) || ind->size < (sizeof(NwkFrameBeaconHeader_t)))
 292              	 .loc 2 153 0
 293 00fc 7B68     	 ldr r3,[r7,#4]
 294 00fe 1B68     	 ldr r3,[r3]
 295 0100 1B78     	 ldrb r3,[r3]
 296 0102 002B     	 cmp r3,#0
 297 0104 61D1     	 bne .L32
 298              	 .loc 2 153 0 is_stmt 0 discriminator 1
 299 0106 7B68     	 ldr r3,[r7,#4]
 300 0108 1B79     	 ldrb r3,[r3,#4]
 301 010a 0A2B     	 cmp r3,#10
 302 010c 5DD9     	 bls .L32
 303              	.L10:
 154:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 		{
 155:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 			return;
 156:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 		}
 157:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	}
 158:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	else
 159:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	{
 160:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 		return;
 161:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	}
 162:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 
 163:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	if(ind->data[1] == 0x88 || ind->data[1] == 0x80)
 304              	 .loc 2 163 0 is_stmt 1
 305 010e 7B68     	 ldr r3,[r7,#4]
 306 0110 1B68     	 ldr r3,[r3]
 307 0112 0133     	 adds r3,r3,#1
 308 0114 1B78     	 ldrb r3,[r3]
 309 0116 882B     	 cmp r3,#136
 310 0118 05D0     	 beq .L20
 311              	 .loc 2 163 0 is_stmt 0 discriminator 1
 312 011a 7B68     	 ldr r3,[r7,#4]
 313 011c 1B68     	 ldr r3,[r3]
 314 011e 0133     	 adds r3,r3,#1
 315 0120 1B78     	 ldrb r3,[r3]
 316 0122 802B     	 cmp r3,#128
 317 0124 11D1     	 bne .L21
 318              	.L20:
 164:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	{
 165:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 		if (NULL == (frame = nwkFrameAlloc())) {
 319              	 .loc 2 165 0 is_stmt 1
 320 0126 2E4B     	 ldr r3,.L36
 321 0128 9847     	 blx r3
 322              	.LVL1:
 323 012a F860     	 str r0,[r7,#12]
 324 012c FB68     	 ldr r3,[r7,#12]
 325 012e 002B     	 cmp r3,#0
 326 0130 4DD0     	 beq .L33
 166:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 			return;
 167:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 		}
 168:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 		// if frame received is NwkFrameHeader change state to Receveid
 169:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 		// if frame receveid is a 802.15.4 beacon change state to Beacon
 170:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 		frame->state = ((0x88 == ind->data[1]) ? NWK_RX_STATE_RECEIVED : NWK_RX_STATE_BEACON);
 327              	 .loc 2 170 0
 328 0132 7B68     	 ldr r3,[r7,#4]
 329 0134 1B68     	 ldr r3,[r3]
 330 0136 0133     	 adds r3,r3,#1
 331 0138 1B78     	 ldrb r3,[r3]
 332 013a 882B     	 cmp r3,#136
 333 013c 01D1     	 bne .L23
 334              	 .loc 2 170 0 is_stmt 0 discriminator 1
 335 013e 2022     	 movs r2,#32
 336 0140 00E0     	 b .L24
 337              	.L23:
 338              	 .loc 2 170 0 discriminator 2
 339 0142 2522     	 movs r2,#37
 340              	.L24:
 341              	 .loc 2 170 0 discriminator 4
 342 0144 FB68     	 ldr r3,[r7,#12]
 343 0146 1A70     	 strb r2,[r3]
 344 0148 22E0     	 b .L25
 345              	.L21:
 171:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	}
 172:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	// allocate frame buffer according to received frame
 173:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	else if(ind->data[0] == 0x0c)
 346              	 .loc 2 173 0 is_stmt 1
 347 014a 7B68     	 ldr r3,[r7,#4]
 348 014c 1B68     	 ldr r3,[r3]
 349 014e 1B78     	 ldrb r3,[r3]
 350 0150 0C2B     	 cmp r3,#12
 351 0152 0AD1     	 bne .L26
 174:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	{
 175:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 		// allocates a LL-Beacon frame
 176:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 		if (NULL == (frame = nwkFrameAlloc_LLDN(true))){
 352              	 .loc 2 176 0
 353 0154 0120     	 movs r0,#1
 354 0156 234B     	 ldr r3,.L36+4
 355 0158 9847     	 blx r3
 356              	.LVL2:
 357 015a F860     	 str r0,[r7,#12]
 358 015c FB68     	 ldr r3,[r7,#12]
 359 015e 002B     	 cmp r3,#0
 360 0160 37D0     	 beq .L34
 177:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 			return;
 178:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 		}
 179:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 		// if frame receveid is LL-Beacon change state to LLBEACON
 180:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 		frame->state = NWK_RX_STATE_LLBEACON;
 361              	 .loc 2 180 0
 362 0162 FB68     	 ldr r3,[r7,#12]
 363 0164 2622     	 movs r2,#38
 364 0166 1A70     	 strb r2,[r3]
 365 0168 12E0     	 b .L25
 366              	.L26:
 181:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	}
 182:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	else
 183:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	{
 184:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 		// allocates a LL-MAC command or LL-Data frame
 185:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 		if (NULL == (frame = nwkFrameAlloc_LLDN(false))){
 367              	 .loc 2 185 0
 368 016a 0020     	 movs r0,#0
 369 016c 1D4B     	 ldr r3,.L36+4
 370 016e 9847     	 blx r3
 371              	.LVL3:
 372 0170 F860     	 str r0,[r7,#12]
 373 0172 FB68     	 ldr r3,[r7,#12]
 374 0174 002B     	 cmp r3,#0
 375 0176 2ED0     	 beq .L35
 186:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 			return;
 187:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 		}
 188:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 		// if frame receveid is LL-AckFrame change state to LLACKFRAME
 189:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 		// if frame receveid is LL-MACComand change state to LLCOMMAND
 190:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 		if(ind->data[0] == 0x8c) 
 376              	 .loc 2 190 0
 377 0178 7B68     	 ldr r3,[r7,#4]
 378 017a 1B68     	 ldr r3,[r3]
 379 017c 1B78     	 ldrb r3,[r3]
 380 017e 8C2B     	 cmp r3,#140
 381 0180 03D1     	 bne .L29
 191:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 			frame->state = NWK_RX_STATE_LLACKFRAME;
 382              	 .loc 2 191 0
 383 0182 FB68     	 ldr r3,[r7,#12]
 384 0184 2822     	 movs r2,#40
 385 0186 1A70     	 strb r2,[r3]
 386 0188 02E0     	 b .L25
 387              	.L29:
 192:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 		else 
 193:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 			frame->state = NWK_RX_STATE_LLCOMMAND;
 388              	 .loc 2 193 0
 389 018a FB68     	 ldr r3,[r7,#12]
 390 018c 2722     	 movs r2,#39
 391 018e 1A70     	 strb r2,[r3]
 392              	.L25:
 194:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	}
 195:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 
 196:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	frame->size = ind->size;
 393              	 .loc 2 196 0
 394 0190 7B68     	 ldr r3,[r7,#4]
 395 0192 1A79     	 ldrb r2,[r3,#4]
 396 0194 FB68     	 ldr r3,[r7,#12]
 397 0196 5A70     	 strb r2,[r3,#1]
 197:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	frame->rx.lqi = ind->lqi;
 398              	 .loc 2 197 0
 399 0198 7B68     	 ldr r3,[r7,#4]
 400 019a 5A79     	 ldrb r2,[r3,#5]
 401 019c FB68     	 ldr r3,[r7,#12]
 402 019e 83F88520 	 strb r2,[r3,#133]
 198:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	frame->rx.rssi = ind->rssi;
 403              	 .loc 2 198 0
 404 01a2 7B68     	 ldr r3,[r7,#4]
 405 01a4 93F90620 	 ldrsb r2,[r3,#6]
 406 01a8 FB68     	 ldr r3,[r7,#12]
 407 01aa 83F88620 	 strb r2,[r3,#134]
 199:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	memcpy(frame->data, ind->data, ind->size);
 408              	 .loc 2 199 0
 409 01ae FB68     	 ldr r3,[r7,#12]
 410 01b0 981C     	 adds r0,r3,#2
 411 01b2 7B68     	 ldr r3,[r7,#4]
 412 01b4 1968     	 ldr r1,[r3]
 413 01b6 7B68     	 ldr r3,[r7,#4]
 414 01b8 1B79     	 ldrb r3,[r3,#4]
 415 01ba 1A46     	 mov r2,r3
 416 01bc 0A4B     	 ldr r3,.L36+8
 417 01be 9847     	 blx r3
 418              	.LVL4:
 419 01c0 0AE0     	 b .L8
 420              	.L30:
 148:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 		}
 421              	 .loc 2 148 0
 422 01c2 00BF     	 nop
 423 01c4 08E0     	 b .L8
 424              	.L31:
 160:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	}
 425              	 .loc 2 160 0
 426 01c6 00BF     	 nop
 427 01c8 06E0     	 b .L8
 428              	.L32:
 155:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 		}
 429              	 .loc 2 155 0
 430 01ca 00BF     	 nop
 431 01cc 04E0     	 b .L8
 432              	.L33:
 166:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 		}
 433              	 .loc 2 166 0
 434 01ce 00BF     	 nop
 435 01d0 02E0     	 b .L8
 436              	.L34:
 177:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 		}
 437              	 .loc 2 177 0
 438 01d2 00BF     	 nop
 439 01d4 00E0     	 b .L8
 440              	.L35:
 186:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 		}
 441              	 .loc 2 186 0
 442 01d6 00BF     	 nop
 443              	.L8:
 200:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** }
 444              	 .loc 2 200 0
 445 01d8 1037     	 adds r7,r7,#16
 446              	.LCFI14:
 447              	 .cfi_def_cfa_offset 8
 448 01da BD46     	 mov sp,r7
 449              	.LCFI15:
 450              	 .cfi_def_cfa_register 13
 451              	 
 452 01dc 80BD     	 pop {r7,pc}
 453              	.L37:
 454 01de 00BF     	 .align 2
 455              	.L36:
 456 01e0 00000000 	 .word nwkFrameAlloc
 457 01e4 00000000 	 .word nwkFrameAlloc_LLDN
 458 01e8 00000000 	 .word memcpy
 459              	 .cfi_endproc
 460              	.LFE128:
 462              	 .align 1
 463              	 .syntax unified
 464              	 .thumb
 465              	 .thumb_func
 466              	 .fpu softvfp
 468              	nwkRxSendAck:
 469              	.LFB129:
 201:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 
 202:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** /*************************************************************************//**
 203:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** *****************************************************************************/
 204:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** static void nwkRxSendAck(NwkFrame_t *frame)
 205:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** {
 470              	 .loc 2 205 0
 471              	 .cfi_startproc
 472              	 
 473              	 
 474 01ec 80B5     	 push {r7,lr}
 475              	.LCFI16:
 476              	 .cfi_def_cfa_offset 8
 477              	 .cfi_offset 7,-8
 478              	 .cfi_offset 14,-4
 479 01ee 84B0     	 sub sp,sp,#16
 480              	.LCFI17:
 481              	 .cfi_def_cfa_offset 24
 482 01f0 00AF     	 add r7,sp,#0
 483              	.LCFI18:
 484              	 .cfi_def_cfa_register 7
 485 01f2 7860     	 str r0,[r7,#4]
 206:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	NwkFrame_t *ack;
 207:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	NwkCommandAck_t *command;
 208:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 
 209:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	if (NULL == (ack = nwkFrameAlloc())) {
 486              	 .loc 2 209 0
 487 01f4 284B     	 ldr r3,.L42
 488 01f6 9847     	 blx r3
 489              	.LVL5:
 490 01f8 F860     	 str r0,[r7,#12]
 491 01fa FB68     	 ldr r3,[r7,#12]
 492 01fc 002B     	 cmp r3,#0
 493 01fe 47D0     	 beq .L41
 210:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 		return;
 211:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	}
 212:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 
 213:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	frame->size += sizeof(NwkFrameHeader_t);
 494              	 .loc 2 213 0
 495 0200 7B68     	 ldr r3,[r7,#4]
 496 0202 5B78     	 ldrb r3,[r3,#1]
 497 0204 1033     	 adds r3,r3,#16
 498 0206 DAB2     	 uxtb r2,r3
 499 0208 7B68     	 ldr r3,[r7,#4]
 500 020a 5A70     	 strb r2,[r3,#1]
 214:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	frame->payload += sizeof(NwkFrameHeader_t);
 501              	 .loc 2 214 0
 502 020c 7B68     	 ldr r3,[r7,#4]
 503 020e D3F88130 	 ldr r3,[r3,#129]
 504 0212 03F11002 	 add r2,r3,#16
 505 0216 7B68     	 ldr r3,[r7,#4]
 506 0218 C3F88120 	 str r2,[r3,#129]
 215:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 
 216:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	nwkFrameCommandInit(ack);
 507              	 .loc 2 216 0
 508 021c F868     	 ldr r0,[r7,#12]
 509 021e 1F4B     	 ldr r3,.L42+4
 510 0220 9847     	 blx r3
 511              	.LVL6:
 217:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 
 218:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	ack->size += sizeof(NwkCommandAck_t);
 512              	 .loc 2 218 0
 513 0222 FB68     	 ldr r3,[r7,#12]
 514 0224 5B78     	 ldrb r3,[r3,#1]
 515 0226 0333     	 adds r3,r3,#3
 516 0228 DAB2     	 uxtb r2,r3
 517 022a FB68     	 ldr r3,[r7,#12]
 518 022c 5A70     	 strb r2,[r3,#1]
 219:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	ack->tx.confirm = NULL;
 519              	 .loc 2 219 0
 520 022e FB68     	 ldr r3,[r7,#12]
 521 0230 0022     	 movs r2,#0
 522 0232 83F88920 	 strb r2,[r3,#137]
 523 0236 0022     	 movs r2,#0
 524 0238 83F88A20 	 strb r2,[r3,#138]
 525 023c 0022     	 movs r2,#0
 526 023e 83F88B20 	 strb r2,[r3,#139]
 527 0242 0022     	 movs r2,#0
 528 0244 83F88C20 	 strb r2,[r3,#140]
 220:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 
 221:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	ack->header.nwkFcf.security = frame->header.nwkFcf.security;
 529              	 .loc 2 221 0
 530 0248 7B68     	 ldr r3,[r7,#4]
 531 024a DB7A     	 ldrb r3,[r3,#11]
 532 024c C3F34003 	 ubfx r3,r3,#1,#1
 533 0250 D9B2     	 uxtb r1,r3
 534 0252 FA68     	 ldr r2,[r7,#12]
 535 0254 D37A     	 ldrb r3,[r2,#11]
 536 0256 61F34103 	 bfi r3,r1,#1,#1
 537 025a D372     	 strb r3,[r2,#11]
 222:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	ack->header.nwkDstAddr = frame->header.nwkSrcAddr;
 538              	 .loc 2 222 0
 539 025c 7B68     	 ldr r3,[r7,#4]
 540 025e B3F80D30 	 ldrh r3,[r3,#13]
 541 0262 9AB2     	 uxth r2,r3
 542 0264 FB68     	 ldr r3,[r7,#12]
 543 0266 A3F80F20 	 strh r2,[r3,#15]
 223:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 
 224:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	command = (NwkCommandAck_t *)ack->payload;
 544              	 .loc 2 224 0
 545 026a FB68     	 ldr r3,[r7,#12]
 546 026c D3F88130 	 ldr r3,[r3,#129]
 547 0270 BB60     	 str r3,[r7,#8]
 225:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	command->id = NWK_COMMAND_ACK;
 548              	 .loc 2 225 0
 549 0272 BB68     	 ldr r3,[r7,#8]
 550 0274 0022     	 movs r2,#0
 551 0276 1A70     	 strb r2,[r3]
 226:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	command->control = nwkRxAckControl;
 552              	 .loc 2 226 0
 553 0278 094B     	 ldr r3,.L42+8
 554 027a 1A78     	 ldrb r2,[r3]
 555 027c BB68     	 ldr r3,[r7,#8]
 556 027e 9A70     	 strb r2,[r3,#2]
 227:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	command->seq = frame->header.nwkSeq;
 557              	 .loc 2 227 0
 558 0280 7B68     	 ldr r3,[r7,#4]
 559 0282 1A7B     	 ldrb r2,[r3,#12]
 560 0284 BB68     	 ldr r3,[r7,#8]
 561 0286 5A70     	 strb r2,[r3,#1]
 228:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 
 229:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	nwkTxFrame(ack);
 562              	 .loc 2 229 0
 563 0288 F868     	 ldr r0,[r7,#12]
 564 028a 064B     	 ldr r3,.L42+12
 565 028c 9847     	 blx r3
 566              	.LVL7:
 567 028e 00E0     	 b .L38
 568              	.L41:
 210:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	}
 569              	 .loc 2 210 0
 570 0290 00BF     	 nop
 571              	.L38:
 230:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** }
 572              	 .loc 2 230 0
 573 0292 1037     	 adds r7,r7,#16
 574              	.LCFI19:
 575              	 .cfi_def_cfa_offset 8
 576 0294 BD46     	 mov sp,r7
 577              	.LCFI20:
 578              	 .cfi_def_cfa_register 13
 579              	 
 580 0296 80BD     	 pop {r7,pc}
 581              	.L43:
 582              	 .align 2
 583              	.L42:
 584 0298 00000000 	 .word nwkFrameAlloc
 585 029c 00000000 	 .word nwkFrameCommandInit
 586 02a0 00000000 	 .word nwkRxAckControl
 587 02a4 00000000 	 .word nwkTxFrame
 588              	 .cfi_endproc
 589              	.LFE129:
 591              	 .align 1
 592              	 .global NWK_SetAckControl
 593              	 .syntax unified
 594              	 .thumb
 595              	 .thumb_func
 596              	 .fpu softvfp
 598              	NWK_SetAckControl:
 599              	.LFB130:
 231:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 
 232:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** /*************************************************************************//**
 233:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** *****************************************************************************/
 234:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** void NWK_SetAckControl(uint8_t control)
 235:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** {
 600              	 .loc 2 235 0
 601              	 .cfi_startproc
 602              	 
 603              	 
 604              	 
 605 02a8 80B4     	 push {r7}
 606              	.LCFI21:
 607              	 .cfi_def_cfa_offset 4
 608              	 .cfi_offset 7,-4
 609 02aa 83B0     	 sub sp,sp,#12
 610              	.LCFI22:
 611              	 .cfi_def_cfa_offset 16
 612 02ac 00AF     	 add r7,sp,#0
 613              	.LCFI23:
 614              	 .cfi_def_cfa_register 7
 615 02ae 0346     	 mov r3,r0
 616 02b0 FB71     	 strb r3,[r7,#7]
 236:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	nwkRxAckControl = control;
 617              	 .loc 2 236 0
 618 02b2 044A     	 ldr r2,.L45
 619 02b4 FB79     	 ldrb r3,[r7,#7]
 620 02b6 1370     	 strb r3,[r2]
 237:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** }
 621              	 .loc 2 237 0
 622 02b8 00BF     	 nop
 623 02ba 0C37     	 adds r7,r7,#12
 624              	.LCFI24:
 625              	 .cfi_def_cfa_offset 4
 626 02bc BD46     	 mov sp,r7
 627              	.LCFI25:
 628              	 .cfi_def_cfa_register 13
 629              	 
 630 02be 80BC     	 pop {r7}
 631              	.LCFI26:
 632              	 .cfi_restore 7
 633              	 .cfi_def_cfa_offset 0
 634 02c0 7047     	 bx lr
 635              	.L46:
 636 02c2 00BF     	 .align 2
 637              	.L45:
 638 02c4 00000000 	 .word nwkRxAckControl
 639              	 .cfi_endproc
 640              	.LFE130:
 642              	 .align 1
 643              	 .syntax unified
 644              	 .thumb
 645              	 .thumb_func
 646              	 .fpu softvfp
 648              	nwkRxDuplicateRejectionTimerHandler:
 649              	.LFB131:
 238:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 
 239:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** #ifdef NWK_ENABLE_SECURITY
 240:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 
 241:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** /*************************************************************************//**
 242:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** *****************************************************************************/
 243:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** void nwkRxDecryptConf(NwkFrame_t *frame, bool status)
 244:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** {
 245:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	if (status) {
 246:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 		frame->state = NWK_RX_STATE_INDICATE;
 247:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	} else {
 248:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 		frame->state = NWK_RX_STATE_FINISH;
 249:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	}
 250:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** }
 251:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 
 252:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** #endif
 253:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 
 254:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** /*************************************************************************//**
 255:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** *****************************************************************************/
 256:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** static void nwkRxDuplicateRejectionTimerHandler(SYS_Timer_t *timer)
 257:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** {
 650              	 .loc 2 257 0
 651              	 .cfi_startproc
 652              	 
 653              	 
 654 02c8 80B5     	 push {r7,lr}
 655              	.LCFI27:
 656              	 .cfi_def_cfa_offset 8
 657              	 .cfi_offset 7,-8
 658              	 .cfi_offset 14,-4
 659 02ca 84B0     	 sub sp,sp,#16
 660              	.LCFI28:
 661              	 .cfi_def_cfa_offset 24
 662 02cc 00AF     	 add r7,sp,#0
 663              	.LCFI29:
 664              	 .cfi_def_cfa_register 7
 665 02ce 7860     	 str r0,[r7,#4]
 258:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	bool restart = false;
 666              	 .loc 2 258 0
 667 02d0 0023     	 movs r3,#0
 668 02d2 FB73     	 strb r3,[r7,#15]
 669              	.LBB3:
 259:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 
 260:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++) {
 670              	 .loc 2 260 0
 671 02d4 0023     	 movs r3,#0
 672 02d6 BB73     	 strb r3,[r7,#14]
 673 02d8 23E0     	 b .L48
 674              	.L50:
 261:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 		if (nwkRxDuplicateRejectionTable[i].ttl) {
 675              	 .loc 2 261 0
 676 02da BA7B     	 ldrb r2,[r7,#14]
 677 02dc 1749     	 ldr r1,.L53
 678 02de 1346     	 mov r3,r2
 679 02e0 5B00     	 lsls r3,r3,#1
 680 02e2 1344     	 add r3,r3,r2
 681 02e4 5B00     	 lsls r3,r3,#1
 682 02e6 0B44     	 add r3,r3,r1
 683 02e8 0433     	 adds r3,r3,#4
 684 02ea 1B78     	 ldrb r3,[r3]
 685 02ec 002B     	 cmp r3,#0
 686 02ee 15D0     	 beq .L49
 262:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 			nwkRxDuplicateRejectionTable[i].ttl--;
 687              	 .loc 2 262 0
 688 02f0 BA7B     	 ldrb r2,[r7,#14]
 689 02f2 1249     	 ldr r1,.L53
 690 02f4 1346     	 mov r3,r2
 691 02f6 5B00     	 lsls r3,r3,#1
 692 02f8 1344     	 add r3,r3,r2
 693 02fa 5B00     	 lsls r3,r3,#1
 694 02fc 0B44     	 add r3,r3,r1
 695 02fe 0433     	 adds r3,r3,#4
 696 0300 1B78     	 ldrb r3,[r3]
 697 0302 013B     	 subs r3,r3,#1
 698 0304 D8B2     	 uxtb r0,r3
 699 0306 0D49     	 ldr r1,.L53
 700 0308 1346     	 mov r3,r2
 701 030a 5B00     	 lsls r3,r3,#1
 702 030c 1344     	 add r3,r3,r2
 703 030e 5B00     	 lsls r3,r3,#1
 704 0310 0B44     	 add r3,r3,r1
 705 0312 0433     	 adds r3,r3,#4
 706 0314 0246     	 mov r2,r0
 707 0316 1A70     	 strb r2,[r3]
 263:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 			restart = true;
 708              	 .loc 2 263 0
 709 0318 0123     	 movs r3,#1
 710 031a FB73     	 strb r3,[r7,#15]
 711              	.L49:
 260:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 		if (nwkRxDuplicateRejectionTable[i].ttl) {
 712              	 .loc 2 260 0 discriminator 2
 713 031c BB7B     	 ldrb r3,[r7,#14]
 714 031e 0133     	 adds r3,r3,#1
 715 0320 BB73     	 strb r3,[r7,#14]
 716              	.L48:
 260:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 		if (nwkRxDuplicateRejectionTable[i].ttl) {
 717              	 .loc 2 260 0 is_stmt 0 discriminator 1
 718 0322 BB7B     	 ldrb r3,[r7,#14]
 719 0324 312B     	 cmp r3,#49
 720 0326 D8D9     	 bls .L50
 721              	.LBE3:
 264:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 		}
 265:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	}
 266:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 
 267:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	if (restart) {
 722              	 .loc 2 267 0 is_stmt 1
 723 0328 FB7B     	 ldrb r3,[r7,#15]
 724 032a 002B     	 cmp r3,#0
 725 032c 02D0     	 beq .L52
 268:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 		SYS_TimerStart(timer);
 726              	 .loc 2 268 0
 727 032e 7868     	 ldr r0,[r7,#4]
 728 0330 034B     	 ldr r3,.L53+4
 729 0332 9847     	 blx r3
 730              	.LVL8:
 731              	.L52:
 269:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	}
 270:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** }
 732              	 .loc 2 270 0
 733 0334 00BF     	 nop
 734 0336 1037     	 adds r7,r7,#16
 735              	.LCFI30:
 736              	 .cfi_def_cfa_offset 8
 737 0338 BD46     	 mov sp,r7
 738              	.LCFI31:
 739              	 .cfi_def_cfa_register 13
 740              	 
 741 033a 80BD     	 pop {r7,pc}
 742              	.L54:
 743              	 .align 2
 744              	.L53:
 745 033c 00000000 	 .word nwkRxDuplicateRejectionTable
 746 0340 00000000 	 .word SYS_TimerStart
 747              	 .cfi_endproc
 748              	.LFE131:
 750              	 .align 1
 751              	 .syntax unified
 752              	 .thumb
 753              	 .thumb_func
 754              	 .fpu softvfp
 756              	nwkRxRejectDuplicate:
 757              	.LFB132:
 271:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 
 272:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** /*************************************************************************//**
 273:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** *****************************************************************************/
 274:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** static bool nwkRxRejectDuplicate(NwkFrameHeader_t *header)
 275:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** {
 758              	 .loc 2 275 0
 759              	 .cfi_startproc
 760              	 
 761              	 
 762 0344 80B5     	 push {r7,lr}
 763              	.LCFI32:
 764              	 .cfi_def_cfa_offset 8
 765              	 .cfi_offset 7,-8
 766              	 .cfi_offset 14,-4
 767 0346 86B0     	 sub sp,sp,#24
 768              	.LCFI33:
 769              	 .cfi_def_cfa_offset 32
 770 0348 00AF     	 add r7,sp,#0
 771              	.LCFI34:
 772              	 .cfi_def_cfa_register 7
 773 034a 7860     	 str r0,[r7,#4]
 276:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	NwkDuplicateRejectionEntry_t *entry;
 277:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	NwkDuplicateRejectionEntry_t *freeEntry = NULL;
 774              	 .loc 2 277 0
 775 034c 0023     	 movs r3,#0
 776 034e 7B61     	 str r3,[r7,#20]
 777              	.LBB4:
 278:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 
 279:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++) {
 778              	 .loc 2 279 0
 779 0350 0023     	 movs r3,#0
 780 0352 FB74     	 strb r3,[r7,#19]
 781 0354 59E0     	 b .L56
 782              	.L62:
 280:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 		entry = &nwkRxDuplicateRejectionTable[i];
 783              	 .loc 2 280 0
 784 0356 FA7C     	 ldrb r2,[r7,#19]
 785 0358 1346     	 mov r3,r2
 786 035a 5B00     	 lsls r3,r3,#1
 787 035c 1344     	 add r3,r3,r2
 788 035e 5B00     	 lsls r3,r3,#1
 789 0360 3A4A     	 ldr r2,.L64
 790 0362 1344     	 add r3,r3,r2
 791 0364 FB60     	 str r3,[r7,#12]
 281:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 
 282:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 		if (entry->ttl && header->nwkSrcAddr == entry->src) {
 792              	 .loc 2 282 0
 793 0366 FB68     	 ldr r3,[r7,#12]
 794 0368 1B79     	 ldrb r3,[r3,#4]
 795 036a 002B     	 cmp r3,#0
 796 036c 44D0     	 beq .L57
 797              	 .loc 2 282 0 is_stmt 0 discriminator 1
 798 036e 7B68     	 ldr r3,[r7,#4]
 799 0370 B3F80B30 	 ldrh r3,[r3,#11]
 800 0374 9AB2     	 uxth r2,r3
 801 0376 FB68     	 ldr r3,[r7,#12]
 802 0378 1B88     	 ldrh r3,[r3]
 803 037a 9A42     	 cmp r2,r3
 804 037c 3CD1     	 bne .L57
 805              	.LBB5:
 283:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 			uint8_t diff = (int8_t)entry->seq - header->nwkSeq;
 806              	 .loc 2 283 0 is_stmt 1
 807 037e FB68     	 ldr r3,[r7,#12]
 808 0380 9A78     	 ldrb r2,[r3,#2]
 809 0382 7B68     	 ldr r3,[r7,#4]
 810 0384 9B7A     	 ldrb r3,[r3,#10]
 811 0386 D31A     	 subs r3,r2,r3
 812 0388 FB72     	 strb r3,[r7,#11]
 284:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 
 285:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 			if (diff < 8) {
 813              	 .loc 2 285 0
 814 038a FB7A     	 ldrb r3,[r7,#11]
 815 038c 072B     	 cmp r3,#7
 816 038e 1AD8     	 bhi .L58
 286:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 				if (entry->mask & (1 << diff)) {
 817              	 .loc 2 286 0
 818 0390 FB68     	 ldr r3,[r7,#12]
 819 0392 DB78     	 ldrb r3,[r3,#3]
 820 0394 1A46     	 mov r2,r3
 821 0396 FB7A     	 ldrb r3,[r7,#11]
 822 0398 42FA03F3 	 asr r3,r2,r3
 823 039c 03F00103 	 and r3,r3,#1
 824 03a0 002B     	 cmp r3,#0
 825 03a2 01D0     	 beq .L59
 287:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	#ifdef NWK_ENABLE_ROUTING
 288:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 					if (nwkIb.addr == header->macDstAddr) {
 289:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 						nwkRouteRemove(
 290:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 								header->nwkDstAddr,
 291:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 								header->nwkFcf.multicast);
 292:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 					}
 293:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 
 294:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	#endif
 295:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 					return true;
 826              	 .loc 2 295 0
 827 03a4 0123     	 movs r3,#1
 828 03a6 4CE0     	 b .L60
 829              	.L59:
 296:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 				}
 297:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 
 298:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 				entry->mask |= (1 << diff);
 830              	 .loc 2 298 0
 831 03a8 FB68     	 ldr r3,[r7,#12]
 832 03aa DB78     	 ldrb r3,[r3,#3]
 833 03ac 5AB2     	 sxtb r2,r3
 834 03ae FB7A     	 ldrb r3,[r7,#11]
 835 03b0 0121     	 movs r1,#1
 836 03b2 01FA03F3 	 lsl r3,r1,r3
 837 03b6 5BB2     	 sxtb r3,r3
 838 03b8 1343     	 orrs r3,r3,r2
 839 03ba 5BB2     	 sxtb r3,r3
 840 03bc DAB2     	 uxtb r2,r3
 841 03be FB68     	 ldr r3,[r7,#12]
 842 03c0 DA70     	 strb r2,[r3,#3]
 299:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 				return false;
 843              	 .loc 2 299 0
 844 03c2 0023     	 movs r3,#0
 845 03c4 3DE0     	 b .L60
 846              	.L58:
 847              	.LBB6:
 300:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 			} else {
 301:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 				uint8_t shift = -(int8_t)diff;
 848              	 .loc 2 301 0
 849 03c6 FB7A     	 ldrb r3,[r7,#11]
 850 03c8 5B42     	 negs r3,r3
 851 03ca BB72     	 strb r3,[r7,#10]
 302:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 
 303:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 				entry->seq = header->nwkSeq;
 852              	 .loc 2 303 0
 853 03cc 7B68     	 ldr r3,[r7,#4]
 854 03ce 9A7A     	 ldrb r2,[r3,#10]
 855 03d0 FB68     	 ldr r3,[r7,#12]
 856 03d2 9A70     	 strb r2,[r3,#2]
 304:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 				entry->mask = (entry->mask << shift) | 1;
 857              	 .loc 2 304 0
 858 03d4 FB68     	 ldr r3,[r7,#12]
 859 03d6 DB78     	 ldrb r3,[r3,#3]
 860 03d8 1A46     	 mov r2,r3
 861 03da BB7A     	 ldrb r3,[r7,#10]
 862 03dc 02FA03F3 	 lsl r3,r2,r3
 863 03e0 5BB2     	 sxtb r3,r3
 864 03e2 43F00103 	 orr r3,r3,#1
 865 03e6 5BB2     	 sxtb r3,r3
 866 03e8 DAB2     	 uxtb r2,r3
 867 03ea FB68     	 ldr r3,[r7,#12]
 868 03ec DA70     	 strb r2,[r3,#3]
 305:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 				entry->ttl = DUPLICATE_REJECTION_TTL;
 869              	 .loc 2 305 0
 870 03ee FB68     	 ldr r3,[r7,#12]
 871 03f0 1522     	 movs r2,#21
 872 03f2 1A71     	 strb r2,[r3,#4]
 306:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 				return false;
 873              	 .loc 2 306 0
 874 03f4 0023     	 movs r3,#0
 875 03f6 24E0     	 b .L60
 876              	.L57:
 877              	.LBE6:
 878              	.LBE5:
 307:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 			}
 308:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 		}
 309:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 
 310:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 		if (0 == entry->ttl) {
 879              	 .loc 2 310 0
 880 03f8 FB68     	 ldr r3,[r7,#12]
 881 03fa 1B79     	 ldrb r3,[r3,#4]
 882 03fc 002B     	 cmp r3,#0
 883 03fe 01D1     	 bne .L61
 311:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 			freeEntry = entry;
 884              	 .loc 2 311 0
 885 0400 FB68     	 ldr r3,[r7,#12]
 886 0402 7B61     	 str r3,[r7,#20]
 887              	.L61:
 279:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 		entry = &nwkRxDuplicateRejectionTable[i];
 888              	 .loc 2 279 0 discriminator 2
 889 0404 FB7C     	 ldrb r3,[r7,#19]
 890 0406 0133     	 adds r3,r3,#1
 891 0408 FB74     	 strb r3,[r7,#19]
 892              	.L56:
 279:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 		entry = &nwkRxDuplicateRejectionTable[i];
 893              	 .loc 2 279 0 is_stmt 0 discriminator 1
 894 040a FB7C     	 ldrb r3,[r7,#19]
 895 040c 312B     	 cmp r3,#49
 896 040e A2D9     	 bls .L62
 897              	.LBE4:
 312:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 		}
 313:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	}
 314:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 
 315:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	if (NULL == freeEntry) {
 898              	 .loc 2 315 0 is_stmt 1
 899 0410 7B69     	 ldr r3,[r7,#20]
 900 0412 002B     	 cmp r3,#0
 901 0414 01D1     	 bne .L63
 316:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 		return true;
 902              	 .loc 2 316 0
 903 0416 0123     	 movs r3,#1
 904 0418 13E0     	 b .L60
 905              	.L63:
 317:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	}
 318:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 
 319:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	freeEntry->src = header->nwkSrcAddr;
 906              	 .loc 2 319 0
 907 041a 7B68     	 ldr r3,[r7,#4]
 908 041c B3F80B30 	 ldrh r3,[r3,#11]
 909 0420 9AB2     	 uxth r2,r3
 910 0422 7B69     	 ldr r3,[r7,#20]
 911 0424 1A80     	 strh r2,[r3]
 320:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	freeEntry->seq = header->nwkSeq;
 912              	 .loc 2 320 0
 913 0426 7B68     	 ldr r3,[r7,#4]
 914 0428 9A7A     	 ldrb r2,[r3,#10]
 915 042a 7B69     	 ldr r3,[r7,#20]
 916 042c 9A70     	 strb r2,[r3,#2]
 321:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	freeEntry->mask = 1;
 917              	 .loc 2 321 0
 918 042e 7B69     	 ldr r3,[r7,#20]
 919 0430 0122     	 movs r2,#1
 920 0432 DA70     	 strb r2,[r3,#3]
 322:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	freeEntry->ttl = DUPLICATE_REJECTION_TTL;
 921              	 .loc 2 322 0
 922 0434 7B69     	 ldr r3,[r7,#20]
 923 0436 1522     	 movs r2,#21
 924 0438 1A71     	 strb r2,[r3,#4]
 323:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 
 324:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	SYS_TimerStart(&nwkRxDuplicateRejectionTimer);
 925              	 .loc 2 324 0
 926 043a 0548     	 ldr r0,.L64+4
 927 043c 054B     	 ldr r3,.L64+8
 928 043e 9847     	 blx r3
 929              	.LVL9:
 325:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 
 326:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	return false;
 930              	 .loc 2 326 0
 931 0440 0023     	 movs r3,#0
 932              	.L60:
 327:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** }
 933              	 .loc 2 327 0
 934 0442 1846     	 mov r0,r3
 935 0444 1837     	 adds r7,r7,#24
 936              	.LCFI35:
 937              	 .cfi_def_cfa_offset 8
 938 0446 BD46     	 mov sp,r7
 939              	.LCFI36:
 940              	 .cfi_def_cfa_register 13
 941              	 
 942 0448 80BD     	 pop {r7,pc}
 943              	.L65:
 944 044a 00BF     	 .align 2
 945              	.L64:
 946 044c 00000000 	 .word nwkRxDuplicateRejectionTable
 947 0450 00000000 	 .word nwkRxDuplicateRejectionTimer
 948 0454 00000000 	 .word SYS_TimerStart
 949              	 .cfi_endproc
 950              	.LFE132:
 952              	 .align 1
 953              	 .syntax unified
 954              	 .thumb
 955              	 .thumb_func
 956              	 .fpu softvfp
 958              	nwkRxSeriveDataInd:
 959              	.LFB133:
 328:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 
 329:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** /*************************************************************************//**
 330:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** *****************************************************************************/
 331:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** static bool nwkRxSeriveDataInd(NWK_DataInd_t *ind)
 332:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** {
 960              	 .loc 2 332 0
 961              	 .cfi_startproc
 962              	 
 963              	 
 964 0458 80B5     	 push {r7,lr}
 965              	.LCFI37:
 966              	 .cfi_def_cfa_offset 8
 967              	 .cfi_offset 7,-8
 968              	 .cfi_offset 14,-4
 969 045a 82B0     	 sub sp,sp,#8
 970              	.LCFI38:
 971              	 .cfi_def_cfa_offset 16
 972 045c 00AF     	 add r7,sp,#0
 973              	.LCFI39:
 974              	 .cfi_def_cfa_register 7
 975 045e 7860     	 str r0,[r7,#4]
 333:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** #ifdef NWK_ENABLE_SECURE_COMMANDS
 334:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	if (0 == (ind->options & NWK_IND_OPT_SECURED)) {
 335:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 		return false;
 336:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	}
 337:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 
 338:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** #endif
 339:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 
 340:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	if (ind->size < 1) {
 976              	 .loc 2 340 0
 977 0460 7B68     	 ldr r3,[r7,#4]
 978 0462 1B7B     	 ldrb r3,[r3,#12]
 979 0464 002B     	 cmp r3,#0
 980 0466 01D1     	 bne .L67
 341:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 		return false;
 981              	 .loc 2 341 0
 982 0468 0023     	 movs r3,#0
 983 046a 0AE0     	 b .L68
 984              	.L67:
 342:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	}
 343:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 
 344:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	switch (ind->data[0]) {
 985              	 .loc 2 344 0
 986 046c 7B68     	 ldr r3,[r7,#4]
 987 046e 9B68     	 ldr r3,[r3,#8]
 988 0470 1B78     	 ldrb r3,[r3]
 989 0472 002B     	 cmp r3,#0
 990 0474 04D1     	 bne .L71
 345:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	case NWK_COMMAND_ACK:
 346:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 		return nwkTxAckReceived(ind);
 991              	 .loc 2 346 0
 992 0476 7868     	 ldr r0,[r7,#4]
 993 0478 044B     	 ldr r3,.L72
 994 047a 9847     	 blx r3
 995              	.LVL10:
 996 047c 0346     	 mov r3,r0
 997 047e 00E0     	 b .L68
 998              	.L71:
 347:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 
 348:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** #ifdef NWK_ENABLE_ROUTING
 349:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	case NWK_COMMAND_ROUTE_ERROR:
 350:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 		return nwkRouteErrorReceived(ind);
 351:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 
 352:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** #endif
 353:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 
 354:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** #ifdef NWK_ENABLE_ROUTE_DISCOVERY
 355:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	case NWK_COMMAND_ROUTE_REQUEST:
 356:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 		return nwkRouteDiscoveryRequestReceived(ind);
 357:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 
 358:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	case NWK_COMMAND_ROUTE_REPLY:
 359:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 		return nwkRouteDiscoveryReplyReceived(ind);
 360:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 
 361:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** #endif
 362:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 
 363:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	default:
 364:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 		return false;
 999              	 .loc 2 364 0
 1000 0480 0023     	 movs r3,#0
 1001              	.L68:
 365:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	}
 366:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** }
 1002              	 .loc 2 366 0
 1003 0482 1846     	 mov r0,r3
 1004 0484 0837     	 adds r7,r7,#8
 1005              	.LCFI40:
 1006              	 .cfi_def_cfa_offset 8
 1007 0486 BD46     	 mov sp,r7
 1008              	.LCFI41:
 1009              	 .cfi_def_cfa_register 13
 1010              	 
 1011 0488 80BD     	 pop {r7,pc}
 1012              	.L73:
 1013 048a 00BF     	 .align 2
 1014              	.L72:
 1015 048c 00000000 	 .word nwkTxAckReceived
 1016              	 .cfi_endproc
 1017              	.LFE133:
 1019              	 .align 1
 1020              	 .syntax unified
 1021              	 .thumb
 1022              	 .thumb_func
 1023              	 .fpu softvfp
 1025              	nwkRxHandleReceivedFrame:
 1026              	.LFB134:
 367:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 
 368:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** /*************************************************************************//**
 369:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** *****************************************************************************/
 370:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** static void nwkRxHandleReceivedFrame(NwkFrame_t *frame)
 371:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** {
 1027              	 .loc 2 371 0
 1028              	 .cfi_startproc
 1029              	 
 1030              	 
 1031 0490 80B5     	 push {r7,lr}
 1032              	.LCFI42:
 1033              	 .cfi_def_cfa_offset 8
 1034              	 .cfi_offset 7,-8
 1035              	 .cfi_offset 14,-4
 1036 0492 86B0     	 sub sp,sp,#24
 1037              	.LCFI43:
 1038              	 .cfi_def_cfa_offset 32
 1039 0494 00AF     	 add r7,sp,#0
 1040              	.LCFI44:
 1041              	 .cfi_def_cfa_register 7
 1042 0496 7860     	 str r0,[r7,#4]
 372:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	NwkFrameHeader_t *header = &frame->header;
 1043              	 .loc 2 372 0
 1044 0498 7B68     	 ldr r3,[r7,#4]
 1045 049a 0233     	 adds r3,r3,#2
 1046 049c 3B61     	 str r3,[r7,#16]
 373:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 
 374:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	frame->state = NWK_RX_STATE_FINISH;
 1047              	 .loc 2 374 0
 1048 049e 7B68     	 ldr r3,[r7,#4]
 1049 04a0 2422     	 movs r2,#36
 1050 04a2 1A70     	 strb r2,[r3]
 375:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 
 376:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** #ifndef NWK_ENABLE_SECURITY
 377:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	if (header->nwkFcf.security) {
 1051              	 .loc 2 377 0
 1052 04a4 3B69     	 ldr r3,[r7,#16]
 1053 04a6 5B7A     	 ldrb r3,[r3,#9]
 1054 04a8 03F00203 	 and r3,r3,#2
 1055 04ac DBB2     	 uxtb r3,r3
 1056 04ae 002B     	 cmp r3,#0
 1057 04b0 40F0FF80 	 bne .L93
 378:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 		return;
 379:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	}
 380:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 
 381:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** #endif
 382:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 
 383:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** #ifdef NWK_ENABLE_MULTICAST
 384:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	if (header->nwkFcf.multicast && header->nwkFcf.ackRequest) {
 1058              	 .loc 2 384 0
 1059 04b4 3B69     	 ldr r3,[r7,#16]
 1060 04b6 5B7A     	 ldrb r3,[r3,#9]
 1061 04b8 03F00803 	 and r3,r3,#8
 1062 04bc DBB2     	 uxtb r3,r3
 1063 04be 002B     	 cmp r3,#0
 1064 04c0 07D0     	 beq .L77
 1065              	 .loc 2 384 0 is_stmt 0 discriminator 1
 1066 04c2 3B69     	 ldr r3,[r7,#16]
 1067 04c4 5B7A     	 ldrb r3,[r3,#9]
 1068 04c6 03F00103 	 and r3,r3,#1
 1069 04ca DBB2     	 uxtb r3,r3
 1070 04cc 002B     	 cmp r3,#0
 1071 04ce 40F0F280 	 bne .L94
 1072              	.L77:
 385:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 		return;
 386:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	}
 387:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 
 388:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** #else
 389:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	if (header->nwkFcf.multicast) {
 390:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 		return;
 391:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	}
 392:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 
 393:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** #endif
 394:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 
 395:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	if (NWK_BROADCAST_PANID == header->macDstPanId)
 1073              	 .loc 2 395 0 is_stmt 1
 1074 04d2 3B69     	 ldr r3,[r7,#16]
 1075 04d4 B3F80330 	 ldrh r3,[r3,#3]
 1076 04d8 9BB2     	 uxth r3,r3
 1077 04da 4FF6FF72 	 movw r2,#65535
 1078 04de 9342     	 cmp r3,r2
 1079 04e0 14D1     	 bne .L78
 396:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	{
 397:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 		if (nwkIb.addr == header->nwkDstAddr || NWK_BROADCAST_ADDR == header->nwkDstAddr)
 1080              	 .loc 2 397 0
 1081 04e2 7B4B     	 ldr r3,.L99
 1082 04e4 1A88     	 ldrh r2,[r3]
 1083 04e6 3B69     	 ldr r3,[r7,#16]
 1084 04e8 B3F80D30 	 ldrh r3,[r3,#13]
 1085 04ec 9BB2     	 uxth r3,r3
 1086 04ee 9A42     	 cmp r2,r3
 1087 04f0 08D0     	 beq .L79
 1088              	 .loc 2 397 0 is_stmt 0 discriminator 1
 1089 04f2 3B69     	 ldr r3,[r7,#16]
 1090 04f4 B3F80D30 	 ldrh r3,[r3,#13]
 1091 04f8 9BB2     	 uxth r3,r3
 1092 04fa 4FF6FF72 	 movw r2,#65535
 1093 04fe 9342     	 cmp r3,r2
 1094 0500 40F0DB80 	 bne .L95
 1095              	.L79:
 398:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 		{
 399:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** #ifdef NWK_ENABLE_SECURITY
 400:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 			if (header->nwkFcf.security)
 401:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 			{
 402:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 				frame->state = NWK_RX_STATE_DECRYPT;
 403:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 			}
 404:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 			else
 405:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** #endif
 406:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 			frame->state = NWK_RX_STATE_INDICATE;
 1096              	 .loc 2 406 0 is_stmt 1
 1097 0504 7B68     	 ldr r3,[r7,#4]
 1098 0506 2222     	 movs r2,#34
 1099 0508 1A70     	 strb r2,[r3]
 407:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 		}
 408:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 
 409:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 		return;
 1100              	 .loc 2 409 0
 1101 050a D6E0     	 b .L95
 1102              	.L78:
 410:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	}
 411:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 
 412:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** #ifdef NWK_ENABLE_ADDRESS_FILTER
 413:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	if (!NWK_FilterAddress(header->macSrcAddr, &frame->rx.lqi)) {
 414:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 		return;
 415:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	}
 416:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 
 417:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** #endif
 418:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 
 419:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	if (NWK_BROADCAST_ADDR == header->nwkDstAddr && header->nwkFcf.ackRequest)
 1103              	 .loc 2 419 0
 1104 050c 3B69     	 ldr r3,[r7,#16]
 1105 050e B3F80D30 	 ldrh r3,[r3,#13]
 1106 0512 9BB2     	 uxth r3,r3
 1107 0514 4FF6FF72 	 movw r2,#65535
 1108 0518 9342     	 cmp r3,r2
 1109 051a 07D1     	 bne .L81
 1110              	 .loc 2 419 0 is_stmt 0 discriminator 1
 1111 051c 3B69     	 ldr r3,[r7,#16]
 1112 051e 5B7A     	 ldrb r3,[r3,#9]
 1113 0520 03F00103 	 and r3,r3,#1
 1114 0524 DBB2     	 uxtb r3,r3
 1115 0526 002B     	 cmp r3,#0
 1116 0528 40F0C980 	 bne .L96
 1117              	.L81:
 420:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	{
 421:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 		return;
 422:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	}
 423:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 
 424:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	if (nwkIb.addr == header->nwkSrcAddr)
 1118              	 .loc 2 424 0 is_stmt 1
 1119 052c 684B     	 ldr r3,.L99
 1120 052e 1A88     	 ldrh r2,[r3]
 1121 0530 3B69     	 ldr r3,[r7,#16]
 1122 0532 B3F80B30 	 ldrh r3,[r3,#11]
 1123 0536 9BB2     	 uxth r3,r3
 1124 0538 9A42     	 cmp r2,r3
 1125 053a 00F0C280 	 beq .L97
 425:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	{
 426:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 		return;
 427:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	}
 428:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 
 429:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** #ifdef NWK_ENABLE_ROUTING
 430:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	nwkRouteFrameReceived(frame);
 431:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** #endif
 432:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 
 433:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	if (nwkRxRejectDuplicate(header))
 1126              	 .loc 2 433 0
 1127 053e 3869     	 ldr r0,[r7,#16]
 1128 0540 FFF700FF 	 bl nwkRxRejectDuplicate
 1129 0544 0346     	 mov r3,r0
 1130 0546 002B     	 cmp r3,#0
 1131 0548 40F0BD80 	 bne .L98
 434:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	{
 435:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 		return;
 436:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	}
 437:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 
 438:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** #ifdef NWK_ENABLE_MULTICAST
 439:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	if (header->nwkFcf.multicast) {
 1132              	 .loc 2 439 0
 1133 054c 3B69     	 ldr r3,[r7,#16]
 1134 054e 5B7A     	 ldrb r3,[r3,#9]
 1135 0550 03F00803 	 and r3,r3,#8
 1136 0554 DBB2     	 uxtb r3,r3
 1137 0556 002B     	 cmp r3,#0
 1138 0558 7DD0     	 beq .L84
 1139              	.LBB7:
 440:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 		NwkFrameMulticastHeader_t *mcHeader
 1140              	 .loc 2 440 0
 1141 055a 7B68     	 ldr r3,[r7,#4]
 1142 055c D3F88130 	 ldr r3,[r3,#129]
 1143 0560 FB60     	 str r3,[r7,#12]
 441:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 			= (NwkFrameMulticastHeader_t *)frame->payload;
 442:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 		bool member = NWK_GroupIsMember(header->nwkDstAddr);
 1144              	 .loc 2 442 0
 1145 0562 3B69     	 ldr r3,[r7,#16]
 1146 0564 B3F80D30 	 ldrh r3,[r3,#13]
 1147 0568 9BB2     	 uxth r3,r3
 1148 056a 1846     	 mov r0,r3
 1149 056c 594B     	 ldr r3,.L99+4
 1150 056e 9847     	 blx r3
 1151              	.LVL11:
 1152 0570 0346     	 mov r3,r0
 1153 0572 FB72     	 strb r3,[r7,#11]
 443:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 		bool broadcast = false;
 1154              	 .loc 2 443 0
 1155 0574 0023     	 movs r3,#0
 1156 0576 FB75     	 strb r3,[r7,#23]
 444:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 
 445:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 		if (NWK_BROADCAST_ADDR == header->macDstAddr) {
 1157              	 .loc 2 445 0
 1158 0578 3B69     	 ldr r3,[r7,#16]
 1159 057a B3F80530 	 ldrh r3,[r3,#5]
 1160 057e 9BB2     	 uxth r3,r3
 1161 0580 4FF6FF72 	 movw r2,#65535
 1162 0584 9342     	 cmp r3,r2
 1163 0586 48D1     	 bne .L85
 446:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 			if (member) {
 1164              	 .loc 2 446 0
 1165 0588 FB7A     	 ldrb r3,[r7,#11]
 1166 058a 002B     	 cmp r3,#0
 1167 058c 22D0     	 beq .L86
 447:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 				broadcast = mcHeader->memberRadius > 0;
 1168              	 .loc 2 447 0
 1169 058e FB68     	 ldr r3,[r7,#12]
 1170 0590 5B78     	 ldrb r3,[r3,#1]
 1171 0592 C3F30303 	 ubfx r3,r3,#0,#4
 1172 0596 DBB2     	 uxtb r3,r3
 1173 0598 002B     	 cmp r3,#0
 1174 059a CCBF     	 ite gt
 1175 059c 0123     	 movgt r3,#1
 1176 059e 0023     	 movle r3,#0
 1177 05a0 FB75     	 strb r3,[r7,#23]
 448:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 				mcHeader->memberRadius--;
 1178              	 .loc 2 448 0
 1179 05a2 FB68     	 ldr r3,[r7,#12]
 1180 05a4 5B78     	 ldrb r3,[r3,#1]
 1181 05a6 C3F30303 	 ubfx r3,r3,#0,#4
 1182 05aa DBB2     	 uxtb r3,r3
 1183 05ac 0F33     	 adds r3,r3,#15
 1184 05ae 03F00F03 	 and r3,r3,#15
 1185 05b2 D9B2     	 uxtb r1,r3
 1186 05b4 FA68     	 ldr r2,[r7,#12]
 1187 05b6 5378     	 ldrb r3,[r2,#1]
 1188 05b8 61F30303 	 bfi r3,r1,#0,#4
 1189 05bc 5370     	 strb r3,[r2,#1]
 449:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 				mcHeader->nonMemberRadius
 450:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 					= mcHeader->maxNonMemberRadius;
 1190              	 .loc 2 450 0
 1191 05be FB68     	 ldr r3,[r7,#12]
 1192 05c0 1B78     	 ldrb r3,[r3]
 1193 05c2 C3F30313 	 ubfx r3,r3,#4,#4
 1194 05c6 D9B2     	 uxtb r1,r3
 1195 05c8 FA68     	 ldr r2,[r7,#12]
 1196 05ca 1378     	 ldrb r3,[r2]
 1197 05cc 61F30303 	 bfi r3,r1,#0,#4
 1198 05d0 1370     	 strb r3,[r2]
 1199 05d2 2CE0     	 b .L88
 1200              	.L86:
 451:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 			} else {
 452:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 				broadcast = mcHeader->nonMemberRadius > 0;
 1201              	 .loc 2 452 0
 1202 05d4 FB68     	 ldr r3,[r7,#12]
 1203 05d6 1B78     	 ldrb r3,[r3]
 1204 05d8 C3F30303 	 ubfx r3,r3,#0,#4
 1205 05dc DBB2     	 uxtb r3,r3
 1206 05de 002B     	 cmp r3,#0
 1207 05e0 CCBF     	 ite gt
 1208 05e2 0123     	 movgt r3,#1
 1209 05e4 0023     	 movle r3,#0
 1210 05e6 FB75     	 strb r3,[r7,#23]
 453:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 				mcHeader->nonMemberRadius--;
 1211              	 .loc 2 453 0
 1212 05e8 FB68     	 ldr r3,[r7,#12]
 1213 05ea 1B78     	 ldrb r3,[r3]
 1214 05ec C3F30303 	 ubfx r3,r3,#0,#4
 1215 05f0 DBB2     	 uxtb r3,r3
 1216 05f2 0F33     	 adds r3,r3,#15
 1217 05f4 03F00F03 	 and r3,r3,#15
 1218 05f8 D9B2     	 uxtb r1,r3
 1219 05fa FA68     	 ldr r2,[r7,#12]
 1220 05fc 1378     	 ldrb r3,[r2]
 1221 05fe 61F30303 	 bfi r3,r1,#0,#4
 1222 0602 1370     	 strb r3,[r2]
 454:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 				mcHeader->memberRadius
 455:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 					= mcHeader->maxMemberRadius;
 1223              	 .loc 2 455 0
 1224 0604 FB68     	 ldr r3,[r7,#12]
 1225 0606 5B78     	 ldrb r3,[r3,#1]
 1226 0608 C3F30313 	 ubfx r3,r3,#4,#4
 1227 060c D9B2     	 uxtb r1,r3
 1228 060e FA68     	 ldr r2,[r7,#12]
 1229 0610 5378     	 ldrb r3,[r2,#1]
 1230 0612 61F30303 	 bfi r3,r1,#0,#4
 1231 0616 5370     	 strb r3,[r2,#1]
 1232 0618 09E0     	 b .L88
 1233              	.L85:
 456:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 			}
 457:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 		} else {
 458:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 			if (member) {
 1234              	 .loc 2 458 0
 1235 061a FB7A     	 ldrb r3,[r7,#11]
 1236 061c 002B     	 cmp r3,#0
 1237 061e 06D0     	 beq .L88
 459:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 				broadcast = true;
 1238              	 .loc 2 459 0
 1239 0620 0123     	 movs r3,#1
 1240 0622 FB75     	 strb r3,[r7,#23]
 460:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 				header->nwkFcf.linkLocal = 1;
 1241              	 .loc 2 460 0
 1242 0624 3A69     	 ldr r2,[r7,#16]
 1243 0626 537A     	 ldrb r3,[r2,#9]
 1244 0628 43F00403 	 orr r3,r3,#4
 1245 062c 5372     	 strb r3,[r2,#9]
 1246              	.L88:
 461:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 			}
 462:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 
 463:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c ****     #ifdef NWK_ENABLE_ROUTING
 464:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 			else {
 465:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 				frame->state = NWK_RX_STATE_ROUTE;
 466:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 			}
 467:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c ****     #endif
 468:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 		}
 469:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 
 470:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 		if (broadcast) {
 1247              	 .loc 2 470 0
 1248 062e FB7D     	 ldrb r3,[r7,#23]
 1249 0630 002B     	 cmp r3,#0
 1250 0632 02D0     	 beq .L89
 471:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 			nwkTxBroadcastFrame(frame);
 1251              	 .loc 2 471 0
 1252 0634 7868     	 ldr r0,[r7,#4]
 1253 0636 284B     	 ldr r3,.L99+8
 1254 0638 9847     	 blx r3
 1255              	.LVL12:
 1256              	.L89:
 472:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 		}
 473:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 
 474:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 		if (member) {
 1257              	 .loc 2 474 0
 1258 063a FB7A     	 ldrb r3,[r7,#11]
 1259 063c 002B     	 cmp r3,#0
 1260 063e 43D0     	 beq .L74
 475:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 			frame->payload += sizeof(NwkFrameMulticastHeader_t);
 1261              	 .loc 2 475 0
 1262 0640 7B68     	 ldr r3,[r7,#4]
 1263 0642 D3F88130 	 ldr r3,[r3,#129]
 1264 0646 9A1C     	 adds r2,r3,#2
 1265 0648 7B68     	 ldr r3,[r7,#4]
 1266 064a C3F88120 	 str r2,[r3,#129]
 476:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 
 477:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c ****     #ifdef NWK_ENABLE_SECURITY
 478:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 			if (header->nwkFcf.security) {
 479:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 				frame->state = NWK_RX_STATE_DECRYPT;
 480:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 			} else
 481:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c ****     #endif
 482:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 			frame->state = NWK_RX_STATE_INDICATE;
 1267              	 .loc 2 482 0
 1268 064e 7B68     	 ldr r3,[r7,#4]
 1269 0650 2222     	 movs r2,#34
 1270 0652 1A70     	 strb r2,[r3]
 1271 0654 38E0     	 b .L74
 1272              	.L84:
 1273              	.LBE7:
 483:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 		}
 484:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	} else
 485:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** #endif /* NWK_ENABLE_MULTICAST */
 486:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	{
 487:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 		if (NWK_BROADCAST_ADDR == header->macDstAddr && nwkIb.addr !=
 1274              	 .loc 2 487 0
 1275 0656 3B69     	 ldr r3,[r7,#16]
 1276 0658 B3F80530 	 ldrh r3,[r3,#5]
 1277 065c 9BB2     	 uxth r3,r3
 1278 065e 4FF6FF72 	 movw r2,#65535
 1279 0662 9342     	 cmp r3,r2
 1280 0664 11D1     	 bne .L91
 1281              	 .loc 2 487 0 is_stmt 0 discriminator 1
 1282 0666 1A4B     	 ldr r3,.L99
 1283 0668 1A88     	 ldrh r2,[r3]
 488:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 				header->nwkDstAddr &&
 1284              	 .loc 2 488 0 is_stmt 1 discriminator 1
 1285 066a 3B69     	 ldr r3,[r7,#16]
 1286 066c B3F80D30 	 ldrh r3,[r3,#13]
 1287 0670 9BB2     	 uxth r3,r3
 487:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 				header->nwkDstAddr &&
 1288              	 .loc 2 487 0 discriminator 1
 1289 0672 9A42     	 cmp r2,r3
 1290 0674 09D0     	 beq .L91
 489:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 				0 == header->nwkFcf.linkLocal) {
 1291              	 .loc 2 489 0
 1292 0676 3B69     	 ldr r3,[r7,#16]
 1293 0678 5B7A     	 ldrb r3,[r3,#9]
 1294 067a 03F00403 	 and r3,r3,#4
 1295 067e DBB2     	 uxtb r3,r3
 488:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 				header->nwkDstAddr &&
 1296              	 .loc 2 488 0
 1297 0680 002B     	 cmp r3,#0
 1298 0682 02D1     	 bne .L91
 490:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 			nwkTxBroadcastFrame(frame);
 1299              	 .loc 2 490 0
 1300 0684 7868     	 ldr r0,[r7,#4]
 1301 0686 144B     	 ldr r3,.L99+8
 1302 0688 9847     	 blx r3
 1303              	.LVL13:
 1304              	.L91:
 491:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 		}
 492:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 
 493:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 		if (nwkIb.addr == header->nwkDstAddr || NWK_BROADCAST_ADDR ==
 1305              	 .loc 2 493 0
 1306 068a 114B     	 ldr r3,.L99
 1307 068c 1A88     	 ldrh r2,[r3]
 1308 068e 3B69     	 ldr r3,[r7,#16]
 1309 0690 B3F80D30 	 ldrh r3,[r3,#13]
 1310 0694 9BB2     	 uxth r3,r3
 1311 0696 9A42     	 cmp r2,r3
 1312 0698 07D0     	 beq .L92
 494:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 				header->nwkDstAddr) {
 1313              	 .loc 2 494 0 discriminator 1
 1314 069a 3B69     	 ldr r3,[r7,#16]
 1315 069c B3F80D30 	 ldrh r3,[r3,#13]
 1316 06a0 9BB2     	 uxth r3,r3
 493:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 				header->nwkDstAddr) {
 1317              	 .loc 2 493 0 discriminator 1
 1318 06a2 4FF6FF72 	 movw r2,#65535
 1319 06a6 9342     	 cmp r3,r2
 1320 06a8 0ED1     	 bne .L74
 1321              	.L92:
 495:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c ****     #ifdef NWK_ENABLE_SECURITY
 496:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 			if (header->nwkFcf.security) {
 497:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 				frame->state = NWK_RX_STATE_DECRYPT;
 498:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 			} else
 499:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c ****     #endif
 500:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 			frame->state = NWK_RX_STATE_INDICATE;
 1322              	 .loc 2 500 0
 1323 06aa 7B68     	 ldr r3,[r7,#4]
 1324 06ac 2222     	 movs r2,#34
 1325 06ae 1A70     	 strb r2,[r3]
 1326 06b0 0AE0     	 b .L74
 1327              	.L93:
 378:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	}
 1328              	 .loc 2 378 0
 1329 06b2 00BF     	 nop
 1330 06b4 08E0     	 b .L74
 1331              	.L94:
 385:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	}
 1332              	 .loc 2 385 0
 1333 06b6 00BF     	 nop
 1334 06b8 06E0     	 b .L74
 1335              	.L95:
 409:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	}
 1336              	 .loc 2 409 0
 1337 06ba 00BF     	 nop
 1338 06bc 04E0     	 b .L74
 1339              	.L96:
 421:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	}
 1340              	 .loc 2 421 0
 1341 06be 00BF     	 nop
 1342 06c0 02E0     	 b .L74
 1343              	.L97:
 426:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	}
 1344              	 .loc 2 426 0
 1345 06c2 00BF     	 nop
 1346 06c4 00E0     	 b .L74
 1347              	.L98:
 435:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	}
 1348              	 .loc 2 435 0
 1349 06c6 00BF     	 nop
 1350              	.L74:
 501:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 		}
 502:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 
 503:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c ****   #ifdef NWK_ENABLE_ROUTING
 504:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 		else if (nwkIb.addr == header->macDstAddr) {
 505:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 			frame->state = NWK_RX_STATE_ROUTE;
 506:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 		}
 507:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c ****   #endif
 508:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	}
 509:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** }
 1351              	 .loc 2 509 0
 1352 06c8 1837     	 adds r7,r7,#24
 1353              	.LCFI45:
 1354              	 .cfi_def_cfa_offset 8
 1355 06ca BD46     	 mov sp,r7
 1356              	.LCFI46:
 1357              	 .cfi_def_cfa_register 13
 1358              	 
 1359 06cc 80BD     	 pop {r7,pc}
 1360              	.L100:
 1361 06ce 00BF     	 .align 2
 1362              	.L99:
 1363 06d0 00000000 	 .word nwkIb
 1364 06d4 00000000 	 .word NWK_GroupIsMember
 1365 06d8 00000000 	 .word nwkTxBroadcastFrame
 1366              	 .cfi_endproc
 1367              	.LFE134:
 1369              	 .align 1
 1370              	 .syntax unified
 1371              	 .thumb
 1372              	 .thumb_func
 1373              	 .fpu softvfp
 1375              	nwkRxIndicateDataFrame:
 1376              	.LFB135:
 510:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 
 511:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** /*************************************************************************//**
 512:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** *****************************************************************************/
 513:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** static bool nwkRxIndicateDataFrame(NwkFrame_t *frame)
 514:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** {
 1377              	 .loc 2 514 0
 1378              	 .cfi_startproc
 1379              	 
 1380              	 
 1381 06dc 80B5     	 push {r7,lr}
 1382              	.LCFI47:
 1383              	 .cfi_def_cfa_offset 8
 1384              	 .cfi_offset 7,-8
 1385              	 .cfi_offset 14,-4
 1386 06de 88B0     	 sub sp,sp,#32
 1387              	.LCFI48:
 1388              	 .cfi_def_cfa_offset 40
 1389 06e0 00AF     	 add r7,sp,#0
 1390              	.LCFI49:
 1391              	 .cfi_def_cfa_register 7
 1392 06e2 7860     	 str r0,[r7,#4]
 515:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	NwkFrameHeader_t *header = &frame->header;
 1393              	 .loc 2 515 0
 1394 06e4 7B68     	 ldr r3,[r7,#4]
 1395 06e6 0233     	 adds r3,r3,#2
 1396 06e8 FB61     	 str r3,[r7,#28]
 516:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	NWK_DataInd_t ind;
 517:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 
 518:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	if (NULL == nwkIb.endpoint[header->nwkDstEndpoint]) {
 1397              	 .loc 2 518 0
 1398 06ea FB69     	 ldr r3,[r7,#28]
 1399 06ec DB7B     	 ldrb r3,[r3,#15]
 1400 06ee C3F30313 	 ubfx r3,r3,#4,#4
 1401 06f2 DBB2     	 uxtb r3,r3
 1402 06f4 5E4A     	 ldr r2,.L117
 1403 06f6 0233     	 adds r3,r3,#2
 1404 06f8 52F82330 	 ldr r3,[r2,r3,lsl#2]
 1405 06fc 002B     	 cmp r3,#0
 1406 06fe 01D1     	 bne .L102
 519:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 		return false;
 1407              	 .loc 2 519 0
 1408 0700 0023     	 movs r3,#0
 1409 0702 B1E0     	 b .L116
 1410              	.L102:
 520:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	}
 521:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 
 522:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	ind.srcAddr = header->nwkSrcAddr;
 1411              	 .loc 2 522 0
 1412 0704 FB69     	 ldr r3,[r7,#28]
 1413 0706 B3F80B30 	 ldrh r3,[r3,#11]
 1414 070a 9BB2     	 uxth r3,r3
 1415 070c BB81     	 strh r3,[r7,#12]
 523:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	ind.dstAddr = header->nwkDstAddr;
 1416              	 .loc 2 523 0
 1417 070e FB69     	 ldr r3,[r7,#28]
 1418 0710 B3F80D30 	 ldrh r3,[r3,#13]
 1419 0714 9BB2     	 uxth r3,r3
 1420 0716 FB81     	 strh r3,[r7,#14]
 524:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	ind.srcEndpoint = header->nwkSrcEndpoint;
 1421              	 .loc 2 524 0
 1422 0718 FB69     	 ldr r3,[r7,#28]
 1423 071a DB7B     	 ldrb r3,[r3,#15]
 1424 071c C3F30303 	 ubfx r3,r3,#0,#4
 1425 0720 DBB2     	 uxtb r3,r3
 1426 0722 3B74     	 strb r3,[r7,#16]
 525:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	ind.dstEndpoint = header->nwkDstEndpoint;
 1427              	 .loc 2 525 0
 1428 0724 FB69     	 ldr r3,[r7,#28]
 1429 0726 DB7B     	 ldrb r3,[r3,#15]
 1430 0728 C3F30313 	 ubfx r3,r3,#4,#4
 1431 072c DBB2     	 uxtb r3,r3
 1432 072e 7B74     	 strb r3,[r7,#17]
 526:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	ind.data = frame->payload;
 1433              	 .loc 2 526 0
 1434 0730 7B68     	 ldr r3,[r7,#4]
 1435 0732 D3F88130 	 ldr r3,[r3,#129]
 1436 0736 7B61     	 str r3,[r7,#20]
 527:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	ind.size = nwkFramePayloadSize(frame);
 1437              	 .loc 2 527 0
 1438 0738 7868     	 ldr r0,[r7,#4]
 1439 073a FFF761FC 	 bl nwkFramePayloadSize
 1440 073e 0346     	 mov r3,r0
 1441 0740 3B76     	 strb r3,[r7,#24]
 528:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	ind.lqi = frame->rx.lqi;
 1442              	 .loc 2 528 0
 1443 0742 7B68     	 ldr r3,[r7,#4]
 1444 0744 93F88530 	 ldrb r3,[r3,#133]
 1445 0748 7B76     	 strb r3,[r7,#25]
 529:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	ind.rssi = frame->rx.rssi;
 1446              	 .loc 2 529 0
 1447 074a 7B68     	 ldr r3,[r7,#4]
 1448 074c 93F98630 	 ldrsb r3,[r3,#134]
 1449 0750 BB76     	 strb r3,[r7,#26]
 530:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 
 531:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	ind.options	= (header->nwkFcf.ackRequest) ? NWK_IND_OPT_ACK_REQUESTED : 0;
 1450              	 .loc 2 531 0
 1451 0752 FB69     	 ldr r3,[r7,#28]
 1452 0754 5B7A     	 ldrb r3,[r3,#9]
 1453 0756 03F00103 	 and r3,r3,#1
 1454 075a DBB2     	 uxtb r3,r3
 1455 075c 002B     	 cmp r3,#0
 1456 075e 14BF     	 ite ne
 1457 0760 0123     	 movne r3,#1
 1458 0762 0023     	 moveq r3,#0
 1459 0764 DBB2     	 uxtb r3,r3
 1460 0766 9BB2     	 uxth r3,r3
 1461 0768 7B82     	 strh r3,[r7,#18]
 532:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	ind.options |= (header->nwkFcf.security) ? NWK_IND_OPT_SECURED : 0;
 1462              	 .loc 2 532 0
 1463 076a 7B8A     	 ldrh r3,[r7,#18]
 1464 076c 1AB2     	 sxth r2,r3
 1465 076e FB69     	 ldr r3,[r7,#28]
 1466 0770 5B7A     	 ldrb r3,[r3,#9]
 1467 0772 1BB2     	 sxth r3,r3
 1468 0774 03F00203 	 and r3,r3,#2
 1469 0778 1BB2     	 sxth r3,r3
 1470 077a 1343     	 orrs r3,r3,r2
 1471 077c 1BB2     	 sxth r3,r3
 1472 077e 9BB2     	 uxth r3,r3
 1473 0780 7B82     	 strh r3,[r7,#18]
 533:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	ind.options |= (header->nwkFcf.linkLocal) ? NWK_IND_OPT_LINK_LOCAL : 0;
 1474              	 .loc 2 533 0
 1475 0782 7B8A     	 ldrh r3,[r7,#18]
 1476 0784 1AB2     	 sxth r2,r3
 1477 0786 FB69     	 ldr r3,[r7,#28]
 1478 0788 5B7A     	 ldrb r3,[r3,#9]
 1479 078a 03F00403 	 and r3,r3,#4
 1480 078e DBB2     	 uxtb r3,r3
 1481 0790 002B     	 cmp r3,#0
 1482 0792 01D0     	 beq .L104
 1483              	 .loc 2 533 0 is_stmt 0 discriminator 1
 1484 0794 2023     	 movs r3,#32
 1485 0796 00E0     	 b .L105
 1486              	.L104:
 1487              	 .loc 2 533 0 discriminator 2
 1488 0798 0023     	 movs r3,#0
 1489              	.L105:
 1490              	 .loc 2 533 0 discriminator 4
 1491 079a 1343     	 orrs r3,r3,r2
 1492 079c 1BB2     	 sxth r3,r3
 1493 079e 9BB2     	 uxth r3,r3
 1494 07a0 7B82     	 strh r3,[r7,#18]
 534:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	ind.options |= (header->nwkFcf.multicast) ? NWK_IND_OPT_MULTICAST : 0;
 1495              	 .loc 2 534 0 is_stmt 1 discriminator 4
 1496 07a2 7B8A     	 ldrh r3,[r7,#18]
 1497 07a4 1AB2     	 sxth r2,r3
 1498 07a6 FB69     	 ldr r3,[r7,#28]
 1499 07a8 5B7A     	 ldrb r3,[r3,#9]
 1500 07aa 03F00803 	 and r3,r3,#8
 1501 07ae DBB2     	 uxtb r3,r3
 1502 07b0 002B     	 cmp r3,#0
 1503 07b2 01D0     	 beq .L106
 1504              	 .loc 2 534 0 is_stmt 0 discriminator 1
 1505 07b4 4023     	 movs r3,#64
 1506 07b6 00E0     	 b .L107
 1507              	.L106:
 1508              	 .loc 2 534 0 discriminator 2
 1509 07b8 0023     	 movs r3,#0
 1510              	.L107:
 1511              	 .loc 2 534 0 discriminator 4
 1512 07ba 1343     	 orrs r3,r3,r2
 1513 07bc 1BB2     	 sxth r3,r3
 1514 07be 9BB2     	 uxth r3,r3
 1515 07c0 7B82     	 strh r3,[r7,#18]
 535:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	ind.options |= (header->nwkFcf.beacon) ? NWK_IND_OPT_BEACON : 0;
 1516              	 .loc 2 535 0 is_stmt 1 discriminator 4
 1517 07c2 7B8A     	 ldrh r3,[r7,#18]
 1518 07c4 1AB2     	 sxth r2,r3
 1519 07c6 FB69     	 ldr r3,[r7,#28]
 1520 07c8 5B7A     	 ldrb r3,[r3,#9]
 1521 07ca 03F01003 	 and r3,r3,#16
 1522 07ce DBB2     	 uxtb r3,r3
 1523 07d0 002B     	 cmp r3,#0
 1524 07d2 01D0     	 beq .L108
 1525              	 .loc 2 535 0 is_stmt 0 discriminator 1
 1526 07d4 8023     	 movs r3,#128
 1527 07d6 00E0     	 b .L109
 1528              	.L108:
 1529              	 .loc 2 535 0 discriminator 2
 1530 07d8 0023     	 movs r3,#0
 1531              	.L109:
 1532              	 .loc 2 535 0 discriminator 4
 1533 07da 1343     	 orrs r3,r3,r2
 1534 07dc 1BB2     	 sxth r3,r3
 1535 07de 9BB2     	 uxth r3,r3
 1536 07e0 7B82     	 strh r3,[r7,#18]
 536:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	ind.options	|= (NWK_BROADCAST_ADDR == header->nwkDstAddr) ? NWK_IND_OPT_BROADCAST : 0;
 1537              	 .loc 2 536 0 is_stmt 1 discriminator 4
 1538 07e2 7B8A     	 ldrh r3,[r7,#18]
 1539 07e4 1AB2     	 sxth r2,r3
 1540 07e6 FB69     	 ldr r3,[r7,#28]
 1541 07e8 B3F80D30 	 ldrh r3,[r3,#13]
 1542 07ec 9BB2     	 uxth r3,r3
 1543 07ee 4FF6FF71 	 movw r1,#65535
 1544 07f2 8B42     	 cmp r3,r1
 1545 07f4 01D1     	 bne .L110
 1546              	 .loc 2 536 0 is_stmt 0 discriminator 1
 1547 07f6 0423     	 movs r3,#4
 1548 07f8 00E0     	 b .L111
 1549              	.L110:
 1550              	 .loc 2 536 0 discriminator 2
 1551 07fa 0023     	 movs r3,#0
 1552              	.L111:
 1553              	 .loc 2 536 0 discriminator 4
 1554 07fc 1343     	 orrs r3,r3,r2
 1555 07fe 1BB2     	 sxth r3,r3
 1556 0800 9BB2     	 uxth r3,r3
 1557 0802 7B82     	 strh r3,[r7,#18]
 537:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	ind.options	|= (header->nwkSrcAddr == header->macSrcAddr) ? NWK_IND_OPT_LOCAL : 0;
 1558              	 .loc 2 537 0 is_stmt 1 discriminator 4
 1559 0804 7B8A     	 ldrh r3,[r7,#18]
 1560 0806 1AB2     	 sxth r2,r3
 1561 0808 FB69     	 ldr r3,[r7,#28]
 1562 080a B3F80B30 	 ldrh r3,[r3,#11]
 1563 080e 99B2     	 uxth r1,r3
 1564 0810 FB69     	 ldr r3,[r7,#28]
 1565 0812 B3F80730 	 ldrh r3,[r3,#7]
 1566 0816 9BB2     	 uxth r3,r3
 1567 0818 9942     	 cmp r1,r3
 1568 081a 01D1     	 bne .L112
 1569              	 .loc 2 537 0 is_stmt 0 discriminator 1
 1570 081c 0823     	 movs r3,#8
 1571 081e 00E0     	 b .L113
 1572              	.L112:
 1573              	 .loc 2 537 0 discriminator 2
 1574 0820 0023     	 movs r3,#0
 1575              	.L113:
 1576              	 .loc 2 537 0 discriminator 4
 1577 0822 1343     	 orrs r3,r3,r2
 1578 0824 1BB2     	 sxth r3,r3
 1579 0826 9BB2     	 uxth r3,r3
 1580 0828 7B82     	 strh r3,[r7,#18]
 538:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	ind.options	|= (NWK_BROADCAST_PANID == header->macDstPanId) ? NWK_IND_OPT_BROADCAST_PAN_ID : 0;
 1581              	 .loc 2 538 0 is_stmt 1 discriminator 4
 1582 082a 7B8A     	 ldrh r3,[r7,#18]
 1583 082c 1AB2     	 sxth r2,r3
 1584 082e FB69     	 ldr r3,[r7,#28]
 1585 0830 B3F80330 	 ldrh r3,[r3,#3]
 1586 0834 9BB2     	 uxth r3,r3
 1587 0836 4FF6FF71 	 movw r1,#65535
 1588 083a 8B42     	 cmp r3,r1
 1589 083c 01D1     	 bne .L114
 1590              	 .loc 2 538 0 is_stmt 0 discriminator 1
 1591 083e 1023     	 movs r3,#16
 1592 0840 00E0     	 b .L115
 1593              	.L114:
 1594              	 .loc 2 538 0 discriminator 2
 1595 0842 0023     	 movs r3,#0
 1596              	.L115:
 1597              	 .loc 2 538 0 discriminator 4
 1598 0844 1343     	 orrs r3,r3,r2
 1599 0846 1BB2     	 sxth r3,r3
 1600 0848 9BB2     	 uxth r3,r3
 1601 084a 7B82     	 strh r3,[r7,#18]
 539:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 
 540:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	return nwkIb.endpoint[header->nwkDstEndpoint](&ind);
 1602              	 .loc 2 540 0 is_stmt 1 discriminator 4
 1603 084c FB69     	 ldr r3,[r7,#28]
 1604 084e DB7B     	 ldrb r3,[r3,#15]
 1605 0850 C3F30313 	 ubfx r3,r3,#4,#4
 1606 0854 DBB2     	 uxtb r3,r3
 1607 0856 064A     	 ldr r2,.L117
 1608 0858 0233     	 adds r3,r3,#2
 1609 085a 52F82330 	 ldr r3,[r2,r3,lsl#2]
 1610 085e 07F10C02 	 add r2,r7,#12
 1611 0862 1046     	 mov r0,r2
 1612 0864 9847     	 blx r3
 1613              	.LVL14:
 1614 0866 0346     	 mov r3,r0
 1615              	.L116:
 541:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** }
 1616              	 .loc 2 541 0 discriminator 1
 1617 0868 1846     	 mov r0,r3
 1618 086a 2037     	 adds r7,r7,#32
 1619              	.LCFI50:
 1620              	 .cfi_def_cfa_offset 8
 1621 086c BD46     	 mov sp,r7
 1622              	.LCFI51:
 1623              	 .cfi_def_cfa_register 13
 1624              	 
 1625 086e 80BD     	 pop {r7,pc}
 1626              	.L118:
 1627              	 .align 2
 1628              	.L117:
 1629 0870 00000000 	 .word nwkIb
 1630              	 .cfi_endproc
 1631              	.LFE135:
 1633              	 .align 1
 1634              	 .syntax unified
 1635              	 .thumb
 1636              	 .thumb_func
 1637              	 .fpu softvfp
 1639              	nwkRxIndicateBeaconFrame:
 1640              	.LFB136:
 542:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 
 543:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** /*************************************************************************//**
 544:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** *****************************************************************************/
 545:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** static bool nwkRxIndicateBeaconFrame(NwkFrame_t *frame)
 546:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** {
 1641              	 .loc 2 546 0
 1642              	 .cfi_startproc
 1643              	 
 1644              	 
 1645 0874 80B5     	 push {r7,lr}
 1646              	.LCFI52:
 1647              	 .cfi_def_cfa_offset 8
 1648              	 .cfi_offset 7,-8
 1649              	 .cfi_offset 14,-4
 1650 0876 88B0     	 sub sp,sp,#32
 1651              	.LCFI53:
 1652              	 .cfi_def_cfa_offset 40
 1653 0878 00AF     	 add r7,sp,#0
 1654              	.LCFI54:
 1655              	 .cfi_def_cfa_register 7
 1656 087a 7860     	 str r0,[r7,#4]
 547:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	NwkFrameHeader_t *header = &frame->header;
 1657              	 .loc 2 547 0
 1658 087c 7B68     	 ldr r3,[r7,#4]
 1659 087e 0233     	 adds r3,r3,#2
 1660 0880 FB61     	 str r3,[r7,#28]
 548:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	NWK_DataInd_t ind;
 549:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	
 550:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	frame->state = NWK_RX_STATE_FINISH;
 1661              	 .loc 2 550 0
 1662 0882 7B68     	 ldr r3,[r7,#4]
 1663 0884 2422     	 movs r2,#36
 1664 0886 1A70     	 strb r2,[r3]
 551:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 
 552:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	if (NULL == nwkIb.endpoint[0]) {
 1665              	 .loc 2 552 0
 1666 0888 1C4B     	 ldr r3,.L123
 1667 088a 9B68     	 ldr r3,[r3,#8]
 1668 088c 002B     	 cmp r3,#0
 1669 088e 01D1     	 bne .L120
 553:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	return false;
 1670              	 .loc 2 553 0
 1671 0890 0023     	 movs r3,#0
 1672 0892 2EE0     	 b .L122
 1673              	.L120:
 554:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	}
 555:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 
 556:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	ind.srcAddr = frame->beacon.macSrcAddr;
 1674              	 .loc 2 556 0
 1675 0894 7B68     	 ldr r3,[r7,#4]
 1676 0896 B3F80730 	 ldrh r3,[r3,#7]
 1677 089a 9BB2     	 uxth r3,r3
 1678 089c BB81     	 strh r3,[r7,#12]
 557:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	ind.dstAddr = frame->beacon.macSrcAddr;
 1679              	 .loc 2 557 0
 1680 089e 7B68     	 ldr r3,[r7,#4]
 1681 08a0 B3F80730 	 ldrh r3,[r3,#7]
 1682 08a4 9BB2     	 uxth r3,r3
 1683 08a6 FB81     	 strh r3,[r7,#14]
 558:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	ind.srcEndpoint = 0;
 1684              	 .loc 2 558 0
 1685 08a8 0023     	 movs r3,#0
 1686 08aa 3B74     	 strb r3,[r7,#16]
 559:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	ind.dstEndpoint = 0;
 1687              	 .loc 2 559 0
 1688 08ac 0023     	 movs r3,#0
 1689 08ae 7B74     	 strb r3,[r7,#17]
 560:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	ind.data = frame->payload;
 1690              	 .loc 2 560 0
 1691 08b0 7B68     	 ldr r3,[r7,#4]
 1692 08b2 D3F88130 	 ldr r3,[r3,#129]
 1693 08b6 7B61     	 str r3,[r7,#20]
 561:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	ind.size = nwkFramePayloadSize(frame);
 1694              	 .loc 2 561 0
 1695 08b8 7868     	 ldr r0,[r7,#4]
 1696 08ba FFF7A1FB 	 bl nwkFramePayloadSize
 1697 08be 0346     	 mov r3,r0
 1698 08c0 3B76     	 strb r3,[r7,#24]
 562:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	ind.lqi = frame->rx.lqi;
 1699              	 .loc 2 562 0
 1700 08c2 7B68     	 ldr r3,[r7,#4]
 1701 08c4 93F88530 	 ldrb r3,[r3,#133]
 1702 08c8 7B76     	 strb r3,[r7,#25]
 563:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	ind.rssi = frame->rx.rssi;
 1703              	 .loc 2 563 0
 1704 08ca 7B68     	 ldr r3,[r7,#4]
 1705 08cc 93F98630 	 ldrsb r3,[r3,#134]
 1706 08d0 BB76     	 strb r3,[r7,#26]
 564:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 
 565:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	ind.options	= NWK_IND_OPT_BEACON;
 1707              	 .loc 2 565 0
 1708 08d2 8023     	 movs r3,#128
 1709 08d4 7B82     	 strh r3,[r7,#18]
 566:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 
 567:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	return nwkIb.endpoint[header->nwkDstEndpoint](&ind);
 1710              	 .loc 2 567 0
 1711 08d6 FB69     	 ldr r3,[r7,#28]
 1712 08d8 DB7B     	 ldrb r3,[r3,#15]
 1713 08da C3F30313 	 ubfx r3,r3,#4,#4
 1714 08de DBB2     	 uxtb r3,r3
 1715 08e0 064A     	 ldr r2,.L123
 1716 08e2 0233     	 adds r3,r3,#2
 1717 08e4 52F82330 	 ldr r3,[r2,r3,lsl#2]
 1718 08e8 07F10C02 	 add r2,r7,#12
 1719 08ec 1046     	 mov r0,r2
 1720 08ee 9847     	 blx r3
 1721              	.LVL15:
 1722 08f0 0346     	 mov r3,r0
 1723              	.L122:
 568:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** }
 1724              	 .loc 2 568 0 discriminator 1
 1725 08f2 1846     	 mov r0,r3
 1726 08f4 2037     	 adds r7,r7,#32
 1727              	.LCFI55:
 1728              	 .cfi_def_cfa_offset 8
 1729 08f6 BD46     	 mov sp,r7
 1730              	.LCFI56:
 1731              	 .cfi_def_cfa_register 13
 1732              	 
 1733 08f8 80BD     	 pop {r7,pc}
 1734              	.L124:
 1735 08fa 00BF     	 .align 2
 1736              	.L123:
 1737 08fc 00000000 	 .word nwkIb
 1738              	 .cfi_endproc
 1739              	.LFE136:
 1741              	 .align 1
 1742              	 .syntax unified
 1743              	 .thumb
 1744              	 .thumb_func
 1745              	 .fpu softvfp
 1747              	nwkRxIndicateLLBeaconFrame:
 1748              	.LFB137:
 569:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 
 570:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 
 571:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** /*************************************************************************//**
 572:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** *****************************************************************************/
 573:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** static bool nwkRxIndicateLLBeaconFrame(NwkFrame_t *frame)
 574:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** {
 1749              	 .loc 2 574 0
 1750              	 .cfi_startproc
 1751              	 
 1752              	 
 1753 0900 80B5     	 push {r7,lr}
 1754              	.LCFI57:
 1755              	 .cfi_def_cfa_offset 8
 1756              	 .cfi_offset 7,-8
 1757              	 .cfi_offset 14,-4
 1758 0902 86B0     	 sub sp,sp,#24
 1759              	.LCFI58:
 1760              	 .cfi_def_cfa_offset 32
 1761 0904 00AF     	 add r7,sp,#0
 1762              	.LCFI59:
 1763              	 .cfi_def_cfa_register 7
 1764 0906 7860     	 str r0,[r7,#4]
 575:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	NWK_DataInd_t ind;
 576:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 
 577:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	frame->state = NWK_RX_STATE_FINISH;
 1765              	 .loc 2 577 0
 1766 0908 7B68     	 ldr r3,[r7,#4]
 1767 090a 2422     	 movs r2,#36
 1768 090c 1A70     	 strb r2,[r3]
 578:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 
 579:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	if (NULL == nwkIb.endpoint[APP_BEACON_ENDPOINT]) {
 1769              	 .loc 2 579 0
 1770 090e 164B     	 ldr r3,.L129
 1771 0910 9B68     	 ldr r3,[r3,#8]
 1772 0912 002B     	 cmp r3,#0
 1773 0914 01D1     	 bne .L126
 580:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	return false;
 1774              	 .loc 2 580 0
 1775 0916 0023     	 movs r3,#0
 1776 0918 21E0     	 b .L128
 1777              	.L126:
 581:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	}
 582:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	/* this informations are not received in a LLDN Beacon as they are in standart 802.15.4
 583:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	 * all data informatino handle must be done by user 
 584:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	 */
 585:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	ind.srcAddr = 0;
 1778              	 .loc 2 585 0
 1779 091a 0023     	 movs r3,#0
 1780 091c 3B81     	 strh r3,[r7,#8]
 586:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	ind.dstAddr = 0;
 1781              	 .loc 2 586 0
 1782 091e 0023     	 movs r3,#0
 1783 0920 7B81     	 strh r3,[r7,#10]
 587:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	ind.srcEndpoint = 0;
 1784              	 .loc 2 587 0
 1785 0922 0023     	 movs r3,#0
 1786 0924 3B73     	 strb r3,[r7,#12]
 588:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	ind.dstEndpoint = 0;
 1787              	 .loc 2 588 0
 1788 0926 0023     	 movs r3,#0
 1789 0928 7B73     	 strb r3,[r7,#13]
 589:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	
 590:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	ind.data = &frame->LLbeacon;
 1790              	 .loc 2 590 0
 1791 092a 7B68     	 ldr r3,[r7,#4]
 1792 092c 0233     	 adds r3,r3,#2
 1793 092e 3B61     	 str r3,[r7,#16]
 591:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	ind.size = nwkFramePayloadSize(frame);
 1794              	 .loc 2 591 0
 1795 0930 7868     	 ldr r0,[r7,#4]
 1796 0932 FFF765FB 	 bl nwkFramePayloadSize
 1797 0936 0346     	 mov r3,r0
 1798 0938 3B75     	 strb r3,[r7,#20]
 592:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	ind.lqi = frame->rx.lqi;
 1799              	 .loc 2 592 0
 1800 093a 7B68     	 ldr r3,[r7,#4]
 1801 093c 93F88530 	 ldrb r3,[r3,#133]
 1802 0940 7B75     	 strb r3,[r7,#21]
 593:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	ind.rssi = frame->rx.rssi;
 1803              	 .loc 2 593 0
 1804 0942 7B68     	 ldr r3,[r7,#4]
 1805 0944 93F98630 	 ldrsb r3,[r3,#134]
 1806 0948 BB75     	 strb r3,[r7,#22]
 594:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 
 595:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	ind.options	= NWK_IND_OPT_LLDN_BEACON;
 1807              	 .loc 2 595 0
 1808 094a 4FF48073 	 mov r3,#256
 1809 094e FB81     	 strh r3,[r7,#14]
 596:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 
 597:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 
 598:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	return nwkIb.endpoint[APP_BEACON_ENDPOINT](&ind);
 1810              	 .loc 2 598 0
 1811 0950 054B     	 ldr r3,.L129
 1812 0952 9B68     	 ldr r3,[r3,#8]
 1813 0954 07F10802 	 add r2,r7,#8
 1814 0958 1046     	 mov r0,r2
 1815 095a 9847     	 blx r3
 1816              	.LVL16:
 1817 095c 0346     	 mov r3,r0
 1818              	.L128:
 599:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** }
 1819              	 .loc 2 599 0 discriminator 1
 1820 095e 1846     	 mov r0,r3
 1821 0960 1837     	 adds r7,r7,#24
 1822              	.LCFI60:
 1823              	 .cfi_def_cfa_offset 8
 1824 0962 BD46     	 mov sp,r7
 1825              	.LCFI61:
 1826              	 .cfi_def_cfa_register 13
 1827              	 
 1828 0964 80BD     	 pop {r7,pc}
 1829              	.L130:
 1830 0966 00BF     	 .align 2
 1831              	.L129:
 1832 0968 00000000 	 .word nwkIb
 1833              	 .cfi_endproc
 1834              	.LFE137:
 1836              	 .align 1
 1837              	 .syntax unified
 1838              	 .thumb
 1839              	 .thumb_func
 1840              	 .fpu softvfp
 1842              	nwkRxIndicateLLCommandFrame:
 1843              	.LFB138:
 600:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 
 601:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** static bool nwkRxIndicateLLCommandFrame(NwkFrame_t *frame)
 602:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** {
 1844              	 .loc 2 602 0
 1845              	 .cfi_startproc
 1846              	 
 1847              	 
 1848 096c 80B5     	 push {r7,lr}
 1849              	.LCFI62:
 1850              	 .cfi_def_cfa_offset 8
 1851              	 .cfi_offset 7,-8
 1852              	 .cfi_offset 14,-4
 1853 096e 88B0     	 sub sp,sp,#32
 1854              	.LCFI63:
 1855              	 .cfi_def_cfa_offset 40
 1856 0970 00AF     	 add r7,sp,#0
 1857              	.LCFI64:
 1858              	 .cfi_def_cfa_register 7
 1859 0972 7860     	 str r0,[r7,#4]
 603:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	NwkFrameGeneralHeaderLLDN_t *header = &frame->LLgeneral;
 1860              	 .loc 2 603 0
 1861 0974 7B68     	 ldr r3,[r7,#4]
 1862 0976 0233     	 adds r3,r3,#2
 1863 0978 FB61     	 str r3,[r7,#28]
 604:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	NWK_DataInd_t ind;
 605:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 
 606:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	frame->state = NWK_RX_STATE_FINISH;
 1864              	 .loc 2 606 0
 1865 097a 7B68     	 ldr r3,[r7,#4]
 1866 097c 2422     	 movs r2,#36
 1867 097e 1A70     	 strb r2,[r3]
 607:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 
 608:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	if (NULL == nwkIb.endpoint[APP_COMMAND_ENDPOINT]) {
 1868              	 .loc 2 608 0
 1869 0980 164B     	 ldr r3,.L135
 1870 0982 5B69     	 ldr r3,[r3,#20]
 1871 0984 002B     	 cmp r3,#0
 1872 0986 01D1     	 bne .L132
 609:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	return false;
 1873              	 .loc 2 609 0
 1874 0988 0023     	 movs r3,#0
 1875 098a 22E0     	 b .L134
 1876              	.L132:
 610:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	}
 611:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	
 612:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	/* this informations are not received in a LLDN Command as they are in standart 802.15.4
 613:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	 * all data informatino handle must be done by user 
 614:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	 */
 615:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	ind.srcAddr = 0;
 1877              	 .loc 2 615 0
 1878 098c 0023     	 movs r3,#0
 1879 098e BB81     	 strh r3,[r7,#12]
 616:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	ind.dstAddr = 0;
 1880              	 .loc 2 616 0
 1881 0990 0023     	 movs r3,#0
 1882 0992 FB81     	 strh r3,[r7,#14]
 617:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	ind.srcEndpoint = 0;
 1883              	 .loc 2 617 0
 1884 0994 0023     	 movs r3,#0
 1885 0996 3B74     	 strb r3,[r7,#16]
 618:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	ind.dstEndpoint = 0;
 1886              	 .loc 2 618 0
 1887 0998 0023     	 movs r3,#0
 1888 099a 7B74     	 strb r3,[r7,#17]
 619:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 
 620:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	ind.data = frame->payload;
 1889              	 .loc 2 620 0
 1890 099c 7B68     	 ldr r3,[r7,#4]
 1891 099e D3F88130 	 ldr r3,[r3,#129]
 1892 09a2 7B61     	 str r3,[r7,#20]
 621:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	ind.size = nwkFramePayloadSize(frame);
 1893              	 .loc 2 621 0
 1894 09a4 7868     	 ldr r0,[r7,#4]
 1895 09a6 FFF72BFB 	 bl nwkFramePayloadSize
 1896 09aa 0346     	 mov r3,r0
 1897 09ac 3B76     	 strb r3,[r7,#24]
 622:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	ind.lqi = frame->rx.lqi;
 1898              	 .loc 2 622 0
 1899 09ae 7B68     	 ldr r3,[r7,#4]
 1900 09b0 93F88530 	 ldrb r3,[r3,#133]
 1901 09b4 7B76     	 strb r3,[r7,#25]
 623:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	ind.rssi = frame->rx.rssi;
 1902              	 .loc 2 623 0
 1903 09b6 7B68     	 ldr r3,[r7,#4]
 1904 09b8 93F98630 	 ldrsb r3,[r3,#134]
 1905 09bc BB76     	 strb r3,[r7,#26]
 624:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 
 625:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	ind.options	= NWK_IND_OPT_LLDN_MACCOMMAND;
 1906              	 .loc 2 625 0
 1907 09be 4FF40073 	 mov r3,#512
 1908 09c2 7B82     	 strh r3,[r7,#18]
 626:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 
 627:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	return nwkIb.endpoint[APP_COMMAND_ENDPOINT](&ind);
 1909              	 .loc 2 627 0
 1910 09c4 054B     	 ldr r3,.L135
 1911 09c6 5B69     	 ldr r3,[r3,#20]
 1912 09c8 07F10C02 	 add r2,r7,#12
 1913 09cc 1046     	 mov r0,r2
 1914 09ce 9847     	 blx r3
 1915              	.LVL17:
 1916 09d0 0346     	 mov r3,r0
 1917              	.L134:
 628:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** }
 1918              	 .loc 2 628 0 discriminator 1
 1919 09d2 1846     	 mov r0,r3
 1920 09d4 2037     	 adds r7,r7,#32
 1921              	.LCFI65:
 1922              	 .cfi_def_cfa_offset 8
 1923 09d6 BD46     	 mov sp,r7
 1924              	.LCFI66:
 1925              	 .cfi_def_cfa_register 13
 1926              	 
 1927 09d8 80BD     	 pop {r7,pc}
 1928              	.L136:
 1929 09da 00BF     	 .align 2
 1930              	.L135:
 1931 09dc 00000000 	 .word nwkIb
 1932              	 .cfi_endproc
 1933              	.LFE138:
 1935              	 .align 1
 1936              	 .syntax unified
 1937              	 .thumb
 1938              	 .thumb_func
 1939              	 .fpu softvfp
 1941              	nwkRxIndicateLLACKFrame:
 1942              	.LFB139:
 629:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 
 630:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** static bool nwkRxIndicateLLACKFrame(NwkFrame_t *frame)
 631:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** {
 1943              	 .loc 2 631 0
 1944              	 .cfi_startproc
 1945              	 
 1946              	 
 1947 09e0 80B5     	 push {r7,lr}
 1948              	.LCFI67:
 1949              	 .cfi_def_cfa_offset 8
 1950              	 .cfi_offset 7,-8
 1951              	 .cfi_offset 14,-4
 1952 09e2 88B0     	 sub sp,sp,#32
 1953              	.LCFI68:
 1954              	 .cfi_def_cfa_offset 40
 1955 09e4 00AF     	 add r7,sp,#0
 1956              	.LCFI69:
 1957              	 .cfi_def_cfa_register 7
 1958 09e6 7860     	 str r0,[r7,#4]
 632:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	
 633:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 		NwkFrameGeneralHeaderLLDN_t *header = &frame->LLgeneral;
 1959              	 .loc 2 633 0
 1960 09e8 7B68     	 ldr r3,[r7,#4]
 1961 09ea 0233     	 adds r3,r3,#2
 1962 09ec FB61     	 str r3,[r7,#28]
 634:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	NWK_DataInd_t ind;
 635:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 
 636:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	frame->state = NWK_RX_STATE_FINISH;
 1963              	 .loc 2 636 0
 1964 09ee 7B68     	 ldr r3,[r7,#4]
 1965 09f0 2422     	 movs r2,#36
 1966 09f2 1A70     	 strb r2,[r3]
 637:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 
 638:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	if (NULL == nwkIb.endpoint[APP_ACK_ENDPOINT]) {
 1967              	 .loc 2 638 0
 1968 09f4 164B     	 ldr r3,.L141
 1969 09f6 9B69     	 ldr r3,[r3,#24]
 1970 09f8 002B     	 cmp r3,#0
 1971 09fa 01D1     	 bne .L138
 639:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	return false;
 1972              	 .loc 2 639 0
 1973 09fc 0023     	 movs r3,#0
 1974 09fe 22E0     	 b .L140
 1975              	.L138:
 640:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	}
 641:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	
 642:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	/* 
 643:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	 * this informations are not received in a LLDN Command as they are in standart 802.15.4
 644:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	 * all data informatino handle must be done by user 
 645:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	 */
 646:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	ind.srcAddr = 0;
 1976              	 .loc 2 646 0
 1977 0a00 0023     	 movs r3,#0
 1978 0a02 BB81     	 strh r3,[r7,#12]
 647:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	ind.dstAddr = 0;
 1979              	 .loc 2 647 0
 1980 0a04 0023     	 movs r3,#0
 1981 0a06 FB81     	 strh r3,[r7,#14]
 648:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	ind.srcEndpoint = 0;
 1982              	 .loc 2 648 0
 1983 0a08 0023     	 movs r3,#0
 1984 0a0a 3B74     	 strb r3,[r7,#16]
 649:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	ind.dstEndpoint = 0;
 1985              	 .loc 2 649 0
 1986 0a0c 0023     	 movs r3,#0
 1987 0a0e 7B74     	 strb r3,[r7,#17]
 650:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 
 651:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	ind.data =  frame->payload;
 1988              	 .loc 2 651 0
 1989 0a10 7B68     	 ldr r3,[r7,#4]
 1990 0a12 D3F88130 	 ldr r3,[r3,#129]
 1991 0a16 7B61     	 str r3,[r7,#20]
 652:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	ind.size = nwkFramePayloadSize(frame);
 1992              	 .loc 2 652 0
 1993 0a18 7868     	 ldr r0,[r7,#4]
 1994 0a1a FFF7F1FA 	 bl nwkFramePayloadSize
 1995 0a1e 0346     	 mov r3,r0
 1996 0a20 3B76     	 strb r3,[r7,#24]
 653:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	ind.lqi = frame->rx.lqi;
 1997              	 .loc 2 653 0
 1998 0a22 7B68     	 ldr r3,[r7,#4]
 1999 0a24 93F88530 	 ldrb r3,[r3,#133]
 2000 0a28 7B76     	 strb r3,[r7,#25]
 654:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	ind.rssi = frame->rx.rssi;
 2001              	 .loc 2 654 0
 2002 0a2a 7B68     	 ldr r3,[r7,#4]
 2003 0a2c 93F98630 	 ldrsb r3,[r3,#134]
 2004 0a30 BB76     	 strb r3,[r7,#26]
 655:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 
 656:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	ind.options	= NWK_OPT_LLDN_ACK;
 2005              	 .loc 2 656 0
 2006 0a32 4FF48043 	 mov r3,#16384
 2007 0a36 7B82     	 strh r3,[r7,#18]
 657:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 
 658:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	return nwkIb.endpoint[APP_ACK_ENDPOINT](&ind);
 2008              	 .loc 2 658 0
 2009 0a38 054B     	 ldr r3,.L141
 2010 0a3a 9B69     	 ldr r3,[r3,#24]
 2011 0a3c 07F10C02 	 add r2,r7,#12
 2012 0a40 1046     	 mov r0,r2
 2013 0a42 9847     	 blx r3
 2014              	.LVL18:
 2015 0a44 0346     	 mov r3,r0
 2016              	.L140:
 659:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** }
 2017              	 .loc 2 659 0 discriminator 1
 2018 0a46 1846     	 mov r0,r3
 2019 0a48 2037     	 adds r7,r7,#32
 2020              	.LCFI70:
 2021              	 .cfi_def_cfa_offset 8
 2022 0a4a BD46     	 mov sp,r7
 2023              	.LCFI71:
 2024              	 .cfi_def_cfa_register 13
 2025              	 
 2026 0a4c 80BD     	 pop {r7,pc}
 2027              	.L142:
 2028 0a4e 00BF     	 .align 2
 2029              	.L141:
 2030 0a50 00000000 	 .word nwkIb
 2031              	 .cfi_endproc
 2032              	.LFE139:
 2034              	 .align 1
 2035              	 .syntax unified
 2036              	 .thumb
 2037              	 .thumb_func
 2038              	 .fpu softvfp
 2040              	nwkRxHandleIndication:
 2041              	.LFB140:
 660:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 
 661:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** /*************************************************************************//**
 662:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** *****************************************************************************/
 663:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** static void nwkRxHandleIndication(NwkFrame_t *frame)
 664:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** {
 2042              	 .loc 2 664 0
 2043              	 .cfi_startproc
 2044              	 
 2045              	 
 2046 0a54 80B5     	 push {r7,lr}
 2047              	.LCFI72:
 2048              	 .cfi_def_cfa_offset 8
 2049              	 .cfi_offset 7,-8
 2050              	 .cfi_offset 14,-4
 2051 0a56 84B0     	 sub sp,sp,#16
 2052              	.LCFI73:
 2053              	 .cfi_def_cfa_offset 24
 2054 0a58 00AF     	 add r7,sp,#0
 2055              	.LCFI74:
 2056              	 .cfi_def_cfa_register 7
 2057 0a5a 7860     	 str r0,[r7,#4]
 665:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	bool ack;
 666:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 
 667:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	nwkRxAckControl = 0;
 2058              	 .loc 2 667 0
 2059 0a5c 244B     	 ldr r3,.L149
 2060 0a5e 0022     	 movs r2,#0
 2061 0a60 1A70     	 strb r2,[r3]
 668:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	ack = nwkRxIndicateDataFrame(frame);
 2062              	 .loc 2 668 0
 2063 0a62 7868     	 ldr r0,[r7,#4]
 2064 0a64 FFF73AFE 	 bl nwkRxIndicateDataFrame
 2065 0a68 0346     	 mov r3,r0
 2066 0a6a FB73     	 strb r3,[r7,#15]
 669:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 
 670:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	if (0 == frame->header.nwkFcf.ackRequest) {
 2067              	 .loc 2 670 0
 2068 0a6c 7B68     	 ldr r3,[r7,#4]
 2069 0a6e DB7A     	 ldrb r3,[r3,#11]
 2070 0a70 03F00103 	 and r3,r3,#1
 2071 0a74 DBB2     	 uxtb r3,r3
 2072 0a76 002B     	 cmp r3,#0
 2073 0a78 01D1     	 bne .L144
 671:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 		ack = false;
 2074              	 .loc 2 671 0
 2075 0a7a 0023     	 movs r3,#0
 2076 0a7c FB73     	 strb r3,[r7,#15]
 2077              	.L144:
 672:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	}
 673:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 
 674:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	if (NWK_BROADCAST_ADDR == frame->header.macDstAddr &&
 2078              	 .loc 2 674 0
 2079 0a7e 7B68     	 ldr r3,[r7,#4]
 2080 0a80 B3F80730 	 ldrh r3,[r3,#7]
 2081 0a84 9BB2     	 uxth r3,r3
 2082 0a86 4FF6FF72 	 movw r2,#65535
 2083 0a8a 9342     	 cmp r3,r2
 2084 0a8c 10D1     	 bne .L145
 675:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 			nwkIb.addr == frame->header.nwkDstAddr &&
 2085              	 .loc 2 675 0 discriminator 1
 2086 0a8e 194B     	 ldr r3,.L149+4
 2087 0a90 1A88     	 ldrh r2,[r3]
 2088 0a92 7B68     	 ldr r3,[r7,#4]
 2089 0a94 B3F80F30 	 ldrh r3,[r3,#15]
 2090 0a98 9BB2     	 uxth r3,r3
 674:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 			nwkIb.addr == frame->header.nwkDstAddr &&
 2091              	 .loc 2 674 0 discriminator 1
 2092 0a9a 9A42     	 cmp r2,r3
 2093 0a9c 08D1     	 bne .L145
 676:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 			0 == frame->header.nwkFcf.multicast) {
 2094              	 .loc 2 676 0
 2095 0a9e 7B68     	 ldr r3,[r7,#4]
 2096 0aa0 DB7A     	 ldrb r3,[r3,#11]
 2097 0aa2 03F00803 	 and r3,r3,#8
 2098 0aa6 DBB2     	 uxtb r3,r3
 675:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 			nwkIb.addr == frame->header.nwkDstAddr &&
 2099              	 .loc 2 675 0
 2100 0aa8 002B     	 cmp r3,#0
 2101 0aaa 01D1     	 bne .L145
 677:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 		ack = true;
 2102              	 .loc 2 677 0
 2103 0aac 0123     	 movs r3,#1
 2104 0aae FB73     	 strb r3,[r7,#15]
 2105              	.L145:
 678:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	}
 679:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 
 680:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	if (NWK_BROADCAST_PANID == frame->header.macDstPanId) {
 2106              	 .loc 2 680 0
 2107 0ab0 7B68     	 ldr r3,[r7,#4]
 2108 0ab2 B3F80530 	 ldrh r3,[r3,#5]
 2109 0ab6 9BB2     	 uxth r3,r3
 2110 0ab8 4FF6FF72 	 movw r2,#65535
 2111 0abc 9342     	 cmp r3,r2
 2112 0abe 01D1     	 bne .L146
 681:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 		ack = false;
 2113              	 .loc 2 681 0
 2114 0ac0 0023     	 movs r3,#0
 2115 0ac2 FB73     	 strb r3,[r7,#15]
 2116              	.L146:
 682:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	}
 683:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 
 684:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	if (NWK_BROADCAST_ADDR == nwkIb.addr) {
 2117              	 .loc 2 684 0
 2118 0ac4 0B4B     	 ldr r3,.L149+4
 2119 0ac6 1B88     	 ldrh r3,[r3]
 2120 0ac8 4FF6FF72 	 movw r2,#65535
 2121 0acc 9342     	 cmp r3,r2
 2122 0ace 01D1     	 bne .L147
 685:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 		ack = false;
 2123              	 .loc 2 685 0
 2124 0ad0 0023     	 movs r3,#0
 2125 0ad2 FB73     	 strb r3,[r7,#15]
 2126              	.L147:
 686:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	}
 687:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 
 688:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	if (ack) {
 2127              	 .loc 2 688 0
 2128 0ad4 FB7B     	 ldrb r3,[r7,#15]
 2129 0ad6 002B     	 cmp r3,#0
 2130 0ad8 02D0     	 beq .L148
 689:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 		nwkRxSendAck(frame);
 2131              	 .loc 2 689 0
 2132 0ada 7868     	 ldr r0,[r7,#4]
 2133 0adc FFF786FB 	 bl nwkRxSendAck
 2134              	.L148:
 690:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	}
 691:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 
 692:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	frame->state = NWK_RX_STATE_FINISH;
 2135              	 .loc 2 692 0
 2136 0ae0 7B68     	 ldr r3,[r7,#4]
 2137 0ae2 2422     	 movs r2,#36
 2138 0ae4 1A70     	 strb r2,[r3]
 693:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** }
 2139              	 .loc 2 693 0
 2140 0ae6 00BF     	 nop
 2141 0ae8 1037     	 adds r7,r7,#16
 2142              	.LCFI75:
 2143              	 .cfi_def_cfa_offset 8
 2144 0aea BD46     	 mov sp,r7
 2145              	.LCFI76:
 2146              	 .cfi_def_cfa_register 13
 2147              	 
 2148 0aec 80BD     	 pop {r7,pc}
 2149              	.L150:
 2150 0aee 00BF     	 .align 2
 2151              	.L149:
 2152 0af0 00000000 	 .word nwkRxAckControl
 2153 0af4 00000000 	 .word nwkIb
 2154              	 .cfi_endproc
 2155              	.LFE140:
 2157              	 .align 1
 2158              	 .global nwkRxTaskHandler
 2159              	 .syntax unified
 2160              	 .thumb
 2161              	 .thumb_func
 2162              	 .fpu softvfp
 2164              	nwkRxTaskHandler:
 2165              	.LFB141:
 694:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 
 695:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** /*************************************************************************//**
 696:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** *  @brief Rx Module task handler
 697:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** *****************************************************************************/
 698:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** void nwkRxTaskHandler(void)
 699:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** {
 2166              	 .loc 2 699 0
 2167              	 .cfi_startproc
 2168              	 
 2169              	 
 2170 0af8 80B5     	 push {r7,lr}
 2171              	.LCFI77:
 2172              	 .cfi_def_cfa_offset 8
 2173              	 .cfi_offset 7,-8
 2174              	 .cfi_offset 14,-4
 2175 0afa 82B0     	 sub sp,sp,#8
 2176              	.LCFI78:
 2177              	 .cfi_def_cfa_offset 16
 2178 0afc 00AF     	 add r7,sp,#0
 2179              	.LCFI79:
 2180              	 .cfi_def_cfa_register 7
 700:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	NwkFrame_t *frame = NULL;
 2181              	 .loc 2 700 0
 2182 0afe 0023     	 movs r3,#0
 2183 0b00 7B60     	 str r3,[r7,#4]
 701:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 
 702:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	while (NULL != (frame = nwkFrameNext(frame))) {
 2184              	 .loc 2 702 0
 2185 0b02 35E0     	 b .L152
 2186              	.L161:
 703:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 		switch (frame->state) {
 2187              	 .loc 2 703 0
 2188 0b04 7B68     	 ldr r3,[r7,#4]
 2189 0b06 1B78     	 ldrb r3,[r3]
 2190 0b08 203B     	 subs r3,r3,#32
 2191 0b0a 082B     	 cmp r3,#8
 2192 0b0c 30D8     	 bhi .L152
 2193 0b0e 01A2     	 adr r2,.L154
 2194 0b10 52F823F0 	 ldr pc,[r2,r3,lsl#2]
 2195              	 .p2align 2
 2196              	.L154:
 2197 0b14 390B0000 	 .word .L153+1
 2198 0b18 710B0000 	 .word .L152+1
 2199 0b1c 410B0000 	 .word .L155+1
 2200 0b20 710B0000 	 .word .L152+1
 2201 0b24 490B0000 	 .word .L156+1
 2202 0b28 510B0000 	 .word .L157+1
 2203 0b2c 590B0000 	 .word .L158+1
 2204 0b30 610B0000 	 .word .L159+1
 2205 0b34 690B0000 	 .word .L160+1
 2206              	 .p2align 1
 2207              	.L153:
 704:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 		case NWK_RX_STATE_RECEIVED:
 705:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 		{
 706:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 			nwkRxHandleReceivedFrame(frame);
 2208              	 .loc 2 706 0
 2209 0b38 7868     	 ldr r0,[r7,#4]
 2210 0b3a FFF7A9FC 	 bl nwkRxHandleReceivedFrame
 707:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 		}
 708:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 		break;
 2211              	 .loc 2 708 0
 2212 0b3e 17E0     	 b .L152
 2213              	.L155:
 709:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 
 710:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** #ifdef NWK_ENABLE_SECURITY
 711:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 		case NWK_RX_STATE_DECRYPT:
 712:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 		{
 713:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 			nwkSecurityProcess(frame, false);
 714:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 		}
 715:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 		break;
 716:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** #endif
 717:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 
 718:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 		case NWK_RX_STATE_INDICATE:
 719:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 		{
 720:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 			nwkRxHandleIndication(frame);
 2214              	 .loc 2 720 0
 2215 0b40 7868     	 ldr r0,[r7,#4]
 2216 0b42 FFF787FF 	 bl nwkRxHandleIndication
 721:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 		}
 722:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 		break;
 2217              	 .loc 2 722 0
 2218 0b46 13E0     	 b .L152
 2219              	.L156:
 723:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 
 724:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** #ifdef NWK_ENABLE_ROUTING
 725:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 		case NWK_RX_STATE_ROUTE:
 726:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 		{
 727:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 			nwkRouteFrame(frame);
 728:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 		}
 729:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 		break;
 730:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** #endif
 731:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 
 732:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 		case NWK_RX_STATE_FINISH:
 733:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 		{
 734:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 			nwkFrameFree(frame);
 2220              	 .loc 2 734 0
 2221 0b48 7868     	 ldr r0,[r7,#4]
 2222 0b4a 0F4B     	 ldr r3,.L162
 2223 0b4c 9847     	 blx r3
 2224              	.LVL19:
 735:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 		}
 736:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 		break;
 2225              	 .loc 2 736 0
 2226 0b4e 0FE0     	 b .L152
 2227              	.L157:
 737:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 
 738:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 		case NWK_RX_STATE_BEACON:
 739:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 		{
 740:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 			nwkRxIndicateBeaconFrame(frame);
 2228              	 .loc 2 740 0
 2229 0b50 7868     	 ldr r0,[r7,#4]
 2230 0b52 FFF78FFE 	 bl nwkRxIndicateBeaconFrame
 741:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 		}
 742:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 		break;
 2231              	 .loc 2 742 0
 2232 0b56 0BE0     	 b .L152
 2233              	.L158:
 743:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 		
 744:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 		
 745:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 		case NWK_RX_STATE_LLBEACON:
 746:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 		{
 747:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 			nwkRxIndicateLLBeaconFrame(frame);
 2234              	 .loc 2 747 0
 2235 0b58 7868     	 ldr r0,[r7,#4]
 2236 0b5a FFF7D1FE 	 bl nwkRxIndicateLLBeaconFrame
 748:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 		}
 749:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 		break;
 2237              	 .loc 2 749 0
 2238 0b5e 07E0     	 b .L152
 2239              	.L159:
 750:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 		
 751:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 		case NWK_RX_STATE_LLCOMMAND:
 752:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 		{
 753:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 			nwkRxIndicateLLCommandFrame(frame);
 2240              	 .loc 2 753 0
 2241 0b60 7868     	 ldr r0,[r7,#4]
 2242 0b62 FFF703FF 	 bl nwkRxIndicateLLCommandFrame
 754:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 		}
 755:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 		break;
 2243              	 .loc 2 755 0
 2244 0b66 03E0     	 b .L152
 2245              	.L160:
 756:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 		
 757:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 		case NWK_RX_STATE_LLACKFRAME:
 758:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 		{
 759:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 			nwkRxIndicateLLACKFrame(frame);
 2246              	 .loc 2 759 0
 2247 0b68 7868     	 ldr r0,[r7,#4]
 2248 0b6a FFF739FF 	 bl nwkRxIndicateLLACKFrame
 760:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 		}
 761:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 		break;
 2249              	 .loc 2 761 0
 2250 0b6e 00BF     	 nop
 2251              	.L152:
 702:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 		switch (frame->state) {
 2252              	 .loc 2 702 0
 2253 0b70 7868     	 ldr r0,[r7,#4]
 2254 0b72 064B     	 ldr r3,.L162+4
 2255 0b74 9847     	 blx r3
 2256              	.LVL20:
 2257 0b76 7860     	 str r0,[r7,#4]
 2258 0b78 7B68     	 ldr r3,[r7,#4]
 2259 0b7a 002B     	 cmp r3,#0
 2260 0b7c C2D1     	 bne .L161
 762:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 		
 763:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 		}
 764:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** 	}
 765:../../../stack/LwMesh/TDMA/nwk/src/nwkRx.c **** }
 2261              	 .loc 2 765 0
 2262 0b7e 00BF     	 nop
 2263 0b80 0837     	 adds r7,r7,#8
 2264              	.LCFI80:
 2265              	 .cfi_def_cfa_offset 8
 2266 0b82 BD46     	 mov sp,r7
 2267              	.LCFI81:
 2268              	 .cfi_def_cfa_register 13
 2269              	 
 2270 0b84 80BD     	 pop {r7,pc}
 2271              	.L163:
 2272 0b86 00BF     	 .align 2
 2273              	.L162:
 2274 0b88 00000000 	 .word nwkFrameFree
 2275 0b8c 00000000 	 .word nwkFrameNext
 2276              	 .cfi_endproc
 2277              	.LFE141:
 2279              	.Letext0:
 2280              	 .file 3 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\arm\\arm-gnu-toolchain\\arm-none-eabi\\include\\machine\\_default_types.h"
 2281              	 .file 4 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\arm\\arm-gnu-toolchain\\arm-none-eabi\\include\\sys\\lock.h"
 2282              	 .file 5 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\arm\\arm-gnu-toolchain\\arm-none-eabi\\include\\sys\\_types.h"
 2283              	 .file 6 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\arm\\arm-gnu-toolchain\\lib\\gcc\\arm-none-eabi\\6.3.1\\include\\stddef.h"
 2284              	 .file 7 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\arm\\arm-gnu-toolchain\\arm-none-eabi\\include\\sys\\reent.h"
 2285              	 .file 8 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\arm\\arm-gnu-toolchain\\arm-none-eabi\\include\\stdlib.h"
 2286              	 .file 9 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\arm\\arm-gnu-toolchain\\arm-none-eabi\\include\\sys\\_stdint.h"
 2287              	 .file 10 "../../../stack/LwMesh/TDMA/phy/AT86RF233/inc/phy.h"
 2288              	 .file 11 "../../../platform/thirdparty/CMSIS/include/core_cm4.h"
 2289              	 .file 12 "../../../platform/sam/utils/cmsis/sam4l/source/templates/system_sam4l.h"
 2290              	 .file 13 "../../../platform/common/utils/interrupt/interrupt_sam_nvic.h"
 2291              	 .file 14 "../../../platform/sam/utils/compiler.h"
 2292              	 .file 15 "../../../platform/common/services/usb/usb_protocol.h"
 2293              	 .file 16 "../../../platform/common/services/usb/udc/udi.h"
 2294              	 .file 17 "../../../platform/common/services/usb/udc/udc_desc.h"
 2295              	 .file 18 "../../../platform/common/services/usb/udc/udd.h"
 2296              	 .file 19 "../../../platform/common/services/usb/class/cdc/device/udi_cdc.h"
 2297              	 .file 20 "../../../platform/common/utils/stdio/stdio_usb/stdio_usb.h"
 2298              	 .file 21 "../../../stack/LwMesh/TDMA/sys/inc/sysTimer.h"
 2299              	 .file 22 "../../../stack/LwMesh/TDMA/nwk/inc/nwkRx.h"
 2300              	 .file 23 "../../../stack/LwMesh/TDMA/nwk/inc/nwkDataReq.h"
 2301              	 .file 24 "../../../stack/LwMesh/TDMA/nwk/inc/nwk.h"
 2302              	 .file 25 "../../../stack/LwMesh/TDMA/nwk/inc/nwkCommand.h"
 2303              	 .file 26 "config/config.h"
 2304              	 .file 27 "../../../stack/LwMesh/TDMA/nwk/inc/nwkGroup.h"
 2305              	 .file 28 "../../../stack/LwMesh/TDMA/nwk/inc/nwkTx.h"
 2306              	 .file 29 "<built-in>"
DEFINED SYMBOLS
                            *ABS*:00000000 nwkRx.c
    {standard input}:16     .bss.cpu_irq_critical_section_counter:00000000 $d
    {standard input}:19     .bss.cpu_irq_critical_section_counter:00000000 cpu_irq_critical_section_counter
    {standard input}:24     .bss.cpu_irq_prev_interrupt_state:00000000 cpu_irq_prev_interrupt_state
    {standard input}:25     .bss.cpu_irq_prev_interrupt_state:00000000 $d
                            *COM*:00000001 n
    {standard input}:28     .bss.tTS:00000000 $d
    {standard input}:31     .bss.tTS:00000000 tTS
    {standard input}:34     .text:00000000 $t
    {standard input}:40     .text:00000000 nwkFramePayloadSize
    {standard input}:89     .bss.nwkRxDuplicateRejectionTable:00000000 $d
    {standard input}:92     .bss.nwkRxDuplicateRejectionTable:00000000 nwkRxDuplicateRejectionTable
    {standard input}:97     .bss.nwkRxAckControl:00000000 nwkRxAckControl
    {standard input}:98     .bss.nwkRxAckControl:00000000 $d
    {standard input}:100    .bss.nwkRxDuplicateRejectionTimer:00000000 $d
    {standard input}:103    .bss.nwkRxDuplicateRejectionTimer:00000000 nwkRxDuplicateRejectionTimer
    {standard input}:113    .text:0000002a nwkRxInit
    {standard input}:189    .text:00000078 $d
    {standard input}:648    .text:000002c8 nwkRxDuplicateRejectionTimerHandler
    {standard input}:958    .text:00000458 nwkRxSeriveDataInd
    {standard input}:197    .text:0000008c $t
    {standard input}:204    .text:0000008c PHY_DataInd
    {standard input}:456    .text:000001e0 $d
    {standard input}:462    .text:000001ec $t
    {standard input}:468    .text:000001ec nwkRxSendAck
    {standard input}:584    .text:00000298 $d
    {standard input}:591    .text:000002a8 $t
    {standard input}:598    .text:000002a8 NWK_SetAckControl
    {standard input}:638    .text:000002c4 $d
    {standard input}:642    .text:000002c8 $t
    {standard input}:745    .text:0000033c $d
    {standard input}:750    .text:00000344 $t
    {standard input}:756    .text:00000344 nwkRxRejectDuplicate
    {standard input}:946    .text:0000044c $d
    {standard input}:952    .text:00000458 $t
    {standard input}:1015   .text:0000048c $d
    {standard input}:1019   .text:00000490 $t
    {standard input}:1025   .text:00000490 nwkRxHandleReceivedFrame
    {standard input}:1363   .text:000006d0 $d
    {standard input}:1369   .text:000006dc $t
    {standard input}:1375   .text:000006dc nwkRxIndicateDataFrame
    {standard input}:1629   .text:00000870 $d
    {standard input}:1633   .text:00000874 $t
    {standard input}:1639   .text:00000874 nwkRxIndicateBeaconFrame
    {standard input}:1737   .text:000008fc $d
    {standard input}:1741   .text:00000900 $t
    {standard input}:1747   .text:00000900 nwkRxIndicateLLBeaconFrame
    {standard input}:1832   .text:00000968 $d
    {standard input}:1836   .text:0000096c $t
    {standard input}:1842   .text:0000096c nwkRxIndicateLLCommandFrame
    {standard input}:1931   .text:000009dc $d
    {standard input}:1935   .text:000009e0 $t
    {standard input}:1941   .text:000009e0 nwkRxIndicateLLACKFrame
    {standard input}:2030   .text:00000a50 $d
    {standard input}:2034   .text:00000a54 $t
    {standard input}:2040   .text:00000a54 nwkRxHandleIndication
    {standard input}:2152   .text:00000af0 $d
    {standard input}:2157   .text:00000af8 $t
    {standard input}:2164   .text:00000af8 nwkRxTaskHandler
    {standard input}:2197   .text:00000b14 $d
    {standard input}:2206   .text:00000b38 $t
    {standard input}:2274   .text:00000b88 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
NWK_OpenEndpoint
nwkFrameAlloc
nwkFrameAlloc_LLDN
memcpy
nwkFrameCommandInit
nwkTxFrame
SYS_TimerStart
nwkTxAckReceived
nwkIb
NWK_GroupIsMember
nwkTxBroadcastFrame
nwkFrameFree
nwkFrameNext
