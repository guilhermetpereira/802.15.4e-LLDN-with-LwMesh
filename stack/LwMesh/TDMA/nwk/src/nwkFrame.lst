   1              	 .cpu cortex-m4
   2              	 .eabi_attribute 20,1
   3              	 .eabi_attribute 21,1
   4              	 .eabi_attribute 23,3
   5              	 .eabi_attribute 24,1
   6              	 .eabi_attribute 25,1
   7              	 .eabi_attribute 26,1
   8              	 .eabi_attribute 30,6
   9              	 .eabi_attribute 34,1
  10              	 .eabi_attribute 18,4
  11              	 .file "nwkFrame.c"
  12              	 .text
  13              	.Ltext0:
  14              	 .cfi_sections .debug_frame
  15              	 .section .bss.cpu_irq_critical_section_counter,"aw",%nobits
  16              	 .align 2
  19              	cpu_irq_critical_section_counter:
  20 0000 00000000 	 .space 4
  21              	 .section .bss.cpu_irq_prev_interrupt_state,"aw",%nobits
  24              	cpu_irq_prev_interrupt_state:
  25 0000 00       	 .space 1
  26              	 .comm n,1,1
  27              	 .section .bss.tTS,"aw",%nobits
  28              	 .align 2
  31              	tTS:
  32 0000 00000000 	 .space 4
  33              	 .section .bss.nwkFrameFrames,"aw",%nobits
  34              	 .align 2
  37              	nwkFrameFrames:
  38 0000 00000000 	 .space 2820
  38      00000000 
  38      00000000 
  38      00000000 
  38      00000000 
  39              	 .text
  40              	 .align 1
  41              	 .global nwkFrameInit
  42              	 .syntax unified
  43              	 .thumb
  44              	 .thumb_func
  45              	 .fpu softvfp
  47              	nwkFrameInit:
  48              	.LFB127:
  49              	 .file 1 "../../../stack/LwMesh/TDMA/nwk/src/nwkFrame.c"
   1:../../../stack/LwMesh/TDMA/nwk/src/nwkFrame.c **** /**
   2:../../../stack/LwMesh/TDMA/nwk/src/nwkFrame.c ****  * \file nwkFrame.c
   3:../../../stack/LwMesh/TDMA/nwk/src/nwkFrame.c ****  *
   4:../../../stack/LwMesh/TDMA/nwk/src/nwkFrame.c ****  * \brief Frame buffers management implementation
   5:../../../stack/LwMesh/TDMA/nwk/src/nwkFrame.c ****  *
   6:../../../stack/LwMesh/TDMA/nwk/src/nwkFrame.c ****  * Copyright (C) 2014 Atmel Corporation. All rights reserved.
   7:../../../stack/LwMesh/TDMA/nwk/src/nwkFrame.c ****  *
   8:../../../stack/LwMesh/TDMA/nwk/src/nwkFrame.c ****  * \asf_license_start
   9:../../../stack/LwMesh/TDMA/nwk/src/nwkFrame.c ****  *
  10:../../../stack/LwMesh/TDMA/nwk/src/nwkFrame.c ****  * Redistribution and use in source and binary forms, with or without
  11:../../../stack/LwMesh/TDMA/nwk/src/nwkFrame.c ****  * modification, are permitted provided that the following conditions are met:
  12:../../../stack/LwMesh/TDMA/nwk/src/nwkFrame.c ****  *
  13:../../../stack/LwMesh/TDMA/nwk/src/nwkFrame.c ****  * 1. Redistributions of source code must retain the above copyright notice,
  14:../../../stack/LwMesh/TDMA/nwk/src/nwkFrame.c ****  *    this list of conditions and the following disclaimer.
  15:../../../stack/LwMesh/TDMA/nwk/src/nwkFrame.c ****  *
  16:../../../stack/LwMesh/TDMA/nwk/src/nwkFrame.c ****  * 2. Redistributions in binary form must reproduce the above copyright notice,
  17:../../../stack/LwMesh/TDMA/nwk/src/nwkFrame.c ****  *    this list of conditions and the following disclaimer in the documentation
  18:../../../stack/LwMesh/TDMA/nwk/src/nwkFrame.c ****  *    and/or other materials provided with the distribution.
  19:../../../stack/LwMesh/TDMA/nwk/src/nwkFrame.c ****  *
  20:../../../stack/LwMesh/TDMA/nwk/src/nwkFrame.c ****  * 3. The name of Atmel may not be used to endorse or promote products derived
  21:../../../stack/LwMesh/TDMA/nwk/src/nwkFrame.c ****  *    from this software without specific prior written permission.
  22:../../../stack/LwMesh/TDMA/nwk/src/nwkFrame.c ****  *
  23:../../../stack/LwMesh/TDMA/nwk/src/nwkFrame.c ****  * 4. This software may only be redistributed and used in connection with an
  24:../../../stack/LwMesh/TDMA/nwk/src/nwkFrame.c ****  *    Atmel microcontroller product.
  25:../../../stack/LwMesh/TDMA/nwk/src/nwkFrame.c ****  *
  26:../../../stack/LwMesh/TDMA/nwk/src/nwkFrame.c ****  * THIS SOFTWARE IS PROVIDED BY ATMEL "AS IS" AND ANY EXPRESS OR IMPLIED
  27:../../../stack/LwMesh/TDMA/nwk/src/nwkFrame.c ****  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
  28:../../../stack/LwMesh/TDMA/nwk/src/nwkFrame.c ****  * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE
  29:../../../stack/LwMesh/TDMA/nwk/src/nwkFrame.c ****  * EXPRESSLY AND SPECIFICALLY DISCLAIMED. IN NO EVENT SHALL ATMEL BE LIABLE FOR
  30:../../../stack/LwMesh/TDMA/nwk/src/nwkFrame.c ****  * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  31:../../../stack/LwMesh/TDMA/nwk/src/nwkFrame.c ****  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
  32:../../../stack/LwMesh/TDMA/nwk/src/nwkFrame.c ****  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
  33:../../../stack/LwMesh/TDMA/nwk/src/nwkFrame.c ****  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
  34:../../../stack/LwMesh/TDMA/nwk/src/nwkFrame.c ****  * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
  35:../../../stack/LwMesh/TDMA/nwk/src/nwkFrame.c ****  * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  36:../../../stack/LwMesh/TDMA/nwk/src/nwkFrame.c ****  * POSSIBILITY OF SUCH DAMAGE.
  37:../../../stack/LwMesh/TDMA/nwk/src/nwkFrame.c ****  *
  38:../../../stack/LwMesh/TDMA/nwk/src/nwkFrame.c ****  * \asf_license_stop
  39:../../../stack/LwMesh/TDMA/nwk/src/nwkFrame.c ****  *
  40:../../../stack/LwMesh/TDMA/nwk/src/nwkFrame.c ****  *
  41:../../../stack/LwMesh/TDMA/nwk/src/nwkFrame.c ****  */
  42:../../../stack/LwMesh/TDMA/nwk/src/nwkFrame.c **** 
  43:../../../stack/LwMesh/TDMA/nwk/src/nwkFrame.c **** /*
  44:../../../stack/LwMesh/TDMA/nwk/src/nwkFrame.c ****  * Copyright (c) 2014, Atmel Corporation All rights reserved.
  45:../../../stack/LwMesh/TDMA/nwk/src/nwkFrame.c ****  *
  46:../../../stack/LwMesh/TDMA/nwk/src/nwkFrame.c ****  * Licensed under Atmel's Limited License Agreement --> EULA.txt
  47:../../../stack/LwMesh/TDMA/nwk/src/nwkFrame.c ****  */
  48:../../../stack/LwMesh/TDMA/nwk/src/nwkFrame.c **** 
  49:../../../stack/LwMesh/TDMA/nwk/src/nwkFrame.c **** /*- Includes ---------------------------------------------------------------*/
  50:../../../stack/LwMesh/TDMA/nwk/src/nwkFrame.c **** #include <stdlib.h>
  51:../../../stack/LwMesh/TDMA/nwk/src/nwkFrame.c **** #include <stdint.h>
  52:../../../stack/LwMesh/TDMA/nwk/src/nwkFrame.c **** #include <stdbool.h>
  53:../../../stack/LwMesh/TDMA/nwk/src/nwkFrame.c **** #include <string.h>
  54:../../../stack/LwMesh/TDMA/nwk/src/nwkFrame.c **** #include "sysConfig.h"
  55:../../../stack/LwMesh/TDMA/nwk/src/nwkFrame.c **** #include "nwk.h"
  56:../../../stack/LwMesh/TDMA/nwk/src/nwkFrame.c **** #include "nwkFrame.h"
  57:../../../stack/LwMesh/TDMA/nwk/src/nwkFrame.c **** 
  58:../../../stack/LwMesh/TDMA/nwk/src/nwkFrame.c **** /*- Types ------------------------------------------------------------------*/
  59:../../../stack/LwMesh/TDMA/nwk/src/nwkFrame.c **** enum {
  60:../../../stack/LwMesh/TDMA/nwk/src/nwkFrame.c **** 	NWK_FRAME_STATE_FREE = 0x00,
  61:../../../stack/LwMesh/TDMA/nwk/src/nwkFrame.c **** };
  62:../../../stack/LwMesh/TDMA/nwk/src/nwkFrame.c **** 
  63:../../../stack/LwMesh/TDMA/nwk/src/nwkFrame.c **** /*- Variables --------------------------------------------------------------*/
  64:../../../stack/LwMesh/TDMA/nwk/src/nwkFrame.c **** static NwkFrame_t nwkFrameFrames[NWK_BUFFERS_AMOUNT];
  65:../../../stack/LwMesh/TDMA/nwk/src/nwkFrame.c **** 
  66:../../../stack/LwMesh/TDMA/nwk/src/nwkFrame.c **** /*- Implementations --------------------------------------------------------*/
  67:../../../stack/LwMesh/TDMA/nwk/src/nwkFrame.c **** 
  68:../../../stack/LwMesh/TDMA/nwk/src/nwkFrame.c **** /*************************************************************************//**
  69:../../../stack/LwMesh/TDMA/nwk/src/nwkFrame.c **** *  @brief Initializes the Frame module
  70:../../../stack/LwMesh/TDMA/nwk/src/nwkFrame.c **** *****************************************************************************/
  71:../../../stack/LwMesh/TDMA/nwk/src/nwkFrame.c **** void nwkFrameInit(void)
  72:../../../stack/LwMesh/TDMA/nwk/src/nwkFrame.c **** {
  50              	 .loc 1 72 0
  51              	 .cfi_startproc
  52              	 
  53              	 
  54              	 
  55 0000 80B4     	 push {r7}
  56              	.LCFI0:
  57              	 .cfi_def_cfa_offset 4
  58              	 .cfi_offset 7,-4
  59 0002 83B0     	 sub sp,sp,#12
  60              	.LCFI1:
  61              	 .cfi_def_cfa_offset 16
  62 0004 00AF     	 add r7,sp,#0
  63              	.LCFI2:
  64              	 .cfi_def_cfa_register 7
  65              	.LBB2:
  73:../../../stack/LwMesh/TDMA/nwk/src/nwkFrame.c **** 	for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++) {
  66              	 .loc 1 73 0
  67 0006 0023     	 movs r3,#0
  68 0008 FB71     	 strb r3,[r7,#7]
  69 000a 0AE0     	 b .L2
  70              	.L3:
  74:../../../stack/LwMesh/TDMA/nwk/src/nwkFrame.c **** 		nwkFrameFrames[i].state = NWK_FRAME_STATE_FREE;
  71              	 .loc 1 74 0 discriminator 3
  72 000c FB79     	 ldrb r3,[r7,#7]
  73 000e 094A     	 ldr r2,.L4
  74 0010 8D21     	 movs r1,#141
  75 0012 01FB03F3 	 mul r3,r1,r3
  76 0016 1344     	 add r3,r3,r2
  77 0018 0022     	 movs r2,#0
  78 001a 1A70     	 strb r2,[r3]
  73:../../../stack/LwMesh/TDMA/nwk/src/nwkFrame.c **** 	for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++) {
  79              	 .loc 1 73 0 discriminator 3
  80 001c FB79     	 ldrb r3,[r7,#7]
  81 001e 0133     	 adds r3,r3,#1
  82 0020 FB71     	 strb r3,[r7,#7]
  83              	.L2:
  73:../../../stack/LwMesh/TDMA/nwk/src/nwkFrame.c **** 	for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++) {
  84              	 .loc 1 73 0 is_stmt 0 discriminator 1
  85 0022 FB79     	 ldrb r3,[r7,#7]
  86 0024 132B     	 cmp r3,#19
  87 0026 F1D9     	 bls .L3
  88              	.LBE2:
  75:../../../stack/LwMesh/TDMA/nwk/src/nwkFrame.c **** 	}
  76:../../../stack/LwMesh/TDMA/nwk/src/nwkFrame.c **** }
  89              	 .loc 1 76 0 is_stmt 1
  90 0028 00BF     	 nop
  91 002a 0C37     	 adds r7,r7,#12
  92              	.LCFI3:
  93              	 .cfi_def_cfa_offset 4
  94 002c BD46     	 mov sp,r7
  95              	.LCFI4:
  96              	 .cfi_def_cfa_register 13
  97              	 
  98 002e 80BC     	 pop {r7}
  99              	.LCFI5:
 100              	 .cfi_restore 7
 101              	 .cfi_def_cfa_offset 0
 102 0030 7047     	 bx lr
 103              	.L5:
 104 0032 00BF     	 .align 2
 105              	.L4:
 106 0034 00000000 	 .word nwkFrameFrames
 107              	 .cfi_endproc
 108              	.LFE127:
 110              	 .align 1
 111              	 .global nwkFrameAlloc
 112              	 .syntax unified
 113              	 .thumb
 114              	 .thumb_func
 115              	 .fpu softvfp
 117              	nwkFrameAlloc:
 118              	.LFB128:
  77:../../../stack/LwMesh/TDMA/nwk/src/nwkFrame.c **** 
  78:../../../stack/LwMesh/TDMA/nwk/src/nwkFrame.c **** /*************************************************************************//**
  79:../../../stack/LwMesh/TDMA/nwk/src/nwkFrame.c **** *  @brief Allocates an empty frame from the buffer pool
  80:../../../stack/LwMesh/TDMA/nwk/src/nwkFrame.c **** *  @return Pointer to the frame or @c NULL if there are no free frames
  81:../../../stack/LwMesh/TDMA/nwk/src/nwkFrame.c **** *****************************************************************************/
  82:../../../stack/LwMesh/TDMA/nwk/src/nwkFrame.c **** NwkFrame_t *nwkFrameAlloc(void)
  83:../../../stack/LwMesh/TDMA/nwk/src/nwkFrame.c **** {
 119              	 .loc 1 83 0
 120              	 .cfi_startproc
 121              	 
 122              	 
 123 0038 80B5     	 push {r7,lr}
 124              	.LCFI6:
 125              	 .cfi_def_cfa_offset 8
 126              	 .cfi_offset 7,-8
 127              	 .cfi_offset 14,-4
 128 003a 82B0     	 sub sp,sp,#8
 129              	.LCFI7:
 130              	 .cfi_def_cfa_offset 16
 131 003c 00AF     	 add r7,sp,#0
 132              	.LCFI8:
 133              	 .cfi_def_cfa_register 7
 134              	.LBB3:
  84:../../../stack/LwMesh/TDMA/nwk/src/nwkFrame.c **** 	for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++) {
 135              	 .loc 1 84 0
 136 003e 0023     	 movs r3,#0
 137 0040 FB71     	 strb r3,[r7,#7]
 138 0042 3EE0     	 b .L7
 139              	.L10:
  85:../../../stack/LwMesh/TDMA/nwk/src/nwkFrame.c **** 		if (NWK_FRAME_STATE_FREE == nwkFrameFrames[i].state) {
 140              	 .loc 1 85 0
 141 0044 FB79     	 ldrb r3,[r7,#7]
 142 0046 234A     	 ldr r2,.L11
 143 0048 8D21     	 movs r1,#141
 144 004a 01FB03F3 	 mul r3,r1,r3
 145 004e 1344     	 add r3,r3,r2
 146 0050 1B78     	 ldrb r3,[r3]
 147 0052 002B     	 cmp r3,#0
 148 0054 32D1     	 bne .L8
  86:../../../stack/LwMesh/TDMA/nwk/src/nwkFrame.c **** 			memset(&nwkFrameFrames[i], 0, sizeof(NwkFrame_t));
 149              	 .loc 1 86 0
 150 0056 FB79     	 ldrb r3,[r7,#7]
 151 0058 8D22     	 movs r2,#141
 152 005a 02FB03F3 	 mul r3,r2,r3
 153 005e 1D4A     	 ldr r2,.L11
 154 0060 1344     	 add r3,r3,r2
 155 0062 8D22     	 movs r2,#141
 156 0064 0021     	 movs r1,#0
 157 0066 1846     	 mov r0,r3
 158 0068 1B4B     	 ldr r3,.L11+4
 159 006a 9847     	 blx r3
 160              	.LVL0:
  87:../../../stack/LwMesh/TDMA/nwk/src/nwkFrame.c **** 			nwkFrameFrames[i].size = 0;
 161              	 .loc 1 87 0
 162 006c FB79     	 ldrb r3,[r7,#7]
 163 006e 194A     	 ldr r2,.L11
 164 0070 8D21     	 movs r1,#141
 165 0072 01FB03F3 	 mul r3,r1,r3
 166 0076 1344     	 add r3,r3,r2
 167 0078 0133     	 adds r3,r3,#1
 168 007a 0022     	 movs r2,#0
 169 007c 1A70     	 strb r2,[r3]
  88:../../../stack/LwMesh/TDMA/nwk/src/nwkFrame.c **** 			nwkFrameFrames[i].payload = nwkFrameFrames[i].data;
 170              	 .loc 1 88 0
 171 007e FB79     	 ldrb r3,[r7,#7]
 172 0080 FA79     	 ldrb r2,[r7,#7]
 173 0082 8D21     	 movs r1,#141
 174 0084 01FB02F2 	 mul r2,r1,r2
 175 0088 1249     	 ldr r1,.L11
 176 008a 0A44     	 add r2,r2,r1
 177 008c 0232     	 adds r2,r2,#2
 178 008e 1149     	 ldr r1,.L11
 179 0090 8D20     	 movs r0,#141
 180 0092 00FB03F3 	 mul r3,r0,r3
 181 0096 0B44     	 add r3,r3,r1
 182 0098 8033     	 adds r3,r3,#128
 183 009a C3F80120 	 str r2,[r3,#1]
  89:../../../stack/LwMesh/TDMA/nwk/src/nwkFrame.c **** 			nwkIb.lock++;
 184              	 .loc 1 89 0
 185 009e 0F4B     	 ldr r3,.L11+8
 186 00a0 B3F84830 	 ldrh r3,[r3,#72]
 187 00a4 0133     	 adds r3,r3,#1
 188 00a6 9AB2     	 uxth r2,r3
 189 00a8 0C4B     	 ldr r3,.L11+8
 190 00aa A3F84820 	 strh r2,[r3,#72]
  90:../../../stack/LwMesh/TDMA/nwk/src/nwkFrame.c **** 			return &nwkFrameFrames[i];
 191              	 .loc 1 90 0
 192 00ae FB79     	 ldrb r3,[r7,#7]
 193 00b0 8D22     	 movs r2,#141
 194 00b2 02FB03F3 	 mul r3,r2,r3
 195 00b6 074A     	 ldr r2,.L11
 196 00b8 1344     	 add r3,r3,r2
 197 00ba 06E0     	 b .L9
 198              	.L8:
  84:../../../stack/LwMesh/TDMA/nwk/src/nwkFrame.c **** 		if (NWK_FRAME_STATE_FREE == nwkFrameFrames[i].state) {
 199              	 .loc 1 84 0 discriminator 2
 200 00bc FB79     	 ldrb r3,[r7,#7]
 201 00be 0133     	 adds r3,r3,#1
 202 00c0 FB71     	 strb r3,[r7,#7]
 203              	.L7:
  84:../../../stack/LwMesh/TDMA/nwk/src/nwkFrame.c **** 		if (NWK_FRAME_STATE_FREE == nwkFrameFrames[i].state) {
 204              	 .loc 1 84 0 is_stmt 0 discriminator 1
 205 00c2 FB79     	 ldrb r3,[r7,#7]
 206 00c4 132B     	 cmp r3,#19
 207 00c6 BDD9     	 bls .L10
 208              	.LBE3:
  91:../../../stack/LwMesh/TDMA/nwk/src/nwkFrame.c **** 		}
  92:../../../stack/LwMesh/TDMA/nwk/src/nwkFrame.c **** 	}
  93:../../../stack/LwMesh/TDMA/nwk/src/nwkFrame.c **** 	return NULL;
 209              	 .loc 1 93 0 is_stmt 1
 210 00c8 0023     	 movs r3,#0
 211              	.L9:
  94:../../../stack/LwMesh/TDMA/nwk/src/nwkFrame.c **** }
 212              	 .loc 1 94 0
 213 00ca 1846     	 mov r0,r3
 214 00cc 0837     	 adds r7,r7,#8
 215              	.LCFI9:
 216              	 .cfi_def_cfa_offset 8
 217 00ce BD46     	 mov sp,r7
 218              	.LCFI10:
 219              	 .cfi_def_cfa_register 13
 220              	 
 221 00d0 80BD     	 pop {r7,pc}
 222              	.L12:
 223 00d2 00BF     	 .align 2
 224              	.L11:
 225 00d4 00000000 	 .word nwkFrameFrames
 226 00d8 00000000 	 .word memset
 227 00dc 00000000 	 .word nwkIb
 228              	 .cfi_endproc
 229              	.LFE128:
 231              	 .align 1
 232              	 .global nwkFrameAlloc_LLDN
 233              	 .syntax unified
 234              	 .thumb
 235              	 .thumb_func
 236              	 .fpu softvfp
 238              	nwkFrameAlloc_LLDN:
 239              	.LFB129:
  95:../../../stack/LwMesh/TDMA/nwk/src/nwkFrame.c **** 
  96:../../../stack/LwMesh/TDMA/nwk/src/nwkFrame.c **** /* Optimized allocation for lldn */
  97:../../../stack/LwMesh/TDMA/nwk/src/nwkFrame.c **** NwkFrame_t *nwkFrameAlloc_LLDN(bool beacon_frame)
  98:../../../stack/LwMesh/TDMA/nwk/src/nwkFrame.c **** {
 240              	 .loc 1 98 0
 241              	 .cfi_startproc
 242              	 
 243              	 
 244 00e0 90B5     	 push {r4,r7,lr}
 245              	.LCFI11:
 246              	 .cfi_def_cfa_offset 12
 247              	 .cfi_offset 4,-12
 248              	 .cfi_offset 7,-8
 249              	 .cfi_offset 14,-4
 250 00e2 85B0     	 sub sp,sp,#20
 251              	.LCFI12:
 252              	 .cfi_def_cfa_offset 32
 253 00e4 00AF     	 add r7,sp,#0
 254              	.LCFI13:
 255              	 .cfi_def_cfa_register 7
 256 00e6 0346     	 mov r3,r0
 257 00e8 FB71     	 strb r3,[r7,#7]
 258              	.LBB4:
  99:../../../stack/LwMesh/TDMA/nwk/src/nwkFrame.c **** 	for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++) {
 259              	 .loc 1 99 0
 260 00ea 0023     	 movs r3,#0
 261 00ec FB73     	 strb r3,[r7,#15]
 262 00ee 54E0     	 b .L14
 263              	.L19:
 100:../../../stack/LwMesh/TDMA/nwk/src/nwkFrame.c **** 		if (NWK_FRAME_STATE_FREE == nwkFrameFrames[i].state) {
 264              	 .loc 1 100 0
 265 00f0 FB7B     	 ldrb r3,[r7,#15]
 266 00f2 2E4A     	 ldr r2,.L20
 267 00f4 8D21     	 movs r1,#141
 268 00f6 01FB03F3 	 mul r3,r1,r3
 269 00fa 1344     	 add r3,r3,r2
 270 00fc 1B78     	 ldrb r3,[r3]
 271 00fe 002B     	 cmp r3,#0
 272 0100 48D1     	 bne .L15
 101:../../../stack/LwMesh/TDMA/nwk/src/nwkFrame.c **** 			// clear memory of previous frame
 102:../../../stack/LwMesh/TDMA/nwk/src/nwkFrame.c **** 			memset(&nwkFrameFrames[i], 0, sizeof(NwkFrame_t));
 273              	 .loc 1 102 0
 274 0102 FB7B     	 ldrb r3,[r7,#15]
 275 0104 8D22     	 movs r2,#141
 276 0106 02FB03F3 	 mul r3,r2,r3
 277 010a 284A     	 ldr r2,.L20
 278 010c 1344     	 add r3,r3,r2
 279 010e 8D22     	 movs r2,#141
 280 0110 0021     	 movs r1,#0
 281 0112 1846     	 mov r0,r3
 282 0114 264B     	 ldr r3,.L20+4
 283 0116 9847     	 blx r3
 284              	.LVL1:
 103:../../../stack/LwMesh/TDMA/nwk/src/nwkFrame.c **** 			// store in size initial size of frame, only it's MHR structure
 104:../../../stack/LwMesh/TDMA/nwk/src/nwkFrame.c **** 			if(beacon_frame)
 285              	 .loc 1 104 0
 286 0118 FB79     	 ldrb r3,[r7,#7]
 287 011a 002B     	 cmp r3,#0
 288 011c 09D0     	 beq .L16
 105:../../../stack/LwMesh/TDMA/nwk/src/nwkFrame.c **** 			{
 106:../../../stack/LwMesh/TDMA/nwk/src/nwkFrame.c **** 				nwkFrameFrames[i].size = sizeof(NwkFrameBeaconHeaderLLDN_t);
 289              	 .loc 1 106 0
 290 011e FB7B     	 ldrb r3,[r7,#15]
 291 0120 224A     	 ldr r2,.L20
 292 0122 8D21     	 movs r1,#141
 293 0124 01FB03F3 	 mul r3,r1,r3
 294 0128 1344     	 add r3,r3,r2
 295 012a 0133     	 adds r3,r3,#1
 296 012c 0722     	 movs r2,#7
 297 012e 1A70     	 strb r2,[r3]
 298 0130 08E0     	 b .L17
 299              	.L16:
 107:../../../stack/LwMesh/TDMA/nwk/src/nwkFrame.c **** 			}
 108:../../../stack/LwMesh/TDMA/nwk/src/nwkFrame.c **** 			else
 109:../../../stack/LwMesh/TDMA/nwk/src/nwkFrame.c **** 			{
 110:../../../stack/LwMesh/TDMA/nwk/src/nwkFrame.c **** 				// data, mac command and group ack share the same MHR structure
 111:../../../stack/LwMesh/TDMA/nwk/src/nwkFrame.c **** 				nwkFrameFrames[i].size = sizeof(NwkFrameGeneralHeaderLLDN_t);
 300              	 .loc 1 111 0
 301 0132 FB7B     	 ldrb r3,[r7,#15]
 302 0134 1D4A     	 ldr r2,.L20
 303 0136 8D21     	 movs r1,#141
 304 0138 01FB03F3 	 mul r3,r1,r3
 305 013c 1344     	 add r3,r3,r2
 306 013e 0133     	 adds r3,r3,#1
 307 0140 0322     	 movs r2,#3
 308 0142 1A70     	 strb r2,[r3]
 309              	.L17:
 112:../../../stack/LwMesh/TDMA/nwk/src/nwkFrame.c **** 			}
 113:../../../stack/LwMesh/TDMA/nwk/src/nwkFrame.c **** 			// offset payload to end of MHR structure
 114:../../../stack/LwMesh/TDMA/nwk/src/nwkFrame.c **** 			nwkFrameFrames[i].payload = nwkFrameFrames[i].data
 310              	 .loc 1 114 0
 311 0144 FB7B     	 ldrb r3,[r7,#15]
 312 0146 FA7B     	 ldrb r2,[r7,#15]
 313 0148 8D21     	 movs r1,#141
 314 014a 01FB02F2 	 mul r2,r1,r2
 315 014e 1749     	 ldr r1,.L20
 316 0150 0A44     	 add r2,r2,r1
 317 0152 0232     	 adds r2,r2,#2
 115:../../../stack/LwMesh/TDMA/nwk/src/nwkFrame.c **** 							+ nwkFrameFrames[i].size;
 318              	 .loc 1 115 0
 319 0154 F97B     	 ldrb r1,[r7,#15]
 320 0156 1548     	 ldr r0,.L20
 321 0158 8D24     	 movs r4,#141
 322 015a 04FB01F1 	 mul r1,r4,r1
 323 015e 0144     	 add r1,r1,r0
 324 0160 0131     	 adds r1,r1,#1
 325 0162 0978     	 ldrb r1,[r1]
 326 0164 0A44     	 add r2,r2,r1
 114:../../../stack/LwMesh/TDMA/nwk/src/nwkFrame.c **** 							+ nwkFrameFrames[i].size;
 327              	 .loc 1 114 0
 328 0166 1149     	 ldr r1,.L20
 329 0168 8D20     	 movs r0,#141
 330 016a 00FB03F3 	 mul r3,r0,r3
 331 016e 0B44     	 add r3,r3,r1
 332 0170 8033     	 adds r3,r3,#128
 333 0172 C3F80120 	 str r2,[r3,#1]
 116:../../../stack/LwMesh/TDMA/nwk/src/nwkFrame.c **** 
 117:../../../stack/LwMesh/TDMA/nwk/src/nwkFrame.c **** 			nwkIb.lock++;
 334              	 .loc 1 117 0
 335 0176 0F4B     	 ldr r3,.L20+8
 336 0178 B3F84830 	 ldrh r3,[r3,#72]
 337 017c 0133     	 adds r3,r3,#1
 338 017e 9AB2     	 uxth r2,r3
 339 0180 0C4B     	 ldr r3,.L20+8
 340 0182 A3F84820 	 strh r2,[r3,#72]
 118:../../../stack/LwMesh/TDMA/nwk/src/nwkFrame.c **** 			return &nwkFrameFrames[i];
 341              	 .loc 1 118 0
 342 0186 FB7B     	 ldrb r3,[r7,#15]
 343 0188 8D22     	 movs r2,#141
 344 018a 02FB03F3 	 mul r3,r2,r3
 345 018e 074A     	 ldr r2,.L20
 346 0190 1344     	 add r3,r3,r2
 347 0192 06E0     	 b .L18
 348              	.L15:
  99:../../../stack/LwMesh/TDMA/nwk/src/nwkFrame.c **** 		if (NWK_FRAME_STATE_FREE == nwkFrameFrames[i].state) {
 349              	 .loc 1 99 0 discriminator 2
 350 0194 FB7B     	 ldrb r3,[r7,#15]
 351 0196 0133     	 adds r3,r3,#1
 352 0198 FB73     	 strb r3,[r7,#15]
 353              	.L14:
  99:../../../stack/LwMesh/TDMA/nwk/src/nwkFrame.c **** 		if (NWK_FRAME_STATE_FREE == nwkFrameFrames[i].state) {
 354              	 .loc 1 99 0 is_stmt 0 discriminator 1
 355 019a FB7B     	 ldrb r3,[r7,#15]
 356 019c 132B     	 cmp r3,#19
 357 019e A7D9     	 bls .L19
 358              	.LBE4:
 119:../../../stack/LwMesh/TDMA/nwk/src/nwkFrame.c **** 		}
 120:../../../stack/LwMesh/TDMA/nwk/src/nwkFrame.c **** 	}
 121:../../../stack/LwMesh/TDMA/nwk/src/nwkFrame.c **** 	return NULL;
 359              	 .loc 1 121 0 is_stmt 1
 360 01a0 0023     	 movs r3,#0
 361              	.L18:
 122:../../../stack/LwMesh/TDMA/nwk/src/nwkFrame.c **** }
 362              	 .loc 1 122 0
 363 01a2 1846     	 mov r0,r3
 364 01a4 1437     	 adds r7,r7,#20
 365              	.LCFI14:
 366              	 .cfi_def_cfa_offset 12
 367 01a6 BD46     	 mov sp,r7
 368              	.LCFI15:
 369              	 .cfi_def_cfa_register 13
 370              	 
 371 01a8 90BD     	 pop {r4,r7,pc}
 372              	.L21:
 373 01aa 00BF     	 .align 2
 374              	.L20:
 375 01ac 00000000 	 .word nwkFrameFrames
 376 01b0 00000000 	 .word memset
 377 01b4 00000000 	 .word nwkIb
 378              	 .cfi_endproc
 379              	.LFE129:
 381              	 .align 1
 382              	 .global nwkFrameFree
 383              	 .syntax unified
 384              	 .thumb
 385              	 .thumb_func
 386              	 .fpu softvfp
 388              	nwkFrameFree:
 389              	.LFB130:
 123:../../../stack/LwMesh/TDMA/nwk/src/nwkFrame.c **** 
 124:../../../stack/LwMesh/TDMA/nwk/src/nwkFrame.c **** 
 125:../../../stack/LwMesh/TDMA/nwk/src/nwkFrame.c **** /*************************************************************************//**
 126:../../../stack/LwMesh/TDMA/nwk/src/nwkFrame.c **** *  @brief Frees a @a frame and returns it to the buffer pool
 127:../../../stack/LwMesh/TDMA/nwk/src/nwkFrame.c **** *  @param[in] frame Pointer to the frame to be freed
 128:../../../stack/LwMesh/TDMA/nwk/src/nwkFrame.c **** *****************************************************************************/
 129:../../../stack/LwMesh/TDMA/nwk/src/nwkFrame.c **** void nwkFrameFree(NwkFrame_t *frame)
 130:../../../stack/LwMesh/TDMA/nwk/src/nwkFrame.c **** {
 390              	 .loc 1 130 0
 391              	 .cfi_startproc
 392              	 
 393              	 
 394              	 
 395 01b8 80B4     	 push {r7}
 396              	.LCFI16:
 397              	 .cfi_def_cfa_offset 4
 398              	 .cfi_offset 7,-4
 399 01ba 83B0     	 sub sp,sp,#12
 400              	.LCFI17:
 401              	 .cfi_def_cfa_offset 16
 402 01bc 00AF     	 add r7,sp,#0
 403              	.LCFI18:
 404              	 .cfi_def_cfa_register 7
 405 01be 7860     	 str r0,[r7,#4]
 131:../../../stack/LwMesh/TDMA/nwk/src/nwkFrame.c **** 	frame->state = NWK_FRAME_STATE_FREE;
 406              	 .loc 1 131 0
 407 01c0 7B68     	 ldr r3,[r7,#4]
 408 01c2 0022     	 movs r2,#0
 409 01c4 1A70     	 strb r2,[r3]
 132:../../../stack/LwMesh/TDMA/nwk/src/nwkFrame.c **** 	nwkIb.lock--;
 410              	 .loc 1 132 0
 411 01c6 064B     	 ldr r3,.L23
 412 01c8 B3F84830 	 ldrh r3,[r3,#72]
 413 01cc 013B     	 subs r3,r3,#1
 414 01ce 9AB2     	 uxth r2,r3
 415 01d0 034B     	 ldr r3,.L23
 416 01d2 A3F84820 	 strh r2,[r3,#72]
 133:../../../stack/LwMesh/TDMA/nwk/src/nwkFrame.c **** }
 417              	 .loc 1 133 0
 418 01d6 00BF     	 nop
 419 01d8 0C37     	 adds r7,r7,#12
 420              	.LCFI19:
 421              	 .cfi_def_cfa_offset 4
 422 01da BD46     	 mov sp,r7
 423              	.LCFI20:
 424              	 .cfi_def_cfa_register 13
 425              	 
 426 01dc 80BC     	 pop {r7}
 427              	.LCFI21:
 428              	 .cfi_restore 7
 429              	 .cfi_def_cfa_offset 0
 430 01de 7047     	 bx lr
 431              	.L24:
 432              	 .align 2
 433              	.L23:
 434 01e0 00000000 	 .word nwkIb
 435              	 .cfi_endproc
 436              	.LFE130:
 438              	 .align 1
 439              	 .global nwkFrameNext
 440              	 .syntax unified
 441              	 .thumb
 442              	 .thumb_func
 443              	 .fpu softvfp
 445              	nwkFrameNext:
 446              	.LFB131:
 134:../../../stack/LwMesh/TDMA/nwk/src/nwkFrame.c **** 
 135:../../../stack/LwMesh/TDMA/nwk/src/nwkFrame.c **** /*************************************************************************//**
 136:../../../stack/LwMesh/TDMA/nwk/src/nwkFrame.c **** *  @brief Cycles through the allocated frames starting from the specified @a
 137:../../../stack/LwMesh/TDMA/nwk/src/nwkFrame.c **** * frame
 138:../../../stack/LwMesh/TDMA/nwk/src/nwkFrame.c **** *  @param[in] frame Pointer to the current frame or @c NULL for the first frame
 139:../../../stack/LwMesh/TDMA/nwk/src/nwkFrame.c **** *  @return Next allocated frame or @c NULL if there are no more frames
 140:../../../stack/LwMesh/TDMA/nwk/src/nwkFrame.c **** *****************************************************************************/
 141:../../../stack/LwMesh/TDMA/nwk/src/nwkFrame.c **** NwkFrame_t *nwkFrameNext(NwkFrame_t *frame)
 142:../../../stack/LwMesh/TDMA/nwk/src/nwkFrame.c **** {
 447              	 .loc 1 142 0
 448              	 .cfi_startproc
 449              	 
 450              	 
 451              	 
 452 01e4 80B4     	 push {r7}
 453              	.LCFI22:
 454              	 .cfi_def_cfa_offset 4
 455              	 .cfi_offset 7,-4
 456 01e6 83B0     	 sub sp,sp,#12
 457              	.LCFI23:
 458              	 .cfi_def_cfa_offset 16
 459 01e8 00AF     	 add r7,sp,#0
 460              	.LCFI24:
 461              	 .cfi_def_cfa_register 7
 462 01ea 7860     	 str r0,[r7,#4]
 143:../../../stack/LwMesh/TDMA/nwk/src/nwkFrame.c **** 	if (NULL == frame) {
 463              	 .loc 1 143 0
 464 01ec 7B68     	 ldr r3,[r7,#4]
 465 01ee 002B     	 cmp r3,#0
 466 01f0 02D1     	 bne .L26
 144:../../../stack/LwMesh/TDMA/nwk/src/nwkFrame.c **** 		frame = nwkFrameFrames;
 467              	 .loc 1 144 0
 468 01f2 0D4B     	 ldr r3,.L32
 469 01f4 7B60     	 str r3,[r7,#4]
 470 01f6 0CE0     	 b .L28
 471              	.L26:
 145:../../../stack/LwMesh/TDMA/nwk/src/nwkFrame.c **** 	} else {
 146:../../../stack/LwMesh/TDMA/nwk/src/nwkFrame.c **** 		frame++;
 472              	 .loc 1 146 0
 473 01f8 7B68     	 ldr r3,[r7,#4]
 474 01fa 8D33     	 adds r3,r3,#141
 475 01fc 7B60     	 str r3,[r7,#4]
 147:../../../stack/LwMesh/TDMA/nwk/src/nwkFrame.c **** 	}
 148:../../../stack/LwMesh/TDMA/nwk/src/nwkFrame.c **** 
 149:../../../stack/LwMesh/TDMA/nwk/src/nwkFrame.c **** 	for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++) {
 476              	 .loc 1 149 0
 477 01fe 08E0     	 b .L28
 478              	.L31:
 150:../../../stack/LwMesh/TDMA/nwk/src/nwkFrame.c **** 		if (NWK_FRAME_STATE_FREE != frame->state) {
 479              	 .loc 1 150 0
 480 0200 7B68     	 ldr r3,[r7,#4]
 481 0202 1B78     	 ldrb r3,[r3]
 482 0204 002B     	 cmp r3,#0
 483 0206 01D0     	 beq .L29
 151:../../../stack/LwMesh/TDMA/nwk/src/nwkFrame.c **** 			return frame;
 484              	 .loc 1 151 0
 485 0208 7B68     	 ldr r3,[r7,#4]
 486 020a 07E0     	 b .L30
 487              	.L29:
 149:../../../stack/LwMesh/TDMA/nwk/src/nwkFrame.c **** 		if (NWK_FRAME_STATE_FREE != frame->state) {
 488              	 .loc 1 149 0
 489 020c 7B68     	 ldr r3,[r7,#4]
 490 020e 8D33     	 adds r3,r3,#141
 491 0210 7B60     	 str r3,[r7,#4]
 492              	.L28:
 149:../../../stack/LwMesh/TDMA/nwk/src/nwkFrame.c **** 		if (NWK_FRAME_STATE_FREE != frame->state) {
 493              	 .loc 1 149 0 is_stmt 0 discriminator 1
 494 0212 7B68     	 ldr r3,[r7,#4]
 495 0214 054A     	 ldr r2,.L32+4
 496 0216 9342     	 cmp r3,r2
 497 0218 F2D3     	 bcc .L31
 152:../../../stack/LwMesh/TDMA/nwk/src/nwkFrame.c **** 		}
 153:../../../stack/LwMesh/TDMA/nwk/src/nwkFrame.c **** 	}
 154:../../../stack/LwMesh/TDMA/nwk/src/nwkFrame.c **** 
 155:../../../stack/LwMesh/TDMA/nwk/src/nwkFrame.c **** 	return NULL;
 498              	 .loc 1 155 0 is_stmt 1
 499 021a 0023     	 movs r3,#0
 500              	.L30:
 156:../../../stack/LwMesh/TDMA/nwk/src/nwkFrame.c **** }
 501              	 .loc 1 156 0
 502 021c 1846     	 mov r0,r3
 503 021e 0C37     	 adds r7,r7,#12
 504              	.LCFI25:
 505              	 .cfi_def_cfa_offset 4
 506 0220 BD46     	 mov sp,r7
 507              	.LCFI26:
 508              	 .cfi_def_cfa_register 13
 509              	 
 510 0222 80BC     	 pop {r7}
 511              	.LCFI27:
 512              	 .cfi_restore 7
 513              	 .cfi_def_cfa_offset 0
 514 0224 7047     	 bx lr
 515              	.L33:
 516 0226 00BF     	 .align 2
 517              	.L32:
 518 0228 00000000 	 .word nwkFrameFrames
 519 022c 040B0000 	 .word nwkFrameFrames+2820
 520              	 .cfi_endproc
 521              	.LFE131:
 523              	 .align 1
 524              	 .global nwkFrameCommandInit
 525              	 .syntax unified
 526              	 .thumb
 527              	 .thumb_func
 528              	 .fpu softvfp
 530              	nwkFrameCommandInit:
 531              	.LFB132:
 157:../../../stack/LwMesh/TDMA/nwk/src/nwkFrame.c **** 
 158:../../../stack/LwMesh/TDMA/nwk/src/nwkFrame.c **** /*************************************************************************//**
 159:../../../stack/LwMesh/TDMA/nwk/src/nwkFrame.c **** *  @brief Sets default parameters for the the command @a frame
 160:../../../stack/LwMesh/TDMA/nwk/src/nwkFrame.c **** *  @param[in] frame Pointer to the command frame
 161:../../../stack/LwMesh/TDMA/nwk/src/nwkFrame.c **** *****************************************************************************/
 162:../../../stack/LwMesh/TDMA/nwk/src/nwkFrame.c **** void nwkFrameCommandInit(NwkFrame_t *frame)
 163:../../../stack/LwMesh/TDMA/nwk/src/nwkFrame.c **** {
 532              	 .loc 1 163 0
 533              	 .cfi_startproc
 534              	 
 535              	 
 536              	 
 537 0230 80B4     	 push {r7}
 538              	.LCFI28:
 539              	 .cfi_def_cfa_offset 4
 540              	 .cfi_offset 7,-4
 541 0232 83B0     	 sub sp,sp,#12
 542              	.LCFI29:
 543              	 .cfi_def_cfa_offset 16
 544 0234 00AF     	 add r7,sp,#0
 545              	.LCFI30:
 546              	 .cfi_def_cfa_register 7
 547 0236 7860     	 str r0,[r7,#4]
 164:../../../stack/LwMesh/TDMA/nwk/src/nwkFrame.c **** 	frame->tx.status = NWK_SUCCESS_STATUS;
 548              	 .loc 1 164 0
 549 0238 7B68     	 ldr r3,[r7,#4]
 550 023a 0022     	 movs r2,#0
 551 023c 83F88520 	 strb r2,[r3,#133]
 165:../../../stack/LwMesh/TDMA/nwk/src/nwkFrame.c **** 	frame->header.nwkSeq = ++nwkIb.nwkSeqNum;
 552              	 .loc 1 165 0
 553 0240 094B     	 ldr r3,.L35
 554 0242 1B79     	 ldrb r3,[r3,#4]
 555 0244 0133     	 adds r3,r3,#1
 556 0246 DAB2     	 uxtb r2,r3
 557 0248 074B     	 ldr r3,.L35
 558 024a 1A71     	 strb r2,[r3,#4]
 559 024c 064B     	 ldr r3,.L35
 560 024e 1A79     	 ldrb r2,[r3,#4]
 561 0250 7B68     	 ldr r3,[r7,#4]
 562 0252 1A73     	 strb r2,[r3,#12]
 166:../../../stack/LwMesh/TDMA/nwk/src/nwkFrame.c **** 	frame->header.nwkSrcAddr = nwkIb.addr;
 563              	 .loc 1 166 0
 564 0254 044B     	 ldr r3,.L35
 565 0256 1A88     	 ldrh r2,[r3]
 566 0258 7B68     	 ldr r3,[r7,#4]
 567 025a A3F80D20 	 strh r2,[r3,#13]
 167:../../../stack/LwMesh/TDMA/nwk/src/nwkFrame.c **** #ifdef NWK_ENABLE_SECURE_COMMANDS
 168:../../../stack/LwMesh/TDMA/nwk/src/nwkFrame.c **** 	frame->header.nwkFcf.security = 1;
 169:../../../stack/LwMesh/TDMA/nwk/src/nwkFrame.c **** #endif
 170:../../../stack/LwMesh/TDMA/nwk/src/nwkFrame.c **** }
 568              	 .loc 1 170 0
 569 025e 00BF     	 nop
 570 0260 0C37     	 adds r7,r7,#12
 571              	.LCFI31:
 572              	 .cfi_def_cfa_offset 4
 573 0262 BD46     	 mov sp,r7
 574              	.LCFI32:
 575              	 .cfi_def_cfa_register 13
 576              	 
 577 0264 80BC     	 pop {r7}
 578              	.LCFI33:
 579              	 .cfi_restore 7
 580              	 .cfi_def_cfa_offset 0
 581 0266 7047     	 bx lr
 582              	.L36:
 583              	 .align 2
 584              	.L35:
 585 0268 00000000 	 .word nwkIb
 586              	 .cfi_endproc
 587              	.LFE132:
 589              	.Letext0:
 590              	 .file 2 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\arm\\arm-gnu-toolchain\\arm-none-eabi\\include\\machine\\_default_types.h"
 591              	 .file 3 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\arm\\arm-gnu-toolchain\\arm-none-eabi\\include\\sys\\lock.h"
 592              	 .file 4 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\arm\\arm-gnu-toolchain\\arm-none-eabi\\include\\sys\\_types.h"
 593              	 .file 5 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\arm\\arm-gnu-toolchain\\lib\\gcc\\arm-none-eabi\\6.3.1\\include\\stddef.h"
 594              	 .file 6 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\arm\\arm-gnu-toolchain\\arm-none-eabi\\include\\sys\\reent.h"
 595              	 .file 7 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\arm\\arm-gnu-toolchain\\arm-none-eabi\\include\\stdlib.h"
 596              	 .file 8 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\arm\\arm-gnu-toolchain\\arm-none-eabi\\include\\sys\\_stdint.h"
 597              	 .file 9 "../../../platform/thirdparty/CMSIS/include/core_cm4.h"
 598              	 .file 10 "../../../platform/sam/utils/cmsis/sam4l/source/templates/system_sam4l.h"
 599              	 .file 11 "../../../platform/common/utils/interrupt/interrupt_sam_nvic.h"
 600              	 .file 12 "../../../platform/sam/utils/compiler.h"
 601              	 .file 13 "../../../platform/common/services/usb/usb_protocol.h"
 602              	 .file 14 "../../../platform/common/services/usb/udc/udi.h"
 603              	 .file 15 "../../../platform/common/services/usb/udc/udc_desc.h"
 604              	 .file 16 "../../../platform/common/services/usb/udc/udd.h"
 605              	 .file 17 "../../../platform/common/services/usb/class/cdc/device/udi_cdc.h"
 606              	 .file 18 "../../../platform/common/utils/stdio/stdio_usb/stdio_usb.h"
 607              	 .file 19 "../../../stack/LwMesh/TDMA/nwk/inc/nwkFrame.h"
 608              	 .file 20 "../../../stack/LwMesh/TDMA/nwk/inc/nwkRx.h"
 609              	 .file 21 "../../../stack/LwMesh/TDMA/nwk/inc/nwk.h"
 610              	 .file 22 "config/config.h"
 611              	 .file 23 "<built-in>"
DEFINED SYMBOLS
                            *ABS*:00000000 nwkFrame.c
    {standard input}:16     .bss.cpu_irq_critical_section_counter:00000000 $d
    {standard input}:19     .bss.cpu_irq_critical_section_counter:00000000 cpu_irq_critical_section_counter
    {standard input}:24     .bss.cpu_irq_prev_interrupt_state:00000000 cpu_irq_prev_interrupt_state
    {standard input}:25     .bss.cpu_irq_prev_interrupt_state:00000000 $d
                            *COM*:00000001 n
    {standard input}:28     .bss.tTS:00000000 $d
    {standard input}:31     .bss.tTS:00000000 tTS
    {standard input}:34     .bss.nwkFrameFrames:00000000 $d
    {standard input}:37     .bss.nwkFrameFrames:00000000 nwkFrameFrames
    {standard input}:40     .text:00000000 $t
    {standard input}:47     .text:00000000 nwkFrameInit
    {standard input}:106    .text:00000034 $d
    {standard input}:110    .text:00000038 $t
    {standard input}:117    .text:00000038 nwkFrameAlloc
    {standard input}:225    .text:000000d4 $d
    {standard input}:231    .text:000000e0 $t
    {standard input}:238    .text:000000e0 nwkFrameAlloc_LLDN
    {standard input}:375    .text:000001ac $d
    {standard input}:381    .text:000001b8 $t
    {standard input}:388    .text:000001b8 nwkFrameFree
    {standard input}:434    .text:000001e0 $d
    {standard input}:438    .text:000001e4 $t
    {standard input}:445    .text:000001e4 nwkFrameNext
    {standard input}:518    .text:00000228 $d
    {standard input}:523    .text:00000230 $t
    {standard input}:530    .text:00000230 nwkFrameCommandInit
    {standard input}:585    .text:00000268 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
memset
nwkIb
