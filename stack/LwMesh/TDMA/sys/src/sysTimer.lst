   1               		.file	"sysTimer.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__RAMPZ__ = 0x3b
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
   8               		.text
   9               	.Ltext0:
  10               		.cfi_sections	.debug_frame
  12               	cpu_irq_save:
  13               	.LFB4:
  14               		.file 1 "../../../platform/common/utils/interrupt/interrupt_avr8.h"
   1:../../../platform/common/utils/interrupt/interrupt_avr8.h **** /**
   2:../../../platform/common/utils/interrupt/interrupt_avr8.h ****  * \file
   3:../../../platform/common/utils/interrupt/interrupt_avr8.h ****  *
   4:../../../platform/common/utils/interrupt/interrupt_avr8.h ****  * \brief Global interrupt management for 8-bit AVR
   5:../../../platform/common/utils/interrupt/interrupt_avr8.h ****  *
   6:../../../platform/common/utils/interrupt/interrupt_avr8.h ****  * Copyright (C) 2010-2012 Atmel Corporation. All rights reserved.
   7:../../../platform/common/utils/interrupt/interrupt_avr8.h ****  *
   8:../../../platform/common/utils/interrupt/interrupt_avr8.h ****  * \asf_license_start
   9:../../../platform/common/utils/interrupt/interrupt_avr8.h ****  *
  10:../../../platform/common/utils/interrupt/interrupt_avr8.h ****  * \page License
  11:../../../platform/common/utils/interrupt/interrupt_avr8.h ****  *
  12:../../../platform/common/utils/interrupt/interrupt_avr8.h ****  * Redistribution and use in source and binary forms, with or without
  13:../../../platform/common/utils/interrupt/interrupt_avr8.h ****  * modification, are permitted provided that the following conditions are met:
  14:../../../platform/common/utils/interrupt/interrupt_avr8.h ****  *
  15:../../../platform/common/utils/interrupt/interrupt_avr8.h ****  * 1. Redistributions of source code must retain the above copyright notice,
  16:../../../platform/common/utils/interrupt/interrupt_avr8.h ****  *    this list of conditions and the following disclaimer.
  17:../../../platform/common/utils/interrupt/interrupt_avr8.h ****  *
  18:../../../platform/common/utils/interrupt/interrupt_avr8.h ****  * 2. Redistributions in binary form must reproduce the above copyright notice,
  19:../../../platform/common/utils/interrupt/interrupt_avr8.h ****  *    this list of conditions and the following disclaimer in the documentation
  20:../../../platform/common/utils/interrupt/interrupt_avr8.h ****  *    and/or other materials provided with the distribution.
  21:../../../platform/common/utils/interrupt/interrupt_avr8.h ****  *
  22:../../../platform/common/utils/interrupt/interrupt_avr8.h ****  * 3. The name of Atmel may not be used to endorse or promote products derived
  23:../../../platform/common/utils/interrupt/interrupt_avr8.h ****  *    from this software without specific prior written permission.
  24:../../../platform/common/utils/interrupt/interrupt_avr8.h ****  *
  25:../../../platform/common/utils/interrupt/interrupt_avr8.h ****  * 4. This software may only be redistributed and used in connection with an
  26:../../../platform/common/utils/interrupt/interrupt_avr8.h ****  *    Atmel microcontroller product.
  27:../../../platform/common/utils/interrupt/interrupt_avr8.h ****  *
  28:../../../platform/common/utils/interrupt/interrupt_avr8.h ****  * THIS SOFTWARE IS PROVIDED BY ATMEL "AS IS" AND ANY EXPRESS OR IMPLIED
  29:../../../platform/common/utils/interrupt/interrupt_avr8.h ****  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
  30:../../../platform/common/utils/interrupt/interrupt_avr8.h ****  * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE
  31:../../../platform/common/utils/interrupt/interrupt_avr8.h ****  * EXPRESSLY AND SPECIFICALLY DISCLAIMED. IN NO EVENT SHALL ATMEL BE LIABLE FOR
  32:../../../platform/common/utils/interrupt/interrupt_avr8.h ****  * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  33:../../../platform/common/utils/interrupt/interrupt_avr8.h ****  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
  34:../../../platform/common/utils/interrupt/interrupt_avr8.h ****  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
  35:../../../platform/common/utils/interrupt/interrupt_avr8.h ****  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
  36:../../../platform/common/utils/interrupt/interrupt_avr8.h ****  * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
  37:../../../platform/common/utils/interrupt/interrupt_avr8.h ****  * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  38:../../../platform/common/utils/interrupt/interrupt_avr8.h ****  * POSSIBILITY OF SUCH DAMAGE.
  39:../../../platform/common/utils/interrupt/interrupt_avr8.h ****  *
  40:../../../platform/common/utils/interrupt/interrupt_avr8.h ****  * \asf_license_stop
  41:../../../platform/common/utils/interrupt/interrupt_avr8.h ****  *
  42:../../../platform/common/utils/interrupt/interrupt_avr8.h ****  */
  43:../../../platform/common/utils/interrupt/interrupt_avr8.h **** #ifndef UTILS_INTERRUPT_INTERRUPT_H
  44:../../../platform/common/utils/interrupt/interrupt_avr8.h **** #define UTILS_INTERRUPT_INTERRUPT_H
  45:../../../platform/common/utils/interrupt/interrupt_avr8.h **** 
  46:../../../platform/common/utils/interrupt/interrupt_avr8.h **** #include <compiler.h>
  47:../../../platform/common/utils/interrupt/interrupt_avr8.h **** #include <parts.h>
  48:../../../platform/common/utils/interrupt/interrupt_avr8.h **** 
  49:../../../platform/common/utils/interrupt/interrupt_avr8.h **** /**
  50:../../../platform/common/utils/interrupt/interrupt_avr8.h ****  * \weakgroup interrupt_group
  51:../../../platform/common/utils/interrupt/interrupt_avr8.h ****  *
  52:../../../platform/common/utils/interrupt/interrupt_avr8.h ****  * @{
  53:../../../platform/common/utils/interrupt/interrupt_avr8.h ****  */
  54:../../../platform/common/utils/interrupt/interrupt_avr8.h **** 
  55:../../../platform/common/utils/interrupt/interrupt_avr8.h **** #ifdef ISR_CUSTOM_H
  56:../../../platform/common/utils/interrupt/interrupt_avr8.h **** #  include ISR_CUSTOM_H
  57:../../../platform/common/utils/interrupt/interrupt_avr8.h **** #else
  58:../../../platform/common/utils/interrupt/interrupt_avr8.h **** 
  59:../../../platform/common/utils/interrupt/interrupt_avr8.h **** /**
  60:../../../platform/common/utils/interrupt/interrupt_avr8.h ****  * \def ISR
  61:../../../platform/common/utils/interrupt/interrupt_avr8.h ****  * \brief Define service routine for specified interrupt vector
  62:../../../platform/common/utils/interrupt/interrupt_avr8.h ****  *
  63:../../../platform/common/utils/interrupt/interrupt_avr8.h ****  * Usage:
  64:../../../platform/common/utils/interrupt/interrupt_avr8.h ****  * \code
  65:../../../platform/common/utils/interrupt/interrupt_avr8.h ****  * ISR(FOO_vect)
  66:../../../platform/common/utils/interrupt/interrupt_avr8.h ****  * {
  67:../../../platform/common/utils/interrupt/interrupt_avr8.h ****  *     ...
  68:../../../platform/common/utils/interrupt/interrupt_avr8.h ****  * }
  69:../../../platform/common/utils/interrupt/interrupt_avr8.h ****  * \endcode
  70:../../../platform/common/utils/interrupt/interrupt_avr8.h ****  *
  71:../../../platform/common/utils/interrupt/interrupt_avr8.h ****  * \param vect Interrupt vector name as found in the device header files.
  72:../../../platform/common/utils/interrupt/interrupt_avr8.h ****  */
  73:../../../platform/common/utils/interrupt/interrupt_avr8.h **** #if defined(__DOXYGEN__)
  74:../../../platform/common/utils/interrupt/interrupt_avr8.h **** #  define ISR(vect)
  75:../../../platform/common/utils/interrupt/interrupt_avr8.h **** #elif defined(__GNUC__)
  76:../../../platform/common/utils/interrupt/interrupt_avr8.h **** #  include <avr/interrupt.h>
  77:../../../platform/common/utils/interrupt/interrupt_avr8.h **** #elif defined(__ICCAVR__)
  78:../../../platform/common/utils/interrupt/interrupt_avr8.h **** #  define __ISR(x) _Pragma(#x)
  79:../../../platform/common/utils/interrupt/interrupt_avr8.h **** #  define ISR(vect) __ISR(vector=vect) __interrupt void handler_##vect(void)
  80:../../../platform/common/utils/interrupt/interrupt_avr8.h **** #endif
  81:../../../platform/common/utils/interrupt/interrupt_avr8.h **** #endif // ISR_CUSTOM_H
  82:../../../platform/common/utils/interrupt/interrupt_avr8.h **** 
  83:../../../platform/common/utils/interrupt/interrupt_avr8.h **** #if XMEGA
  84:../../../platform/common/utils/interrupt/interrupt_avr8.h **** /**
  85:../../../platform/common/utils/interrupt/interrupt_avr8.h ****  * \brief Initialize interrupt vectors
  86:../../../platform/common/utils/interrupt/interrupt_avr8.h ****  * Enables all interrupt levels, with vectors located in the application section
  87:../../../platform/common/utils/interrupt/interrupt_avr8.h ****  * and fixed priority scheduling.
  88:../../../platform/common/utils/interrupt/interrupt_avr8.h ****  */
  89:../../../platform/common/utils/interrupt/interrupt_avr8.h **** #define irq_initialize_vectors() \
  90:../../../platform/common/utils/interrupt/interrupt_avr8.h **** 	PMIC.CTRL = PMIC_LOLVLEN_bm | PMIC_MEDLVLEN_bm | PMIC_HILVLEN_bm;
  91:../../../platform/common/utils/interrupt/interrupt_avr8.h **** #endif
  92:../../../platform/common/utils/interrupt/interrupt_avr8.h **** 
  93:../../../platform/common/utils/interrupt/interrupt_avr8.h **** #ifdef __GNUC__
  94:../../../platform/common/utils/interrupt/interrupt_avr8.h **** #  define cpu_irq_enable()     sei()
  95:../../../platform/common/utils/interrupt/interrupt_avr8.h **** #  define cpu_irq_disable()    cli()
  96:../../../platform/common/utils/interrupt/interrupt_avr8.h **** #else
  97:../../../platform/common/utils/interrupt/interrupt_avr8.h **** #  define cpu_irq_enable()     __enable_interrupt()
  98:../../../platform/common/utils/interrupt/interrupt_avr8.h **** #  define cpu_irq_disable()    __disable_interrupt()
  99:../../../platform/common/utils/interrupt/interrupt_avr8.h **** #endif
 100:../../../platform/common/utils/interrupt/interrupt_avr8.h **** 
 101:../../../platform/common/utils/interrupt/interrupt_avr8.h **** typedef uint8_t irqflags_t;
 102:../../../platform/common/utils/interrupt/interrupt_avr8.h **** 
 103:../../../platform/common/utils/interrupt/interrupt_avr8.h **** static inline irqflags_t cpu_irq_save(void)
 104:../../../platform/common/utils/interrupt/interrupt_avr8.h **** {
  15               		.loc 1 104 0
  16               		.cfi_startproc
  17 0000 CF93      		push r28
  18               	.LCFI0:
  19               		.cfi_def_cfa_offset 3
  20               		.cfi_offset 28, -2
  21 0002 DF93      		push r29
  22               	.LCFI1:
  23               		.cfi_def_cfa_offset 4
  24               		.cfi_offset 29, -3
  25 0004 1F92      		push __zero_reg__
  26               	.LCFI2:
  27               		.cfi_def_cfa_offset 5
  28 0006 CDB7      		in r28,__SP_L__
  29 0008 DEB7      		in r29,__SP_H__
  30               	.LCFI3:
  31               		.cfi_def_cfa_register 28
  32               	/* prologue: function */
  33               	/* frame size = 1 */
  34               	/* stack size = 3 */
  35               	.L__stack_usage = 3
 105:../../../platform/common/utils/interrupt/interrupt_avr8.h **** 	irqflags_t flags = SREG;
  36               		.loc 1 105 0
  37 000a 8FE5      		ldi r24,lo8(95)
  38 000c 90E0      		ldi r25,0
  39 000e FC01      		movw r30,r24
  40 0010 8081      		ld r24,Z
  41 0012 8983      		std Y+1,r24
 106:../../../platform/common/utils/interrupt/interrupt_avr8.h **** 	cpu_irq_disable();
  42               		.loc 1 106 0
  43               	/* #APP */
  44               	 ;  106 "../../../platform/common/utils/interrupt/interrupt_avr8.h" 1
  45 0014 F894      		cli
  46               	 ;  0 "" 2
 107:../../../platform/common/utils/interrupt/interrupt_avr8.h **** 	return flags;
  47               		.loc 1 107 0
  48               	/* #NOAPP */
  49 0016 8981      		ldd r24,Y+1
  50               	/* epilogue start */
 108:../../../platform/common/utils/interrupt/interrupt_avr8.h **** }
  51               		.loc 1 108 0
  52 0018 0F90      		pop __tmp_reg__
  53 001a DF91      		pop r29
  54 001c CF91      		pop r28
  55 001e 0895      		ret
  56               		.cfi_endproc
  57               	.LFE4:
  60               	cpu_irq_restore:
  61               	.LFB5:
 109:../../../platform/common/utils/interrupt/interrupt_avr8.h **** 
 110:../../../platform/common/utils/interrupt/interrupt_avr8.h **** static inline void cpu_irq_restore(irqflags_t flags)
 111:../../../platform/common/utils/interrupt/interrupt_avr8.h **** {
  62               		.loc 1 111 0
  63               		.cfi_startproc
  64 0020 CF93      		push r28
  65               	.LCFI4:
  66               		.cfi_def_cfa_offset 3
  67               		.cfi_offset 28, -2
  68 0022 DF93      		push r29
  69               	.LCFI5:
  70               		.cfi_def_cfa_offset 4
  71               		.cfi_offset 29, -3
  72 0024 1F92      		push __zero_reg__
  73               	.LCFI6:
  74               		.cfi_def_cfa_offset 5
  75 0026 CDB7      		in r28,__SP_L__
  76 0028 DEB7      		in r29,__SP_H__
  77               	.LCFI7:
  78               		.cfi_def_cfa_register 28
  79               	/* prologue: function */
  80               	/* frame size = 1 */
  81               	/* stack size = 3 */
  82               	.L__stack_usage = 3
  83 002a 8983      		std Y+1,r24
 112:../../../platform/common/utils/interrupt/interrupt_avr8.h **** 	barrier();
  84               		.loc 1 112 0
 113:../../../platform/common/utils/interrupt/interrupt_avr8.h **** 	SREG = flags;
  85               		.loc 1 113 0
  86 002c 8FE5      		ldi r24,lo8(95)
  87 002e 90E0      		ldi r25,0
  88 0030 2981      		ldd r18,Y+1
  89 0032 FC01      		movw r30,r24
  90 0034 2083      		st Z,r18
 114:../../../platform/common/utils/interrupt/interrupt_avr8.h **** }
  91               		.loc 1 114 0
  92 0036 0000      		nop
  93               	/* epilogue start */
  94 0038 0F90      		pop __tmp_reg__
  95 003a DF91      		pop r29
  96 003c CF91      		pop r28
  97 003e 0895      		ret
  98               		.cfi_endproc
  99               	.LFE5:
 101               		.comm	SysTimerIrqCount,1,1
 102               		.section	.bss.timers,"aw",@nobits
 105               	timers:
 106 0000 0000      		.zero	2
 107               		.text
 108               	.global	SYS_TimerInit
 110               	SYS_TimerInit:
 111               	.LFB8:
 112               		.file 2 "../../../stack/LwMesh/TDMA/sys/src/sysTimer.c"
   1:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** /**
   2:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c ****  * \file sysTimer.c
   3:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c ****  *
   4:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c ****  * \brief System timer implementation
   5:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c ****  *
   6:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c ****  * Copyright (C) 2014 Atmel Corporation. All rights reserved.
   7:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c ****  *
   8:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c ****  * \asf_license_start
   9:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c ****  *
  10:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c ****  * Redistribution and use in source and binary forms, with or without
  11:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c ****  * modification, are permitted provided that the following conditions are met:
  12:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c ****  *
  13:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c ****  * 1. Redistributions of source code must retain the above copyright notice,
  14:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c ****  *    this list of conditions and the following disclaimer.
  15:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c ****  *
  16:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c ****  * 2. Redistributions in binary form must reproduce the above copyright notice,
  17:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c ****  *    this list of conditions and the following disclaimer in the documentation
  18:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c ****  *    and/or other materials provided with the distribution.
  19:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c ****  *
  20:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c ****  * 3. The name of Atmel may not be used to endorse or promote products derived
  21:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c ****  *    from this software without specific prior written permission.
  22:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c ****  *
  23:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c ****  * 4. This software may only be redistributed and used in connection with an
  24:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c ****  *    Atmel microcontroller product.
  25:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c ****  *
  26:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c ****  * THIS SOFTWARE IS PROVIDED BY ATMEL "AS IS" AND ANY EXPRESS OR IMPLIED
  27:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c ****  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
  28:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c ****  * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE
  29:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c ****  * EXPRESSLY AND SPECIFICALLY DISCLAIMED. IN NO EVENT SHALL ATMEL BE LIABLE FOR
  30:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c ****  * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  31:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c ****  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
  32:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c ****  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
  33:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c ****  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
  34:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c ****  * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
  35:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c ****  * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  36:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c ****  * POSSIBILITY OF SUCH DAMAGE.
  37:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c ****  *
  38:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c ****  * \asf_license_stop
  39:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c ****  *
  40:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c ****  *
  41:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c ****  */
  42:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 
  43:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** /*
  44:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c ****  * Copyright (c) 2014, Atmel Corporation All rights reserved.
  45:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c ****  *
  46:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c ****  * Licensed under Atmel's Limited License Agreement --> EULA.txt
  47:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c ****  */
  48:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 
  49:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** /*- Includes ---------------------------------------------------------------*/
  50:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** #include <stdlib.h>
  51:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** #include "compiler.h"
  52:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** #include "common_hw_timer.h"
  53:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** #include "sysTimer.h"
  54:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 
  55:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** volatile uint8_t SysTimerIrqCount;
  56:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 
  57:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** /*****************************************************************************
  58:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** *****************************************************************************/
  59:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** static void placeTimer(SYS_Timer_t *timer);
  60:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 
  61:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** /*- Variables --------------------------------------------------------------*/
  62:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** static SYS_Timer_t *timers;
  63:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 
  64:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** /*- Implementations --------------------------------------------------------*/
  65:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 
  66:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** /*************************************************************************//**
  67:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** *****************************************************************************/
  68:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** void SYS_TimerInit(void)
  69:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** {
 113               		.loc 2 69 0
 114               		.cfi_startproc
 115 0040 CF93      		push r28
 116               	.LCFI8:
 117               		.cfi_def_cfa_offset 3
 118               		.cfi_offset 28, -2
 119 0042 DF93      		push r29
 120               	.LCFI9:
 121               		.cfi_def_cfa_offset 4
 122               		.cfi_offset 29, -3
 123 0044 CDB7      		in r28,__SP_L__
 124 0046 DEB7      		in r29,__SP_H__
 125               	.LCFI10:
 126               		.cfi_def_cfa_register 28
 127               	/* prologue: function */
 128               	/* frame size = 0 */
 129               	/* stack size = 2 */
 130               	.L__stack_usage = 2
  70:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 	SysTimerIrqCount = 0;
 131               		.loc 2 70 0
 132 0048 1092 0000 		sts SysTimerIrqCount,__zero_reg__
  71:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 	set_common_tc_expiry_callback(SYS_HwExpiry_Cb);
 133               		.loc 2 71 0
 134 004c 80E0      		ldi r24,lo8(gs(SYS_HwExpiry_Cb))
 135 004e 90E0      		ldi r25,hi8(gs(SYS_HwExpiry_Cb))
 136 0050 0E94 0000 		call set_common_tc_expiry_callback
  72:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 	common_tc_init();
 137               		.loc 2 72 0
 138 0054 0E94 0000 		call common_tc_init
  73:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 	common_tc_delay(SYS_TIMER_INTERVAL * MS);
 139               		.loc 2 73 0
 140 0058 80E1      		ldi r24,lo8(16)
 141 005a 97E2      		ldi r25,lo8(39)
 142 005c 0E94 0000 		call common_tc_delay
  74:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 	timers = NULL;
 143               		.loc 2 74 0
 144 0060 1092 0000 		sts timers+1,__zero_reg__
 145 0064 1092 0000 		sts timers,__zero_reg__
  75:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** }
 146               		.loc 2 75 0
 147 0068 0000      		nop
 148               	/* epilogue start */
 149 006a DF91      		pop r29
 150 006c CF91      		pop r28
 151 006e 0895      		ret
 152               		.cfi_endproc
 153               	.LFE8:
 155               	.global	SYS_TimerStart
 157               	SYS_TimerStart:
 158               	.LFB9:
  76:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 
  77:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** /*************************************************************************//**
  78:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** *****************************************************************************/
  79:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** void SYS_TimerStart(SYS_Timer_t *timer)
  80:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** {
 159               		.loc 2 80 0
 160               		.cfi_startproc
 161 0070 CF93      		push r28
 162               	.LCFI11:
 163               		.cfi_def_cfa_offset 3
 164               		.cfi_offset 28, -2
 165 0072 DF93      		push r29
 166               	.LCFI12:
 167               		.cfi_def_cfa_offset 4
 168               		.cfi_offset 29, -3
 169 0074 00D0      		rcall .
 170               	.LCFI13:
 171               		.cfi_def_cfa_offset 6
 172 0076 CDB7      		in r28,__SP_L__
 173 0078 DEB7      		in r29,__SP_H__
 174               	.LCFI14:
 175               		.cfi_def_cfa_register 28
 176               	/* prologue: function */
 177               	/* frame size = 2 */
 178               	/* stack size = 4 */
 179               	.L__stack_usage = 4
 180 007a 9A83      		std Y+2,r25
 181 007c 8983      		std Y+1,r24
  81:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 	if (!SYS_TimerStarted(timer)) {
 182               		.loc 2 81 0
 183 007e 8981      		ldd r24,Y+1
 184 0080 9A81      		ldd r25,Y+2
 185 0082 0E94 0000 		call SYS_TimerStarted
 186 0086 982F      		mov r25,r24
 187 0088 81E0      		ldi r24,lo8(1)
 188 008a 8927      		eor r24,r25
 189 008c 8823      		tst r24
 190 008e 01F0      		breq .L7
  82:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 		placeTimer(timer);
 191               		.loc 2 82 0
 192 0090 8981      		ldd r24,Y+1
 193 0092 9A81      		ldd r25,Y+2
 194 0094 0E94 0000 		call placeTimer
 195               	.L7:
  83:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 	}
  84:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** }
 196               		.loc 2 84 0
 197 0098 0000      		nop
 198               	/* epilogue start */
 199 009a 0F90      		pop __tmp_reg__
 200 009c 0F90      		pop __tmp_reg__
 201 009e DF91      		pop r29
 202 00a0 CF91      		pop r28
 203 00a2 0895      		ret
 204               		.cfi_endproc
 205               	.LFE9:
 207               	.global	SYS_TimerStop
 209               	SYS_TimerStop:
 210               	.LFB10:
  85:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 
  86:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** /*************************************************************************//**
  87:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** *****************************************************************************/
  88:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** void SYS_TimerStop(SYS_Timer_t *timer)
  89:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** {
 211               		.loc 2 89 0
 212               		.cfi_startproc
 213 00a4 CF93      		push r28
 214               	.LCFI15:
 215               		.cfi_def_cfa_offset 3
 216               		.cfi_offset 28, -2
 217 00a6 DF93      		push r29
 218               	.LCFI16:
 219               		.cfi_def_cfa_offset 4
 220               		.cfi_offset 29, -3
 221 00a8 00D0      		rcall .
 222 00aa 00D0      		rcall .
 223 00ac 00D0      		rcall .
 224               	.LCFI17:
 225               		.cfi_def_cfa_offset 10
 226 00ae CDB7      		in r28,__SP_L__
 227 00b0 DEB7      		in r29,__SP_H__
 228               	.LCFI18:
 229               		.cfi_def_cfa_register 28
 230               	/* prologue: function */
 231               	/* frame size = 6 */
 232               	/* stack size = 8 */
 233               	.L__stack_usage = 8
 234 00b2 9E83      		std Y+6,r25
 235 00b4 8D83      		std Y+5,r24
  90:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 	SYS_Timer_t *prev = NULL;
 236               		.loc 2 90 0
 237 00b6 1A82      		std Y+2,__zero_reg__
 238 00b8 1982      		std Y+1,__zero_reg__
 239               	.LBB2:
  91:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 
  92:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 	for (SYS_Timer_t *t = timers; t; t = t->next) {
 240               		.loc 2 92 0
 241 00ba 8091 0000 		lds r24,timers
 242 00be 9091 0000 		lds r25,timers+1
 243 00c2 9C83      		std Y+4,r25
 244 00c4 8B83      		std Y+3,r24
 245 00c6 00C0      		rjmp .L9
 246               	.L15:
  93:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 		if (t == timer) {
 247               		.loc 2 93 0
 248 00c8 2B81      		ldd r18,Y+3
 249 00ca 3C81      		ldd r19,Y+4
 250 00cc 8D81      		ldd r24,Y+5
 251 00ce 9E81      		ldd r25,Y+6
 252 00d0 2817      		cp r18,r24
 253 00d2 3907      		cpc r19,r25
 254 00d4 01F0      		breq .+2
 255 00d6 00C0      		rjmp .L10
  94:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 			if (prev) {
 256               		.loc 2 94 0
 257 00d8 8981      		ldd r24,Y+1
 258 00da 9A81      		ldd r25,Y+2
 259 00dc 892B      		or r24,r25
 260 00de 01F0      		breq .L11
  95:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 				prev->next = t->next;
 261               		.loc 2 95 0
 262 00e0 8B81      		ldd r24,Y+3
 263 00e2 9C81      		ldd r25,Y+4
 264 00e4 FC01      		movw r30,r24
 265 00e6 2081      		ld r18,Z
 266 00e8 3181      		ldd r19,Z+1
 267 00ea 8981      		ldd r24,Y+1
 268 00ec 9A81      		ldd r25,Y+2
 269 00ee FC01      		movw r30,r24
 270 00f0 3183      		std Z+1,r19
 271 00f2 2083      		st Z,r18
 272 00f4 00C0      		rjmp .L12
 273               	.L11:
  96:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 			} else {
  97:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 				timers = t->next;
 274               		.loc 2 97 0
 275 00f6 8B81      		ldd r24,Y+3
 276 00f8 9C81      		ldd r25,Y+4
 277 00fa FC01      		movw r30,r24
 278 00fc 8081      		ld r24,Z
 279 00fe 9181      		ldd r25,Z+1
 280 0100 9093 0000 		sts timers+1,r25
 281 0104 8093 0000 		sts timers,r24
 282               	.L12:
  98:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 			}
  99:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 
 100:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 			if (t->next) {
 283               		.loc 2 100 0
 284 0108 8B81      		ldd r24,Y+3
 285 010a 9C81      		ldd r25,Y+4
 286 010c FC01      		movw r30,r24
 287 010e 8081      		ld r24,Z
 288 0110 9181      		ldd r25,Z+1
 289 0112 892B      		or r24,r25
 290 0114 01F0      		breq .L16
 101:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 				t->next->timeout += timer->timeout;
 291               		.loc 2 101 0
 292 0116 8B81      		ldd r24,Y+3
 293 0118 9C81      		ldd r25,Y+4
 294 011a FC01      		movw r30,r24
 295 011c 6081      		ld r22,Z
 296 011e 7181      		ldd r23,Z+1
 297 0120 8B81      		ldd r24,Y+3
 298 0122 9C81      		ldd r25,Y+4
 299 0124 FC01      		movw r30,r24
 300 0126 8081      		ld r24,Z
 301 0128 9181      		ldd r25,Z+1
 302 012a FC01      		movw r30,r24
 303 012c 2281      		ldd r18,Z+2
 304 012e 3381      		ldd r19,Z+3
 305 0130 4481      		ldd r20,Z+4
 306 0132 5581      		ldd r21,Z+5
 307 0134 8D81      		ldd r24,Y+5
 308 0136 9E81      		ldd r25,Y+6
 309 0138 FC01      		movw r30,r24
 310 013a 8281      		ldd r24,Z+2
 311 013c 9381      		ldd r25,Z+3
 312 013e A481      		ldd r26,Z+4
 313 0140 B581      		ldd r27,Z+5
 314 0142 820F      		add r24,r18
 315 0144 931F      		adc r25,r19
 316 0146 A41F      		adc r26,r20
 317 0148 B51F      		adc r27,r21
 318 014a FB01      		movw r30,r22
 319 014c 8283      		std Z+2,r24
 320 014e 9383      		std Z+3,r25
 321 0150 A483      		std Z+4,r26
 322 0152 B583      		std Z+5,r27
 102:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 			}
 103:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 
 104:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 			break;
 323               		.loc 2 104 0
 324 0154 00C0      		rjmp .L16
 325               	.L10:
 105:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 		}
 106:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 
 107:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 		prev = t;
 326               		.loc 2 107 0 discriminator 2
 327 0156 8B81      		ldd r24,Y+3
 328 0158 9C81      		ldd r25,Y+4
 329 015a 9A83      		std Y+2,r25
 330 015c 8983      		std Y+1,r24
  92:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 		if (t == timer) {
 331               		.loc 2 92 0 discriminator 2
 332 015e 8B81      		ldd r24,Y+3
 333 0160 9C81      		ldd r25,Y+4
 334 0162 FC01      		movw r30,r24
 335 0164 8081      		ld r24,Z
 336 0166 9181      		ldd r25,Z+1
 337 0168 9C83      		std Y+4,r25
 338 016a 8B83      		std Y+3,r24
 339               	.L9:
  92:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 		if (t == timer) {
 340               		.loc 2 92 0 is_stmt 0 discriminator 1
 341 016c 8B81      		ldd r24,Y+3
 342 016e 9C81      		ldd r25,Y+4
 343 0170 892B      		or r24,r25
 344 0172 01F0      		breq .+2
 345 0174 00C0      		rjmp .L15
 346               	.LBE2:
 108:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 	}
 109:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** }
 347               		.loc 2 109 0 is_stmt 1
 348 0176 00C0      		rjmp .L14
 349               	.L16:
 350               	.LBB3:
 104:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 		}
 351               		.loc 2 104 0
 352 0178 0000      		nop
 353               	.L14:
 354               	.LBE3:
 355               		.loc 2 109 0
 356 017a 0000      		nop
 357               	/* epilogue start */
 358 017c 2696      		adiw r28,6
 359 017e 0FB6      		in __tmp_reg__,__SREG__
 360 0180 F894      		cli
 361 0182 DEBF      		out __SP_H__,r29
 362 0184 0FBE      		out __SREG__,__tmp_reg__
 363 0186 CDBF      		out __SP_L__,r28
 364 0188 DF91      		pop r29
 365 018a CF91      		pop r28
 366 018c 0895      		ret
 367               		.cfi_endproc
 368               	.LFE10:
 370               	.global	SYS_TimerStarted
 372               	SYS_TimerStarted:
 373               	.LFB11:
 110:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 
 111:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** /*************************************************************************//**
 112:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** *****************************************************************************/
 113:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** bool SYS_TimerStarted(SYS_Timer_t *timer)
 114:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** {
 374               		.loc 2 114 0
 375               		.cfi_startproc
 376 018e CF93      		push r28
 377               	.LCFI19:
 378               		.cfi_def_cfa_offset 3
 379               		.cfi_offset 28, -2
 380 0190 DF93      		push r29
 381               	.LCFI20:
 382               		.cfi_def_cfa_offset 4
 383               		.cfi_offset 29, -3
 384 0192 00D0      		rcall .
 385 0194 00D0      		rcall .
 386               	.LCFI21:
 387               		.cfi_def_cfa_offset 8
 388 0196 CDB7      		in r28,__SP_L__
 389 0198 DEB7      		in r29,__SP_H__
 390               	.LCFI22:
 391               		.cfi_def_cfa_register 28
 392               	/* prologue: function */
 393               	/* frame size = 4 */
 394               	/* stack size = 6 */
 395               	.L__stack_usage = 6
 396 019a 9C83      		std Y+4,r25
 397 019c 8B83      		std Y+3,r24
 398               	.LBB4:
 115:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 	for (SYS_Timer_t *t = timers; t; t = t->next) {
 399               		.loc 2 115 0
 400 019e 8091 0000 		lds r24,timers
 401 01a2 9091 0000 		lds r25,timers+1
 402 01a6 9A83      		std Y+2,r25
 403 01a8 8983      		std Y+1,r24
 404 01aa 00C0      		rjmp .L18
 405               	.L21:
 116:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 		if (t == timer) {
 406               		.loc 2 116 0
 407 01ac 2981      		ldd r18,Y+1
 408 01ae 3A81      		ldd r19,Y+2
 409 01b0 8B81      		ldd r24,Y+3
 410 01b2 9C81      		ldd r25,Y+4
 411 01b4 2817      		cp r18,r24
 412 01b6 3907      		cpc r19,r25
 413 01b8 01F4      		brne .L19
 117:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 			return true;
 414               		.loc 2 117 0
 415 01ba 81E0      		ldi r24,lo8(1)
 416 01bc 00C0      		rjmp .L20
 417               	.L19:
 115:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 	for (SYS_Timer_t *t = timers; t; t = t->next) {
 418               		.loc 2 115 0 discriminator 2
 419 01be 8981      		ldd r24,Y+1
 420 01c0 9A81      		ldd r25,Y+2
 421 01c2 FC01      		movw r30,r24
 422 01c4 8081      		ld r24,Z
 423 01c6 9181      		ldd r25,Z+1
 424 01c8 9A83      		std Y+2,r25
 425 01ca 8983      		std Y+1,r24
 426               	.L18:
 115:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 	for (SYS_Timer_t *t = timers; t; t = t->next) {
 427               		.loc 2 115 0 is_stmt 0 discriminator 1
 428 01cc 8981      		ldd r24,Y+1
 429 01ce 9A81      		ldd r25,Y+2
 430 01d0 892B      		or r24,r25
 431 01d2 01F4      		brne .L21
 432               	.LBE4:
 118:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 		}
 119:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 	}
 120:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 	return false;
 433               		.loc 2 120 0 is_stmt 1
 434 01d4 80E0      		ldi r24,0
 435               	.L20:
 436               	/* epilogue start */
 121:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** }
 437               		.loc 2 121 0
 438 01d6 0F90      		pop __tmp_reg__
 439 01d8 0F90      		pop __tmp_reg__
 440 01da 0F90      		pop __tmp_reg__
 441 01dc 0F90      		pop __tmp_reg__
 442 01de DF91      		pop r29
 443 01e0 CF91      		pop r28
 444 01e2 0895      		ret
 445               		.cfi_endproc
 446               	.LFE11:
 448               	.global	SYS_TimerTaskHandler
 450               	SYS_TimerTaskHandler:
 451               	.LFB12:
 122:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 
 123:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** /*************************************************************************//**
 124:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** *****************************************************************************/
 125:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** void SYS_TimerTaskHandler(void)
 126:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** {
 452               		.loc 2 126 0
 453               		.cfi_startproc
 454 01e4 EF92      		push r14
 455               	.LCFI23:
 456               		.cfi_def_cfa_offset 3
 457               		.cfi_offset 14, -2
 458 01e6 FF92      		push r15
 459               	.LCFI24:
 460               		.cfi_def_cfa_offset 4
 461               		.cfi_offset 15, -3
 462 01e8 0F93      		push r16
 463               	.LCFI25:
 464               		.cfi_def_cfa_offset 5
 465               		.cfi_offset 16, -4
 466 01ea 1F93      		push r17
 467               	.LCFI26:
 468               		.cfi_def_cfa_offset 6
 469               		.cfi_offset 17, -5
 470 01ec CF93      		push r28
 471               	.LCFI27:
 472               		.cfi_def_cfa_offset 7
 473               		.cfi_offset 28, -6
 474 01ee DF93      		push r29
 475               	.LCFI28:
 476               		.cfi_def_cfa_offset 8
 477               		.cfi_offset 29, -7
 478 01f0 CDB7      		in r28,__SP_L__
 479 01f2 DEB7      		in r29,__SP_H__
 480               	.LCFI29:
 481               		.cfi_def_cfa_register 28
 482 01f4 2897      		sbiw r28,8
 483               	.LCFI30:
 484               		.cfi_def_cfa_offset 16
 485 01f6 0FB6      		in __tmp_reg__,__SREG__
 486 01f8 F894      		cli
 487 01fa DEBF      		out __SP_H__,r29
 488 01fc 0FBE      		out __SREG__,__tmp_reg__
 489 01fe CDBF      		out __SP_L__,r28
 490               	/* prologue: function */
 491               	/* frame size = 8 */
 492               	/* stack size = 14 */
 493               	.L__stack_usage = 14
 127:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 	uint32_t elapsed;
 128:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 	uint8_t cnt;
 129:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 	irqflags_t flags;
 130:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 
 131:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 	if (0 == SysTimerIrqCount) {
 494               		.loc 2 131 0
 495 0200 8091 0000 		lds r24,SysTimerIrqCount
 496 0204 8823      		tst r24
 497 0206 01F4      		brne .+2
 498 0208 00C0      		rjmp .L29
 132:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 		return;
 133:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 	}
 134:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 
 135:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 	/* Enter a critical section */
 136:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 	flags = cpu_irq_save();
 499               		.loc 2 136 0
 500 020a 0E94 0000 		call cpu_irq_save
 501 020e 8D83      		std Y+5,r24
 137:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 	cnt = SysTimerIrqCount;
 502               		.loc 2 137 0
 503 0210 8091 0000 		lds r24,SysTimerIrqCount
 504 0214 8E83      		std Y+6,r24
 138:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 	SysTimerIrqCount = 0;
 505               		.loc 2 138 0
 506 0216 1092 0000 		sts SysTimerIrqCount,__zero_reg__
 139:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 	/* Leave the critical section */
 140:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 	cpu_irq_restore(flags);
 507               		.loc 2 140 0
 508 021a 8D81      		ldd r24,Y+5
 509 021c 0E94 0000 		call cpu_irq_restore
 141:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 
 142:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 	elapsed = cnt * SYS_TIMER_INTERVAL;
 510               		.loc 2 142 0
 511 0220 8E81      		ldd r24,Y+6
 512 0222 882F      		mov r24,r24
 513 0224 90E0      		ldi r25,0
 514 0226 A0E0      		ldi r26,0
 515 0228 B0E0      		ldi r27,0
 516 022a 880F      		lsl r24
 517 022c 991F      		rol r25
 518 022e AA1F      		rol r26
 519 0230 BB1F      		rol r27
 520 0232 9C01      		movw r18,r24
 521 0234 AD01      		movw r20,r26
 522 0236 220F      		lsl r18
 523 0238 331F      		rol r19
 524 023a 441F      		rol r20
 525 023c 551F      		rol r21
 526 023e 220F      		lsl r18
 527 0240 331F      		rol r19
 528 0242 441F      		rol r20
 529 0244 551F      		rol r21
 530 0246 820F      		add r24,r18
 531 0248 931F      		adc r25,r19
 532 024a A41F      		adc r26,r20
 533 024c B51F      		adc r27,r21
 534 024e 8983      		std Y+1,r24
 535 0250 9A83      		std Y+2,r25
 536 0252 AB83      		std Y+3,r26
 537 0254 BC83      		std Y+4,r27
 143:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 
 144:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 	while (timers && (timers->timeout <= elapsed)) {
 538               		.loc 2 144 0
 539 0256 00C0      		rjmp .L25
 540               	.L28:
 541               	.LBB5:
 145:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 		SYS_Timer_t *timer = timers;
 542               		.loc 2 145 0
 543 0258 8091 0000 		lds r24,timers
 544 025c 9091 0000 		lds r25,timers+1
 545 0260 9887      		std Y+8,r25
 546 0262 8F83      		std Y+7,r24
 146:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 
 147:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 		elapsed -= timers->timeout;
 547               		.loc 2 147 0
 548 0264 8091 0000 		lds r24,timers
 549 0268 9091 0000 		lds r25,timers+1
 550 026c FC01      		movw r30,r24
 551 026e 8281      		ldd r24,Z+2
 552 0270 9381      		ldd r25,Z+3
 553 0272 A481      		ldd r26,Z+4
 554 0274 B581      		ldd r27,Z+5
 555 0276 2981      		ldd r18,Y+1
 556 0278 3A81      		ldd r19,Y+2
 557 027a 4B81      		ldd r20,Y+3
 558 027c 5C81      		ldd r21,Y+4
 559 027e 7901      		movw r14,r18
 560 0280 8A01      		movw r16,r20
 561 0282 E81A      		sub r14,r24
 562 0284 F90A      		sbc r15,r25
 563 0286 0A0B      		sbc r16,r26
 564 0288 1B0B      		sbc r17,r27
 565 028a D801      		movw r26,r16
 566 028c C701      		movw r24,r14
 567 028e 8983      		std Y+1,r24
 568 0290 9A83      		std Y+2,r25
 569 0292 AB83      		std Y+3,r26
 570 0294 BC83      		std Y+4,r27
 148:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 		timers = timers->next;
 571               		.loc 2 148 0
 572 0296 8091 0000 		lds r24,timers
 573 029a 9091 0000 		lds r25,timers+1
 574 029e FC01      		movw r30,r24
 575 02a0 8081      		ld r24,Z
 576 02a2 9181      		ldd r25,Z+1
 577 02a4 9093 0000 		sts timers+1,r25
 578 02a8 8093 0000 		sts timers,r24
 149:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 		if (SYS_TIMER_PERIODIC_MODE == timer->mode) {
 579               		.loc 2 149 0
 580 02ac 8F81      		ldd r24,Y+7
 581 02ae 9885      		ldd r25,Y+8
 582 02b0 FC01      		movw r30,r24
 583 02b2 8285      		ldd r24,Z+10
 584 02b4 8130      		cpi r24,lo8(1)
 585 02b6 01F4      		brne .L26
 150:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 			placeTimer(timer);
 586               		.loc 2 150 0
 587 02b8 8F81      		ldd r24,Y+7
 588 02ba 9885      		ldd r25,Y+8
 589 02bc 0E94 0000 		call placeTimer
 590               	.L26:
 151:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 		}
 152:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 
 153:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 		timer->handler(timer);
 591               		.loc 2 153 0
 592 02c0 8F81      		ldd r24,Y+7
 593 02c2 9885      		ldd r25,Y+8
 594 02c4 FC01      		movw r30,r24
 595 02c6 2385      		ldd r18,Z+11
 596 02c8 3485      		ldd r19,Z+12
 597 02ca 8F81      		ldd r24,Y+7
 598 02cc 9885      		ldd r25,Y+8
 599 02ce F901      		movw r30,r18
 600 02d0 0995      		icall
 601               	.L25:
 602               	.LBE5:
 144:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 		SYS_Timer_t *timer = timers;
 603               		.loc 2 144 0
 604 02d2 8091 0000 		lds r24,timers
 605 02d6 9091 0000 		lds r25,timers+1
 606 02da 892B      		or r24,r25
 607 02dc 01F0      		breq .L27
 144:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 		SYS_Timer_t *timer = timers;
 608               		.loc 2 144 0 is_stmt 0 discriminator 1
 609 02de 8091 0000 		lds r24,timers
 610 02e2 9091 0000 		lds r25,timers+1
 611 02e6 FC01      		movw r30,r24
 612 02e8 2281      		ldd r18,Z+2
 613 02ea 3381      		ldd r19,Z+3
 614 02ec 4481      		ldd r20,Z+4
 615 02ee 5581      		ldd r21,Z+5
 616 02f0 8981      		ldd r24,Y+1
 617 02f2 9A81      		ldd r25,Y+2
 618 02f4 AB81      		ldd r26,Y+3
 619 02f6 BC81      		ldd r27,Y+4
 620 02f8 8217      		cp r24,r18
 621 02fa 9307      		cpc r25,r19
 622 02fc A407      		cpc r26,r20
 623 02fe B507      		cpc r27,r21
 624 0300 00F0      		brlo .+2
 625 0302 00C0      		rjmp .L28
 626               	.L27:
 154:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 	}
 155:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 
 156:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 	if (timers) {
 627               		.loc 2 156 0 is_stmt 1
 628 0304 8091 0000 		lds r24,timers
 629 0308 9091 0000 		lds r25,timers+1
 630 030c 892B      		or r24,r25
 631 030e 01F0      		breq .L22
 157:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 		timers->timeout -= elapsed;
 632               		.loc 2 157 0
 633 0310 6091 0000 		lds r22,timers
 634 0314 7091 0000 		lds r23,timers+1
 635 0318 8091 0000 		lds r24,timers
 636 031c 9091 0000 		lds r25,timers+1
 637 0320 FC01      		movw r30,r24
 638 0322 2281      		ldd r18,Z+2
 639 0324 3381      		ldd r19,Z+3
 640 0326 4481      		ldd r20,Z+4
 641 0328 5581      		ldd r21,Z+5
 642 032a 8981      		ldd r24,Y+1
 643 032c 9A81      		ldd r25,Y+2
 644 032e AB81      		ldd r26,Y+3
 645 0330 BC81      		ldd r27,Y+4
 646 0332 7901      		movw r14,r18
 647 0334 8A01      		movw r16,r20
 648 0336 E81A      		sub r14,r24
 649 0338 F90A      		sbc r15,r25
 650 033a 0A0B      		sbc r16,r26
 651 033c 1B0B      		sbc r17,r27
 652 033e D801      		movw r26,r16
 653 0340 C701      		movw r24,r14
 654 0342 FB01      		movw r30,r22
 655 0344 8283      		std Z+2,r24
 656 0346 9383      		std Z+3,r25
 657 0348 A483      		std Z+4,r26
 658 034a B583      		std Z+5,r27
 659 034c 00C0      		rjmp .L22
 660               	.L29:
 132:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 	}
 661               		.loc 2 132 0
 662 034e 0000      		nop
 663               	.L22:
 664               	/* epilogue start */
 158:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 	}
 159:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** }
 665               		.loc 2 159 0
 666 0350 2896      		adiw r28,8
 667 0352 0FB6      		in __tmp_reg__,__SREG__
 668 0354 F894      		cli
 669 0356 DEBF      		out __SP_H__,r29
 670 0358 0FBE      		out __SREG__,__tmp_reg__
 671 035a CDBF      		out __SP_L__,r28
 672 035c DF91      		pop r29
 673 035e CF91      		pop r28
 674 0360 1F91      		pop r17
 675 0362 0F91      		pop r16
 676 0364 FF90      		pop r15
 677 0366 EF90      		pop r14
 678 0368 0895      		ret
 679               		.cfi_endproc
 680               	.LFE12:
 683               	placeTimer:
 684               	.LFB13:
 160:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 
 161:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** /*************************************************************************//**
 162:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** *****************************************************************************/
 163:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** static void placeTimer(SYS_Timer_t *timer)
 164:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** {
 685               		.loc 2 164 0
 686               		.cfi_startproc
 687 036a EF92      		push r14
 688               	.LCFI31:
 689               		.cfi_def_cfa_offset 3
 690               		.cfi_offset 14, -2
 691 036c FF92      		push r15
 692               	.LCFI32:
 693               		.cfi_def_cfa_offset 4
 694               		.cfi_offset 15, -3
 695 036e 0F93      		push r16
 696               	.LCFI33:
 697               		.cfi_def_cfa_offset 5
 698               		.cfi_offset 16, -4
 699 0370 1F93      		push r17
 700               	.LCFI34:
 701               		.cfi_def_cfa_offset 6
 702               		.cfi_offset 17, -5
 703 0372 CF93      		push r28
 704               	.LCFI35:
 705               		.cfi_def_cfa_offset 7
 706               		.cfi_offset 28, -6
 707 0374 DF93      		push r29
 708               	.LCFI36:
 709               		.cfi_def_cfa_offset 8
 710               		.cfi_offset 29, -7
 711 0376 CDB7      		in r28,__SP_L__
 712 0378 DEB7      		in r29,__SP_H__
 713               	.LCFI37:
 714               		.cfi_def_cfa_register 28
 715 037a 2A97      		sbiw r28,10
 716               	.LCFI38:
 717               		.cfi_def_cfa_offset 18
 718 037c 0FB6      		in __tmp_reg__,__SREG__
 719 037e F894      		cli
 720 0380 DEBF      		out __SP_H__,r29
 721 0382 0FBE      		out __SREG__,__tmp_reg__
 722 0384 CDBF      		out __SP_L__,r28
 723               	/* prologue: function */
 724               	/* frame size = 10 */
 725               	/* stack size = 16 */
 726               	.L__stack_usage = 16
 727 0386 9A87      		std Y+10,r25
 728 0388 8987      		std Y+9,r24
 165:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 	if (timers) {
 729               		.loc 2 165 0
 730 038a 8091 0000 		lds r24,timers
 731 038e 9091 0000 		lds r25,timers+1
 732 0392 892B      		or r24,r25
 733 0394 01F4      		brne .+2
 734 0396 00C0      		rjmp .L31
 735               	.LBB6:
 166:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 		SYS_Timer_t *prev = NULL;
 736               		.loc 2 166 0
 737 0398 1A82      		std Y+2,__zero_reg__
 738 039a 1982      		std Y+1,__zero_reg__
 167:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 		uint32_t timeout = timer->interval;
 739               		.loc 2 167 0
 740 039c 8985      		ldd r24,Y+9
 741 039e 9A85      		ldd r25,Y+10
 742 03a0 FC01      		movw r30,r24
 743 03a2 8681      		ldd r24,Z+6
 744 03a4 9781      		ldd r25,Z+7
 745 03a6 A085      		ldd r26,Z+8
 746 03a8 B185      		ldd r27,Z+9
 747 03aa 8B83      		std Y+3,r24
 748 03ac 9C83      		std Y+4,r25
 749 03ae AD83      		std Y+5,r26
 750 03b0 BE83      		std Y+6,r27
 751               	.LBB7:
 168:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 
 169:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 		for (SYS_Timer_t *t = timers; t; t = t->next) {
 752               		.loc 2 169 0
 753 03b2 8091 0000 		lds r24,timers
 754 03b6 9091 0000 		lds r25,timers+1
 755 03ba 9887      		std Y+8,r25
 756 03bc 8F83      		std Y+7,r24
 757 03be 00C0      		rjmp .L32
 758               	.L35:
 170:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 			if (timeout < t->timeout) {
 759               		.loc 2 170 0
 760 03c0 8F81      		ldd r24,Y+7
 761 03c2 9885      		ldd r25,Y+8
 762 03c4 FC01      		movw r30,r24
 763 03c6 2281      		ldd r18,Z+2
 764 03c8 3381      		ldd r19,Z+3
 765 03ca 4481      		ldd r20,Z+4
 766 03cc 5581      		ldd r21,Z+5
 767 03ce 8B81      		ldd r24,Y+3
 768 03d0 9C81      		ldd r25,Y+4
 769 03d2 AD81      		ldd r26,Y+5
 770 03d4 BE81      		ldd r27,Y+6
 771 03d6 8217      		cp r24,r18
 772 03d8 9307      		cpc r25,r19
 773 03da A407      		cpc r26,r20
 774 03dc B507      		cpc r27,r21
 775 03de 00F4      		brsh .L33
 171:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 				t->timeout -= timeout;
 776               		.loc 2 171 0
 777 03e0 8F81      		ldd r24,Y+7
 778 03e2 9885      		ldd r25,Y+8
 779 03e4 FC01      		movw r30,r24
 780 03e6 2281      		ldd r18,Z+2
 781 03e8 3381      		ldd r19,Z+3
 782 03ea 4481      		ldd r20,Z+4
 783 03ec 5581      		ldd r21,Z+5
 784 03ee 8B81      		ldd r24,Y+3
 785 03f0 9C81      		ldd r25,Y+4
 786 03f2 AD81      		ldd r26,Y+5
 787 03f4 BE81      		ldd r27,Y+6
 788 03f6 7901      		movw r14,r18
 789 03f8 8A01      		movw r16,r20
 790 03fa E81A      		sub r14,r24
 791 03fc F90A      		sbc r15,r25
 792 03fe 0A0B      		sbc r16,r26
 793 0400 1B0B      		sbc r17,r27
 794 0402 D801      		movw r26,r16
 795 0404 C701      		movw r24,r14
 796 0406 2F81      		ldd r18,Y+7
 797 0408 3885      		ldd r19,Y+8
 798 040a F901      		movw r30,r18
 799 040c 8283      		std Z+2,r24
 800 040e 9383      		std Z+3,r25
 801 0410 A483      		std Z+4,r26
 802 0412 B583      		std Z+5,r27
 172:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 				break;
 803               		.loc 2 172 0
 804 0414 00C0      		rjmp .L34
 805               	.L33:
 173:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 			} else {
 174:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 				timeout -= t->timeout;
 806               		.loc 2 174 0 discriminator 2
 807 0416 8F81      		ldd r24,Y+7
 808 0418 9885      		ldd r25,Y+8
 809 041a FC01      		movw r30,r24
 810 041c 8281      		ldd r24,Z+2
 811 041e 9381      		ldd r25,Z+3
 812 0420 A481      		ldd r26,Z+4
 813 0422 B581      		ldd r27,Z+5
 814 0424 2B81      		ldd r18,Y+3
 815 0426 3C81      		ldd r19,Y+4
 816 0428 4D81      		ldd r20,Y+5
 817 042a 5E81      		ldd r21,Y+6
 818 042c 7901      		movw r14,r18
 819 042e 8A01      		movw r16,r20
 820 0430 E81A      		sub r14,r24
 821 0432 F90A      		sbc r15,r25
 822 0434 0A0B      		sbc r16,r26
 823 0436 1B0B      		sbc r17,r27
 824 0438 D801      		movw r26,r16
 825 043a C701      		movw r24,r14
 826 043c 8B83      		std Y+3,r24
 827 043e 9C83      		std Y+4,r25
 828 0440 AD83      		std Y+5,r26
 829 0442 BE83      		std Y+6,r27
 175:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 			}
 176:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 
 177:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 			prev = t;
 830               		.loc 2 177 0 discriminator 2
 831 0444 8F81      		ldd r24,Y+7
 832 0446 9885      		ldd r25,Y+8
 833 0448 9A83      		std Y+2,r25
 834 044a 8983      		std Y+1,r24
 169:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 			if (timeout < t->timeout) {
 835               		.loc 2 169 0 discriminator 2
 836 044c 8F81      		ldd r24,Y+7
 837 044e 9885      		ldd r25,Y+8
 838 0450 FC01      		movw r30,r24
 839 0452 8081      		ld r24,Z
 840 0454 9181      		ldd r25,Z+1
 841 0456 9887      		std Y+8,r25
 842 0458 8F83      		std Y+7,r24
 843               	.L32:
 169:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 			if (timeout < t->timeout) {
 844               		.loc 2 169 0 is_stmt 0 discriminator 1
 845 045a 8F81      		ldd r24,Y+7
 846 045c 9885      		ldd r25,Y+8
 847 045e 892B      		or r24,r25
 848 0460 01F0      		breq .+2
 849 0462 00C0      		rjmp .L35
 850               	.L34:
 851               	.LBE7:
 178:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 		}
 179:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 
 180:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 		timer->timeout = timeout;
 852               		.loc 2 180 0 is_stmt 1
 853 0464 2985      		ldd r18,Y+9
 854 0466 3A85      		ldd r19,Y+10
 855 0468 8B81      		ldd r24,Y+3
 856 046a 9C81      		ldd r25,Y+4
 857 046c AD81      		ldd r26,Y+5
 858 046e BE81      		ldd r27,Y+6
 859 0470 F901      		movw r30,r18
 860 0472 8283      		std Z+2,r24
 861 0474 9383      		std Z+3,r25
 862 0476 A483      		std Z+4,r26
 863 0478 B583      		std Z+5,r27
 181:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 
 182:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 		if (prev) {
 864               		.loc 2 182 0
 865 047a 8981      		ldd r24,Y+1
 866 047c 9A81      		ldd r25,Y+2
 867 047e 892B      		or r24,r25
 868 0480 01F0      		breq .L36
 183:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 			timer->next = prev->next;
 869               		.loc 2 183 0
 870 0482 8981      		ldd r24,Y+1
 871 0484 9A81      		ldd r25,Y+2
 872 0486 FC01      		movw r30,r24
 873 0488 2081      		ld r18,Z
 874 048a 3181      		ldd r19,Z+1
 875 048c 8985      		ldd r24,Y+9
 876 048e 9A85      		ldd r25,Y+10
 877 0490 FC01      		movw r30,r24
 878 0492 3183      		std Z+1,r19
 879 0494 2083      		st Z,r18
 184:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 			prev->next = timer;
 880               		.loc 2 184 0
 881 0496 8981      		ldd r24,Y+1
 882 0498 9A81      		ldd r25,Y+2
 883 049a 2985      		ldd r18,Y+9
 884 049c 3A85      		ldd r19,Y+10
 885 049e FC01      		movw r30,r24
 886 04a0 3183      		std Z+1,r19
 887 04a2 2083      		st Z,r18
 888               	.LBE6:
 185:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 		} else {
 186:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 			timer->next = timers;
 187:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 			timers = timer;
 188:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 		}
 189:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 	} else {
 190:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 		timer->next = NULL;
 191:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 		timer->timeout = timer->interval;
 192:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 		timers = timer;
 193:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 	}
 194:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** }
 889               		.loc 2 194 0
 890 04a4 00C0      		rjmp .L39
 891               	.L36:
 892               	.LBB8:
 186:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 			timers = timer;
 893               		.loc 2 186 0
 894 04a6 2091 0000 		lds r18,timers
 895 04aa 3091 0000 		lds r19,timers+1
 896 04ae 8985      		ldd r24,Y+9
 897 04b0 9A85      		ldd r25,Y+10
 898 04b2 FC01      		movw r30,r24
 899 04b4 3183      		std Z+1,r19
 900 04b6 2083      		st Z,r18
 187:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 		}
 901               		.loc 2 187 0
 902 04b8 8985      		ldd r24,Y+9
 903 04ba 9A85      		ldd r25,Y+10
 904 04bc 9093 0000 		sts timers+1,r25
 905 04c0 8093 0000 		sts timers,r24
 906               	.LBE8:
 907               		.loc 2 194 0
 908 04c4 00C0      		rjmp .L39
 909               	.L31:
 190:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 		timer->timeout = timer->interval;
 910               		.loc 2 190 0
 911 04c6 8985      		ldd r24,Y+9
 912 04c8 9A85      		ldd r25,Y+10
 913 04ca FC01      		movw r30,r24
 914 04cc 1182      		std Z+1,__zero_reg__
 915 04ce 1082      		st Z,__zero_reg__
 191:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 		timers = timer;
 916               		.loc 2 191 0
 917 04d0 8985      		ldd r24,Y+9
 918 04d2 9A85      		ldd r25,Y+10
 919 04d4 FC01      		movw r30,r24
 920 04d6 8681      		ldd r24,Z+6
 921 04d8 9781      		ldd r25,Z+7
 922 04da A085      		ldd r26,Z+8
 923 04dc B185      		ldd r27,Z+9
 924 04de 2985      		ldd r18,Y+9
 925 04e0 3A85      		ldd r19,Y+10
 926 04e2 F901      		movw r30,r18
 927 04e4 8283      		std Z+2,r24
 928 04e6 9383      		std Z+3,r25
 929 04e8 A483      		std Z+4,r26
 930 04ea B583      		std Z+5,r27
 192:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 	}
 931               		.loc 2 192 0
 932 04ec 8985      		ldd r24,Y+9
 933 04ee 9A85      		ldd r25,Y+10
 934 04f0 9093 0000 		sts timers+1,r25
 935 04f4 8093 0000 		sts timers,r24
 936               	.L39:
 937               		.loc 2 194 0
 938 04f8 0000      		nop
 939               	/* epilogue start */
 940 04fa 2A96      		adiw r28,10
 941 04fc 0FB6      		in __tmp_reg__,__SREG__
 942 04fe F894      		cli
 943 0500 DEBF      		out __SP_H__,r29
 944 0502 0FBE      		out __SREG__,__tmp_reg__
 945 0504 CDBF      		out __SP_L__,r28
 946 0506 DF91      		pop r29
 947 0508 CF91      		pop r28
 948 050a 1F91      		pop r17
 949 050c 0F91      		pop r16
 950 050e FF90      		pop r15
 951 0510 EF90      		pop r14
 952 0512 0895      		ret
 953               		.cfi_endproc
 954               	.LFE13:
 956               	.global	SYS_HwExpiry_Cb
 958               	SYS_HwExpiry_Cb:
 959               	.LFB14:
 195:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 
 196:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** /*****************************************************************************
 197:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** *****************************************************************************/
 198:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** void SYS_HwExpiry_Cb(void)
 199:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** {
 960               		.loc 2 199 0
 961               		.cfi_startproc
 962 0514 CF93      		push r28
 963               	.LCFI39:
 964               		.cfi_def_cfa_offset 3
 965               		.cfi_offset 28, -2
 966 0516 DF93      		push r29
 967               	.LCFI40:
 968               		.cfi_def_cfa_offset 4
 969               		.cfi_offset 29, -3
 970 0518 CDB7      		in r28,__SP_L__
 971 051a DEB7      		in r29,__SP_H__
 972               	.LCFI41:
 973               		.cfi_def_cfa_register 28
 974               	/* prologue: function */
 975               	/* frame size = 0 */
 976               	/* stack size = 2 */
 977               	.L__stack_usage = 2
 200:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 	SysTimerIrqCount++;
 978               		.loc 2 200 0
 979 051c 8091 0000 		lds r24,SysTimerIrqCount
 980 0520 8F5F      		subi r24,lo8(-(1))
 981 0522 8093 0000 		sts SysTimerIrqCount,r24
 201:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 	common_tc_delay(SYS_TIMER_INTERVAL * MS);
 982               		.loc 2 201 0
 983 0526 80E1      		ldi r24,lo8(16)
 984 0528 97E2      		ldi r25,lo8(39)
 985 052a 0E94 0000 		call common_tc_delay
 202:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** }
 986               		.loc 2 202 0
 987 052e 0000      		nop
 988               	/* epilogue start */
 989 0530 DF91      		pop r29
 990 0532 CF91      		pop r28
 991 0534 0895      		ret
 992               		.cfi_endproc
 993               	.LFE14:
 995               	.Letext0:
 996               		.file 3 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\in
 997               		.file 4 "../../../stack/LwMesh/TDMA/sys/inc/sysTimer.h"
DEFINED SYMBOLS
                            *ABS*:00000000 sysTimer.c
C:\Users\guilh\AppData\Local\Temp\ccoiz6XT.s:2      *ABS*:0000003e __SP_H__
C:\Users\guilh\AppData\Local\Temp\ccoiz6XT.s:3      *ABS*:0000003d __SP_L__
C:\Users\guilh\AppData\Local\Temp\ccoiz6XT.s:4      *ABS*:0000003f __SREG__
C:\Users\guilh\AppData\Local\Temp\ccoiz6XT.s:5      *ABS*:0000003b __RAMPZ__
C:\Users\guilh\AppData\Local\Temp\ccoiz6XT.s:6      *ABS*:00000000 __tmp_reg__
C:\Users\guilh\AppData\Local\Temp\ccoiz6XT.s:7      *ABS*:00000001 __zero_reg__
C:\Users\guilh\AppData\Local\Temp\ccoiz6XT.s:12     .text:00000000 cpu_irq_save
C:\Users\guilh\AppData\Local\Temp\ccoiz6XT.s:60     .text:00000020 cpu_irq_restore
                            *COM*:00000001 SysTimerIrqCount
C:\Users\guilh\AppData\Local\Temp\ccoiz6XT.s:105    .bss.timers:00000000 timers
C:\Users\guilh\AppData\Local\Temp\ccoiz6XT.s:110    .text:00000040 SYS_TimerInit
C:\Users\guilh\AppData\Local\Temp\ccoiz6XT.s:958    .text:00000514 SYS_HwExpiry_Cb
C:\Users\guilh\AppData\Local\Temp\ccoiz6XT.s:157    .text:00000070 SYS_TimerStart
C:\Users\guilh\AppData\Local\Temp\ccoiz6XT.s:372    .text:0000018e SYS_TimerStarted
C:\Users\guilh\AppData\Local\Temp\ccoiz6XT.s:683    .text:0000036a placeTimer
C:\Users\guilh\AppData\Local\Temp\ccoiz6XT.s:209    .text:000000a4 SYS_TimerStop
C:\Users\guilh\AppData\Local\Temp\ccoiz6XT.s:450    .text:000001e4 SYS_TimerTaskHandler

UNDEFINED SYMBOLS
set_common_tc_expiry_callback
common_tc_init
common_tc_delay
__do_clear_bss
