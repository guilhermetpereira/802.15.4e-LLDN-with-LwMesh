   1              	 .cpu cortex-m4
   2              	 .eabi_attribute 20,1
   3              	 .eabi_attribute 21,1
   4              	 .eabi_attribute 23,3
   5              	 .eabi_attribute 24,1
   6              	 .eabi_attribute 25,1
   7              	 .eabi_attribute 26,1
   8              	 .eabi_attribute 30,6
   9              	 .eabi_attribute 34,1
  10              	 .eabi_attribute 18,4
  11              	 .file "sysTimer.c"
  12              	 .text
  13              	.Ltext0:
  14              	 .cfi_sections .debug_frame
  15              	 .section .bss.cpu_irq_critical_section_counter,"aw",%nobits
  16              	 .align 2
  19              	cpu_irq_critical_section_counter:
  20 0000 00000000 	 .space 4
  21              	 .section .bss.cpu_irq_prev_interrupt_state,"aw",%nobits
  24              	cpu_irq_prev_interrupt_state:
  25 0000 00       	 .space 1
  26              	 .text
  27              	 .align 1
  28              	 .syntax unified
  29              	 .thumb
  30              	 .thumb_func
  31              	 .fpu softvfp
  33              	cpu_irq_save:
  34              	.LFB112:
  35              	 .file 1 "../../../platform/common/utils/interrupt/interrupt_sam_nvic.h"
   1:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** /**
   2:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  * \file
   3:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  *
   4:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  * \brief Global interrupt management for SAM D20, SAM3 and SAM4 (NVIC based)
   5:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  *
   6:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  * Copyright (c) 2012-2013 Atmel Corporation. All rights reserved.
   7:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  *
   8:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  * \asf_license_start
   9:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  *
  10:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  * \page License
  11:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  *
  12:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  * Redistribution and use in source and binary forms, with or without
  13:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  * modification, are permitted provided that the following conditions are met:
  14:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  *
  15:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  * 1. Redistributions of source code must retain the above copyright notice,
  16:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  *    this list of conditions and the following disclaimer.
  17:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  *
  18:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  * 2. Redistributions in binary form must reproduce the above copyright notice,
  19:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  *    this list of conditions and the following disclaimer in the documentation
  20:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  *    and/or other materials provided with the distribution.
  21:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  *
  22:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  * 3. The name of Atmel may not be used to endorse or promote products derived
  23:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  *    from this software without specific prior written permission.
  24:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  *
  25:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  * 4. This software may only be redistributed and used in connection with an
  26:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  *    Atmel microcontroller product.
  27:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  *
  28:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  * THIS SOFTWARE IS PROVIDED BY ATMEL "AS IS" AND ANY EXPRESS OR IMPLIED
  29:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
  30:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE
  31:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  * EXPRESSLY AND SPECIFICALLY DISCLAIMED. IN NO EVENT SHALL ATMEL BE LIABLE FOR
  32:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  33:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
  34:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
  35:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
  36:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
  37:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  38:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  * POSSIBILITY OF SUCH DAMAGE.
  39:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  *
  40:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  * \asf_license_stop
  41:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  *
  42:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  */
  43:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** 
  44:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** #ifndef UTILS_INTERRUPT_INTERRUPT_H
  45:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** #define UTILS_INTERRUPT_INTERRUPT_H
  46:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** 
  47:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** #include <compiler.h>
  48:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** #include <parts.h>
  49:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** 
  50:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** /**
  51:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  * \weakgroup interrupt_group
  52:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  *
  53:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  * @{
  54:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  */
  55:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** 
  56:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** /**
  57:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  * \name Interrupt Service Routine definition
  58:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  *
  59:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  * @{
  60:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  */
  61:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** 
  62:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** /**
  63:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  * \brief Define service routine
  64:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  *
  65:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  * \note For NVIC devices the interrupt service routines are predefined to
  66:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  *       add to vector table in binary generation, so there is no service
  67:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  *       register at run time. The routine collections are in exceptions.h.
  68:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  *
  69:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  * Usage:
  70:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  * \code
  71:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  * ISR(foo_irq_handler)
  72:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  * {
  73:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  *      // Function definition
  74:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  *      ...
  75:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  * }
  76:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  * \endcode
  77:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  *
  78:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  * \param func Name for the function.
  79:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  */
  80:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** #  define ISR(func)   \
  81:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** 	void func (void)
  82:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** 
  83:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** /**
  84:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  * \brief Initialize interrupt vectors
  85:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  *
  86:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  * For NVIC the interrupt vectors are put in vector table. So nothing
  87:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  * to do to initialize them, except defined the vector function with
  88:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  * right name.
  89:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  *
  90:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  * This must be called prior to \ref irq_register_handler.
  91:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  */
  92:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** #  define irq_initialize_vectors()   \
  93:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** 	do {                             \
  94:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** 	} while(0)
  95:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** 
  96:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** /**
  97:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  * \brief Register handler for interrupt
  98:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  *
  99:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  * For NVIC the interrupt vectors are put in vector table. So nothing
 100:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  * to do to register them, except defined the vector function with
 101:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  * right name.
 102:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  *
 103:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  * Usage:
 104:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  * \code
 105:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  * irq_initialize_vectors();
 106:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  * irq_register_handler(foo_irq_handler);
 107:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  * \endcode
 108:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  *
 109:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  * \note The function \a func must be defined with the \ref ISR macro.
 110:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  * \note The functions prototypes can be found in the device exception header
 111:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  *       files (exceptions.h).
 112:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  */
 113:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** #  define irq_register_handler(int_num, int_prio)                      \
 114:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** 	NVIC_ClearPendingIRQ(    (IRQn_Type)int_num);                      \
 115:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** 	NVIC_SetPriority(    (IRQn_Type)int_num, int_prio);                \
 116:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** 	NVIC_EnableIRQ(      (IRQn_Type)int_num);                          \
 117:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** 
 118:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** //@}
 119:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** 
 120:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** #  define cpu_irq_enable()                     \
 121:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** 	do {                                       \
 122:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** 		g_interrupt_enabled = true;            \
 123:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** 		__DMB();                               \
 124:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** 		__enable_irq();                        \
 125:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** 	} while (0)
 126:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** #  define cpu_irq_disable()                    \
 127:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** 	do {                                       \
 128:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** 		__disable_irq();                       \
 129:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** 		__DMB();                               \
 130:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** 		g_interrupt_enabled = false;           \
 131:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** 	} while (0)
 132:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** 
 133:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** typedef uint32_t irqflags_t;
 134:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** 
 135:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** #if !defined(__DOXYGEN__)
 136:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** extern volatile bool g_interrupt_enabled;
 137:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** #endif
 138:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** 
 139:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** #define cpu_irq_is_enabled()    (__get_PRIMASK() == 0)
 140:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** 
 141:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** static volatile uint32_t cpu_irq_critical_section_counter;
 142:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** static volatile bool     cpu_irq_prev_interrupt_state;
 143:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** 
 144:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** static inline irqflags_t cpu_irq_save(void)
 145:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** {
  36              	 .loc 1 145 0
  37              	 .cfi_startproc
  38              	 
  39              	 
  40              	 
  41 0000 80B4     	 push {r7}
  42              	.LCFI0:
  43              	 .cfi_def_cfa_offset 4
  44              	 .cfi_offset 7,-4
  45 0002 83B0     	 sub sp,sp,#12
  46              	.LCFI1:
  47              	 .cfi_def_cfa_offset 16
  48 0004 00AF     	 add r7,sp,#0
  49              	.LCFI2:
  50              	 .cfi_def_cfa_register 7
  51              	.LBB12:
  52              	.LBB13:
  53              	 .file 2 "../../../platform/thirdparty/CMSIS/include/core_cmFunc.h"
   1:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** /**************************************************************************//**
   2:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  * @file     core_cmFunc.h
   3:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  * @brief    CMSIS Cortex-M Core Function Access Header File
   4:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  * @version  V3.00
   5:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  * @date     19. January 2012
   6:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  *
   7:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  * @note
   8:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  * Copyright (C) 2009-2012 ARM Limited. All rights reserved.
   9:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  *
  10:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  * @par
  11:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  * ARM Limited (ARM) is supplying this software for use with Cortex-M 
  12:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  * processor based microcontrollers.  This file can be freely distributed 
  13:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  * within development tools that are supporting such ARM based processors. 
  14:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  *
  15:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  * @par
  16:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
  17:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
  18:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
  19:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  * ARM SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR
  20:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
  21:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  *
  22:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  ******************************************************************************/
  23:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
  24:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** #ifndef __CORE_CMFUNC_H
  25:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** #define __CORE_CMFUNC_H
  26:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
  27:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** /* ###########################  Core Function Access  ########################### */
  28:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** /** \ingroup  CMSIS_Core_FunctionInterface   
  29:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
  30:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   @{
  31:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  */
  32:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
  33:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** #if   defined ( __CC_ARM ) /*------------------RealView Compiler -----------------*/
  34:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** /* ARM armcc specific functions */
  35:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
  36:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** #if (__ARMCC_VERSION < 400677)
  37:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   #error "Please use ARM Compiler Toolchain V4.0.677 or later!"
  38:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** #endif
  39:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
  40:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** /* intrinsic void __enable_irq();     */
  41:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** /* intrinsic void __disable_irq();    */
  42:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
  43:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** /** \brief  Get Control Register
  44:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
  45:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     This function returns the content of the Control Register.
  46:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
  47:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     \return               Control Register value
  48:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  */
  49:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** __STATIC_INLINE uint32_t __get_CONTROL(void)
  50:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** {
  51:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   register uint32_t __regControl         __ASM("control");
  52:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   return(__regControl);
  53:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** }
  54:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
  55:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
  56:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** /** \brief  Set Control Register
  57:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
  58:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     This function writes the given value to the Control Register.
  59:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
  60:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     \param [in]    control  Control Register value to set
  61:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  */
  62:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** __STATIC_INLINE void __set_CONTROL(uint32_t control)
  63:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** {
  64:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   register uint32_t __regControl         __ASM("control");
  65:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   __regControl = control;
  66:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** }
  67:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
  68:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
  69:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** /** \brief  Get IPSR Register
  70:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
  71:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     This function returns the content of the IPSR Register.
  72:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
  73:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     \return               IPSR Register value
  74:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  */
  75:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** __STATIC_INLINE uint32_t __get_IPSR(void)
  76:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** {
  77:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   register uint32_t __regIPSR          __ASM("ipsr");
  78:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   return(__regIPSR);
  79:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** }
  80:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
  81:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
  82:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** /** \brief  Get APSR Register
  83:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
  84:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     This function returns the content of the APSR Register.
  85:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
  86:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     \return               APSR Register value
  87:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  */
  88:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** __STATIC_INLINE uint32_t __get_APSR(void)
  89:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** {
  90:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   register uint32_t __regAPSR          __ASM("apsr");
  91:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   return(__regAPSR);
  92:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** }
  93:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
  94:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
  95:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** /** \brief  Get xPSR Register
  96:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
  97:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     This function returns the content of the xPSR Register.
  98:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
  99:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     \return               xPSR Register value
 100:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  */
 101:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** __STATIC_INLINE uint32_t __get_xPSR(void)
 102:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** {
 103:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   register uint32_t __regXPSR          __ASM("xpsr");
 104:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   return(__regXPSR);
 105:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** }
 106:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 107:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 108:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** /** \brief  Get Process Stack Pointer
 109:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 110:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     This function returns the current value of the Process Stack Pointer (PSP).
 111:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 112:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     \return               PSP Register value
 113:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  */
 114:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** __STATIC_INLINE uint32_t __get_PSP(void)
 115:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** {
 116:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   register uint32_t __regProcessStackPointer  __ASM("psp");
 117:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   return(__regProcessStackPointer);
 118:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** }
 119:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 120:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 121:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** /** \brief  Set Process Stack Pointer
 122:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 123:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     This function assigns the given value to the Process Stack Pointer (PSP).
 124:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 125:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     \param [in]    topOfProcStack  Process Stack Pointer value to set
 126:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  */
 127:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
 128:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** {
 129:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   register uint32_t __regProcessStackPointer  __ASM("psp");
 130:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   __regProcessStackPointer = topOfProcStack;
 131:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** }
 132:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 133:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 134:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** /** \brief  Get Main Stack Pointer
 135:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 136:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     This function returns the current value of the Main Stack Pointer (MSP).
 137:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 138:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     \return               MSP Register value
 139:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  */
 140:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** __STATIC_INLINE uint32_t __get_MSP(void)
 141:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** {
 142:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   register uint32_t __regMainStackPointer     __ASM("msp");
 143:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   return(__regMainStackPointer);
 144:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** }
 145:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 146:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 147:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** /** \brief  Set Main Stack Pointer
 148:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 149:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     This function assigns the given value to the Main Stack Pointer (MSP).
 150:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 151:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     \param [in]    topOfMainStack  Main Stack Pointer value to set
 152:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  */
 153:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
 154:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** {
 155:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   register uint32_t __regMainStackPointer     __ASM("msp");
 156:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   __regMainStackPointer = topOfMainStack;
 157:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** }
 158:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 159:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 160:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** /** \brief  Get Priority Mask
 161:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 162:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     This function returns the current state of the priority mask bit from the Priority Mask Registe
 163:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 164:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     \return               Priority Mask value
 165:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  */
 166:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** __STATIC_INLINE uint32_t __get_PRIMASK(void)
 167:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** {
 168:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   register uint32_t __regPriMask         __ASM("primask");
 169:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   return(__regPriMask);
 170:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** }
 171:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 172:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 173:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** /** \brief  Set Priority Mask
 174:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 175:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     This function assigns the given value to the Priority Mask Register.
 176:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 177:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     \param [in]    priMask  Priority Mask
 178:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  */
 179:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
 180:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** {
 181:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   register uint32_t __regPriMask         __ASM("primask");
 182:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   __regPriMask = (priMask);
 183:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** }
 184:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  
 185:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 186:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** #if       (__CORTEX_M >= 0x03)
 187:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 188:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** /** \brief  Enable FIQ
 189:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 190:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     This function enables FIQ interrupts by clearing the F-bit in the CPSR.
 191:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     Can only be executed in Privileged modes.
 192:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  */
 193:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** #define __enable_fault_irq                __enable_fiq
 194:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 195:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 196:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** /** \brief  Disable FIQ
 197:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 198:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     This function disables FIQ interrupts by setting the F-bit in the CPSR.
 199:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     Can only be executed in Privileged modes.
 200:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  */
 201:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** #define __disable_fault_irq               __disable_fiq
 202:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 203:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 204:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** /** \brief  Get Base Priority
 205:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 206:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     This function returns the current value of the Base Priority register.
 207:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 208:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     \return               Base Priority register value
 209:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  */
 210:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** __STATIC_INLINE uint32_t  __get_BASEPRI(void)
 211:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** {
 212:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   register uint32_t __regBasePri         __ASM("basepri");
 213:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   return(__regBasePri);
 214:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** }
 215:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 216:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 217:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** /** \brief  Set Base Priority
 218:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 219:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     This function assigns the given value to the Base Priority register.
 220:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 221:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     \param [in]    basePri  Base Priority value to set
 222:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  */
 223:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** __STATIC_INLINE void __set_BASEPRI(uint32_t basePri)
 224:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** {
 225:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   register uint32_t __regBasePri         __ASM("basepri");
 226:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   __regBasePri = (basePri & 0xff);
 227:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** }
 228:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  
 229:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 230:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** /** \brief  Get Fault Mask
 231:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 232:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     This function returns the current value of the Fault Mask register.
 233:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 234:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     \return               Fault Mask register value
 235:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  */
 236:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** __STATIC_INLINE uint32_t __get_FAULTMASK(void)
 237:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** {
 238:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   register uint32_t __regFaultMask       __ASM("faultmask");
 239:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   return(__regFaultMask);
 240:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** }
 241:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 242:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 243:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** /** \brief  Set Fault Mask
 244:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 245:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     This function assigns the given value to the Fault Mask register.
 246:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 247:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     \param [in]    faultMask  Fault Mask value to set
 248:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  */
 249:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** __STATIC_INLINE void __set_FAULTMASK(uint32_t faultMask)
 250:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** {
 251:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   register uint32_t __regFaultMask       __ASM("faultmask");
 252:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   __regFaultMask = (faultMask & (uint32_t)1);
 253:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** }
 254:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 255:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** #endif /* (__CORTEX_M >= 0x03) */
 256:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 257:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 258:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** #if       (__CORTEX_M == 0x04)
 259:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 260:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** /** \brief  Get FPSCR
 261:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 262:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     This function returns the current value of the Floating Point Status/Control register.
 263:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 264:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     \return               Floating Point Status/Control register value
 265:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  */
 266:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** __STATIC_INLINE uint32_t __get_FPSCR(void)
 267:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** {
 268:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
 269:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   register uint32_t __regfpscr         __ASM("fpscr");
 270:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   return(__regfpscr);
 271:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** #else
 272:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****    return(0);
 273:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** #endif
 274:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** }
 275:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 276:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 277:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** /** \brief  Set FPSCR
 278:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 279:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     This function assigns the given value to the Floating Point Status/Control register.
 280:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 281:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     \param [in]    fpscr  Floating Point Status/Control value to set
 282:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  */
 283:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** __STATIC_INLINE void __set_FPSCR(uint32_t fpscr)
 284:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** {
 285:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
 286:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   register uint32_t __regfpscr         __ASM("fpscr");
 287:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   __regfpscr = (fpscr);
 288:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** #endif
 289:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** }
 290:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 291:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** #endif /* (__CORTEX_M == 0x04) */
 292:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 293:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 294:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** #elif defined ( __ICCARM__ ) /*------------------ ICC Compiler -------------------*/
 295:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** /* IAR iccarm specific functions */
 296:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 297:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** #include <cmsis_iar.h>
 298:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 299:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 300:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** #elif defined ( __TMS470__ ) /*---------------- TI CCS Compiler ------------------*/
 301:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** /* TI CCS specific functions */
 302:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 303:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** #include <cmsis_ccs.h>
 304:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 305:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 306:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** #elif defined ( __GNUC__ ) /*------------------ GNU Compiler ---------------------*/
 307:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** /* GNU gcc specific functions */
 308:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 309:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** /** \brief  Enable IRQ Interrupts
 310:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 311:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   This function enables IRQ interrupts by clearing the I-bit in the CPSR.
 312:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   Can only be executed in Privileged modes.
 313:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  */
 314:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
 315:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** {
 316:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   __ASM volatile ("cpsie i");
 317:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** }
 318:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 319:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 320:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** /** \brief  Disable IRQ Interrupts
 321:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 322:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   This function disables IRQ interrupts by setting the I-bit in the CPSR.
 323:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   Can only be executed in Privileged modes.
 324:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  */
 325:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
 326:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** {
 327:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   __ASM volatile ("cpsid i");
 328:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** }
 329:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 330:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 331:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** /** \brief  Get Control Register
 332:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 333:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     This function returns the content of the Control Register.
 334:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 335:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     \return               Control Register value
 336:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  */
 337:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_CONTROL(void)
 338:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** {
 339:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   uint32_t result;
 340:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 341:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
 342:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   return(result);
 343:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** }
 344:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 345:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 346:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** /** \brief  Set Control Register
 347:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 348:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     This function writes the given value to the Control Register.
 349:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 350:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     \param [in]    control  Control Register value to set
 351:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  */
 352:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_CONTROL(uint32_t control)
 353:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** {
 354:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) );
 355:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** }
 356:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 357:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 358:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** /** \brief  Get IPSR Register
 359:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 360:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     This function returns the content of the IPSR Register.
 361:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 362:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     \return               IPSR Register value
 363:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  */
 364:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
 365:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** {
 366:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   uint32_t result;
 367:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 368:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 369:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   return(result);
 370:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** }
 371:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 372:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 373:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** /** \brief  Get APSR Register
 374:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 375:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     This function returns the content of the APSR Register.
 376:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 377:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     \return               APSR Register value
 378:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  */
 379:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_APSR(void)
 380:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** {
 381:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   uint32_t result;
 382:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 383:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 384:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   return(result);
 385:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** }
 386:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 387:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 388:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** /** \brief  Get xPSR Register
 389:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 390:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     This function returns the content of the xPSR Register.
 391:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 392:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     \return               xPSR Register value
 393:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  */
 394:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_xPSR(void)
 395:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** {
 396:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   uint32_t result;
 397:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 398:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 399:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   return(result);
 400:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** }
 401:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 402:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 403:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** /** \brief  Get Process Stack Pointer
 404:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 405:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     This function returns the current value of the Process Stack Pointer (PSP).
 406:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 407:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     \return               PSP Register value
 408:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  */
 409:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
 410:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** {
 411:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   register uint32_t result;
 412:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 413:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 414:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   return(result);
 415:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** }
 416:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  
 417:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 418:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** /** \brief  Set Process Stack Pointer
 419:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 420:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     This function assigns the given value to the Process Stack Pointer (PSP).
 421:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 422:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     \param [in]    topOfProcStack  Process Stack Pointer value to set
 423:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  */
 424:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
 425:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** {
 426:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) );
 427:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** }
 428:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 429:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 430:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** /** \brief  Get Main Stack Pointer
 431:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 432:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     This function returns the current value of the Main Stack Pointer (MSP).
 433:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 434:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     \return               MSP Register value
 435:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  */
 436:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_MSP(void)
 437:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** {
 438:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   register uint32_t result;
 439:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 440:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   __ASM volatile ("MRS %0, msp\n" : "=r" (result) );
 441:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   return(result);
 442:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** }
 443:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  
 444:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 445:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** /** \brief  Set Main Stack Pointer
 446:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 447:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     This function assigns the given value to the Main Stack Pointer (MSP).
 448:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 449:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     \param [in]    topOfMainStack  Main Stack Pointer value to set
 450:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  */
 451:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
 452:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** {
 453:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   __ASM volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) );
 454:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** }
 455:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 456:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 457:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** /** \brief  Get Priority Mask
 458:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 459:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     This function returns the current state of the priority mask bit from the Priority Mask Registe
 460:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 461:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     \return               Priority Mask value
 462:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  */
 463:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
 464:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** {
 465:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   uint32_t result;
 466:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 467:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) );
  54              	 .loc 2 467 0
  55              	 .syntax unified
  56              	
  57 0006 EFF31083 	 MRS r3,primask
  58              	
  59              	 .thumb
  60              	 .syntax unified
  61 000a 3B60     	 str r3,[r7]
 468:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   return(result);
  62              	 .loc 2 468 0
  63 000c 3B68     	 ldr r3,[r7]
  64              	.LBE13:
  65              	.LBE12:
 146:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** 	irqflags_t flags = cpu_irq_is_enabled();
  66              	 .loc 1 146 0
  67 000e 002B     	 cmp r3,#0
  68 0010 0CBF     	 ite eq
  69 0012 0123     	 moveq r3,#1
  70 0014 0023     	 movne r3,#0
  71 0016 DBB2     	 uxtb r3,r3
  72 0018 7B60     	 str r3,[r7,#4]
  73              	.LBB14:
  74              	.LBB15:
 327:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** }
  75              	 .loc 2 327 0
  76              	 .syntax unified
  77              	
  78 001a 72B6     	 cpsid i
  79              	
  80              	 .thumb
  81              	 .syntax unified
  82              	.LBE15:
  83              	.LBE14:
  84              	.LBB16:
  85              	.LBB17:
  86              	 .file 3 "../../../platform/thirdparty/CMSIS/include/core_cmInstr.h"
   1:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /**************************************************************************//**
   2:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  * @file     core_cmInstr.h
   3:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  * @brief    CMSIS Cortex-M Core Instruction Access Header File
   4:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  * @version  V3.00
   5:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  * @date     07. February 2012
   6:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  *
   7:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  * @note
   8:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  * Copyright (C) 2009-2012 ARM Limited. All rights reserved.
   9:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  *
  10:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  * @par
  11:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  * ARM Limited (ARM) is supplying this software for use with Cortex-M
  12:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  * processor based microcontrollers.  This file can be freely distributed
  13:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  * within development tools that are supporting such ARM based processors.
  14:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  *
  15:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  * @par
  16:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
  17:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
  18:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
  19:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  * ARM SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR
  20:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
  21:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  *
  22:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  ******************************************************************************/
  23:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
  24:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** #ifndef __CORE_CMINSTR_H
  25:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** #define __CORE_CMINSTR_H
  26:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
  27:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
  28:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /* ##########################  Core Instruction Access  ######################### */
  29:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
  30:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****   Access to dedicated instructions
  31:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****   @{
  32:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** */
  33:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
  34:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** #if   defined ( __CC_ARM ) /*------------------RealView Compiler -----------------*/
  35:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /* ARM armcc specific functions */
  36:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
  37:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** #if (__ARMCC_VERSION < 400677)
  38:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****   #error "Please use ARM Compiler Toolchain V4.0.677 or later!"
  39:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** #endif
  40:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
  41:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
  42:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /** \brief  No Operation
  43:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
  44:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     No Operation does nothing. This instruction can be used for code alignment purposes.
  45:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  */
  46:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** #define __NOP                             __nop
  47:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
  48:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
  49:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /** \brief  Wait For Interrupt
  50:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
  51:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     Wait For Interrupt is a hint instruction that suspends execution
  52:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     until one of a number of events occurs.
  53:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  */
  54:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** #define __WFI                             __wfi
  55:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
  56:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
  57:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /** \brief  Wait For Event
  58:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
  59:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     Wait For Event is a hint instruction that permits the processor to enter
  60:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     a low-power state until one of a number of events occurs.
  61:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  */
  62:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** #define __WFE                             __wfe
  63:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
  64:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
  65:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /** \brief  Send Event
  66:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
  67:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     Send Event is a hint instruction. It causes an event to be signaled to the CPU.
  68:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  */
  69:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** #define __SEV                             __sev
  70:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
  71:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
  72:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /** \brief  Instruction Synchronization Barrier
  73:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
  74:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     Instruction Synchronization Barrier flushes the pipeline in the processor,
  75:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     so that all instructions following the ISB are fetched from cache or
  76:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     memory, after the instruction has been completed.
  77:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  */
  78:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** #define __ISB()                           __isb(0xF)
  79:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
  80:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
  81:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /** \brief  Data Synchronization Barrier
  82:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
  83:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     This function acts as a special kind of Data Memory Barrier.
  84:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     It completes when all explicit memory accesses before this instruction complete.
  85:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  */
  86:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** #define __DSB()                           __dsb(0xF)
  87:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
  88:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
  89:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /** \brief  Data Memory Barrier
  90:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
  91:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     This function ensures the apparent order of the explicit memory operations before
  92:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     and after the instruction, without ensuring their completion.
  93:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  */
  94:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** #define __DMB()                           __dmb(0xF)
  95:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
  96:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
  97:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /** \brief  Reverse byte order (32 bit)
  98:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
  99:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     This function reverses the byte order in integer value.
 100:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 101:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \param [in]    value  Value to reverse
 102:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \return               Reversed value
 103:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  */
 104:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** #define __REV                             __rev
 105:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 106:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 107:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /** \brief  Reverse byte order (16 bit)
 108:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 109:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     This function reverses the byte order in two unsigned short values.
 110:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 111:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \param [in]    value  Value to reverse
 112:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \return               Reversed value
 113:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  */
 114:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** __attribute__((section(".rev16_text"))) __STATIC_INLINE __ASM uint32_t __REV16(uint32_t value)
 115:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** {
 116:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****   rev16 r0, r0
 117:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****   bx lr
 118:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** }
 119:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 120:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 121:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /** \brief  Reverse byte order in signed short value
 122:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 123:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     This function reverses the byte order in a signed short value with sign extension to integer.
 124:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 125:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \param [in]    value  Value to reverse
 126:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \return               Reversed value
 127:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  */
 128:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** __attribute__((section(".revsh_text"))) __STATIC_INLINE __ASM int32_t __REVSH(int32_t value)
 129:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** {
 130:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****   revsh r0, r0
 131:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****   bx lr
 132:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** }
 133:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 134:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 135:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /** \brief  Rotate Right in unsigned value (32 bit)
 136:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 137:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     This function Rotate Right (immediate) provides the value of the contents of a register rotated
 138:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 139:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \param [in]    value  Value to rotate
 140:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \param [in]    value  Number of Bits to rotate
 141:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \return               Rotated value
 142:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  */
 143:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** #define __ROR                             __ror
 144:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 145:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 146:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** #if       (__CORTEX_M >= 0x03)
 147:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 148:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /** \brief  Reverse bit order of value
 149:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 150:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     This function reverses the bit order of the given value.
 151:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 152:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \param [in]    value  Value to reverse
 153:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \return               Reversed value
 154:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  */
 155:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** #define __RBIT                            __rbit
 156:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 157:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 158:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /** \brief  LDR Exclusive (8 bit)
 159:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 160:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     This function performs a exclusive LDR command for 8 bit value.
 161:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 162:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 163:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \return             value of type uint8_t at (*ptr)
 164:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  */
 165:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** #define __LDREXB(ptr)                     ((uint8_t ) __ldrex(ptr))
 166:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 167:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 168:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /** \brief  LDR Exclusive (16 bit)
 169:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 170:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     This function performs a exclusive LDR command for 16 bit values.
 171:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 172:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 173:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \return        value of type uint16_t at (*ptr)
 174:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  */
 175:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** #define __LDREXH(ptr)                     ((uint16_t) __ldrex(ptr))
 176:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 177:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 178:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /** \brief  LDR Exclusive (32 bit)
 179:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 180:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     This function performs a exclusive LDR command for 32 bit values.
 181:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 182:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 183:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \return        value of type uint32_t at (*ptr)
 184:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  */
 185:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** #define __LDREXW(ptr)                     ((uint32_t ) __ldrex(ptr))
 186:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 187:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 188:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /** \brief  STR Exclusive (8 bit)
 189:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 190:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     This function performs a exclusive STR command for 8 bit values.
 191:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 192:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \param [in]  value  Value to store
 193:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 194:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \return          0  Function succeeded
 195:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \return          1  Function failed
 196:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  */
 197:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** #define __STREXB(value, ptr)              __strex(value, ptr)
 198:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 199:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 200:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /** \brief  STR Exclusive (16 bit)
 201:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 202:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     This function performs a exclusive STR command for 16 bit values.
 203:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 204:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \param [in]  value  Value to store
 205:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 206:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \return          0  Function succeeded
 207:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \return          1  Function failed
 208:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  */
 209:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** #define __STREXH(value, ptr)              __strex(value, ptr)
 210:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 211:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 212:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /** \brief  STR Exclusive (32 bit)
 213:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 214:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     This function performs a exclusive STR command for 32 bit values.
 215:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 216:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \param [in]  value  Value to store
 217:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 218:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \return          0  Function succeeded
 219:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \return          1  Function failed
 220:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  */
 221:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** #define __STREXW(value, ptr)              __strex(value, ptr)
 222:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 223:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 224:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /** \brief  Remove the exclusive lock
 225:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 226:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     This function removes the exclusive lock which is created by LDREX.
 227:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 228:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  */
 229:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** #define __CLREX                           __clrex
 230:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 231:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 232:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /** \brief  Signed Saturate
 233:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 234:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     This function saturates a signed value.
 235:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 236:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \param [in]  value  Value to be saturated
 237:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \param [in]    sat  Bit position to saturate to (1..32)
 238:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \return             Saturated value
 239:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  */
 240:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** #define __SSAT                            __ssat
 241:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 242:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 243:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /** \brief  Unsigned Saturate
 244:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 245:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     This function saturates an unsigned value.
 246:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 247:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \param [in]  value  Value to be saturated
 248:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \param [in]    sat  Bit position to saturate to (0..31)
 249:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \return             Saturated value
 250:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  */
 251:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** #define __USAT                            __usat
 252:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 253:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 254:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /** \brief  Count leading zeros
 255:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 256:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     This function counts the number of leading zeros of a data value.
 257:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 258:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \param [in]  value  Value to count the leading zeros
 259:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \return             number of leading zeros in value
 260:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  */
 261:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** #define __CLZ                             __clz
 262:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 263:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** #endif /* (__CORTEX_M >= 0x03) */
 264:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 265:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 266:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 267:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** #elif defined ( __ICCARM__ ) /*------------------ ICC Compiler -------------------*/
 268:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /* IAR iccarm specific functions */
 269:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 270:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** #include <cmsis_iar.h>
 271:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 272:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 273:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** #elif defined ( __TMS470__ ) /*---------------- TI CCS Compiler ------------------*/
 274:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /* TI CCS specific functions */
 275:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 276:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** #include <cmsis_ccs.h>
 277:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 278:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 279:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** #elif defined ( __GNUC__ ) /*------------------ GNU Compiler ---------------------*/
 280:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /* GNU gcc specific functions */
 281:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 282:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /** \brief  No Operation
 283:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 284:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     No Operation does nothing. This instruction can be used for code alignment purposes.
 285:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  */
 286:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
 287:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** {
 288:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****   __ASM volatile ("nop");
 289:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** }
 290:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 291:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 292:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /** \brief  Wait For Interrupt
 293:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 294:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     Wait For Interrupt is a hint instruction that suspends execution
 295:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     until one of a number of events occurs.
 296:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  */
 297:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __WFI(void)
 298:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** {
 299:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****   __ASM volatile ("wfi");
 300:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** }
 301:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 302:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 303:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /** \brief  Wait For Event
 304:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 305:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     Wait For Event is a hint instruction that permits the processor to enter
 306:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     a low-power state until one of a number of events occurs.
 307:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  */
 308:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __WFE(void)
 309:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** {
 310:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****   __ASM volatile ("wfe");
 311:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** }
 312:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 313:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 314:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /** \brief  Send Event
 315:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 316:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 317:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  */
 318:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __SEV(void)
 319:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** {
 320:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****   __ASM volatile ("sev");
 321:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** }
 322:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 323:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 324:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /** \brief  Instruction Synchronization Barrier
 325:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 326:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     Instruction Synchronization Barrier flushes the pipeline in the processor,
 327:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     so that all instructions following the ISB are fetched from cache or
 328:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     memory, after the instruction has been completed.
 329:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  */
 330:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __ISB(void)
 331:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** {
 332:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****   __ASM volatile ("isb");
 333:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** }
 334:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 335:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 336:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /** \brief  Data Synchronization Barrier
 337:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 338:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     This function acts as a special kind of Data Memory Barrier.
 339:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     It completes when all explicit memory accesses before this instruction complete.
 340:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  */
 341:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
 342:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** {
 343:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****   __ASM volatile ("dsb");
 344:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** }
 345:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 346:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 347:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /** \brief  Data Memory Barrier
 348:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 349:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     This function ensures the apparent order of the explicit memory operations before
 350:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     and after the instruction, without ensuring their completion.
 351:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  */
 352:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
 353:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** {
 354:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****   __ASM volatile ("dmb");
  87              	 .loc 3 354 0
  88              	 .syntax unified
  89              	
  90 001c BFF35F8F 	 dmb
  91              	
  92              	 .thumb
  93              	 .syntax unified
  94              	.LBE17:
  95              	.LBE16:
 147:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** 	cpu_irq_disable();
  96              	 .loc 1 147 0
  97 0020 044B     	 ldr r3,.L4
  98 0022 0022     	 movs r2,#0
  99 0024 1A70     	 strb r2,[r3]
 148:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** 	return flags;
 100              	 .loc 1 148 0
 101 0026 7B68     	 ldr r3,[r7,#4]
 149:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** }
 102              	 .loc 1 149 0
 103 0028 1846     	 mov r0,r3
 104 002a 0C37     	 adds r7,r7,#12
 105              	.LCFI3:
 106              	 .cfi_def_cfa_offset 4
 107 002c BD46     	 mov sp,r7
 108              	.LCFI4:
 109              	 .cfi_def_cfa_register 13
 110              	 
 111 002e 80BC     	 pop {r7}
 112              	.LCFI5:
 113              	 .cfi_restore 7
 114              	 .cfi_def_cfa_offset 0
 115 0030 7047     	 bx lr
 116              	.L5:
 117 0032 00BF     	 .align 2
 118              	.L4:
 119 0034 00000000 	 .word g_interrupt_enabled
 120              	 .cfi_endproc
 121              	.LFE112:
 123              	 .align 1
 124              	 .syntax unified
 125              	 .thumb
 126              	 .thumb_func
 127              	 .fpu softvfp
 129              	cpu_irq_is_enabled_flags:
 130              	.LFB113:
 150:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** 
 151:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
 152:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** {
 131              	 .loc 1 152 0
 132              	 .cfi_startproc
 133              	 
 134              	 
 135              	 
 136 0038 80B4     	 push {r7}
 137              	.LCFI6:
 138              	 .cfi_def_cfa_offset 4
 139              	 .cfi_offset 7,-4
 140 003a 83B0     	 sub sp,sp,#12
 141              	.LCFI7:
 142              	 .cfi_def_cfa_offset 16
 143 003c 00AF     	 add r7,sp,#0
 144              	.LCFI8:
 145              	 .cfi_def_cfa_register 7
 146 003e 7860     	 str r0,[r7,#4]
 153:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** 	return (flags);
 147              	 .loc 1 153 0
 148 0040 7B68     	 ldr r3,[r7,#4]
 149 0042 002B     	 cmp r3,#0
 150 0044 14BF     	 ite ne
 151 0046 0123     	 movne r3,#1
 152 0048 0023     	 moveq r3,#0
 153 004a DBB2     	 uxtb r3,r3
 154:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** }
 154              	 .loc 1 154 0
 155 004c 1846     	 mov r0,r3
 156 004e 0C37     	 adds r7,r7,#12
 157              	.LCFI9:
 158              	 .cfi_def_cfa_offset 4
 159 0050 BD46     	 mov sp,r7
 160              	.LCFI10:
 161              	 .cfi_def_cfa_register 13
 162              	 
 163 0052 80BC     	 pop {r7}
 164              	.LCFI11:
 165              	 .cfi_restore 7
 166              	 .cfi_def_cfa_offset 0
 167 0054 7047     	 bx lr
 168              	 .cfi_endproc
 169              	.LFE113:
 171              	 .align 1
 172              	 .syntax unified
 173              	 .thumb
 174              	 .thumb_func
 175              	 .fpu softvfp
 177              	cpu_irq_restore:
 178              	.LFB114:
 155:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** 
 156:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** static inline void cpu_irq_restore(irqflags_t flags)
 157:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** {
 179              	 .loc 1 157 0
 180              	 .cfi_startproc
 181              	 
 182              	 
 183 0056 80B5     	 push {r7,lr}
 184              	.LCFI12:
 185              	 .cfi_def_cfa_offset 8
 186              	 .cfi_offset 7,-8
 187              	 .cfi_offset 14,-4
 188 0058 82B0     	 sub sp,sp,#8
 189              	.LCFI13:
 190              	 .cfi_def_cfa_offset 16
 191 005a 00AF     	 add r7,sp,#0
 192              	.LCFI14:
 193              	 .cfi_def_cfa_register 7
 194 005c 7860     	 str r0,[r7,#4]
 158:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** 	if (cpu_irq_is_enabled_flags(flags))
 195              	 .loc 1 158 0
 196 005e 7868     	 ldr r0,[r7,#4]
 197 0060 FFF7EAFF 	 bl cpu_irq_is_enabled_flags
 198 0064 0346     	 mov r3,r0
 199 0066 002B     	 cmp r3,#0
 200 0068 05D0     	 beq .L10
 159:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** 		cpu_irq_enable();
 201              	 .loc 1 159 0
 202 006a 054B     	 ldr r3,.L11
 203 006c 0122     	 movs r2,#1
 204 006e 1A70     	 strb r2,[r3]
 205              	.LBB18:
 206              	.LBB19:
 207              	 .loc 3 354 0
 208              	 .syntax unified
 209              	
 210 0070 BFF35F8F 	 dmb
 211              	
 212              	 .thumb
 213              	 .syntax unified
 214              	.LBE19:
 215              	.LBE18:
 216              	.LBB20:
 217              	.LBB21:
 316:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** }
 218              	 .loc 2 316 0
 219              	 .syntax unified
 220              	
 221 0074 62B6     	 cpsie i
 222              	
 223              	 .thumb
 224              	 .syntax unified
 225              	.L10:
 226              	.LBE21:
 227              	.LBE20:
 160:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** }
 228              	 .loc 1 160 0
 229 0076 00BF     	 nop
 230 0078 0837     	 adds r7,r7,#8
 231              	.LCFI15:
 232              	 .cfi_def_cfa_offset 8
 233 007a BD46     	 mov sp,r7
 234              	.LCFI16:
 235              	 .cfi_def_cfa_register 13
 236              	 
 237 007c 80BD     	 pop {r7,pc}
 238              	.L12:
 239 007e 00BF     	 .align 2
 240              	.L11:
 241 0080 00000000 	 .word g_interrupt_enabled
 242              	 .cfi_endproc
 243              	.LFE114:
 245              	 .comm SysTimerIrqCount,1,1
 246              	 .section .bss.timers,"aw",%nobits
 247              	 .align 2
 250              	timers:
 251 0000 00000000 	 .space 4
 252              	 .text
 253              	 .align 1
 254              	 .global SYS_TimerInit
 255              	 .syntax unified
 256              	 .thumb
 257              	 .thumb_func
 258              	 .fpu softvfp
 260              	SYS_TimerInit:
 261              	.LFB122:
 262              	 .file 4 "../../../stack/LwMesh/TDMA/sys/src/sysTimer.c"
   1:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** /**
   2:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c ****  * \file sysTimer.c
   3:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c ****  *
   4:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c ****  * \brief System timer implementation
   5:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c ****  *
   6:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c ****  * Copyright (C) 2014 Atmel Corporation. All rights reserved.
   7:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c ****  *
   8:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c ****  * \asf_license_start
   9:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c ****  *
  10:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c ****  * Redistribution and use in source and binary forms, with or without
  11:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c ****  * modification, are permitted provided that the following conditions are met:
  12:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c ****  *
  13:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c ****  * 1. Redistributions of source code must retain the above copyright notice,
  14:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c ****  *    this list of conditions and the following disclaimer.
  15:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c ****  *
  16:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c ****  * 2. Redistributions in binary form must reproduce the above copyright notice,
  17:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c ****  *    this list of conditions and the following disclaimer in the documentation
  18:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c ****  *    and/or other materials provided with the distribution.
  19:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c ****  *
  20:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c ****  * 3. The name of Atmel may not be used to endorse or promote products derived
  21:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c ****  *    from this software without specific prior written permission.
  22:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c ****  *
  23:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c ****  * 4. This software may only be redistributed and used in connection with an
  24:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c ****  *    Atmel microcontroller product.
  25:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c ****  *
  26:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c ****  * THIS SOFTWARE IS PROVIDED BY ATMEL "AS IS" AND ANY EXPRESS OR IMPLIED
  27:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c ****  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
  28:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c ****  * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE
  29:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c ****  * EXPRESSLY AND SPECIFICALLY DISCLAIMED. IN NO EVENT SHALL ATMEL BE LIABLE FOR
  30:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c ****  * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  31:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c ****  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
  32:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c ****  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
  33:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c ****  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
  34:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c ****  * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
  35:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c ****  * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  36:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c ****  * POSSIBILITY OF SUCH DAMAGE.
  37:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c ****  *
  38:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c ****  * \asf_license_stop
  39:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c ****  *
  40:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c ****  *
  41:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c ****  */
  42:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 
  43:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** /*
  44:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c ****  * Copyright (c) 2014, Atmel Corporation All rights reserved.
  45:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c ****  *
  46:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c ****  * Licensed under Atmel's Limited License Agreement --> EULA.txt
  47:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c ****  */
  48:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 
  49:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** /*- Includes ---------------------------------------------------------------*/
  50:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** #include <stdlib.h>
  51:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** #include "compiler.h"
  52:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** #include "common_hw_timer.h"
  53:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** #include "sysTimer.h"
  54:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 
  55:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** volatile uint8_t SysTimerIrqCount;
  56:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 
  57:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** /*****************************************************************************
  58:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** *****************************************************************************/
  59:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** static void placeTimer(SYS_Timer_t *timer);
  60:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 
  61:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** /*- Variables --------------------------------------------------------------*/
  62:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** static SYS_Timer_t *timers;
  63:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 
  64:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** /*- Implementations --------------------------------------------------------*/
  65:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 
  66:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** /*************************************************************************//**
  67:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** *****************************************************************************/
  68:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** void SYS_TimerInit(void)
  69:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** {
 263              	 .loc 4 69 0
 264              	 .cfi_startproc
 265              	 
 266              	 
 267 0084 80B5     	 push {r7,lr}
 268              	.LCFI17:
 269              	 .cfi_def_cfa_offset 8
 270              	 .cfi_offset 7,-8
 271              	 .cfi_offset 14,-4
 272 0086 00AF     	 add r7,sp,#0
 273              	.LCFI18:
 274              	 .cfi_def_cfa_register 7
  70:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 	SysTimerIrqCount = 0;
 275              	 .loc 4 70 0
 276 0088 084B     	 ldr r3,.L14
 277 008a 0022     	 movs r2,#0
 278 008c 1A70     	 strb r2,[r3]
  71:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 	set_common_tc_expiry_callback(SYS_HwExpiry_Cb);
 279              	 .loc 4 71 0
 280 008e 0848     	 ldr r0,.L14+4
 281 0090 084B     	 ldr r3,.L14+8
 282 0092 9847     	 blx r3
 283              	.LVL0:
  72:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 	common_tc_init();
 284              	 .loc 4 72 0
 285 0094 084B     	 ldr r3,.L14+12
 286 0096 9847     	 blx r3
 287              	.LVL1:
  73:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 	common_tc_delay(SYS_TIMER_INTERVAL * MS);
 288              	 .loc 4 73 0
 289 0098 42F21070 	 movw r0,#10000
 290 009c 074B     	 ldr r3,.L14+16
 291 009e 9847     	 blx r3
 292              	.LVL2:
  74:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 	timers = NULL;
 293              	 .loc 4 74 0
 294 00a0 074B     	 ldr r3,.L14+20
 295 00a2 0022     	 movs r2,#0
 296 00a4 1A60     	 str r2,[r3]
  75:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** }
 297              	 .loc 4 75 0
 298 00a6 00BF     	 nop
 299 00a8 80BD     	 pop {r7,pc}
 300              	.L15:
 301 00aa 00BF     	 .align 2
 302              	.L14:
 303 00ac 00000000 	 .word SysTimerIrqCount
 304 00b0 00000000 	 .word SYS_HwExpiry_Cb
 305 00b4 00000000 	 .word set_common_tc_expiry_callback
 306 00b8 00000000 	 .word common_tc_init
 307 00bc 00000000 	 .word common_tc_delay
 308 00c0 00000000 	 .word timers
 309              	 .cfi_endproc
 310              	.LFE122:
 312              	 .align 1
 313              	 .global SYS_TimerStart
 314              	 .syntax unified
 315              	 .thumb
 316              	 .thumb_func
 317              	 .fpu softvfp
 319              	SYS_TimerStart:
 320              	.LFB123:
  76:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 
  77:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** /*************************************************************************//**
  78:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** *****************************************************************************/
  79:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** void SYS_TimerStart(SYS_Timer_t *timer)
  80:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** {
 321              	 .loc 4 80 0
 322              	 .cfi_startproc
 323              	 
 324              	 
 325 00c4 80B5     	 push {r7,lr}
 326              	.LCFI19:
 327              	 .cfi_def_cfa_offset 8
 328              	 .cfi_offset 7,-8
 329              	 .cfi_offset 14,-4
 330 00c6 82B0     	 sub sp,sp,#8
 331              	.LCFI20:
 332              	 .cfi_def_cfa_offset 16
 333 00c8 00AF     	 add r7,sp,#0
 334              	.LCFI21:
 335              	 .cfi_def_cfa_register 7
 336 00ca 7860     	 str r0,[r7,#4]
  81:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 	if (!SYS_TimerStarted(timer)) {
 337              	 .loc 4 81 0
 338 00cc 7868     	 ldr r0,[r7,#4]
 339 00ce FFF7FEFF 	 bl SYS_TimerStarted
 340 00d2 0346     	 mov r3,r0
 341 00d4 83F00103 	 eor r3,r3,#1
 342 00d8 DBB2     	 uxtb r3,r3
 343 00da 002B     	 cmp r3,#0
 344 00dc 02D0     	 beq .L18
  82:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 		placeTimer(timer);
 345              	 .loc 4 82 0
 346 00de 7868     	 ldr r0,[r7,#4]
 347 00e0 00F0AEF8 	 bl placeTimer
 348              	.L18:
  83:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 	}
  84:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** }
 349              	 .loc 4 84 0
 350 00e4 00BF     	 nop
 351 00e6 0837     	 adds r7,r7,#8
 352              	.LCFI22:
 353              	 .cfi_def_cfa_offset 8
 354 00e8 BD46     	 mov sp,r7
 355              	.LCFI23:
 356              	 .cfi_def_cfa_register 13
 357              	 
 358 00ea 80BD     	 pop {r7,pc}
 359              	 .cfi_endproc
 360              	.LFE123:
 362              	 .align 1
 363              	 .global SYS_TimerStop
 364              	 .syntax unified
 365              	 .thumb
 366              	 .thumb_func
 367              	 .fpu softvfp
 369              	SYS_TimerStop:
 370              	.LFB124:
  85:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 
  86:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** /*************************************************************************//**
  87:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** *****************************************************************************/
  88:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** void SYS_TimerStop(SYS_Timer_t *timer)
  89:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** {
 371              	 .loc 4 89 0
 372              	 .cfi_startproc
 373              	 
 374              	 
 375              	 
 376 00ec 80B4     	 push {r7}
 377              	.LCFI24:
 378              	 .cfi_def_cfa_offset 4
 379              	 .cfi_offset 7,-4
 380 00ee 85B0     	 sub sp,sp,#20
 381              	.LCFI25:
 382              	 .cfi_def_cfa_offset 24
 383 00f0 00AF     	 add r7,sp,#0
 384              	.LCFI26:
 385              	 .cfi_def_cfa_register 7
 386 00f2 7860     	 str r0,[r7,#4]
  90:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 	SYS_Timer_t *prev = NULL;
 387              	 .loc 4 90 0
 388 00f4 0023     	 movs r3,#0
 389 00f6 FB60     	 str r3,[r7,#12]
 390              	.LBB22:
  91:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 
  92:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 	for (SYS_Timer_t *t = timers; t; t = t->next) {
 391              	 .loc 4 92 0
 392 00f8 184B     	 ldr r3,.L28
 393 00fa 1B68     	 ldr r3,[r3]
 394 00fc BB60     	 str r3,[r7,#8]
 395 00fe 22E0     	 b .L20
 396              	.L26:
  93:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 		if (t == timer) {
 397              	 .loc 4 93 0
 398 0100 BA68     	 ldr r2,[r7,#8]
 399 0102 7B68     	 ldr r3,[r7,#4]
 400 0104 9A42     	 cmp r2,r3
 401 0106 19D1     	 bne .L21
  94:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 			if (prev) {
 402              	 .loc 4 94 0
 403 0108 FB68     	 ldr r3,[r7,#12]
 404 010a 002B     	 cmp r3,#0
 405 010c 04D0     	 beq .L22
  95:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 				prev->next = t->next;
 406              	 .loc 4 95 0
 407 010e BB68     	 ldr r3,[r7,#8]
 408 0110 1A68     	 ldr r2,[r3]
 409 0112 FB68     	 ldr r3,[r7,#12]
 410 0114 1A60     	 str r2,[r3]
 411 0116 03E0     	 b .L23
 412              	.L22:
  96:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 			} else {
  97:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 				timers = t->next;
 413              	 .loc 4 97 0
 414 0118 BB68     	 ldr r3,[r7,#8]
 415 011a 1B68     	 ldr r3,[r3]
 416 011c 0F4A     	 ldr r2,.L28
 417 011e 1360     	 str r3,[r2]
 418              	.L23:
  98:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 			}
  99:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 
 100:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 			if (t->next) {
 419              	 .loc 4 100 0
 420 0120 BB68     	 ldr r3,[r7,#8]
 421 0122 1B68     	 ldr r3,[r3]
 422 0124 002B     	 cmp r3,#0
 423 0126 12D0     	 beq .L27
 101:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 				t->next->timeout += timer->timeout;
 424              	 .loc 4 101 0
 425 0128 BB68     	 ldr r3,[r7,#8]
 426 012a 1B68     	 ldr r3,[r3]
 427 012c BA68     	 ldr r2,[r7,#8]
 428 012e 1268     	 ldr r2,[r2]
 429 0130 5168     	 ldr r1,[r2,#4]
 430 0132 7A68     	 ldr r2,[r7,#4]
 431 0134 5268     	 ldr r2,[r2,#4]
 432 0136 0A44     	 add r2,r2,r1
 433 0138 5A60     	 str r2,[r3,#4]
 102:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 			}
 103:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 
 104:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 			break;
 434              	 .loc 4 104 0
 435 013a 08E0     	 b .L27
 436              	.L21:
 105:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 		}
 106:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 
 107:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 		prev = t;
 437              	 .loc 4 107 0 discriminator 2
 438 013c BB68     	 ldr r3,[r7,#8]
 439 013e FB60     	 str r3,[r7,#12]
  92:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 		if (t == timer) {
 440              	 .loc 4 92 0 discriminator 2
 441 0140 BB68     	 ldr r3,[r7,#8]
 442 0142 1B68     	 ldr r3,[r3]
 443 0144 BB60     	 str r3,[r7,#8]
 444              	.L20:
  92:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 		if (t == timer) {
 445              	 .loc 4 92 0 is_stmt 0 discriminator 1
 446 0146 BB68     	 ldr r3,[r7,#8]
 447 0148 002B     	 cmp r3,#0
 448 014a D9D1     	 bne .L26
 449              	.LBE22:
 108:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 	}
 109:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** }
 450              	 .loc 4 109 0 is_stmt 1
 451 014c 00E0     	 b .L25
 452              	.L27:
 453              	.LBB23:
 104:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 		}
 454              	 .loc 4 104 0
 455 014e 00BF     	 nop
 456              	.L25:
 457              	.LBE23:
 458              	 .loc 4 109 0
 459 0150 00BF     	 nop
 460 0152 1437     	 adds r7,r7,#20
 461              	.LCFI27:
 462              	 .cfi_def_cfa_offset 4
 463 0154 BD46     	 mov sp,r7
 464              	.LCFI28:
 465              	 .cfi_def_cfa_register 13
 466              	 
 467 0156 80BC     	 pop {r7}
 468              	.LCFI29:
 469              	 .cfi_restore 7
 470              	 .cfi_def_cfa_offset 0
 471 0158 7047     	 bx lr
 472              	.L29:
 473 015a 00BF     	 .align 2
 474              	.L28:
 475 015c 00000000 	 .word timers
 476              	 .cfi_endproc
 477              	.LFE124:
 479              	 .align 1
 480              	 .global SYS_TimerStarted
 481              	 .syntax unified
 482              	 .thumb
 483              	 .thumb_func
 484              	 .fpu softvfp
 486              	SYS_TimerStarted:
 487              	.LFB125:
 110:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 
 111:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** /*************************************************************************//**
 112:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** *****************************************************************************/
 113:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** bool SYS_TimerStarted(SYS_Timer_t *timer)
 114:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** {
 488              	 .loc 4 114 0
 489              	 .cfi_startproc
 490              	 
 491              	 
 492              	 
 493 0160 80B4     	 push {r7}
 494              	.LCFI30:
 495              	 .cfi_def_cfa_offset 4
 496              	 .cfi_offset 7,-4
 497 0162 85B0     	 sub sp,sp,#20
 498              	.LCFI31:
 499              	 .cfi_def_cfa_offset 24
 500 0164 00AF     	 add r7,sp,#0
 501              	.LCFI32:
 502              	 .cfi_def_cfa_register 7
 503 0166 7860     	 str r0,[r7,#4]
 504              	.LBB24:
 115:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 	for (SYS_Timer_t *t = timers; t; t = t->next) {
 505              	 .loc 4 115 0
 506 0168 0A4B     	 ldr r3,.L35
 507 016a 1B68     	 ldr r3,[r3]
 508 016c FB60     	 str r3,[r7,#12]
 509 016e 08E0     	 b .L31
 510              	.L34:
 116:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 		if (t == timer) {
 511              	 .loc 4 116 0
 512 0170 FA68     	 ldr r2,[r7,#12]
 513 0172 7B68     	 ldr r3,[r7,#4]
 514 0174 9A42     	 cmp r2,r3
 515 0176 01D1     	 bne .L32
 117:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 			return true;
 516              	 .loc 4 117 0
 517 0178 0123     	 movs r3,#1
 518 017a 06E0     	 b .L33
 519              	.L32:
 115:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 	for (SYS_Timer_t *t = timers; t; t = t->next) {
 520              	 .loc 4 115 0 discriminator 2
 521 017c FB68     	 ldr r3,[r7,#12]
 522 017e 1B68     	 ldr r3,[r3]
 523 0180 FB60     	 str r3,[r7,#12]
 524              	.L31:
 115:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 	for (SYS_Timer_t *t = timers; t; t = t->next) {
 525              	 .loc 4 115 0 is_stmt 0 discriminator 1
 526 0182 FB68     	 ldr r3,[r7,#12]
 527 0184 002B     	 cmp r3,#0
 528 0186 F3D1     	 bne .L34
 529              	.LBE24:
 118:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 		}
 119:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 	}
 120:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 	return false;
 530              	 .loc 4 120 0 is_stmt 1
 531 0188 0023     	 movs r3,#0
 532              	.L33:
 121:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** }
 533              	 .loc 4 121 0
 534 018a 1846     	 mov r0,r3
 535 018c 1437     	 adds r7,r7,#20
 536              	.LCFI33:
 537              	 .cfi_def_cfa_offset 4
 538 018e BD46     	 mov sp,r7
 539              	.LCFI34:
 540              	 .cfi_def_cfa_register 13
 541              	 
 542 0190 80BC     	 pop {r7}
 543              	.LCFI35:
 544              	 .cfi_restore 7
 545              	 .cfi_def_cfa_offset 0
 546 0192 7047     	 bx lr
 547              	.L36:
 548              	 .align 2
 549              	.L35:
 550 0194 00000000 	 .word timers
 551              	 .cfi_endproc
 552              	.LFE125:
 554              	 .align 1
 555              	 .global SYS_TimerTaskHandler
 556              	 .syntax unified
 557              	 .thumb
 558              	 .thumb_func
 559              	 .fpu softvfp
 561              	SYS_TimerTaskHandler:
 562              	.LFB126:
 122:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 
 123:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** /*************************************************************************//**
 124:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** *****************************************************************************/
 125:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** void SYS_TimerTaskHandler(void)
 126:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** {
 563              	 .loc 4 126 0
 564              	 .cfi_startproc
 565              	 
 566              	 
 567 0198 80B5     	 push {r7,lr}
 568              	.LCFI36:
 569              	 .cfi_def_cfa_offset 8
 570              	 .cfi_offset 7,-8
 571              	 .cfi_offset 14,-4
 572 019a 84B0     	 sub sp,sp,#16
 573              	.LCFI37:
 574              	 .cfi_def_cfa_offset 24
 575 019c 00AF     	 add r7,sp,#0
 576              	.LCFI38:
 577              	 .cfi_def_cfa_register 7
 127:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 	uint32_t elapsed;
 128:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 	uint8_t cnt;
 129:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 	irqflags_t flags;
 130:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 
 131:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 	if (0 == SysTimerIrqCount) {
 578              	 .loc 4 131 0
 579 019e 264B     	 ldr r3,.L45
 580 01a0 1B78     	 ldrb r3,[r3]
 581 01a2 DBB2     	 uxtb r3,r3
 582 01a4 002B     	 cmp r3,#0
 583 01a6 42D0     	 beq .L44
 132:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 		return;
 133:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 	}
 134:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 
 135:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 	/* Enter a critical section */
 136:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 	flags = cpu_irq_save();
 584              	 .loc 4 136 0
 585 01a8 FFF72AFF 	 bl cpu_irq_save
 586 01ac B860     	 str r0,[r7,#8]
 137:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 	cnt = SysTimerIrqCount;
 587              	 .loc 4 137 0
 588 01ae 224B     	 ldr r3,.L45
 589 01b0 1B78     	 ldrb r3,[r3]
 590 01b2 FB71     	 strb r3,[r7,#7]
 138:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 	SysTimerIrqCount = 0;
 591              	 .loc 4 138 0
 592 01b4 204B     	 ldr r3,.L45
 593 01b6 0022     	 movs r2,#0
 594 01b8 1A70     	 strb r2,[r3]
 139:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 	/* Leave the critical section */
 140:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 	cpu_irq_restore(flags);
 595              	 .loc 4 140 0
 596 01ba B868     	 ldr r0,[r7,#8]
 597 01bc FFF74BFF 	 bl cpu_irq_restore
 141:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 
 142:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 	elapsed = cnt * SYS_TIMER_INTERVAL;
 598              	 .loc 4 142 0
 599 01c0 FA79     	 ldrb r2,[r7,#7]
 600 01c2 1346     	 mov r3,r2
 601 01c4 9B00     	 lsls r3,r3,#2
 602 01c6 1344     	 add r3,r3,r2
 603 01c8 5B00     	 lsls r3,r3,#1
 604 01ca FB60     	 str r3,[r7,#12]
 143:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 
 144:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 	while (timers && (timers->timeout <= elapsed)) {
 605              	 .loc 4 144 0
 606 01cc 18E0     	 b .L40
 607              	.L43:
 608              	.LBB25:
 145:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 		SYS_Timer_t *timer = timers;
 609              	 .loc 4 145 0
 610 01ce 1B4B     	 ldr r3,.L45+4
 611 01d0 1B68     	 ldr r3,[r3]
 612 01d2 3B60     	 str r3,[r7]
 146:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 
 147:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 		elapsed -= timers->timeout;
 613              	 .loc 4 147 0
 614 01d4 194B     	 ldr r3,.L45+4
 615 01d6 1B68     	 ldr r3,[r3]
 616 01d8 5B68     	 ldr r3,[r3,#4]
 617 01da FA68     	 ldr r2,[r7,#12]
 618 01dc D31A     	 subs r3,r2,r3
 619 01de FB60     	 str r3,[r7,#12]
 148:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 		timers = timers->next;
 620              	 .loc 4 148 0
 621 01e0 164B     	 ldr r3,.L45+4
 622 01e2 1B68     	 ldr r3,[r3]
 623 01e4 1B68     	 ldr r3,[r3]
 624 01e6 154A     	 ldr r2,.L45+4
 625 01e8 1360     	 str r3,[r2]
 149:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 		if (SYS_TIMER_PERIODIC_MODE == timer->mode) {
 626              	 .loc 4 149 0
 627 01ea 3B68     	 ldr r3,[r7]
 628 01ec 1B7B     	 ldrb r3,[r3,#12]
 629 01ee 012B     	 cmp r3,#1
 630 01f0 02D1     	 bne .L41
 150:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 			placeTimer(timer);
 631              	 .loc 4 150 0
 632 01f2 3868     	 ldr r0,[r7]
 633 01f4 00F024F8 	 bl placeTimer
 634              	.L41:
 151:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 		}
 152:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 
 153:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 		timer->handler(timer);
 635              	 .loc 4 153 0
 636 01f8 3B68     	 ldr r3,[r7]
 637 01fa 1B69     	 ldr r3,[r3,#16]
 638 01fc 3868     	 ldr r0,[r7]
 639 01fe 9847     	 blx r3
 640              	.LVL3:
 641              	.L40:
 642              	.LBE25:
 144:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 		SYS_Timer_t *timer = timers;
 643              	 .loc 4 144 0
 644 0200 0E4B     	 ldr r3,.L45+4
 645 0202 1B68     	 ldr r3,[r3]
 646 0204 002B     	 cmp r3,#0
 647 0206 05D0     	 beq .L42
 144:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 		SYS_Timer_t *timer = timers;
 648              	 .loc 4 144 0 is_stmt 0 discriminator 1
 649 0208 0C4B     	 ldr r3,.L45+4
 650 020a 1B68     	 ldr r3,[r3]
 651 020c 5A68     	 ldr r2,[r3,#4]
 652 020e FB68     	 ldr r3,[r7,#12]
 653 0210 9A42     	 cmp r2,r3
 654 0212 DCD9     	 bls .L43
 655              	.L42:
 154:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 	}
 155:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 
 156:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 	if (timers) {
 656              	 .loc 4 156 0 is_stmt 1
 657 0214 094B     	 ldr r3,.L45+4
 658 0216 1B68     	 ldr r3,[r3]
 659 0218 002B     	 cmp r3,#0
 660 021a 09D0     	 beq .L37
 157:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 		timers->timeout -= elapsed;
 661              	 .loc 4 157 0
 662 021c 074B     	 ldr r3,.L45+4
 663 021e 1B68     	 ldr r3,[r3]
 664 0220 064A     	 ldr r2,.L45+4
 665 0222 1268     	 ldr r2,[r2]
 666 0224 5168     	 ldr r1,[r2,#4]
 667 0226 FA68     	 ldr r2,[r7,#12]
 668 0228 8A1A     	 subs r2,r1,r2
 669 022a 5A60     	 str r2,[r3,#4]
 670 022c 00E0     	 b .L37
 671              	.L44:
 132:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 	}
 672              	 .loc 4 132 0
 673 022e 00BF     	 nop
 674              	.L37:
 158:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 	}
 159:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** }
 675              	 .loc 4 159 0
 676 0230 1037     	 adds r7,r7,#16
 677              	.LCFI39:
 678              	 .cfi_def_cfa_offset 8
 679 0232 BD46     	 mov sp,r7
 680              	.LCFI40:
 681              	 .cfi_def_cfa_register 13
 682              	 
 683 0234 80BD     	 pop {r7,pc}
 684              	.L46:
 685 0236 00BF     	 .align 2
 686              	.L45:
 687 0238 00000000 	 .word SysTimerIrqCount
 688 023c 00000000 	 .word timers
 689              	 .cfi_endproc
 690              	.LFE126:
 692              	 .align 1
 693              	 .syntax unified
 694              	 .thumb
 695              	 .thumb_func
 696              	 .fpu softvfp
 698              	placeTimer:
 699              	.LFB127:
 160:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 
 161:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** /*************************************************************************//**
 162:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** *****************************************************************************/
 163:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** static void placeTimer(SYS_Timer_t *timer)
 164:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** {
 700              	 .loc 4 164 0
 701              	 .cfi_startproc
 702              	 
 703              	 
 704              	 
 705 0240 80B4     	 push {r7}
 706              	.LCFI41:
 707              	 .cfi_def_cfa_offset 4
 708              	 .cfi_offset 7,-4
 709 0242 87B0     	 sub sp,sp,#28
 710              	.LCFI42:
 711              	 .cfi_def_cfa_offset 32
 712 0244 00AF     	 add r7,sp,#0
 713              	.LCFI43:
 714              	 .cfi_def_cfa_register 7
 715 0246 7860     	 str r0,[r7,#4]
 165:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 	if (timers) {
 716              	 .loc 4 165 0
 717 0248 254B     	 ldr r3,.L57
 718 024a 1B68     	 ldr r3,[r3]
 719 024c 002B     	 cmp r3,#0
 720 024e 37D0     	 beq .L48
 721              	.LBB26:
 166:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 		SYS_Timer_t *prev = NULL;
 722              	 .loc 4 166 0
 723 0250 0023     	 movs r3,#0
 724 0252 7B61     	 str r3,[r7,#20]
 167:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 		uint32_t timeout = timer->interval;
 725              	 .loc 4 167 0
 726 0254 7B68     	 ldr r3,[r7,#4]
 727 0256 9B68     	 ldr r3,[r3,#8]
 728 0258 3B61     	 str r3,[r7,#16]
 729              	.LBB27:
 168:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 
 169:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 		for (SYS_Timer_t *t = timers; t; t = t->next) {
 730              	 .loc 4 169 0
 731 025a 214B     	 ldr r3,.L57
 732 025c 1B68     	 ldr r3,[r3]
 733 025e FB60     	 str r3,[r7,#12]
 734 0260 15E0     	 b .L49
 735              	.L52:
 170:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 			if (timeout < t->timeout) {
 736              	 .loc 4 170 0
 737 0262 FB68     	 ldr r3,[r7,#12]
 738 0264 5A68     	 ldr r2,[r3,#4]
 739 0266 3B69     	 ldr r3,[r7,#16]
 740 0268 9A42     	 cmp r2,r3
 741 026a 06D9     	 bls .L50
 171:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 				t->timeout -= timeout;
 742              	 .loc 4 171 0
 743 026c FB68     	 ldr r3,[r7,#12]
 744 026e 5A68     	 ldr r2,[r3,#4]
 745 0270 3B69     	 ldr r3,[r7,#16]
 746 0272 D21A     	 subs r2,r2,r3
 747 0274 FB68     	 ldr r3,[r7,#12]
 748 0276 5A60     	 str r2,[r3,#4]
 172:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 				break;
 749              	 .loc 4 172 0
 750 0278 0CE0     	 b .L51
 751              	.L50:
 173:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 			} else {
 174:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 				timeout -= t->timeout;
 752              	 .loc 4 174 0 discriminator 2
 753 027a FB68     	 ldr r3,[r7,#12]
 754 027c 5B68     	 ldr r3,[r3,#4]
 755 027e 3A69     	 ldr r2,[r7,#16]
 756 0280 D31A     	 subs r3,r2,r3
 757 0282 3B61     	 str r3,[r7,#16]
 175:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 			}
 176:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 
 177:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 			prev = t;
 758              	 .loc 4 177 0 discriminator 2
 759 0284 FB68     	 ldr r3,[r7,#12]
 760 0286 7B61     	 str r3,[r7,#20]
 169:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 			if (timeout < t->timeout) {
 761              	 .loc 4 169 0 discriminator 2
 762 0288 FB68     	 ldr r3,[r7,#12]
 763 028a 1B68     	 ldr r3,[r3]
 764 028c FB60     	 str r3,[r7,#12]
 765              	.L49:
 169:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 			if (timeout < t->timeout) {
 766              	 .loc 4 169 0 is_stmt 0 discriminator 1
 767 028e FB68     	 ldr r3,[r7,#12]
 768 0290 002B     	 cmp r3,#0
 769 0292 E6D1     	 bne .L52
 770              	.L51:
 771              	.LBE27:
 178:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 		}
 179:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 
 180:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 		timer->timeout = timeout;
 772              	 .loc 4 180 0 is_stmt 1
 773 0294 7B68     	 ldr r3,[r7,#4]
 774 0296 3A69     	 ldr r2,[r7,#16]
 775 0298 5A60     	 str r2,[r3,#4]
 181:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 
 182:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 		if (prev) {
 776              	 .loc 4 182 0
 777 029a 7B69     	 ldr r3,[r7,#20]
 778 029c 002B     	 cmp r3,#0
 779 029e 07D0     	 beq .L53
 183:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 			timer->next = prev->next;
 780              	 .loc 4 183 0
 781 02a0 7B69     	 ldr r3,[r7,#20]
 782 02a2 1A68     	 ldr r2,[r3]
 783 02a4 7B68     	 ldr r3,[r7,#4]
 784 02a6 1A60     	 str r2,[r3]
 184:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 			prev->next = timer;
 785              	 .loc 4 184 0
 786 02a8 7B69     	 ldr r3,[r7,#20]
 787 02aa 7A68     	 ldr r2,[r7,#4]
 788 02ac 1A60     	 str r2,[r3]
 789              	.LBE26:
 185:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 		} else {
 186:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 			timer->next = timers;
 187:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 			timers = timer;
 188:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 		}
 189:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 	} else {
 190:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 		timer->next = NULL;
 191:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 		timer->timeout = timer->interval;
 192:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 		timers = timer;
 193:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 	}
 194:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** }
 790              	 .loc 4 194 0
 791 02ae 11E0     	 b .L56
 792              	.L53:
 793              	.LBB28:
 186:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 			timers = timer;
 794              	 .loc 4 186 0
 795 02b0 0B4B     	 ldr r3,.L57
 796 02b2 1A68     	 ldr r2,[r3]
 797 02b4 7B68     	 ldr r3,[r7,#4]
 798 02b6 1A60     	 str r2,[r3]
 187:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 		}
 799              	 .loc 4 187 0
 800 02b8 094A     	 ldr r2,.L57
 801 02ba 7B68     	 ldr r3,[r7,#4]
 802 02bc 1360     	 str r3,[r2]
 803              	.LBE28:
 804              	 .loc 4 194 0
 805 02be 09E0     	 b .L56
 806              	.L48:
 190:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 		timer->timeout = timer->interval;
 807              	 .loc 4 190 0
 808 02c0 7B68     	 ldr r3,[r7,#4]
 809 02c2 0022     	 movs r2,#0
 810 02c4 1A60     	 str r2,[r3]
 191:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 		timers = timer;
 811              	 .loc 4 191 0
 812 02c6 7B68     	 ldr r3,[r7,#4]
 813 02c8 9A68     	 ldr r2,[r3,#8]
 814 02ca 7B68     	 ldr r3,[r7,#4]
 815 02cc 5A60     	 str r2,[r3,#4]
 192:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 	}
 816              	 .loc 4 192 0
 817 02ce 044A     	 ldr r2,.L57
 818 02d0 7B68     	 ldr r3,[r7,#4]
 819 02d2 1360     	 str r3,[r2]
 820              	.L56:
 821              	 .loc 4 194 0
 822 02d4 00BF     	 nop
 823 02d6 1C37     	 adds r7,r7,#28
 824              	.LCFI44:
 825              	 .cfi_def_cfa_offset 4
 826 02d8 BD46     	 mov sp,r7
 827              	.LCFI45:
 828              	 .cfi_def_cfa_register 13
 829              	 
 830 02da 80BC     	 pop {r7}
 831              	.LCFI46:
 832              	 .cfi_restore 7
 833              	 .cfi_def_cfa_offset 0
 834 02dc 7047     	 bx lr
 835              	.L58:
 836 02de 00BF     	 .align 2
 837              	.L57:
 838 02e0 00000000 	 .word timers
 839              	 .cfi_endproc
 840              	.LFE127:
 842              	 .align 1
 843              	 .global SYS_HwExpiry_Cb
 844              	 .syntax unified
 845              	 .thumb
 846              	 .thumb_func
 847              	 .fpu softvfp
 849              	SYS_HwExpiry_Cb:
 850              	.LFB128:
 195:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 
 196:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** /*****************************************************************************
 197:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** *****************************************************************************/
 198:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** void SYS_HwExpiry_Cb(void)
 199:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** {
 851              	 .loc 4 199 0
 852              	 .cfi_startproc
 853              	 
 854              	 
 855 02e4 80B5     	 push {r7,lr}
 856              	.LCFI47:
 857              	 .cfi_def_cfa_offset 8
 858              	 .cfi_offset 7,-8
 859              	 .cfi_offset 14,-4
 860 02e6 00AF     	 add r7,sp,#0
 861              	.LCFI48:
 862              	 .cfi_def_cfa_register 7
 200:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 	SysTimerIrqCount++;
 863              	 .loc 4 200 0
 864 02e8 064B     	 ldr r3,.L60
 865 02ea 1B78     	 ldrb r3,[r3]
 866 02ec DBB2     	 uxtb r3,r3
 867 02ee 0133     	 adds r3,r3,#1
 868 02f0 DAB2     	 uxtb r2,r3
 869 02f2 044B     	 ldr r3,.L60
 870 02f4 1A70     	 strb r2,[r3]
 201:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** 	common_tc_delay(SYS_TIMER_INTERVAL * MS);
 871              	 .loc 4 201 0
 872 02f6 42F21070 	 movw r0,#10000
 873 02fa 034B     	 ldr r3,.L60+4
 874 02fc 9847     	 blx r3
 875              	.LVL4:
 202:../../../stack/LwMesh/TDMA/sys/src/sysTimer.c **** }
 876              	 .loc 4 202 0
 877 02fe 00BF     	 nop
 878 0300 80BD     	 pop {r7,pc}
 879              	.L61:
 880 0302 00BF     	 .align 2
 881              	.L60:
 882 0304 00000000 	 .word SysTimerIrqCount
 883 0308 00000000 	 .word common_tc_delay
 884              	 .cfi_endproc
 885              	.LFE128:
 887              	.Letext0:
 888              	 .file 5 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\arm\\arm-gnu-toolchain\\arm-none-eabi\\include\\machine\\_default_types.h"
 889              	 .file 6 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\arm\\arm-gnu-toolchain\\arm-none-eabi\\include\\sys\\lock.h"
 890              	 .file 7 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\arm\\arm-gnu-toolchain\\arm-none-eabi\\include\\sys\\_types.h"
 891              	 .file 8 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\arm\\arm-gnu-toolchain\\lib\\gcc\\arm-none-eabi\\6.3.1\\include\\stddef.h"
 892              	 .file 9 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\arm\\arm-gnu-toolchain\\arm-none-eabi\\include\\sys\\reent.h"
 893              	 .file 10 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\arm\\arm-gnu-toolchain\\arm-none-eabi\\include\\stdlib.h"
 894              	 .file 11 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\arm\\arm-gnu-toolchain\\arm-none-eabi\\include\\sys\\_stdint.h"
 895              	 .file 12 "../../../platform/thirdparty/CMSIS/include/core_cm4.h"
 896              	 .file 13 "../../../platform/sam/utils/cmsis/sam4l/source/templates/system_sam4l.h"
 897              	 .file 14 "../../../stack/LwMesh/TDMA/sys/inc/sysTimer.h"
 898              	 .file 15 "../../../stack/LwMesh/TDMA/services/common_hw_timer/common_hw_timer.h"
DEFINED SYMBOLS
                            *ABS*:00000000 sysTimer.c
    {standard input}:16     .bss.cpu_irq_critical_section_counter:00000000 $d
    {standard input}:19     .bss.cpu_irq_critical_section_counter:00000000 cpu_irq_critical_section_counter
    {standard input}:24     .bss.cpu_irq_prev_interrupt_state:00000000 cpu_irq_prev_interrupt_state
    {standard input}:25     .bss.cpu_irq_prev_interrupt_state:00000000 $d
    {standard input}:27     .text:00000000 $t
    {standard input}:33     .text:00000000 cpu_irq_save
    {standard input}:119    .text:00000034 $d
    {standard input}:123    .text:00000038 $t
    {standard input}:129    .text:00000038 cpu_irq_is_enabled_flags
    {standard input}:177    .text:00000056 cpu_irq_restore
    {standard input}:241    .text:00000080 $d
                            *COM*:00000001 SysTimerIrqCount
    {standard input}:247    .bss.timers:00000000 $d
    {standard input}:250    .bss.timers:00000000 timers
    {standard input}:253    .text:00000084 $t
    {standard input}:260    .text:00000084 SYS_TimerInit
    {standard input}:303    .text:000000ac $d
    {standard input}:849    .text:000002e4 SYS_HwExpiry_Cb
    {standard input}:312    .text:000000c4 $t
    {standard input}:319    .text:000000c4 SYS_TimerStart
    {standard input}:486    .text:00000160 SYS_TimerStarted
    {standard input}:698    .text:00000240 placeTimer
    {standard input}:369    .text:000000ec SYS_TimerStop
    {standard input}:475    .text:0000015c $d
    {standard input}:479    .text:00000160 $t
    {standard input}:550    .text:00000194 $d
    {standard input}:554    .text:00000198 $t
    {standard input}:561    .text:00000198 SYS_TimerTaskHandler
    {standard input}:687    .text:00000238 $d
    {standard input}:692    .text:00000240 $t
    {standard input}:838    .text:000002e0 $d
    {standard input}:842    .text:000002e4 $t
    {standard input}:882    .text:00000304 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
g_interrupt_enabled
set_common_tc_expiry_callback
common_tc_init
common_tc_delay
