   1              	 .cpu cortex-m4
   2              	 .eabi_attribute 20,1
   3              	 .eabi_attribute 21,1
   4              	 .eabi_attribute 23,3
   5              	 .eabi_attribute 24,1
   6              	 .eabi_attribute 25,1
   7              	 .eabi_attribute 26,1
   8              	 .eabi_attribute 30,6
   9              	 .eabi_attribute 34,1
  10              	 .eabi_attribute 18,4
  11              	 .file "phy.c"
  12              	 .text
  13              	.Ltext0:
  14              	 .cfi_sections .debug_frame
  15              	 .section .bss.cpu_irq_critical_section_counter,"aw",%nobits
  16              	 .align 2
  19              	cpu_irq_critical_section_counter:
  20 0000 00000000 	 .space 4
  21              	 .section .bss.cpu_irq_prev_interrupt_state,"aw",%nobits
  24              	cpu_irq_prev_interrupt_state:
  25 0000 00       	 .space 1
  26              	 .comm n,1,1
  27              	 .section .bss.tTS,"aw",%nobits
  28              	 .align 2
  31              	tTS:
  32 0000 00000000 	 .space 4
  33              	 .text
  34              	 .align 1
  35              	 .syntax unified
  36              	 .thumb
  37              	 .thumb_func
  38              	 .fpu softvfp
  40              	ioport_set_pin_level:
  41              	.LFB213:
  42              	 .file 1 "../../../platform/common/services/ioport/ioport.h"
   1:../../../platform/common/services/ioport/ioport.h **** /**
   2:../../../platform/common/services/ioport/ioport.h ****  * \file
   3:../../../platform/common/services/ioport/ioport.h ****  *
   4:../../../platform/common/services/ioport/ioport.h ****  * \brief Common IOPORT service main header file for AVR, UC3 and ARM
   5:../../../platform/common/services/ioport/ioport.h ****  *        architectures.
   6:../../../platform/common/services/ioport/ioport.h ****  *
   7:../../../platform/common/services/ioport/ioport.h ****  * Copyright (c) 2012 Atmel Corporation. All rights reserved.
   8:../../../platform/common/services/ioport/ioport.h ****  *
   9:../../../platform/common/services/ioport/ioport.h ****  * \asf_license_start
  10:../../../platform/common/services/ioport/ioport.h ****  *
  11:../../../platform/common/services/ioport/ioport.h ****  * \page License
  12:../../../platform/common/services/ioport/ioport.h ****  *
  13:../../../platform/common/services/ioport/ioport.h ****  * Redistribution and use in source and binary forms, with or without
  14:../../../platform/common/services/ioport/ioport.h ****  * modification, are permitted provided that the following conditions are met:
  15:../../../platform/common/services/ioport/ioport.h ****  *
  16:../../../platform/common/services/ioport/ioport.h ****  * 1. Redistributions of source code must retain the above copyright notice,
  17:../../../platform/common/services/ioport/ioport.h ****  *    this list of conditions and the following disclaimer.
  18:../../../platform/common/services/ioport/ioport.h ****  *
  19:../../../platform/common/services/ioport/ioport.h ****  * 2. Redistributions in binary form must reproduce the above copyright notice,
  20:../../../platform/common/services/ioport/ioport.h ****  *    this list of conditions and the following disclaimer in the documentation
  21:../../../platform/common/services/ioport/ioport.h ****  *    and/or other materials provided with the distribution.
  22:../../../platform/common/services/ioport/ioport.h ****  *
  23:../../../platform/common/services/ioport/ioport.h ****  * 3. The name of Atmel may not be used to endorse or promote products derived
  24:../../../platform/common/services/ioport/ioport.h ****  *    from this software without specific prior written permission.
  25:../../../platform/common/services/ioport/ioport.h ****  *
  26:../../../platform/common/services/ioport/ioport.h ****  * 4. This software may only be redistributed and used in connection with an
  27:../../../platform/common/services/ioport/ioport.h ****  *    Atmel microcontroller product.
  28:../../../platform/common/services/ioport/ioport.h ****  *
  29:../../../platform/common/services/ioport/ioport.h ****  * THIS SOFTWARE IS PROVIDED BY ATMEL "AS IS" AND ANY EXPRESS OR IMPLIED
  30:../../../platform/common/services/ioport/ioport.h ****  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
  31:../../../platform/common/services/ioport/ioport.h ****  * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE
  32:../../../platform/common/services/ioport/ioport.h ****  * EXPRESSLY AND SPECIFICALLY DISCLAIMED. IN NO EVENT SHALL ATMEL BE LIABLE FOR
  33:../../../platform/common/services/ioport/ioport.h ****  * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  34:../../../platform/common/services/ioport/ioport.h ****  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
  35:../../../platform/common/services/ioport/ioport.h ****  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
  36:../../../platform/common/services/ioport/ioport.h ****  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
  37:../../../platform/common/services/ioport/ioport.h ****  * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
  38:../../../platform/common/services/ioport/ioport.h ****  * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  39:../../../platform/common/services/ioport/ioport.h ****  * POSSIBILITY OF SUCH DAMAGE.
  40:../../../platform/common/services/ioport/ioport.h ****  *
  41:../../../platform/common/services/ioport/ioport.h ****  * \asf_license_stop
  42:../../../platform/common/services/ioport/ioport.h ****  *
  43:../../../platform/common/services/ioport/ioport.h ****  */
  44:../../../platform/common/services/ioport/ioport.h **** #ifndef IOPORT_H
  45:../../../platform/common/services/ioport/ioport.h **** #define IOPORT_H
  46:../../../platform/common/services/ioport/ioport.h **** 
  47:../../../platform/common/services/ioport/ioport.h **** #ifdef __cplusplus
  48:../../../platform/common/services/ioport/ioport.h **** extern "C" {
  49:../../../platform/common/services/ioport/ioport.h **** #endif
  50:../../../platform/common/services/ioport/ioport.h **** 
  51:../../../platform/common/services/ioport/ioport.h **** #include <parts.h>
  52:../../../platform/common/services/ioport/ioport.h **** #include <compiler.h>
  53:../../../platform/common/services/ioport/ioport.h **** 
  54:../../../platform/common/services/ioport/ioport.h **** /**
  55:../../../platform/common/services/ioport/ioport.h ****  * \defgroup ioport_group Common IOPORT API
  56:../../../platform/common/services/ioport/ioport.h ****  *
  57:../../../platform/common/services/ioport/ioport.h ****  * See \ref ioport_quickstart.
  58:../../../platform/common/services/ioport/ioport.h ****  *
  59:../../../platform/common/services/ioport/ioport.h ****  * This is common IOPORT service for GPIO pin configuration and control in a
  60:../../../platform/common/services/ioport/ioport.h ****  * standardized manner across the MEGA, MEGA_RF, XMEGA, UC3 and ARM devices.
  61:../../../platform/common/services/ioport/ioport.h ****  *
  62:../../../platform/common/services/ioport/ioport.h ****  * Port pin control code is optimized for each platform, and should produce
  63:../../../platform/common/services/ioport/ioport.h ****  * both compact and fast execution times when used with constant values.
  64:../../../platform/common/services/ioport/ioport.h ****  *
  65:../../../platform/common/services/ioport/ioport.h ****  * \section dependencies Dependencies
  66:../../../platform/common/services/ioport/ioport.h ****  * This driver depends on the following modules:
  67:../../../platform/common/services/ioport/ioport.h ****  * - \ref sysclk_group for clock speed and functions.
  68:../../../platform/common/services/ioport/ioport.h ****  * @{
  69:../../../platform/common/services/ioport/ioport.h ****  */
  70:../../../platform/common/services/ioport/ioport.h **** 
  71:../../../platform/common/services/ioport/ioport.h **** /**
  72:../../../platform/common/services/ioport/ioport.h ****  * \def IOPORT_CREATE_PIN(port, pin)
  73:../../../platform/common/services/ioport/ioport.h ****  * \brief Create IOPORT pin number
  74:../../../platform/common/services/ioport/ioport.h ****  *
  75:../../../platform/common/services/ioport/ioport.h ****  * Create a IOPORT pin number for use with the IOPORT functions.
  76:../../../platform/common/services/ioport/ioport.h ****  *
  77:../../../platform/common/services/ioport/ioport.h ****  * \param port IOPORT port (e.g. PORTA, PA or PIOA depending on chosen
  78:../../../platform/common/services/ioport/ioport.h ****  *             architecture)
  79:../../../platform/common/services/ioport/ioport.h ****  * \param pin IOPORT zero-based index of the I/O pin
  80:../../../platform/common/services/ioport/ioport.h ****  */
  81:../../../platform/common/services/ioport/ioport.h **** 
  82:../../../platform/common/services/ioport/ioport.h **** /** \brief IOPORT pin directions */
  83:../../../platform/common/services/ioport/ioport.h **** enum ioport_direction {
  84:../../../platform/common/services/ioport/ioport.h **** 	IOPORT_DIR_INPUT,  /*!< IOPORT input direction */
  85:../../../platform/common/services/ioport/ioport.h **** 	IOPORT_DIR_OUTPUT, /*!< IOPORT output direction */
  86:../../../platform/common/services/ioport/ioport.h **** };
  87:../../../platform/common/services/ioport/ioport.h **** 
  88:../../../platform/common/services/ioport/ioport.h **** /** \brief IOPORT levels */
  89:../../../platform/common/services/ioport/ioport.h **** enum ioport_value {
  90:../../../platform/common/services/ioport/ioport.h **** 	IOPORT_PIN_LEVEL_LOW,  /*!< IOPORT pin value low */
  91:../../../platform/common/services/ioport/ioport.h **** 	IOPORT_PIN_LEVEL_HIGH, /*!< IOPORT pin value high */
  92:../../../platform/common/services/ioport/ioport.h **** };
  93:../../../platform/common/services/ioport/ioport.h **** 
  94:../../../platform/common/services/ioport/ioport.h **** #if MEGA_RF
  95:../../../platform/common/services/ioport/ioport.h **** /** \brief IOPORT edge sense modes */
  96:../../../platform/common/services/ioport/ioport.h **** enum ioport_sense {
  97:../../../platform/common/services/ioport/ioport.h **** 	IOPORT_SENSE_LEVEL,     /*!< IOPORT sense low level  */
  98:../../../platform/common/services/ioport/ioport.h **** 	IOPORT_SENSE_BOTHEDGES, /*!< IOPORT sense both rising and falling edges */
  99:../../../platform/common/services/ioport/ioport.h **** 	IOPORT_SENSE_FALLING,   /*!< IOPORT sense falling edges */
 100:../../../platform/common/services/ioport/ioport.h **** 	IOPORT_SENSE_RISING,    /*!< IOPORT sense rising edges */
 101:../../../platform/common/services/ioport/ioport.h **** };
 102:../../../platform/common/services/ioport/ioport.h **** #elif SAM && !SAM4L
 103:../../../platform/common/services/ioport/ioport.h **** /** \brief IOPORT edge sense modes */
 104:../../../platform/common/services/ioport/ioport.h **** enum ioport_sense {
 105:../../../platform/common/services/ioport/ioport.h **** 	IOPORT_SENSE_BOTHEDGES, /*!< IOPORT sense both rising and falling edges */
 106:../../../platform/common/services/ioport/ioport.h **** 	IOPORT_SENSE_FALLING,   /*!< IOPORT sense falling edges */
 107:../../../platform/common/services/ioport/ioport.h **** 	IOPORT_SENSE_RISING,    /*!< IOPORT sense rising edges */
 108:../../../platform/common/services/ioport/ioport.h **** 	IOPORT_SENSE_LEVEL_LOW, /*!< IOPORT sense low level  */
 109:../../../platform/common/services/ioport/ioport.h **** 	IOPORT_SENSE_LEVEL_HIGH,/*!< IOPORT sense High level  */
 110:../../../platform/common/services/ioport/ioport.h **** };
 111:../../../platform/common/services/ioport/ioport.h **** #else
 112:../../../platform/common/services/ioport/ioport.h **** enum ioport_sense {
 113:../../../platform/common/services/ioport/ioport.h **** 	IOPORT_SENSE_BOTHEDGES, /*!< IOPORT sense both rising and falling edges */
 114:../../../platform/common/services/ioport/ioport.h **** 	IOPORT_SENSE_RISING,    /*!< IOPORT sense rising edges */
 115:../../../platform/common/services/ioport/ioport.h **** 	IOPORT_SENSE_FALLING,   /*!< IOPORT sense falling edges */
 116:../../../platform/common/services/ioport/ioport.h **** };
 117:../../../platform/common/services/ioport/ioport.h **** #endif
 118:../../../platform/common/services/ioport/ioport.h **** 
 119:../../../platform/common/services/ioport/ioport.h **** 
 120:../../../platform/common/services/ioport/ioport.h **** #if XMEGA
 121:../../../platform/common/services/ioport/ioport.h **** # include "xmega/ioport.h"
 122:../../../platform/common/services/ioport/ioport.h **** # if defined(IOPORT_XMEGA_COMPAT)
 123:../../../platform/common/services/ioport/ioport.h **** #  include "xmega/ioport_compat.h"
 124:../../../platform/common/services/ioport/ioport.h **** # endif
 125:../../../platform/common/services/ioport/ioport.h **** #elif MEGA
 126:../../../platform/common/services/ioport/ioport.h **** #  include "mega_rf/ioport.h"
 127:../../../platform/common/services/ioport/ioport.h **** #elif UC3
 128:../../../platform/common/services/ioport/ioport.h **** # include "uc3/ioport.h"
 129:../../../platform/common/services/ioport/ioport.h **** #elif SAM
 130:../../../platform/common/services/ioport/ioport.h **** # if SAM4L
 131:../../../platform/common/services/ioport/ioport.h **** #  include "sam/ioport_gpio.h"
 132:../../../platform/common/services/ioport/ioport.h **** # elif SAMD20
 133:../../../platform/common/services/ioport/ioport.h **** #  include "sam0/ioport.h"
 134:../../../platform/common/services/ioport/ioport.h **** # else
 135:../../../platform/common/services/ioport/ioport.h **** #  include "sam/ioport_pio.h"
 136:../../../platform/common/services/ioport/ioport.h **** # endif
 137:../../../platform/common/services/ioport/ioport.h **** #endif
 138:../../../platform/common/services/ioport/ioport.h **** 
 139:../../../platform/common/services/ioport/ioport.h **** /**
 140:../../../platform/common/services/ioport/ioport.h ****  * \brief Initializes the IOPORT service, ready for use.
 141:../../../platform/common/services/ioport/ioport.h ****  *
 142:../../../platform/common/services/ioport/ioport.h ****  * This function must be called before using any other functions in the IOPORT
 143:../../../platform/common/services/ioport/ioport.h ****  * service.
 144:../../../platform/common/services/ioport/ioport.h ****  */
 145:../../../platform/common/services/ioport/ioport.h **** static inline void ioport_init(void)
 146:../../../platform/common/services/ioport/ioport.h **** {
 147:../../../platform/common/services/ioport/ioport.h **** 	arch_ioport_init();
 148:../../../platform/common/services/ioport/ioport.h **** }
 149:../../../platform/common/services/ioport/ioport.h **** 
 150:../../../platform/common/services/ioport/ioport.h **** /**
 151:../../../platform/common/services/ioport/ioport.h ****  * \brief Enable an IOPORT pin, based on a pin created with \ref
 152:../../../platform/common/services/ioport/ioport.h ****  * IOPORT_CREATE_PIN().
 153:../../../platform/common/services/ioport/ioport.h ****  *
 154:../../../platform/common/services/ioport/ioport.h ****  * \param pin  IOPORT pin to enable
 155:../../../platform/common/services/ioport/ioport.h ****  */
 156:../../../platform/common/services/ioport/ioport.h **** static inline void ioport_enable_pin(ioport_pin_t pin)
 157:../../../platform/common/services/ioport/ioport.h **** {
 158:../../../platform/common/services/ioport/ioport.h **** 	arch_ioport_enable_pin(pin);
 159:../../../platform/common/services/ioport/ioport.h **** }
 160:../../../platform/common/services/ioport/ioport.h **** 
 161:../../../platform/common/services/ioport/ioport.h **** /**
 162:../../../platform/common/services/ioport/ioport.h ****  * \brief Enable multiple pins in a single IOPORT port.
 163:../../../platform/common/services/ioport/ioport.h ****  *
 164:../../../platform/common/services/ioport/ioport.h ****  * \param port IOPORT port to enable
 165:../../../platform/common/services/ioport/ioport.h ****  * \param mask Mask of pins within the port to enable
 166:../../../platform/common/services/ioport/ioport.h ****  */
 167:../../../platform/common/services/ioport/ioport.h **** static inline void ioport_enable_port(ioport_port_t port,
 168:../../../platform/common/services/ioport/ioport.h **** 		ioport_port_mask_t mask)
 169:../../../platform/common/services/ioport/ioport.h **** {
 170:../../../platform/common/services/ioport/ioport.h **** 	arch_ioport_enable_port(port, mask);
 171:../../../platform/common/services/ioport/ioport.h **** }
 172:../../../platform/common/services/ioport/ioport.h **** 
 173:../../../platform/common/services/ioport/ioport.h **** /**
 174:../../../platform/common/services/ioport/ioport.h ****  * \brief Disable IOPORT pin, based on a pin created with \ref
 175:../../../platform/common/services/ioport/ioport.h ****  *        IOPORT_CREATE_PIN().
 176:../../../platform/common/services/ioport/ioport.h ****  *
 177:../../../platform/common/services/ioport/ioport.h ****  * \param pin IOPORT pin to disable
 178:../../../platform/common/services/ioport/ioport.h ****  */
 179:../../../platform/common/services/ioport/ioport.h **** static inline void ioport_disable_pin(ioport_pin_t pin)
 180:../../../platform/common/services/ioport/ioport.h **** {
 181:../../../platform/common/services/ioport/ioport.h **** 	arch_ioport_disable_pin(pin);
 182:../../../platform/common/services/ioport/ioport.h **** }
 183:../../../platform/common/services/ioport/ioport.h **** 
 184:../../../platform/common/services/ioport/ioport.h **** /**
 185:../../../platform/common/services/ioport/ioport.h ****  * \brief Disable multiple pins in a single IOPORT port.
 186:../../../platform/common/services/ioport/ioport.h ****  *
 187:../../../platform/common/services/ioport/ioport.h ****  * \param port IOPORT port to disable
 188:../../../platform/common/services/ioport/ioport.h ****  * \param mask Pin mask of pins to disable
 189:../../../platform/common/services/ioport/ioport.h ****  */
 190:../../../platform/common/services/ioport/ioport.h **** static inline void ioport_disable_port(ioport_port_t port,
 191:../../../platform/common/services/ioport/ioport.h **** 		ioport_port_mask_t mask)
 192:../../../platform/common/services/ioport/ioport.h **** {
 193:../../../platform/common/services/ioport/ioport.h **** 	arch_ioport_disable_port(port, mask);
 194:../../../platform/common/services/ioport/ioport.h **** }
 195:../../../platform/common/services/ioport/ioport.h **** 
 196:../../../platform/common/services/ioport/ioport.h **** /**
 197:../../../platform/common/services/ioport/ioport.h ****  * \brief Set multiple pin modes in a single IOPORT port, such as pull-up,
 198:../../../platform/common/services/ioport/ioport.h ****  * pull-down, etc. configuration.
 199:../../../platform/common/services/ioport/ioport.h ****  *
 200:../../../platform/common/services/ioport/ioport.h ****  * \param port IOPORT port to configure
 201:../../../platform/common/services/ioport/ioport.h ****  * \param mask Pin mask of pins to configure
 202:../../../platform/common/services/ioport/ioport.h ****  * \param mode Mode masks to configure for the specified pins (\ref
 203:../../../platform/common/services/ioport/ioport.h ****  * ioport_modes)
 204:../../../platform/common/services/ioport/ioport.h ****  */
 205:../../../platform/common/services/ioport/ioport.h **** static inline void ioport_set_port_mode(ioport_port_t port,
 206:../../../platform/common/services/ioport/ioport.h **** 		ioport_port_mask_t mask, ioport_mode_t mode)
 207:../../../platform/common/services/ioport/ioport.h **** {
 208:../../../platform/common/services/ioport/ioport.h **** 	arch_ioport_set_port_mode(port, mask, mode);
 209:../../../platform/common/services/ioport/ioport.h **** }
 210:../../../platform/common/services/ioport/ioport.h **** 
 211:../../../platform/common/services/ioport/ioport.h **** /**
 212:../../../platform/common/services/ioport/ioport.h ****  * \brief Set pin mode for one single IOPORT pin.
 213:../../../platform/common/services/ioport/ioport.h ****  *
 214:../../../platform/common/services/ioport/ioport.h ****  * \param pin IOPORT pin to configure
 215:../../../platform/common/services/ioport/ioport.h ****  * \param mode Mode masks to configure for the specified pin (\ref ioport_modes)
 216:../../../platform/common/services/ioport/ioport.h ****  */
 217:../../../platform/common/services/ioport/ioport.h **** static inline void ioport_set_pin_mode(ioport_pin_t pin, ioport_mode_t mode)
 218:../../../platform/common/services/ioport/ioport.h **** {
 219:../../../platform/common/services/ioport/ioport.h **** 	arch_ioport_set_pin_mode(pin, mode);
 220:../../../platform/common/services/ioport/ioport.h **** }
 221:../../../platform/common/services/ioport/ioport.h **** 
 222:../../../platform/common/services/ioport/ioport.h **** /**
 223:../../../platform/common/services/ioport/ioport.h ****  * \brief Reset multiple pin modes in a specified IOPORT port to defaults.
 224:../../../platform/common/services/ioport/ioport.h ****  *
 225:../../../platform/common/services/ioport/ioport.h ****  * \param port IOPORT port to configure
 226:../../../platform/common/services/ioport/ioport.h ****  * \param mask Mask of pins whose mode configuration is to be reset
 227:../../../platform/common/services/ioport/ioport.h ****  */
 228:../../../platform/common/services/ioport/ioport.h **** static inline void ioport_reset_port_mode(ioport_port_t port,
 229:../../../platform/common/services/ioport/ioport.h **** 		ioport_port_mask_t mask)
 230:../../../platform/common/services/ioport/ioport.h **** {
 231:../../../platform/common/services/ioport/ioport.h **** 	arch_ioport_set_port_mode(port, mask, 0);
 232:../../../platform/common/services/ioport/ioport.h **** }
 233:../../../platform/common/services/ioport/ioport.h **** 
 234:../../../platform/common/services/ioport/ioport.h **** /**
 235:../../../platform/common/services/ioport/ioport.h ****  * \brief Reset pin mode configuration for a single IOPORT pin
 236:../../../platform/common/services/ioport/ioport.h ****  *
 237:../../../platform/common/services/ioport/ioport.h ****  * \param pin IOPORT pin to configure
 238:../../../platform/common/services/ioport/ioport.h ****  */
 239:../../../platform/common/services/ioport/ioport.h **** static inline void ioport_reset_pin_mode(ioport_pin_t pin)
 240:../../../platform/common/services/ioport/ioport.h **** {
 241:../../../platform/common/services/ioport/ioport.h **** 	arch_ioport_set_pin_mode(pin, 0);
 242:../../../platform/common/services/ioport/ioport.h **** }
 243:../../../platform/common/services/ioport/ioport.h **** 
 244:../../../platform/common/services/ioport/ioport.h **** /**
 245:../../../platform/common/services/ioport/ioport.h ****  * \brief Set I/O direction for a group of pins in a single IOPORT.
 246:../../../platform/common/services/ioport/ioport.h ****  *
 247:../../../platform/common/services/ioport/ioport.h ****  * \param port IOPORT port to configure
 248:../../../platform/common/services/ioport/ioport.h ****  * \param mask Pin mask of pins to configure
 249:../../../platform/common/services/ioport/ioport.h ****  * \param dir Direction to set for the specified pins (\ref ioport_direction)
 250:../../../platform/common/services/ioport/ioport.h ****  */
 251:../../../platform/common/services/ioport/ioport.h **** static inline void ioport_set_port_dir(ioport_port_t port,
 252:../../../platform/common/services/ioport/ioport.h **** 		ioport_port_mask_t mask, enum ioport_direction dir)
 253:../../../platform/common/services/ioport/ioport.h **** {
 254:../../../platform/common/services/ioport/ioport.h **** 	arch_ioport_set_port_dir(port, mask, dir);
 255:../../../platform/common/services/ioport/ioport.h **** }
 256:../../../platform/common/services/ioport/ioport.h **** 
 257:../../../platform/common/services/ioport/ioport.h **** /**
 258:../../../platform/common/services/ioport/ioport.h ****  * \brief Set direction for a single IOPORT pin.
 259:../../../platform/common/services/ioport/ioport.h ****  *
 260:../../../platform/common/services/ioport/ioport.h ****  * \param pin IOPORT pin to configure
 261:../../../platform/common/services/ioport/ioport.h ****  * \param dir Direction to set for the specified pin (\ref ioport_direction)
 262:../../../platform/common/services/ioport/ioport.h ****  */
 263:../../../platform/common/services/ioport/ioport.h **** static inline void ioport_set_pin_dir(ioport_pin_t pin,
 264:../../../platform/common/services/ioport/ioport.h **** 		enum ioport_direction dir)
 265:../../../platform/common/services/ioport/ioport.h **** {
 266:../../../platform/common/services/ioport/ioport.h **** 	arch_ioport_set_pin_dir(pin, dir);
 267:../../../platform/common/services/ioport/ioport.h **** }
 268:../../../platform/common/services/ioport/ioport.h **** 
 269:../../../platform/common/services/ioport/ioport.h **** /**
 270:../../../platform/common/services/ioport/ioport.h ****  * \brief Set an IOPORT pin to a specified logical value.
 271:../../../platform/common/services/ioport/ioport.h ****  *
 272:../../../platform/common/services/ioport/ioport.h ****  * \param pin IOPORT pin to configure
 273:../../../platform/common/services/ioport/ioport.h ****  * \param level Logical value of the pin
 274:../../../platform/common/services/ioport/ioport.h ****  */
 275:../../../platform/common/services/ioport/ioport.h **** static inline void ioport_set_pin_level(ioport_pin_t pin, bool level)
 276:../../../platform/common/services/ioport/ioport.h **** {
  43              	 .loc 1 276 0
  44              	 .cfi_startproc
  45              	 
  46              	 
  47              	 
  48 0000 80B4     	 push {r7}
  49              	.LCFI0:
  50              	 .cfi_def_cfa_offset 4
  51              	 .cfi_offset 7,-4
  52 0002 8DB0     	 sub sp,sp,#52
  53              	.LCFI1:
  54              	 .cfi_def_cfa_offset 56
  55 0004 00AF     	 add r7,sp,#0
  56              	.LCFI2:
  57              	 .cfi_def_cfa_register 7
  58 0006 7860     	 str r0,[r7,#4]
  59 0008 0B46     	 mov r3,r1
  60 000a FB70     	 strb r3,[r7,#3]
  61 000c 7B68     	 ldr r3,[r7,#4]
  62 000e FB62     	 str r3,[r7,#44]
  63 0010 FB78     	 ldrb r3,[r7,#3]
  64 0012 87F82B30 	 strb r3,[r7,#43]
  65              	.LBB44:
  66              	.LBB45:
  67              	 .file 2 "../../../platform/common/services/ioport/sam/ioport_gpio.h"
   1:../../../platform/common/services/ioport/sam/ioport_gpio.h **** /**
   2:../../../platform/common/services/ioport/sam/ioport_gpio.h ****  * \file
   3:../../../platform/common/services/ioport/sam/ioport_gpio.h ****  *
   4:../../../platform/common/services/ioport/sam/ioport_gpio.h ****  * \brief SAM architecture specific IOPORT service implementation header file.
   5:../../../platform/common/services/ioport/sam/ioport_gpio.h ****  *
   6:../../../platform/common/services/ioport/sam/ioport_gpio.h ****  * Copyright (c) 2012-2013 Atmel Corporation. All rights reserved.
   7:../../../platform/common/services/ioport/sam/ioport_gpio.h ****  *
   8:../../../platform/common/services/ioport/sam/ioport_gpio.h ****  * \asf_license_start
   9:../../../platform/common/services/ioport/sam/ioport_gpio.h ****  *
  10:../../../platform/common/services/ioport/sam/ioport_gpio.h ****  * \page License
  11:../../../platform/common/services/ioport/sam/ioport_gpio.h ****  *
  12:../../../platform/common/services/ioport/sam/ioport_gpio.h ****  * Redistribution and use in source and binary forms, with or without
  13:../../../platform/common/services/ioport/sam/ioport_gpio.h ****  * modification, are permitted provided that the following conditions are met:
  14:../../../platform/common/services/ioport/sam/ioport_gpio.h ****  *
  15:../../../platform/common/services/ioport/sam/ioport_gpio.h ****  * 1. Redistributions of source code must retain the above copyright notice,
  16:../../../platform/common/services/ioport/sam/ioport_gpio.h ****  *    this list of conditions and the following disclaimer.
  17:../../../platform/common/services/ioport/sam/ioport_gpio.h ****  *
  18:../../../platform/common/services/ioport/sam/ioport_gpio.h ****  * 2. Redistributions in binary form must reproduce the above copyright notice,
  19:../../../platform/common/services/ioport/sam/ioport_gpio.h ****  *    this list of conditions and the following disclaimer in the documentation
  20:../../../platform/common/services/ioport/sam/ioport_gpio.h ****  *    and/or other materials provided with the distribution.
  21:../../../platform/common/services/ioport/sam/ioport_gpio.h ****  *
  22:../../../platform/common/services/ioport/sam/ioport_gpio.h ****  * 3. The name of Atmel may not be used to endorse or promote products derived
  23:../../../platform/common/services/ioport/sam/ioport_gpio.h ****  *    from this software without specific prior written permission.
  24:../../../platform/common/services/ioport/sam/ioport_gpio.h ****  *
  25:../../../platform/common/services/ioport/sam/ioport_gpio.h ****  * 4. This software may only be redistributed and used in connection with an
  26:../../../platform/common/services/ioport/sam/ioport_gpio.h ****  *    Atmel microcontroller product.
  27:../../../platform/common/services/ioport/sam/ioport_gpio.h ****  *
  28:../../../platform/common/services/ioport/sam/ioport_gpio.h ****  * THIS SOFTWARE IS PROVIDED BY ATMEL "AS IS" AND ANY EXPRESS OR IMPLIED
  29:../../../platform/common/services/ioport/sam/ioport_gpio.h ****  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
  30:../../../platform/common/services/ioport/sam/ioport_gpio.h ****  * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE
  31:../../../platform/common/services/ioport/sam/ioport_gpio.h ****  * EXPRESSLY AND SPECIFICALLY DISCLAIMED. IN NO EVENT SHALL ATMEL BE LIABLE FOR
  32:../../../platform/common/services/ioport/sam/ioport_gpio.h ****  * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  33:../../../platform/common/services/ioport/sam/ioport_gpio.h ****  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
  34:../../../platform/common/services/ioport/sam/ioport_gpio.h ****  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
  35:../../../platform/common/services/ioport/sam/ioport_gpio.h ****  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
  36:../../../platform/common/services/ioport/sam/ioport_gpio.h ****  * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
  37:../../../platform/common/services/ioport/sam/ioport_gpio.h ****  * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  38:../../../platform/common/services/ioport/sam/ioport_gpio.h ****  * POSSIBILITY OF SUCH DAMAGE.
  39:../../../platform/common/services/ioport/sam/ioport_gpio.h ****  *
  40:../../../platform/common/services/ioport/sam/ioport_gpio.h ****  * \asf_license_stop
  41:../../../platform/common/services/ioport/sam/ioport_gpio.h ****  *
  42:../../../platform/common/services/ioport/sam/ioport_gpio.h ****  */
  43:../../../platform/common/services/ioport/sam/ioport_gpio.h **** #ifndef IOPORT_SAM_H
  44:../../../platform/common/services/ioport/sam/ioport_gpio.h **** #define IOPORT_SAM_H
  45:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 
  46:../../../platform/common/services/ioport/sam/ioport_gpio.h **** #include <sysclk.h>
  47:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 
  48:../../../platform/common/services/ioport/sam/ioport_gpio.h **** #define IOPORT_CREATE_PIN(port, pin) ((port) * 32 + (pin))
  49:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 
  50:../../../platform/common/services/ioport/sam/ioport_gpio.h **** // Aliases
  51:../../../platform/common/services/ioport/sam/ioport_gpio.h **** #define IOPORT_GPIOA     0
  52:../../../platform/common/services/ioport/sam/ioport_gpio.h **** #define IOPORT_GPIOB     1
  53:../../../platform/common/services/ioport/sam/ioport_gpio.h **** #define IOPORT_GPIOC     2
  54:../../../platform/common/services/ioport/sam/ioport_gpio.h **** #define IOPORT_GPIOD     3
  55:../../../platform/common/services/ioport/sam/ioport_gpio.h **** #define IOPORT_GPIOE     4
  56:../../../platform/common/services/ioport/sam/ioport_gpio.h **** #define IOPORT_GPIOF     5
  57:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 
  58:../../../platform/common/services/ioport/sam/ioport_gpio.h **** /**
  59:../../../platform/common/services/ioport/sam/ioport_gpio.h ****  * \weakgroup ioport_group
  60:../../../platform/common/services/ioport/sam/ioport_gpio.h ****  * \section ioport_modes IOPORT Modes
  61:../../../platform/common/services/ioport/sam/ioport_gpio.h ****  *
  62:../../../platform/common/services/ioport/sam/ioport_gpio.h ****  * For details on these please see the device datasheet.
  63:../../../platform/common/services/ioport/sam/ioport_gpio.h ****  *
  64:../../../platform/common/services/ioport/sam/ioport_gpio.h ****  * @{
  65:../../../platform/common/services/ioport/sam/ioport_gpio.h ****  */
  66:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 
  67:../../../platform/common/services/ioport/sam/ioport_gpio.h **** /** \name IOPORT Mode bit definitions */
  68:../../../platform/common/services/ioport/sam/ioport_gpio.h **** /** @{ */
  69:../../../platform/common/services/ioport/sam/ioport_gpio.h **** #define IOPORT_MODE_MUX_MASK            (7 << 0) /*!< MUX bits mask */
  70:../../../platform/common/services/ioport/sam/ioport_gpio.h **** #define IOPORT_MODE_MUX_BIT0            (1 << 0) /*!< MUX BIT0 mask */
  71:../../../platform/common/services/ioport/sam/ioport_gpio.h **** #define IOPORT_MODE_MUX_BIT1            (1 << 1) /*!< MUX BIT1 mask */
  72:../../../platform/common/services/ioport/sam/ioport_gpio.h **** #define IOPORT_MODE_MUX_A               (0 << 0) /*!< MUX function A */
  73:../../../platform/common/services/ioport/sam/ioport_gpio.h **** #define IOPORT_MODE_MUX_B               (1 << 0) /*!< MUX function B */
  74:../../../platform/common/services/ioport/sam/ioport_gpio.h **** #define IOPORT_MODE_MUX_C               (2 << 0) /*!< MUX function C */
  75:../../../platform/common/services/ioport/sam/ioport_gpio.h **** #define IOPORT_MODE_MUX_D               (3 << 0) /*!< MUX function D */
  76:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 
  77:../../../platform/common/services/ioport/sam/ioport_gpio.h **** #define IOPORT_MODE_MUX_BIT2            (1 << 2) /*!< MUX BIT2 mask */
  78:../../../platform/common/services/ioport/sam/ioport_gpio.h **** #define IOPORT_MODE_MUX_E               (4 << 0) /*!< MUX function E */
  79:../../../platform/common/services/ioport/sam/ioport_gpio.h **** #define IOPORT_MODE_MUX_F               (5 << 0) /*!< MUX function F */
  80:../../../platform/common/services/ioport/sam/ioport_gpio.h **** #define IOPORT_MODE_MUX_G               (6 << 0) /*!< MUX function G */
  81:../../../platform/common/services/ioport/sam/ioport_gpio.h **** #define IOPORT_MODE_MUX_H               (7 << 0) /*!< MUX function H */
  82:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 
  83:../../../platform/common/services/ioport/sam/ioport_gpio.h **** #define IOPORT_MODE_PULLUP              (1 << 3) /*!< Pull-up */
  84:../../../platform/common/services/ioport/sam/ioport_gpio.h **** #define IOPORT_MODE_PULLDOWN            (1 << 4) /*!< Pull-down */
  85:../../../platform/common/services/ioport/sam/ioport_gpio.h **** #define IOPORT_MODE_GLITCH_FILTER       (1 << 6) /*!< Glitch filter */
  86:../../../platform/common/services/ioport/sam/ioport_gpio.h **** #define IOPORT_MODE_DRIVE_STRENGTH      (1 << 7) /*!< Extra drive strength */
  87:../../../platform/common/services/ioport/sam/ioport_gpio.h **** /** @} */
  88:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 
  89:../../../platform/common/services/ioport/sam/ioport_gpio.h **** /** @} */
  90:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 
  91:../../../platform/common/services/ioport/sam/ioport_gpio.h **** typedef uint32_t ioport_mode_t;
  92:../../../platform/common/services/ioport/sam/ioport_gpio.h **** typedef uint32_t ioport_pin_t;
  93:../../../platform/common/services/ioport/sam/ioport_gpio.h **** typedef uint32_t ioport_port_t;
  94:../../../platform/common/services/ioport/sam/ioport_gpio.h **** typedef uint32_t ioport_port_mask_t;
  95:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 
  96:../../../platform/common/services/ioport/sam/ioport_gpio.h **** __always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
  97:../../../platform/common/services/ioport/sam/ioport_gpio.h **** {
  98:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 	return pin >> 5;
  99:../../../platform/common/services/ioport/sam/ioport_gpio.h **** }
 100:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 
 101:../../../platform/common/services/ioport/sam/ioport_gpio.h **** __always_inline static volatile GpioPort *arch_ioport_port_to_base(
 102:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 		ioport_port_t port)
 103:../../../platform/common/services/ioport/sam/ioport_gpio.h **** {
 104:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 	return (volatile GpioPort *)(GPIO_ADDR
 105:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 		+ port * sizeof(GpioPort));
 106:../../../platform/common/services/ioport/sam/ioport_gpio.h **** }
 107:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 
 108:../../../platform/common/services/ioport/sam/ioport_gpio.h **** __always_inline static volatile GpioPort *arch_ioport_pin_to_base(ioport_pin_t pin)
 109:../../../platform/common/services/ioport/sam/ioport_gpio.h **** {
 110:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
 111:../../../platform/common/services/ioport/sam/ioport_gpio.h **** }
 112:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 
 113:../../../platform/common/services/ioport/sam/ioport_gpio.h **** __always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
 114:../../../platform/common/services/ioport/sam/ioport_gpio.h **** {
 115:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 	return 1U << (pin & 0x1F);
 116:../../../platform/common/services/ioport/sam/ioport_gpio.h **** }
 117:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 
 118:../../../platform/common/services/ioport/sam/ioport_gpio.h **** __always_inline static void arch_ioport_init(void)
 119:../../../platform/common/services/ioport/sam/ioport_gpio.h **** {
 120:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 	sysclk_enable_peripheral_clock(GPIO);
 121:../../../platform/common/services/ioport/sam/ioport_gpio.h **** }
 122:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 
 123:../../../platform/common/services/ioport/sam/ioport_gpio.h **** __always_inline static void arch_ioport_enable_port(ioport_port_t port,
 124:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 		ioport_port_mask_t mask)
 125:../../../platform/common/services/ioport/sam/ioport_gpio.h **** {
 126:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 	arch_ioport_port_to_base(port)->GPIO_GPERS = mask;
 127:../../../platform/common/services/ioport/sam/ioport_gpio.h **** }
 128:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 
 129:../../../platform/common/services/ioport/sam/ioport_gpio.h **** __always_inline static void arch_ioport_disable_port(ioport_port_t port,
 130:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 		ioport_port_mask_t mask)
 131:../../../platform/common/services/ioport/sam/ioport_gpio.h **** {
 132:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 	arch_ioport_port_to_base(port)->GPIO_GPERC = mask;
 133:../../../platform/common/services/ioport/sam/ioport_gpio.h **** }
 134:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 
 135:../../../platform/common/services/ioport/sam/ioport_gpio.h **** __always_inline static void arch_ioport_enable_pin(ioport_pin_t pin)
 136:../../../platform/common/services/ioport/sam/ioport_gpio.h **** {
 137:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 	arch_ioport_enable_port(arch_ioport_pin_to_port_id(pin),
 138:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 			arch_ioport_pin_to_mask(pin));
 139:../../../platform/common/services/ioport/sam/ioport_gpio.h **** }
 140:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 
 141:../../../platform/common/services/ioport/sam/ioport_gpio.h **** __always_inline static void arch_ioport_disable_pin(ioport_pin_t pin)
 142:../../../platform/common/services/ioport/sam/ioport_gpio.h **** {
 143:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 	arch_ioport_disable_port(arch_ioport_pin_to_port_id(pin),
 144:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 			arch_ioport_pin_to_mask(pin));
 145:../../../platform/common/services/ioport/sam/ioport_gpio.h **** }
 146:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 
 147:../../../platform/common/services/ioport/sam/ioport_gpio.h **** __always_inline static void arch_ioport_set_port_mode(ioport_port_t port,
 148:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 		ioport_port_mask_t mask, ioport_mode_t mode)
 149:../../../platform/common/services/ioport/sam/ioport_gpio.h **** {
 150:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 	volatile GpioPort *base = arch_ioport_port_to_base(port);
 151:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 
 152:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 	if (mode & IOPORT_MODE_PULLUP) {
 153:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 		base->GPIO_PUERS = mask;
 154:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 	} else {
 155:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 		base->GPIO_PUERC = mask;
 156:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 	}
 157:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 
 158:../../../platform/common/services/ioport/sam/ioport_gpio.h **** #ifdef IOPORT_MODE_PULLDOWN
 159:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 	if (mode & IOPORT_MODE_PULLDOWN) {
 160:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 		base->GPIO_PDERS = mask;
 161:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 	} else {
 162:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 		base->GPIO_PDERC = mask;
 163:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 	}
 164:../../../platform/common/services/ioport/sam/ioport_gpio.h **** #endif
 165:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 
 166:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 	if (mode & IOPORT_MODE_GLITCH_FILTER) {
 167:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 		base->GPIO_GFERS = mask;
 168:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 	} else {
 169:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 		base->GPIO_GFERC = mask;
 170:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 	}
 171:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 
 172:../../../platform/common/services/ioport/sam/ioport_gpio.h **** #ifdef IOPORT_MODE_DRIVE_STRENGTH
 173:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 	if (mode & IOPORT_MODE_DRIVE_STRENGTH) {
 174:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 		base->GPIO_ODCR0S = mask;
 175:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 	} else {
 176:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 		base->GPIO_ODCR0C = mask;
 177:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 	}
 178:../../../platform/common/services/ioport/sam/ioport_gpio.h **** #endif
 179:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 
 180:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 	if (mode & IOPORT_MODE_MUX_BIT0) {
 181:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 		base->GPIO_PMR0S = mask;
 182:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 	} else {
 183:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 		base->GPIO_PMR0C = mask;
 184:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 	}
 185:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 
 186:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 	if (mode & IOPORT_MODE_MUX_BIT1) {
 187:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 		base->GPIO_PMR1S = mask;
 188:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 	} else {
 189:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 		base->GPIO_PMR1C = mask;
 190:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 	}
 191:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 
 192:../../../platform/common/services/ioport/sam/ioport_gpio.h **** #ifdef IOPORT_MODE_MUX_BIT2
 193:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 	if (mode & IOPORT_MODE_MUX_BIT2) {
 194:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 		base->GPIO_PMR2S = mask;
 195:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 	} else {
 196:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 		base->GPIO_PMR2C = mask;
 197:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 	}
 198:../../../platform/common/services/ioport/sam/ioport_gpio.h **** #endif
 199:../../../platform/common/services/ioport/sam/ioport_gpio.h **** }
 200:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 
 201:../../../platform/common/services/ioport/sam/ioport_gpio.h **** __always_inline static void arch_ioport_set_pin_mode(ioport_pin_t pin,
 202:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 		ioport_mode_t mode)
 203:../../../platform/common/services/ioport/sam/ioport_gpio.h **** {
 204:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 	arch_ioport_set_port_mode(arch_ioport_pin_to_port_id(pin),
 205:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 			arch_ioport_pin_to_mask(pin), mode);
 206:../../../platform/common/services/ioport/sam/ioport_gpio.h **** }
 207:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 
 208:../../../platform/common/services/ioport/sam/ioport_gpio.h **** __always_inline static void arch_ioport_set_port_dir(ioport_port_t port,
 209:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 		ioport_port_mask_t mask, unsigned char group_direction)
 210:../../../platform/common/services/ioport/sam/ioport_gpio.h **** {
 211:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 	if (group_direction == IOPORT_DIR_OUTPUT) {
 212:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 		arch_ioport_port_to_base(port)->GPIO_ODERS = mask;
 213:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 		// Always disable the Schmitt trigger for output pins.
 214:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 		arch_ioport_port_to_base(port)->GPIO_STERC = mask;
 215:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 	} else if (group_direction == IOPORT_DIR_INPUT) {
 216:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 		arch_ioport_port_to_base(port)->GPIO_ODERC = mask;
 217:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 		// Always enable the Schmitt trigger for input pins.
 218:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 		arch_ioport_port_to_base(port)->GPIO_STERS = mask;
 219:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 	}
 220:../../../platform/common/services/ioport/sam/ioport_gpio.h **** }
 221:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 
 222:../../../platform/common/services/ioport/sam/ioport_gpio.h **** __always_inline static void arch_ioport_set_pin_dir(ioport_pin_t pin,
 223:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 		enum ioport_direction dir)
 224:../../../platform/common/services/ioport/sam/ioport_gpio.h **** {
 225:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 	if (dir == IOPORT_DIR_OUTPUT) {
 226:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 		arch_ioport_pin_to_base(pin)->GPIO_ODERS = arch_ioport_pin_to_mask(pin);
 227:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 		// Always disable the Schmitt trigger for output pins.
 228:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 		arch_ioport_pin_to_base(pin)->GPIO_STERC = arch_ioport_pin_to_mask(pin);
 229:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 	} else if (dir == IOPORT_DIR_INPUT) {
 230:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 		arch_ioport_pin_to_base(pin)->GPIO_ODERC = arch_ioport_pin_to_mask(pin);
 231:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 		// Always enable the Schmitt trigger for input pins.
 232:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 		arch_ioport_pin_to_base(pin)->GPIO_STERS = arch_ioport_pin_to_mask(pin);
 233:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 	}
 234:../../../platform/common/services/ioport/sam/ioport_gpio.h **** }
 235:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 
 236:../../../platform/common/services/ioport/sam/ioport_gpio.h **** __always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
 237:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 		bool level)
 238:../../../platform/common/services/ioport/sam/ioport_gpio.h **** {
 239:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 	if (level) {
  68              	 .loc 2 239 0
  69 0016 97F82B30 	 ldrb r3,[r7,#43]
  70 001a 002B     	 cmp r3,#0
  71 001c 17D0     	 beq .L2
  72 001e FB6A     	 ldr r3,[r7,#44]
  73 0020 7B62     	 str r3,[r7,#36]
  74 0022 7B6A     	 ldr r3,[r7,#36]
  75 0024 3B62     	 str r3,[r7,#32]
  76              	.LBB46:
  77              	.LBB47:
  78              	.LBB48:
  79              	.LBB49:
  98:../../../platform/common/services/ioport/sam/ioport_gpio.h **** }
  80              	 .loc 2 98 0
  81 0026 3B6A     	 ldr r3,[r7,#32]
  82 0028 5B09     	 lsrs r3,r3,#5
  83 002a FB61     	 str r3,[r7,#28]
  84              	.LBE49:
  85              	.LBE48:
  86              	.LBB50:
  87              	.LBB51:
 105:../../../platform/common/services/ioport/sam/ioport_gpio.h **** }
  88              	 .loc 2 105 0
  89 002c FB69     	 ldr r3,[r7,#28]
  90 002e 03F50013 	 add r3,r3,#2097152
  91 0032 03F5E163 	 add r3,r3,#1800
  92 0036 5B02     	 lsls r3,r3,#9
 104:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 		+ port * sizeof(GpioPort));
  93              	 .loc 2 104 0
  94 0038 1946     	 mov r1,r3
  95 003a FB6A     	 ldr r3,[r7,#44]
  96 003c BB61     	 str r3,[r7,#24]
  97              	.LBE51:
  98              	.LBE50:
  99              	.LBE47:
 100              	.LBE46:
 101              	.LBB52:
 102              	.LBB53:
 115:../../../platform/common/services/ioport/sam/ioport_gpio.h **** }
 103              	 .loc 2 115 0
 104 003e BB69     	 ldr r3,[r7,#24]
 105 0040 03F01F03 	 and r3,r3,#31
 106 0044 0122     	 movs r2,#1
 107 0046 02FA03F3 	 lsl r3,r2,r3
 108              	.LBE53:
 109              	.LBE52:
 240:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 		arch_ioport_pin_to_base(pin)->GPIO_OVRS = arch_ioport_pin_to_mask(pin);
 110              	 .loc 2 240 0
 111 004a 4B65     	 str r3,[r1,#84]
 112              	.LBE45:
 113              	.LBE44:
 277:../../../platform/common/services/ioport/ioport.h **** 	arch_ioport_set_pin_level(pin, level);
 278:../../../platform/common/services/ioport/ioport.h **** }
 114              	 .loc 1 278 0
 115 004c 16E0     	 b .L12
 116              	.L2:
 117 004e FB6A     	 ldr r3,[r7,#44]
 118 0050 7B61     	 str r3,[r7,#20]
 119 0052 7B69     	 ldr r3,[r7,#20]
 120 0054 3B61     	 str r3,[r7,#16]
 121              	.LBB63:
 122              	.LBB62:
 123              	.LBB54:
 124              	.LBB55:
 125              	.LBB56:
 126              	.LBB57:
  98:../../../platform/common/services/ioport/sam/ioport_gpio.h **** }
 127              	 .loc 2 98 0
 128 0056 3B69     	 ldr r3,[r7,#16]
 129 0058 5B09     	 lsrs r3,r3,#5
 130 005a FB60     	 str r3,[r7,#12]
 131              	.LBE57:
 132              	.LBE56:
 133              	.LBB58:
 134              	.LBB59:
 105:../../../platform/common/services/ioport/sam/ioport_gpio.h **** }
 135              	 .loc 2 105 0
 136 005c FB68     	 ldr r3,[r7,#12]
 137 005e 03F50013 	 add r3,r3,#2097152
 138 0062 03F5E163 	 add r3,r3,#1800
 139 0066 5B02     	 lsls r3,r3,#9
 104:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 		+ port * sizeof(GpioPort));
 140              	 .loc 2 104 0
 141 0068 1946     	 mov r1,r3
 142 006a FB6A     	 ldr r3,[r7,#44]
 143 006c BB60     	 str r3,[r7,#8]
 144              	.LBE59:
 145              	.LBE58:
 146              	.LBE55:
 147              	.LBE54:
 148              	.LBB60:
 149              	.LBB61:
 115:../../../platform/common/services/ioport/sam/ioport_gpio.h **** }
 150              	 .loc 2 115 0
 151 006e BB68     	 ldr r3,[r7,#8]
 152 0070 03F01F03 	 and r3,r3,#31
 153 0074 0122     	 movs r2,#1
 154 0076 02FA03F3 	 lsl r3,r2,r3
 155              	.LBE61:
 156              	.LBE60:
 241:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 	} else {
 242:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 		arch_ioport_pin_to_base(pin)->GPIO_OVRC = arch_ioport_pin_to_mask(pin);
 157              	 .loc 2 242 0
 158 007a 8B65     	 str r3,[r1,#88]
 159              	.L12:
 160              	.LBE62:
 161              	.LBE63:
 162              	 .loc 1 278 0
 163 007c 00BF     	 nop
 164 007e 3437     	 adds r7,r7,#52
 165              	.LCFI3:
 166              	 .cfi_def_cfa_offset 4
 167 0080 BD46     	 mov sp,r7
 168              	.LCFI4:
 169              	 .cfi_def_cfa_register 13
 170              	 
 171 0082 80BC     	 pop {r7}
 172              	.LCFI5:
 173              	 .cfi_restore 7
 174              	 .cfi_def_cfa_offset 0
 175 0084 7047     	 bx lr
 176              	 .cfi_endproc
 177              	.LFE213:
 179              	 .section .bss.phyState,"aw",%nobits
 182              	phyState:
 183 0000 00       	 .space 1
 184              	 .section .bss.phyRxBuffer,"aw",%nobits
 185              	 .align 2
 188              	phyRxBuffer:
 189 0000 00000000 	 .space 128
 189      00000000 
 189      00000000 
 189      00000000 
 189      00000000 
 190              	 .section .bss.phyRxState,"aw",%nobits
 193              	phyRxState:
 194 0000 00       	 .space 1
 195              	 .text
 196              	 .align 1
 197              	 .global PHY_Init
 198              	 .syntax unified
 199              	 .thumb
 200              	 .thumb_func
 201              	 .fpu softvfp
 203              	PHY_Init:
 204              	.LFB223:
 205              	 .file 3 "../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c"
   1:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** /**
   2:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c ****  * \file phy.c
   3:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c ****  *
   4:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c ****  * \brief AT86RF233 PHY implementation
   5:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c ****  *
   6:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c ****  * Copyright (C) 2014, Atmel Corporation. All rights reserved.
   7:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c ****  *
   8:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c ****  * \asf_license_start
   9:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c ****  *
  10:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c ****  * Redistribution and use in source and binary forms, with or without
  11:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c ****  * modification, are permitted provided that the following conditions are met:
  12:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c ****  *
  13:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c ****  * 1. Redistributions of source code must retain the above copyright notice,
  14:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c ****  *    this list of conditions and the following disclaimer.
  15:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c ****  *
  16:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c ****  * 2. Redistributions in binary form must reproduce the above copyright notice,
  17:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c ****  *    this list of conditions and the following disclaimer in the documentation
  18:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c ****  *    and/or other materials provided with the distribution.
  19:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c ****  *
  20:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c ****  * 3. The name of Atmel may not be used to endorse or promote products derived
  21:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c ****  *    from this software without specific prior written permission.
  22:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c ****  *
  23:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c ****  * 4. This software may only be redistributed and used in connection with an
  24:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c ****  *    Atmel microcontroller product.
  25:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c ****  *
  26:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c ****  * THIS SOFTWARE IS PROVIDED BY ATMEL "AS IS" AND ANY EXPRESS OR IMPLIED
  27:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c ****  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
  28:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c ****  * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE
  29:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c ****  * EXPRESSLY AND SPECIFICALLY DISCLAIMED. IN NO EVENT SHALL ATMEL BE LIABLE FOR
  30:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c ****  * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  31:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c ****  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
  32:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c ****  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
  33:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c ****  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
  34:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c ****  * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
  35:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c ****  * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  36:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c ****  * POSSIBILITY OF SUCH DAMAGE.
  37:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c ****  *
  38:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c ****  * \asf_license_stop
  39:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c ****  *
  40:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c ****  *
  41:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c ****  */
  42:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 
  43:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** #ifdef PHY_AT86RF233
  44:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 
  45:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** /*- Includes ---------------------------------------------------------------*/
  46:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** #include <stdbool.h>
  47:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** #include "phy.h"
  48:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** #include "sal.h"
  49:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** #include "trx_access.h"
  50:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** #include "delay.h"
  51:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** #include "at86rf233.h"
  52:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 
  53:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** /*- Definitions ------------------------------------------------------------*/
  54:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** #define PHY_CRC_SIZE    2
  55:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 
  56:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** /*- Types ------------------------------------------------------------------*/
  57:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** typedef enum {
  58:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	PHY_STATE_INITIAL,
  59:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	PHY_STATE_IDLE,
  60:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	PHY_STATE_SLEEP,
  61:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	PHY_STATE_TX_WAIT_END,
  62:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** } PhyState_t;
  63:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 
  64:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** /*- Prototypes -------------------------------------------------------------*/
  65:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** static void phyWriteRegister(uint8_t reg, uint8_t value);
  66:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** static uint8_t phyReadRegister(uint8_t reg);
  67:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** static void phyWaitState(uint8_t state);
  68:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** static void phyTrxSetState(uint8_t state);
  69:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** static void phySetRxState(void);
  70:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 
  71:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** /*- Variables --------------------------------------------------------------*/
  72:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** static PhyState_t phyState = PHY_STATE_INITIAL;
  73:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** static uint8_t phyRxBuffer[128];
  74:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** static bool phyRxState;
  75:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 
  76:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** /*- Implementations --------------------------------------------------------*/
  77:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 
  78:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** /*************************************************************************//**
  79:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** *****************************************************************************/
  80:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** void PHY_Init(void)
  81:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** {
 206              	 .loc 3 81 0
 207              	 .cfi_startproc
 208              	 
 209              	 
 210 0086 80B5     	 push {r7,lr}
 211              	.LCFI6:
 212              	 .cfi_def_cfa_offset 8
 213              	 .cfi_offset 7,-8
 214              	 .cfi_offset 14,-4
 215 0088 82B0     	 sub sp,sp,#8
 216              	.LCFI7:
 217              	 .cfi_def_cfa_offset 16
 218 008a 00AF     	 add r7,sp,#0
 219              	.LCFI8:
 220              	 .cfi_def_cfa_register 7
  82:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	trx_spi_init();
 221              	 .loc 3 82 0
 222 008c 1B4B     	 ldr r3,.L15
 223 008e 9847     	 blx r3
 224              	.LVL0:
  83:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	PhyReset();
 225              	 .loc 3 83 0
 226 0090 1B4B     	 ldr r3,.L15+4
 227 0092 9847     	 blx r3
 228              	.LVL1:
  84:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	phyRxState = false;
 229              	 .loc 3 84 0
 230 0094 1B4B     	 ldr r3,.L15+8
 231 0096 0022     	 movs r2,#0
 232 0098 1A70     	 strb r2,[r3]
  85:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	phyState = PHY_STATE_IDLE;
 233              	 .loc 3 85 0
 234 009a 1B4B     	 ldr r3,.L15+12
 235 009c 0122     	 movs r2,#1
 236 009e 1A70     	 strb r2,[r3]
 237              	.L14:
  86:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 
  87:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	do {phyWriteRegister(TRX_STATE_REG, TRX_CMD_TRX_OFF);
 238              	 .loc 3 87 0 discriminator 1
 239 00a0 0821     	 movs r1,#8
 240 00a2 0220     	 movs r0,#2
 241 00a4 00F0BCF9 	 bl phyWriteRegister
  88:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	} while (TRX_STATUS_TRX_OFF !=
  89:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 			(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));
 242              	 .loc 3 89 0 discriminator 1
 243 00a8 0120     	 movs r0,#1
 244 00aa 00F0CDF9 	 bl phyReadRegister
 245 00ae 0346     	 mov r3,r0
 246 00b0 03F01F03 	 and r3,r3,#31
 247 00b4 082B     	 cmp r3,#8
 248 00b6 F3D1     	 bne .L14
  90:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 
  91:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	phyWriteRegister(TRX_CTRL_1_REG,
 249              	 .loc 3 91 0
 250 00b8 2E21     	 movs r1,#46
 251 00ba 0420     	 movs r0,#4
 252 00bc 00F0B0F9 	 bl phyWriteRegister
  92:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 			(1 << TX_AUTO_CRC_ON) | (3 << SPI_CMD_MODE) |
  93:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 			(1 << IRQ_MASK_MODE));
  94:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 
  95:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	phyWriteRegister(TRX_CTRL_2_REG,
 253              	 .loc 3 95 0
 254 00c0 A021     	 movs r1,#160
 255 00c2 0C20     	 movs r0,#12
 256 00c4 00F0ACF9 	 bl phyWriteRegister
  96:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 			(1 << RX_SAFE_MODE) | (1 << OQPSK_SCRAM_EN));
  97:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 
  98:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** #if (ANTENNA_DIVERSITY == 1)
  99:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	phyWriteRegister(ANT_DIV_REG, (1 << ANT_DIV_EN) | (1 << ANT_EXT_SW_EN) | (2 << ANT_CTRL));
 100:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	phyWriteRegister(RX_CTRL_REG, (3 << PDT_THRES));
 101:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** #else
 102:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	#if (ANTENNA_DEFAULT != 0)
 103:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 		phyWriteRegister(ANT_DIV_REG, (1 << ANT_EXT_SW_EN) | (ANTENNA_DEFAULT << ANT_CTRL));
 257              	 .loc 3 103 0
 258 00c8 0521     	 movs r1,#5
 259 00ca 0D20     	 movs r0,#13
 260 00cc 00F0A8F9 	 bl phyWriteRegister
 104:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	#endif // ANTENNA_DIVERSITY
 105:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** #endif // ANTENNA_DIVERSITY
 106:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** #ifdef EXT_RF_FRONT_END_CTRL
 107:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	uint8_t		reg					= phyReadRegister(TRX_CTRL_1_REG);
 261              	 .loc 3 107 0
 262 00d0 0420     	 movs r0,#4
 263 00d2 00F0B9F9 	 bl phyReadRegister
 264 00d6 0346     	 mov r3,r0
 265 00d8 FB71     	 strb r3,[r7,#7]
 108:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	phyWriteRegister(TRX_CTRL_1_REG, reg | (1 << PA_EXT_EN));
 266              	 .loc 3 108 0
 267 00da FB79     	 ldrb r3,[r7,#7]
 268 00dc 63F07F03 	 orn r3,r3,#127
 269 00e0 DBB2     	 uxtb r3,r3
 270 00e2 1946     	 mov r1,r3
 271 00e4 0420     	 movs r0,#4
 272 00e6 00F09BF9 	 bl phyWriteRegister
 109:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 
 110:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	ioport_set_pin_level(AT86RFX_CSD, IOPORT_PIN_LEVEL_HIGH);
 273              	 .loc 3 110 0
 274 00ea 0121     	 movs r1,#1
 275 00ec 0B20     	 movs r0,#11
 276 00ee FFF787FF 	 bl ioport_set_pin_level
 111:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** #endif // EXT_RF_FRONT_END_CTRL
 112:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** }
 277              	 .loc 3 112 0
 278 00f2 00BF     	 nop
 279 00f4 0837     	 adds r7,r7,#8
 280              	.LCFI9:
 281              	 .cfi_def_cfa_offset 8
 282 00f6 BD46     	 mov sp,r7
 283              	.LCFI10:
 284              	 .cfi_def_cfa_register 13
 285              	 
 286 00f8 80BD     	 pop {r7,pc}
 287              	.L16:
 288 00fa 00BF     	 .align 2
 289              	.L15:
 290 00fc 00000000 	 .word trx_spi_init
 291 0100 00000000 	 .word PhyReset
 292 0104 00000000 	 .word phyRxState
 293 0108 00000000 	 .word phyState
 294              	 .cfi_endproc
 295              	.LFE223:
 297              	 .align 1
 298              	 .global PHY_SetTdmaMode
 299              	 .syntax unified
 300              	 .thumb
 301              	 .thumb_func
 302              	 .fpu softvfp
 304              	PHY_SetTdmaMode:
 305              	.LFB224:
 113:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** void PHY_SetTdmaMode(bool mode)
 114:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** {
 306              	 .loc 3 114 0
 307              	 .cfi_startproc
 308              	 
 309              	 
 310 010c 80B5     	 push {r7,lr}
 311              	.LCFI11:
 312              	 .cfi_def_cfa_offset 8
 313              	 .cfi_offset 7,-8
 314              	 .cfi_offset 14,-4
 315 010e 84B0     	 sub sp,sp,#16
 316              	.LCFI12:
 317              	 .cfi_def_cfa_offset 24
 318 0110 00AF     	 add r7,sp,#0
 319              	.LCFI13:
 320              	 .cfi_def_cfa_register 7
 321 0112 0346     	 mov r3,r0
 322 0114 FB71     	 strb r3,[r7,#7]
 115:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	uint8_t		reg					= phyReadRegister(CSMA_SEED_1_REG);
 323              	 .loc 3 115 0
 324 0116 2E20     	 movs r0,#46
 325 0118 00F096F9 	 bl phyReadRegister
 326 011c 0346     	 mov r3,r0
 327 011e FB73     	 strb r3,[r7,#15]
 116:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 
 117:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	if(mode)
 328              	 .loc 3 117 0
 329 0120 FB79     	 ldrb r3,[r7,#7]
 330 0122 002B     	 cmp r3,#0
 331 0124 0CD0     	 beq .L18
 118:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	{
 119:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 		phyWriteRegister(XAH_CTRL_0_REG, (0 << MAX_FRAME_RETRES) | (7 << MAX_CSMA_RETRES));
 332              	 .loc 3 119 0
 333 0126 0E21     	 movs r1,#14
 334 0128 2C20     	 movs r0,#44
 335 012a 00F079F9 	 bl phyWriteRegister
 120:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 		phyWriteRegister(CSMA_SEED_1_REG, reg | (1 << AACK_DIS_ACK));
 336              	 .loc 3 120 0
 337 012e FB7B     	 ldrb r3,[r7,#15]
 338 0130 43F01003 	 orr r3,r3,#16
 339 0134 DBB2     	 uxtb r3,r3
 340 0136 1946     	 mov r1,r3
 341 0138 2E20     	 movs r0,#46
 342 013a 00F071F9 	 bl phyWriteRegister
 121:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	}
 122:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	else
 123:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	{
 124:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 		phyWriteRegister(XAH_CTRL_0_REG, (3 << MAX_FRAME_RETRES) | (4 << MAX_CSMA_RETRES));
 125:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 		
 126:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 		reg							&= ~(1 << AACK_DIS_ACK);
 127:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 		phyWriteRegister(CSMA_SEED_1_REG, reg);
 128:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	}
 129:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** }
 343              	 .loc 3 129 0
 344 013e 0CE0     	 b .L20
 345              	.L18:
 124:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 		
 346              	 .loc 3 124 0
 347 0140 3821     	 movs r1,#56
 348 0142 2C20     	 movs r0,#44
 349 0144 00F06CF9 	 bl phyWriteRegister
 126:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 		phyWriteRegister(CSMA_SEED_1_REG, reg);
 350              	 .loc 3 126 0
 351 0148 FB7B     	 ldrb r3,[r7,#15]
 352 014a 23F01003 	 bic r3,r3,#16
 353 014e FB73     	 strb r3,[r7,#15]
 127:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	}
 354              	 .loc 3 127 0
 355 0150 FB7B     	 ldrb r3,[r7,#15]
 356 0152 1946     	 mov r1,r3
 357 0154 2E20     	 movs r0,#46
 358 0156 00F063F9 	 bl phyWriteRegister
 359              	.L20:
 360              	 .loc 3 129 0
 361 015a 00BF     	 nop
 362 015c 1037     	 adds r7,r7,#16
 363              	.LCFI14:
 364              	 .cfi_def_cfa_offset 8
 365 015e BD46     	 mov sp,r7
 366              	.LCFI15:
 367              	 .cfi_def_cfa_register 13
 368              	 
 369 0160 80BD     	 pop {r7,pc}
 370              	 .cfi_endproc
 371              	.LFE224:
 373              	 .align 1
 374              	 .global PHY_SetRxState
 375              	 .syntax unified
 376              	 .thumb
 377              	 .thumb_func
 378              	 .fpu softvfp
 380              	PHY_SetRxState:
 381              	.LFB225:
 130:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 
 131:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 
 132:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** /*************************************************************************//**
 133:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** *****************************************************************************/
 134:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** void PHY_SetRxState(bool rx)
 135:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** {
 382              	 .loc 3 135 0
 383              	 .cfi_startproc
 384              	 
 385              	 
 386 0162 80B5     	 push {r7,lr}
 387              	.LCFI16:
 388              	 .cfi_def_cfa_offset 8
 389              	 .cfi_offset 7,-8
 390              	 .cfi_offset 14,-4
 391 0164 82B0     	 sub sp,sp,#8
 392              	.LCFI17:
 393              	 .cfi_def_cfa_offset 16
 394 0166 00AF     	 add r7,sp,#0
 395              	.LCFI18:
 396              	 .cfi_def_cfa_register 7
 397 0168 0346     	 mov r3,r0
 398 016a FB71     	 strb r3,[r7,#7]
 136:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	phyRxState = rx;
 399              	 .loc 3 136 0
 400 016c 044A     	 ldr r2,.L22
 401 016e FB79     	 ldrb r3,[r7,#7]
 402 0170 1370     	 strb r3,[r2]
 137:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	phySetRxState();
 403              	 .loc 3 137 0
 404 0172 00F08EF9 	 bl phySetRxState
 138:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** }
 405              	 .loc 3 138 0
 406 0176 00BF     	 nop
 407 0178 0837     	 adds r7,r7,#8
 408              	.LCFI19:
 409              	 .cfi_def_cfa_offset 8
 410 017a BD46     	 mov sp,r7
 411              	.LCFI20:
 412              	 .cfi_def_cfa_register 13
 413              	 
 414 017c 80BD     	 pop {r7,pc}
 415              	.L23:
 416 017e 00BF     	 .align 2
 417              	.L22:
 418 0180 00000000 	 .word phyRxState
 419              	 .cfi_endproc
 420              	.LFE225:
 422              	 .align 1
 423              	 .global PHY_SetChannel
 424              	 .syntax unified
 425              	 .thumb
 426              	 .thumb_func
 427              	 .fpu softvfp
 429              	PHY_SetChannel:
 430              	.LFB226:
 139:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 
 140:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** /*************************************************************************//**
 141:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** *****************************************************************************/
 142:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** void PHY_SetChannel(uint8_t channel)
 143:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** {
 431              	 .loc 3 143 0
 432              	 .cfi_startproc
 433              	 
 434              	 
 435 0184 80B5     	 push {r7,lr}
 436              	.LCFI21:
 437              	 .cfi_def_cfa_offset 8
 438              	 .cfi_offset 7,-8
 439              	 .cfi_offset 14,-4
 440 0186 84B0     	 sub sp,sp,#16
 441              	.LCFI22:
 442              	 .cfi_def_cfa_offset 24
 443 0188 00AF     	 add r7,sp,#0
 444              	.LCFI23:
 445              	 .cfi_def_cfa_register 7
 446 018a 0346     	 mov r3,r0
 447 018c FB71     	 strb r3,[r7,#7]
 144:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	uint8_t reg;
 145:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 
 146:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	reg = phyReadRegister(PHY_CC_CCA_REG) & ~0x1f;
 448              	 .loc 3 146 0
 449 018e 0820     	 movs r0,#8
 450 0190 00F05AF9 	 bl phyReadRegister
 451 0194 0346     	 mov r3,r0
 452 0196 23F01F03 	 bic r3,r3,#31
 453 019a FB73     	 strb r3,[r7,#15]
 147:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	phyWriteRegister(PHY_CC_CCA_REG, reg | channel);
 454              	 .loc 3 147 0
 455 019c FA7B     	 ldrb r2,[r7,#15]
 456 019e FB79     	 ldrb r3,[r7,#7]
 457 01a0 1343     	 orrs r3,r3,r2
 458 01a2 DBB2     	 uxtb r3,r3
 459 01a4 1946     	 mov r1,r3
 460 01a6 0820     	 movs r0,#8
 461 01a8 00F03AF9 	 bl phyWriteRegister
 148:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** }
 462              	 .loc 3 148 0
 463 01ac 00BF     	 nop
 464 01ae 1037     	 adds r7,r7,#16
 465              	.LCFI24:
 466              	 .cfi_def_cfa_offset 8
 467 01b0 BD46     	 mov sp,r7
 468              	.LCFI25:
 469              	 .cfi_def_cfa_register 13
 470              	 
 471 01b2 80BD     	 pop {r7,pc}
 472              	 .cfi_endproc
 473              	.LFE226:
 475              	 .align 1
 476              	 .global PHY_SetPanId
 477              	 .syntax unified
 478              	 .thumb
 479              	 .thumb_func
 480              	 .fpu softvfp
 482              	PHY_SetPanId:
 483              	.LFB227:
 149:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 
 150:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** /*************************************************************************//**
 151:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** *****************************************************************************/
 152:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** void PHY_SetPanId(uint16_t panId)
 153:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** {
 484              	 .loc 3 153 0
 485              	 .cfi_startproc
 486              	 
 487              	 
 488 01b4 80B5     	 push {r7,lr}
 489              	.LCFI26:
 490              	 .cfi_def_cfa_offset 8
 491              	 .cfi_offset 7,-8
 492              	 .cfi_offset 14,-4
 493 01b6 84B0     	 sub sp,sp,#16
 494              	.LCFI27:
 495              	 .cfi_def_cfa_offset 24
 496 01b8 00AF     	 add r7,sp,#0
 497              	.LCFI28:
 498              	 .cfi_def_cfa_register 7
 499 01ba 0346     	 mov r3,r0
 500 01bc FB80     	 strh r3,[r7,#6]
 154:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	uint8_t *d = (uint8_t *)&panId;
 501              	 .loc 3 154 0
 502 01be BB1D     	 adds r3,r7,#6
 503 01c0 FB60     	 str r3,[r7,#12]
 155:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 
 156:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	phyWriteRegister(PAN_ID_0_REG, d[0]);
 504              	 .loc 3 156 0
 505 01c2 FB68     	 ldr r3,[r7,#12]
 506 01c4 1B78     	 ldrb r3,[r3]
 507 01c6 1946     	 mov r1,r3
 508 01c8 2220     	 movs r0,#34
 509 01ca 00F029F9 	 bl phyWriteRegister
 157:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	phyWriteRegister(PAN_ID_1_REG, d[1]);
 510              	 .loc 3 157 0
 511 01ce FB68     	 ldr r3,[r7,#12]
 512 01d0 0133     	 adds r3,r3,#1
 513 01d2 1B78     	 ldrb r3,[r3]
 514 01d4 1946     	 mov r1,r3
 515 01d6 2320     	 movs r0,#35
 516 01d8 00F022F9 	 bl phyWriteRegister
 158:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** }
 517              	 .loc 3 158 0
 518 01dc 00BF     	 nop
 519 01de 1037     	 adds r7,r7,#16
 520              	.LCFI29:
 521              	 .cfi_def_cfa_offset 8
 522 01e0 BD46     	 mov sp,r7
 523              	.LCFI30:
 524              	 .cfi_def_cfa_register 13
 525              	 
 526 01e2 80BD     	 pop {r7,pc}
 527              	 .cfi_endproc
 528              	.LFE227:
 530              	 .align 1
 531              	 .global PHY_SetShortAddr
 532              	 .syntax unified
 533              	 .thumb
 534              	 .thumb_func
 535              	 .fpu softvfp
 537              	PHY_SetShortAddr:
 538              	.LFB228:
 159:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 
 160:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** /*************************************************************************//**
 161:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** *****************************************************************************/
 162:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** void PHY_SetShortAddr(uint16_t addr)
 163:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** {
 539              	 .loc 3 163 0
 540              	 .cfi_startproc
 541              	 
 542              	 
 543 01e4 80B5     	 push {r7,lr}
 544              	.LCFI31:
 545              	 .cfi_def_cfa_offset 8
 546              	 .cfi_offset 7,-8
 547              	 .cfi_offset 14,-4
 548 01e6 84B0     	 sub sp,sp,#16
 549              	.LCFI32:
 550              	 .cfi_def_cfa_offset 24
 551 01e8 00AF     	 add r7,sp,#0
 552              	.LCFI33:
 553              	 .cfi_def_cfa_register 7
 554 01ea 0346     	 mov r3,r0
 555 01ec FB80     	 strh r3,[r7,#6]
 164:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	uint8_t *d = (uint8_t *)&addr;
 556              	 .loc 3 164 0
 557 01ee BB1D     	 adds r3,r7,#6
 558 01f0 FB60     	 str r3,[r7,#12]
 165:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 
 166:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	phyWriteRegister(SHORT_ADDR_0_REG, d[0]);
 559              	 .loc 3 166 0
 560 01f2 FB68     	 ldr r3,[r7,#12]
 561 01f4 1B78     	 ldrb r3,[r3]
 562 01f6 1946     	 mov r1,r3
 563 01f8 2020     	 movs r0,#32
 564 01fa 00F011F9 	 bl phyWriteRegister
 167:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	phyWriteRegister(SHORT_ADDR_1_REG, d[1]);
 565              	 .loc 3 167 0
 566 01fe FB68     	 ldr r3,[r7,#12]
 567 0200 0133     	 adds r3,r3,#1
 568 0202 1B78     	 ldrb r3,[r3]
 569 0204 1946     	 mov r1,r3
 570 0206 2120     	 movs r0,#33
 571 0208 00F00AF9 	 bl phyWriteRegister
 168:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	phyWriteRegister(CSMA_SEED_0_REG, d[0] + d[1]);
 572              	 .loc 3 168 0
 573 020c FB68     	 ldr r3,[r7,#12]
 574 020e 1A78     	 ldrb r2,[r3]
 575 0210 FB68     	 ldr r3,[r7,#12]
 576 0212 0133     	 adds r3,r3,#1
 577 0214 1B78     	 ldrb r3,[r3]
 578 0216 1344     	 add r3,r3,r2
 579 0218 DBB2     	 uxtb r3,r3
 580 021a 1946     	 mov r1,r3
 581 021c 2D20     	 movs r0,#45
 582 021e 00F0FFF8 	 bl phyWriteRegister
 169:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** }
 583              	 .loc 3 169 0
 584 0222 00BF     	 nop
 585 0224 1037     	 adds r7,r7,#16
 586              	.LCFI34:
 587              	 .cfi_def_cfa_offset 8
 588 0226 BD46     	 mov sp,r7
 589              	.LCFI35:
 590              	 .cfi_def_cfa_register 13
 591              	 
 592 0228 80BD     	 pop {r7,pc}
 593              	 .cfi_endproc
 594              	.LFE228:
 596              	 .align 1
 597              	 .global PHY_SetTxPower
 598              	 .syntax unified
 599              	 .thumb
 600              	 .thumb_func
 601              	 .fpu softvfp
 603              	PHY_SetTxPower:
 604              	.LFB229:
 170:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 
 171:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** /*************************************************************************//**
 172:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** *****************************************************************************/
 173:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** void PHY_SetTxPower(uint8_t txPower)
 174:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** {
 605              	 .loc 3 174 0
 606              	 .cfi_startproc
 607              	 
 608              	 
 609 022a 80B5     	 push {r7,lr}
 610              	.LCFI36:
 611              	 .cfi_def_cfa_offset 8
 612              	 .cfi_offset 7,-8
 613              	 .cfi_offset 14,-4
 614 022c 84B0     	 sub sp,sp,#16
 615              	.LCFI37:
 616              	 .cfi_def_cfa_offset 24
 617 022e 00AF     	 add r7,sp,#0
 618              	.LCFI38:
 619              	 .cfi_def_cfa_register 7
 620 0230 0346     	 mov r3,r0
 621 0232 FB71     	 strb r3,[r7,#7]
 175:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	uint8_t reg;
 176:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 
 177:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	reg = phyReadRegister(PHY_TX_PWR_REG) & ~0x0f;
 622              	 .loc 3 177 0
 623 0234 0520     	 movs r0,#5
 624 0236 00F007F9 	 bl phyReadRegister
 625 023a 0346     	 mov r3,r0
 626 023c 23F00F03 	 bic r3,r3,#15
 627 0240 FB73     	 strb r3,[r7,#15]
 178:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	phyWriteRegister(PHY_TX_PWR_REG, reg | txPower);
 628              	 .loc 3 178 0
 629 0242 FA7B     	 ldrb r2,[r7,#15]
 630 0244 FB79     	 ldrb r3,[r7,#7]
 631 0246 1343     	 orrs r3,r3,r2
 632 0248 DBB2     	 uxtb r3,r3
 633 024a 1946     	 mov r1,r3
 634 024c 0520     	 movs r0,#5
 635 024e 00F0E7F8 	 bl phyWriteRegister
 179:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** }
 636              	 .loc 3 179 0
 637 0252 00BF     	 nop
 638 0254 1037     	 adds r7,r7,#16
 639              	.LCFI39:
 640              	 .cfi_def_cfa_offset 8
 641 0256 BD46     	 mov sp,r7
 642              	.LCFI40:
 643              	 .cfi_def_cfa_register 13
 644              	 
 645 0258 80BD     	 pop {r7,pc}
 646              	 .cfi_endproc
 647              	.LFE229:
 649              	 .align 1
 650              	 .global PHY_Sleep
 651              	 .syntax unified
 652              	 .thumb
 653              	 .thumb_func
 654              	 .fpu softvfp
 656              	PHY_Sleep:
 657              	.LFB230:
 180:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 
 181:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** /*************************************************************************//**
 182:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** *****************************************************************************/
 183:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** void PHY_Sleep(void)
 184:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** {
 658              	 .loc 3 184 0
 659              	 .cfi_startproc
 660              	 
 661              	 
 662 025a 80B5     	 push {r7,lr}
 663              	.LCFI41:
 664              	 .cfi_def_cfa_offset 8
 665              	 .cfi_offset 7,-8
 666              	 .cfi_offset 14,-4
 667 025c 82B0     	 sub sp,sp,#8
 668              	.LCFI42:
 669              	 .cfi_def_cfa_offset 16
 670 025e 00AF     	 add r7,sp,#0
 671              	.LCFI43:
 672              	 .cfi_def_cfa_register 7
 185:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	if(phyState != PHY_STATE_SLEEP)
 673              	 .loc 3 185 0
 674 0260 174B     	 ldr r3,.L30
 675 0262 1B78     	 ldrb r3,[r3]
 676 0264 022B     	 cmp r3,#2
 677 0266 09D0     	 beq .L29
 186:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	{
 187:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 		phyTrxSetState(TRX_CMD_TRX_OFF);
 678              	 .loc 3 187 0
 679 0268 0820     	 movs r0,#8
 680 026a 00F025F9 	 bl phyTrxSetState
 188:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 		TRX_SLP_TR_HIGH();
 681              	 .loc 3 188 0
 682 026e 0121     	 movs r1,#1
 683 0270 0920     	 movs r0,#9
 684 0272 FFF7C5FE 	 bl ioport_set_pin_level
 189:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 		phyState = PHY_STATE_SLEEP;		
 685              	 .loc 3 189 0
 686 0276 124B     	 ldr r3,.L30
 687 0278 0222     	 movs r2,#2
 688 027a 1A70     	 strb r2,[r3]
 689              	.L29:
 190:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	}
 191:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	
 192:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	uint8_t reg;
 193:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 
 194:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** #if (ANTENNA_DIVERSITY == 1)
 195:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	reg								= phyReadRegister(ANT_DIV_REG);
 196:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	phyWriteRegister(ANT_DIV_REG, reg & ~((1 << ANT_DIV_EN) | (1 << ANT_EXT_SW_EN)));
 197:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** #else
 198:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	#if (ANTENNA_DEFAULT != 0)
 199:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 		reg							= phyReadRegister(ANT_DIV_REG);
 690              	 .loc 3 199 0
 691 027c 0D20     	 movs r0,#13
 692 027e 00F0E3F8 	 bl phyReadRegister
 693 0282 0346     	 mov r3,r0
 694 0284 FB71     	 strb r3,[r7,#7]
 200:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 		phyWriteRegister(ANT_DIV_REG, reg & ~((1 << ANT_EXT_SW_EN) | (0x03 << ANT_CTRL)));
 695              	 .loc 3 200 0
 696 0286 FB79     	 ldrb r3,[r7,#7]
 697 0288 23F00703 	 bic r3,r3,#7
 698 028c DBB2     	 uxtb r3,r3
 699 028e 1946     	 mov r1,r3
 700 0290 0D20     	 movs r0,#13
 701 0292 00F0C5F8 	 bl phyWriteRegister
 201:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	#endif // ANTENNA_DEFAULT
 202:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** #endif // ANTENNA_DIVERSITY
 203:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** #ifdef EXT_RF_FRONT_END_CTRL
 204:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	reg								= phyReadRegister(TRX_CTRL_1_REG);
 702              	 .loc 3 204 0
 703 0296 0420     	 movs r0,#4
 704 0298 00F0D6F8 	 bl phyReadRegister
 705 029c 0346     	 mov r3,r0
 706 029e FB71     	 strb r3,[r7,#7]
 205:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	phyWriteRegister(TRX_CTRL_1_REG, reg & ~(1 << PA_EXT_EN));
 707              	 .loc 3 205 0
 708 02a0 FB79     	 ldrb r3,[r7,#7]
 709 02a2 03F07F03 	 and r3,r3,#127
 710 02a6 DBB2     	 uxtb r3,r3
 711 02a8 1946     	 mov r1,r3
 712 02aa 0420     	 movs r0,#4
 713 02ac 00F0B8F8 	 bl phyWriteRegister
 206:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 
 207:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	ioport_set_pin_level(AT86RFX_CSD, IOPORT_PIN_LEVEL_LOW);
 714              	 .loc 3 207 0
 715 02b0 0021     	 movs r1,#0
 716 02b2 0B20     	 movs r0,#11
 717 02b4 FFF7A4FE 	 bl ioport_set_pin_level
 208:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** #endif // EXT_RF_FRONT_END_CTRL
 209:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** }
 718              	 .loc 3 209 0
 719 02b8 00BF     	 nop
 720 02ba 0837     	 adds r7,r7,#8
 721              	.LCFI44:
 722              	 .cfi_def_cfa_offset 8
 723 02bc BD46     	 mov sp,r7
 724              	.LCFI45:
 725              	 .cfi_def_cfa_register 13
 726              	 
 727 02be 80BD     	 pop {r7,pc}
 728              	.L31:
 729              	 .align 2
 730              	.L30:
 731 02c0 00000000 	 .word phyState
 732              	 .cfi_endproc
 733              	.LFE230:
 735              	 .align 1
 736              	 .global PHY_Wakeup
 737              	 .syntax unified
 738              	 .thumb
 739              	 .thumb_func
 740              	 .fpu softvfp
 742              	PHY_Wakeup:
 743              	.LFB231:
 210:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 
 211:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** /*************************************************************************//**
 212:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** *****************************************************************************/
 213:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** void PHY_Wakeup(void)
 214:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** {
 744              	 .loc 3 214 0
 745              	 .cfi_startproc
 746              	 
 747              	 
 748 02c4 80B5     	 push {r7,lr}
 749              	.LCFI46:
 750              	 .cfi_def_cfa_offset 8
 751              	 .cfi_offset 7,-8
 752              	 .cfi_offset 14,-4
 753 02c6 00AF     	 add r7,sp,#0
 754              	.LCFI47:
 755              	 .cfi_def_cfa_register 7
 215:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	TRX_SLP_TR_LOW();
 756              	 .loc 3 215 0
 757 02c8 0021     	 movs r1,#0
 758 02ca 0920     	 movs r0,#9
 759 02cc FFF798FE 	 bl ioport_set_pin_level
 216:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	phySetRxState();
 760              	 .loc 3 216 0
 761 02d0 00F0DFF8 	 bl phySetRxState
 217:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	phyState = PHY_STATE_IDLE;
 762              	 .loc 3 217 0
 763 02d4 024B     	 ldr r3,.L33
 764 02d6 0122     	 movs r2,#1
 765 02d8 1A70     	 strb r2,[r3]
 218:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** }
 766              	 .loc 3 218 0
 767 02da 00BF     	 nop
 768 02dc 80BD     	 pop {r7,pc}
 769              	.L34:
 770 02de 00BF     	 .align 2
 771              	.L33:
 772 02e0 00000000 	 .word phyState
 773              	 .cfi_endproc
 774              	.LFE231:
 776              	 .align 1
 777              	 .global PHY_DataReq
 778              	 .syntax unified
 779              	 .thumb
 780              	 .thumb_func
 781              	 .fpu softvfp
 783              	PHY_DataReq:
 784              	.LFB232:
 219:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 
 220:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** /*************************************************************************//**
 221:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** *****************************************************************************/
 222:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 
 223:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** void PHY_DataReq(uint8_t *data, uint8_t size)
 224:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** {
 785              	 .loc 3 224 0
 786              	 .cfi_startproc
 787              	 
 788              	 
 789 02e4 80B5     	 push {r7,lr}
 790              	.LCFI48:
 791              	 .cfi_def_cfa_offset 8
 792              	 .cfi_offset 7,-8
 793              	 .cfi_offset 14,-4
 794 02e6 82B0     	 sub sp,sp,#8
 795              	.LCFI49:
 796              	 .cfi_def_cfa_offset 16
 797 02e8 00AF     	 add r7,sp,#0
 798              	.LCFI50:
 799              	 .cfi_def_cfa_register 7
 800 02ea 7860     	 str r0,[r7,#4]
 801 02ec 0B46     	 mov r3,r1
 802 02ee FB70     	 strb r3,[r7,#3]
 225:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** #if (ANTENNA_DIVERSITY == 1)
 226:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** #endif // ANTENNA_DIVERSITY
 227:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** #ifdef EXT_RF_FRONT_END_CTRL
 228:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	ioport_set_pin_level(AT86RFX_CSD, IOPORT_PIN_LEVEL_LOW);
 803              	 .loc 3 228 0
 804 02f0 0021     	 movs r1,#0
 805 02f2 0B20     	 movs r0,#11
 806 02f4 FFF784FE 	 bl ioport_set_pin_level
 229:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** #endif // EXT_RF_FRONT_END_CTRL
 230:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 
 231:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	phyTrxSetState(TRX_CMD_TX_ARET_ON);
 807              	 .loc 3 231 0
 808 02f8 1920     	 movs r0,#25
 809 02fa 00F0DDF8 	 bl phyTrxSetState
 232:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 
 233:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	phyReadRegister(IRQ_STATUS_REG);
 810              	 .loc 3 233 0
 811 02fe 0F20     	 movs r0,#15
 812 0300 00F0A2F8 	 bl phyReadRegister
 234:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 
 235:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	/* size of the buffer is sent as first byte of the data
 236:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	 * and data starts from second byte.
 237:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	 */
 238:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	data[0] += 2;
 813              	 .loc 3 238 0
 814 0304 7B68     	 ldr r3,[r7,#4]
 815 0306 1B78     	 ldrb r3,[r3]
 816 0308 0233     	 adds r3,r3,#2
 817 030a DAB2     	 uxtb r2,r3
 818 030c 7B68     	 ldr r3,[r7,#4]
 819 030e 1A70     	 strb r2,[r3]
 239:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	trx_frame_write(data, size /* length value*/);
 820              	 .loc 3 239 0
 821 0310 FB78     	 ldrb r3,[r7,#3]
 822 0312 1946     	 mov r1,r3
 823 0314 7868     	 ldr r0,[r7,#4]
 824 0316 094B     	 ldr r3,.L36
 825 0318 9847     	 blx r3
 826              	.LVL2:
 240:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 
 241:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	phyState = PHY_STATE_TX_WAIT_END;
 827              	 .loc 3 241 0
 828 031a 094B     	 ldr r3,.L36+4
 829 031c 0322     	 movs r2,#3
 830 031e 1A70     	 strb r2,[r3]
 242:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 
 243:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	TRX_SLP_TR_HIGH();
 831              	 .loc 3 243 0
 832 0320 0121     	 movs r1,#1
 833 0322 0920     	 movs r0,#9
 834 0324 FFF76CFE 	 bl ioport_set_pin_level
 835              	.LBB64:
 836              	.LBB65:
 837              	 .file 4 "../../../platform/thirdparty/CMSIS/include/core_cmInstr.h"
   1:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /**************************************************************************//**
   2:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  * @file     core_cmInstr.h
   3:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  * @brief    CMSIS Cortex-M Core Instruction Access Header File
   4:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  * @version  V3.00
   5:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  * @date     07. February 2012
   6:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  *
   7:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  * @note
   8:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  * Copyright (C) 2009-2012 ARM Limited. All rights reserved.
   9:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  *
  10:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  * @par
  11:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  * ARM Limited (ARM) is supplying this software for use with Cortex-M
  12:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  * processor based microcontrollers.  This file can be freely distributed
  13:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  * within development tools that are supporting such ARM based processors.
  14:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  *
  15:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  * @par
  16:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
  17:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
  18:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
  19:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  * ARM SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR
  20:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
  21:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  *
  22:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  ******************************************************************************/
  23:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
  24:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** #ifndef __CORE_CMINSTR_H
  25:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** #define __CORE_CMINSTR_H
  26:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
  27:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
  28:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /* ##########################  Core Instruction Access  ######################### */
  29:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
  30:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****   Access to dedicated instructions
  31:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****   @{
  32:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** */
  33:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
  34:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** #if   defined ( __CC_ARM ) /*------------------RealView Compiler -----------------*/
  35:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /* ARM armcc specific functions */
  36:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
  37:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** #if (__ARMCC_VERSION < 400677)
  38:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****   #error "Please use ARM Compiler Toolchain V4.0.677 or later!"
  39:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** #endif
  40:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
  41:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
  42:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /** \brief  No Operation
  43:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
  44:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     No Operation does nothing. This instruction can be used for code alignment purposes.
  45:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  */
  46:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** #define __NOP                             __nop
  47:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
  48:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
  49:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /** \brief  Wait For Interrupt
  50:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
  51:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     Wait For Interrupt is a hint instruction that suspends execution
  52:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     until one of a number of events occurs.
  53:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  */
  54:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** #define __WFI                             __wfi
  55:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
  56:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
  57:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /** \brief  Wait For Event
  58:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
  59:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     Wait For Event is a hint instruction that permits the processor to enter
  60:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     a low-power state until one of a number of events occurs.
  61:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  */
  62:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** #define __WFE                             __wfe
  63:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
  64:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
  65:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /** \brief  Send Event
  66:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
  67:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     Send Event is a hint instruction. It causes an event to be signaled to the CPU.
  68:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  */
  69:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** #define __SEV                             __sev
  70:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
  71:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
  72:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /** \brief  Instruction Synchronization Barrier
  73:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
  74:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     Instruction Synchronization Barrier flushes the pipeline in the processor,
  75:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     so that all instructions following the ISB are fetched from cache or
  76:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     memory, after the instruction has been completed.
  77:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  */
  78:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** #define __ISB()                           __isb(0xF)
  79:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
  80:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
  81:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /** \brief  Data Synchronization Barrier
  82:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
  83:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     This function acts as a special kind of Data Memory Barrier.
  84:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     It completes when all explicit memory accesses before this instruction complete.
  85:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  */
  86:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** #define __DSB()                           __dsb(0xF)
  87:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
  88:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
  89:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /** \brief  Data Memory Barrier
  90:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
  91:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     This function ensures the apparent order of the explicit memory operations before
  92:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     and after the instruction, without ensuring their completion.
  93:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  */
  94:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** #define __DMB()                           __dmb(0xF)
  95:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
  96:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
  97:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /** \brief  Reverse byte order (32 bit)
  98:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
  99:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     This function reverses the byte order in integer value.
 100:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 101:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \param [in]    value  Value to reverse
 102:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \return               Reversed value
 103:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  */
 104:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** #define __REV                             __rev
 105:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 106:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 107:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /** \brief  Reverse byte order (16 bit)
 108:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 109:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     This function reverses the byte order in two unsigned short values.
 110:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 111:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \param [in]    value  Value to reverse
 112:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \return               Reversed value
 113:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  */
 114:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** __attribute__((section(".rev16_text"))) __STATIC_INLINE __ASM uint32_t __REV16(uint32_t value)
 115:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** {
 116:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****   rev16 r0, r0
 117:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****   bx lr
 118:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** }
 119:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 120:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 121:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /** \brief  Reverse byte order in signed short value
 122:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 123:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     This function reverses the byte order in a signed short value with sign extension to integer.
 124:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 125:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \param [in]    value  Value to reverse
 126:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \return               Reversed value
 127:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  */
 128:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** __attribute__((section(".revsh_text"))) __STATIC_INLINE __ASM int32_t __REVSH(int32_t value)
 129:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** {
 130:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****   revsh r0, r0
 131:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****   bx lr
 132:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** }
 133:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 134:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 135:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /** \brief  Rotate Right in unsigned value (32 bit)
 136:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 137:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     This function Rotate Right (immediate) provides the value of the contents of a register rotated
 138:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 139:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \param [in]    value  Value to rotate
 140:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \param [in]    value  Number of Bits to rotate
 141:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \return               Rotated value
 142:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  */
 143:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** #define __ROR                             __ror
 144:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 145:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 146:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** #if       (__CORTEX_M >= 0x03)
 147:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 148:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /** \brief  Reverse bit order of value
 149:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 150:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     This function reverses the bit order of the given value.
 151:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 152:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \param [in]    value  Value to reverse
 153:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \return               Reversed value
 154:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  */
 155:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** #define __RBIT                            __rbit
 156:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 157:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 158:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /** \brief  LDR Exclusive (8 bit)
 159:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 160:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     This function performs a exclusive LDR command for 8 bit value.
 161:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 162:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 163:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \return             value of type uint8_t at (*ptr)
 164:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  */
 165:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** #define __LDREXB(ptr)                     ((uint8_t ) __ldrex(ptr))
 166:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 167:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 168:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /** \brief  LDR Exclusive (16 bit)
 169:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 170:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     This function performs a exclusive LDR command for 16 bit values.
 171:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 172:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 173:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \return        value of type uint16_t at (*ptr)
 174:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  */
 175:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** #define __LDREXH(ptr)                     ((uint16_t) __ldrex(ptr))
 176:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 177:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 178:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /** \brief  LDR Exclusive (32 bit)
 179:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 180:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     This function performs a exclusive LDR command for 32 bit values.
 181:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 182:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 183:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \return        value of type uint32_t at (*ptr)
 184:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  */
 185:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** #define __LDREXW(ptr)                     ((uint32_t ) __ldrex(ptr))
 186:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 187:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 188:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /** \brief  STR Exclusive (8 bit)
 189:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 190:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     This function performs a exclusive STR command for 8 bit values.
 191:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 192:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \param [in]  value  Value to store
 193:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 194:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \return          0  Function succeeded
 195:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \return          1  Function failed
 196:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  */
 197:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** #define __STREXB(value, ptr)              __strex(value, ptr)
 198:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 199:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 200:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /** \brief  STR Exclusive (16 bit)
 201:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 202:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     This function performs a exclusive STR command for 16 bit values.
 203:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 204:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \param [in]  value  Value to store
 205:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 206:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \return          0  Function succeeded
 207:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \return          1  Function failed
 208:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  */
 209:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** #define __STREXH(value, ptr)              __strex(value, ptr)
 210:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 211:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 212:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /** \brief  STR Exclusive (32 bit)
 213:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 214:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     This function performs a exclusive STR command for 32 bit values.
 215:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 216:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \param [in]  value  Value to store
 217:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 218:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \return          0  Function succeeded
 219:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \return          1  Function failed
 220:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  */
 221:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** #define __STREXW(value, ptr)              __strex(value, ptr)
 222:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 223:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 224:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /** \brief  Remove the exclusive lock
 225:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 226:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     This function removes the exclusive lock which is created by LDREX.
 227:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 228:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  */
 229:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** #define __CLREX                           __clrex
 230:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 231:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 232:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /** \brief  Signed Saturate
 233:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 234:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     This function saturates a signed value.
 235:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 236:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \param [in]  value  Value to be saturated
 237:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \param [in]    sat  Bit position to saturate to (1..32)
 238:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \return             Saturated value
 239:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  */
 240:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** #define __SSAT                            __ssat
 241:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 242:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 243:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /** \brief  Unsigned Saturate
 244:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 245:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     This function saturates an unsigned value.
 246:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 247:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \param [in]  value  Value to be saturated
 248:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \param [in]    sat  Bit position to saturate to (0..31)
 249:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \return             Saturated value
 250:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  */
 251:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** #define __USAT                            __usat
 252:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 253:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 254:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /** \brief  Count leading zeros
 255:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 256:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     This function counts the number of leading zeros of a data value.
 257:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 258:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \param [in]  value  Value to count the leading zeros
 259:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \return             number of leading zeros in value
 260:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  */
 261:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** #define __CLZ                             __clz
 262:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 263:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** #endif /* (__CORTEX_M >= 0x03) */
 264:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 265:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 266:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 267:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** #elif defined ( __ICCARM__ ) /*------------------ ICC Compiler -------------------*/
 268:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /* IAR iccarm specific functions */
 269:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 270:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** #include <cmsis_iar.h>
 271:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 272:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 273:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** #elif defined ( __TMS470__ ) /*---------------- TI CCS Compiler ------------------*/
 274:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /* TI CCS specific functions */
 275:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 276:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** #include <cmsis_ccs.h>
 277:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 278:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 279:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** #elif defined ( __GNUC__ ) /*------------------ GNU Compiler ---------------------*/
 280:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /* GNU gcc specific functions */
 281:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 282:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /** \brief  No Operation
 283:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 284:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     No Operation does nothing. This instruction can be used for code alignment purposes.
 285:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  */
 286:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
 287:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** {
 288:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****   __ASM volatile ("nop");
 838              	 .loc 4 288 0
 839              	 .syntax unified
 840              	
 841 0328 00BF     	 nop
 842              	
 843              	 .thumb
 844              	 .syntax unified
 845              	.LBE65:
 846              	.LBE64:
 847              	.LBB66:
 848              	.LBB67:
 849              	 .syntax unified
 850              	
 851 032a 00BF     	 nop
 852              	
 853              	 .thumb
 854              	 .syntax unified
 855              	.LBE67:
 856              	.LBE66:
 244:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	TRX_TRIG_DELAY();
 245:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	TRX_SLP_TR_LOW();
 857              	 .loc 3 245 0
 858 032c 0021     	 movs r1,#0
 859 032e 0920     	 movs r0,#9
 860 0330 FFF766FE 	 bl ioport_set_pin_level
 246:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** }
 861              	 .loc 3 246 0
 862 0334 00BF     	 nop
 863 0336 0837     	 adds r7,r7,#8
 864              	.LCFI51:
 865              	 .cfi_def_cfa_offset 8
 866 0338 BD46     	 mov sp,r7
 867              	.LCFI52:
 868              	 .cfi_def_cfa_register 13
 869              	 
 870 033a 80BD     	 pop {r7,pc}
 871              	.L37:
 872              	 .align 2
 873              	.L36:
 874 033c 00000000 	 .word trx_frame_write
 875 0340 00000000 	 .word phyState
 876              	 .cfi_endproc
 877              	.LFE232:
 879              	 .align 1
 880              	 .global PHY_RandomReq
 881              	 .syntax unified
 882              	 .thumb
 883              	 .thumb_func
 884              	 .fpu softvfp
 886              	PHY_RandomReq:
 887              	.LFB233:
 247:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 
 248:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** /*************************************************************************//**
 249:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** *****************************************************************************/
 250:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** uint16_t PHY_RandomReq(void)
 251:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** {
 888              	 .loc 3 251 0
 889              	 .cfi_startproc
 890              	 
 891              	 
 892 0344 80B5     	 push {r7,lr}
 893              	.LCFI53:
 894              	 .cfi_def_cfa_offset 8
 895              	 .cfi_offset 7,-8
 896              	 .cfi_offset 14,-4
 897 0346 82B0     	 sub sp,sp,#8
 898              	.LCFI54:
 899              	 .cfi_def_cfa_offset 16
 900 0348 00AF     	 add r7,sp,#0
 901              	.LCFI55:
 902              	 .cfi_def_cfa_register 7
 252:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	uint16_t rnd = 0;
 903              	 .loc 3 252 0
 904 034a 0023     	 movs r3,#0
 905 034c FB80     	 strh r3,[r7,#6]
 253:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	uint8_t rndValue;
 254:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 
 255:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	phyTrxSetState(TRX_CMD_RX_ON);
 906              	 .loc 3 255 0
 907 034e 0620     	 movs r0,#6
 908 0350 00F0B2F8 	 bl phyTrxSetState
 909              	.LBB68:
 256:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 
 257:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	for (uint8_t i = 0; i < 16; i += 2) {
 910              	 .loc 3 257 0
 911 0354 0023     	 movs r3,#0
 912 0356 7B71     	 strb r3,[r7,#5]
 913 0358 18E0     	 b .L39
 914              	.L40:
 258:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 		delay_us(RANDOM_NUMBER_UPDATE_INTERVAL);
 915              	 .loc 3 258 0 discriminator 3
 916 035a 0420     	 movs r0,#4
 917 035c 104B     	 ldr r3,.L42
 918 035e 9847     	 blx r3
 919              	.LVL3:
 259:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 		rndValue = (phyReadRegister(PHY_RSSI_REG) >> RND_VALUE) & 3;
 920              	 .loc 3 259 0 discriminator 3
 921 0360 0620     	 movs r0,#6
 922 0362 00F071F8 	 bl phyReadRegister
 923 0366 0346     	 mov r3,r0
 924 0368 5B09     	 lsrs r3,r3,#5
 925 036a DBB2     	 uxtb r3,r3
 926 036c 03F00303 	 and r3,r3,#3
 927 0370 3B71     	 strb r3,[r7,#4]
 260:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 		rnd |= rndValue << i;
 928              	 .loc 3 260 0 discriminator 3
 929 0372 3A79     	 ldrb r2,[r7,#4]
 930 0374 7B79     	 ldrb r3,[r7,#5]
 931 0376 02FA03F3 	 lsl r3,r2,r3
 932 037a 1AB2     	 sxth r2,r3
 933 037c B7F90630 	 ldrsh r3,[r7,#6]
 934 0380 1343     	 orrs r3,r3,r2
 935 0382 1BB2     	 sxth r3,r3
 936 0384 FB80     	 strh r3,[r7,#6]
 257:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 		delay_us(RANDOM_NUMBER_UPDATE_INTERVAL);
 937              	 .loc 3 257 0 discriminator 3
 938 0386 7B79     	 ldrb r3,[r7,#5]
 939 0388 0233     	 adds r3,r3,#2
 940 038a 7B71     	 strb r3,[r7,#5]
 941              	.L39:
 257:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 		delay_us(RANDOM_NUMBER_UPDATE_INTERVAL);
 942              	 .loc 3 257 0 is_stmt 0 discriminator 1
 943 038c 7B79     	 ldrb r3,[r7,#5]
 944 038e 0F2B     	 cmp r3,#15
 945 0390 E3D9     	 bls .L40
 946              	.LBE68:
 261:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	}
 262:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 
 263:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	phySetRxState();
 947              	 .loc 3 263 0 is_stmt 1
 948 0392 00F07EF8 	 bl phySetRxState
 264:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 
 265:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	return rnd;
 949              	 .loc 3 265 0
 950 0396 FB88     	 ldrh r3,[r7,#6]
 266:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** }
 951              	 .loc 3 266 0
 952 0398 1846     	 mov r0,r3
 953 039a 0837     	 adds r7,r7,#8
 954              	.LCFI56:
 955              	 .cfi_def_cfa_offset 8
 956 039c BD46     	 mov sp,r7
 957              	.LCFI57:
 958              	 .cfi_def_cfa_register 13
 959              	 
 960 039e 80BD     	 pop {r7,pc}
 961              	.L43:
 962              	 .align 2
 963              	.L42:
 964 03a0 00000000 	 .word portable_delay_cycles
 965              	 .cfi_endproc
 966              	.LFE233:
 968              	 .align 1
 969              	 .global PHY_EncryptReq
 970              	 .syntax unified
 971              	 .thumb
 972              	 .thumb_func
 973              	 .fpu softvfp
 975              	PHY_EncryptReq:
 976              	.LFB234:
 267:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 
 268:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** /*************************************************************************//**
 269:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** *****************************************************************************/
 270:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** void PHY_EncryptReq(uint8_t *text, uint8_t *key)
 271:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** {
 977              	 .loc 3 271 0
 978              	 .cfi_startproc
 979              	 
 980              	 
 981 03a4 80B5     	 push {r7,lr}
 982              	.LCFI58:
 983              	 .cfi_def_cfa_offset 8
 984              	 .cfi_offset 7,-8
 985              	 .cfi_offset 14,-4
 986 03a6 82B0     	 sub sp,sp,#8
 987              	.LCFI59:
 988              	 .cfi_def_cfa_offset 16
 989 03a8 00AF     	 add r7,sp,#0
 990              	.LCFI60:
 991              	 .cfi_def_cfa_register 7
 992 03aa 7860     	 str r0,[r7,#4]
 993 03ac 3960     	 str r1,[r7]
 272:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	sal_aes_setup(key, AES_MODE_ECB, AES_DIR_ENCRYPT);
 994              	 .loc 3 272 0
 995 03ae 0022     	 movs r2,#0
 996 03b0 0021     	 movs r1,#0
 997 03b2 3868     	 ldr r0,[r7]
 998 03b4 064B     	 ldr r3,.L45
 999 03b6 9847     	 blx r3
 1000              	.LVL4:
 273:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** #if (SAL_TYPE == AT86RF2xx)
 274:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	sal_aes_wrrd(text, NULL);
 1001              	 .loc 3 274 0
 1002 03b8 0021     	 movs r1,#0
 1003 03ba 7868     	 ldr r0,[r7,#4]
 1004 03bc 054B     	 ldr r3,.L45+4
 1005 03be 9847     	 blx r3
 1006              	.LVL5:
 275:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** #else
 276:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	sal_aes_exec(text);
 277:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** #endif
 278:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	sal_aes_read(text);
 1007              	 .loc 3 278 0
 1008 03c0 7868     	 ldr r0,[r7,#4]
 1009 03c2 054B     	 ldr r3,.L45+8
 1010 03c4 9847     	 blx r3
 1011              	.LVL6:
 279:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** }
 1012              	 .loc 3 279 0
 1013 03c6 00BF     	 nop
 1014 03c8 0837     	 adds r7,r7,#8
 1015              	.LCFI61:
 1016              	 .cfi_def_cfa_offset 8
 1017 03ca BD46     	 mov sp,r7
 1018              	.LCFI62:
 1019              	 .cfi_def_cfa_register 13
 1020              	 
 1021 03cc 80BD     	 pop {r7,pc}
 1022              	.L46:
 1023 03ce 00BF     	 .align 2
 1024              	.L45:
 1025 03d0 00000000 	 .word sal_aes_setup
 1026 03d4 00000000 	 .word sal_aes_wrrd
 1027 03d8 00000000 	 .word sal_aes_read
 1028              	 .cfi_endproc
 1029              	.LFE234:
 1031              	 .align 1
 1032              	 .global PHY_EdReq
 1033              	 .syntax unified
 1034              	 .thumb
 1035              	 .thumb_func
 1036              	 .fpu softvfp
 1038              	PHY_EdReq:
 1039              	.LFB235:
 280:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 
 281:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** /*************************************************************************//**
 282:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** *****************************************************************************/
 283:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** int8_t PHY_EdReq(void)
 284:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** {
 1040              	 .loc 3 284 0
 1041              	 .cfi_startproc
 1042              	 
 1043              	 
 1044 03dc 80B5     	 push {r7,lr}
 1045              	.LCFI63:
 1046              	 .cfi_def_cfa_offset 8
 1047              	 .cfi_offset 7,-8
 1048              	 .cfi_offset 14,-4
 1049 03de 82B0     	 sub sp,sp,#8
 1050              	.LCFI64:
 1051              	 .cfi_def_cfa_offset 16
 1052 03e0 00AF     	 add r7,sp,#0
 1053              	.LCFI65:
 1054              	 .cfi_def_cfa_register 7
 285:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	uint8_t ed;
 286:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 
 287:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	phyTrxSetState(TRX_CMD_RX_ON);
 1055              	 .loc 3 287 0
 1056 03e2 0620     	 movs r0,#6
 1057 03e4 00F068F8 	 bl phyTrxSetState
 288:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	phyWriteRegister(PHY_ED_LEVEL_REG, 0);
 1058              	 .loc 3 288 0
 1059 03e8 0021     	 movs r1,#0
 1060 03ea 0720     	 movs r0,#7
 1061 03ec 00F018F8 	 bl phyWriteRegister
 289:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 
 290:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	while (0 == (phyReadRegister(IRQ_STATUS_REG) & (1 << CCA_ED_DONE))) {
 1062              	 .loc 3 290 0
 1063 03f0 00BF     	 nop
 1064              	.L48:
 1065              	 .loc 3 290 0 is_stmt 0 discriminator 1
 1066 03f2 0F20     	 movs r0,#15
 1067 03f4 00F028F8 	 bl phyReadRegister
 1068 03f8 0346     	 mov r3,r0
 1069 03fa 03F01003 	 and r3,r3,#16
 1070 03fe 002B     	 cmp r3,#0
 1071 0400 F7D0     	 beq .L48
 291:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	}
 292:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 
 293:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	ed = (int8_t)phyReadRegister(PHY_ED_LEVEL_REG);
 1072              	 .loc 3 293 0 is_stmt 1
 1073 0402 0720     	 movs r0,#7
 1074 0404 00F020F8 	 bl phyReadRegister
 1075 0408 0346     	 mov r3,r0
 1076 040a FB71     	 strb r3,[r7,#7]
 294:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 
 295:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	phySetRxState();
 1077              	 .loc 3 295 0
 1078 040c 00F041F8 	 bl phySetRxState
 296:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 
 297:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	return ed + PHY_RSSI_BASE_VAL;
 1079              	 .loc 3 297 0
 1080 0410 FB79     	 ldrb r3,[r7,#7]
 1081 0412 5B3B     	 subs r3,r3,#91
 1082 0414 DBB2     	 uxtb r3,r3
 1083 0416 5BB2     	 sxtb r3,r3
 298:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** }
 1084              	 .loc 3 298 0
 1085 0418 1846     	 mov r0,r3
 1086 041a 0837     	 adds r7,r7,#8
 1087              	.LCFI66:
 1088              	 .cfi_def_cfa_offset 8
 1089 041c BD46     	 mov sp,r7
 1090              	.LCFI67:
 1091              	 .cfi_def_cfa_register 13
 1092              	 
 1093 041e 80BD     	 pop {r7,pc}
 1094              	 .cfi_endproc
 1095              	.LFE235:
 1097              	 .align 1
 1098              	 .syntax unified
 1099              	 .thumb
 1100              	 .thumb_func
 1101              	 .fpu softvfp
 1103              	phyWriteRegister:
 1104              	.LFB236:
 299:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 
 300:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** /*************************************************************************//**
 301:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** *****************************************************************************/
 302:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** static void phyWriteRegister(uint8_t reg, uint8_t value)
 303:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** {
 1105              	 .loc 3 303 0
 1106              	 .cfi_startproc
 1107              	 
 1108              	 
 1109 0420 80B5     	 push {r7,lr}
 1110              	.LCFI68:
 1111              	 .cfi_def_cfa_offset 8
 1112              	 .cfi_offset 7,-8
 1113              	 .cfi_offset 14,-4
 1114 0422 82B0     	 sub sp,sp,#8
 1115              	.LCFI69:
 1116              	 .cfi_def_cfa_offset 16
 1117 0424 00AF     	 add r7,sp,#0
 1118              	.LCFI70:
 1119              	 .cfi_def_cfa_register 7
 1120 0426 0346     	 mov r3,r0
 1121 0428 0A46     	 mov r2,r1
 1122 042a FB71     	 strb r3,[r7,#7]
 1123 042c 1346     	 mov r3,r2
 1124 042e BB71     	 strb r3,[r7,#6]
 304:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	trx_reg_write(reg, value);
 1125              	 .loc 3 304 0
 1126 0430 BA79     	 ldrb r2,[r7,#6]
 1127 0432 FB79     	 ldrb r3,[r7,#7]
 1128 0434 1146     	 mov r1,r2
 1129 0436 1846     	 mov r0,r3
 1130 0438 024B     	 ldr r3,.L51
 1131 043a 9847     	 blx r3
 1132              	.LVL7:
 305:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** }
 1133              	 .loc 3 305 0
 1134 043c 00BF     	 nop
 1135 043e 0837     	 adds r7,r7,#8
 1136              	.LCFI71:
 1137              	 .cfi_def_cfa_offset 8
 1138 0440 BD46     	 mov sp,r7
 1139              	.LCFI72:
 1140              	 .cfi_def_cfa_register 13
 1141              	 
 1142 0442 80BD     	 pop {r7,pc}
 1143              	.L52:
 1144              	 .align 2
 1145              	.L51:
 1146 0444 00000000 	 .word trx_reg_write
 1147              	 .cfi_endproc
 1148              	.LFE236:
 1150              	 .align 1
 1151              	 .syntax unified
 1152              	 .thumb
 1153              	 .thumb_func
 1154              	 .fpu softvfp
 1156              	phyReadRegister:
 1157              	.LFB237:
 306:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 
 307:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** /*************************************************************************//**
 308:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** *****************************************************************************/
 309:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** static uint8_t phyReadRegister(uint8_t reg)
 310:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** {
 1158              	 .loc 3 310 0
 1159              	 .cfi_startproc
 1160              	 
 1161              	 
 1162 0448 80B5     	 push {r7,lr}
 1163              	.LCFI73:
 1164              	 .cfi_def_cfa_offset 8
 1165              	 .cfi_offset 7,-8
 1166              	 .cfi_offset 14,-4
 1167 044a 84B0     	 sub sp,sp,#16
 1168              	.LCFI74:
 1169              	 .cfi_def_cfa_offset 24
 1170 044c 00AF     	 add r7,sp,#0
 1171              	.LCFI75:
 1172              	 .cfi_def_cfa_register 7
 1173 044e 0346     	 mov r3,r0
 1174 0450 FB71     	 strb r3,[r7,#7]
 311:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	uint8_t value;
 312:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 
 313:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	value = trx_reg_read(reg);
 1175              	 .loc 3 313 0
 1176 0452 FB79     	 ldrb r3,[r7,#7]
 1177 0454 1846     	 mov r0,r3
 1178 0456 044B     	 ldr r3,.L55
 1179 0458 9847     	 blx r3
 1180              	.LVL8:
 1181 045a 0346     	 mov r3,r0
 1182 045c FB73     	 strb r3,[r7,#15]
 314:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 
 315:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	return value;
 1183              	 .loc 3 315 0
 1184 045e FB7B     	 ldrb r3,[r7,#15]
 316:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** }
 1185              	 .loc 3 316 0
 1186 0460 1846     	 mov r0,r3
 1187 0462 1037     	 adds r7,r7,#16
 1188              	.LCFI76:
 1189              	 .cfi_def_cfa_offset 8
 1190 0464 BD46     	 mov sp,r7
 1191              	.LCFI77:
 1192              	 .cfi_def_cfa_register 13
 1193              	 
 1194 0466 80BD     	 pop {r7,pc}
 1195              	.L56:
 1196              	 .align 2
 1197              	.L55:
 1198 0468 00000000 	 .word trx_reg_read
 1199              	 .cfi_endproc
 1200              	.LFE237:
 1202              	 .align 1
 1203              	 .syntax unified
 1204              	 .thumb
 1205              	 .thumb_func
 1206              	 .fpu softvfp
 1208              	phyWaitState:
 1209              	.LFB238:
 317:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 
 318:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** /*************************************************************************//**
 319:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** *****************************************************************************/
 320:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** static void phyWaitState(uint8_t state)
 321:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** {
 1210              	 .loc 3 321 0
 1211              	 .cfi_startproc
 1212              	 
 1213              	 
 1214 046c 90B5     	 push {r4,r7,lr}
 1215              	.LCFI78:
 1216              	 .cfi_def_cfa_offset 12
 1217              	 .cfi_offset 4,-12
 1218              	 .cfi_offset 7,-8
 1219              	 .cfi_offset 14,-4
 1220 046e 83B0     	 sub sp,sp,#12
 1221              	.LCFI79:
 1222              	 .cfi_def_cfa_offset 24
 1223 0470 00AF     	 add r7,sp,#0
 1224              	.LCFI80:
 1225              	 .cfi_def_cfa_register 7
 1226 0472 0346     	 mov r3,r0
 1227 0474 FB71     	 strb r3,[r7,#7]
 322:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	while (state != (phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK)) {
 1228              	 .loc 3 322 0
 1229 0476 00BF     	 nop
 1230              	.L58:
 1231              	 .loc 3 322 0 is_stmt 0 discriminator 1
 1232 0478 FC79     	 ldrb r4,[r7,#7]
 1233 047a 0120     	 movs r0,#1
 1234 047c FFF7E4FF 	 bl phyReadRegister
 1235 0480 0346     	 mov r3,r0
 1236 0482 03F01F03 	 and r3,r3,#31
 1237 0486 9C42     	 cmp r4,r3
 1238 0488 F6D1     	 bne .L58
 323:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	}
 324:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** }
 1239              	 .loc 3 324 0 is_stmt 1
 1240 048a 00BF     	 nop
 1241 048c 0C37     	 adds r7,r7,#12
 1242              	.LCFI81:
 1243              	 .cfi_def_cfa_offset 12
 1244 048e BD46     	 mov sp,r7
 1245              	.LCFI82:
 1246              	 .cfi_def_cfa_register 13
 1247              	 
 1248 0490 90BD     	 pop {r4,r7,pc}
 1249              	 .cfi_endproc
 1250              	.LFE238:
 1252              	 .align 1
 1253              	 .syntax unified
 1254              	 .thumb
 1255              	 .thumb_func
 1256              	 .fpu softvfp
 1258              	phySetRxState:
 1259              	.LFB239:
 325:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 
 326:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** /*************************************************************************//**
 327:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** *****************************************************************************/
 328:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** static void phySetRxState(void)
 329:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** {
 1260              	 .loc 3 329 0
 1261              	 .cfi_startproc
 1262              	 
 1263              	 
 1264 0492 80B5     	 push {r7,lr}
 1265              	.LCFI83:
 1266              	 .cfi_def_cfa_offset 8
 1267              	 .cfi_offset 7,-8
 1268              	 .cfi_offset 14,-4
 1269 0494 00AF     	 add r7,sp,#0
 1270              	.LCFI84:
 1271              	 .cfi_def_cfa_register 7
 330:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	phyTrxSetState(TRX_CMD_TRX_OFF);
 1272              	 .loc 3 330 0
 1273 0496 0820     	 movs r0,#8
 1274 0498 00F00EF8 	 bl phyTrxSetState
 331:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 
 332:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	phyReadRegister(IRQ_STATUS_REG);
 1275              	 .loc 3 332 0
 1276 049c 0F20     	 movs r0,#15
 1277 049e FFF7D3FF 	 bl phyReadRegister
 333:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 
 334:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	if (phyRxState) {
 1278              	 .loc 3 334 0
 1279 04a2 044B     	 ldr r3,.L62
 1280 04a4 1B78     	 ldrb r3,[r3]
 1281 04a6 002B     	 cmp r3,#0
 1282 04a8 02D0     	 beq .L61
 335:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 		phyTrxSetState(TRX_CMD_RX_AACK_ON);
 1283              	 .loc 3 335 0
 1284 04aa 1620     	 movs r0,#22
 1285 04ac 00F004F8 	 bl phyTrxSetState
 1286              	.L61:
 336:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	}
 337:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** }
 1287              	 .loc 3 337 0
 1288 04b0 00BF     	 nop
 1289 04b2 80BD     	 pop {r7,pc}
 1290              	.L63:
 1291              	 .align 2
 1292              	.L62:
 1293 04b4 00000000 	 .word phyRxState
 1294              	 .cfi_endproc
 1295              	.LFE239:
 1297              	 .align 1
 1298              	 .syntax unified
 1299              	 .thumb
 1300              	 .thumb_func
 1301              	 .fpu softvfp
 1303              	phyTrxSetState:
 1304              	.LFB240:
 338:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 
 339:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** /*************************************************************************//**
 340:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** *****************************************************************************/
 341:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** static void phyTrxSetState(uint8_t state)
 342:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** {
 1305              	 .loc 3 342 0
 1306              	 .cfi_startproc
 1307              	 
 1308              	 
 1309 04b8 90B5     	 push {r4,r7,lr}
 1310              	.LCFI85:
 1311              	 .cfi_def_cfa_offset 12
 1312              	 .cfi_offset 4,-12
 1313              	 .cfi_offset 7,-8
 1314              	 .cfi_offset 14,-4
 1315 04ba 85B0     	 sub sp,sp,#20
 1316              	.LCFI86:
 1317              	 .cfi_def_cfa_offset 32
 1318 04bc 00AF     	 add r7,sp,#0
 1319              	.LCFI87:
 1320              	 .cfi_def_cfa_register 7
 1321 04be 0346     	 mov r3,r0
 1322 04c0 FB71     	 strb r3,[r7,#7]
 343:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** #if (ANTENNA_DIVERSITY == 1) || defined(EXT_RF_FRONT_END_CTRL)
 344:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	if(phyState == PHY_STATE_SLEEP)
 1323              	 .loc 3 344 0
 1324 04c2 204B     	 ldr r3,.L67
 1325 04c4 1B78     	 ldrb r3,[r3]
 1326 04c6 022B     	 cmp r3,#2
 1327 04c8 1DD1     	 bne .L65
 1328              	.LBB69:
 345:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	{
 346:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 		uint8_t reg;
 347:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 
 348:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	#if (ANTENNA_DIVERSITY == 1)
 349:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 		reg								= phyReadRegister(ANT_DIV_REG);
 350:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 		phyWriteRegister(ANT_DIV_REG, reg | ((1 << ANT_DIV_EN) | (1 << ANT_EXT_SW_EN)));
 351:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	#else
 352:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 		#if (ANTENNA_DEFAULT != 0)
 353:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 			reg							= phyReadRegister(ANT_DIV_REG);
 1329              	 .loc 3 353 0
 1330 04ca 0D20     	 movs r0,#13
 1331 04cc FFF7BCFF 	 bl phyReadRegister
 1332 04d0 0346     	 mov r3,r0
 1333 04d2 FB73     	 strb r3,[r7,#15]
 354:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 			phyWriteRegister(ANT_DIV_REG, reg | ((1 << ANT_EXT_SW_EN) | (ANTENNA_DEFAULT << ANT_CTRL)));
 1334              	 .loc 3 354 0
 1335 04d4 FB7B     	 ldrb r3,[r7,#15]
 1336 04d6 43F00503 	 orr r3,r3,#5
 1337 04da DBB2     	 uxtb r3,r3
 1338 04dc 1946     	 mov r1,r3
 1339 04de 0D20     	 movs r0,#13
 1340 04e0 FFF79EFF 	 bl phyWriteRegister
 355:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 		#endif // ANTENNA_DEFAULT
 356:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	#endif // ANTENNA_DIVERSITY
 357:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	#ifdef EXT_RF_FRONT_END_CTRL
 358:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 		reg								= phyReadRegister(TRX_CTRL_1_REG);
 1341              	 .loc 3 358 0
 1342 04e4 0420     	 movs r0,#4
 1343 04e6 FFF7AFFF 	 bl phyReadRegister
 1344 04ea 0346     	 mov r3,r0
 1345 04ec FB73     	 strb r3,[r7,#15]
 359:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 		phyWriteRegister(TRX_CTRL_1_REG, reg | (1 << PA_EXT_EN));
 1346              	 .loc 3 359 0
 1347 04ee FB7B     	 ldrb r3,[r7,#15]
 1348 04f0 63F07F03 	 orn r3,r3,#127
 1349 04f4 DBB2     	 uxtb r3,r3
 1350 04f6 1946     	 mov r1,r3
 1351 04f8 0420     	 movs r0,#4
 1352 04fa FFF791FF 	 bl phyWriteRegister
 360:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 
 361:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 		ioport_set_pin_level(AT86RFX_CSD, IOPORT_PIN_LEVEL_HIGH);
 1353              	 .loc 3 361 0
 1354 04fe 0121     	 movs r1,#1
 1355 0500 0B20     	 movs r0,#11
 1356 0502 FFF77DFD 	 bl ioport_set_pin_level
 1357              	.L65:
 1358              	.LBE69:
 362:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	#endif // EXT_RF_FRONT_END_CTRL
 363:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	}
 364:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** #endif
 365:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 
 366:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	do { phyWriteRegister(TRX_STATE_REG, TRX_CMD_FORCE_TRX_OFF);
 1359              	 .loc 3 366 0 discriminator 1
 1360 0506 0321     	 movs r1,#3
 1361 0508 0220     	 movs r0,#2
 1362 050a FFF789FF 	 bl phyWriteRegister
 367:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	} while (TRX_STATUS_TRX_OFF !=
 368:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 			(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));
 1363              	 .loc 3 368 0 discriminator 1
 1364 050e 0120     	 movs r0,#1
 1365 0510 FFF79AFF 	 bl phyReadRegister
 1366 0514 0346     	 mov r3,r0
 1367 0516 03F01F03 	 and r3,r3,#31
 1368 051a 082B     	 cmp r3,#8
 1369 051c F3D1     	 bne .L65
 1370              	.L66:
 369:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 
 370:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	do { phyWriteRegister(TRX_STATE_REG,
 1371              	 .loc 3 370 0 discriminator 1
 1372 051e FB79     	 ldrb r3,[r7,#7]
 1373 0520 1946     	 mov r1,r3
 1374 0522 0220     	 movs r0,#2
 1375 0524 FFF77CFF 	 bl phyWriteRegister
 371:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 			     state); } while (state !=
 1376              	 .loc 3 371 0 discriminator 1
 1377 0528 FC79     	 ldrb r4,[r7,#7]
 372:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 			(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));
 1378              	 .loc 3 372 0 discriminator 1
 1379 052a 0120     	 movs r0,#1
 1380 052c FFF78CFF 	 bl phyReadRegister
 1381 0530 0346     	 mov r3,r0
 1382 0532 03F01F03 	 and r3,r3,#31
 1383 0536 9C42     	 cmp r4,r3
 1384 0538 F1D1     	 bne .L66
 373:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** }
 1385              	 .loc 3 373 0
 1386 053a 00BF     	 nop
 1387 053c 1437     	 adds r7,r7,#20
 1388              	.LCFI88:
 1389              	 .cfi_def_cfa_offset 12
 1390 053e BD46     	 mov sp,r7
 1391              	.LCFI89:
 1392              	 .cfi_def_cfa_register 13
 1393              	 
 1394 0540 90BD     	 pop {r4,r7,pc}
 1395              	.L68:
 1396 0542 00BF     	 .align 2
 1397              	.L67:
 1398 0544 00000000 	 .word phyState
 1399              	 .cfi_endproc
 1400              	.LFE240:
 1402              	 .align 1
 1403              	 .global PHY_SetIEEEAddr
 1404              	 .syntax unified
 1405              	 .thumb
 1406              	 .thumb_func
 1407              	 .fpu softvfp
 1409              	PHY_SetIEEEAddr:
 1410              	.LFB241:
 374:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 
 375:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** /*************************************************************************//**
 376:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** *****************************************************************************/
 377:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** void PHY_SetIEEEAddr(uint8_t *ieee_addr)
 378:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** {
 1411              	 .loc 3 378 0
 1412              	 .cfi_startproc
 1413              	 
 1414              	 
 1415 0548 80B5     	 push {r7,lr}
 1416              	.LCFI90:
 1417              	 .cfi_def_cfa_offset 8
 1418              	 .cfi_offset 7,-8
 1419              	 .cfi_offset 14,-4
 1420 054a 84B0     	 sub sp,sp,#16
 1421              	.LCFI91:
 1422              	 .cfi_def_cfa_offset 24
 1423 054c 00AF     	 add r7,sp,#0
 1424              	.LCFI92:
 1425              	 .cfi_def_cfa_register 7
 1426 054e 7860     	 str r0,[r7,#4]
 379:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	uint8_t *ptr_to_reg = ieee_addr;
 1427              	 .loc 3 379 0
 1428 0550 7B68     	 ldr r3,[r7,#4]
 1429 0552 FB60     	 str r3,[r7,#12]
 1430              	.LBB70:
 380:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	for (uint8_t i = 0; i < 8; i++) {
 1431              	 .loc 3 380 0
 1432 0554 0023     	 movs r3,#0
 1433 0556 FB72     	 strb r3,[r7,#11]
 1434 0558 0EE0     	 b .L70
 1435              	.L71:
 381:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 		trx_reg_write((IEEE_ADDR_0_REG + i), *ptr_to_reg);
 1436              	 .loc 3 381 0 discriminator 3
 1437 055a FB7A     	 ldrb r3,[r7,#11]
 1438 055c 2433     	 adds r3,r3,#36
 1439 055e DAB2     	 uxtb r2,r3
 1440 0560 FB68     	 ldr r3,[r7,#12]
 1441 0562 1B78     	 ldrb r3,[r3]
 1442 0564 1946     	 mov r1,r3
 1443 0566 1046     	 mov r0,r2
 1444 0568 074B     	 ldr r3,.L72
 1445 056a 9847     	 blx r3
 1446              	.LVL9:
 382:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 		ptr_to_reg++;
 1447              	 .loc 3 382 0 discriminator 3
 1448 056c FB68     	 ldr r3,[r7,#12]
 1449 056e 0133     	 adds r3,r3,#1
 1450 0570 FB60     	 str r3,[r7,#12]
 380:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	for (uint8_t i = 0; i < 8; i++) {
 1451              	 .loc 3 380 0 discriminator 3
 1452 0572 FB7A     	 ldrb r3,[r7,#11]
 1453 0574 0133     	 adds r3,r3,#1
 1454 0576 FB72     	 strb r3,[r7,#11]
 1455              	.L70:
 380:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	for (uint8_t i = 0; i < 8; i++) {
 1456              	 .loc 3 380 0 is_stmt 0 discriminator 1
 1457 0578 FB7A     	 ldrb r3,[r7,#11]
 1458 057a 072B     	 cmp r3,#7
 1459 057c EDD9     	 bls .L71
 1460              	.LBE70:
 383:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	}
 384:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** }
 1461              	 .loc 3 384 0 is_stmt 1
 1462 057e 00BF     	 nop
 1463 0580 1037     	 adds r7,r7,#16
 1464              	.LCFI93:
 1465              	 .cfi_def_cfa_offset 8
 1466 0582 BD46     	 mov sp,r7
 1467              	.LCFI94:
 1468              	 .cfi_def_cfa_register 13
 1469              	 
 1470 0584 80BD     	 pop {r7,pc}
 1471              	.L73:
 1472 0586 00BF     	 .align 2
 1473              	.L72:
 1474 0588 00000000 	 .word trx_reg_write
 1475              	 .cfi_endproc
 1476              	.LFE241:
 1478              	 .align 1
 1479              	 .global PHY_TaskHandler
 1480              	 .syntax unified
 1481              	 .thumb
 1482              	 .thumb_func
 1483              	 .fpu softvfp
 1485              	PHY_TaskHandler:
 1486              	.LFB242:
 385:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 
 386:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** /*************************************************************************//**
 387:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** *****************************************************************************/
 388:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** void PHY_TaskHandler(void)
 389:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** {
 1487              	 .loc 3 389 0
 1488              	 .cfi_startproc
 1489              	 
 1490              	 
 1491 058c 80B5     	 push {r7,lr}
 1492              	.LCFI95:
 1493              	 .cfi_def_cfa_offset 8
 1494              	 .cfi_offset 7,-8
 1495              	 .cfi_offset 14,-4
 1496 058e 84B0     	 sub sp,sp,#16
 1497              	.LCFI96:
 1498              	 .cfi_def_cfa_offset 24
 1499 0590 00AF     	 add r7,sp,#0
 1500              	.LCFI97:
 1501              	 .cfi_def_cfa_register 7
 390:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	if (PHY_STATE_SLEEP == phyState) {
 1502              	 .loc 3 390 0
 1503 0592 364B     	 ldr r3,.L83
 1504 0594 1B78     	 ldrb r3,[r3]
 1505 0596 022B     	 cmp r3,#2
 1506 0598 63D0     	 beq .L82
 391:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 		return;
 392:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	}
 393:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 
 394:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	if (phyReadRegister(IRQ_STATUS_REG) & (1 << TRX_END)) {
 1507              	 .loc 3 394 0
 1508 059a 0F20     	 movs r0,#15
 1509 059c FFF754FF 	 bl phyReadRegister
 1510 05a0 0346     	 mov r3,r0
 1511 05a2 03F00803 	 and r3,r3,#8
 1512 05a6 002B     	 cmp r3,#0
 1513 05a8 5CD0     	 beq .L74
 395:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 		if (PHY_STATE_IDLE == phyState) {
 1514              	 .loc 3 395 0
 1515 05aa 304B     	 ldr r3,.L83
 1516 05ac 1B78     	 ldrb r3,[r3]
 1517 05ae 012B     	 cmp r3,#1
 1518 05b0 28D1     	 bne .L77
 1519              	.LBB71:
 396:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 			PHY_DataInd_t ind;
 397:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 			uint8_t size;
 398:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 			int8_t rssi;
 399:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 
 400:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 			rssi = (int8_t)phyReadRegister(PHY_ED_LEVEL_REG);
 1520              	 .loc 3 400 0 discriminator 2
 1521 05b2 0720     	 movs r0,#7
 1522 05b4 FFF748FF 	 bl phyReadRegister
 1523 05b8 0346     	 mov r3,r0
 1524 05ba BB73     	 strb r3,[r7,#14]
 401:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 
 402:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 			trx_frame_read(&size, 1);
 1525              	 .loc 3 402 0 discriminator 2
 1526 05bc FB1C     	 adds r3,r7,#3
 1527 05be 0121     	 movs r1,#1
 1528 05c0 1846     	 mov r0,r3
 1529 05c2 2B4B     	 ldr r3,.L83+4
 1530 05c4 9847     	 blx r3
 1531              	.LVL10:
 403:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 
 404:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 			trx_frame_read(phyRxBuffer, size + 2);
 1532              	 .loc 3 404 0 discriminator 2
 1533 05c6 FB78     	 ldrb r3,[r7,#3]
 1534 05c8 0233     	 adds r3,r3,#2
 1535 05ca DBB2     	 uxtb r3,r3
 1536 05cc 1946     	 mov r1,r3
 1537 05ce 2948     	 ldr r0,.L83+8
 1538 05d0 274B     	 ldr r3,.L83+4
 1539 05d2 9847     	 blx r3
 1540              	.LVL11:
 405:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 
 406:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 			ind.data = phyRxBuffer + 1;
 1541              	 .loc 3 406 0 discriminator 2
 1542 05d4 284B     	 ldr r3,.L83+12
 1543 05d6 7B60     	 str r3,[r7,#4]
 407:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 
 408:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 			ind.size = size - PHY_CRC_SIZE;
 1544              	 .loc 3 408 0 discriminator 2
 1545 05d8 FB78     	 ldrb r3,[r7,#3]
 1546 05da 023B     	 subs r3,r3,#2
 1547 05dc DBB2     	 uxtb r3,r3
 1548 05de 3B72     	 strb r3,[r7,#8]
 409:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 			ind.lqi  = phyRxBuffer[size + 1];
 1549              	 .loc 3 409 0 discriminator 2
 1550 05e0 FB78     	 ldrb r3,[r7,#3]
 1551 05e2 0133     	 adds r3,r3,#1
 1552 05e4 234A     	 ldr r2,.L83+8
 1553 05e6 D35C     	 ldrb r3,[r2,r3]
 1554 05e8 7B72     	 strb r3,[r7,#9]
 410:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 			ind.rssi = rssi + PHY_RSSI_BASE_VAL;
 1555              	 .loc 3 410 0 discriminator 2
 1556 05ea BB7B     	 ldrb r3,[r7,#14]
 1557 05ec 5B3B     	 subs r3,r3,#91
 1558 05ee DBB2     	 uxtb r3,r3
 1559 05f0 5BB2     	 sxtb r3,r3
 1560 05f2 BB72     	 strb r3,[r7,#10]
 411:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 			PHY_DataInd(&ind);
 1561              	 .loc 3 411 0 discriminator 2
 1562 05f4 3B1D     	 adds r3,r7,#4
 1563 05f6 1846     	 mov r0,r3
 1564 05f8 204B     	 ldr r3,.L83+16
 1565 05fa 9847     	 blx r3
 1566              	.LVL12:
 412:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 
 413:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 			phyWaitState(TRX_STATUS_RX_AACK_ON);
 1567              	 .loc 3 413 0 discriminator 2
 1568 05fc 1620     	 movs r0,#22
 1569 05fe FFF735FF 	 bl phyWaitState
 1570              	.LBE71:
 1571 0602 2FE0     	 b .L74
 1572              	.L77:
 414:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 		} else if (PHY_STATE_TX_WAIT_END == phyState) {
 1573              	 .loc 3 414 0
 1574 0604 194B     	 ldr r3,.L83
 1575 0606 1B78     	 ldrb r3,[r3]
 1576 0608 032B     	 cmp r3,#3
 1577 060a 2BD1     	 bne .L74
 1578              	.LBB72:
 415:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** #if (ANTENNA_DIVERSITY == 1)
 416:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** #endif // ANTENNA_DIVERSITY
 417:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** #ifdef EXT_RF_FRONT_END_CTRL
 418:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 			ioport_set_pin_level(AT86RFX_CSD, IOPORT_PIN_LEVEL_HIGH);
 1579              	 .loc 3 418 0
 1580 060c 0121     	 movs r1,#1
 1581 060e 0B20     	 movs r0,#11
 1582 0610 FFF7F6FC 	 bl ioport_set_pin_level
 419:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** #endif // EXT_RF_FRONT_END_CTRL
 420:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 			uint8_t status
 421:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 				= (phyReadRegister(TRX_STATE_REG) >>
 1583              	 .loc 3 421 0
 1584 0614 0220     	 movs r0,#2
 1585 0616 FFF717FF 	 bl phyReadRegister
 1586 061a 0346     	 mov r3,r0
 422:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 					TRAC_STATUS) & 7;
 1587              	 .loc 3 422 0
 1588 061c 5B09     	 lsrs r3,r3,#5
 1589 061e DBB2     	 uxtb r3,r3
 420:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 				= (phyReadRegister(TRX_STATE_REG) >>
 1590              	 .loc 3 420 0
 1591 0620 03F00703 	 and r3,r3,#7
 1592 0624 FB73     	 strb r3,[r7,#15]
 423:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 
 424:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 			if (TRAC_STATUS_SUCCESS == status) {
 1593              	 .loc 3 424 0
 1594 0626 FB7B     	 ldrb r3,[r7,#15]
 1595 0628 002B     	 cmp r3,#0
 1596 062a 02D1     	 bne .L78
 425:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 				status = PHY_STATUS_SUCCESS;
 1597              	 .loc 3 425 0
 1598 062c 0023     	 movs r3,#0
 1599 062e FB73     	 strb r3,[r7,#15]
 1600 0630 0DE0     	 b .L79
 1601              	.L78:
 426:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 			} else if (TRAC_STATUS_CHANNEL_ACCESS_FAILURE ==
 1602              	 .loc 3 426 0
 1603 0632 FB7B     	 ldrb r3,[r7,#15]
 1604 0634 032B     	 cmp r3,#3
 1605 0636 02D1     	 bne .L80
 427:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 					status) {
 428:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 				status = PHY_STATUS_CHANNEL_ACCESS_FAILURE;
 1606              	 .loc 3 428 0
 1607 0638 0123     	 movs r3,#1
 1608 063a FB73     	 strb r3,[r7,#15]
 1609 063c 07E0     	 b .L79
 1610              	.L80:
 429:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 			} else if (TRAC_STATUS_NO_ACK == status) {
 1611              	 .loc 3 429 0
 1612 063e FB7B     	 ldrb r3,[r7,#15]
 1613 0640 052B     	 cmp r3,#5
 1614 0642 02D1     	 bne .L81
 430:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 				status = PHY_STATUS_NO_ACK;
 1615              	 .loc 3 430 0
 1616 0644 0223     	 movs r3,#2
 1617 0646 FB73     	 strb r3,[r7,#15]
 1618 0648 01E0     	 b .L79
 1619              	.L81:
 431:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 			} else {
 432:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 				status = PHY_STATUS_ERROR;
 1620              	 .loc 3 432 0
 1621 064a 0323     	 movs r3,#3
 1622 064c FB73     	 strb r3,[r7,#15]
 1623              	.L79:
 433:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 			}
 434:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 
 435:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 			phySetRxState();
 1624              	 .loc 3 435 0
 1625 064e FFF720FF 	 bl phySetRxState
 436:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 			phyState = PHY_STATE_IDLE;
 1626              	 .loc 3 436 0
 1627 0652 064B     	 ldr r3,.L83
 1628 0654 0122     	 movs r2,#1
 1629 0656 1A70     	 strb r2,[r3]
 437:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 		
 438:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 			PHY_DataConf(status);
 1630              	 .loc 3 438 0
 1631 0658 FB7B     	 ldrb r3,[r7,#15]
 1632 065a 1846     	 mov r0,r3
 1633 065c 084B     	 ldr r3,.L83+20
 1634 065e 9847     	 blx r3
 1635              	.LVL13:
 1636 0660 00E0     	 b .L74
 1637              	.L82:
 1638              	.LBE72:
 391:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	}
 1639              	 .loc 3 391 0
 1640 0662 00BF     	 nop
 1641              	.L74:
 439:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 		}
 440:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	}
 441:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** }
 1642              	 .loc 3 441 0
 1643 0664 1037     	 adds r7,r7,#16
 1644              	.LCFI98:
 1645              	 .cfi_def_cfa_offset 8
 1646 0666 BD46     	 mov sp,r7
 1647              	.LCFI99:
 1648              	 .cfi_def_cfa_register 13
 1649              	 
 1650 0668 80BD     	 pop {r7,pc}
 1651              	.L84:
 1652 066a 00BF     	 .align 2
 1653              	.L83:
 1654 066c 00000000 	 .word phyState
 1655 0670 00000000 	 .word trx_frame_read
 1656 0674 00000000 	 .word phyRxBuffer
 1657 0678 01000000 	 .word phyRxBuffer+1
 1658 067c 00000000 	 .word PHY_DataInd
 1659 0680 00000000 	 .word PHY_DataConf
 1660              	 .cfi_endproc
 1661              	.LFE242:
 1663              	.Letext0:
 1664              	 .file 5 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\arm\\arm-gnu-toolchain\\arm-none-eabi\\include\\machine\\_default_types.h"
 1665              	 .file 6 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\arm\\arm-gnu-toolchain\\arm-none-eabi\\include\\sys\\_stdint.h"
 1666              	 .file 7 "../../../stack/LwMesh/TDMA/phy/AT86RF233/inc/phy.h"
 1667              	 .file 8 "../../../platform/sam/utils/cmsis/sam4l/include/sam4lc4b.h"
 1668              	 .file 9 "../../../platform/thirdparty/CMSIS/include/core_cm4.h"
 1669              	 .file 10 "../../../platform/sam/utils/cmsis/sam4l/source/templates/system_sam4l.h"
 1670              	 .file 11 "../../../platform/sam/utils/cmsis/sam4l/include/component/component_gpio.h"
 1671              	 .file 12 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\arm\\arm-gnu-toolchain\\arm-none-eabi\\include\\sys\\lock.h"
 1672              	 .file 13 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\arm\\arm-gnu-toolchain\\arm-none-eabi\\include\\sys\\_types.h"
 1673              	 .file 14 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\arm\\arm-gnu-toolchain\\lib\\gcc\\arm-none-eabi\\6.3.1\\include\\stddef.h"
 1674              	 .file 15 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\arm\\arm-gnu-toolchain\\arm-none-eabi\\include\\sys\\reent.h"
 1675              	 .file 16 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\arm\\arm-gnu-toolchain\\arm-none-eabi\\include\\stdlib.h"
 1676              	 .file 17 "../../../platform/common/utils/interrupt/interrupt_sam_nvic.h"
 1677              	 .file 18 "../../../platform/sam/utils/compiler.h"
 1678              	 .file 19 "../../../platform/common/services/usb/usb_protocol.h"
 1679              	 .file 20 "../../../platform/common/services/usb/udc/udi.h"
 1680              	 .file 21 "../../../platform/common/services/usb/udc/udc_desc.h"
 1681              	 .file 22 "../../../platform/common/services/usb/udc/udd.h"
 1682              	 .file 23 "../../../platform/common/services/usb/class/cdc/device/udi_cdc.h"
 1683              	 .file 24 "../../../platform/common/utils/stdio/stdio_usb/stdio_usb.h"
 1684              	 .file 25 "config/config.h"
 1685              	 .file 26 "../../../stack/LwMesh/TDMA/services/trx_access/trx_access.h"
 1686              	 .file 27 "../../../stack/LwMesh/TDMA/services/sal/inc/sal.h"
 1687              	 .file 28 "../../../platform/common/services/delay/sam/cycle_counter.h"
DEFINED SYMBOLS
                            *ABS*:00000000 phy.c
    {standard input}:16     .bss.cpu_irq_critical_section_counter:00000000 $d
    {standard input}:19     .bss.cpu_irq_critical_section_counter:00000000 cpu_irq_critical_section_counter
    {standard input}:24     .bss.cpu_irq_prev_interrupt_state:00000000 cpu_irq_prev_interrupt_state
    {standard input}:25     .bss.cpu_irq_prev_interrupt_state:00000000 $d
                            *COM*:00000001 n
    {standard input}:28     .bss.tTS:00000000 $d
    {standard input}:31     .bss.tTS:00000000 tTS
    {standard input}:34     .text:00000000 $t
    {standard input}:40     .text:00000000 ioport_set_pin_level
    {standard input}:182    .bss.phyState:00000000 phyState
    {standard input}:183    .bss.phyState:00000000 $d
    {standard input}:185    .bss.phyRxBuffer:00000000 $d
    {standard input}:188    .bss.phyRxBuffer:00000000 phyRxBuffer
    {standard input}:193    .bss.phyRxState:00000000 phyRxState
    {standard input}:194    .bss.phyRxState:00000000 $d
    {standard input}:203    .text:00000086 PHY_Init
    {standard input}:1103   .text:00000420 phyWriteRegister
    {standard input}:1156   .text:00000448 phyReadRegister
    {standard input}:290    .text:000000fc $d
    {standard input}:297    .text:0000010c $t
    {standard input}:304    .text:0000010c PHY_SetTdmaMode
    {standard input}:380    .text:00000162 PHY_SetRxState
    {standard input}:1258   .text:00000492 phySetRxState
    {standard input}:418    .text:00000180 $d
    {standard input}:422    .text:00000184 $t
    {standard input}:429    .text:00000184 PHY_SetChannel
    {standard input}:482    .text:000001b4 PHY_SetPanId
    {standard input}:537    .text:000001e4 PHY_SetShortAddr
    {standard input}:603    .text:0000022a PHY_SetTxPower
    {standard input}:656    .text:0000025a PHY_Sleep
    {standard input}:1303   .text:000004b8 phyTrxSetState
    {standard input}:731    .text:000002c0 $d
    {standard input}:735    .text:000002c4 $t
    {standard input}:742    .text:000002c4 PHY_Wakeup
    {standard input}:772    .text:000002e0 $d
    {standard input}:776    .text:000002e4 $t
    {standard input}:783    .text:000002e4 PHY_DataReq
    {standard input}:874    .text:0000033c $d
    {standard input}:879    .text:00000344 $t
    {standard input}:886    .text:00000344 PHY_RandomReq
    {standard input}:964    .text:000003a0 $d
    {standard input}:968    .text:000003a4 $t
    {standard input}:975    .text:000003a4 PHY_EncryptReq
    {standard input}:1025   .text:000003d0 $d
    {standard input}:1031   .text:000003dc $t
    {standard input}:1038   .text:000003dc PHY_EdReq
    {standard input}:1146   .text:00000444 $d
    {standard input}:1150   .text:00000448 $t
    {standard input}:1198   .text:00000468 $d
    {standard input}:1202   .text:0000046c $t
    {standard input}:1208   .text:0000046c phyWaitState
    {standard input}:1293   .text:000004b4 $d
    {standard input}:1297   .text:000004b8 $t
    {standard input}:1398   .text:00000544 $d
    {standard input}:1402   .text:00000548 $t
    {standard input}:1409   .text:00000548 PHY_SetIEEEAddr
    {standard input}:1474   .text:00000588 $d
    {standard input}:1478   .text:0000058c $t
    {standard input}:1485   .text:0000058c PHY_TaskHandler
    {standard input}:1654   .text:0000066c $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
trx_spi_init
PhyReset
trx_frame_write
portable_delay_cycles
sal_aes_setup
sal_aes_wrrd
sal_aes_read
trx_reg_write
trx_reg_read
trx_frame_read
PHY_DataInd
PHY_DataConf
