   1              	 .cpu cortex-m4
   2              	 .eabi_attribute 20,1
   3              	 .eabi_attribute 21,1
   4              	 .eabi_attribute 23,3
   5              	 .eabi_attribute 24,1
   6              	 .eabi_attribute 25,1
   7              	 .eabi_attribute 26,1
   8              	 .eabi_attribute 30,6
   9              	 .eabi_attribute 34,1
  10              	 .eabi_attribute 18,4
  11              	 .file "phy.c"
  12              	 .text
  13              	.Ltext0:
  14              	 .cfi_sections .debug_frame
  15              	 .section .bss.cpu_irq_critical_section_counter,"aw",%nobits
  16              	 .align 2
  19              	cpu_irq_critical_section_counter:
  20 0000 00000000 	 .space 4
  21              	 .section .bss.cpu_irq_prev_interrupt_state,"aw",%nobits
  24              	cpu_irq_prev_interrupt_state:
  25 0000 00       	 .space 1
  26              	 .comm n,1,1
  27              	 .section .bss.tTS,"aw",%nobits
  28              	 .align 2
  31              	tTS:
  32 0000 00000000 	 .space 4
  33              	 .text
  34              	 .align 1
  35              	 .syntax unified
  36              	 .thumb
  37              	 .thumb_func
  38              	 .fpu softvfp
  40              	ioport_set_pin_level:
  41              	.LFB213:
  42              	 .file 1 "../../../platform/common/services/ioport/ioport.h"
   1:../../../platform/common/services/ioport/ioport.h **** /**
   2:../../../platform/common/services/ioport/ioport.h ****  * \file
   3:../../../platform/common/services/ioport/ioport.h ****  *
   4:../../../platform/common/services/ioport/ioport.h ****  * \brief Common IOPORT service main header file for AVR, UC3 and ARM
   5:../../../platform/common/services/ioport/ioport.h ****  *        architectures.
   6:../../../platform/common/services/ioport/ioport.h ****  *
   7:../../../platform/common/services/ioport/ioport.h ****  * Copyright (c) 2012 Atmel Corporation. All rights reserved.
   8:../../../platform/common/services/ioport/ioport.h ****  *
   9:../../../platform/common/services/ioport/ioport.h ****  * \asf_license_start
  10:../../../platform/common/services/ioport/ioport.h ****  *
  11:../../../platform/common/services/ioport/ioport.h ****  * \page License
  12:../../../platform/common/services/ioport/ioport.h ****  *
  13:../../../platform/common/services/ioport/ioport.h ****  * Redistribution and use in source and binary forms, with or without
  14:../../../platform/common/services/ioport/ioport.h ****  * modification, are permitted provided that the following conditions are met:
  15:../../../platform/common/services/ioport/ioport.h ****  *
  16:../../../platform/common/services/ioport/ioport.h ****  * 1. Redistributions of source code must retain the above copyright notice,
  17:../../../platform/common/services/ioport/ioport.h ****  *    this list of conditions and the following disclaimer.
  18:../../../platform/common/services/ioport/ioport.h ****  *
  19:../../../platform/common/services/ioport/ioport.h ****  * 2. Redistributions in binary form must reproduce the above copyright notice,
  20:../../../platform/common/services/ioport/ioport.h ****  *    this list of conditions and the following disclaimer in the documentation
  21:../../../platform/common/services/ioport/ioport.h ****  *    and/or other materials provided with the distribution.
  22:../../../platform/common/services/ioport/ioport.h ****  *
  23:../../../platform/common/services/ioport/ioport.h ****  * 3. The name of Atmel may not be used to endorse or promote products derived
  24:../../../platform/common/services/ioport/ioport.h ****  *    from this software without specific prior written permission.
  25:../../../platform/common/services/ioport/ioport.h ****  *
  26:../../../platform/common/services/ioport/ioport.h ****  * 4. This software may only be redistributed and used in connection with an
  27:../../../platform/common/services/ioport/ioport.h ****  *    Atmel microcontroller product.
  28:../../../platform/common/services/ioport/ioport.h ****  *
  29:../../../platform/common/services/ioport/ioport.h ****  * THIS SOFTWARE IS PROVIDED BY ATMEL "AS IS" AND ANY EXPRESS OR IMPLIED
  30:../../../platform/common/services/ioport/ioport.h ****  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
  31:../../../platform/common/services/ioport/ioport.h ****  * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE
  32:../../../platform/common/services/ioport/ioport.h ****  * EXPRESSLY AND SPECIFICALLY DISCLAIMED. IN NO EVENT SHALL ATMEL BE LIABLE FOR
  33:../../../platform/common/services/ioport/ioport.h ****  * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  34:../../../platform/common/services/ioport/ioport.h ****  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
  35:../../../platform/common/services/ioport/ioport.h ****  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
  36:../../../platform/common/services/ioport/ioport.h ****  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
  37:../../../platform/common/services/ioport/ioport.h ****  * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
  38:../../../platform/common/services/ioport/ioport.h ****  * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  39:../../../platform/common/services/ioport/ioport.h ****  * POSSIBILITY OF SUCH DAMAGE.
  40:../../../platform/common/services/ioport/ioport.h ****  *
  41:../../../platform/common/services/ioport/ioport.h ****  * \asf_license_stop
  42:../../../platform/common/services/ioport/ioport.h ****  *
  43:../../../platform/common/services/ioport/ioport.h ****  */
  44:../../../platform/common/services/ioport/ioport.h **** #ifndef IOPORT_H
  45:../../../platform/common/services/ioport/ioport.h **** #define IOPORT_H
  46:../../../platform/common/services/ioport/ioport.h **** 
  47:../../../platform/common/services/ioport/ioport.h **** #ifdef __cplusplus
  48:../../../platform/common/services/ioport/ioport.h **** extern "C" {
  49:../../../platform/common/services/ioport/ioport.h **** #endif
  50:../../../platform/common/services/ioport/ioport.h **** 
  51:../../../platform/common/services/ioport/ioport.h **** #include <parts.h>
  52:../../../platform/common/services/ioport/ioport.h **** #include <compiler.h>
  53:../../../platform/common/services/ioport/ioport.h **** 
  54:../../../platform/common/services/ioport/ioport.h **** /**
  55:../../../platform/common/services/ioport/ioport.h ****  * \defgroup ioport_group Common IOPORT API
  56:../../../platform/common/services/ioport/ioport.h ****  *
  57:../../../platform/common/services/ioport/ioport.h ****  * See \ref ioport_quickstart.
  58:../../../platform/common/services/ioport/ioport.h ****  *
  59:../../../platform/common/services/ioport/ioport.h ****  * This is common IOPORT service for GPIO pin configuration and control in a
  60:../../../platform/common/services/ioport/ioport.h ****  * standardized manner across the MEGA, MEGA_RF, XMEGA, UC3 and ARM devices.
  61:../../../platform/common/services/ioport/ioport.h ****  *
  62:../../../platform/common/services/ioport/ioport.h ****  * Port pin control code is optimized for each platform, and should produce
  63:../../../platform/common/services/ioport/ioport.h ****  * both compact and fast execution times when used with constant values.
  64:../../../platform/common/services/ioport/ioport.h ****  *
  65:../../../platform/common/services/ioport/ioport.h ****  * \section dependencies Dependencies
  66:../../../platform/common/services/ioport/ioport.h ****  * This driver depends on the following modules:
  67:../../../platform/common/services/ioport/ioport.h ****  * - \ref sysclk_group for clock speed and functions.
  68:../../../platform/common/services/ioport/ioport.h ****  * @{
  69:../../../platform/common/services/ioport/ioport.h ****  */
  70:../../../platform/common/services/ioport/ioport.h **** 
  71:../../../platform/common/services/ioport/ioport.h **** /**
  72:../../../platform/common/services/ioport/ioport.h ****  * \def IOPORT_CREATE_PIN(port, pin)
  73:../../../platform/common/services/ioport/ioport.h ****  * \brief Create IOPORT pin number
  74:../../../platform/common/services/ioport/ioport.h ****  *
  75:../../../platform/common/services/ioport/ioport.h ****  * Create a IOPORT pin number for use with the IOPORT functions.
  76:../../../platform/common/services/ioport/ioport.h ****  *
  77:../../../platform/common/services/ioport/ioport.h ****  * \param port IOPORT port (e.g. PORTA, PA or PIOA depending on chosen
  78:../../../platform/common/services/ioport/ioport.h ****  *             architecture)
  79:../../../platform/common/services/ioport/ioport.h ****  * \param pin IOPORT zero-based index of the I/O pin
  80:../../../platform/common/services/ioport/ioport.h ****  */
  81:../../../platform/common/services/ioport/ioport.h **** 
  82:../../../platform/common/services/ioport/ioport.h **** /** \brief IOPORT pin directions */
  83:../../../platform/common/services/ioport/ioport.h **** enum ioport_direction {
  84:../../../platform/common/services/ioport/ioport.h **** 	IOPORT_DIR_INPUT,  /*!< IOPORT input direction */
  85:../../../platform/common/services/ioport/ioport.h **** 	IOPORT_DIR_OUTPUT, /*!< IOPORT output direction */
  86:../../../platform/common/services/ioport/ioport.h **** };
  87:../../../platform/common/services/ioport/ioport.h **** 
  88:../../../platform/common/services/ioport/ioport.h **** /** \brief IOPORT levels */
  89:../../../platform/common/services/ioport/ioport.h **** enum ioport_value {
  90:../../../platform/common/services/ioport/ioport.h **** 	IOPORT_PIN_LEVEL_LOW,  /*!< IOPORT pin value low */
  91:../../../platform/common/services/ioport/ioport.h **** 	IOPORT_PIN_LEVEL_HIGH, /*!< IOPORT pin value high */
  92:../../../platform/common/services/ioport/ioport.h **** };
  93:../../../platform/common/services/ioport/ioport.h **** 
  94:../../../platform/common/services/ioport/ioport.h **** #if MEGA_RF
  95:../../../platform/common/services/ioport/ioport.h **** /** \brief IOPORT edge sense modes */
  96:../../../platform/common/services/ioport/ioport.h **** enum ioport_sense {
  97:../../../platform/common/services/ioport/ioport.h **** 	IOPORT_SENSE_LEVEL,     /*!< IOPORT sense low level  */
  98:../../../platform/common/services/ioport/ioport.h **** 	IOPORT_SENSE_BOTHEDGES, /*!< IOPORT sense both rising and falling edges */
  99:../../../platform/common/services/ioport/ioport.h **** 	IOPORT_SENSE_FALLING,   /*!< IOPORT sense falling edges */
 100:../../../platform/common/services/ioport/ioport.h **** 	IOPORT_SENSE_RISING,    /*!< IOPORT sense rising edges */
 101:../../../platform/common/services/ioport/ioport.h **** };
 102:../../../platform/common/services/ioport/ioport.h **** #elif SAM && !SAM4L
 103:../../../platform/common/services/ioport/ioport.h **** /** \brief IOPORT edge sense modes */
 104:../../../platform/common/services/ioport/ioport.h **** enum ioport_sense {
 105:../../../platform/common/services/ioport/ioport.h **** 	IOPORT_SENSE_BOTHEDGES, /*!< IOPORT sense both rising and falling edges */
 106:../../../platform/common/services/ioport/ioport.h **** 	IOPORT_SENSE_FALLING,   /*!< IOPORT sense falling edges */
 107:../../../platform/common/services/ioport/ioport.h **** 	IOPORT_SENSE_RISING,    /*!< IOPORT sense rising edges */
 108:../../../platform/common/services/ioport/ioport.h **** 	IOPORT_SENSE_LEVEL_LOW, /*!< IOPORT sense low level  */
 109:../../../platform/common/services/ioport/ioport.h **** 	IOPORT_SENSE_LEVEL_HIGH,/*!< IOPORT sense High level  */
 110:../../../platform/common/services/ioport/ioport.h **** };
 111:../../../platform/common/services/ioport/ioport.h **** #else
 112:../../../platform/common/services/ioport/ioport.h **** enum ioport_sense {
 113:../../../platform/common/services/ioport/ioport.h **** 	IOPORT_SENSE_BOTHEDGES, /*!< IOPORT sense both rising and falling edges */
 114:../../../platform/common/services/ioport/ioport.h **** 	IOPORT_SENSE_RISING,    /*!< IOPORT sense rising edges */
 115:../../../platform/common/services/ioport/ioport.h **** 	IOPORT_SENSE_FALLING,   /*!< IOPORT sense falling edges */
 116:../../../platform/common/services/ioport/ioport.h **** };
 117:../../../platform/common/services/ioport/ioport.h **** #endif
 118:../../../platform/common/services/ioport/ioport.h **** 
 119:../../../platform/common/services/ioport/ioport.h **** 
 120:../../../platform/common/services/ioport/ioport.h **** #if XMEGA
 121:../../../platform/common/services/ioport/ioport.h **** # include "xmega/ioport.h"
 122:../../../platform/common/services/ioport/ioport.h **** # if defined(IOPORT_XMEGA_COMPAT)
 123:../../../platform/common/services/ioport/ioport.h **** #  include "xmega/ioport_compat.h"
 124:../../../platform/common/services/ioport/ioport.h **** # endif
 125:../../../platform/common/services/ioport/ioport.h **** #elif MEGA
 126:../../../platform/common/services/ioport/ioport.h **** #  include "mega_rf/ioport.h"
 127:../../../platform/common/services/ioport/ioport.h **** #elif UC3
 128:../../../platform/common/services/ioport/ioport.h **** # include "uc3/ioport.h"
 129:../../../platform/common/services/ioport/ioport.h **** #elif SAM
 130:../../../platform/common/services/ioport/ioport.h **** # if SAM4L
 131:../../../platform/common/services/ioport/ioport.h **** #  include "sam/ioport_gpio.h"
 132:../../../platform/common/services/ioport/ioport.h **** # elif SAMD20
 133:../../../platform/common/services/ioport/ioport.h **** #  include "sam0/ioport.h"
 134:../../../platform/common/services/ioport/ioport.h **** # else
 135:../../../platform/common/services/ioport/ioport.h **** #  include "sam/ioport_pio.h"
 136:../../../platform/common/services/ioport/ioport.h **** # endif
 137:../../../platform/common/services/ioport/ioport.h **** #endif
 138:../../../platform/common/services/ioport/ioport.h **** 
 139:../../../platform/common/services/ioport/ioport.h **** /**
 140:../../../platform/common/services/ioport/ioport.h ****  * \brief Initializes the IOPORT service, ready for use.
 141:../../../platform/common/services/ioport/ioport.h ****  *
 142:../../../platform/common/services/ioport/ioport.h ****  * This function must be called before using any other functions in the IOPORT
 143:../../../platform/common/services/ioport/ioport.h ****  * service.
 144:../../../platform/common/services/ioport/ioport.h ****  */
 145:../../../platform/common/services/ioport/ioport.h **** static inline void ioport_init(void)
 146:../../../platform/common/services/ioport/ioport.h **** {
 147:../../../platform/common/services/ioport/ioport.h **** 	arch_ioport_init();
 148:../../../platform/common/services/ioport/ioport.h **** }
 149:../../../platform/common/services/ioport/ioport.h **** 
 150:../../../platform/common/services/ioport/ioport.h **** /**
 151:../../../platform/common/services/ioport/ioport.h ****  * \brief Enable an IOPORT pin, based on a pin created with \ref
 152:../../../platform/common/services/ioport/ioport.h ****  * IOPORT_CREATE_PIN().
 153:../../../platform/common/services/ioport/ioport.h ****  *
 154:../../../platform/common/services/ioport/ioport.h ****  * \param pin  IOPORT pin to enable
 155:../../../platform/common/services/ioport/ioport.h ****  */
 156:../../../platform/common/services/ioport/ioport.h **** static inline void ioport_enable_pin(ioport_pin_t pin)
 157:../../../platform/common/services/ioport/ioport.h **** {
 158:../../../platform/common/services/ioport/ioport.h **** 	arch_ioport_enable_pin(pin);
 159:../../../platform/common/services/ioport/ioport.h **** }
 160:../../../platform/common/services/ioport/ioport.h **** 
 161:../../../platform/common/services/ioport/ioport.h **** /**
 162:../../../platform/common/services/ioport/ioport.h ****  * \brief Enable multiple pins in a single IOPORT port.
 163:../../../platform/common/services/ioport/ioport.h ****  *
 164:../../../platform/common/services/ioport/ioport.h ****  * \param port IOPORT port to enable
 165:../../../platform/common/services/ioport/ioport.h ****  * \param mask Mask of pins within the port to enable
 166:../../../platform/common/services/ioport/ioport.h ****  */
 167:../../../platform/common/services/ioport/ioport.h **** static inline void ioport_enable_port(ioport_port_t port,
 168:../../../platform/common/services/ioport/ioport.h **** 		ioport_port_mask_t mask)
 169:../../../platform/common/services/ioport/ioport.h **** {
 170:../../../platform/common/services/ioport/ioport.h **** 	arch_ioport_enable_port(port, mask);
 171:../../../platform/common/services/ioport/ioport.h **** }
 172:../../../platform/common/services/ioport/ioport.h **** 
 173:../../../platform/common/services/ioport/ioport.h **** /**
 174:../../../platform/common/services/ioport/ioport.h ****  * \brief Disable IOPORT pin, based on a pin created with \ref
 175:../../../platform/common/services/ioport/ioport.h ****  *        IOPORT_CREATE_PIN().
 176:../../../platform/common/services/ioport/ioport.h ****  *
 177:../../../platform/common/services/ioport/ioport.h ****  * \param pin IOPORT pin to disable
 178:../../../platform/common/services/ioport/ioport.h ****  */
 179:../../../platform/common/services/ioport/ioport.h **** static inline void ioport_disable_pin(ioport_pin_t pin)
 180:../../../platform/common/services/ioport/ioport.h **** {
 181:../../../platform/common/services/ioport/ioport.h **** 	arch_ioport_disable_pin(pin);
 182:../../../platform/common/services/ioport/ioport.h **** }
 183:../../../platform/common/services/ioport/ioport.h **** 
 184:../../../platform/common/services/ioport/ioport.h **** /**
 185:../../../platform/common/services/ioport/ioport.h ****  * \brief Disable multiple pins in a single IOPORT port.
 186:../../../platform/common/services/ioport/ioport.h ****  *
 187:../../../platform/common/services/ioport/ioport.h ****  * \param port IOPORT port to disable
 188:../../../platform/common/services/ioport/ioport.h ****  * \param mask Pin mask of pins to disable
 189:../../../platform/common/services/ioport/ioport.h ****  */
 190:../../../platform/common/services/ioport/ioport.h **** static inline void ioport_disable_port(ioport_port_t port,
 191:../../../platform/common/services/ioport/ioport.h **** 		ioport_port_mask_t mask)
 192:../../../platform/common/services/ioport/ioport.h **** {
 193:../../../platform/common/services/ioport/ioport.h **** 	arch_ioport_disable_port(port, mask);
 194:../../../platform/common/services/ioport/ioport.h **** }
 195:../../../platform/common/services/ioport/ioport.h **** 
 196:../../../platform/common/services/ioport/ioport.h **** /**
 197:../../../platform/common/services/ioport/ioport.h ****  * \brief Set multiple pin modes in a single IOPORT port, such as pull-up,
 198:../../../platform/common/services/ioport/ioport.h ****  * pull-down, etc. configuration.
 199:../../../platform/common/services/ioport/ioport.h ****  *
 200:../../../platform/common/services/ioport/ioport.h ****  * \param port IOPORT port to configure
 201:../../../platform/common/services/ioport/ioport.h ****  * \param mask Pin mask of pins to configure
 202:../../../platform/common/services/ioport/ioport.h ****  * \param mode Mode masks to configure for the specified pins (\ref
 203:../../../platform/common/services/ioport/ioport.h ****  * ioport_modes)
 204:../../../platform/common/services/ioport/ioport.h ****  */
 205:../../../platform/common/services/ioport/ioport.h **** static inline void ioport_set_port_mode(ioport_port_t port,
 206:../../../platform/common/services/ioport/ioport.h **** 		ioport_port_mask_t mask, ioport_mode_t mode)
 207:../../../platform/common/services/ioport/ioport.h **** {
 208:../../../platform/common/services/ioport/ioport.h **** 	arch_ioport_set_port_mode(port, mask, mode);
 209:../../../platform/common/services/ioport/ioport.h **** }
 210:../../../platform/common/services/ioport/ioport.h **** 
 211:../../../platform/common/services/ioport/ioport.h **** /**
 212:../../../platform/common/services/ioport/ioport.h ****  * \brief Set pin mode for one single IOPORT pin.
 213:../../../platform/common/services/ioport/ioport.h ****  *
 214:../../../platform/common/services/ioport/ioport.h ****  * \param pin IOPORT pin to configure
 215:../../../platform/common/services/ioport/ioport.h ****  * \param mode Mode masks to configure for the specified pin (\ref ioport_modes)
 216:../../../platform/common/services/ioport/ioport.h ****  */
 217:../../../platform/common/services/ioport/ioport.h **** static inline void ioport_set_pin_mode(ioport_pin_t pin, ioport_mode_t mode)
 218:../../../platform/common/services/ioport/ioport.h **** {
 219:../../../platform/common/services/ioport/ioport.h **** 	arch_ioport_set_pin_mode(pin, mode);
 220:../../../platform/common/services/ioport/ioport.h **** }
 221:../../../platform/common/services/ioport/ioport.h **** 
 222:../../../platform/common/services/ioport/ioport.h **** /**
 223:../../../platform/common/services/ioport/ioport.h ****  * \brief Reset multiple pin modes in a specified IOPORT port to defaults.
 224:../../../platform/common/services/ioport/ioport.h ****  *
 225:../../../platform/common/services/ioport/ioport.h ****  * \param port IOPORT port to configure
 226:../../../platform/common/services/ioport/ioport.h ****  * \param mask Mask of pins whose mode configuration is to be reset
 227:../../../platform/common/services/ioport/ioport.h ****  */
 228:../../../platform/common/services/ioport/ioport.h **** static inline void ioport_reset_port_mode(ioport_port_t port,
 229:../../../platform/common/services/ioport/ioport.h **** 		ioport_port_mask_t mask)
 230:../../../platform/common/services/ioport/ioport.h **** {
 231:../../../platform/common/services/ioport/ioport.h **** 	arch_ioport_set_port_mode(port, mask, 0);
 232:../../../platform/common/services/ioport/ioport.h **** }
 233:../../../platform/common/services/ioport/ioport.h **** 
 234:../../../platform/common/services/ioport/ioport.h **** /**
 235:../../../platform/common/services/ioport/ioport.h ****  * \brief Reset pin mode configuration for a single IOPORT pin
 236:../../../platform/common/services/ioport/ioport.h ****  *
 237:../../../platform/common/services/ioport/ioport.h ****  * \param pin IOPORT pin to configure
 238:../../../platform/common/services/ioport/ioport.h ****  */
 239:../../../platform/common/services/ioport/ioport.h **** static inline void ioport_reset_pin_mode(ioport_pin_t pin)
 240:../../../platform/common/services/ioport/ioport.h **** {
 241:../../../platform/common/services/ioport/ioport.h **** 	arch_ioport_set_pin_mode(pin, 0);
 242:../../../platform/common/services/ioport/ioport.h **** }
 243:../../../platform/common/services/ioport/ioport.h **** 
 244:../../../platform/common/services/ioport/ioport.h **** /**
 245:../../../platform/common/services/ioport/ioport.h ****  * \brief Set I/O direction for a group of pins in a single IOPORT.
 246:../../../platform/common/services/ioport/ioport.h ****  *
 247:../../../platform/common/services/ioport/ioport.h ****  * \param port IOPORT port to configure
 248:../../../platform/common/services/ioport/ioport.h ****  * \param mask Pin mask of pins to configure
 249:../../../platform/common/services/ioport/ioport.h ****  * \param dir Direction to set for the specified pins (\ref ioport_direction)
 250:../../../platform/common/services/ioport/ioport.h ****  */
 251:../../../platform/common/services/ioport/ioport.h **** static inline void ioport_set_port_dir(ioport_port_t port,
 252:../../../platform/common/services/ioport/ioport.h **** 		ioport_port_mask_t mask, enum ioport_direction dir)
 253:../../../platform/common/services/ioport/ioport.h **** {
 254:../../../platform/common/services/ioport/ioport.h **** 	arch_ioport_set_port_dir(port, mask, dir);
 255:../../../platform/common/services/ioport/ioport.h **** }
 256:../../../platform/common/services/ioport/ioport.h **** 
 257:../../../platform/common/services/ioport/ioport.h **** /**
 258:../../../platform/common/services/ioport/ioport.h ****  * \brief Set direction for a single IOPORT pin.
 259:../../../platform/common/services/ioport/ioport.h ****  *
 260:../../../platform/common/services/ioport/ioport.h ****  * \param pin IOPORT pin to configure
 261:../../../platform/common/services/ioport/ioport.h ****  * \param dir Direction to set for the specified pin (\ref ioport_direction)
 262:../../../platform/common/services/ioport/ioport.h ****  */
 263:../../../platform/common/services/ioport/ioport.h **** static inline void ioport_set_pin_dir(ioport_pin_t pin,
 264:../../../platform/common/services/ioport/ioport.h **** 		enum ioport_direction dir)
 265:../../../platform/common/services/ioport/ioport.h **** {
 266:../../../platform/common/services/ioport/ioport.h **** 	arch_ioport_set_pin_dir(pin, dir);
 267:../../../platform/common/services/ioport/ioport.h **** }
 268:../../../platform/common/services/ioport/ioport.h **** 
 269:../../../platform/common/services/ioport/ioport.h **** /**
 270:../../../platform/common/services/ioport/ioport.h ****  * \brief Set an IOPORT pin to a specified logical value.
 271:../../../platform/common/services/ioport/ioport.h ****  *
 272:../../../platform/common/services/ioport/ioport.h ****  * \param pin IOPORT pin to configure
 273:../../../platform/common/services/ioport/ioport.h ****  * \param level Logical value of the pin
 274:../../../platform/common/services/ioport/ioport.h ****  */
 275:../../../platform/common/services/ioport/ioport.h **** static inline void ioport_set_pin_level(ioport_pin_t pin, bool level)
 276:../../../platform/common/services/ioport/ioport.h **** {
  43              	 .loc 1 276 0
  44              	 .cfi_startproc
  45              	 
  46              	 
  47              	 
  48 0000 80B4     	 push {r7}
  49              	.LCFI0:
  50              	 .cfi_def_cfa_offset 4
  51              	 .cfi_offset 7,-4
  52 0002 8DB0     	 sub sp,sp,#52
  53              	.LCFI1:
  54              	 .cfi_def_cfa_offset 56
  55 0004 00AF     	 add r7,sp,#0
  56              	.LCFI2:
  57              	 .cfi_def_cfa_register 7
  58 0006 7860     	 str r0,[r7,#4]
  59 0008 0B46     	 mov r3,r1
  60 000a FB70     	 strb r3,[r7,#3]
  61 000c 7B68     	 ldr r3,[r7,#4]
  62 000e FB62     	 str r3,[r7,#44]
  63 0010 FB78     	 ldrb r3,[r7,#3]
  64 0012 87F82B30 	 strb r3,[r7,#43]
  65              	.LBB45:
  66              	.LBB46:
  67              	 .file 2 "../../../platform/common/services/ioport/sam/ioport_gpio.h"
   1:../../../platform/common/services/ioport/sam/ioport_gpio.h **** /**
   2:../../../platform/common/services/ioport/sam/ioport_gpio.h ****  * \file
   3:../../../platform/common/services/ioport/sam/ioport_gpio.h ****  *
   4:../../../platform/common/services/ioport/sam/ioport_gpio.h ****  * \brief SAM architecture specific IOPORT service implementation header file.
   5:../../../platform/common/services/ioport/sam/ioport_gpio.h ****  *
   6:../../../platform/common/services/ioport/sam/ioport_gpio.h ****  * Copyright (c) 2012-2013 Atmel Corporation. All rights reserved.
   7:../../../platform/common/services/ioport/sam/ioport_gpio.h ****  *
   8:../../../platform/common/services/ioport/sam/ioport_gpio.h ****  * \asf_license_start
   9:../../../platform/common/services/ioport/sam/ioport_gpio.h ****  *
  10:../../../platform/common/services/ioport/sam/ioport_gpio.h ****  * \page License
  11:../../../platform/common/services/ioport/sam/ioport_gpio.h ****  *
  12:../../../platform/common/services/ioport/sam/ioport_gpio.h ****  * Redistribution and use in source and binary forms, with or without
  13:../../../platform/common/services/ioport/sam/ioport_gpio.h ****  * modification, are permitted provided that the following conditions are met:
  14:../../../platform/common/services/ioport/sam/ioport_gpio.h ****  *
  15:../../../platform/common/services/ioport/sam/ioport_gpio.h ****  * 1. Redistributions of source code must retain the above copyright notice,
  16:../../../platform/common/services/ioport/sam/ioport_gpio.h ****  *    this list of conditions and the following disclaimer.
  17:../../../platform/common/services/ioport/sam/ioport_gpio.h ****  *
  18:../../../platform/common/services/ioport/sam/ioport_gpio.h ****  * 2. Redistributions in binary form must reproduce the above copyright notice,
  19:../../../platform/common/services/ioport/sam/ioport_gpio.h ****  *    this list of conditions and the following disclaimer in the documentation
  20:../../../platform/common/services/ioport/sam/ioport_gpio.h ****  *    and/or other materials provided with the distribution.
  21:../../../platform/common/services/ioport/sam/ioport_gpio.h ****  *
  22:../../../platform/common/services/ioport/sam/ioport_gpio.h ****  * 3. The name of Atmel may not be used to endorse or promote products derived
  23:../../../platform/common/services/ioport/sam/ioport_gpio.h ****  *    from this software without specific prior written permission.
  24:../../../platform/common/services/ioport/sam/ioport_gpio.h ****  *
  25:../../../platform/common/services/ioport/sam/ioport_gpio.h ****  * 4. This software may only be redistributed and used in connection with an
  26:../../../platform/common/services/ioport/sam/ioport_gpio.h ****  *    Atmel microcontroller product.
  27:../../../platform/common/services/ioport/sam/ioport_gpio.h ****  *
  28:../../../platform/common/services/ioport/sam/ioport_gpio.h ****  * THIS SOFTWARE IS PROVIDED BY ATMEL "AS IS" AND ANY EXPRESS OR IMPLIED
  29:../../../platform/common/services/ioport/sam/ioport_gpio.h ****  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
  30:../../../platform/common/services/ioport/sam/ioport_gpio.h ****  * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE
  31:../../../platform/common/services/ioport/sam/ioport_gpio.h ****  * EXPRESSLY AND SPECIFICALLY DISCLAIMED. IN NO EVENT SHALL ATMEL BE LIABLE FOR
  32:../../../platform/common/services/ioport/sam/ioport_gpio.h ****  * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  33:../../../platform/common/services/ioport/sam/ioport_gpio.h ****  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
  34:../../../platform/common/services/ioport/sam/ioport_gpio.h ****  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
  35:../../../platform/common/services/ioport/sam/ioport_gpio.h ****  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
  36:../../../platform/common/services/ioport/sam/ioport_gpio.h ****  * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
  37:../../../platform/common/services/ioport/sam/ioport_gpio.h ****  * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  38:../../../platform/common/services/ioport/sam/ioport_gpio.h ****  * POSSIBILITY OF SUCH DAMAGE.
  39:../../../platform/common/services/ioport/sam/ioport_gpio.h ****  *
  40:../../../platform/common/services/ioport/sam/ioport_gpio.h ****  * \asf_license_stop
  41:../../../platform/common/services/ioport/sam/ioport_gpio.h ****  *
  42:../../../platform/common/services/ioport/sam/ioport_gpio.h ****  */
  43:../../../platform/common/services/ioport/sam/ioport_gpio.h **** #ifndef IOPORT_SAM_H
  44:../../../platform/common/services/ioport/sam/ioport_gpio.h **** #define IOPORT_SAM_H
  45:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 
  46:../../../platform/common/services/ioport/sam/ioport_gpio.h **** #include <sysclk.h>
  47:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 
  48:../../../platform/common/services/ioport/sam/ioport_gpio.h **** #define IOPORT_CREATE_PIN(port, pin) ((port) * 32 + (pin))
  49:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 
  50:../../../platform/common/services/ioport/sam/ioport_gpio.h **** // Aliases
  51:../../../platform/common/services/ioport/sam/ioport_gpio.h **** #define IOPORT_GPIOA     0
  52:../../../platform/common/services/ioport/sam/ioport_gpio.h **** #define IOPORT_GPIOB     1
  53:../../../platform/common/services/ioport/sam/ioport_gpio.h **** #define IOPORT_GPIOC     2
  54:../../../platform/common/services/ioport/sam/ioport_gpio.h **** #define IOPORT_GPIOD     3
  55:../../../platform/common/services/ioport/sam/ioport_gpio.h **** #define IOPORT_GPIOE     4
  56:../../../platform/common/services/ioport/sam/ioport_gpio.h **** #define IOPORT_GPIOF     5
  57:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 
  58:../../../platform/common/services/ioport/sam/ioport_gpio.h **** /**
  59:../../../platform/common/services/ioport/sam/ioport_gpio.h ****  * \weakgroup ioport_group
  60:../../../platform/common/services/ioport/sam/ioport_gpio.h ****  * \section ioport_modes IOPORT Modes
  61:../../../platform/common/services/ioport/sam/ioport_gpio.h ****  *
  62:../../../platform/common/services/ioport/sam/ioport_gpio.h ****  * For details on these please see the device datasheet.
  63:../../../platform/common/services/ioport/sam/ioport_gpio.h ****  *
  64:../../../platform/common/services/ioport/sam/ioport_gpio.h ****  * @{
  65:../../../platform/common/services/ioport/sam/ioport_gpio.h ****  */
  66:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 
  67:../../../platform/common/services/ioport/sam/ioport_gpio.h **** /** \name IOPORT Mode bit definitions */
  68:../../../platform/common/services/ioport/sam/ioport_gpio.h **** /** @{ */
  69:../../../platform/common/services/ioport/sam/ioport_gpio.h **** #define IOPORT_MODE_MUX_MASK            (7 << 0) /*!< MUX bits mask */
  70:../../../platform/common/services/ioport/sam/ioport_gpio.h **** #define IOPORT_MODE_MUX_BIT0            (1 << 0) /*!< MUX BIT0 mask */
  71:../../../platform/common/services/ioport/sam/ioport_gpio.h **** #define IOPORT_MODE_MUX_BIT1            (1 << 1) /*!< MUX BIT1 mask */
  72:../../../platform/common/services/ioport/sam/ioport_gpio.h **** #define IOPORT_MODE_MUX_A               (0 << 0) /*!< MUX function A */
  73:../../../platform/common/services/ioport/sam/ioport_gpio.h **** #define IOPORT_MODE_MUX_B               (1 << 0) /*!< MUX function B */
  74:../../../platform/common/services/ioport/sam/ioport_gpio.h **** #define IOPORT_MODE_MUX_C               (2 << 0) /*!< MUX function C */
  75:../../../platform/common/services/ioport/sam/ioport_gpio.h **** #define IOPORT_MODE_MUX_D               (3 << 0) /*!< MUX function D */
  76:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 
  77:../../../platform/common/services/ioport/sam/ioport_gpio.h **** #define IOPORT_MODE_MUX_BIT2            (1 << 2) /*!< MUX BIT2 mask */
  78:../../../platform/common/services/ioport/sam/ioport_gpio.h **** #define IOPORT_MODE_MUX_E               (4 << 0) /*!< MUX function E */
  79:../../../platform/common/services/ioport/sam/ioport_gpio.h **** #define IOPORT_MODE_MUX_F               (5 << 0) /*!< MUX function F */
  80:../../../platform/common/services/ioport/sam/ioport_gpio.h **** #define IOPORT_MODE_MUX_G               (6 << 0) /*!< MUX function G */
  81:../../../platform/common/services/ioport/sam/ioport_gpio.h **** #define IOPORT_MODE_MUX_H               (7 << 0) /*!< MUX function H */
  82:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 
  83:../../../platform/common/services/ioport/sam/ioport_gpio.h **** #define IOPORT_MODE_PULLUP              (1 << 3) /*!< Pull-up */
  84:../../../platform/common/services/ioport/sam/ioport_gpio.h **** #define IOPORT_MODE_PULLDOWN            (1 << 4) /*!< Pull-down */
  85:../../../platform/common/services/ioport/sam/ioport_gpio.h **** #define IOPORT_MODE_GLITCH_FILTER       (1 << 6) /*!< Glitch filter */
  86:../../../platform/common/services/ioport/sam/ioport_gpio.h **** #define IOPORT_MODE_DRIVE_STRENGTH      (1 << 7) /*!< Extra drive strength */
  87:../../../platform/common/services/ioport/sam/ioport_gpio.h **** /** @} */
  88:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 
  89:../../../platform/common/services/ioport/sam/ioport_gpio.h **** /** @} */
  90:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 
  91:../../../platform/common/services/ioport/sam/ioport_gpio.h **** typedef uint32_t ioport_mode_t;
  92:../../../platform/common/services/ioport/sam/ioport_gpio.h **** typedef uint32_t ioport_pin_t;
  93:../../../platform/common/services/ioport/sam/ioport_gpio.h **** typedef uint32_t ioport_port_t;
  94:../../../platform/common/services/ioport/sam/ioport_gpio.h **** typedef uint32_t ioport_port_mask_t;
  95:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 
  96:../../../platform/common/services/ioport/sam/ioport_gpio.h **** __always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
  97:../../../platform/common/services/ioport/sam/ioport_gpio.h **** {
  98:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 	return pin >> 5;
  99:../../../platform/common/services/ioport/sam/ioport_gpio.h **** }
 100:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 
 101:../../../platform/common/services/ioport/sam/ioport_gpio.h **** __always_inline static volatile GpioPort *arch_ioport_port_to_base(
 102:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 		ioport_port_t port)
 103:../../../platform/common/services/ioport/sam/ioport_gpio.h **** {
 104:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 	return (volatile GpioPort *)(GPIO_ADDR
 105:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 		+ port * sizeof(GpioPort));
 106:../../../platform/common/services/ioport/sam/ioport_gpio.h **** }
 107:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 
 108:../../../platform/common/services/ioport/sam/ioport_gpio.h **** __always_inline static volatile GpioPort *arch_ioport_pin_to_base(ioport_pin_t pin)
 109:../../../platform/common/services/ioport/sam/ioport_gpio.h **** {
 110:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
 111:../../../platform/common/services/ioport/sam/ioport_gpio.h **** }
 112:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 
 113:../../../platform/common/services/ioport/sam/ioport_gpio.h **** __always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
 114:../../../platform/common/services/ioport/sam/ioport_gpio.h **** {
 115:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 	return 1U << (pin & 0x1F);
 116:../../../platform/common/services/ioport/sam/ioport_gpio.h **** }
 117:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 
 118:../../../platform/common/services/ioport/sam/ioport_gpio.h **** __always_inline static void arch_ioport_init(void)
 119:../../../platform/common/services/ioport/sam/ioport_gpio.h **** {
 120:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 	sysclk_enable_peripheral_clock(GPIO);
 121:../../../platform/common/services/ioport/sam/ioport_gpio.h **** }
 122:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 
 123:../../../platform/common/services/ioport/sam/ioport_gpio.h **** __always_inline static void arch_ioport_enable_port(ioport_port_t port,
 124:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 		ioport_port_mask_t mask)
 125:../../../platform/common/services/ioport/sam/ioport_gpio.h **** {
 126:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 	arch_ioport_port_to_base(port)->GPIO_GPERS = mask;
 127:../../../platform/common/services/ioport/sam/ioport_gpio.h **** }
 128:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 
 129:../../../platform/common/services/ioport/sam/ioport_gpio.h **** __always_inline static void arch_ioport_disable_port(ioport_port_t port,
 130:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 		ioport_port_mask_t mask)
 131:../../../platform/common/services/ioport/sam/ioport_gpio.h **** {
 132:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 	arch_ioport_port_to_base(port)->GPIO_GPERC = mask;
 133:../../../platform/common/services/ioport/sam/ioport_gpio.h **** }
 134:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 
 135:../../../platform/common/services/ioport/sam/ioport_gpio.h **** __always_inline static void arch_ioport_enable_pin(ioport_pin_t pin)
 136:../../../platform/common/services/ioport/sam/ioport_gpio.h **** {
 137:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 	arch_ioport_enable_port(arch_ioport_pin_to_port_id(pin),
 138:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 			arch_ioport_pin_to_mask(pin));
 139:../../../platform/common/services/ioport/sam/ioport_gpio.h **** }
 140:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 
 141:../../../platform/common/services/ioport/sam/ioport_gpio.h **** __always_inline static void arch_ioport_disable_pin(ioport_pin_t pin)
 142:../../../platform/common/services/ioport/sam/ioport_gpio.h **** {
 143:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 	arch_ioport_disable_port(arch_ioport_pin_to_port_id(pin),
 144:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 			arch_ioport_pin_to_mask(pin));
 145:../../../platform/common/services/ioport/sam/ioport_gpio.h **** }
 146:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 
 147:../../../platform/common/services/ioport/sam/ioport_gpio.h **** __always_inline static void arch_ioport_set_port_mode(ioport_port_t port,
 148:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 		ioport_port_mask_t mask, ioport_mode_t mode)
 149:../../../platform/common/services/ioport/sam/ioport_gpio.h **** {
 150:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 	volatile GpioPort *base = arch_ioport_port_to_base(port);
 151:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 
 152:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 	if (mode & IOPORT_MODE_PULLUP) {
 153:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 		base->GPIO_PUERS = mask;
 154:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 	} else {
 155:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 		base->GPIO_PUERC = mask;
 156:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 	}
 157:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 
 158:../../../platform/common/services/ioport/sam/ioport_gpio.h **** #ifdef IOPORT_MODE_PULLDOWN
 159:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 	if (mode & IOPORT_MODE_PULLDOWN) {
 160:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 		base->GPIO_PDERS = mask;
 161:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 	} else {
 162:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 		base->GPIO_PDERC = mask;
 163:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 	}
 164:../../../platform/common/services/ioport/sam/ioport_gpio.h **** #endif
 165:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 
 166:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 	if (mode & IOPORT_MODE_GLITCH_FILTER) {
 167:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 		base->GPIO_GFERS = mask;
 168:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 	} else {
 169:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 		base->GPIO_GFERC = mask;
 170:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 	}
 171:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 
 172:../../../platform/common/services/ioport/sam/ioport_gpio.h **** #ifdef IOPORT_MODE_DRIVE_STRENGTH
 173:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 	if (mode & IOPORT_MODE_DRIVE_STRENGTH) {
 174:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 		base->GPIO_ODCR0S = mask;
 175:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 	} else {
 176:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 		base->GPIO_ODCR0C = mask;
 177:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 	}
 178:../../../platform/common/services/ioport/sam/ioport_gpio.h **** #endif
 179:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 
 180:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 	if (mode & IOPORT_MODE_MUX_BIT0) {
 181:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 		base->GPIO_PMR0S = mask;
 182:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 	} else {
 183:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 		base->GPIO_PMR0C = mask;
 184:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 	}
 185:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 
 186:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 	if (mode & IOPORT_MODE_MUX_BIT1) {
 187:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 		base->GPIO_PMR1S = mask;
 188:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 	} else {
 189:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 		base->GPIO_PMR1C = mask;
 190:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 	}
 191:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 
 192:../../../platform/common/services/ioport/sam/ioport_gpio.h **** #ifdef IOPORT_MODE_MUX_BIT2
 193:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 	if (mode & IOPORT_MODE_MUX_BIT2) {
 194:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 		base->GPIO_PMR2S = mask;
 195:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 	} else {
 196:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 		base->GPIO_PMR2C = mask;
 197:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 	}
 198:../../../platform/common/services/ioport/sam/ioport_gpio.h **** #endif
 199:../../../platform/common/services/ioport/sam/ioport_gpio.h **** }
 200:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 
 201:../../../platform/common/services/ioport/sam/ioport_gpio.h **** __always_inline static void arch_ioport_set_pin_mode(ioport_pin_t pin,
 202:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 		ioport_mode_t mode)
 203:../../../platform/common/services/ioport/sam/ioport_gpio.h **** {
 204:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 	arch_ioport_set_port_mode(arch_ioport_pin_to_port_id(pin),
 205:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 			arch_ioport_pin_to_mask(pin), mode);
 206:../../../platform/common/services/ioport/sam/ioport_gpio.h **** }
 207:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 
 208:../../../platform/common/services/ioport/sam/ioport_gpio.h **** __always_inline static void arch_ioport_set_port_dir(ioport_port_t port,
 209:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 		ioport_port_mask_t mask, unsigned char group_direction)
 210:../../../platform/common/services/ioport/sam/ioport_gpio.h **** {
 211:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 	if (group_direction == IOPORT_DIR_OUTPUT) {
 212:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 		arch_ioport_port_to_base(port)->GPIO_ODERS = mask;
 213:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 		// Always disable the Schmitt trigger for output pins.
 214:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 		arch_ioport_port_to_base(port)->GPIO_STERC = mask;
 215:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 	} else if (group_direction == IOPORT_DIR_INPUT) {
 216:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 		arch_ioport_port_to_base(port)->GPIO_ODERC = mask;
 217:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 		// Always enable the Schmitt trigger for input pins.
 218:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 		arch_ioport_port_to_base(port)->GPIO_STERS = mask;
 219:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 	}
 220:../../../platform/common/services/ioport/sam/ioport_gpio.h **** }
 221:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 
 222:../../../platform/common/services/ioport/sam/ioport_gpio.h **** __always_inline static void arch_ioport_set_pin_dir(ioport_pin_t pin,
 223:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 		enum ioport_direction dir)
 224:../../../platform/common/services/ioport/sam/ioport_gpio.h **** {
 225:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 	if (dir == IOPORT_DIR_OUTPUT) {
 226:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 		arch_ioport_pin_to_base(pin)->GPIO_ODERS = arch_ioport_pin_to_mask(pin);
 227:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 		// Always disable the Schmitt trigger for output pins.
 228:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 		arch_ioport_pin_to_base(pin)->GPIO_STERC = arch_ioport_pin_to_mask(pin);
 229:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 	} else if (dir == IOPORT_DIR_INPUT) {
 230:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 		arch_ioport_pin_to_base(pin)->GPIO_ODERC = arch_ioport_pin_to_mask(pin);
 231:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 		// Always enable the Schmitt trigger for input pins.
 232:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 		arch_ioport_pin_to_base(pin)->GPIO_STERS = arch_ioport_pin_to_mask(pin);
 233:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 	}
 234:../../../platform/common/services/ioport/sam/ioport_gpio.h **** }
 235:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 
 236:../../../platform/common/services/ioport/sam/ioport_gpio.h **** __always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
 237:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 		bool level)
 238:../../../platform/common/services/ioport/sam/ioport_gpio.h **** {
 239:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 	if (level) {
  68              	 .loc 2 239 0
  69 0016 97F82B30 	 ldrb r3,[r7,#43]
  70 001a 002B     	 cmp r3,#0
  71 001c 17D0     	 beq .L2
  72 001e FB6A     	 ldr r3,[r7,#44]
  73 0020 7B62     	 str r3,[r7,#36]
  74 0022 7B6A     	 ldr r3,[r7,#36]
  75 0024 3B62     	 str r3,[r7,#32]
  76              	.LBB47:
  77              	.LBB48:
  78              	.LBB49:
  79              	.LBB50:
  98:../../../platform/common/services/ioport/sam/ioport_gpio.h **** }
  80              	 .loc 2 98 0
  81 0026 3B6A     	 ldr r3,[r7,#32]
  82 0028 5B09     	 lsrs r3,r3,#5
  83 002a FB61     	 str r3,[r7,#28]
  84              	.LBE50:
  85              	.LBE49:
  86              	.LBB51:
  87              	.LBB52:
 105:../../../platform/common/services/ioport/sam/ioport_gpio.h **** }
  88              	 .loc 2 105 0
  89 002c FB69     	 ldr r3,[r7,#28]
  90 002e 03F50013 	 add r3,r3,#2097152
  91 0032 03F5E163 	 add r3,r3,#1800
  92 0036 5B02     	 lsls r3,r3,#9
 104:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 		+ port * sizeof(GpioPort));
  93              	 .loc 2 104 0
  94 0038 1946     	 mov r1,r3
  95 003a FB6A     	 ldr r3,[r7,#44]
  96 003c BB61     	 str r3,[r7,#24]
  97              	.LBE52:
  98              	.LBE51:
  99              	.LBE48:
 100              	.LBE47:
 101              	.LBB53:
 102              	.LBB54:
 115:../../../platform/common/services/ioport/sam/ioport_gpio.h **** }
 103              	 .loc 2 115 0
 104 003e BB69     	 ldr r3,[r7,#24]
 105 0040 03F01F03 	 and r3,r3,#31
 106 0044 0122     	 movs r2,#1
 107 0046 02FA03F3 	 lsl r3,r2,r3
 108              	.LBE54:
 109              	.LBE53:
 240:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 		arch_ioport_pin_to_base(pin)->GPIO_OVRS = arch_ioport_pin_to_mask(pin);
 110              	 .loc 2 240 0
 111 004a 4B65     	 str r3,[r1,#84]
 112              	.LBE46:
 113              	.LBE45:
 277:../../../platform/common/services/ioport/ioport.h **** 	arch_ioport_set_pin_level(pin, level);
 278:../../../platform/common/services/ioport/ioport.h **** }
 114              	 .loc 1 278 0
 115 004c 16E0     	 b .L12
 116              	.L2:
 117 004e FB6A     	 ldr r3,[r7,#44]
 118 0050 7B61     	 str r3,[r7,#20]
 119 0052 7B69     	 ldr r3,[r7,#20]
 120 0054 3B61     	 str r3,[r7,#16]
 121              	.LBB64:
 122              	.LBB63:
 123              	.LBB55:
 124              	.LBB56:
 125              	.LBB57:
 126              	.LBB58:
  98:../../../platform/common/services/ioport/sam/ioport_gpio.h **** }
 127              	 .loc 2 98 0
 128 0056 3B69     	 ldr r3,[r7,#16]
 129 0058 5B09     	 lsrs r3,r3,#5
 130 005a FB60     	 str r3,[r7,#12]
 131              	.LBE58:
 132              	.LBE57:
 133              	.LBB59:
 134              	.LBB60:
 105:../../../platform/common/services/ioport/sam/ioport_gpio.h **** }
 135              	 .loc 2 105 0
 136 005c FB68     	 ldr r3,[r7,#12]
 137 005e 03F50013 	 add r3,r3,#2097152
 138 0062 03F5E163 	 add r3,r3,#1800
 139 0066 5B02     	 lsls r3,r3,#9
 104:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 		+ port * sizeof(GpioPort));
 140              	 .loc 2 104 0
 141 0068 1946     	 mov r1,r3
 142 006a FB6A     	 ldr r3,[r7,#44]
 143 006c BB60     	 str r3,[r7,#8]
 144              	.LBE60:
 145              	.LBE59:
 146              	.LBE56:
 147              	.LBE55:
 148              	.LBB61:
 149              	.LBB62:
 115:../../../platform/common/services/ioport/sam/ioport_gpio.h **** }
 150              	 .loc 2 115 0
 151 006e BB68     	 ldr r3,[r7,#8]
 152 0070 03F01F03 	 and r3,r3,#31
 153 0074 0122     	 movs r2,#1
 154 0076 02FA03F3 	 lsl r3,r2,r3
 155              	.LBE62:
 156              	.LBE61:
 241:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 	} else {
 242:../../../platform/common/services/ioport/sam/ioport_gpio.h **** 		arch_ioport_pin_to_base(pin)->GPIO_OVRC = arch_ioport_pin_to_mask(pin);
 157              	 .loc 2 242 0
 158 007a 8B65     	 str r3,[r1,#88]
 159              	.L12:
 160              	.LBE63:
 161              	.LBE64:
 162              	 .loc 1 278 0
 163 007c 00BF     	 nop
 164 007e 3437     	 adds r7,r7,#52
 165              	.LCFI3:
 166              	 .cfi_def_cfa_offset 4
 167 0080 BD46     	 mov sp,r7
 168              	.LCFI4:
 169              	 .cfi_def_cfa_register 13
 170              	 
 171 0082 80BC     	 pop {r7}
 172              	.LCFI5:
 173              	 .cfi_restore 7
 174              	 .cfi_def_cfa_offset 0
 175 0084 7047     	 bx lr
 176              	 .cfi_endproc
 177              	.LFE213:
 179              	 .section .bss.phyState,"aw",%nobits
 182              	phyState:
 183 0000 00       	 .space 1
 184              	 .section .bss.phyRxBuffer,"aw",%nobits
 185              	 .align 2
 188              	phyRxBuffer:
 189 0000 00000000 	 .space 128
 189      00000000 
 189      00000000 
 189      00000000 
 189      00000000 
 190              	 .section .bss.phyRxState,"aw",%nobits
 193              	phyRxState:
 194 0000 00       	 .space 1
 195              	 .text
 196              	 .align 1
 197              	 .global PHY_Init
 198              	 .syntax unified
 199              	 .thumb
 200              	 .thumb_func
 201              	 .fpu softvfp
 203              	PHY_Init:
 204              	.LFB223:
 205              	 .file 3 "../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c"
   1:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** /**
   2:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c ****  * \file phy.c
   3:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c ****  *
   4:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c ****  * \brief AT86RF233 PHY implementation
   5:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c ****  *
   6:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c ****  * Copyright (C) 2014, Atmel Corporation. All rights reserved.
   7:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c ****  *
   8:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c ****  * \asf_license_start
   9:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c ****  *
  10:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c ****  * Redistribution and use in source and binary forms, with or without
  11:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c ****  * modification, are permitted provided that the following conditions are met:
  12:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c ****  *
  13:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c ****  * 1. Redistributions of source code must retain the above copyright notice,
  14:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c ****  *    this list of conditions and the following disclaimer.
  15:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c ****  *
  16:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c ****  * 2. Redistributions in binary form must reproduce the above copyright notice,
  17:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c ****  *    this list of conditions and the following disclaimer in the documentation
  18:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c ****  *    and/or other materials provided with the distribution.
  19:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c ****  *
  20:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c ****  * 3. The name of Atmel may not be used to endorse or promote products derived
  21:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c ****  *    from this software without specific prior written permission.
  22:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c ****  *
  23:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c ****  * 4. This software may only be redistributed and used in connection with an
  24:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c ****  *    Atmel microcontroller product.
  25:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c ****  *
  26:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c ****  * THIS SOFTWARE IS PROVIDED BY ATMEL "AS IS" AND ANY EXPRESS OR IMPLIED
  27:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c ****  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
  28:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c ****  * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE
  29:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c ****  * EXPRESSLY AND SPECIFICALLY DISCLAIMED. IN NO EVENT SHALL ATMEL BE LIABLE FOR
  30:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c ****  * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  31:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c ****  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
  32:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c ****  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
  33:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c ****  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
  34:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c ****  * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
  35:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c ****  * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  36:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c ****  * POSSIBILITY OF SUCH DAMAGE.
  37:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c ****  *
  38:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c ****  * \asf_license_stop
  39:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c ****  *
  40:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c ****  *
  41:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c ****  */
  42:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 
  43:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** #ifdef PHY_AT86RF233
  44:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 
  45:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** /*- Includes ---------------------------------------------------------------*/
  46:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** #include <stdbool.h>
  47:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** #include "phy.h"
  48:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** #include "sal.h"
  49:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** #include "trx_access.h"
  50:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** #include "delay.h"
  51:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** #include "at86rf233.h"
  52:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 
  53:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** /*- Definitions ------------------------------------------------------------*/
  54:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** #define PHY_CRC_SIZE    2
  55:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 
  56:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** /*- Types ------------------------------------------------------------------*/
  57:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** typedef enum {
  58:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	PHY_STATE_INITIAL,
  59:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	PHY_STATE_IDLE,
  60:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	PHY_STATE_SLEEP,
  61:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	PHY_STATE_TX_WAIT_END,
  62:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** } PhyState_t;
  63:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 
  64:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** /*- Prototypes -------------------------------------------------------------*/
  65:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** static void phyWriteRegister(uint8_t reg, uint8_t value);
  66:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** static uint8_t phyReadRegister(uint8_t reg);
  67:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** static void phyWaitState(uint8_t state);
  68:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** static void phyTrxSetState(uint8_t state);
  69:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** static void phySetRxState(void);
  70:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 
  71:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** /*- Variables --------------------------------------------------------------*/
  72:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** static PhyState_t phyState = PHY_STATE_INITIAL;
  73:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** static uint8_t phyRxBuffer[128];
  74:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** static bool phyRxState;
  75:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 
  76:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** /*- Implementations --------------------------------------------------------*/
  77:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 
  78:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** /*************************************************************************//**
  79:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** *****************************************************************************/
  80:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** void PHY_Init(void)
  81:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** {
 206              	 .loc 3 81 0
 207              	 .cfi_startproc
 208              	 
 209              	 
 210 0086 80B5     	 push {r7,lr}
 211              	.LCFI6:
 212              	 .cfi_def_cfa_offset 8
 213              	 .cfi_offset 7,-8
 214              	 .cfi_offset 14,-4
 215 0088 82B0     	 sub sp,sp,#8
 216              	.LCFI7:
 217              	 .cfi_def_cfa_offset 16
 218 008a 00AF     	 add r7,sp,#0
 219              	.LCFI8:
 220              	 .cfi_def_cfa_register 7
  82:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	trx_spi_init();
 221              	 .loc 3 82 0
 222 008c 1B4B     	 ldr r3,.L15
 223 008e 9847     	 blx r3
 224              	.LVL0:
  83:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	PhyReset();
 225              	 .loc 3 83 0
 226 0090 1B4B     	 ldr r3,.L15+4
 227 0092 9847     	 blx r3
 228              	.LVL1:
  84:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	phyRxState = false;
 229              	 .loc 3 84 0
 230 0094 1B4B     	 ldr r3,.L15+8
 231 0096 0022     	 movs r2,#0
 232 0098 1A70     	 strb r2,[r3]
  85:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	phyState = PHY_STATE_IDLE;
 233              	 .loc 3 85 0
 234 009a 1B4B     	 ldr r3,.L15+12
 235 009c 0122     	 movs r2,#1
 236 009e 1A70     	 strb r2,[r3]
 237              	.L14:
  86:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 
  87:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	do {phyWriteRegister(TRX_STATE_REG, TRX_CMD_TRX_OFF);
 238              	 .loc 3 87 0 discriminator 1
 239 00a0 0821     	 movs r1,#8
 240 00a2 0220     	 movs r0,#2
 241 00a4 00F0F2F9 	 bl phyWriteRegister
  88:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	} while (TRX_STATUS_TRX_OFF !=
  89:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 			(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));
 242              	 .loc 3 89 0 discriminator 1
 243 00a8 0120     	 movs r0,#1
 244 00aa 00F003FA 	 bl phyReadRegister
 245 00ae 0346     	 mov r3,r0
 246 00b0 03F01F03 	 and r3,r3,#31
 247 00b4 082B     	 cmp r3,#8
 248 00b6 F3D1     	 bne .L14
  90:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 
  91:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	phyWriteRegister(TRX_CTRL_1_REG,
 249              	 .loc 3 91 0
 250 00b8 2E21     	 movs r1,#46
 251 00ba 0420     	 movs r0,#4
 252 00bc 00F0E6F9 	 bl phyWriteRegister
  92:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 			(1 << TX_AUTO_CRC_ON) | (3 << SPI_CMD_MODE) |
  93:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 			(1 << IRQ_MASK_MODE));
  94:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 
  95:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	phyWriteRegister(TRX_CTRL_2_REG,
 253              	 .loc 3 95 0
 254 00c0 A021     	 movs r1,#160
 255 00c2 0C20     	 movs r0,#12
 256 00c4 00F0E2F9 	 bl phyWriteRegister
  96:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 			(1 << RX_SAFE_MODE) | (1 << OQPSK_SCRAM_EN));
  97:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 
  98:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** #if (ANTENNA_DIVERSITY == 1)
  99:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	phyWriteRegister(ANT_DIV_REG, (1 << ANT_DIV_EN) | (1 << ANT_EXT_SW_EN) | (2 << ANT_CTRL));
 100:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	phyWriteRegister(RX_CTRL_REG, (3 << PDT_THRES));
 101:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** #else
 102:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	#if (ANTENNA_DEFAULT != 0)
 103:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 		phyWriteRegister(ANT_DIV_REG, (1 << ANT_EXT_SW_EN) | (ANTENNA_DEFAULT << ANT_CTRL));
 257              	 .loc 3 103 0
 258 00c8 0521     	 movs r1,#5
 259 00ca 0D20     	 movs r0,#13
 260 00cc 00F0DEF9 	 bl phyWriteRegister
 104:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	#endif // ANTENNA_DIVERSITY
 105:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** #endif // ANTENNA_DIVERSITY
 106:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** #ifdef EXT_RF_FRONT_END_CTRL
 107:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	uint8_t		reg					= phyReadRegister(TRX_CTRL_1_REG);
 261              	 .loc 3 107 0
 262 00d0 0420     	 movs r0,#4
 263 00d2 00F0EFF9 	 bl phyReadRegister
 264 00d6 0346     	 mov r3,r0
 265 00d8 FB71     	 strb r3,[r7,#7]
 108:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	phyWriteRegister(TRX_CTRL_1_REG, reg | (1 << PA_EXT_EN));
 266              	 .loc 3 108 0
 267 00da FB79     	 ldrb r3,[r7,#7]
 268 00dc 63F07F03 	 orn r3,r3,#127
 269 00e0 DBB2     	 uxtb r3,r3
 270 00e2 1946     	 mov r1,r3
 271 00e4 0420     	 movs r0,#4
 272 00e6 00F0D1F9 	 bl phyWriteRegister
 109:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 
 110:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	ioport_set_pin_level(AT86RFX_CSD, IOPORT_PIN_LEVEL_HIGH);
 273              	 .loc 3 110 0
 274 00ea 0121     	 movs r1,#1
 275 00ec 0B20     	 movs r0,#11
 276 00ee FFF787FF 	 bl ioport_set_pin_level
 111:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** #endif // EXT_RF_FRONT_END_CTRL
 112:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** }
 277              	 .loc 3 112 0
 278 00f2 00BF     	 nop
 279 00f4 0837     	 adds r7,r7,#8
 280              	.LCFI9:
 281              	 .cfi_def_cfa_offset 8
 282 00f6 BD46     	 mov sp,r7
 283              	.LCFI10:
 284              	 .cfi_def_cfa_register 13
 285              	 
 286 00f8 80BD     	 pop {r7,pc}
 287              	.L16:
 288 00fa 00BF     	 .align 2
 289              	.L15:
 290 00fc 00000000 	 .word trx_spi_init
 291 0100 00000000 	 .word PhyReset
 292 0104 00000000 	 .word phyRxState
 293 0108 00000000 	 .word phyState
 294              	 .cfi_endproc
 295              	.LFE223:
 297              	 .align 1
 298              	 .global PHY_SetPromiscuousMode
 299              	 .syntax unified
 300              	 .thumb
 301              	 .thumb_func
 302              	 .fpu softvfp
 304              	PHY_SetPromiscuousMode:
 305              	.LFB224:
 113:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 
 114:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** void PHY_SetPromiscuousMode(bool mode)
 115:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** {
 306              	 .loc 3 115 0
 307              	 .cfi_startproc
 308              	 
 309              	 
 310 010c 80B5     	 push {r7,lr}
 311              	.LCFI11:
 312              	 .cfi_def_cfa_offset 8
 313              	 .cfi_offset 7,-8
 314              	 .cfi_offset 14,-4
 315 010e 84B0     	 sub sp,sp,#16
 316              	.LCFI12:
 317              	 .cfi_def_cfa_offset 24
 318 0110 00AF     	 add r7,sp,#0
 319              	.LCFI13:
 320              	 .cfi_def_cfa_register 7
 321 0112 0346     	 mov r3,r0
 322 0114 FB71     	 strb r3,[r7,#7]
 116:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	uint8_t ieee_address[] = { 0, 0, 0, 0, 0, 0, 0, 0 };
 323              	 .loc 3 116 0
 324 0116 07F10803 	 add r3,r7,#8
 325 011a 0022     	 movs r2,#0
 326 011c 1A60     	 str r2,[r3]
 327 011e 5A60     	 str r2,[r3,#4]
 117:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 
 118:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	if(mode)
 328              	 .loc 3 118 0
 329 0120 FB79     	 ldrb r3,[r7,#7]
 330 0122 002B     	 cmp r3,#0
 331 0124 12D0     	 beq .L19
 119:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	{
 120:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 		PHY_SetShortAddr(0);
 332              	 .loc 3 120 0
 333 0126 0020     	 movs r0,#0
 334 0128 FFF7FEFF 	 bl PHY_SetShortAddr
 121:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 		PHY_SetPanId(0);
 335              	 .loc 3 121 0
 336 012c 0020     	 movs r0,#0
 337 012e FFF7FEFF 	 bl PHY_SetPanId
 122:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 		PHY_SetIEEEAddr(ieee_address);
 338              	 .loc 3 122 0
 339 0132 07F10803 	 add r3,r7,#8
 340 0136 1846     	 mov r0,r3
 341 0138 FFF7FEFF 	 bl PHY_SetIEEEAddr
 123:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 
 124:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 		// AACK_UPLD_RES_FT = 1, AACK_FLT_RES_FT = 0:
 125:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 		//	Any non-corrupted frame with a reserved frame type is indicated by a
 126:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 		//	TRX24_RX_END interrupt. No further address filtering is applied on those frames.
 127:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 		//	A TRX24_AMI interrupt is never generated and the acknowledgment subfield is
 128:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 		//	ignored.
 129:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 
 130:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 		phyWriteRegister(XAH_CTRL_1_REG, (1 << AACK_PROM_MODE) |	// enable promiscuous mode
 342              	 .loc 3 130 0
 343 013c 3221     	 movs r1,#50
 344 013e 1720     	 movs r0,#23
 345 0140 00F0A4F9 	 bl phyWriteRegister
 131:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 										 (1 << AACK_UPLD_RES_FT) |	// enable reserved frame type reception
 132:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 										 (1 << AACK_FLTR_RES_FT) );	// enable reserved frame types filtering
 133:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 		
 134:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 		phyWriteRegister(CSMA_SEED_1_REG, (1 << AACK_DIS_ACK));							  
 346              	 .loc 3 134 0
 347 0144 1021     	 movs r1,#16
 348 0146 2E20     	 movs r0,#46
 349 0148 00F0A0F9 	 bl phyWriteRegister
 350              	.L19:
 135:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	}
 136:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	else
 137:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	{
 138:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 		// XAH_CTRL_1_REG = 0;
 139:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 		// CSMA_SEED_1_REG_s.aackDisAck = 0;
 140:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	}
 141:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** }
 351              	 .loc 3 141 0
 352 014c 00BF     	 nop
 353 014e 1037     	 adds r7,r7,#16
 354              	.LCFI14:
 355              	 .cfi_def_cfa_offset 8
 356 0150 BD46     	 mov sp,r7
 357              	.LCFI15:
 358              	 .cfi_def_cfa_register 13
 359              	 
 360 0152 80BD     	 pop {r7,pc}
 361              	 .cfi_endproc
 362              	.LFE224:
 364              	 .align 1
 365              	 .global PHY_SetTdmaMode
 366              	 .syntax unified
 367              	 .thumb
 368              	 .thumb_func
 369              	 .fpu softvfp
 371              	PHY_SetTdmaMode:
 372              	.LFB225:
 142:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 
 143:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 
 144:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** void PHY_SetTdmaMode(bool mode)
 145:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** {
 373              	 .loc 3 145 0
 374              	 .cfi_startproc
 375              	 
 376              	 
 377 0154 80B5     	 push {r7,lr}
 378              	.LCFI16:
 379              	 .cfi_def_cfa_offset 8
 380              	 .cfi_offset 7,-8
 381              	 .cfi_offset 14,-4
 382 0156 84B0     	 sub sp,sp,#16
 383              	.LCFI17:
 384              	 .cfi_def_cfa_offset 24
 385 0158 00AF     	 add r7,sp,#0
 386              	.LCFI18:
 387              	 .cfi_def_cfa_register 7
 388 015a 0346     	 mov r3,r0
 389 015c FB71     	 strb r3,[r7,#7]
 146:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	uint8_t		reg					= phyReadRegister(CSMA_SEED_1_REG);
 390              	 .loc 3 146 0
 391 015e 2E20     	 movs r0,#46
 392 0160 00F0A8F9 	 bl phyReadRegister
 393 0164 0346     	 mov r3,r0
 394 0166 FB73     	 strb r3,[r7,#15]
 147:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 
 148:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	if(mode)
 395              	 .loc 3 148 0
 396 0168 FB79     	 ldrb r3,[r7,#7]
 397 016a 002B     	 cmp r3,#0
 398 016c 0CD0     	 beq .L21
 149:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	{
 150:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 		phyWriteRegister(XAH_CTRL_0_REG, (0 << MAX_FRAME_RETRES) | (7 << MAX_CSMA_RETRES));
 399              	 .loc 3 150 0
 400 016e 0E21     	 movs r1,#14
 401 0170 2C20     	 movs r0,#44
 402 0172 00F08BF9 	 bl phyWriteRegister
 151:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 		phyWriteRegister(CSMA_SEED_1_REG, reg | (1 << AACK_DIS_ACK));
 403              	 .loc 3 151 0
 404 0176 FB7B     	 ldrb r3,[r7,#15]
 405 0178 43F01003 	 orr r3,r3,#16
 406 017c DBB2     	 uxtb r3,r3
 407 017e 1946     	 mov r1,r3
 408 0180 2E20     	 movs r0,#46
 409 0182 00F083F9 	 bl phyWriteRegister
 152:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	}
 153:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	else
 154:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	{
 155:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 		phyWriteRegister(XAH_CTRL_0_REG, (3 << MAX_FRAME_RETRES) | (4 << MAX_CSMA_RETRES));
 156:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 		
 157:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 		reg							&= ~(1 << AACK_DIS_ACK);
 158:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 		phyWriteRegister(CSMA_SEED_1_REG, reg);
 159:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	}
 160:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** }
 410              	 .loc 3 160 0
 411 0186 0CE0     	 b .L23
 412              	.L21:
 155:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 		
 413              	 .loc 3 155 0
 414 0188 3821     	 movs r1,#56
 415 018a 2C20     	 movs r0,#44
 416 018c 00F07EF9 	 bl phyWriteRegister
 157:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 		phyWriteRegister(CSMA_SEED_1_REG, reg);
 417              	 .loc 3 157 0
 418 0190 FB7B     	 ldrb r3,[r7,#15]
 419 0192 23F01003 	 bic r3,r3,#16
 420 0196 FB73     	 strb r3,[r7,#15]
 158:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	}
 421              	 .loc 3 158 0
 422 0198 FB7B     	 ldrb r3,[r7,#15]
 423 019a 1946     	 mov r1,r3
 424 019c 2E20     	 movs r0,#46
 425 019e 00F075F9 	 bl phyWriteRegister
 426              	.L23:
 427              	 .loc 3 160 0
 428 01a2 00BF     	 nop
 429 01a4 1037     	 adds r7,r7,#16
 430              	.LCFI19:
 431              	 .cfi_def_cfa_offset 8
 432 01a6 BD46     	 mov sp,r7
 433              	.LCFI20:
 434              	 .cfi_def_cfa_register 13
 435              	 
 436 01a8 80BD     	 pop {r7,pc}
 437              	 .cfi_endproc
 438              	.LFE225:
 440              	 .align 1
 441              	 .global PHY_SetRxState
 442              	 .syntax unified
 443              	 .thumb
 444              	 .thumb_func
 445              	 .fpu softvfp
 447              	PHY_SetRxState:
 448              	.LFB226:
 161:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 
 162:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** /*************************************************************************//**
 163:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** *****************************************************************************/
 164:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** void PHY_SetRxState(bool rx)
 165:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** {
 449              	 .loc 3 165 0
 450              	 .cfi_startproc
 451              	 
 452              	 
 453 01aa 80B5     	 push {r7,lr}
 454              	.LCFI21:
 455              	 .cfi_def_cfa_offset 8
 456              	 .cfi_offset 7,-8
 457              	 .cfi_offset 14,-4
 458 01ac 82B0     	 sub sp,sp,#8
 459              	.LCFI22:
 460              	 .cfi_def_cfa_offset 16
 461 01ae 00AF     	 add r7,sp,#0
 462              	.LCFI23:
 463              	 .cfi_def_cfa_register 7
 464 01b0 0346     	 mov r3,r0
 465 01b2 FB71     	 strb r3,[r7,#7]
 166:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	phyRxState = rx;
 466              	 .loc 3 166 0
 467 01b4 044A     	 ldr r2,.L25
 468 01b6 FB79     	 ldrb r3,[r7,#7]
 469 01b8 1370     	 strb r3,[r2]
 167:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	phySetRxState();
 470              	 .loc 3 167 0
 471 01ba 00F0A0F9 	 bl phySetRxState
 168:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** }
 472              	 .loc 3 168 0
 473 01be 00BF     	 nop
 474 01c0 0837     	 adds r7,r7,#8
 475              	.LCFI24:
 476              	 .cfi_def_cfa_offset 8
 477 01c2 BD46     	 mov sp,r7
 478              	.LCFI25:
 479              	 .cfi_def_cfa_register 13
 480              	 
 481 01c4 80BD     	 pop {r7,pc}
 482              	.L26:
 483 01c6 00BF     	 .align 2
 484              	.L25:
 485 01c8 00000000 	 .word phyRxState
 486              	 .cfi_endproc
 487              	.LFE226:
 489              	 .align 1
 490              	 .global PHY_SetChannel
 491              	 .syntax unified
 492              	 .thumb
 493              	 .thumb_func
 494              	 .fpu softvfp
 496              	PHY_SetChannel:
 497              	.LFB227:
 169:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 
 170:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** /*************************************************************************//**
 171:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** *****************************************************************************/
 172:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** void PHY_SetChannel(uint8_t channel)
 173:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** {
 498              	 .loc 3 173 0
 499              	 .cfi_startproc
 500              	 
 501              	 
 502 01cc 80B5     	 push {r7,lr}
 503              	.LCFI26:
 504              	 .cfi_def_cfa_offset 8
 505              	 .cfi_offset 7,-8
 506              	 .cfi_offset 14,-4
 507 01ce 84B0     	 sub sp,sp,#16
 508              	.LCFI27:
 509              	 .cfi_def_cfa_offset 24
 510 01d0 00AF     	 add r7,sp,#0
 511              	.LCFI28:
 512              	 .cfi_def_cfa_register 7
 513 01d2 0346     	 mov r3,r0
 514 01d4 FB71     	 strb r3,[r7,#7]
 174:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	uint8_t reg;
 175:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 
 176:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	reg = phyReadRegister(PHY_CC_CCA_REG) & ~0x1f;
 515              	 .loc 3 176 0
 516 01d6 0820     	 movs r0,#8
 517 01d8 00F06CF9 	 bl phyReadRegister
 518 01dc 0346     	 mov r3,r0
 519 01de 23F01F03 	 bic r3,r3,#31
 520 01e2 FB73     	 strb r3,[r7,#15]
 177:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	phyWriteRegister(PHY_CC_CCA_REG, reg | channel);
 521              	 .loc 3 177 0
 522 01e4 FA7B     	 ldrb r2,[r7,#15]
 523 01e6 FB79     	 ldrb r3,[r7,#7]
 524 01e8 1343     	 orrs r3,r3,r2
 525 01ea DBB2     	 uxtb r3,r3
 526 01ec 1946     	 mov r1,r3
 527 01ee 0820     	 movs r0,#8
 528 01f0 00F04CF9 	 bl phyWriteRegister
 178:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** }
 529              	 .loc 3 178 0
 530 01f4 00BF     	 nop
 531 01f6 1037     	 adds r7,r7,#16
 532              	.LCFI29:
 533              	 .cfi_def_cfa_offset 8
 534 01f8 BD46     	 mov sp,r7
 535              	.LCFI30:
 536              	 .cfi_def_cfa_register 13
 537              	 
 538 01fa 80BD     	 pop {r7,pc}
 539              	 .cfi_endproc
 540              	.LFE227:
 542              	 .align 1
 543              	 .global PHY_SetPanId
 544              	 .syntax unified
 545              	 .thumb
 546              	 .thumb_func
 547              	 .fpu softvfp
 549              	PHY_SetPanId:
 550              	.LFB228:
 179:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 
 180:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** /*************************************************************************//**
 181:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** *****************************************************************************/
 182:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** void PHY_SetPanId(uint16_t panId)
 183:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** {
 551              	 .loc 3 183 0
 552              	 .cfi_startproc
 553              	 
 554              	 
 555 01fc 80B5     	 push {r7,lr}
 556              	.LCFI31:
 557              	 .cfi_def_cfa_offset 8
 558              	 .cfi_offset 7,-8
 559              	 .cfi_offset 14,-4
 560 01fe 84B0     	 sub sp,sp,#16
 561              	.LCFI32:
 562              	 .cfi_def_cfa_offset 24
 563 0200 00AF     	 add r7,sp,#0
 564              	.LCFI33:
 565              	 .cfi_def_cfa_register 7
 566 0202 0346     	 mov r3,r0
 567 0204 FB80     	 strh r3,[r7,#6]
 184:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	uint8_t *d = (uint8_t *)&panId;
 568              	 .loc 3 184 0
 569 0206 BB1D     	 adds r3,r7,#6
 570 0208 FB60     	 str r3,[r7,#12]
 185:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 
 186:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	phyWriteRegister(PAN_ID_0_REG, d[0]);
 571              	 .loc 3 186 0
 572 020a FB68     	 ldr r3,[r7,#12]
 573 020c 1B78     	 ldrb r3,[r3]
 574 020e 1946     	 mov r1,r3
 575 0210 2220     	 movs r0,#34
 576 0212 00F03BF9 	 bl phyWriteRegister
 187:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	phyWriteRegister(PAN_ID_1_REG, d[1]);
 577              	 .loc 3 187 0
 578 0216 FB68     	 ldr r3,[r7,#12]
 579 0218 0133     	 adds r3,r3,#1
 580 021a 1B78     	 ldrb r3,[r3]
 581 021c 1946     	 mov r1,r3
 582 021e 2320     	 movs r0,#35
 583 0220 00F034F9 	 bl phyWriteRegister
 188:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** }
 584              	 .loc 3 188 0
 585 0224 00BF     	 nop
 586 0226 1037     	 adds r7,r7,#16
 587              	.LCFI34:
 588              	 .cfi_def_cfa_offset 8
 589 0228 BD46     	 mov sp,r7
 590              	.LCFI35:
 591              	 .cfi_def_cfa_register 13
 592              	 
 593 022a 80BD     	 pop {r7,pc}
 594              	 .cfi_endproc
 595              	.LFE228:
 597              	 .align 1
 598              	 .global PHY_SetShortAddr
 599              	 .syntax unified
 600              	 .thumb
 601              	 .thumb_func
 602              	 .fpu softvfp
 604              	PHY_SetShortAddr:
 605              	.LFB229:
 189:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 
 190:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** /*************************************************************************//**
 191:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** *****************************************************************************/
 192:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** void PHY_SetShortAddr(uint16_t addr)
 193:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** {
 606              	 .loc 3 193 0
 607              	 .cfi_startproc
 608              	 
 609              	 
 610 022c 80B5     	 push {r7,lr}
 611              	.LCFI36:
 612              	 .cfi_def_cfa_offset 8
 613              	 .cfi_offset 7,-8
 614              	 .cfi_offset 14,-4
 615 022e 84B0     	 sub sp,sp,#16
 616              	.LCFI37:
 617              	 .cfi_def_cfa_offset 24
 618 0230 00AF     	 add r7,sp,#0
 619              	.LCFI38:
 620              	 .cfi_def_cfa_register 7
 621 0232 0346     	 mov r3,r0
 622 0234 FB80     	 strh r3,[r7,#6]
 194:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	uint8_t *d = (uint8_t *)&addr;
 623              	 .loc 3 194 0
 624 0236 BB1D     	 adds r3,r7,#6
 625 0238 FB60     	 str r3,[r7,#12]
 195:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 
 196:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	phyWriteRegister(SHORT_ADDR_0_REG, d[0]);
 626              	 .loc 3 196 0
 627 023a FB68     	 ldr r3,[r7,#12]
 628 023c 1B78     	 ldrb r3,[r3]
 629 023e 1946     	 mov r1,r3
 630 0240 2020     	 movs r0,#32
 631 0242 00F023F9 	 bl phyWriteRegister
 197:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	phyWriteRegister(SHORT_ADDR_1_REG, d[1]);
 632              	 .loc 3 197 0
 633 0246 FB68     	 ldr r3,[r7,#12]
 634 0248 0133     	 adds r3,r3,#1
 635 024a 1B78     	 ldrb r3,[r3]
 636 024c 1946     	 mov r1,r3
 637 024e 2120     	 movs r0,#33
 638 0250 00F01CF9 	 bl phyWriteRegister
 198:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	phyWriteRegister(CSMA_SEED_0_REG, d[0] + d[1]);
 639              	 .loc 3 198 0
 640 0254 FB68     	 ldr r3,[r7,#12]
 641 0256 1A78     	 ldrb r2,[r3]
 642 0258 FB68     	 ldr r3,[r7,#12]
 643 025a 0133     	 adds r3,r3,#1
 644 025c 1B78     	 ldrb r3,[r3]
 645 025e 1344     	 add r3,r3,r2
 646 0260 DBB2     	 uxtb r3,r3
 647 0262 1946     	 mov r1,r3
 648 0264 2D20     	 movs r0,#45
 649 0266 00F011F9 	 bl phyWriteRegister
 199:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** }
 650              	 .loc 3 199 0
 651 026a 00BF     	 nop
 652 026c 1037     	 adds r7,r7,#16
 653              	.LCFI39:
 654              	 .cfi_def_cfa_offset 8
 655 026e BD46     	 mov sp,r7
 656              	.LCFI40:
 657              	 .cfi_def_cfa_register 13
 658              	 
 659 0270 80BD     	 pop {r7,pc}
 660              	 .cfi_endproc
 661              	.LFE229:
 663              	 .align 1
 664              	 .global PHY_SetTxPower
 665              	 .syntax unified
 666              	 .thumb
 667              	 .thumb_func
 668              	 .fpu softvfp
 670              	PHY_SetTxPower:
 671              	.LFB230:
 200:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 
 201:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** /*************************************************************************//**
 202:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** *****************************************************************************/
 203:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** void PHY_SetTxPower(uint8_t txPower)
 204:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** {
 672              	 .loc 3 204 0
 673              	 .cfi_startproc
 674              	 
 675              	 
 676 0272 80B5     	 push {r7,lr}
 677              	.LCFI41:
 678              	 .cfi_def_cfa_offset 8
 679              	 .cfi_offset 7,-8
 680              	 .cfi_offset 14,-4
 681 0274 84B0     	 sub sp,sp,#16
 682              	.LCFI42:
 683              	 .cfi_def_cfa_offset 24
 684 0276 00AF     	 add r7,sp,#0
 685              	.LCFI43:
 686              	 .cfi_def_cfa_register 7
 687 0278 0346     	 mov r3,r0
 688 027a FB71     	 strb r3,[r7,#7]
 205:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	uint8_t reg;
 206:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 
 207:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	reg = phyReadRegister(PHY_TX_PWR_REG) & ~0x0f;
 689              	 .loc 3 207 0
 690 027c 0520     	 movs r0,#5
 691 027e 00F019F9 	 bl phyReadRegister
 692 0282 0346     	 mov r3,r0
 693 0284 23F00F03 	 bic r3,r3,#15
 694 0288 FB73     	 strb r3,[r7,#15]
 208:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	phyWriteRegister(PHY_TX_PWR_REG, reg | txPower);
 695              	 .loc 3 208 0
 696 028a FA7B     	 ldrb r2,[r7,#15]
 697 028c FB79     	 ldrb r3,[r7,#7]
 698 028e 1343     	 orrs r3,r3,r2
 699 0290 DBB2     	 uxtb r3,r3
 700 0292 1946     	 mov r1,r3
 701 0294 0520     	 movs r0,#5
 702 0296 00F0F9F8 	 bl phyWriteRegister
 209:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** }
 703              	 .loc 3 209 0
 704 029a 00BF     	 nop
 705 029c 1037     	 adds r7,r7,#16
 706              	.LCFI44:
 707              	 .cfi_def_cfa_offset 8
 708 029e BD46     	 mov sp,r7
 709              	.LCFI45:
 710              	 .cfi_def_cfa_register 13
 711              	 
 712 02a0 80BD     	 pop {r7,pc}
 713              	 .cfi_endproc
 714              	.LFE230:
 716              	 .align 1
 717              	 .global PHY_Sleep
 718              	 .syntax unified
 719              	 .thumb
 720              	 .thumb_func
 721              	 .fpu softvfp
 723              	PHY_Sleep:
 724              	.LFB231:
 210:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 
 211:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** /*************************************************************************//**
 212:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** *****************************************************************************/
 213:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** void PHY_Sleep(void)
 214:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** {
 725              	 .loc 3 214 0
 726              	 .cfi_startproc
 727              	 
 728              	 
 729 02a2 80B5     	 push {r7,lr}
 730              	.LCFI46:
 731              	 .cfi_def_cfa_offset 8
 732              	 .cfi_offset 7,-8
 733              	 .cfi_offset 14,-4
 734 02a4 82B0     	 sub sp,sp,#8
 735              	.LCFI47:
 736              	 .cfi_def_cfa_offset 16
 737 02a6 00AF     	 add r7,sp,#0
 738              	.LCFI48:
 739              	 .cfi_def_cfa_register 7
 215:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	if(phyState != PHY_STATE_SLEEP)
 740              	 .loc 3 215 0
 741 02a8 174B     	 ldr r3,.L33
 742 02aa 1B78     	 ldrb r3,[r3]
 743 02ac 022B     	 cmp r3,#2
 744 02ae 09D0     	 beq .L32
 216:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	{
 217:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 		phyTrxSetState(TRX_CMD_TRX_OFF);
 745              	 .loc 3 217 0
 746 02b0 0820     	 movs r0,#8
 747 02b2 00F037F9 	 bl phyTrxSetState
 218:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 		TRX_SLP_TR_HIGH();
 748              	 .loc 3 218 0
 749 02b6 0121     	 movs r1,#1
 750 02b8 0920     	 movs r0,#9
 751 02ba FFF7A1FE 	 bl ioport_set_pin_level
 219:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 		phyState = PHY_STATE_SLEEP;		
 752              	 .loc 3 219 0
 753 02be 124B     	 ldr r3,.L33
 754 02c0 0222     	 movs r2,#2
 755 02c2 1A70     	 strb r2,[r3]
 756              	.L32:
 220:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	}
 221:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	
 222:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	uint8_t reg;
 223:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 
 224:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** #if (ANTENNA_DIVERSITY == 1)
 225:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	reg								= phyReadRegister(ANT_DIV_REG);
 226:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	phyWriteRegister(ANT_DIV_REG, reg & ~((1 << ANT_DIV_EN) | (1 << ANT_EXT_SW_EN)));
 227:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** #else
 228:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	#if (ANTENNA_DEFAULT != 0)
 229:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 		reg							= phyReadRegister(ANT_DIV_REG);
 757              	 .loc 3 229 0
 758 02c4 0D20     	 movs r0,#13
 759 02c6 00F0F5F8 	 bl phyReadRegister
 760 02ca 0346     	 mov r3,r0
 761 02cc FB71     	 strb r3,[r7,#7]
 230:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 		phyWriteRegister(ANT_DIV_REG, reg & ~((1 << ANT_EXT_SW_EN) | (0x03 << ANT_CTRL)));
 762              	 .loc 3 230 0
 763 02ce FB79     	 ldrb r3,[r7,#7]
 764 02d0 23F00703 	 bic r3,r3,#7
 765 02d4 DBB2     	 uxtb r3,r3
 766 02d6 1946     	 mov r1,r3
 767 02d8 0D20     	 movs r0,#13
 768 02da 00F0D7F8 	 bl phyWriteRegister
 231:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	#endif // ANTENNA_DEFAULT
 232:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** #endif // ANTENNA_DIVERSITY
 233:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** #ifdef EXT_RF_FRONT_END_CTRL
 234:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	reg								= phyReadRegister(TRX_CTRL_1_REG);
 769              	 .loc 3 234 0
 770 02de 0420     	 movs r0,#4
 771 02e0 00F0E8F8 	 bl phyReadRegister
 772 02e4 0346     	 mov r3,r0
 773 02e6 FB71     	 strb r3,[r7,#7]
 235:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	phyWriteRegister(TRX_CTRL_1_REG, reg & ~(1 << PA_EXT_EN));
 774              	 .loc 3 235 0
 775 02e8 FB79     	 ldrb r3,[r7,#7]
 776 02ea 03F07F03 	 and r3,r3,#127
 777 02ee DBB2     	 uxtb r3,r3
 778 02f0 1946     	 mov r1,r3
 779 02f2 0420     	 movs r0,#4
 780 02f4 00F0CAF8 	 bl phyWriteRegister
 236:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 
 237:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	ioport_set_pin_level(AT86RFX_CSD, IOPORT_PIN_LEVEL_LOW);
 781              	 .loc 3 237 0
 782 02f8 0021     	 movs r1,#0
 783 02fa 0B20     	 movs r0,#11
 784 02fc FFF780FE 	 bl ioport_set_pin_level
 238:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** #endif // EXT_RF_FRONT_END_CTRL
 239:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** }
 785              	 .loc 3 239 0
 786 0300 00BF     	 nop
 787 0302 0837     	 adds r7,r7,#8
 788              	.LCFI49:
 789              	 .cfi_def_cfa_offset 8
 790 0304 BD46     	 mov sp,r7
 791              	.LCFI50:
 792              	 .cfi_def_cfa_register 13
 793              	 
 794 0306 80BD     	 pop {r7,pc}
 795              	.L34:
 796              	 .align 2
 797              	.L33:
 798 0308 00000000 	 .word phyState
 799              	 .cfi_endproc
 800              	.LFE231:
 802              	 .align 1
 803              	 .global PHY_Wakeup
 804              	 .syntax unified
 805              	 .thumb
 806              	 .thumb_func
 807              	 .fpu softvfp
 809              	PHY_Wakeup:
 810              	.LFB232:
 240:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 
 241:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** /*************************************************************************//**
 242:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** *****************************************************************************/
 243:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** void PHY_Wakeup(void)
 244:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** {
 811              	 .loc 3 244 0
 812              	 .cfi_startproc
 813              	 
 814              	 
 815 030c 80B5     	 push {r7,lr}
 816              	.LCFI51:
 817              	 .cfi_def_cfa_offset 8
 818              	 .cfi_offset 7,-8
 819              	 .cfi_offset 14,-4
 820 030e 00AF     	 add r7,sp,#0
 821              	.LCFI52:
 822              	 .cfi_def_cfa_register 7
 245:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	TRX_SLP_TR_LOW();
 823              	 .loc 3 245 0
 824 0310 0021     	 movs r1,#0
 825 0312 0920     	 movs r0,#9
 826 0314 FFF774FE 	 bl ioport_set_pin_level
 246:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	phySetRxState();
 827              	 .loc 3 246 0
 828 0318 00F0F1F8 	 bl phySetRxState
 247:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	phyState = PHY_STATE_IDLE;
 829              	 .loc 3 247 0
 830 031c 024B     	 ldr r3,.L36
 831 031e 0122     	 movs r2,#1
 832 0320 1A70     	 strb r2,[r3]
 248:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** }
 833              	 .loc 3 248 0
 834 0322 00BF     	 nop
 835 0324 80BD     	 pop {r7,pc}
 836              	.L37:
 837 0326 00BF     	 .align 2
 838              	.L36:
 839 0328 00000000 	 .word phyState
 840              	 .cfi_endproc
 841              	.LFE232:
 843              	 .align 1
 844              	 .global PHY_DataReq
 845              	 .syntax unified
 846              	 .thumb
 847              	 .thumb_func
 848              	 .fpu softvfp
 850              	PHY_DataReq:
 851              	.LFB233:
 249:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 
 250:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** /*************************************************************************//**
 251:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** *****************************************************************************/
 252:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 
 253:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** void PHY_DataReq(uint8_t *data, uint8_t size)
 254:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** {
 852              	 .loc 3 254 0
 853              	 .cfi_startproc
 854              	 
 855              	 
 856 032c 80B5     	 push {r7,lr}
 857              	.LCFI53:
 858              	 .cfi_def_cfa_offset 8
 859              	 .cfi_offset 7,-8
 860              	 .cfi_offset 14,-4
 861 032e 84B0     	 sub sp,sp,#16
 862              	.LCFI54:
 863              	 .cfi_def_cfa_offset 24
 864 0330 00AF     	 add r7,sp,#0
 865              	.LCFI55:
 866              	 .cfi_def_cfa_register 7
 867 0332 7860     	 str r0,[r7,#4]
 868 0334 0B46     	 mov r3,r1
 869 0336 FB70     	 strb r3,[r7,#3]
 255:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	(void*)size;
 256:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** #if (ANTENNA_DIVERSITY == 1)
 257:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** #endif // ANTENNA_DIVERSITY
 258:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** #ifdef EXT_RF_FRONT_END_CTRL
 259:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	ioport_set_pin_level(AT86RFX_CSD, IOPORT_PIN_LEVEL_LOW);
 870              	 .loc 3 259 0
 871 0338 0021     	 movs r1,#0
 872 033a 0B20     	 movs r0,#11
 873 033c FFF760FE 	 bl ioport_set_pin_level
 260:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** #endif // EXT_RF_FRONT_END_CTRL
 261:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 
 262:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	phyTrxSetState(TRX_CMD_TX_ARET_ON);
 874              	 .loc 3 262 0
 875 0340 1920     	 movs r0,#25
 876 0342 00F0EFF8 	 bl phyTrxSetState
 263:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 
 264:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	phyReadRegister(IRQ_STATUS_REG);
 877              	 .loc 3 264 0
 878 0346 0F20     	 movs r0,#15
 879 0348 00F0B4F8 	 bl phyReadRegister
 265:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	/* size of the buffer is sent as first byte of the data
 266:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	 * and data starts from second byte.
 267:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	 */
 268:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	data[0] += 0;
 880              	 .loc 3 268 0
 881 034c 7B68     	 ldr r3,[r7,#4]
 882 034e 1A78     	 ldrb r2,[r3]
 883 0350 7B68     	 ldr r3,[r7,#4]
 884 0352 1A70     	 strb r2,[r3]
 885              	.LBB65:
 269:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	for (int i = size; i > 0; i--)
 886              	 .loc 3 269 0
 887 0354 FB78     	 ldrb r3,[r7,#3]
 888 0356 FB60     	 str r3,[r7,#12]
 889 0358 0BE0     	 b .L39
 890              	.L40:
 270:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	{
 271:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 		data[i] = data[i-1];
 891              	 .loc 3 271 0 discriminator 3
 892 035a FB68     	 ldr r3,[r7,#12]
 893 035c 7A68     	 ldr r2,[r7,#4]
 894 035e 1344     	 add r3,r3,r2
 895 0360 FA68     	 ldr r2,[r7,#12]
 896 0362 013A     	 subs r2,r2,#1
 897 0364 7968     	 ldr r1,[r7,#4]
 898 0366 0A44     	 add r2,r2,r1
 899 0368 1278     	 ldrb r2,[r2]
 900 036a 1A70     	 strb r2,[r3]
 269:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	for (int i = size; i > 0; i--)
 901              	 .loc 3 269 0 discriminator 3
 902 036c FB68     	 ldr r3,[r7,#12]
 903 036e 013B     	 subs r3,r3,#1
 904 0370 FB60     	 str r3,[r7,#12]
 905              	.L39:
 269:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	for (int i = size; i > 0; i--)
 906              	 .loc 3 269 0 is_stmt 0 discriminator 1
 907 0372 FB68     	 ldr r3,[r7,#12]
 908 0374 002B     	 cmp r3,#0
 909 0376 F0DC     	 bgt .L40
 910              	.LBE65:
 272:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 		
 273:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	}
 274:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	trx_frame_write(data, size +1 /*(data[0] - 1)  length value*/);
 911              	 .loc 3 274 0 is_stmt 1
 912 0378 FB78     	 ldrb r3,[r7,#3]
 913 037a 0133     	 adds r3,r3,#1
 914 037c DBB2     	 uxtb r3,r3
 915 037e 1946     	 mov r1,r3
 916 0380 7868     	 ldr r0,[r7,#4]
 917 0382 094B     	 ldr r3,.L41
 918 0384 9847     	 blx r3
 919              	.LVL2:
 275:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 
 276:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	phyState = PHY_STATE_TX_WAIT_END;
 920              	 .loc 3 276 0
 921 0386 094B     	 ldr r3,.L41+4
 922 0388 0322     	 movs r2,#3
 923 038a 1A70     	 strb r2,[r3]
 277:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 
 278:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	TRX_SLP_TR_HIGH();
 924              	 .loc 3 278 0
 925 038c 0121     	 movs r1,#1
 926 038e 0920     	 movs r0,#9
 927 0390 FFF736FE 	 bl ioport_set_pin_level
 928              	.LBB66:
 929              	.LBB67:
 930              	 .file 4 "../../../platform/thirdparty/CMSIS/include/core_cmInstr.h"
   1:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /**************************************************************************//**
   2:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  * @file     core_cmInstr.h
   3:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  * @brief    CMSIS Cortex-M Core Instruction Access Header File
   4:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  * @version  V3.00
   5:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  * @date     07. February 2012
   6:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  *
   7:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  * @note
   8:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  * Copyright (C) 2009-2012 ARM Limited. All rights reserved.
   9:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  *
  10:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  * @par
  11:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  * ARM Limited (ARM) is supplying this software for use with Cortex-M
  12:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  * processor based microcontrollers.  This file can be freely distributed
  13:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  * within development tools that are supporting such ARM based processors.
  14:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  *
  15:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  * @par
  16:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
  17:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
  18:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
  19:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  * ARM SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR
  20:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
  21:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  *
  22:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  ******************************************************************************/
  23:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
  24:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** #ifndef __CORE_CMINSTR_H
  25:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** #define __CORE_CMINSTR_H
  26:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
  27:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
  28:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /* ##########################  Core Instruction Access  ######################### */
  29:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
  30:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****   Access to dedicated instructions
  31:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****   @{
  32:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** */
  33:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
  34:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** #if   defined ( __CC_ARM ) /*------------------RealView Compiler -----------------*/
  35:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /* ARM armcc specific functions */
  36:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
  37:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** #if (__ARMCC_VERSION < 400677)
  38:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****   #error "Please use ARM Compiler Toolchain V4.0.677 or later!"
  39:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** #endif
  40:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
  41:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
  42:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /** \brief  No Operation
  43:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
  44:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     No Operation does nothing. This instruction can be used for code alignment purposes.
  45:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  */
  46:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** #define __NOP                             __nop
  47:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
  48:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
  49:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /** \brief  Wait For Interrupt
  50:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
  51:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     Wait For Interrupt is a hint instruction that suspends execution
  52:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     until one of a number of events occurs.
  53:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  */
  54:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** #define __WFI                             __wfi
  55:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
  56:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
  57:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /** \brief  Wait For Event
  58:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
  59:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     Wait For Event is a hint instruction that permits the processor to enter
  60:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     a low-power state until one of a number of events occurs.
  61:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  */
  62:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** #define __WFE                             __wfe
  63:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
  64:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
  65:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /** \brief  Send Event
  66:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
  67:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     Send Event is a hint instruction. It causes an event to be signaled to the CPU.
  68:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  */
  69:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** #define __SEV                             __sev
  70:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
  71:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
  72:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /** \brief  Instruction Synchronization Barrier
  73:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
  74:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     Instruction Synchronization Barrier flushes the pipeline in the processor,
  75:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     so that all instructions following the ISB are fetched from cache or
  76:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     memory, after the instruction has been completed.
  77:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  */
  78:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** #define __ISB()                           __isb(0xF)
  79:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
  80:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
  81:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /** \brief  Data Synchronization Barrier
  82:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
  83:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     This function acts as a special kind of Data Memory Barrier.
  84:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     It completes when all explicit memory accesses before this instruction complete.
  85:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  */
  86:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** #define __DSB()                           __dsb(0xF)
  87:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
  88:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
  89:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /** \brief  Data Memory Barrier
  90:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
  91:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     This function ensures the apparent order of the explicit memory operations before
  92:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     and after the instruction, without ensuring their completion.
  93:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  */
  94:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** #define __DMB()                           __dmb(0xF)
  95:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
  96:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
  97:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /** \brief  Reverse byte order (32 bit)
  98:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
  99:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     This function reverses the byte order in integer value.
 100:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 101:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \param [in]    value  Value to reverse
 102:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \return               Reversed value
 103:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  */
 104:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** #define __REV                             __rev
 105:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 106:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 107:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /** \brief  Reverse byte order (16 bit)
 108:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 109:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     This function reverses the byte order in two unsigned short values.
 110:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 111:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \param [in]    value  Value to reverse
 112:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \return               Reversed value
 113:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  */
 114:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** __attribute__((section(".rev16_text"))) __STATIC_INLINE __ASM uint32_t __REV16(uint32_t value)
 115:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** {
 116:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****   rev16 r0, r0
 117:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****   bx lr
 118:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** }
 119:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 120:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 121:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /** \brief  Reverse byte order in signed short value
 122:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 123:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     This function reverses the byte order in a signed short value with sign extension to integer.
 124:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 125:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \param [in]    value  Value to reverse
 126:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \return               Reversed value
 127:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  */
 128:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** __attribute__((section(".revsh_text"))) __STATIC_INLINE __ASM int32_t __REVSH(int32_t value)
 129:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** {
 130:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****   revsh r0, r0
 131:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****   bx lr
 132:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** }
 133:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 134:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 135:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /** \brief  Rotate Right in unsigned value (32 bit)
 136:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 137:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     This function Rotate Right (immediate) provides the value of the contents of a register rotated
 138:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 139:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \param [in]    value  Value to rotate
 140:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \param [in]    value  Number of Bits to rotate
 141:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \return               Rotated value
 142:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  */
 143:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** #define __ROR                             __ror
 144:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 145:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 146:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** #if       (__CORTEX_M >= 0x03)
 147:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 148:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /** \brief  Reverse bit order of value
 149:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 150:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     This function reverses the bit order of the given value.
 151:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 152:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \param [in]    value  Value to reverse
 153:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \return               Reversed value
 154:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  */
 155:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** #define __RBIT                            __rbit
 156:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 157:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 158:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /** \brief  LDR Exclusive (8 bit)
 159:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 160:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     This function performs a exclusive LDR command for 8 bit value.
 161:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 162:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 163:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \return             value of type uint8_t at (*ptr)
 164:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  */
 165:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** #define __LDREXB(ptr)                     ((uint8_t ) __ldrex(ptr))
 166:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 167:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 168:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /** \brief  LDR Exclusive (16 bit)
 169:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 170:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     This function performs a exclusive LDR command for 16 bit values.
 171:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 172:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 173:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \return        value of type uint16_t at (*ptr)
 174:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  */
 175:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** #define __LDREXH(ptr)                     ((uint16_t) __ldrex(ptr))
 176:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 177:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 178:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /** \brief  LDR Exclusive (32 bit)
 179:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 180:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     This function performs a exclusive LDR command for 32 bit values.
 181:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 182:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 183:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \return        value of type uint32_t at (*ptr)
 184:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  */
 185:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** #define __LDREXW(ptr)                     ((uint32_t ) __ldrex(ptr))
 186:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 187:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 188:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /** \brief  STR Exclusive (8 bit)
 189:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 190:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     This function performs a exclusive STR command for 8 bit values.
 191:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 192:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \param [in]  value  Value to store
 193:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 194:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \return          0  Function succeeded
 195:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \return          1  Function failed
 196:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  */
 197:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** #define __STREXB(value, ptr)              __strex(value, ptr)
 198:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 199:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 200:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /** \brief  STR Exclusive (16 bit)
 201:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 202:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     This function performs a exclusive STR command for 16 bit values.
 203:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 204:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \param [in]  value  Value to store
 205:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 206:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \return          0  Function succeeded
 207:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \return          1  Function failed
 208:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  */
 209:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** #define __STREXH(value, ptr)              __strex(value, ptr)
 210:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 211:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 212:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /** \brief  STR Exclusive (32 bit)
 213:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 214:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     This function performs a exclusive STR command for 32 bit values.
 215:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 216:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \param [in]  value  Value to store
 217:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 218:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \return          0  Function succeeded
 219:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \return          1  Function failed
 220:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  */
 221:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** #define __STREXW(value, ptr)              __strex(value, ptr)
 222:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 223:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 224:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /** \brief  Remove the exclusive lock
 225:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 226:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     This function removes the exclusive lock which is created by LDREX.
 227:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 228:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  */
 229:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** #define __CLREX                           __clrex
 230:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 231:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 232:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /** \brief  Signed Saturate
 233:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 234:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     This function saturates a signed value.
 235:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 236:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \param [in]  value  Value to be saturated
 237:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \param [in]    sat  Bit position to saturate to (1..32)
 238:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \return             Saturated value
 239:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  */
 240:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** #define __SSAT                            __ssat
 241:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 242:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 243:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /** \brief  Unsigned Saturate
 244:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 245:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     This function saturates an unsigned value.
 246:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 247:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \param [in]  value  Value to be saturated
 248:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \param [in]    sat  Bit position to saturate to (0..31)
 249:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \return             Saturated value
 250:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  */
 251:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** #define __USAT                            __usat
 252:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 253:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 254:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /** \brief  Count leading zeros
 255:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 256:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     This function counts the number of leading zeros of a data value.
 257:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 258:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \param [in]  value  Value to count the leading zeros
 259:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \return             number of leading zeros in value
 260:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  */
 261:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** #define __CLZ                             __clz
 262:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 263:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** #endif /* (__CORTEX_M >= 0x03) */
 264:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 265:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 266:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 267:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** #elif defined ( __ICCARM__ ) /*------------------ ICC Compiler -------------------*/
 268:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /* IAR iccarm specific functions */
 269:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 270:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** #include <cmsis_iar.h>
 271:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 272:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 273:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** #elif defined ( __TMS470__ ) /*---------------- TI CCS Compiler ------------------*/
 274:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /* TI CCS specific functions */
 275:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 276:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** #include <cmsis_ccs.h>
 277:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 278:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 279:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** #elif defined ( __GNUC__ ) /*------------------ GNU Compiler ---------------------*/
 280:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /* GNU gcc specific functions */
 281:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 282:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /** \brief  No Operation
 283:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 284:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     No Operation does nothing. This instruction can be used for code alignment purposes.
 285:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  */
 286:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
 287:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** {
 288:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****   __ASM volatile ("nop");
 931              	 .loc 4 288 0
 932              	 .syntax unified
 933              	
 934 0394 00BF     	 nop
 935              	
 936              	 .thumb
 937              	 .syntax unified
 938              	.LBE67:
 939              	.LBE66:
 940              	.LBB68:
 941              	.LBB69:
 942              	 .syntax unified
 943              	
 944 0396 00BF     	 nop
 945              	
 946              	 .thumb
 947              	 .syntax unified
 948              	.LBE69:
 949              	.LBE68:
 279:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	TRX_TRIG_DELAY();
 280:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	TRX_SLP_TR_LOW();
 950              	 .loc 3 280 0
 951 0398 0021     	 movs r1,#0
 952 039a 0920     	 movs r0,#9
 953 039c FFF730FE 	 bl ioport_set_pin_level
 281:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** }
 954              	 .loc 3 281 0
 955 03a0 00BF     	 nop
 956 03a2 1037     	 adds r7,r7,#16
 957              	.LCFI56:
 958              	 .cfi_def_cfa_offset 8
 959 03a4 BD46     	 mov sp,r7
 960              	.LCFI57:
 961              	 .cfi_def_cfa_register 13
 962              	 
 963 03a6 80BD     	 pop {r7,pc}
 964              	.L42:
 965              	 .align 2
 966              	.L41:
 967 03a8 00000000 	 .word trx_frame_write
 968 03ac 00000000 	 .word phyState
 969              	 .cfi_endproc
 970              	.LFE233:
 972              	 .align 1
 973              	 .global PHY_RandomReq
 974              	 .syntax unified
 975              	 .thumb
 976              	 .thumb_func
 977              	 .fpu softvfp
 979              	PHY_RandomReq:
 980              	.LFB234:
 282:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 
 283:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** /*************************************************************************//**
 284:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** *****************************************************************************/
 285:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** uint16_t PHY_RandomReq(void)
 286:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** {
 981              	 .loc 3 286 0
 982              	 .cfi_startproc
 983              	 
 984              	 
 985 03b0 80B5     	 push {r7,lr}
 986              	.LCFI58:
 987              	 .cfi_def_cfa_offset 8
 988              	 .cfi_offset 7,-8
 989              	 .cfi_offset 14,-4
 990 03b2 82B0     	 sub sp,sp,#8
 991              	.LCFI59:
 992              	 .cfi_def_cfa_offset 16
 993 03b4 00AF     	 add r7,sp,#0
 994              	.LCFI60:
 995              	 .cfi_def_cfa_register 7
 287:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	uint16_t rnd = 0;
 996              	 .loc 3 287 0
 997 03b6 0023     	 movs r3,#0
 998 03b8 FB80     	 strh r3,[r7,#6]
 288:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	uint8_t rndValue;
 289:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 
 290:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	phyTrxSetState(TRX_CMD_RX_ON);
 999              	 .loc 3 290 0
 1000 03ba 0620     	 movs r0,#6
 1001 03bc 00F0B2F8 	 bl phyTrxSetState
 1002              	.LBB70:
 291:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 
 292:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	for (uint8_t i = 0; i < 16; i += 2) {
 1003              	 .loc 3 292 0
 1004 03c0 0023     	 movs r3,#0
 1005 03c2 7B71     	 strb r3,[r7,#5]
 1006 03c4 18E0     	 b .L44
 1007              	.L45:
 293:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 		delay_us(RANDOM_NUMBER_UPDATE_INTERVAL);
 1008              	 .loc 3 293 0 discriminator 3
 1009 03c6 0420     	 movs r0,#4
 1010 03c8 104B     	 ldr r3,.L47
 1011 03ca 9847     	 blx r3
 1012              	.LVL3:
 294:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 		rndValue = (phyReadRegister(PHY_RSSI_REG) >> RND_VALUE) & 3;
 1013              	 .loc 3 294 0 discriminator 3
 1014 03cc 0620     	 movs r0,#6
 1015 03ce 00F071F8 	 bl phyReadRegister
 1016 03d2 0346     	 mov r3,r0
 1017 03d4 5B09     	 lsrs r3,r3,#5
 1018 03d6 DBB2     	 uxtb r3,r3
 1019 03d8 03F00303 	 and r3,r3,#3
 1020 03dc 3B71     	 strb r3,[r7,#4]
 295:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 		rnd |= rndValue << i;
 1021              	 .loc 3 295 0 discriminator 3
 1022 03de 3A79     	 ldrb r2,[r7,#4]
 1023 03e0 7B79     	 ldrb r3,[r7,#5]
 1024 03e2 02FA03F3 	 lsl r3,r2,r3
 1025 03e6 1AB2     	 sxth r2,r3
 1026 03e8 B7F90630 	 ldrsh r3,[r7,#6]
 1027 03ec 1343     	 orrs r3,r3,r2
 1028 03ee 1BB2     	 sxth r3,r3
 1029 03f0 FB80     	 strh r3,[r7,#6]
 292:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 		delay_us(RANDOM_NUMBER_UPDATE_INTERVAL);
 1030              	 .loc 3 292 0 discriminator 3
 1031 03f2 7B79     	 ldrb r3,[r7,#5]
 1032 03f4 0233     	 adds r3,r3,#2
 1033 03f6 7B71     	 strb r3,[r7,#5]
 1034              	.L44:
 292:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 		delay_us(RANDOM_NUMBER_UPDATE_INTERVAL);
 1035              	 .loc 3 292 0 is_stmt 0 discriminator 1
 1036 03f8 7B79     	 ldrb r3,[r7,#5]
 1037 03fa 0F2B     	 cmp r3,#15
 1038 03fc E3D9     	 bls .L45
 1039              	.LBE70:
 296:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	}
 297:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 
 298:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	phySetRxState();
 1040              	 .loc 3 298 0 is_stmt 1
 1041 03fe 00F07EF8 	 bl phySetRxState
 299:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 
 300:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	return rnd;
 1042              	 .loc 3 300 0
 1043 0402 FB88     	 ldrh r3,[r7,#6]
 301:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** }
 1044              	 .loc 3 301 0
 1045 0404 1846     	 mov r0,r3
 1046 0406 0837     	 adds r7,r7,#8
 1047              	.LCFI61:
 1048              	 .cfi_def_cfa_offset 8
 1049 0408 BD46     	 mov sp,r7
 1050              	.LCFI62:
 1051              	 .cfi_def_cfa_register 13
 1052              	 
 1053 040a 80BD     	 pop {r7,pc}
 1054              	.L48:
 1055              	 .align 2
 1056              	.L47:
 1057 040c 00000000 	 .word portable_delay_cycles
 1058              	 .cfi_endproc
 1059              	.LFE234:
 1061              	 .align 1
 1062              	 .global PHY_EncryptReq
 1063              	 .syntax unified
 1064              	 .thumb
 1065              	 .thumb_func
 1066              	 .fpu softvfp
 1068              	PHY_EncryptReq:
 1069              	.LFB235:
 302:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 
 303:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** /*************************************************************************//**
 304:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** *****************************************************************************/
 305:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** void PHY_EncryptReq(uint8_t *text, uint8_t *key)
 306:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** {
 1070              	 .loc 3 306 0
 1071              	 .cfi_startproc
 1072              	 
 1073              	 
 1074 0410 80B5     	 push {r7,lr}
 1075              	.LCFI63:
 1076              	 .cfi_def_cfa_offset 8
 1077              	 .cfi_offset 7,-8
 1078              	 .cfi_offset 14,-4
 1079 0412 82B0     	 sub sp,sp,#8
 1080              	.LCFI64:
 1081              	 .cfi_def_cfa_offset 16
 1082 0414 00AF     	 add r7,sp,#0
 1083              	.LCFI65:
 1084              	 .cfi_def_cfa_register 7
 1085 0416 7860     	 str r0,[r7,#4]
 1086 0418 3960     	 str r1,[r7]
 307:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	sal_aes_setup(key, AES_MODE_ECB, AES_DIR_ENCRYPT);
 1087              	 .loc 3 307 0
 1088 041a 0022     	 movs r2,#0
 1089 041c 0021     	 movs r1,#0
 1090 041e 3868     	 ldr r0,[r7]
 1091 0420 064B     	 ldr r3,.L50
 1092 0422 9847     	 blx r3
 1093              	.LVL4:
 308:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** #if (SAL_TYPE == AT86RF2xx)
 309:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	sal_aes_wrrd(text, NULL);
 1094              	 .loc 3 309 0
 1095 0424 0021     	 movs r1,#0
 1096 0426 7868     	 ldr r0,[r7,#4]
 1097 0428 054B     	 ldr r3,.L50+4
 1098 042a 9847     	 blx r3
 1099              	.LVL5:
 310:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** #else
 311:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	sal_aes_exec(text);
 312:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** #endif
 313:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	sal_aes_read(text);
 1100              	 .loc 3 313 0
 1101 042c 7868     	 ldr r0,[r7,#4]
 1102 042e 054B     	 ldr r3,.L50+8
 1103 0430 9847     	 blx r3
 1104              	.LVL6:
 314:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** }
 1105              	 .loc 3 314 0
 1106 0432 00BF     	 nop
 1107 0434 0837     	 adds r7,r7,#8
 1108              	.LCFI66:
 1109              	 .cfi_def_cfa_offset 8
 1110 0436 BD46     	 mov sp,r7
 1111              	.LCFI67:
 1112              	 .cfi_def_cfa_register 13
 1113              	 
 1114 0438 80BD     	 pop {r7,pc}
 1115              	.L51:
 1116 043a 00BF     	 .align 2
 1117              	.L50:
 1118 043c 00000000 	 .word sal_aes_setup
 1119 0440 00000000 	 .word sal_aes_wrrd
 1120 0444 00000000 	 .word sal_aes_read
 1121              	 .cfi_endproc
 1122              	.LFE235:
 1124              	 .align 1
 1125              	 .global PHY_EdReq
 1126              	 .syntax unified
 1127              	 .thumb
 1128              	 .thumb_func
 1129              	 .fpu softvfp
 1131              	PHY_EdReq:
 1132              	.LFB236:
 315:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 
 316:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** /*************************************************************************//**
 317:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** *****************************************************************************/
 318:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** int8_t PHY_EdReq(void)
 319:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** {
 1133              	 .loc 3 319 0
 1134              	 .cfi_startproc
 1135              	 
 1136              	 
 1137 0448 80B5     	 push {r7,lr}
 1138              	.LCFI68:
 1139              	 .cfi_def_cfa_offset 8
 1140              	 .cfi_offset 7,-8
 1141              	 .cfi_offset 14,-4
 1142 044a 82B0     	 sub sp,sp,#8
 1143              	.LCFI69:
 1144              	 .cfi_def_cfa_offset 16
 1145 044c 00AF     	 add r7,sp,#0
 1146              	.LCFI70:
 1147              	 .cfi_def_cfa_register 7
 320:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	uint8_t ed;
 321:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 
 322:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	phyTrxSetState(TRX_CMD_RX_ON);
 1148              	 .loc 3 322 0
 1149 044e 0620     	 movs r0,#6
 1150 0450 00F068F8 	 bl phyTrxSetState
 323:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	phyWriteRegister(PHY_ED_LEVEL_REG, 0);
 1151              	 .loc 3 323 0
 1152 0454 0021     	 movs r1,#0
 1153 0456 0720     	 movs r0,#7
 1154 0458 00F018F8 	 bl phyWriteRegister
 324:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 
 325:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	while (0 == (phyReadRegister(IRQ_STATUS_REG) & (1 << CCA_ED_DONE))) {
 1155              	 .loc 3 325 0
 1156 045c 00BF     	 nop
 1157              	.L53:
 1158              	 .loc 3 325 0 is_stmt 0 discriminator 1
 1159 045e 0F20     	 movs r0,#15
 1160 0460 00F028F8 	 bl phyReadRegister
 1161 0464 0346     	 mov r3,r0
 1162 0466 03F01003 	 and r3,r3,#16
 1163 046a 002B     	 cmp r3,#0
 1164 046c F7D0     	 beq .L53
 326:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	}
 327:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 
 328:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	ed = (int8_t)phyReadRegister(PHY_ED_LEVEL_REG);
 1165              	 .loc 3 328 0 is_stmt 1
 1166 046e 0720     	 movs r0,#7
 1167 0470 00F020F8 	 bl phyReadRegister
 1168 0474 0346     	 mov r3,r0
 1169 0476 FB71     	 strb r3,[r7,#7]
 329:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 
 330:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	phySetRxState();
 1170              	 .loc 3 330 0
 1171 0478 00F041F8 	 bl phySetRxState
 331:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 
 332:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	return ed + PHY_RSSI_BASE_VAL;
 1172              	 .loc 3 332 0
 1173 047c FB79     	 ldrb r3,[r7,#7]
 1174 047e 5B3B     	 subs r3,r3,#91
 1175 0480 DBB2     	 uxtb r3,r3
 1176 0482 5BB2     	 sxtb r3,r3
 333:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** }
 1177              	 .loc 3 333 0
 1178 0484 1846     	 mov r0,r3
 1179 0486 0837     	 adds r7,r7,#8
 1180              	.LCFI71:
 1181              	 .cfi_def_cfa_offset 8
 1182 0488 BD46     	 mov sp,r7
 1183              	.LCFI72:
 1184              	 .cfi_def_cfa_register 13
 1185              	 
 1186 048a 80BD     	 pop {r7,pc}
 1187              	 .cfi_endproc
 1188              	.LFE236:
 1190              	 .align 1
 1191              	 .syntax unified
 1192              	 .thumb
 1193              	 .thumb_func
 1194              	 .fpu softvfp
 1196              	phyWriteRegister:
 1197              	.LFB237:
 334:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 
 335:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** /*************************************************************************//**
 336:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** *****************************************************************************/
 337:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** static void phyWriteRegister(uint8_t reg, uint8_t value)
 338:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** {
 1198              	 .loc 3 338 0
 1199              	 .cfi_startproc
 1200              	 
 1201              	 
 1202 048c 80B5     	 push {r7,lr}
 1203              	.LCFI73:
 1204              	 .cfi_def_cfa_offset 8
 1205              	 .cfi_offset 7,-8
 1206              	 .cfi_offset 14,-4
 1207 048e 82B0     	 sub sp,sp,#8
 1208              	.LCFI74:
 1209              	 .cfi_def_cfa_offset 16
 1210 0490 00AF     	 add r7,sp,#0
 1211              	.LCFI75:
 1212              	 .cfi_def_cfa_register 7
 1213 0492 0346     	 mov r3,r0
 1214 0494 0A46     	 mov r2,r1
 1215 0496 FB71     	 strb r3,[r7,#7]
 1216 0498 1346     	 mov r3,r2
 1217 049a BB71     	 strb r3,[r7,#6]
 339:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	trx_reg_write(reg, value);
 1218              	 .loc 3 339 0
 1219 049c BA79     	 ldrb r2,[r7,#6]
 1220 049e FB79     	 ldrb r3,[r7,#7]
 1221 04a0 1146     	 mov r1,r2
 1222 04a2 1846     	 mov r0,r3
 1223 04a4 024B     	 ldr r3,.L56
 1224 04a6 9847     	 blx r3
 1225              	.LVL7:
 340:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** }
 1226              	 .loc 3 340 0
 1227 04a8 00BF     	 nop
 1228 04aa 0837     	 adds r7,r7,#8
 1229              	.LCFI76:
 1230              	 .cfi_def_cfa_offset 8
 1231 04ac BD46     	 mov sp,r7
 1232              	.LCFI77:
 1233              	 .cfi_def_cfa_register 13
 1234              	 
 1235 04ae 80BD     	 pop {r7,pc}
 1236              	.L57:
 1237              	 .align 2
 1238              	.L56:
 1239 04b0 00000000 	 .word trx_reg_write
 1240              	 .cfi_endproc
 1241              	.LFE237:
 1243              	 .align 1
 1244              	 .syntax unified
 1245              	 .thumb
 1246              	 .thumb_func
 1247              	 .fpu softvfp
 1249              	phyReadRegister:
 1250              	.LFB238:
 341:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 
 342:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** /*************************************************************************//**
 343:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** *****************************************************************************/
 344:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** static uint8_t phyReadRegister(uint8_t reg)
 345:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** {
 1251              	 .loc 3 345 0
 1252              	 .cfi_startproc
 1253              	 
 1254              	 
 1255 04b4 80B5     	 push {r7,lr}
 1256              	.LCFI78:
 1257              	 .cfi_def_cfa_offset 8
 1258              	 .cfi_offset 7,-8
 1259              	 .cfi_offset 14,-4
 1260 04b6 84B0     	 sub sp,sp,#16
 1261              	.LCFI79:
 1262              	 .cfi_def_cfa_offset 24
 1263 04b8 00AF     	 add r7,sp,#0
 1264              	.LCFI80:
 1265              	 .cfi_def_cfa_register 7
 1266 04ba 0346     	 mov r3,r0
 1267 04bc FB71     	 strb r3,[r7,#7]
 346:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	uint8_t value;
 347:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 
 348:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	value = trx_reg_read(reg);
 1268              	 .loc 3 348 0
 1269 04be FB79     	 ldrb r3,[r7,#7]
 1270 04c0 1846     	 mov r0,r3
 1271 04c2 044B     	 ldr r3,.L60
 1272 04c4 9847     	 blx r3
 1273              	.LVL8:
 1274 04c6 0346     	 mov r3,r0
 1275 04c8 FB73     	 strb r3,[r7,#15]
 349:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 
 350:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	return value;
 1276              	 .loc 3 350 0
 1277 04ca FB7B     	 ldrb r3,[r7,#15]
 351:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** }
 1278              	 .loc 3 351 0
 1279 04cc 1846     	 mov r0,r3
 1280 04ce 1037     	 adds r7,r7,#16
 1281              	.LCFI81:
 1282              	 .cfi_def_cfa_offset 8
 1283 04d0 BD46     	 mov sp,r7
 1284              	.LCFI82:
 1285              	 .cfi_def_cfa_register 13
 1286              	 
 1287 04d2 80BD     	 pop {r7,pc}
 1288              	.L61:
 1289              	 .align 2
 1290              	.L60:
 1291 04d4 00000000 	 .word trx_reg_read
 1292              	 .cfi_endproc
 1293              	.LFE238:
 1295              	 .align 1
 1296              	 .syntax unified
 1297              	 .thumb
 1298              	 .thumb_func
 1299              	 .fpu softvfp
 1301              	phyWaitState:
 1302              	.LFB239:
 352:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 
 353:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** /*************************************************************************//**
 354:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** *****************************************************************************/
 355:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** static void phyWaitState(uint8_t state)
 356:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** {
 1303              	 .loc 3 356 0
 1304              	 .cfi_startproc
 1305              	 
 1306              	 
 1307 04d8 90B5     	 push {r4,r7,lr}
 1308              	.LCFI83:
 1309              	 .cfi_def_cfa_offset 12
 1310              	 .cfi_offset 4,-12
 1311              	 .cfi_offset 7,-8
 1312              	 .cfi_offset 14,-4
 1313 04da 83B0     	 sub sp,sp,#12
 1314              	.LCFI84:
 1315              	 .cfi_def_cfa_offset 24
 1316 04dc 00AF     	 add r7,sp,#0
 1317              	.LCFI85:
 1318              	 .cfi_def_cfa_register 7
 1319 04de 0346     	 mov r3,r0
 1320 04e0 FB71     	 strb r3,[r7,#7]
 357:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	while (state != (phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK)) {
 1321              	 .loc 3 357 0
 1322 04e2 00BF     	 nop
 1323              	.L63:
 1324              	 .loc 3 357 0 is_stmt 0 discriminator 1
 1325 04e4 FC79     	 ldrb r4,[r7,#7]
 1326 04e6 0120     	 movs r0,#1
 1327 04e8 FFF7E4FF 	 bl phyReadRegister
 1328 04ec 0346     	 mov r3,r0
 1329 04ee 03F01F03 	 and r3,r3,#31
 1330 04f2 9C42     	 cmp r4,r3
 1331 04f4 F6D1     	 bne .L63
 358:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	}
 359:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** }
 1332              	 .loc 3 359 0 is_stmt 1
 1333 04f6 00BF     	 nop
 1334 04f8 0C37     	 adds r7,r7,#12
 1335              	.LCFI86:
 1336              	 .cfi_def_cfa_offset 12
 1337 04fa BD46     	 mov sp,r7
 1338              	.LCFI87:
 1339              	 .cfi_def_cfa_register 13
 1340              	 
 1341 04fc 90BD     	 pop {r4,r7,pc}
 1342              	 .cfi_endproc
 1343              	.LFE239:
 1345              	 .align 1
 1346              	 .syntax unified
 1347              	 .thumb
 1348              	 .thumb_func
 1349              	 .fpu softvfp
 1351              	phySetRxState:
 1352              	.LFB240:
 360:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 
 361:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** /*************************************************************************//**
 362:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** *****************************************************************************/
 363:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** static void phySetRxState(void)
 364:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** {
 1353              	 .loc 3 364 0
 1354              	 .cfi_startproc
 1355              	 
 1356              	 
 1357 04fe 80B5     	 push {r7,lr}
 1358              	.LCFI88:
 1359              	 .cfi_def_cfa_offset 8
 1360              	 .cfi_offset 7,-8
 1361              	 .cfi_offset 14,-4
 1362 0500 00AF     	 add r7,sp,#0
 1363              	.LCFI89:
 1364              	 .cfi_def_cfa_register 7
 365:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	phyTrxSetState(TRX_CMD_TRX_OFF);
 1365              	 .loc 3 365 0
 1366 0502 0820     	 movs r0,#8
 1367 0504 00F00EF8 	 bl phyTrxSetState
 366:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 
 367:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	phyReadRegister(IRQ_STATUS_REG);
 1368              	 .loc 3 367 0
 1369 0508 0F20     	 movs r0,#15
 1370 050a FFF7D3FF 	 bl phyReadRegister
 368:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 
 369:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	if (phyRxState) {
 1371              	 .loc 3 369 0
 1372 050e 044B     	 ldr r3,.L67
 1373 0510 1B78     	 ldrb r3,[r3]
 1374 0512 002B     	 cmp r3,#0
 1375 0514 02D0     	 beq .L66
 370:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 		phyTrxSetState(TRX_CMD_RX_AACK_ON);
 1376              	 .loc 3 370 0
 1377 0516 1620     	 movs r0,#22
 1378 0518 00F004F8 	 bl phyTrxSetState
 1379              	.L66:
 371:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	}
 372:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** }
 1380              	 .loc 3 372 0
 1381 051c 00BF     	 nop
 1382 051e 80BD     	 pop {r7,pc}
 1383              	.L68:
 1384              	 .align 2
 1385              	.L67:
 1386 0520 00000000 	 .word phyRxState
 1387              	 .cfi_endproc
 1388              	.LFE240:
 1390              	 .align 1
 1391              	 .syntax unified
 1392              	 .thumb
 1393              	 .thumb_func
 1394              	 .fpu softvfp
 1396              	phyTrxSetState:
 1397              	.LFB241:
 373:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 
 374:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** /*************************************************************************//**
 375:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** *****************************************************************************/
 376:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** static void phyTrxSetState(uint8_t state)
 377:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** {
 1398              	 .loc 3 377 0
 1399              	 .cfi_startproc
 1400              	 
 1401              	 
 1402 0524 90B5     	 push {r4,r7,lr}
 1403              	.LCFI90:
 1404              	 .cfi_def_cfa_offset 12
 1405              	 .cfi_offset 4,-12
 1406              	 .cfi_offset 7,-8
 1407              	 .cfi_offset 14,-4
 1408 0526 85B0     	 sub sp,sp,#20
 1409              	.LCFI91:
 1410              	 .cfi_def_cfa_offset 32
 1411 0528 00AF     	 add r7,sp,#0
 1412              	.LCFI92:
 1413              	 .cfi_def_cfa_register 7
 1414 052a 0346     	 mov r3,r0
 1415 052c FB71     	 strb r3,[r7,#7]
 378:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** #if (ANTENNA_DIVERSITY == 1) || defined(EXT_RF_FRONT_END_CTRL)
 379:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	if(phyState == PHY_STATE_SLEEP)
 1416              	 .loc 3 379 0
 1417 052e 204B     	 ldr r3,.L72
 1418 0530 1B78     	 ldrb r3,[r3]
 1419 0532 022B     	 cmp r3,#2
 1420 0534 1DD1     	 bne .L70
 1421              	.LBB71:
 380:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	{
 381:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 		uint8_t reg;
 382:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 
 383:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	#if (ANTENNA_DIVERSITY == 1)
 384:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 		reg								= phyReadRegister(ANT_DIV_REG);
 385:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 		phyWriteRegister(ANT_DIV_REG, reg | ((1 << ANT_DIV_EN) | (1 << ANT_EXT_SW_EN)));
 386:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	#else
 387:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 		#if (ANTENNA_DEFAULT != 0)
 388:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 			reg							= phyReadRegister(ANT_DIV_REG);
 1422              	 .loc 3 388 0
 1423 0536 0D20     	 movs r0,#13
 1424 0538 FFF7BCFF 	 bl phyReadRegister
 1425 053c 0346     	 mov r3,r0
 1426 053e FB73     	 strb r3,[r7,#15]
 389:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 			phyWriteRegister(ANT_DIV_REG, reg | ((1 << ANT_EXT_SW_EN) | (ANTENNA_DEFAULT << ANT_CTRL)));
 1427              	 .loc 3 389 0
 1428 0540 FB7B     	 ldrb r3,[r7,#15]
 1429 0542 43F00503 	 orr r3,r3,#5
 1430 0546 DBB2     	 uxtb r3,r3
 1431 0548 1946     	 mov r1,r3
 1432 054a 0D20     	 movs r0,#13
 1433 054c FFF79EFF 	 bl phyWriteRegister
 390:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 		#endif // ANTENNA_DEFAULT
 391:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	#endif // ANTENNA_DIVERSITY
 392:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	#ifdef EXT_RF_FRONT_END_CTRL
 393:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 		reg								= phyReadRegister(TRX_CTRL_1_REG);
 1434              	 .loc 3 393 0
 1435 0550 0420     	 movs r0,#4
 1436 0552 FFF7AFFF 	 bl phyReadRegister
 1437 0556 0346     	 mov r3,r0
 1438 0558 FB73     	 strb r3,[r7,#15]
 394:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 		phyWriteRegister(TRX_CTRL_1_REG, reg | (1 << PA_EXT_EN));
 1439              	 .loc 3 394 0
 1440 055a FB7B     	 ldrb r3,[r7,#15]
 1441 055c 63F07F03 	 orn r3,r3,#127
 1442 0560 DBB2     	 uxtb r3,r3
 1443 0562 1946     	 mov r1,r3
 1444 0564 0420     	 movs r0,#4
 1445 0566 FFF791FF 	 bl phyWriteRegister
 395:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 
 396:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 		ioport_set_pin_level(AT86RFX_CSD, IOPORT_PIN_LEVEL_HIGH);
 1446              	 .loc 3 396 0
 1447 056a 0121     	 movs r1,#1
 1448 056c 0B20     	 movs r0,#11
 1449 056e FFF747FD 	 bl ioport_set_pin_level
 1450              	.L70:
 1451              	.LBE71:
 397:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	#endif // EXT_RF_FRONT_END_CTRL
 398:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	}
 399:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** #endif
 400:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 
 401:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	do { phyWriteRegister(TRX_STATE_REG, TRX_CMD_FORCE_TRX_OFF);
 1452              	 .loc 3 401 0 discriminator 1
 1453 0572 0321     	 movs r1,#3
 1454 0574 0220     	 movs r0,#2
 1455 0576 FFF789FF 	 bl phyWriteRegister
 402:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	} while (TRX_STATUS_TRX_OFF !=
 403:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 			(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));
 1456              	 .loc 3 403 0 discriminator 1
 1457 057a 0120     	 movs r0,#1
 1458 057c FFF79AFF 	 bl phyReadRegister
 1459 0580 0346     	 mov r3,r0
 1460 0582 03F01F03 	 and r3,r3,#31
 1461 0586 082B     	 cmp r3,#8
 1462 0588 F3D1     	 bne .L70
 1463              	.L71:
 404:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 
 405:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	do { phyWriteRegister(TRX_STATE_REG,
 1464              	 .loc 3 405 0 discriminator 1
 1465 058a FB79     	 ldrb r3,[r7,#7]
 1466 058c 1946     	 mov r1,r3
 1467 058e 0220     	 movs r0,#2
 1468 0590 FFF77CFF 	 bl phyWriteRegister
 406:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 			     state); } while (state !=
 1469              	 .loc 3 406 0 discriminator 1
 1470 0594 FC79     	 ldrb r4,[r7,#7]
 407:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 			(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));
 1471              	 .loc 3 407 0 discriminator 1
 1472 0596 0120     	 movs r0,#1
 1473 0598 FFF78CFF 	 bl phyReadRegister
 1474 059c 0346     	 mov r3,r0
 1475 059e 03F01F03 	 and r3,r3,#31
 1476 05a2 9C42     	 cmp r4,r3
 1477 05a4 F1D1     	 bne .L71
 408:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** }
 1478              	 .loc 3 408 0
 1479 05a6 00BF     	 nop
 1480 05a8 1437     	 adds r7,r7,#20
 1481              	.LCFI93:
 1482              	 .cfi_def_cfa_offset 12
 1483 05aa BD46     	 mov sp,r7
 1484              	.LCFI94:
 1485              	 .cfi_def_cfa_register 13
 1486              	 
 1487 05ac 90BD     	 pop {r4,r7,pc}
 1488              	.L73:
 1489 05ae 00BF     	 .align 2
 1490              	.L72:
 1491 05b0 00000000 	 .word phyState
 1492              	 .cfi_endproc
 1493              	.LFE241:
 1495              	 .align 1
 1496              	 .global PHY_SetIEEEAddr
 1497              	 .syntax unified
 1498              	 .thumb
 1499              	 .thumb_func
 1500              	 .fpu softvfp
 1502              	PHY_SetIEEEAddr:
 1503              	.LFB242:
 409:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 
 410:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** /*************************************************************************//**
 411:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** *****************************************************************************/
 412:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** void PHY_SetIEEEAddr(uint8_t *ieee_addr)
 413:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** {
 1504              	 .loc 3 413 0
 1505              	 .cfi_startproc
 1506              	 
 1507              	 
 1508 05b4 80B5     	 push {r7,lr}
 1509              	.LCFI95:
 1510              	 .cfi_def_cfa_offset 8
 1511              	 .cfi_offset 7,-8
 1512              	 .cfi_offset 14,-4
 1513 05b6 84B0     	 sub sp,sp,#16
 1514              	.LCFI96:
 1515              	 .cfi_def_cfa_offset 24
 1516 05b8 00AF     	 add r7,sp,#0
 1517              	.LCFI97:
 1518              	 .cfi_def_cfa_register 7
 1519 05ba 7860     	 str r0,[r7,#4]
 414:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	uint8_t *ptr_to_reg = ieee_addr;
 1520              	 .loc 3 414 0
 1521 05bc 7B68     	 ldr r3,[r7,#4]
 1522 05be FB60     	 str r3,[r7,#12]
 1523              	.LBB72:
 415:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	for (uint8_t i = 0; i < 8; i++) {
 1524              	 .loc 3 415 0
 1525 05c0 0023     	 movs r3,#0
 1526 05c2 FB72     	 strb r3,[r7,#11]
 1527 05c4 0EE0     	 b .L75
 1528              	.L76:
 416:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 		trx_reg_write((IEEE_ADDR_0_REG + i), *ptr_to_reg);
 1529              	 .loc 3 416 0 discriminator 3
 1530 05c6 FB7A     	 ldrb r3,[r7,#11]
 1531 05c8 2433     	 adds r3,r3,#36
 1532 05ca DAB2     	 uxtb r2,r3
 1533 05cc FB68     	 ldr r3,[r7,#12]
 1534 05ce 1B78     	 ldrb r3,[r3]
 1535 05d0 1946     	 mov r1,r3
 1536 05d2 1046     	 mov r0,r2
 1537 05d4 074B     	 ldr r3,.L77
 1538 05d6 9847     	 blx r3
 1539              	.LVL9:
 417:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 		ptr_to_reg++;
 1540              	 .loc 3 417 0 discriminator 3
 1541 05d8 FB68     	 ldr r3,[r7,#12]
 1542 05da 0133     	 adds r3,r3,#1
 1543 05dc FB60     	 str r3,[r7,#12]
 415:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	for (uint8_t i = 0; i < 8; i++) {
 1544              	 .loc 3 415 0 discriminator 3
 1545 05de FB7A     	 ldrb r3,[r7,#11]
 1546 05e0 0133     	 adds r3,r3,#1
 1547 05e2 FB72     	 strb r3,[r7,#11]
 1548              	.L75:
 415:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	for (uint8_t i = 0; i < 8; i++) {
 1549              	 .loc 3 415 0 is_stmt 0 discriminator 1
 1550 05e4 FB7A     	 ldrb r3,[r7,#11]
 1551 05e6 072B     	 cmp r3,#7
 1552 05e8 EDD9     	 bls .L76
 1553              	.LBE72:
 418:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	}
 419:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** }
 1554              	 .loc 3 419 0 is_stmt 1
 1555 05ea 00BF     	 nop
 1556 05ec 1037     	 adds r7,r7,#16
 1557              	.LCFI98:
 1558              	 .cfi_def_cfa_offset 8
 1559 05ee BD46     	 mov sp,r7
 1560              	.LCFI99:
 1561              	 .cfi_def_cfa_register 13
 1562              	 
 1563 05f0 80BD     	 pop {r7,pc}
 1564              	.L78:
 1565 05f2 00BF     	 .align 2
 1566              	.L77:
 1567 05f4 00000000 	 .word trx_reg_write
 1568              	 .cfi_endproc
 1569              	.LFE242:
 1571              	 .align 1
 1572              	 .global PHY_TaskHandler
 1573              	 .syntax unified
 1574              	 .thumb
 1575              	 .thumb_func
 1576              	 .fpu softvfp
 1578              	PHY_TaskHandler:
 1579              	.LFB243:
 420:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 
 421:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** /*************************************************************************//**
 422:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** *****************************************************************************/
 423:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** void PHY_TaskHandler(void)
 424:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** {
 1580              	 .loc 3 424 0
 1581              	 .cfi_startproc
 1582              	 
 1583              	 
 1584 05f8 80B5     	 push {r7,lr}
 1585              	.LCFI100:
 1586              	 .cfi_def_cfa_offset 8
 1587              	 .cfi_offset 7,-8
 1588              	 .cfi_offset 14,-4
 1589 05fa 84B0     	 sub sp,sp,#16
 1590              	.LCFI101:
 1591              	 .cfi_def_cfa_offset 24
 1592 05fc 00AF     	 add r7,sp,#0
 1593              	.LCFI102:
 1594              	 .cfi_def_cfa_register 7
 425:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	if (PHY_STATE_SLEEP == phyState) {
 1595              	 .loc 3 425 0
 1596 05fe 364B     	 ldr r3,.L88
 1597 0600 1B78     	 ldrb r3,[r3]
 1598 0602 022B     	 cmp r3,#2
 1599 0604 63D0     	 beq .L87
 426:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 		return;
 427:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	}
 428:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 
 429:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** if (phyReadRegister(IRQ_STATUS_REG) & (1 << TRX_END)) {
 1600              	 .loc 3 429 0
 1601 0606 0F20     	 movs r0,#15
 1602 0608 FFF754FF 	 bl phyReadRegister
 1603 060c 0346     	 mov r3,r0
 1604 060e 03F00803 	 and r3,r3,#8
 1605 0612 002B     	 cmp r3,#0
 1606 0614 5CD0     	 beq .L79
 430:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 		
 431:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	if (PHY_STATE_IDLE == phyState) {
 1607              	 .loc 3 431 0
 1608 0616 304B     	 ldr r3,.L88
 1609 0618 1B78     	 ldrb r3,[r3]
 1610 061a 012B     	 cmp r3,#1
 1611 061c 28D1     	 bne .L82
 1612              	.LBB73:
 432:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 			PHY_DataInd_t ind;
 433:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 			uint8_t size;
 434:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 			int8_t rssi;
 435:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 
 436:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 			rssi = (int8_t)phyReadRegister(PHY_ED_LEVEL_REG);
 1613              	 .loc 3 436 0 discriminator 2
 1614 061e 0720     	 movs r0,#7
 1615 0620 FFF748FF 	 bl phyReadRegister
 1616 0624 0346     	 mov r3,r0
 1617 0626 BB73     	 strb r3,[r7,#14]
 437:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 
 438:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 			trx_frame_read(&size, 1);
 1618              	 .loc 3 438 0 discriminator 2
 1619 0628 FB1C     	 adds r3,r7,#3
 1620 062a 0121     	 movs r1,#1
 1621 062c 1846     	 mov r0,r3
 1622 062e 2B4B     	 ldr r3,.L88+4
 1623 0630 9847     	 blx r3
 1624              	.LVL10:
 439:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 
 440:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 			trx_frame_read(phyRxBuffer, size + 2);
 1625              	 .loc 3 440 0 discriminator 2
 1626 0632 FB78     	 ldrb r3,[r7,#3]
 1627 0634 0233     	 adds r3,r3,#2
 1628 0636 DBB2     	 uxtb r3,r3
 1629 0638 1946     	 mov r1,r3
 1630 063a 2948     	 ldr r0,.L88+8
 1631 063c 274B     	 ldr r3,.L88+4
 1632 063e 9847     	 blx r3
 1633              	.LVL11:
 441:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 
 442:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 			ind.data = phyRxBuffer + 1;
 1634              	 .loc 3 442 0 discriminator 2
 1635 0640 284B     	 ldr r3,.L88+12
 1636 0642 7B60     	 str r3,[r7,#4]
 443:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 
 444:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 			ind.size = size - PHY_CRC_SIZE;
 1637              	 .loc 3 444 0 discriminator 2
 1638 0644 FB78     	 ldrb r3,[r7,#3]
 1639 0646 023B     	 subs r3,r3,#2
 1640 0648 DBB2     	 uxtb r3,r3
 1641 064a 3B72     	 strb r3,[r7,#8]
 445:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 			ind.lqi  = phyRxBuffer[size + 1];
 1642              	 .loc 3 445 0 discriminator 2
 1643 064c FB78     	 ldrb r3,[r7,#3]
 1644 064e 0133     	 adds r3,r3,#1
 1645 0650 234A     	 ldr r2,.L88+8
 1646 0652 D35C     	 ldrb r3,[r2,r3]
 1647 0654 7B72     	 strb r3,[r7,#9]
 446:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 			ind.rssi = rssi + PHY_RSSI_BASE_VAL;
 1648              	 .loc 3 446 0 discriminator 2
 1649 0656 BB7B     	 ldrb r3,[r7,#14]
 1650 0658 5B3B     	 subs r3,r3,#91
 1651 065a DBB2     	 uxtb r3,r3
 1652 065c 5BB2     	 sxtb r3,r3
 1653 065e BB72     	 strb r3,[r7,#10]
 447:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 			PHY_DataInd(&ind);
 1654              	 .loc 3 447 0 discriminator 2
 1655 0660 3B1D     	 adds r3,r7,#4
 1656 0662 1846     	 mov r0,r3
 1657 0664 204B     	 ldr r3,.L88+16
 1658 0666 9847     	 blx r3
 1659              	.LVL12:
 448:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 
 449:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 			phyWaitState(TRX_STATUS_RX_AACK_ON);
 1660              	 .loc 3 449 0 discriminator 2
 1661 0668 1620     	 movs r0,#22
 1662 066a FFF735FF 	 bl phyWaitState
 1663              	.LBE73:
 1664 066e 2FE0     	 b .L79
 1665              	.L82:
 450:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 		} else if (PHY_STATE_TX_WAIT_END == phyState) {
 1666              	 .loc 3 450 0
 1667 0670 194B     	 ldr r3,.L88
 1668 0672 1B78     	 ldrb r3,[r3]
 1669 0674 032B     	 cmp r3,#3
 1670 0676 2BD1     	 bne .L79
 1671              	.LBB74:
 451:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** #if (ANTENNA_DIVERSITY == 1)
 452:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** #endif // ANTENNA_DIVERSITY
 453:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** #ifdef EXT_RF_FRONT_END_CTRL
 454:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 			ioport_set_pin_level(AT86RFX_CSD, IOPORT_PIN_LEVEL_HIGH);
 1672              	 .loc 3 454 0
 1673 0678 0121     	 movs r1,#1
 1674 067a 0B20     	 movs r0,#11
 1675 067c FFF7C0FC 	 bl ioport_set_pin_level
 455:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** #endif // EXT_RF_FRONT_END_CTRL
 456:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 			uint8_t status
 457:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 				= (phyReadRegister(TRX_STATE_REG) >>
 1676              	 .loc 3 457 0
 1677 0680 0220     	 movs r0,#2
 1678 0682 FFF717FF 	 bl phyReadRegister
 1679 0686 0346     	 mov r3,r0
 458:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 					TRAC_STATUS) & 7;
 1680              	 .loc 3 458 0
 1681 0688 5B09     	 lsrs r3,r3,#5
 1682 068a DBB2     	 uxtb r3,r3
 456:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 				= (phyReadRegister(TRX_STATE_REG) >>
 1683              	 .loc 3 456 0
 1684 068c 03F00703 	 and r3,r3,#7
 1685 0690 FB73     	 strb r3,[r7,#15]
 459:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 
 460:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 			if (TRAC_STATUS_SUCCESS == status) {
 1686              	 .loc 3 460 0
 1687 0692 FB7B     	 ldrb r3,[r7,#15]
 1688 0694 002B     	 cmp r3,#0
 1689 0696 02D1     	 bne .L83
 461:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 				status = PHY_STATUS_SUCCESS;
 1690              	 .loc 3 461 0
 1691 0698 0023     	 movs r3,#0
 1692 069a FB73     	 strb r3,[r7,#15]
 1693 069c 0DE0     	 b .L84
 1694              	.L83:
 462:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 			} else if (TRAC_STATUS_CHANNEL_ACCESS_FAILURE ==
 1695              	 .loc 3 462 0
 1696 069e FB7B     	 ldrb r3,[r7,#15]
 1697 06a0 032B     	 cmp r3,#3
 1698 06a2 02D1     	 bne .L85
 463:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 					status) {
 464:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 				status = PHY_STATUS_CHANNEL_ACCESS_FAILURE;
 1699              	 .loc 3 464 0
 1700 06a4 0123     	 movs r3,#1
 1701 06a6 FB73     	 strb r3,[r7,#15]
 1702 06a8 07E0     	 b .L84
 1703              	.L85:
 465:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 			} else if (TRAC_STATUS_NO_ACK == status) {
 1704              	 .loc 3 465 0
 1705 06aa FB7B     	 ldrb r3,[r7,#15]
 1706 06ac 052B     	 cmp r3,#5
 1707 06ae 02D1     	 bne .L86
 466:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 				status = PHY_STATUS_NO_ACK;
 1708              	 .loc 3 466 0
 1709 06b0 0223     	 movs r3,#2
 1710 06b2 FB73     	 strb r3,[r7,#15]
 1711 06b4 01E0     	 b .L84
 1712              	.L86:
 467:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 			} else {
 468:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 				status = PHY_STATUS_ERROR;
 1713              	 .loc 3 468 0
 1714 06b6 0323     	 movs r3,#3
 1715 06b8 FB73     	 strb r3,[r7,#15]
 1716              	.L84:
 469:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 			}
 470:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 
 471:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 			phySetRxState();
 1717              	 .loc 3 471 0
 1718 06ba FFF720FF 	 bl phySetRxState
 472:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 			phyState = PHY_STATE_IDLE;
 1719              	 .loc 3 472 0
 1720 06be 064B     	 ldr r3,.L88
 1721 06c0 0122     	 movs r2,#1
 1722 06c2 1A70     	 strb r2,[r3]
 473:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 		
 474:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 			PHY_DataConf(status);
 1723              	 .loc 3 474 0
 1724 06c4 FB7B     	 ldrb r3,[r7,#15]
 1725 06c6 1846     	 mov r0,r3
 1726 06c8 084B     	 ldr r3,.L88+20
 1727 06ca 9847     	 blx r3
 1728              	.LVL13:
 1729 06cc 00E0     	 b .L79
 1730              	.L87:
 1731              	.LBE74:
 426:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	}
 1732              	 .loc 3 426 0
 1733 06ce 00BF     	 nop
 1734              	.L79:
 475:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 		}
 476:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** 	}
 477:../../../stack/LwMesh/TDMA/phy/AT86RF233/src/phy.c **** }
 1735              	 .loc 3 477 0
 1736 06d0 1037     	 adds r7,r7,#16
 1737              	.LCFI103:
 1738              	 .cfi_def_cfa_offset 8
 1739 06d2 BD46     	 mov sp,r7
 1740              	.LCFI104:
 1741              	 .cfi_def_cfa_register 13
 1742              	 
 1743 06d4 80BD     	 pop {r7,pc}
 1744              	.L89:
 1745 06d6 00BF     	 .align 2
 1746              	.L88:
 1747 06d8 00000000 	 .word phyState
 1748 06dc 00000000 	 .word trx_frame_read
 1749 06e0 00000000 	 .word phyRxBuffer
 1750 06e4 01000000 	 .word phyRxBuffer+1
 1751 06e8 00000000 	 .word PHY_DataInd
 1752 06ec 00000000 	 .word PHY_DataConf
 1753              	 .cfi_endproc
 1754              	.LFE243:
 1756              	.Letext0:
 1757              	 .file 5 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\arm\\arm-gnu-toolchain\\arm-none-eabi\\include\\machine\\_default_types.h"
 1758              	 .file 6 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\arm\\arm-gnu-toolchain\\arm-none-eabi\\include\\sys\\_stdint.h"
 1759              	 .file 7 "../../../stack/LwMesh/TDMA/phy/AT86RF233/inc/phy.h"
 1760              	 .file 8 "../../../platform/sam/utils/cmsis/sam4l/include/sam4lc4b.h"
 1761              	 .file 9 "../../../platform/thirdparty/CMSIS/include/core_cm4.h"
 1762              	 .file 10 "../../../platform/sam/utils/cmsis/sam4l/source/templates/system_sam4l.h"
 1763              	 .file 11 "../../../platform/sam/utils/cmsis/sam4l/include/component/component_gpio.h"
 1764              	 .file 12 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\arm\\arm-gnu-toolchain\\arm-none-eabi\\include\\sys\\lock.h"
 1765              	 .file 13 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\arm\\arm-gnu-toolchain\\arm-none-eabi\\include\\sys\\_types.h"
 1766              	 .file 14 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\arm\\arm-gnu-toolchain\\lib\\gcc\\arm-none-eabi\\6.3.1\\include\\stddef.h"
 1767              	 .file 15 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\arm\\arm-gnu-toolchain\\arm-none-eabi\\include\\sys\\reent.h"
 1768              	 .file 16 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\arm\\arm-gnu-toolchain\\arm-none-eabi\\include\\stdlib.h"
 1769              	 .file 17 "../../../platform/common/utils/interrupt/interrupt_sam_nvic.h"
 1770              	 .file 18 "../../../platform/sam/utils/compiler.h"
 1771              	 .file 19 "../../../platform/common/services/usb/usb_protocol.h"
 1772              	 .file 20 "../../../platform/common/services/usb/udc/udi.h"
 1773              	 .file 21 "../../../platform/common/services/usb/udc/udc_desc.h"
 1774              	 .file 22 "../../../platform/common/services/usb/udc/udd.h"
 1775              	 .file 23 "../../../platform/common/services/usb/class/cdc/device/udi_cdc.h"
 1776              	 .file 24 "../../../platform/common/utils/stdio/stdio_usb/stdio_usb.h"
 1777              	 .file 25 "config/config.h"
 1778              	 .file 26 "../../../stack/LwMesh/TDMA/services/trx_access/trx_access.h"
 1779              	 .file 27 "../../../stack/LwMesh/TDMA/services/sal/inc/sal.h"
 1780              	 .file 28 "../../../platform/common/services/delay/sam/cycle_counter.h"
DEFINED SYMBOLS
                            *ABS*:00000000 phy.c
    {standard input}:16     .bss.cpu_irq_critical_section_counter:00000000 $d
    {standard input}:19     .bss.cpu_irq_critical_section_counter:00000000 cpu_irq_critical_section_counter
    {standard input}:24     .bss.cpu_irq_prev_interrupt_state:00000000 cpu_irq_prev_interrupt_state
    {standard input}:25     .bss.cpu_irq_prev_interrupt_state:00000000 $d
                            *COM*:00000001 n
    {standard input}:28     .bss.tTS:00000000 $d
    {standard input}:31     .bss.tTS:00000000 tTS
    {standard input}:34     .text:00000000 $t
    {standard input}:40     .text:00000000 ioport_set_pin_level
    {standard input}:182    .bss.phyState:00000000 phyState
    {standard input}:183    .bss.phyState:00000000 $d
    {standard input}:185    .bss.phyRxBuffer:00000000 $d
    {standard input}:188    .bss.phyRxBuffer:00000000 phyRxBuffer
    {standard input}:193    .bss.phyRxState:00000000 phyRxState
    {standard input}:194    .bss.phyRxState:00000000 $d
    {standard input}:203    .text:00000086 PHY_Init
    {standard input}:1196   .text:0000048c phyWriteRegister
    {standard input}:1249   .text:000004b4 phyReadRegister
    {standard input}:290    .text:000000fc $d
    {standard input}:297    .text:0000010c $t
    {standard input}:304    .text:0000010c PHY_SetPromiscuousMode
    {standard input}:604    .text:0000022c PHY_SetShortAddr
    {standard input}:549    .text:000001fc PHY_SetPanId
    {standard input}:1502   .text:000005b4 PHY_SetIEEEAddr
    {standard input}:371    .text:00000154 PHY_SetTdmaMode
    {standard input}:447    .text:000001aa PHY_SetRxState
    {standard input}:1351   .text:000004fe phySetRxState
    {standard input}:485    .text:000001c8 $d
    {standard input}:489    .text:000001cc $t
    {standard input}:496    .text:000001cc PHY_SetChannel
    {standard input}:670    .text:00000272 PHY_SetTxPower
    {standard input}:723    .text:000002a2 PHY_Sleep
    {standard input}:1396   .text:00000524 phyTrxSetState
    {standard input}:798    .text:00000308 $d
    {standard input}:802    .text:0000030c $t
    {standard input}:809    .text:0000030c PHY_Wakeup
    {standard input}:839    .text:00000328 $d
    {standard input}:843    .text:0000032c $t
    {standard input}:850    .text:0000032c PHY_DataReq
    {standard input}:967    .text:000003a8 $d
    {standard input}:972    .text:000003b0 $t
    {standard input}:979    .text:000003b0 PHY_RandomReq
    {standard input}:1057   .text:0000040c $d
    {standard input}:1061   .text:00000410 $t
    {standard input}:1068   .text:00000410 PHY_EncryptReq
    {standard input}:1118   .text:0000043c $d
    {standard input}:1124   .text:00000448 $t
    {standard input}:1131   .text:00000448 PHY_EdReq
    {standard input}:1239   .text:000004b0 $d
    {standard input}:1243   .text:000004b4 $t
    {standard input}:1291   .text:000004d4 $d
    {standard input}:1295   .text:000004d8 $t
    {standard input}:1301   .text:000004d8 phyWaitState
    {standard input}:1386   .text:00000520 $d
    {standard input}:1390   .text:00000524 $t
    {standard input}:1491   .text:000005b0 $d
    {standard input}:1495   .text:000005b4 $t
    {standard input}:1567   .text:000005f4 $d
    {standard input}:1571   .text:000005f8 $t
    {standard input}:1578   .text:000005f8 PHY_TaskHandler
    {standard input}:1747   .text:000006d8 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
trx_spi_init
PhyReset
trx_frame_write
portable_delay_cycles
sal_aes_setup
sal_aes_wrrd
sal_aes_read
trx_reg_write
trx_reg_read
trx_frame_read
PHY_DataInd
PHY_DataConf
