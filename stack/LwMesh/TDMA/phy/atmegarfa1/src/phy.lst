   1               		.file	"phy.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__RAMPZ__ = 0x3b
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
   8               		.text
   9               	.Ltext0:
  10               		.cfi_sections	.debug_frame
  12               	sysclk_enable_peripheral_clock:
  13               	.LFB69:
  14               		.file 1 "../../../platform/common/services/clock/mega/sysclk.h"
   1:../../../platform/common/services/clock/mega/sysclk.h **** /**
   2:../../../platform/common/services/clock/mega/sysclk.h ****  * \file
   3:../../../platform/common/services/clock/mega/sysclk.h ****  *
   4:../../../platform/common/services/clock/mega/sysclk.h ****  * \brief Chip-specific system clock management functions
   5:../../../platform/common/services/clock/mega/sysclk.h ****  *
   6:../../../platform/common/services/clock/mega/sysclk.h ****  * Copyright (c) 2012 Atmel Corporation. All rights reserved.
   7:../../../platform/common/services/clock/mega/sysclk.h ****  *
   8:../../../platform/common/services/clock/mega/sysclk.h ****  * \asf_license_start
   9:../../../platform/common/services/clock/mega/sysclk.h ****  *
  10:../../../platform/common/services/clock/mega/sysclk.h ****  * \page License
  11:../../../platform/common/services/clock/mega/sysclk.h ****  *
  12:../../../platform/common/services/clock/mega/sysclk.h ****  * Redistribution and use in source and binary forms, with or without
  13:../../../platform/common/services/clock/mega/sysclk.h ****  * modification, are permitted provided that the following conditions are met:
  14:../../../platform/common/services/clock/mega/sysclk.h ****  *
  15:../../../platform/common/services/clock/mega/sysclk.h ****  * 1. Redistributions of source code must retain the above copyright notice,
  16:../../../platform/common/services/clock/mega/sysclk.h ****  *    this list of conditions and the following disclaimer.
  17:../../../platform/common/services/clock/mega/sysclk.h ****  *
  18:../../../platform/common/services/clock/mega/sysclk.h ****  * 2. Redistributions in binary form must reproduce the above copyright notice,
  19:../../../platform/common/services/clock/mega/sysclk.h ****  *    this list of conditions and the following disclaimer in the documentation
  20:../../../platform/common/services/clock/mega/sysclk.h ****  *    and/or other materials provided with the distribution.
  21:../../../platform/common/services/clock/mega/sysclk.h ****  *
  22:../../../platform/common/services/clock/mega/sysclk.h ****  * 3. The name of Atmel may not be used to endorse or promote products derived
  23:../../../platform/common/services/clock/mega/sysclk.h ****  *    from this software without specific prior written permission.
  24:../../../platform/common/services/clock/mega/sysclk.h ****  *
  25:../../../platform/common/services/clock/mega/sysclk.h ****  * 4. This software may only be redistributed and used in connection with an
  26:../../../platform/common/services/clock/mega/sysclk.h ****  *    Atmel microcontroller product.
  27:../../../platform/common/services/clock/mega/sysclk.h ****  *
  28:../../../platform/common/services/clock/mega/sysclk.h ****  * THIS SOFTWARE IS PROVIDED BY ATMEL "AS IS" AND ANY EXPRESS OR IMPLIED
  29:../../../platform/common/services/clock/mega/sysclk.h ****  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
  30:../../../platform/common/services/clock/mega/sysclk.h ****  * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE
  31:../../../platform/common/services/clock/mega/sysclk.h ****  * EXPRESSLY AND SPECIFICALLY DISCLAIMED. IN NO EVENT SHALL ATMEL BE LIABLE FOR
  32:../../../platform/common/services/clock/mega/sysclk.h ****  * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  33:../../../platform/common/services/clock/mega/sysclk.h ****  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
  34:../../../platform/common/services/clock/mega/sysclk.h ****  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
  35:../../../platform/common/services/clock/mega/sysclk.h ****  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
  36:../../../platform/common/services/clock/mega/sysclk.h ****  * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
  37:../../../platform/common/services/clock/mega/sysclk.h ****  * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  38:../../../platform/common/services/clock/mega/sysclk.h ****  * POSSIBILITY OF SUCH DAMAGE.
  39:../../../platform/common/services/clock/mega/sysclk.h ****  *
  40:../../../platform/common/services/clock/mega/sysclk.h ****  * \asf_license_stop
  41:../../../platform/common/services/clock/mega/sysclk.h ****  *
  42:../../../platform/common/services/clock/mega/sysclk.h ****  */
  43:../../../platform/common/services/clock/mega/sysclk.h **** #ifndef MEGA_SYSCLK_H_INCLUDED
  44:../../../platform/common/services/clock/mega/sysclk.h **** #define MEGA_SYSCLK_H_INCLUDED
  45:../../../platform/common/services/clock/mega/sysclk.h **** 
  46:../../../platform/common/services/clock/mega/sysclk.h **** #include <board.h>
  47:../../../platform/common/services/clock/mega/sysclk.h **** #include <compiler.h>
  48:../../../platform/common/services/clock/mega/sysclk.h **** #include <parts.h>
  49:../../../platform/common/services/clock/mega/sysclk.h **** 
  50:../../../platform/common/services/clock/mega/sysclk.h **** /* Include clock configuration for the project. */
  51:../../../platform/common/services/clock/mega/sysclk.h **** #include <conf_clock.h>
  52:../../../platform/common/services/clock/mega/sysclk.h **** 
  53:../../../platform/common/services/clock/mega/sysclk.h **** #ifdef __cplusplus
  54:../../../platform/common/services/clock/mega/sysclk.h **** extern "C" {
  55:../../../platform/common/services/clock/mega/sysclk.h **** #endif
  56:../../../platform/common/services/clock/mega/sysclk.h **** #define ASM __asm__
  57:../../../platform/common/services/clock/mega/sysclk.h **** 
  58:../../../platform/common/services/clock/mega/sysclk.h **** /* CONFIG_SYSCLK_PSDIV  to use default if not defined*/
  59:../../../platform/common/services/clock/mega/sysclk.h **** #ifndef CONFIG_SYSCLK_PSDIV
  60:../../../platform/common/services/clock/mega/sysclk.h **** # define CONFIG_SYSCLK_PSDIV    SYSCLK_PSDIV_8
  61:../../../platform/common/services/clock/mega/sysclk.h **** #endif
  62:../../../platform/common/services/clock/mega/sysclk.h **** 
  63:../../../platform/common/services/clock/mega/sysclk.h **** /* ! \name Prescaler Setting (relative to CLKsys) */
  64:../../../platform/common/services/clock/mega/sysclk.h **** /* @{ */
  65:../../../platform/common/services/clock/mega/sysclk.h **** #define SYSCLK_PSDIV_1      0   /* !< Do not prescale */
  66:../../../platform/common/services/clock/mega/sysclk.h **** #define SYSCLK_PSDIV_2      1   /* !< Prescale CLKper4 by 2 */
  67:../../../platform/common/services/clock/mega/sysclk.h **** #define SYSCLK_PSDIV_4      2   /* !< Prescale CLKper4 by 4 */
  68:../../../platform/common/services/clock/mega/sysclk.h **** #define SYSCLK_PSDIV_8      3   /* !< Prescale CLKper4 by 8 */
  69:../../../platform/common/services/clock/mega/sysclk.h **** #define SYSCLK_PSDIV_16     4   /* !< Prescale CLKper4 by 16 */
  70:../../../platform/common/services/clock/mega/sysclk.h **** #define SYSCLK_PSDIV_32     5   /* !< Prescale CLKper4 by 32 */
  71:../../../platform/common/services/clock/mega/sysclk.h **** #define SYSCLK_PSDIV_64     6   /* !< Prescale CLKper4 by 64 */
  72:../../../platform/common/services/clock/mega/sysclk.h **** #define SYSCLK_PSDIV_128    7   /* !< Prescale CLKper4 by 128 */
  73:../../../platform/common/services/clock/mega/sysclk.h **** #define SYSCLK_PSDIV_256    8   /* !< Prescale CLKper4 by 256 */
  74:../../../platform/common/services/clock/mega/sysclk.h **** 
  75:../../../platform/common/services/clock/mega/sysclk.h **** /* @} */
  76:../../../platform/common/services/clock/mega/sysclk.h **** 
  77:../../../platform/common/services/clock/mega/sysclk.h **** #if MEGA_RF || MEGA_XX0_1 || MEGA_XX4 || MEGA_XX4_A
  78:../../../platform/common/services/clock/mega/sysclk.h **** 
  79:../../../platform/common/services/clock/mega/sysclk.h **** #define NUMBER_OF_POWER_REG       2
  80:../../../platform/common/services/clock/mega/sysclk.h **** /*Starting Address for power reduction*/
  81:../../../platform/common/services/clock/mega/sysclk.h **** #define POWER_REG_ADD             PRR0
  82:../../../platform/common/services/clock/mega/sysclk.h **** 
  83:../../../platform/common/services/clock/mega/sysclk.h **** /* ! \name Power Reduction  Clock Port Numbers */
  84:../../../platform/common/services/clock/mega/sysclk.h **** enum power_red_id {
  85:../../../platform/common/services/clock/mega/sysclk.h **** 	POWER_RED_REG0,     /* !< Devices on PRR0 */
  86:../../../platform/common/services/clock/mega/sysclk.h **** #if !MEGA_XX4 || !MEGA_XX4_A || MEGA_XX0_1
  87:../../../platform/common/services/clock/mega/sysclk.h **** 	POWER_RED_REG1,     /* !< Devices on PRR1 */
  88:../../../platform/common/services/clock/mega/sysclk.h **** #endif
  89:../../../platform/common/services/clock/mega/sysclk.h **** };
  90:../../../platform/common/services/clock/mega/sysclk.h **** #endif
  91:../../../platform/common/services/clock/mega/sysclk.h **** 
  92:../../../platform/common/services/clock/mega/sysclk.h **** /****************************************************
  93:../../../platform/common/services/clock/mega/sysclk.h ****  * Given a dummy type but not used for these groups
  94:../../../platform/common/services/clock/mega/sysclk.h ****  * to support for otherthen megaRF device.
  95:../../../platform/common/services/clock/mega/sysclk.h ****  **************************************************/
  96:../../../platform/common/services/clock/mega/sysclk.h **** #if MEGA_XX8 || MEGA_XX8_A || MEGA_UNSPECIFIED
  97:../../../platform/common/services/clock/mega/sysclk.h **** #define NUMBER_OF_POWER_REG       1
  98:../../../platform/common/services/clock/mega/sysclk.h **** /*Starting Address for power reduction*/
  99:../../../platform/common/services/clock/mega/sysclk.h **** #define POWER_REG_ADD             PRR
 100:../../../platform/common/services/clock/mega/sysclk.h **** 
 101:../../../platform/common/services/clock/mega/sysclk.h **** /* ! \name Power Reduction  Clock Port Numbers */
 102:../../../platform/common/services/clock/mega/sysclk.h **** enum power_red_id {
 103:../../../platform/common/services/clock/mega/sysclk.h **** 	POWER_RED_REG0,     /* !< Devices on PRR */
 104:../../../platform/common/services/clock/mega/sysclk.h **** };
 105:../../../platform/common/services/clock/mega/sysclk.h **** #endif
 106:../../../platform/common/services/clock/mega/sysclk.h **** 
 107:../../../platform/common/services/clock/mega/sysclk.h **** /* Bit mask for the power reduction register based on */
 108:../../../platform/common/services/clock/mega/sysclk.h **** /*   MCU ARCH.                                        */
 109:../../../platform/common/services/clock/mega/sysclk.h **** #if MEGA_RF
 110:../../../platform/common/services/clock/mega/sysclk.h **** /*Bit mask for PRR2 */
 111:../../../platform/common/services/clock/mega/sysclk.h **** 
 112:../../../platform/common/services/clock/mega/sysclk.h **** #define PRRAM0_bm                       1 << PRRAM0
 113:../../../platform/common/services/clock/mega/sysclk.h **** #define PRRAM1_bm                       1 << PRRAM1
 114:../../../platform/common/services/clock/mega/sysclk.h **** #define PRRAM2_bm                       1 << PRRAM2
 115:../../../platform/common/services/clock/mega/sysclk.h **** #define PRRAM3_bm                       1 << PRRAM3
 116:../../../platform/common/services/clock/mega/sysclk.h **** #endif
 117:../../../platform/common/services/clock/mega/sysclk.h **** 
 118:../../../platform/common/services/clock/mega/sysclk.h **** /*Bit mask for the power reduction 0 or PRR*/
 119:../../../platform/common/services/clock/mega/sysclk.h **** #if !MEGA_XX_UN0 && !MEGA_XX_UN0
 120:../../../platform/common/services/clock/mega/sysclk.h **** #define PRADC_bm                        1 << PRADC
 121:../../../platform/common/services/clock/mega/sysclk.h **** #define PRUSART0_bm                     1 << PRUSART0
 122:../../../platform/common/services/clock/mega/sysclk.h **** #define PRSPI_bm                        1 << PRSPI
 123:../../../platform/common/services/clock/mega/sysclk.h **** #define PRTIM1_bm                       1 << PRTIM1
 124:../../../platform/common/services/clock/mega/sysclk.h **** #endif
 125:../../../platform/common/services/clock/mega/sysclk.h **** 
 126:../../../platform/common/services/clock/mega/sysclk.h **** #if MEGA_RF
 127:../../../platform/common/services/clock/mega/sysclk.h **** #define PRPGA_bm                        1 << PRPGA
 128:../../../platform/common/services/clock/mega/sysclk.h **** #endif
 129:../../../platform/common/services/clock/mega/sysclk.h **** 
 130:../../../platform/common/services/clock/mega/sysclk.h **** #if !MEGA_UNSPECIFIED
 131:../../../platform/common/services/clock/mega/sysclk.h **** #define PRTIM0_bm                       1 << PRTIM0
 132:../../../platform/common/services/clock/mega/sysclk.h **** #define PRTIM2_bm                       1 << PRTIM2
 133:../../../platform/common/services/clock/mega/sysclk.h **** #define PRTWI_bm                        1 << PRTWI
 134:../../../platform/common/services/clock/mega/sysclk.h **** #endif
 135:../../../platform/common/services/clock/mega/sysclk.h **** 
 136:../../../platform/common/services/clock/mega/sysclk.h **** #if MEGA_XX_UN2
 137:../../../platform/common/services/clock/mega/sysclk.h **** #define PRLCD_bm                        1 << PRLCD
 138:../../../platform/common/services/clock/mega/sysclk.h **** #endif
 139:../../../platform/common/services/clock/mega/sysclk.h **** 
 140:../../../platform/common/services/clock/mega/sysclk.h **** /*Bit mask for  PRR1  */
 141:../../../platform/common/services/clock/mega/sysclk.h **** #ifdef PRR1
 142:../../../platform/common/services/clock/mega/sysclk.h **** #if (MEGA_XX4 || MEGA_XX4_A)
 143:../../../platform/common/services/clock/mega/sysclk.h **** #define PRTIM3_bm                       1 << PRTIM3
 144:../../../platform/common/services/clock/mega/sysclk.h **** #endif
 145:../../../platform/common/services/clock/mega/sysclk.h **** #endif
 146:../../../platform/common/services/clock/mega/sysclk.h **** 
 147:../../../platform/common/services/clock/mega/sysclk.h **** #if MEGA_RF || MEGA_XX4 || MEGA_XX4_A
 148:../../../platform/common/services/clock/mega/sysclk.h **** #define PRUSART1_bm                     1 << PRUSART1
 149:../../../platform/common/services/clock/mega/sysclk.h **** #define PRUSART2_bm                     1 << PRUSART2
 150:../../../platform/common/services/clock/mega/sysclk.h **** #define PRUSART3_bm                     1 << PRUSART3
 151:../../../platform/common/services/clock/mega/sysclk.h **** #define PRTIM3_bm                       1 << PRTIM3
 152:../../../platform/common/services/clock/mega/sysclk.h **** #define PRTIM4_bm                       1 << PRTIM4
 153:../../../platform/common/services/clock/mega/sysclk.h **** #define PRTIM5_bm                       1 << PRTIM5
 154:../../../platform/common/services/clock/mega/sysclk.h **** #endif
 155:../../../platform/common/services/clock/mega/sysclk.h **** 
 156:../../../platform/common/services/clock/mega/sysclk.h **** #if MEGA_RF
 157:../../../platform/common/services/clock/mega/sysclk.h **** #define PRTRX24_bm                      1 << PRTRX24
 158:../../../platform/common/services/clock/mega/sysclk.h **** #endif
 159:../../../platform/common/services/clock/mega/sysclk.h **** 
 160:../../../platform/common/services/clock/mega/sysclk.h **** /**
 161:../../../platform/common/services/clock/mega/sysclk.h ****  * \name Querying the system clock and its derived clocks
 162:../../../platform/common/services/clock/mega/sysclk.h ****  */
 163:../../../platform/common/services/clock/mega/sysclk.h **** /* @{ */
 164:../../../platform/common/services/clock/mega/sysclk.h **** 
 165:../../../platform/common/services/clock/mega/sysclk.h **** /**
 166:../../../platform/common/services/clock/mega/sysclk.h ****  * \brief Return the current rate in Hz of the main system clock
 167:../../../platform/common/services/clock/mega/sysclk.h ****  * To know the clock value at what frequency the main clock is running
 168:../../../platform/common/services/clock/mega/sysclk.h ****  * \return Frequency of the main system clock, in Hz.
 169:../../../platform/common/services/clock/mega/sysclk.h ****  * \todo : please initialize the SYSCLK_SOURCE in conf_clock.h file for
 170:../../../platform/common/services/clock/mega/sysclk.h ****  * configured source clock using fuses.
 171:../../../platform/common/services/clock/mega/sysclk.h ****  * \eg. #define SYSCLK_SOURCE SYSCLK_SRC_RC16MHZ to use internal RC
 172:../../../platform/common/services/clock/mega/sysclk.h ****  * oscillator for clock source.
 173:../../../platform/common/services/clock/mega/sysclk.h ****  */
 174:../../../platform/common/services/clock/mega/sysclk.h **** static inline uint32_t sysclk_get_main_hz(void)
 175:../../../platform/common/services/clock/mega/sysclk.h **** {
 176:../../../platform/common/services/clock/mega/sysclk.h **** 	switch (SYSCLK_SOURCE) {
 177:../../../platform/common/services/clock/mega/sysclk.h **** 	case SYSCLK_SRC_RC16MHZ:
 178:../../../platform/common/services/clock/mega/sysclk.h **** 		return 16000000UL;
 179:../../../platform/common/services/clock/mega/sysclk.h **** 
 180:../../../platform/common/services/clock/mega/sysclk.h **** 	case SYSCLK_SRC_RC128KHZ:
 181:../../../platform/common/services/clock/mega/sysclk.h **** 		return 128000UL;
 182:../../../platform/common/services/clock/mega/sysclk.h **** 
 183:../../../platform/common/services/clock/mega/sysclk.h **** #if MEGA_RF
 184:../../../platform/common/services/clock/mega/sysclk.h **** 	case SYSCLK_SRC_TRS16MHZ:
 185:../../../platform/common/services/clock/mega/sysclk.h **** 		return 16000000UL;
 186:../../../platform/common/services/clock/mega/sysclk.h **** #endif
 187:../../../platform/common/services/clock/mega/sysclk.h **** #ifdef BOARD_EXTERNAL_CLK
 188:../../../platform/common/services/clock/mega/sysclk.h **** 	case SYSCLK_SRC_EXTERNAL:
 189:../../../platform/common/services/clock/mega/sysclk.h **** 		return BOARD_EXTERNAL_CLK;
 190:../../../platform/common/services/clock/mega/sysclk.h **** #endif
 191:../../../platform/common/services/clock/mega/sysclk.h **** 	default:
 192:../../../platform/common/services/clock/mega/sysclk.h **** 
 193:../../../platform/common/services/clock/mega/sysclk.h **** 		return 1000000UL;
 194:../../../platform/common/services/clock/mega/sysclk.h **** 	}
 195:../../../platform/common/services/clock/mega/sysclk.h **** }
 196:../../../platform/common/services/clock/mega/sysclk.h **** 
 197:../../../platform/common/services/clock/mega/sysclk.h **** /**
 198:../../../platform/common/services/clock/mega/sysclk.h ****  * \brief Return the current rate in Hz of source clock in Hz.
 199:../../../platform/common/services/clock/mega/sysclk.h ****  *
 200:../../../platform/common/services/clock/mega/sysclk.h ****  * This clock always runs at the same rate as the CPU clock unless the divider
 201:../../../platform/common/services/clock/mega/sysclk.h ****  * is set.
 202:../../../platform/common/services/clock/mega/sysclk.h ****  *
 203:../../../platform/common/services/clock/mega/sysclk.h ****  * \return Frequency of the system clock, in Hz.
 204:../../../platform/common/services/clock/mega/sysclk.h ****  */
 205:../../../platform/common/services/clock/mega/sysclk.h **** static inline uint32_t sysclk_get_source_clock_hz(void)
 206:../../../platform/common/services/clock/mega/sysclk.h **** {
 207:../../../platform/common/services/clock/mega/sysclk.h **** 	switch (CONFIG_SYSCLK_PSDIV) {
 208:../../../platform/common/services/clock/mega/sysclk.h **** 	case SYSCLK_PSDIV_1: /* Fall through */
 209:../../../platform/common/services/clock/mega/sysclk.h **** 		if (SYSCLK_SOURCE == SYSCLK_SRC_RC16MHZ ||
 210:../../../platform/common/services/clock/mega/sysclk.h **** 				SYSCLK_SOURCE == SYSCLK_SRC_RC128KHZ) {
 211:../../../platform/common/services/clock/mega/sysclk.h **** 			return sysclk_get_main_hz() / 2;
 212:../../../platform/common/services/clock/mega/sysclk.h **** 		} else {
 213:../../../platform/common/services/clock/mega/sysclk.h **** 			return sysclk_get_main_hz();
 214:../../../platform/common/services/clock/mega/sysclk.h **** 		}
 215:../../../platform/common/services/clock/mega/sysclk.h **** 
 216:../../../platform/common/services/clock/mega/sysclk.h **** 	case SYSCLK_PSDIV_2:
 217:../../../platform/common/services/clock/mega/sysclk.h **** 		if (SYSCLK_SOURCE == SYSCLK_SRC_RC16MHZ ||
 218:../../../platform/common/services/clock/mega/sysclk.h **** 				SYSCLK_SOURCE == SYSCLK_SRC_RC128KHZ) {
 219:../../../platform/common/services/clock/mega/sysclk.h **** 			return sysclk_get_main_hz() / 4;
 220:../../../platform/common/services/clock/mega/sysclk.h **** 		} else {
 221:../../../platform/common/services/clock/mega/sysclk.h **** 			return sysclk_get_main_hz() / 2;
 222:../../../platform/common/services/clock/mega/sysclk.h **** 		}
 223:../../../platform/common/services/clock/mega/sysclk.h **** 
 224:../../../platform/common/services/clock/mega/sysclk.h **** 	case SYSCLK_PSDIV_4:
 225:../../../platform/common/services/clock/mega/sysclk.h **** 		if (SYSCLK_SOURCE == SYSCLK_SRC_RC16MHZ ||
 226:../../../platform/common/services/clock/mega/sysclk.h **** 				SYSCLK_SOURCE == SYSCLK_SRC_RC128KHZ) {
 227:../../../platform/common/services/clock/mega/sysclk.h **** 			return sysclk_get_main_hz() / 8;
 228:../../../platform/common/services/clock/mega/sysclk.h **** 		} else {
 229:../../../platform/common/services/clock/mega/sysclk.h **** 			return sysclk_get_main_hz() / 4;
 230:../../../platform/common/services/clock/mega/sysclk.h **** 		}
 231:../../../platform/common/services/clock/mega/sysclk.h **** 
 232:../../../platform/common/services/clock/mega/sysclk.h **** 	case SYSCLK_PSDIV_8:
 233:../../../platform/common/services/clock/mega/sysclk.h **** 		if (SYSCLK_SOURCE == SYSCLK_SRC_RC16MHZ ||
 234:../../../platform/common/services/clock/mega/sysclk.h **** 				SYSCLK_SOURCE == SYSCLK_SRC_RC128KHZ) {
 235:../../../platform/common/services/clock/mega/sysclk.h **** 			return sysclk_get_main_hz() / 16;
 236:../../../platform/common/services/clock/mega/sysclk.h **** 		} else {
 237:../../../platform/common/services/clock/mega/sysclk.h **** 			return sysclk_get_main_hz() / 8;
 238:../../../platform/common/services/clock/mega/sysclk.h **** 		}
 239:../../../platform/common/services/clock/mega/sysclk.h **** 
 240:../../../platform/common/services/clock/mega/sysclk.h **** 	case SYSCLK_PSDIV_16:
 241:../../../platform/common/services/clock/mega/sysclk.h **** 		if (SYSCLK_SOURCE == SYSCLK_SRC_RC16MHZ ||
 242:../../../platform/common/services/clock/mega/sysclk.h **** 				SYSCLK_SOURCE == SYSCLK_SRC_RC128KHZ) {
 243:../../../platform/common/services/clock/mega/sysclk.h **** 			return sysclk_get_main_hz() / 32;
 244:../../../platform/common/services/clock/mega/sysclk.h **** 		} else {
 245:../../../platform/common/services/clock/mega/sysclk.h **** 			return sysclk_get_main_hz() / 16;
 246:../../../platform/common/services/clock/mega/sysclk.h **** 		}
 247:../../../platform/common/services/clock/mega/sysclk.h **** 
 248:../../../platform/common/services/clock/mega/sysclk.h **** 	case SYSCLK_PSDIV_32:
 249:../../../platform/common/services/clock/mega/sysclk.h **** 		if (SYSCLK_SOURCE == SYSCLK_SRC_RC16MHZ ||
 250:../../../platform/common/services/clock/mega/sysclk.h **** 				SYSCLK_SOURCE == SYSCLK_SRC_RC128KHZ) {
 251:../../../platform/common/services/clock/mega/sysclk.h **** 			return sysclk_get_main_hz() / 64;
 252:../../../platform/common/services/clock/mega/sysclk.h **** 		} else {
 253:../../../platform/common/services/clock/mega/sysclk.h **** 			return sysclk_get_main_hz() / 32;
 254:../../../platform/common/services/clock/mega/sysclk.h **** 		}
 255:../../../platform/common/services/clock/mega/sysclk.h **** 
 256:../../../platform/common/services/clock/mega/sysclk.h **** 	case SYSCLK_PSDIV_64:
 257:../../../platform/common/services/clock/mega/sysclk.h **** 		if (SYSCLK_SOURCE == SYSCLK_SRC_RC16MHZ ||
 258:../../../platform/common/services/clock/mega/sysclk.h **** 				SYSCLK_SOURCE == SYSCLK_SRC_RC128KHZ) {
 259:../../../platform/common/services/clock/mega/sysclk.h **** 			return sysclk_get_main_hz() / 128;
 260:../../../platform/common/services/clock/mega/sysclk.h **** 		} else {
 261:../../../platform/common/services/clock/mega/sysclk.h **** 			return sysclk_get_main_hz() / 64;
 262:../../../platform/common/services/clock/mega/sysclk.h **** 		}
 263:../../../platform/common/services/clock/mega/sysclk.h **** 
 264:../../../platform/common/services/clock/mega/sysclk.h **** 	case SYSCLK_PSDIV_128:
 265:../../../platform/common/services/clock/mega/sysclk.h **** 		if (SYSCLK_SOURCE == SYSCLK_SRC_RC16MHZ ||
 266:../../../platform/common/services/clock/mega/sysclk.h **** 				SYSCLK_SOURCE == SYSCLK_SRC_RC128KHZ) {
 267:../../../platform/common/services/clock/mega/sysclk.h **** 			return sysclk_get_main_hz() / 256;
 268:../../../platform/common/services/clock/mega/sysclk.h **** 		} else {
 269:../../../platform/common/services/clock/mega/sysclk.h **** 			return sysclk_get_main_hz() / 128;
 270:../../../platform/common/services/clock/mega/sysclk.h **** 		}
 271:../../../platform/common/services/clock/mega/sysclk.h **** 
 272:../../../platform/common/services/clock/mega/sysclk.h **** 	case SYSCLK_PSDIV_256:
 273:../../../platform/common/services/clock/mega/sysclk.h **** 		if (SYSCLK_SOURCE == SYSCLK_SRC_RC16MHZ ||
 274:../../../platform/common/services/clock/mega/sysclk.h **** 				SYSCLK_SOURCE == SYSCLK_SRC_RC128KHZ) {
 275:../../../platform/common/services/clock/mega/sysclk.h **** 			return sysclk_get_main_hz() / 512;
 276:../../../platform/common/services/clock/mega/sysclk.h **** 		} else {
 277:../../../platform/common/services/clock/mega/sysclk.h **** 			return sysclk_get_main_hz() / 256;
 278:../../../platform/common/services/clock/mega/sysclk.h **** 		}
 279:../../../platform/common/services/clock/mega/sysclk.h **** 
 280:../../../platform/common/services/clock/mega/sysclk.h **** 	default:
 281:../../../platform/common/services/clock/mega/sysclk.h **** 		/*Invalide case*/
 282:../../../platform/common/services/clock/mega/sysclk.h **** 		return 0;
 283:../../../platform/common/services/clock/mega/sysclk.h **** 	}
 284:../../../platform/common/services/clock/mega/sysclk.h **** }
 285:../../../platform/common/services/clock/mega/sysclk.h **** 
 286:../../../platform/common/services/clock/mega/sysclk.h **** /**
 287:../../../platform/common/services/clock/mega/sysclk.h ****  * \brief Return the current rate in Hz of the CPU clock.
 288:../../../platform/common/services/clock/mega/sysclk.h ****  *
 289:../../../platform/common/services/clock/mega/sysclk.h ****  * \return Frequency of the CPU clock, in Hz.
 290:../../../platform/common/services/clock/mega/sysclk.h ****  */
 291:../../../platform/common/services/clock/mega/sysclk.h **** static inline uint32_t sysclk_get_cpu_hz(void)
 292:../../../platform/common/services/clock/mega/sysclk.h **** {
 293:../../../platform/common/services/clock/mega/sysclk.h **** 	return sysclk_get_source_clock_hz();
 294:../../../platform/common/services/clock/mega/sysclk.h **** }
 295:../../../platform/common/services/clock/mega/sysclk.h **** 
 296:../../../platform/common/services/clock/mega/sysclk.h **** /**
 297:../../../platform/common/services/clock/mega/sysclk.h ****  * \brief Return the current rate in Hz of the clock from internal oscillator
 298:../../../platform/common/services/clock/mega/sysclk.h ****  * \return Frequency of the CPU clock, in Hz.
 299:../../../platform/common/services/clock/mega/sysclk.h ****  */
 300:../../../platform/common/services/clock/mega/sysclk.h **** static inline uint32_t sysclk_get_rc_osc_hz(void)
 301:../../../platform/common/services/clock/mega/sysclk.h **** {
 302:../../../platform/common/services/clock/mega/sysclk.h **** 	switch (CONFIG_SYSCLK_PSDIV) {
 303:../../../platform/common/services/clock/mega/sysclk.h **** 	case SYSCLK_PSDIV_1:
 304:../../../platform/common/services/clock/mega/sysclk.h **** 		if (SYSCLK_SOURCE == SYSCLK_SRC_RC16MHZ ||
 305:../../../platform/common/services/clock/mega/sysclk.h **** 				SYSCLK_SOURCE == SYSCLK_SRC_RC128KHZ) {
 306:../../../platform/common/services/clock/mega/sysclk.h **** 			return sysclk_get_main_hz() / 2;
 307:../../../platform/common/services/clock/mega/sysclk.h **** 		}
 308:../../../platform/common/services/clock/mega/sysclk.h **** 
 309:../../../platform/common/services/clock/mega/sysclk.h **** 	case SYSCLK_PSDIV_2:
 310:../../../platform/common/services/clock/mega/sysclk.h **** 		if (SYSCLK_SOURCE == SYSCLK_SRC_RC16MHZ ||
 311:../../../platform/common/services/clock/mega/sysclk.h **** 				SYSCLK_SOURCE == SYSCLK_SRC_RC128KHZ) {
 312:../../../platform/common/services/clock/mega/sysclk.h **** 			return sysclk_get_main_hz() / 4;
 313:../../../platform/common/services/clock/mega/sysclk.h **** 		}
 314:../../../platform/common/services/clock/mega/sysclk.h **** 
 315:../../../platform/common/services/clock/mega/sysclk.h **** 	case SYSCLK_PSDIV_4:
 316:../../../platform/common/services/clock/mega/sysclk.h **** 		if (SYSCLK_SOURCE == SYSCLK_SRC_RC16MHZ ||
 317:../../../platform/common/services/clock/mega/sysclk.h **** 				SYSCLK_SOURCE == SYSCLK_SRC_RC128KHZ) {
 318:../../../platform/common/services/clock/mega/sysclk.h **** 			return sysclk_get_main_hz() / 8;
 319:../../../platform/common/services/clock/mega/sysclk.h **** 		}
 320:../../../platform/common/services/clock/mega/sysclk.h **** 
 321:../../../platform/common/services/clock/mega/sysclk.h **** 	case SYSCLK_PSDIV_8:
 322:../../../platform/common/services/clock/mega/sysclk.h **** 		if (SYSCLK_SOURCE == SYSCLK_SRC_RC16MHZ ||
 323:../../../platform/common/services/clock/mega/sysclk.h **** 				SYSCLK_SOURCE == SYSCLK_SRC_RC128KHZ) {
 324:../../../platform/common/services/clock/mega/sysclk.h **** 			return sysclk_get_main_hz() / 16;
 325:../../../platform/common/services/clock/mega/sysclk.h **** 		}
 326:../../../platform/common/services/clock/mega/sysclk.h **** 
 327:../../../platform/common/services/clock/mega/sysclk.h **** 	case SYSCLK_PSDIV_16:
 328:../../../platform/common/services/clock/mega/sysclk.h **** 		if (SYSCLK_SOURCE == SYSCLK_SRC_RC16MHZ ||
 329:../../../platform/common/services/clock/mega/sysclk.h **** 				SYSCLK_SOURCE == SYSCLK_SRC_RC128KHZ) {
 330:../../../platform/common/services/clock/mega/sysclk.h **** 			return sysclk_get_main_hz() / 32;
 331:../../../platform/common/services/clock/mega/sysclk.h **** 		}
 332:../../../platform/common/services/clock/mega/sysclk.h **** 
 333:../../../platform/common/services/clock/mega/sysclk.h **** 	case SYSCLK_PSDIV_32:
 334:../../../platform/common/services/clock/mega/sysclk.h **** 		if (SYSCLK_SOURCE == SYSCLK_SRC_RC16MHZ ||
 335:../../../platform/common/services/clock/mega/sysclk.h **** 				SYSCLK_SOURCE == SYSCLK_SRC_RC128KHZ) {
 336:../../../platform/common/services/clock/mega/sysclk.h **** 			return sysclk_get_main_hz() / 64;
 337:../../../platform/common/services/clock/mega/sysclk.h **** 		}
 338:../../../platform/common/services/clock/mega/sysclk.h **** 
 339:../../../platform/common/services/clock/mega/sysclk.h **** 	case SYSCLK_PSDIV_64:
 340:../../../platform/common/services/clock/mega/sysclk.h **** 		if (SYSCLK_SOURCE == SYSCLK_SRC_RC16MHZ ||
 341:../../../platform/common/services/clock/mega/sysclk.h **** 				SYSCLK_SOURCE == SYSCLK_SRC_RC128KHZ) {
 342:../../../platform/common/services/clock/mega/sysclk.h **** 			return sysclk_get_main_hz() / 128;
 343:../../../platform/common/services/clock/mega/sysclk.h **** 		}
 344:../../../platform/common/services/clock/mega/sysclk.h **** 
 345:../../../platform/common/services/clock/mega/sysclk.h **** 	case SYSCLK_PSDIV_128:
 346:../../../platform/common/services/clock/mega/sysclk.h **** 		if (SYSCLK_SOURCE == SYSCLK_SRC_RC16MHZ ||
 347:../../../platform/common/services/clock/mega/sysclk.h **** 				SYSCLK_SOURCE == SYSCLK_SRC_RC128KHZ) {
 348:../../../platform/common/services/clock/mega/sysclk.h **** 			return sysclk_get_main_hz() / 256;
 349:../../../platform/common/services/clock/mega/sysclk.h **** 		}
 350:../../../platform/common/services/clock/mega/sysclk.h **** 
 351:../../../platform/common/services/clock/mega/sysclk.h **** 	case SYSCLK_PSDIV_256:
 352:../../../platform/common/services/clock/mega/sysclk.h **** 		if (SYSCLK_SOURCE == SYSCLK_SRC_RC16MHZ ||
 353:../../../platform/common/services/clock/mega/sysclk.h **** 				SYSCLK_SOURCE == SYSCLK_SRC_RC128KHZ) {
 354:../../../platform/common/services/clock/mega/sysclk.h **** 			return sysclk_get_main_hz() / 512;
 355:../../../platform/common/services/clock/mega/sysclk.h **** 		}
 356:../../../platform/common/services/clock/mega/sysclk.h **** 
 357:../../../platform/common/services/clock/mega/sysclk.h **** 	default:
 358:../../../platform/common/services/clock/mega/sysclk.h **** 		return 0;
 359:../../../platform/common/services/clock/mega/sysclk.h **** 	}
 360:../../../platform/common/services/clock/mega/sysclk.h **** }
 361:../../../platform/common/services/clock/mega/sysclk.h **** 
 362:../../../platform/common/services/clock/mega/sysclk.h **** /* ! \name Enabling and disabling synchronous clocks */
 363:../../../platform/common/services/clock/mega/sysclk.h **** /* @{ */
 364:../../../platform/common/services/clock/mega/sysclk.h **** 
 365:../../../platform/common/services/clock/mega/sysclk.h **** /**
 366:../../../platform/common/services/clock/mega/sysclk.h ****  * \brief Enable the clock to peripheral \a id on port \a port
 367:../../../platform/common/services/clock/mega/sysclk.h ****  *
 368:../../../platform/common/services/clock/mega/sysclk.h ****  * \param port ID of the port to which the module is connected (one of
 369:../../../platform/common/services/clock/mega/sysclk.h ****  * the \c power_red_id *definitions).
 370:../../../platform/common/services/clock/mega/sysclk.h ****  * \param id The ID (bitmask) of the peripheral module to be disabled.*
 371:../../../platform/common/services/clock/mega/sysclk.h ****  */
 372:../../../platform/common/services/clock/mega/sysclk.h **** extern void sysclk_enable_module(enum power_red_id port, uint8_t id);
 373:../../../platform/common/services/clock/mega/sysclk.h **** 
 374:../../../platform/common/services/clock/mega/sysclk.h **** /**
 375:../../../platform/common/services/clock/mega/sysclk.h ****  * \brief Disable the clock to peripheral \a id on port \a port
 376:../../../platform/common/services/clock/mega/sysclk.h ****  *
 377:../../../platform/common/services/clock/mega/sysclk.h ****  * \param port ID of the port to which the module is connected (one of
 378:../../../platform/common/services/clock/mega/sysclk.h ****  * the \c power_red_id *definitions).
 379:../../../platform/common/services/clock/mega/sysclk.h ****  * \param id The ID (bit mask) of the peripheral module to be disabled.
 380:../../../platform/common/services/clock/mega/sysclk.h ****  */
 381:../../../platform/common/services/clock/mega/sysclk.h **** extern void sysclk_disable_module(enum power_red_id port, uint8_t id);
 382:../../../platform/common/services/clock/mega/sysclk.h **** 
 383:../../../platform/common/services/clock/mega/sysclk.h **** /**
 384:../../../platform/common/services/clock/mega/sysclk.h ****  * \brief Enable a peripherals clock from its base address.
 385:../../../platform/common/services/clock/mega/sysclk.h ****  *
 386:../../../platform/common/services/clock/mega/sysclk.h ****  *  Enables the clock to a peripheral, given its base address. If the peripheral
 387:../../../platform/common/services/clock/mega/sysclk.h ****  *  has an associated clock on the HSB bus, this will be enabled also.
 388:../../../platform/common/services/clock/mega/sysclk.h ****  *
 389:../../../platform/common/services/clock/mega/sysclk.h ****  * \param module Pointer to the module's base address.
 390:../../../platform/common/services/clock/mega/sysclk.h ****  */
 391:../../../platform/common/services/clock/mega/sysclk.h **** static inline void sysclk_enable_peripheral_clock(const volatile void *module)
 392:../../../platform/common/services/clock/mega/sysclk.h **** {
  15               		.loc 1 392 0
  16               		.cfi_startproc
  17 0000 CF93      		push r28
  18               	.LCFI0:
  19               		.cfi_def_cfa_offset 3
  20               		.cfi_offset 28, -2
  21 0002 DF93      		push r29
  22               	.LCFI1:
  23               		.cfi_def_cfa_offset 4
  24               		.cfi_offset 29, -3
  25 0004 00D0      		rcall .
  26               	.LCFI2:
  27               		.cfi_def_cfa_offset 6
  28 0006 CDB7      		in r28,__SP_L__
  29 0008 DEB7      		in r29,__SP_H__
  30               	.LCFI3:
  31               		.cfi_def_cfa_register 28
  32               	/* prologue: function */
  33               	/* frame size = 2 */
  34               	/* stack size = 4 */
  35               	.L__stack_usage = 4
  36 000a 9A83      		std Y+2,r25
  37 000c 8983      		std Y+1,r24
 393:../../../platform/common/services/clock/mega/sysclk.h **** 	if (module == NULL) {
  38               		.loc 1 393 0
  39 000e 8981      		ldd r24,Y+1
  40 0010 9A81      		ldd r25,Y+2
  41 0012 892B      		or r24,r25
  42 0014 01F4      		brne .+2
  43 0016 00C0      		rjmp .L14
 394:../../../platform/common/services/clock/mega/sysclk.h **** 		Assert(false);
 395:../../../platform/common/services/clock/mega/sysclk.h **** 	}
 396:../../../platform/common/services/clock/mega/sysclk.h **** 
 397:../../../platform/common/services/clock/mega/sysclk.h **** #if !MEGA_XX_UN0 && !MEGA_XX_UN1
 398:../../../platform/common/services/clock/mega/sysclk.h **** 	else if (module == &ADC) {
  44               		.loc 1 398 0
  45 0018 8981      		ldd r24,Y+1
  46 001a 9A81      		ldd r25,Y+2
  47 001c 8837      		cpi r24,120
  48 001e 9105      		cpc r25,__zero_reg__
  49 0020 01F4      		brne .L3
 399:../../../platform/common/services/clock/mega/sysclk.h **** 		sysclk_enable_module(POWER_RED_REG0, PRADC_bm);
  50               		.loc 1 399 0
  51 0022 61E0      		ldi r22,lo8(1)
  52 0024 80E0      		ldi r24,0
  53 0026 0E94 0000 		call sysclk_enable_module
 400:../../../platform/common/services/clock/mega/sysclk.h **** #if MEGA_RF
 401:../../../platform/common/services/clock/mega/sysclk.h **** 		sysclk_enable_module(POWER_RED_REG0, PRPGA_bm);
  54               		.loc 1 401 0
  55 002a 60E1      		ldi r22,lo8(16)
  56 002c 80E0      		ldi r24,0
  57 002e 0E94 0000 		call sysclk_enable_module
 402:../../../platform/common/services/clock/mega/sysclk.h **** #endif
 403:../../../platform/common/services/clock/mega/sysclk.h **** 	} else if (module == &UCSR0A) {
 404:../../../platform/common/services/clock/mega/sysclk.h **** 		sysclk_enable_module(POWER_RED_REG0, PRUSART0_bm);
 405:../../../platform/common/services/clock/mega/sysclk.h **** 	}
 406:../../../platform/common/services/clock/mega/sysclk.h **** #if MEGA_RF
 407:../../../platform/common/services/clock/mega/sysclk.h **** 	else if (module == &SPCR) {
 408:../../../platform/common/services/clock/mega/sysclk.h **** 		sysclk_enable_module(POWER_RED_REG0, PRSPI_bm);
 409:../../../platform/common/services/clock/mega/sysclk.h **** 	}
 410:../../../platform/common/services/clock/mega/sysclk.h **** #endif
 411:../../../platform/common/services/clock/mega/sysclk.h **** 
 412:../../../platform/common/services/clock/mega/sysclk.h **** 	else if (module == &TCCR1A) {
 413:../../../platform/common/services/clock/mega/sysclk.h **** 		sysclk_enable_module(POWER_RED_REG0, PRTIM1_bm);
 414:../../../platform/common/services/clock/mega/sysclk.h **** 	}
 415:../../../platform/common/services/clock/mega/sysclk.h **** 
 416:../../../platform/common/services/clock/mega/sysclk.h **** #if MEGA_XX_UN2
 417:../../../platform/common/services/clock/mega/sysclk.h **** 	else if (module == &LCDCRA) {
 418:../../../platform/common/services/clock/mega/sysclk.h **** 		sysclk_enable_module(POWER_RED_REG0, PRLCD_bm);
 419:../../../platform/common/services/clock/mega/sysclk.h **** 	}
 420:../../../platform/common/services/clock/mega/sysclk.h **** #endif
 421:../../../platform/common/services/clock/mega/sysclk.h **** 
 422:../../../platform/common/services/clock/mega/sysclk.h **** #if !MEGA_XX_UN2
 423:../../../platform/common/services/clock/mega/sysclk.h **** 	else if (module == &TCCR0A) {
 424:../../../platform/common/services/clock/mega/sysclk.h **** 		sysclk_enable_module(POWER_RED_REG0, PRTIM0_bm);
 425:../../../platform/common/services/clock/mega/sysclk.h **** 	} else if (module == &TCCR2A) {
 426:../../../platform/common/services/clock/mega/sysclk.h **** 		sysclk_enable_module(POWER_RED_REG0, PRTIM2_bm);
 427:../../../platform/common/services/clock/mega/sysclk.h **** 	} else if (module == &TWBR) {
 428:../../../platform/common/services/clock/mega/sysclk.h **** 		sysclk_enable_module(POWER_RED_REG0, PRTWI_bm);
 429:../../../platform/common/services/clock/mega/sysclk.h **** 	}
 430:../../../platform/common/services/clock/mega/sysclk.h **** #endif
 431:../../../platform/common/services/clock/mega/sysclk.h **** 
 432:../../../platform/common/services/clock/mega/sysclk.h **** #if MEGA_RF
 433:../../../platform/common/services/clock/mega/sysclk.h **** 	else if (module == &UCSR1A) {
 434:../../../platform/common/services/clock/mega/sysclk.h **** 		sysclk_enable_module(POWER_RED_REG1, PRUSART1_bm);
 435:../../../platform/common/services/clock/mega/sysclk.h **** 	} else if (module == &TCCR3A) {
 436:../../../platform/common/services/clock/mega/sysclk.h **** 		sysclk_enable_module(POWER_RED_REG1, PRTIM3_bm);
 437:../../../platform/common/services/clock/mega/sysclk.h **** 	} else if (module == &TCCR4A) {
 438:../../../platform/common/services/clock/mega/sysclk.h **** 		sysclk_enable_module(POWER_RED_REG1, PRTIM4_bm);
 439:../../../platform/common/services/clock/mega/sysclk.h **** 	} else if (module == &TCCR5A) {
 440:../../../platform/common/services/clock/mega/sysclk.h **** 		sysclk_enable_module(POWER_RED_REG1, PRTIM5_bm);
 441:../../../platform/common/services/clock/mega/sysclk.h **** 	} else if (module == &TRX_CTRL_0) {
 442:../../../platform/common/services/clock/mega/sysclk.h **** 		sysclk_enable_module(POWER_RED_REG1, PRTRX24_bm);
 443:../../../platform/common/services/clock/mega/sysclk.h **** 	}
 444:../../../platform/common/services/clock/mega/sysclk.h **** #endif
 445:../../../platform/common/services/clock/mega/sysclk.h **** #endif
 446:../../../platform/common/services/clock/mega/sysclk.h **** 	else {
 447:../../../platform/common/services/clock/mega/sysclk.h **** 		Assert(false);
 448:../../../platform/common/services/clock/mega/sysclk.h **** 	}
 449:../../../platform/common/services/clock/mega/sysclk.h **** }
  58               		.loc 1 449 0
  59 0032 00C0      		rjmp .L14
  60               	.L3:
 403:../../../platform/common/services/clock/mega/sysclk.h **** 		sysclk_enable_module(POWER_RED_REG0, PRUSART0_bm);
  61               		.loc 1 403 0
  62 0034 8981      		ldd r24,Y+1
  63 0036 9A81      		ldd r25,Y+2
  64 0038 803C      		cpi r24,-64
  65 003a 9105      		cpc r25,__zero_reg__
  66 003c 01F4      		brne .L4
 404:../../../platform/common/services/clock/mega/sysclk.h **** 	}
  67               		.loc 1 404 0
  68 003e 62E0      		ldi r22,lo8(2)
  69 0040 80E0      		ldi r24,0
  70 0042 0E94 0000 		call sysclk_enable_module
  71               		.loc 1 449 0
  72 0046 00C0      		rjmp .L14
  73               	.L4:
 407:../../../platform/common/services/clock/mega/sysclk.h **** 		sysclk_enable_module(POWER_RED_REG0, PRSPI_bm);
  74               		.loc 1 407 0
  75 0048 8981      		ldd r24,Y+1
  76 004a 9A81      		ldd r25,Y+2
  77 004c 8C34      		cpi r24,76
  78 004e 9105      		cpc r25,__zero_reg__
  79 0050 01F4      		brne .L5
 408:../../../platform/common/services/clock/mega/sysclk.h **** 	}
  80               		.loc 1 408 0
  81 0052 64E0      		ldi r22,lo8(4)
  82 0054 80E0      		ldi r24,0
  83 0056 0E94 0000 		call sysclk_enable_module
  84               		.loc 1 449 0
  85 005a 00C0      		rjmp .L14
  86               	.L5:
 412:../../../platform/common/services/clock/mega/sysclk.h **** 		sysclk_enable_module(POWER_RED_REG0, PRTIM1_bm);
  87               		.loc 1 412 0
  88 005c 8981      		ldd r24,Y+1
  89 005e 9A81      		ldd r25,Y+2
  90 0060 8038      		cpi r24,-128
  91 0062 9105      		cpc r25,__zero_reg__
  92 0064 01F4      		brne .L6
 413:../../../platform/common/services/clock/mega/sysclk.h **** 	}
  93               		.loc 1 413 0
  94 0066 68E0      		ldi r22,lo8(8)
  95 0068 80E0      		ldi r24,0
  96 006a 0E94 0000 		call sysclk_enable_module
  97               		.loc 1 449 0
  98 006e 00C0      		rjmp .L14
  99               	.L6:
 423:../../../platform/common/services/clock/mega/sysclk.h **** 		sysclk_enable_module(POWER_RED_REG0, PRTIM0_bm);
 100               		.loc 1 423 0
 101 0070 8981      		ldd r24,Y+1
 102 0072 9A81      		ldd r25,Y+2
 103 0074 8434      		cpi r24,68
 104 0076 9105      		cpc r25,__zero_reg__
 105 0078 01F4      		brne .L7
 424:../../../platform/common/services/clock/mega/sysclk.h **** 	} else if (module == &TCCR2A) {
 106               		.loc 1 424 0
 107 007a 60E2      		ldi r22,lo8(32)
 108 007c 80E0      		ldi r24,0
 109 007e 0E94 0000 		call sysclk_enable_module
 110               		.loc 1 449 0
 111 0082 00C0      		rjmp .L14
 112               	.L7:
 425:../../../platform/common/services/clock/mega/sysclk.h **** 		sysclk_enable_module(POWER_RED_REG0, PRTIM2_bm);
 113               		.loc 1 425 0
 114 0084 8981      		ldd r24,Y+1
 115 0086 9A81      		ldd r25,Y+2
 116 0088 803B      		cpi r24,-80
 117 008a 9105      		cpc r25,__zero_reg__
 118 008c 01F4      		brne .L8
 426:../../../platform/common/services/clock/mega/sysclk.h **** 	} else if (module == &TWBR) {
 119               		.loc 1 426 0
 120 008e 60E4      		ldi r22,lo8(64)
 121 0090 80E0      		ldi r24,0
 122 0092 0E94 0000 		call sysclk_enable_module
 123               		.loc 1 449 0
 124 0096 00C0      		rjmp .L14
 125               	.L8:
 427:../../../platform/common/services/clock/mega/sysclk.h **** 		sysclk_enable_module(POWER_RED_REG0, PRTWI_bm);
 126               		.loc 1 427 0
 127 0098 8981      		ldd r24,Y+1
 128 009a 9A81      		ldd r25,Y+2
 129 009c 883B      		cpi r24,-72
 130 009e 9105      		cpc r25,__zero_reg__
 131 00a0 01F4      		brne .L9
 428:../../../platform/common/services/clock/mega/sysclk.h **** 	}
 132               		.loc 1 428 0
 133 00a2 60E8      		ldi r22,lo8(-128)
 134 00a4 80E0      		ldi r24,0
 135 00a6 0E94 0000 		call sysclk_enable_module
 136               		.loc 1 449 0
 137 00aa 00C0      		rjmp .L14
 138               	.L9:
 433:../../../platform/common/services/clock/mega/sysclk.h **** 		sysclk_enable_module(POWER_RED_REG1, PRUSART1_bm);
 139               		.loc 1 433 0
 140 00ac 8981      		ldd r24,Y+1
 141 00ae 9A81      		ldd r25,Y+2
 142 00b0 883C      		cpi r24,-56
 143 00b2 9105      		cpc r25,__zero_reg__
 144 00b4 01F4      		brne .L10
 434:../../../platform/common/services/clock/mega/sysclk.h **** 	} else if (module == &TCCR3A) {
 145               		.loc 1 434 0
 146 00b6 61E0      		ldi r22,lo8(1)
 147 00b8 81E0      		ldi r24,lo8(1)
 148 00ba 0E94 0000 		call sysclk_enable_module
 149               		.loc 1 449 0
 150 00be 00C0      		rjmp .L14
 151               	.L10:
 435:../../../platform/common/services/clock/mega/sysclk.h **** 		sysclk_enable_module(POWER_RED_REG1, PRTIM3_bm);
 152               		.loc 1 435 0
 153 00c0 8981      		ldd r24,Y+1
 154 00c2 9A81      		ldd r25,Y+2
 155 00c4 8039      		cpi r24,-112
 156 00c6 9105      		cpc r25,__zero_reg__
 157 00c8 01F4      		brne .L11
 436:../../../platform/common/services/clock/mega/sysclk.h **** 	} else if (module == &TCCR4A) {
 158               		.loc 1 436 0
 159 00ca 68E0      		ldi r22,lo8(8)
 160 00cc 81E0      		ldi r24,lo8(1)
 161 00ce 0E94 0000 		call sysclk_enable_module
 162               		.loc 1 449 0
 163 00d2 00C0      		rjmp .L14
 164               	.L11:
 437:../../../platform/common/services/clock/mega/sysclk.h **** 		sysclk_enable_module(POWER_RED_REG1, PRTIM4_bm);
 165               		.loc 1 437 0
 166 00d4 8981      		ldd r24,Y+1
 167 00d6 9A81      		ldd r25,Y+2
 168 00d8 803A      		cpi r24,-96
 169 00da 9105      		cpc r25,__zero_reg__
 170 00dc 01F4      		brne .L12
 438:../../../platform/common/services/clock/mega/sysclk.h **** 	} else if (module == &TCCR5A) {
 171               		.loc 1 438 0
 172 00de 60E1      		ldi r22,lo8(16)
 173 00e0 81E0      		ldi r24,lo8(1)
 174 00e2 0E94 0000 		call sysclk_enable_module
 175               		.loc 1 449 0
 176 00e6 00C0      		rjmp .L14
 177               	.L12:
 439:../../../platform/common/services/clock/mega/sysclk.h **** 		sysclk_enable_module(POWER_RED_REG1, PRTIM5_bm);
 178               		.loc 1 439 0
 179 00e8 8981      		ldd r24,Y+1
 180 00ea 9A81      		ldd r25,Y+2
 181 00ec 8032      		cpi r24,32
 182 00ee 9140      		sbci r25,1
 183 00f0 01F4      		brne .L13
 440:../../../platform/common/services/clock/mega/sysclk.h **** 	} else if (module == &TRX_CTRL_0) {
 184               		.loc 1 440 0
 185 00f2 60E2      		ldi r22,lo8(32)
 186 00f4 81E0      		ldi r24,lo8(1)
 187 00f6 0E94 0000 		call sysclk_enable_module
 188               		.loc 1 449 0
 189 00fa 00C0      		rjmp .L14
 190               	.L13:
 441:../../../platform/common/services/clock/mega/sysclk.h **** 		sysclk_enable_module(POWER_RED_REG1, PRTRX24_bm);
 191               		.loc 1 441 0
 192 00fc 8981      		ldd r24,Y+1
 193 00fe 9A81      		ldd r25,Y+2
 194 0100 8334      		cpi r24,67
 195 0102 9140      		sbci r25,1
 196 0104 01F4      		brne .L14
 442:../../../platform/common/services/clock/mega/sysclk.h **** 	}
 197               		.loc 1 442 0
 198 0106 60E4      		ldi r22,lo8(64)
 199 0108 81E0      		ldi r24,lo8(1)
 200 010a 0E94 0000 		call sysclk_enable_module
 201               	.L14:
 202               		.loc 1 449 0
 203 010e 0000      		nop
 204               	/* epilogue start */
 205 0110 0F90      		pop __tmp_reg__
 206 0112 0F90      		pop __tmp_reg__
 207 0114 DF91      		pop r29
 208 0116 CF91      		pop r28
 209 0118 0895      		ret
 210               		.cfi_endproc
 211               	.LFE69:
 214               	__portable_avr_delay_cycles:
 215               	.LFB74:
 216               		.file 2 "../../../platform/common/services/delay/mega_rf/cycle_counter.h"
   1:../../../platform/common/services/delay/mega_rf/cycle_counter.h **** /**
   2:../../../platform/common/services/delay/mega_rf/cycle_counter.h ****  * \file
   3:../../../platform/common/services/delay/mega_rf/cycle_counter.h ****  *
   4:../../../platform/common/services/delay/mega_rf/cycle_counter.h ****  * \brief AVR functions for busy-wait delay loops
   5:../../../platform/common/services/delay/mega_rf/cycle_counter.h ****  *
   6:../../../platform/common/services/delay/mega_rf/cycle_counter.h ****  * Copyright (c) 2011 - 2012 Atmel Corporation. All rights reserved.
   7:../../../platform/common/services/delay/mega_rf/cycle_counter.h ****  *
   8:../../../platform/common/services/delay/mega_rf/cycle_counter.h ****  * \asf_license_start
   9:../../../platform/common/services/delay/mega_rf/cycle_counter.h ****  *
  10:../../../platform/common/services/delay/mega_rf/cycle_counter.h ****  * \page License
  11:../../../platform/common/services/delay/mega_rf/cycle_counter.h ****  *
  12:../../../platform/common/services/delay/mega_rf/cycle_counter.h ****  * Redistribution and use in source and binary forms, with or without
  13:../../../platform/common/services/delay/mega_rf/cycle_counter.h ****  * modification, are permitted provided that the following conditions are met:
  14:../../../platform/common/services/delay/mega_rf/cycle_counter.h ****  *
  15:../../../platform/common/services/delay/mega_rf/cycle_counter.h ****  * 1. Redistributions of source code must retain the above copyright notice,
  16:../../../platform/common/services/delay/mega_rf/cycle_counter.h ****  *    this list of conditions and the following disclaimer.
  17:../../../platform/common/services/delay/mega_rf/cycle_counter.h ****  *
  18:../../../platform/common/services/delay/mega_rf/cycle_counter.h ****  * 2. Redistributions in binary form must reproduce the above copyright notice,
  19:../../../platform/common/services/delay/mega_rf/cycle_counter.h ****  *    this list of conditions and the following disclaimer in the documentation
  20:../../../platform/common/services/delay/mega_rf/cycle_counter.h ****  *    and/or other materials provided with the distribution.
  21:../../../platform/common/services/delay/mega_rf/cycle_counter.h ****  *
  22:../../../platform/common/services/delay/mega_rf/cycle_counter.h ****  * 3. The name of Atmel may not be used to endorse or promote products derived
  23:../../../platform/common/services/delay/mega_rf/cycle_counter.h ****  *    from this software without specific prior written permission.
  24:../../../platform/common/services/delay/mega_rf/cycle_counter.h ****  *
  25:../../../platform/common/services/delay/mega_rf/cycle_counter.h ****  * 4. This software may only be redistributed and used in connection with an
  26:../../../platform/common/services/delay/mega_rf/cycle_counter.h ****  *    Atmel microcontroller product.
  27:../../../platform/common/services/delay/mega_rf/cycle_counter.h ****  *
  28:../../../platform/common/services/delay/mega_rf/cycle_counter.h ****  * THIS SOFTWARE IS PROVIDED BY ATMEL "AS IS" AND ANY EXPRESS OR IMPLIED
  29:../../../platform/common/services/delay/mega_rf/cycle_counter.h ****  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
  30:../../../platform/common/services/delay/mega_rf/cycle_counter.h ****  * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE
  31:../../../platform/common/services/delay/mega_rf/cycle_counter.h ****  * EXPRESSLY AND SPECIFICALLY DISCLAIMED. IN NO EVENT SHALL ATMEL BE LIABLE FOR
  32:../../../platform/common/services/delay/mega_rf/cycle_counter.h ****  * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  33:../../../platform/common/services/delay/mega_rf/cycle_counter.h ****  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
  34:../../../platform/common/services/delay/mega_rf/cycle_counter.h ****  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
  35:../../../platform/common/services/delay/mega_rf/cycle_counter.h ****  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
  36:../../../platform/common/services/delay/mega_rf/cycle_counter.h ****  * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
  37:../../../platform/common/services/delay/mega_rf/cycle_counter.h ****  * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  38:../../../platform/common/services/delay/mega_rf/cycle_counter.h ****  * POSSIBILITY OF SUCH DAMAGE.
  39:../../../platform/common/services/delay/mega_rf/cycle_counter.h ****  *
  40:../../../platform/common/services/delay/mega_rf/cycle_counter.h ****  * \asf_license_stop
  41:../../../platform/common/services/delay/mega_rf/cycle_counter.h ****  *
  42:../../../platform/common/services/delay/mega_rf/cycle_counter.h ****  */
  43:../../../platform/common/services/delay/mega_rf/cycle_counter.h **** #ifndef _cycle_counter_h_
  44:../../../platform/common/services/delay/mega_rf/cycle_counter.h **** #define _cycle_counter_h_
  45:../../../platform/common/services/delay/mega_rf/cycle_counter.h **** 
  46:../../../platform/common/services/delay/mega_rf/cycle_counter.h **** #ifdef __cplusplus
  47:../../../platform/common/services/delay/mega_rf/cycle_counter.h **** extern "C" {
  48:../../../platform/common/services/delay/mega_rf/cycle_counter.h **** #endif
  49:../../../platform/common/services/delay/mega_rf/cycle_counter.h **** 
  50:../../../platform/common/services/delay/mega_rf/cycle_counter.h **** #include <compiler.h>
  51:../../../platform/common/services/delay/mega_rf/cycle_counter.h **** 
  52:../../../platform/common/services/delay/mega_rf/cycle_counter.h **** /**
  53:../../../platform/common/services/delay/mega_rf/cycle_counter.h ****  * @name Convenience functions for busy-wait delay loops
  54:../../../platform/common/services/delay/mega_rf/cycle_counter.h ****  *
  55:../../../platform/common/services/delay/mega_rf/cycle_counter.h ****  * @def delay_cycles
  56:../../../platform/common/services/delay/mega_rf/cycle_counter.h ****  * @brief Delay program execution for a specified number of CPU cycles.
  57:../../../platform/common/services/delay/mega_rf/cycle_counter.h ****  * @param n number of CPU cycles to wait
  58:../../../platform/common/services/delay/mega_rf/cycle_counter.h ****  *
  59:../../../platform/common/services/delay/mega_rf/cycle_counter.h ****  * @def cpu_delay_ms
  60:../../../platform/common/services/delay/mega_rf/cycle_counter.h ****  * @brief Delay program execution for a specified number of milliseconds.
  61:../../../platform/common/services/delay/mega_rf/cycle_counter.h ****  * @param delay number of milliseconds to wait
  62:../../../platform/common/services/delay/mega_rf/cycle_counter.h ****  * @param f_cpu CPU frequency in Hertz
  63:../../../platform/common/services/delay/mega_rf/cycle_counter.h ****  *
  64:../../../platform/common/services/delay/mega_rf/cycle_counter.h ****  * @def cpu_delay_us
  65:../../../platform/common/services/delay/mega_rf/cycle_counter.h ****  * @brief Delay program execution for a specified number of microseconds.
  66:../../../platform/common/services/delay/mega_rf/cycle_counter.h ****  * @param delay number of microseconds to wait
  67:../../../platform/common/services/delay/mega_rf/cycle_counter.h ****  * @param f_cpu CPU frequency in Hertz
  68:../../../platform/common/services/delay/mega_rf/cycle_counter.h ****  *
  69:../../../platform/common/services/delay/mega_rf/cycle_counter.h ****  * @def cpu_ms_2_cy
  70:../../../platform/common/services/delay/mega_rf/cycle_counter.h ****  * @brief Convert milli-seconds into CPU cycles.
  71:../../../platform/common/services/delay/mega_rf/cycle_counter.h ****  * @param ms number of milliseconds
  72:../../../platform/common/services/delay/mega_rf/cycle_counter.h ****  * @param f_cpu CPU frequency in Hertz
  73:../../../platform/common/services/delay/mega_rf/cycle_counter.h ****  * @return the converted number of CPU cycles
  74:../../../platform/common/services/delay/mega_rf/cycle_counter.h ****  *
  75:../../../platform/common/services/delay/mega_rf/cycle_counter.h ****  * @def cpu_us_2_cy
  76:../../../platform/common/services/delay/mega_rf/cycle_counter.h ****  * @brief Convert micro-seconds into CPU cycles.
  77:../../../platform/common/services/delay/mega_rf/cycle_counter.h ****  * @param ms number of microseconds
  78:../../../platform/common/services/delay/mega_rf/cycle_counter.h ****  * @param f_cpu CPU frequency in Hertz
  79:../../../platform/common/services/delay/mega_rf/cycle_counter.h ****  * @return the converted number of CPU cycles
  80:../../../platform/common/services/delay/mega_rf/cycle_counter.h ****  *
  81:../../../platform/common/services/delay/mega_rf/cycle_counter.h ****  * @{
  82:../../../platform/common/services/delay/mega_rf/cycle_counter.h ****  */
  83:../../../platform/common/services/delay/mega_rf/cycle_counter.h **** __always_optimize
  84:../../../platform/common/services/delay/mega_rf/cycle_counter.h **** static inline void __portable_avr_delay_cycles(unsigned long n)
  85:../../../platform/common/services/delay/mega_rf/cycle_counter.h **** {
 217               		.loc 2 85 0
 218               		.cfi_startproc
 219               	/* prologue: function */
 220               	/* frame size = 0 */
 221               	/* stack size = 0 */
 222               	.L__stack_usage = 0
 223               	.L16:
  86:../../../platform/common/services/delay/mega_rf/cycle_counter.h **** 	do { barrier(); } while (--n);
 224               		.loc 2 86 0 discriminator 1
 225 011a 6150      		subi r22,1
 226 011c 7109      		sbc r23,__zero_reg__
 227 011e 8109      		sbc r24,__zero_reg__
 228 0120 9109      		sbc r25,__zero_reg__
 229 0122 01F4      		brne .L16
 230               	/* epilogue start */
  87:../../../platform/common/services/delay/mega_rf/cycle_counter.h **** }
 231               		.loc 2 87 0
 232 0124 0895      		ret
 233               		.cfi_endproc
 234               	.LFE74:
 236               		.section	.bss.phyState,"aw",@nobits
 239               	phyState:
 240 0000 00        		.zero	1
 241               		.section	.bss.phyRxBuffer,"aw",@nobits
 244               	phyRxBuffer:
 245 0000 0000 0000 		.zero	128
 245      0000 0000 
 245      0000 0000 
 245      0000 0000 
 245      0000 0000 
 246               		.section	.bss.phyRxState,"aw",@nobits
 249               	phyRxState:
 250 0000 00        		.zero	1
 251               		.text
 252               	.global	PHY_Init
 254               	PHY_Init:
 255               	.LFB75:
 256               		.file 3 "../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c"
   1:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** /**
   2:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c ****  * \file phy.c
   3:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c ****  *
   4:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c ****  * \brief ATMEGAxxxRFA1 PHY implementation
   5:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c ****  *
   6:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c ****  * Copyright (C) 2014, Atmel Corporation. All rights reserved.
   7:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c ****  *
   8:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c ****  * \asf_license_start
   9:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c ****  *
  10:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c ****  * Redistribution and use in source and binary forms, with or without
  11:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c ****  * modification, are permitted provided that the following conditions are met:
  12:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c ****  *
  13:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c ****  * 1. Redistributions of source code must retain the above copyright notice,
  14:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c ****  *    this list of conditions and the following disclaimer.
  15:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c ****  *
  16:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c ****  * 2. Redistributions in binary form must reproduce the above copyright notice,
  17:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c ****  *    this list of conditions and the following disclaimer in the documentation
  18:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c ****  *    and/or other materials provided with the distribution.
  19:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c ****  *
  20:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c ****  * 3. The name of Atmel may not be used to endorse or promote products derived
  21:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c ****  *    from this software without specific prior written permission.
  22:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c ****  *
  23:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c ****  * 4. This software may only be redistributed and used in connection with an
  24:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c ****  *    Atmel microcontroller product.
  25:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c ****  *
  26:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c ****  * THIS SOFTWARE IS PROVIDED BY ATMEL "AS IS" AND ANY EXPRESS OR IMPLIED
  27:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c ****  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
  28:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c ****  * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE
  29:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c ****  * EXPRESSLY AND SPECIFICALLY DISCLAIMED. IN NO EVENT SHALL ATMEL BE LIABLE FOR
  30:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c ****  * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  31:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c ****  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
  32:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c ****  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
  33:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c ****  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
  34:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c ****  * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
  35:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c ****  * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  36:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c ****  * POSSIBILITY OF SUCH DAMAGE.
  37:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c ****  *
  38:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c ****  * \asf_license_stop
  39:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c ****  *
  40:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c ****  *
  41:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c ****  */
  42:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 
  43:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** #ifdef PHY_ATMEGARFA1
  44:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 
  45:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** /*- Includes ---------------------------------------------------------------*/
  46:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** #include "phy.h"
  47:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** #include "delay.h"
  48:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** #include "sal.h"
  49:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** #include "atmegarfa1.h"
  50:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 
  51:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** /*- Definitions ------------------------------------------------------------*/
  52:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** #define PHY_CRC_SIZE          2
  53:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** #define IRQ_CLEAR_VALUE       0xff
  54:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** /*- Types ------------------------------------------------------------------*/
  55:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** typedef enum {
  56:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 	PHY_STATE_INITIAL,
  57:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 	PHY_STATE_IDLE,
  58:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 	PHY_STATE_SLEEP,
  59:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 	PHY_STATE_TX_WAIT_END,
  60:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** } PhyState_t;
  61:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 
  62:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** /*- Prototypes -------------------------------------------------------------*/
  63:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** static void phyTrxSetState(uint8_t state);
  64:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** static void phySetRxState(void);
  65:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 
  66:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** /*- Variables --------------------------------------------------------------*/
  67:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** static PhyState_t phyState = PHY_STATE_INITIAL;
  68:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** static uint8_t phyRxBuffer[128];
  69:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** static bool phyRxState;
  70:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 
  71:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** /*- Implementations --------------------------------------------------------*/
  72:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 
  73:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** /*************************************************************************//**
  74:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** *****************************************************************************/
  75:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** void PHY_Init(void)
  76:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** {
 257               		.loc 3 76 0
 258               		.cfi_startproc
 259 0126 0F93      		push r16
 260               	.LCFI4:
 261               		.cfi_def_cfa_offset 3
 262               		.cfi_offset 16, -2
 263 0128 1F93      		push r17
 264               	.LCFI5:
 265               		.cfi_def_cfa_offset 4
 266               		.cfi_offset 17, -3
 267 012a CF93      		push r28
 268               	.LCFI6:
 269               		.cfi_def_cfa_offset 5
 270               		.cfi_offset 28, -4
 271 012c DF93      		push r29
 272               	.LCFI7:
 273               		.cfi_def_cfa_offset 6
 274               		.cfi_offset 29, -5
 275 012e CDB7      		in r28,__SP_L__
 276 0130 DEB7      		in r29,__SP_H__
 277               	.LCFI8:
 278               		.cfi_def_cfa_register 28
 279               	/* prologue: function */
 280               	/* frame size = 0 */
 281               	/* stack size = 4 */
 282               	.L__stack_usage = 4
  77:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 	sysclk_enable_peripheral_clock(&TRX_CTRL_0);
 283               		.loc 3 77 0
 284 0132 83E4      		ldi r24,lo8(67)
 285 0134 91E0      		ldi r25,lo8(1)
 286 0136 0E94 0000 		call sysclk_enable_peripheral_clock
  78:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 
  79:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 	TRXPR_REG_s.trxrst = 1;
 287               		.loc 3 79 0
 288 013a 89E3      		ldi r24,lo8(57)
 289 013c 91E0      		ldi r25,lo8(1)
 290 013e FC01      		movw r30,r24
 291 0140 2081      		ld r18,Z
 292 0142 2160      		ori r18,lo8(1)
 293 0144 FC01      		movw r30,r24
 294 0146 2083      		st Z,r18
  80:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 
  81:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 	phyRxState = false;
 295               		.loc 3 81 0
 296 0148 1092 0000 		sts phyRxState,__zero_reg__
  82:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 	phyState = PHY_STATE_IDLE;
 297               		.loc 3 82 0
 298 014c 81E0      		ldi r24,lo8(1)
 299 014e 8093 0000 		sts phyState,r24
  83:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 
  84:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 	phyTrxSetState(TRX_CMD_TRX_OFF);
 300               		.loc 3 84 0
 301 0152 88E0      		ldi r24,lo8(8)
 302 0154 0E94 0000 		call phyTrxSetState
  85:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 
  86:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 	TRX_CTRL_2_REG_s.rxSafeMode = 1;
 303               		.loc 3 86 0
 304 0158 8CE4      		ldi r24,lo8(76)
 305 015a 91E0      		ldi r25,lo8(1)
 306 015c FC01      		movw r30,r24
 307 015e 2081      		ld r18,Z
 308 0160 2068      		ori r18,lo8(-128)
 309 0162 FC01      		movw r30,r24
 310 0164 2083      		st Z,r18
  87:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 
  88:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** #ifdef PHY_ENABLE_RANDOM_NUMBER_GENERATOR
  89:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 	CSMA_SEED_0_REG = (uint8_t)PHY_RandomReq();
 311               		.loc 3 89 0
 312 0166 0DE6      		ldi r16,lo8(109)
 313 0168 11E0      		ldi r17,lo8(1)
 314 016a 0E94 0000 		call PHY_RandomReq
 315 016e F801      		movw r30,r16
 316 0170 8083      		st Z,r24
  90:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** #endif
  91:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 
  92:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** #if (ANTENNA_DIVERSITY == 1)
  93:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 	ANT_DIV_REG_s.antCtrl = 2;
 317               		.loc 3 93 0
 318 0172 8DE4      		ldi r24,lo8(77)
 319 0174 91E0      		ldi r25,lo8(1)
 320 0176 FC01      		movw r30,r24
 321 0178 2081      		ld r18,Z
 322 017a 2C7F      		andi r18,lo8(-4)
 323 017c 2260      		ori r18,lo8(2)
 324 017e FC01      		movw r30,r24
 325 0180 2083      		st Z,r18
  94:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 	RX_CTRL_REG_s.pdtThres = 0x03;
 326               		.loc 3 94 0
 327 0182 8AE4      		ldi r24,lo8(74)
 328 0184 91E0      		ldi r25,lo8(1)
 329 0186 FC01      		movw r30,r24
 330 0188 2081      		ld r18,Z
 331 018a 207F      		andi r18,lo8(-16)
 332 018c 2360      		ori r18,lo8(3)
 333 018e FC01      		movw r30,r24
 334 0190 2083      		st Z,r18
  95:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 	ANT_DIV_REG_s.antDivEn = 1;
 335               		.loc 3 95 0
 336 0192 8DE4      		ldi r24,lo8(77)
 337 0194 91E0      		ldi r25,lo8(1)
 338 0196 FC01      		movw r30,r24
 339 0198 2081      		ld r18,Z
 340 019a 2860      		ori r18,lo8(8)
 341 019c FC01      		movw r30,r24
 342 019e 2083      		st Z,r18
  96:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 	ANT_DIV_REG_s.antExtSwEn = 1;
 343               		.loc 3 96 0
 344 01a0 8DE4      		ldi r24,lo8(77)
 345 01a2 91E0      		ldi r25,lo8(1)
 346 01a4 FC01      		movw r30,r24
 347 01a6 2081      		ld r18,Z
 348 01a8 2460      		ori r18,lo8(4)
 349 01aa FC01      		movw r30,r24
 350 01ac 2083      		st Z,r18
  97:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** #else
  98:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 	#if (ANTENNA_DEFAULT != 0)
  99:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 		ANT_DIV_REG_s.antExtSwEn = 1;
 100:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 		ANT_DIV_REG_s.antCtrl = ANTENNA_DEFAULT;
 101:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 	#endif // ANTENNA_DEFAULT
 102:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** #endif // ANTENNA_DIVERSITY
 103:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** #ifdef EXT_RF_FRONT_END_CTRL
 104:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 	TRX_CTRL_1_REG_s.paExtEn = 1;
 351               		.loc 3 104 0
 352 01ae 84E4      		ldi r24,lo8(68)
 353 01b0 91E0      		ldi r25,lo8(1)
 354 01b2 FC01      		movw r30,r24
 355 01b4 2081      		ld r18,Z
 356 01b6 2068      		ori r18,lo8(-128)
 357 01b8 FC01      		movw r30,r24
 358 01ba 2083      		st Z,r18
 105:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** #endif // EXT_RF_FRONT_END_CTRL
 106:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** }
 359               		.loc 3 106 0
 360 01bc 0000      		nop
 361               	/* epilogue start */
 362 01be DF91      		pop r29
 363 01c0 CF91      		pop r28
 364 01c2 1F91      		pop r17
 365 01c4 0F91      		pop r16
 366 01c6 0895      		ret
 367               		.cfi_endproc
 368               	.LFE75:
 370               	.global	PHY_SetTdmaMode
 372               	PHY_SetTdmaMode:
 373               	.LFB76:
 107:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 
 108:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** void PHY_SetTdmaMode(bool mode)
 109:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** {
 374               		.loc 3 109 0
 375               		.cfi_startproc
 376 01c8 CF93      		push r28
 377               	.LCFI9:
 378               		.cfi_def_cfa_offset 3
 379               		.cfi_offset 28, -2
 380 01ca DF93      		push r29
 381               	.LCFI10:
 382               		.cfi_def_cfa_offset 4
 383               		.cfi_offset 29, -3
 384 01cc 1F92      		push __zero_reg__
 385               	.LCFI11:
 386               		.cfi_def_cfa_offset 5
 387 01ce CDB7      		in r28,__SP_L__
 388 01d0 DEB7      		in r29,__SP_H__
 389               	.LCFI12:
 390               		.cfi_def_cfa_register 28
 391               	/* prologue: function */
 392               	/* frame size = 1 */
 393               	/* stack size = 3 */
 394               	.L__stack_usage = 3
 395 01d2 8983      		std Y+1,r24
 110:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 	if(mode)
 396               		.loc 3 110 0
 397 01d4 8981      		ldd r24,Y+1
 398 01d6 8823      		tst r24
 399 01d8 01F0      		breq .L21
 111:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 	{
 112:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 		XAH_CTRL_0_REG_s.maxFrameRetries = 0;
 400               		.loc 3 112 0
 401 01da 8CE6      		ldi r24,lo8(108)
 402 01dc 91E0      		ldi r25,lo8(1)
 403 01de FC01      		movw r30,r24
 404 01e0 2081      		ld r18,Z
 405 01e2 2F70      		andi r18,lo8(15)
 406 01e4 FC01      		movw r30,r24
 407 01e6 2083      		st Z,r18
 113:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 		XAH_CTRL_0_REG_s.maxCsmaRetries = 7;
 408               		.loc 3 113 0
 409 01e8 8CE6      		ldi r24,lo8(108)
 410 01ea 91E0      		ldi r25,lo8(1)
 411 01ec FC01      		movw r30,r24
 412 01ee 2081      		ld r18,Z
 413 01f0 2E60      		ori r18,lo8(14)
 414 01f2 FC01      		movw r30,r24
 415 01f4 2083      		st Z,r18
 114:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 	
 115:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 		CSMA_SEED_1_REG_s.aackDisAck = 1;	// Disable ACK even if requested		
 416               		.loc 3 115 0
 417 01f6 8EE6      		ldi r24,lo8(110)
 418 01f8 91E0      		ldi r25,lo8(1)
 419 01fa FC01      		movw r30,r24
 420 01fc 2081      		ld r18,Z
 421 01fe 2061      		ori r18,lo8(16)
 422 0200 FC01      		movw r30,r24
 423 0202 2083      		st Z,r18
 116:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 	}
 117:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 	else
 118:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 	{
 119:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 		XAH_CTRL_0_REG_s.maxFrameRetries = 3;
 120:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 		XAH_CTRL_0_REG_s.maxCsmaRetries = 4;
 121:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 		
 122:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 		CSMA_SEED_1_REG_s.aackDisAck = 0;
 123:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 	}
 124:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** }
 424               		.loc 3 124 0
 425 0204 00C0      		rjmp .L23
 426               	.L21:
 119:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 		XAH_CTRL_0_REG_s.maxCsmaRetries = 4;
 427               		.loc 3 119 0
 428 0206 8CE6      		ldi r24,lo8(108)
 429 0208 91E0      		ldi r25,lo8(1)
 430 020a FC01      		movw r30,r24
 431 020c 2081      		ld r18,Z
 432 020e 2F70      		andi r18,lo8(15)
 433 0210 2063      		ori r18,lo8(48)
 434 0212 FC01      		movw r30,r24
 435 0214 2083      		st Z,r18
 120:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 		
 436               		.loc 3 120 0
 437 0216 8CE6      		ldi r24,lo8(108)
 438 0218 91E0      		ldi r25,lo8(1)
 439 021a FC01      		movw r30,r24
 440 021c 2081      		ld r18,Z
 441 021e 217F      		andi r18,lo8(-15)
 442 0220 2860      		ori r18,lo8(8)
 443 0222 FC01      		movw r30,r24
 444 0224 2083      		st Z,r18
 122:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 	}
 445               		.loc 3 122 0
 446 0226 8EE6      		ldi r24,lo8(110)
 447 0228 91E0      		ldi r25,lo8(1)
 448 022a FC01      		movw r30,r24
 449 022c 2081      		ld r18,Z
 450 022e 2F7E      		andi r18,lo8(-17)
 451 0230 FC01      		movw r30,r24
 452 0232 2083      		st Z,r18
 453               	.L23:
 454               		.loc 3 124 0
 455 0234 0000      		nop
 456               	/* epilogue start */
 457 0236 0F90      		pop __tmp_reg__
 458 0238 DF91      		pop r29
 459 023a CF91      		pop r28
 460 023c 0895      		ret
 461               		.cfi_endproc
 462               	.LFE76:
 464               	.global	PHY_SetPromiscuousMode
 466               	PHY_SetPromiscuousMode:
 467               	.LFB77:
 125:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 
 126:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** void PHY_SetPromiscuousMode(bool mode)
 127:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** {
 468               		.loc 3 127 0
 469               		.cfi_startproc
 470 023e CF93      		push r28
 471               	.LCFI13:
 472               		.cfi_def_cfa_offset 3
 473               		.cfi_offset 28, -2
 474 0240 DF93      		push r29
 475               	.LCFI14:
 476               		.cfi_def_cfa_offset 4
 477               		.cfi_offset 29, -3
 478 0242 CDB7      		in r28,__SP_L__
 479 0244 DEB7      		in r29,__SP_H__
 480               	.LCFI15:
 481               		.cfi_def_cfa_register 28
 482 0246 2997      		sbiw r28,9
 483               	.LCFI16:
 484               		.cfi_def_cfa_offset 13
 485 0248 0FB6      		in __tmp_reg__,__SREG__
 486 024a F894      		cli
 487 024c DEBF      		out __SP_H__,r29
 488 024e 0FBE      		out __SREG__,__tmp_reg__
 489 0250 CDBF      		out __SP_L__,r28
 490               	/* prologue: function */
 491               	/* frame size = 9 */
 492               	/* stack size = 11 */
 493               	.L__stack_usage = 11
 494 0252 8987      		std Y+9,r24
 128:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 	uint8_t ieee_address[] = { 0, 0, 0, 0, 0, 0, 0, 0 };
 495               		.loc 3 128 0
 496 0254 28E0      		ldi r18,lo8(8)
 497 0256 CE01      		movw r24,r28
 498 0258 0196      		adiw r24,1
 499 025a FC01      		movw r30,r24
 500 025c 322F      		mov r19,r18
 501               		0:
 502 025e 1192      		st Z+,__zero_reg__
 503 0260 3A95      		dec r19
 504 0262 01F4      		brne 0b
 129:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 
 130:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 	if(mode)
 505               		.loc 3 130 0
 506 0264 8985      		ldd r24,Y+9
 507 0266 8823      		tst r24
 508 0268 01F0      		breq .L25
 131:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 	{
 132:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 		PHY_SetShortAddr(0);
 509               		.loc 3 132 0
 510 026a 80E0      		ldi r24,0
 511 026c 90E0      		ldi r25,0
 512 026e 0E94 0000 		call PHY_SetShortAddr
 133:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 		PHY_SetPanId(0);
 513               		.loc 3 133 0
 514 0272 80E0      		ldi r24,0
 515 0274 90E0      		ldi r25,0
 516 0276 0E94 0000 		call PHY_SetPanId
 134:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 		PHY_SetIEEEAddr(ieee_address);
 517               		.loc 3 134 0
 518 027a CE01      		movw r24,r28
 519 027c 0196      		adiw r24,1
 520 027e 0E94 0000 		call PHY_SetIEEEAddr
 135:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 
 136:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** // AACK_UPLD_RES_FT = 1, AACK_FLT_RES_FT = 0:
 137:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** //	Any non-corrupted frame with a reserved frame type is indicated by a
 138:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** //	TRX24_RX_END interrupt. No further address filtering is applied on those frames.
 139:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** //	A TRX24_AMI interrupt is never generated and the acknowledgment subfield is
 140:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** //	ignored.
 141:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 
 142:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 		XAH_CTRL_1_REG_s.aackPromMode = 1;	// Enable promiscuous mode
 521               		.loc 3 142 0
 522 0282 87E5      		ldi r24,lo8(87)
 523 0284 91E0      		ldi r25,lo8(1)
 524 0286 FC01      		movw r30,r24
 525 0288 2081      		ld r18,Z
 526 028a 2260      		ori r18,lo8(2)
 527 028c FC01      		movw r30,r24
 528 028e 2083      		st Z,r18
 143:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 		XAH_CTRL_1_REG_s.aackUpldResFt = 1;	// Enable reserved frame type reception ; this was changed to
 529               		.loc 3 143 0
 530 0290 87E5      		ldi r24,lo8(87)
 531 0292 91E0      		ldi r25,lo8(1)
 532 0294 FC01      		movw r30,r24
 533 0296 2081      		ld r18,Z
 534 0298 2061      		ori r18,lo8(16)
 535 029a FC01      		movw r30,r24
 536 029c 2083      		st Z,r18
 144:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c ****                                         // so that the addres isn't checked by filter
 145:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 		XAH_CTRL_1_REG_s.aackFltrResFt = 0;	// Disable filter of reserved frame types
 537               		.loc 3 145 0
 538 029e 87E5      		ldi r24,lo8(87)
 539 02a0 91E0      		ldi r25,lo8(1)
 540 02a2 FC01      		movw r30,r24
 541 02a4 2081      		ld r18,Z
 542 02a6 2F7D      		andi r18,lo8(-33)
 543 02a8 FC01      		movw r30,r24
 544 02aa 2083      		st Z,r18
 146:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 		CSMA_SEED_1_REG_s.aackDisAck = 1;		// Disable generation of acknowledgment
 545               		.loc 3 146 0
 546 02ac 8EE6      		ldi r24,lo8(110)
 547 02ae 91E0      		ldi r25,lo8(1)
 548 02b0 FC01      		movw r30,r24
 549 02b2 2081      		ld r18,Z
 550 02b4 2061      		ori r18,lo8(16)
 551 02b6 FC01      		movw r30,r24
 552 02b8 2083      		st Z,r18
 147:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 	}
 148:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 	else
 149:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 	{
 150:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 		XAH_CTRL_1_REG = 0;
 151:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 		CSMA_SEED_1_REG_s.aackDisAck = 0;
 152:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 	}
 153:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** }
 553               		.loc 3 153 0
 554 02ba 00C0      		rjmp .L27
 555               	.L25:
 150:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 		CSMA_SEED_1_REG_s.aackDisAck = 0;
 556               		.loc 3 150 0
 557 02bc 87E5      		ldi r24,lo8(87)
 558 02be 91E0      		ldi r25,lo8(1)
 559 02c0 FC01      		movw r30,r24
 560 02c2 1082      		st Z,__zero_reg__
 151:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 	}
 561               		.loc 3 151 0
 562 02c4 8EE6      		ldi r24,lo8(110)
 563 02c6 91E0      		ldi r25,lo8(1)
 564 02c8 FC01      		movw r30,r24
 565 02ca 2081      		ld r18,Z
 566 02cc 2F7E      		andi r18,lo8(-17)
 567 02ce FC01      		movw r30,r24
 568 02d0 2083      		st Z,r18
 569               	.L27:
 570               		.loc 3 153 0
 571 02d2 0000      		nop
 572               	/* epilogue start */
 573 02d4 2996      		adiw r28,9
 574 02d6 0FB6      		in __tmp_reg__,__SREG__
 575 02d8 F894      		cli
 576 02da DEBF      		out __SP_H__,r29
 577 02dc 0FBE      		out __SREG__,__tmp_reg__
 578 02de CDBF      		out __SP_L__,r28
 579 02e0 DF91      		pop r29
 580 02e2 CF91      		pop r28
 581 02e4 0895      		ret
 582               		.cfi_endproc
 583               	.LFE77:
 585               	.global	PHY_SetRxState
 587               	PHY_SetRxState:
 588               	.LFB78:
 154:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 
 155:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** /*************************************************************************//**
 156:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** *****************************************************************************/
 157:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** void PHY_SetRxState(bool rx)
 158:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** {
 589               		.loc 3 158 0
 590               		.cfi_startproc
 591 02e6 CF93      		push r28
 592               	.LCFI17:
 593               		.cfi_def_cfa_offset 3
 594               		.cfi_offset 28, -2
 595 02e8 DF93      		push r29
 596               	.LCFI18:
 597               		.cfi_def_cfa_offset 4
 598               		.cfi_offset 29, -3
 599 02ea 1F92      		push __zero_reg__
 600               	.LCFI19:
 601               		.cfi_def_cfa_offset 5
 602 02ec CDB7      		in r28,__SP_L__
 603 02ee DEB7      		in r29,__SP_H__
 604               	.LCFI20:
 605               		.cfi_def_cfa_register 28
 606               	/* prologue: function */
 607               	/* frame size = 1 */
 608               	/* stack size = 3 */
 609               	.L__stack_usage = 3
 610 02f0 8983      		std Y+1,r24
 159:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 	phyRxState = rx;
 611               		.loc 3 159 0
 612 02f2 8981      		ldd r24,Y+1
 613 02f4 8093 0000 		sts phyRxState,r24
 160:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 	phySetRxState();
 614               		.loc 3 160 0
 615 02f8 0E94 0000 		call phySetRxState
 161:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** }
 616               		.loc 3 161 0
 617 02fc 0000      		nop
 618               	/* epilogue start */
 619 02fe 0F90      		pop __tmp_reg__
 620 0300 DF91      		pop r29
 621 0302 CF91      		pop r28
 622 0304 0895      		ret
 623               		.cfi_endproc
 624               	.LFE78:
 626               	.global	PHY_SetChannel
 628               	PHY_SetChannel:
 629               	.LFB79:
 162:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 
 163:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** /*************************************************************************//**
 164:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** *****************************************************************************/
 165:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** void PHY_SetChannel(uint8_t channel)
 166:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** {
 630               		.loc 3 166 0
 631               		.cfi_startproc
 632 0306 CF93      		push r28
 633               	.LCFI21:
 634               		.cfi_def_cfa_offset 3
 635               		.cfi_offset 28, -2
 636 0308 DF93      		push r29
 637               	.LCFI22:
 638               		.cfi_def_cfa_offset 4
 639               		.cfi_offset 29, -3
 640 030a 1F92      		push __zero_reg__
 641               	.LCFI23:
 642               		.cfi_def_cfa_offset 5
 643 030c CDB7      		in r28,__SP_L__
 644 030e DEB7      		in r29,__SP_H__
 645               	.LCFI24:
 646               		.cfi_def_cfa_register 28
 647               	/* prologue: function */
 648               	/* frame size = 1 */
 649               	/* stack size = 3 */
 650               	.L__stack_usage = 3
 651 0310 8983      		std Y+1,r24
 167:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 	PHY_CC_CCA_REG_s.channel = channel;
 652               		.loc 3 167 0
 653 0312 88E4      		ldi r24,lo8(72)
 654 0314 91E0      		ldi r25,lo8(1)
 655 0316 2981      		ldd r18,Y+1
 656 0318 2F71      		andi r18,lo8(31)
 657 031a 2F71      		andi r18,lo8(31)
 658 031c FC01      		movw r30,r24
 659 031e 3081      		ld r19,Z
 660 0320 307E      		andi r19,lo8(-32)
 661 0322 232B      		or r18,r19
 662 0324 FC01      		movw r30,r24
 663 0326 2083      		st Z,r18
 168:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** }
 664               		.loc 3 168 0
 665 0328 0000      		nop
 666               	/* epilogue start */
 667 032a 0F90      		pop __tmp_reg__
 668 032c DF91      		pop r29
 669 032e CF91      		pop r28
 670 0330 0895      		ret
 671               		.cfi_endproc
 672               	.LFE79:
 674               	.global	PHY_SetPanId
 676               	PHY_SetPanId:
 677               	.LFB80:
 169:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 
 170:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** /*************************************************************************//**
 171:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** *****************************************************************************/
 172:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** void PHY_SetPanId(uint16_t panId)
 173:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** {
 678               		.loc 3 173 0
 679               		.cfi_startproc
 680 0332 CF93      		push r28
 681               	.LCFI25:
 682               		.cfi_def_cfa_offset 3
 683               		.cfi_offset 28, -2
 684 0334 DF93      		push r29
 685               	.LCFI26:
 686               		.cfi_def_cfa_offset 4
 687               		.cfi_offset 29, -3
 688 0336 00D0      		rcall .
 689 0338 00D0      		rcall .
 690               	.LCFI27:
 691               		.cfi_def_cfa_offset 8
 692 033a CDB7      		in r28,__SP_L__
 693 033c DEB7      		in r29,__SP_H__
 694               	.LCFI28:
 695               		.cfi_def_cfa_register 28
 696               	/* prologue: function */
 697               	/* frame size = 4 */
 698               	/* stack size = 6 */
 699               	.L__stack_usage = 6
 700 033e 9C83      		std Y+4,r25
 701 0340 8B83      		std Y+3,r24
 174:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 	uint8_t *d = (uint8_t *)&panId;
 702               		.loc 3 174 0
 703 0342 CE01      		movw r24,r28
 704 0344 0396      		adiw r24,3
 705 0346 9A83      		std Y+2,r25
 706 0348 8983      		std Y+1,r24
 175:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 
 176:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 	PAN_ID_0_REG = d[0];
 707               		.loc 3 176 0
 708 034a 82E6      		ldi r24,lo8(98)
 709 034c 91E0      		ldi r25,lo8(1)
 710 034e 2981      		ldd r18,Y+1
 711 0350 3A81      		ldd r19,Y+2
 712 0352 F901      		movw r30,r18
 713 0354 2081      		ld r18,Z
 714 0356 FC01      		movw r30,r24
 715 0358 2083      		st Z,r18
 177:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 	PAN_ID_1_REG = d[1];
 716               		.loc 3 177 0
 717 035a 83E6      		ldi r24,lo8(99)
 718 035c 91E0      		ldi r25,lo8(1)
 719 035e 2981      		ldd r18,Y+1
 720 0360 3A81      		ldd r19,Y+2
 721 0362 F901      		movw r30,r18
 722 0364 2181      		ldd r18,Z+1
 723 0366 FC01      		movw r30,r24
 724 0368 2083      		st Z,r18
 178:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** }
 725               		.loc 3 178 0
 726 036a 0000      		nop
 727               	/* epilogue start */
 728 036c 0F90      		pop __tmp_reg__
 729 036e 0F90      		pop __tmp_reg__
 730 0370 0F90      		pop __tmp_reg__
 731 0372 0F90      		pop __tmp_reg__
 732 0374 DF91      		pop r29
 733 0376 CF91      		pop r28
 734 0378 0895      		ret
 735               		.cfi_endproc
 736               	.LFE80:
 738               	.global	PHY_SetShortAddr
 740               	PHY_SetShortAddr:
 741               	.LFB81:
 179:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 
 180:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** /*************************************************************************//**
 181:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** *****************************************************************************/
 182:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** void PHY_SetShortAddr(uint16_t addr)
 183:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** {
 742               		.loc 3 183 0
 743               		.cfi_startproc
 744 037a CF93      		push r28
 745               	.LCFI29:
 746               		.cfi_def_cfa_offset 3
 747               		.cfi_offset 28, -2
 748 037c DF93      		push r29
 749               	.LCFI30:
 750               		.cfi_def_cfa_offset 4
 751               		.cfi_offset 29, -3
 752 037e 00D0      		rcall .
 753 0380 00D0      		rcall .
 754               	.LCFI31:
 755               		.cfi_def_cfa_offset 8
 756 0382 CDB7      		in r28,__SP_L__
 757 0384 DEB7      		in r29,__SP_H__
 758               	.LCFI32:
 759               		.cfi_def_cfa_register 28
 760               	/* prologue: function */
 761               	/* frame size = 4 */
 762               	/* stack size = 6 */
 763               	.L__stack_usage = 6
 764 0386 9C83      		std Y+4,r25
 765 0388 8B83      		std Y+3,r24
 184:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 	uint8_t *d = (uint8_t *)&addr;
 766               		.loc 3 184 0
 767 038a CE01      		movw r24,r28
 768 038c 0396      		adiw r24,3
 769 038e 9A83      		std Y+2,r25
 770 0390 8983      		std Y+1,r24
 185:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 
 186:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 	SHORT_ADDR_0_REG = d[0];
 771               		.loc 3 186 0
 772 0392 80E6      		ldi r24,lo8(96)
 773 0394 91E0      		ldi r25,lo8(1)
 774 0396 2981      		ldd r18,Y+1
 775 0398 3A81      		ldd r19,Y+2
 776 039a F901      		movw r30,r18
 777 039c 2081      		ld r18,Z
 778 039e FC01      		movw r30,r24
 779 03a0 2083      		st Z,r18
 187:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 	SHORT_ADDR_1_REG = d[1];
 780               		.loc 3 187 0
 781 03a2 81E6      		ldi r24,lo8(97)
 782 03a4 91E0      		ldi r25,lo8(1)
 783 03a6 2981      		ldd r18,Y+1
 784 03a8 3A81      		ldd r19,Y+2
 785 03aa F901      		movw r30,r18
 786 03ac 2181      		ldd r18,Z+1
 787 03ae FC01      		movw r30,r24
 788 03b0 2083      		st Z,r18
 188:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 
 189:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** #ifndef PHY_ENABLE_RANDOM_NUMBER_GENERATOR
 190:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 	CSMA_SEED_0_REG = d[0] + d[1];
 191:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** #endif
 192:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** }
 789               		.loc 3 192 0
 790 03b2 0000      		nop
 791               	/* epilogue start */
 792 03b4 0F90      		pop __tmp_reg__
 793 03b6 0F90      		pop __tmp_reg__
 794 03b8 0F90      		pop __tmp_reg__
 795 03ba 0F90      		pop __tmp_reg__
 796 03bc DF91      		pop r29
 797 03be CF91      		pop r28
 798 03c0 0895      		ret
 799               		.cfi_endproc
 800               	.LFE81:
 802               	.global	PHY_SetTxPower
 804               	PHY_SetTxPower:
 805               	.LFB82:
 193:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 
 194:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** /*************************************************************************//**
 195:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** *****************************************************************************/
 196:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** void PHY_SetTxPower(uint8_t txPower)
 197:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** {
 806               		.loc 3 197 0
 807               		.cfi_startproc
 808 03c2 CF93      		push r28
 809               	.LCFI33:
 810               		.cfi_def_cfa_offset 3
 811               		.cfi_offset 28, -2
 812 03c4 DF93      		push r29
 813               	.LCFI34:
 814               		.cfi_def_cfa_offset 4
 815               		.cfi_offset 29, -3
 816 03c6 1F92      		push __zero_reg__
 817               	.LCFI35:
 818               		.cfi_def_cfa_offset 5
 819 03c8 CDB7      		in r28,__SP_L__
 820 03ca DEB7      		in r29,__SP_H__
 821               	.LCFI36:
 822               		.cfi_def_cfa_register 28
 823               	/* prologue: function */
 824               	/* frame size = 1 */
 825               	/* stack size = 3 */
 826               	.L__stack_usage = 3
 827 03cc 8983      		std Y+1,r24
 198:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 	PHY_TX_PWR_REG_s.txPwr = txPower;
 828               		.loc 3 198 0
 829 03ce 85E4      		ldi r24,lo8(69)
 830 03d0 91E0      		ldi r25,lo8(1)
 831 03d2 2981      		ldd r18,Y+1
 832 03d4 2F70      		andi r18,lo8(15)
 833 03d6 2F70      		andi r18,lo8(15)
 834 03d8 FC01      		movw r30,r24
 835 03da 3081      		ld r19,Z
 836 03dc 307F      		andi r19,lo8(-16)
 837 03de 232B      		or r18,r19
 838 03e0 FC01      		movw r30,r24
 839 03e2 2083      		st Z,r18
 199:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** }
 840               		.loc 3 199 0
 841 03e4 0000      		nop
 842               	/* epilogue start */
 843 03e6 0F90      		pop __tmp_reg__
 844 03e8 DF91      		pop r29
 845 03ea CF91      		pop r28
 846 03ec 0895      		ret
 847               		.cfi_endproc
 848               	.LFE82:
 850               	.global	PHY_Sleep
 852               	PHY_Sleep:
 853               	.LFB83:
 200:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 
 201:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** /*************************************************************************//**
 202:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** *****************************************************************************/
 203:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** void PHY_Sleep(void)
 204:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** {
 854               		.loc 3 204 0
 855               		.cfi_startproc
 856 03ee CF93      		push r28
 857               	.LCFI37:
 858               		.cfi_def_cfa_offset 3
 859               		.cfi_offset 28, -2
 860 03f0 DF93      		push r29
 861               	.LCFI38:
 862               		.cfi_def_cfa_offset 4
 863               		.cfi_offset 29, -3
 864 03f2 CDB7      		in r28,__SP_L__
 865 03f4 DEB7      		in r29,__SP_H__
 866               	.LCFI39:
 867               		.cfi_def_cfa_register 28
 868               	/* prologue: function */
 869               	/* frame size = 0 */
 870               	/* stack size = 2 */
 871               	.L__stack_usage = 2
 205:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 	if(phyState != PHY_STATE_SLEEP)
 872               		.loc 3 205 0
 873 03f6 8091 0000 		lds r24,phyState
 874 03fa 8230      		cpi r24,lo8(2)
 875 03fc 01F0      		breq .L34
 206:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 	{
 207:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 		phyTrxSetState(TRX_CMD_TRX_OFF);
 876               		.loc 3 207 0
 877 03fe 88E0      		ldi r24,lo8(8)
 878 0400 0E94 0000 		call phyTrxSetState
 208:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 		TRXPR_REG_s.slptr = 1;
 879               		.loc 3 208 0
 880 0404 89E3      		ldi r24,lo8(57)
 881 0406 91E0      		ldi r25,lo8(1)
 882 0408 FC01      		movw r30,r24
 883 040a 2081      		ld r18,Z
 884 040c 2260      		ori r18,lo8(2)
 885 040e FC01      		movw r30,r24
 886 0410 2083      		st Z,r18
 209:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 		phyState = PHY_STATE_SLEEP;		
 887               		.loc 3 209 0
 888 0412 82E0      		ldi r24,lo8(2)
 889 0414 8093 0000 		sts phyState,r24
 890               	.L34:
 210:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 	}
 211:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 	
 212:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** #if (ANTENNA_DIVERSITY == 1)
 213:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 	ANT_DIV_REG_s.antExtSwEn = 0;
 891               		.loc 3 213 0
 892 0418 8DE4      		ldi r24,lo8(77)
 893 041a 91E0      		ldi r25,lo8(1)
 894 041c FC01      		movw r30,r24
 895 041e 2081      		ld r18,Z
 896 0420 2B7F      		andi r18,lo8(-5)
 897 0422 FC01      		movw r30,r24
 898 0424 2083      		st Z,r18
 214:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 	ANT_DIV_REG_s.antDivEn = 0;
 899               		.loc 3 214 0
 900 0426 8DE4      		ldi r24,lo8(77)
 901 0428 91E0      		ldi r25,lo8(1)
 902 042a FC01      		movw r30,r24
 903 042c 2081      		ld r18,Z
 904 042e 277F      		andi r18,lo8(-9)
 905 0430 FC01      		movw r30,r24
 906 0432 2083      		st Z,r18
 215:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** #else
 216:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 	#if (ANTENNA_DEFAULT != 0)
 217:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 		ANT_DIV_REG_s.antExtSwEn = 0;
 218:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 		ANT_DIV_REG_s.antCtrl = 0;
 219:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 	#endif // ANTENNA_DEFAULT
 220:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** #endif // ANTENNA_DIVERSITY
 221:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** #ifdef EXT_RF_FRONT_END_CTRL
 222:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 	TRX_CTRL_1_REG_s.paExtEn = 0;
 907               		.loc 3 222 0
 908 0434 84E4      		ldi r24,lo8(68)
 909 0436 91E0      		ldi r25,lo8(1)
 910 0438 FC01      		movw r30,r24
 911 043a 2081      		ld r18,Z
 912 043c 2F77      		andi r18,lo8(127)
 913 043e FC01      		movw r30,r24
 914 0440 2083      		st Z,r18
 223:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** #endif // EXT_RF_FRONT_END_CTRL
 224:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** }
 915               		.loc 3 224 0
 916 0442 0000      		nop
 917               	/* epilogue start */
 918 0444 DF91      		pop r29
 919 0446 CF91      		pop r28
 920 0448 0895      		ret
 921               		.cfi_endproc
 922               	.LFE83:
 924               	.global	PHY_Wakeup
 926               	PHY_Wakeup:
 927               	.LFB84:
 225:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 
 226:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** /*************************************************************************//**
 227:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** *****************************************************************************/
 228:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** void PHY_Wakeup(void)
 229:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** {
 928               		.loc 3 229 0
 929               		.cfi_startproc
 930 044a CF93      		push r28
 931               	.LCFI40:
 932               		.cfi_def_cfa_offset 3
 933               		.cfi_offset 28, -2
 934 044c DF93      		push r29
 935               	.LCFI41:
 936               		.cfi_def_cfa_offset 4
 937               		.cfi_offset 29, -3
 938 044e CDB7      		in r28,__SP_L__
 939 0450 DEB7      		in r29,__SP_H__
 940               	.LCFI42:
 941               		.cfi_def_cfa_register 28
 942               	/* prologue: function */
 943               	/* frame size = 0 */
 944               	/* stack size = 2 */
 945               	.L__stack_usage = 2
 230:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 	TRXPR_REG_s.slptr = 0;
 946               		.loc 3 230 0
 947 0452 89E3      		ldi r24,lo8(57)
 948 0454 91E0      		ldi r25,lo8(1)
 949 0456 FC01      		movw r30,r24
 950 0458 2081      		ld r18,Z
 951 045a 2D7F      		andi r18,lo8(-3)
 952 045c FC01      		movw r30,r24
 953 045e 2083      		st Z,r18
 231:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 	phySetRxState();
 954               		.loc 3 231 0
 955 0460 0E94 0000 		call phySetRxState
 232:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 	phyState = PHY_STATE_IDLE;
 956               		.loc 3 232 0
 957 0464 81E0      		ldi r24,lo8(1)
 958 0466 8093 0000 		sts phyState,r24
 233:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** }
 959               		.loc 3 233 0
 960 046a 0000      		nop
 961               	/* epilogue start */
 962 046c DF91      		pop r29
 963 046e CF91      		pop r28
 964 0470 0895      		ret
 965               		.cfi_endproc
 966               	.LFE84:
 968               	.global	PHY_DataReq
 970               	PHY_DataReq:
 971               	.LFB85:
 234:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 
 235:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** /*************************************************************************//**
 236:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** *****************************************************************************/
 237:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** /*
 238:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** void PHY_DataReq(uint8_t *data)
 239:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** {
 240:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 	phyTrxSetState(TRX_CMD_TX_ARET_ON);
 241:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 
 242:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 	TRX_FRAME_BUFFER(0) = data[0] + PHY_CRC_SIZE;
 243:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 	for (uint8_t i = 0; i < data[0]; i++) {
 244:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 		TRX_FRAME_BUFFER(i + 1) = data[i + 1];
 245:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 	}
 246:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 
 247:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 	phyState = PHY_STATE_TX_WAIT_END;
 248:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 	TRX_STATE_REG = TRX_CMD_TX_START;
 249:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** }
 250:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** */
 251:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** void PHY_DataReq(uint8_t *data, uint8_t size)
 252:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** {
 972               		.loc 3 252 0
 973               		.cfi_startproc
 974 0472 CF93      		push r28
 975               	.LCFI43:
 976               		.cfi_def_cfa_offset 3
 977               		.cfi_offset 28, -2
 978 0474 DF93      		push r29
 979               	.LCFI44:
 980               		.cfi_def_cfa_offset 4
 981               		.cfi_offset 29, -3
 982 0476 00D0      		rcall .
 983 0478 00D0      		rcall .
 984               	.LCFI45:
 985               		.cfi_def_cfa_offset 8
 986 047a CDB7      		in r28,__SP_L__
 987 047c DEB7      		in r29,__SP_H__
 988               	.LCFI46:
 989               		.cfi_def_cfa_register 28
 990               	/* prologue: function */
 991               	/* frame size = 4 */
 992               	/* stack size = 6 */
 993               	.L__stack_usage = 6
 994 047e 9B83      		std Y+3,r25
 995 0480 8A83      		std Y+2,r24
 996 0482 6C83      		std Y+4,r22
 253:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c ****   phyTrxSetState(TRX_CMD_TX_ARET_ON);
 997               		.loc 3 253 0
 998 0484 89E1      		ldi r24,lo8(25)
 999 0486 0E94 0000 		call phyTrxSetState
 254:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 
 255:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c ****   IRQ_STATUS_REG = IRQ_CLEAR_VALUE;
 1000               		.loc 3 255 0
 1001 048a 8FE4      		ldi r24,lo8(79)
 1002 048c 91E0      		ldi r25,lo8(1)
 1003 048e 2FEF      		ldi r18,lo8(-1)
 1004 0490 FC01      		movw r30,r24
 1005 0492 2083      		st Z,r18
 256:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 
 257:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c ****   TRX_FRAME_BUFFER(0) = size + PHY_CRC_SIZE;
 1006               		.loc 3 257 0
 1007 0494 80E8      		ldi r24,lo8(-128)
 1008 0496 91E0      		ldi r25,lo8(1)
 1009 0498 2C81      		ldd r18,Y+4
 1010 049a 2E5F      		subi r18,lo8(-(2))
 1011 049c FC01      		movw r30,r24
 1012 049e 2083      		st Z,r18
 1013               	.LBB2:
 258:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c ****   for (uint8_t i = 0; i < size; i++)
 1014               		.loc 3 258 0
 1015 04a0 1982      		std Y+1,__zero_reg__
 1016 04a2 00C0      		rjmp .L37
 1017               	.L38:
 259:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c ****     TRX_FRAME_BUFFER(i+1) = data[i];
 1018               		.loc 3 259 0 discriminator 3
 1019 04a4 8981      		ldd r24,Y+1
 1020 04a6 882F      		mov r24,r24
 1021 04a8 90E0      		ldi r25,0
 1022 04aa 8F57      		subi r24,127
 1023 04ac 9E4F      		sbci r25,-2
 1024 04ae AC01      		movw r20,r24
 1025 04b0 8981      		ldd r24,Y+1
 1026 04b2 882F      		mov r24,r24
 1027 04b4 90E0      		ldi r25,0
 1028 04b6 2A81      		ldd r18,Y+2
 1029 04b8 3B81      		ldd r19,Y+3
 1030 04ba 820F      		add r24,r18
 1031 04bc 931F      		adc r25,r19
 1032 04be FC01      		movw r30,r24
 1033 04c0 8081      		ld r24,Z
 1034 04c2 FA01      		movw r30,r20
 1035 04c4 8083      		st Z,r24
 258:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c ****   for (uint8_t i = 0; i < size; i++)
 1036               		.loc 3 258 0 discriminator 3
 1037 04c6 8981      		ldd r24,Y+1
 1038 04c8 8F5F      		subi r24,lo8(-(1))
 1039 04ca 8983      		std Y+1,r24
 1040               	.L37:
 258:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c ****   for (uint8_t i = 0; i < size; i++)
 1041               		.loc 3 258 0 is_stmt 0 discriminator 1
 1042 04cc 9981      		ldd r25,Y+1
 1043 04ce 8C81      		ldd r24,Y+4
 1044 04d0 9817      		cp r25,r24
 1045 04d2 00F0      		brlo .L38
 1046               	.LBE2:
 260:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 
 261:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c ****   phyState = PHY_STATE_TX_WAIT_END;
 1047               		.loc 3 261 0 is_stmt 1
 1048 04d4 83E0      		ldi r24,lo8(3)
 1049 04d6 8093 0000 		sts phyState,r24
 262:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c ****   TRX_STATE_REG = TRX_CMD_TX_START;
 1050               		.loc 3 262 0
 1051 04da 82E4      		ldi r24,lo8(66)
 1052 04dc 91E0      		ldi r25,lo8(1)
 1053 04de 22E0      		ldi r18,lo8(2)
 1054 04e0 FC01      		movw r30,r24
 1055 04e2 2083      		st Z,r18
 263:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** }
 1056               		.loc 3 263 0
 1057 04e4 0000      		nop
 1058               	/* epilogue start */
 1059 04e6 0F90      		pop __tmp_reg__
 1060 04e8 0F90      		pop __tmp_reg__
 1061 04ea 0F90      		pop __tmp_reg__
 1062 04ec 0F90      		pop __tmp_reg__
 1063 04ee DF91      		pop r29
 1064 04f0 CF91      		pop r28
 1065 04f2 0895      		ret
 1066               		.cfi_endproc
 1067               	.LFE85:
 1069               	.global	PHY_RandomReq
 1071               	PHY_RandomReq:
 1072               	.LFB86:
 264:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 
 265:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 
 266:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** /*************************************************************************//**
 267:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** *****************************************************************************/
 268:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** uint16_t PHY_RandomReq(void)
 269:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** {
 1073               		.loc 3 269 0
 1074               		.cfi_startproc
 1075 04f4 CF93      		push r28
 1076               	.LCFI47:
 1077               		.cfi_def_cfa_offset 3
 1078               		.cfi_offset 28, -2
 1079 04f6 DF93      		push r29
 1080               	.LCFI48:
 1081               		.cfi_def_cfa_offset 4
 1082               		.cfi_offset 29, -3
 1083 04f8 00D0      		rcall .
 1084 04fa 1F92      		push __zero_reg__
 1085               	.LCFI49:
 1086               		.cfi_def_cfa_offset 7
 1087 04fc CDB7      		in r28,__SP_L__
 1088 04fe DEB7      		in r29,__SP_H__
 1089               	.LCFI50:
 1090               		.cfi_def_cfa_register 28
 1091               	/* prologue: function */
 1092               	/* frame size = 3 */
 1093               	/* stack size = 5 */
 1094               	.L__stack_usage = 5
 270:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 	uint16_t rnd = 0;
 1095               		.loc 3 270 0
 1096 0500 1A82      		std Y+2,__zero_reg__
 1097 0502 1982      		std Y+1,__zero_reg__
 271:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 
 272:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 	phyTrxSetState(TRX_CMD_RX_ON);
 1098               		.loc 3 272 0
 1099 0504 86E0      		ldi r24,lo8(6)
 1100 0506 0E94 0000 		call phyTrxSetState
 1101               	.LBB3:
 273:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 
 274:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 	for (uint8_t i = 0; i < 16; i += 2) {
 1102               		.loc 3 274 0
 1103 050a 1B82      		std Y+3,__zero_reg__
 1104 050c 00C0      		rjmp .L40
 1105               	.L41:
 275:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 		delay_us(RANDOM_NUMBER_UPDATE_INTERVAL);
 1106               		.loc 3 275 0 discriminator 3
 1107 050e 62E0      		ldi r22,lo8(2)
 1108 0510 70E0      		ldi r23,0
 1109 0512 80E0      		ldi r24,0
 1110 0514 90E0      		ldi r25,0
 1111 0516 0E94 0000 		call __portable_avr_delay_cycles
 276:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 		rnd |= PHY_RSSI_REG_s.rndValue << i;
 1112               		.loc 3 276 0 discriminator 3
 1113 051a 86E4      		ldi r24,lo8(70)
 1114 051c 91E0      		ldi r25,lo8(1)
 1115 051e FC01      		movw r30,r24
 1116 0520 8081      		ld r24,Z
 1117 0522 8295      		swap r24
 1118 0524 8695      		lsr r24
 1119 0526 8770      		andi r24,lo8(7)
 1120 0528 8370      		andi r24,lo8(3)
 1121 052a 882F      		mov r24,r24
 1122 052c 90E0      		ldi r25,0
 1123 052e 2B81      		ldd r18,Y+3
 1124 0530 222F      		mov r18,r18
 1125 0532 30E0      		ldi r19,0
 1126 0534 00C0      		rjmp 2f
 1127               		1:
 1128 0536 880F      		lsl r24
 1129 0538 991F      		rol r25
 1130               		2:
 1131 053a 2A95      		dec r18
 1132 053c 02F4      		brpl 1b
 1133 053e 9C01      		movw r18,r24
 1134 0540 8981      		ldd r24,Y+1
 1135 0542 9A81      		ldd r25,Y+2
 1136 0544 822B      		or r24,r18
 1137 0546 932B      		or r25,r19
 1138 0548 9A83      		std Y+2,r25
 1139 054a 8983      		std Y+1,r24
 274:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 		delay_us(RANDOM_NUMBER_UPDATE_INTERVAL);
 1140               		.loc 3 274 0 discriminator 3
 1141 054c 8B81      		ldd r24,Y+3
 1142 054e 8E5F      		subi r24,lo8(-(2))
 1143 0550 8B83      		std Y+3,r24
 1144               	.L40:
 274:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 		delay_us(RANDOM_NUMBER_UPDATE_INTERVAL);
 1145               		.loc 3 274 0 is_stmt 0 discriminator 1
 1146 0552 8B81      		ldd r24,Y+3
 1147 0554 8031      		cpi r24,lo8(16)
 1148 0556 00F0      		brlo .L41
 1149               	.LBE3:
 277:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 	}
 278:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 
 279:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 	phySetRxState();
 1150               		.loc 3 279 0 is_stmt 1
 1151 0558 0E94 0000 		call phySetRxState
 280:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 
 281:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 	return rnd;
 1152               		.loc 3 281 0
 1153 055c 8981      		ldd r24,Y+1
 1154 055e 9A81      		ldd r25,Y+2
 1155               	/* epilogue start */
 282:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** }
 1156               		.loc 3 282 0
 1157 0560 0F90      		pop __tmp_reg__
 1158 0562 0F90      		pop __tmp_reg__
 1159 0564 0F90      		pop __tmp_reg__
 1160 0566 DF91      		pop r29
 1161 0568 CF91      		pop r28
 1162 056a 0895      		ret
 1163               		.cfi_endproc
 1164               	.LFE86:
 1166               	.global	PHY_EncryptReq
 1168               	PHY_EncryptReq:
 1169               	.LFB87:
 283:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 
 284:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** /*************************************************************************//**
 285:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** *****************************************************************************/
 286:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** void PHY_EncryptReq(uint8_t *text, uint8_t *key)
 287:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** {
 1170               		.loc 3 287 0
 1171               		.cfi_startproc
 1172 056c CF93      		push r28
 1173               	.LCFI51:
 1174               		.cfi_def_cfa_offset 3
 1175               		.cfi_offset 28, -2
 1176 056e DF93      		push r29
 1177               	.LCFI52:
 1178               		.cfi_def_cfa_offset 4
 1179               		.cfi_offset 29, -3
 1180 0570 00D0      		rcall .
 1181 0572 00D0      		rcall .
 1182               	.LCFI53:
 1183               		.cfi_def_cfa_offset 8
 1184 0574 CDB7      		in r28,__SP_L__
 1185 0576 DEB7      		in r29,__SP_H__
 1186               	.LCFI54:
 1187               		.cfi_def_cfa_register 28
 1188               	/* prologue: function */
 1189               	/* frame size = 4 */
 1190               	/* stack size = 6 */
 1191               	.L__stack_usage = 6
 1192 0578 9A83      		std Y+2,r25
 1193 057a 8983      		std Y+1,r24
 1194 057c 7C83      		std Y+4,r23
 1195 057e 6B83      		std Y+3,r22
 288:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 	sal_aes_setup(key, AES_MODE_ECB, AES_DIR_ENCRYPT);
 1196               		.loc 3 288 0
 1197 0580 8B81      		ldd r24,Y+3
 1198 0582 9C81      		ldd r25,Y+4
 1199 0584 40E0      		ldi r20,0
 1200 0586 60E0      		ldi r22,0
 1201 0588 0E94 0000 		call sal_aes_setup
 289:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 	sal_aes_exec(text);
 1202               		.loc 3 289 0
 1203 058c 8981      		ldd r24,Y+1
 1204 058e 9A81      		ldd r25,Y+2
 1205 0590 0E94 0000 		call sal_aes_exec
 290:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 	sal_aes_read(text);
 1206               		.loc 3 290 0
 1207 0594 8981      		ldd r24,Y+1
 1208 0596 9A81      		ldd r25,Y+2
 1209 0598 0E94 0000 		call sal_aes_read
 291:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** }
 1210               		.loc 3 291 0
 1211 059c 0000      		nop
 1212               	/* epilogue start */
 1213 059e 0F90      		pop __tmp_reg__
 1214 05a0 0F90      		pop __tmp_reg__
 1215 05a2 0F90      		pop __tmp_reg__
 1216 05a4 0F90      		pop __tmp_reg__
 1217 05a6 DF91      		pop r29
 1218 05a8 CF91      		pop r28
 1219 05aa 0895      		ret
 1220               		.cfi_endproc
 1221               	.LFE87:
 1223               	.global	PHY_EdReq
 1225               	PHY_EdReq:
 1226               	.LFB88:
 292:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 
 293:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** /*************************************************************************//**
 294:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** *****************************************************************************/
 295:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** int8_t PHY_EdReq(void)
 296:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** {
 1227               		.loc 3 296 0
 1228               		.cfi_startproc
 1229 05ac CF93      		push r28
 1230               	.LCFI55:
 1231               		.cfi_def_cfa_offset 3
 1232               		.cfi_offset 28, -2
 1233 05ae DF93      		push r29
 1234               	.LCFI56:
 1235               		.cfi_def_cfa_offset 4
 1236               		.cfi_offset 29, -3
 1237 05b0 1F92      		push __zero_reg__
 1238               	.LCFI57:
 1239               		.cfi_def_cfa_offset 5
 1240 05b2 CDB7      		in r28,__SP_L__
 1241 05b4 DEB7      		in r29,__SP_H__
 1242               	.LCFI58:
 1243               		.cfi_def_cfa_register 28
 1244               	/* prologue: function */
 1245               	/* frame size = 1 */
 1246               	/* stack size = 3 */
 1247               	.L__stack_usage = 3
 297:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 	int8_t ed;
 298:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 
 299:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 	phyTrxSetState(TRX_CMD_RX_ON);
 1248               		.loc 3 299 0
 1249 05b6 86E0      		ldi r24,lo8(6)
 1250 05b8 0E94 0000 		call phyTrxSetState
 300:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 
 301:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 	IRQ_STATUS_REG_s.ccaEdDone = 1;
 1251               		.loc 3 301 0
 1252 05bc 8FE4      		ldi r24,lo8(79)
 1253 05be 91E0      		ldi r25,lo8(1)
 1254 05c0 FC01      		movw r30,r24
 1255 05c2 2081      		ld r18,Z
 1256 05c4 2061      		ori r18,lo8(16)
 1257 05c6 FC01      		movw r30,r24
 1258 05c8 2083      		st Z,r18
 302:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 	PHY_ED_LEVEL_REG = 0;
 1259               		.loc 3 302 0
 1260 05ca 87E4      		ldi r24,lo8(71)
 1261 05cc 91E0      		ldi r25,lo8(1)
 1262 05ce FC01      		movw r30,r24
 1263 05d0 1082      		st Z,__zero_reg__
 303:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 	while (0 == IRQ_STATUS_REG_s.ccaEdDone) {
 1264               		.loc 3 303 0
 1265 05d2 0000      		nop
 1266               	.L45:
 1267               		.loc 3 303 0 is_stmt 0 discriminator 1
 1268 05d4 8FE4      		ldi r24,lo8(79)
 1269 05d6 91E0      		ldi r25,lo8(1)
 1270 05d8 FC01      		movw r30,r24
 1271 05da 8081      		ld r24,Z
 1272 05dc 8295      		swap r24
 1273 05de 8170      		andi r24,1
 1274 05e0 8823      		tst r24
 1275 05e2 01F0      		breq .L45
 304:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 	}
 305:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 
 306:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 	ed = (int8_t)PHY_ED_LEVEL_REG + PHY_RSSI_BASE_VAL;
 1276               		.loc 3 306 0 is_stmt 1
 1277 05e4 87E4      		ldi r24,lo8(71)
 1278 05e6 91E0      		ldi r25,lo8(1)
 1279 05e8 FC01      		movw r30,r24
 1280 05ea 8081      		ld r24,Z
 1281 05ec 8A55      		subi r24,lo8(-(-90))
 1282 05ee 8983      		std Y+1,r24
 307:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 
 308:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 	phySetRxState();
 1283               		.loc 3 308 0
 1284 05f0 0E94 0000 		call phySetRxState
 309:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 
 310:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 	return ed;
 1285               		.loc 3 310 0
 1286 05f4 8981      		ldd r24,Y+1
 1287               	/* epilogue start */
 311:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** }
 1288               		.loc 3 311 0
 1289 05f6 0F90      		pop __tmp_reg__
 1290 05f8 DF91      		pop r29
 1291 05fa CF91      		pop r28
 1292 05fc 0895      		ret
 1293               		.cfi_endproc
 1294               	.LFE88:
 1297               	phySetRxState:
 1298               	.LFB89:
 312:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 
 313:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** /*************************************************************************//**
 314:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** *****************************************************************************/
 315:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** static void phySetRxState(void)
 316:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** {
 1299               		.loc 3 316 0
 1300               		.cfi_startproc
 1301 05fe CF93      		push r28
 1302               	.LCFI59:
 1303               		.cfi_def_cfa_offset 3
 1304               		.cfi_offset 28, -2
 1305 0600 DF93      		push r29
 1306               	.LCFI60:
 1307               		.cfi_def_cfa_offset 4
 1308               		.cfi_offset 29, -3
 1309 0602 CDB7      		in r28,__SP_L__
 1310 0604 DEB7      		in r29,__SP_H__
 1311               	.LCFI61:
 1312               		.cfi_def_cfa_register 28
 1313               	/* prologue: function */
 1314               	/* frame size = 0 */
 1315               	/* stack size = 2 */
 1316               	.L__stack_usage = 2
 317:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 	phyTrxSetState(TRX_CMD_TRX_OFF);
 1317               		.loc 3 317 0
 1318 0606 88E0      		ldi r24,lo8(8)
 1319 0608 0E94 0000 		call phyTrxSetState
 318:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 
 319:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 	IRQ_STATUS_REG = IRQ_CLEAR_VALUE;
 1320               		.loc 3 319 0
 1321 060c 8FE4      		ldi r24,lo8(79)
 1322 060e 91E0      		ldi r25,lo8(1)
 1323 0610 2FEF      		ldi r18,lo8(-1)
 1324 0612 FC01      		movw r30,r24
 1325 0614 2083      		st Z,r18
 320:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 
 321:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 	if (phyRxState) {
 1326               		.loc 3 321 0
 1327 0616 8091 0000 		lds r24,phyRxState
 1328 061a 8823      		tst r24
 1329 061c 01F0      		breq .L49
 322:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 		phyTrxSetState(TRX_CMD_RX_AACK_ON);
 1330               		.loc 3 322 0
 1331 061e 86E1      		ldi r24,lo8(22)
 1332 0620 0E94 0000 		call phyTrxSetState
 1333               	.L49:
 323:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 	}
 324:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** }
 1334               		.loc 3 324 0
 1335 0624 0000      		nop
 1336               	/* epilogue start */
 1337 0626 DF91      		pop r29
 1338 0628 CF91      		pop r28
 1339 062a 0895      		ret
 1340               		.cfi_endproc
 1341               	.LFE89:
 1344               	phyTrxSetState:
 1345               	.LFB90:
 325:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 
 326:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** /*************************************************************************//**
 327:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** *****************************************************************************/
 328:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** static void phyTrxSetState(uint8_t state)
 329:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** {
 1346               		.loc 3 329 0
 1347               		.cfi_startproc
 1348 062c CF93      		push r28
 1349               	.LCFI62:
 1350               		.cfi_def_cfa_offset 3
 1351               		.cfi_offset 28, -2
 1352 062e DF93      		push r29
 1353               	.LCFI63:
 1354               		.cfi_def_cfa_offset 4
 1355               		.cfi_offset 29, -3
 1356 0630 1F92      		push __zero_reg__
 1357               	.LCFI64:
 1358               		.cfi_def_cfa_offset 5
 1359 0632 CDB7      		in r28,__SP_L__
 1360 0634 DEB7      		in r29,__SP_H__
 1361               	.LCFI65:
 1362               		.cfi_def_cfa_register 28
 1363               	/* prologue: function */
 1364               	/* frame size = 1 */
 1365               	/* stack size = 3 */
 1366               	.L__stack_usage = 3
 1367 0636 8983      		std Y+1,r24
 330:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** #if (ANTENNA_DIVERSITY == 1) || defined(EXT_RF_FRONT_END_CTRL)
 331:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 	if(phyState == PHY_STATE_SLEEP)
 1368               		.loc 3 331 0
 1369 0638 8091 0000 		lds r24,phyState
 1370 063c 8230      		cpi r24,lo8(2)
 1371 063e 01F4      		brne .L51
 332:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 	{
 333:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 	#if (ANTENNA_DIVERSITY == 1)
 334:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 		ANT_DIV_REG_s.antDivEn = 1;
 1372               		.loc 3 334 0
 1373 0640 8DE4      		ldi r24,lo8(77)
 1374 0642 91E0      		ldi r25,lo8(1)
 1375 0644 FC01      		movw r30,r24
 1376 0646 2081      		ld r18,Z
 1377 0648 2860      		ori r18,lo8(8)
 1378 064a FC01      		movw r30,r24
 1379 064c 2083      		st Z,r18
 335:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 		ANT_DIV_REG_s.antExtSwEn = 1;
 1380               		.loc 3 335 0
 1381 064e 8DE4      		ldi r24,lo8(77)
 1382 0650 91E0      		ldi r25,lo8(1)
 1383 0652 FC01      		movw r30,r24
 1384 0654 2081      		ld r18,Z
 1385 0656 2460      		ori r18,lo8(4)
 1386 0658 FC01      		movw r30,r24
 1387 065a 2083      		st Z,r18
 336:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 	#else
 337:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 		#if (ANTENNA_DEFAULT != 0)
 338:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 			ANT_DIV_REG_s.antExtSwEn = 1;
 339:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 			ANT_DIV_REG_s.antCtrl = ANTENNA_DEFAULT;
 340:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 		#endif // ANTENNA_DEFAULT
 341:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 	#endif // ANTENNA_DIVERSITY
 342:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 	#ifdef EXT_RF_FRONT_END_CTRL
 343:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 		TRX_CTRL_1_REG_s.paExtEn = 1;
 1388               		.loc 3 343 0
 1389 065c 84E4      		ldi r24,lo8(68)
 1390 065e 91E0      		ldi r25,lo8(1)
 1391 0660 FC01      		movw r30,r24
 1392 0662 2081      		ld r18,Z
 1393 0664 2068      		ori r18,lo8(-128)
 1394 0666 FC01      		movw r30,r24
 1395 0668 2083      		st Z,r18
 1396               	.L51:
 344:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 	#endif // EXT_RF_FRONT_END_CTRL
 345:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 	}
 346:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** #endif // PLATFORM_WM100
 347:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 
 348:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 	do {TRX_STATE_REG = TRX_CMD_FORCE_TRX_OFF;
 1397               		.loc 3 348 0 discriminator 1
 1398 066a 82E4      		ldi r24,lo8(66)
 1399 066c 91E0      		ldi r25,lo8(1)
 1400 066e 23E0      		ldi r18,lo8(3)
 1401 0670 FC01      		movw r30,r24
 1402 0672 2083      		st Z,r18
 349:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 	} while (TRX_STATUS_TRX_OFF !=
 350:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 			TRX_STATUS_REG_s.trxStatus);
 1403               		.loc 3 350 0 discriminator 1
 1404 0674 81E4      		ldi r24,lo8(65)
 1405 0676 91E0      		ldi r25,lo8(1)
 1406 0678 FC01      		movw r30,r24
 1407 067a 8081      		ld r24,Z
 1408 067c 8F71      		andi r24,lo8(31)
 1409 067e 8830      		cpi r24,lo8(8)
 1410 0680 01F4      		brne .L51
 1411               	.L52:
 351:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 
 352:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 	do {TRX_STATE_REG = state; } while (state !=
 1412               		.loc 3 352 0 discriminator 1
 1413 0682 82E4      		ldi r24,lo8(66)
 1414 0684 91E0      		ldi r25,lo8(1)
 1415 0686 2981      		ldd r18,Y+1
 1416 0688 FC01      		movw r30,r24
 1417 068a 2083      		st Z,r18
 353:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 			TRX_STATUS_REG_s.trxStatus);
 1418               		.loc 3 353 0 discriminator 1
 1419 068c 81E4      		ldi r24,lo8(65)
 1420 068e 91E0      		ldi r25,lo8(1)
 1421 0690 FC01      		movw r30,r24
 1422 0692 8081      		ld r24,Z
 1423 0694 8F71      		andi r24,lo8(31)
 352:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 			TRX_STATUS_REG_s.trxStatus);
 1424               		.loc 3 352 0 discriminator 1
 1425 0696 982F      		mov r25,r24
 1426               		.loc 3 353 0 discriminator 1
 1427 0698 8981      		ldd r24,Y+1
 1428 069a 9817      		cp r25,r24
 1429 069c 01F4      		brne .L52
 354:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** }
 1430               		.loc 3 354 0
 1431 069e 0000      		nop
 1432               	/* epilogue start */
 1433 06a0 0F90      		pop __tmp_reg__
 1434 06a2 DF91      		pop r29
 1435 06a4 CF91      		pop r28
 1436 06a6 0895      		ret
 1437               		.cfi_endproc
 1438               	.LFE90:
 1440               	.global	PHY_SetIEEEAddr
 1442               	PHY_SetIEEEAddr:
 1443               	.LFB91:
 355:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 
 356:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** /*************************************************************************//**
 357:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** *****************************************************************************/
 358:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** void PHY_SetIEEEAddr(uint8_t *ieee_addr)
 359:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** {
 1444               		.loc 3 359 0
 1445               		.cfi_startproc
 1446 06a8 CF93      		push r28
 1447               	.LCFI66:
 1448               		.cfi_def_cfa_offset 3
 1449               		.cfi_offset 28, -2
 1450 06aa DF93      		push r29
 1451               	.LCFI67:
 1452               		.cfi_def_cfa_offset 4
 1453               		.cfi_offset 29, -3
 1454 06ac 00D0      		rcall .
 1455 06ae 00D0      		rcall .
 1456               	.LCFI68:
 1457               		.cfi_def_cfa_offset 8
 1458 06b0 CDB7      		in r28,__SP_L__
 1459 06b2 DEB7      		in r29,__SP_H__
 1460               	.LCFI69:
 1461               		.cfi_def_cfa_register 28
 1462               	/* prologue: function */
 1463               	/* frame size = 4 */
 1464               	/* stack size = 6 */
 1465               	.L__stack_usage = 6
 1466 06b4 9C83      		std Y+4,r25
 1467 06b6 8B83      		std Y+3,r24
 360:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 	uint8_t *ptr_to_reg = ieee_addr;
 1468               		.loc 3 360 0
 1469 06b8 8B81      		ldd r24,Y+3
 1470 06ba 9C81      		ldd r25,Y+4
 1471 06bc 9A83      		std Y+2,r25
 1472 06be 8983      		std Y+1,r24
 361:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 	IEEE_ADDR_0_REG = *ptr_to_reg++;
 1473               		.loc 3 361 0
 1474 06c0 24E6      		ldi r18,lo8(100)
 1475 06c2 31E0      		ldi r19,lo8(1)
 1476 06c4 8981      		ldd r24,Y+1
 1477 06c6 9A81      		ldd r25,Y+2
 1478 06c8 AC01      		movw r20,r24
 1479 06ca 4F5F      		subi r20,-1
 1480 06cc 5F4F      		sbci r21,-1
 1481 06ce 5A83      		std Y+2,r21
 1482 06d0 4983      		std Y+1,r20
 1483 06d2 FC01      		movw r30,r24
 1484 06d4 8081      		ld r24,Z
 1485 06d6 F901      		movw r30,r18
 1486 06d8 8083      		st Z,r24
 362:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 	IEEE_ADDR_1_REG = *ptr_to_reg++;
 1487               		.loc 3 362 0
 1488 06da 25E6      		ldi r18,lo8(101)
 1489 06dc 31E0      		ldi r19,lo8(1)
 1490 06de 8981      		ldd r24,Y+1
 1491 06e0 9A81      		ldd r25,Y+2
 1492 06e2 AC01      		movw r20,r24
 1493 06e4 4F5F      		subi r20,-1
 1494 06e6 5F4F      		sbci r21,-1
 1495 06e8 5A83      		std Y+2,r21
 1496 06ea 4983      		std Y+1,r20
 1497 06ec FC01      		movw r30,r24
 1498 06ee 8081      		ld r24,Z
 1499 06f0 F901      		movw r30,r18
 1500 06f2 8083      		st Z,r24
 363:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 	IEEE_ADDR_2_REG = *ptr_to_reg++;
 1501               		.loc 3 363 0
 1502 06f4 26E6      		ldi r18,lo8(102)
 1503 06f6 31E0      		ldi r19,lo8(1)
 1504 06f8 8981      		ldd r24,Y+1
 1505 06fa 9A81      		ldd r25,Y+2
 1506 06fc AC01      		movw r20,r24
 1507 06fe 4F5F      		subi r20,-1
 1508 0700 5F4F      		sbci r21,-1
 1509 0702 5A83      		std Y+2,r21
 1510 0704 4983      		std Y+1,r20
 1511 0706 FC01      		movw r30,r24
 1512 0708 8081      		ld r24,Z
 1513 070a F901      		movw r30,r18
 1514 070c 8083      		st Z,r24
 364:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 	IEEE_ADDR_3_REG = *ptr_to_reg++;
 1515               		.loc 3 364 0
 1516 070e 27E6      		ldi r18,lo8(103)
 1517 0710 31E0      		ldi r19,lo8(1)
 1518 0712 8981      		ldd r24,Y+1
 1519 0714 9A81      		ldd r25,Y+2
 1520 0716 AC01      		movw r20,r24
 1521 0718 4F5F      		subi r20,-1
 1522 071a 5F4F      		sbci r21,-1
 1523 071c 5A83      		std Y+2,r21
 1524 071e 4983      		std Y+1,r20
 1525 0720 FC01      		movw r30,r24
 1526 0722 8081      		ld r24,Z
 1527 0724 F901      		movw r30,r18
 1528 0726 8083      		st Z,r24
 365:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 	IEEE_ADDR_4_REG = *ptr_to_reg++;
 1529               		.loc 3 365 0
 1530 0728 28E6      		ldi r18,lo8(104)
 1531 072a 31E0      		ldi r19,lo8(1)
 1532 072c 8981      		ldd r24,Y+1
 1533 072e 9A81      		ldd r25,Y+2
 1534 0730 AC01      		movw r20,r24
 1535 0732 4F5F      		subi r20,-1
 1536 0734 5F4F      		sbci r21,-1
 1537 0736 5A83      		std Y+2,r21
 1538 0738 4983      		std Y+1,r20
 1539 073a FC01      		movw r30,r24
 1540 073c 8081      		ld r24,Z
 1541 073e F901      		movw r30,r18
 1542 0740 8083      		st Z,r24
 366:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 	IEEE_ADDR_5_REG = *ptr_to_reg++;
 1543               		.loc 3 366 0
 1544 0742 29E6      		ldi r18,lo8(105)
 1545 0744 31E0      		ldi r19,lo8(1)
 1546 0746 8981      		ldd r24,Y+1
 1547 0748 9A81      		ldd r25,Y+2
 1548 074a AC01      		movw r20,r24
 1549 074c 4F5F      		subi r20,-1
 1550 074e 5F4F      		sbci r21,-1
 1551 0750 5A83      		std Y+2,r21
 1552 0752 4983      		std Y+1,r20
 1553 0754 FC01      		movw r30,r24
 1554 0756 8081      		ld r24,Z
 1555 0758 F901      		movw r30,r18
 1556 075a 8083      		st Z,r24
 367:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 	IEEE_ADDR_6_REG = *ptr_to_reg++;
 1557               		.loc 3 367 0
 1558 075c 2AE6      		ldi r18,lo8(106)
 1559 075e 31E0      		ldi r19,lo8(1)
 1560 0760 8981      		ldd r24,Y+1
 1561 0762 9A81      		ldd r25,Y+2
 1562 0764 AC01      		movw r20,r24
 1563 0766 4F5F      		subi r20,-1
 1564 0768 5F4F      		sbci r21,-1
 1565 076a 5A83      		std Y+2,r21
 1566 076c 4983      		std Y+1,r20
 1567 076e FC01      		movw r30,r24
 1568 0770 8081      		ld r24,Z
 1569 0772 F901      		movw r30,r18
 1570 0774 8083      		st Z,r24
 368:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 	IEEE_ADDR_7_REG = *ptr_to_reg;
 1571               		.loc 3 368 0
 1572 0776 8BE6      		ldi r24,lo8(107)
 1573 0778 91E0      		ldi r25,lo8(1)
 1574 077a 2981      		ldd r18,Y+1
 1575 077c 3A81      		ldd r19,Y+2
 1576 077e F901      		movw r30,r18
 1577 0780 2081      		ld r18,Z
 1578 0782 FC01      		movw r30,r24
 1579 0784 2083      		st Z,r18
 369:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** }
 1580               		.loc 3 369 0
 1581 0786 0000      		nop
 1582               	/* epilogue start */
 1583 0788 0F90      		pop __tmp_reg__
 1584 078a 0F90      		pop __tmp_reg__
 1585 078c 0F90      		pop __tmp_reg__
 1586 078e 0F90      		pop __tmp_reg__
 1587 0790 DF91      		pop r29
 1588 0792 CF91      		pop r28
 1589 0794 0895      		ret
 1590               		.cfi_endproc
 1591               	.LFE91:
 1593               	.global	PHY_TaskHandler
 1595               	PHY_TaskHandler:
 1596               	.LFB92:
 370:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 
 371:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** /*************************************************************************//**
 372:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** *****************************************************************************/
 373:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** void PHY_TaskHandler(void)
 374:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** {
 1597               		.loc 3 374 0
 1598               		.cfi_startproc
 1599 0796 CF93      		push r28
 1600               	.LCFI70:
 1601               		.cfi_def_cfa_offset 3
 1602               		.cfi_offset 28, -2
 1603 0798 DF93      		push r29
 1604               	.LCFI71:
 1605               		.cfi_def_cfa_offset 4
 1606               		.cfi_offset 29, -3
 1607 079a CDB7      		in r28,__SP_L__
 1608 079c DEB7      		in r29,__SP_H__
 1609               	.LCFI72:
 1610               		.cfi_def_cfa_register 28
 1611 079e 2897      		sbiw r28,8
 1612               	.LCFI73:
 1613               		.cfi_def_cfa_offset 12
 1614 07a0 0FB6      		in __tmp_reg__,__SREG__
 1615 07a2 F894      		cli
 1616 07a4 DEBF      		out __SP_H__,r29
 1617 07a6 0FBE      		out __SREG__,__tmp_reg__
 1618 07a8 CDBF      		out __SP_L__,r28
 1619               	/* prologue: function */
 1620               	/* frame size = 8 */
 1621               	/* stack size = 10 */
 1622               	.L__stack_usage = 10
 375:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 	if (PHY_STATE_SLEEP == phyState) {
 1623               		.loc 3 375 0
 1624 07aa 8091 0000 		lds r24,phyState
 1625 07ae 8230      		cpi r24,lo8(2)
 1626 07b0 01F4      		brne .+2
 1627 07b2 00C0      		rjmp .L66
 376:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 		return;
 377:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 	}
 378:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 
 379:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 	if (IRQ_STATUS_REG_s.rxEnd) {
 1628               		.loc 3 379 0
 1629 07b4 8FE4      		ldi r24,lo8(79)
 1630 07b6 91E0      		ldi r25,lo8(1)
 1631 07b8 FC01      		movw r30,r24
 1632 07ba 8081      		ld r24,Z
 1633 07bc 83FB      		bst r24,3
 1634 07be 8827      		clr r24
 1635 07c0 80F9      		bld r24,0
 1636 07c2 8823      		tst r24
 1637 07c4 01F4      		brne .+2
 1638 07c6 00C0      		rjmp .L57
 1639               	.LBB4:
 380:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 		PHY_DataInd_t ind;
 381:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 		uint8_t size = TST_RX_LENGTH_REG;
 1640               		.loc 3 381 0
 1641 07c8 8BE7      		ldi r24,lo8(123)
 1642 07ca 91E0      		ldi r25,lo8(1)
 1643 07cc FC01      		movw r30,r24
 1644 07ce 8081      		ld r24,Z
 1645 07d0 8B83      		std Y+3,r24
 1646               	.LBB5:
 382:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 
 383:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 		for (uint8_t i = 0; i < size + 1 /*lqi*/; i++) {
 1647               		.loc 3 383 0
 1648 07d2 1982      		std Y+1,__zero_reg__
 1649 07d4 00C0      		rjmp .L58
 1650               	.L59:
 384:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 			phyRxBuffer[i] = TRX_FRAME_BUFFER(i);
 1651               		.loc 3 384 0 discriminator 3
 1652 07d6 8981      		ldd r24,Y+1
 1653 07d8 882F      		mov r24,r24
 1654 07da 90E0      		ldi r25,0
 1655 07dc 2981      		ldd r18,Y+1
 1656 07de 222F      		mov r18,r18
 1657 07e0 30E0      		ldi r19,0
 1658 07e2 2058      		subi r18,-128
 1659 07e4 3E4F      		sbci r19,-2
 1660 07e6 F901      		movw r30,r18
 1661 07e8 2081      		ld r18,Z
 1662 07ea 8050      		subi r24,lo8(-(phyRxBuffer))
 1663 07ec 9040      		sbci r25,hi8(-(phyRxBuffer))
 1664 07ee FC01      		movw r30,r24
 1665 07f0 2083      		st Z,r18
 383:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 			phyRxBuffer[i] = TRX_FRAME_BUFFER(i);
 1666               		.loc 3 383 0 discriminator 3
 1667 07f2 8981      		ldd r24,Y+1
 1668 07f4 8F5F      		subi r24,lo8(-(1))
 1669 07f6 8983      		std Y+1,r24
 1670               	.L58:
 383:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 			phyRxBuffer[i] = TRX_FRAME_BUFFER(i);
 1671               		.loc 3 383 0 is_stmt 0 discriminator 1
 1672 07f8 8981      		ldd r24,Y+1
 1673 07fa 282F      		mov r18,r24
 1674 07fc 30E0      		ldi r19,0
 1675 07fe 8B81      		ldd r24,Y+3
 1676 0800 882F      		mov r24,r24
 1677 0802 90E0      		ldi r25,0
 1678 0804 0196      		adiw r24,1
 1679 0806 2817      		cp r18,r24
 1680 0808 3907      		cpc r19,r25
 1681 080a 04F0      		brlt .L59
 1682               	.LBE5:
 385:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 		}
 386:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 
 387:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 		ind.data = phyRxBuffer;
 1683               		.loc 3 387 0 is_stmt 1
 1684 080c 80E0      		ldi r24,lo8(phyRxBuffer)
 1685 080e 90E0      		ldi r25,hi8(phyRxBuffer)
 1686 0810 9D83      		std Y+5,r25
 1687 0812 8C83      		std Y+4,r24
 388:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 		ind.size = size - PHY_CRC_SIZE;
 1688               		.loc 3 388 0
 1689 0814 8B81      		ldd r24,Y+3
 1690 0816 8250      		subi r24,lo8(-(-2))
 1691 0818 8E83      		std Y+6,r24
 389:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 		ind.lqi  = phyRxBuffer[size];
 1692               		.loc 3 389 0
 1693 081a 8B81      		ldd r24,Y+3
 1694 081c 882F      		mov r24,r24
 1695 081e 90E0      		ldi r25,0
 1696 0820 8050      		subi r24,lo8(-(phyRxBuffer))
 1697 0822 9040      		sbci r25,hi8(-(phyRxBuffer))
 1698 0824 FC01      		movw r30,r24
 1699 0826 8081      		ld r24,Z
 1700 0828 8F83      		std Y+7,r24
 390:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 		ind.rssi = (int8_t)PHY_ED_LEVEL_REG + PHY_RSSI_BASE_VAL;
 1701               		.loc 3 390 0
 1702 082a 87E4      		ldi r24,lo8(71)
 1703 082c 91E0      		ldi r25,lo8(1)
 1704 082e FC01      		movw r30,r24
 1705 0830 8081      		ld r24,Z
 1706 0832 8A55      		subi r24,lo8(-(-90))
 1707 0834 8887      		std Y+8,r24
 391:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 		PHY_DataInd(&ind);
 1708               		.loc 3 391 0
 1709 0836 CE01      		movw r24,r28
 1710 0838 0496      		adiw r24,4
 1711 083a 0E94 0000 		call PHY_DataInd
 392:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 
 393:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 		while (TRX_STATUS_RX_AACK_ON != TRX_STATUS_REG_s.trxStatus) {
 1712               		.loc 3 393 0
 1713 083e 0000      		nop
 1714               	.L60:
 1715               		.loc 3 393 0 is_stmt 0 discriminator 1
 1716 0840 81E4      		ldi r24,lo8(65)
 1717 0842 91E0      		ldi r25,lo8(1)
 1718 0844 FC01      		movw r30,r24
 1719 0846 8081      		ld r24,Z
 1720 0848 8F71      		andi r24,lo8(31)
 1721 084a 8631      		cpi r24,lo8(22)
 1722 084c 01F4      		brne .L60
 394:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 		}
 395:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 
 396:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 		IRQ_STATUS_REG_s.rxEnd = 1;
 1723               		.loc 3 396 0 is_stmt 1 discriminator 2
 1724 084e 8FE4      		ldi r24,lo8(79)
 1725 0850 91E0      		ldi r25,lo8(1)
 1726 0852 FC01      		movw r30,r24
 1727 0854 2081      		ld r18,Z
 1728 0856 2860      		ori r18,lo8(8)
 1729 0858 FC01      		movw r30,r24
 1730 085a 2083      		st Z,r18
 397:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 		TRX_CTRL_2_REG_s.rxSafeMode = 0;
 1731               		.loc 3 397 0 discriminator 2
 1732 085c 8CE4      		ldi r24,lo8(76)
 1733 085e 91E0      		ldi r25,lo8(1)
 1734 0860 FC01      		movw r30,r24
 1735 0862 2081      		ld r18,Z
 1736 0864 2F77      		andi r18,lo8(127)
 1737 0866 FC01      		movw r30,r24
 1738 0868 2083      		st Z,r18
 398:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 		TRX_CTRL_2_REG_s.rxSafeMode = 1;
 1739               		.loc 3 398 0 discriminator 2
 1740 086a 8CE4      		ldi r24,lo8(76)
 1741 086c 91E0      		ldi r25,lo8(1)
 1742 086e FC01      		movw r30,r24
 1743 0870 2081      		ld r18,Z
 1744 0872 2068      		ori r18,lo8(-128)
 1745 0874 FC01      		movw r30,r24
 1746 0876 2083      		st Z,r18
 1747               	.LBE4:
 1748 0878 00C0      		rjmp .L54
 1749               	.L57:
 399:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 	} else if (IRQ_STATUS_REG_s.txEnd) {
 1750               		.loc 3 399 0
 1751 087a 8FE4      		ldi r24,lo8(79)
 1752 087c 91E0      		ldi r25,lo8(1)
 1753 087e FC01      		movw r30,r24
 1754 0880 8081      		ld r24,Z
 1755 0882 86FB      		bst r24,6
 1756 0884 8827      		clr r24
 1757 0886 80F9      		bld r24,0
 1758 0888 8823      		tst r24
 1759 088a 01F0      		breq .L54
 400:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 		if (TRX_STATUS_TX_ARET_ON == TRX_STATUS_REG_s.trxStatus) {
 1760               		.loc 3 400 0
 1761 088c 81E4      		ldi r24,lo8(65)
 1762 088e 91E0      		ldi r25,lo8(1)
 1763 0890 FC01      		movw r30,r24
 1764 0892 8081      		ld r24,Z
 1765 0894 8F71      		andi r24,lo8(31)
 1766 0896 8931      		cpi r24,lo8(25)
 1767 0898 01F4      		brne .L61
 1768               	.LBB6:
 401:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 			uint8_t status = TRX_STATE_REG_s.tracStatus;
 1769               		.loc 3 401 0
 1770 089a 82E4      		ldi r24,lo8(66)
 1771 089c 91E0      		ldi r25,lo8(1)
 1772 089e FC01      		movw r30,r24
 1773 08a0 8081      		ld r24,Z
 1774 08a2 8295      		swap r24
 1775 08a4 8695      		lsr r24
 1776 08a6 8770      		andi r24,lo8(7)
 1777 08a8 8A83      		std Y+2,r24
 402:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 
 403:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 			if (TRAC_STATUS_SUCCESS == status) {
 1778               		.loc 3 403 0
 1779 08aa 8A81      		ldd r24,Y+2
 1780 08ac 8823      		tst r24
 1781 08ae 01F4      		brne .L62
 404:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 				status = PHY_STATUS_SUCCESS;
 1782               		.loc 3 404 0
 1783 08b0 1A82      		std Y+2,__zero_reg__
 1784 08b2 00C0      		rjmp .L63
 1785               	.L62:
 405:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 			} else if (TRAC_STATUS_CHANNEL_ACCESS_FAILURE ==
 1786               		.loc 3 405 0
 1787 08b4 8A81      		ldd r24,Y+2
 1788 08b6 8330      		cpi r24,lo8(3)
 1789 08b8 01F4      		brne .L64
 406:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 					status) {
 407:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 				status = PHY_STATUS_CHANNEL_ACCESS_FAILURE;
 1790               		.loc 3 407 0
 1791 08ba 81E0      		ldi r24,lo8(1)
 1792 08bc 8A83      		std Y+2,r24
 1793 08be 00C0      		rjmp .L63
 1794               	.L64:
 408:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 			} else if (TRAC_STATUS_NO_ACK == status) {
 1795               		.loc 3 408 0
 1796 08c0 8A81      		ldd r24,Y+2
 1797 08c2 8530      		cpi r24,lo8(5)
 1798 08c4 01F4      		brne .L65
 409:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 				status = PHY_STATUS_NO_ACK;
 1799               		.loc 3 409 0
 1800 08c6 82E0      		ldi r24,lo8(2)
 1801 08c8 8A83      		std Y+2,r24
 1802 08ca 00C0      		rjmp .L63
 1803               	.L65:
 410:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 			} else {
 411:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 				status = PHY_STATUS_ERROR;
 1804               		.loc 3 411 0
 1805 08cc 83E0      		ldi r24,lo8(3)
 1806 08ce 8A83      		std Y+2,r24
 1807               	.L63:
 412:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 			}
 413:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 
 414:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 			phySetRxState();
 1808               		.loc 3 414 0
 1809 08d0 0E94 0000 		call phySetRxState
 415:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 			phyState = PHY_STATE_IDLE;
 1810               		.loc 3 415 0
 1811 08d4 81E0      		ldi r24,lo8(1)
 1812 08d6 8093 0000 		sts phyState,r24
 416:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 
 417:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 			PHY_DataConf(status);
 1813               		.loc 3 417 0
 1814 08da 8A81      		ldd r24,Y+2
 1815 08dc 0E94 0000 		call PHY_DataConf
 1816               	.L61:
 1817               	.LBE6:
 418:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 		}
 419:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 
 420:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 		IRQ_STATUS_REG_s.txEnd = 1;
 1818               		.loc 3 420 0
 1819 08e0 8FE4      		ldi r24,lo8(79)
 1820 08e2 91E0      		ldi r25,lo8(1)
 1821 08e4 FC01      		movw r30,r24
 1822 08e6 2081      		ld r18,Z
 1823 08e8 2064      		ori r18,lo8(64)
 1824 08ea FC01      		movw r30,r24
 1825 08ec 2083      		st Z,r18
 1826 08ee 00C0      		rjmp .L54
 1827               	.L66:
 376:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 	}
 1828               		.loc 3 376 0
 1829 08f0 0000      		nop
 1830               	.L54:
 1831               	/* epilogue start */
 421:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** 	}
 422:../../../stack/LwMesh/TDMA/phy/atmegarfa1/src/phy.c **** }
 1832               		.loc 3 422 0
 1833 08f2 2896      		adiw r28,8
 1834 08f4 0FB6      		in __tmp_reg__,__SREG__
 1835 08f6 F894      		cli
 1836 08f8 DEBF      		out __SP_H__,r29
 1837 08fa 0FBE      		out __SREG__,__tmp_reg__
 1838 08fc CDBF      		out __SP_L__,r28
 1839 08fe DF91      		pop r29
 1840 0900 CF91      		pop r28
 1841 0902 0895      		ret
 1842               		.cfi_endproc
 1843               	.LFE92:
 1845               	.Letext0:
 1846               		.file 4 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\in
 1847               		.file 5 "../../../stack/LwMesh/TDMA/phy/atmegarfa1/inc/phy.h"
 1848               		.file 6 "../../../stack/LwMesh/TDMA/phy/atmegarfa1/inc/atmegarfa1.h"
DEFINED SYMBOLS
                            *ABS*:00000000 phy.c
C:\Users\guilh\AppData\Local\Temp\ccgVmR2f.s:2      *ABS*:0000003e __SP_H__
C:\Users\guilh\AppData\Local\Temp\ccgVmR2f.s:3      *ABS*:0000003d __SP_L__
C:\Users\guilh\AppData\Local\Temp\ccgVmR2f.s:4      *ABS*:0000003f __SREG__
C:\Users\guilh\AppData\Local\Temp\ccgVmR2f.s:5      *ABS*:0000003b __RAMPZ__
C:\Users\guilh\AppData\Local\Temp\ccgVmR2f.s:6      *ABS*:00000000 __tmp_reg__
C:\Users\guilh\AppData\Local\Temp\ccgVmR2f.s:7      *ABS*:00000001 __zero_reg__
C:\Users\guilh\AppData\Local\Temp\ccgVmR2f.s:12     .text:00000000 sysclk_enable_peripheral_clock
C:\Users\guilh\AppData\Local\Temp\ccgVmR2f.s:214    .text:0000011a __portable_avr_delay_cycles
C:\Users\guilh\AppData\Local\Temp\ccgVmR2f.s:239    .bss.phyState:00000000 phyState
C:\Users\guilh\AppData\Local\Temp\ccgVmR2f.s:244    .bss.phyRxBuffer:00000000 phyRxBuffer
C:\Users\guilh\AppData\Local\Temp\ccgVmR2f.s:249    .bss.phyRxState:00000000 phyRxState
C:\Users\guilh\AppData\Local\Temp\ccgVmR2f.s:254    .text:00000126 PHY_Init
C:\Users\guilh\AppData\Local\Temp\ccgVmR2f.s:1344   .text:0000062c phyTrxSetState
C:\Users\guilh\AppData\Local\Temp\ccgVmR2f.s:1071   .text:000004f4 PHY_RandomReq
C:\Users\guilh\AppData\Local\Temp\ccgVmR2f.s:372    .text:000001c8 PHY_SetTdmaMode
C:\Users\guilh\AppData\Local\Temp\ccgVmR2f.s:466    .text:0000023e PHY_SetPromiscuousMode
C:\Users\guilh\AppData\Local\Temp\ccgVmR2f.s:740    .text:0000037a PHY_SetShortAddr
C:\Users\guilh\AppData\Local\Temp\ccgVmR2f.s:676    .text:00000332 PHY_SetPanId
C:\Users\guilh\AppData\Local\Temp\ccgVmR2f.s:1442   .text:000006a8 PHY_SetIEEEAddr
C:\Users\guilh\AppData\Local\Temp\ccgVmR2f.s:587    .text:000002e6 PHY_SetRxState
C:\Users\guilh\AppData\Local\Temp\ccgVmR2f.s:1297   .text:000005fe phySetRxState
C:\Users\guilh\AppData\Local\Temp\ccgVmR2f.s:628    .text:00000306 PHY_SetChannel
C:\Users\guilh\AppData\Local\Temp\ccgVmR2f.s:804    .text:000003c2 PHY_SetTxPower
C:\Users\guilh\AppData\Local\Temp\ccgVmR2f.s:852    .text:000003ee PHY_Sleep
C:\Users\guilh\AppData\Local\Temp\ccgVmR2f.s:926    .text:0000044a PHY_Wakeup
C:\Users\guilh\AppData\Local\Temp\ccgVmR2f.s:970    .text:00000472 PHY_DataReq
C:\Users\guilh\AppData\Local\Temp\ccgVmR2f.s:1168   .text:0000056c PHY_EncryptReq
C:\Users\guilh\AppData\Local\Temp\ccgVmR2f.s:1225   .text:000005ac PHY_EdReq
C:\Users\guilh\AppData\Local\Temp\ccgVmR2f.s:1595   .text:00000796 PHY_TaskHandler

UNDEFINED SYMBOLS
sysclk_enable_module
sal_aes_setup
sal_aes_exec
sal_aes_read
PHY_DataInd
PHY_DataConf
__do_clear_bss
