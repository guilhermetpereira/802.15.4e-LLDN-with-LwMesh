   1               		.file	"sleep_mgr.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__RAMPZ__ = 0x3b
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
   8               		.text
   9               	.Ltext0:
  10               		.cfi_sections	.debug_frame
  12               	sleep_set_mode:
  13               	.LFB8:
  14               		.file 1 "../../../platform/mega_rf/drivers/sleep/sleep_megarf.h"
   1:../../../platform/mega_rf/drivers/sleep/sleep_megarf.h **** /**
   2:../../../platform/mega_rf/drivers/sleep/sleep_megarf.h ****  * \file
   3:../../../platform/mega_rf/drivers/sleep/sleep_megarf.h ****  *
   4:../../../platform/mega_rf/drivers/sleep/sleep_megarf.h ****  * \brief Sleep controller driver for megaRF devices
   5:../../../platform/mega_rf/drivers/sleep/sleep_megarf.h ****  *
   6:../../../platform/mega_rf/drivers/sleep/sleep_megarf.h ****  * Copyright (c) 2013 Atmel Corporation. All rights reserved.
   7:../../../platform/mega_rf/drivers/sleep/sleep_megarf.h ****  *
   8:../../../platform/mega_rf/drivers/sleep/sleep_megarf.h ****  * \asf_license_start
   9:../../../platform/mega_rf/drivers/sleep/sleep_megarf.h ****  *
  10:../../../platform/mega_rf/drivers/sleep/sleep_megarf.h ****  * \page License
  11:../../../platform/mega_rf/drivers/sleep/sleep_megarf.h ****  *
  12:../../../platform/mega_rf/drivers/sleep/sleep_megarf.h ****  * Redistribution and use in source and binary forms, with or without
  13:../../../platform/mega_rf/drivers/sleep/sleep_megarf.h ****  * modification, are permitted provided that the following conditions are met:
  14:../../../platform/mega_rf/drivers/sleep/sleep_megarf.h ****  *
  15:../../../platform/mega_rf/drivers/sleep/sleep_megarf.h ****  * 1. Redistributions of source code must retain the above copyright notice,
  16:../../../platform/mega_rf/drivers/sleep/sleep_megarf.h ****  *    this list of conditions and the following disclaimer.
  17:../../../platform/mega_rf/drivers/sleep/sleep_megarf.h ****  *
  18:../../../platform/mega_rf/drivers/sleep/sleep_megarf.h ****  * 2. Redistributions in binary form must reproduce the above copyright notice,
  19:../../../platform/mega_rf/drivers/sleep/sleep_megarf.h ****  *    this list of conditions and the following disclaimer in the documentation
  20:../../../platform/mega_rf/drivers/sleep/sleep_megarf.h ****  *    and/or other materials provided with the distribution.
  21:../../../platform/mega_rf/drivers/sleep/sleep_megarf.h ****  *
  22:../../../platform/mega_rf/drivers/sleep/sleep_megarf.h ****  * 3. The name of Atmel may not be used to endorse or promote products derived
  23:../../../platform/mega_rf/drivers/sleep/sleep_megarf.h ****  *    from this software without specific prior written permission.
  24:../../../platform/mega_rf/drivers/sleep/sleep_megarf.h ****  *
  25:../../../platform/mega_rf/drivers/sleep/sleep_megarf.h ****  * 4. This software may only be redistributed and used in connection with an
  26:../../../platform/mega_rf/drivers/sleep/sleep_megarf.h ****  *    Atmel microcontroller product.
  27:../../../platform/mega_rf/drivers/sleep/sleep_megarf.h ****  *
  28:../../../platform/mega_rf/drivers/sleep/sleep_megarf.h ****  * THIS SOFTWARE IS PROVIDED BY ATMEL "AS IS" AND ANY EXPRESS OR IMPLIED
  29:../../../platform/mega_rf/drivers/sleep/sleep_megarf.h ****  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
  30:../../../platform/mega_rf/drivers/sleep/sleep_megarf.h ****  * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE
  31:../../../platform/mega_rf/drivers/sleep/sleep_megarf.h ****  * EXPRESSLY AND SPECIFICALLY DISCLAIMED. IN NO EVENT SHALL ATMEL BE LIABLE FOR
  32:../../../platform/mega_rf/drivers/sleep/sleep_megarf.h ****  * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  33:../../../platform/mega_rf/drivers/sleep/sleep_megarf.h ****  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
  34:../../../platform/mega_rf/drivers/sleep/sleep_megarf.h ****  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
  35:../../../platform/mega_rf/drivers/sleep/sleep_megarf.h ****  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
  36:../../../platform/mega_rf/drivers/sleep/sleep_megarf.h ****  * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
  37:../../../platform/mega_rf/drivers/sleep/sleep_megarf.h ****  * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  38:../../../platform/mega_rf/drivers/sleep/sleep_megarf.h ****  * POSSIBILITY OF SUCH DAMAGE.
  39:../../../platform/mega_rf/drivers/sleep/sleep_megarf.h ****  *
  40:../../../platform/mega_rf/drivers/sleep/sleep_megarf.h ****  * \asf_license_stop
  41:../../../platform/mega_rf/drivers/sleep/sleep_megarf.h ****  *
  42:../../../platform/mega_rf/drivers/sleep/sleep_megarf.h ****  */
  43:../../../platform/mega_rf/drivers/sleep/sleep_megarf.h **** #ifndef SLEEP_MEGARF_H
  44:../../../platform/mega_rf/drivers/sleep/sleep_megarf.h **** #define SLEEP_MEGARF_H
  45:../../../platform/mega_rf/drivers/sleep/sleep_megarf.h **** 
  46:../../../platform/mega_rf/drivers/sleep/sleep_megarf.h **** /**
  47:../../../platform/mega_rf/drivers/sleep/sleep_megarf.h ****  * \defgroup sleep_group Sleep controller driver
  48:../../../platform/mega_rf/drivers/sleep/sleep_megarf.h ****  *
  49:../../../platform/mega_rf/drivers/sleep/sleep_megarf.h ****  * This is a low-level driver implementation for the MEGA RF sleep controller.
  50:../../../platform/mega_rf/drivers/sleep/sleep_megarf.h ****  *
  51:../../../platform/mega_rf/drivers/sleep/sleep_megarf.h ****  * \note To minimize the code overhead, these functions do not feature
  52:../../../platform/mega_rf/drivers/sleep/sleep_megarf.h ****  * interrupt-protected access since they are likely to be called inside
  53:../../../platform/mega_rf/drivers/sleep/sleep_megarf.h ****  * interrupt handlers or in applications where such protection is not
  54:../../../platform/mega_rf/drivers/sleep/sleep_megarf.h ****  * necessary. If such protection is needed, it must be ensured by the calling
  55:../../../platform/mega_rf/drivers/sleep/sleep_megarf.h ****  * code.
  56:../../../platform/mega_rf/drivers/sleep/sleep_megarf.h ****  *
  57:../../../platform/mega_rf/drivers/sleep/sleep_megarf.h ****  * @{
  58:../../../platform/mega_rf/drivers/sleep/sleep_megarf.h ****  */
  59:../../../platform/mega_rf/drivers/sleep/sleep_megarf.h **** 
  60:../../../platform/mega_rf/drivers/sleep/sleep_megarf.h **** #ifdef __cplusplus
  61:../../../platform/mega_rf/drivers/sleep/sleep_megarf.h **** extern "C" {
  62:../../../platform/mega_rf/drivers/sleep/sleep_megarf.h **** #endif
  63:../../../platform/mega_rf/drivers/sleep/sleep_megarf.h **** 
  64:../../../platform/mega_rf/drivers/sleep/sleep_megarf.h **** #if defined(__ICCAVR__) || defined(__DOXYGEN__)
  65:../../../platform/mega_rf/drivers/sleep/sleep_megarf.h **** 
  66:../../../platform/mega_rf/drivers/sleep/sleep_megarf.h **** /**
  67:../../../platform/mega_rf/drivers/sleep/sleep_megarf.h ****  * \brief Enable sleep
  68:../../../platform/mega_rf/drivers/sleep/sleep_megarf.h ****  */
  69:../../../platform/mega_rf/drivers/sleep/sleep_megarf.h **** static inline void sleep_enable(void)
  70:../../../platform/mega_rf/drivers/sleep/sleep_megarf.h **** {
  71:../../../platform/mega_rf/drivers/sleep/sleep_megarf.h **** 	SMCR |= (1 << SE);
  72:../../../platform/mega_rf/drivers/sleep/sleep_megarf.h **** }
  73:../../../platform/mega_rf/drivers/sleep/sleep_megarf.h **** 
  74:../../../platform/mega_rf/drivers/sleep/sleep_megarf.h **** /**
  75:../../../platform/mega_rf/drivers/sleep/sleep_megarf.h ****  * \brief Disable sleep
  76:../../../platform/mega_rf/drivers/sleep/sleep_megarf.h ****  */
  77:../../../platform/mega_rf/drivers/sleep/sleep_megarf.h **** static inline void sleep_disable(void)
  78:../../../platform/mega_rf/drivers/sleep/sleep_megarf.h **** {
  79:../../../platform/mega_rf/drivers/sleep/sleep_megarf.h **** 	SMCR &= ~(1 << SE);
  80:../../../platform/mega_rf/drivers/sleep/sleep_megarf.h **** }
  81:../../../platform/mega_rf/drivers/sleep/sleep_megarf.h **** 
  82:../../../platform/mega_rf/drivers/sleep/sleep_megarf.h **** #endif
  83:../../../platform/mega_rf/drivers/sleep/sleep_megarf.h **** 
  84:../../../platform/mega_rf/drivers/sleep/sleep_megarf.h **** /**
  85:../../../platform/mega_rf/drivers/sleep/sleep_megarf.h ****  * \brief Set new sleep mode
  86:../../../platform/mega_rf/drivers/sleep/sleep_megarf.h ****  *
  87:../../../platform/mega_rf/drivers/sleep/sleep_megarf.h ****  * \param mode Sleep mode, from the device IO header file.
  88:../../../platform/mega_rf/drivers/sleep/sleep_megarf.h ****  */
  89:../../../platform/mega_rf/drivers/sleep/sleep_megarf.h **** static inline void sleep_set_mode(enum SLEEP_SMODE_enum mode)
  90:../../../platform/mega_rf/drivers/sleep/sleep_megarf.h **** {
  15               		.loc 1 90 0
  16               		.cfi_startproc
  17 0000 CF93      		push r28
  18               	.LCFI0:
  19               		.cfi_def_cfa_offset 3
  20               		.cfi_offset 28, -2
  21 0002 DF93      		push r29
  22               	.LCFI1:
  23               		.cfi_def_cfa_offset 4
  24               		.cfi_offset 29, -3
  25 0004 1F92      		push __zero_reg__
  26               	.LCFI2:
  27               		.cfi_def_cfa_offset 5
  28 0006 CDB7      		in r28,__SP_L__
  29 0008 DEB7      		in r29,__SP_H__
  30               	.LCFI3:
  31               		.cfi_def_cfa_register 28
  32               	/* prologue: function */
  33               	/* frame size = 1 */
  34               	/* stack size = 3 */
  35               	.L__stack_usage = 3
  36 000a 8983      		std Y+1,r24
  91:../../../platform/mega_rf/drivers/sleep/sleep_megarf.h **** 	SMCR = mode | (SMCR & ~((1 << SM0) | (1 << SM1) | (1 << SM2)));
  37               		.loc 1 91 0
  38 000c 83E5      		ldi r24,lo8(83)
  39 000e 90E0      		ldi r25,0
  40 0010 23E5      		ldi r18,lo8(83)
  41 0012 30E0      		ldi r19,0
  42 0014 F901      		movw r30,r18
  43 0016 2081      		ld r18,Z
  44 0018 322F      		mov r19,r18
  45 001a 317F      		andi r19,lo8(-15)
  46 001c 2981      		ldd r18,Y+1
  47 001e 232B      		or r18,r19
  48 0020 FC01      		movw r30,r24
  49 0022 2083      		st Z,r18
  92:../../../platform/mega_rf/drivers/sleep/sleep_megarf.h **** }
  50               		.loc 1 92 0
  51 0024 0000      		nop
  52               	/* epilogue start */
  53 0026 0F90      		pop __tmp_reg__
  54 0028 DF91      		pop r29
  55 002a CF91      		pop r28
  56 002c 0895      		ret
  57               		.cfi_endproc
  58               	.LFE8:
  61               	macsc_sleep_clk_enable:
  62               	.LFB16:
  63               		.file 2 "../../../platform/mega_rf/drivers/macsc/macsc_megarf.h"
   1:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** /**
   2:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * \file
   3:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  *
   4:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * \brief AVR MEGARF MAC Symbol Counter Driver Definitions
   5:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  *
   6:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * Copyright (c) 2013 Atmel Corporation. All rights reserved.
   7:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  *
   8:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * \asf_license_start
   9:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  *
  10:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * \page License
  11:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  *
  12:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * Redistribution and use in source and binary forms, with or without
  13:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * modification, are permitted provided that the following conditions are met:
  14:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  *
  15:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * 1. Redistributions of source code must retain the above copyright notice,
  16:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  *    this list of conditions and the following disclaimer.
  17:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  *
  18:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * 2. Redistributions in binary form must reproduce the above copyright notice,
  19:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  *    this list of conditions and the following disclaimer in the documentation
  20:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  *    and/or other materials provided with the distribution.
  21:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  *
  22:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * 3. The name of Atmel may not be used to endorse or promote products derived
  23:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  *    from this software without specific prior written permission.
  24:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  *
  25:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * 4. This software may only be redistributed and used in connection with an
  26:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  *    Atmel microcontroller product.
  27:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  *
  28:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * THIS SOFTWARE IS PROVIDED BY ATMEL "AS IS" AND ANY EXPRESS OR IMPLIED
  29:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
  30:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE
  31:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * EXPRESSLY AND SPECIFICALLY DISCLAIMED. IN NO EVENT SHALL ATMEL BE LIABLE FOR
  32:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  33:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
  34:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
  35:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
  36:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
  37:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  38:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * POSSIBILITY OF SUCH DAMAGE.
  39:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  *
  40:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * \asf_license_stop
  41:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  *
  42:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  */
  43:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** #ifndef MACSC_MEGARF_H
  44:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** #define MACSC_MEGARF_H
  45:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 
  46:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** #include <compiler.h>
  47:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** #include <parts.h>
  48:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** #include "status_codes.h"
  49:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 
  50:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** #ifdef __cplusplus
  51:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** extern "C" {
  52:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** #endif
  53:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 
  54:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** /**
  55:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * \defgroup macsc_group MAC Symbol Counter Driver(MACSC)
  56:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  *
  57:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * See \ref megarf_macsc_quickstart
  58:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  *
  59:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * This is a driver for the AVR MEGARF MAC Symbol Counter Driver(MACSC).
  60:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * It provides functions for enabling, disabling and configuring the module.
  61:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  *
  62:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * \section dependencies Dependencies
  63:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * This driver depends on the following modules:
  64:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * - \ref interrupt_group for ISR definition and disabling interrupts during
  65:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * critical code sections.
  66:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * @{
  67:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  */
  68:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 
  69:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** /**
  70:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * \brief Interrupt event callback function type
  71:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  *
  72:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * The interrupt handler can be configured to do a function callback,
  73:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * the callback function must match the macsc_callback_t type.
  74:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  *
  75:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  */
  76:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** typedef void (*macsc_callback_t)(void);
  77:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 
  78:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** /* ! MAC symbol counter compare Channel index */
  79:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** enum macsc_cc_channel {
  80:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 	/* ! Channel 1 */
  81:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 	MACSC_CC1 = 1,
  82:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 	/* ! Channel 2 */
  83:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 	MACSC_CC2 = 2,
  84:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 	/* ! Channel 3 */
  85:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 	MACSC_CC3 = 3,
  86:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** };
  87:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** /**
  88:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * \brief MAC SC clock source select
  89:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  *
  90:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * uses the SCCKSEL bit in SSCR register to select macsc clk src
  91:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  *
  92:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * If the bit is one,the RTC clock from TOSC1 is selected, otherwise the symbol
  93:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * counter operates with the clock from XTAL1.
  94:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * During transceiver sleep modes the clock falls back to the RTC clock source,
  95:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * regardless of the selected clock. After wakeup, it switches back to the
  96:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * previosly
  97:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * selected clock source.
  98:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  */
  99:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 
 100:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** enum macsc_xtal {
 101:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 	/* ! 16MHz as macsc clock */
 102:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 	MACSC_16MHz = 0,
 103:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 	MACSC_32KHz = 1,
 104:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** };
 105:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 
 106:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** /**
 107:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * @brief Reads the 32-bit timer register in the required order of bytes
 108:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  *
 109:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * @param hh hh octet of 32-bit register
 110:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * @param hl hl octet of 32-bit register
 111:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * @param lh lh octet of 32-bit register
 112:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * @param ll ll octet of 32-bit register
 113:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  *
 114:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * @returns uint32_t Value of timer register
 115:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  */
 116:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** static inline uint32_t macsc_read32(volatile uint8_t *hh,
 117:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 		volatile uint8_t *hl,
 118:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 		volatile uint8_t *lh,
 119:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 		volatile uint8_t *ll)
 120:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** {
 121:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 	union {
 122:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 		uint8_t a[4];
 123:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 		uint32_t rv;
 124:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 	}
 125:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 	x;
 126:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 
 127:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 	x.a[0] = *ll;
 128:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 	x.a[1] = *lh;
 129:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 	x.a[2] = *hl;
 130:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 	x.a[3] = *hh;
 131:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 
 132:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 	return x.rv;
 133:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** }
 134:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 
 135:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** /* ! compare modes */
 136:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** #define MACSC_ABSOLUTE_CMP 0
 137:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** #define MACSC_RELATIVE_CMP 1
 138:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 
 139:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** /** String concatenation by preprocessor used to create proper register names.
 140:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  **/
 141:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** #define CONCAT(a, b) a ## b
 142:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 
 143:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** /** Creates proper subregister names and reads the corresponding values. */
 144:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** #define MACSC_READ32(reg)                  macsc_read32(&CONCAT(reg, HH), \
 145:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 		&CONCAT(reg, HL), \
 146:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 		&CONCAT(reg, LH), \
 147:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 		&CONCAT(reg, LL))
 148:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 
 149:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** #define MACSC_WRITE32(reg, val)	\
 150:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 	do { \
 151:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 		union { uint8_t a[4]; uint32_t v; } \
 152:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 		x; \
 153:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 		x.v = val; \
 154:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 		CONCAT(reg, HH) = x.a[3]; \
 155:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 		CONCAT(reg, HL) = x.a[2]; \
 156:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 		CONCAT(reg, LH) = x.a[1]; \
 157:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 		CONCAT(reg, LL) = x.a[0]; \
 158:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 	} \
 159:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 	while (0)
 160:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 
 161:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** /**
 162:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * \brief Enable MAC SC
 163:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  *
 164:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * Enables the SC
 165:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  *
 166:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * \param clk_src selection of clk source,avalable options in macsc_xtal,fixed
 167:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  *  prescalar
 168:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * \param sleep_enable enable RTC as clock source during sleep
 169:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * \param auto_ts enable automatic timestamping
 170:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  *
 171:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  */
 172:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** void macsc_enable(void);
 173:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 
 174:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** /**
 175:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * \brief Check if MACSC is enabled
 176:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  *
 177:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * check if the MACSC is enabled.
 178:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  *
 179:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * \param none
 180:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  *
 181:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  */
 182:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** bool is_macsc_enable(void);
 183:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 
 184:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** /**
 185:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * \brief Disable MAC SC
 186:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  *
 187:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * Disables the MAC SC
 188:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  *
 189:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * \param none
 190:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  *
 191:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  */
 192:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** void macsc_disable(void);
 193:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 
 194:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** /**
 195:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * \brief Check if back-off slot counter is enabled
 196:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  *
 197:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * check if the back-off slot counter is enabled.
 198:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  *
 199:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * \param none
 200:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  *
 201:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  */
 202:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** bool is_macsc_backoff_enable(void);
 203:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 
 204:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** /**
 205:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * \brief Enables compare interrupts of the MACSC
 206:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  *
 207:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * \param channel Compare channel
 208:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  */
 209:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** void macsc_enable_cmp_int(enum macsc_cc_channel channel);
 210:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 
 211:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** /**
 212:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * \brief Disables compare interrupts of the MACSC
 213:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  *
 214:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * \param channel Compare channel
 215:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  */void macsc_disable_cmp_int(enum macsc_cc_channel channel);
 216:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 
 217:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** /**
 218:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * \brief Usage of Absolute compare mode of the MACSC
 219:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  *
 220:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * \param abs_rel  0 for absoulte cmp;1 for relative cmp
 221:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * \param cmp compare value for SCOCRx register
 222:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * \param channel Compare channel
 223:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  */
 224:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** void macsc_use_cmp(bool abs_rel, uint32_t cmp,enum macsc_cc_channel channel);
 225:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 
 226:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** /**
 227:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * \ingroup macsc_group
 228:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * \defgroup macsc_interrupt_group MAC Symbol Counter (MACSC) interrupt
 229:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * management
 230:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * This group provides functions to configure MACSC module interrupts
 231:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  *
 232:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * @{
 233:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  */
 234:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 
 235:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** /**
 236:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * \brief Set MACSC overflow interrupt callback function
 237:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  *
 238:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * This function allows the caller to set and change the interrupt callback
 239:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * function. Without setting a callback function the interrupt handler in the
 240:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * driver will only clear the interrupt flags.
 241:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  *
 242:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * \param callback Reference to a callback function
 243:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  */
 244:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** void macsc_set_ovf_int_cb(macsc_callback_t callback);
 245:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 
 246:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** /**
 247:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * \brief Set MACSC Compare Channel 1 interrupt callback function
 248:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  *
 249:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * This function allows the caller to set and change the interrupt callback
 250:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * function. Without setting a callback function the interrupt handler in the
 251:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * driver will only clear the interrupt flags.
 252:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  *
 253:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * \param callback Reference to a callback function
 254:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  */
 255:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** void macsc_set_cmp1_int_cb(macsc_callback_t callback);
 256:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 
 257:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** /**
 258:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * \brief Set MACSC Compare Channel 2 interrupt callback function
 259:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  *
 260:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * This function allows the caller to set and change the interrupt callback
 261:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * function. Without setting a callback function the interrupt handler in the
 262:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * driver will only clear the interrupt flags.
 263:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  *
 264:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * \param callback Reference to a callback function
 265:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  */
 266:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** void macsc_set_cmp2_int_cb(macsc_callback_t callback);
 267:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 
 268:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** /**
 269:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * \brief Set MACSC Compare Channel 3 interrupt callback function
 270:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  *
 271:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * This function allows the caller to set and change the interrupt callback
 272:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * function. Without setting a callback function the interrupt handler in the
 273:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * driver will only clear the interrupt flags.
 274:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  *
 275:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * \param callback Reference to a callback function
 276:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  */
 277:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** void macsc_set_cmp3_int_cb(macsc_callback_t callback);
 278:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 
 279:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** /**
 280:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * \brief Set MACSC backoff slot counter interrupt callback function
 281:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  *
 282:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * This function allows the caller to set and change the interrupt callback
 283:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * function. Without setting a callback function the interrupt handler in the
 284:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * driver will only clear the interrupt flags.
 285:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  *
 286:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * \param callback Reference to a callback function
 287:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  */
 288:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** void macsc_set_backoff_slot_cntr_int_cb(macsc_callback_t callback);
 289:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** //@}
 290:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 
 291:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** /**
 292:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * \brief Enable 32.768KHz clk using timer 2 async register
 293:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  *
 294:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * \param none
 295:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  */
 296:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 
 297:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** static inline void macsc_sleep_clk_enable(void)
 298:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** {
  64               		.loc 2 298 0
  65               		.cfi_startproc
  66 002e CF93      		push r28
  67               	.LCFI4:
  68               		.cfi_def_cfa_offset 3
  69               		.cfi_offset 28, -2
  70 0030 DF93      		push r29
  71               	.LCFI5:
  72               		.cfi_def_cfa_offset 4
  73               		.cfi_offset 29, -3
  74 0032 CDB7      		in r28,__SP_L__
  75 0034 DEB7      		in r29,__SP_H__
  76               	.LCFI6:
  77               		.cfi_def_cfa_register 28
  78               	/* prologue: function */
  79               	/* frame size = 0 */
  80               	/* stack size = 2 */
  81               	.L__stack_usage = 2
 299:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 	ASSR |= (1 << AS2);
  82               		.loc 2 299 0
  83 0036 86EB      		ldi r24,lo8(-74)
  84 0038 90E0      		ldi r25,0
  85 003a 26EB      		ldi r18,lo8(-74)
  86 003c 30E0      		ldi r19,0
  87 003e F901      		movw r30,r18
  88 0040 2081      		ld r18,Z
  89 0042 2062      		ori r18,lo8(32)
  90 0044 FC01      		movw r30,r24
  91 0046 2083      		st Z,r18
 300:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** }
  92               		.loc 2 300 0
  93 0048 0000      		nop
  94               	/* epilogue start */
  95 004a DF91      		pop r29
  96 004c CF91      		pop r28
  97 004e 0895      		ret
  98               		.cfi_endproc
  99               	.LFE16:
 102               	macsc_write_clock_source:
 103               	.LFB18:
 301:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 
 302:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** /**
 303:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * \brief Disable 32.768KHz clk using timer 2 async register
 304:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  *
 305:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * \param none
 306:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  */
 307:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** static inline void macsc_sleep_clk_disable(void)
 308:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** {
 309:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 	ASSR &= ~(1 << AS2);
 310:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** }
 311:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 
 312:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** /* @} */
 313:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 
 314:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** /**
 315:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * \brief Configure MAC Symbol Counter Clock Source
 316:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  *
 317:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  * \param macsc macsc clk src
 318:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h ****  */
 319:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** static inline void macsc_write_clock_source(enum macsc_xtal source)
 320:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** {
 104               		.loc 2 320 0
 105               		.cfi_startproc
 106 0050 CF93      		push r28
 107               	.LCFI7:
 108               		.cfi_def_cfa_offset 3
 109               		.cfi_offset 28, -2
 110 0052 DF93      		push r29
 111               	.LCFI8:
 112               		.cfi_def_cfa_offset 4
 113               		.cfi_offset 29, -3
 114 0054 1F92      		push __zero_reg__
 115               	.LCFI9:
 116               		.cfi_def_cfa_offset 5
 117 0056 CDB7      		in r28,__SP_L__
 118 0058 DEB7      		in r29,__SP_H__
 119               	.LCFI10:
 120               		.cfi_def_cfa_register 28
 121               	/* prologue: function */
 122               	/* frame size = 1 */
 123               	/* stack size = 3 */
 124               	.L__stack_usage = 3
 125 005a 8983      		std Y+1,r24
 321:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 	if (source == MACSC_16MHz) {
 126               		.loc 2 321 0
 127 005c 8981      		ldd r24,Y+1
 128 005e 8823      		tst r24
 129 0060 01F4      		brne .L4
 322:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 		SCCR0 |= (source << SCCKSEL);
 130               		.loc 2 322 0
 131 0062 8CED      		ldi r24,lo8(-36)
 132 0064 90E0      		ldi r25,0
 133 0066 2CED      		ldi r18,lo8(-36)
 134 0068 30E0      		ldi r19,0
 135 006a F901      		movw r30,r18
 136 006c 2081      		ld r18,Z
 137 006e 422F      		mov r20,r18
 138 0070 2981      		ldd r18,Y+1
 139 0072 222F      		mov r18,r18
 140 0074 30E0      		ldi r19,0
 141 0076 2295      		swap r18
 142 0078 3295      		swap r19
 143 007a 307F      		andi r19,0xf0
 144 007c 3227      		eor r19,r18
 145 007e 207F      		andi r18,0xf0
 146 0080 3227      		eor r19,r18
 147 0082 242B      		or r18,r20
 148 0084 FC01      		movw r30,r24
 149 0086 2083      		st Z,r18
 323:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 	} else if (source == MACSC_32KHz) {
 324:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 		SCCR0 &= ~(1 << SCCKSEL);
 325:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 	}
 326:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** }
 150               		.loc 2 326 0
 151 0088 00C0      		rjmp .L6
 152               	.L4:
 323:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 	} else if (source == MACSC_32KHz) {
 153               		.loc 2 323 0
 154 008a 8981      		ldd r24,Y+1
 155 008c 8130      		cpi r24,lo8(1)
 156 008e 01F4      		brne .L6
 324:../../../platform/mega_rf/drivers/macsc/macsc_megarf.h **** 	}
 157               		.loc 2 324 0
 158 0090 8CED      		ldi r24,lo8(-36)
 159 0092 90E0      		ldi r25,0
 160 0094 2CED      		ldi r18,lo8(-36)
 161 0096 30E0      		ldi r19,0
 162 0098 F901      		movw r30,r18
 163 009a 2081      		ld r18,Z
 164 009c 2F7E      		andi r18,lo8(-17)
 165 009e FC01      		movw r30,r24
 166 00a0 2083      		st Z,r18
 167               	.L6:
 168               		.loc 2 326 0
 169 00a2 0000      		nop
 170               	/* epilogue start */
 171 00a4 0F90      		pop __tmp_reg__
 172 00a6 DF91      		pop r29
 173 00a8 CF91      		pop r28
 174 00aa 0895      		ret
 175               		.cfi_endproc
 176               	.LFE18:
 179               	sysclk_enable_peripheral_clock:
 180               	.LFB98:
 181               		.file 3 "../../../platform/common/services/clock/mega/sysclk.h"
   1:../../../platform/common/services/clock/mega/sysclk.h **** /**
   2:../../../platform/common/services/clock/mega/sysclk.h ****  * \file
   3:../../../platform/common/services/clock/mega/sysclk.h ****  *
   4:../../../platform/common/services/clock/mega/sysclk.h ****  * \brief Chip-specific system clock management functions
   5:../../../platform/common/services/clock/mega/sysclk.h ****  *
   6:../../../platform/common/services/clock/mega/sysclk.h ****  * Copyright (c) 2012 Atmel Corporation. All rights reserved.
   7:../../../platform/common/services/clock/mega/sysclk.h ****  *
   8:../../../platform/common/services/clock/mega/sysclk.h ****  * \asf_license_start
   9:../../../platform/common/services/clock/mega/sysclk.h ****  *
  10:../../../platform/common/services/clock/mega/sysclk.h ****  * \page License
  11:../../../platform/common/services/clock/mega/sysclk.h ****  *
  12:../../../platform/common/services/clock/mega/sysclk.h ****  * Redistribution and use in source and binary forms, with or without
  13:../../../platform/common/services/clock/mega/sysclk.h ****  * modification, are permitted provided that the following conditions are met:
  14:../../../platform/common/services/clock/mega/sysclk.h ****  *
  15:../../../platform/common/services/clock/mega/sysclk.h ****  * 1. Redistributions of source code must retain the above copyright notice,
  16:../../../platform/common/services/clock/mega/sysclk.h ****  *    this list of conditions and the following disclaimer.
  17:../../../platform/common/services/clock/mega/sysclk.h ****  *
  18:../../../platform/common/services/clock/mega/sysclk.h ****  * 2. Redistributions in binary form must reproduce the above copyright notice,
  19:../../../platform/common/services/clock/mega/sysclk.h ****  *    this list of conditions and the following disclaimer in the documentation
  20:../../../platform/common/services/clock/mega/sysclk.h ****  *    and/or other materials provided with the distribution.
  21:../../../platform/common/services/clock/mega/sysclk.h ****  *
  22:../../../platform/common/services/clock/mega/sysclk.h ****  * 3. The name of Atmel may not be used to endorse or promote products derived
  23:../../../platform/common/services/clock/mega/sysclk.h ****  *    from this software without specific prior written permission.
  24:../../../platform/common/services/clock/mega/sysclk.h ****  *
  25:../../../platform/common/services/clock/mega/sysclk.h ****  * 4. This software may only be redistributed and used in connection with an
  26:../../../platform/common/services/clock/mega/sysclk.h ****  *    Atmel microcontroller product.
  27:../../../platform/common/services/clock/mega/sysclk.h ****  *
  28:../../../platform/common/services/clock/mega/sysclk.h ****  * THIS SOFTWARE IS PROVIDED BY ATMEL "AS IS" AND ANY EXPRESS OR IMPLIED
  29:../../../platform/common/services/clock/mega/sysclk.h ****  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
  30:../../../platform/common/services/clock/mega/sysclk.h ****  * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE
  31:../../../platform/common/services/clock/mega/sysclk.h ****  * EXPRESSLY AND SPECIFICALLY DISCLAIMED. IN NO EVENT SHALL ATMEL BE LIABLE FOR
  32:../../../platform/common/services/clock/mega/sysclk.h ****  * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  33:../../../platform/common/services/clock/mega/sysclk.h ****  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
  34:../../../platform/common/services/clock/mega/sysclk.h ****  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
  35:../../../platform/common/services/clock/mega/sysclk.h ****  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
  36:../../../platform/common/services/clock/mega/sysclk.h ****  * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
  37:../../../platform/common/services/clock/mega/sysclk.h ****  * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  38:../../../platform/common/services/clock/mega/sysclk.h ****  * POSSIBILITY OF SUCH DAMAGE.
  39:../../../platform/common/services/clock/mega/sysclk.h ****  *
  40:../../../platform/common/services/clock/mega/sysclk.h ****  * \asf_license_stop
  41:../../../platform/common/services/clock/mega/sysclk.h ****  *
  42:../../../platform/common/services/clock/mega/sysclk.h ****  */
  43:../../../platform/common/services/clock/mega/sysclk.h **** #ifndef MEGA_SYSCLK_H_INCLUDED
  44:../../../platform/common/services/clock/mega/sysclk.h **** #define MEGA_SYSCLK_H_INCLUDED
  45:../../../platform/common/services/clock/mega/sysclk.h **** 
  46:../../../platform/common/services/clock/mega/sysclk.h **** #include <board.h>
  47:../../../platform/common/services/clock/mega/sysclk.h **** #include <compiler.h>
  48:../../../platform/common/services/clock/mega/sysclk.h **** #include <parts.h>
  49:../../../platform/common/services/clock/mega/sysclk.h **** 
  50:../../../platform/common/services/clock/mega/sysclk.h **** /* Include clock configuration for the project. */
  51:../../../platform/common/services/clock/mega/sysclk.h **** #include <conf_clock.h>
  52:../../../platform/common/services/clock/mega/sysclk.h **** 
  53:../../../platform/common/services/clock/mega/sysclk.h **** #ifdef __cplusplus
  54:../../../platform/common/services/clock/mega/sysclk.h **** extern "C" {
  55:../../../platform/common/services/clock/mega/sysclk.h **** #endif
  56:../../../platform/common/services/clock/mega/sysclk.h **** #define ASM __asm__
  57:../../../platform/common/services/clock/mega/sysclk.h **** 
  58:../../../platform/common/services/clock/mega/sysclk.h **** /* CONFIG_SYSCLK_PSDIV  to use default if not defined*/
  59:../../../platform/common/services/clock/mega/sysclk.h **** #ifndef CONFIG_SYSCLK_PSDIV
  60:../../../platform/common/services/clock/mega/sysclk.h **** # define CONFIG_SYSCLK_PSDIV    SYSCLK_PSDIV_8
  61:../../../platform/common/services/clock/mega/sysclk.h **** #endif
  62:../../../platform/common/services/clock/mega/sysclk.h **** 
  63:../../../platform/common/services/clock/mega/sysclk.h **** /* ! \name Prescaler Setting (relative to CLKsys) */
  64:../../../platform/common/services/clock/mega/sysclk.h **** /* @{ */
  65:../../../platform/common/services/clock/mega/sysclk.h **** #define SYSCLK_PSDIV_1      0   /* !< Do not prescale */
  66:../../../platform/common/services/clock/mega/sysclk.h **** #define SYSCLK_PSDIV_2      1   /* !< Prescale CLKper4 by 2 */
  67:../../../platform/common/services/clock/mega/sysclk.h **** #define SYSCLK_PSDIV_4      2   /* !< Prescale CLKper4 by 4 */
  68:../../../platform/common/services/clock/mega/sysclk.h **** #define SYSCLK_PSDIV_8      3   /* !< Prescale CLKper4 by 8 */
  69:../../../platform/common/services/clock/mega/sysclk.h **** #define SYSCLK_PSDIV_16     4   /* !< Prescale CLKper4 by 16 */
  70:../../../platform/common/services/clock/mega/sysclk.h **** #define SYSCLK_PSDIV_32     5   /* !< Prescale CLKper4 by 32 */
  71:../../../platform/common/services/clock/mega/sysclk.h **** #define SYSCLK_PSDIV_64     6   /* !< Prescale CLKper4 by 64 */
  72:../../../platform/common/services/clock/mega/sysclk.h **** #define SYSCLK_PSDIV_128    7   /* !< Prescale CLKper4 by 128 */
  73:../../../platform/common/services/clock/mega/sysclk.h **** #define SYSCLK_PSDIV_256    8   /* !< Prescale CLKper4 by 256 */
  74:../../../platform/common/services/clock/mega/sysclk.h **** 
  75:../../../platform/common/services/clock/mega/sysclk.h **** /* @} */
  76:../../../platform/common/services/clock/mega/sysclk.h **** 
  77:../../../platform/common/services/clock/mega/sysclk.h **** #if MEGA_RF || MEGA_XX0_1 || MEGA_XX4 || MEGA_XX4_A
  78:../../../platform/common/services/clock/mega/sysclk.h **** 
  79:../../../platform/common/services/clock/mega/sysclk.h **** #define NUMBER_OF_POWER_REG       2
  80:../../../platform/common/services/clock/mega/sysclk.h **** /*Starting Address for power reduction*/
  81:../../../platform/common/services/clock/mega/sysclk.h **** #define POWER_REG_ADD             PRR0
  82:../../../platform/common/services/clock/mega/sysclk.h **** 
  83:../../../platform/common/services/clock/mega/sysclk.h **** /* ! \name Power Reduction  Clock Port Numbers */
  84:../../../platform/common/services/clock/mega/sysclk.h **** enum power_red_id {
  85:../../../platform/common/services/clock/mega/sysclk.h **** 	POWER_RED_REG0,     /* !< Devices on PRR0 */
  86:../../../platform/common/services/clock/mega/sysclk.h **** #if !MEGA_XX4 || !MEGA_XX4_A || MEGA_XX0_1
  87:../../../platform/common/services/clock/mega/sysclk.h **** 	POWER_RED_REG1,     /* !< Devices on PRR1 */
  88:../../../platform/common/services/clock/mega/sysclk.h **** #endif
  89:../../../platform/common/services/clock/mega/sysclk.h **** };
  90:../../../platform/common/services/clock/mega/sysclk.h **** #endif
  91:../../../platform/common/services/clock/mega/sysclk.h **** 
  92:../../../platform/common/services/clock/mega/sysclk.h **** /****************************************************
  93:../../../platform/common/services/clock/mega/sysclk.h ****  * Given a dummy type but not used for these groups
  94:../../../platform/common/services/clock/mega/sysclk.h ****  * to support for otherthen megaRF device.
  95:../../../platform/common/services/clock/mega/sysclk.h ****  **************************************************/
  96:../../../platform/common/services/clock/mega/sysclk.h **** #if MEGA_XX8 || MEGA_XX8_A || MEGA_UNSPECIFIED
  97:../../../platform/common/services/clock/mega/sysclk.h **** #define NUMBER_OF_POWER_REG       1
  98:../../../platform/common/services/clock/mega/sysclk.h **** /*Starting Address for power reduction*/
  99:../../../platform/common/services/clock/mega/sysclk.h **** #define POWER_REG_ADD             PRR
 100:../../../platform/common/services/clock/mega/sysclk.h **** 
 101:../../../platform/common/services/clock/mega/sysclk.h **** /* ! \name Power Reduction  Clock Port Numbers */
 102:../../../platform/common/services/clock/mega/sysclk.h **** enum power_red_id {
 103:../../../platform/common/services/clock/mega/sysclk.h **** 	POWER_RED_REG0,     /* !< Devices on PRR */
 104:../../../platform/common/services/clock/mega/sysclk.h **** };
 105:../../../platform/common/services/clock/mega/sysclk.h **** #endif
 106:../../../platform/common/services/clock/mega/sysclk.h **** 
 107:../../../platform/common/services/clock/mega/sysclk.h **** /* Bit mask for the power reduction register based on */
 108:../../../platform/common/services/clock/mega/sysclk.h **** /*   MCU ARCH.                                        */
 109:../../../platform/common/services/clock/mega/sysclk.h **** #if MEGA_RF
 110:../../../platform/common/services/clock/mega/sysclk.h **** /*Bit mask for PRR2 */
 111:../../../platform/common/services/clock/mega/sysclk.h **** 
 112:../../../platform/common/services/clock/mega/sysclk.h **** #define PRRAM0_bm                       1 << PRRAM0
 113:../../../platform/common/services/clock/mega/sysclk.h **** #define PRRAM1_bm                       1 << PRRAM1
 114:../../../platform/common/services/clock/mega/sysclk.h **** #define PRRAM2_bm                       1 << PRRAM2
 115:../../../platform/common/services/clock/mega/sysclk.h **** #define PRRAM3_bm                       1 << PRRAM3
 116:../../../platform/common/services/clock/mega/sysclk.h **** #endif
 117:../../../platform/common/services/clock/mega/sysclk.h **** 
 118:../../../platform/common/services/clock/mega/sysclk.h **** /*Bit mask for the power reduction 0 or PRR*/
 119:../../../platform/common/services/clock/mega/sysclk.h **** #if !MEGA_XX_UN0 && !MEGA_XX_UN0
 120:../../../platform/common/services/clock/mega/sysclk.h **** #define PRADC_bm                        1 << PRADC
 121:../../../platform/common/services/clock/mega/sysclk.h **** #define PRUSART0_bm                     1 << PRUSART0
 122:../../../platform/common/services/clock/mega/sysclk.h **** #define PRSPI_bm                        1 << PRSPI
 123:../../../platform/common/services/clock/mega/sysclk.h **** #define PRTIM1_bm                       1 << PRTIM1
 124:../../../platform/common/services/clock/mega/sysclk.h **** #endif
 125:../../../platform/common/services/clock/mega/sysclk.h **** 
 126:../../../platform/common/services/clock/mega/sysclk.h **** #if MEGA_RF
 127:../../../platform/common/services/clock/mega/sysclk.h **** #define PRPGA_bm                        1 << PRPGA
 128:../../../platform/common/services/clock/mega/sysclk.h **** #endif
 129:../../../platform/common/services/clock/mega/sysclk.h **** 
 130:../../../platform/common/services/clock/mega/sysclk.h **** #if !MEGA_UNSPECIFIED
 131:../../../platform/common/services/clock/mega/sysclk.h **** #define PRTIM0_bm                       1 << PRTIM0
 132:../../../platform/common/services/clock/mega/sysclk.h **** #define PRTIM2_bm                       1 << PRTIM2
 133:../../../platform/common/services/clock/mega/sysclk.h **** #define PRTWI_bm                        1 << PRTWI
 134:../../../platform/common/services/clock/mega/sysclk.h **** #endif
 135:../../../platform/common/services/clock/mega/sysclk.h **** 
 136:../../../platform/common/services/clock/mega/sysclk.h **** #if MEGA_XX_UN2
 137:../../../platform/common/services/clock/mega/sysclk.h **** #define PRLCD_bm                        1 << PRLCD
 138:../../../platform/common/services/clock/mega/sysclk.h **** #endif
 139:../../../platform/common/services/clock/mega/sysclk.h **** 
 140:../../../platform/common/services/clock/mega/sysclk.h **** /*Bit mask for  PRR1  */
 141:../../../platform/common/services/clock/mega/sysclk.h **** #ifdef PRR1
 142:../../../platform/common/services/clock/mega/sysclk.h **** #if (MEGA_XX4 || MEGA_XX4_A)
 143:../../../platform/common/services/clock/mega/sysclk.h **** #define PRTIM3_bm                       1 << PRTIM3
 144:../../../platform/common/services/clock/mega/sysclk.h **** #endif
 145:../../../platform/common/services/clock/mega/sysclk.h **** #endif
 146:../../../platform/common/services/clock/mega/sysclk.h **** 
 147:../../../platform/common/services/clock/mega/sysclk.h **** #if MEGA_RF || MEGA_XX4 || MEGA_XX4_A
 148:../../../platform/common/services/clock/mega/sysclk.h **** #define PRUSART1_bm                     1 << PRUSART1
 149:../../../platform/common/services/clock/mega/sysclk.h **** #define PRUSART2_bm                     1 << PRUSART2
 150:../../../platform/common/services/clock/mega/sysclk.h **** #define PRUSART3_bm                     1 << PRUSART3
 151:../../../platform/common/services/clock/mega/sysclk.h **** #define PRTIM3_bm                       1 << PRTIM3
 152:../../../platform/common/services/clock/mega/sysclk.h **** #define PRTIM4_bm                       1 << PRTIM4
 153:../../../platform/common/services/clock/mega/sysclk.h **** #define PRTIM5_bm                       1 << PRTIM5
 154:../../../platform/common/services/clock/mega/sysclk.h **** #endif
 155:../../../platform/common/services/clock/mega/sysclk.h **** 
 156:../../../platform/common/services/clock/mega/sysclk.h **** #if MEGA_RF
 157:../../../platform/common/services/clock/mega/sysclk.h **** #define PRTRX24_bm                      1 << PRTRX24
 158:../../../platform/common/services/clock/mega/sysclk.h **** #endif
 159:../../../platform/common/services/clock/mega/sysclk.h **** 
 160:../../../platform/common/services/clock/mega/sysclk.h **** /**
 161:../../../platform/common/services/clock/mega/sysclk.h ****  * \name Querying the system clock and its derived clocks
 162:../../../platform/common/services/clock/mega/sysclk.h ****  */
 163:../../../platform/common/services/clock/mega/sysclk.h **** /* @{ */
 164:../../../platform/common/services/clock/mega/sysclk.h **** 
 165:../../../platform/common/services/clock/mega/sysclk.h **** /**
 166:../../../platform/common/services/clock/mega/sysclk.h ****  * \brief Return the current rate in Hz of the main system clock
 167:../../../platform/common/services/clock/mega/sysclk.h ****  * To know the clock value at what frequency the main clock is running
 168:../../../platform/common/services/clock/mega/sysclk.h ****  * \return Frequency of the main system clock, in Hz.
 169:../../../platform/common/services/clock/mega/sysclk.h ****  * \todo : please initialize the SYSCLK_SOURCE in conf_clock.h file for
 170:../../../platform/common/services/clock/mega/sysclk.h ****  * configured source clock using fuses.
 171:../../../platform/common/services/clock/mega/sysclk.h ****  * \eg. #define SYSCLK_SOURCE SYSCLK_SRC_RC16MHZ to use internal RC
 172:../../../platform/common/services/clock/mega/sysclk.h ****  * oscillator for clock source.
 173:../../../platform/common/services/clock/mega/sysclk.h ****  */
 174:../../../platform/common/services/clock/mega/sysclk.h **** static inline uint32_t sysclk_get_main_hz(void)
 175:../../../platform/common/services/clock/mega/sysclk.h **** {
 176:../../../platform/common/services/clock/mega/sysclk.h **** 	switch (SYSCLK_SOURCE) {
 177:../../../platform/common/services/clock/mega/sysclk.h **** 	case SYSCLK_SRC_RC16MHZ:
 178:../../../platform/common/services/clock/mega/sysclk.h **** 		return 16000000UL;
 179:../../../platform/common/services/clock/mega/sysclk.h **** 
 180:../../../platform/common/services/clock/mega/sysclk.h **** 	case SYSCLK_SRC_RC128KHZ:
 181:../../../platform/common/services/clock/mega/sysclk.h **** 		return 128000UL;
 182:../../../platform/common/services/clock/mega/sysclk.h **** 
 183:../../../platform/common/services/clock/mega/sysclk.h **** #if MEGA_RF
 184:../../../platform/common/services/clock/mega/sysclk.h **** 	case SYSCLK_SRC_TRS16MHZ:
 185:../../../platform/common/services/clock/mega/sysclk.h **** 		return 16000000UL;
 186:../../../platform/common/services/clock/mega/sysclk.h **** #endif
 187:../../../platform/common/services/clock/mega/sysclk.h **** #ifdef BOARD_EXTERNAL_CLK
 188:../../../platform/common/services/clock/mega/sysclk.h **** 	case SYSCLK_SRC_EXTERNAL:
 189:../../../platform/common/services/clock/mega/sysclk.h **** 		return BOARD_EXTERNAL_CLK;
 190:../../../platform/common/services/clock/mega/sysclk.h **** #endif
 191:../../../platform/common/services/clock/mega/sysclk.h **** 	default:
 192:../../../platform/common/services/clock/mega/sysclk.h **** 
 193:../../../platform/common/services/clock/mega/sysclk.h **** 		return 1000000UL;
 194:../../../platform/common/services/clock/mega/sysclk.h **** 	}
 195:../../../platform/common/services/clock/mega/sysclk.h **** }
 196:../../../platform/common/services/clock/mega/sysclk.h **** 
 197:../../../platform/common/services/clock/mega/sysclk.h **** /**
 198:../../../platform/common/services/clock/mega/sysclk.h ****  * \brief Return the current rate in Hz of source clock in Hz.
 199:../../../platform/common/services/clock/mega/sysclk.h ****  *
 200:../../../platform/common/services/clock/mega/sysclk.h ****  * This clock always runs at the same rate as the CPU clock unless the divider
 201:../../../platform/common/services/clock/mega/sysclk.h ****  * is set.
 202:../../../platform/common/services/clock/mega/sysclk.h ****  *
 203:../../../platform/common/services/clock/mega/sysclk.h ****  * \return Frequency of the system clock, in Hz.
 204:../../../platform/common/services/clock/mega/sysclk.h ****  */
 205:../../../platform/common/services/clock/mega/sysclk.h **** static inline uint32_t sysclk_get_source_clock_hz(void)
 206:../../../platform/common/services/clock/mega/sysclk.h **** {
 207:../../../platform/common/services/clock/mega/sysclk.h **** 	switch (CONFIG_SYSCLK_PSDIV) {
 208:../../../platform/common/services/clock/mega/sysclk.h **** 	case SYSCLK_PSDIV_1: /* Fall through */
 209:../../../platform/common/services/clock/mega/sysclk.h **** 		if (SYSCLK_SOURCE == SYSCLK_SRC_RC16MHZ ||
 210:../../../platform/common/services/clock/mega/sysclk.h **** 				SYSCLK_SOURCE == SYSCLK_SRC_RC128KHZ) {
 211:../../../platform/common/services/clock/mega/sysclk.h **** 			return sysclk_get_main_hz() / 2;
 212:../../../platform/common/services/clock/mega/sysclk.h **** 		} else {
 213:../../../platform/common/services/clock/mega/sysclk.h **** 			return sysclk_get_main_hz();
 214:../../../platform/common/services/clock/mega/sysclk.h **** 		}
 215:../../../platform/common/services/clock/mega/sysclk.h **** 
 216:../../../platform/common/services/clock/mega/sysclk.h **** 	case SYSCLK_PSDIV_2:
 217:../../../platform/common/services/clock/mega/sysclk.h **** 		if (SYSCLK_SOURCE == SYSCLK_SRC_RC16MHZ ||
 218:../../../platform/common/services/clock/mega/sysclk.h **** 				SYSCLK_SOURCE == SYSCLK_SRC_RC128KHZ) {
 219:../../../platform/common/services/clock/mega/sysclk.h **** 			return sysclk_get_main_hz() / 4;
 220:../../../platform/common/services/clock/mega/sysclk.h **** 		} else {
 221:../../../platform/common/services/clock/mega/sysclk.h **** 			return sysclk_get_main_hz() / 2;
 222:../../../platform/common/services/clock/mega/sysclk.h **** 		}
 223:../../../platform/common/services/clock/mega/sysclk.h **** 
 224:../../../platform/common/services/clock/mega/sysclk.h **** 	case SYSCLK_PSDIV_4:
 225:../../../platform/common/services/clock/mega/sysclk.h **** 		if (SYSCLK_SOURCE == SYSCLK_SRC_RC16MHZ ||
 226:../../../platform/common/services/clock/mega/sysclk.h **** 				SYSCLK_SOURCE == SYSCLK_SRC_RC128KHZ) {
 227:../../../platform/common/services/clock/mega/sysclk.h **** 			return sysclk_get_main_hz() / 8;
 228:../../../platform/common/services/clock/mega/sysclk.h **** 		} else {
 229:../../../platform/common/services/clock/mega/sysclk.h **** 			return sysclk_get_main_hz() / 4;
 230:../../../platform/common/services/clock/mega/sysclk.h **** 		}
 231:../../../platform/common/services/clock/mega/sysclk.h **** 
 232:../../../platform/common/services/clock/mega/sysclk.h **** 	case SYSCLK_PSDIV_8:
 233:../../../platform/common/services/clock/mega/sysclk.h **** 		if (SYSCLK_SOURCE == SYSCLK_SRC_RC16MHZ ||
 234:../../../platform/common/services/clock/mega/sysclk.h **** 				SYSCLK_SOURCE == SYSCLK_SRC_RC128KHZ) {
 235:../../../platform/common/services/clock/mega/sysclk.h **** 			return sysclk_get_main_hz() / 16;
 236:../../../platform/common/services/clock/mega/sysclk.h **** 		} else {
 237:../../../platform/common/services/clock/mega/sysclk.h **** 			return sysclk_get_main_hz() / 8;
 238:../../../platform/common/services/clock/mega/sysclk.h **** 		}
 239:../../../platform/common/services/clock/mega/sysclk.h **** 
 240:../../../platform/common/services/clock/mega/sysclk.h **** 	case SYSCLK_PSDIV_16:
 241:../../../platform/common/services/clock/mega/sysclk.h **** 		if (SYSCLK_SOURCE == SYSCLK_SRC_RC16MHZ ||
 242:../../../platform/common/services/clock/mega/sysclk.h **** 				SYSCLK_SOURCE == SYSCLK_SRC_RC128KHZ) {
 243:../../../platform/common/services/clock/mega/sysclk.h **** 			return sysclk_get_main_hz() / 32;
 244:../../../platform/common/services/clock/mega/sysclk.h **** 		} else {
 245:../../../platform/common/services/clock/mega/sysclk.h **** 			return sysclk_get_main_hz() / 16;
 246:../../../platform/common/services/clock/mega/sysclk.h **** 		}
 247:../../../platform/common/services/clock/mega/sysclk.h **** 
 248:../../../platform/common/services/clock/mega/sysclk.h **** 	case SYSCLK_PSDIV_32:
 249:../../../platform/common/services/clock/mega/sysclk.h **** 		if (SYSCLK_SOURCE == SYSCLK_SRC_RC16MHZ ||
 250:../../../platform/common/services/clock/mega/sysclk.h **** 				SYSCLK_SOURCE == SYSCLK_SRC_RC128KHZ) {
 251:../../../platform/common/services/clock/mega/sysclk.h **** 			return sysclk_get_main_hz() / 64;
 252:../../../platform/common/services/clock/mega/sysclk.h **** 		} else {
 253:../../../platform/common/services/clock/mega/sysclk.h **** 			return sysclk_get_main_hz() / 32;
 254:../../../platform/common/services/clock/mega/sysclk.h **** 		}
 255:../../../platform/common/services/clock/mega/sysclk.h **** 
 256:../../../platform/common/services/clock/mega/sysclk.h **** 	case SYSCLK_PSDIV_64:
 257:../../../platform/common/services/clock/mega/sysclk.h **** 		if (SYSCLK_SOURCE == SYSCLK_SRC_RC16MHZ ||
 258:../../../platform/common/services/clock/mega/sysclk.h **** 				SYSCLK_SOURCE == SYSCLK_SRC_RC128KHZ) {
 259:../../../platform/common/services/clock/mega/sysclk.h **** 			return sysclk_get_main_hz() / 128;
 260:../../../platform/common/services/clock/mega/sysclk.h **** 		} else {
 261:../../../platform/common/services/clock/mega/sysclk.h **** 			return sysclk_get_main_hz() / 64;
 262:../../../platform/common/services/clock/mega/sysclk.h **** 		}
 263:../../../platform/common/services/clock/mega/sysclk.h **** 
 264:../../../platform/common/services/clock/mega/sysclk.h **** 	case SYSCLK_PSDIV_128:
 265:../../../platform/common/services/clock/mega/sysclk.h **** 		if (SYSCLK_SOURCE == SYSCLK_SRC_RC16MHZ ||
 266:../../../platform/common/services/clock/mega/sysclk.h **** 				SYSCLK_SOURCE == SYSCLK_SRC_RC128KHZ) {
 267:../../../platform/common/services/clock/mega/sysclk.h **** 			return sysclk_get_main_hz() / 256;
 268:../../../platform/common/services/clock/mega/sysclk.h **** 		} else {
 269:../../../platform/common/services/clock/mega/sysclk.h **** 			return sysclk_get_main_hz() / 128;
 270:../../../platform/common/services/clock/mega/sysclk.h **** 		}
 271:../../../platform/common/services/clock/mega/sysclk.h **** 
 272:../../../platform/common/services/clock/mega/sysclk.h **** 	case SYSCLK_PSDIV_256:
 273:../../../platform/common/services/clock/mega/sysclk.h **** 		if (SYSCLK_SOURCE == SYSCLK_SRC_RC16MHZ ||
 274:../../../platform/common/services/clock/mega/sysclk.h **** 				SYSCLK_SOURCE == SYSCLK_SRC_RC128KHZ) {
 275:../../../platform/common/services/clock/mega/sysclk.h **** 			return sysclk_get_main_hz() / 512;
 276:../../../platform/common/services/clock/mega/sysclk.h **** 		} else {
 277:../../../platform/common/services/clock/mega/sysclk.h **** 			return sysclk_get_main_hz() / 256;
 278:../../../platform/common/services/clock/mega/sysclk.h **** 		}
 279:../../../platform/common/services/clock/mega/sysclk.h **** 
 280:../../../platform/common/services/clock/mega/sysclk.h **** 	default:
 281:../../../platform/common/services/clock/mega/sysclk.h **** 		/*Invalide case*/
 282:../../../platform/common/services/clock/mega/sysclk.h **** 		return 0;
 283:../../../platform/common/services/clock/mega/sysclk.h **** 	}
 284:../../../platform/common/services/clock/mega/sysclk.h **** }
 285:../../../platform/common/services/clock/mega/sysclk.h **** 
 286:../../../platform/common/services/clock/mega/sysclk.h **** /**
 287:../../../platform/common/services/clock/mega/sysclk.h ****  * \brief Return the current rate in Hz of the CPU clock.
 288:../../../platform/common/services/clock/mega/sysclk.h ****  *
 289:../../../platform/common/services/clock/mega/sysclk.h ****  * \return Frequency of the CPU clock, in Hz.
 290:../../../platform/common/services/clock/mega/sysclk.h ****  */
 291:../../../platform/common/services/clock/mega/sysclk.h **** static inline uint32_t sysclk_get_cpu_hz(void)
 292:../../../platform/common/services/clock/mega/sysclk.h **** {
 293:../../../platform/common/services/clock/mega/sysclk.h **** 	return sysclk_get_source_clock_hz();
 294:../../../platform/common/services/clock/mega/sysclk.h **** }
 295:../../../platform/common/services/clock/mega/sysclk.h **** 
 296:../../../platform/common/services/clock/mega/sysclk.h **** /**
 297:../../../platform/common/services/clock/mega/sysclk.h ****  * \brief Return the current rate in Hz of the clock from internal oscillator
 298:../../../platform/common/services/clock/mega/sysclk.h ****  * \return Frequency of the CPU clock, in Hz.
 299:../../../platform/common/services/clock/mega/sysclk.h ****  */
 300:../../../platform/common/services/clock/mega/sysclk.h **** static inline uint32_t sysclk_get_rc_osc_hz(void)
 301:../../../platform/common/services/clock/mega/sysclk.h **** {
 302:../../../platform/common/services/clock/mega/sysclk.h **** 	switch (CONFIG_SYSCLK_PSDIV) {
 303:../../../platform/common/services/clock/mega/sysclk.h **** 	case SYSCLK_PSDIV_1:
 304:../../../platform/common/services/clock/mega/sysclk.h **** 		if (SYSCLK_SOURCE == SYSCLK_SRC_RC16MHZ ||
 305:../../../platform/common/services/clock/mega/sysclk.h **** 				SYSCLK_SOURCE == SYSCLK_SRC_RC128KHZ) {
 306:../../../platform/common/services/clock/mega/sysclk.h **** 			return sysclk_get_main_hz() / 2;
 307:../../../platform/common/services/clock/mega/sysclk.h **** 		}
 308:../../../platform/common/services/clock/mega/sysclk.h **** 
 309:../../../platform/common/services/clock/mega/sysclk.h **** 	case SYSCLK_PSDIV_2:
 310:../../../platform/common/services/clock/mega/sysclk.h **** 		if (SYSCLK_SOURCE == SYSCLK_SRC_RC16MHZ ||
 311:../../../platform/common/services/clock/mega/sysclk.h **** 				SYSCLK_SOURCE == SYSCLK_SRC_RC128KHZ) {
 312:../../../platform/common/services/clock/mega/sysclk.h **** 			return sysclk_get_main_hz() / 4;
 313:../../../platform/common/services/clock/mega/sysclk.h **** 		}
 314:../../../platform/common/services/clock/mega/sysclk.h **** 
 315:../../../platform/common/services/clock/mega/sysclk.h **** 	case SYSCLK_PSDIV_4:
 316:../../../platform/common/services/clock/mega/sysclk.h **** 		if (SYSCLK_SOURCE == SYSCLK_SRC_RC16MHZ ||
 317:../../../platform/common/services/clock/mega/sysclk.h **** 				SYSCLK_SOURCE == SYSCLK_SRC_RC128KHZ) {
 318:../../../platform/common/services/clock/mega/sysclk.h **** 			return sysclk_get_main_hz() / 8;
 319:../../../platform/common/services/clock/mega/sysclk.h **** 		}
 320:../../../platform/common/services/clock/mega/sysclk.h **** 
 321:../../../platform/common/services/clock/mega/sysclk.h **** 	case SYSCLK_PSDIV_8:
 322:../../../platform/common/services/clock/mega/sysclk.h **** 		if (SYSCLK_SOURCE == SYSCLK_SRC_RC16MHZ ||
 323:../../../platform/common/services/clock/mega/sysclk.h **** 				SYSCLK_SOURCE == SYSCLK_SRC_RC128KHZ) {
 324:../../../platform/common/services/clock/mega/sysclk.h **** 			return sysclk_get_main_hz() / 16;
 325:../../../platform/common/services/clock/mega/sysclk.h **** 		}
 326:../../../platform/common/services/clock/mega/sysclk.h **** 
 327:../../../platform/common/services/clock/mega/sysclk.h **** 	case SYSCLK_PSDIV_16:
 328:../../../platform/common/services/clock/mega/sysclk.h **** 		if (SYSCLK_SOURCE == SYSCLK_SRC_RC16MHZ ||
 329:../../../platform/common/services/clock/mega/sysclk.h **** 				SYSCLK_SOURCE == SYSCLK_SRC_RC128KHZ) {
 330:../../../platform/common/services/clock/mega/sysclk.h **** 			return sysclk_get_main_hz() / 32;
 331:../../../platform/common/services/clock/mega/sysclk.h **** 		}
 332:../../../platform/common/services/clock/mega/sysclk.h **** 
 333:../../../platform/common/services/clock/mega/sysclk.h **** 	case SYSCLK_PSDIV_32:
 334:../../../platform/common/services/clock/mega/sysclk.h **** 		if (SYSCLK_SOURCE == SYSCLK_SRC_RC16MHZ ||
 335:../../../platform/common/services/clock/mega/sysclk.h **** 				SYSCLK_SOURCE == SYSCLK_SRC_RC128KHZ) {
 336:../../../platform/common/services/clock/mega/sysclk.h **** 			return sysclk_get_main_hz() / 64;
 337:../../../platform/common/services/clock/mega/sysclk.h **** 		}
 338:../../../platform/common/services/clock/mega/sysclk.h **** 
 339:../../../platform/common/services/clock/mega/sysclk.h **** 	case SYSCLK_PSDIV_64:
 340:../../../platform/common/services/clock/mega/sysclk.h **** 		if (SYSCLK_SOURCE == SYSCLK_SRC_RC16MHZ ||
 341:../../../platform/common/services/clock/mega/sysclk.h **** 				SYSCLK_SOURCE == SYSCLK_SRC_RC128KHZ) {
 342:../../../platform/common/services/clock/mega/sysclk.h **** 			return sysclk_get_main_hz() / 128;
 343:../../../platform/common/services/clock/mega/sysclk.h **** 		}
 344:../../../platform/common/services/clock/mega/sysclk.h **** 
 345:../../../platform/common/services/clock/mega/sysclk.h **** 	case SYSCLK_PSDIV_128:
 346:../../../platform/common/services/clock/mega/sysclk.h **** 		if (SYSCLK_SOURCE == SYSCLK_SRC_RC16MHZ ||
 347:../../../platform/common/services/clock/mega/sysclk.h **** 				SYSCLK_SOURCE == SYSCLK_SRC_RC128KHZ) {
 348:../../../platform/common/services/clock/mega/sysclk.h **** 			return sysclk_get_main_hz() / 256;
 349:../../../platform/common/services/clock/mega/sysclk.h **** 		}
 350:../../../platform/common/services/clock/mega/sysclk.h **** 
 351:../../../platform/common/services/clock/mega/sysclk.h **** 	case SYSCLK_PSDIV_256:
 352:../../../platform/common/services/clock/mega/sysclk.h **** 		if (SYSCLK_SOURCE == SYSCLK_SRC_RC16MHZ ||
 353:../../../platform/common/services/clock/mega/sysclk.h **** 				SYSCLK_SOURCE == SYSCLK_SRC_RC128KHZ) {
 354:../../../platform/common/services/clock/mega/sysclk.h **** 			return sysclk_get_main_hz() / 512;
 355:../../../platform/common/services/clock/mega/sysclk.h **** 		}
 356:../../../platform/common/services/clock/mega/sysclk.h **** 
 357:../../../platform/common/services/clock/mega/sysclk.h **** 	default:
 358:../../../platform/common/services/clock/mega/sysclk.h **** 		return 0;
 359:../../../platform/common/services/clock/mega/sysclk.h **** 	}
 360:../../../platform/common/services/clock/mega/sysclk.h **** }
 361:../../../platform/common/services/clock/mega/sysclk.h **** 
 362:../../../platform/common/services/clock/mega/sysclk.h **** /* ! \name Enabling and disabling synchronous clocks */
 363:../../../platform/common/services/clock/mega/sysclk.h **** /* @{ */
 364:../../../platform/common/services/clock/mega/sysclk.h **** 
 365:../../../platform/common/services/clock/mega/sysclk.h **** /**
 366:../../../platform/common/services/clock/mega/sysclk.h ****  * \brief Enable the clock to peripheral \a id on port \a port
 367:../../../platform/common/services/clock/mega/sysclk.h ****  *
 368:../../../platform/common/services/clock/mega/sysclk.h ****  * \param port ID of the port to which the module is connected (one of
 369:../../../platform/common/services/clock/mega/sysclk.h ****  * the \c power_red_id *definitions).
 370:../../../platform/common/services/clock/mega/sysclk.h ****  * \param id The ID (bitmask) of the peripheral module to be disabled.*
 371:../../../platform/common/services/clock/mega/sysclk.h ****  */
 372:../../../platform/common/services/clock/mega/sysclk.h **** extern void sysclk_enable_module(enum power_red_id port, uint8_t id);
 373:../../../platform/common/services/clock/mega/sysclk.h **** 
 374:../../../platform/common/services/clock/mega/sysclk.h **** /**
 375:../../../platform/common/services/clock/mega/sysclk.h ****  * \brief Disable the clock to peripheral \a id on port \a port
 376:../../../platform/common/services/clock/mega/sysclk.h ****  *
 377:../../../platform/common/services/clock/mega/sysclk.h ****  * \param port ID of the port to which the module is connected (one of
 378:../../../platform/common/services/clock/mega/sysclk.h ****  * the \c power_red_id *definitions).
 379:../../../platform/common/services/clock/mega/sysclk.h ****  * \param id The ID (bit mask) of the peripheral module to be disabled.
 380:../../../platform/common/services/clock/mega/sysclk.h ****  */
 381:../../../platform/common/services/clock/mega/sysclk.h **** extern void sysclk_disable_module(enum power_red_id port, uint8_t id);
 382:../../../platform/common/services/clock/mega/sysclk.h **** 
 383:../../../platform/common/services/clock/mega/sysclk.h **** /**
 384:../../../platform/common/services/clock/mega/sysclk.h ****  * \brief Enable a peripherals clock from its base address.
 385:../../../platform/common/services/clock/mega/sysclk.h ****  *
 386:../../../platform/common/services/clock/mega/sysclk.h ****  *  Enables the clock to a peripheral, given its base address. If the peripheral
 387:../../../platform/common/services/clock/mega/sysclk.h ****  *  has an associated clock on the HSB bus, this will be enabled also.
 388:../../../platform/common/services/clock/mega/sysclk.h ****  *
 389:../../../platform/common/services/clock/mega/sysclk.h ****  * \param module Pointer to the module's base address.
 390:../../../platform/common/services/clock/mega/sysclk.h ****  */
 391:../../../platform/common/services/clock/mega/sysclk.h **** static inline void sysclk_enable_peripheral_clock(const volatile void *module)
 392:../../../platform/common/services/clock/mega/sysclk.h **** {
 182               		.loc 3 392 0
 183               		.cfi_startproc
 184 00ac CF93      		push r28
 185               	.LCFI11:
 186               		.cfi_def_cfa_offset 3
 187               		.cfi_offset 28, -2
 188 00ae DF93      		push r29
 189               	.LCFI12:
 190               		.cfi_def_cfa_offset 4
 191               		.cfi_offset 29, -3
 192 00b0 00D0      		rcall .
 193               	.LCFI13:
 194               		.cfi_def_cfa_offset 6
 195 00b2 CDB7      		in r28,__SP_L__
 196 00b4 DEB7      		in r29,__SP_H__
 197               	.LCFI14:
 198               		.cfi_def_cfa_register 28
 199               	/* prologue: function */
 200               	/* frame size = 2 */
 201               	/* stack size = 4 */
 202               	.L__stack_usage = 4
 203 00b6 9A83      		std Y+2,r25
 204 00b8 8983      		std Y+1,r24
 393:../../../platform/common/services/clock/mega/sysclk.h **** 	if (module == NULL) {
 205               		.loc 3 393 0
 206 00ba 8981      		ldd r24,Y+1
 207 00bc 9A81      		ldd r25,Y+2
 208 00be 892B      		or r24,r25
 209 00c0 01F4      		brne .+2
 210 00c2 00C0      		rjmp .L20
 394:../../../platform/common/services/clock/mega/sysclk.h **** 		Assert(false);
 395:../../../platform/common/services/clock/mega/sysclk.h **** 	}
 396:../../../platform/common/services/clock/mega/sysclk.h **** 
 397:../../../platform/common/services/clock/mega/sysclk.h **** #if !MEGA_XX_UN0 && !MEGA_XX_UN1
 398:../../../platform/common/services/clock/mega/sysclk.h **** 	else if (module == &ADC) {
 211               		.loc 3 398 0
 212 00c4 8981      		ldd r24,Y+1
 213 00c6 9A81      		ldd r25,Y+2
 214 00c8 8837      		cpi r24,120
 215 00ca 9105      		cpc r25,__zero_reg__
 216 00cc 01F4      		brne .L9
 399:../../../platform/common/services/clock/mega/sysclk.h **** 		sysclk_enable_module(POWER_RED_REG0, PRADC_bm);
 217               		.loc 3 399 0
 218 00ce 61E0      		ldi r22,lo8(1)
 219 00d0 80E0      		ldi r24,0
 220 00d2 0E94 0000 		call sysclk_enable_module
 400:../../../platform/common/services/clock/mega/sysclk.h **** #if MEGA_RF
 401:../../../platform/common/services/clock/mega/sysclk.h **** 		sysclk_enable_module(POWER_RED_REG0, PRPGA_bm);
 221               		.loc 3 401 0
 222 00d6 60E1      		ldi r22,lo8(16)
 223 00d8 80E0      		ldi r24,0
 224 00da 0E94 0000 		call sysclk_enable_module
 402:../../../platform/common/services/clock/mega/sysclk.h **** #endif
 403:../../../platform/common/services/clock/mega/sysclk.h **** 	} else if (module == &UCSR0A) {
 404:../../../platform/common/services/clock/mega/sysclk.h **** 		sysclk_enable_module(POWER_RED_REG0, PRUSART0_bm);
 405:../../../platform/common/services/clock/mega/sysclk.h **** 	}
 406:../../../platform/common/services/clock/mega/sysclk.h **** #if MEGA_RF
 407:../../../platform/common/services/clock/mega/sysclk.h **** 	else if (module == &SPCR) {
 408:../../../platform/common/services/clock/mega/sysclk.h **** 		sysclk_enable_module(POWER_RED_REG0, PRSPI_bm);
 409:../../../platform/common/services/clock/mega/sysclk.h **** 	}
 410:../../../platform/common/services/clock/mega/sysclk.h **** #endif
 411:../../../platform/common/services/clock/mega/sysclk.h **** 
 412:../../../platform/common/services/clock/mega/sysclk.h **** 	else if (module == &TCCR1A) {
 413:../../../platform/common/services/clock/mega/sysclk.h **** 		sysclk_enable_module(POWER_RED_REG0, PRTIM1_bm);
 414:../../../platform/common/services/clock/mega/sysclk.h **** 	}
 415:../../../platform/common/services/clock/mega/sysclk.h **** 
 416:../../../platform/common/services/clock/mega/sysclk.h **** #if MEGA_XX_UN2
 417:../../../platform/common/services/clock/mega/sysclk.h **** 	else if (module == &LCDCRA) {
 418:../../../platform/common/services/clock/mega/sysclk.h **** 		sysclk_enable_module(POWER_RED_REG0, PRLCD_bm);
 419:../../../platform/common/services/clock/mega/sysclk.h **** 	}
 420:../../../platform/common/services/clock/mega/sysclk.h **** #endif
 421:../../../platform/common/services/clock/mega/sysclk.h **** 
 422:../../../platform/common/services/clock/mega/sysclk.h **** #if !MEGA_XX_UN2
 423:../../../platform/common/services/clock/mega/sysclk.h **** 	else if (module == &TCCR0A) {
 424:../../../platform/common/services/clock/mega/sysclk.h **** 		sysclk_enable_module(POWER_RED_REG0, PRTIM0_bm);
 425:../../../platform/common/services/clock/mega/sysclk.h **** 	} else if (module == &TCCR2A) {
 426:../../../platform/common/services/clock/mega/sysclk.h **** 		sysclk_enable_module(POWER_RED_REG0, PRTIM2_bm);
 427:../../../platform/common/services/clock/mega/sysclk.h **** 	} else if (module == &TWBR) {
 428:../../../platform/common/services/clock/mega/sysclk.h **** 		sysclk_enable_module(POWER_RED_REG0, PRTWI_bm);
 429:../../../platform/common/services/clock/mega/sysclk.h **** 	}
 430:../../../platform/common/services/clock/mega/sysclk.h **** #endif
 431:../../../platform/common/services/clock/mega/sysclk.h **** 
 432:../../../platform/common/services/clock/mega/sysclk.h **** #if MEGA_RF
 433:../../../platform/common/services/clock/mega/sysclk.h **** 	else if (module == &UCSR1A) {
 434:../../../platform/common/services/clock/mega/sysclk.h **** 		sysclk_enable_module(POWER_RED_REG1, PRUSART1_bm);
 435:../../../platform/common/services/clock/mega/sysclk.h **** 	} else if (module == &TCCR3A) {
 436:../../../platform/common/services/clock/mega/sysclk.h **** 		sysclk_enable_module(POWER_RED_REG1, PRTIM3_bm);
 437:../../../platform/common/services/clock/mega/sysclk.h **** 	} else if (module == &TCCR4A) {
 438:../../../platform/common/services/clock/mega/sysclk.h **** 		sysclk_enable_module(POWER_RED_REG1, PRTIM4_bm);
 439:../../../platform/common/services/clock/mega/sysclk.h **** 	} else if (module == &TCCR5A) {
 440:../../../platform/common/services/clock/mega/sysclk.h **** 		sysclk_enable_module(POWER_RED_REG1, PRTIM5_bm);
 441:../../../platform/common/services/clock/mega/sysclk.h **** 	} else if (module == &TRX_CTRL_0) {
 442:../../../platform/common/services/clock/mega/sysclk.h **** 		sysclk_enable_module(POWER_RED_REG1, PRTRX24_bm);
 443:../../../platform/common/services/clock/mega/sysclk.h **** 	}
 444:../../../platform/common/services/clock/mega/sysclk.h **** #endif
 445:../../../platform/common/services/clock/mega/sysclk.h **** #endif
 446:../../../platform/common/services/clock/mega/sysclk.h **** 	else {
 447:../../../platform/common/services/clock/mega/sysclk.h **** 		Assert(false);
 448:../../../platform/common/services/clock/mega/sysclk.h **** 	}
 449:../../../platform/common/services/clock/mega/sysclk.h **** }
 225               		.loc 3 449 0
 226 00de 00C0      		rjmp .L20
 227               	.L9:
 403:../../../platform/common/services/clock/mega/sysclk.h **** 		sysclk_enable_module(POWER_RED_REG0, PRUSART0_bm);
 228               		.loc 3 403 0
 229 00e0 8981      		ldd r24,Y+1
 230 00e2 9A81      		ldd r25,Y+2
 231 00e4 803C      		cpi r24,-64
 232 00e6 9105      		cpc r25,__zero_reg__
 233 00e8 01F4      		brne .L10
 404:../../../platform/common/services/clock/mega/sysclk.h **** 	}
 234               		.loc 3 404 0
 235 00ea 62E0      		ldi r22,lo8(2)
 236 00ec 80E0      		ldi r24,0
 237 00ee 0E94 0000 		call sysclk_enable_module
 238               		.loc 3 449 0
 239 00f2 00C0      		rjmp .L20
 240               	.L10:
 407:../../../platform/common/services/clock/mega/sysclk.h **** 		sysclk_enable_module(POWER_RED_REG0, PRSPI_bm);
 241               		.loc 3 407 0
 242 00f4 8981      		ldd r24,Y+1
 243 00f6 9A81      		ldd r25,Y+2
 244 00f8 8C34      		cpi r24,76
 245 00fa 9105      		cpc r25,__zero_reg__
 246 00fc 01F4      		brne .L11
 408:../../../platform/common/services/clock/mega/sysclk.h **** 	}
 247               		.loc 3 408 0
 248 00fe 64E0      		ldi r22,lo8(4)
 249 0100 80E0      		ldi r24,0
 250 0102 0E94 0000 		call sysclk_enable_module
 251               		.loc 3 449 0
 252 0106 00C0      		rjmp .L20
 253               	.L11:
 412:../../../platform/common/services/clock/mega/sysclk.h **** 		sysclk_enable_module(POWER_RED_REG0, PRTIM1_bm);
 254               		.loc 3 412 0
 255 0108 8981      		ldd r24,Y+1
 256 010a 9A81      		ldd r25,Y+2
 257 010c 8038      		cpi r24,-128
 258 010e 9105      		cpc r25,__zero_reg__
 259 0110 01F4      		brne .L12
 413:../../../platform/common/services/clock/mega/sysclk.h **** 	}
 260               		.loc 3 413 0
 261 0112 68E0      		ldi r22,lo8(8)
 262 0114 80E0      		ldi r24,0
 263 0116 0E94 0000 		call sysclk_enable_module
 264               		.loc 3 449 0
 265 011a 00C0      		rjmp .L20
 266               	.L12:
 423:../../../platform/common/services/clock/mega/sysclk.h **** 		sysclk_enable_module(POWER_RED_REG0, PRTIM0_bm);
 267               		.loc 3 423 0
 268 011c 8981      		ldd r24,Y+1
 269 011e 9A81      		ldd r25,Y+2
 270 0120 8434      		cpi r24,68
 271 0122 9105      		cpc r25,__zero_reg__
 272 0124 01F4      		brne .L13
 424:../../../platform/common/services/clock/mega/sysclk.h **** 	} else if (module == &TCCR2A) {
 273               		.loc 3 424 0
 274 0126 60E2      		ldi r22,lo8(32)
 275 0128 80E0      		ldi r24,0
 276 012a 0E94 0000 		call sysclk_enable_module
 277               		.loc 3 449 0
 278 012e 00C0      		rjmp .L20
 279               	.L13:
 425:../../../platform/common/services/clock/mega/sysclk.h **** 		sysclk_enable_module(POWER_RED_REG0, PRTIM2_bm);
 280               		.loc 3 425 0
 281 0130 8981      		ldd r24,Y+1
 282 0132 9A81      		ldd r25,Y+2
 283 0134 803B      		cpi r24,-80
 284 0136 9105      		cpc r25,__zero_reg__
 285 0138 01F4      		brne .L14
 426:../../../platform/common/services/clock/mega/sysclk.h **** 	} else if (module == &TWBR) {
 286               		.loc 3 426 0
 287 013a 60E4      		ldi r22,lo8(64)
 288 013c 80E0      		ldi r24,0
 289 013e 0E94 0000 		call sysclk_enable_module
 290               		.loc 3 449 0
 291 0142 00C0      		rjmp .L20
 292               	.L14:
 427:../../../platform/common/services/clock/mega/sysclk.h **** 		sysclk_enable_module(POWER_RED_REG0, PRTWI_bm);
 293               		.loc 3 427 0
 294 0144 8981      		ldd r24,Y+1
 295 0146 9A81      		ldd r25,Y+2
 296 0148 883B      		cpi r24,-72
 297 014a 9105      		cpc r25,__zero_reg__
 298 014c 01F4      		brne .L15
 428:../../../platform/common/services/clock/mega/sysclk.h **** 	}
 299               		.loc 3 428 0
 300 014e 60E8      		ldi r22,lo8(-128)
 301 0150 80E0      		ldi r24,0
 302 0152 0E94 0000 		call sysclk_enable_module
 303               		.loc 3 449 0
 304 0156 00C0      		rjmp .L20
 305               	.L15:
 433:../../../platform/common/services/clock/mega/sysclk.h **** 		sysclk_enable_module(POWER_RED_REG1, PRUSART1_bm);
 306               		.loc 3 433 0
 307 0158 8981      		ldd r24,Y+1
 308 015a 9A81      		ldd r25,Y+2
 309 015c 883C      		cpi r24,-56
 310 015e 9105      		cpc r25,__zero_reg__
 311 0160 01F4      		brne .L16
 434:../../../platform/common/services/clock/mega/sysclk.h **** 	} else if (module == &TCCR3A) {
 312               		.loc 3 434 0
 313 0162 61E0      		ldi r22,lo8(1)
 314 0164 81E0      		ldi r24,lo8(1)
 315 0166 0E94 0000 		call sysclk_enable_module
 316               		.loc 3 449 0
 317 016a 00C0      		rjmp .L20
 318               	.L16:
 435:../../../platform/common/services/clock/mega/sysclk.h **** 		sysclk_enable_module(POWER_RED_REG1, PRTIM3_bm);
 319               		.loc 3 435 0
 320 016c 8981      		ldd r24,Y+1
 321 016e 9A81      		ldd r25,Y+2
 322 0170 8039      		cpi r24,-112
 323 0172 9105      		cpc r25,__zero_reg__
 324 0174 01F4      		brne .L17
 436:../../../platform/common/services/clock/mega/sysclk.h **** 	} else if (module == &TCCR4A) {
 325               		.loc 3 436 0
 326 0176 68E0      		ldi r22,lo8(8)
 327 0178 81E0      		ldi r24,lo8(1)
 328 017a 0E94 0000 		call sysclk_enable_module
 329               		.loc 3 449 0
 330 017e 00C0      		rjmp .L20
 331               	.L17:
 437:../../../platform/common/services/clock/mega/sysclk.h **** 		sysclk_enable_module(POWER_RED_REG1, PRTIM4_bm);
 332               		.loc 3 437 0
 333 0180 8981      		ldd r24,Y+1
 334 0182 9A81      		ldd r25,Y+2
 335 0184 803A      		cpi r24,-96
 336 0186 9105      		cpc r25,__zero_reg__
 337 0188 01F4      		brne .L18
 438:../../../platform/common/services/clock/mega/sysclk.h **** 	} else if (module == &TCCR5A) {
 338               		.loc 3 438 0
 339 018a 60E1      		ldi r22,lo8(16)
 340 018c 81E0      		ldi r24,lo8(1)
 341 018e 0E94 0000 		call sysclk_enable_module
 342               		.loc 3 449 0
 343 0192 00C0      		rjmp .L20
 344               	.L18:
 439:../../../platform/common/services/clock/mega/sysclk.h **** 		sysclk_enable_module(POWER_RED_REG1, PRTIM5_bm);
 345               		.loc 3 439 0
 346 0194 8981      		ldd r24,Y+1
 347 0196 9A81      		ldd r25,Y+2
 348 0198 8032      		cpi r24,32
 349 019a 9140      		sbci r25,1
 350 019c 01F4      		brne .L19
 440:../../../platform/common/services/clock/mega/sysclk.h **** 	} else if (module == &TRX_CTRL_0) {
 351               		.loc 3 440 0
 352 019e 60E2      		ldi r22,lo8(32)
 353 01a0 81E0      		ldi r24,lo8(1)
 354 01a2 0E94 0000 		call sysclk_enable_module
 355               		.loc 3 449 0
 356 01a6 00C0      		rjmp .L20
 357               	.L19:
 441:../../../platform/common/services/clock/mega/sysclk.h **** 		sysclk_enable_module(POWER_RED_REG1, PRTRX24_bm);
 358               		.loc 3 441 0
 359 01a8 8981      		ldd r24,Y+1
 360 01aa 9A81      		ldd r25,Y+2
 361 01ac 8334      		cpi r24,67
 362 01ae 9140      		sbci r25,1
 363 01b0 01F4      		brne .L20
 442:../../../platform/common/services/clock/mega/sysclk.h **** 	}
 364               		.loc 3 442 0
 365 01b2 60E4      		ldi r22,lo8(64)
 366 01b4 81E0      		ldi r24,lo8(1)
 367 01b6 0E94 0000 		call sysclk_enable_module
 368               	.L20:
 369               		.loc 3 449 0
 370 01ba 0000      		nop
 371               	/* epilogue start */
 372 01bc 0F90      		pop __tmp_reg__
 373 01be 0F90      		pop __tmp_reg__
 374 01c0 DF91      		pop r29
 375 01c2 CF91      		pop r28
 376 01c4 0895      		ret
 377               		.cfi_endproc
 378               	.LFE98:
 380               	.global	sm_init
 382               	sm_init:
 383               	.LFB103:
 384               		.file 4 "../../../stack/LwMesh/TDMA/services/sleep_mgr/megarf/sleep_mgr.c"
   1:../../../stack/LwMesh/TDMA/services/sleep_mgr/megarf/sleep_mgr.c **** /**
   2:../../../stack/LwMesh/TDMA/services/sleep_mgr/megarf/sleep_mgr.c ****  * @file sleep_mgr.c
   3:../../../stack/LwMesh/TDMA/services/sleep_mgr/megarf/sleep_mgr.c ****  *
   4:../../../stack/LwMesh/TDMA/services/sleep_mgr/megarf/sleep_mgr.c ****  * @brief
   5:../../../stack/LwMesh/TDMA/services/sleep_mgr/megarf/sleep_mgr.c ****  *
   6:../../../stack/LwMesh/TDMA/services/sleep_mgr/megarf/sleep_mgr.c ****  * Copyright (C) 2014 Atmel Corporation. All rights reserved.
   7:../../../stack/LwMesh/TDMA/services/sleep_mgr/megarf/sleep_mgr.c ****  *
   8:../../../stack/LwMesh/TDMA/services/sleep_mgr/megarf/sleep_mgr.c ****  * \asf_license_start
   9:../../../stack/LwMesh/TDMA/services/sleep_mgr/megarf/sleep_mgr.c ****  *
  10:../../../stack/LwMesh/TDMA/services/sleep_mgr/megarf/sleep_mgr.c ****  * Redistribution and use in source and binary forms, with or without
  11:../../../stack/LwMesh/TDMA/services/sleep_mgr/megarf/sleep_mgr.c ****  * modification, are permitted provided that the following conditions are met:
  12:../../../stack/LwMesh/TDMA/services/sleep_mgr/megarf/sleep_mgr.c ****  *
  13:../../../stack/LwMesh/TDMA/services/sleep_mgr/megarf/sleep_mgr.c ****  * 1. Redistributions of source code must retain the above copyright notice,
  14:../../../stack/LwMesh/TDMA/services/sleep_mgr/megarf/sleep_mgr.c ****  *    this list of conditions and the following disclaimer.
  15:../../../stack/LwMesh/TDMA/services/sleep_mgr/megarf/sleep_mgr.c ****  *
  16:../../../stack/LwMesh/TDMA/services/sleep_mgr/megarf/sleep_mgr.c ****  * 2. Redistributions in binary form must reproduce the above copyright notice,
  17:../../../stack/LwMesh/TDMA/services/sleep_mgr/megarf/sleep_mgr.c ****  *    this list of conditions and the following disclaimer in the documentation
  18:../../../stack/LwMesh/TDMA/services/sleep_mgr/megarf/sleep_mgr.c ****  *    and/or other materials provided with the distribution.
  19:../../../stack/LwMesh/TDMA/services/sleep_mgr/megarf/sleep_mgr.c ****  *
  20:../../../stack/LwMesh/TDMA/services/sleep_mgr/megarf/sleep_mgr.c ****  * 3. The name of Atmel may not be used to endorse or promote products derived
  21:../../../stack/LwMesh/TDMA/services/sleep_mgr/megarf/sleep_mgr.c ****  *    from this software without specific prior written permission.
  22:../../../stack/LwMesh/TDMA/services/sleep_mgr/megarf/sleep_mgr.c ****  *
  23:../../../stack/LwMesh/TDMA/services/sleep_mgr/megarf/sleep_mgr.c ****  * 4. This software may only be redistributed and used in connection with an
  24:../../../stack/LwMesh/TDMA/services/sleep_mgr/megarf/sleep_mgr.c ****  *    Atmel microcontroller product.
  25:../../../stack/LwMesh/TDMA/services/sleep_mgr/megarf/sleep_mgr.c ****  *
  26:../../../stack/LwMesh/TDMA/services/sleep_mgr/megarf/sleep_mgr.c ****  * THIS SOFTWARE IS PROVIDED BY ATMEL "AS IS" AND ANY EXPRESS OR IMPLIED
  27:../../../stack/LwMesh/TDMA/services/sleep_mgr/megarf/sleep_mgr.c ****  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
  28:../../../stack/LwMesh/TDMA/services/sleep_mgr/megarf/sleep_mgr.c ****  * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE
  29:../../../stack/LwMesh/TDMA/services/sleep_mgr/megarf/sleep_mgr.c ****  * EXPRESSLY AND SPECIFICALLY DISCLAIMED. IN NO EVENT SHALL ATMEL BE LIABLE FOR
  30:../../../stack/LwMesh/TDMA/services/sleep_mgr/megarf/sleep_mgr.c ****  * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  31:../../../stack/LwMesh/TDMA/services/sleep_mgr/megarf/sleep_mgr.c ****  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
  32:../../../stack/LwMesh/TDMA/services/sleep_mgr/megarf/sleep_mgr.c ****  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
  33:../../../stack/LwMesh/TDMA/services/sleep_mgr/megarf/sleep_mgr.c ****  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
  34:../../../stack/LwMesh/TDMA/services/sleep_mgr/megarf/sleep_mgr.c ****  * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
  35:../../../stack/LwMesh/TDMA/services/sleep_mgr/megarf/sleep_mgr.c ****  * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  36:../../../stack/LwMesh/TDMA/services/sleep_mgr/megarf/sleep_mgr.c ****  * POSSIBILITY OF SUCH DAMAGE.
  37:../../../stack/LwMesh/TDMA/services/sleep_mgr/megarf/sleep_mgr.c ****  *
  38:../../../stack/LwMesh/TDMA/services/sleep_mgr/megarf/sleep_mgr.c ****  * \asf_license_stop
  39:../../../stack/LwMesh/TDMA/services/sleep_mgr/megarf/sleep_mgr.c ****  *
  40:../../../stack/LwMesh/TDMA/services/sleep_mgr/megarf/sleep_mgr.c ****  *
  41:../../../stack/LwMesh/TDMA/services/sleep_mgr/megarf/sleep_mgr.c ****  */
  42:../../../stack/LwMesh/TDMA/services/sleep_mgr/megarf/sleep_mgr.c **** 
  43:../../../stack/LwMesh/TDMA/services/sleep_mgr/megarf/sleep_mgr.c **** /*
  44:../../../stack/LwMesh/TDMA/services/sleep_mgr/megarf/sleep_mgr.c ****  * Copyright (c) 2014, Atmel Corporation All rights reserved.
  45:../../../stack/LwMesh/TDMA/services/sleep_mgr/megarf/sleep_mgr.c ****  *
  46:../../../stack/LwMesh/TDMA/services/sleep_mgr/megarf/sleep_mgr.c ****  * Licensed under Atmel's Limited License Agreement --> EULA.txt
  47:../../../stack/LwMesh/TDMA/services/sleep_mgr/megarf/sleep_mgr.c ****  */
  48:../../../stack/LwMesh/TDMA/services/sleep_mgr/megarf/sleep_mgr.c **** #include "sleep_mgr.h"
  49:../../../stack/LwMesh/TDMA/services/sleep_mgr/megarf/sleep_mgr.c **** #include "sleepmgr.h"
  50:../../../stack/LwMesh/TDMA/services/sleep_mgr/megarf/sleep_mgr.c **** #include "conf_sleepmgr.h"
  51:../../../stack/LwMesh/TDMA/services/sleep_mgr/megarf/sleep_mgr.c **** #include "macsc_megarf.h"
  52:../../../stack/LwMesh/TDMA/services/sleep_mgr/megarf/sleep_mgr.c **** # include "sysclk.h"
  53:../../../stack/LwMesh/TDMA/services/sleep_mgr/megarf/sleep_mgr.c **** 
  54:../../../stack/LwMesh/TDMA/services/sleep_mgr/megarf/sleep_mgr.c **** #define COMPARE_MODE                               MACSC_RELATIVE_CMP
  55:../../../stack/LwMesh/TDMA/services/sleep_mgr/megarf/sleep_mgr.c **** 
  56:../../../stack/LwMesh/TDMA/services/sleep_mgr/megarf/sleep_mgr.c **** #ifdef SLEEP_MGR_TIMER_RES
  57:../../../stack/LwMesh/TDMA/services/sleep_mgr/megarf/sleep_mgr.c **** #define CONFIG_MACSC_HZ                            (1)
  58:../../../stack/LwMesh/TDMA/services/sleep_mgr/megarf/sleep_mgr.c **** #else
  59:../../../stack/LwMesh/TDMA/services/sleep_mgr/megarf/sleep_mgr.c **** #define CONFIG_MACSC_HZ                            (62500)
  60:../../../stack/LwMesh/TDMA/services/sleep_mgr/megarf/sleep_mgr.c **** #endif
  61:../../../stack/LwMesh/TDMA/services/sleep_mgr/megarf/sleep_mgr.c **** 
  62:../../../stack/LwMesh/TDMA/services/sleep_mgr/megarf/sleep_mgr.c **** //static void cmp3_int_cb(void)
  63:../../../stack/LwMesh/TDMA/services/sleep_mgr/megarf/sleep_mgr.c **** //{
  64:../../../stack/LwMesh/TDMA/services/sleep_mgr/megarf/sleep_mgr.c **** 	///*Disable The MAC Symbol Counter*/
  65:../../../stack/LwMesh/TDMA/services/sleep_mgr/megarf/sleep_mgr.c **** 	//macsc_disable();
  66:../../../stack/LwMesh/TDMA/services/sleep_mgr/megarf/sleep_mgr.c **** //}
  67:../../../stack/LwMesh/TDMA/services/sleep_mgr/megarf/sleep_mgr.c **** 
  68:../../../stack/LwMesh/TDMA/services/sleep_mgr/megarf/sleep_mgr.c **** /**
  69:../../../stack/LwMesh/TDMA/services/sleep_mgr/megarf/sleep_mgr.c ****  * \brief This function Initializes the Sleep functions
  70:../../../stack/LwMesh/TDMA/services/sleep_mgr/megarf/sleep_mgr.c ****  */
  71:../../../stack/LwMesh/TDMA/services/sleep_mgr/megarf/sleep_mgr.c **** void sm_init(void)
  72:../../../stack/LwMesh/TDMA/services/sleep_mgr/megarf/sleep_mgr.c **** {
 385               		.loc 4 72 0
 386               		.cfi_startproc
 387 01c6 CF93      		push r28
 388               	.LCFI15:
 389               		.cfi_def_cfa_offset 3
 390               		.cfi_offset 28, -2
 391 01c8 DF93      		push r29
 392               	.LCFI16:
 393               		.cfi_def_cfa_offset 4
 394               		.cfi_offset 29, -3
 395 01ca CDB7      		in r28,__SP_L__
 396 01cc DEB7      		in r29,__SP_H__
 397               	.LCFI17:
 398               		.cfi_def_cfa_register 28
 399               	/* prologue: function */
 400               	/* frame size = 0 */
 401               	/* stack size = 2 */
 402               	.L__stack_usage = 2
  73:../../../stack/LwMesh/TDMA/services/sleep_mgr/megarf/sleep_mgr.c **** 	/* Set the sleep mode to initially lock. */
  74:../../../stack/LwMesh/TDMA/services/sleep_mgr/megarf/sleep_mgr.c **** 	sleep_set_mode(SLEEP_SMODE_PSAVE);
 403               		.loc 4 74 0
 404 01ce 86E0      		ldi r24,lo8(6)
 405 01d0 0E94 0000 		call sleep_set_mode
  75:../../../stack/LwMesh/TDMA/services/sleep_mgr/megarf/sleep_mgr.c **** 	sysclk_enable_peripheral_clock(&TCCR2A);
 406               		.loc 4 75 0
 407 01d4 80EB      		ldi r24,lo8(-80)
 408 01d6 90E0      		ldi r25,0
 409 01d8 0E94 0000 		call sysclk_enable_peripheral_clock
  76:../../../stack/LwMesh/TDMA/services/sleep_mgr/megarf/sleep_mgr.c **** 	macsc_write_clock_source(MACSC_32KHz);
 410               		.loc 4 76 0
 411 01dc 81E0      		ldi r24,lo8(1)
 412 01de 0E94 0000 		call macsc_write_clock_source
  77:../../../stack/LwMesh/TDMA/services/sleep_mgr/megarf/sleep_mgr.c **** 	macsc_sleep_clk_enable();
 413               		.loc 4 77 0
 414 01e2 0E94 0000 		call macsc_sleep_clk_enable
  78:../../../stack/LwMesh/TDMA/services/sleep_mgr/megarf/sleep_mgr.c **** //	macsc_set_cmp3_int_cb(cmp3_int_cb);
  79:../../../stack/LwMesh/TDMA/services/sleep_mgr/megarf/sleep_mgr.c **** //	macsc_enable_cmp_int(MACSC_CC3);
  80:../../../stack/LwMesh/TDMA/services/sleep_mgr/megarf/sleep_mgr.c **** 	macsc_enable();
 415               		.loc 4 80 0
 416 01e6 0E94 0000 		call macsc_enable
  81:../../../stack/LwMesh/TDMA/services/sleep_mgr/megarf/sleep_mgr.c **** }
 417               		.loc 4 81 0
 418 01ea 0000      		nop
 419               	/* epilogue start */
 420 01ec DF91      		pop r29
 421 01ee CF91      		pop r28
 422 01f0 0895      		ret
 423               		.cfi_endproc
 424               	.LFE103:
 426               	.global	sm_sleep
 428               	sm_sleep:
 429               	.LFB104:
  82:../../../stack/LwMesh/TDMA/services/sleep_mgr/megarf/sleep_mgr.c **** 
  83:../../../stack/LwMesh/TDMA/services/sleep_mgr/megarf/sleep_mgr.c **** /**
  84:../../../stack/LwMesh/TDMA/services/sleep_mgr/megarf/sleep_mgr.c ****  * \brief This function puts the  device to sleep
  85:../../../stack/LwMesh/TDMA/services/sleep_mgr/megarf/sleep_mgr.c ****  * \param interval : in seconds for the device to sleep.Range of Interval is
  86:../../../stack/LwMesh/TDMA/services/sleep_mgr/megarf/sleep_mgr.c ****  *1-68719s
  87:../../../stack/LwMesh/TDMA/services/sleep_mgr/megarf/sleep_mgr.c ****  */
  88:../../../stack/LwMesh/TDMA/services/sleep_mgr/megarf/sleep_mgr.c **** void sm_sleep(uint32_t interval)
  89:../../../stack/LwMesh/TDMA/services/sleep_mgr/megarf/sleep_mgr.c **** {
 430               		.loc 4 89 0
 431               		.cfi_startproc
 432 01f2 CF93      		push r28
 433               	.LCFI18:
 434               		.cfi_def_cfa_offset 3
 435               		.cfi_offset 28, -2
 436 01f4 DF93      		push r29
 437               	.LCFI19:
 438               		.cfi_def_cfa_offset 4
 439               		.cfi_offset 29, -3
 440 01f6 00D0      		rcall .
 441 01f8 00D0      		rcall .
 442               	.LCFI20:
 443               		.cfi_def_cfa_offset 8
 444 01fa CDB7      		in r28,__SP_L__
 445 01fc DEB7      		in r29,__SP_H__
 446               	.LCFI21:
 447               		.cfi_def_cfa_register 28
 448               	/* prologue: function */
 449               	/* frame size = 4 */
 450               	/* stack size = 6 */
 451               	.L__stack_usage = 6
 452 01fe 6983      		std Y+1,r22
 453 0200 7A83      		std Y+2,r23
 454 0202 8B83      		std Y+3,r24
 455 0204 9C83      		std Y+4,r25
  90:../../../stack/LwMesh/TDMA/services/sleep_mgr/megarf/sleep_mgr.c **** 	(void) interval;
  91:../../../stack/LwMesh/TDMA/services/sleep_mgr/megarf/sleep_mgr.c **** //	/*Enable MAC Symbol Counter*/
  92:../../../stack/LwMesh/TDMA/services/sleep_mgr/megarf/sleep_mgr.c **** //	macsc_enable();
  93:../../../stack/LwMesh/TDMA/services/sleep_mgr/megarf/sleep_mgr.c **** 	/*Timestamp the current symbol counter value for Comparison*/
  94:../../../stack/LwMesh/TDMA/services/sleep_mgr/megarf/sleep_mgr.c **** //	macsc_enable_manual_bts();
  95:../../../stack/LwMesh/TDMA/services/sleep_mgr/megarf/sleep_mgr.c **** //	macsc_use_cmp(COMPARE_MODE, interval * CONFIG_MACSC_HZ, MACSC_CC3);
  96:../../../stack/LwMesh/TDMA/services/sleep_mgr/megarf/sleep_mgr.c **** 	sleep_enable();
 456               		.loc 4 96 0
 457 0206 83E5      		ldi r24,lo8(83)
 458 0208 90E0      		ldi r25,0
 459 020a 23E5      		ldi r18,lo8(83)
 460 020c 30E0      		ldi r19,0
 461 020e F901      		movw r30,r18
 462 0210 2081      		ld r18,Z
 463 0212 2160      		ori r18,lo8(1)
 464 0214 FC01      		movw r30,r24
 465 0216 2083      		st Z,r18
  97:../../../stack/LwMesh/TDMA/services/sleep_mgr/megarf/sleep_mgr.c **** 	sleep_enter();
 466               		.loc 4 97 0
 467               	/* #APP */
 468               	 ;  97 "../../../stack/LwMesh/TDMA/services/sleep_mgr/megarf/sleep_mgr.c" 1
 469 0218 8895      		sleep
 470               		
 471               	 ;  0 "" 2
  98:../../../stack/LwMesh/TDMA/services/sleep_mgr/megarf/sleep_mgr.c **** }
 472               		.loc 4 98 0
 473               	/* #NOAPP */
 474 021a 0000      		nop
 475               	/* epilogue start */
 476 021c 0F90      		pop __tmp_reg__
 477 021e 0F90      		pop __tmp_reg__
 478 0220 0F90      		pop __tmp_reg__
 479 0222 0F90      		pop __tmp_reg__
 480 0224 DF91      		pop r29
 481 0226 CF91      		pop r28
 482 0228 0895      		ret
 483               		.cfi_endproc
 484               	.LFE104:
 486               	.Letext0:
 487               		.file 5 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\in
 488               		.file 6 "../../../platform/mega_rf/drivers/sleep/sleep.h"
 489               		.file 7 "../../../platform/common/services/sleepmgr/mega_rf/sleepmgr.h"
DEFINED SYMBOLS
                            *ABS*:00000000 sleep_mgr.c
C:\Users\GUILHE~1\AppData\Local\Temp\ccsPDMQs.s:2      *ABS*:0000003e __SP_H__
C:\Users\GUILHE~1\AppData\Local\Temp\ccsPDMQs.s:3      *ABS*:0000003d __SP_L__
C:\Users\GUILHE~1\AppData\Local\Temp\ccsPDMQs.s:4      *ABS*:0000003f __SREG__
C:\Users\GUILHE~1\AppData\Local\Temp\ccsPDMQs.s:5      *ABS*:0000003b __RAMPZ__
C:\Users\GUILHE~1\AppData\Local\Temp\ccsPDMQs.s:6      *ABS*:00000000 __tmp_reg__
C:\Users\GUILHE~1\AppData\Local\Temp\ccsPDMQs.s:7      *ABS*:00000001 __zero_reg__
C:\Users\GUILHE~1\AppData\Local\Temp\ccsPDMQs.s:12     .text:00000000 sleep_set_mode
C:\Users\GUILHE~1\AppData\Local\Temp\ccsPDMQs.s:61     .text:0000002e macsc_sleep_clk_enable
C:\Users\GUILHE~1\AppData\Local\Temp\ccsPDMQs.s:102    .text:00000050 macsc_write_clock_source
C:\Users\GUILHE~1\AppData\Local\Temp\ccsPDMQs.s:179    .text:000000ac sysclk_enable_peripheral_clock
C:\Users\GUILHE~1\AppData\Local\Temp\ccsPDMQs.s:382    .text:000001c6 sm_init
C:\Users\GUILHE~1\AppData\Local\Temp\ccsPDMQs.s:428    .text:000001f2 sm_sleep

UNDEFINED SYMBOLS
sysclk_enable_module
macsc_enable
