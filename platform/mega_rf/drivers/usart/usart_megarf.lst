   1               		.file	"usart_megarf.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__RAMPZ__ = 0x3b
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
   8               		.text
   9               	.Ltext0:
  10               		.cfi_sections	.debug_frame
  11               		.section	.progmem.data.baudctrl_1mhz,"a",@progbits
  14               	baudctrl_1mhz:
  15 0000 3300      		.word	51
  16 0002 1900      		.word	25
  17 0004 0C00      		.word	12
  18 0006 0600      		.word	6
  19 0008 0300      		.word	3
  20 000a 0200      		.word	2
  21 000c 0100      		.word	1
  22 000e FF00      		.word	255
  23               		.section	.progmem.data.baudctrl_8mhz,"a",@progbits
  26               	baudctrl_8mhz:
  27 0000 A001      		.word	416
  28 0002 CF00      		.word	207
  29 0004 6700      		.word	103
  30 0006 3300      		.word	51
  31 0008 1900      		.word	25
  32 000a 0C00      		.word	12
  33 000c 0700      		.word	7
  34 000e 0800      		.word	8
  35               		.section	.progmem.data.baudctrl_16mhz,"a",@progbits
  38               	baudctrl_16mhz:
  39 0000 4003      		.word	832
  40 0002 A001      		.word	416
  41 0004 CF00      		.word	207
  42 0006 6700      		.word	103
  43 0008 3300      		.word	51
  44 000a 1900      		.word	25
  45 000c 1000      		.word	16
  46 000e 1000      		.word	16
  47               		.text
  49               	usart_rx_enable:
  50               	.LFB8:
  51               		.file 1 "../../../platform/mega_rf/drivers/usart/usart_megarf.h"
   1:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** /**
   2:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * \file
   3:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  *
   4:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * \brief USART driver for AVR MEGARF.
   5:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  *
   6:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * This file contains basic functions for the AVR MEGA USART, with support for
   7:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * all modes, settings and clock speeds.
   8:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  *
   9:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * Copyright (c) 2013-2015 Atmel Corporation. All rights reserved.
  10:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  *
  11:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * \asf_license_start
  12:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  *
  13:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * \page License
  14:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  *
  15:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * Redistribution and use in source and binary forms, with or without
  16:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * modification, are permitted provided that the following conditions are met:
  17:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  *
  18:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * 1. Redistributions of source code must retain the above copyright notice,
  19:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  *    this list of conditions and the following disclaimer.
  20:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  *
  21:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * 2. Redistributions in binary form must reproduce the above copyright notice,
  22:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  *    this list of conditions and the following disclaimer in the documentation
  23:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  *    and/or other materials provided with the distribution.
  24:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  *
  25:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * 3. The name of Atmel may not be used to endorse or promote products derived
  26:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  *    from this software without specific prior written permission.
  27:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  *
  28:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * 4. This software may only be redistributed and used in connection with an
  29:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  *    Atmel microcontroller product.
  30:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  *
  31:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * THIS SOFTWARE IS PROVIDED BY ATMEL "AS IS" AND ANY EXPRESS OR IMPLIED
  32:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
  33:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE
  34:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * EXPRESSLY AND SPECIFICALLY DISCLAIMED. IN NO EVENT SHALL ATMEL BE LIABLE FOR
  35:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  36:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
  37:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
  38:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
  39:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
  40:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  41:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * POSSIBILITY OF SUCH DAMAGE.
  42:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  *
  43:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * \asf_license_stop
  44:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  *
  45:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  */
  46:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #ifndef _USART_MEGARF_H_
  47:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define _USART_MEGARF_H_
  48:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
  49:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #ifdef __cplusplus
  50:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** extern "C" {
  51:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #endif
  52:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
  53:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #include "compiler.h"
  54:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #include "status_codes.h"
  55:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
  56:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** /**
  57:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * \defgroup megarf_usart_group USART module (USART)
  58:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  *
  59:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * See \ref megarf_usart_quickstart.
  60:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  *
  61:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * This is a driver for configuring, enabling, disabling and use of the on-chip
  62:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * USART.
  63:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  *
  64:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * \section dependencies Dependencies
  65:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  *
  66:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * The USART module depends on the following modules:
  67:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  *  - \ref sysclk_group for peripheral clock control.
  68:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  *  - \ref port_driver_group for peripheral io port control.
  69:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  *
  70:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * @{
  71:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  */
  72:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
  73:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** /* ! Offset in lookup table for baudrate 1200 */
  74:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_BAUD_1200      0x00
  75:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** /* ! Offset in lookup table for baudrate 2400 */
  76:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_BAUD_2400      0x01
  77:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** /* ! Offset in lookup table for baudrate 4800 */
  78:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_BAUD_4800      0x02
  79:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** /* ! Offset in lookup table for baudrate 9600 */
  80:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_BAUD_9600      0x03
  81:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** /* ! Offset in lookup table for baudrate 19200 */
  82:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_BAUD_19200     0x04
  83:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** /* ! Offset in lookup table for baudrate 38400 */
  84:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_BAUD_38400     0x05
  85:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** /* ! Offset in lookup table for baudrate 57600 */
  86:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_BAUD_57600     0x06
  87:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** /* ! Offset in lookup table for baudrate 115200 */
  88:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_BAUD_115200    0x07
  89:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** /* ! Baudrate not in lookup table */
  90:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_BAUD_UNDEFINED 0xFF
  91:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
  92:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** typedef volatile uint8_t register8_t;
  93:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** typedef volatile uint16_t register16_t;
  94:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** /* Universal Synchronous/Asynchronous Receiver/Transmitter */
  95:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** typedef struct USART_struct {
  96:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	register8_t UCSRnA;  /* Control Register A */
  97:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	register8_t UCSRnB;  /* Control Register B */
  98:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	register8_t UCSRnC;  /* Control Register C */
  99:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	register8_t reserved;
 100:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	register16_t UBRR;  /* Baud Rate Register Value */
 101:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	register8_t UDR;  /* I/O Data Register */
 102:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** } USART_t;
 103:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 104:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USARTA0    (*(USART_t *)0xC0)   /* Universal Asynchronous
 105:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	                                 * Receiver-Transmitter A0 */
 106:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USARTA1    (*(USART_t *)0XC8)   /* Universal Asynchronous
 107:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	                                 * Receiver-Transmitter A1 */
 108:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 109:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** /* USART.UCSRxA  bit masks and bit positions */
 110:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_RXC_bm  0x80 /* RX complete bit mask.*/
 111:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_RXC_bp  7 /* RX complete bit position.*/
 112:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 113:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_TXC_bm  0x40 /* TX complete bit mask.*/
 114:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_TXC_bp  6 /* TX complete bit position.*/
 115:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 116:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_DRE_bm  0x20 /* DATA Register Empty Bit mask.*/
 117:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_DRE_bp  5 /*  DATA Register Empty bit position.*/
 118:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 119:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_FE_bm   0x10 /* Frame Error bit mask.*/
 120:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_FE_bp   4 /*Frame error bit position.*/
 121:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 122:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_DOR_bm  0x08 /* Data Over Run bit mask.*/
 123:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_DOR_bp  3 /* Data Over Run bit position.*/
 124:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 125:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_UPE_bm  0x04 /* Parity error bit mask.*/
 126:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_UPE_bp  2 /* Parity error bit position.*/
 127:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 128:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_U2X_bm  0x02 /* Double TX speed bit mask.*/
 129:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_U2X_bp  1 /* Double TX speed bit position.*/
 130:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 131:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_MPCM_bm  0x01 /* Multi Processor bit mask.*/
 132:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_MPMC_bp  0 /* Multi processor bit position.*/
 133:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 134:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** /* USART.UCSRxB  bit masks and bit positions */
 135:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_RXCIE_bm  0x80 /* RX complete interrupt Enable bit mask.*/
 136:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_RXCIE_bp  7 /* RX complete interrupt Enable bit position.*/
 137:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 138:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_TXCIE_bm  0x40 /* TX complete interrupt Enable bit mask.*/
 139:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_TXCIE_bp  6 /* TX complete interrupt Enable bit position.*/
 140:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 141:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_DRIE_bm  0x20 /* Data register empty interrupt Enable bit mask.*/
 142:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_DRIE_bp  5 /* Data register empty interrupt Enable bit position.*/
 143:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 144:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_RXEN_bm  0x10  /* Receiver Enable bit mask. */
 145:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_RXEN_bp  4  /* Receiver Enable bit position. */
 146:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 147:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_TXEN_bm  0x08  /* Transmitter Enable bit mask. */
 148:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_TXEN_bp  3  /* Transmitter Enable bit position. */
 149:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 150:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_CHSIZE2_bm  0x04  /* Character Size bit mask. */
 151:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_CHSIZE2_bp  2 /* Character Size bit position. */
 152:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 153:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_RXB8_bm  0x02  /* Transmit bit 8 bit mask. */
 154:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_RXB8_bp  1  /* Transmit bit 8 bit position. */
 155:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 156:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_TXB8_bm  0x01  /* Transmit bit 8 bit mask. */
 157:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_TXB8_bp  0  /* Transmit bit 8 bit position. */
 158:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 159:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** /* USART.UCSRxC  bit masks and bit positions */
 160:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_UMSEL01_gm  0xC0 /* USART Mode Select 01 grp mask.*/
 161:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_UMSEL01_gp  6 /* USART Mode Select 01 grp position.*/
 162:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 163:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_UMSEL01_bm  0x80 /* USART Mode Select 01 bit mask.*/
 164:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_UMSEL01_bp  7 /* USART Mode Select 01 bit position.*/
 165:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 166:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_UMSEL00_bm  0x40 /* USART Mode Select 00 bit mask.*/
 167:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_UMSEL00_bp  6 /* USART Mode Select 00 bit position.*/
 168:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 169:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_PMODE_gm  0x30 /* USART Parity Mode Select grp mask.*/
 170:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_PMODE_gp  4 /* USART Parity Mode Select grp position.*/
 171:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 172:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_PMODE01_bm  0x20 /* USART Parity Mode Select 01 bit mask.*/
 173:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_PMODE01_bp  5 /* USART Parity Mode Select 01 bit position.*/
 174:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 175:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_PMODE00_bm  0x10 /* USART Parity Mode Select 00 bit mask.*/
 176:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_PMODE00_bp  4 /* USART Parity Mode Select 00 bit position.*/
 177:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 178:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_STOPB_bm  0x08 /* USART stop bit mask.*/
 179:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_STOPB_bp  3 /* USART stop bit Position.*/
 180:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 181:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_CHSIZE01C_gm  0x06  /* Character Size 10 bit 1 mask. */
 182:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_CHSIZE01C_gp  1 /* Character Size 10 bit position. */
 183:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 184:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_CHSIZE01_bm  0x04  /* Character Size 10 bit 1 mask. */
 185:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_CHSIZE01_bp  2 /* Character Size 10 bit position. */
 186:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 187:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_CHSIZE00_bm  0x02  /* Character Size 00 bit 1 mask. */
 188:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_CHSIZE00_bp  1 /* Character Size bit 00 position. */
 189:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 190:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_UCPOL_bm  0x01  /* Sync mode Pol bit 1 mask. */
 191:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_UCPOL_bp  0 /*Sync mode Pol bit 0 position */
 192:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 193:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_UCPHA_bm 0x02 /* Clock Phase bit mask. */
 194:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_UCPHA_bp 1 /* Clock Phase bit position. */
 195:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 196:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_DORD_bm 0x04 /* Data order bit mask. */
 197:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** #define USART_DORD_bp 2 /* Data order bit position. */
 198:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 199:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** /* Character Size */
 200:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** typedef enum USART_CHSIZE_enum {
 201:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	USART_CHSIZE_5BIT_gc = (0x00),  /* Character size: 5 bit */
 202:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	USART_CHSIZE_6BIT_gc = (0x01),  /* Character size: 6 bit */
 203:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	USART_CHSIZE_7BIT_gc = (0x02),  /* Character size: 7 bit */
 204:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	USART_CHSIZE_8BIT_gc = (0x03),  /* Character size: 8 bit */
 205:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	USART_CHSIZE_9BIT_gc = (0x07),  /* Character size: 9 bit */
 206:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** } USART_CHSIZE_t;
 207:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 208:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** /* Communication Mode */
 209:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** typedef enum USART_CMODE_enum {
 210:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	USART_CMODE_ASYNCHRONOUS_gc = (0x00 << USART_UMSEL01_gp),  /*
 211:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	                                                            *
 212:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	                                                            *
 213:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	                                                            *Asynchronous
 214:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	                                                            * Mode */
 215:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	USART_CMODE_SYNCHRONOUS_gc = (0x01 << USART_UMSEL01_gp),  /* Synchronous
 216:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	                                                           * Mode */
 217:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	USART_CMODE_IRDA_gc = (0x02 << USART_UMSEL01_gp),  /* IrDA Mode */
 218:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	USART_CMODE_MSPI_gc = (0x03 << USART_UMSEL01_gp),  /* Master SPI Mode */
 219:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** } USART_CMODE_t;
 220:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 221:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** /* Parity Mode */
 222:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** typedef enum USART_PMODE_enum {
 223:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	USART_PMODE_DISABLED_gc = (0x00 << USART_PMODE_gp),  /* No Parity */
 224:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	USART_PMODE_EVEN_gc = (0x02 << USART_PMODE_gp),  /* Even Parity */
 225:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	USART_PMODE_ODD_gc = (0x03 << USART_PMODE_gp),  /* Odd Parity */
 226:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** } USART_PMODE_t;
 227:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 228:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** /* ! Lookup table containing baudctrl values for CPU frequency 1 Mhz */
 229:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** static PROGMEM_DECLARE(uint16_t, baudctrl_1mhz[]) = {
 230:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	0x0033, /* Baud: 1200 */
 231:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	0x0019, /* Baud: 2400 */
 232:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	0x000C, /* Baud: 4800 */
 233:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	0x0006, /* Baud: 9600 */
 234:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	0x0003, /* Baud: 19200 */
 235:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	0x0002, /* Baud: 38400 */
 236:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	0x0001, /* Baud: 57600 */
 237:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	USART_BAUD_UNDEFINED, /* Baud: 115200 */
 238:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** };
 239:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 240:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** /* ! Lookup table containing baudctrl values for CPU frequency 8 Mhz */
 241:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** static PROGMEM_DECLARE(uint16_t, baudctrl_8mhz[]) = {
 242:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	0x01A0, /* Baud: 1200 */
 243:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	0x00CF, /* Baud: 2400 */
 244:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	0x0067, /* Baud: 4800 */
 245:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	0x0033, /* Baud: 9600 */
 246:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	0x0019, /* Baud: 19200 */
 247:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	0x000C, /* Baud: 38400 */
 248:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	0x0007, /* Baud: 57600 */
 249:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	0x0008, /* Baud: 115200 */
 250:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** };
 251:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 252:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** /* ! Lookup table containing baudctrl values for CPU frequency 16 Mhz */
 253:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** static PROGMEM_DECLARE(uint16_t, baudctrl_16mhz[]) = {
 254:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	0x0340, /* Baud: 1200 */
 255:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	0x01A0, /* Baud: 2400 */
 256:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	0x00CF, /* Baud: 4800 */
 257:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	0x0067, /* Baud: 9600 */
 258:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	0x0033, /* Baud: 19200 */
 259:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	0x0019, /* Baud: 38400 */
 260:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	0x0010, /* Baud: 57600 */
 261:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	0x0010, /* Baud: 115200 */
 262:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** };
 263:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 264:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 265:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** /* ! Input parameters when initializing RS232 and similar modes. */
 266:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** typedef struct usart_rs232_options {
 267:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	/* ! Set baud rate of the USART (unused in slave modes). */
 268:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	uint32_t baudrate;
 269:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 270:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	/* ! Number of bits to transmit as a character (5 to 9). */
 271:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	USART_CHSIZE_t charlength;
 272:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 273:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	/* ! Parity type: USART_PMODE_DISABLED_gc, USART_PMODE_EVEN_gc, */
 274:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	/* ! USART_PMODE_ODD_gc. */
 275:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	USART_PMODE_t paritytype;
 276:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 277:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	/* ! Number of stop bits between two characters: */
 278:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	/* ! true: 2 stop bits */
 279:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	/* ! false: 1 stop bit */
 280:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	bool stopbits;
 281:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** } usart_rs232_options_t;
 282:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 283:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** /* ! Input parameters when initializing SPI master mode. */
 284:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** typedef struct usart_spi_options {
 285:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	/* ! Set baud rate of the USART in SPI mode. */
 286:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	uint32_t baudrate;
 287:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 288:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	/* ! SPI transmission mode. */
 289:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	uint8_t spimode;
 290:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 291:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	uint8_t data_order;
 292:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** } usart_spi_options_t;
 293:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 294:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 295:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** /**
 296:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * \brief Enable USART receiver.
 297:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  *
 298:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * \param usart Pointer to the USART module
 299:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  */
 300:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** static inline void usart_rx_enable(USART_t *usart)
 301:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** {
  52               		.loc 1 301 0
  53               		.cfi_startproc
  54 0000 CF93      		push r28
  55               	.LCFI0:
  56               		.cfi_def_cfa_offset 3
  57               		.cfi_offset 28, -2
  58 0002 DF93      		push r29
  59               	.LCFI1:
  60               		.cfi_def_cfa_offset 4
  61               		.cfi_offset 29, -3
  62 0004 00D0      		rcall .
  63               	.LCFI2:
  64               		.cfi_def_cfa_offset 6
  65 0006 CDB7      		in r28,__SP_L__
  66 0008 DEB7      		in r29,__SP_H__
  67               	.LCFI3:
  68               		.cfi_def_cfa_register 28
  69               	/* prologue: function */
  70               	/* frame size = 2 */
  71               	/* stack size = 4 */
  72               	.L__stack_usage = 4
  73 000a 9A83      		std Y+2,r25
  74 000c 8983      		std Y+1,r24
 302:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	(usart)->UCSRnB |= USART_RXEN_bm;
  75               		.loc 1 302 0
  76 000e 8981      		ldd r24,Y+1
  77 0010 9A81      		ldd r25,Y+2
  78 0012 FC01      		movw r30,r24
  79 0014 8181      		ldd r24,Z+1
  80 0016 282F      		mov r18,r24
  81 0018 2061      		ori r18,lo8(16)
  82 001a 8981      		ldd r24,Y+1
  83 001c 9A81      		ldd r25,Y+2
  84 001e FC01      		movw r30,r24
  85 0020 2183      		std Z+1,r18
 303:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** }
  86               		.loc 1 303 0
  87 0022 0000      		nop
  88               	/* epilogue start */
  89 0024 0F90      		pop __tmp_reg__
  90 0026 0F90      		pop __tmp_reg__
  91 0028 DF91      		pop r29
  92 002a CF91      		pop r28
  93 002c 0895      		ret
  94               		.cfi_endproc
  95               	.LFE8:
  98               	usart_format_set:
  99               	.LFB10:
 304:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 305:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** /**
 306:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * \brief Disable USART receiver.
 307:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  *
 308:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * \param usart Pointer to the USART module.
 309:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  */
 310:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** static inline void usart_rx_disable(USART_t *usart)
 311:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** {
 312:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	(usart)->UCSRnB &= ~USART_RXEN_bm;
 313:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** }
 314:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 315:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** /**
 316:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * \brief  Configure the USART frame format.
 317:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  *
 318:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  *  Sets the frame format, Frame Size, parity mode and number of stop bits.
 319:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  *
 320:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  *  \param usart Pointer to the USART module
 321:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  *  \param charSize The character size. Use USART_CHSIZE_t type.
 322:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  *  \param parityMode The parity Mode. Use USART_PMODE_t type.
 323:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  *  \param twoStopBits Enable two stop bit mode. Use bool type.
 324:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  */
 325:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** static inline void usart_format_set(USART_t *usart, USART_CHSIZE_t charSize,
 326:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 		USART_PMODE_t parityMode, bool twoStopBits)
 327:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** {
 100               		.loc 1 327 0
 101               		.cfi_startproc
 102 002e CF93      		push r28
 103               	.LCFI4:
 104               		.cfi_def_cfa_offset 3
 105               		.cfi_offset 28, -2
 106 0030 DF93      		push r29
 107               	.LCFI5:
 108               		.cfi_def_cfa_offset 4
 109               		.cfi_offset 29, -3
 110 0032 00D0      		rcall .
 111 0034 00D0      		rcall .
 112 0036 1F92      		push __zero_reg__
 113               	.LCFI6:
 114               		.cfi_def_cfa_offset 9
 115 0038 CDB7      		in r28,__SP_L__
 116 003a DEB7      		in r29,__SP_H__
 117               	.LCFI7:
 118               		.cfi_def_cfa_register 28
 119               	/* prologue: function */
 120               	/* frame size = 5 */
 121               	/* stack size = 7 */
 122               	.L__stack_usage = 7
 123 003c 9A83      		std Y+2,r25
 124 003e 8983      		std Y+1,r24
 125 0040 6B83      		std Y+3,r22
 126 0042 4C83      		std Y+4,r20
 127 0044 2D83      		std Y+5,r18
 328:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	(usart)->UCSRnC
 329:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 		= ((usart)->UCSRnC &
 128               		.loc 1 329 0
 129 0046 8981      		ldd r24,Y+1
 130 0048 9A81      		ldd r25,Y+2
 131 004a FC01      		movw r30,r24
 132 004c 8281      		ldd r24,Z+2
 133 004e 282F      		mov r18,r24
 134 0050 297F      		andi r18,lo8(-7)
 330:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 			(~USART_CHSIZE01C_gm)) | ((charSize & 0x03)
 135               		.loc 1 330 0
 136 0052 8B81      		ldd r24,Y+3
 137 0054 882F      		mov r24,r24
 138 0056 90E0      		ldi r25,0
 139 0058 8370      		andi r24,3
 140 005a 9927      		clr r25
 331:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 			<< USART_CHSIZE01C_gp);
 141               		.loc 1 331 0
 142 005c 880F      		lsl r24
 143 005e 991F      		rol r25
 329:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 			(~USART_CHSIZE01C_gm)) | ((charSize & 0x03)
 144               		.loc 1 329 0
 145 0060 822B      		or r24,r18
 146 0062 282F      		mov r18,r24
 147 0064 8981      		ldd r24,Y+1
 148 0066 9A81      		ldd r25,Y+2
 149 0068 FC01      		movw r30,r24
 150 006a 2283      		std Z+2,r18
 332:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	(usart)->UCSRnB
 333:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 		= ((usart)->UCSRnB &
 151               		.loc 1 333 0
 152 006c 8981      		ldd r24,Y+1
 153 006e 9A81      		ldd r25,Y+2
 154 0070 FC01      		movw r30,r24
 155 0072 8181      		ldd r24,Z+1
 156 0074 282F      		mov r18,r24
 157 0076 2B7F      		andi r18,lo8(-5)
 334:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 			(~USART_CHSIZE2_bm)) | ((charSize & 0x04)
 158               		.loc 1 334 0
 159 0078 8B81      		ldd r24,Y+3
 160 007a 882F      		mov r24,r24
 161 007c 90E0      		ldi r25,0
 162 007e 8470      		andi r24,4
 163 0080 9927      		clr r25
 335:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 			<< USART_CHSIZE2_bp);
 164               		.loc 1 335 0
 165 0082 880F      		lsl r24
 166 0084 991F      		rol r25
 167 0086 880F      		lsl r24
 168 0088 991F      		rol r25
 333:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 			(~USART_CHSIZE2_bm)) | ((charSize & 0x04)
 169               		.loc 1 333 0
 170 008a 822B      		or r24,r18
 171 008c 282F      		mov r18,r24
 172 008e 8981      		ldd r24,Y+1
 173 0090 9A81      		ldd r25,Y+2
 174 0092 FC01      		movw r30,r24
 175 0094 2183      		std Z+1,r18
 336:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 337:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	(usart)->UCSRnC = ((usart)->UCSRnC & (~USART_PMODE_gm)) | parityMode;
 176               		.loc 1 337 0
 177 0096 8981      		ldd r24,Y+1
 178 0098 9A81      		ldd r25,Y+2
 179 009a FC01      		movw r30,r24
 180 009c 8281      		ldd r24,Z+2
 181 009e 982F      		mov r25,r24
 182 00a0 9F7C      		andi r25,lo8(-49)
 183 00a2 8C81      		ldd r24,Y+4
 184 00a4 892B      		or r24,r25
 185 00a6 282F      		mov r18,r24
 186 00a8 8981      		ldd r24,Y+1
 187 00aa 9A81      		ldd r25,Y+2
 188 00ac FC01      		movw r30,r24
 189 00ae 2283      		std Z+2,r18
 338:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 339:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	(usart)->UCSRnC = ((usart)->UCSRnC & (~USART_STOPB_bm)) | (twoStopBits
 190               		.loc 1 339 0
 191 00b0 8981      		ldd r24,Y+1
 192 00b2 9A81      		ldd r25,Y+2
 193 00b4 FC01      		movw r30,r24
 194 00b6 8281      		ldd r24,Z+2
 195 00b8 282F      		mov r18,r24
 196 00ba 277F      		andi r18,lo8(-9)
 340:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 			<< USART_STOPB_bp);
 197               		.loc 1 340 0
 198 00bc 8D81      		ldd r24,Y+5
 199 00be 882F      		mov r24,r24
 200 00c0 90E0      		ldi r25,0
 201 00c2 880F      		lsl r24
 202 00c4 991F      		rol r25
 203 00c6 880F      		lsl r24
 204 00c8 991F      		rol r25
 205 00ca 880F      		lsl r24
 206 00cc 991F      		rol r25
 339:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 			<< USART_STOPB_bp);
 207               		.loc 1 339 0
 208 00ce 822B      		or r24,r18
 209 00d0 282F      		mov r18,r24
 210 00d2 8981      		ldd r24,Y+1
 211 00d4 9A81      		ldd r25,Y+2
 212 00d6 FC01      		movw r30,r24
 213 00d8 2283      		std Z+2,r18
 341:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** }
 214               		.loc 1 341 0
 215 00da 0000      		nop
 216               	/* epilogue start */
 217 00dc 0F90      		pop __tmp_reg__
 218 00de 0F90      		pop __tmp_reg__
 219 00e0 0F90      		pop __tmp_reg__
 220 00e2 0F90      		pop __tmp_reg__
 221 00e4 0F90      		pop __tmp_reg__
 222 00e6 DF91      		pop r29
 223 00e8 CF91      		pop r28
 224 00ea 0895      		ret
 225               		.cfi_endproc
 226               	.LFE10:
 229               	usart_tx_enable:
 230               	.LFB11:
 342:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 343:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** /**
 344:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * \brief Enable USART transmitter.
 345:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  *
 346:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * \param usart Pointer to the USART module.
 347:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  */
 348:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** static inline void usart_tx_enable(USART_t *usart)
 349:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** {
 231               		.loc 1 349 0
 232               		.cfi_startproc
 233 00ec CF93      		push r28
 234               	.LCFI8:
 235               		.cfi_def_cfa_offset 3
 236               		.cfi_offset 28, -2
 237 00ee DF93      		push r29
 238               	.LCFI9:
 239               		.cfi_def_cfa_offset 4
 240               		.cfi_offset 29, -3
 241 00f0 00D0      		rcall .
 242               	.LCFI10:
 243               		.cfi_def_cfa_offset 6
 244 00f2 CDB7      		in r28,__SP_L__
 245 00f4 DEB7      		in r29,__SP_H__
 246               	.LCFI11:
 247               		.cfi_def_cfa_register 28
 248               	/* prologue: function */
 249               	/* frame size = 2 */
 250               	/* stack size = 4 */
 251               	.L__stack_usage = 4
 252 00f6 9A83      		std Y+2,r25
 253 00f8 8983      		std Y+1,r24
 350:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	(usart)->UCSRnB |= USART_TXEN_bm;
 254               		.loc 1 350 0
 255 00fa 8981      		ldd r24,Y+1
 256 00fc 9A81      		ldd r25,Y+2
 257 00fe FC01      		movw r30,r24
 258 0100 8181      		ldd r24,Z+1
 259 0102 282F      		mov r18,r24
 260 0104 2860      		ori r18,lo8(8)
 261 0106 8981      		ldd r24,Y+1
 262 0108 9A81      		ldd r25,Y+2
 263 010a FC01      		movw r30,r24
 264 010c 2183      		std Z+1,r18
 351:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** }
 265               		.loc 1 351 0
 266 010e 0000      		nop
 267               	/* epilogue start */
 268 0110 0F90      		pop __tmp_reg__
 269 0112 0F90      		pop __tmp_reg__
 270 0114 DF91      		pop r29
 271 0116 CF91      		pop r28
 272 0118 0895      		ret
 273               		.cfi_endproc
 274               	.LFE11:
 277               	usart_set_mode:
 278               	.LFB19:
 352:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 353:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** /**
 354:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * \brief Disable USART transmitter.
 355:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  *
 356:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * \param usart Pointer to the USART module.
 357:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  */
 358:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** static inline void usart_tx_disable(USART_t *usart)
 359:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** {
 360:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	(usart)->UCSRnB &= ~USART_TXEN_bm;
 361:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** }
 362:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 363:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** /**
 364:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * \brief Enable USART transmit complete interrupt.
 365:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  *
 366:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * \param usart Pointer to the USART module.
 367:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  */
 368:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** static inline void usart_tx_complete_interrupt_enable(USART_t *usart)
 369:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** {
 370:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	(usart)->UCSRnB |= USART_TXC_bm;
 371:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** }
 372:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 373:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** /**
 374:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * \brief Enable USART receive complete interrupt.
 375:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  *
 376:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * \param usart Pointer to the USART module.
 377:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  */
 378:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** static inline void usart_rx_complete_interrupt_enable(USART_t *usart)
 379:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** {
 380:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	(usart)->UCSRnB |= USART_RXC_bm;
 381:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** }
 382:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 383:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** /**
 384:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * \brief Enable USART data register empty interrupt.
 385:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  *
 386:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * \param usart Pointer to the USART module.
 387:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  */
 388:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** static inline void usart_data_empty_interrupt_enable(USART_t *usart)
 389:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** {
 390:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	(usart)->UCSRnB |= USART_DRIE_bm;
 391:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** }
 392:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 393:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** /**
 394:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * \brief Disable USART transmit complete interrupt.
 395:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  *
 396:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * \param usart Pointer to the USART module.
 397:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  */
 398:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** static inline void usart_tx_complete_interrupt_disable(USART_t *usart)
 399:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** {
 400:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	(usart)->UCSRnB &= ~USART_TXC_bm;
 401:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** }
 402:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 403:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** /**
 404:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * \brief Disable USART receive complete interrupt.
 405:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  *
 406:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * \param usart Pointer to the USART module.
 407:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  */
 408:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** static inline void usart_rx_complete_interrupt_disable(USART_t *usart)
 409:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** {
 410:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	(usart)->UCSRnB &= ~USART_RXC_bm;
 411:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** }
 412:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 413:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** /**
 414:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * \brief Disable USART data register empty interrupt.
 415:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  *
 416:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * \param usart Pointer to the USART module.
 417:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  */
 418:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** static inline void usart_data_empty_interrupt_disable(USART_t *usart)
 419:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** {
 420:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	(usart)->UCSRnB &= ~USART_DRIE_bm;
 421:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** }
 422:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 423:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** /**
 424:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * \brief Set the mode the USART run in.
 425:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  *
 426:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * Set the mode the USART run in. The default mode is asynchronous mode.
 427:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  *
 428:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * \param usart Pointer to the USART module register section.
 429:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * \param usartmode Selects the USART mode. Use USART_CMODE_t type.
 430:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  *
 431:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * USART modes:
 432:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * - 0x0        : Asynchronous mode.
 433:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * - 0x1        : Synchronous mode.
 434:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * - 0x2        : IrDA mode.
 435:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * - 0x3        : Master SPI mode.
 436:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  */
 437:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
 438:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** {
 279               		.loc 1 438 0
 280               		.cfi_startproc
 281 011a CF93      		push r28
 282               	.LCFI12:
 283               		.cfi_def_cfa_offset 3
 284               		.cfi_offset 28, -2
 285 011c DF93      		push r29
 286               	.LCFI13:
 287               		.cfi_def_cfa_offset 4
 288               		.cfi_offset 29, -3
 289 011e 00D0      		rcall .
 290 0120 1F92      		push __zero_reg__
 291               	.LCFI14:
 292               		.cfi_def_cfa_offset 7
 293 0122 CDB7      		in r28,__SP_L__
 294 0124 DEB7      		in r29,__SP_H__
 295               	.LCFI15:
 296               		.cfi_def_cfa_register 28
 297               	/* prologue: function */
 298               	/* frame size = 3 */
 299               	/* stack size = 5 */
 300               	.L__stack_usage = 5
 301 0126 9A83      		std Y+2,r25
 302 0128 8983      		std Y+1,r24
 303 012a 6B83      		std Y+3,r22
 439:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	(usart)->UCSRnC = ((usart)->UCSRnC & (~USART_UMSEL01_gm)) | usartmode;
 304               		.loc 1 439 0
 305 012c 8981      		ldd r24,Y+1
 306 012e 9A81      		ldd r25,Y+2
 307 0130 FC01      		movw r30,r24
 308 0132 8281      		ldd r24,Z+2
 309 0134 982F      		mov r25,r24
 310 0136 9F73      		andi r25,lo8(63)
 311 0138 8B81      		ldd r24,Y+3
 312 013a 892B      		or r24,r25
 313 013c 282F      		mov r18,r24
 314 013e 8981      		ldd r24,Y+1
 315 0140 9A81      		ldd r25,Y+2
 316 0142 FC01      		movw r30,r24
 317 0144 2283      		std Z+2,r18
 440:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** }
 318               		.loc 1 440 0
 319 0146 0000      		nop
 320               	/* epilogue start */
 321 0148 0F90      		pop __tmp_reg__
 322 014a 0F90      		pop __tmp_reg__
 323 014c 0F90      		pop __tmp_reg__
 324 014e DF91      		pop r29
 325 0150 CF91      		pop r28
 326 0152 0895      		ret
 327               		.cfi_endproc
 328               	.LFE19:
 331               	usart_data_register_is_empty:
 332               	.LFB20:
 441:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 442:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** /**
 443:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * \brief Check if data register empty flag is set.
 444:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  *
 445:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * \param usart The USART module.
 446:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  */
 447:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** static inline bool usart_data_register_is_empty(USART_t *usart)
 448:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** {
 333               		.loc 1 448 0
 334               		.cfi_startproc
 335 0154 CF93      		push r28
 336               	.LCFI16:
 337               		.cfi_def_cfa_offset 3
 338               		.cfi_offset 28, -2
 339 0156 DF93      		push r29
 340               	.LCFI17:
 341               		.cfi_def_cfa_offset 4
 342               		.cfi_offset 29, -3
 343 0158 00D0      		rcall .
 344               	.LCFI18:
 345               		.cfi_def_cfa_offset 6
 346 015a CDB7      		in r28,__SP_L__
 347 015c DEB7      		in r29,__SP_H__
 348               	.LCFI19:
 349               		.cfi_def_cfa_register 28
 350               	/* prologue: function */
 351               	/* frame size = 2 */
 352               	/* stack size = 4 */
 353               	.L__stack_usage = 4
 354 015e 9A83      		std Y+2,r25
 355 0160 8983      		std Y+1,r24
 449:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	return (usart)->UCSRnA & USART_DRE_bm;
 356               		.loc 1 449 0
 357 0162 8981      		ldd r24,Y+1
 358 0164 9A81      		ldd r25,Y+2
 359 0166 FC01      		movw r30,r24
 360 0168 8081      		ld r24,Z
 361 016a 882F      		mov r24,r24
 362 016c 90E0      		ldi r25,0
 363 016e 8072      		andi r24,32
 364 0170 9927      		clr r25
 365 0172 21E0      		ldi r18,lo8(1)
 366 0174 892B      		or r24,r25
 367 0176 01F4      		brne .L7
 368 0178 20E0      		ldi r18,0
 369               	.L7:
 370               		.loc 1 449 0 is_stmt 0 discriminator 1
 371 017a 822F      		mov r24,r18
 372               	/* epilogue start */
 450:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** }
 373               		.loc 1 450 0 is_stmt 1 discriminator 1
 374 017c 0F90      		pop __tmp_reg__
 375 017e 0F90      		pop __tmp_reg__
 376 0180 DF91      		pop r29
 377 0182 CF91      		pop r28
 378 0184 0895      		ret
 379               		.cfi_endproc
 380               	.LFE20:
 383               	usart_rx_is_complete:
 384               	.LFB21:
 451:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 
 452:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** /**
 453:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * \brief Checks if the RX complete interrupt flag is set.
 454:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  *
 455:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * Checks if the RX complete interrupt flag is set.
 456:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  *
 457:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  * \param usart The USART module.
 458:../../../platform/mega_rf/drivers/usart/usart_megarf.h ****  */
 459:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** static inline bool usart_rx_is_complete(USART_t *usart)
 460:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** {
 385               		.loc 1 460 0
 386               		.cfi_startproc
 387 0186 CF93      		push r28
 388               	.LCFI20:
 389               		.cfi_def_cfa_offset 3
 390               		.cfi_offset 28, -2
 391 0188 DF93      		push r29
 392               	.LCFI21:
 393               		.cfi_def_cfa_offset 4
 394               		.cfi_offset 29, -3
 395 018a 00D0      		rcall .
 396               	.LCFI22:
 397               		.cfi_def_cfa_offset 6
 398 018c CDB7      		in r28,__SP_L__
 399 018e DEB7      		in r29,__SP_H__
 400               	.LCFI23:
 401               		.cfi_def_cfa_register 28
 402               	/* prologue: function */
 403               	/* frame size = 2 */
 404               	/* stack size = 4 */
 405               	.L__stack_usage = 4
 406 0190 9A83      		std Y+2,r25
 407 0192 8983      		std Y+1,r24
 461:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** 	return (usart)->UCSRnA & USART_RXC_bm;
 408               		.loc 1 461 0
 409 0194 8981      		ldd r24,Y+1
 410 0196 9A81      		ldd r25,Y+2
 411 0198 FC01      		movw r30,r24
 412 019a 8081      		ld r24,Z
 413 019c 882F      		mov r24,r24
 414 019e 90E0      		ldi r25,0
 415 01a0 8078      		andi r24,128
 416 01a2 9927      		clr r25
 417 01a4 21E0      		ldi r18,lo8(1)
 418 01a6 892B      		or r24,r25
 419 01a8 01F4      		brne .L10
 420 01aa 20E0      		ldi r18,0
 421               	.L10:
 422               		.loc 1 461 0 is_stmt 0 discriminator 1
 423 01ac 822F      		mov r24,r18
 424               	/* epilogue start */
 462:../../../platform/mega_rf/drivers/usart/usart_megarf.h **** }
 425               		.loc 1 462 0 is_stmt 1 discriminator 1
 426 01ae 0F90      		pop __tmp_reg__
 427 01b0 0F90      		pop __tmp_reg__
 428 01b2 DF91      		pop r29
 429 01b4 CF91      		pop r28
 430 01b6 0895      		ret
 431               		.cfi_endproc
 432               	.LFE21:
 435               	ioport_pin_to_mask:
 436               	.LFB85:
 437               		.file 2 "../../../platform/common/services/ioport/ioport.h"
   1:../../../platform/common/services/ioport/ioport.h **** /**
   2:../../../platform/common/services/ioport/ioport.h ****  * \file
   3:../../../platform/common/services/ioport/ioport.h ****  *
   4:../../../platform/common/services/ioport/ioport.h ****  * \brief Common IOPORT service main header file for AVR, UC3 and ARM
   5:../../../platform/common/services/ioport/ioport.h ****  *        architectures.
   6:../../../platform/common/services/ioport/ioport.h ****  *
   7:../../../platform/common/services/ioport/ioport.h ****  * Copyright (c) 2012 Atmel Corporation. All rights reserved.
   8:../../../platform/common/services/ioport/ioport.h ****  *
   9:../../../platform/common/services/ioport/ioport.h ****  * \asf_license_start
  10:../../../platform/common/services/ioport/ioport.h ****  *
  11:../../../platform/common/services/ioport/ioport.h ****  * \page License
  12:../../../platform/common/services/ioport/ioport.h ****  *
  13:../../../platform/common/services/ioport/ioport.h ****  * Redistribution and use in source and binary forms, with or without
  14:../../../platform/common/services/ioport/ioport.h ****  * modification, are permitted provided that the following conditions are met:
  15:../../../platform/common/services/ioport/ioport.h ****  *
  16:../../../platform/common/services/ioport/ioport.h ****  * 1. Redistributions of source code must retain the above copyright notice,
  17:../../../platform/common/services/ioport/ioport.h ****  *    this list of conditions and the following disclaimer.
  18:../../../platform/common/services/ioport/ioport.h ****  *
  19:../../../platform/common/services/ioport/ioport.h ****  * 2. Redistributions in binary form must reproduce the above copyright notice,
  20:../../../platform/common/services/ioport/ioport.h ****  *    this list of conditions and the following disclaimer in the documentation
  21:../../../platform/common/services/ioport/ioport.h ****  *    and/or other materials provided with the distribution.
  22:../../../platform/common/services/ioport/ioport.h ****  *
  23:../../../platform/common/services/ioport/ioport.h ****  * 3. The name of Atmel may not be used to endorse or promote products derived
  24:../../../platform/common/services/ioport/ioport.h ****  *    from this software without specific prior written permission.
  25:../../../platform/common/services/ioport/ioport.h ****  *
  26:../../../platform/common/services/ioport/ioport.h ****  * 4. This software may only be redistributed and used in connection with an
  27:../../../platform/common/services/ioport/ioport.h ****  *    Atmel microcontroller product.
  28:../../../platform/common/services/ioport/ioport.h ****  *
  29:../../../platform/common/services/ioport/ioport.h ****  * THIS SOFTWARE IS PROVIDED BY ATMEL "AS IS" AND ANY EXPRESS OR IMPLIED
  30:../../../platform/common/services/ioport/ioport.h ****  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
  31:../../../platform/common/services/ioport/ioport.h ****  * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE
  32:../../../platform/common/services/ioport/ioport.h ****  * EXPRESSLY AND SPECIFICALLY DISCLAIMED. IN NO EVENT SHALL ATMEL BE LIABLE FOR
  33:../../../platform/common/services/ioport/ioport.h ****  * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  34:../../../platform/common/services/ioport/ioport.h ****  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
  35:../../../platform/common/services/ioport/ioport.h ****  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
  36:../../../platform/common/services/ioport/ioport.h ****  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
  37:../../../platform/common/services/ioport/ioport.h ****  * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
  38:../../../platform/common/services/ioport/ioport.h ****  * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  39:../../../platform/common/services/ioport/ioport.h ****  * POSSIBILITY OF SUCH DAMAGE.
  40:../../../platform/common/services/ioport/ioport.h ****  *
  41:../../../platform/common/services/ioport/ioport.h ****  * \asf_license_stop
  42:../../../platform/common/services/ioport/ioport.h ****  *
  43:../../../platform/common/services/ioport/ioport.h ****  */
  44:../../../platform/common/services/ioport/ioport.h **** #ifndef IOPORT_H
  45:../../../platform/common/services/ioport/ioport.h **** #define IOPORT_H
  46:../../../platform/common/services/ioport/ioport.h **** 
  47:../../../platform/common/services/ioport/ioport.h **** #ifdef __cplusplus
  48:../../../platform/common/services/ioport/ioport.h **** extern "C" {
  49:../../../platform/common/services/ioport/ioport.h **** #endif
  50:../../../platform/common/services/ioport/ioport.h **** 
  51:../../../platform/common/services/ioport/ioport.h **** #include <parts.h>
  52:../../../platform/common/services/ioport/ioport.h **** #include <compiler.h>
  53:../../../platform/common/services/ioport/ioport.h **** 
  54:../../../platform/common/services/ioport/ioport.h **** /**
  55:../../../platform/common/services/ioport/ioport.h ****  * \defgroup ioport_group Common IOPORT API
  56:../../../platform/common/services/ioport/ioport.h ****  *
  57:../../../platform/common/services/ioport/ioport.h ****  * See \ref ioport_quickstart.
  58:../../../platform/common/services/ioport/ioport.h ****  *
  59:../../../platform/common/services/ioport/ioport.h ****  * This is common IOPORT service for GPIO pin configuration and control in a
  60:../../../platform/common/services/ioport/ioport.h ****  * standardized manner across the MEGA, MEGA_RF, XMEGA, UC3 and ARM devices.
  61:../../../platform/common/services/ioport/ioport.h ****  *
  62:../../../platform/common/services/ioport/ioport.h ****  * Port pin control code is optimized for each platform, and should produce
  63:../../../platform/common/services/ioport/ioport.h ****  * both compact and fast execution times when used with constant values.
  64:../../../platform/common/services/ioport/ioport.h ****  *
  65:../../../platform/common/services/ioport/ioport.h ****  * \section dependencies Dependencies
  66:../../../platform/common/services/ioport/ioport.h ****  * This driver depends on the following modules:
  67:../../../platform/common/services/ioport/ioport.h ****  * - \ref sysclk_group for clock speed and functions.
  68:../../../platform/common/services/ioport/ioport.h ****  * @{
  69:../../../platform/common/services/ioport/ioport.h ****  */
  70:../../../platform/common/services/ioport/ioport.h **** 
  71:../../../platform/common/services/ioport/ioport.h **** /**
  72:../../../platform/common/services/ioport/ioport.h ****  * \def IOPORT_CREATE_PIN(port, pin)
  73:../../../platform/common/services/ioport/ioport.h ****  * \brief Create IOPORT pin number
  74:../../../platform/common/services/ioport/ioport.h ****  *
  75:../../../platform/common/services/ioport/ioport.h ****  * Create a IOPORT pin number for use with the IOPORT functions.
  76:../../../platform/common/services/ioport/ioport.h ****  *
  77:../../../platform/common/services/ioport/ioport.h ****  * \param port IOPORT port (e.g. PORTA, PA or PIOA depending on chosen
  78:../../../platform/common/services/ioport/ioport.h ****  *             architecture)
  79:../../../platform/common/services/ioport/ioport.h ****  * \param pin IOPORT zero-based index of the I/O pin
  80:../../../platform/common/services/ioport/ioport.h ****  */
  81:../../../platform/common/services/ioport/ioport.h **** 
  82:../../../platform/common/services/ioport/ioport.h **** /** \brief IOPORT pin directions */
  83:../../../platform/common/services/ioport/ioport.h **** enum ioport_direction {
  84:../../../platform/common/services/ioport/ioport.h **** 	IOPORT_DIR_INPUT,  /*!< IOPORT input direction */
  85:../../../platform/common/services/ioport/ioport.h **** 	IOPORT_DIR_OUTPUT, /*!< IOPORT output direction */
  86:../../../platform/common/services/ioport/ioport.h **** };
  87:../../../platform/common/services/ioport/ioport.h **** 
  88:../../../platform/common/services/ioport/ioport.h **** /** \brief IOPORT levels */
  89:../../../platform/common/services/ioport/ioport.h **** enum ioport_value {
  90:../../../platform/common/services/ioport/ioport.h **** 	IOPORT_PIN_LEVEL_LOW,  /*!< IOPORT pin value low */
  91:../../../platform/common/services/ioport/ioport.h **** 	IOPORT_PIN_LEVEL_HIGH, /*!< IOPORT pin value high */
  92:../../../platform/common/services/ioport/ioport.h **** };
  93:../../../platform/common/services/ioport/ioport.h **** 
  94:../../../platform/common/services/ioport/ioport.h **** #if MEGA_RF
  95:../../../platform/common/services/ioport/ioport.h **** /** \brief IOPORT edge sense modes */
  96:../../../platform/common/services/ioport/ioport.h **** enum ioport_sense {
  97:../../../platform/common/services/ioport/ioport.h **** 	IOPORT_SENSE_LEVEL,     /*!< IOPORT sense low level  */
  98:../../../platform/common/services/ioport/ioport.h **** 	IOPORT_SENSE_BOTHEDGES, /*!< IOPORT sense both rising and falling edges */
  99:../../../platform/common/services/ioport/ioport.h **** 	IOPORT_SENSE_FALLING,   /*!< IOPORT sense falling edges */
 100:../../../platform/common/services/ioport/ioport.h **** 	IOPORT_SENSE_RISING,    /*!< IOPORT sense rising edges */
 101:../../../platform/common/services/ioport/ioport.h **** };
 102:../../../platform/common/services/ioport/ioport.h **** #elif SAM && !SAM4L
 103:../../../platform/common/services/ioport/ioport.h **** /** \brief IOPORT edge sense modes */
 104:../../../platform/common/services/ioport/ioport.h **** enum ioport_sense {
 105:../../../platform/common/services/ioport/ioport.h **** 	IOPORT_SENSE_BOTHEDGES, /*!< IOPORT sense both rising and falling edges */
 106:../../../platform/common/services/ioport/ioport.h **** 	IOPORT_SENSE_FALLING,   /*!< IOPORT sense falling edges */
 107:../../../platform/common/services/ioport/ioport.h **** 	IOPORT_SENSE_RISING,    /*!< IOPORT sense rising edges */
 108:../../../platform/common/services/ioport/ioport.h **** 	IOPORT_SENSE_LEVEL_LOW, /*!< IOPORT sense low level  */
 109:../../../platform/common/services/ioport/ioport.h **** 	IOPORT_SENSE_LEVEL_HIGH,/*!< IOPORT sense High level  */
 110:../../../platform/common/services/ioport/ioport.h **** };
 111:../../../platform/common/services/ioport/ioport.h **** #else
 112:../../../platform/common/services/ioport/ioport.h **** enum ioport_sense {
 113:../../../platform/common/services/ioport/ioport.h **** 	IOPORT_SENSE_BOTHEDGES, /*!< IOPORT sense both rising and falling edges */
 114:../../../platform/common/services/ioport/ioport.h **** 	IOPORT_SENSE_RISING,    /*!< IOPORT sense rising edges */
 115:../../../platform/common/services/ioport/ioport.h **** 	IOPORT_SENSE_FALLING,   /*!< IOPORT sense falling edges */
 116:../../../platform/common/services/ioport/ioport.h **** };
 117:../../../platform/common/services/ioport/ioport.h **** #endif
 118:../../../platform/common/services/ioport/ioport.h **** 
 119:../../../platform/common/services/ioport/ioport.h **** 
 120:../../../platform/common/services/ioport/ioport.h **** #if XMEGA
 121:../../../platform/common/services/ioport/ioport.h **** # include "xmega/ioport.h"
 122:../../../platform/common/services/ioport/ioport.h **** # if defined(IOPORT_XMEGA_COMPAT)
 123:../../../platform/common/services/ioport/ioport.h **** #  include "xmega/ioport_compat.h"
 124:../../../platform/common/services/ioport/ioport.h **** # endif
 125:../../../platform/common/services/ioport/ioport.h **** #elif MEGA
 126:../../../platform/common/services/ioport/ioport.h **** #  include "mega_rf/ioport.h"
 127:../../../platform/common/services/ioport/ioport.h **** #elif UC3
 128:../../../platform/common/services/ioport/ioport.h **** # include "uc3/ioport.h"
 129:../../../platform/common/services/ioport/ioport.h **** #elif SAM
 130:../../../platform/common/services/ioport/ioport.h **** # if SAM4L
 131:../../../platform/common/services/ioport/ioport.h **** #  include "sam/ioport_gpio.h"
 132:../../../platform/common/services/ioport/ioport.h **** # elif SAMD20
 133:../../../platform/common/services/ioport/ioport.h **** #  include "sam0/ioport.h"
 134:../../../platform/common/services/ioport/ioport.h **** # else
 135:../../../platform/common/services/ioport/ioport.h **** #  include "sam/ioport_pio.h"
 136:../../../platform/common/services/ioport/ioport.h **** # endif
 137:../../../platform/common/services/ioport/ioport.h **** #endif
 138:../../../platform/common/services/ioport/ioport.h **** 
 139:../../../platform/common/services/ioport/ioport.h **** /**
 140:../../../platform/common/services/ioport/ioport.h ****  * \brief Initializes the IOPORT service, ready for use.
 141:../../../platform/common/services/ioport/ioport.h ****  *
 142:../../../platform/common/services/ioport/ioport.h ****  * This function must be called before using any other functions in the IOPORT
 143:../../../platform/common/services/ioport/ioport.h ****  * service.
 144:../../../platform/common/services/ioport/ioport.h ****  */
 145:../../../platform/common/services/ioport/ioport.h **** static inline void ioport_init(void)
 146:../../../platform/common/services/ioport/ioport.h **** {
 147:../../../platform/common/services/ioport/ioport.h **** 	arch_ioport_init();
 148:../../../platform/common/services/ioport/ioport.h **** }
 149:../../../platform/common/services/ioport/ioport.h **** 
 150:../../../platform/common/services/ioport/ioport.h **** /**
 151:../../../platform/common/services/ioport/ioport.h ****  * \brief Enable an IOPORT pin, based on a pin created with \ref
 152:../../../platform/common/services/ioport/ioport.h ****  * IOPORT_CREATE_PIN().
 153:../../../platform/common/services/ioport/ioport.h ****  *
 154:../../../platform/common/services/ioport/ioport.h ****  * \param pin  IOPORT pin to enable
 155:../../../platform/common/services/ioport/ioport.h ****  */
 156:../../../platform/common/services/ioport/ioport.h **** static inline void ioport_enable_pin(ioport_pin_t pin)
 157:../../../platform/common/services/ioport/ioport.h **** {
 158:../../../platform/common/services/ioport/ioport.h **** 	arch_ioport_enable_pin(pin);
 159:../../../platform/common/services/ioport/ioport.h **** }
 160:../../../platform/common/services/ioport/ioport.h **** 
 161:../../../platform/common/services/ioport/ioport.h **** /**
 162:../../../platform/common/services/ioport/ioport.h ****  * \brief Enable multiple pins in a single IOPORT port.
 163:../../../platform/common/services/ioport/ioport.h ****  *
 164:../../../platform/common/services/ioport/ioport.h ****  * \param port IOPORT port to enable
 165:../../../platform/common/services/ioport/ioport.h ****  * \param mask Mask of pins within the port to enable
 166:../../../platform/common/services/ioport/ioport.h ****  */
 167:../../../platform/common/services/ioport/ioport.h **** static inline void ioport_enable_port(ioport_port_t port,
 168:../../../platform/common/services/ioport/ioport.h **** 		ioport_port_mask_t mask)
 169:../../../platform/common/services/ioport/ioport.h **** {
 170:../../../platform/common/services/ioport/ioport.h **** 	arch_ioport_enable_port(port, mask);
 171:../../../platform/common/services/ioport/ioport.h **** }
 172:../../../platform/common/services/ioport/ioport.h **** 
 173:../../../platform/common/services/ioport/ioport.h **** /**
 174:../../../platform/common/services/ioport/ioport.h ****  * \brief Disable IOPORT pin, based on a pin created with \ref
 175:../../../platform/common/services/ioport/ioport.h ****  *        IOPORT_CREATE_PIN().
 176:../../../platform/common/services/ioport/ioport.h ****  *
 177:../../../platform/common/services/ioport/ioport.h ****  * \param pin IOPORT pin to disable
 178:../../../platform/common/services/ioport/ioport.h ****  */
 179:../../../platform/common/services/ioport/ioport.h **** static inline void ioport_disable_pin(ioport_pin_t pin)
 180:../../../platform/common/services/ioport/ioport.h **** {
 181:../../../platform/common/services/ioport/ioport.h **** 	arch_ioport_disable_pin(pin);
 182:../../../platform/common/services/ioport/ioport.h **** }
 183:../../../platform/common/services/ioport/ioport.h **** 
 184:../../../platform/common/services/ioport/ioport.h **** /**
 185:../../../platform/common/services/ioport/ioport.h ****  * \brief Disable multiple pins in a single IOPORT port.
 186:../../../platform/common/services/ioport/ioport.h ****  *
 187:../../../platform/common/services/ioport/ioport.h ****  * \param port IOPORT port to disable
 188:../../../platform/common/services/ioport/ioport.h ****  * \param mask Pin mask of pins to disable
 189:../../../platform/common/services/ioport/ioport.h ****  */
 190:../../../platform/common/services/ioport/ioport.h **** static inline void ioport_disable_port(ioport_port_t port,
 191:../../../platform/common/services/ioport/ioport.h **** 		ioport_port_mask_t mask)
 192:../../../platform/common/services/ioport/ioport.h **** {
 193:../../../platform/common/services/ioport/ioport.h **** 	arch_ioport_disable_port(port, mask);
 194:../../../platform/common/services/ioport/ioport.h **** }
 195:../../../platform/common/services/ioport/ioport.h **** 
 196:../../../platform/common/services/ioport/ioport.h **** /**
 197:../../../platform/common/services/ioport/ioport.h ****  * \brief Set multiple pin modes in a single IOPORT port, such as pull-up,
 198:../../../platform/common/services/ioport/ioport.h ****  * pull-down, etc. configuration.
 199:../../../platform/common/services/ioport/ioport.h ****  *
 200:../../../platform/common/services/ioport/ioport.h ****  * \param port IOPORT port to configure
 201:../../../platform/common/services/ioport/ioport.h ****  * \param mask Pin mask of pins to configure
 202:../../../platform/common/services/ioport/ioport.h ****  * \param mode Mode masks to configure for the specified pins (\ref
 203:../../../platform/common/services/ioport/ioport.h ****  * ioport_modes)
 204:../../../platform/common/services/ioport/ioport.h ****  */
 205:../../../platform/common/services/ioport/ioport.h **** static inline void ioport_set_port_mode(ioport_port_t port,
 206:../../../platform/common/services/ioport/ioport.h **** 		ioport_port_mask_t mask, ioport_mode_t mode)
 207:../../../platform/common/services/ioport/ioport.h **** {
 208:../../../platform/common/services/ioport/ioport.h **** 	arch_ioport_set_port_mode(port, mask, mode);
 209:../../../platform/common/services/ioport/ioport.h **** }
 210:../../../platform/common/services/ioport/ioport.h **** 
 211:../../../platform/common/services/ioport/ioport.h **** /**
 212:../../../platform/common/services/ioport/ioport.h ****  * \brief Set pin mode for one single IOPORT pin.
 213:../../../platform/common/services/ioport/ioport.h ****  *
 214:../../../platform/common/services/ioport/ioport.h ****  * \param pin IOPORT pin to configure
 215:../../../platform/common/services/ioport/ioport.h ****  * \param mode Mode masks to configure for the specified pin (\ref ioport_modes)
 216:../../../platform/common/services/ioport/ioport.h ****  */
 217:../../../platform/common/services/ioport/ioport.h **** static inline void ioport_set_pin_mode(ioport_pin_t pin, ioport_mode_t mode)
 218:../../../platform/common/services/ioport/ioport.h **** {
 219:../../../platform/common/services/ioport/ioport.h **** 	arch_ioport_set_pin_mode(pin, mode);
 220:../../../platform/common/services/ioport/ioport.h **** }
 221:../../../platform/common/services/ioport/ioport.h **** 
 222:../../../platform/common/services/ioport/ioport.h **** /**
 223:../../../platform/common/services/ioport/ioport.h ****  * \brief Reset multiple pin modes in a specified IOPORT port to defaults.
 224:../../../platform/common/services/ioport/ioport.h ****  *
 225:../../../platform/common/services/ioport/ioport.h ****  * \param port IOPORT port to configure
 226:../../../platform/common/services/ioport/ioport.h ****  * \param mask Mask of pins whose mode configuration is to be reset
 227:../../../platform/common/services/ioport/ioport.h ****  */
 228:../../../platform/common/services/ioport/ioport.h **** static inline void ioport_reset_port_mode(ioport_port_t port,
 229:../../../platform/common/services/ioport/ioport.h **** 		ioport_port_mask_t mask)
 230:../../../platform/common/services/ioport/ioport.h **** {
 231:../../../platform/common/services/ioport/ioport.h **** 	arch_ioport_set_port_mode(port, mask, 0);
 232:../../../platform/common/services/ioport/ioport.h **** }
 233:../../../platform/common/services/ioport/ioport.h **** 
 234:../../../platform/common/services/ioport/ioport.h **** /**
 235:../../../platform/common/services/ioport/ioport.h ****  * \brief Reset pin mode configuration for a single IOPORT pin
 236:../../../platform/common/services/ioport/ioport.h ****  *
 237:../../../platform/common/services/ioport/ioport.h ****  * \param pin IOPORT pin to configure
 238:../../../platform/common/services/ioport/ioport.h ****  */
 239:../../../platform/common/services/ioport/ioport.h **** static inline void ioport_reset_pin_mode(ioport_pin_t pin)
 240:../../../platform/common/services/ioport/ioport.h **** {
 241:../../../platform/common/services/ioport/ioport.h **** 	arch_ioport_set_pin_mode(pin, 0);
 242:../../../platform/common/services/ioport/ioport.h **** }
 243:../../../platform/common/services/ioport/ioport.h **** 
 244:../../../platform/common/services/ioport/ioport.h **** /**
 245:../../../platform/common/services/ioport/ioport.h ****  * \brief Set I/O direction for a group of pins in a single IOPORT.
 246:../../../platform/common/services/ioport/ioport.h ****  *
 247:../../../platform/common/services/ioport/ioport.h ****  * \param port IOPORT port to configure
 248:../../../platform/common/services/ioport/ioport.h ****  * \param mask Pin mask of pins to configure
 249:../../../platform/common/services/ioport/ioport.h ****  * \param dir Direction to set for the specified pins (\ref ioport_direction)
 250:../../../platform/common/services/ioport/ioport.h ****  */
 251:../../../platform/common/services/ioport/ioport.h **** static inline void ioport_set_port_dir(ioport_port_t port,
 252:../../../platform/common/services/ioport/ioport.h **** 		ioport_port_mask_t mask, enum ioport_direction dir)
 253:../../../platform/common/services/ioport/ioport.h **** {
 254:../../../platform/common/services/ioport/ioport.h **** 	arch_ioport_set_port_dir(port, mask, dir);
 255:../../../platform/common/services/ioport/ioport.h **** }
 256:../../../platform/common/services/ioport/ioport.h **** 
 257:../../../platform/common/services/ioport/ioport.h **** /**
 258:../../../platform/common/services/ioport/ioport.h ****  * \brief Set direction for a single IOPORT pin.
 259:../../../platform/common/services/ioport/ioport.h ****  *
 260:../../../platform/common/services/ioport/ioport.h ****  * \param pin IOPORT pin to configure
 261:../../../platform/common/services/ioport/ioport.h ****  * \param dir Direction to set for the specified pin (\ref ioport_direction)
 262:../../../platform/common/services/ioport/ioport.h ****  */
 263:../../../platform/common/services/ioport/ioport.h **** static inline void ioport_set_pin_dir(ioport_pin_t pin,
 264:../../../platform/common/services/ioport/ioport.h **** 		enum ioport_direction dir)
 265:../../../platform/common/services/ioport/ioport.h **** {
 266:../../../platform/common/services/ioport/ioport.h **** 	arch_ioport_set_pin_dir(pin, dir);
 267:../../../platform/common/services/ioport/ioport.h **** }
 268:../../../platform/common/services/ioport/ioport.h **** 
 269:../../../platform/common/services/ioport/ioport.h **** /**
 270:../../../platform/common/services/ioport/ioport.h ****  * \brief Set an IOPORT pin to a specified logical value.
 271:../../../platform/common/services/ioport/ioport.h ****  *
 272:../../../platform/common/services/ioport/ioport.h ****  * \param pin IOPORT pin to configure
 273:../../../platform/common/services/ioport/ioport.h ****  * \param level Logical value of the pin
 274:../../../platform/common/services/ioport/ioport.h ****  */
 275:../../../platform/common/services/ioport/ioport.h **** static inline void ioport_set_pin_level(ioport_pin_t pin, bool level)
 276:../../../platform/common/services/ioport/ioport.h **** {
 277:../../../platform/common/services/ioport/ioport.h **** 	arch_ioport_set_pin_level(pin, level);
 278:../../../platform/common/services/ioport/ioport.h **** }
 279:../../../platform/common/services/ioport/ioport.h **** 
 280:../../../platform/common/services/ioport/ioport.h **** /**
 281:../../../platform/common/services/ioport/ioport.h ****  * \brief Set a group of IOPORT pins in a single port to a specified logical
 282:../../../platform/common/services/ioport/ioport.h ****  * value.
 283:../../../platform/common/services/ioport/ioport.h ****  *
 284:../../../platform/common/services/ioport/ioport.h ****  * \param port IOPORT port to write to
 285:../../../platform/common/services/ioport/ioport.h ****  * \param mask Pin mask of pins to modify
 286:../../../platform/common/services/ioport/ioport.h ****  * \param level Level of the pins to be modified
 287:../../../platform/common/services/ioport/ioport.h ****  */
 288:../../../platform/common/services/ioport/ioport.h **** static inline void ioport_set_port_level(ioport_port_t port,
 289:../../../platform/common/services/ioport/ioport.h **** 		ioport_port_mask_t mask, ioport_port_mask_t level)
 290:../../../platform/common/services/ioport/ioport.h **** {
 291:../../../platform/common/services/ioport/ioport.h **** 	arch_ioport_set_port_level(port, mask, level);
 292:../../../platform/common/services/ioport/ioport.h **** }
 293:../../../platform/common/services/ioport/ioport.h **** 
 294:../../../platform/common/services/ioport/ioport.h **** /**
 295:../../../platform/common/services/ioport/ioport.h ****  * \brief Get current value of an IOPORT pin, which has been configured as an
 296:../../../platform/common/services/ioport/ioport.h ****  * input.
 297:../../../platform/common/services/ioport/ioport.h ****  *
 298:../../../platform/common/services/ioport/ioport.h ****  * \param pin IOPORT pin to read
 299:../../../platform/common/services/ioport/ioport.h ****  * \return Current logical value of the specified pin
 300:../../../platform/common/services/ioport/ioport.h ****  */
 301:../../../platform/common/services/ioport/ioport.h **** static inline bool ioport_get_pin_level(ioport_pin_t pin)
 302:../../../platform/common/services/ioport/ioport.h **** {
 303:../../../platform/common/services/ioport/ioport.h **** 	return arch_ioport_get_pin_level(pin);
 304:../../../platform/common/services/ioport/ioport.h **** }
 305:../../../platform/common/services/ioport/ioport.h **** 
 306:../../../platform/common/services/ioport/ioport.h **** /**
 307:../../../platform/common/services/ioport/ioport.h ****  * \brief Get current value of several IOPORT pins in a single port, which have
 308:../../../platform/common/services/ioport/ioport.h ****  * been configured as an inputs.
 309:../../../platform/common/services/ioport/ioport.h ****  *
 310:../../../platform/common/services/ioport/ioport.h ****  * \param port IOPORT port to read
 311:../../../platform/common/services/ioport/ioport.h ****  * \param mask Pin mask of pins to read
 312:../../../platform/common/services/ioport/ioport.h ****  * \return Logical levels of the specified pins from the read port, returned as
 313:../../../platform/common/services/ioport/ioport.h ****  * a mask.
 314:../../../platform/common/services/ioport/ioport.h ****  */
 315:../../../platform/common/services/ioport/ioport.h **** static inline ioport_port_mask_t ioport_get_port_level(ioport_pin_t port,
 316:../../../platform/common/services/ioport/ioport.h **** 		ioport_port_mask_t mask)
 317:../../../platform/common/services/ioport/ioport.h **** {
 318:../../../platform/common/services/ioport/ioport.h **** 	return arch_ioport_get_port_level(port, mask);
 319:../../../platform/common/services/ioport/ioport.h **** }
 320:../../../platform/common/services/ioport/ioport.h **** 
 321:../../../platform/common/services/ioport/ioport.h **** /**
 322:../../../platform/common/services/ioport/ioport.h ****  * \brief Toggle the value of an IOPORT pin, which has previously configured as
 323:../../../platform/common/services/ioport/ioport.h ****  * an output.
 324:../../../platform/common/services/ioport/ioport.h ****  *
 325:../../../platform/common/services/ioport/ioport.h ****  * \param pin IOPORT pin to toggle
 326:../../../platform/common/services/ioport/ioport.h ****  */
 327:../../../platform/common/services/ioport/ioport.h **** static inline void ioport_toggle_pin_level(ioport_pin_t pin)
 328:../../../platform/common/services/ioport/ioport.h **** {
 329:../../../platform/common/services/ioport/ioport.h **** 	arch_ioport_toggle_pin_level(pin);
 330:../../../platform/common/services/ioport/ioport.h **** }
 331:../../../platform/common/services/ioport/ioport.h **** 
 332:../../../platform/common/services/ioport/ioport.h **** /**
 333:../../../platform/common/services/ioport/ioport.h ****  * \brief Toggle the values of several IOPORT pins located in a single port.
 334:../../../platform/common/services/ioport/ioport.h ****  *
 335:../../../platform/common/services/ioport/ioport.h ****  * \param port IOPORT port to modify
 336:../../../platform/common/services/ioport/ioport.h ****  * \param mask Pin mask of pins to toggle
 337:../../../platform/common/services/ioport/ioport.h ****  */
 338:../../../platform/common/services/ioport/ioport.h **** static inline void ioport_toggle_port_level(ioport_port_t port,
 339:../../../platform/common/services/ioport/ioport.h **** 		ioport_port_mask_t mask)
 340:../../../platform/common/services/ioport/ioport.h **** {
 341:../../../platform/common/services/ioport/ioport.h **** 	arch_ioport_toggle_port_level(port, mask);
 342:../../../platform/common/services/ioport/ioport.h **** }
 343:../../../platform/common/services/ioport/ioport.h **** 
 344:../../../platform/common/services/ioport/ioport.h **** /**
 345:../../../platform/common/services/ioport/ioport.h ****  * \brief Set the pin sense mode of a single IOPORT pin.
 346:../../../platform/common/services/ioport/ioport.h ****  *
 347:../../../platform/common/services/ioport/ioport.h ****  * \param pin IOPORT pin to configure
 348:../../../platform/common/services/ioport/ioport.h ****  * \param pin_sense Edge to sense for the pin (\ref ioport_sense)
 349:../../../platform/common/services/ioport/ioport.h ****  */
 350:../../../platform/common/services/ioport/ioport.h **** static inline void ioport_set_pin_sense_mode(ioport_pin_t pin,
 351:../../../platform/common/services/ioport/ioport.h **** 		enum ioport_sense pin_sense)
 352:../../../platform/common/services/ioport/ioport.h **** {
 353:../../../platform/common/services/ioport/ioport.h **** 	arch_ioport_set_pin_sense_mode(pin, pin_sense);
 354:../../../platform/common/services/ioport/ioport.h **** }
 355:../../../platform/common/services/ioport/ioport.h **** 
 356:../../../platform/common/services/ioport/ioport.h **** /**
 357:../../../platform/common/services/ioport/ioport.h ****  * \brief Set the pin sense mode of a multiple IOPORT pins on a single port.
 358:../../../platform/common/services/ioport/ioport.h ****  *
 359:../../../platform/common/services/ioport/ioport.h ****  * \param port IOPORT port to configure
 360:../../../platform/common/services/ioport/ioport.h ****  * \param mask Bitmask if pins whose edge sense is to be configured
 361:../../../platform/common/services/ioport/ioport.h ****  * \param pin_sense Edge to sense for the pins (\ref ioport_sense)
 362:../../../platform/common/services/ioport/ioport.h ****  */
 363:../../../platform/common/services/ioport/ioport.h **** static inline void ioport_set_port_sense_mode(ioport_port_t port,
 364:../../../platform/common/services/ioport/ioport.h **** 		ioport_port_mask_t mask,
 365:../../../platform/common/services/ioport/ioport.h **** 		enum ioport_sense pin_sense)
 366:../../../platform/common/services/ioport/ioport.h **** {
 367:../../../platform/common/services/ioport/ioport.h **** 	arch_ioport_set_port_sense_mode(port, mask, pin_sense);
 368:../../../platform/common/services/ioport/ioport.h **** }
 369:../../../platform/common/services/ioport/ioport.h **** 
 370:../../../platform/common/services/ioport/ioport.h **** /**
 371:../../../platform/common/services/ioport/ioport.h ****  * \brief Convert a pin ID into a its port ID.
 372:../../../platform/common/services/ioport/ioport.h ****  *
 373:../../../platform/common/services/ioport/ioport.h ****  * \param pin IOPORT pin ID to convert
 374:../../../platform/common/services/ioport/ioport.h ****  * \retval Port ID for the given pin ID
 375:../../../platform/common/services/ioport/ioport.h ****  */
 376:../../../platform/common/services/ioport/ioport.h **** static inline ioport_port_t ioport_pin_to_port_id(ioport_pin_t pin)
 377:../../../platform/common/services/ioport/ioport.h **** {
 378:../../../platform/common/services/ioport/ioport.h **** 	return arch_ioport_pin_to_port_id(pin);
 379:../../../platform/common/services/ioport/ioport.h **** }
 380:../../../platform/common/services/ioport/ioport.h **** 
 381:../../../platform/common/services/ioport/ioport.h **** /**
 382:../../../platform/common/services/ioport/ioport.h ****  * \brief Convert a pin ID into a bitmask mask for the given pin on its port.
 383:../../../platform/common/services/ioport/ioport.h ****  *
 384:../../../platform/common/services/ioport/ioport.h ****  * \param pin IOPORT pin ID to convert
 385:../../../platform/common/services/ioport/ioport.h ****  * \retval Bitmask with a bit set that corresponds to the given pin ID in its port
 386:../../../platform/common/services/ioport/ioport.h ****  */
 387:../../../platform/common/services/ioport/ioport.h **** static inline ioport_port_mask_t ioport_pin_to_mask(ioport_pin_t pin)
 388:../../../platform/common/services/ioport/ioport.h **** {
 438               		.loc 2 388 0
 439               		.cfi_startproc
 440 01b8 CF93      		push r28
 441               	.LCFI24:
 442               		.cfi_def_cfa_offset 3
 443               		.cfi_offset 28, -2
 444 01ba DF93      		push r29
 445               	.LCFI25:
 446               		.cfi_def_cfa_offset 4
 447               		.cfi_offset 29, -3
 448 01bc 00D0      		rcall .
 449               	.LCFI26:
 450               		.cfi_def_cfa_offset 6
 451 01be CDB7      		in r28,__SP_L__
 452 01c0 DEB7      		in r29,__SP_H__
 453               	.LCFI27:
 454               		.cfi_def_cfa_register 28
 455               	/* prologue: function */
 456               	/* frame size = 2 */
 457               	/* stack size = 4 */
 458               	.L__stack_usage = 4
 459 01c2 8A83      		std Y+2,r24
 460 01c4 8A81      		ldd r24,Y+2
 461 01c6 8983      		std Y+1,r24
 462               	.LBB26:
 463               	.LBB27:
 464               		.file 3 "../../../platform/common/services/ioport/mega_rf/ioport.h"
   1:../../../platform/common/services/ioport/mega_rf/ioport.h **** /**
   2:../../../platform/common/services/ioport/mega_rf/ioport.h ****  * \file
   3:../../../platform/common/services/ioport/mega_rf/ioport.h ****  *
   4:../../../platform/common/services/ioport/mega_rf/ioport.h ****  * \brief MEGA and MEGA_RF architecture specific IOPORT service implementation
   5:../../../platform/common/services/ioport/mega_rf/ioport.h ****  * header file.
   6:../../../platform/common/services/ioport/mega_rf/ioport.h ****  *
   7:../../../platform/common/services/ioport/mega_rf/ioport.h ****  * Copyright (c) 2012 - 2013 Atmel Corporation. All rights reserved.
   8:../../../platform/common/services/ioport/mega_rf/ioport.h ****  *
   9:../../../platform/common/services/ioport/mega_rf/ioport.h ****  * \asf_license_start
  10:../../../platform/common/services/ioport/mega_rf/ioport.h ****  *
  11:../../../platform/common/services/ioport/mega_rf/ioport.h ****  * \page License
  12:../../../platform/common/services/ioport/mega_rf/ioport.h ****  *
  13:../../../platform/common/services/ioport/mega_rf/ioport.h ****  * Redistribution and use in source and binary forms, with or without
  14:../../../platform/common/services/ioport/mega_rf/ioport.h ****  * modification, are permitted provided that the following conditions are met:
  15:../../../platform/common/services/ioport/mega_rf/ioport.h ****  *
  16:../../../platform/common/services/ioport/mega_rf/ioport.h ****  * 1. Redistributions of source code must retain the above copyright notice,
  17:../../../platform/common/services/ioport/mega_rf/ioport.h ****  *    this list of conditions and the following disclaimer.
  18:../../../platform/common/services/ioport/mega_rf/ioport.h ****  *
  19:../../../platform/common/services/ioport/mega_rf/ioport.h ****  * 2. Redistributions in binary form must reproduce the above copyright notice,
  20:../../../platform/common/services/ioport/mega_rf/ioport.h ****  *    this list of conditions and the following disclaimer in the documentation
  21:../../../platform/common/services/ioport/mega_rf/ioport.h ****  *    and/or other materials provided with the distribution.
  22:../../../platform/common/services/ioport/mega_rf/ioport.h ****  *
  23:../../../platform/common/services/ioport/mega_rf/ioport.h ****  * 3. The name of Atmel may not be used to endorse or promote products derived
  24:../../../platform/common/services/ioport/mega_rf/ioport.h ****  *    from this software without specific prior written permission.
  25:../../../platform/common/services/ioport/mega_rf/ioport.h ****  *
  26:../../../platform/common/services/ioport/mega_rf/ioport.h ****  * 4. This software may only be redistributed and used in connection with an
  27:../../../platform/common/services/ioport/mega_rf/ioport.h ****  *    Atmel microcontroller product.
  28:../../../platform/common/services/ioport/mega_rf/ioport.h ****  *
  29:../../../platform/common/services/ioport/mega_rf/ioport.h ****  * THIS SOFTWARE IS PROVIDED BY ATMEL "AS IS" AND ANY EXPRESS OR IMPLIED
  30:../../../platform/common/services/ioport/mega_rf/ioport.h ****  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
  31:../../../platform/common/services/ioport/mega_rf/ioport.h ****  * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE
  32:../../../platform/common/services/ioport/mega_rf/ioport.h ****  * EXPRESSLY AND SPECIFICALLY DISCLAIMED. IN NO EVENT SHALL ATMEL BE LIABLE FOR
  33:../../../platform/common/services/ioport/mega_rf/ioport.h ****  * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  34:../../../platform/common/services/ioport/mega_rf/ioport.h ****  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
  35:../../../platform/common/services/ioport/mega_rf/ioport.h ****  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
  36:../../../platform/common/services/ioport/mega_rf/ioport.h ****  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
  37:../../../platform/common/services/ioport/mega_rf/ioport.h ****  * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
  38:../../../platform/common/services/ioport/mega_rf/ioport.h ****  * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  39:../../../platform/common/services/ioport/mega_rf/ioport.h ****  * POSSIBILITY OF SUCH DAMAGE.
  40:../../../platform/common/services/ioport/mega_rf/ioport.h ****  *
  41:../../../platform/common/services/ioport/mega_rf/ioport.h ****  * \asf_license_stop
  42:../../../platform/common/services/ioport/mega_rf/ioport.h ****  *
  43:../../../platform/common/services/ioport/mega_rf/ioport.h ****  */
  44:../../../platform/common/services/ioport/mega_rf/ioport.h **** #ifndef IOPORT_MEGA_RF_H
  45:../../../platform/common/services/ioport/mega_rf/ioport.h **** #define IOPORT_MEGA_RF_H
  46:../../../platform/common/services/ioport/mega_rf/ioport.h **** 
  47:../../../platform/common/services/ioport/mega_rf/ioport.h **** #define IOPORT_CREATE_PIN(port, pin) ((IOPORT_ ## port) * 8 + (pin))
  48:../../../platform/common/services/ioport/mega_rf/ioport.h **** #define IOPORT_BASE_ADDRESS 0x20
  49:../../../platform/common/services/ioport/mega_rf/ioport.h **** #define IOPORT_PORT_OFFSET  0x03
  50:../../../platform/common/services/ioport/mega_rf/ioport.h **** 
  51:../../../platform/common/services/ioport/mega_rf/ioport.h **** /** \name IOPORT port numbers */
  52:../../../platform/common/services/ioport/mega_rf/ioport.h **** /** @{ */
  53:../../../platform/common/services/ioport/mega_rf/ioport.h **** 
  54:../../../platform/common/services/ioport/mega_rf/ioport.h **** #if MEGA_XX0_1 || MEGA_RF || MEGA_UNSPECIFIED || MEGA_XX4 || MEGA_XX4_A
  55:../../../platform/common/services/ioport/mega_rf/ioport.h **** #define IOPORT_PORTA    0 /* not connected to pins for megaRF*/
  56:../../../platform/common/services/ioport/mega_rf/ioport.h **** #endif
  57:../../../platform/common/services/ioport/mega_rf/ioport.h **** 
  58:../../../platform/common/services/ioport/mega_rf/ioport.h **** #if MEGA_XX0_1 || MEGA_RF || MEGA_UNSPECIFIED || MEGA_XX8 || MEGA_XX8_A || \
  59:../../../platform/common/services/ioport/mega_rf/ioport.h **** 	MEGA_XX4 || MEGA_XX4_A
  60:../../../platform/common/services/ioport/mega_rf/ioport.h **** #define IOPORT_PORTB    1
  61:../../../platform/common/services/ioport/mega_rf/ioport.h **** #define IOPORT_PORTC    2 /* not connected to pins for megaRF*/
  62:../../../platform/common/services/ioport/mega_rf/ioport.h **** #define IOPORT_PORTD    3
  63:../../../platform/common/services/ioport/mega_rf/ioport.h **** #endif
  64:../../../platform/common/services/ioport/mega_rf/ioport.h **** 
  65:../../../platform/common/services/ioport/mega_rf/ioport.h **** #if MEGA_XX0_1 || MEGA_RF
  66:../../../platform/common/services/ioport/mega_rf/ioport.h **** #define IOPORT_PORTE    4
  67:../../../platform/common/services/ioport/mega_rf/ioport.h **** #define IOPORT_PORTF    5
  68:../../../platform/common/services/ioport/mega_rf/ioport.h **** #define IOPORT_PORTG    6
  69:../../../platform/common/services/ioport/mega_rf/ioport.h **** #endif
  70:../../../platform/common/services/ioport/mega_rf/ioport.h **** 
  71:../../../platform/common/services/ioport/mega_rf/ioport.h **** #if MEGA_XX0
  72:../../../platform/common/services/ioport/mega_rf/ioport.h **** #define IOPORT_PORTH    7
  73:../../../platform/common/services/ioport/mega_rf/ioport.h **** #define IOPORT_PORTI    8
  74:../../../platform/common/services/ioport/mega_rf/ioport.h **** #define IOPORT_PORTJ    9
  75:../../../platform/common/services/ioport/mega_rf/ioport.h **** #define IOPORT_PORTK    10
  76:../../../platform/common/services/ioport/mega_rf/ioport.h **** #define IOPORT_PORTL    11
  77:../../../platform/common/services/ioport/mega_rf/ioport.h **** #endif
  78:../../../platform/common/services/ioport/mega_rf/ioport.h **** /** @} */
  79:../../../platform/common/services/ioport/mega_rf/ioport.h **** 
  80:../../../platform/common/services/ioport/mega_rf/ioport.h **** /**
  81:../../../platform/common/services/ioport/mega_rf/ioport.h ****  * \weakgroup ioport_service_group
  82:../../../platform/common/services/ioport/mega_rf/ioport.h ****  * \section ioport_modes IOPORT Modes
  83:../../../platform/common/services/ioport/mega_rf/ioport.h ****  *
  84:../../../platform/common/services/ioport/mega_rf/ioport.h ****  * For details on these please see the megaRF Manual.
  85:../../../platform/common/services/ioport/mega_rf/ioport.h ****  *
  86:../../../platform/common/services/ioport/mega_rf/ioport.h ****  * @{
  87:../../../platform/common/services/ioport/mega_rf/ioport.h ****  */
  88:../../../platform/common/services/ioport/mega_rf/ioport.h **** 
  89:../../../platform/common/services/ioport/mega_rf/ioport.h **** /** \name IOPORT Mode bit definitions */
  90:../../../platform/common/services/ioport/mega_rf/ioport.h **** /** @{ */
  91:../../../platform/common/services/ioport/mega_rf/ioport.h **** #define IOPORT_MODE_PULLDOWN        (0x01) /*!< Pull-down */
  92:../../../platform/common/services/ioport/mega_rf/ioport.h **** #define IOPORT_MODE_PULLUP          (0x00) /*!< Pull-up */
  93:../../../platform/common/services/ioport/mega_rf/ioport.h **** /** @} */
  94:../../../platform/common/services/ioport/mega_rf/ioport.h **** 
  95:../../../platform/common/services/ioport/mega_rf/ioport.h **** typedef uint8_t ioport_mode_t;
  96:../../../platform/common/services/ioport/mega_rf/ioport.h **** typedef uint8_t ioport_pin_t;
  97:../../../platform/common/services/ioport/mega_rf/ioport.h **** typedef uint8_t ioport_port_t;
  98:../../../platform/common/services/ioport/mega_rf/ioport.h **** typedef uint8_t ioport_port_mask_t;
  99:../../../platform/common/services/ioport/mega_rf/ioport.h **** 
 100:../../../platform/common/services/ioport/mega_rf/ioport.h **** /* I/O Ports */
 101:../../../platform/common/services/ioport/mega_rf/ioport.h **** typedef struct PORT_struct {
 102:../../../platform/common/services/ioport/mega_rf/ioport.h **** 	volatile uint8_t PINCRL;         /* I/O Port PIN DATA READ ONLY */
 103:../../../platform/common/services/ioport/mega_rf/ioport.h **** 	volatile uint8_t DIR;            /* I/O Port Data Direction Set */
 104:../../../platform/common/services/ioport/mega_rf/ioport.h **** 	volatile uint8_t PORTDATA;       /* I/O Port DATA register */
 105:../../../platform/common/services/ioport/mega_rf/ioport.h **** } PORT_t;
 106:../../../platform/common/services/ioport/mega_rf/ioport.h **** 
 107:../../../platform/common/services/ioport/mega_rf/ioport.h **** /**
 108:../../../platform/common/services/ioport/mega_rf/ioport.h ****  * \brief A pin mask
 109:../../../platform/common/services/ioport/mega_rf/ioport.h ****  *
 110:../../../platform/common/services/ioport/mega_rf/ioport.h ****  * This type is used to describe the port pin mask on the part.
 111:../../../platform/common/services/ioport/mega_rf/ioport.h ****  */
 112:../../../platform/common/services/ioport/mega_rf/ioport.h **** typedef uint8_t pin_mask_t;
 113:../../../platform/common/services/ioport/mega_rf/ioport.h **** 
 114:../../../platform/common/services/ioport/mega_rf/ioport.h **** /**
 115:../../../platform/common/services/ioport/mega_rf/ioport.h ****  * \brief A PORT pin
 116:../../../platform/common/services/ioport/mega_rf/ioport.h ****  *
 117:../../../platform/common/services/ioport/mega_rf/ioport.h ****  * This type is used to describe the PORT pins on the part.
 118:../../../platform/common/services/ioport/mega_rf/ioport.h ****  */
 119:../../../platform/common/services/ioport/mega_rf/ioport.h **** typedef uint8_t port_pin_t;
 120:../../../platform/common/services/ioport/mega_rf/ioport.h **** 
 121:../../../platform/common/services/ioport/mega_rf/ioport.h **** /**
 122:../../../platform/common/services/ioport/mega_rf/ioport.h ****  * \brief Pin configuration flags
 123:../../../platform/common/services/ioport/mega_rf/ioport.h ****  *
 124:../../../platform/common/services/ioport/mega_rf/ioport.h ****  * This is a bitmask containing configuration flags for the pins that shall be
 125:../../../platform/common/services/ioport/mega_rf/ioport.h ****  * configured.
 126:../../../platform/common/services/ioport/mega_rf/ioport.h ****  */
 127:../../../platform/common/services/ioport/mega_rf/ioport.h **** typedef uint16_t port_pin_flags_t;
 128:../../../platform/common/services/ioport/mega_rf/ioport.h **** 
 129:../../../platform/common/services/ioport/mega_rf/ioport.h **** /**
 130:../../../platform/common/services/ioport/mega_rf/ioport.h ****  * \brief A port id
 131:../../../platform/common/services/ioport/mega_rf/ioport.h ****  *
 132:../../../platform/common/services/ioport/mega_rf/ioport.h ****  * This type is used to describe the port id on the part (0 is PORTA).
 133:../../../platform/common/services/ioport/mega_rf/ioport.h ****  */
 134:../../../platform/common/services/ioport/mega_rf/ioport.h **** typedef uint8_t port_id_t;
 135:../../../platform/common/services/ioport/mega_rf/ioport.h **** 
 136:../../../platform/common/services/ioport/mega_rf/ioport.h **** /** \name Initial Output State Flags */
 137:../../../platform/common/services/ioport/mega_rf/ioport.h **** 
 138:../../../platform/common/services/ioport/mega_rf/ioport.h **** /*With Port as input port the initial status is either tri state
 139:../../../platform/common/services/ioport/mega_rf/ioport.h ****  * or pulled high, based on PORTX value, and check the PUD value to make
 140:../../../platform/common/services/ioport/mega_rf/ioport.h ****  * sure pull up resistance is not disabled*/
 141:../../../platform/common/services/ioport/mega_rf/ioport.h **** /** @{ */
 142:../../../platform/common/services/ioport/mega_rf/ioport.h **** #define IOPORT_INIT_LOW           0 << 1  /*!< Initial Output State Low */
 143:../../../platform/common/services/ioport/mega_rf/ioport.h **** #define IOPORT_INIT_HIGH          1 << 1 /*!< Initial Output State High */
 144:../../../platform/common/services/ioport/mega_rf/ioport.h **** 
 145:../../../platform/common/services/ioport/mega_rf/ioport.h **** /** @} */
 146:../../../platform/common/services/ioport/mega_rf/ioport.h **** 
 147:../../../platform/common/services/ioport/mega_rf/ioport.h **** /** \name Output and Pull Configuration Flags */
 148:../../../platform/common/services/ioport/mega_rf/ioport.h **** /** @{ */
 149:../../../platform/common/services/ioport/mega_rf/ioport.h **** #define IOPORT_PULL_DOWN          (0 << 2) /*!< Pull-Down (when input) */
 150:../../../platform/common/services/ioport/mega_rf/ioport.h **** #define IOPORT_PULL_UP            (1 << 2) /*!< Pull-Up (when input) */
 151:../../../platform/common/services/ioport/mega_rf/ioport.h **** /** @} */
 152:../../../platform/common/services/ioport/mega_rf/ioport.h **** 
 153:../../../platform/common/services/ioport/mega_rf/ioport.h **** /**
 154:../../../platform/common/services/ioport/mega_rf/ioport.h ****  * \brief: To get the port number from pin nuber
 155:../../../platform/common/services/ioport/mega_rf/ioport.h ****  * \param: pin. the pin number defined by IOPORT_CREATE_PIN
 156:../../../platform/common/services/ioport/mega_rf/ioport.h ****  */
 157:../../../platform/common/services/ioport/mega_rf/ioport.h **** __always_inline static inline ioport_port_t arch_ioport_pin_to_port_id(
 158:../../../platform/common/services/ioport/mega_rf/ioport.h **** 		uint8_t pin)
 159:../../../platform/common/services/ioport/mega_rf/ioport.h **** {
 160:../../../platform/common/services/ioport/mega_rf/ioport.h **** 	return pin >> 3;
 161:../../../platform/common/services/ioport/mega_rf/ioport.h **** }
 162:../../../platform/common/services/ioport/mega_rf/ioport.h **** 
 163:../../../platform/common/services/ioport/mega_rf/ioport.h **** /**
 164:../../../platform/common/services/ioport/mega_rf/ioport.h ****  * \brief: To get the base address of port number
 165:../../../platform/common/services/ioport/mega_rf/ioport.h ****  * \param: port number e.g. IOPORT_PORTB
 166:../../../platform/common/services/ioport/mega_rf/ioport.h ****  */
 167:../../../platform/common/services/ioport/mega_rf/ioport.h **** __always_inline static PORT_t *arch_ioport_port_to_base(uint8_t port)
 168:../../../platform/common/services/ioport/mega_rf/ioport.h **** {
 169:../../../platform/common/services/ioport/mega_rf/ioport.h **** 	return (PORT_t *)((uintptr_t)(IOPORT_BASE_ADDRESS +
 170:../../../platform/common/services/ioport/mega_rf/ioport.h **** 	       (port * IOPORT_PORT_OFFSET)));
 171:../../../platform/common/services/ioport/mega_rf/ioport.h **** }
 172:../../../platform/common/services/ioport/mega_rf/ioport.h **** 
 173:../../../platform/common/services/ioport/mega_rf/ioport.h **** /**
 174:../../../platform/common/services/ioport/mega_rf/ioport.h ****  * \brief: To get the base address of port number from defined pin
 175:../../../platform/common/services/ioport/mega_rf/ioport.h ****  * \param: pin. the pin number defined by IOPORT_CREATE_PIN
 176:../../../platform/common/services/ioport/mega_rf/ioport.h ****  */
 177:../../../platform/common/services/ioport/mega_rf/ioport.h **** __always_inline static PORT_t *arch_ioport_pin_to_base(ioport_pin_t pin)
 178:../../../platform/common/services/ioport/mega_rf/ioport.h **** {
 179:../../../platform/common/services/ioport/mega_rf/ioport.h **** 	return arch_ioport_port_to_base(pin >> 3);
 180:../../../platform/common/services/ioport/mega_rf/ioport.h **** }
 181:../../../platform/common/services/ioport/mega_rf/ioport.h **** 
 182:../../../platform/common/services/ioport/mega_rf/ioport.h **** /**
 183:../../../platform/common/services/ioport/mega_rf/ioport.h ****  * \brief: To get the 8-bit pin mask for pin
 184:../../../platform/common/services/ioport/mega_rf/ioport.h ****  * \param: pin. the pin number defined by IOPORT_CREATE_PIN
 185:../../../platform/common/services/ioport/mega_rf/ioport.h ****  */
 186:../../../platform/common/services/ioport/mega_rf/ioport.h **** __always_inline static ioport_port_mask_t arch_ioport_pin_to_mask
 187:../../../platform/common/services/ioport/mega_rf/ioport.h **** 	(ioport_pin_t pin)
 188:../../../platform/common/services/ioport/mega_rf/ioport.h **** {
 189:../../../platform/common/services/ioport/mega_rf/ioport.h **** 	return 1U << (pin & 0x07);
 465               		.loc 3 189 0
 466 01c8 8981      		ldd r24,Y+1
 467 01ca 882F      		mov r24,r24
 468 01cc 90E0      		ldi r25,0
 469 01ce 9C01      		movw r18,r24
 470 01d0 2770      		andi r18,7
 471 01d2 3327      		clr r19
 472 01d4 81E0      		ldi r24,lo8(1)
 473 01d6 90E0      		ldi r25,0
 474 01d8 00C0      		rjmp 2f
 475               		1:
 476 01da 880F      		lsl r24
 477 01dc 991F      		rol r25
 478               		2:
 479 01de 2A95      		dec r18
 480 01e0 02F4      		brpl 1b
 481               	.LBE27:
 482               	.LBE26:
 389:../../../platform/common/services/ioport/ioport.h **** 	return arch_ioport_pin_to_mask(pin);
 483               		.loc 2 389 0
 484 01e2 0000      		nop
 485               	/* epilogue start */
 390:../../../platform/common/services/ioport/ioport.h **** }
 486               		.loc 2 390 0
 487 01e4 0F90      		pop __tmp_reg__
 488 01e6 0F90      		pop __tmp_reg__
 489 01e8 DF91      		pop r29
 490 01ea CF91      		pop r28
 491 01ec 0895      		ret
 492               		.cfi_endproc
 493               	.LFE85:
 496               	sysclk_get_main_hz:
 497               	.LFB86:
 498               		.file 4 "../../../platform/common/services/clock/mega/sysclk.h"
   1:../../../platform/common/services/clock/mega/sysclk.h **** /**
   2:../../../platform/common/services/clock/mega/sysclk.h ****  * \file
   3:../../../platform/common/services/clock/mega/sysclk.h ****  *
   4:../../../platform/common/services/clock/mega/sysclk.h ****  * \brief Chip-specific system clock management functions
   5:../../../platform/common/services/clock/mega/sysclk.h ****  *
   6:../../../platform/common/services/clock/mega/sysclk.h ****  * Copyright (c) 2012 Atmel Corporation. All rights reserved.
   7:../../../platform/common/services/clock/mega/sysclk.h ****  *
   8:../../../platform/common/services/clock/mega/sysclk.h ****  * \asf_license_start
   9:../../../platform/common/services/clock/mega/sysclk.h ****  *
  10:../../../platform/common/services/clock/mega/sysclk.h ****  * \page License
  11:../../../platform/common/services/clock/mega/sysclk.h ****  *
  12:../../../platform/common/services/clock/mega/sysclk.h ****  * Redistribution and use in source and binary forms, with or without
  13:../../../platform/common/services/clock/mega/sysclk.h ****  * modification, are permitted provided that the following conditions are met:
  14:../../../platform/common/services/clock/mega/sysclk.h ****  *
  15:../../../platform/common/services/clock/mega/sysclk.h ****  * 1. Redistributions of source code must retain the above copyright notice,
  16:../../../platform/common/services/clock/mega/sysclk.h ****  *    this list of conditions and the following disclaimer.
  17:../../../platform/common/services/clock/mega/sysclk.h ****  *
  18:../../../platform/common/services/clock/mega/sysclk.h ****  * 2. Redistributions in binary form must reproduce the above copyright notice,
  19:../../../platform/common/services/clock/mega/sysclk.h ****  *    this list of conditions and the following disclaimer in the documentation
  20:../../../platform/common/services/clock/mega/sysclk.h ****  *    and/or other materials provided with the distribution.
  21:../../../platform/common/services/clock/mega/sysclk.h ****  *
  22:../../../platform/common/services/clock/mega/sysclk.h ****  * 3. The name of Atmel may not be used to endorse or promote products derived
  23:../../../platform/common/services/clock/mega/sysclk.h ****  *    from this software without specific prior written permission.
  24:../../../platform/common/services/clock/mega/sysclk.h ****  *
  25:../../../platform/common/services/clock/mega/sysclk.h ****  * 4. This software may only be redistributed and used in connection with an
  26:../../../platform/common/services/clock/mega/sysclk.h ****  *    Atmel microcontroller product.
  27:../../../platform/common/services/clock/mega/sysclk.h ****  *
  28:../../../platform/common/services/clock/mega/sysclk.h ****  * THIS SOFTWARE IS PROVIDED BY ATMEL "AS IS" AND ANY EXPRESS OR IMPLIED
  29:../../../platform/common/services/clock/mega/sysclk.h ****  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
  30:../../../platform/common/services/clock/mega/sysclk.h ****  * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE
  31:../../../platform/common/services/clock/mega/sysclk.h ****  * EXPRESSLY AND SPECIFICALLY DISCLAIMED. IN NO EVENT SHALL ATMEL BE LIABLE FOR
  32:../../../platform/common/services/clock/mega/sysclk.h ****  * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  33:../../../platform/common/services/clock/mega/sysclk.h ****  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
  34:../../../platform/common/services/clock/mega/sysclk.h ****  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
  35:../../../platform/common/services/clock/mega/sysclk.h ****  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
  36:../../../platform/common/services/clock/mega/sysclk.h ****  * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
  37:../../../platform/common/services/clock/mega/sysclk.h ****  * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  38:../../../platform/common/services/clock/mega/sysclk.h ****  * POSSIBILITY OF SUCH DAMAGE.
  39:../../../platform/common/services/clock/mega/sysclk.h ****  *
  40:../../../platform/common/services/clock/mega/sysclk.h ****  * \asf_license_stop
  41:../../../platform/common/services/clock/mega/sysclk.h ****  *
  42:../../../platform/common/services/clock/mega/sysclk.h ****  */
  43:../../../platform/common/services/clock/mega/sysclk.h **** #ifndef MEGA_SYSCLK_H_INCLUDED
  44:../../../platform/common/services/clock/mega/sysclk.h **** #define MEGA_SYSCLK_H_INCLUDED
  45:../../../platform/common/services/clock/mega/sysclk.h **** 
  46:../../../platform/common/services/clock/mega/sysclk.h **** #include <board.h>
  47:../../../platform/common/services/clock/mega/sysclk.h **** #include <compiler.h>
  48:../../../platform/common/services/clock/mega/sysclk.h **** #include <parts.h>
  49:../../../platform/common/services/clock/mega/sysclk.h **** 
  50:../../../platform/common/services/clock/mega/sysclk.h **** /* Include clock configuration for the project. */
  51:../../../platform/common/services/clock/mega/sysclk.h **** #include <conf_clock.h>
  52:../../../platform/common/services/clock/mega/sysclk.h **** 
  53:../../../platform/common/services/clock/mega/sysclk.h **** #ifdef __cplusplus
  54:../../../platform/common/services/clock/mega/sysclk.h **** extern "C" {
  55:../../../platform/common/services/clock/mega/sysclk.h **** #endif
  56:../../../platform/common/services/clock/mega/sysclk.h **** #define ASM __asm__
  57:../../../platform/common/services/clock/mega/sysclk.h **** 
  58:../../../platform/common/services/clock/mega/sysclk.h **** /* CONFIG_SYSCLK_PSDIV  to use default if not defined*/
  59:../../../platform/common/services/clock/mega/sysclk.h **** #ifndef CONFIG_SYSCLK_PSDIV
  60:../../../platform/common/services/clock/mega/sysclk.h **** # define CONFIG_SYSCLK_PSDIV    SYSCLK_PSDIV_8
  61:../../../platform/common/services/clock/mega/sysclk.h **** #endif
  62:../../../platform/common/services/clock/mega/sysclk.h **** 
  63:../../../platform/common/services/clock/mega/sysclk.h **** /* ! \name Prescaler Setting (relative to CLKsys) */
  64:../../../platform/common/services/clock/mega/sysclk.h **** /* @{ */
  65:../../../platform/common/services/clock/mega/sysclk.h **** #define SYSCLK_PSDIV_1      0   /* !< Do not prescale */
  66:../../../platform/common/services/clock/mega/sysclk.h **** #define SYSCLK_PSDIV_2      1   /* !< Prescale CLKper4 by 2 */
  67:../../../platform/common/services/clock/mega/sysclk.h **** #define SYSCLK_PSDIV_4      2   /* !< Prescale CLKper4 by 4 */
  68:../../../platform/common/services/clock/mega/sysclk.h **** #define SYSCLK_PSDIV_8      3   /* !< Prescale CLKper4 by 8 */
  69:../../../platform/common/services/clock/mega/sysclk.h **** #define SYSCLK_PSDIV_16     4   /* !< Prescale CLKper4 by 16 */
  70:../../../platform/common/services/clock/mega/sysclk.h **** #define SYSCLK_PSDIV_32     5   /* !< Prescale CLKper4 by 32 */
  71:../../../platform/common/services/clock/mega/sysclk.h **** #define SYSCLK_PSDIV_64     6   /* !< Prescale CLKper4 by 64 */
  72:../../../platform/common/services/clock/mega/sysclk.h **** #define SYSCLK_PSDIV_128    7   /* !< Prescale CLKper4 by 128 */
  73:../../../platform/common/services/clock/mega/sysclk.h **** #define SYSCLK_PSDIV_256    8   /* !< Prescale CLKper4 by 256 */
  74:../../../platform/common/services/clock/mega/sysclk.h **** 
  75:../../../platform/common/services/clock/mega/sysclk.h **** /* @} */
  76:../../../platform/common/services/clock/mega/sysclk.h **** 
  77:../../../platform/common/services/clock/mega/sysclk.h **** #if MEGA_RF || MEGA_XX0_1 || MEGA_XX4 || MEGA_XX4_A
  78:../../../platform/common/services/clock/mega/sysclk.h **** 
  79:../../../platform/common/services/clock/mega/sysclk.h **** #define NUMBER_OF_POWER_REG       2
  80:../../../platform/common/services/clock/mega/sysclk.h **** /*Starting Address for power reduction*/
  81:../../../platform/common/services/clock/mega/sysclk.h **** #define POWER_REG_ADD             PRR0
  82:../../../platform/common/services/clock/mega/sysclk.h **** 
  83:../../../platform/common/services/clock/mega/sysclk.h **** /* ! \name Power Reduction  Clock Port Numbers */
  84:../../../platform/common/services/clock/mega/sysclk.h **** enum power_red_id {
  85:../../../platform/common/services/clock/mega/sysclk.h **** 	POWER_RED_REG0,     /* !< Devices on PRR0 */
  86:../../../platform/common/services/clock/mega/sysclk.h **** #if !MEGA_XX4 || !MEGA_XX4_A || MEGA_XX0_1
  87:../../../platform/common/services/clock/mega/sysclk.h **** 	POWER_RED_REG1,     /* !< Devices on PRR1 */
  88:../../../platform/common/services/clock/mega/sysclk.h **** #endif
  89:../../../platform/common/services/clock/mega/sysclk.h **** };
  90:../../../platform/common/services/clock/mega/sysclk.h **** #endif
  91:../../../platform/common/services/clock/mega/sysclk.h **** 
  92:../../../platform/common/services/clock/mega/sysclk.h **** /****************************************************
  93:../../../platform/common/services/clock/mega/sysclk.h ****  * Given a dummy type but not used for these groups
  94:../../../platform/common/services/clock/mega/sysclk.h ****  * to support for otherthen megaRF device.
  95:../../../platform/common/services/clock/mega/sysclk.h ****  **************************************************/
  96:../../../platform/common/services/clock/mega/sysclk.h **** #if MEGA_XX8 || MEGA_XX8_A || MEGA_UNSPECIFIED
  97:../../../platform/common/services/clock/mega/sysclk.h **** #define NUMBER_OF_POWER_REG       1
  98:../../../platform/common/services/clock/mega/sysclk.h **** /*Starting Address for power reduction*/
  99:../../../platform/common/services/clock/mega/sysclk.h **** #define POWER_REG_ADD             PRR
 100:../../../platform/common/services/clock/mega/sysclk.h **** 
 101:../../../platform/common/services/clock/mega/sysclk.h **** /* ! \name Power Reduction  Clock Port Numbers */
 102:../../../platform/common/services/clock/mega/sysclk.h **** enum power_red_id {
 103:../../../platform/common/services/clock/mega/sysclk.h **** 	POWER_RED_REG0,     /* !< Devices on PRR */
 104:../../../platform/common/services/clock/mega/sysclk.h **** };
 105:../../../platform/common/services/clock/mega/sysclk.h **** #endif
 106:../../../platform/common/services/clock/mega/sysclk.h **** 
 107:../../../platform/common/services/clock/mega/sysclk.h **** /* Bit mask for the power reduction register based on */
 108:../../../platform/common/services/clock/mega/sysclk.h **** /*   MCU ARCH.                                        */
 109:../../../platform/common/services/clock/mega/sysclk.h **** #if MEGA_RF
 110:../../../platform/common/services/clock/mega/sysclk.h **** /*Bit mask for PRR2 */
 111:../../../platform/common/services/clock/mega/sysclk.h **** 
 112:../../../platform/common/services/clock/mega/sysclk.h **** #define PRRAM0_bm                       1 << PRRAM0
 113:../../../platform/common/services/clock/mega/sysclk.h **** #define PRRAM1_bm                       1 << PRRAM1
 114:../../../platform/common/services/clock/mega/sysclk.h **** #define PRRAM2_bm                       1 << PRRAM2
 115:../../../platform/common/services/clock/mega/sysclk.h **** #define PRRAM3_bm                       1 << PRRAM3
 116:../../../platform/common/services/clock/mega/sysclk.h **** #endif
 117:../../../platform/common/services/clock/mega/sysclk.h **** 
 118:../../../platform/common/services/clock/mega/sysclk.h **** /*Bit mask for the power reduction 0 or PRR*/
 119:../../../platform/common/services/clock/mega/sysclk.h **** #if !MEGA_XX_UN0 && !MEGA_XX_UN0
 120:../../../platform/common/services/clock/mega/sysclk.h **** #define PRADC_bm                        1 << PRADC
 121:../../../platform/common/services/clock/mega/sysclk.h **** #define PRUSART0_bm                     1 << PRUSART0
 122:../../../platform/common/services/clock/mega/sysclk.h **** #define PRSPI_bm                        1 << PRSPI
 123:../../../platform/common/services/clock/mega/sysclk.h **** #define PRTIM1_bm                       1 << PRTIM1
 124:../../../platform/common/services/clock/mega/sysclk.h **** #endif
 125:../../../platform/common/services/clock/mega/sysclk.h **** 
 126:../../../platform/common/services/clock/mega/sysclk.h **** #if MEGA_RF
 127:../../../platform/common/services/clock/mega/sysclk.h **** #define PRPGA_bm                        1 << PRPGA
 128:../../../platform/common/services/clock/mega/sysclk.h **** #endif
 129:../../../platform/common/services/clock/mega/sysclk.h **** 
 130:../../../platform/common/services/clock/mega/sysclk.h **** #if !MEGA_UNSPECIFIED
 131:../../../platform/common/services/clock/mega/sysclk.h **** #define PRTIM0_bm                       1 << PRTIM0
 132:../../../platform/common/services/clock/mega/sysclk.h **** #define PRTIM2_bm                       1 << PRTIM2
 133:../../../platform/common/services/clock/mega/sysclk.h **** #define PRTWI_bm                        1 << PRTWI
 134:../../../platform/common/services/clock/mega/sysclk.h **** #endif
 135:../../../platform/common/services/clock/mega/sysclk.h **** 
 136:../../../platform/common/services/clock/mega/sysclk.h **** #if MEGA_XX_UN2
 137:../../../platform/common/services/clock/mega/sysclk.h **** #define PRLCD_bm                        1 << PRLCD
 138:../../../platform/common/services/clock/mega/sysclk.h **** #endif
 139:../../../platform/common/services/clock/mega/sysclk.h **** 
 140:../../../platform/common/services/clock/mega/sysclk.h **** /*Bit mask for  PRR1  */
 141:../../../platform/common/services/clock/mega/sysclk.h **** #ifdef PRR1
 142:../../../platform/common/services/clock/mega/sysclk.h **** #if (MEGA_XX4 || MEGA_XX4_A)
 143:../../../platform/common/services/clock/mega/sysclk.h **** #define PRTIM3_bm                       1 << PRTIM3
 144:../../../platform/common/services/clock/mega/sysclk.h **** #endif
 145:../../../platform/common/services/clock/mega/sysclk.h **** #endif
 146:../../../platform/common/services/clock/mega/sysclk.h **** 
 147:../../../platform/common/services/clock/mega/sysclk.h **** #if MEGA_RF || MEGA_XX4 || MEGA_XX4_A
 148:../../../platform/common/services/clock/mega/sysclk.h **** #define PRUSART1_bm                     1 << PRUSART1
 149:../../../platform/common/services/clock/mega/sysclk.h **** #define PRUSART2_bm                     1 << PRUSART2
 150:../../../platform/common/services/clock/mega/sysclk.h **** #define PRUSART3_bm                     1 << PRUSART3
 151:../../../platform/common/services/clock/mega/sysclk.h **** #define PRTIM3_bm                       1 << PRTIM3
 152:../../../platform/common/services/clock/mega/sysclk.h **** #define PRTIM4_bm                       1 << PRTIM4
 153:../../../platform/common/services/clock/mega/sysclk.h **** #define PRTIM5_bm                       1 << PRTIM5
 154:../../../platform/common/services/clock/mega/sysclk.h **** #endif
 155:../../../platform/common/services/clock/mega/sysclk.h **** 
 156:../../../platform/common/services/clock/mega/sysclk.h **** #if MEGA_RF
 157:../../../platform/common/services/clock/mega/sysclk.h **** #define PRTRX24_bm                      1 << PRTRX24
 158:../../../platform/common/services/clock/mega/sysclk.h **** #endif
 159:../../../platform/common/services/clock/mega/sysclk.h **** 
 160:../../../platform/common/services/clock/mega/sysclk.h **** /**
 161:../../../platform/common/services/clock/mega/sysclk.h ****  * \name Querying the system clock and its derived clocks
 162:../../../platform/common/services/clock/mega/sysclk.h ****  */
 163:../../../platform/common/services/clock/mega/sysclk.h **** /* @{ */
 164:../../../platform/common/services/clock/mega/sysclk.h **** 
 165:../../../platform/common/services/clock/mega/sysclk.h **** /**
 166:../../../platform/common/services/clock/mega/sysclk.h ****  * \brief Return the current rate in Hz of the main system clock
 167:../../../platform/common/services/clock/mega/sysclk.h ****  * To know the clock value at what frequency the main clock is running
 168:../../../platform/common/services/clock/mega/sysclk.h ****  * \return Frequency of the main system clock, in Hz.
 169:../../../platform/common/services/clock/mega/sysclk.h ****  * \todo : please initialize the SYSCLK_SOURCE in conf_clock.h file for
 170:../../../platform/common/services/clock/mega/sysclk.h ****  * configured source clock using fuses.
 171:../../../platform/common/services/clock/mega/sysclk.h ****  * \eg. #define SYSCLK_SOURCE SYSCLK_SRC_RC16MHZ to use internal RC
 172:../../../platform/common/services/clock/mega/sysclk.h ****  * oscillator for clock source.
 173:../../../platform/common/services/clock/mega/sysclk.h ****  */
 174:../../../platform/common/services/clock/mega/sysclk.h **** static inline uint32_t sysclk_get_main_hz(void)
 175:../../../platform/common/services/clock/mega/sysclk.h **** {
 499               		.loc 4 175 0
 500               		.cfi_startproc
 501 01ee CF93      		push r28
 502               	.LCFI28:
 503               		.cfi_def_cfa_offset 3
 504               		.cfi_offset 28, -2
 505 01f0 DF93      		push r29
 506               	.LCFI29:
 507               		.cfi_def_cfa_offset 4
 508               		.cfi_offset 29, -3
 509 01f2 CDB7      		in r28,__SP_L__
 510 01f4 DEB7      		in r29,__SP_H__
 511               	.LCFI30:
 512               		.cfi_def_cfa_register 28
 513               	/* prologue: function */
 514               	/* frame size = 0 */
 515               	/* stack size = 2 */
 516               	.L__stack_usage = 2
 176:../../../platform/common/services/clock/mega/sysclk.h **** 	switch (SYSCLK_SOURCE) {
 177:../../../platform/common/services/clock/mega/sysclk.h **** 	case SYSCLK_SRC_RC16MHZ:
 178:../../../platform/common/services/clock/mega/sysclk.h **** 		return 16000000UL;
 179:../../../platform/common/services/clock/mega/sysclk.h **** 
 180:../../../platform/common/services/clock/mega/sysclk.h **** 	case SYSCLK_SRC_RC128KHZ:
 181:../../../platform/common/services/clock/mega/sysclk.h **** 		return 128000UL;
 182:../../../platform/common/services/clock/mega/sysclk.h **** 
 183:../../../platform/common/services/clock/mega/sysclk.h **** #if MEGA_RF
 184:../../../platform/common/services/clock/mega/sysclk.h **** 	case SYSCLK_SRC_TRS16MHZ:
 185:../../../platform/common/services/clock/mega/sysclk.h **** 		return 16000000UL;
 517               		.loc 4 185 0
 518 01f6 80E0      		ldi r24,0
 519 01f8 94E2      		ldi r25,lo8(36)
 520 01fa A4EF      		ldi r26,lo8(-12)
 521 01fc B0E0      		ldi r27,0
 186:../../../platform/common/services/clock/mega/sysclk.h **** #endif
 187:../../../platform/common/services/clock/mega/sysclk.h **** #ifdef BOARD_EXTERNAL_CLK
 188:../../../platform/common/services/clock/mega/sysclk.h **** 	case SYSCLK_SRC_EXTERNAL:
 189:../../../platform/common/services/clock/mega/sysclk.h **** 		return BOARD_EXTERNAL_CLK;
 190:../../../platform/common/services/clock/mega/sysclk.h **** #endif
 191:../../../platform/common/services/clock/mega/sysclk.h **** 	default:
 192:../../../platform/common/services/clock/mega/sysclk.h **** 
 193:../../../platform/common/services/clock/mega/sysclk.h **** 		return 1000000UL;
 194:../../../platform/common/services/clock/mega/sysclk.h **** 	}
 195:../../../platform/common/services/clock/mega/sysclk.h **** }
 522               		.loc 4 195 0
 523 01fe BC01      		movw r22,r24
 524 0200 CD01      		movw r24,r26
 525               	/* epilogue start */
 526 0202 DF91      		pop r29
 527 0204 CF91      		pop r28
 528 0206 0895      		ret
 529               		.cfi_endproc
 530               	.LFE86:
 533               	sysclk_get_source_clock_hz:
 534               	.LFB87:
 196:../../../platform/common/services/clock/mega/sysclk.h **** 
 197:../../../platform/common/services/clock/mega/sysclk.h **** /**
 198:../../../platform/common/services/clock/mega/sysclk.h ****  * \brief Return the current rate in Hz of source clock in Hz.
 199:../../../platform/common/services/clock/mega/sysclk.h ****  *
 200:../../../platform/common/services/clock/mega/sysclk.h ****  * This clock always runs at the same rate as the CPU clock unless the divider
 201:../../../platform/common/services/clock/mega/sysclk.h ****  * is set.
 202:../../../platform/common/services/clock/mega/sysclk.h ****  *
 203:../../../platform/common/services/clock/mega/sysclk.h ****  * \return Frequency of the system clock, in Hz.
 204:../../../platform/common/services/clock/mega/sysclk.h ****  */
 205:../../../platform/common/services/clock/mega/sysclk.h **** static inline uint32_t sysclk_get_source_clock_hz(void)
 206:../../../platform/common/services/clock/mega/sysclk.h **** {
 535               		.loc 4 206 0
 536               		.cfi_startproc
 537 0208 CF93      		push r28
 538               	.LCFI31:
 539               		.cfi_def_cfa_offset 3
 540               		.cfi_offset 28, -2
 541 020a DF93      		push r29
 542               	.LCFI32:
 543               		.cfi_def_cfa_offset 4
 544               		.cfi_offset 29, -3
 545 020c CDB7      		in r28,__SP_L__
 546 020e DEB7      		in r29,__SP_H__
 547               	.LCFI33:
 548               		.cfi_def_cfa_register 28
 549               	/* prologue: function */
 550               	/* frame size = 0 */
 551               	/* stack size = 2 */
 552               	.L__stack_usage = 2
 207:../../../platform/common/services/clock/mega/sysclk.h **** 	switch (CONFIG_SYSCLK_PSDIV) {
 208:../../../platform/common/services/clock/mega/sysclk.h **** 	case SYSCLK_PSDIV_1: /* Fall through */
 209:../../../platform/common/services/clock/mega/sysclk.h **** 		if (SYSCLK_SOURCE == SYSCLK_SRC_RC16MHZ ||
 210:../../../platform/common/services/clock/mega/sysclk.h **** 				SYSCLK_SOURCE == SYSCLK_SRC_RC128KHZ) {
 211:../../../platform/common/services/clock/mega/sysclk.h **** 			return sysclk_get_main_hz() / 2;
 212:../../../platform/common/services/clock/mega/sysclk.h **** 		} else {
 213:../../../platform/common/services/clock/mega/sysclk.h **** 			return sysclk_get_main_hz();
 553               		.loc 4 213 0
 554 0210 0E94 0000 		call sysclk_get_main_hz
 555 0214 DC01      		movw r26,r24
 556 0216 CB01      		movw r24,r22
 214:../../../platform/common/services/clock/mega/sysclk.h **** 		}
 215:../../../platform/common/services/clock/mega/sysclk.h **** 
 216:../../../platform/common/services/clock/mega/sysclk.h **** 	case SYSCLK_PSDIV_2:
 217:../../../platform/common/services/clock/mega/sysclk.h **** 		if (SYSCLK_SOURCE == SYSCLK_SRC_RC16MHZ ||
 218:../../../platform/common/services/clock/mega/sysclk.h **** 				SYSCLK_SOURCE == SYSCLK_SRC_RC128KHZ) {
 219:../../../platform/common/services/clock/mega/sysclk.h **** 			return sysclk_get_main_hz() / 4;
 220:../../../platform/common/services/clock/mega/sysclk.h **** 		} else {
 221:../../../platform/common/services/clock/mega/sysclk.h **** 			return sysclk_get_main_hz() / 2;
 222:../../../platform/common/services/clock/mega/sysclk.h **** 		}
 223:../../../platform/common/services/clock/mega/sysclk.h **** 
 224:../../../platform/common/services/clock/mega/sysclk.h **** 	case SYSCLK_PSDIV_4:
 225:../../../platform/common/services/clock/mega/sysclk.h **** 		if (SYSCLK_SOURCE == SYSCLK_SRC_RC16MHZ ||
 226:../../../platform/common/services/clock/mega/sysclk.h **** 				SYSCLK_SOURCE == SYSCLK_SRC_RC128KHZ) {
 227:../../../platform/common/services/clock/mega/sysclk.h **** 			return sysclk_get_main_hz() / 8;
 228:../../../platform/common/services/clock/mega/sysclk.h **** 		} else {
 229:../../../platform/common/services/clock/mega/sysclk.h **** 			return sysclk_get_main_hz() / 4;
 230:../../../platform/common/services/clock/mega/sysclk.h **** 		}
 231:../../../platform/common/services/clock/mega/sysclk.h **** 
 232:../../../platform/common/services/clock/mega/sysclk.h **** 	case SYSCLK_PSDIV_8:
 233:../../../platform/common/services/clock/mega/sysclk.h **** 		if (SYSCLK_SOURCE == SYSCLK_SRC_RC16MHZ ||
 234:../../../platform/common/services/clock/mega/sysclk.h **** 				SYSCLK_SOURCE == SYSCLK_SRC_RC128KHZ) {
 235:../../../platform/common/services/clock/mega/sysclk.h **** 			return sysclk_get_main_hz() / 16;
 236:../../../platform/common/services/clock/mega/sysclk.h **** 		} else {
 237:../../../platform/common/services/clock/mega/sysclk.h **** 			return sysclk_get_main_hz() / 8;
 238:../../../platform/common/services/clock/mega/sysclk.h **** 		}
 239:../../../platform/common/services/clock/mega/sysclk.h **** 
 240:../../../platform/common/services/clock/mega/sysclk.h **** 	case SYSCLK_PSDIV_16:
 241:../../../platform/common/services/clock/mega/sysclk.h **** 		if (SYSCLK_SOURCE == SYSCLK_SRC_RC16MHZ ||
 242:../../../platform/common/services/clock/mega/sysclk.h **** 				SYSCLK_SOURCE == SYSCLK_SRC_RC128KHZ) {
 243:../../../platform/common/services/clock/mega/sysclk.h **** 			return sysclk_get_main_hz() / 32;
 244:../../../platform/common/services/clock/mega/sysclk.h **** 		} else {
 245:../../../platform/common/services/clock/mega/sysclk.h **** 			return sysclk_get_main_hz() / 16;
 246:../../../platform/common/services/clock/mega/sysclk.h **** 		}
 247:../../../platform/common/services/clock/mega/sysclk.h **** 
 248:../../../platform/common/services/clock/mega/sysclk.h **** 	case SYSCLK_PSDIV_32:
 249:../../../platform/common/services/clock/mega/sysclk.h **** 		if (SYSCLK_SOURCE == SYSCLK_SRC_RC16MHZ ||
 250:../../../platform/common/services/clock/mega/sysclk.h **** 				SYSCLK_SOURCE == SYSCLK_SRC_RC128KHZ) {
 251:../../../platform/common/services/clock/mega/sysclk.h **** 			return sysclk_get_main_hz() / 64;
 252:../../../platform/common/services/clock/mega/sysclk.h **** 		} else {
 253:../../../platform/common/services/clock/mega/sysclk.h **** 			return sysclk_get_main_hz() / 32;
 254:../../../platform/common/services/clock/mega/sysclk.h **** 		}
 255:../../../platform/common/services/clock/mega/sysclk.h **** 
 256:../../../platform/common/services/clock/mega/sysclk.h **** 	case SYSCLK_PSDIV_64:
 257:../../../platform/common/services/clock/mega/sysclk.h **** 		if (SYSCLK_SOURCE == SYSCLK_SRC_RC16MHZ ||
 258:../../../platform/common/services/clock/mega/sysclk.h **** 				SYSCLK_SOURCE == SYSCLK_SRC_RC128KHZ) {
 259:../../../platform/common/services/clock/mega/sysclk.h **** 			return sysclk_get_main_hz() / 128;
 260:../../../platform/common/services/clock/mega/sysclk.h **** 		} else {
 261:../../../platform/common/services/clock/mega/sysclk.h **** 			return sysclk_get_main_hz() / 64;
 262:../../../platform/common/services/clock/mega/sysclk.h **** 		}
 263:../../../platform/common/services/clock/mega/sysclk.h **** 
 264:../../../platform/common/services/clock/mega/sysclk.h **** 	case SYSCLK_PSDIV_128:
 265:../../../platform/common/services/clock/mega/sysclk.h **** 		if (SYSCLK_SOURCE == SYSCLK_SRC_RC16MHZ ||
 266:../../../platform/common/services/clock/mega/sysclk.h **** 				SYSCLK_SOURCE == SYSCLK_SRC_RC128KHZ) {
 267:../../../platform/common/services/clock/mega/sysclk.h **** 			return sysclk_get_main_hz() / 256;
 268:../../../platform/common/services/clock/mega/sysclk.h **** 		} else {
 269:../../../platform/common/services/clock/mega/sysclk.h **** 			return sysclk_get_main_hz() / 128;
 270:../../../platform/common/services/clock/mega/sysclk.h **** 		}
 271:../../../platform/common/services/clock/mega/sysclk.h **** 
 272:../../../platform/common/services/clock/mega/sysclk.h **** 	case SYSCLK_PSDIV_256:
 273:../../../platform/common/services/clock/mega/sysclk.h **** 		if (SYSCLK_SOURCE == SYSCLK_SRC_RC16MHZ ||
 274:../../../platform/common/services/clock/mega/sysclk.h **** 				SYSCLK_SOURCE == SYSCLK_SRC_RC128KHZ) {
 275:../../../platform/common/services/clock/mega/sysclk.h **** 			return sysclk_get_main_hz() / 512;
 276:../../../platform/common/services/clock/mega/sysclk.h **** 		} else {
 277:../../../platform/common/services/clock/mega/sysclk.h **** 			return sysclk_get_main_hz() / 256;
 278:../../../platform/common/services/clock/mega/sysclk.h **** 		}
 279:../../../platform/common/services/clock/mega/sysclk.h **** 
 280:../../../platform/common/services/clock/mega/sysclk.h **** 	default:
 281:../../../platform/common/services/clock/mega/sysclk.h **** 		/*Invalide case*/
 282:../../../platform/common/services/clock/mega/sysclk.h **** 		return 0;
 283:../../../platform/common/services/clock/mega/sysclk.h **** 	}
 284:../../../platform/common/services/clock/mega/sysclk.h **** }
 557               		.loc 4 284 0
 558 0218 BC01      		movw r22,r24
 559 021a CD01      		movw r24,r26
 560               	/* epilogue start */
 561 021c DF91      		pop r29
 562 021e CF91      		pop r28
 563 0220 0895      		ret
 564               		.cfi_endproc
 565               	.LFE87:
 568               	usart_enable_module_clock:
 569               	.LFB95:
 570               		.file 5 "../../../platform/mega_rf/drivers/usart/usart_megarf.c"
   1:../../../platform/mega_rf/drivers/usart/usart_megarf.c **** /**
   2:../../../platform/mega_rf/drivers/usart/usart_megarf.c ****  * \file
   3:../../../platform/mega_rf/drivers/usart/usart_megarf.c ****  *
   4:../../../platform/mega_rf/drivers/usart/usart_megarf.c ****  * \brief USART driver for AVR MEGARF.
   5:../../../platform/mega_rf/drivers/usart/usart_megarf.c ****  *
   6:../../../platform/mega_rf/drivers/usart/usart_megarf.c ****  * Copyright (c) 2013 Atmel Corporation. All rights reserved.
   7:../../../platform/mega_rf/drivers/usart/usart_megarf.c ****  *
   8:../../../platform/mega_rf/drivers/usart/usart_megarf.c ****  * \asf_license_start
   9:../../../platform/mega_rf/drivers/usart/usart_megarf.c ****  *
  10:../../../platform/mega_rf/drivers/usart/usart_megarf.c ****  * \page License
  11:../../../platform/mega_rf/drivers/usart/usart_megarf.c ****  *
  12:../../../platform/mega_rf/drivers/usart/usart_megarf.c ****  * Redistribution and use in source and binary forms, with or without
  13:../../../platform/mega_rf/drivers/usart/usart_megarf.c ****  * modification, are permitted provided that the following conditions are met:
  14:../../../platform/mega_rf/drivers/usart/usart_megarf.c ****  *
  15:../../../platform/mega_rf/drivers/usart/usart_megarf.c ****  * 1. Redistributions of source code must retain the above copyright notice,
  16:../../../platform/mega_rf/drivers/usart/usart_megarf.c ****  *    this list of conditions and the following disclaimer.
  17:../../../platform/mega_rf/drivers/usart/usart_megarf.c ****  *
  18:../../../platform/mega_rf/drivers/usart/usart_megarf.c ****  * 2. Redistributions in binary form must reproduce the above copyright notice,
  19:../../../platform/mega_rf/drivers/usart/usart_megarf.c ****  *    this list of conditions and the following disclaimer in the documentation
  20:../../../platform/mega_rf/drivers/usart/usart_megarf.c ****  *    and/or other materials provided with the distribution.
  21:../../../platform/mega_rf/drivers/usart/usart_megarf.c ****  *
  22:../../../platform/mega_rf/drivers/usart/usart_megarf.c ****  * 3. The name of Atmel may not be used to endorse or promote products derived
  23:../../../platform/mega_rf/drivers/usart/usart_megarf.c ****  *    from this software without specific prior written permission.
  24:../../../platform/mega_rf/drivers/usart/usart_megarf.c ****  *
  25:../../../platform/mega_rf/drivers/usart/usart_megarf.c ****  * 4. This software may only be redistributed and used in connection with an
  26:../../../platform/mega_rf/drivers/usart/usart_megarf.c ****  *    Atmel microcontroller product.
  27:../../../platform/mega_rf/drivers/usart/usart_megarf.c ****  *
  28:../../../platform/mega_rf/drivers/usart/usart_megarf.c ****  * THIS SOFTWARE IS PROVIDED BY ATMEL "AS IS" AND ANY EXPRESS OR IMPLIED
  29:../../../platform/mega_rf/drivers/usart/usart_megarf.c ****  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
  30:../../../platform/mega_rf/drivers/usart/usart_megarf.c ****  * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE
  31:../../../platform/mega_rf/drivers/usart/usart_megarf.c ****  * EXPRESSLY AND SPECIFICALLY DISCLAIMED. IN NO EVENT SHALL ATMEL BE LIABLE FOR
  32:../../../platform/mega_rf/drivers/usart/usart_megarf.c ****  * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  33:../../../platform/mega_rf/drivers/usart/usart_megarf.c ****  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
  34:../../../platform/mega_rf/drivers/usart/usart_megarf.c ****  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
  35:../../../platform/mega_rf/drivers/usart/usart_megarf.c ****  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
  36:../../../platform/mega_rf/drivers/usart/usart_megarf.c ****  * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
  37:../../../platform/mega_rf/drivers/usart/usart_megarf.c ****  * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  38:../../../platform/mega_rf/drivers/usart/usart_megarf.c ****  * POSSIBILITY OF SUCH DAMAGE.
  39:../../../platform/mega_rf/drivers/usart/usart_megarf.c ****  *
  40:../../../platform/mega_rf/drivers/usart/usart_megarf.c ****  * \asf_license_stop
  41:../../../platform/mega_rf/drivers/usart/usart_megarf.c ****  *
  42:../../../platform/mega_rf/drivers/usart/usart_megarf.c ****  */
  43:../../../platform/mega_rf/drivers/usart/usart_megarf.c **** #include <stdint.h>
  44:../../../platform/mega_rf/drivers/usart/usart_megarf.c **** 
  45:../../../platform/mega_rf/drivers/usart/usart_megarf.c **** #include "compiler.h"
  46:../../../platform/mega_rf/drivers/usart/usart_megarf.c **** #include "usart_megarf.h"
  47:../../../platform/mega_rf/drivers/usart/usart_megarf.c **** #include "sysclk.h"
  48:../../../platform/mega_rf/drivers/usart/usart_megarf.c **** #include "ioport.h"
  49:../../../platform/mega_rf/drivers/usart/usart_megarf.c **** #include "status_codes.h"
  50:../../../platform/mega_rf/drivers/usart/usart_megarf.c **** 
  51:../../../platform/mega_rf/drivers/usart/usart_megarf.c **** /**
  52:../../../platform/mega_rf/drivers/usart/usart_megarf.c ****  * \brief Enable the system clock to an USART module.
  53:../../../platform/mega_rf/drivers/usart/usart_megarf.c ****  *
  54:../../../platform/mega_rf/drivers/usart/usart_megarf.c ****  * This function will enable the system clock to the provided \arg usart
  55:../../../platform/mega_rf/drivers/usart/usart_megarf.c ****  * module.
  56:../../../platform/mega_rf/drivers/usart/usart_megarf.c ****  *
  57:../../../platform/mega_rf/drivers/usart/usart_megarf.c ****  * \brief usart Pointer to an USART module.
  58:../../../platform/mega_rf/drivers/usart/usart_megarf.c ****  */
  59:../../../platform/mega_rf/drivers/usart/usart_megarf.c **** static inline void usart_enable_module_clock(USART_t *usart)
  60:../../../platform/mega_rf/drivers/usart/usart_megarf.c **** {
 571               		.loc 5 60 0
 572               		.cfi_startproc
 573 0222 CF93      		push r28
 574               	.LCFI34:
 575               		.cfi_def_cfa_offset 3
 576               		.cfi_offset 28, -2
 577 0224 DF93      		push r29
 578               	.LCFI35:
 579               		.cfi_def_cfa_offset 4
 580               		.cfi_offset 29, -3
 581 0226 00D0      		rcall .
 582               	.LCFI36:
 583               		.cfi_def_cfa_offset 6
 584 0228 CDB7      		in r28,__SP_L__
 585 022a DEB7      		in r29,__SP_H__
 586               	.LCFI37:
 587               		.cfi_def_cfa_register 28
 588               	/* prologue: function */
 589               	/* frame size = 2 */
 590               	/* stack size = 4 */
 591               	.L__stack_usage = 4
 592 022c 9A83      		std Y+2,r25
 593 022e 8983      		std Y+1,r24
  61:../../../platform/mega_rf/drivers/usart/usart_megarf.c **** #ifdef USARTA0
  62:../../../platform/mega_rf/drivers/usart/usart_megarf.c **** 	if ((uintptr_t)usart == (uintptr_t)&UCSR0A) {
 594               		.loc 5 62 0
 595 0230 8981      		ldd r24,Y+1
 596 0232 9A81      		ldd r25,Y+2
 597 0234 803C      		cpi r24,-64
 598 0236 9105      		cpc r25,__zero_reg__
 599 0238 01F4      		brne .L19
  63:../../../platform/mega_rf/drivers/usart/usart_megarf.c **** 		sysclk_enable_module(POWER_RED_REG0, PRUSART0_bm);
 600               		.loc 5 63 0
 601 023a 62E0      		ldi r22,lo8(2)
 602 023c 80E0      		ldi r24,0
 603 023e 0E94 0000 		call sysclk_enable_module
 604               	.L19:
  64:../../../platform/mega_rf/drivers/usart/usart_megarf.c **** 	}
  65:../../../platform/mega_rf/drivers/usart/usart_megarf.c **** #endif
  66:../../../platform/mega_rf/drivers/usart/usart_megarf.c **** #ifdef USARTA1
  67:../../../platform/mega_rf/drivers/usart/usart_megarf.c **** 	if ((uintptr_t)usart == (uintptr_t)&UCSR1A) {
 605               		.loc 5 67 0
 606 0242 8981      		ldd r24,Y+1
 607 0244 9A81      		ldd r25,Y+2
 608 0246 883C      		cpi r24,-56
 609 0248 9105      		cpc r25,__zero_reg__
 610 024a 01F4      		brne .L21
  68:../../../platform/mega_rf/drivers/usart/usart_megarf.c **** 		sysclk_enable_module(POWER_RED_REG1, PRUSART1_bm);
 611               		.loc 5 68 0
 612 024c 61E0      		ldi r22,lo8(1)
 613 024e 81E0      		ldi r24,lo8(1)
 614 0250 0E94 0000 		call sysclk_enable_module
 615               	.L21:
  69:../../../platform/mega_rf/drivers/usart/usart_megarf.c **** 	}
  70:../../../platform/mega_rf/drivers/usart/usart_megarf.c **** #endif
  71:../../../platform/mega_rf/drivers/usart/usart_megarf.c **** }
 616               		.loc 5 71 0
 617 0254 0000      		nop
 618               	/* epilogue start */
 619 0256 0F90      		pop __tmp_reg__
 620 0258 0F90      		pop __tmp_reg__
 621 025a DF91      		pop r29
 622 025c CF91      		pop r28
 623 025e 0895      		ret
 624               		.cfi_endproc
 625               	.LFE95:
 627               	.global	usart_init_rs232
 629               	usart_init_rs232:
 630               	.LFB96:
  72:../../../platform/mega_rf/drivers/usart/usart_megarf.c **** 
  73:../../../platform/mega_rf/drivers/usart/usart_megarf.c **** /**
  74:../../../platform/mega_rf/drivers/usart/usart_megarf.c ****  * \brief Initialize USART in RS232 mode.
  75:../../../platform/mega_rf/drivers/usart/usart_megarf.c ****  *
  76:../../../platform/mega_rf/drivers/usart/usart_megarf.c ****  * This function initializes the USART module in RS232 mode using the
  77:../../../platform/mega_rf/drivers/usart/usart_megarf.c ****  * usart_rs232_options_t configuration structure and CPU frequency.
  78:../../../platform/mega_rf/drivers/usart/usart_megarf.c ****  *
  79:../../../platform/mega_rf/drivers/usart/usart_megarf.c ****  * \param usart The USART module.
  80:../../../platform/mega_rf/drivers/usart/usart_megarf.c ****  * \param opt The RS232 configuration option.
  81:../../../platform/mega_rf/drivers/usart/usart_megarf.c ****  *
  82:../../../platform/mega_rf/drivers/usart/usart_megarf.c ****  * \retval true if the initialization was successful
  83:../../../platform/mega_rf/drivers/usart/usart_megarf.c ****  * \retval false if the initialization failed (error in baud rate calculation)
  84:../../../platform/mega_rf/drivers/usart/usart_megarf.c ****  */
  85:../../../platform/mega_rf/drivers/usart/usart_megarf.c **** bool usart_init_rs232(USART_t *usart, const usart_rs232_options_t *opt)
  86:../../../platform/mega_rf/drivers/usart/usart_megarf.c **** {
 631               		.loc 5 86 0
 632               		.cfi_startproc
 633 0260 0F93      		push r16
 634               	.LCFI38:
 635               		.cfi_def_cfa_offset 3
 636               		.cfi_offset 16, -2
 637 0262 1F93      		push r17
 638               	.LCFI39:
 639               		.cfi_def_cfa_offset 4
 640               		.cfi_offset 17, -3
 641 0264 CF93      		push r28
 642               	.LCFI40:
 643               		.cfi_def_cfa_offset 5
 644               		.cfi_offset 28, -4
 645 0266 DF93      		push r29
 646               	.LCFI41:
 647               		.cfi_def_cfa_offset 6
 648               		.cfi_offset 29, -5
 649 0268 00D0      		rcall .
 650 026a 00D0      		rcall .
 651 026c 1F92      		push __zero_reg__
 652               	.LCFI42:
 653               		.cfi_def_cfa_offset 11
 654 026e CDB7      		in r28,__SP_L__
 655 0270 DEB7      		in r29,__SP_H__
 656               	.LCFI43:
 657               		.cfi_def_cfa_register 28
 658               	/* prologue: function */
 659               	/* frame size = 5 */
 660               	/* stack size = 9 */
 661               	.L__stack_usage = 9
 662 0272 9B83      		std Y+3,r25
 663 0274 8A83      		std Y+2,r24
 664 0276 7D83      		std Y+5,r23
 665 0278 6C83      		std Y+4,r22
  87:../../../platform/mega_rf/drivers/usart/usart_megarf.c **** 	bool result;
  88:../../../platform/mega_rf/drivers/usart/usart_megarf.c **** 	usart_enable_module_clock(usart);
 666               		.loc 5 88 0
 667 027a 8A81      		ldd r24,Y+2
 668 027c 9B81      		ldd r25,Y+3
 669 027e 0E94 0000 		call usart_enable_module_clock
  89:../../../platform/mega_rf/drivers/usart/usart_megarf.c **** 	usart_set_mode(usart, USART_CMODE_ASYNCHRONOUS_gc);
 670               		.loc 5 89 0
 671 0282 8A81      		ldd r24,Y+2
 672 0284 9B81      		ldd r25,Y+3
 673 0286 60E0      		ldi r22,0
 674 0288 0E94 0000 		call usart_set_mode
  90:../../../platform/mega_rf/drivers/usart/usart_megarf.c **** 	usart_format_set(usart, opt->charlength, opt->paritytype,
 675               		.loc 5 90 0
 676 028c 8C81      		ldd r24,Y+4
 677 028e 9D81      		ldd r25,Y+5
 678 0290 FC01      		movw r30,r24
 679 0292 2681      		ldd r18,Z+6
 680 0294 8C81      		ldd r24,Y+4
 681 0296 9D81      		ldd r25,Y+5
 682 0298 FC01      		movw r30,r24
 683 029a 4581      		ldd r20,Z+5
 684 029c 8C81      		ldd r24,Y+4
 685 029e 9D81      		ldd r25,Y+5
 686 02a0 FC01      		movw r30,r24
 687 02a2 3481      		ldd r19,Z+4
 688 02a4 8A81      		ldd r24,Y+2
 689 02a6 9B81      		ldd r25,Y+3
 690 02a8 632F      		mov r22,r19
 691 02aa 0E94 0000 		call usart_format_set
  91:../../../platform/mega_rf/drivers/usart/usart_megarf.c **** 			opt->stopbits);
  92:../../../platform/mega_rf/drivers/usart/usart_megarf.c **** 	result = usart_set_baudrate(usart, opt->baudrate,
 692               		.loc 5 92 0
 693 02ae 0E94 0000 		call sysclk_get_source_clock_hz
 694 02b2 9B01      		movw r18,r22
 695 02b4 AC01      		movw r20,r24
 696 02b6 8C81      		ldd r24,Y+4
 697 02b8 9D81      		ldd r25,Y+5
 698 02ba FC01      		movw r30,r24
 699 02bc 8081      		ld r24,Z
 700 02be 9181      		ldd r25,Z+1
 701 02c0 A281      		ldd r26,Z+2
 702 02c2 B381      		ldd r27,Z+3
 703 02c4 EA81      		ldd r30,Y+2
 704 02c6 FB81      		ldd r31,Y+3
 705 02c8 8901      		movw r16,r18
 706 02ca 9A01      		movw r18,r20
 707 02cc AC01      		movw r20,r24
 708 02ce BD01      		movw r22,r26
 709 02d0 CF01      		movw r24,r30
 710 02d2 0E94 0000 		call usart_set_baudrate
 711 02d6 8983      		std Y+1,r24
  93:../../../platform/mega_rf/drivers/usart/usart_megarf.c **** 			sysclk_get_source_clock_hz());
  94:../../../platform/mega_rf/drivers/usart/usart_megarf.c **** 	usart_tx_enable(usart);
 712               		.loc 5 94 0
 713 02d8 8A81      		ldd r24,Y+2
 714 02da 9B81      		ldd r25,Y+3
 715 02dc 0E94 0000 		call usart_tx_enable
  95:../../../platform/mega_rf/drivers/usart/usart_megarf.c **** 	usart_rx_enable(usart);
 716               		.loc 5 95 0
 717 02e0 8A81      		ldd r24,Y+2
 718 02e2 9B81      		ldd r25,Y+3
 719 02e4 0E94 0000 		call usart_rx_enable
  96:../../../platform/mega_rf/drivers/usart/usart_megarf.c **** 	return result;
 720               		.loc 5 96 0
 721 02e8 8981      		ldd r24,Y+1
 722               	/* epilogue start */
  97:../../../platform/mega_rf/drivers/usart/usart_megarf.c **** }
 723               		.loc 5 97 0
 724 02ea 0F90      		pop __tmp_reg__
 725 02ec 0F90      		pop __tmp_reg__
 726 02ee 0F90      		pop __tmp_reg__
 727 02f0 0F90      		pop __tmp_reg__
 728 02f2 0F90      		pop __tmp_reg__
 729 02f4 DF91      		pop r29
 730 02f6 CF91      		pop r28
 731 02f8 1F91      		pop r17
 732 02fa 0F91      		pop r16
 733 02fc 0895      		ret
 734               		.cfi_endproc
 735               	.LFE96:
 737               	.global	usart_init_spi
 739               	usart_init_spi:
 740               	.LFB97:
  98:../../../platform/mega_rf/drivers/usart/usart_megarf.c **** 
  99:../../../platform/mega_rf/drivers/usart/usart_megarf.c **** /**
 100:../../../platform/mega_rf/drivers/usart/usart_megarf.c ****  * \brief Initialize USART in SPI master mode.
 101:../../../platform/mega_rf/drivers/usart/usart_megarf.c ****  *
 102:../../../platform/mega_rf/drivers/usart/usart_megarf.c ****  * This function initializes the USART module in SPI master mode using the
 103:../../../platform/mega_rf/drivers/usart/usart_megarf.c ****  * usart_spi_options_t configuration structure and CPU frequency.
 104:../../../platform/mega_rf/drivers/usart/usart_megarf.c ****  *
 105:../../../platform/mega_rf/drivers/usart/usart_megarf.c ****  * \param usart The USART module.
 106:../../../platform/mega_rf/drivers/usart/usart_megarf.c ****  * \param opt The RS232 configuration option.
 107:../../../platform/mega_rf/drivers/usart/usart_megarf.c ****  */
 108:../../../platform/mega_rf/drivers/usart/usart_megarf.c **** void usart_init_spi(USART_t *usart, const usart_spi_options_t *opt)
 109:../../../platform/mega_rf/drivers/usart/usart_megarf.c **** {
 741               		.loc 5 109 0
 742               		.cfi_startproc
 743 02fe 0F93      		push r16
 744               	.LCFI44:
 745               		.cfi_def_cfa_offset 3
 746               		.cfi_offset 16, -2
 747 0300 1F93      		push r17
 748               	.LCFI45:
 749               		.cfi_def_cfa_offset 4
 750               		.cfi_offset 17, -3
 751 0302 CF93      		push r28
 752               	.LCFI46:
 753               		.cfi_def_cfa_offset 5
 754               		.cfi_offset 28, -4
 755 0304 DF93      		push r29
 756               	.LCFI47:
 757               		.cfi_def_cfa_offset 6
 758               		.cfi_offset 29, -5
 759 0306 CDB7      		in r28,__SP_L__
 760 0308 DEB7      		in r29,__SP_H__
 761               	.LCFI48:
 762               		.cfi_def_cfa_register 28
 763 030a 6597      		sbiw r28,21
 764               	.LCFI49:
 765               		.cfi_def_cfa_offset 27
 766 030c 0FB6      		in __tmp_reg__,__SREG__
 767 030e F894      		cli
 768 0310 DEBF      		out __SP_H__,r29
 769 0312 0FBE      		out __SREG__,__tmp_reg__
 770 0314 CDBF      		out __SP_L__,r28
 771               	/* prologue: function */
 772               	/* frame size = 21 */
 773               	/* stack size = 25 */
 774               	.L__stack_usage = 25
 775 0316 9B8B      		std Y+19,r25
 776 0318 8A8B      		std Y+18,r24
 777 031a 7D8B      		std Y+21,r23
 778 031c 6C8B      		std Y+20,r22
 110:../../../platform/mega_rf/drivers/usart/usart_megarf.c **** 	usart->UBRR = 0;
 779               		.loc 5 110 0
 780 031e 8A89      		ldd r24,Y+18
 781 0320 9B89      		ldd r25,Y+19
 782 0322 FC01      		movw r30,r24
 783 0324 1582      		std Z+5,__zero_reg__
 784 0326 1482      		std Z+4,__zero_reg__
 111:../../../platform/mega_rf/drivers/usart/usart_megarf.c **** 
 112:../../../platform/mega_rf/drivers/usart/usart_megarf.c **** 	usart_enable_module_clock(usart);
 785               		.loc 5 112 0
 786 0328 8A89      		ldd r24,Y+18
 787 032a 9B89      		ldd r25,Y+19
 788 032c 0E94 0000 		call usart_enable_module_clock
 113:../../../platform/mega_rf/drivers/usart/usart_megarf.c **** 	usart_set_mode(usart, USART_CMODE_MSPI_gc);
 789               		.loc 5 113 0
 790 0330 8A89      		ldd r24,Y+18
 791 0332 9B89      		ldd r25,Y+19
 792 0334 60EC      		ldi r22,lo8(-64)
 793 0336 0E94 0000 		call usart_set_mode
 114:../../../platform/mega_rf/drivers/usart/usart_megarf.c **** 	port_pin_t sck_pin;
 115:../../../platform/mega_rf/drivers/usart/usart_megarf.c **** 
 116:../../../platform/mega_rf/drivers/usart/usart_megarf.c **** #ifdef USARTA0
 117:../../../platform/mega_rf/drivers/usart/usart_megarf.c **** 	if ((uintptr_t)usart == (uintptr_t)&UCSR0A) {
 794               		.loc 5 117 0
 795 033a 8A89      		ldd r24,Y+18
 796 033c 9B89      		ldd r25,Y+19
 797 033e 803C      		cpi r24,-64
 798 0340 9105      		cpc r25,__zero_reg__
 799 0342 01F0      		breq .+2
 800 0344 00C0      		rjmp .L25
 118:../../../platform/mega_rf/drivers/usart/usart_megarf.c **** 		sck_pin = IOPORT_CREATE_PIN(PORTE, 2);
 801               		.loc 5 118 0
 802 0346 82E2      		ldi r24,lo8(34)
 803 0348 8983      		std Y+1,r24
 119:../../../platform/mega_rf/drivers/usart/usart_megarf.c **** 		ioport_configure_port_pin(ioport_pin_to_port(sck_pin),
 804               		.loc 5 119 0
 805 034a 8981      		ldd r24,Y+1
 806 034c 0E94 0000 		call ioport_pin_to_mask
 807 0350 482F      		mov r20,r24
 808 0352 8981      		ldd r24,Y+1
 809 0354 8C83      		std Y+4,r24
 810 0356 8C81      		ldd r24,Y+4
 811 0358 8B87      		std Y+11,r24
 812               	.LBB28:
 813               	.LBB29:
 814               	.LBB30:
 815               	.LBB31:
 179:../../../platform/common/services/ioport/mega_rf/ioport.h **** }
 816               		.loc 3 179 0
 817 035a 8B85      		ldd r24,Y+11
 818 035c 8695      		lsr r24
 819 035e 8695      		lsr r24
 820 0360 8695      		lsr r24
 821 0362 8C87      		std Y+12,r24
 822               	.LBB32:
 823               	.LBB33:
 170:../../../platform/common/services/ioport/mega_rf/ioport.h **** }
 824               		.loc 3 170 0
 825 0364 8C85      		ldd r24,Y+12
 826 0366 282F      		mov r18,r24
 827 0368 30E0      		ldi r19,0
 828 036a C901      		movw r24,r18
 829 036c 880F      		lsl r24
 830 036e 991F      		rol r25
 831 0370 820F      		add r24,r18
 832 0372 931F      		adc r25,r19
 169:../../../platform/common/services/ioport/mega_rf/ioport.h **** 	       (port * IOPORT_PORT_OFFSET)));
 833               		.loc 3 169 0
 834 0374 8096      		adiw r24,32
 835 0376 9F83      		std Y+7,r25
 836 0378 8E83      		std Y+6,r24
 837 037a 4887      		std Y+8,r20
 838 037c 83E0      		ldi r24,lo8(3)
 839 037e 90E0      		ldi r25,0
 840 0380 9A87      		std Y+10,r25
 841 0382 8987      		std Y+9,r24
 842               	.LBE33:
 843               	.LBE32:
 844               	.LBE31:
 845               	.LBE30:
 846               	.LBE29:
 847               	.LBE28:
 848               	.LBB34:
 849               	.LBB35:
 190:../../../platform/common/services/ioport/mega_rf/ioport.h **** }
 191:../../../platform/common/services/ioport/mega_rf/ioport.h **** 
 192:../../../platform/common/services/ioport/mega_rf/ioport.h **** /**
 193:../../../platform/common/services/ioport/mega_rf/ioport.h ****  * \brief Set multiple pin modes in a single GPIO port, such as pull-up,
 194:../../../platform/common/services/ioport/mega_rf/ioport.h ****  * pull-down, etc. configuration.
 195:../../../platform/common/services/ioport/mega_rf/ioport.h ****  *
 196:../../../platform/common/services/ioport/mega_rf/ioport.h ****  * \param port GPIO port to configure  e.g. IOPORT_PORTB
 197:../../../platform/common/services/ioport/mega_rf/ioport.h ****  * \param mask Pin mask of pins to configure
 198:../../../platform/common/services/ioport/mega_rf/ioport.h ****  * \param mode Mode masks to configure for the specified pins (\ref
 199:../../../platform/common/services/ioport/mega_rf/ioport.h ****  * ioport_modes)
 200:../../../platform/common/services/ioport/mega_rf/ioport.h ****  */
 201:../../../platform/common/services/ioport/mega_rf/ioport.h **** __always_inline static void arch_ioport_set_port_mode(ioport_port_t port,
 202:../../../platform/common/services/ioport/mega_rf/ioport.h **** 		ioport_port_mask_t mask, ioport_mode_t mode)
 203:../../../platform/common/services/ioport/mega_rf/ioport.h **** {
 204:../../../platform/common/services/ioport/mega_rf/ioport.h **** #ifdef MEGA_RF
 205:../../../platform/common/services/ioport/mega_rf/ioport.h **** 	PORT_t *base = arch_ioport_port_to_base(port);
 206:../../../platform/common/services/ioport/mega_rf/ioport.h **** 	if (mode == IOPORT_MODE_PULLUP) {
 207:../../../platform/common/services/ioport/mega_rf/ioport.h **** 		base->PORTDATA = mask;
 208:../../../platform/common/services/ioport/mega_rf/ioport.h **** 	} else if (mode == IOPORT_MODE_PULLDOWN) {
 209:../../../platform/common/services/ioport/mega_rf/ioport.h **** 		base->PORTDATA = ~mask;
 210:../../../platform/common/services/ioport/mega_rf/ioport.h **** 	}
 211:../../../platform/common/services/ioport/mega_rf/ioport.h **** #endif
 212:../../../platform/common/services/ioport/mega_rf/ioport.h **** }
 213:../../../platform/common/services/ioport/mega_rf/ioport.h **** 
 214:../../../platform/common/services/ioport/mega_rf/ioport.h **** /**
 215:../../../platform/common/services/ioport/mega_rf/ioport.h ****  * \brief Set multiple pin modes in a single GPIO port, such as pull-up,
 216:../../../platform/common/services/ioport/mega_rf/ioport.h ****  * pull-down, etc. configuration.
 217:../../../platform/common/services/ioport/mega_rf/ioport.h ****  *
 218:../../../platform/common/services/ioport/mega_rf/ioport.h ****  * \param: pin. the pin number defined by IOPORT_CREATE_PIN
 219:../../../platform/common/services/ioport/mega_rf/ioport.h ****  * \param mask Pin mask of pins to configure
 220:../../../platform/common/services/ioport/mega_rf/ioport.h ****  * \param mode Mode masks to configure for the specified pins (\ref
 221:../../../platform/common/services/ioport/mega_rf/ioport.h ****  * ioport_modes)
 222:../../../platform/common/services/ioport/mega_rf/ioport.h ****  */
 223:../../../platform/common/services/ioport/mega_rf/ioport.h **** __always_inline static void arch_ioport_set_pin_mode(ioport_pin_t pin,
 224:../../../platform/common/services/ioport/mega_rf/ioport.h **** 		ioport_mode_t mode)
 225:../../../platform/common/services/ioport/mega_rf/ioport.h **** {
 226:../../../platform/common/services/ioport/mega_rf/ioport.h **** #ifdef MEGA_RF
 227:../../../platform/common/services/ioport/mega_rf/ioport.h **** 	PORT_t *base = arch_ioport_pin_to_base(pin);
 228:../../../platform/common/services/ioport/mega_rf/ioport.h **** 	ioport_pin_t mask_pin = arch_ioport_pin_to_mask(pin);
 229:../../../platform/common/services/ioport/mega_rf/ioport.h **** 	if (mode == IOPORT_MODE_PULLUP) {
 230:../../../platform/common/services/ioport/mega_rf/ioport.h **** 		base->PORTDATA |=  mask_pin;
 231:../../../platform/common/services/ioport/mega_rf/ioport.h **** 	} else if (mode == IOPORT_MODE_PULLDOWN) {
 232:../../../platform/common/services/ioport/mega_rf/ioport.h **** 		base->PORTDATA &= ~mask_pin;
 233:../../../platform/common/services/ioport/mega_rf/ioport.h **** 	}
 234:../../../platform/common/services/ioport/mega_rf/ioport.h **** #endif
 235:../../../platform/common/services/ioport/mega_rf/ioport.h **** }
 236:../../../platform/common/services/ioport/mega_rf/ioport.h **** 
 237:../../../platform/common/services/ioport/mega_rf/ioport.h **** /**
 238:../../../platform/common/services/ioport/mega_rf/ioport.h ****  * \brief : Set port direction as input or output.
 239:../../../platform/common/services/ioport/mega_rf/ioport.h ****  * \param port GPIO port to configure  e.g. IOPORT_PORTB
 240:../../../platform/common/services/ioport/mega_rf/ioport.h ****  * \param mask Pin mask of pins to configure
 241:../../../platform/common/services/ioport/mega_rf/ioport.h ****  * \param mode dir, \refer ioport_direction
 242:../../../platform/common/services/ioport/mega_rf/ioport.h ****  */
 243:../../../platform/common/services/ioport/mega_rf/ioport.h **** __always_inline static void arch_ioport_set_port_dir(ioport_port_t port,
 244:../../../platform/common/services/ioport/mega_rf/ioport.h **** 		ioport_port_mask_t mask, enum ioport_direction dir)
 245:../../../platform/common/services/ioport/mega_rf/ioport.h **** {
 246:../../../platform/common/services/ioport/mega_rf/ioport.h **** 	PORT_t *base = arch_ioport_port_to_base(port);
 247:../../../platform/common/services/ioport/mega_rf/ioport.h **** 
 248:../../../platform/common/services/ioport/mega_rf/ioport.h **** 	if (dir == IOPORT_DIR_OUTPUT) {
 249:../../../platform/common/services/ioport/mega_rf/ioport.h **** 		base->DIR = mask;
 250:../../../platform/common/services/ioport/mega_rf/ioport.h **** 	} else if (dir == IOPORT_DIR_INPUT) {
 251:../../../platform/common/services/ioport/mega_rf/ioport.h **** 		base->DIR = ~mask;
 252:../../../platform/common/services/ioport/mega_rf/ioport.h **** 	}
 253:../../../platform/common/services/ioport/mega_rf/ioport.h **** }
 254:../../../platform/common/services/ioport/mega_rf/ioport.h **** 
 255:../../../platform/common/services/ioport/mega_rf/ioport.h **** /**
 256:../../../platform/common/services/ioport/mega_rf/ioport.h ****  * \brief : Set pin direction as input or output.
 257:../../../platform/common/services/ioport/mega_rf/ioport.h ****  * \param: pin. the pin number defined by IOPORT_CREATE_PIN
 258:../../../platform/common/services/ioport/mega_rf/ioport.h ****  * \param mask Pin mask of pins to configure
 259:../../../platform/common/services/ioport/mega_rf/ioport.h ****  * \param mode dir, \refer ioport_direction
 260:../../../platform/common/services/ioport/mega_rf/ioport.h ****  */
 261:../../../platform/common/services/ioport/mega_rf/ioport.h **** __always_inline static void arch_ioport_set_pin_dir(ioport_pin_t pin,
 262:../../../platform/common/services/ioport/mega_rf/ioport.h **** 		enum ioport_direction dir)
 263:../../../platform/common/services/ioport/mega_rf/ioport.h **** {
 264:../../../platform/common/services/ioport/mega_rf/ioport.h **** 	PORT_t *base = arch_ioport_pin_to_base(pin);
 265:../../../platform/common/services/ioport/mega_rf/ioport.h **** 
 266:../../../platform/common/services/ioport/mega_rf/ioport.h **** 	if (dir == IOPORT_DIR_OUTPUT) {
 267:../../../platform/common/services/ioport/mega_rf/ioport.h **** 		base->DIR |= arch_ioport_pin_to_mask(pin);
 268:../../../platform/common/services/ioport/mega_rf/ioport.h **** 	} else if (dir == IOPORT_DIR_INPUT) {
 269:../../../platform/common/services/ioport/mega_rf/ioport.h **** 		base->DIR &=  ~arch_ioport_pin_to_mask(pin);
 270:../../../platform/common/services/ioport/mega_rf/ioport.h **** 	}
 271:../../../platform/common/services/ioport/mega_rf/ioport.h **** }
 272:../../../platform/common/services/ioport/mega_rf/ioport.h **** 
 273:../../../platform/common/services/ioport/mega_rf/ioport.h **** /**
 274:../../../platform/common/services/ioport/mega_rf/ioport.h ****  * \brief : Set pin level to high or low.
 275:../../../platform/common/services/ioport/mega_rf/ioport.h ****  * \param: pin. the pin number defined by IOPORT_CREATE_PIN
 276:../../../platform/common/services/ioport/mega_rf/ioport.h ****  * \param: level high/low
 277:../../../platform/common/services/ioport/mega_rf/ioport.h ****  */
 278:../../../platform/common/services/ioport/mega_rf/ioport.h **** __always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
 279:../../../platform/common/services/ioport/mega_rf/ioport.h **** 		bool level)
 280:../../../platform/common/services/ioport/mega_rf/ioport.h **** {
 281:../../../platform/common/services/ioport/mega_rf/ioport.h **** 	PORT_t *base_add = arch_ioport_port_to_base(pin >> 3);
 282:../../../platform/common/services/ioport/mega_rf/ioport.h **** 
 283:../../../platform/common/services/ioport/mega_rf/ioport.h **** 	if (level) {
 284:../../../platform/common/services/ioport/mega_rf/ioport.h **** 		base_add->PORTDATA
 285:../../../platform/common/services/ioport/mega_rf/ioport.h **** 			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
 286:../../../platform/common/services/ioport/mega_rf/ioport.h **** 					(pin));
 287:../../../platform/common/services/ioport/mega_rf/ioport.h **** 	} else {
 288:../../../platform/common/services/ioport/mega_rf/ioport.h **** 		base_add->PORTDATA
 289:../../../platform/common/services/ioport/mega_rf/ioport.h **** 			= (base_add->PORTDATA  & (~arch_ioport_pin_to_mask
 290:../../../platform/common/services/ioport/mega_rf/ioport.h **** 					(pin)));
 291:../../../platform/common/services/ioport/mega_rf/ioport.h **** 	}
 292:../../../platform/common/services/ioport/mega_rf/ioport.h **** }
 293:../../../platform/common/services/ioport/mega_rf/ioport.h **** 
 294:../../../platform/common/services/ioport/mega_rf/ioport.h **** /**
 295:../../../platform/common/services/ioport/mega_rf/ioport.h ****  * \brief : Set port multiple pins level to high or low.
 296:../../../platform/common/services/ioport/mega_rf/ioport.h ****  * \param port GPIO port to configure  e.g. IOPORT_PORTB
 297:../../../platform/common/services/ioport/mega_rf/ioport.h ****  * \param: mask Pin mask of pins to configure.
 298:../../../platform/common/services/ioport/mega_rf/ioport.h ****  * \param: level high/low
 299:../../../platform/common/services/ioport/mega_rf/ioport.h ****  */
 300:../../../platform/common/services/ioport/mega_rf/ioport.h **** __always_inline static void arch_ioport_set_port_level(ioport_port_t port,
 301:../../../platform/common/services/ioport/mega_rf/ioport.h **** 		ioport_port_mask_t mask, ioport_port_mask_t level)
 302:../../../platform/common/services/ioport/mega_rf/ioport.h **** {
 303:../../../platform/common/services/ioport/mega_rf/ioport.h **** 	PORT_t *base = arch_ioport_port_to_base(port);
 304:../../../platform/common/services/ioport/mega_rf/ioport.h **** 
 305:../../../platform/common/services/ioport/mega_rf/ioport.h **** 	if (level) {
 306:../../../platform/common/services/ioport/mega_rf/ioport.h **** 		base->PORTDATA |= mask;
 307:../../../platform/common/services/ioport/mega_rf/ioport.h **** 	} else {
 308:../../../platform/common/services/ioport/mega_rf/ioport.h **** 		base->PORTDATA &= ~mask;
 309:../../../platform/common/services/ioport/mega_rf/ioport.h **** 	}
 310:../../../platform/common/services/ioport/mega_rf/ioport.h **** }
 311:../../../platform/common/services/ioport/mega_rf/ioport.h **** 
 312:../../../platform/common/services/ioport/mega_rf/ioport.h **** /**
 313:../../../platform/common/services/ioport/mega_rf/ioport.h ****  * \brief : Get pin level of pin.
 314:../../../platform/common/services/ioport/mega_rf/ioport.h ****  * \param: pin. the pin number defined by IOPORT_CREATE_PIN
 315:../../../platform/common/services/ioport/mega_rf/ioport.h ****  * \return: level high/low
 316:../../../platform/common/services/ioport/mega_rf/ioport.h ****  */
 317:../../../platform/common/services/ioport/mega_rf/ioport.h **** __always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
 318:../../../platform/common/services/ioport/mega_rf/ioport.h **** {
 319:../../../platform/common/services/ioport/mega_rf/ioport.h **** 	PORT_t *base = arch_ioport_pin_to_base(pin);
 320:../../../platform/common/services/ioport/mega_rf/ioport.h **** 	return base->PINCRL & arch_ioport_pin_to_mask(pin);
 321:../../../platform/common/services/ioport/mega_rf/ioport.h **** }
 322:../../../platform/common/services/ioport/mega_rf/ioport.h **** 
 323:../../../platform/common/services/ioport/mega_rf/ioport.h **** /**
 324:../../../platform/common/services/ioport/mega_rf/ioport.h ****  * \brief : Get multiple pins level of single port.
 325:../../../platform/common/services/ioport/mega_rf/ioport.h ****  * \param port GPIO port to configure  e.g. IOPORT_PORTB
 326:../../../platform/common/services/ioport/mega_rf/ioport.h ****  * \param mask Pin mask of pins to read data.
 327:../../../platform/common/services/ioport/mega_rf/ioport.h ****  * \return: 8 bit value based on level voltage on pins.
 328:../../../platform/common/services/ioport/mega_rf/ioport.h ****  */
 329:../../../platform/common/services/ioport/mega_rf/ioport.h **** __always_inline static ioport_port_mask_t arch_ioport_get_port_level(
 330:../../../platform/common/services/ioport/mega_rf/ioport.h **** 		ioport_port_t port, ioport_port_mask_t mask)
 331:../../../platform/common/services/ioport/mega_rf/ioport.h **** {
 332:../../../platform/common/services/ioport/mega_rf/ioport.h **** 	PORT_t *base = arch_ioport_port_to_base(port);
 333:../../../platform/common/services/ioport/mega_rf/ioport.h **** 
 334:../../../platform/common/services/ioport/mega_rf/ioport.h **** 	return (base->PINCRL & mask);
 335:../../../platform/common/services/ioport/mega_rf/ioport.h **** }
 336:../../../platform/common/services/ioport/mega_rf/ioport.h **** 
 337:../../../platform/common/services/ioport/mega_rf/ioport.h **** /**
 338:../../../platform/common/services/ioport/mega_rf/ioport.h ****  * \brief : To toggle the pin
 339:../../../platform/common/services/ioport/mega_rf/ioport.h ****  * \param: pin. the pin number defined by IOPORT_CREATE_PIN
 340:../../../platform/common/services/ioport/mega_rf/ioport.h ****  */
 341:../../../platform/common/services/ioport/mega_rf/ioport.h **** __always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
 342:../../../platform/common/services/ioport/mega_rf/ioport.h **** {
 343:../../../platform/common/services/ioport/mega_rf/ioport.h **** 	PORT_t *base = arch_ioport_pin_to_base(pin);
 344:../../../platform/common/services/ioport/mega_rf/ioport.h **** 
 345:../../../platform/common/services/ioport/mega_rf/ioport.h **** 	base->PINCRL = arch_ioport_pin_to_mask(pin);
 346:../../../platform/common/services/ioport/mega_rf/ioport.h **** }
 347:../../../platform/common/services/ioport/mega_rf/ioport.h **** 
 348:../../../platform/common/services/ioport/mega_rf/ioport.h **** /**
 349:../../../platform/common/services/ioport/mega_rf/ioport.h ****  * \brief : To toggle the multiple pins on a single port.
 350:../../../platform/common/services/ioport/mega_rf/ioport.h ****  * \param port GPIO port to toggle  e.g. IOPORT_PORTB
 351:../../../platform/common/services/ioport/mega_rf/ioport.h ****  * \param mask Pin mask of pins to read data.
 352:../../../platform/common/services/ioport/mega_rf/ioport.h ****  */
 353:../../../platform/common/services/ioport/mega_rf/ioport.h **** 
 354:../../../platform/common/services/ioport/mega_rf/ioport.h **** __always_inline static void arch_ioport_toggle_port_level(ioport_port_t port,
 355:../../../platform/common/services/ioport/mega_rf/ioport.h **** 		ioport_port_mask_t mask)
 356:../../../platform/common/services/ioport/mega_rf/ioport.h **** {
 357:../../../platform/common/services/ioport/mega_rf/ioport.h **** 	PORT_t *base = arch_ioport_port_to_base(port);
 358:../../../platform/common/services/ioport/mega_rf/ioport.h **** 
 359:../../../platform/common/services/ioport/mega_rf/ioport.h **** 	base->PINCRL = mask;
 360:../../../platform/common/services/ioport/mega_rf/ioport.h **** }
 361:../../../platform/common/services/ioport/mega_rf/ioport.h **** 
 362:../../../platform/common/services/ioport/mega_rf/ioport.h **** /**
 363:../../../platform/common/services/ioport/mega_rf/ioport.h ****  * \brief : To configure a single GPIO pin for trigger modes:
 364:../../../platform/common/services/ioport/mega_rf/ioport.h ****  *  sense the edge/level/both trigger.
 365:../../../platform/common/services/ioport/mega_rf/ioport.h ****  * \param: pin. the pin number defined by IOPORT_CREATE_PIN
 366:../../../platform/common/services/ioport/mega_rf/ioport.h ****  * \param pin_sense, refer to \ioport_sense.
 367:../../../platform/common/services/ioport/mega_rf/ioport.h ****  */
 368:../../../platform/common/services/ioport/mega_rf/ioport.h **** 
 369:../../../platform/common/services/ioport/mega_rf/ioport.h **** __always_inline static void arch_ioport_set_pin_sense_mode(ioport_pin_t pin,
 370:../../../platform/common/services/ioport/mega_rf/ioport.h **** 		enum ioport_sense pin_sense)
 371:../../../platform/common/services/ioport/mega_rf/ioport.h **** {
 372:../../../platform/common/services/ioport/mega_rf/ioport.h **** 	uint8_t flags = cpu_irq_save();
 373:../../../platform/common/services/ioport/mega_rf/ioport.h **** 	port_id_t port_id = arch_ioport_pin_to_port_id(pin);
 374:../../../platform/common/services/ioport/mega_rf/ioport.h **** #if  MEGA_XX0_1 || MEGA_RF
 375:../../../platform/common/services/ioport/mega_rf/ioport.h **** 	if (port_id == IOPORT_PORTD && ((pin & 0x07) < 0x04)) {
 376:../../../platform/common/services/ioport/mega_rf/ioport.h **** 		EICRA &= ~((0x03) << ((pin & 0x03) * 2));
 377:../../../platform/common/services/ioport/mega_rf/ioport.h **** 		EICRA |= pin_sense << ((pin & 0x03) * 2);
 378:../../../platform/common/services/ioport/mega_rf/ioport.h **** 	} else if (port_id == IOPORT_PORTE && ((pin & 0x07) > 0x03)) {
 379:../../../platform/common/services/ioport/mega_rf/ioport.h **** 		EICRB &= ~((0x03) << ((pin & 0x03) * 2));
 380:../../../platform/common/services/ioport/mega_rf/ioport.h **** 		EICRB |= pin_sense << ((pin & 0x03) * 2);
 381:../../../platform/common/services/ioport/mega_rf/ioport.h **** 	}
 382:../../../platform/common/services/ioport/mega_rf/ioport.h **** #endif
 383:../../../platform/common/services/ioport/mega_rf/ioport.h **** 
 384:../../../platform/common/services/ioport/mega_rf/ioport.h **** #if  MEGA_XX8
 385:../../../platform/common/services/ioport/mega_rf/ioport.h **** 	if (port_id == IOPORT_PORTD &&
 386:../../../platform/common/services/ioport/mega_rf/ioport.h **** 			((pin & 0x07) == 2 || (pin & 0x07) == 3)) {
 387:../../../platform/common/services/ioport/mega_rf/ioport.h **** 		EICRA &= ~((0x03) << (((pin & 0x03) - 2) * 2));
 388:../../../platform/common/services/ioport/mega_rf/ioport.h **** 		EICRA |= pin_sense << (((pin & 0x03) - 2) * 2);
 389:../../../platform/common/services/ioport/mega_rf/ioport.h **** 	}
 390:../../../platform/common/services/ioport/mega_rf/ioport.h **** #endif
 391:../../../platform/common/services/ioport/mega_rf/ioport.h **** 
 392:../../../platform/common/services/ioport/mega_rf/ioport.h **** #if  MEGA_XX4
 393:../../../platform/common/services/ioport/mega_rf/ioport.h **** 	if (port_id == IOPORT_PORTD &&
 394:../../../platform/common/services/ioport/mega_rf/ioport.h **** 			((pin & 0x07) == 2 || (pin & 0x07) == 3)) {
 395:../../../platform/common/services/ioport/mega_rf/ioport.h **** 		EICRA &= ~((0x03) << (((pin & 0x03) - 2) * 2));
 396:../../../platform/common/services/ioport/mega_rf/ioport.h **** 		EICRA |= pin_sense << (((pin & 0x03) - 2) * 2);
 397:../../../platform/common/services/ioport/mega_rf/ioport.h **** 	}
 398:../../../platform/common/services/ioport/mega_rf/ioport.h **** 
 399:../../../platform/common/services/ioport/mega_rf/ioport.h **** 	if (port_id == IOPORT_PORTB && ((pin & 0x07) == 2)) {
 400:../../../platform/common/services/ioport/mega_rf/ioport.h **** 		EICRA &= ~((0x03) << 4);
 401:../../../platform/common/services/ioport/mega_rf/ioport.h **** 		EICRA |= pin_sense << 4;
 402:../../../platform/common/services/ioport/mega_rf/ioport.h **** 	}
 403:../../../platform/common/services/ioport/mega_rf/ioport.h **** #endif
 404:../../../platform/common/services/ioport/mega_rf/ioport.h **** 	cpu_irq_restore(flags);
 405:../../../platform/common/services/ioport/mega_rf/ioport.h **** }
 406:../../../platform/common/services/ioport/mega_rf/ioport.h **** 
 407:../../../platform/common/services/ioport/mega_rf/ioport.h **** /**
 408:../../../platform/common/services/ioport/mega_rf/ioport.h ****  * \brief : To configure a multiple pins for trigger modes: sense the edge/
 409:../../../platform/common/services/ioport/mega_rf/ioport.h ****  *  level/both trigger.
 410:../../../platform/common/services/ioport/mega_rf/ioport.h ****  * \param: pin. the pin number defined by IOPORT_CREATE_PIN
 411:../../../platform/common/services/ioport/mega_rf/ioport.h ****  * \param pin_sense, refer to \ioport_sense.
 412:../../../platform/common/services/ioport/mega_rf/ioport.h ****  */
 413:../../../platform/common/services/ioport/mega_rf/ioport.h **** __always_inline static void arch_ioport_set_port_sense_mode(ioport_port_t port,
 414:../../../platform/common/services/ioport/mega_rf/ioport.h **** 		ioport_port_mask_t mask, enum ioport_sense pin_sense)
 415:../../../platform/common/services/ioport/mega_rf/ioport.h **** {
 416:../../../platform/common/services/ioport/mega_rf/ioport.h **** 	uint8_t flags = cpu_irq_save();
 417:../../../platform/common/services/ioport/mega_rf/ioport.h **** 
 418:../../../platform/common/services/ioport/mega_rf/ioport.h **** #if  !MEGA_UNSPECIFIED
 419:../../../platform/common/services/ioport/mega_rf/ioport.h **** 	if (port == IOPORT_PORTD) {
 420:../../../platform/common/services/ioport/mega_rf/ioport.h **** 		EICRA =  mask;
 421:../../../platform/common/services/ioport/mega_rf/ioport.h **** 		EICRA &= (pin_sense << 6) || (pin_sense << 4) ||
 422:../../../platform/common/services/ioport/mega_rf/ioport.h **** 				(pin_sense << 2) ||
 423:../../../platform/common/services/ioport/mega_rf/ioport.h **** 				(pin_sense);
 424:../../../platform/common/services/ioport/mega_rf/ioport.h **** 	}
 425:../../../platform/common/services/ioport/mega_rf/ioport.h **** #endif
 426:../../../platform/common/services/ioport/mega_rf/ioport.h **** #if  MEGA_XX8
 427:../../../platform/common/services/ioport/mega_rf/ioport.h **** 	if (port == IOPORT_PORTD) {
 428:../../../platform/common/services/ioport/mega_rf/ioport.h **** 		EICRA = mask;
 429:../../../platform/common/services/ioport/mega_rf/ioport.h **** 		EICRA &= (pin_sense << 2) || (pin_sense);
 430:../../../platform/common/services/ioport/mega_rf/ioport.h **** 	}
 431:../../../platform/common/services/ioport/mega_rf/ioport.h **** #endif
 432:../../../platform/common/services/ioport/mega_rf/ioport.h **** #if  MEGA_XX0_1 || MEGA_RF
 433:../../../platform/common/services/ioport/mega_rf/ioport.h **** 	else if (port == IOPORT_PORTE) {
 434:../../../platform/common/services/ioport/mega_rf/ioport.h **** 		EICRB = mask;
 435:../../../platform/common/services/ioport/mega_rf/ioport.h **** 		EICRB &= (pin_sense << 6) || (pin_sense << 4) ||
 436:../../../platform/common/services/ioport/mega_rf/ioport.h **** 				(pin_sense << 2) ||
 437:../../../platform/common/services/ioport/mega_rf/ioport.h **** 				(pin_sense);
 438:../../../platform/common/services/ioport/mega_rf/ioport.h **** 	}
 439:../../../platform/common/services/ioport/mega_rf/ioport.h **** #endif
 440:../../../platform/common/services/ioport/mega_rf/ioport.h **** 
 441:../../../platform/common/services/ioport/mega_rf/ioport.h **** 	cpu_irq_restore(flags);
 442:../../../platform/common/services/ioport/mega_rf/ioport.h **** }
 443:../../../platform/common/services/ioport/mega_rf/ioport.h **** 
 444:../../../platform/common/services/ioport/mega_rf/ioport.h **** /****************************************************************************
 445:../../../platform/common/services/ioport/mega_rf/ioport.h ****  *
 446:../../../platform/common/services/ioport/mega_rf/ioport.h ****  * Functional register are not available for this architecture through
 447:../../../platform/common/services/ioport/mega_rf/ioport.h ****  * IOPORT register.
 448:../../../platform/common/services/ioport/mega_rf/ioport.h ****  *
 449:../../../platform/common/services/ioport/mega_rf/ioport.h ****  *****************************************************************************/
 450:../../../platform/common/services/ioport/mega_rf/ioport.h **** __always_inline static void arch_ioport_init(void)
 451:../../../platform/common/services/ioport/mega_rf/ioport.h **** {
 452:../../../platform/common/services/ioport/mega_rf/ioport.h **** }
 453:../../../platform/common/services/ioport/mega_rf/ioport.h **** 
 454:../../../platform/common/services/ioport/mega_rf/ioport.h **** __always_inline static void arch_ioport_enable_pin(ioport_pin_t pin)
 455:../../../platform/common/services/ioport/mega_rf/ioport.h **** {
 456:../../../platform/common/services/ioport/mega_rf/ioport.h **** 	(void) pin;
 457:../../../platform/common/services/ioport/mega_rf/ioport.h **** }
 458:../../../platform/common/services/ioport/mega_rf/ioport.h **** 
 459:../../../platform/common/services/ioport/mega_rf/ioport.h **** __always_inline static void arch_ioport_enable_port(ioport_port_t port,
 460:../../../platform/common/services/ioport/mega_rf/ioport.h **** 		ioport_port_mask_t mask)
 461:../../../platform/common/services/ioport/mega_rf/ioport.h **** {
 462:../../../platform/common/services/ioport/mega_rf/ioport.h **** 	(void) port;
 463:../../../platform/common/services/ioport/mega_rf/ioport.h **** 	(void) mask;
 464:../../../platform/common/services/ioport/mega_rf/ioport.h **** }
 465:../../../platform/common/services/ioport/mega_rf/ioport.h **** 
 466:../../../platform/common/services/ioport/mega_rf/ioport.h **** __always_inline static void arch_ioport_disable_pin(ioport_pin_t pin)
 467:../../../platform/common/services/ioport/mega_rf/ioport.h **** {
 468:../../../platform/common/services/ioport/mega_rf/ioport.h **** 	(void) pin;
 469:../../../platform/common/services/ioport/mega_rf/ioport.h **** }
 470:../../../platform/common/services/ioport/mega_rf/ioport.h **** 
 471:../../../platform/common/services/ioport/mega_rf/ioport.h **** __always_inline static void arch_ioport_disable_port(ioport_port_t port,
 472:../../../platform/common/services/ioport/mega_rf/ioport.h **** 		ioport_port_mask_t mask)
 473:../../../platform/common/services/ioport/mega_rf/ioport.h **** {
 474:../../../platform/common/services/ioport/mega_rf/ioport.h **** 	(void) port;
 475:../../../platform/common/services/ioport/mega_rf/ioport.h **** 	(void) mask;
 476:../../../platform/common/services/ioport/mega_rf/ioport.h **** }
 477:../../../platform/common/services/ioport/mega_rf/ioport.h **** 
 478:../../../platform/common/services/ioport/mega_rf/ioport.h **** /****************************************************************************/
 479:../../../platform/common/services/ioport/mega_rf/ioport.h **** 
 480:../../../platform/common/services/ioport/mega_rf/ioport.h **** /**
 481:../../../platform/common/services/ioport/mega_rf/ioport.h ****  * \brief : To get the port address pointer from pin
 482:../../../platform/common/services/ioport/mega_rf/ioport.h ****  * \param: pin. the pin number defined by IOPORT_CREATE_PIN
 483:../../../platform/common/services/ioport/mega_rf/ioport.h ****  * \return pointer to base address of ports(8 bit)
 484:../../../platform/common/services/ioport/mega_rf/ioport.h ****  */
 485:../../../platform/common/services/ioport/mega_rf/ioport.h **** __always_inline static inline PORT_t *ioport_pin_to_port(port_pin_t pin)
 486:../../../platform/common/services/ioport/mega_rf/ioport.h **** {
 487:../../../platform/common/services/ioport/mega_rf/ioport.h **** 	return arch_ioport_pin_to_base(pin);
 488:../../../platform/common/services/ioport/mega_rf/ioport.h **** }
 489:../../../platform/common/services/ioport/mega_rf/ioport.h **** 
 490:../../../platform/common/services/ioport/mega_rf/ioport.h **** /**
 491:../../../platform/common/services/ioport/mega_rf/ioport.h ****  * \brief : To get the port address pointer from port number
 492:../../../platform/common/services/ioport/mega_rf/ioport.h ****  * \param port GPIO port to toggle  e.g. IOPORT_PORTB
 493:../../../platform/common/services/ioport/mega_rf/ioport.h ****  * \return pointer to base address of ports(8 bit)
 494:../../../platform/common/services/ioport/mega_rf/ioport.h ****  */
 495:../../../platform/common/services/ioport/mega_rf/ioport.h **** 
 496:../../../platform/common/services/ioport/mega_rf/ioport.h **** __always_inline static inline PORT_t *ioport_id_pin_to_port(port_id_t port)
 497:../../../platform/common/services/ioport/mega_rf/ioport.h **** {
 498:../../../platform/common/services/ioport/mega_rf/ioport.h **** 	return arch_ioport_port_to_base(port);
 499:../../../platform/common/services/ioport/mega_rf/ioport.h **** }
 500:../../../platform/common/services/ioport/mega_rf/ioport.h **** 
 501:../../../platform/common/services/ioport/mega_rf/ioport.h **** /**
 502:../../../platform/common/services/ioport/mega_rf/ioport.h ****  * \brief Configure the IO PORT pin function for a set of pins on a port
 503:../../../platform/common/services/ioport/mega_rf/ioport.h ****  *
 504:../../../platform/common/services/ioport/mega_rf/ioport.h ****  * \param port Pointer to the port
 505:../../../platform/common/services/ioport/mega_rf/ioport.h ****  * \param pin_mask Mask containing the pins that should be configured
 506:../../../platform/common/services/ioport/mega_rf/ioport.h ****  * \param flags Bitmask of flags specifying additional configuration
 507:../../../platform/common/services/ioport/mega_rf/ioport.h ****  * parameters.
 508:../../../platform/common/services/ioport/mega_rf/ioport.h ****  */
 509:../../../platform/common/services/ioport/mega_rf/ioport.h **** __always_inline static inline void ioport_configure_port_pin(void *port,
 510:../../../platform/common/services/ioport/mega_rf/ioport.h **** 		pin_mask_t pin_mask,
 511:../../../platform/common/services/ioport/mega_rf/ioport.h **** 		port_pin_flags_t flags)
 512:../../../platform/common/services/ioport/mega_rf/ioport.h **** {
 513:../../../platform/common/services/ioport/mega_rf/ioport.h **** 	/* Select direction and initial pin state */
 514:../../../platform/common/services/ioport/mega_rf/ioport.h **** 	if (flags & IOPORT_DIR_OUTPUT) {
 850               		.loc 3 514 0
 851 0384 8985      		ldd r24,Y+9
 852 0386 9A85      		ldd r25,Y+10
 853 0388 8170      		andi r24,1
 854 038a 9927      		clr r25
 855 038c 892B      		or r24,r25
 856 038e 01F0      		breq .L29
 515:../../../platform/common/services/ioport/mega_rf/ioport.h **** 		if (flags & IOPORT_INIT_HIGH) {
 857               		.loc 3 515 0
 858 0390 8985      		ldd r24,Y+9
 859 0392 9A85      		ldd r25,Y+10
 860 0394 8270      		andi r24,2
 861 0396 9927      		clr r25
 862 0398 892B      		or r24,r25
 863 039a 01F0      		breq .L30
 516:../../../platform/common/services/ioport/mega_rf/ioport.h **** 			*((uint8_t *)port + 2) |= pin_mask;
 864               		.loc 3 516 0
 865 039c 8E81      		ldd r24,Y+6
 866 039e 9F81      		ldd r25,Y+7
 867 03a0 0296      		adiw r24,2
 868 03a2 2E81      		ldd r18,Y+6
 869 03a4 3F81      		ldd r19,Y+7
 870 03a6 2E5F      		subi r18,-2
 871 03a8 3F4F      		sbci r19,-1
 872 03aa F901      		movw r30,r18
 873 03ac 3081      		ld r19,Z
 874 03ae 2885      		ldd r18,Y+8
 875 03b0 232B      		or r18,r19
 876 03b2 FC01      		movw r30,r24
 877 03b4 2083      		st Z,r18
 878 03b6 00C0      		rjmp .L31
 879               	.L30:
 517:../../../platform/common/services/ioport/mega_rf/ioport.h **** 		} else {
 518:../../../platform/common/services/ioport/mega_rf/ioport.h **** 			*((uint8_t *)port + 2) &= ~pin_mask;
 880               		.loc 3 518 0
 881 03b8 8E81      		ldd r24,Y+6
 882 03ba 9F81      		ldd r25,Y+7
 883 03bc 0296      		adiw r24,2
 884 03be 2E81      		ldd r18,Y+6
 885 03c0 3F81      		ldd r19,Y+7
 886 03c2 2E5F      		subi r18,-2
 887 03c4 3F4F      		sbci r19,-1
 888 03c6 F901      		movw r30,r18
 889 03c8 2081      		ld r18,Z
 890 03ca 322F      		mov r19,r18
 891 03cc 2885      		ldd r18,Y+8
 892 03ce 2095      		com r18
 893 03d0 2323      		and r18,r19
 894 03d2 FC01      		movw r30,r24
 895 03d4 2083      		st Z,r18
 896               	.L31:
 519:../../../platform/common/services/ioport/mega_rf/ioport.h **** 		}
 520:../../../platform/common/services/ioport/mega_rf/ioport.h **** 
 521:../../../platform/common/services/ioport/mega_rf/ioport.h **** 		*((uint8_t *)port + 1) |= pin_mask;
 897               		.loc 3 521 0
 898 03d6 8E81      		ldd r24,Y+6
 899 03d8 9F81      		ldd r25,Y+7
 900 03da 0196      		adiw r24,1
 901 03dc 2E81      		ldd r18,Y+6
 902 03de 3F81      		ldd r19,Y+7
 903 03e0 2F5F      		subi r18,-1
 904 03e2 3F4F      		sbci r19,-1
 905 03e4 F901      		movw r30,r18
 906 03e6 3081      		ld r19,Z
 907 03e8 2885      		ldd r18,Y+8
 908 03ea 232B      		or r18,r19
 909 03ec FC01      		movw r30,r24
 910 03ee 2083      		st Z,r18
 911 03f0 00C0      		rjmp .L25
 912               	.L29:
 522:../../../platform/common/services/ioport/mega_rf/ioport.h **** 	} else {
 523:../../../platform/common/services/ioport/mega_rf/ioport.h **** 		*((uint8_t *)port + 1) &= ~pin_mask;
 913               		.loc 3 523 0
 914 03f2 8E81      		ldd r24,Y+6
 915 03f4 9F81      		ldd r25,Y+7
 916 03f6 0196      		adiw r24,1
 917 03f8 2E81      		ldd r18,Y+6
 918 03fa 3F81      		ldd r19,Y+7
 919 03fc 2F5F      		subi r18,-1
 920 03fe 3F4F      		sbci r19,-1
 921 0400 F901      		movw r30,r18
 922 0402 2081      		ld r18,Z
 923 0404 322F      		mov r19,r18
 924 0406 2885      		ldd r18,Y+8
 925 0408 2095      		com r18
 926 040a 2323      		and r18,r19
 927 040c FC01      		movw r30,r24
 928 040e 2083      		st Z,r18
 524:../../../platform/common/services/ioport/mega_rf/ioport.h **** 		if (flags & IOPORT_PULL_UP) {
 929               		.loc 3 524 0
 930 0410 8985      		ldd r24,Y+9
 931 0412 9A85      		ldd r25,Y+10
 932 0414 8470      		andi r24,4
 933 0416 9927      		clr r25
 934 0418 892B      		or r24,r25
 935 041a 01F0      		breq .L32
 525:../../../platform/common/services/ioport/mega_rf/ioport.h **** 			*((uint8_t *)port + 2) |= pin_mask;
 936               		.loc 3 525 0
 937 041c 8E81      		ldd r24,Y+6
 938 041e 9F81      		ldd r25,Y+7
 939 0420 0296      		adiw r24,2
 940 0422 2E81      		ldd r18,Y+6
 941 0424 3F81      		ldd r19,Y+7
 942 0426 2E5F      		subi r18,-2
 943 0428 3F4F      		sbci r19,-1
 944 042a F901      		movw r30,r18
 945 042c 3081      		ld r19,Z
 946 042e 2885      		ldd r18,Y+8
 947 0430 232B      		or r18,r19
 948 0432 FC01      		movw r30,r24
 949 0434 2083      		st Z,r18
 950 0436 00C0      		rjmp .L25
 951               	.L32:
 526:../../../platform/common/services/ioport/mega_rf/ioport.h **** 		} else {
 527:../../../platform/common/services/ioport/mega_rf/ioport.h **** 			*((uint8_t *)port + 2) &= ~pin_mask;
 952               		.loc 3 527 0
 953 0438 8E81      		ldd r24,Y+6
 954 043a 9F81      		ldd r25,Y+7
 955 043c 0296      		adiw r24,2
 956 043e 2E81      		ldd r18,Y+6
 957 0440 3F81      		ldd r19,Y+7
 958 0442 2E5F      		subi r18,-2
 959 0444 3F4F      		sbci r19,-1
 960 0446 F901      		movw r30,r18
 961 0448 2081      		ld r18,Z
 962 044a 322F      		mov r19,r18
 963 044c 2885      		ldd r18,Y+8
 964 044e 2095      		com r18
 965 0450 2323      		and r18,r19
 966 0452 FC01      		movw r30,r24
 967 0454 2083      		st Z,r18
 968               	.L25:
 969               	.LBE35:
 970               	.LBE34:
 120:../../../platform/mega_rf/drivers/usart/usart_megarf.c **** 				ioport_pin_to_mask(sck_pin),
 121:../../../platform/mega_rf/drivers/usart/usart_megarf.c **** 				IOPORT_DIR_OUTPUT | IOPORT_INIT_HIGH );
 122:../../../platform/mega_rf/drivers/usart/usart_megarf.c **** 	}
 123:../../../platform/mega_rf/drivers/usart/usart_megarf.c **** #endif
 124:../../../platform/mega_rf/drivers/usart/usart_megarf.c **** #ifdef USARTA1
 125:../../../platform/mega_rf/drivers/usart/usart_megarf.c **** 	if ((uintptr_t)usart == (uintptr_t)&UCSR1A) {
 971               		.loc 5 125 0
 972 0456 8A89      		ldd r24,Y+18
 973 0458 9B89      		ldd r25,Y+19
 974 045a 883C      		cpi r24,-56
 975 045c 9105      		cpc r25,__zero_reg__
 976 045e 01F0      		breq .+2
 977 0460 00C0      		rjmp .L33
 126:../../../platform/mega_rf/drivers/usart/usart_megarf.c **** 		sck_pin = IOPORT_CREATE_PIN(PORTD, 5);
 978               		.loc 5 126 0
 979 0462 8DE1      		ldi r24,lo8(29)
 980 0464 8983      		std Y+1,r24
 127:../../../platform/mega_rf/drivers/usart/usart_megarf.c **** 		ioport_configure_port_pin(ioport_pin_to_port(sck_pin),
 981               		.loc 5 127 0
 982 0466 8981      		ldd r24,Y+1
 983 0468 0E94 0000 		call ioport_pin_to_mask
 984 046c 482F      		mov r20,r24
 985 046e 8981      		ldd r24,Y+1
 986 0470 8D83      		std Y+5,r24
 987 0472 8D81      		ldd r24,Y+5
 988 0474 888B      		std Y+16,r24
 989               	.LBB36:
 990               	.LBB37:
 991               	.LBB38:
 992               	.LBB39:
 179:../../../platform/common/services/ioport/mega_rf/ioport.h **** }
 993               		.loc 3 179 0
 994 0476 8889      		ldd r24,Y+16
 995 0478 8695      		lsr r24
 996 047a 8695      		lsr r24
 997 047c 8695      		lsr r24
 998 047e 898B      		std Y+17,r24
 999               	.LBB40:
 1000               	.LBB41:
 170:../../../platform/common/services/ioport/mega_rf/ioport.h **** }
 1001               		.loc 3 170 0
 1002 0480 8989      		ldd r24,Y+17
 1003 0482 282F      		mov r18,r24
 1004 0484 30E0      		ldi r19,0
 1005 0486 C901      		movw r24,r18
 1006 0488 880F      		lsl r24
 1007 048a 991F      		rol r25
 1008 048c 820F      		add r24,r18
 1009 048e 931F      		adc r25,r19
 169:../../../platform/common/services/ioport/mega_rf/ioport.h **** 	       (port * IOPORT_PORT_OFFSET)));
 1010               		.loc 3 169 0
 1011 0490 8096      		adiw r24,32
 1012 0492 9B83      		std Y+3,r25
 1013 0494 8A83      		std Y+2,r24
 1014 0496 4D87      		std Y+13,r20
 1015 0498 83E0      		ldi r24,lo8(3)
 1016 049a 90E0      		ldi r25,0
 1017 049c 9F87      		std Y+15,r25
 1018 049e 8E87      		std Y+14,r24
 1019               	.LBE41:
 1020               	.LBE40:
 1021               	.LBE39:
 1022               	.LBE38:
 1023               	.LBE37:
 1024               	.LBE36:
 1025               	.LBB42:
 1026               	.LBB43:
 514:../../../platform/common/services/ioport/mega_rf/ioport.h **** 		if (flags & IOPORT_INIT_HIGH) {
 1027               		.loc 3 514 0
 1028 04a0 8E85      		ldd r24,Y+14
 1029 04a2 9F85      		ldd r25,Y+15
 1030 04a4 8170      		andi r24,1
 1031 04a6 9927      		clr r25
 1032 04a8 892B      		or r24,r25
 1033 04aa 01F0      		breq .L37
 515:../../../platform/common/services/ioport/mega_rf/ioport.h **** 			*((uint8_t *)port + 2) |= pin_mask;
 1034               		.loc 3 515 0
 1035 04ac 8E85      		ldd r24,Y+14
 1036 04ae 9F85      		ldd r25,Y+15
 1037 04b0 8270      		andi r24,2
 1038 04b2 9927      		clr r25
 1039 04b4 892B      		or r24,r25
 1040 04b6 01F0      		breq .L38
 516:../../../platform/common/services/ioport/mega_rf/ioport.h **** 		} else {
 1041               		.loc 3 516 0
 1042 04b8 8A81      		ldd r24,Y+2
 1043 04ba 9B81      		ldd r25,Y+3
 1044 04bc 0296      		adiw r24,2
 1045 04be 2A81      		ldd r18,Y+2
 1046 04c0 3B81      		ldd r19,Y+3
 1047 04c2 2E5F      		subi r18,-2
 1048 04c4 3F4F      		sbci r19,-1
 1049 04c6 F901      		movw r30,r18
 1050 04c8 3081      		ld r19,Z
 1051 04ca 2D85      		ldd r18,Y+13
 1052 04cc 232B      		or r18,r19
 1053 04ce FC01      		movw r30,r24
 1054 04d0 2083      		st Z,r18
 1055 04d2 00C0      		rjmp .L39
 1056               	.L38:
 518:../../../platform/common/services/ioport/mega_rf/ioport.h **** 		}
 1057               		.loc 3 518 0
 1058 04d4 8A81      		ldd r24,Y+2
 1059 04d6 9B81      		ldd r25,Y+3
 1060 04d8 0296      		adiw r24,2
 1061 04da 2A81      		ldd r18,Y+2
 1062 04dc 3B81      		ldd r19,Y+3
 1063 04de 2E5F      		subi r18,-2
 1064 04e0 3F4F      		sbci r19,-1
 1065 04e2 F901      		movw r30,r18
 1066 04e4 2081      		ld r18,Z
 1067 04e6 322F      		mov r19,r18
 1068 04e8 2D85      		ldd r18,Y+13
 1069 04ea 2095      		com r18
 1070 04ec 2323      		and r18,r19
 1071 04ee FC01      		movw r30,r24
 1072 04f0 2083      		st Z,r18
 1073               	.L39:
 521:../../../platform/common/services/ioport/mega_rf/ioport.h **** 	} else {
 1074               		.loc 3 521 0
 1075 04f2 8A81      		ldd r24,Y+2
 1076 04f4 9B81      		ldd r25,Y+3
 1077 04f6 0196      		adiw r24,1
 1078 04f8 2A81      		ldd r18,Y+2
 1079 04fa 3B81      		ldd r19,Y+3
 1080 04fc 2F5F      		subi r18,-1
 1081 04fe 3F4F      		sbci r19,-1
 1082 0500 F901      		movw r30,r18
 1083 0502 3081      		ld r19,Z
 1084 0504 2D85      		ldd r18,Y+13
 1085 0506 232B      		or r18,r19
 1086 0508 FC01      		movw r30,r24
 1087 050a 2083      		st Z,r18
 1088 050c 00C0      		rjmp .L33
 1089               	.L37:
 523:../../../platform/common/services/ioport/mega_rf/ioport.h **** 		if (flags & IOPORT_PULL_UP) {
 1090               		.loc 3 523 0
 1091 050e 8A81      		ldd r24,Y+2
 1092 0510 9B81      		ldd r25,Y+3
 1093 0512 0196      		adiw r24,1
 1094 0514 2A81      		ldd r18,Y+2
 1095 0516 3B81      		ldd r19,Y+3
 1096 0518 2F5F      		subi r18,-1
 1097 051a 3F4F      		sbci r19,-1
 1098 051c F901      		movw r30,r18
 1099 051e 2081      		ld r18,Z
 1100 0520 322F      		mov r19,r18
 1101 0522 2D85      		ldd r18,Y+13
 1102 0524 2095      		com r18
 1103 0526 2323      		and r18,r19
 1104 0528 FC01      		movw r30,r24
 1105 052a 2083      		st Z,r18
 524:../../../platform/common/services/ioport/mega_rf/ioport.h **** 			*((uint8_t *)port + 2) |= pin_mask;
 1106               		.loc 3 524 0
 1107 052c 8E85      		ldd r24,Y+14
 1108 052e 9F85      		ldd r25,Y+15
 1109 0530 8470      		andi r24,4
 1110 0532 9927      		clr r25
 1111 0534 892B      		or r24,r25
 1112 0536 01F0      		breq .L40
 525:../../../platform/common/services/ioport/mega_rf/ioport.h **** 		} else {
 1113               		.loc 3 525 0
 1114 0538 8A81      		ldd r24,Y+2
 1115 053a 9B81      		ldd r25,Y+3
 1116 053c 0296      		adiw r24,2
 1117 053e 2A81      		ldd r18,Y+2
 1118 0540 3B81      		ldd r19,Y+3
 1119 0542 2E5F      		subi r18,-2
 1120 0544 3F4F      		sbci r19,-1
 1121 0546 F901      		movw r30,r18
 1122 0548 3081      		ld r19,Z
 1123 054a 2D85      		ldd r18,Y+13
 1124 054c 232B      		or r18,r19
 1125 054e FC01      		movw r30,r24
 1126 0550 2083      		st Z,r18
 1127 0552 00C0      		rjmp .L33
 1128               	.L40:
 1129               		.loc 3 527 0
 1130 0554 8A81      		ldd r24,Y+2
 1131 0556 9B81      		ldd r25,Y+3
 1132 0558 0296      		adiw r24,2
 1133 055a 2A81      		ldd r18,Y+2
 1134 055c 3B81      		ldd r19,Y+3
 1135 055e 2E5F      		subi r18,-2
 1136 0560 3F4F      		sbci r19,-1
 1137 0562 F901      		movw r30,r18
 1138 0564 2081      		ld r18,Z
 1139 0566 322F      		mov r19,r18
 1140 0568 2D85      		ldd r18,Y+13
 1141 056a 2095      		com r18
 1142 056c 2323      		and r18,r19
 1143 056e FC01      		movw r30,r24
 1144 0570 2083      		st Z,r18
 1145               	.L33:
 1146               	.LBE43:
 1147               	.LBE42:
 128:../../../platform/mega_rf/drivers/usart/usart_megarf.c **** 				ioport_pin_to_mask(sck_pin),
 129:../../../platform/mega_rf/drivers/usart/usart_megarf.c **** 				IOPORT_DIR_OUTPUT | IOPORT_INIT_HIGH );
 130:../../../platform/mega_rf/drivers/usart/usart_megarf.c **** 	}
 131:../../../platform/mega_rf/drivers/usart/usart_megarf.c **** #endif
 132:../../../platform/mega_rf/drivers/usart/usart_megarf.c **** 	if (opt->spimode == 1 || opt->spimode == 3) {
 1148               		.loc 5 132 0
 1149 0572 8C89      		ldd r24,Y+20
 1150 0574 9D89      		ldd r25,Y+21
 1151 0576 FC01      		movw r30,r24
 1152 0578 8481      		ldd r24,Z+4
 1153 057a 8130      		cpi r24,lo8(1)
 1154 057c 01F0      		breq .L41
 1155               		.loc 5 132 0 is_stmt 0 discriminator 1
 1156 057e 8C89      		ldd r24,Y+20
 1157 0580 9D89      		ldd r25,Y+21
 1158 0582 FC01      		movw r30,r24
 1159 0584 8481      		ldd r24,Z+4
 1160 0586 8330      		cpi r24,lo8(3)
 1161 0588 01F4      		brne .L42
 1162               	.L41:
 133:../../../platform/mega_rf/drivers/usart/usart_megarf.c **** 		usart->UCSRnC |= USART_UCPHA_bm;
 1163               		.loc 5 133 0 is_stmt 1
 1164 058a 8A89      		ldd r24,Y+18
 1165 058c 9B89      		ldd r25,Y+19
 1166 058e FC01      		movw r30,r24
 1167 0590 8281      		ldd r24,Z+2
 1168 0592 282F      		mov r18,r24
 1169 0594 2260      		ori r18,lo8(2)
 1170 0596 8A89      		ldd r24,Y+18
 1171 0598 9B89      		ldd r25,Y+19
 1172 059a FC01      		movw r30,r24
 1173 059c 2283      		std Z+2,r18
 1174 059e 00C0      		rjmp .L43
 1175               	.L42:
 134:../../../platform/mega_rf/drivers/usart/usart_megarf.c **** 	} else {
 135:../../../platform/mega_rf/drivers/usart/usart_megarf.c **** 		usart->UCSRnC &= ~USART_UCPHA_bm;
 1176               		.loc 5 135 0
 1177 05a0 8A89      		ldd r24,Y+18
 1178 05a2 9B89      		ldd r25,Y+19
 1179 05a4 FC01      		movw r30,r24
 1180 05a6 8281      		ldd r24,Z+2
 1181 05a8 282F      		mov r18,r24
 1182 05aa 2D7F      		andi r18,lo8(-3)
 1183 05ac 8A89      		ldd r24,Y+18
 1184 05ae 9B89      		ldd r25,Y+19
 1185 05b0 FC01      		movw r30,r24
 1186 05b2 2283      		std Z+2,r18
 1187               	.L43:
 136:../../../platform/mega_rf/drivers/usart/usart_megarf.c **** 	}
 137:../../../platform/mega_rf/drivers/usart/usart_megarf.c **** 	if (opt->spimode == 2 || opt->spimode == 3) {
 1188               		.loc 5 137 0
 1189 05b4 8C89      		ldd r24,Y+20
 1190 05b6 9D89      		ldd r25,Y+21
 1191 05b8 FC01      		movw r30,r24
 1192 05ba 8481      		ldd r24,Z+4
 1193 05bc 8230      		cpi r24,lo8(2)
 1194 05be 01F0      		breq .L44
 1195               		.loc 5 137 0 is_stmt 0 discriminator 1
 1196 05c0 8C89      		ldd r24,Y+20
 1197 05c2 9D89      		ldd r25,Y+21
 1198 05c4 FC01      		movw r30,r24
 1199 05c6 8481      		ldd r24,Z+4
 1200 05c8 8330      		cpi r24,lo8(3)
 1201 05ca 01F4      		brne .L45
 1202               	.L44:
 138:../../../platform/mega_rf/drivers/usart/usart_megarf.c **** 		usart->UCSRnC |= USART_UCPOL_bm;
 1203               		.loc 5 138 0 is_stmt 1
 1204 05cc 8A89      		ldd r24,Y+18
 1205 05ce 9B89      		ldd r25,Y+19
 1206 05d0 FC01      		movw r30,r24
 1207 05d2 8281      		ldd r24,Z+2
 1208 05d4 282F      		mov r18,r24
 1209 05d6 2160      		ori r18,lo8(1)
 1210 05d8 8A89      		ldd r24,Y+18
 1211 05da 9B89      		ldd r25,Y+19
 1212 05dc FC01      		movw r30,r24
 1213 05de 2283      		std Z+2,r18
 1214 05e0 00C0      		rjmp .L46
 1215               	.L45:
 139:../../../platform/mega_rf/drivers/usart/usart_megarf.c **** 	} else {
 140:../../../platform/mega_rf/drivers/usart/usart_megarf.c **** 		usart->UCSRnC &= ~USART_UCPOL_bm;
 1216               		.loc 5 140 0
 1217 05e2 8A89      		ldd r24,Y+18
 1218 05e4 9B89      		ldd r25,Y+19
 1219 05e6 FC01      		movw r30,r24
 1220 05e8 8281      		ldd r24,Z+2
 1221 05ea 282F      		mov r18,r24
 1222 05ec 2E7F      		andi r18,lo8(-2)
 1223 05ee 8A89      		ldd r24,Y+18
 1224 05f0 9B89      		ldd r25,Y+19
 1225 05f2 FC01      		movw r30,r24
 1226 05f4 2283      		std Z+2,r18
 1227               	.L46:
 141:../../../platform/mega_rf/drivers/usart/usart_megarf.c **** 	}	
 142:../../../platform/mega_rf/drivers/usart/usart_megarf.c **** 	
 143:../../../platform/mega_rf/drivers/usart/usart_megarf.c **** 	if (opt->data_order) {
 1228               		.loc 5 143 0
 1229 05f6 8C89      		ldd r24,Y+20
 1230 05f8 9D89      		ldd r25,Y+21
 1231 05fa FC01      		movw r30,r24
 1232 05fc 8581      		ldd r24,Z+5
 1233 05fe 8823      		tst r24
 1234 0600 01F0      		breq .L47
 144:../../../platform/mega_rf/drivers/usart/usart_megarf.c **** 		usart->UCSRnC |= USART_DORD_bm;
 1235               		.loc 5 144 0
 1236 0602 8A89      		ldd r24,Y+18
 1237 0604 9B89      		ldd r25,Y+19
 1238 0606 FC01      		movw r30,r24
 1239 0608 8281      		ldd r24,Z+2
 1240 060a 282F      		mov r18,r24
 1241 060c 2460      		ori r18,lo8(4)
 1242 060e 8A89      		ldd r24,Y+18
 1243 0610 9B89      		ldd r25,Y+19
 1244 0612 FC01      		movw r30,r24
 1245 0614 2283      		std Z+2,r18
 1246 0616 00C0      		rjmp .L48
 1247               	.L47:
 145:../../../platform/mega_rf/drivers/usart/usart_megarf.c **** 	} else {
 146:../../../platform/mega_rf/drivers/usart/usart_megarf.c **** 		usart->UCSRnC &= ~USART_DORD_bm;
 1248               		.loc 5 146 0
 1249 0618 8A89      		ldd r24,Y+18
 1250 061a 9B89      		ldd r25,Y+19
 1251 061c FC01      		movw r30,r24
 1252 061e 8281      		ldd r24,Z+2
 1253 0620 282F      		mov r18,r24
 1254 0622 2B7F      		andi r18,lo8(-5)
 1255 0624 8A89      		ldd r24,Y+18
 1256 0626 9B89      		ldd r25,Y+19
 1257 0628 FC01      		movw r30,r24
 1258 062a 2283      		std Z+2,r18
 1259               	.L48:
 147:../../../platform/mega_rf/drivers/usart/usart_megarf.c **** 	}
 148:../../../platform/mega_rf/drivers/usart/usart_megarf.c **** 	
 149:../../../platform/mega_rf/drivers/usart/usart_megarf.c **** 	
 150:../../../platform/mega_rf/drivers/usart/usart_megarf.c **** 	usart_spi_set_baudrate(usart, opt->baudrate,
 1260               		.loc 5 150 0
 1261 062c 0E94 0000 		call sysclk_get_source_clock_hz
 1262 0630 9B01      		movw r18,r22
 1263 0632 AC01      		movw r20,r24
 1264 0634 8C89      		ldd r24,Y+20
 1265 0636 9D89      		ldd r25,Y+21
 1266 0638 FC01      		movw r30,r24
 1267 063a 8081      		ld r24,Z
 1268 063c 9181      		ldd r25,Z+1
 1269 063e A281      		ldd r26,Z+2
 1270 0640 B381      		ldd r27,Z+3
 1271 0642 EA89      		ldd r30,Y+18
 1272 0644 FB89      		ldd r31,Y+19
 1273 0646 8901      		movw r16,r18
 1274 0648 9A01      		movw r18,r20
 1275 064a AC01      		movw r20,r24
 1276 064c BD01      		movw r22,r26
 1277 064e CF01      		movw r24,r30
 1278 0650 0E94 0000 		call usart_spi_set_baudrate
 151:../../../platform/mega_rf/drivers/usart/usart_megarf.c **** 			sysclk_get_source_clock_hz());
 152:../../../platform/mega_rf/drivers/usart/usart_megarf.c **** 	usart_tx_enable(usart);
 1279               		.loc 5 152 0
 1280 0654 8A89      		ldd r24,Y+18
 1281 0656 9B89      		ldd r25,Y+19
 1282 0658 0E94 0000 		call usart_tx_enable
 153:../../../platform/mega_rf/drivers/usart/usart_megarf.c **** 	usart_rx_enable(usart);
 1283               		.loc 5 153 0
 1284 065c 8A89      		ldd r24,Y+18
 1285 065e 9B89      		ldd r25,Y+19
 1286 0660 0E94 0000 		call usart_rx_enable
 154:../../../platform/mega_rf/drivers/usart/usart_megarf.c **** }
 1287               		.loc 5 154 0
 1288 0664 0000      		nop
 1289               	/* epilogue start */
 1290 0666 6596      		adiw r28,21
 1291 0668 0FB6      		in __tmp_reg__,__SREG__
 1292 066a F894      		cli
 1293 066c DEBF      		out __SP_H__,r29
 1294 066e 0FBE      		out __SREG__,__tmp_reg__
 1295 0670 CDBF      		out __SP_L__,r28
 1296 0672 DF91      		pop r29
 1297 0674 CF91      		pop r28
 1298 0676 1F91      		pop r17
 1299 0678 0F91      		pop r16
 1300 067a 0895      		ret
 1301               		.cfi_endproc
 1302               	.LFE97:
 1304               	.global	usart_putchar
 1306               	usart_putchar:
 1307               	.LFB98:
 155:../../../platform/mega_rf/drivers/usart/usart_megarf.c **** 
 156:../../../platform/mega_rf/drivers/usart/usart_megarf.c **** /**
 157:../../../platform/mega_rf/drivers/usart/usart_megarf.c ****  * \brief Send a data with the USART module
 158:../../../platform/mega_rf/drivers/usart/usart_megarf.c ****  *
 159:../../../platform/mega_rf/drivers/usart/usart_megarf.c ****  * This function outputs a data using the USART module.
 160:../../../platform/mega_rf/drivers/usart/usart_megarf.c ****  *
 161:../../../platform/mega_rf/drivers/usart/usart_megarf.c ****  * \param usart The USART module.
 162:../../../platform/mega_rf/drivers/usart/usart_megarf.c ****  * \param c The data to send.
 163:../../../platform/mega_rf/drivers/usart/usart_megarf.c ****  *
 164:../../../platform/mega_rf/drivers/usart/usart_megarf.c ****  * \return STATUS_OK
 165:../../../platform/mega_rf/drivers/usart/usart_megarf.c ****  */
 166:../../../platform/mega_rf/drivers/usart/usart_megarf.c **** status_code_t usart_putchar(USART_t *usart, uint8_t c)
 167:../../../platform/mega_rf/drivers/usart/usart_megarf.c **** {
 1308               		.loc 5 167 0
 1309               		.cfi_startproc
 1310 067c CF93      		push r28
 1311               	.LCFI50:
 1312               		.cfi_def_cfa_offset 3
 1313               		.cfi_offset 28, -2
 1314 067e DF93      		push r29
 1315               	.LCFI51:
 1316               		.cfi_def_cfa_offset 4
 1317               		.cfi_offset 29, -3
 1318 0680 00D0      		rcall .
 1319 0682 1F92      		push __zero_reg__
 1320               	.LCFI52:
 1321               		.cfi_def_cfa_offset 7
 1322 0684 CDB7      		in r28,__SP_L__
 1323 0686 DEB7      		in r29,__SP_H__
 1324               	.LCFI53:
 1325               		.cfi_def_cfa_register 28
 1326               	/* prologue: function */
 1327               	/* frame size = 3 */
 1328               	/* stack size = 5 */
 1329               	.L__stack_usage = 5
 1330 0688 9A83      		std Y+2,r25
 1331 068a 8983      		std Y+1,r24
 1332 068c 6B83      		std Y+3,r22
 168:../../../platform/mega_rf/drivers/usart/usart_megarf.c **** 	while (usart_data_register_is_empty(usart) == false) {
 1333               		.loc 5 168 0
 1334 068e 0000      		nop
 1335               	.L50:
 1336               		.loc 5 168 0 is_stmt 0 discriminator 1
 1337 0690 8981      		ldd r24,Y+1
 1338 0692 9A81      		ldd r25,Y+2
 1339 0694 0E94 0000 		call usart_data_register_is_empty
 1340 0698 982F      		mov r25,r24
 1341 069a 81E0      		ldi r24,lo8(1)
 1342 069c 8927      		eor r24,r25
 1343 069e 8823      		tst r24
 1344 06a0 01F4      		brne .L50
 169:../../../platform/mega_rf/drivers/usart/usart_megarf.c **** 	}
 170:../../../platform/mega_rf/drivers/usart/usart_megarf.c **** 
 171:../../../platform/mega_rf/drivers/usart/usart_megarf.c **** 	usart->UDR = c;
 1345               		.loc 5 171 0 is_stmt 1
 1346 06a2 8981      		ldd r24,Y+1
 1347 06a4 9A81      		ldd r25,Y+2
 1348 06a6 2B81      		ldd r18,Y+3
 1349 06a8 FC01      		movw r30,r24
 1350 06aa 2683      		std Z+6,r18
 172:../../../platform/mega_rf/drivers/usart/usart_megarf.c **** 	return STATUS_OK;
 1351               		.loc 5 172 0
 1352 06ac 80E0      		ldi r24,0
 1353               	/* epilogue start */
 173:../../../platform/mega_rf/drivers/usart/usart_megarf.c **** }
 1354               		.loc 5 173 0
 1355 06ae 0F90      		pop __tmp_reg__
 1356 06b0 0F90      		pop __tmp_reg__
 1357 06b2 0F90      		pop __tmp_reg__
 1358 06b4 DF91      		pop r29
 1359 06b6 CF91      		pop r28
 1360 06b8 0895      		ret
 1361               		.cfi_endproc
 1362               	.LFE98:
 1364               	.global	usart_getchar
 1366               	usart_getchar:
 1367               	.LFB99:
 174:../../../platform/mega_rf/drivers/usart/usart_megarf.c **** 
 175:../../../platform/mega_rf/drivers/usart/usart_megarf.c **** /**
 176:../../../platform/mega_rf/drivers/usart/usart_megarf.c ****  * \brief Receive a data with the USART module
 177:../../../platform/mega_rf/drivers/usart/usart_megarf.c ****  *
 178:../../../platform/mega_rf/drivers/usart/usart_megarf.c ****  * This function returns the received data from the USART module.
 179:../../../platform/mega_rf/drivers/usart/usart_megarf.c ****  *
 180:../../../platform/mega_rf/drivers/usart/usart_megarf.c ****  * \param usart The USART module.
 181:../../../platform/mega_rf/drivers/usart/usart_megarf.c ****  *
 182:../../../platform/mega_rf/drivers/usart/usart_megarf.c ****  * \return The received data.
 183:../../../platform/mega_rf/drivers/usart/usart_megarf.c ****  */
 184:../../../platform/mega_rf/drivers/usart/usart_megarf.c **** uint8_t usart_getchar(USART_t *usart)
 185:../../../platform/mega_rf/drivers/usart/usart_megarf.c **** {
 1368               		.loc 5 185 0
 1369               		.cfi_startproc
 1370 06ba CF93      		push r28
 1371               	.LCFI54:
 1372               		.cfi_def_cfa_offset 3
 1373               		.cfi_offset 28, -2
 1374 06bc DF93      		push r29
 1375               	.LCFI55:
 1376               		.cfi_def_cfa_offset 4
 1377               		.cfi_offset 29, -3
 1378 06be 00D0      		rcall .
 1379               	.LCFI56:
 1380               		.cfi_def_cfa_offset 6
 1381 06c0 CDB7      		in r28,__SP_L__
 1382 06c2 DEB7      		in r29,__SP_H__
 1383               	.LCFI57:
 1384               		.cfi_def_cfa_register 28
 1385               	/* prologue: function */
 1386               	/* frame size = 2 */
 1387               	/* stack size = 4 */
 1388               	.L__stack_usage = 4
 1389 06c4 9A83      		std Y+2,r25
 1390 06c6 8983      		std Y+1,r24
 186:../../../platform/mega_rf/drivers/usart/usart_megarf.c **** 	while (usart_rx_is_complete(usart) == false) {
 1391               		.loc 5 186 0
 1392 06c8 0000      		nop
 1393               	.L53:
 1394               		.loc 5 186 0 is_stmt 0 discriminator 1
 1395 06ca 8981      		ldd r24,Y+1
 1396 06cc 9A81      		ldd r25,Y+2
 1397 06ce 0E94 0000 		call usart_rx_is_complete
 1398 06d2 982F      		mov r25,r24
 1399 06d4 81E0      		ldi r24,lo8(1)
 1400 06d6 8927      		eor r24,r25
 1401 06d8 8823      		tst r24
 1402 06da 01F4      		brne .L53
 187:../../../platform/mega_rf/drivers/usart/usart_megarf.c **** 	}
 188:../../../platform/mega_rf/drivers/usart/usart_megarf.c **** 
 189:../../../platform/mega_rf/drivers/usart/usart_megarf.c **** 	return ((uint8_t)usart->UDR);
 1403               		.loc 5 189 0 is_stmt 1
 1404 06dc 8981      		ldd r24,Y+1
 1405 06de 9A81      		ldd r25,Y+2
 1406 06e0 FC01      		movw r30,r24
 1407 06e2 8681      		ldd r24,Z+6
 1408               	/* epilogue start */
 190:../../../platform/mega_rf/drivers/usart/usart_megarf.c **** }
 1409               		.loc 5 190 0
 1410 06e4 0F90      		pop __tmp_reg__
 1411 06e6 0F90      		pop __tmp_reg__
 1412 06e8 DF91      		pop r29
 1413 06ea CF91      		pop r28
 1414 06ec 0895      		ret
 1415               		.cfi_endproc
 1416               	.LFE99:
 1419               	usart_get_baud_offset:
 1420               	.LFB100:
 191:../../../platform/mega_rf/drivers/usart/usart_megarf.c **** 
 192:../../../platform/mega_rf/drivers/usart/usart_megarf.c **** /**
 193:../../../platform/mega_rf/drivers/usart/usart_megarf.c ****  * \brief Get the offset for lookup in the baudrate table
 194:../../../platform/mega_rf/drivers/usart/usart_megarf.c ****  *
 195:../../../platform/mega_rf/drivers/usart/usart_megarf.c ****  * \param baud The requested baudrate
 196:../../../platform/mega_rf/drivers/usart/usart_megarf.c ****  *
 197:../../../platform/mega_rf/drivers/usart/usart_megarf.c ****  * \return The baudrate offset in PROGMEM table
 198:../../../platform/mega_rf/drivers/usart/usart_megarf.c ****  * \retval USART_BAUD_UNDEFINED for baudrates not in lookup table
 199:../../../platform/mega_rf/drivers/usart/usart_megarf.c ****  */
 200:../../../platform/mega_rf/drivers/usart/usart_megarf.c **** static uint8_t usart_get_baud_offset(uint32_t baud)
 201:../../../platform/mega_rf/drivers/usart/usart_megarf.c **** {
 1421               		.loc 5 201 0
 1422               		.cfi_startproc
 1423 06ee CF93      		push r28
 1424               	.LCFI58:
 1425               		.cfi_def_cfa_offset 3
 1426               		.cfi_offset 28, -2
 1427 06f0 DF93      		push r29
 1428               	.LCFI59:
 1429               		.cfi_def_cfa_offset 4
 1430               		.cfi_offset 29, -3
 1431 06f2 00D0      		rcall .
 1432 06f4 00D0      		rcall .
 1433               	.LCFI60:
 1434               		.cfi_def_cfa_offset 8
 1435 06f6 CDB7      		in r28,__SP_L__
 1436 06f8 DEB7      		in r29,__SP_H__
 1437               	.LCFI61:
 1438               		.cfi_def_cfa_register 28
 1439               	/* prologue: function */
 1440               	/* frame size = 4 */
 1441               	/* stack size = 6 */
 1442               	.L__stack_usage = 6
 1443 06fa 6983      		std Y+1,r22
 1444 06fc 7A83      		std Y+2,r23
 1445 06fe 8B83      		std Y+3,r24
 1446 0700 9C83      		std Y+4,r25
 202:../../../platform/mega_rf/drivers/usart/usart_megarf.c **** 	switch (baud) {
 1447               		.loc 5 202 0
 1448 0702 8981      		ldd r24,Y+1
 1449 0704 9A81      		ldd r25,Y+2
 1450 0706 AB81      		ldd r26,Y+3
 1451 0708 BC81      		ldd r27,Y+4
 1452 070a 8038      		cpi r24,-128
 1453 070c 25E2      		ldi r18,37
 1454 070e 9207      		cpc r25,r18
 1455 0710 A105      		cpc r26,__zero_reg__
 1456 0712 B105      		cpc r27,__zero_reg__
 1457 0714 01F0      		breq .L57
 1458 0716 8138      		cpi r24,-127
 1459 0718 25E2      		ldi r18,37
 1460 071a 9207      		cpc r25,r18
 1461 071c A105      		cpc r26,__zero_reg__
 1462 071e B105      		cpc r27,__zero_reg__
 1463 0720 00F4      		brsh .L58
 1464 0722 8036      		cpi r24,96
 1465 0724 29E0      		ldi r18,9
 1466 0726 9207      		cpc r25,r18
 1467 0728 A105      		cpc r26,__zero_reg__
 1468 072a B105      		cpc r27,__zero_reg__
 1469 072c 01F0      		breq .L59
 1470 072e 803C      		cpi r24,-64
 1471 0730 22E1      		ldi r18,18
 1472 0732 9207      		cpc r25,r18
 1473 0734 A105      		cpc r26,__zero_reg__
 1474 0736 B105      		cpc r27,__zero_reg__
 1475 0738 01F0      		breq .L60
 1476 073a 803B      		cpi r24,-80
 1477 073c 9440      		sbci r25,4
 1478 073e A105      		cpc r26,__zero_reg__
 1479 0740 B105      		cpc r27,__zero_reg__
 1480 0742 01F0      		breq .L61
 1481 0744 00C0      		rjmp .L56
 1482               	.L58:
 1483 0746 8115      		cp r24,__zero_reg__
 1484 0748 26E9      		ldi r18,-106
 1485 074a 9207      		cpc r25,r18
 1486 074c A105      		cpc r26,__zero_reg__
 1487 074e B105      		cpc r27,__zero_reg__
 1488 0750 01F0      		breq .L62
 1489 0752 8130      		cpi r24,1
 1490 0754 26E9      		ldi r18,-106
 1491 0756 9207      		cpc r25,r18
 1492 0758 A105      		cpc r26,__zero_reg__
 1493 075a B105      		cpc r27,__zero_reg__
 1494 075c 00F4      		brsh .L63
 1495 075e 8115      		cp r24,__zero_reg__
 1496 0760 9B44      		sbci r25,75
 1497 0762 A105      		cpc r26,__zero_reg__
 1498 0764 B105      		cpc r27,__zero_reg__
 1499 0766 01F0      		breq .L64
 1500 0768 00C0      		rjmp .L56
 1501               	.L63:
 1502 076a 8115      		cp r24,__zero_reg__
 1503 076c 21EE      		ldi r18,-31
 1504 076e 9207      		cpc r25,r18
 1505 0770 A105      		cpc r26,__zero_reg__
 1506 0772 B105      		cpc r27,__zero_reg__
 1507 0774 01F0      		breq .L65
 1508 0776 8115      		cp r24,__zero_reg__
 1509 0778 924C      		sbci r25,-62
 1510 077a A140      		sbci r26,1
 1511 077c B105      		cpc r27,__zero_reg__
 1512 077e 01F0      		breq .L66
 1513 0780 00C0      		rjmp .L56
 1514               	.L61:
 203:../../../platform/mega_rf/drivers/usart/usart_megarf.c **** 	case 1200:
 204:../../../platform/mega_rf/drivers/usart/usart_megarf.c **** 		return (uint8_t)USART_BAUD_1200;
 1515               		.loc 5 204 0
 1516 0782 80E0      		ldi r24,0
 1517 0784 00C0      		rjmp .L67
 1518               	.L59:
 205:../../../platform/mega_rf/drivers/usart/usart_megarf.c **** 
 206:../../../platform/mega_rf/drivers/usart/usart_megarf.c **** 	case 2400:
 207:../../../platform/mega_rf/drivers/usart/usart_megarf.c **** 		return (uint8_t)USART_BAUD_2400;
 1519               		.loc 5 207 0
 1520 0786 81E0      		ldi r24,lo8(1)
 1521 0788 00C0      		rjmp .L67
 1522               	.L60:
 208:../../../platform/mega_rf/drivers/usart/usart_megarf.c **** 
 209:../../../platform/mega_rf/drivers/usart/usart_megarf.c **** 	case 4800:
 210:../../../platform/mega_rf/drivers/usart/usart_megarf.c **** 		return (uint8_t)USART_BAUD_4800;
 1523               		.loc 5 210 0
 1524 078a 82E0      		ldi r24,lo8(2)
 1525 078c 00C0      		rjmp .L67
 1526               	.L57:
 211:../../../platform/mega_rf/drivers/usart/usart_megarf.c **** 
 212:../../../platform/mega_rf/drivers/usart/usart_megarf.c **** 	case 9600:
 213:../../../platform/mega_rf/drivers/usart/usart_megarf.c **** 		return (uint8_t)USART_BAUD_9600;
 1527               		.loc 5 213 0
 1528 078e 83E0      		ldi r24,lo8(3)
 1529 0790 00C0      		rjmp .L67
 1530               	.L64:
 214:../../../platform/mega_rf/drivers/usart/usart_megarf.c **** 
 215:../../../platform/mega_rf/drivers/usart/usart_megarf.c **** 	case 19200:
 216:../../../platform/mega_rf/drivers/usart/usart_megarf.c **** 		return (uint8_t)USART_BAUD_19200;
 1531               		.loc 5 216 0
 1532 0792 84E0      		ldi r24,lo8(4)
 1533 0794 00C0      		rjmp .L67
 1534               	.L62:
 217:../../../platform/mega_rf/drivers/usart/usart_megarf.c **** 
 218:../../../platform/mega_rf/drivers/usart/usart_megarf.c **** 	case 38400:
 219:../../../platform/mega_rf/drivers/usart/usart_megarf.c **** 		return (uint8_t)USART_BAUD_38400;
 1535               		.loc 5 219 0
 1536 0796 85E0      		ldi r24,lo8(5)
 1537 0798 00C0      		rjmp .L67
 1538               	.L65:
 220:../../../platform/mega_rf/drivers/usart/usart_megarf.c **** 
 221:../../../platform/mega_rf/drivers/usart/usart_megarf.c **** 	case 57600:
 222:../../../platform/mega_rf/drivers/usart/usart_megarf.c **** 		return (uint8_t)USART_BAUD_57600;
 1539               		.loc 5 222 0
 1540 079a 86E0      		ldi r24,lo8(6)
 1541 079c 00C0      		rjmp .L67
 1542               	.L66:
 223:../../../platform/mega_rf/drivers/usart/usart_megarf.c **** 
 224:../../../platform/mega_rf/drivers/usart/usart_megarf.c **** 	case 115200:
 225:../../../platform/mega_rf/drivers/usart/usart_megarf.c **** 		return (uint8_t)USART_BAUD_115200;
 1543               		.loc 5 225 0
 1544 079e 87E0      		ldi r24,lo8(7)
 1545 07a0 00C0      		rjmp .L67
 1546               	.L56:
 226:../../../platform/mega_rf/drivers/usart/usart_megarf.c **** 
 227:../../../platform/mega_rf/drivers/usart/usart_megarf.c **** 	default:
 228:../../../platform/mega_rf/drivers/usart/usart_megarf.c **** 		return (uint8_t)USART_BAUD_UNDEFINED;
 1547               		.loc 5 228 0
 1548 07a2 8FEF      		ldi r24,lo8(-1)
 1549               	.L67:
 1550               	/* epilogue start */
 229:../../../platform/mega_rf/drivers/usart/usart_megarf.c **** 	}
 230:../../../platform/mega_rf/drivers/usart/usart_megarf.c **** }
 1551               		.loc 5 230 0
 1552 07a4 0F90      		pop __tmp_reg__
 1553 07a6 0F90      		pop __tmp_reg__
 1554 07a8 0F90      		pop __tmp_reg__
 1555 07aa 0F90      		pop __tmp_reg__
 1556 07ac DF91      		pop r29
 1557 07ae CF91      		pop r28
 1558 07b0 0895      		ret
 1559               		.cfi_endproc
 1560               	.LFE100:
 1562               	.global	usart_set_baudrate_precalculated
 1564               	usart_set_baudrate_precalculated:
 1565               	.LFB101:
 231:../../../platform/mega_rf/drivers/usart/usart_megarf.c **** 
 232:../../../platform/mega_rf/drivers/usart/usart_megarf.c **** /**
 233:../../../platform/mega_rf/drivers/usart/usart_megarf.c ****  * \brief Set the baudrate using pre calculated BAUDCTRL values stored in program 
 234:../../../platform/mega_rf/drivers/usart/usart_megarf.c ****  * memory
 235:../../../platform/mega_rf/drivers/usart/usart_megarf.c ****  *
 236:../../../platform/mega_rf/drivers/usart/usart_megarf.c ****  * \note This function only works for cpu_hz 1Mhz, 8Mhz or 16Mhz and baudrate values
 237:../../../platform/mega_rf/drivers/usart/usart_megarf.c ****  * 1200, 2400, 4800, 9600, 19200, 38400 and 57600.
 238:../../../platform/mega_rf/drivers/usart/usart_megarf.c ****  *
 239:../../../platform/mega_rf/drivers/usart/usart_megarf.c ****  * \param usart  The USART module.
 240:../../../platform/mega_rf/drivers/usart/usart_megarf.c ****  * \param baud   The baudrate.
 241:../../../platform/mega_rf/drivers/usart/usart_megarf.c ****  * \param cpu_hz The CPU frequency.
 242:../../../platform/mega_rf/drivers/usart/usart_megarf.c ****  *
 243:../../../platform/mega_rf/drivers/usart/usart_megarf.c ****  */
 244:../../../platform/mega_rf/drivers/usart/usart_megarf.c **** void usart_set_baudrate_precalculated(USART_t *usart, uint32_t baud,
 245:../../../platform/mega_rf/drivers/usart/usart_megarf.c **** 		uint32_t cpu_hz)
 246:../../../platform/mega_rf/drivers/usart/usart_megarf.c **** {
 1566               		.loc 5 246 0
 1567               		.cfi_startproc
 1568 07b2 0F93      		push r16
 1569               	.LCFI62:
 1570               		.cfi_def_cfa_offset 3
 1571               		.cfi_offset 16, -2
 1572 07b4 1F93      		push r17
 1573               	.LCFI63:
 1574               		.cfi_def_cfa_offset 4
 1575               		.cfi_offset 17, -3
 1576 07b6 CF93      		push r28
 1577               	.LCFI64:
 1578               		.cfi_def_cfa_offset 5
 1579               		.cfi_offset 28, -4
 1580 07b8 DF93      		push r29
 1581               	.LCFI65:
 1582               		.cfi_def_cfa_offset 6
 1583               		.cfi_offset 29, -5
 1584 07ba CDB7      		in r28,__SP_L__
 1585 07bc DEB7      		in r29,__SP_H__
 1586               	.LCFI66:
 1587               		.cfi_def_cfa_register 28
 1588 07be 6997      		sbiw r28,25
 1589               	.LCFI67:
 1590               		.cfi_def_cfa_offset 31
 1591 07c0 0FB6      		in __tmp_reg__,__SREG__
 1592 07c2 F894      		cli
 1593 07c4 DEBF      		out __SP_H__,r29
 1594 07c6 0FBE      		out __SREG__,__tmp_reg__
 1595 07c8 CDBF      		out __SP_L__,r28
 1596               	/* prologue: function */
 1597               	/* frame size = 25 */
 1598               	/* stack size = 29 */
 1599               	.L__stack_usage = 29
 1600 07ca 998B      		std Y+17,r25
 1601 07cc 888B      		std Y+16,r24
 1602 07ce 4A8B      		std Y+18,r20
 1603 07d0 5B8B      		std Y+19,r21
 1604 07d2 6C8B      		std Y+20,r22
 1605 07d4 7D8B      		std Y+21,r23
 1606 07d6 0E8B      		std Y+22,r16
 1607 07d8 1F8B      		std Y+23,r17
 1608 07da 288F      		std Y+24,r18
 1609 07dc 398F      		std Y+25,r19
 247:../../../platform/mega_rf/drivers/usart/usart_megarf.c **** 	uint8_t baud_offset;
 248:../../../platform/mega_rf/drivers/usart/usart_megarf.c **** 	uint16_t baudctrl = 0;
 1610               		.loc 5 248 0
 1611 07de 1A82      		std Y+2,__zero_reg__
 1612 07e0 1982      		std Y+1,__zero_reg__
 249:../../../platform/mega_rf/drivers/usart/usart_megarf.c **** 
 250:../../../platform/mega_rf/drivers/usart/usart_megarf.c **** 	baud_offset = usart_get_baud_offset(baud);
 1613               		.loc 5 250 0
 1614 07e2 8A89      		ldd r24,Y+18
 1615 07e4 9B89      		ldd r25,Y+19
 1616 07e6 AC89      		ldd r26,Y+20
 1617 07e8 BD89      		ldd r27,Y+21
 1618 07ea BC01      		movw r22,r24
 1619 07ec CD01      		movw r24,r26
 1620 07ee 0E94 0000 		call usart_get_baud_offset
 1621 07f2 8B83      		std Y+3,r24
 251:../../../platform/mega_rf/drivers/usart/usart_megarf.c **** 
 252:../../../platform/mega_rf/drivers/usart/usart_megarf.c **** 	if (cpu_hz == 1000000UL) {
 1622               		.loc 5 252 0
 1623 07f4 8E89      		ldd r24,Y+22
 1624 07f6 9F89      		ldd r25,Y+23
 1625 07f8 A88D      		ldd r26,Y+24
 1626 07fa B98D      		ldd r27,Y+25
 1627 07fc 8034      		cpi r24,64
 1628 07fe 9244      		sbci r25,66
 1629 0800 AF40      		sbci r26,15
 1630 0802 B105      		cpc r27,__zero_reg__
 1631 0804 01F4      		brne .L69
 1632               	.LBB44:
 253:../../../platform/mega_rf/drivers/usart/usart_megarf.c **** 		baudctrl = PROGMEM_READ_WORD(baudctrl_1mhz + baud_offset);
 1633               		.loc 5 253 0
 1634 0806 8B81      		ldd r24,Y+3
 1635 0808 882F      		mov r24,r24
 1636 080a 90E0      		ldi r25,0
 1637 080c 880F      		lsl r24
 1638 080e 991F      		rol r25
 1639 0810 8050      		subi r24,lo8(-(baudctrl_1mhz))
 1640 0812 9040      		sbci r25,hi8(-(baudctrl_1mhz))
 1641 0814 9D83      		std Y+5,r25
 1642 0816 8C83      		std Y+4,r24
 1643 0818 8C81      		ldd r24,Y+4
 1644 081a 9D81      		ldd r25,Y+5
 1645 081c FC01      		movw r30,r24
 1646               	/* #APP */
 1647               	 ;  253 "../../../platform/mega_rf/drivers/usart/usart_megarf.c" 1
 1648 081e 2591      		lpm r18, Z+
 1649 0820 3491      		lpm r19, Z
 1650               		
 1651               	 ;  0 "" 2
 1652               	/* #NOAPP */
 1653 0822 CF01      		movw r24,r30
 1654 0824 3F83      		std Y+7,r19
 1655 0826 2E83      		std Y+6,r18
 1656 0828 9D83      		std Y+5,r25
 1657 082a 8C83      		std Y+4,r24
 1658 082c 8E81      		ldd r24,Y+6
 1659 082e 9F81      		ldd r25,Y+7
 1660               	.LBE44:
 1661 0830 9A83      		std Y+2,r25
 1662 0832 8983      		std Y+1,r24
 1663 0834 00C0      		rjmp .L70
 1664               	.L69:
 254:../../../platform/mega_rf/drivers/usart/usart_megarf.c **** 	} else if (cpu_hz == 8000000UL) {
 1665               		.loc 5 254 0
 1666 0836 8E89      		ldd r24,Y+22
 1667 0838 9F89      		ldd r25,Y+23
 1668 083a A88D      		ldd r26,Y+24
 1669 083c B98D      		ldd r27,Y+25
 1670 083e 8115      		cp r24,__zero_reg__
 1671 0840 9241      		sbci r25,18
 1672 0842 AA47      		sbci r26,122
 1673 0844 B105      		cpc r27,__zero_reg__
 1674 0846 01F4      		brne .L71
 1675               	.LBB45:
 255:../../../platform/mega_rf/drivers/usart/usart_megarf.c **** 		baudctrl = PROGMEM_READ_WORD(baudctrl_8mhz + baud_offset);
 1676               		.loc 5 255 0
 1677 0848 8B81      		ldd r24,Y+3
 1678 084a 882F      		mov r24,r24
 1679 084c 90E0      		ldi r25,0
 1680 084e 880F      		lsl r24
 1681 0850 991F      		rol r25
 1682 0852 8050      		subi r24,lo8(-(baudctrl_8mhz))
 1683 0854 9040      		sbci r25,hi8(-(baudctrl_8mhz))
 1684 0856 9987      		std Y+9,r25
 1685 0858 8887      		std Y+8,r24
 1686 085a 8885      		ldd r24,Y+8
 1687 085c 9985      		ldd r25,Y+9
 1688 085e FC01      		movw r30,r24
 1689               	/* #APP */
 1690               	 ;  255 "../../../platform/mega_rf/drivers/usart/usart_megarf.c" 1
 1691 0860 2591      		lpm r18, Z+
 1692 0862 3491      		lpm r19, Z
 1693               		
 1694               	 ;  0 "" 2
 1695               	/* #NOAPP */
 1696 0864 CF01      		movw r24,r30
 1697 0866 3B87      		std Y+11,r19
 1698 0868 2A87      		std Y+10,r18
 1699 086a 9987      		std Y+9,r25
 1700 086c 8887      		std Y+8,r24
 1701 086e 8A85      		ldd r24,Y+10
 1702 0870 9B85      		ldd r25,Y+11
 1703               	.LBE45:
 1704 0872 9A83      		std Y+2,r25
 1705 0874 8983      		std Y+1,r24
 1706 0876 00C0      		rjmp .L70
 1707               	.L71:
 256:../../../platform/mega_rf/drivers/usart/usart_megarf.c **** 	} else if (cpu_hz == 16000000UL) {
 1708               		.loc 5 256 0
 1709 0878 8E89      		ldd r24,Y+22
 1710 087a 9F89      		ldd r25,Y+23
 1711 087c A88D      		ldd r26,Y+24
 1712 087e B98D      		ldd r27,Y+25
 1713 0880 8115      		cp r24,__zero_reg__
 1714 0882 9442      		sbci r25,36
 1715 0884 A44F      		sbci r26,-12
 1716 0886 B105      		cpc r27,__zero_reg__
 1717 0888 01F4      		brne .L70
 1718               	.LBB46:
 257:../../../platform/mega_rf/drivers/usart/usart_megarf.c **** 		baudctrl = PROGMEM_READ_WORD(baudctrl_16mhz + baud_offset);
 1719               		.loc 5 257 0
 1720 088a 8B81      		ldd r24,Y+3
 1721 088c 882F      		mov r24,r24
 1722 088e 90E0      		ldi r25,0
 1723 0890 880F      		lsl r24
 1724 0892 991F      		rol r25
 1725 0894 8050      		subi r24,lo8(-(baudctrl_16mhz))
 1726 0896 9040      		sbci r25,hi8(-(baudctrl_16mhz))
 1727 0898 9D87      		std Y+13,r25
 1728 089a 8C87      		std Y+12,r24
 1729 089c 8C85      		ldd r24,Y+12
 1730 089e 9D85      		ldd r25,Y+13
 1731 08a0 FC01      		movw r30,r24
 1732               	/* #APP */
 1733               	 ;  257 "../../../platform/mega_rf/drivers/usart/usart_megarf.c" 1
 1734 08a2 2591      		lpm r18, Z+
 1735 08a4 3491      		lpm r19, Z
 1736               		
 1737               	 ;  0 "" 2
 1738               	/* #NOAPP */
 1739 08a6 CF01      		movw r24,r30
 1740 08a8 3F87      		std Y+15,r19
 1741 08aa 2E87      		std Y+14,r18
 1742 08ac 9D87      		std Y+13,r25
 1743 08ae 8C87      		std Y+12,r24
 1744 08b0 8E85      		ldd r24,Y+14
 1745 08b2 9F85      		ldd r25,Y+15
 1746               	.LBE46:
 1747 08b4 9A83      		std Y+2,r25
 1748 08b6 8983      		std Y+1,r24
 1749               	.L70:
 258:../../../platform/mega_rf/drivers/usart/usart_megarf.c **** 	} else {
 259:../../../platform/mega_rf/drivers/usart/usart_megarf.c **** 		/* Error, system clock speed or USART baud rate is not supported
 260:../../../platform/mega_rf/drivers/usart/usart_megarf.c **** 		 * by the look-up table */
 261:../../../platform/mega_rf/drivers/usart/usart_megarf.c **** 		Assert(false);
 262:../../../platform/mega_rf/drivers/usart/usart_megarf.c **** 	}
 263:../../../platform/mega_rf/drivers/usart/usart_megarf.c **** 
 264:../../../platform/mega_rf/drivers/usart/usart_megarf.c **** 	if (baud_offset != USART_BAUD_UNDEFINED) {
 1750               		.loc 5 264 0
 1751 08b8 8B81      		ldd r24,Y+3
 1752 08ba 8F3F      		cpi r24,lo8(-1)
 1753 08bc 01F0      		breq .L73
 265:../../../platform/mega_rf/drivers/usart/usart_megarf.c **** 		usart->UBRR = baudctrl;
 1754               		.loc 5 265 0
 1755 08be 8889      		ldd r24,Y+16
 1756 08c0 9989      		ldd r25,Y+17
 1757 08c2 2981      		ldd r18,Y+1
 1758 08c4 3A81      		ldd r19,Y+2
 1759 08c6 FC01      		movw r30,r24
 1760 08c8 3583      		std Z+5,r19
 1761 08ca 2483      		std Z+4,r18
 1762               	.L73:
 266:../../../platform/mega_rf/drivers/usart/usart_megarf.c **** 	}
 267:../../../platform/mega_rf/drivers/usart/usart_megarf.c **** }
 1763               		.loc 5 267 0
 1764 08cc 0000      		nop
 1765               	/* epilogue start */
 1766 08ce 6996      		adiw r28,25
 1767 08d0 0FB6      		in __tmp_reg__,__SREG__
 1768 08d2 F894      		cli
 1769 08d4 DEBF      		out __SP_H__,r29
 1770 08d6 0FBE      		out __SREG__,__tmp_reg__
 1771 08d8 CDBF      		out __SP_L__,r28
 1772 08da DF91      		pop r29
 1773 08dc CF91      		pop r28
 1774 08de 1F91      		pop r17
 1775 08e0 0F91      		pop r16
 1776 08e2 0895      		ret
 1777               		.cfi_endproc
 1778               	.LFE101:
 1780               	.global	usart_set_baudrate
 1782               	usart_set_baudrate:
 1783               	.LFB102:
 268:../../../platform/mega_rf/drivers/usart/usart_megarf.c **** 
 269:../../../platform/mega_rf/drivers/usart/usart_megarf.c **** /**
 270:../../../platform/mega_rf/drivers/usart/usart_megarf.c ****  * \brief Set the baudrate value in the USART module
 271:../../../platform/mega_rf/drivers/usart/usart_megarf.c ****  *
 272:../../../platform/mega_rf/drivers/usart/usart_megarf.c ****  * This function sets the baudrate register with scaling regarding the CPU
 273:../../../platform/mega_rf/drivers/usart/usart_megarf.c ****  * frequency and makes sure the baud rate is supported by the hardware.
 274:../../../platform/mega_rf/drivers/usart/usart_megarf.c ****  * The function can be used if you don't want to calculate the settings
 275:../../../platform/mega_rf/drivers/usart/usart_megarf.c ****  * yourself or changes to baudrate at runtime is required.
 276:../../../platform/mega_rf/drivers/usart/usart_megarf.c ****  *
 277:../../../platform/mega_rf/drivers/usart/usart_megarf.c ****  * \param usart The USART module.
 278:../../../platform/mega_rf/drivers/usart/usart_megarf.c ****  * \param baud The baudrate.
 279:../../../platform/mega_rf/drivers/usart/usart_megarf.c ****  * \param cpu_hz The CPU frequency.
 280:../../../platform/mega_rf/drivers/usart/usart_megarf.c ****  *
 281:../../../platform/mega_rf/drivers/usart/usart_megarf.c ****  * \retval true if the hardware supports the baud rate
 282:../../../platform/mega_rf/drivers/usart/usart_megarf.c ****  * \retval false if the hardware does not support the baud rate (i.e. it's
 283:../../../platform/mega_rf/drivers/usart/usart_megarf.c ****  *               either too high or too low.)
 284:../../../platform/mega_rf/drivers/usart/usart_megarf.c ****  */
 285:../../../platform/mega_rf/drivers/usart/usart_megarf.c **** bool usart_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
 286:../../../platform/mega_rf/drivers/usart/usart_megarf.c **** {
 1784               		.loc 5 286 0
 1785               		.cfi_startproc
 1786 08e4 0F93      		push r16
 1787               	.LCFI68:
 1788               		.cfi_def_cfa_offset 3
 1789               		.cfi_offset 16, -2
 1790 08e6 1F93      		push r17
 1791               	.LCFI69:
 1792               		.cfi_def_cfa_offset 4
 1793               		.cfi_offset 17, -3
 1794 08e8 CF93      		push r28
 1795               	.LCFI70:
 1796               		.cfi_def_cfa_offset 5
 1797               		.cfi_offset 28, -4
 1798 08ea DF93      		push r29
 1799               	.LCFI71:
 1800               		.cfi_def_cfa_offset 6
 1801               		.cfi_offset 29, -5
 1802 08ec CDB7      		in r28,__SP_L__
 1803 08ee DEB7      		in r29,__SP_H__
 1804               	.LCFI72:
 1805               		.cfi_def_cfa_register 28
 1806 08f0 6697      		sbiw r28,22
 1807               	.LCFI73:
 1808               		.cfi_def_cfa_offset 28
 1809 08f2 0FB6      		in __tmp_reg__,__SREG__
 1810 08f4 F894      		cli
 1811 08f6 DEBF      		out __SP_H__,r29
 1812 08f8 0FBE      		out __SREG__,__tmp_reg__
 1813 08fa CDBF      		out __SP_L__,r28
 1814               	/* prologue: function */
 1815               	/* frame size = 22 */
 1816               	/* stack size = 26 */
 1817               	.L__stack_usage = 26
 1818 08fc 9E87      		std Y+14,r25
 1819 08fe 8D87      		std Y+13,r24
 1820 0900 4F87      		std Y+15,r20
 1821 0902 588B      		std Y+16,r21
 1822 0904 698B      		std Y+17,r22
 1823 0906 7A8B      		std Y+18,r23
 1824 0908 0B8B      		std Y+19,r16
 1825 090a 1C8B      		std Y+20,r17
 1826 090c 2D8B      		std Y+21,r18
 1827 090e 3E8B      		std Y+22,r19
 287:../../../platform/mega_rf/drivers/usart/usart_megarf.c **** 	uint32_t min_rate;
 288:../../../platform/mega_rf/drivers/usart/usart_megarf.c **** 	uint32_t max_rate;
 289:../../../platform/mega_rf/drivers/usart/usart_megarf.c **** 	uint32_t ubrr;
 290:../../../platform/mega_rf/drivers/usart/usart_megarf.c **** 
 291:../../../platform/mega_rf/drivers/usart/usart_megarf.c **** 	/*
 292:../../../platform/mega_rf/drivers/usart/usart_megarf.c **** 	 * Check if the hardware supports the given baud rate
 293:../../../platform/mega_rf/drivers/usart/usart_megarf.c **** 	 */
 294:../../../platform/mega_rf/drivers/usart/usart_megarf.c **** 	/* 8 =  8 * (0 + 1) = (UBRRn_min + 1) */
 295:../../../platform/mega_rf/drivers/usart/usart_megarf.c **** 	max_rate = cpu_hz / 8;
 1828               		.loc 5 295 0
 1829 0910 8B89      		ldd r24,Y+19
 1830 0912 9C89      		ldd r25,Y+20
 1831 0914 AD89      		ldd r26,Y+21
 1832 0916 BE89      		ldd r27,Y+22
 1833 0918 6894      		set
 1834 091a 12F8      		bld __zero_reg__,3-1
 1835               		1:
 1836 091c B695      		lsr r27
 1837 091e A795      		ror r26
 1838 0920 9795      		ror r25
 1839 0922 8795      		ror r24
 1840 0924 1694      		lsr __zero_reg__
 1841 0926 01F4      		brne 1b
 1842 0928 8D83      		std Y+5,r24
 1843 092a 9E83      		std Y+6,r25
 1844 092c AF83      		std Y+7,r26
 1845 092e B887      		std Y+8,r27
 296:../../../platform/mega_rf/drivers/usart/usart_megarf.c **** 	/* 524288 =  8 * (65535 + 1)  =  8 *(UBRRn_max+1) */
 297:../../../platform/mega_rf/drivers/usart/usart_megarf.c **** 	min_rate = cpu_hz / 524288;
 1846               		.loc 5 297 0
 1847 0930 8B89      		ldd r24,Y+19
 1848 0932 9C89      		ldd r25,Y+20
 1849 0934 AD89      		ldd r26,Y+21
 1850 0936 BE89      		ldd r27,Y+22
 1851 0938 072E      		mov r0,r23
 1852 093a 73E1      		ldi r23,19
 1853               		1:
 1854 093c B695      		lsr r27
 1855 093e A795      		ror r26
 1856 0940 9795      		ror r25
 1857 0942 8795      		ror r24
 1858 0944 7A95      		dec r23
 1859 0946 01F4      		brne 1b
 1860 0948 702D      		mov r23,r0
 1861 094a 8983      		std Y+1,r24
 1862 094c 9A83      		std Y+2,r25
 1863 094e AB83      		std Y+3,r26
 1864 0950 BC83      		std Y+4,r27
 298:../../../platform/mega_rf/drivers/usart/usart_megarf.c **** 
 299:../../../platform/mega_rf/drivers/usart/usart_megarf.c **** 	if (usart->UCSRnA & USART_U2X_bm) {
 1865               		.loc 5 299 0
 1866 0952 8D85      		ldd r24,Y+13
 1867 0954 9E85      		ldd r25,Y+14
 1868 0956 FC01      		movw r30,r24
 1869 0958 8081      		ld r24,Z
 1870 095a 882F      		mov r24,r24
 1871 095c 90E0      		ldi r25,0
 1872 095e 8270      		andi r24,2
 1873 0960 9927      		clr r25
 1874 0962 892B      		or r24,r25
 1875 0964 01F0      		breq .L75
 300:../../../platform/mega_rf/drivers/usart/usart_megarf.c **** 		max_rate /= 2;
 1876               		.loc 5 300 0
 1877 0966 8D81      		ldd r24,Y+5
 1878 0968 9E81      		ldd r25,Y+6
 1879 096a AF81      		ldd r26,Y+7
 1880 096c B885      		ldd r27,Y+8
 1881 096e B695      		lsr r27
 1882 0970 A795      		ror r26
 1883 0972 9795      		ror r25
 1884 0974 8795      		ror r24
 1885 0976 8D83      		std Y+5,r24
 1886 0978 9E83      		std Y+6,r25
 1887 097a AF83      		std Y+7,r26
 1888 097c B887      		std Y+8,r27
 301:../../../platform/mega_rf/drivers/usart/usart_megarf.c **** 		min_rate /= 2;
 1889               		.loc 5 301 0
 1890 097e 8981      		ldd r24,Y+1
 1891 0980 9A81      		ldd r25,Y+2
 1892 0982 AB81      		ldd r26,Y+3
 1893 0984 BC81      		ldd r27,Y+4
 1894 0986 B695      		lsr r27
 1895 0988 A795      		ror r26
 1896 098a 9795      		ror r25
 1897 098c 8795      		ror r24
 1898 098e 8983      		std Y+1,r24
 1899 0990 9A83      		std Y+2,r25
 1900 0992 AB83      		std Y+3,r26
 1901 0994 BC83      		std Y+4,r27
 1902               	.L75:
 302:../../../platform/mega_rf/drivers/usart/usart_megarf.c **** 	}
 303:../../../platform/mega_rf/drivers/usart/usart_megarf.c **** 
 304:../../../platform/mega_rf/drivers/usart/usart_megarf.c **** 	if ((baud > max_rate) || (baud < min_rate)) {
 1903               		.loc 5 304 0
 1904 0996 2F85      		ldd r18,Y+15
 1905 0998 3889      		ldd r19,Y+16
 1906 099a 4989      		ldd r20,Y+17
 1907 099c 5A89      		ldd r21,Y+18
 1908 099e 8D81      		ldd r24,Y+5
 1909 09a0 9E81      		ldd r25,Y+6
 1910 09a2 AF81      		ldd r26,Y+7
 1911 09a4 B885      		ldd r27,Y+8
 1912 09a6 8217      		cp r24,r18
 1913 09a8 9307      		cpc r25,r19
 1914 09aa A407      		cpc r26,r20
 1915 09ac B507      		cpc r27,r21
 1916 09ae 00F0      		brlo .L76
 1917               		.loc 5 304 0 is_stmt 0 discriminator 1
 1918 09b0 2F85      		ldd r18,Y+15
 1919 09b2 3889      		ldd r19,Y+16
 1920 09b4 4989      		ldd r20,Y+17
 1921 09b6 5A89      		ldd r21,Y+18
 1922 09b8 8981      		ldd r24,Y+1
 1923 09ba 9A81      		ldd r25,Y+2
 1924 09bc AB81      		ldd r26,Y+3
 1925 09be BC81      		ldd r27,Y+4
 1926 09c0 2817      		cp r18,r24
 1927 09c2 3907      		cpc r19,r25
 1928 09c4 4A07      		cpc r20,r26
 1929 09c6 5B07      		cpc r21,r27
 1930 09c8 00F4      		brsh .L77
 1931               	.L76:
 305:../../../platform/mega_rf/drivers/usart/usart_megarf.c **** 		return false;
 1932               		.loc 5 305 0 is_stmt 1
 1933 09ca 80E0      		ldi r24,0
 1934 09cc 00C0      		rjmp .L78
 1935               	.L77:
 306:../../../platform/mega_rf/drivers/usart/usart_megarf.c **** 	}
 307:../../../platform/mega_rf/drivers/usart/usart_megarf.c **** 
 308:../../../platform/mega_rf/drivers/usart/usart_megarf.c **** 	/* Check if double speed is enabled. */
 309:../../../platform/mega_rf/drivers/usart/usart_megarf.c **** 	if (usart->UCSRnA & USART_U2X_bm) {
 1936               		.loc 5 309 0
 1937 09ce 8D85      		ldd r24,Y+13
 1938 09d0 9E85      		ldd r25,Y+14
 1939 09d2 FC01      		movw r30,r24
 1940 09d4 8081      		ld r24,Z
 1941 09d6 882F      		mov r24,r24
 1942 09d8 90E0      		ldi r25,0
 1943 09da 8270      		andi r24,2
 1944 09dc 9927      		clr r25
 1945 09de 892B      		or r24,r25
 1946 09e0 01F0      		breq .L79
 310:../../../platform/mega_rf/drivers/usart/usart_megarf.c **** 		baud *= 2;
 1947               		.loc 5 310 0
 1948 09e2 8F85      		ldd r24,Y+15
 1949 09e4 9889      		ldd r25,Y+16
 1950 09e6 A989      		ldd r26,Y+17
 1951 09e8 BA89      		ldd r27,Y+18
 1952 09ea 880F      		lsl r24
 1953 09ec 991F      		rol r25
 1954 09ee AA1F      		rol r26
 1955 09f0 BB1F      		rol r27
 1956 09f2 8F87      		std Y+15,r24
 1957 09f4 988B      		std Y+16,r25
 1958 09f6 A98B      		std Y+17,r26
 1959 09f8 BA8B      		std Y+18,r27
 311:../../../platform/mega_rf/drivers/usart/usart_megarf.c **** 		ubrr = (uint32_t)(cpu_hz / 8 / baud) - 1;
 1960               		.loc 5 311 0
 1961 09fa 8B89      		ldd r24,Y+19
 1962 09fc 9C89      		ldd r25,Y+20
 1963 09fe AD89      		ldd r26,Y+21
 1964 0a00 BE89      		ldd r27,Y+22
 1965 0a02 6894      		set
 1966 0a04 12F8      		bld __zero_reg__,3-1
 1967               		1:
 1968 0a06 B695      		lsr r27
 1969 0a08 A795      		ror r26
 1970 0a0a 9795      		ror r25
 1971 0a0c 8795      		ror r24
 1972 0a0e 1694      		lsr __zero_reg__
 1973 0a10 01F4      		brne 1b
 1974 0a12 2F85      		ldd r18,Y+15
 1975 0a14 3889      		ldd r19,Y+16
 1976 0a16 4989      		ldd r20,Y+17
 1977 0a18 5A89      		ldd r21,Y+18
 1978 0a1a BC01      		movw r22,r24
 1979 0a1c CD01      		movw r24,r26
 1980 0a1e 0E94 0000 		call __udivmodsi4
 1981 0a22 DA01      		movw r26,r20
 1982 0a24 C901      		movw r24,r18
 1983 0a26 0197      		sbiw r24,1
 1984 0a28 A109      		sbc r26,__zero_reg__
 1985 0a2a B109      		sbc r27,__zero_reg__
 1986 0a2c 8987      		std Y+9,r24
 1987 0a2e 9A87      		std Y+10,r25
 1988 0a30 AB87      		std Y+11,r26
 1989 0a32 BC87      		std Y+12,r27
 1990 0a34 00C0      		rjmp .L80
 1991               	.L79:
 312:../../../platform/mega_rf/drivers/usart/usart_megarf.c **** 	} else {
 313:../../../platform/mega_rf/drivers/usart/usart_megarf.c **** 		ubrr = (uint32_t)(cpu_hz / 16 / baud) - 1;
 1992               		.loc 5 313 0
 1993 0a36 8B89      		ldd r24,Y+19
 1994 0a38 9C89      		ldd r25,Y+20
 1995 0a3a AD89      		ldd r26,Y+21
 1996 0a3c BE89      		ldd r27,Y+22
 1997 0a3e 6894      		set
 1998 0a40 13F8      		bld __zero_reg__,4-1
 1999               		1:
 2000 0a42 B695      		lsr r27
 2001 0a44 A795      		ror r26
 2002 0a46 9795      		ror r25
 2003 0a48 8795      		ror r24
 2004 0a4a 1694      		lsr __zero_reg__
 2005 0a4c 01F4      		brne 1b
 2006 0a4e 2F85      		ldd r18,Y+15
 2007 0a50 3889      		ldd r19,Y+16
 2008 0a52 4989      		ldd r20,Y+17
 2009 0a54 5A89      		ldd r21,Y+18
 2010 0a56 BC01      		movw r22,r24
 2011 0a58 CD01      		movw r24,r26
 2012 0a5a 0E94 0000 		call __udivmodsi4
 2013 0a5e DA01      		movw r26,r20
 2014 0a60 C901      		movw r24,r18
 2015 0a62 0197      		sbiw r24,1
 2016 0a64 A109      		sbc r26,__zero_reg__
 2017 0a66 B109      		sbc r27,__zero_reg__
 2018 0a68 8987      		std Y+9,r24
 2019 0a6a 9A87      		std Y+10,r25
 2020 0a6c AB87      		std Y+11,r26
 2021 0a6e BC87      		std Y+12,r27
 2022               	.L80:
 314:../../../platform/mega_rf/drivers/usart/usart_megarf.c **** 	}
 315:../../../platform/mega_rf/drivers/usart/usart_megarf.c **** 
 316:../../../platform/mega_rf/drivers/usart/usart_megarf.c **** 	usart->UBRR = ubrr;
 2023               		.loc 5 316 0
 2024 0a70 2985      		ldd r18,Y+9
 2025 0a72 3A85      		ldd r19,Y+10
 2026 0a74 8D85      		ldd r24,Y+13
 2027 0a76 9E85      		ldd r25,Y+14
 2028 0a78 FC01      		movw r30,r24
 2029 0a7a 3583      		std Z+5,r19
 2030 0a7c 2483      		std Z+4,r18
 317:../../../platform/mega_rf/drivers/usart/usart_megarf.c **** 	return true;
 2031               		.loc 5 317 0
 2032 0a7e 81E0      		ldi r24,lo8(1)
 2033               	.L78:
 2034               	/* epilogue start */
 318:../../../platform/mega_rf/drivers/usart/usart_megarf.c **** }
 2035               		.loc 5 318 0
 2036 0a80 6696      		adiw r28,22
 2037 0a82 0FB6      		in __tmp_reg__,__SREG__
 2038 0a84 F894      		cli
 2039 0a86 DEBF      		out __SP_H__,r29
 2040 0a88 0FBE      		out __SREG__,__tmp_reg__
 2041 0a8a CDBF      		out __SP_L__,r28
 2042 0a8c DF91      		pop r29
 2043 0a8e CF91      		pop r28
 2044 0a90 1F91      		pop r17
 2045 0a92 0F91      		pop r16
 2046 0a94 0895      		ret
 2047               		.cfi_endproc
 2048               	.LFE102:
 2050               	.global	usart_spi_set_baudrate
 2052               	usart_spi_set_baudrate:
 2053               	.LFB103:
 319:../../../platform/mega_rf/drivers/usart/usart_megarf.c **** 
 320:../../../platform/mega_rf/drivers/usart/usart_megarf.c **** /**
 321:../../../platform/mega_rf/drivers/usart/usart_megarf.c ****  * \brief Set the baudrate value in the USART_SPI module
 322:../../../platform/mega_rf/drivers/usart/usart_megarf.c ****  *
 323:../../../platform/mega_rf/drivers/usart/usart_megarf.c ****  * This function sets the baudrate register regarding the CPU frequency.
 324:../../../platform/mega_rf/drivers/usart/usart_megarf.c ****  *
 325:../../../platform/mega_rf/drivers/usart/usart_megarf.c ****  * \param usart The USART(SPI) module.
 326:../../../platform/mega_rf/drivers/usart/usart_megarf.c ****  * \param baud The baudrate.
 327:../../../platform/mega_rf/drivers/usart/usart_megarf.c ****  * \param cpu_hz The CPU frequency.
 328:../../../platform/mega_rf/drivers/usart/usart_megarf.c ****  */
 329:../../../platform/mega_rf/drivers/usart/usart_megarf.c **** void usart_spi_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
 330:../../../platform/mega_rf/drivers/usart/usart_megarf.c **** {
 2054               		.loc 5 330 0
 2055               		.cfi_startproc
 2056 0a96 0F93      		push r16
 2057               	.LCFI74:
 2058               		.cfi_def_cfa_offset 3
 2059               		.cfi_offset 16, -2
 2060 0a98 1F93      		push r17
 2061               	.LCFI75:
 2062               		.cfi_def_cfa_offset 4
 2063               		.cfi_offset 17, -3
 2064 0a9a CF93      		push r28
 2065               	.LCFI76:
 2066               		.cfi_def_cfa_offset 5
 2067               		.cfi_offset 28, -4
 2068 0a9c DF93      		push r29
 2069               	.LCFI77:
 2070               		.cfi_def_cfa_offset 6
 2071               		.cfi_offset 29, -5
 2072 0a9e CDB7      		in r28,__SP_L__
 2073 0aa0 DEB7      		in r29,__SP_H__
 2074               	.LCFI78:
 2075               		.cfi_def_cfa_register 28
 2076 0aa2 2E97      		sbiw r28,14
 2077               	.LCFI79:
 2078               		.cfi_def_cfa_offset 20
 2079 0aa4 0FB6      		in __tmp_reg__,__SREG__
 2080 0aa6 F894      		cli
 2081 0aa8 DEBF      		out __SP_H__,r29
 2082 0aaa 0FBE      		out __SREG__,__tmp_reg__
 2083 0aac CDBF      		out __SP_L__,r28
 2084               	/* prologue: function */
 2085               	/* frame size = 14 */
 2086               	/* stack size = 18 */
 2087               	.L__stack_usage = 18
 2088 0aae 9E83      		std Y+6,r25
 2089 0ab0 8D83      		std Y+5,r24
 2090 0ab2 4F83      		std Y+7,r20
 2091 0ab4 5887      		std Y+8,r21
 2092 0ab6 6987      		std Y+9,r22
 2093 0ab8 7A87      		std Y+10,r23
 2094 0aba 0B87      		std Y+11,r16
 2095 0abc 1C87      		std Y+12,r17
 2096 0abe 2D87      		std Y+13,r18
 2097 0ac0 3E87      		std Y+14,r19
 331:../../../platform/mega_rf/drivers/usart/usart_megarf.c **** 	uint32_t ubrr;
 332:../../../platform/mega_rf/drivers/usart/usart_megarf.c **** 
 333:../../../platform/mega_rf/drivers/usart/usart_megarf.c **** 	/* Check if baudrate is less than the maximim limit specified in
 334:../../../platform/mega_rf/drivers/usart/usart_megarf.c **** 	 * datasheet */
 335:../../../platform/mega_rf/drivers/usart/usart_megarf.c **** 	if (baud < (cpu_hz / 2)) {
 2098               		.loc 5 335 0
 2099 0ac2 8B85      		ldd r24,Y+11
 2100 0ac4 9C85      		ldd r25,Y+12
 2101 0ac6 AD85      		ldd r26,Y+13
 2102 0ac8 BE85      		ldd r27,Y+14
 2103 0aca 9C01      		movw r18,r24
 2104 0acc AD01      		movw r20,r26
 2105 0ace 5695      		lsr r21
 2106 0ad0 4795      		ror r20
 2107 0ad2 3795      		ror r19
 2108 0ad4 2795      		ror r18
 2109 0ad6 8F81      		ldd r24,Y+7
 2110 0ad8 9885      		ldd r25,Y+8
 2111 0ada A985      		ldd r26,Y+9
 2112 0adc BA85      		ldd r27,Y+10
 2113 0ade 8217      		cp r24,r18
 2114 0ae0 9307      		cpc r25,r19
 2115 0ae2 A407      		cpc r26,r20
 2116 0ae4 B507      		cpc r27,r21
 2117 0ae6 00F4      		brsh .L82
 336:../../../platform/mega_rf/drivers/usart/usart_megarf.c **** 		ubrr = (cpu_hz / (2 * baud) - 1);
 2118               		.loc 5 336 0
 2119 0ae8 8F81      		ldd r24,Y+7
 2120 0aea 9885      		ldd r25,Y+8
 2121 0aec A985      		ldd r26,Y+9
 2122 0aee BA85      		ldd r27,Y+10
 2123 0af0 9C01      		movw r18,r24
 2124 0af2 AD01      		movw r20,r26
 2125 0af4 220F      		lsl r18
 2126 0af6 331F      		rol r19
 2127 0af8 441F      		rol r20
 2128 0afa 551F      		rol r21
 2129 0afc 8B85      		ldd r24,Y+11
 2130 0afe 9C85      		ldd r25,Y+12
 2131 0b00 AD85      		ldd r26,Y+13
 2132 0b02 BE85      		ldd r27,Y+14
 2133 0b04 BC01      		movw r22,r24
 2134 0b06 CD01      		movw r24,r26
 2135 0b08 0E94 0000 		call __udivmodsi4
 2136 0b0c DA01      		movw r26,r20
 2137 0b0e C901      		movw r24,r18
 2138 0b10 0197      		sbiw r24,1
 2139 0b12 A109      		sbc r26,__zero_reg__
 2140 0b14 B109      		sbc r27,__zero_reg__
 2141 0b16 8983      		std Y+1,r24
 2142 0b18 9A83      		std Y+2,r25
 2143 0b1a AB83      		std Y+3,r26
 2144 0b1c BC83      		std Y+4,r27
 2145 0b1e 00C0      		rjmp .L83
 2146               	.L82:
 337:../../../platform/mega_rf/drivers/usart/usart_megarf.c **** 	} else {
 338:../../../platform/mega_rf/drivers/usart/usart_megarf.c **** 		/* If baudrate is not within the specfication in datasheet,
 339:../../../platform/mega_rf/drivers/usart/usart_megarf.c **** 		 * assign maximum baudrate possible for the current CPU frequency */
 340:../../../platform/mega_rf/drivers/usart/usart_megarf.c **** 		ubrr = 0;
 2147               		.loc 5 340 0
 2148 0b20 1982      		std Y+1,__zero_reg__
 2149 0b22 1A82      		std Y+2,__zero_reg__
 2150 0b24 1B82      		std Y+3,__zero_reg__
 2151 0b26 1C82      		std Y+4,__zero_reg__
 2152               	.L83:
 341:../../../platform/mega_rf/drivers/usart/usart_megarf.c **** 	}
 342:../../../platform/mega_rf/drivers/usart/usart_megarf.c **** 	
 343:../../../platform/mega_rf/drivers/usart/usart_megarf.c **** 	usart->UBRR  = ubrr;
 2153               		.loc 5 343 0
 2154 0b28 2981      		ldd r18,Y+1
 2155 0b2a 3A81      		ldd r19,Y+2
 2156 0b2c 8D81      		ldd r24,Y+5
 2157 0b2e 9E81      		ldd r25,Y+6
 2158 0b30 FC01      		movw r30,r24
 2159 0b32 3583      		std Z+5,r19
 2160 0b34 2483      		std Z+4,r18
 344:../../../platform/mega_rf/drivers/usart/usart_megarf.c **** }
 2161               		.loc 5 344 0
 2162 0b36 0000      		nop
 2163               	/* epilogue start */
 2164 0b38 2E96      		adiw r28,14
 2165 0b3a 0FB6      		in __tmp_reg__,__SREG__
 2166 0b3c F894      		cli
 2167 0b3e DEBF      		out __SP_H__,r29
 2168 0b40 0FBE      		out __SREG__,__tmp_reg__
 2169 0b42 CDBF      		out __SP_L__,r28
 2170 0b44 DF91      		pop r29
 2171 0b46 CF91      		pop r28
 2172 0b48 1F91      		pop r17
 2173 0b4a 0F91      		pop r16
 2174 0b4c 0895      		ret
 2175               		.cfi_endproc
 2176               	.LFE103:
 2178               	.Letext0:
 2179               		.file 6 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\in
 2180               		.file 7 "../../../platform/mega_rf/utils/status_codes.h"
DEFINED SYMBOLS
                            *ABS*:00000000 usart_megarf.c
C:\Users\GUILHE~1\AppData\Local\Temp\ccGR63rl.s:2      *ABS*:0000003e __SP_H__
C:\Users\GUILHE~1\AppData\Local\Temp\ccGR63rl.s:3      *ABS*:0000003d __SP_L__
C:\Users\GUILHE~1\AppData\Local\Temp\ccGR63rl.s:4      *ABS*:0000003f __SREG__
C:\Users\GUILHE~1\AppData\Local\Temp\ccGR63rl.s:5      *ABS*:0000003b __RAMPZ__
C:\Users\GUILHE~1\AppData\Local\Temp\ccGR63rl.s:6      *ABS*:00000000 __tmp_reg__
C:\Users\GUILHE~1\AppData\Local\Temp\ccGR63rl.s:7      *ABS*:00000001 __zero_reg__
C:\Users\GUILHE~1\AppData\Local\Temp\ccGR63rl.s:14     .progmem.data.baudctrl_1mhz:00000000 baudctrl_1mhz
C:\Users\GUILHE~1\AppData\Local\Temp\ccGR63rl.s:26     .progmem.data.baudctrl_8mhz:00000000 baudctrl_8mhz
C:\Users\GUILHE~1\AppData\Local\Temp\ccGR63rl.s:38     .progmem.data.baudctrl_16mhz:00000000 baudctrl_16mhz
C:\Users\GUILHE~1\AppData\Local\Temp\ccGR63rl.s:49     .text:00000000 usart_rx_enable
C:\Users\GUILHE~1\AppData\Local\Temp\ccGR63rl.s:98     .text:0000002e usart_format_set
C:\Users\GUILHE~1\AppData\Local\Temp\ccGR63rl.s:229    .text:000000ec usart_tx_enable
C:\Users\GUILHE~1\AppData\Local\Temp\ccGR63rl.s:277    .text:0000011a usart_set_mode
C:\Users\GUILHE~1\AppData\Local\Temp\ccGR63rl.s:331    .text:00000154 usart_data_register_is_empty
C:\Users\GUILHE~1\AppData\Local\Temp\ccGR63rl.s:383    .text:00000186 usart_rx_is_complete
C:\Users\GUILHE~1\AppData\Local\Temp\ccGR63rl.s:435    .text:000001b8 ioport_pin_to_mask
C:\Users\GUILHE~1\AppData\Local\Temp\ccGR63rl.s:496    .text:000001ee sysclk_get_main_hz
C:\Users\GUILHE~1\AppData\Local\Temp\ccGR63rl.s:533    .text:00000208 sysclk_get_source_clock_hz
C:\Users\GUILHE~1\AppData\Local\Temp\ccGR63rl.s:568    .text:00000222 usart_enable_module_clock
C:\Users\GUILHE~1\AppData\Local\Temp\ccGR63rl.s:629    .text:00000260 usart_init_rs232
C:\Users\GUILHE~1\AppData\Local\Temp\ccGR63rl.s:1782   .text:000008e4 usart_set_baudrate
C:\Users\GUILHE~1\AppData\Local\Temp\ccGR63rl.s:739    .text:000002fe usart_init_spi
C:\Users\GUILHE~1\AppData\Local\Temp\ccGR63rl.s:2052   .text:00000a96 usart_spi_set_baudrate
C:\Users\GUILHE~1\AppData\Local\Temp\ccGR63rl.s:1306   .text:0000067c usart_putchar
C:\Users\GUILHE~1\AppData\Local\Temp\ccGR63rl.s:1366   .text:000006ba usart_getchar
C:\Users\GUILHE~1\AppData\Local\Temp\ccGR63rl.s:1419   .text:000006ee usart_get_baud_offset
C:\Users\GUILHE~1\AppData\Local\Temp\ccGR63rl.s:1564   .text:000007b2 usart_set_baudrate_precalculated

UNDEFINED SYMBOLS
sysclk_enable_module
__udivmodsi4
