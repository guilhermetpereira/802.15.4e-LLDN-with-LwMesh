   1               		.file	"wdt_megarf.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__RAMPZ__ = 0x3b
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
   8               		.text
   9               	.Ltext0:
  10               		.cfi_sections	.debug_frame
  12               	cpu_irq_save:
  13               	.LFB4:
  14               		.file 1 "../../../platform/common/utils/interrupt/interrupt_avr8.h"
   1:../../../platform/common/utils/interrupt/interrupt_avr8.h **** /**
   2:../../../platform/common/utils/interrupt/interrupt_avr8.h ****  * \file
   3:../../../platform/common/utils/interrupt/interrupt_avr8.h ****  *
   4:../../../platform/common/utils/interrupt/interrupt_avr8.h ****  * \brief Global interrupt management for 8-bit AVR
   5:../../../platform/common/utils/interrupt/interrupt_avr8.h ****  *
   6:../../../platform/common/utils/interrupt/interrupt_avr8.h ****  * Copyright (C) 2010-2012 Atmel Corporation. All rights reserved.
   7:../../../platform/common/utils/interrupt/interrupt_avr8.h ****  *
   8:../../../platform/common/utils/interrupt/interrupt_avr8.h ****  * \asf_license_start
   9:../../../platform/common/utils/interrupt/interrupt_avr8.h ****  *
  10:../../../platform/common/utils/interrupt/interrupt_avr8.h ****  * \page License
  11:../../../platform/common/utils/interrupt/interrupt_avr8.h ****  *
  12:../../../platform/common/utils/interrupt/interrupt_avr8.h ****  * Redistribution and use in source and binary forms, with or without
  13:../../../platform/common/utils/interrupt/interrupt_avr8.h ****  * modification, are permitted provided that the following conditions are met:
  14:../../../platform/common/utils/interrupt/interrupt_avr8.h ****  *
  15:../../../platform/common/utils/interrupt/interrupt_avr8.h ****  * 1. Redistributions of source code must retain the above copyright notice,
  16:../../../platform/common/utils/interrupt/interrupt_avr8.h ****  *    this list of conditions and the following disclaimer.
  17:../../../platform/common/utils/interrupt/interrupt_avr8.h ****  *
  18:../../../platform/common/utils/interrupt/interrupt_avr8.h ****  * 2. Redistributions in binary form must reproduce the above copyright notice,
  19:../../../platform/common/utils/interrupt/interrupt_avr8.h ****  *    this list of conditions and the following disclaimer in the documentation
  20:../../../platform/common/utils/interrupt/interrupt_avr8.h ****  *    and/or other materials provided with the distribution.
  21:../../../platform/common/utils/interrupt/interrupt_avr8.h ****  *
  22:../../../platform/common/utils/interrupt/interrupt_avr8.h ****  * 3. The name of Atmel may not be used to endorse or promote products derived
  23:../../../platform/common/utils/interrupt/interrupt_avr8.h ****  *    from this software without specific prior written permission.
  24:../../../platform/common/utils/interrupt/interrupt_avr8.h ****  *
  25:../../../platform/common/utils/interrupt/interrupt_avr8.h ****  * 4. This software may only be redistributed and used in connection with an
  26:../../../platform/common/utils/interrupt/interrupt_avr8.h ****  *    Atmel microcontroller product.
  27:../../../platform/common/utils/interrupt/interrupt_avr8.h ****  *
  28:../../../platform/common/utils/interrupt/interrupt_avr8.h ****  * THIS SOFTWARE IS PROVIDED BY ATMEL "AS IS" AND ANY EXPRESS OR IMPLIED
  29:../../../platform/common/utils/interrupt/interrupt_avr8.h ****  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
  30:../../../platform/common/utils/interrupt/interrupt_avr8.h ****  * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE
  31:../../../platform/common/utils/interrupt/interrupt_avr8.h ****  * EXPRESSLY AND SPECIFICALLY DISCLAIMED. IN NO EVENT SHALL ATMEL BE LIABLE FOR
  32:../../../platform/common/utils/interrupt/interrupt_avr8.h ****  * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  33:../../../platform/common/utils/interrupt/interrupt_avr8.h ****  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
  34:../../../platform/common/utils/interrupt/interrupt_avr8.h ****  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
  35:../../../platform/common/utils/interrupt/interrupt_avr8.h ****  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
  36:../../../platform/common/utils/interrupt/interrupt_avr8.h ****  * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
  37:../../../platform/common/utils/interrupt/interrupt_avr8.h ****  * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  38:../../../platform/common/utils/interrupt/interrupt_avr8.h ****  * POSSIBILITY OF SUCH DAMAGE.
  39:../../../platform/common/utils/interrupt/interrupt_avr8.h ****  *
  40:../../../platform/common/utils/interrupt/interrupt_avr8.h ****  * \asf_license_stop
  41:../../../platform/common/utils/interrupt/interrupt_avr8.h ****  *
  42:../../../platform/common/utils/interrupt/interrupt_avr8.h ****  */
  43:../../../platform/common/utils/interrupt/interrupt_avr8.h **** #ifndef UTILS_INTERRUPT_INTERRUPT_H
  44:../../../platform/common/utils/interrupt/interrupt_avr8.h **** #define UTILS_INTERRUPT_INTERRUPT_H
  45:../../../platform/common/utils/interrupt/interrupt_avr8.h **** 
  46:../../../platform/common/utils/interrupt/interrupt_avr8.h **** #include <compiler.h>
  47:../../../platform/common/utils/interrupt/interrupt_avr8.h **** #include <parts.h>
  48:../../../platform/common/utils/interrupt/interrupt_avr8.h **** 
  49:../../../platform/common/utils/interrupt/interrupt_avr8.h **** /**
  50:../../../platform/common/utils/interrupt/interrupt_avr8.h ****  * \weakgroup interrupt_group
  51:../../../platform/common/utils/interrupt/interrupt_avr8.h ****  *
  52:../../../platform/common/utils/interrupt/interrupt_avr8.h ****  * @{
  53:../../../platform/common/utils/interrupt/interrupt_avr8.h ****  */
  54:../../../platform/common/utils/interrupt/interrupt_avr8.h **** 
  55:../../../platform/common/utils/interrupt/interrupt_avr8.h **** #ifdef ISR_CUSTOM_H
  56:../../../platform/common/utils/interrupt/interrupt_avr8.h **** #  include ISR_CUSTOM_H
  57:../../../platform/common/utils/interrupt/interrupt_avr8.h **** #else
  58:../../../platform/common/utils/interrupt/interrupt_avr8.h **** 
  59:../../../platform/common/utils/interrupt/interrupt_avr8.h **** /**
  60:../../../platform/common/utils/interrupt/interrupt_avr8.h ****  * \def ISR
  61:../../../platform/common/utils/interrupt/interrupt_avr8.h ****  * \brief Define service routine for specified interrupt vector
  62:../../../platform/common/utils/interrupt/interrupt_avr8.h ****  *
  63:../../../platform/common/utils/interrupt/interrupt_avr8.h ****  * Usage:
  64:../../../platform/common/utils/interrupt/interrupt_avr8.h ****  * \code
  65:../../../platform/common/utils/interrupt/interrupt_avr8.h ****  * ISR(FOO_vect)
  66:../../../platform/common/utils/interrupt/interrupt_avr8.h ****  * {
  67:../../../platform/common/utils/interrupt/interrupt_avr8.h ****  *     ...
  68:../../../platform/common/utils/interrupt/interrupt_avr8.h ****  * }
  69:../../../platform/common/utils/interrupt/interrupt_avr8.h ****  * \endcode
  70:../../../platform/common/utils/interrupt/interrupt_avr8.h ****  *
  71:../../../platform/common/utils/interrupt/interrupt_avr8.h ****  * \param vect Interrupt vector name as found in the device header files.
  72:../../../platform/common/utils/interrupt/interrupt_avr8.h ****  */
  73:../../../platform/common/utils/interrupt/interrupt_avr8.h **** #if defined(__DOXYGEN__)
  74:../../../platform/common/utils/interrupt/interrupt_avr8.h **** #  define ISR(vect)
  75:../../../platform/common/utils/interrupt/interrupt_avr8.h **** #elif defined(__GNUC__)
  76:../../../platform/common/utils/interrupt/interrupt_avr8.h **** #  include <avr/interrupt.h>
  77:../../../platform/common/utils/interrupt/interrupt_avr8.h **** #elif defined(__ICCAVR__)
  78:../../../platform/common/utils/interrupt/interrupt_avr8.h **** #  define __ISR(x) _Pragma(#x)
  79:../../../platform/common/utils/interrupt/interrupt_avr8.h **** #  define ISR(vect) __ISR(vector=vect) __interrupt void handler_##vect(void)
  80:../../../platform/common/utils/interrupt/interrupt_avr8.h **** #endif
  81:../../../platform/common/utils/interrupt/interrupt_avr8.h **** #endif // ISR_CUSTOM_H
  82:../../../platform/common/utils/interrupt/interrupt_avr8.h **** 
  83:../../../platform/common/utils/interrupt/interrupt_avr8.h **** #if XMEGA
  84:../../../platform/common/utils/interrupt/interrupt_avr8.h **** /**
  85:../../../platform/common/utils/interrupt/interrupt_avr8.h ****  * \brief Initialize interrupt vectors
  86:../../../platform/common/utils/interrupt/interrupt_avr8.h ****  * Enables all interrupt levels, with vectors located in the application section
  87:../../../platform/common/utils/interrupt/interrupt_avr8.h ****  * and fixed priority scheduling.
  88:../../../platform/common/utils/interrupt/interrupt_avr8.h ****  */
  89:../../../platform/common/utils/interrupt/interrupt_avr8.h **** #define irq_initialize_vectors() \
  90:../../../platform/common/utils/interrupt/interrupt_avr8.h **** 	PMIC.CTRL = PMIC_LOLVLEN_bm | PMIC_MEDLVLEN_bm | PMIC_HILVLEN_bm;
  91:../../../platform/common/utils/interrupt/interrupt_avr8.h **** #endif
  92:../../../platform/common/utils/interrupt/interrupt_avr8.h **** 
  93:../../../platform/common/utils/interrupt/interrupt_avr8.h **** #ifdef __GNUC__
  94:../../../platform/common/utils/interrupt/interrupt_avr8.h **** #  define cpu_irq_enable()     sei()
  95:../../../platform/common/utils/interrupt/interrupt_avr8.h **** #  define cpu_irq_disable()    cli()
  96:../../../platform/common/utils/interrupt/interrupt_avr8.h **** #else
  97:../../../platform/common/utils/interrupt/interrupt_avr8.h **** #  define cpu_irq_enable()     __enable_interrupt()
  98:../../../platform/common/utils/interrupt/interrupt_avr8.h **** #  define cpu_irq_disable()    __disable_interrupt()
  99:../../../platform/common/utils/interrupt/interrupt_avr8.h **** #endif
 100:../../../platform/common/utils/interrupt/interrupt_avr8.h **** 
 101:../../../platform/common/utils/interrupt/interrupt_avr8.h **** typedef uint8_t irqflags_t;
 102:../../../platform/common/utils/interrupt/interrupt_avr8.h **** 
 103:../../../platform/common/utils/interrupt/interrupt_avr8.h **** static inline irqflags_t cpu_irq_save(void)
 104:../../../platform/common/utils/interrupt/interrupt_avr8.h **** {
  15               		.loc 1 104 0
  16               		.cfi_startproc
  17 0000 CF93      		push r28
  18               	.LCFI0:
  19               		.cfi_def_cfa_offset 3
  20               		.cfi_offset 28, -2
  21 0002 DF93      		push r29
  22               	.LCFI1:
  23               		.cfi_def_cfa_offset 4
  24               		.cfi_offset 29, -3
  25 0004 1F92      		push __zero_reg__
  26               	.LCFI2:
  27               		.cfi_def_cfa_offset 5
  28 0006 CDB7      		in r28,__SP_L__
  29 0008 DEB7      		in r29,__SP_H__
  30               	.LCFI3:
  31               		.cfi_def_cfa_register 28
  32               	/* prologue: function */
  33               	/* frame size = 1 */
  34               	/* stack size = 3 */
  35               	.L__stack_usage = 3
 105:../../../platform/common/utils/interrupt/interrupt_avr8.h **** 	irqflags_t flags = SREG;
  36               		.loc 1 105 0
  37 000a 8FE5      		ldi r24,lo8(95)
  38 000c 90E0      		ldi r25,0
  39 000e FC01      		movw r30,r24
  40 0010 8081      		ld r24,Z
  41 0012 8983      		std Y+1,r24
 106:../../../platform/common/utils/interrupt/interrupt_avr8.h **** 	cpu_irq_disable();
  42               		.loc 1 106 0
  43               	/* #APP */
  44               	 ;  106 "../../../platform/common/utils/interrupt/interrupt_avr8.h" 1
  45 0014 F894      		cli
  46               	 ;  0 "" 2
 107:../../../platform/common/utils/interrupt/interrupt_avr8.h **** 	return flags;
  47               		.loc 1 107 0
  48               	/* #NOAPP */
  49 0016 8981      		ldd r24,Y+1
  50               	/* epilogue start */
 108:../../../platform/common/utils/interrupt/interrupt_avr8.h **** }
  51               		.loc 1 108 0
  52 0018 0F90      		pop __tmp_reg__
  53 001a DF91      		pop r29
  54 001c CF91      		pop r28
  55 001e 0895      		ret
  56               		.cfi_endproc
  57               	.LFE4:
  60               	cpu_irq_restore:
  61               	.LFB5:
 109:../../../platform/common/utils/interrupt/interrupt_avr8.h **** 
 110:../../../platform/common/utils/interrupt/interrupt_avr8.h **** static inline void cpu_irq_restore(irqflags_t flags)
 111:../../../platform/common/utils/interrupt/interrupt_avr8.h **** {
  62               		.loc 1 111 0
  63               		.cfi_startproc
  64 0020 CF93      		push r28
  65               	.LCFI4:
  66               		.cfi_def_cfa_offset 3
  67               		.cfi_offset 28, -2
  68 0022 DF93      		push r29
  69               	.LCFI5:
  70               		.cfi_def_cfa_offset 4
  71               		.cfi_offset 29, -3
  72 0024 1F92      		push __zero_reg__
  73               	.LCFI6:
  74               		.cfi_def_cfa_offset 5
  75 0026 CDB7      		in r28,__SP_L__
  76 0028 DEB7      		in r29,__SP_H__
  77               	.LCFI7:
  78               		.cfi_def_cfa_register 28
  79               	/* prologue: function */
  80               	/* frame size = 1 */
  81               	/* stack size = 3 */
  82               	.L__stack_usage = 3
  83 002a 8983      		std Y+1,r24
 112:../../../platform/common/utils/interrupt/interrupt_avr8.h **** 	barrier();
  84               		.loc 1 112 0
 113:../../../platform/common/utils/interrupt/interrupt_avr8.h **** 	SREG = flags;
  85               		.loc 1 113 0
  86 002c 8FE5      		ldi r24,lo8(95)
  87 002e 90E0      		ldi r25,0
  88 0030 2981      		ldd r18,Y+1
  89 0032 FC01      		movw r30,r24
  90 0034 2083      		st Z,r18
 114:../../../platform/common/utils/interrupt/interrupt_avr8.h **** }
  91               		.loc 1 114 0
  92 0036 0000      		nop
  93               	/* epilogue start */
  94 0038 0F90      		pop __tmp_reg__
  95 003a DF91      		pop r29
  96 003c CF91      		pop r28
  97 003e 0895      		ret
  98               		.cfi_endproc
  99               	.LFE5:
 102               	wdt_reset_flag_clear:
 103               	.LFB8:
 104               		.file 2 "../../../platform/mega_rf/drivers/wdt/wdt_megarf.h"
   1:../../../platform/mega_rf/drivers/wdt/wdt_megarf.h **** /**
   2:../../../platform/mega_rf/drivers/wdt/wdt_megarf.h ****  * \file
   3:../../../platform/mega_rf/drivers/wdt/wdt_megarf.h ****  *
   4:../../../platform/mega_rf/drivers/wdt/wdt_megarf.h ****  * \brief AVR MEGARF WatchDog Timer driver Definition.
   5:../../../platform/mega_rf/drivers/wdt/wdt_megarf.h ****  *
   6:../../../platform/mega_rf/drivers/wdt/wdt_megarf.h ****  * Copyright (c) 2013-2014 Atmel Corporation. All rights reserved.
   7:../../../platform/mega_rf/drivers/wdt/wdt_megarf.h ****  *
   8:../../../platform/mega_rf/drivers/wdt/wdt_megarf.h ****  * \asf_license_start
   9:../../../platform/mega_rf/drivers/wdt/wdt_megarf.h ****  *
  10:../../../platform/mega_rf/drivers/wdt/wdt_megarf.h ****  * \page License
  11:../../../platform/mega_rf/drivers/wdt/wdt_megarf.h ****  *
  12:../../../platform/mega_rf/drivers/wdt/wdt_megarf.h ****  * Redistribution and use in source and binary forms, with or without
  13:../../../platform/mega_rf/drivers/wdt/wdt_megarf.h ****  * modification, are permitted provided that the following conditions are met:
  14:../../../platform/mega_rf/drivers/wdt/wdt_megarf.h ****  *
  15:../../../platform/mega_rf/drivers/wdt/wdt_megarf.h ****  * 1. Redistributions of source code must retain the above copyright notice,
  16:../../../platform/mega_rf/drivers/wdt/wdt_megarf.h ****  *    this list of conditions and the following disclaimer.
  17:../../../platform/mega_rf/drivers/wdt/wdt_megarf.h ****  *
  18:../../../platform/mega_rf/drivers/wdt/wdt_megarf.h ****  * 2. Redistributions in binary form must reproduce the above copyright notice,
  19:../../../platform/mega_rf/drivers/wdt/wdt_megarf.h ****  *    this list of conditions and the following disclaimer in the documentation
  20:../../../platform/mega_rf/drivers/wdt/wdt_megarf.h ****  *    and/or other materials provided with the distribution.
  21:../../../platform/mega_rf/drivers/wdt/wdt_megarf.h ****  *
  22:../../../platform/mega_rf/drivers/wdt/wdt_megarf.h ****  * 3. The name of Atmel may not be used to endorse or promote products derived
  23:../../../platform/mega_rf/drivers/wdt/wdt_megarf.h ****  *    from this software without specific prior written permission.
  24:../../../platform/mega_rf/drivers/wdt/wdt_megarf.h ****  *
  25:../../../platform/mega_rf/drivers/wdt/wdt_megarf.h ****  * 4. This software may only be redistributed and used in connection with an
  26:../../../platform/mega_rf/drivers/wdt/wdt_megarf.h ****  *    Atmel microcontroller product.
  27:../../../platform/mega_rf/drivers/wdt/wdt_megarf.h ****  *
  28:../../../platform/mega_rf/drivers/wdt/wdt_megarf.h ****  * THIS SOFTWARE IS PROVIDED BY ATMEL "AS IS" AND ANY EXPRESS OR IMPLIED
  29:../../../platform/mega_rf/drivers/wdt/wdt_megarf.h ****  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
  30:../../../platform/mega_rf/drivers/wdt/wdt_megarf.h ****  * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE
  31:../../../platform/mega_rf/drivers/wdt/wdt_megarf.h ****  * EXPRESSLY AND SPECIFICALLY DISCLAIMED. IN NO EVENT SHALL ATMEL BE LIABLE FOR
  32:../../../platform/mega_rf/drivers/wdt/wdt_megarf.h ****  * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  33:../../../platform/mega_rf/drivers/wdt/wdt_megarf.h ****  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
  34:../../../platform/mega_rf/drivers/wdt/wdt_megarf.h ****  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
  35:../../../platform/mega_rf/drivers/wdt/wdt_megarf.h ****  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
  36:../../../platform/mega_rf/drivers/wdt/wdt_megarf.h ****  * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
  37:../../../platform/mega_rf/drivers/wdt/wdt_megarf.h ****  * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  38:../../../platform/mega_rf/drivers/wdt/wdt_megarf.h ****  * POSSIBILITY OF SUCH DAMAGE.
  39:../../../platform/mega_rf/drivers/wdt/wdt_megarf.h ****  *
  40:../../../platform/mega_rf/drivers/wdt/wdt_megarf.h ****  * \asf_license_stop
  41:../../../platform/mega_rf/drivers/wdt/wdt_megarf.h ****  *
  42:../../../platform/mega_rf/drivers/wdt/wdt_megarf.h ****  */
  43:../../../platform/mega_rf/drivers/wdt/wdt_megarf.h **** #ifndef _WDT_MEGARF_H_
  44:../../../platform/mega_rf/drivers/wdt/wdt_megarf.h **** #define _WDT_MEGARF_H_
  45:../../../platform/mega_rf/drivers/wdt/wdt_megarf.h **** 
  46:../../../platform/mega_rf/drivers/wdt/wdt_megarf.h **** #ifdef __cplusplus
  47:../../../platform/mega_rf/drivers/wdt/wdt_megarf.h **** extern "C"
  48:../../../platform/mega_rf/drivers/wdt/wdt_megarf.h **** {
  49:../../../platform/mega_rf/drivers/wdt/wdt_megarf.h **** #endif
  50:../../../platform/mega_rf/drivers/wdt/wdt_megarf.h **** 
  51:../../../platform/mega_rf/drivers/wdt/wdt_megarf.h **** #include <compiler.h>
  52:../../../platform/mega_rf/drivers/wdt/wdt_megarf.h **** 
  53:../../../platform/mega_rf/drivers/wdt/wdt_megarf.h **** /**
  54:../../../platform/mega_rf/drivers/wdt/wdt_megarf.h ****  * \defgroup megarf_wdt_group Watchdog Timer (WDT)
  55:../../../platform/mega_rf/drivers/wdt/wdt_megarf.h ****  *
  56:../../../platform/mega_rf/drivers/wdt/wdt_megarf.h ****  * See \ref megarf_wdt_quickstart
  57:../../../platform/mega_rf/drivers/wdt/wdt_megarf.h ****  *
  58:../../../platform/mega_rf/drivers/wdt/wdt_megarf.h ****  * This is a driver for configuring, enabling, disabling and use of the on-chip
  59:../../../platform/mega_rf/drivers/wdt/wdt_megarf.h ****  * WDT.
  60:../../../platform/mega_rf/drivers/wdt/wdt_megarf.h ****  *
  61:../../../platform/mega_rf/drivers/wdt/wdt_megarf.h ****  * \section dependencies Dependencies
  62:../../../platform/mega_rf/drivers/wdt/wdt_megarf.h ****  * This driver depends on the following modules:
  63:../../../platform/mega_rf/drivers/wdt/wdt_megarf.h ****  * - \ref sysclk_group for peripheral clock control.
  64:../../../platform/mega_rf/drivers/wdt/wdt_megarf.h ****  *
  65:../../../platform/mega_rf/drivers/wdt/wdt_megarf.h ****  * @{
  66:../../../platform/mega_rf/drivers/wdt/wdt_megarf.h ****  */
  67:../../../platform/mega_rf/drivers/wdt/wdt_megarf.h **** 
  68:../../../platform/mega_rf/drivers/wdt/wdt_megarf.h **** /**
  69:../../../platform/mega_rf/drivers/wdt/wdt_megarf.h ****  * \brief Interrupt event callback function type
  70:../../../platform/mega_rf/drivers/wdt/wdt_megarf.h ****  *
  71:../../../platform/mega_rf/drivers/wdt/wdt_megarf.h ****  * The interrupt handler can be configured to do a function callback,
  72:../../../platform/mega_rf/drivers/wdt/wdt_megarf.h ****  * the callback function must match the wdt_callback_t type.
  73:../../../platform/mega_rf/drivers/wdt/wdt_megarf.h ****  *
  74:../../../platform/mega_rf/drivers/wdt/wdt_megarf.h ****  */
  75:../../../platform/mega_rf/drivers/wdt/wdt_megarf.h **** typedef void (*wdt_callback_t)(void);
  76:../../../platform/mega_rf/drivers/wdt/wdt_megarf.h **** 
  77:../../../platform/mega_rf/drivers/wdt/wdt_megarf.h **** /* WDTCSR  bit masks and bit positions */
  78:../../../platform/mega_rf/drivers/wdt/wdt_megarf.h **** #define WDIF_bm  0x80           /* WDT timeout interrupt flag bit mask. */
  79:../../../platform/mega_rf/drivers/wdt/wdt_megarf.h **** #define WDIF_bp  7              /* WDT timeout interrupt flag bit position. */
  80:../../../platform/mega_rf/drivers/wdt/wdt_megarf.h **** 
  81:../../../platform/mega_rf/drivers/wdt/wdt_megarf.h **** #define WDIE_bm  0x40           /* WDT timeout interrupt enable bit mask. */
  82:../../../platform/mega_rf/drivers/wdt/wdt_megarf.h **** #define WDIE_bp  6              /* WDT timeout interrupt enable bit position. */
  83:../../../platform/mega_rf/drivers/wdt/wdt_megarf.h **** 
  84:../../../platform/mega_rf/drivers/wdt/wdt_megarf.h **** #define WDP3_bm  0x20           /* WDT prescaler 3 Bit mask. */
  85:../../../platform/mega_rf/drivers/wdt/wdt_megarf.h **** #define WDP3_bp  5              /*  WDT prescaler 3 bit position. */
  86:../../../platform/mega_rf/drivers/wdt/wdt_megarf.h **** 
  87:../../../platform/mega_rf/drivers/wdt/wdt_megarf.h **** #define WDCE_bm   0x10          /* WDT change enable bit mask. */
  88:../../../platform/mega_rf/drivers/wdt/wdt_megarf.h **** #define WDCE_bp   4             /* WDT change enable bit position. */
  89:../../../platform/mega_rf/drivers/wdt/wdt_megarf.h **** 
  90:../../../platform/mega_rf/drivers/wdt/wdt_megarf.h **** #define WDE_bm  0x08            /* WDT enable bit mask. */
  91:../../../platform/mega_rf/drivers/wdt/wdt_megarf.h **** #define WDE_bp  3               /* WDT enable bit position. */
  92:../../../platform/mega_rf/drivers/wdt/wdt_megarf.h **** 
  93:../../../platform/mega_rf/drivers/wdt/wdt_megarf.h **** #define WDP2_bm  0x04           /* WDT prescaler 2 Bit mask. */
  94:../../../platform/mega_rf/drivers/wdt/wdt_megarf.h **** #define WDP2_bp  2              /*  WDT prescaler 2 bit position. */
  95:../../../platform/mega_rf/drivers/wdt/wdt_megarf.h **** 
  96:../../../platform/mega_rf/drivers/wdt/wdt_megarf.h **** #define WDP1_bm  0x02           /* WDT prescaler 1 Bit mask. */
  97:../../../platform/mega_rf/drivers/wdt/wdt_megarf.h **** #define WDP1_bp  1              /*  WDT prescaler 1 bit position. */
  98:../../../platform/mega_rf/drivers/wdt/wdt_megarf.h **** 
  99:../../../platform/mega_rf/drivers/wdt/wdt_megarf.h **** #define WDP0_bm  0x01           /* WDT prescaler 0 Bit mask. */
 100:../../../platform/mega_rf/drivers/wdt/wdt_megarf.h **** #define WDP0_bp  0              /*  WDT prescaler 0 bit position. */
 101:../../../platform/mega_rf/drivers/wdt/wdt_megarf.h **** 
 102:../../../platform/mega_rf/drivers/wdt/wdt_megarf.h **** /* WDRF bit mask and bit position in MCUSR */
 103:../../../platform/mega_rf/drivers/wdt/wdt_megarf.h **** #define WDRF_bm  0x08           /* WDT Reset flag Bit mask. */
 104:../../../platform/mega_rf/drivers/wdt/wdt_megarf.h **** #define WDRF_bp  3              /*  WDT Reset flag bit position. */
 105:../../../platform/mega_rf/drivers/wdt/wdt_megarf.h **** 
 106:../../../platform/mega_rf/drivers/wdt/wdt_megarf.h **** /**
 107:../../../platform/mega_rf/drivers/wdt/wdt_megarf.h ****  * \internal
 108:../../../platform/mega_rf/drivers/wdt/wdt_megarf.h ****  * \def wdt_timeout_period
 109:../../../platform/mega_rf/drivers/wdt/wdt_megarf.h ****  * \brief Watchdog timeout period setting
 110:../../../platform/mega_rf/drivers/wdt/wdt_megarf.h ****  */
 111:../../../platform/mega_rf/drivers/wdt/wdt_megarf.h **** enum wdt_timeout_period {
 112:../../../platform/mega_rf/drivers/wdt/wdt_megarf.h **** 	/* ! Timeout period = 2K cycles or 16ms @ 3.3V */
 113:../../../platform/mega_rf/drivers/wdt/wdt_megarf.h **** 	WDT_TIMEOUT_PERIOD_2KCLK = (0x00),
 114:../../../platform/mega_rf/drivers/wdt/wdt_megarf.h **** 	/* ! Timeout period = 4K cycles or 32ms @ 3.3V */
 115:../../../platform/mega_rf/drivers/wdt/wdt_megarf.h **** 	WDT_TIMEOUT_PERIOD_4KCLK = (0x01),
 116:../../../platform/mega_rf/drivers/wdt/wdt_megarf.h **** 	/* ! Timeout period = 8K cycles or 64ms @ 3.3V */
 117:../../../platform/mega_rf/drivers/wdt/wdt_megarf.h **** 	WDT_TIMEOUT_PERIOD_8KCLK = (0x02),
 118:../../../platform/mega_rf/drivers/wdt/wdt_megarf.h **** 	/* ! Timeout period = 16K cycles or 125ms @ 3.3V */
 119:../../../platform/mega_rf/drivers/wdt/wdt_megarf.h **** 	WDT_TIMEOUT_PERIOD_16KCLK = (0x03),
 120:../../../platform/mega_rf/drivers/wdt/wdt_megarf.h **** 	/* ! Timeout period = 32K cycles or 250ms @ 3.3V */
 121:../../../platform/mega_rf/drivers/wdt/wdt_megarf.h **** 	WDT_TIMEOUT_PERIOD_32KCLK = (0x04),
 122:../../../platform/mega_rf/drivers/wdt/wdt_megarf.h **** 	/* ! Timeout period = 64K cycles or 500ms @ 3.3V */
 123:../../../platform/mega_rf/drivers/wdt/wdt_megarf.h **** 	WDT_TIMEOUT_PERIOD_64KCLK = (0x05),
 124:../../../platform/mega_rf/drivers/wdt/wdt_megarf.h **** 	/* ! Timeout period = 128K cycles or 1s @ 3.3V */
 125:../../../platform/mega_rf/drivers/wdt/wdt_megarf.h **** 	WDT_TIMEOUT_PERIOD_128KCLK = (0x06),
 126:../../../platform/mega_rf/drivers/wdt/wdt_megarf.h **** 	/* ! Timeout period = 256K cycles or 2s @ 3.3V */
 127:../../../platform/mega_rf/drivers/wdt/wdt_megarf.h **** 	WDT_TIMEOUT_PERIOD_256KCLK = (0x07),
 128:../../../platform/mega_rf/drivers/wdt/wdt_megarf.h **** 	/* ! Timeout period = 512K cycles or 4s @ 3.3V */
 129:../../../platform/mega_rf/drivers/wdt/wdt_megarf.h **** 	WDT_TIMEOUT_PERIOD_512KCLK = (0x08),
 130:../../../platform/mega_rf/drivers/wdt/wdt_megarf.h **** 	/* ! Timeout period = 1024K cycles or 8s @ 3.3V */
 131:../../../platform/mega_rf/drivers/wdt/wdt_megarf.h **** 	WDT_TIMEOUT_PERIOD_1024KCLK = (0x09),
 132:../../../platform/mega_rf/drivers/wdt/wdt_megarf.h **** };
 133:../../../platform/mega_rf/drivers/wdt/wdt_megarf.h **** 
 134:../../../platform/mega_rf/drivers/wdt/wdt_megarf.h **** /**
 135:../../../platform/mega_rf/drivers/wdt/wdt_megarf.h ****  * \internal
 136:../../../platform/mega_rf/drivers/wdt/wdt_megarf.h ****  * \def wdt_mode_select
 137:../../../platform/mega_rf/drivers/wdt/wdt_megarf.h ****  * \brief Watchdog mode selection settings
 138:../../../platform/mega_rf/drivers/wdt/wdt_megarf.h ****  */
 139:../../../platform/mega_rf/drivers/wdt/wdt_megarf.h **** enum wdt_mode_select {
 140:../../../platform/mega_rf/drivers/wdt/wdt_megarf.h **** 	INTERRUPT_MODE,
 141:../../../platform/mega_rf/drivers/wdt/wdt_megarf.h **** 	SYSTEM_RESET_MODE,
 142:../../../platform/mega_rf/drivers/wdt/wdt_megarf.h **** 	INTERRUPT_SYSTEM_RESET_MODE,
 143:../../../platform/mega_rf/drivers/wdt/wdt_megarf.h **** };
 144:../../../platform/mega_rf/drivers/wdt/wdt_megarf.h **** 
 145:../../../platform/mega_rf/drivers/wdt/wdt_megarf.h **** /**
 146:../../../platform/mega_rf/drivers/wdt/wdt_megarf.h ****  * \internal
 147:../../../platform/mega_rf/drivers/wdt/wdt_megarf.h ****  * \def MASK_PRESCALE_WPD3
 148:../../../platform/mega_rf/drivers/wdt/wdt_megarf.h ****  * \brief Mask for timeout period setting above WDT_TIMEOUT_PERIOD_256KCLK
 149:../../../platform/mega_rf/drivers/wdt/wdt_megarf.h ****  */
 150:../../../platform/mega_rf/drivers/wdt/wdt_megarf.h **** #define MASK_PRESCALE_WPD3 0x08
 151:../../../platform/mega_rf/drivers/wdt/wdt_megarf.h **** 
 152:../../../platform/mega_rf/drivers/wdt/wdt_megarf.h **** /**
 153:../../../platform/mega_rf/drivers/wdt/wdt_megarf.h ****  * \internal
 154:../../../platform/mega_rf/drivers/wdt/wdt_megarf.h ****  * \def PRESCALE_MASK
 155:../../../platform/mega_rf/drivers/wdt/wdt_megarf.h ****  * \brief Mask for timeout period setting register
 156:../../../platform/mega_rf/drivers/wdt/wdt_megarf.h ****  */
 157:../../../platform/mega_rf/drivers/wdt/wdt_megarf.h **** #define PRESCALE_MASK (WDP3_bm | WDP2_bm | WDP1_bm | WDP0_bm)
 158:../../../platform/mega_rf/drivers/wdt/wdt_megarf.h **** 
 159:../../../platform/mega_rf/drivers/wdt/wdt_megarf.h **** /**
 160:../../../platform/mega_rf/drivers/wdt/wdt_megarf.h ****  * \internal
 161:../../../platform/mega_rf/drivers/wdt/wdt_megarf.h ****  * \def wdt_reset
 162:../../../platform/mega_rf/drivers/wdt/wdt_megarf.h ****  * \brief This macro resets (clears/refreshes) the Watchdog Timer.
 163:../../../platform/mega_rf/drivers/wdt/wdt_megarf.h ****  */
 164:../../../platform/mega_rf/drivers/wdt/wdt_megarf.h **** #if defined(__GNUC__)
 165:../../../platform/mega_rf/drivers/wdt/wdt_megarf.h **** #define wdt_reset() __asm__ __volatile__ ("wdr");
 166:../../../platform/mega_rf/drivers/wdt/wdt_megarf.h **** #elif defined(__ICCAVR__)
 167:../../../platform/mega_rf/drivers/wdt/wdt_megarf.h **** #define wdt_reset() __watchdog_reset();
 168:../../../platform/mega_rf/drivers/wdt/wdt_megarf.h **** #else
 169:../../../platform/mega_rf/drivers/wdt/wdt_megarf.h **** #error Unsupported compiler.
 170:../../../platform/mega_rf/drivers/wdt/wdt_megarf.h **** #endif
 171:../../../platform/mega_rf/drivers/wdt/wdt_megarf.h **** 
 172:../../../platform/mega_rf/drivers/wdt/wdt_megarf.h **** /**
 173:../../../platform/mega_rf/drivers/wdt/wdt_megarf.h ****  * *\brief Clear Watchdog reset flag.
 174:../../../platform/mega_rf/drivers/wdt/wdt_megarf.h ****  *
 175:../../../platform/mega_rf/drivers/wdt/wdt_megarf.h ****  *  This function clears the WDT flag.
 176:../../../platform/mega_rf/drivers/wdt/wdt_megarf.h ****  *
 177:../../../platform/mega_rf/drivers/wdt/wdt_megarf.h ****  ***\param  none
 178:../../../platform/mega_rf/drivers/wdt/wdt_megarf.h ****  */
 179:../../../platform/mega_rf/drivers/wdt/wdt_megarf.h **** static inline void wdt_reset_flag_clear(void)
 180:../../../platform/mega_rf/drivers/wdt/wdt_megarf.h **** {
 105               		.loc 2 180 0
 106               		.cfi_startproc
 107 0040 CF93      		push r28
 108               	.LCFI8:
 109               		.cfi_def_cfa_offset 3
 110               		.cfi_offset 28, -2
 111 0042 DF93      		push r29
 112               	.LCFI9:
 113               		.cfi_def_cfa_offset 4
 114               		.cfi_offset 29, -3
 115 0044 CDB7      		in r28,__SP_L__
 116 0046 DEB7      		in r29,__SP_H__
 117               	.LCFI10:
 118               		.cfi_def_cfa_register 28
 119               	/* prologue: function */
 120               	/* frame size = 0 */
 121               	/* stack size = 2 */
 122               	.L__stack_usage = 2
 181:../../../platform/mega_rf/drivers/wdt/wdt_megarf.h **** 	/* Clear WDRF flag in MCUSR */
 182:../../../platform/mega_rf/drivers/wdt/wdt_megarf.h **** 	MCUSR &= ~WDRF_bm;
 123               		.loc 2 182 0
 124 0048 84E5      		ldi r24,lo8(84)
 125 004a 90E0      		ldi r25,0
 126 004c 24E5      		ldi r18,lo8(84)
 127 004e 30E0      		ldi r19,0
 128 0050 F901      		movw r30,r18
 129 0052 2081      		ld r18,Z
 130 0054 277F      		andi r18,lo8(-9)
 131 0056 FC01      		movw r30,r24
 132 0058 2083      		st Z,r18
 183:../../../platform/mega_rf/drivers/wdt/wdt_megarf.h **** }
 133               		.loc 2 183 0
 134 005a 0000      		nop
 135               	/* epilogue start */
 136 005c DF91      		pop r29
 137 005e CF91      		pop r28
 138 0060 0895      		ret
 139               		.cfi_endproc
 140               	.LFE8:
 142               		.section	.bss.wdt_timer_callback,"aw",@nobits
 145               	wdt_timer_callback:
 146 0000 0000      		.zero	2
 147               		.text
 148               	.global	__vector_12
 150               	__vector_12:
 151               	.LFB16:
 152               		.file 3 "../../../platform/mega_rf/drivers/wdt/wdt_megarf.c"
   1:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c **** /**
   2:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c ****  * \file
   3:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c ****  *
   4:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c ****  * \brief AVR MEGARF WatchDog Timer driver.
   5:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c ****  *
   6:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c ****  * Copyright (c) 2013 Atmel Corporation. All rights reserved.
   7:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c ****  *
   8:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c ****  * \asf_license_start
   9:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c ****  *
  10:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c ****  * \page License
  11:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c ****  *
  12:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c ****  * Redistribution and use in source and binary forms, with or without
  13:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c ****  * modification, are permitted provided that the following conditions are met:
  14:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c ****  *
  15:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c ****  * 1. Redistributions of source code must retain the above copyright notice,
  16:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c ****  *    this list of conditions and the following disclaimer.
  17:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c ****  *
  18:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c ****  * 2. Redistributions in binary form must reproduce the above copyright notice,
  19:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c ****  *    this list of conditions and the following disclaimer in the documentation
  20:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c ****  *    and/or other materials provided with the distribution.
  21:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c ****  *
  22:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c ****  * 3. The name of Atmel may not be used to endorse or promote products derived
  23:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c ****  *    from this software without specific prior written permission.
  24:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c ****  *
  25:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c ****  * 4. This software may only be redistributed and used in connection with an
  26:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c ****  *    Atmel microcontroller product.
  27:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c ****  *
  28:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c ****  * THIS SOFTWARE IS PROVIDED BY ATMEL "AS IS" AND ANY EXPRESS OR IMPLIED
  29:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c ****  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
  30:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c ****  * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE
  31:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c ****  * EXPRESSLY AND SPECIFICALLY DISCLAIMED. IN NO EVENT SHALL ATMEL BE LIABLE FOR
  32:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c ****  * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  33:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c ****  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
  34:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c ****  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
  35:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c ****  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
  36:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c ****  * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
  37:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c ****  * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  38:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c ****  * POSSIBILITY OF SUCH DAMAGE.
  39:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c ****  *
  40:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c ****  * \asf_license_stop
  41:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c ****  *
  42:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c ****  */
  43:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c **** 
  44:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c **** #include "wdt_megarf.h"
  45:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c **** 
  46:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c **** /* ! \internal Local storage of WDT timer interrupt callback function */
  47:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c **** static wdt_callback_t wdt_timer_callback;
  48:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c **** 
  49:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c **** /**
  50:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c ****  * \internal
  51:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c ****  * \brief Interrupt handler for WDT timer overflow
  52:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c ****  *
  53:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c ****  * This function will handle interrupt on WDT Timer overflow and
  54:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c ****  * call the callback function.
  55:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c ****  */
  56:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c **** 
  57:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c **** ISR(WDT_vect)
  58:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c **** {
 153               		.loc 3 58 0
 154               		.cfi_startproc
 155 0062 1F92      		push r1
 156               	.LCFI11:
 157               		.cfi_def_cfa_offset 3
 158               		.cfi_offset 1, -2
 159 0064 0F92      		push r0
 160               	.LCFI12:
 161               		.cfi_def_cfa_offset 4
 162               		.cfi_offset 0, -3
 163 0066 0090 5F00 		lds r0,95
 164 006a 0F92      		push r0
 165 006c 1124      		clr __zero_reg__
 166 006e 0090 5B00 		lds r0,91
 167 0072 0F92      		push r0
 168 0074 2F93      		push r18
 169               	.LCFI13:
 170               		.cfi_def_cfa_offset 5
 171               		.cfi_offset 18, -4
 172 0076 3F93      		push r19
 173               	.LCFI14:
 174               		.cfi_def_cfa_offset 6
 175               		.cfi_offset 19, -5
 176 0078 4F93      		push r20
 177               	.LCFI15:
 178               		.cfi_def_cfa_offset 7
 179               		.cfi_offset 20, -6
 180 007a 5F93      		push r21
 181               	.LCFI16:
 182               		.cfi_def_cfa_offset 8
 183               		.cfi_offset 21, -7
 184 007c 6F93      		push r22
 185               	.LCFI17:
 186               		.cfi_def_cfa_offset 9
 187               		.cfi_offset 22, -8
 188 007e 7F93      		push r23
 189               	.LCFI18:
 190               		.cfi_def_cfa_offset 10
 191               		.cfi_offset 23, -9
 192 0080 8F93      		push r24
 193               	.LCFI19:
 194               		.cfi_def_cfa_offset 11
 195               		.cfi_offset 24, -10
 196 0082 9F93      		push r25
 197               	.LCFI20:
 198               		.cfi_def_cfa_offset 12
 199               		.cfi_offset 25, -11
 200 0084 AF93      		push r26
 201               	.LCFI21:
 202               		.cfi_def_cfa_offset 13
 203               		.cfi_offset 26, -12
 204 0086 BF93      		push r27
 205               	.LCFI22:
 206               		.cfi_def_cfa_offset 14
 207               		.cfi_offset 27, -13
 208 0088 EF93      		push r30
 209               	.LCFI23:
 210               		.cfi_def_cfa_offset 15
 211               		.cfi_offset 30, -14
 212 008a FF93      		push r31
 213               	.LCFI24:
 214               		.cfi_def_cfa_offset 16
 215               		.cfi_offset 31, -15
 216 008c CF93      		push r28
 217               	.LCFI25:
 218               		.cfi_def_cfa_offset 17
 219               		.cfi_offset 28, -16
 220 008e DF93      		push r29
 221               	.LCFI26:
 222               		.cfi_def_cfa_offset 18
 223               		.cfi_offset 29, -17
 224 0090 CDB7      		in r28,__SP_L__
 225 0092 DEB7      		in r29,__SP_H__
 226               	.LCFI27:
 227               		.cfi_def_cfa_register 28
 228               	/* prologue: Signal */
 229               	/* frame size = 0 */
 230               	/* stack size = 18 */
 231               	.L__stack_usage = 18
  59:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c **** 	if (wdt_timer_callback) {
 232               		.loc 3 59 0
 233 0094 8091 0000 		lds r24,wdt_timer_callback
 234 0098 9091 0000 		lds r25,wdt_timer_callback+1
 235 009c 892B      		or r24,r25
 236 009e 01F0      		breq .L7
  60:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c **** 		wdt_timer_callback();
 237               		.loc 3 60 0
 238 00a0 8091 0000 		lds r24,wdt_timer_callback
 239 00a4 9091 0000 		lds r25,wdt_timer_callback+1
 240 00a8 FC01      		movw r30,r24
 241 00aa 0995      		icall
 242               	.L7:
  61:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c **** 	}
  62:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c **** }
 243               		.loc 3 62 0
 244 00ac 0000      		nop
 245               	/* epilogue start */
 246 00ae DF91      		pop r29
 247 00b0 CF91      		pop r28
 248 00b2 FF91      		pop r31
 249 00b4 EF91      		pop r30
 250 00b6 BF91      		pop r27
 251 00b8 AF91      		pop r26
 252 00ba 9F91      		pop r25
 253 00bc 8F91      		pop r24
 254 00be 7F91      		pop r23
 255 00c0 6F91      		pop r22
 256 00c2 5F91      		pop r21
 257 00c4 4F91      		pop r20
 258 00c6 3F91      		pop r19
 259 00c8 2F91      		pop r18
 260 00ca 0F90      		pop r0
 261 00cc 0092 5B00 		sts 91,r0
 262 00d0 0F90      		pop r0
 263 00d2 0092 5F00 		sts 95,r0
 264 00d6 0F90      		pop r0
 265 00d8 1F90      		pop r1
 266 00da 1895      		reti
 267               		.cfi_endproc
 268               	.LFE16:
 270               	.global	wdt_disable
 272               	wdt_disable:
 273               	.LFB17:
  63:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c **** 
  64:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c **** /**
  65:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c ****  * \brief Disable Watchdog.
  66:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c ****  *
  67:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c ****  *  This function disables the WDT without changing period settings.
  68:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c ****  *  This function is written in asm where ever the time is critical
  69:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c ****  */
  70:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c **** void wdt_disable(void)
  71:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c **** {
 274               		.loc 3 71 0
 275               		.cfi_startproc
 276 00dc CF93      		push r28
 277               	.LCFI28:
 278               		.cfi_def_cfa_offset 3
 279               		.cfi_offset 28, -2
 280 00de DF93      		push r29
 281               	.LCFI29:
 282               		.cfi_def_cfa_offset 4
 283               		.cfi_offset 29, -3
 284 00e0 1F92      		push __zero_reg__
 285               	.LCFI30:
 286               		.cfi_def_cfa_offset 5
 287 00e2 CDB7      		in r28,__SP_L__
 288 00e4 DEB7      		in r29,__SP_H__
 289               	.LCFI31:
 290               		.cfi_def_cfa_register 28
 291               	/* prologue: function */
 292               	/* frame size = 1 */
 293               	/* stack size = 3 */
 294               	.L__stack_usage = 3
  72:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c **** 	/* Disable Global interrupt */
  73:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c **** 	uint8_t sreg = cpu_irq_save();
 295               		.loc 3 73 0
 296 00e6 0E94 0000 		call cpu_irq_save
 297 00ea 8983      		std Y+1,r24
  74:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c **** 
  75:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c **** 	/* Reset Watchdog timer */
  76:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c **** 	wdt_reset();
 298               		.loc 3 76 0
 299               	/* #APP */
 300               	 ;  76 "../../../platform/mega_rf/drivers/wdt/wdt_megarf.c" 1
 301 00ec A895      		wdr
 302               	 ;  0 "" 2
  77:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c **** 
  78:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c **** 	/* Clear WDRF flag in MCUSR */
  79:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c **** 	wdt_reset_flag_clear();
 303               		.loc 3 79 0
 304               	/* #NOAPP */
 305 00ee 0E94 0000 		call wdt_reset_flag_clear
  80:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c **** 
  81:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c **** 	/* Write logical one to WDCE and WDE to keep old prescale setting */
  82:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c **** 	asm ("LDS R17,0x60");   /* WDTCSR Address = 0x60 */
 306               		.loc 3 82 0
 307               	/* #APP */
 308               	 ;  82 "../../../platform/mega_rf/drivers/wdt/wdt_megarf.c" 1
 309 00f2 1091 6000 		LDS R17,0x60
 310               	 ;  0 "" 2
  83:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c **** 	asm ("ORI R17,0x18");
 311               		.loc 3 83 0
 312               	 ;  83 "../../../platform/mega_rf/drivers/wdt/wdt_megarf.c" 1
 313 00f6 1861      		ORI R17,0x18
 314               	 ;  0 "" 2
  84:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c **** 	asm ("LDI R18,0x00");
 315               		.loc 3 84 0
 316               	 ;  84 "../../../platform/mega_rf/drivers/wdt/wdt_megarf.c" 1
 317 00f8 20E0      		LDI R18,0x00
 318               	 ;  0 "" 2
  85:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c **** 	asm ("STS 0x60,R17");   /* WDTCSR Address = 0x60 */
 319               		.loc 3 85 0
 320               	 ;  85 "../../../platform/mega_rf/drivers/wdt/wdt_megarf.c" 1
 321 00fa 1093 6000 		STS 0x60,R17
 322               	 ;  0 "" 2
  86:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c **** 	/* Disable WDT */
  87:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c **** 	asm ("STS 0x60,R18");   /* WDTCSR Address = 0x60 */
 323               		.loc 3 87 0
 324               	 ;  87 "../../../platform/mega_rf/drivers/wdt/wdt_megarf.c" 1
 325 00fe 2093 6000 		STS 0x60,R18
 326               	 ;  0 "" 2
  88:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c **** 
  89:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c **** 	/* Restore Global interrupt */
  90:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c **** 	cpu_irq_restore(sreg);
 327               		.loc 3 90 0
 328               	/* #NOAPP */
 329 0102 8981      		ldd r24,Y+1
 330 0104 0E94 0000 		call cpu_irq_restore
  91:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c **** }
 331               		.loc 3 91 0
 332 0108 0000      		nop
 333               	/* epilogue start */
 334 010a 0F90      		pop __tmp_reg__
 335 010c DF91      		pop r29
 336 010e CF91      		pop r28
 337 0110 0895      		ret
 338               		.cfi_endproc
 339               	.LFE17:
 341               	.global	wdt_set_timeout_period
 343               	wdt_set_timeout_period:
 344               	.LFB18:
  92:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c **** 
  93:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c **** /**
  94:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c ****  * \brief Set Watchdog timeout period.
  95:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c ****  *
  96:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c ****  *  This function sets the coded field of the WDT timeout period.
  97:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c ****  *  This function is written in asm where ever the time is critical
  98:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c ****  *
  99:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c ****  *  \param  to_period  WDT timeout period
 100:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c ****  */
 101:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c **** void wdt_set_timeout_period(enum wdt_timeout_period to_period)
 102:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c **** {
 345               		.loc 3 102 0
 346               		.cfi_startproc
 347 0112 CF93      		push r28
 348               	.LCFI32:
 349               		.cfi_def_cfa_offset 3
 350               		.cfi_offset 28, -2
 351 0114 DF93      		push r29
 352               	.LCFI33:
 353               		.cfi_def_cfa_offset 4
 354               		.cfi_offset 29, -3
 355 0116 00D0      		rcall .
 356               	.LCFI34:
 357               		.cfi_def_cfa_offset 6
 358 0118 CDB7      		in r28,__SP_L__
 359 011a DEB7      		in r29,__SP_H__
 360               	.LCFI35:
 361               		.cfi_def_cfa_register 28
 362               	/* prologue: function */
 363               	/* frame size = 2 */
 364               	/* stack size = 4 */
 365               	.L__stack_usage = 4
 366 011c 8A83      		std Y+2,r24
 103:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c **** 	/* Store the prescale value to temp register */
 104:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c **** #if defined (__GNUC__)
 105:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c **** 	asm ("MOV R19,R24");
 367               		.loc 3 105 0
 368               	/* #APP */
 369               	 ;  105 "../../../platform/mega_rf/drivers/wdt/wdt_megarf.c" 1
 370 011e 382F      		MOV R19,R24
 371               	 ;  0 "" 2
 106:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c **** #elif defined(__ICCAVR__)
 107:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c **** 	asm ("MOV R19,R16");
 108:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c **** #else
 109:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c **** #error Unsupported compiler.
 110:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c **** #endif
 111:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c **** 
 112:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c **** 	/* Mask for WDP3 */
 113:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c **** 	if (to_period & MASK_PRESCALE_WPD3) {
 372               		.loc 3 113 0
 373               	/* #NOAPP */
 374 0120 8A81      		ldd r24,Y+2
 375 0122 882F      		mov r24,r24
 376 0124 90E0      		ldi r25,0
 377 0126 8870      		andi r24,8
 378 0128 9927      		clr r25
 379 012a 892B      		or r24,r25
 380 012c 01F0      		breq .L10
 114:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c **** 		asm ("LDI R21,0x20");
 381               		.loc 3 114 0
 382               	/* #APP */
 383               	 ;  114 "../../../platform/mega_rf/drivers/wdt/wdt_megarf.c" 1
 384 012e 50E2      		LDI R21,0x20
 385               	 ;  0 "" 2
 386               	/* #NOAPP */
 387 0130 00C0      		rjmp .L11
 388               	.L10:
 115:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c **** 	} else {
 116:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c **** 		asm ("LDI R21,0x00");
 389               		.loc 3 116 0
 390               	/* #APP */
 391               	 ;  116 "../../../platform/mega_rf/drivers/wdt/wdt_megarf.c" 1
 392 0132 50E0      		LDI R21,0x00
 393               	 ;  0 "" 2
 394               	/* #NOAPP */
 395               	.L11:
 117:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c **** 	}
 118:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c **** 
 119:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c **** 	/* Disable Global interrupt */
 120:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c **** 	uint8_t sreg = cpu_irq_save();
 396               		.loc 3 120 0
 397 0134 0E94 0000 		call cpu_irq_save
 398 0138 8983      		std Y+1,r24
 121:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c **** 
 122:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c **** 	/* Reset Watchdog timer */
 123:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c **** 	wdt_reset();
 399               		.loc 3 123 0
 400               	/* #APP */
 401               	 ;  123 "../../../platform/mega_rf/drivers/wdt/wdt_megarf.c" 1
 402 013a A895      		wdr
 403               	 ;  0 "" 2
 124:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c **** 
 125:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c **** 	asm ("LDI R17,0xD8");
 404               		.loc 3 125 0
 405               	 ;  125 "../../../platform/mega_rf/drivers/wdt/wdt_megarf.c" 1
 406 013c 18ED      		LDI R17,0xD8
 407               	 ;  0 "" 2
 126:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c **** 	asm ("LDS R18,0x60");   /* WDTCSR Address = 0x60 */
 408               		.loc 3 126 0
 409               	 ;  126 "../../../platform/mega_rf/drivers/wdt/wdt_megarf.c" 1
 410 013e 2091 6000 		LDS R18,0x60
 411               	 ;  0 "" 2
 127:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c **** 	asm ("AND R17,R18");
 412               		.loc 3 127 0
 413               	 ;  127 "../../../platform/mega_rf/drivers/wdt/wdt_megarf.c" 1
 414 0142 1223      		AND R17,R18
 415               	 ;  0 "" 2
 128:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c **** 	asm ("STS 0x60,R17");   /* WDTCSR Address = 0x60 */
 416               		.loc 3 128 0
 417               	 ;  128 "../../../platform/mega_rf/drivers/wdt/wdt_megarf.c" 1
 418 0144 1093 6000 		STS 0x60,R17
 419               	 ;  0 "" 2
 129:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c **** 	/* Load the new prescale value */
 130:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c **** 	asm ("LDI R20,0x18");
 420               		.loc 3 130 0
 421               	 ;  130 "../../../platform/mega_rf/drivers/wdt/wdt_megarf.c" 1
 422 0148 48E1      		LDI R20,0x18
 423               	 ;  0 "" 2
 131:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c **** 	asm ("LDI R18,0x07");
 424               		.loc 3 131 0
 425               	 ;  131 "../../../platform/mega_rf/drivers/wdt/wdt_megarf.c" 1
 426 014a 27E0      		LDI R18,0x07
 427               	 ;  0 "" 2
 132:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c **** 	asm ("AND R19,R18");
 428               		.loc 3 132 0
 429               	 ;  132 "../../../platform/mega_rf/drivers/wdt/wdt_megarf.c" 1
 430 014c 3223      		AND R19,R18
 431               	 ;  0 "" 2
 133:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c **** 	asm ("OR R19,R21");
 432               		.loc 3 133 0
 433               	 ;  133 "../../../platform/mega_rf/drivers/wdt/wdt_megarf.c" 1
 434 014e 352B      		OR R19,R21
 435               	 ;  0 "" 2
 134:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c **** 	asm ("OR R19,R17");
 436               		.loc 3 134 0
 437               	 ;  134 "../../../platform/mega_rf/drivers/wdt/wdt_megarf.c" 1
 438 0150 312B      		OR R19,R17
 439               	 ;  0 "" 2
 135:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c **** 	/* Write logical one to WDCE and WDE */
 136:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c **** 	asm ("STS 0x60,R20");   /* WDTCSR Address = 0x60 */
 440               		.loc 3 136 0
 441               	 ;  136 "../../../platform/mega_rf/drivers/wdt/wdt_megarf.c" 1
 442 0152 4093 6000 		STS 0x60,R20
 443               	 ;  0 "" 2
 137:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c **** 	/* Write new prescale setting */
 138:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c **** 	asm ("STS 0x60,R19");   /* WDTCSR Address = 0x60 */
 444               		.loc 3 138 0
 445               	 ;  138 "../../../platform/mega_rf/drivers/wdt/wdt_megarf.c" 1
 446 0156 3093 6000 		STS 0x60,R19
 447               	 ;  0 "" 2
 139:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c **** 
 140:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c **** 	/* Restore Global interrupt */
 141:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c **** 	cpu_irq_restore(sreg);
 448               		.loc 3 141 0
 449               	/* #NOAPP */
 450 015a 8981      		ldd r24,Y+1
 451 015c 0E94 0000 		call cpu_irq_restore
 142:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c **** }
 452               		.loc 3 142 0
 453 0160 0000      		nop
 454               	/* epilogue start */
 455 0162 0F90      		pop __tmp_reg__
 456 0164 0F90      		pop __tmp_reg__
 457 0166 DF91      		pop r29
 458 0168 CF91      		pop r28
 459 016a 0895      		ret
 460               		.cfi_endproc
 461               	.LFE18:
 463               	.global	wdt_enable
 465               	wdt_enable:
 466               	.LFB19:
 143:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c **** 
 144:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c **** /**
 145:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c ****  * \brief Enable WDT at different modes
 146:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c ****  *
 147:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c ****  * This function allows WDT to enable. Using this function we can
 148:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c ****  * select either Interrupt Mode or System reset mode or Interrupt
 149:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c ****  * and System reset mode.
 150:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c ****  * This function is written in asm where ever the time is critical
 151:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c ****  *
 152:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c ****  * \param mode WDT timer mode selection
 153:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c ****  */
 154:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c **** void wdt_enable(enum wdt_mode_select mode)
 155:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c **** {
 467               		.loc 3 155 0
 468               		.cfi_startproc
 469 016c CF93      		push r28
 470               	.LCFI36:
 471               		.cfi_def_cfa_offset 3
 472               		.cfi_offset 28, -2
 473 016e DF93      		push r29
 474               	.LCFI37:
 475               		.cfi_def_cfa_offset 4
 476               		.cfi_offset 29, -3
 477 0170 00D0      		rcall .
 478               	.LCFI38:
 479               		.cfi_def_cfa_offset 6
 480 0172 CDB7      		in r28,__SP_L__
 481 0174 DEB7      		in r29,__SP_H__
 482               	.LCFI39:
 483               		.cfi_def_cfa_register 28
 484               	/* prologue: function */
 485               	/* frame size = 2 */
 486               	/* stack size = 4 */
 487               	.L__stack_usage = 4
 488 0176 8A83      		std Y+2,r24
 156:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c **** 	/* Disable Global interrupt */
 157:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c **** 	uint8_t sreg = cpu_irq_save();
 489               		.loc 3 157 0
 490 0178 0E94 0000 		call cpu_irq_save
 491 017c 8983      		std Y+1,r24
 158:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c **** 
 159:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c **** 	/* Reset Watchdog timer */
 160:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c **** 	wdt_reset();
 492               		.loc 3 160 0
 493               	/* #APP */
 494               	 ;  160 "../../../platform/mega_rf/drivers/wdt/wdt_megarf.c" 1
 495 017e A895      		wdr
 496               	 ;  0 "" 2
 161:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c **** 
 162:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c **** 	/* Clear WDRF flag in MCUSR */
 163:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c **** 	wdt_reset_flag_clear();
 497               		.loc 3 163 0
 498               	/* #NOAPP */
 499 0180 0E94 0000 		call wdt_reset_flag_clear
 164:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c **** 
 165:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c **** 	/*System reset mode */
 166:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c **** 	if (mode == SYSTEM_RESET_MODE) {
 500               		.loc 3 166 0
 501 0184 8A81      		ldd r24,Y+2
 502 0186 8130      		cpi r24,lo8(1)
 503 0188 01F4      		brne .L13
 167:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c **** 		/* Write logical zero to WDIE */
 168:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c **** 		asm ("LDI R17,0xBF");
 504               		.loc 3 168 0
 505               	/* #APP */
 506               	 ;  168 "../../../platform/mega_rf/drivers/wdt/wdt_megarf.c" 1
 507 018a 1FEB      		LDI R17,0xBF
 508               	 ;  0 "" 2
 169:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c **** 		asm ("LDS R18,0x60"); /* WDTCSR Address = 0x60 */
 509               		.loc 3 169 0
 510               	 ;  169 "../../../platform/mega_rf/drivers/wdt/wdt_megarf.c" 1
 511 018c 2091 6000 		LDS R18,0x60
 512               	 ;  0 "" 2
 170:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c **** 		asm ("AND R17,R18");
 513               		.loc 3 170 0
 514               	 ;  170 "../../../platform/mega_rf/drivers/wdt/wdt_megarf.c" 1
 515 0190 1223      		AND R17,R18
 516               	 ;  0 "" 2
 171:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c **** 		asm ("STS 0x60,R17"); /* WDTCSR Address = 0x60 */
 517               		.loc 3 171 0
 518               	 ;  171 "../../../platform/mega_rf/drivers/wdt/wdt_megarf.c" 1
 519 0192 1093 6000 		STS 0x60,R17
 520               	 ;  0 "" 2
 172:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c **** 		/* Write WDIF,WDE and WDCE to logical one */
 173:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c **** 		asm ("LDI R18,0x98");
 521               		.loc 3 173 0
 522               	 ;  173 "../../../platform/mega_rf/drivers/wdt/wdt_megarf.c" 1
 523 0196 28E9      		LDI R18,0x98
 524               	 ;  0 "" 2
 174:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c **** 		asm ("OR R18,R17");
 525               		.loc 3 174 0
 526               	 ;  174 "../../../platform/mega_rf/drivers/wdt/wdt_megarf.c" 1
 527 0198 212B      		OR R18,R17
 528               	 ;  0 "" 2
 175:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c **** 		asm ("STS 0x60,R18"); /* WDTCSR Address = 0x60 */
 529               		.loc 3 175 0
 530               	 ;  175 "../../../platform/mega_rf/drivers/wdt/wdt_megarf.c" 1
 531 019a 2093 6000 		STS 0x60,R18
 532               	 ;  0 "" 2
 533               	/* #NOAPP */
 534 019e 00C0      		rjmp .L14
 535               	.L13:
 176:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c **** 	}
 177:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c **** 	/* Interrupt mode */
 178:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c **** 	else if (mode == INTERRUPT_MODE) {
 536               		.loc 3 178 0
 537 01a0 8A81      		ldd r24,Y+2
 538 01a2 8823      		tst r24
 539 01a4 01F4      		brne .L15
 179:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c **** 		/* Write logical zero to WDE */
 180:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c **** 		asm ("LDI R17,0xF7");
 540               		.loc 3 180 0
 541               	/* #APP */
 542               	 ;  180 "../../../platform/mega_rf/drivers/wdt/wdt_megarf.c" 1
 543 01a6 17EF      		LDI R17,0xF7
 544               	 ;  0 "" 2
 181:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c **** 		asm ("LDS R18,0x60"); /* WDTCSR Address = 0x60 */
 545               		.loc 3 181 0
 546               	 ;  181 "../../../platform/mega_rf/drivers/wdt/wdt_megarf.c" 1
 547 01a8 2091 6000 		LDS R18,0x60
 548               	 ;  0 "" 2
 182:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c **** 		asm ("AND R17,R18");
 549               		.loc 3 182 0
 550               	 ;  182 "../../../platform/mega_rf/drivers/wdt/wdt_megarf.c" 1
 551 01ac 1223      		AND R17,R18
 552               	 ;  0 "" 2
 183:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c **** 		asm ("STS 0x60,R17"); /* WDTCSR Address = 0x60 */
 553               		.loc 3 183 0
 554               	 ;  183 "../../../platform/mega_rf/drivers/wdt/wdt_megarf.c" 1
 555 01ae 1093 6000 		STS 0x60,R17
 556               	 ;  0 "" 2
 184:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c **** 		asm ("LDI R20,0x18");
 557               		.loc 3 184 0
 558               	 ;  184 "../../../platform/mega_rf/drivers/wdt/wdt_megarf.c" 1
 559 01b2 48E1      		LDI R20,0x18
 560               	 ;  0 "" 2
 185:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c **** 		asm ("LDI R19,0xD0");
 561               		.loc 3 185 0
 562               	 ;  185 "../../../platform/mega_rf/drivers/wdt/wdt_megarf.c" 1
 563 01b4 30ED      		LDI R19,0xD0
 564               	 ;  0 "" 2
 186:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c **** 		asm ("OR R19,R17");
 565               		.loc 3 186 0
 566               	 ;  186 "../../../platform/mega_rf/drivers/wdt/wdt_megarf.c" 1
 567 01b6 312B      		OR R19,R17
 568               	 ;  0 "" 2
 187:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c **** 		/* Write logical one to WDCE and WDE */
 188:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c **** 		asm ("STS 0x60,R20"); /* WDTCSR Address = 0x60 */
 569               		.loc 3 188 0
 570               	 ;  188 "../../../platform/mega_rf/drivers/wdt/wdt_megarf.c" 1
 571 01b8 4093 6000 		STS 0x60,R20
 572               	 ;  0 "" 2
 189:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c **** 		/* Write WDIF,WDIE and WDCE to logical one */
 190:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c **** 		asm ("STS 0x60,R19"); /* WDTCSR Address = 0x60 */
 573               		.loc 3 190 0
 574               	 ;  190 "../../../platform/mega_rf/drivers/wdt/wdt_megarf.c" 1
 575 01bc 3093 6000 		STS 0x60,R19
 576               	 ;  0 "" 2
 577               	/* #NOAPP */
 578 01c0 00C0      		rjmp .L14
 579               	.L15:
 191:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c **** 	}
 192:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c **** 	/* Interrupt and System reset mode */
 193:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c **** 	else if (mode == INTERRUPT_SYSTEM_RESET_MODE) {
 580               		.loc 3 193 0
 581 01c2 8A81      		ldd r24,Y+2
 582 01c4 8230      		cpi r24,lo8(2)
 583 01c6 01F4      		brne .L14
 194:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c **** 		/* Write logical zero to WDE */
 195:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c **** 		asm ("LDI R17,0xF7");
 584               		.loc 3 195 0
 585               	/* #APP */
 586               	 ;  195 "../../../platform/mega_rf/drivers/wdt/wdt_megarf.c" 1
 587 01c8 17EF      		LDI R17,0xF7
 588               	 ;  0 "" 2
 196:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c **** 		asm ("LDS R18,0x60"); /* WDTCSR Address = 0x60 */
 589               		.loc 3 196 0
 590               	 ;  196 "../../../platform/mega_rf/drivers/wdt/wdt_megarf.c" 1
 591 01ca 2091 6000 		LDS R18,0x60
 592               	 ;  0 "" 2
 197:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c **** 		asm ("AND R17,R18");
 593               		.loc 3 197 0
 594               	 ;  197 "../../../platform/mega_rf/drivers/wdt/wdt_megarf.c" 1
 595 01ce 1223      		AND R17,R18
 596               	 ;  0 "" 2
 198:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c **** 		asm ("STS 0x60,R17"); /* WDTCSR Address = 0x60 */
 597               		.loc 3 198 0
 598               	 ;  198 "../../../platform/mega_rf/drivers/wdt/wdt_megarf.c" 1
 599 01d0 1093 6000 		STS 0x60,R17
 600               	 ;  0 "" 2
 199:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c **** 		/* Write logical one to WDCE, WDIE,WDIF and WDE */
 200:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c **** 		asm ("LDI R18,0xD8");
 601               		.loc 3 200 0
 602               	 ;  200 "../../../platform/mega_rf/drivers/wdt/wdt_megarf.c" 1
 603 01d4 28ED      		LDI R18,0xD8
 604               	 ;  0 "" 2
 201:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c **** 		asm ("OR R18,R17");
 605               		.loc 3 201 0
 606               	 ;  201 "../../../platform/mega_rf/drivers/wdt/wdt_megarf.c" 1
 607 01d6 212B      		OR R18,R17
 608               	 ;  0 "" 2
 202:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c **** 		asm ("STS 0x60,R18"); /* WDTCSR Address = 0x60 */
 609               		.loc 3 202 0
 610               	 ;  202 "../../../platform/mega_rf/drivers/wdt/wdt_megarf.c" 1
 611 01d8 2093 6000 		STS 0x60,R18
 612               	 ;  0 "" 2
 613               	/* #NOAPP */
 614               	.L14:
 203:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c **** 	}
 204:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c **** 
 205:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c **** 	/* Restore Global interrupt */
 206:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c **** 	cpu_irq_restore(sreg);
 615               		.loc 3 206 0
 616 01dc 8981      		ldd r24,Y+1
 617 01de 0E94 0000 		call cpu_irq_restore
 207:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c **** }
 618               		.loc 3 207 0
 619 01e2 0000      		nop
 620               	/* epilogue start */
 621 01e4 0F90      		pop __tmp_reg__
 622 01e6 0F90      		pop __tmp_reg__
 623 01e8 DF91      		pop r29
 624 01ea CF91      		pop r28
 625 01ec 0895      		ret
 626               		.cfi_endproc
 627               	.LFE19:
 629               	.global	wdt_set_interrupt_callback
 631               	wdt_set_interrupt_callback:
 632               	.LFB20:
 208:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c **** 
 209:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c **** /**
 210:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c ****  * \brief Set WDT timer overflow interrupt callback function
 211:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c ****  *
 212:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c ****  * This function allows the caller to set and change the interrupt callback
 213:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c ****  * function. Without setting a callback function the interrupt handler in the
 214:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c ****  * driver will only clear the interrupt flags.
 215:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c ****  *
 216:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c ****  * \param callback Reference to a callback function
 217:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c ****  */
 218:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c **** void wdt_set_interrupt_callback(wdt_callback_t callback)
 219:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c **** {
 633               		.loc 3 219 0
 634               		.cfi_startproc
 635 01ee CF93      		push r28
 636               	.LCFI40:
 637               		.cfi_def_cfa_offset 3
 638               		.cfi_offset 28, -2
 639 01f0 DF93      		push r29
 640               	.LCFI41:
 641               		.cfi_def_cfa_offset 4
 642               		.cfi_offset 29, -3
 643 01f2 00D0      		rcall .
 644               	.LCFI42:
 645               		.cfi_def_cfa_offset 6
 646 01f4 CDB7      		in r28,__SP_L__
 647 01f6 DEB7      		in r29,__SP_H__
 648               	.LCFI43:
 649               		.cfi_def_cfa_register 28
 650               	/* prologue: function */
 651               	/* frame size = 2 */
 652               	/* stack size = 4 */
 653               	.L__stack_usage = 4
 654 01f8 9A83      		std Y+2,r25
 655 01fa 8983      		std Y+1,r24
 220:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c **** 	wdt_timer_callback = callback;
 656               		.loc 3 220 0
 657 01fc 8981      		ldd r24,Y+1
 658 01fe 9A81      		ldd r25,Y+2
 659 0200 9093 0000 		sts wdt_timer_callback+1,r25
 660 0204 8093 0000 		sts wdt_timer_callback,r24
 221:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c **** }
 661               		.loc 3 221 0
 662 0208 0000      		nop
 663               	/* epilogue start */
 664 020a 0F90      		pop __tmp_reg__
 665 020c 0F90      		pop __tmp_reg__
 666 020e DF91      		pop r29
 667 0210 CF91      		pop r28
 668 0212 0895      		ret
 669               		.cfi_endproc
 670               	.LFE20:
 672               	.global	wdt_reset_mcu
 674               	wdt_reset_mcu:
 675               	.LFB21:
 222:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c **** 
 223:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c **** /**
 224:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c ****  * *\brief Reset MCU via Watchdog.
 225:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c ****  *
 226:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c ****  *  This function generates an hardware microcontroller reset using the WDT.
 227:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c ****  *
 228:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c ****  *  The function loads enables the WDT in system reset mode.
 229:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c ****  */
 230:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c **** void wdt_reset_mcu(void)
 231:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c **** {
 676               		.loc 3 231 0
 677               		.cfi_startproc
 678 0214 CF93      		push r28
 679               	.LCFI44:
 680               		.cfi_def_cfa_offset 3
 681               		.cfi_offset 28, -2
 682 0216 DF93      		push r29
 683               	.LCFI45:
 684               		.cfi_def_cfa_offset 4
 685               		.cfi_offset 29, -3
 686 0218 CDB7      		in r28,__SP_L__
 687 021a DEB7      		in r29,__SP_H__
 688               	.LCFI46:
 689               		.cfi_def_cfa_register 28
 690               	/* prologue: function */
 691               	/* frame size = 0 */
 692               	/* stack size = 2 */
 693               	.L__stack_usage = 2
 232:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c **** 	/*
 233:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c **** 	 * Set minimum timeout period
 234:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c **** 	 */
 235:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c **** 	wdt_set_timeout_period(WDT_TIMEOUT_PERIOD_2KCLK);
 694               		.loc 3 235 0
 695 021c 80E0      		ldi r24,0
 696 021e 0E94 0000 		call wdt_set_timeout_period
 236:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c **** 
 237:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c **** 	/*
 238:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c **** 	 * WDT enabled
 239:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c **** 	 */
 240:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c **** 	wdt_enable(SYSTEM_RESET_MODE);
 697               		.loc 3 240 0
 698 0222 81E0      		ldi r24,lo8(1)
 699 0224 0E94 0000 		call wdt_enable
 241:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c **** 
 242:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c **** 	/*
 243:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c **** 	 * WDT Reset
 244:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c **** 	 */
 245:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c **** 	wdt_reset();
 700               		.loc 3 245 0
 701               	/* #APP */
 702               	 ;  245 "../../../platform/mega_rf/drivers/wdt/wdt_megarf.c" 1
 703 0228 A895      		wdr
 704               	 ;  0 "" 2
 705               	/* #NOAPP */
 706               	.L18:
 246:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c **** 
 247:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c **** 	/*
 248:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c **** 	 * No exit to prevent the execution of the following instructions.
 249:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c **** 	 */
 250:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c **** 	while (true) {
 251:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c **** 		/* Wait for Watchdog reset. */
 252:../../../platform/mega_rf/drivers/wdt/wdt_megarf.c **** 	}
 707               		.loc 3 252 0 discriminator 1
 708 022a 00C0      		rjmp .L18
 709               		.cfi_endproc
 710               	.LFE21:
 712               	.Letext0:
 713               		.file 4 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\in
DEFINED SYMBOLS
                            *ABS*:00000000 wdt_megarf.c
C:\Users\GUILHE~1\AppData\Local\Temp\ccaCK2yK.s:2      *ABS*:0000003e __SP_H__
C:\Users\GUILHE~1\AppData\Local\Temp\ccaCK2yK.s:3      *ABS*:0000003d __SP_L__
C:\Users\GUILHE~1\AppData\Local\Temp\ccaCK2yK.s:4      *ABS*:0000003f __SREG__
C:\Users\GUILHE~1\AppData\Local\Temp\ccaCK2yK.s:5      *ABS*:0000003b __RAMPZ__
C:\Users\GUILHE~1\AppData\Local\Temp\ccaCK2yK.s:6      *ABS*:00000000 __tmp_reg__
C:\Users\GUILHE~1\AppData\Local\Temp\ccaCK2yK.s:7      *ABS*:00000001 __zero_reg__
C:\Users\GUILHE~1\AppData\Local\Temp\ccaCK2yK.s:12     .text:00000000 cpu_irq_save
C:\Users\GUILHE~1\AppData\Local\Temp\ccaCK2yK.s:60     .text:00000020 cpu_irq_restore
C:\Users\GUILHE~1\AppData\Local\Temp\ccaCK2yK.s:102    .text:00000040 wdt_reset_flag_clear
C:\Users\GUILHE~1\AppData\Local\Temp\ccaCK2yK.s:145    .bss.wdt_timer_callback:00000000 wdt_timer_callback
C:\Users\GUILHE~1\AppData\Local\Temp\ccaCK2yK.s:150    .text:00000062 __vector_12
C:\Users\GUILHE~1\AppData\Local\Temp\ccaCK2yK.s:272    .text:000000dc wdt_disable
C:\Users\GUILHE~1\AppData\Local\Temp\ccaCK2yK.s:343    .text:00000112 wdt_set_timeout_period
C:\Users\GUILHE~1\AppData\Local\Temp\ccaCK2yK.s:465    .text:0000016c wdt_enable
C:\Users\GUILHE~1\AppData\Local\Temp\ccaCK2yK.s:631    .text:000001ee wdt_set_interrupt_callback
C:\Users\GUILHE~1\AppData\Local\Temp\ccaCK2yK.s:674    .text:00000214 wdt_reset_mcu

UNDEFINED SYMBOLS
__do_clear_bss
