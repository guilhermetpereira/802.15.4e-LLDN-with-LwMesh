   1               		.file	"sysclk.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__RAMPZ__ = 0x3b
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
   8               		.text
   9               	.Ltext0:
  10               		.cfi_sections	.debug_frame
  12               	cpu_irq_save:
  13               	.LFB4:
  14               		.file 1 "../../../platform/common/utils/interrupt/interrupt_avr8.h"
   1:../../../platform/common/utils/interrupt/interrupt_avr8.h **** /**
   2:../../../platform/common/utils/interrupt/interrupt_avr8.h ****  * \file
   3:../../../platform/common/utils/interrupt/interrupt_avr8.h ****  *
   4:../../../platform/common/utils/interrupt/interrupt_avr8.h ****  * \brief Global interrupt management for 8-bit AVR
   5:../../../platform/common/utils/interrupt/interrupt_avr8.h ****  *
   6:../../../platform/common/utils/interrupt/interrupt_avr8.h ****  * Copyright (C) 2010-2012 Atmel Corporation. All rights reserved.
   7:../../../platform/common/utils/interrupt/interrupt_avr8.h ****  *
   8:../../../platform/common/utils/interrupt/interrupt_avr8.h ****  * \asf_license_start
   9:../../../platform/common/utils/interrupt/interrupt_avr8.h ****  *
  10:../../../platform/common/utils/interrupt/interrupt_avr8.h ****  * \page License
  11:../../../platform/common/utils/interrupt/interrupt_avr8.h ****  *
  12:../../../platform/common/utils/interrupt/interrupt_avr8.h ****  * Redistribution and use in source and binary forms, with or without
  13:../../../platform/common/utils/interrupt/interrupt_avr8.h ****  * modification, are permitted provided that the following conditions are met:
  14:../../../platform/common/utils/interrupt/interrupt_avr8.h ****  *
  15:../../../platform/common/utils/interrupt/interrupt_avr8.h ****  * 1. Redistributions of source code must retain the above copyright notice,
  16:../../../platform/common/utils/interrupt/interrupt_avr8.h ****  *    this list of conditions and the following disclaimer.
  17:../../../platform/common/utils/interrupt/interrupt_avr8.h ****  *
  18:../../../platform/common/utils/interrupt/interrupt_avr8.h ****  * 2. Redistributions in binary form must reproduce the above copyright notice,
  19:../../../platform/common/utils/interrupt/interrupt_avr8.h ****  *    this list of conditions and the following disclaimer in the documentation
  20:../../../platform/common/utils/interrupt/interrupt_avr8.h ****  *    and/or other materials provided with the distribution.
  21:../../../platform/common/utils/interrupt/interrupt_avr8.h ****  *
  22:../../../platform/common/utils/interrupt/interrupt_avr8.h ****  * 3. The name of Atmel may not be used to endorse or promote products derived
  23:../../../platform/common/utils/interrupt/interrupt_avr8.h ****  *    from this software without specific prior written permission.
  24:../../../platform/common/utils/interrupt/interrupt_avr8.h ****  *
  25:../../../platform/common/utils/interrupt/interrupt_avr8.h ****  * 4. This software may only be redistributed and used in connection with an
  26:../../../platform/common/utils/interrupt/interrupt_avr8.h ****  *    Atmel microcontroller product.
  27:../../../platform/common/utils/interrupt/interrupt_avr8.h ****  *
  28:../../../platform/common/utils/interrupt/interrupt_avr8.h ****  * THIS SOFTWARE IS PROVIDED BY ATMEL "AS IS" AND ANY EXPRESS OR IMPLIED
  29:../../../platform/common/utils/interrupt/interrupt_avr8.h ****  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
  30:../../../platform/common/utils/interrupt/interrupt_avr8.h ****  * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE
  31:../../../platform/common/utils/interrupt/interrupt_avr8.h ****  * EXPRESSLY AND SPECIFICALLY DISCLAIMED. IN NO EVENT SHALL ATMEL BE LIABLE FOR
  32:../../../platform/common/utils/interrupt/interrupt_avr8.h ****  * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  33:../../../platform/common/utils/interrupt/interrupt_avr8.h ****  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
  34:../../../platform/common/utils/interrupt/interrupt_avr8.h ****  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
  35:../../../platform/common/utils/interrupt/interrupt_avr8.h ****  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
  36:../../../platform/common/utils/interrupt/interrupt_avr8.h ****  * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
  37:../../../platform/common/utils/interrupt/interrupt_avr8.h ****  * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  38:../../../platform/common/utils/interrupt/interrupt_avr8.h ****  * POSSIBILITY OF SUCH DAMAGE.
  39:../../../platform/common/utils/interrupt/interrupt_avr8.h ****  *
  40:../../../platform/common/utils/interrupt/interrupt_avr8.h ****  * \asf_license_stop
  41:../../../platform/common/utils/interrupt/interrupt_avr8.h ****  *
  42:../../../platform/common/utils/interrupt/interrupt_avr8.h ****  */
  43:../../../platform/common/utils/interrupt/interrupt_avr8.h **** #ifndef UTILS_INTERRUPT_INTERRUPT_H
  44:../../../platform/common/utils/interrupt/interrupt_avr8.h **** #define UTILS_INTERRUPT_INTERRUPT_H
  45:../../../platform/common/utils/interrupt/interrupt_avr8.h **** 
  46:../../../platform/common/utils/interrupt/interrupt_avr8.h **** #include <compiler.h>
  47:../../../platform/common/utils/interrupt/interrupt_avr8.h **** #include <parts.h>
  48:../../../platform/common/utils/interrupt/interrupt_avr8.h **** 
  49:../../../platform/common/utils/interrupt/interrupt_avr8.h **** /**
  50:../../../platform/common/utils/interrupt/interrupt_avr8.h ****  * \weakgroup interrupt_group
  51:../../../platform/common/utils/interrupt/interrupt_avr8.h ****  *
  52:../../../platform/common/utils/interrupt/interrupt_avr8.h ****  * @{
  53:../../../platform/common/utils/interrupt/interrupt_avr8.h ****  */
  54:../../../platform/common/utils/interrupt/interrupt_avr8.h **** 
  55:../../../platform/common/utils/interrupt/interrupt_avr8.h **** #ifdef ISR_CUSTOM_H
  56:../../../platform/common/utils/interrupt/interrupt_avr8.h **** #  include ISR_CUSTOM_H
  57:../../../platform/common/utils/interrupt/interrupt_avr8.h **** #else
  58:../../../platform/common/utils/interrupt/interrupt_avr8.h **** 
  59:../../../platform/common/utils/interrupt/interrupt_avr8.h **** /**
  60:../../../platform/common/utils/interrupt/interrupt_avr8.h ****  * \def ISR
  61:../../../platform/common/utils/interrupt/interrupt_avr8.h ****  * \brief Define service routine for specified interrupt vector
  62:../../../platform/common/utils/interrupt/interrupt_avr8.h ****  *
  63:../../../platform/common/utils/interrupt/interrupt_avr8.h ****  * Usage:
  64:../../../platform/common/utils/interrupt/interrupt_avr8.h ****  * \code
  65:../../../platform/common/utils/interrupt/interrupt_avr8.h ****  * ISR(FOO_vect)
  66:../../../platform/common/utils/interrupt/interrupt_avr8.h ****  * {
  67:../../../platform/common/utils/interrupt/interrupt_avr8.h ****  *     ...
  68:../../../platform/common/utils/interrupt/interrupt_avr8.h ****  * }
  69:../../../platform/common/utils/interrupt/interrupt_avr8.h ****  * \endcode
  70:../../../platform/common/utils/interrupt/interrupt_avr8.h ****  *
  71:../../../platform/common/utils/interrupt/interrupt_avr8.h ****  * \param vect Interrupt vector name as found in the device header files.
  72:../../../platform/common/utils/interrupt/interrupt_avr8.h ****  */
  73:../../../platform/common/utils/interrupt/interrupt_avr8.h **** #if defined(__DOXYGEN__)
  74:../../../platform/common/utils/interrupt/interrupt_avr8.h **** #  define ISR(vect)
  75:../../../platform/common/utils/interrupt/interrupt_avr8.h **** #elif defined(__GNUC__)
  76:../../../platform/common/utils/interrupt/interrupt_avr8.h **** #  include <avr/interrupt.h>
  77:../../../platform/common/utils/interrupt/interrupt_avr8.h **** #elif defined(__ICCAVR__)
  78:../../../platform/common/utils/interrupt/interrupt_avr8.h **** #  define __ISR(x) _Pragma(#x)
  79:../../../platform/common/utils/interrupt/interrupt_avr8.h **** #  define ISR(vect) __ISR(vector=vect) __interrupt void handler_##vect(void)
  80:../../../platform/common/utils/interrupt/interrupt_avr8.h **** #endif
  81:../../../platform/common/utils/interrupt/interrupt_avr8.h **** #endif // ISR_CUSTOM_H
  82:../../../platform/common/utils/interrupt/interrupt_avr8.h **** 
  83:../../../platform/common/utils/interrupt/interrupt_avr8.h **** #if XMEGA
  84:../../../platform/common/utils/interrupt/interrupt_avr8.h **** /**
  85:../../../platform/common/utils/interrupt/interrupt_avr8.h ****  * \brief Initialize interrupt vectors
  86:../../../platform/common/utils/interrupt/interrupt_avr8.h ****  * Enables all interrupt levels, with vectors located in the application section
  87:../../../platform/common/utils/interrupt/interrupt_avr8.h ****  * and fixed priority scheduling.
  88:../../../platform/common/utils/interrupt/interrupt_avr8.h ****  */
  89:../../../platform/common/utils/interrupt/interrupt_avr8.h **** #define irq_initialize_vectors() \
  90:../../../platform/common/utils/interrupt/interrupt_avr8.h **** 	PMIC.CTRL = PMIC_LOLVLEN_bm | PMIC_MEDLVLEN_bm | PMIC_HILVLEN_bm;
  91:../../../platform/common/utils/interrupt/interrupt_avr8.h **** #endif
  92:../../../platform/common/utils/interrupt/interrupt_avr8.h **** 
  93:../../../platform/common/utils/interrupt/interrupt_avr8.h **** #ifdef __GNUC__
  94:../../../platform/common/utils/interrupt/interrupt_avr8.h **** #  define cpu_irq_enable()     sei()
  95:../../../platform/common/utils/interrupt/interrupt_avr8.h **** #  define cpu_irq_disable()    cli()
  96:../../../platform/common/utils/interrupt/interrupt_avr8.h **** #else
  97:../../../platform/common/utils/interrupt/interrupt_avr8.h **** #  define cpu_irq_enable()     __enable_interrupt()
  98:../../../platform/common/utils/interrupt/interrupt_avr8.h **** #  define cpu_irq_disable()    __disable_interrupt()
  99:../../../platform/common/utils/interrupt/interrupt_avr8.h **** #endif
 100:../../../platform/common/utils/interrupt/interrupt_avr8.h **** 
 101:../../../platform/common/utils/interrupt/interrupt_avr8.h **** typedef uint8_t irqflags_t;
 102:../../../platform/common/utils/interrupt/interrupt_avr8.h **** 
 103:../../../platform/common/utils/interrupt/interrupt_avr8.h **** static inline irqflags_t cpu_irq_save(void)
 104:../../../platform/common/utils/interrupt/interrupt_avr8.h **** {
  15               		.loc 1 104 0
  16               		.cfi_startproc
  17 0000 CF93      		push r28
  18               	.LCFI0:
  19               		.cfi_def_cfa_offset 3
  20               		.cfi_offset 28, -2
  21 0002 DF93      		push r29
  22               	.LCFI1:
  23               		.cfi_def_cfa_offset 4
  24               		.cfi_offset 29, -3
  25 0004 1F92      		push __zero_reg__
  26               	.LCFI2:
  27               		.cfi_def_cfa_offset 5
  28 0006 CDB7      		in r28,__SP_L__
  29 0008 DEB7      		in r29,__SP_H__
  30               	.LCFI3:
  31               		.cfi_def_cfa_register 28
  32               	/* prologue: function */
  33               	/* frame size = 1 */
  34               	/* stack size = 3 */
  35               	.L__stack_usage = 3
 105:../../../platform/common/utils/interrupt/interrupt_avr8.h **** 	irqflags_t flags = SREG;
  36               		.loc 1 105 0
  37 000a 8FE5      		ldi r24,lo8(95)
  38 000c 90E0      		ldi r25,0
  39 000e FC01      		movw r30,r24
  40 0010 8081      		ld r24,Z
  41 0012 8983      		std Y+1,r24
 106:../../../platform/common/utils/interrupt/interrupt_avr8.h **** 	cpu_irq_disable();
  42               		.loc 1 106 0
  43               	/* #APP */
  44               	 ;  106 "../../../platform/common/utils/interrupt/interrupt_avr8.h" 1
  45 0014 F894      		cli
  46               	 ;  0 "" 2
 107:../../../platform/common/utils/interrupt/interrupt_avr8.h **** 	return flags;
  47               		.loc 1 107 0
  48               	/* #NOAPP */
  49 0016 8981      		ldd r24,Y+1
  50               	/* epilogue start */
 108:../../../platform/common/utils/interrupt/interrupt_avr8.h **** }
  51               		.loc 1 108 0
  52 0018 0F90      		pop __tmp_reg__
  53 001a DF91      		pop r29
  54 001c CF91      		pop r28
  55 001e 0895      		ret
  56               		.cfi_endproc
  57               	.LFE4:
  60               	cpu_irq_restore:
  61               	.LFB5:
 109:../../../platform/common/utils/interrupt/interrupt_avr8.h **** 
 110:../../../platform/common/utils/interrupt/interrupt_avr8.h **** static inline void cpu_irq_restore(irqflags_t flags)
 111:../../../platform/common/utils/interrupt/interrupt_avr8.h **** {
  62               		.loc 1 111 0
  63               		.cfi_startproc
  64 0020 CF93      		push r28
  65               	.LCFI4:
  66               		.cfi_def_cfa_offset 3
  67               		.cfi_offset 28, -2
  68 0022 DF93      		push r29
  69               	.LCFI5:
  70               		.cfi_def_cfa_offset 4
  71               		.cfi_offset 29, -3
  72 0024 1F92      		push __zero_reg__
  73               	.LCFI6:
  74               		.cfi_def_cfa_offset 5
  75 0026 CDB7      		in r28,__SP_L__
  76 0028 DEB7      		in r29,__SP_H__
  77               	.LCFI7:
  78               		.cfi_def_cfa_register 28
  79               	/* prologue: function */
  80               	/* frame size = 1 */
  81               	/* stack size = 3 */
  82               	.L__stack_usage = 3
  83 002a 8983      		std Y+1,r24
 112:../../../platform/common/utils/interrupt/interrupt_avr8.h **** 	barrier();
  84               		.loc 1 112 0
 113:../../../platform/common/utils/interrupt/interrupt_avr8.h **** 	SREG = flags;
  85               		.loc 1 113 0
  86 002c 8FE5      		ldi r24,lo8(95)
  87 002e 90E0      		ldi r25,0
  88 0030 2981      		ldd r18,Y+1
  89 0032 FC01      		movw r30,r24
  90 0034 2083      		st Z,r18
 114:../../../platform/common/utils/interrupt/interrupt_avr8.h **** }
  91               		.loc 1 114 0
  92 0036 0000      		nop
  93               	/* epilogue start */
  94 0038 0F90      		pop __tmp_reg__
  95 003a DF91      		pop r29
  96 003c CF91      		pop r28
  97 003e 0895      		ret
  98               		.cfi_endproc
  99               	.LFE5:
 102               	sysclk_set_prescalers:
 103               	.LFB71:
 104               		.file 2 "../../../platform/common/services/clock/mega/sysclk.h"
   1:../../../platform/common/services/clock/mega/sysclk.h **** /**
   2:../../../platform/common/services/clock/mega/sysclk.h ****  * \file
   3:../../../platform/common/services/clock/mega/sysclk.h ****  *
   4:../../../platform/common/services/clock/mega/sysclk.h ****  * \brief Chip-specific system clock management functions
   5:../../../platform/common/services/clock/mega/sysclk.h ****  *
   6:../../../platform/common/services/clock/mega/sysclk.h ****  * Copyright (c) 2012 Atmel Corporation. All rights reserved.
   7:../../../platform/common/services/clock/mega/sysclk.h ****  *
   8:../../../platform/common/services/clock/mega/sysclk.h ****  * \asf_license_start
   9:../../../platform/common/services/clock/mega/sysclk.h ****  *
  10:../../../platform/common/services/clock/mega/sysclk.h ****  * \page License
  11:../../../platform/common/services/clock/mega/sysclk.h ****  *
  12:../../../platform/common/services/clock/mega/sysclk.h ****  * Redistribution and use in source and binary forms, with or without
  13:../../../platform/common/services/clock/mega/sysclk.h ****  * modification, are permitted provided that the following conditions are met:
  14:../../../platform/common/services/clock/mega/sysclk.h ****  *
  15:../../../platform/common/services/clock/mega/sysclk.h ****  * 1. Redistributions of source code must retain the above copyright notice,
  16:../../../platform/common/services/clock/mega/sysclk.h ****  *    this list of conditions and the following disclaimer.
  17:../../../platform/common/services/clock/mega/sysclk.h ****  *
  18:../../../platform/common/services/clock/mega/sysclk.h ****  * 2. Redistributions in binary form must reproduce the above copyright notice,
  19:../../../platform/common/services/clock/mega/sysclk.h ****  *    this list of conditions and the following disclaimer in the documentation
  20:../../../platform/common/services/clock/mega/sysclk.h ****  *    and/or other materials provided with the distribution.
  21:../../../platform/common/services/clock/mega/sysclk.h ****  *
  22:../../../platform/common/services/clock/mega/sysclk.h ****  * 3. The name of Atmel may not be used to endorse or promote products derived
  23:../../../platform/common/services/clock/mega/sysclk.h ****  *    from this software without specific prior written permission.
  24:../../../platform/common/services/clock/mega/sysclk.h ****  *
  25:../../../platform/common/services/clock/mega/sysclk.h ****  * 4. This software may only be redistributed and used in connection with an
  26:../../../platform/common/services/clock/mega/sysclk.h ****  *    Atmel microcontroller product.
  27:../../../platform/common/services/clock/mega/sysclk.h ****  *
  28:../../../platform/common/services/clock/mega/sysclk.h ****  * THIS SOFTWARE IS PROVIDED BY ATMEL "AS IS" AND ANY EXPRESS OR IMPLIED
  29:../../../platform/common/services/clock/mega/sysclk.h ****  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
  30:../../../platform/common/services/clock/mega/sysclk.h ****  * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE
  31:../../../platform/common/services/clock/mega/sysclk.h ****  * EXPRESSLY AND SPECIFICALLY DISCLAIMED. IN NO EVENT SHALL ATMEL BE LIABLE FOR
  32:../../../platform/common/services/clock/mega/sysclk.h ****  * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  33:../../../platform/common/services/clock/mega/sysclk.h ****  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
  34:../../../platform/common/services/clock/mega/sysclk.h ****  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
  35:../../../platform/common/services/clock/mega/sysclk.h ****  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
  36:../../../platform/common/services/clock/mega/sysclk.h ****  * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
  37:../../../platform/common/services/clock/mega/sysclk.h ****  * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  38:../../../platform/common/services/clock/mega/sysclk.h ****  * POSSIBILITY OF SUCH DAMAGE.
  39:../../../platform/common/services/clock/mega/sysclk.h ****  *
  40:../../../platform/common/services/clock/mega/sysclk.h ****  * \asf_license_stop
  41:../../../platform/common/services/clock/mega/sysclk.h ****  *
  42:../../../platform/common/services/clock/mega/sysclk.h ****  */
  43:../../../platform/common/services/clock/mega/sysclk.h **** #ifndef MEGA_SYSCLK_H_INCLUDED
  44:../../../platform/common/services/clock/mega/sysclk.h **** #define MEGA_SYSCLK_H_INCLUDED
  45:../../../platform/common/services/clock/mega/sysclk.h **** 
  46:../../../platform/common/services/clock/mega/sysclk.h **** #include <board.h>
  47:../../../platform/common/services/clock/mega/sysclk.h **** #include <compiler.h>
  48:../../../platform/common/services/clock/mega/sysclk.h **** #include <parts.h>
  49:../../../platform/common/services/clock/mega/sysclk.h **** 
  50:../../../platform/common/services/clock/mega/sysclk.h **** /* Include clock configuration for the project. */
  51:../../../platform/common/services/clock/mega/sysclk.h **** #include <conf_clock.h>
  52:../../../platform/common/services/clock/mega/sysclk.h **** 
  53:../../../platform/common/services/clock/mega/sysclk.h **** #ifdef __cplusplus
  54:../../../platform/common/services/clock/mega/sysclk.h **** extern "C" {
  55:../../../platform/common/services/clock/mega/sysclk.h **** #endif
  56:../../../platform/common/services/clock/mega/sysclk.h **** #define ASM __asm__
  57:../../../platform/common/services/clock/mega/sysclk.h **** 
  58:../../../platform/common/services/clock/mega/sysclk.h **** /* CONFIG_SYSCLK_PSDIV  to use default if not defined*/
  59:../../../platform/common/services/clock/mega/sysclk.h **** #ifndef CONFIG_SYSCLK_PSDIV
  60:../../../platform/common/services/clock/mega/sysclk.h **** # define CONFIG_SYSCLK_PSDIV    SYSCLK_PSDIV_8
  61:../../../platform/common/services/clock/mega/sysclk.h **** #endif
  62:../../../platform/common/services/clock/mega/sysclk.h **** 
  63:../../../platform/common/services/clock/mega/sysclk.h **** /* ! \name Prescaler Setting (relative to CLKsys) */
  64:../../../platform/common/services/clock/mega/sysclk.h **** /* @{ */
  65:../../../platform/common/services/clock/mega/sysclk.h **** #define SYSCLK_PSDIV_1      0   /* !< Do not prescale */
  66:../../../platform/common/services/clock/mega/sysclk.h **** #define SYSCLK_PSDIV_2      1   /* !< Prescale CLKper4 by 2 */
  67:../../../platform/common/services/clock/mega/sysclk.h **** #define SYSCLK_PSDIV_4      2   /* !< Prescale CLKper4 by 4 */
  68:../../../platform/common/services/clock/mega/sysclk.h **** #define SYSCLK_PSDIV_8      3   /* !< Prescale CLKper4 by 8 */
  69:../../../platform/common/services/clock/mega/sysclk.h **** #define SYSCLK_PSDIV_16     4   /* !< Prescale CLKper4 by 16 */
  70:../../../platform/common/services/clock/mega/sysclk.h **** #define SYSCLK_PSDIV_32     5   /* !< Prescale CLKper4 by 32 */
  71:../../../platform/common/services/clock/mega/sysclk.h **** #define SYSCLK_PSDIV_64     6   /* !< Prescale CLKper4 by 64 */
  72:../../../platform/common/services/clock/mega/sysclk.h **** #define SYSCLK_PSDIV_128    7   /* !< Prescale CLKper4 by 128 */
  73:../../../platform/common/services/clock/mega/sysclk.h **** #define SYSCLK_PSDIV_256    8   /* !< Prescale CLKper4 by 256 */
  74:../../../platform/common/services/clock/mega/sysclk.h **** 
  75:../../../platform/common/services/clock/mega/sysclk.h **** /* @} */
  76:../../../platform/common/services/clock/mega/sysclk.h **** 
  77:../../../platform/common/services/clock/mega/sysclk.h **** #if MEGA_RF || MEGA_XX0_1 || MEGA_XX4 || MEGA_XX4_A
  78:../../../platform/common/services/clock/mega/sysclk.h **** 
  79:../../../platform/common/services/clock/mega/sysclk.h **** #define NUMBER_OF_POWER_REG       2
  80:../../../platform/common/services/clock/mega/sysclk.h **** /*Starting Address for power reduction*/
  81:../../../platform/common/services/clock/mega/sysclk.h **** #define POWER_REG_ADD             PRR0
  82:../../../platform/common/services/clock/mega/sysclk.h **** 
  83:../../../platform/common/services/clock/mega/sysclk.h **** /* ! \name Power Reduction  Clock Port Numbers */
  84:../../../platform/common/services/clock/mega/sysclk.h **** enum power_red_id {
  85:../../../platform/common/services/clock/mega/sysclk.h **** 	POWER_RED_REG0,     /* !< Devices on PRR0 */
  86:../../../platform/common/services/clock/mega/sysclk.h **** #if !MEGA_XX4 || !MEGA_XX4_A || MEGA_XX0_1
  87:../../../platform/common/services/clock/mega/sysclk.h **** 	POWER_RED_REG1,     /* !< Devices on PRR1 */
  88:../../../platform/common/services/clock/mega/sysclk.h **** #endif
  89:../../../platform/common/services/clock/mega/sysclk.h **** };
  90:../../../platform/common/services/clock/mega/sysclk.h **** #endif
  91:../../../platform/common/services/clock/mega/sysclk.h **** 
  92:../../../platform/common/services/clock/mega/sysclk.h **** /****************************************************
  93:../../../platform/common/services/clock/mega/sysclk.h ****  * Given a dummy type but not used for these groups
  94:../../../platform/common/services/clock/mega/sysclk.h ****  * to support for otherthen megaRF device.
  95:../../../platform/common/services/clock/mega/sysclk.h ****  **************************************************/
  96:../../../platform/common/services/clock/mega/sysclk.h **** #if MEGA_XX8 || MEGA_XX8_A || MEGA_UNSPECIFIED
  97:../../../platform/common/services/clock/mega/sysclk.h **** #define NUMBER_OF_POWER_REG       1
  98:../../../platform/common/services/clock/mega/sysclk.h **** /*Starting Address for power reduction*/
  99:../../../platform/common/services/clock/mega/sysclk.h **** #define POWER_REG_ADD             PRR
 100:../../../platform/common/services/clock/mega/sysclk.h **** 
 101:../../../platform/common/services/clock/mega/sysclk.h **** /* ! \name Power Reduction  Clock Port Numbers */
 102:../../../platform/common/services/clock/mega/sysclk.h **** enum power_red_id {
 103:../../../platform/common/services/clock/mega/sysclk.h **** 	POWER_RED_REG0,     /* !< Devices on PRR */
 104:../../../platform/common/services/clock/mega/sysclk.h **** };
 105:../../../platform/common/services/clock/mega/sysclk.h **** #endif
 106:../../../platform/common/services/clock/mega/sysclk.h **** 
 107:../../../platform/common/services/clock/mega/sysclk.h **** /* Bit mask for the power reduction register based on */
 108:../../../platform/common/services/clock/mega/sysclk.h **** /*   MCU ARCH.                                        */
 109:../../../platform/common/services/clock/mega/sysclk.h **** #if MEGA_RF
 110:../../../platform/common/services/clock/mega/sysclk.h **** /*Bit mask for PRR2 */
 111:../../../platform/common/services/clock/mega/sysclk.h **** 
 112:../../../platform/common/services/clock/mega/sysclk.h **** #define PRRAM0_bm                       1 << PRRAM0
 113:../../../platform/common/services/clock/mega/sysclk.h **** #define PRRAM1_bm                       1 << PRRAM1
 114:../../../platform/common/services/clock/mega/sysclk.h **** #define PRRAM2_bm                       1 << PRRAM2
 115:../../../platform/common/services/clock/mega/sysclk.h **** #define PRRAM3_bm                       1 << PRRAM3
 116:../../../platform/common/services/clock/mega/sysclk.h **** #endif
 117:../../../platform/common/services/clock/mega/sysclk.h **** 
 118:../../../platform/common/services/clock/mega/sysclk.h **** /*Bit mask for the power reduction 0 or PRR*/
 119:../../../platform/common/services/clock/mega/sysclk.h **** #if !MEGA_XX_UN0 && !MEGA_XX_UN0
 120:../../../platform/common/services/clock/mega/sysclk.h **** #define PRADC_bm                        1 << PRADC
 121:../../../platform/common/services/clock/mega/sysclk.h **** #define PRUSART0_bm                     1 << PRUSART0
 122:../../../platform/common/services/clock/mega/sysclk.h **** #define PRSPI_bm                        1 << PRSPI
 123:../../../platform/common/services/clock/mega/sysclk.h **** #define PRTIM1_bm                       1 << PRTIM1
 124:../../../platform/common/services/clock/mega/sysclk.h **** #endif
 125:../../../platform/common/services/clock/mega/sysclk.h **** 
 126:../../../platform/common/services/clock/mega/sysclk.h **** #if MEGA_RF
 127:../../../platform/common/services/clock/mega/sysclk.h **** #define PRPGA_bm                        1 << PRPGA
 128:../../../platform/common/services/clock/mega/sysclk.h **** #endif
 129:../../../platform/common/services/clock/mega/sysclk.h **** 
 130:../../../platform/common/services/clock/mega/sysclk.h **** #if !MEGA_UNSPECIFIED
 131:../../../platform/common/services/clock/mega/sysclk.h **** #define PRTIM0_bm                       1 << PRTIM0
 132:../../../platform/common/services/clock/mega/sysclk.h **** #define PRTIM2_bm                       1 << PRTIM2
 133:../../../platform/common/services/clock/mega/sysclk.h **** #define PRTWI_bm                        1 << PRTWI
 134:../../../platform/common/services/clock/mega/sysclk.h **** #endif
 135:../../../platform/common/services/clock/mega/sysclk.h **** 
 136:../../../platform/common/services/clock/mega/sysclk.h **** #if MEGA_XX_UN2
 137:../../../platform/common/services/clock/mega/sysclk.h **** #define PRLCD_bm                        1 << PRLCD
 138:../../../platform/common/services/clock/mega/sysclk.h **** #endif
 139:../../../platform/common/services/clock/mega/sysclk.h **** 
 140:../../../platform/common/services/clock/mega/sysclk.h **** /*Bit mask for  PRR1  */
 141:../../../platform/common/services/clock/mega/sysclk.h **** #ifdef PRR1
 142:../../../platform/common/services/clock/mega/sysclk.h **** #if (MEGA_XX4 || MEGA_XX4_A)
 143:../../../platform/common/services/clock/mega/sysclk.h **** #define PRTIM3_bm                       1 << PRTIM3
 144:../../../platform/common/services/clock/mega/sysclk.h **** #endif
 145:../../../platform/common/services/clock/mega/sysclk.h **** #endif
 146:../../../platform/common/services/clock/mega/sysclk.h **** 
 147:../../../platform/common/services/clock/mega/sysclk.h **** #if MEGA_RF || MEGA_XX4 || MEGA_XX4_A
 148:../../../platform/common/services/clock/mega/sysclk.h **** #define PRUSART1_bm                     1 << PRUSART1
 149:../../../platform/common/services/clock/mega/sysclk.h **** #define PRUSART2_bm                     1 << PRUSART2
 150:../../../platform/common/services/clock/mega/sysclk.h **** #define PRUSART3_bm                     1 << PRUSART3
 151:../../../platform/common/services/clock/mega/sysclk.h **** #define PRTIM3_bm                       1 << PRTIM3
 152:../../../platform/common/services/clock/mega/sysclk.h **** #define PRTIM4_bm                       1 << PRTIM4
 153:../../../platform/common/services/clock/mega/sysclk.h **** #define PRTIM5_bm                       1 << PRTIM5
 154:../../../platform/common/services/clock/mega/sysclk.h **** #endif
 155:../../../platform/common/services/clock/mega/sysclk.h **** 
 156:../../../platform/common/services/clock/mega/sysclk.h **** #if MEGA_RF
 157:../../../platform/common/services/clock/mega/sysclk.h **** #define PRTRX24_bm                      1 << PRTRX24
 158:../../../platform/common/services/clock/mega/sysclk.h **** #endif
 159:../../../platform/common/services/clock/mega/sysclk.h **** 
 160:../../../platform/common/services/clock/mega/sysclk.h **** /**
 161:../../../platform/common/services/clock/mega/sysclk.h ****  * \name Querying the system clock and its derived clocks
 162:../../../platform/common/services/clock/mega/sysclk.h ****  */
 163:../../../platform/common/services/clock/mega/sysclk.h **** /* @{ */
 164:../../../platform/common/services/clock/mega/sysclk.h **** 
 165:../../../platform/common/services/clock/mega/sysclk.h **** /**
 166:../../../platform/common/services/clock/mega/sysclk.h ****  * \brief Return the current rate in Hz of the main system clock
 167:../../../platform/common/services/clock/mega/sysclk.h ****  * To know the clock value at what frequency the main clock is running
 168:../../../platform/common/services/clock/mega/sysclk.h ****  * \return Frequency of the main system clock, in Hz.
 169:../../../platform/common/services/clock/mega/sysclk.h ****  * \todo : please initialize the SYSCLK_SOURCE in conf_clock.h file for
 170:../../../platform/common/services/clock/mega/sysclk.h ****  * configured source clock using fuses.
 171:../../../platform/common/services/clock/mega/sysclk.h ****  * \eg. #define SYSCLK_SOURCE SYSCLK_SRC_RC16MHZ to use internal RC
 172:../../../platform/common/services/clock/mega/sysclk.h ****  * oscillator for clock source.
 173:../../../platform/common/services/clock/mega/sysclk.h ****  */
 174:../../../platform/common/services/clock/mega/sysclk.h **** static inline uint32_t sysclk_get_main_hz(void)
 175:../../../platform/common/services/clock/mega/sysclk.h **** {
 176:../../../platform/common/services/clock/mega/sysclk.h **** 	switch (SYSCLK_SOURCE) {
 177:../../../platform/common/services/clock/mega/sysclk.h **** 	case SYSCLK_SRC_RC16MHZ:
 178:../../../platform/common/services/clock/mega/sysclk.h **** 		return 16000000UL;
 179:../../../platform/common/services/clock/mega/sysclk.h **** 
 180:../../../platform/common/services/clock/mega/sysclk.h **** 	case SYSCLK_SRC_RC128KHZ:
 181:../../../platform/common/services/clock/mega/sysclk.h **** 		return 128000UL;
 182:../../../platform/common/services/clock/mega/sysclk.h **** 
 183:../../../platform/common/services/clock/mega/sysclk.h **** #if MEGA_RF
 184:../../../platform/common/services/clock/mega/sysclk.h **** 	case SYSCLK_SRC_TRS16MHZ:
 185:../../../platform/common/services/clock/mega/sysclk.h **** 		return 16000000UL;
 186:../../../platform/common/services/clock/mega/sysclk.h **** #endif
 187:../../../platform/common/services/clock/mega/sysclk.h **** #ifdef BOARD_EXTERNAL_CLK
 188:../../../platform/common/services/clock/mega/sysclk.h **** 	case SYSCLK_SRC_EXTERNAL:
 189:../../../platform/common/services/clock/mega/sysclk.h **** 		return BOARD_EXTERNAL_CLK;
 190:../../../platform/common/services/clock/mega/sysclk.h **** #endif
 191:../../../platform/common/services/clock/mega/sysclk.h **** 	default:
 192:../../../platform/common/services/clock/mega/sysclk.h **** 
 193:../../../platform/common/services/clock/mega/sysclk.h **** 		return 1000000UL;
 194:../../../platform/common/services/clock/mega/sysclk.h **** 	}
 195:../../../platform/common/services/clock/mega/sysclk.h **** }
 196:../../../platform/common/services/clock/mega/sysclk.h **** 
 197:../../../platform/common/services/clock/mega/sysclk.h **** /**
 198:../../../platform/common/services/clock/mega/sysclk.h ****  * \brief Return the current rate in Hz of source clock in Hz.
 199:../../../platform/common/services/clock/mega/sysclk.h ****  *
 200:../../../platform/common/services/clock/mega/sysclk.h ****  * This clock always runs at the same rate as the CPU clock unless the divider
 201:../../../platform/common/services/clock/mega/sysclk.h ****  * is set.
 202:../../../platform/common/services/clock/mega/sysclk.h ****  *
 203:../../../platform/common/services/clock/mega/sysclk.h ****  * \return Frequency of the system clock, in Hz.
 204:../../../platform/common/services/clock/mega/sysclk.h ****  */
 205:../../../platform/common/services/clock/mega/sysclk.h **** static inline uint32_t sysclk_get_source_clock_hz(void)
 206:../../../platform/common/services/clock/mega/sysclk.h **** {
 207:../../../platform/common/services/clock/mega/sysclk.h **** 	switch (CONFIG_SYSCLK_PSDIV) {
 208:../../../platform/common/services/clock/mega/sysclk.h **** 	case SYSCLK_PSDIV_1: /* Fall through */
 209:../../../platform/common/services/clock/mega/sysclk.h **** 		if (SYSCLK_SOURCE == SYSCLK_SRC_RC16MHZ ||
 210:../../../platform/common/services/clock/mega/sysclk.h **** 				SYSCLK_SOURCE == SYSCLK_SRC_RC128KHZ) {
 211:../../../platform/common/services/clock/mega/sysclk.h **** 			return sysclk_get_main_hz() / 2;
 212:../../../platform/common/services/clock/mega/sysclk.h **** 		} else {
 213:../../../platform/common/services/clock/mega/sysclk.h **** 			return sysclk_get_main_hz();
 214:../../../platform/common/services/clock/mega/sysclk.h **** 		}
 215:../../../platform/common/services/clock/mega/sysclk.h **** 
 216:../../../platform/common/services/clock/mega/sysclk.h **** 	case SYSCLK_PSDIV_2:
 217:../../../platform/common/services/clock/mega/sysclk.h **** 		if (SYSCLK_SOURCE == SYSCLK_SRC_RC16MHZ ||
 218:../../../platform/common/services/clock/mega/sysclk.h **** 				SYSCLK_SOURCE == SYSCLK_SRC_RC128KHZ) {
 219:../../../platform/common/services/clock/mega/sysclk.h **** 			return sysclk_get_main_hz() / 4;
 220:../../../platform/common/services/clock/mega/sysclk.h **** 		} else {
 221:../../../platform/common/services/clock/mega/sysclk.h **** 			return sysclk_get_main_hz() / 2;
 222:../../../platform/common/services/clock/mega/sysclk.h **** 		}
 223:../../../platform/common/services/clock/mega/sysclk.h **** 
 224:../../../platform/common/services/clock/mega/sysclk.h **** 	case SYSCLK_PSDIV_4:
 225:../../../platform/common/services/clock/mega/sysclk.h **** 		if (SYSCLK_SOURCE == SYSCLK_SRC_RC16MHZ ||
 226:../../../platform/common/services/clock/mega/sysclk.h **** 				SYSCLK_SOURCE == SYSCLK_SRC_RC128KHZ) {
 227:../../../platform/common/services/clock/mega/sysclk.h **** 			return sysclk_get_main_hz() / 8;
 228:../../../platform/common/services/clock/mega/sysclk.h **** 		} else {
 229:../../../platform/common/services/clock/mega/sysclk.h **** 			return sysclk_get_main_hz() / 4;
 230:../../../platform/common/services/clock/mega/sysclk.h **** 		}
 231:../../../platform/common/services/clock/mega/sysclk.h **** 
 232:../../../platform/common/services/clock/mega/sysclk.h **** 	case SYSCLK_PSDIV_8:
 233:../../../platform/common/services/clock/mega/sysclk.h **** 		if (SYSCLK_SOURCE == SYSCLK_SRC_RC16MHZ ||
 234:../../../platform/common/services/clock/mega/sysclk.h **** 				SYSCLK_SOURCE == SYSCLK_SRC_RC128KHZ) {
 235:../../../platform/common/services/clock/mega/sysclk.h **** 			return sysclk_get_main_hz() / 16;
 236:../../../platform/common/services/clock/mega/sysclk.h **** 		} else {
 237:../../../platform/common/services/clock/mega/sysclk.h **** 			return sysclk_get_main_hz() / 8;
 238:../../../platform/common/services/clock/mega/sysclk.h **** 		}
 239:../../../platform/common/services/clock/mega/sysclk.h **** 
 240:../../../platform/common/services/clock/mega/sysclk.h **** 	case SYSCLK_PSDIV_16:
 241:../../../platform/common/services/clock/mega/sysclk.h **** 		if (SYSCLK_SOURCE == SYSCLK_SRC_RC16MHZ ||
 242:../../../platform/common/services/clock/mega/sysclk.h **** 				SYSCLK_SOURCE == SYSCLK_SRC_RC128KHZ) {
 243:../../../platform/common/services/clock/mega/sysclk.h **** 			return sysclk_get_main_hz() / 32;
 244:../../../platform/common/services/clock/mega/sysclk.h **** 		} else {
 245:../../../platform/common/services/clock/mega/sysclk.h **** 			return sysclk_get_main_hz() / 16;
 246:../../../platform/common/services/clock/mega/sysclk.h **** 		}
 247:../../../platform/common/services/clock/mega/sysclk.h **** 
 248:../../../platform/common/services/clock/mega/sysclk.h **** 	case SYSCLK_PSDIV_32:
 249:../../../platform/common/services/clock/mega/sysclk.h **** 		if (SYSCLK_SOURCE == SYSCLK_SRC_RC16MHZ ||
 250:../../../platform/common/services/clock/mega/sysclk.h **** 				SYSCLK_SOURCE == SYSCLK_SRC_RC128KHZ) {
 251:../../../platform/common/services/clock/mega/sysclk.h **** 			return sysclk_get_main_hz() / 64;
 252:../../../platform/common/services/clock/mega/sysclk.h **** 		} else {
 253:../../../platform/common/services/clock/mega/sysclk.h **** 			return sysclk_get_main_hz() / 32;
 254:../../../platform/common/services/clock/mega/sysclk.h **** 		}
 255:../../../platform/common/services/clock/mega/sysclk.h **** 
 256:../../../platform/common/services/clock/mega/sysclk.h **** 	case SYSCLK_PSDIV_64:
 257:../../../platform/common/services/clock/mega/sysclk.h **** 		if (SYSCLK_SOURCE == SYSCLK_SRC_RC16MHZ ||
 258:../../../platform/common/services/clock/mega/sysclk.h **** 				SYSCLK_SOURCE == SYSCLK_SRC_RC128KHZ) {
 259:../../../platform/common/services/clock/mega/sysclk.h **** 			return sysclk_get_main_hz() / 128;
 260:../../../platform/common/services/clock/mega/sysclk.h **** 		} else {
 261:../../../platform/common/services/clock/mega/sysclk.h **** 			return sysclk_get_main_hz() / 64;
 262:../../../platform/common/services/clock/mega/sysclk.h **** 		}
 263:../../../platform/common/services/clock/mega/sysclk.h **** 
 264:../../../platform/common/services/clock/mega/sysclk.h **** 	case SYSCLK_PSDIV_128:
 265:../../../platform/common/services/clock/mega/sysclk.h **** 		if (SYSCLK_SOURCE == SYSCLK_SRC_RC16MHZ ||
 266:../../../platform/common/services/clock/mega/sysclk.h **** 				SYSCLK_SOURCE == SYSCLK_SRC_RC128KHZ) {
 267:../../../platform/common/services/clock/mega/sysclk.h **** 			return sysclk_get_main_hz() / 256;
 268:../../../platform/common/services/clock/mega/sysclk.h **** 		} else {
 269:../../../platform/common/services/clock/mega/sysclk.h **** 			return sysclk_get_main_hz() / 128;
 270:../../../platform/common/services/clock/mega/sysclk.h **** 		}
 271:../../../platform/common/services/clock/mega/sysclk.h **** 
 272:../../../platform/common/services/clock/mega/sysclk.h **** 	case SYSCLK_PSDIV_256:
 273:../../../platform/common/services/clock/mega/sysclk.h **** 		if (SYSCLK_SOURCE == SYSCLK_SRC_RC16MHZ ||
 274:../../../platform/common/services/clock/mega/sysclk.h **** 				SYSCLK_SOURCE == SYSCLK_SRC_RC128KHZ) {
 275:../../../platform/common/services/clock/mega/sysclk.h **** 			return sysclk_get_main_hz() / 512;
 276:../../../platform/common/services/clock/mega/sysclk.h **** 		} else {
 277:../../../platform/common/services/clock/mega/sysclk.h **** 			return sysclk_get_main_hz() / 256;
 278:../../../platform/common/services/clock/mega/sysclk.h **** 		}
 279:../../../platform/common/services/clock/mega/sysclk.h **** 
 280:../../../platform/common/services/clock/mega/sysclk.h **** 	default:
 281:../../../platform/common/services/clock/mega/sysclk.h **** 		/*Invalide case*/
 282:../../../platform/common/services/clock/mega/sysclk.h **** 		return 0;
 283:../../../platform/common/services/clock/mega/sysclk.h **** 	}
 284:../../../platform/common/services/clock/mega/sysclk.h **** }
 285:../../../platform/common/services/clock/mega/sysclk.h **** 
 286:../../../platform/common/services/clock/mega/sysclk.h **** /**
 287:../../../platform/common/services/clock/mega/sysclk.h ****  * \brief Return the current rate in Hz of the CPU clock.
 288:../../../platform/common/services/clock/mega/sysclk.h ****  *
 289:../../../platform/common/services/clock/mega/sysclk.h ****  * \return Frequency of the CPU clock, in Hz.
 290:../../../platform/common/services/clock/mega/sysclk.h ****  */
 291:../../../platform/common/services/clock/mega/sysclk.h **** static inline uint32_t sysclk_get_cpu_hz(void)
 292:../../../platform/common/services/clock/mega/sysclk.h **** {
 293:../../../platform/common/services/clock/mega/sysclk.h **** 	return sysclk_get_source_clock_hz();
 294:../../../platform/common/services/clock/mega/sysclk.h **** }
 295:../../../platform/common/services/clock/mega/sysclk.h **** 
 296:../../../platform/common/services/clock/mega/sysclk.h **** /**
 297:../../../platform/common/services/clock/mega/sysclk.h ****  * \brief Return the current rate in Hz of the clock from internal oscillator
 298:../../../platform/common/services/clock/mega/sysclk.h ****  * \return Frequency of the CPU clock, in Hz.
 299:../../../platform/common/services/clock/mega/sysclk.h ****  */
 300:../../../platform/common/services/clock/mega/sysclk.h **** static inline uint32_t sysclk_get_rc_osc_hz(void)
 301:../../../platform/common/services/clock/mega/sysclk.h **** {
 302:../../../platform/common/services/clock/mega/sysclk.h **** 	switch (CONFIG_SYSCLK_PSDIV) {
 303:../../../platform/common/services/clock/mega/sysclk.h **** 	case SYSCLK_PSDIV_1:
 304:../../../platform/common/services/clock/mega/sysclk.h **** 		if (SYSCLK_SOURCE == SYSCLK_SRC_RC16MHZ ||
 305:../../../platform/common/services/clock/mega/sysclk.h **** 				SYSCLK_SOURCE == SYSCLK_SRC_RC128KHZ) {
 306:../../../platform/common/services/clock/mega/sysclk.h **** 			return sysclk_get_main_hz() / 2;
 307:../../../platform/common/services/clock/mega/sysclk.h **** 		}
 308:../../../platform/common/services/clock/mega/sysclk.h **** 
 309:../../../platform/common/services/clock/mega/sysclk.h **** 	case SYSCLK_PSDIV_2:
 310:../../../platform/common/services/clock/mega/sysclk.h **** 		if (SYSCLK_SOURCE == SYSCLK_SRC_RC16MHZ ||
 311:../../../platform/common/services/clock/mega/sysclk.h **** 				SYSCLK_SOURCE == SYSCLK_SRC_RC128KHZ) {
 312:../../../platform/common/services/clock/mega/sysclk.h **** 			return sysclk_get_main_hz() / 4;
 313:../../../platform/common/services/clock/mega/sysclk.h **** 		}
 314:../../../platform/common/services/clock/mega/sysclk.h **** 
 315:../../../platform/common/services/clock/mega/sysclk.h **** 	case SYSCLK_PSDIV_4:
 316:../../../platform/common/services/clock/mega/sysclk.h **** 		if (SYSCLK_SOURCE == SYSCLK_SRC_RC16MHZ ||
 317:../../../platform/common/services/clock/mega/sysclk.h **** 				SYSCLK_SOURCE == SYSCLK_SRC_RC128KHZ) {
 318:../../../platform/common/services/clock/mega/sysclk.h **** 			return sysclk_get_main_hz() / 8;
 319:../../../platform/common/services/clock/mega/sysclk.h **** 		}
 320:../../../platform/common/services/clock/mega/sysclk.h **** 
 321:../../../platform/common/services/clock/mega/sysclk.h **** 	case SYSCLK_PSDIV_8:
 322:../../../platform/common/services/clock/mega/sysclk.h **** 		if (SYSCLK_SOURCE == SYSCLK_SRC_RC16MHZ ||
 323:../../../platform/common/services/clock/mega/sysclk.h **** 				SYSCLK_SOURCE == SYSCLK_SRC_RC128KHZ) {
 324:../../../platform/common/services/clock/mega/sysclk.h **** 			return sysclk_get_main_hz() / 16;
 325:../../../platform/common/services/clock/mega/sysclk.h **** 		}
 326:../../../platform/common/services/clock/mega/sysclk.h **** 
 327:../../../platform/common/services/clock/mega/sysclk.h **** 	case SYSCLK_PSDIV_16:
 328:../../../platform/common/services/clock/mega/sysclk.h **** 		if (SYSCLK_SOURCE == SYSCLK_SRC_RC16MHZ ||
 329:../../../platform/common/services/clock/mega/sysclk.h **** 				SYSCLK_SOURCE == SYSCLK_SRC_RC128KHZ) {
 330:../../../platform/common/services/clock/mega/sysclk.h **** 			return sysclk_get_main_hz() / 32;
 331:../../../platform/common/services/clock/mega/sysclk.h **** 		}
 332:../../../platform/common/services/clock/mega/sysclk.h **** 
 333:../../../platform/common/services/clock/mega/sysclk.h **** 	case SYSCLK_PSDIV_32:
 334:../../../platform/common/services/clock/mega/sysclk.h **** 		if (SYSCLK_SOURCE == SYSCLK_SRC_RC16MHZ ||
 335:../../../platform/common/services/clock/mega/sysclk.h **** 				SYSCLK_SOURCE == SYSCLK_SRC_RC128KHZ) {
 336:../../../platform/common/services/clock/mega/sysclk.h **** 			return sysclk_get_main_hz() / 64;
 337:../../../platform/common/services/clock/mega/sysclk.h **** 		}
 338:../../../platform/common/services/clock/mega/sysclk.h **** 
 339:../../../platform/common/services/clock/mega/sysclk.h **** 	case SYSCLK_PSDIV_64:
 340:../../../platform/common/services/clock/mega/sysclk.h **** 		if (SYSCLK_SOURCE == SYSCLK_SRC_RC16MHZ ||
 341:../../../platform/common/services/clock/mega/sysclk.h **** 				SYSCLK_SOURCE == SYSCLK_SRC_RC128KHZ) {
 342:../../../platform/common/services/clock/mega/sysclk.h **** 			return sysclk_get_main_hz() / 128;
 343:../../../platform/common/services/clock/mega/sysclk.h **** 		}
 344:../../../platform/common/services/clock/mega/sysclk.h **** 
 345:../../../platform/common/services/clock/mega/sysclk.h **** 	case SYSCLK_PSDIV_128:
 346:../../../platform/common/services/clock/mega/sysclk.h **** 		if (SYSCLK_SOURCE == SYSCLK_SRC_RC16MHZ ||
 347:../../../platform/common/services/clock/mega/sysclk.h **** 				SYSCLK_SOURCE == SYSCLK_SRC_RC128KHZ) {
 348:../../../platform/common/services/clock/mega/sysclk.h **** 			return sysclk_get_main_hz() / 256;
 349:../../../platform/common/services/clock/mega/sysclk.h **** 		}
 350:../../../platform/common/services/clock/mega/sysclk.h **** 
 351:../../../platform/common/services/clock/mega/sysclk.h **** 	case SYSCLK_PSDIV_256:
 352:../../../platform/common/services/clock/mega/sysclk.h **** 		if (SYSCLK_SOURCE == SYSCLK_SRC_RC16MHZ ||
 353:../../../platform/common/services/clock/mega/sysclk.h **** 				SYSCLK_SOURCE == SYSCLK_SRC_RC128KHZ) {
 354:../../../platform/common/services/clock/mega/sysclk.h **** 			return sysclk_get_main_hz() / 512;
 355:../../../platform/common/services/clock/mega/sysclk.h **** 		}
 356:../../../platform/common/services/clock/mega/sysclk.h **** 
 357:../../../platform/common/services/clock/mega/sysclk.h **** 	default:
 358:../../../platform/common/services/clock/mega/sysclk.h **** 		return 0;
 359:../../../platform/common/services/clock/mega/sysclk.h **** 	}
 360:../../../platform/common/services/clock/mega/sysclk.h **** }
 361:../../../platform/common/services/clock/mega/sysclk.h **** 
 362:../../../platform/common/services/clock/mega/sysclk.h **** /* ! \name Enabling and disabling synchronous clocks */
 363:../../../platform/common/services/clock/mega/sysclk.h **** /* @{ */
 364:../../../platform/common/services/clock/mega/sysclk.h **** 
 365:../../../platform/common/services/clock/mega/sysclk.h **** /**
 366:../../../platform/common/services/clock/mega/sysclk.h ****  * \brief Enable the clock to peripheral \a id on port \a port
 367:../../../platform/common/services/clock/mega/sysclk.h ****  *
 368:../../../platform/common/services/clock/mega/sysclk.h ****  * \param port ID of the port to which the module is connected (one of
 369:../../../platform/common/services/clock/mega/sysclk.h ****  * the \c power_red_id *definitions).
 370:../../../platform/common/services/clock/mega/sysclk.h ****  * \param id The ID (bitmask) of the peripheral module to be disabled.*
 371:../../../platform/common/services/clock/mega/sysclk.h ****  */
 372:../../../platform/common/services/clock/mega/sysclk.h **** extern void sysclk_enable_module(enum power_red_id port, uint8_t id);
 373:../../../platform/common/services/clock/mega/sysclk.h **** 
 374:../../../platform/common/services/clock/mega/sysclk.h **** /**
 375:../../../platform/common/services/clock/mega/sysclk.h ****  * \brief Disable the clock to peripheral \a id on port \a port
 376:../../../platform/common/services/clock/mega/sysclk.h ****  *
 377:../../../platform/common/services/clock/mega/sysclk.h ****  * \param port ID of the port to which the module is connected (one of
 378:../../../platform/common/services/clock/mega/sysclk.h ****  * the \c power_red_id *definitions).
 379:../../../platform/common/services/clock/mega/sysclk.h ****  * \param id The ID (bit mask) of the peripheral module to be disabled.
 380:../../../platform/common/services/clock/mega/sysclk.h ****  */
 381:../../../platform/common/services/clock/mega/sysclk.h **** extern void sysclk_disable_module(enum power_red_id port, uint8_t id);
 382:../../../platform/common/services/clock/mega/sysclk.h **** 
 383:../../../platform/common/services/clock/mega/sysclk.h **** /**
 384:../../../platform/common/services/clock/mega/sysclk.h ****  * \brief Enable a peripherals clock from its base address.
 385:../../../platform/common/services/clock/mega/sysclk.h ****  *
 386:../../../platform/common/services/clock/mega/sysclk.h ****  *  Enables the clock to a peripheral, given its base address. If the peripheral
 387:../../../platform/common/services/clock/mega/sysclk.h ****  *  has an associated clock on the HSB bus, this will be enabled also.
 388:../../../platform/common/services/clock/mega/sysclk.h ****  *
 389:../../../platform/common/services/clock/mega/sysclk.h ****  * \param module Pointer to the module's base address.
 390:../../../platform/common/services/clock/mega/sysclk.h ****  */
 391:../../../platform/common/services/clock/mega/sysclk.h **** static inline void sysclk_enable_peripheral_clock(const volatile void *module)
 392:../../../platform/common/services/clock/mega/sysclk.h **** {
 393:../../../platform/common/services/clock/mega/sysclk.h **** 	if (module == NULL) {
 394:../../../platform/common/services/clock/mega/sysclk.h **** 		Assert(false);
 395:../../../platform/common/services/clock/mega/sysclk.h **** 	}
 396:../../../platform/common/services/clock/mega/sysclk.h **** 
 397:../../../platform/common/services/clock/mega/sysclk.h **** #if !MEGA_XX_UN0 && !MEGA_XX_UN1
 398:../../../platform/common/services/clock/mega/sysclk.h **** 	else if (module == &ADC) {
 399:../../../platform/common/services/clock/mega/sysclk.h **** 		sysclk_enable_module(POWER_RED_REG0, PRADC_bm);
 400:../../../platform/common/services/clock/mega/sysclk.h **** #if MEGA_RF
 401:../../../platform/common/services/clock/mega/sysclk.h **** 		sysclk_enable_module(POWER_RED_REG0, PRPGA_bm);
 402:../../../platform/common/services/clock/mega/sysclk.h **** #endif
 403:../../../platform/common/services/clock/mega/sysclk.h **** 	} else if (module == &UCSR0A) {
 404:../../../platform/common/services/clock/mega/sysclk.h **** 		sysclk_enable_module(POWER_RED_REG0, PRUSART0_bm);
 405:../../../platform/common/services/clock/mega/sysclk.h **** 	}
 406:../../../platform/common/services/clock/mega/sysclk.h **** #if MEGA_RF
 407:../../../platform/common/services/clock/mega/sysclk.h **** 	else if (module == &SPCR) {
 408:../../../platform/common/services/clock/mega/sysclk.h **** 		sysclk_enable_module(POWER_RED_REG0, PRSPI_bm);
 409:../../../platform/common/services/clock/mega/sysclk.h **** 	}
 410:../../../platform/common/services/clock/mega/sysclk.h **** #endif
 411:../../../platform/common/services/clock/mega/sysclk.h **** 
 412:../../../platform/common/services/clock/mega/sysclk.h **** 	else if (module == &TCCR1A) {
 413:../../../platform/common/services/clock/mega/sysclk.h **** 		sysclk_enable_module(POWER_RED_REG0, PRTIM1_bm);
 414:../../../platform/common/services/clock/mega/sysclk.h **** 	}
 415:../../../platform/common/services/clock/mega/sysclk.h **** 
 416:../../../platform/common/services/clock/mega/sysclk.h **** #if MEGA_XX_UN2
 417:../../../platform/common/services/clock/mega/sysclk.h **** 	else if (module == &LCDCRA) {
 418:../../../platform/common/services/clock/mega/sysclk.h **** 		sysclk_enable_module(POWER_RED_REG0, PRLCD_bm);
 419:../../../platform/common/services/clock/mega/sysclk.h **** 	}
 420:../../../platform/common/services/clock/mega/sysclk.h **** #endif
 421:../../../platform/common/services/clock/mega/sysclk.h **** 
 422:../../../platform/common/services/clock/mega/sysclk.h **** #if !MEGA_XX_UN2
 423:../../../platform/common/services/clock/mega/sysclk.h **** 	else if (module == &TCCR0A) {
 424:../../../platform/common/services/clock/mega/sysclk.h **** 		sysclk_enable_module(POWER_RED_REG0, PRTIM0_bm);
 425:../../../platform/common/services/clock/mega/sysclk.h **** 	} else if (module == &TCCR2A) {
 426:../../../platform/common/services/clock/mega/sysclk.h **** 		sysclk_enable_module(POWER_RED_REG0, PRTIM2_bm);
 427:../../../platform/common/services/clock/mega/sysclk.h **** 	} else if (module == &TWBR) {
 428:../../../platform/common/services/clock/mega/sysclk.h **** 		sysclk_enable_module(POWER_RED_REG0, PRTWI_bm);
 429:../../../platform/common/services/clock/mega/sysclk.h **** 	}
 430:../../../platform/common/services/clock/mega/sysclk.h **** #endif
 431:../../../platform/common/services/clock/mega/sysclk.h **** 
 432:../../../platform/common/services/clock/mega/sysclk.h **** #if MEGA_RF
 433:../../../platform/common/services/clock/mega/sysclk.h **** 	else if (module == &UCSR1A) {
 434:../../../platform/common/services/clock/mega/sysclk.h **** 		sysclk_enable_module(POWER_RED_REG1, PRUSART1_bm);
 435:../../../platform/common/services/clock/mega/sysclk.h **** 	} else if (module == &TCCR3A) {
 436:../../../platform/common/services/clock/mega/sysclk.h **** 		sysclk_enable_module(POWER_RED_REG1, PRTIM3_bm);
 437:../../../platform/common/services/clock/mega/sysclk.h **** 	} else if (module == &TCCR4A) {
 438:../../../platform/common/services/clock/mega/sysclk.h **** 		sysclk_enable_module(POWER_RED_REG1, PRTIM4_bm);
 439:../../../platform/common/services/clock/mega/sysclk.h **** 	} else if (module == &TCCR5A) {
 440:../../../platform/common/services/clock/mega/sysclk.h **** 		sysclk_enable_module(POWER_RED_REG1, PRTIM5_bm);
 441:../../../platform/common/services/clock/mega/sysclk.h **** 	} else if (module == &TRX_CTRL_0) {
 442:../../../platform/common/services/clock/mega/sysclk.h **** 		sysclk_enable_module(POWER_RED_REG1, PRTRX24_bm);
 443:../../../platform/common/services/clock/mega/sysclk.h **** 	}
 444:../../../platform/common/services/clock/mega/sysclk.h **** #endif
 445:../../../platform/common/services/clock/mega/sysclk.h **** #endif
 446:../../../platform/common/services/clock/mega/sysclk.h **** 	else {
 447:../../../platform/common/services/clock/mega/sysclk.h **** 		Assert(false);
 448:../../../platform/common/services/clock/mega/sysclk.h **** 	}
 449:../../../platform/common/services/clock/mega/sysclk.h **** }
 450:../../../platform/common/services/clock/mega/sysclk.h **** 
 451:../../../platform/common/services/clock/mega/sysclk.h **** /**
 452:../../../platform/common/services/clock/mega/sysclk.h ****  * \brief Disable a peripheral's clock from its base address.
 453:../../../platform/common/services/clock/mega/sysclk.h ****  *
 454:../../../platform/common/services/clock/mega/sysclk.h ****  *  Disables the clock to a peripheral, given its base address.
 455:../../../platform/common/services/clock/mega/sysclk.h ****  *
 456:../../../platform/common/services/clock/mega/sysclk.h ****  * \param module Pointer to the module's base address.
 457:../../../platform/common/services/clock/mega/sysclk.h ****  */
 458:../../../platform/common/services/clock/mega/sysclk.h **** static inline void sysclk_disable_peripheral_clock(const volatile void *module)
 459:../../../platform/common/services/clock/mega/sysclk.h **** {
 460:../../../platform/common/services/clock/mega/sysclk.h **** 	if (module == NULL) {
 461:../../../platform/common/services/clock/mega/sysclk.h **** 		Assert(false);
 462:../../../platform/common/services/clock/mega/sysclk.h **** 	}
 463:../../../platform/common/services/clock/mega/sysclk.h **** 
 464:../../../platform/common/services/clock/mega/sysclk.h **** #if !MEGA_XX_UN0 && !MEGA_XX_UN1
 465:../../../platform/common/services/clock/mega/sysclk.h **** 	else if (module == &ADC) {
 466:../../../platform/common/services/clock/mega/sysclk.h **** 		sysclk_disable_module(POWER_RED_REG0, PRADC_bm);
 467:../../../platform/common/services/clock/mega/sysclk.h **** #if MEGA_RF
 468:../../../platform/common/services/clock/mega/sysclk.h **** 		sysclk_disable_module(POWER_RED_REG0, PRPGA_bm);
 469:../../../platform/common/services/clock/mega/sysclk.h **** #endif
 470:../../../platform/common/services/clock/mega/sysclk.h **** 	} else if (module == &UCSR0A) {
 471:../../../platform/common/services/clock/mega/sysclk.h **** 		sysclk_disable_module(POWER_RED_REG0, PRUSART0_bm);
 472:../../../platform/common/services/clock/mega/sysclk.h **** 	}
 473:../../../platform/common/services/clock/mega/sysclk.h **** #if MEGA_RF
 474:../../../platform/common/services/clock/mega/sysclk.h **** 	else if (module == &SPCR) {
 475:../../../platform/common/services/clock/mega/sysclk.h **** 		sysclk_disable_module(POWER_RED_REG0, PRSPI_bm);
 476:../../../platform/common/services/clock/mega/sysclk.h **** 	}
 477:../../../platform/common/services/clock/mega/sysclk.h **** #endif
 478:../../../platform/common/services/clock/mega/sysclk.h **** 	else if (module == &TCCR1A) {
 479:../../../platform/common/services/clock/mega/sysclk.h **** 		sysclk_disable_module(POWER_RED_REG0, PRTIM1_bm);
 480:../../../platform/common/services/clock/mega/sysclk.h **** 	}
 481:../../../platform/common/services/clock/mega/sysclk.h **** 
 482:../../../platform/common/services/clock/mega/sysclk.h **** #if MEGA_XX_UN2
 483:../../../platform/common/services/clock/mega/sysclk.h **** 	else if (module == &LCDCRA) {
 484:../../../platform/common/services/clock/mega/sysclk.h **** 		sysclk_disable_module(POWER_RED_REG0, PRLCD_bm);
 485:../../../platform/common/services/clock/mega/sysclk.h **** 	}
 486:../../../platform/common/services/clock/mega/sysclk.h **** #endif
 487:../../../platform/common/services/clock/mega/sysclk.h **** #if !MEGA_XX_UN2
 488:../../../platform/common/services/clock/mega/sysclk.h **** 	else if (module == &TCCR0A) {
 489:../../../platform/common/services/clock/mega/sysclk.h **** 		sysclk_disable_module(POWER_RED_REG0, PRTIM0_bm);
 490:../../../platform/common/services/clock/mega/sysclk.h **** 	} else if (module == &TCCR2A) {
 491:../../../platform/common/services/clock/mega/sysclk.h **** 		sysclk_disable_module(POWER_RED_REG0, PRTIM2_bm);
 492:../../../platform/common/services/clock/mega/sysclk.h **** 	} else if (module == &TWBR) {
 493:../../../platform/common/services/clock/mega/sysclk.h **** 		sysclk_disable_module(POWER_RED_REG0, PRTWI_bm);
 494:../../../platform/common/services/clock/mega/sysclk.h **** 	}
 495:../../../platform/common/services/clock/mega/sysclk.h **** #endif
 496:../../../platform/common/services/clock/mega/sysclk.h **** #if MEGA_RF
 497:../../../platform/common/services/clock/mega/sysclk.h **** 	else if (module == &UCSR1A) {
 498:../../../platform/common/services/clock/mega/sysclk.h **** 		sysclk_disable_module(POWER_RED_REG1, PRUSART1_bm);
 499:../../../platform/common/services/clock/mega/sysclk.h **** 	} else if (module == &TCCR3A) {
 500:../../../platform/common/services/clock/mega/sysclk.h **** 		sysclk_disable_module(POWER_RED_REG1, PRTIM3_bm);
 501:../../../platform/common/services/clock/mega/sysclk.h **** 	} else if (module == &TCCR4A) {
 502:../../../platform/common/services/clock/mega/sysclk.h **** 		sysclk_disable_module(POWER_RED_REG1, PRTIM4_bm);
 503:../../../platform/common/services/clock/mega/sysclk.h **** 	} else if (module == &TCCR5A) {
 504:../../../platform/common/services/clock/mega/sysclk.h **** 		sysclk_disable_module(POWER_RED_REG1, PRTIM5_bm);
 505:../../../platform/common/services/clock/mega/sysclk.h **** 	} else if (module == &TRX_CTRL_0) {
 506:../../../platform/common/services/clock/mega/sysclk.h **** 		sysclk_disable_module(POWER_RED_REG1, PRTRX24_bm);
 507:../../../platform/common/services/clock/mega/sysclk.h **** 	}
 508:../../../platform/common/services/clock/mega/sysclk.h **** #endif
 509:../../../platform/common/services/clock/mega/sysclk.h **** #endif
 510:../../../platform/common/services/clock/mega/sysclk.h **** 	else {
 511:../../../platform/common/services/clock/mega/sysclk.h **** 		Assert(false);
 512:../../../platform/common/services/clock/mega/sysclk.h **** 	}
 513:../../../platform/common/services/clock/mega/sysclk.h **** }
 514:../../../platform/common/services/clock/mega/sysclk.h **** 
 515:../../../platform/common/services/clock/mega/sysclk.h **** /**
 516:../../../platform/common/services/clock/mega/sysclk.h ****  * \brief Set system clock prescaler configuration
 517:../../../platform/common/services/clock/mega/sysclk.h ****  *
 518:../../../platform/common/services/clock/mega/sysclk.h ****  * This function will change the system clock prescaler configuration to
 519:../../../platform/common/services/clock/mega/sysclk.h ****  * match the parameters.
 520:../../../platform/common/services/clock/mega/sysclk.h ****  *
 521:../../../platform/common/services/clock/mega/sysclk.h ****  * \note The parameters to this function are device-specific.
 522:../../../platform/common/services/clock/mega/sysclk.h ****  *
 523:../../../platform/common/services/clock/mega/sysclk.h ****  * \param psbcdiv The prescaler  settings (one of the \c SYSCLK_PSCDIV_*
 524:../../../platform/common/services/clock/mega/sysclk.h ****  * definitions). These determine the clkIO, clkADC and clkCPU frequencies.
 525:../../../platform/common/services/clock/mega/sysclk.h ****  * Note: Prescaler setting is not working with the brain dead un optimised code
 526:../../../platform/common/services/clock/mega/sysclk.h ****  * e.g. avr-gcc -00
 527:../../../platform/common/services/clock/mega/sysclk.h ****  */
 528:../../../platform/common/services/clock/mega/sysclk.h **** 
 529:../../../platform/common/services/clock/mega/sysclk.h **** static inline void sysclk_set_prescalers(uint8_t psdiv)
 530:../../../platform/common/services/clock/mega/sysclk.h **** {
 105               		.loc 2 530 0
 106               		.cfi_startproc
 107 0040 CF93      		push r28
 108               	.LCFI8:
 109               		.cfi_def_cfa_offset 3
 110               		.cfi_offset 28, -2
 111 0042 DF93      		push r29
 112               	.LCFI9:
 113               		.cfi_def_cfa_offset 4
 114               		.cfi_offset 29, -3
 115 0044 00D0      		rcall .
 116               	.LCFI10:
 117               		.cfi_def_cfa_offset 6
 118 0046 CDB7      		in r28,__SP_L__
 119 0048 DEB7      		in r29,__SP_H__
 120               	.LCFI11:
 121               		.cfi_def_cfa_register 28
 122               	/* prologue: function */
 123               	/* frame size = 2 */
 124               	/* stack size = 4 */
 125               	.L__stack_usage = 4
 126 004a 8A83      		std Y+2,r24
 531:../../../platform/common/services/clock/mega/sysclk.h **** 	(void) psdiv;
 532:../../../platform/common/services/clock/mega/sysclk.h **** #if !MEGA_UNSPECIFIED
 533:../../../platform/common/services/clock/mega/sysclk.h **** 	irqflags_t flags = cpu_irq_save();
 127               		.loc 2 533 0
 128 004c 0E94 0000 		call cpu_irq_save
 129 0050 8983      		std Y+1,r24
 534:../../../platform/common/services/clock/mega/sysclk.h **** 
 535:../../../platform/common/services/clock/mega/sysclk.h **** 	ASM(
 130               		.loc 2 535 0
 131               	/* #APP */
 132               	 ;  535 "../../../platform/common/services/clock/mega/sysclk.h" 1
 133 0052 5F93      		push r21                    
 134 0054 50E8      		ldi  r21, 0x80              
 135 0056 5093 6100 		sts  0x0061, r21            
 136 005a 50E0      		ldi  r21, 0x00              
 137 005c 5093 6100 		sts  0x0061, r21            
 138 0060 5F91      		pop r21                     
 139               		
 140               	 ;  0 "" 2
 536:../../../platform/common/services/clock/mega/sysclk.h **** 			"push r21                    \n\t"
 537:../../../platform/common/services/clock/mega/sysclk.h **** 
 538:../../../platform/common/services/clock/mega/sysclk.h **** 			"ldi  r21, 0x80              \n\t" /* CLKPR = 1 <<
 539:../../../platform/common/services/clock/mega/sysclk.h **** 	                                                    * CLKPCE   */
 540:../../../platform/common/services/clock/mega/sysclk.h **** 			"sts  0x0061, r21            \n\t"
 541:../../../platform/common/services/clock/mega/sysclk.h **** 
 542:../../../platform/common/services/clock/mega/sysclk.h **** #if (CONFIG_SYSCLK_PSDIV == SYSCLK_PSDIV_1)
 543:../../../platform/common/services/clock/mega/sysclk.h **** 			"ldi  r21, 0x00              \n\t" /* divider = 0; //
 544:../../../platform/common/services/clock/mega/sysclk.h **** 	                                                    * RC-Oscillator/2 */
 545:../../../platform/common/services/clock/mega/sysclk.h **** #endif
 546:../../../platform/common/services/clock/mega/sysclk.h **** #if (CONFIG_SYSCLK_PSDIV == SYSCLK_PSDIV_2)
 547:../../../platform/common/services/clock/mega/sysclk.h **** 			"ldi  r21, 0x01              \n\t" /* divider = 2; //
 548:../../../platform/common/services/clock/mega/sysclk.h **** 	                                                    * RC-Oscillator/4 */
 549:../../../platform/common/services/clock/mega/sysclk.h **** #endif
 550:../../../platform/common/services/clock/mega/sysclk.h **** #if (CONFIG_SYSCLK_PSDIV == SYSCLK_PSDIV_4)
 551:../../../platform/common/services/clock/mega/sysclk.h **** 			"ldi  r21, 0x02              \n\t" /* divider = 4; //
 552:../../../platform/common/services/clock/mega/sysclk.h **** 	                                                    * RC-Oscillator/8 */
 553:../../../platform/common/services/clock/mega/sysclk.h **** #endif
 554:../../../platform/common/services/clock/mega/sysclk.h **** #if (CONFIG_SYSCLK_PSDIV == SYSCLK_PSDIV_8)
 555:../../../platform/common/services/clock/mega/sysclk.h **** 			"ldi  r21, 0x03              \n\t" /* divider = 8; //
 556:../../../platform/common/services/clock/mega/sysclk.h **** 	                                                    * RC-Oscillator/16
 557:../../../platform/common/services/clock/mega/sysclk.h **** 	                                                    **/
 558:../../../platform/common/services/clock/mega/sysclk.h **** #endif
 559:../../../platform/common/services/clock/mega/sysclk.h **** #if (CONFIG_SYSCLK_PSDIV == SYSCLK_PSDIV_16)
 560:../../../platform/common/services/clock/mega/sysclk.h **** 			"ldi  r21, 0x04              \n\t" /* divider = 16; //
 561:../../../platform/common/services/clock/mega/sysclk.h **** 	                                                   * RC-Oscillator/32*/
 562:../../../platform/common/services/clock/mega/sysclk.h **** #endif
 563:../../../platform/common/services/clock/mega/sysclk.h **** #if (CONFIG_SYSCLK_PSDIV == SYSCLK_PSDIV_32)
 564:../../../platform/common/services/clock/mega/sysclk.h **** 			"ldi  r21, 0x05              \n\t" /* divider = 32; //
 565:../../../platform/common/services/clock/mega/sysclk.h **** 	                                                   * RC-Oscillator/64*/
 566:../../../platform/common/services/clock/mega/sysclk.h **** #endif
 567:../../../platform/common/services/clock/mega/sysclk.h **** #if (CONFIG_SYSCLK_PSDIV == SYSCLK_PSDIV_64)
 568:../../../platform/common/services/clock/mega/sysclk.h **** 			"ldi  r21, 0x06              \n\t" /* divider = 64;//
 569:../../../platform/common/services/clock/mega/sysclk.h **** 	                                                    *
 570:../../../platform/common/services/clock/mega/sysclk.h **** 	                                                    *RC-Oscillator/128*/
 571:../../../platform/common/services/clock/mega/sysclk.h **** #endif
 572:../../../platform/common/services/clock/mega/sysclk.h **** #if (CONFIG_SYSCLK_PSDIV == SYSCLK_PSDIV_128)
 573:../../../platform/common/services/clock/mega/sysclk.h **** 			"ldi  r21, 0x07              \n\t" /* divider =
 574:../../../platform/common/services/clock/mega/sysclk.h **** 	                                                    *
 575:../../../platform/common/services/clock/mega/sysclk.h **** 	                                                    *128;//RC-Oscillator/256*/
 576:../../../platform/common/services/clock/mega/sysclk.h **** #endif
 577:../../../platform/common/services/clock/mega/sysclk.h **** #if (CONFIG_SYSCLK_PSDIV == SYSCLK_PSDIV_256)
 578:../../../platform/common/services/clock/mega/sysclk.h **** 			"ldi  r21, 0x08             \n\t" /* divider =
 579:../../../platform/common/services/clock/mega/sysclk.h **** 	                                                   *
 580:../../../platform/common/services/clock/mega/sysclk.h **** 	                                                   *256;//RC-Oscillator/512*/
 581:../../../platform/common/services/clock/mega/sysclk.h **** #endif
 582:../../../platform/common/services/clock/mega/sysclk.h **** 			"sts  0x0061, r21            \n\t" /* CLKPR = divider
 583:../../../platform/common/services/clock/mega/sysclk.h **** 	                                                    *      */
 584:../../../platform/common/services/clock/mega/sysclk.h **** 
 585:../../../platform/common/services/clock/mega/sysclk.h **** 			"pop r21                     \n\t"
 586:../../../platform/common/services/clock/mega/sysclk.h **** 			);
 587:../../../platform/common/services/clock/mega/sysclk.h **** 
 588:../../../platform/common/services/clock/mega/sysclk.h **** 	cpu_irq_restore(flags);
 141               		.loc 2 588 0
 142               	/* #NOAPP */
 143 0062 8981      		ldd r24,Y+1
 144 0064 0E94 0000 		call cpu_irq_restore
 589:../../../platform/common/services/clock/mega/sysclk.h **** #endif
 590:../../../platform/common/services/clock/mega/sysclk.h **** }
 145               		.loc 2 590 0
 146 0068 0000      		nop
 147               	/* epilogue start */
 148 006a 0F90      		pop __tmp_reg__
 149 006c 0F90      		pop __tmp_reg__
 150 006e DF91      		pop r29
 151 0070 CF91      		pop r28
 152 0072 0895      		ret
 153               		.cfi_endproc
 154               	.LFE71:
 156               	.global	sysclk_init
 158               	sysclk_init:
 159               	.LFB74:
 160               		.file 3 "../../../platform/common/services/clock/mega_rf/sysclk.c"
   1:../../../platform/common/services/clock/mega_rf/sysclk.c **** /**
   2:../../../platform/common/services/clock/mega_rf/sysclk.c ****  * \file
   3:../../../platform/common/services/clock/mega_rf/sysclk.c ****  *
   4:../../../platform/common/services/clock/mega_rf/sysclk.c ****  * \brief Chip-specific system clock management functions
   5:../../../platform/common/services/clock/mega_rf/sysclk.c ****  *
   6:../../../platform/common/services/clock/mega_rf/sysclk.c ****  * Copyright (c) 2012 Atmel Corporation. All rights reserved.
   7:../../../platform/common/services/clock/mega_rf/sysclk.c ****  *
   8:../../../platform/common/services/clock/mega_rf/sysclk.c ****  * \asf_license_start
   9:../../../platform/common/services/clock/mega_rf/sysclk.c ****  *
  10:../../../platform/common/services/clock/mega_rf/sysclk.c ****  * \page License
  11:../../../platform/common/services/clock/mega_rf/sysclk.c ****  *
  12:../../../platform/common/services/clock/mega_rf/sysclk.c ****  * Redistribution and use in source and binary forms, with or without
  13:../../../platform/common/services/clock/mega_rf/sysclk.c ****  * modification, are permitted provided that the following conditions are met:
  14:../../../platform/common/services/clock/mega_rf/sysclk.c ****  *
  15:../../../platform/common/services/clock/mega_rf/sysclk.c ****  * 1. Redistributions of source code must retain the above copyright notice,
  16:../../../platform/common/services/clock/mega_rf/sysclk.c ****  *    this list of conditions and the following disclaimer.
  17:../../../platform/common/services/clock/mega_rf/sysclk.c ****  *
  18:../../../platform/common/services/clock/mega_rf/sysclk.c ****  * 2. Redistributions in binary form must reproduce the above copyright notice,
  19:../../../platform/common/services/clock/mega_rf/sysclk.c ****  *    this list of conditions and the following disclaimer in the documentation
  20:../../../platform/common/services/clock/mega_rf/sysclk.c ****  *    and/or other materials provided with the distribution.
  21:../../../platform/common/services/clock/mega_rf/sysclk.c ****  *
  22:../../../platform/common/services/clock/mega_rf/sysclk.c ****  * 3. The name of Atmel may not be used to endorse or promote products derived
  23:../../../platform/common/services/clock/mega_rf/sysclk.c ****  *    from this software without specific prior written permission.
  24:../../../platform/common/services/clock/mega_rf/sysclk.c ****  *
  25:../../../platform/common/services/clock/mega_rf/sysclk.c ****  * 4. This software may only be redistributed and used in connection with an
  26:../../../platform/common/services/clock/mega_rf/sysclk.c ****  *    Atmel microcontroller product.
  27:../../../platform/common/services/clock/mega_rf/sysclk.c ****  *
  28:../../../platform/common/services/clock/mega_rf/sysclk.c ****  * THIS SOFTWARE IS PROVIDED BY ATMEL "AS IS" AND ANY EXPRESS OR IMPLIED
  29:../../../platform/common/services/clock/mega_rf/sysclk.c ****  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
  30:../../../platform/common/services/clock/mega_rf/sysclk.c ****  * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE
  31:../../../platform/common/services/clock/mega_rf/sysclk.c ****  * EXPRESSLY AND SPECIFICALLY DISCLAIMED. IN NO EVENT SHALL ATMEL BE LIABLE FOR
  32:../../../platform/common/services/clock/mega_rf/sysclk.c ****  * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  33:../../../platform/common/services/clock/mega_rf/sysclk.c ****  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
  34:../../../platform/common/services/clock/mega_rf/sysclk.c ****  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
  35:../../../platform/common/services/clock/mega_rf/sysclk.c ****  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
  36:../../../platform/common/services/clock/mega_rf/sysclk.c ****  * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
  37:../../../platform/common/services/clock/mega_rf/sysclk.c ****  * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  38:../../../platform/common/services/clock/mega_rf/sysclk.c ****  * POSSIBILITY OF SUCH DAMAGE.
  39:../../../platform/common/services/clock/mega_rf/sysclk.c ****  *
  40:../../../platform/common/services/clock/mega_rf/sysclk.c ****  * \asf_license_stop
  41:../../../platform/common/services/clock/mega_rf/sysclk.c ****  *
  42:../../../platform/common/services/clock/mega_rf/sysclk.c ****  */
  43:../../../platform/common/services/clock/mega_rf/sysclk.c **** 
  44:../../../platform/common/services/clock/mega_rf/sysclk.c **** #include <compiler.h>
  45:../../../platform/common/services/clock/mega_rf/sysclk.c **** #include <sysclk.h>
  46:../../../platform/common/services/clock/mega_rf/sysclk.c **** 
  47:../../../platform/common/services/clock/mega_rf/sysclk.c **** /* ! \name System Clock Initialization */
  48:../../../platform/common/services/clock/mega_rf/sysclk.c **** /* @{ */
  49:../../../platform/common/services/clock/mega_rf/sysclk.c **** 
  50:../../../platform/common/services/clock/mega_rf/sysclk.c **** /**
  51:../../../platform/common/services/clock/mega_rf/sysclk.c ****  *  Function to initialize the clock and disable clock for not required modules.
  52:../../../platform/common/services/clock/mega_rf/sysclk.c ****  */
  53:../../../platform/common/services/clock/mega_rf/sysclk.c **** void sysclk_init(void)
  54:../../../platform/common/services/clock/mega_rf/sysclk.c **** {
 161               		.loc 3 54 0
 162               		.cfi_startproc
 163 0074 CF93      		push r28
 164               	.LCFI12:
 165               		.cfi_def_cfa_offset 3
 166               		.cfi_offset 28, -2
 167 0076 DF93      		push r29
 168               	.LCFI13:
 169               		.cfi_def_cfa_offset 4
 170               		.cfi_offset 29, -3
 171 0078 00D0      		rcall .
 172 007a 1F92      		push __zero_reg__
 173               	.LCFI14:
 174               		.cfi_def_cfa_offset 7
 175 007c CDB7      		in r28,__SP_L__
 176 007e DEB7      		in r29,__SP_H__
 177               	.LCFI15:
 178               		.cfi_def_cfa_register 28
 179               	/* prologue: function */
 180               	/* frame size = 3 */
 181               	/* stack size = 5 */
 182               	.L__stack_usage = 5
  55:../../../platform/common/services/clock/mega_rf/sysclk.c **** #if !MEGA_XX_UN0 && !MEGA_XX_UN1
  56:../../../platform/common/services/clock/mega_rf/sysclk.c **** 	uint8_t *reg = (uint8_t *)&(POWER_REG_ADD);
 183               		.loc 3 56 0
 184 0080 84E6      		ldi r24,lo8(100)
 185 0082 90E0      		ldi r25,0
 186 0084 9A83      		std Y+2,r25
 187 0086 8983      		std Y+1,r24
  57:../../../platform/common/services/clock/mega_rf/sysclk.c **** 	uint8_t i;
  58:../../../platform/common/services/clock/mega_rf/sysclk.c **** 	/* Turn off all peripheral clocks that can be turned off. */
  59:../../../platform/common/services/clock/mega_rf/sysclk.c **** 	for (i = 0; i < NUMBER_OF_POWER_REG; i++) {
 188               		.loc 3 59 0
 189 0088 1B82      		std Y+3,__zero_reg__
 190 008a 00C0      		rjmp .L6
 191               	.L7:
  60:../../../platform/common/services/clock/mega_rf/sysclk.c **** 		*(reg++) = 0xFF;
 192               		.loc 3 60 0 discriminator 3
 193 008c 8981      		ldd r24,Y+1
 194 008e 9A81      		ldd r25,Y+2
 195 0090 9C01      		movw r18,r24
 196 0092 2F5F      		subi r18,-1
 197 0094 3F4F      		sbci r19,-1
 198 0096 3A83      		std Y+2,r19
 199 0098 2983      		std Y+1,r18
 200 009a 2FEF      		ldi r18,lo8(-1)
 201 009c FC01      		movw r30,r24
 202 009e 2083      		st Z,r18
  59:../../../platform/common/services/clock/mega_rf/sysclk.c **** 		*(reg++) = 0xFF;
 203               		.loc 3 59 0 discriminator 3
 204 00a0 8B81      		ldd r24,Y+3
 205 00a2 8F5F      		subi r24,lo8(-(1))
 206 00a4 8B83      		std Y+3,r24
 207               	.L6:
  59:../../../platform/common/services/clock/mega_rf/sysclk.c **** 		*(reg++) = 0xFF;
 208               		.loc 3 59 0 is_stmt 0 discriminator 1
 209 00a6 8B81      		ldd r24,Y+3
 210 00a8 8230      		cpi r24,lo8(2)
 211 00aa 00F0      		brlo .L7
  61:../../../platform/common/services/clock/mega_rf/sysclk.c **** 	}
  62:../../../platform/common/services/clock/mega_rf/sysclk.c **** #endif
  63:../../../platform/common/services/clock/mega_rf/sysclk.c **** #if !MEGA_UNSPECIFIED && !MEGA_XX
  64:../../../platform/common/services/clock/mega_rf/sysclk.c **** 	/* Set up system clock prescalers if different from defaults */
  65:../../../platform/common/services/clock/mega_rf/sysclk.c **** 	if ((CONFIG_SYSCLK_PSDIV != SYSCLK_PSDIV_8) ||
  66:../../../platform/common/services/clock/mega_rf/sysclk.c **** 			(SYSCLK_PSDIV_8 != CLKPR)) {
  67:../../../platform/common/services/clock/mega_rf/sysclk.c **** 		sysclk_set_prescalers(CONFIG_SYSCLK_PSDIV);
 212               		.loc 3 67 0 is_stmt 1
 213 00ac 80E0      		ldi r24,0
 214 00ae 0E94 0000 		call sysclk_set_prescalers
  68:../../../platform/common/services/clock/mega_rf/sysclk.c **** 	}
  69:../../../platform/common/services/clock/mega_rf/sysclk.c **** #endif
  70:../../../platform/common/services/clock/mega_rf/sysclk.c **** }
 215               		.loc 3 70 0
 216 00b2 0000      		nop
 217               	/* epilogue start */
 218 00b4 0F90      		pop __tmp_reg__
 219 00b6 0F90      		pop __tmp_reg__
 220 00b8 0F90      		pop __tmp_reg__
 221 00ba DF91      		pop r29
 222 00bc CF91      		pop r28
 223 00be 0895      		ret
 224               		.cfi_endproc
 225               	.LFE74:
 227               	.global	sysclk_enable_module
 229               	sysclk_enable_module:
 230               	.LFB75:
  71:../../../platform/common/services/clock/mega_rf/sysclk.c **** 
  72:../../../platform/common/services/clock/mega_rf/sysclk.c **** /* @} */
  73:../../../platform/common/services/clock/mega_rf/sysclk.c **** 
  74:../../../platform/common/services/clock/mega_rf/sysclk.c **** /* ! \name System enable and disable module */
  75:../../../platform/common/services/clock/mega_rf/sysclk.c **** /* @{ */
  76:../../../platform/common/services/clock/mega_rf/sysclk.c **** 
  77:../../../platform/common/services/clock/mega_rf/sysclk.c **** /**
  78:../../../platform/common/services/clock/mega_rf/sysclk.c ****  * \brief Enable the clock to peripheral \a id on port \a port
  79:../../../platform/common/services/clock/mega_rf/sysclk.c ****  *
  80:../../../platform/common/services/clock/mega_rf/sysclk.c ****  * \param port ID of the port to which the module is connected (one of
  81:../../../platform/common/services/clock/mega_rf/sysclk.c ****  * the \c power_red_id *definitions).
  82:../../../platform/common/services/clock/mega_rf/sysclk.c ****  * \param id The ID (bitmask) of the peripheral module to be enabled.
  83:../../../platform/common/services/clock/mega_rf/sysclk.c ****  */
  84:../../../platform/common/services/clock/mega_rf/sysclk.c **** void sysclk_enable_module(enum power_red_id port, uint8_t id)
  85:../../../platform/common/services/clock/mega_rf/sysclk.c **** {
 231               		.loc 3 85 0
 232               		.cfi_startproc
 233 00c0 CF93      		push r28
 234               	.LCFI16:
 235               		.cfi_def_cfa_offset 3
 236               		.cfi_offset 28, -2
 237 00c2 DF93      		push r29
 238               	.LCFI17:
 239               		.cfi_def_cfa_offset 4
 240               		.cfi_offset 29, -3
 241 00c4 00D0      		rcall .
 242 00c6 00D0      		rcall .
 243 00c8 1F92      		push __zero_reg__
 244               	.LCFI18:
 245               		.cfi_def_cfa_offset 9
 246 00ca CDB7      		in r28,__SP_L__
 247 00cc DEB7      		in r29,__SP_H__
 248               	.LCFI19:
 249               		.cfi_def_cfa_register 28
 250               	/* prologue: function */
 251               	/* frame size = 5 */
 252               	/* stack size = 7 */
 253               	.L__stack_usage = 7
 254 00ce 8C83      		std Y+4,r24
 255 00d0 6D83      		std Y+5,r22
  86:../../../platform/common/services/clock/mega_rf/sysclk.c **** #if !MEGA_UNSPECIFIED && !MEGA_XX
  87:../../../platform/common/services/clock/mega_rf/sysclk.c **** 	uint8_t *reg = (uint8_t *)&(POWER_REG_ADD);
 256               		.loc 3 87 0
 257 00d2 84E6      		ldi r24,lo8(100)
 258 00d4 90E0      		ldi r25,0
 259 00d6 9A83      		std Y+2,r25
 260 00d8 8983      		std Y+1,r24
  88:../../../platform/common/services/clock/mega_rf/sysclk.c **** 	irqflags_t flags = cpu_irq_save();
 261               		.loc 3 88 0
 262 00da 0E94 0000 		call cpu_irq_save
 263 00de 8B83      		std Y+3,r24
  89:../../../platform/common/services/clock/mega_rf/sysclk.c **** 
  90:../../../platform/common/services/clock/mega_rf/sysclk.c **** 	if (port < NUMBER_OF_POWER_REG) {
 264               		.loc 3 90 0
 265 00e0 8C81      		ldd r24,Y+4
 266 00e2 8230      		cpi r24,lo8(2)
 267 00e4 00F4      		brsh .L9
  91:../../../platform/common/services/clock/mega_rf/sysclk.c **** 		*(reg + port)  &= ~id;
 268               		.loc 3 91 0
 269 00e6 8C81      		ldd r24,Y+4
 270 00e8 882F      		mov r24,r24
 271 00ea 90E0      		ldi r25,0
 272 00ec 2981      		ldd r18,Y+1
 273 00ee 3A81      		ldd r19,Y+2
 274 00f0 820F      		add r24,r18
 275 00f2 931F      		adc r25,r19
 276 00f4 2C81      		ldd r18,Y+4
 277 00f6 222F      		mov r18,r18
 278 00f8 30E0      		ldi r19,0
 279 00fa 4981      		ldd r20,Y+1
 280 00fc 5A81      		ldd r21,Y+2
 281 00fe 240F      		add r18,r20
 282 0100 351F      		adc r19,r21
 283 0102 F901      		movw r30,r18
 284 0104 2081      		ld r18,Z
 285 0106 322F      		mov r19,r18
 286 0108 2D81      		ldd r18,Y+5
 287 010a 2095      		com r18
 288 010c 2323      		and r18,r19
 289 010e FC01      		movw r30,r24
 290 0110 2083      		st Z,r18
 291               	.L9:
  92:../../../platform/common/services/clock/mega_rf/sysclk.c **** 	}
  93:../../../platform/common/services/clock/mega_rf/sysclk.c **** 	cpu_irq_restore(flags);
 292               		.loc 3 93 0
 293 0112 8B81      		ldd r24,Y+3
 294 0114 0E94 0000 		call cpu_irq_restore
  94:../../../platform/common/services/clock/mega_rf/sysclk.c **** #endif
  95:../../../platform/common/services/clock/mega_rf/sysclk.c **** }
 295               		.loc 3 95 0
 296 0118 0000      		nop
 297               	/* epilogue start */
 298 011a 0F90      		pop __tmp_reg__
 299 011c 0F90      		pop __tmp_reg__
 300 011e 0F90      		pop __tmp_reg__
 301 0120 0F90      		pop __tmp_reg__
 302 0122 0F90      		pop __tmp_reg__
 303 0124 DF91      		pop r29
 304 0126 CF91      		pop r28
 305 0128 0895      		ret
 306               		.cfi_endproc
 307               	.LFE75:
 309               	.global	sysclk_disable_module
 311               	sysclk_disable_module:
 312               	.LFB76:
  96:../../../platform/common/services/clock/mega_rf/sysclk.c **** 
  97:../../../platform/common/services/clock/mega_rf/sysclk.c **** /*
  98:../../../platform/common/services/clock/mega_rf/sysclk.c ****  * \brief Disable the clock to peripheral \a id on port \a port
  99:../../../platform/common/services/clock/mega_rf/sysclk.c ****  *
 100:../../../platform/common/services/clock/mega_rf/sysclk.c ****  * \param port ID of the port to which the module is connected (one of
 101:../../../platform/common/services/clock/mega_rf/sysclk.c ****  * the \c power_red_id *definitions).
 102:../../../platform/common/services/clock/mega_rf/sysclk.c ****  * \param id The ID (bit mask) of the peripheral module to be disabled.
 103:../../../platform/common/services/clock/mega_rf/sysclk.c ****  */
 104:../../../platform/common/services/clock/mega_rf/sysclk.c **** void sysclk_disable_module( enum power_red_id port, uint8_t id)
 105:../../../platform/common/services/clock/mega_rf/sysclk.c **** {
 313               		.loc 3 105 0
 314               		.cfi_startproc
 315 012a CF93      		push r28
 316               	.LCFI20:
 317               		.cfi_def_cfa_offset 3
 318               		.cfi_offset 28, -2
 319 012c DF93      		push r29
 320               	.LCFI21:
 321               		.cfi_def_cfa_offset 4
 322               		.cfi_offset 29, -3
 323 012e 00D0      		rcall .
 324 0130 00D0      		rcall .
 325 0132 1F92      		push __zero_reg__
 326               	.LCFI22:
 327               		.cfi_def_cfa_offset 9
 328 0134 CDB7      		in r28,__SP_L__
 329 0136 DEB7      		in r29,__SP_H__
 330               	.LCFI23:
 331               		.cfi_def_cfa_register 28
 332               	/* prologue: function */
 333               	/* frame size = 5 */
 334               	/* stack size = 7 */
 335               	.L__stack_usage = 7
 336 0138 8C83      		std Y+4,r24
 337 013a 6D83      		std Y+5,r22
 106:../../../platform/common/services/clock/mega_rf/sysclk.c **** #if !MEGA_UNSPECIFIED && !MEGA_XX
 107:../../../platform/common/services/clock/mega_rf/sysclk.c **** 	uint8_t *reg = (uint8_t *)&(POWER_REG_ADD);
 338               		.loc 3 107 0
 339 013c 84E6      		ldi r24,lo8(100)
 340 013e 90E0      		ldi r25,0
 341 0140 9A83      		std Y+2,r25
 342 0142 8983      		std Y+1,r24
 108:../../../platform/common/services/clock/mega_rf/sysclk.c **** 	irqflags_t flags = cpu_irq_save();
 343               		.loc 3 108 0
 344 0144 0E94 0000 		call cpu_irq_save
 345 0148 8B83      		std Y+3,r24
 109:../../../platform/common/services/clock/mega_rf/sysclk.c **** 	if (port < NUMBER_OF_POWER_REG) {
 346               		.loc 3 109 0
 347 014a 8C81      		ldd r24,Y+4
 348 014c 8230      		cpi r24,lo8(2)
 349 014e 00F4      		brsh .L11
 110:../../../platform/common/services/clock/mega_rf/sysclk.c **** 		*(reg + port) |= id;
 350               		.loc 3 110 0
 351 0150 8C81      		ldd r24,Y+4
 352 0152 882F      		mov r24,r24
 353 0154 90E0      		ldi r25,0
 354 0156 2981      		ldd r18,Y+1
 355 0158 3A81      		ldd r19,Y+2
 356 015a 820F      		add r24,r18
 357 015c 931F      		adc r25,r19
 358 015e 2C81      		ldd r18,Y+4
 359 0160 222F      		mov r18,r18
 360 0162 30E0      		ldi r19,0
 361 0164 4981      		ldd r20,Y+1
 362 0166 5A81      		ldd r21,Y+2
 363 0168 240F      		add r18,r20
 364 016a 351F      		adc r19,r21
 365 016c F901      		movw r30,r18
 366 016e 3081      		ld r19,Z
 367 0170 2D81      		ldd r18,Y+5
 368 0172 232B      		or r18,r19
 369 0174 FC01      		movw r30,r24
 370 0176 2083      		st Z,r18
 371               	.L11:
 111:../../../platform/common/services/clock/mega_rf/sysclk.c **** 	}
 112:../../../platform/common/services/clock/mega_rf/sysclk.c **** 	cpu_irq_restore(flags);
 372               		.loc 3 112 0
 373 0178 8B81      		ldd r24,Y+3
 374 017a 0E94 0000 		call cpu_irq_restore
 113:../../../platform/common/services/clock/mega_rf/sysclk.c **** #endif
 114:../../../platform/common/services/clock/mega_rf/sysclk.c **** }
 375               		.loc 3 114 0
 376 017e 0000      		nop
 377               	/* epilogue start */
 378 0180 0F90      		pop __tmp_reg__
 379 0182 0F90      		pop __tmp_reg__
 380 0184 0F90      		pop __tmp_reg__
 381 0186 0F90      		pop __tmp_reg__
 382 0188 0F90      		pop __tmp_reg__
 383 018a DF91      		pop r29
 384 018c CF91      		pop r28
 385 018e 0895      		ret
 386               		.cfi_endproc
 387               	.LFE76:
 389               	.Letext0:
 390               		.file 4 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\in
DEFINED SYMBOLS
                            *ABS*:00000000 sysclk.c
C:\Users\GUILHE~1\AppData\Local\Temp\ccNklXKj.s:2      *ABS*:0000003e __SP_H__
C:\Users\GUILHE~1\AppData\Local\Temp\ccNklXKj.s:3      *ABS*:0000003d __SP_L__
C:\Users\GUILHE~1\AppData\Local\Temp\ccNklXKj.s:4      *ABS*:0000003f __SREG__
C:\Users\GUILHE~1\AppData\Local\Temp\ccNklXKj.s:5      *ABS*:0000003b __RAMPZ__
C:\Users\GUILHE~1\AppData\Local\Temp\ccNklXKj.s:6      *ABS*:00000000 __tmp_reg__
C:\Users\GUILHE~1\AppData\Local\Temp\ccNklXKj.s:7      *ABS*:00000001 __zero_reg__
C:\Users\GUILHE~1\AppData\Local\Temp\ccNklXKj.s:12     .text:00000000 cpu_irq_save
C:\Users\GUILHE~1\AppData\Local\Temp\ccNklXKj.s:60     .text:00000020 cpu_irq_restore
C:\Users\GUILHE~1\AppData\Local\Temp\ccNklXKj.s:102    .text:00000040 sysclk_set_prescalers
C:\Users\GUILHE~1\AppData\Local\Temp\ccNklXKj.s:158    .text:00000074 sysclk_init
C:\Users\GUILHE~1\AppData\Local\Temp\ccNklXKj.s:229    .text:000000c0 sysclk_enable_module
C:\Users\GUILHE~1\AppData\Local\Temp\ccNklXKj.s:311    .text:0000012a sysclk_disable_module

NO UNDEFINED SYMBOLS
