   1              	 .cpu cortex-m4
   2              	 .eabi_attribute 20,1
   3              	 .eabi_attribute 21,1
   4              	 .eabi_attribute 23,3
   5              	 .eabi_attribute 24,1
   6              	 .eabi_attribute 25,1
   7              	 .eabi_attribute 26,1
   8              	 .eabi_attribute 30,6
   9              	 .eabi_attribute 34,1
  10              	 .eabi_attribute 18,4
  11              	 .file "dfll.c"
  12              	 .text
  13              	.Ltext0:
  14              	 .cfi_sections .debug_frame
  15              	 .section .bss.cpu_irq_critical_section_counter,"aw",%nobits
  16              	 .align 2
  19              	cpu_irq_critical_section_counter:
  20 0000 00000000 	 .space 4
  21              	 .section .bss.cpu_irq_prev_interrupt_state,"aw",%nobits
  24              	cpu_irq_prev_interrupt_state:
  25 0000 00       	 .space 1
  26              	 .text
  27              	 .align 1
  28              	 .syntax unified
  29              	 .thumb
  30              	 .thumb_func
  31              	 .fpu softvfp
  33              	cpu_irq_save:
  34              	.LFB112:
  35              	 .file 1 "../../../platform/common/utils/interrupt/interrupt_sam_nvic.h"
   1:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** /**
   2:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  * \file
   3:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  *
   4:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  * \brief Global interrupt management for SAM D20, SAM3 and SAM4 (NVIC based)
   5:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  *
   6:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  * Copyright (c) 2012-2013 Atmel Corporation. All rights reserved.
   7:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  *
   8:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  * \asf_license_start
   9:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  *
  10:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  * \page License
  11:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  *
  12:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  * Redistribution and use in source and binary forms, with or without
  13:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  * modification, are permitted provided that the following conditions are met:
  14:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  *
  15:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  * 1. Redistributions of source code must retain the above copyright notice,
  16:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  *    this list of conditions and the following disclaimer.
  17:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  *
  18:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  * 2. Redistributions in binary form must reproduce the above copyright notice,
  19:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  *    this list of conditions and the following disclaimer in the documentation
  20:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  *    and/or other materials provided with the distribution.
  21:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  *
  22:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  * 3. The name of Atmel may not be used to endorse or promote products derived
  23:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  *    from this software without specific prior written permission.
  24:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  *
  25:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  * 4. This software may only be redistributed and used in connection with an
  26:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  *    Atmel microcontroller product.
  27:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  *
  28:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  * THIS SOFTWARE IS PROVIDED BY ATMEL "AS IS" AND ANY EXPRESS OR IMPLIED
  29:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
  30:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE
  31:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  * EXPRESSLY AND SPECIFICALLY DISCLAIMED. IN NO EVENT SHALL ATMEL BE LIABLE FOR
  32:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  33:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
  34:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
  35:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
  36:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
  37:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  38:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  * POSSIBILITY OF SUCH DAMAGE.
  39:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  *
  40:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  * \asf_license_stop
  41:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  *
  42:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  */
  43:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** 
  44:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** #ifndef UTILS_INTERRUPT_INTERRUPT_H
  45:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** #define UTILS_INTERRUPT_INTERRUPT_H
  46:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** 
  47:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** #include <compiler.h>
  48:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** #include <parts.h>
  49:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** 
  50:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** /**
  51:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  * \weakgroup interrupt_group
  52:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  *
  53:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  * @{
  54:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  */
  55:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** 
  56:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** /**
  57:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  * \name Interrupt Service Routine definition
  58:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  *
  59:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  * @{
  60:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  */
  61:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** 
  62:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** /**
  63:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  * \brief Define service routine
  64:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  *
  65:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  * \note For NVIC devices the interrupt service routines are predefined to
  66:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  *       add to vector table in binary generation, so there is no service
  67:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  *       register at run time. The routine collections are in exceptions.h.
  68:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  *
  69:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  * Usage:
  70:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  * \code
  71:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  * ISR(foo_irq_handler)
  72:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  * {
  73:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  *      // Function definition
  74:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  *      ...
  75:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  * }
  76:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  * \endcode
  77:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  *
  78:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  * \param func Name for the function.
  79:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  */
  80:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** #  define ISR(func)   \
  81:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** 	void func (void)
  82:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** 
  83:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** /**
  84:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  * \brief Initialize interrupt vectors
  85:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  *
  86:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  * For NVIC the interrupt vectors are put in vector table. So nothing
  87:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  * to do to initialize them, except defined the vector function with
  88:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  * right name.
  89:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  *
  90:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  * This must be called prior to \ref irq_register_handler.
  91:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  */
  92:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** #  define irq_initialize_vectors()   \
  93:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** 	do {                             \
  94:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** 	} while(0)
  95:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** 
  96:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** /**
  97:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  * \brief Register handler for interrupt
  98:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  *
  99:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  * For NVIC the interrupt vectors are put in vector table. So nothing
 100:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  * to do to register them, except defined the vector function with
 101:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  * right name.
 102:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  *
 103:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  * Usage:
 104:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  * \code
 105:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  * irq_initialize_vectors();
 106:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  * irq_register_handler(foo_irq_handler);
 107:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  * \endcode
 108:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  *
 109:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  * \note The function \a func must be defined with the \ref ISR macro.
 110:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  * \note The functions prototypes can be found in the device exception header
 111:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  *       files (exceptions.h).
 112:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  */
 113:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** #  define irq_register_handler(int_num, int_prio)                      \
 114:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** 	NVIC_ClearPendingIRQ(    (IRQn_Type)int_num);                      \
 115:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** 	NVIC_SetPriority(    (IRQn_Type)int_num, int_prio);                \
 116:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** 	NVIC_EnableIRQ(      (IRQn_Type)int_num);                          \
 117:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** 
 118:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** //@}
 119:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** 
 120:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** #  define cpu_irq_enable()                     \
 121:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** 	do {                                       \
 122:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** 		g_interrupt_enabled = true;            \
 123:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** 		__DMB();                               \
 124:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** 		__enable_irq();                        \
 125:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** 	} while (0)
 126:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** #  define cpu_irq_disable()                    \
 127:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** 	do {                                       \
 128:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** 		__disable_irq();                       \
 129:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** 		__DMB();                               \
 130:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** 		g_interrupt_enabled = false;           \
 131:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** 	} while (0)
 132:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** 
 133:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** typedef uint32_t irqflags_t;
 134:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** 
 135:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** #if !defined(__DOXYGEN__)
 136:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** extern volatile bool g_interrupt_enabled;
 137:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** #endif
 138:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** 
 139:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** #define cpu_irq_is_enabled()    (__get_PRIMASK() == 0)
 140:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** 
 141:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** static volatile uint32_t cpu_irq_critical_section_counter;
 142:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** static volatile bool     cpu_irq_prev_interrupt_state;
 143:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** 
 144:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** static inline irqflags_t cpu_irq_save(void)
 145:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** {
  36              	 .loc 1 145 0
  37              	 .cfi_startproc
  38              	 
  39              	 
  40              	 
  41 0000 80B4     	 push {r7}
  42              	.LCFI0:
  43              	 .cfi_def_cfa_offset 4
  44              	 .cfi_offset 7,-4
  45 0002 83B0     	 sub sp,sp,#12
  46              	.LCFI1:
  47              	 .cfi_def_cfa_offset 16
  48 0004 00AF     	 add r7,sp,#0
  49              	.LCFI2:
  50              	 .cfi_def_cfa_register 7
  51              	.LBB12:
  52              	.LBB13:
  53              	 .file 2 "../../../platform/thirdparty/CMSIS/include/core_cmFunc.h"
   1:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** /**************************************************************************//**
   2:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  * @file     core_cmFunc.h
   3:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  * @brief    CMSIS Cortex-M Core Function Access Header File
   4:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  * @version  V3.00
   5:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  * @date     19. January 2012
   6:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  *
   7:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  * @note
   8:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  * Copyright (C) 2009-2012 ARM Limited. All rights reserved.
   9:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  *
  10:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  * @par
  11:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  * ARM Limited (ARM) is supplying this software for use with Cortex-M 
  12:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  * processor based microcontrollers.  This file can be freely distributed 
  13:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  * within development tools that are supporting such ARM based processors. 
  14:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  *
  15:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  * @par
  16:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
  17:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
  18:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
  19:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  * ARM SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR
  20:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
  21:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  *
  22:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  ******************************************************************************/
  23:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
  24:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** #ifndef __CORE_CMFUNC_H
  25:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** #define __CORE_CMFUNC_H
  26:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
  27:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** /* ###########################  Core Function Access  ########################### */
  28:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** /** \ingroup  CMSIS_Core_FunctionInterface   
  29:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
  30:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   @{
  31:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  */
  32:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
  33:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** #if   defined ( __CC_ARM ) /*------------------RealView Compiler -----------------*/
  34:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** /* ARM armcc specific functions */
  35:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
  36:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** #if (__ARMCC_VERSION < 400677)
  37:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   #error "Please use ARM Compiler Toolchain V4.0.677 or later!"
  38:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** #endif
  39:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
  40:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** /* intrinsic void __enable_irq();     */
  41:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** /* intrinsic void __disable_irq();    */
  42:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
  43:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** /** \brief  Get Control Register
  44:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
  45:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     This function returns the content of the Control Register.
  46:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
  47:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     \return               Control Register value
  48:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  */
  49:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** __STATIC_INLINE uint32_t __get_CONTROL(void)
  50:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** {
  51:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   register uint32_t __regControl         __ASM("control");
  52:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   return(__regControl);
  53:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** }
  54:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
  55:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
  56:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** /** \brief  Set Control Register
  57:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
  58:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     This function writes the given value to the Control Register.
  59:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
  60:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     \param [in]    control  Control Register value to set
  61:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  */
  62:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** __STATIC_INLINE void __set_CONTROL(uint32_t control)
  63:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** {
  64:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   register uint32_t __regControl         __ASM("control");
  65:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   __regControl = control;
  66:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** }
  67:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
  68:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
  69:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** /** \brief  Get IPSR Register
  70:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
  71:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     This function returns the content of the IPSR Register.
  72:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
  73:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     \return               IPSR Register value
  74:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  */
  75:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** __STATIC_INLINE uint32_t __get_IPSR(void)
  76:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** {
  77:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   register uint32_t __regIPSR          __ASM("ipsr");
  78:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   return(__regIPSR);
  79:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** }
  80:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
  81:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
  82:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** /** \brief  Get APSR Register
  83:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
  84:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     This function returns the content of the APSR Register.
  85:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
  86:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     \return               APSR Register value
  87:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  */
  88:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** __STATIC_INLINE uint32_t __get_APSR(void)
  89:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** {
  90:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   register uint32_t __regAPSR          __ASM("apsr");
  91:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   return(__regAPSR);
  92:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** }
  93:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
  94:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
  95:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** /** \brief  Get xPSR Register
  96:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
  97:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     This function returns the content of the xPSR Register.
  98:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
  99:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     \return               xPSR Register value
 100:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  */
 101:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** __STATIC_INLINE uint32_t __get_xPSR(void)
 102:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** {
 103:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   register uint32_t __regXPSR          __ASM("xpsr");
 104:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   return(__regXPSR);
 105:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** }
 106:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 107:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 108:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** /** \brief  Get Process Stack Pointer
 109:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 110:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     This function returns the current value of the Process Stack Pointer (PSP).
 111:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 112:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     \return               PSP Register value
 113:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  */
 114:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** __STATIC_INLINE uint32_t __get_PSP(void)
 115:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** {
 116:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   register uint32_t __regProcessStackPointer  __ASM("psp");
 117:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   return(__regProcessStackPointer);
 118:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** }
 119:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 120:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 121:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** /** \brief  Set Process Stack Pointer
 122:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 123:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     This function assigns the given value to the Process Stack Pointer (PSP).
 124:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 125:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     \param [in]    topOfProcStack  Process Stack Pointer value to set
 126:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  */
 127:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
 128:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** {
 129:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   register uint32_t __regProcessStackPointer  __ASM("psp");
 130:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   __regProcessStackPointer = topOfProcStack;
 131:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** }
 132:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 133:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 134:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** /** \brief  Get Main Stack Pointer
 135:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 136:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     This function returns the current value of the Main Stack Pointer (MSP).
 137:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 138:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     \return               MSP Register value
 139:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  */
 140:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** __STATIC_INLINE uint32_t __get_MSP(void)
 141:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** {
 142:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   register uint32_t __regMainStackPointer     __ASM("msp");
 143:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   return(__regMainStackPointer);
 144:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** }
 145:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 146:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 147:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** /** \brief  Set Main Stack Pointer
 148:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 149:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     This function assigns the given value to the Main Stack Pointer (MSP).
 150:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 151:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     \param [in]    topOfMainStack  Main Stack Pointer value to set
 152:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  */
 153:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
 154:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** {
 155:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   register uint32_t __regMainStackPointer     __ASM("msp");
 156:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   __regMainStackPointer = topOfMainStack;
 157:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** }
 158:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 159:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 160:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** /** \brief  Get Priority Mask
 161:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 162:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     This function returns the current state of the priority mask bit from the Priority Mask Registe
 163:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 164:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     \return               Priority Mask value
 165:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  */
 166:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** __STATIC_INLINE uint32_t __get_PRIMASK(void)
 167:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** {
 168:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   register uint32_t __regPriMask         __ASM("primask");
 169:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   return(__regPriMask);
 170:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** }
 171:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 172:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 173:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** /** \brief  Set Priority Mask
 174:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 175:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     This function assigns the given value to the Priority Mask Register.
 176:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 177:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     \param [in]    priMask  Priority Mask
 178:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  */
 179:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
 180:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** {
 181:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   register uint32_t __regPriMask         __ASM("primask");
 182:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   __regPriMask = (priMask);
 183:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** }
 184:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  
 185:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 186:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** #if       (__CORTEX_M >= 0x03)
 187:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 188:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** /** \brief  Enable FIQ
 189:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 190:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     This function enables FIQ interrupts by clearing the F-bit in the CPSR.
 191:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     Can only be executed in Privileged modes.
 192:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  */
 193:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** #define __enable_fault_irq                __enable_fiq
 194:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 195:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 196:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** /** \brief  Disable FIQ
 197:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 198:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     This function disables FIQ interrupts by setting the F-bit in the CPSR.
 199:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     Can only be executed in Privileged modes.
 200:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  */
 201:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** #define __disable_fault_irq               __disable_fiq
 202:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 203:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 204:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** /** \brief  Get Base Priority
 205:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 206:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     This function returns the current value of the Base Priority register.
 207:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 208:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     \return               Base Priority register value
 209:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  */
 210:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** __STATIC_INLINE uint32_t  __get_BASEPRI(void)
 211:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** {
 212:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   register uint32_t __regBasePri         __ASM("basepri");
 213:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   return(__regBasePri);
 214:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** }
 215:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 216:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 217:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** /** \brief  Set Base Priority
 218:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 219:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     This function assigns the given value to the Base Priority register.
 220:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 221:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     \param [in]    basePri  Base Priority value to set
 222:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  */
 223:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** __STATIC_INLINE void __set_BASEPRI(uint32_t basePri)
 224:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** {
 225:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   register uint32_t __regBasePri         __ASM("basepri");
 226:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   __regBasePri = (basePri & 0xff);
 227:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** }
 228:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  
 229:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 230:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** /** \brief  Get Fault Mask
 231:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 232:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     This function returns the current value of the Fault Mask register.
 233:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 234:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     \return               Fault Mask register value
 235:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  */
 236:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** __STATIC_INLINE uint32_t __get_FAULTMASK(void)
 237:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** {
 238:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   register uint32_t __regFaultMask       __ASM("faultmask");
 239:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   return(__regFaultMask);
 240:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** }
 241:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 242:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 243:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** /** \brief  Set Fault Mask
 244:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 245:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     This function assigns the given value to the Fault Mask register.
 246:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 247:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     \param [in]    faultMask  Fault Mask value to set
 248:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  */
 249:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** __STATIC_INLINE void __set_FAULTMASK(uint32_t faultMask)
 250:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** {
 251:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   register uint32_t __regFaultMask       __ASM("faultmask");
 252:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   __regFaultMask = (faultMask & (uint32_t)1);
 253:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** }
 254:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 255:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** #endif /* (__CORTEX_M >= 0x03) */
 256:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 257:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 258:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** #if       (__CORTEX_M == 0x04)
 259:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 260:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** /** \brief  Get FPSCR
 261:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 262:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     This function returns the current value of the Floating Point Status/Control register.
 263:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 264:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     \return               Floating Point Status/Control register value
 265:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  */
 266:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** __STATIC_INLINE uint32_t __get_FPSCR(void)
 267:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** {
 268:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
 269:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   register uint32_t __regfpscr         __ASM("fpscr");
 270:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   return(__regfpscr);
 271:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** #else
 272:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****    return(0);
 273:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** #endif
 274:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** }
 275:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 276:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 277:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** /** \brief  Set FPSCR
 278:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 279:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     This function assigns the given value to the Floating Point Status/Control register.
 280:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 281:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     \param [in]    fpscr  Floating Point Status/Control value to set
 282:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  */
 283:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** __STATIC_INLINE void __set_FPSCR(uint32_t fpscr)
 284:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** {
 285:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
 286:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   register uint32_t __regfpscr         __ASM("fpscr");
 287:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   __regfpscr = (fpscr);
 288:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** #endif
 289:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** }
 290:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 291:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** #endif /* (__CORTEX_M == 0x04) */
 292:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 293:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 294:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** #elif defined ( __ICCARM__ ) /*------------------ ICC Compiler -------------------*/
 295:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** /* IAR iccarm specific functions */
 296:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 297:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** #include <cmsis_iar.h>
 298:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 299:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 300:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** #elif defined ( __TMS470__ ) /*---------------- TI CCS Compiler ------------------*/
 301:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** /* TI CCS specific functions */
 302:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 303:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** #include <cmsis_ccs.h>
 304:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 305:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 306:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** #elif defined ( __GNUC__ ) /*------------------ GNU Compiler ---------------------*/
 307:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** /* GNU gcc specific functions */
 308:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 309:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** /** \brief  Enable IRQ Interrupts
 310:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 311:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   This function enables IRQ interrupts by clearing the I-bit in the CPSR.
 312:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   Can only be executed in Privileged modes.
 313:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  */
 314:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
 315:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** {
 316:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   __ASM volatile ("cpsie i");
 317:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** }
 318:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 319:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 320:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** /** \brief  Disable IRQ Interrupts
 321:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 322:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   This function disables IRQ interrupts by setting the I-bit in the CPSR.
 323:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   Can only be executed in Privileged modes.
 324:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  */
 325:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
 326:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** {
 327:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   __ASM volatile ("cpsid i");
 328:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** }
 329:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 330:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 331:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** /** \brief  Get Control Register
 332:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 333:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     This function returns the content of the Control Register.
 334:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 335:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     \return               Control Register value
 336:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  */
 337:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_CONTROL(void)
 338:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** {
 339:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   uint32_t result;
 340:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 341:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
 342:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   return(result);
 343:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** }
 344:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 345:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 346:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** /** \brief  Set Control Register
 347:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 348:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     This function writes the given value to the Control Register.
 349:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 350:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     \param [in]    control  Control Register value to set
 351:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  */
 352:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_CONTROL(uint32_t control)
 353:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** {
 354:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) );
 355:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** }
 356:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 357:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 358:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** /** \brief  Get IPSR Register
 359:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 360:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     This function returns the content of the IPSR Register.
 361:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 362:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     \return               IPSR Register value
 363:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  */
 364:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
 365:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** {
 366:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   uint32_t result;
 367:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 368:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 369:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   return(result);
 370:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** }
 371:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 372:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 373:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** /** \brief  Get APSR Register
 374:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 375:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     This function returns the content of the APSR Register.
 376:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 377:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     \return               APSR Register value
 378:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  */
 379:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_APSR(void)
 380:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** {
 381:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   uint32_t result;
 382:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 383:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 384:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   return(result);
 385:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** }
 386:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 387:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 388:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** /** \brief  Get xPSR Register
 389:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 390:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     This function returns the content of the xPSR Register.
 391:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 392:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     \return               xPSR Register value
 393:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  */
 394:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_xPSR(void)
 395:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** {
 396:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   uint32_t result;
 397:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 398:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 399:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   return(result);
 400:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** }
 401:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 402:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 403:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** /** \brief  Get Process Stack Pointer
 404:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 405:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     This function returns the current value of the Process Stack Pointer (PSP).
 406:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 407:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     \return               PSP Register value
 408:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  */
 409:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
 410:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** {
 411:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   register uint32_t result;
 412:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 413:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 414:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   return(result);
 415:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** }
 416:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  
 417:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 418:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** /** \brief  Set Process Stack Pointer
 419:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 420:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     This function assigns the given value to the Process Stack Pointer (PSP).
 421:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 422:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     \param [in]    topOfProcStack  Process Stack Pointer value to set
 423:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  */
 424:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
 425:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** {
 426:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) );
 427:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** }
 428:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 429:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 430:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** /** \brief  Get Main Stack Pointer
 431:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 432:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     This function returns the current value of the Main Stack Pointer (MSP).
 433:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 434:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     \return               MSP Register value
 435:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  */
 436:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_MSP(void)
 437:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** {
 438:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   register uint32_t result;
 439:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 440:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   __ASM volatile ("MRS %0, msp\n" : "=r" (result) );
 441:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   return(result);
 442:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** }
 443:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  
 444:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 445:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** /** \brief  Set Main Stack Pointer
 446:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 447:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     This function assigns the given value to the Main Stack Pointer (MSP).
 448:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 449:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     \param [in]    topOfMainStack  Main Stack Pointer value to set
 450:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  */
 451:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
 452:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** {
 453:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   __ASM volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) );
 454:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** }
 455:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 456:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 457:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** /** \brief  Get Priority Mask
 458:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 459:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     This function returns the current state of the priority mask bit from the Priority Mask Registe
 460:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 461:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     \return               Priority Mask value
 462:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  */
 463:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
 464:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** {
 465:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   uint32_t result;
 466:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 467:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) );
  54              	 .loc 2 467 0
  55              	 .syntax unified
  56              	
  57 0006 EFF31083 	 MRS r3,primask
  58              	
  59              	 .thumb
  60              	 .syntax unified
  61 000a 3B60     	 str r3,[r7]
 468:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   return(result);
  62              	 .loc 2 468 0
  63 000c 3B68     	 ldr r3,[r7]
  64              	.LBE13:
  65              	.LBE12:
 146:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** 	irqflags_t flags = cpu_irq_is_enabled();
  66              	 .loc 1 146 0
  67 000e 002B     	 cmp r3,#0
  68 0010 0CBF     	 ite eq
  69 0012 0123     	 moveq r3,#1
  70 0014 0023     	 movne r3,#0
  71 0016 DBB2     	 uxtb r3,r3
  72 0018 7B60     	 str r3,[r7,#4]
  73              	.LBB14:
  74              	.LBB15:
 327:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** }
  75              	 .loc 2 327 0
  76              	 .syntax unified
  77              	
  78 001a 72B6     	 cpsid i
  79              	
  80              	 .thumb
  81              	 .syntax unified
  82              	.LBE15:
  83              	.LBE14:
  84              	.LBB16:
  85              	.LBB17:
  86              	 .file 3 "../../../platform/thirdparty/CMSIS/include/core_cmInstr.h"
   1:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /**************************************************************************//**
   2:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  * @file     core_cmInstr.h
   3:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  * @brief    CMSIS Cortex-M Core Instruction Access Header File
   4:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  * @version  V3.00
   5:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  * @date     07. February 2012
   6:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  *
   7:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  * @note
   8:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  * Copyright (C) 2009-2012 ARM Limited. All rights reserved.
   9:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  *
  10:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  * @par
  11:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  * ARM Limited (ARM) is supplying this software for use with Cortex-M
  12:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  * processor based microcontrollers.  This file can be freely distributed
  13:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  * within development tools that are supporting such ARM based processors.
  14:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  *
  15:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  * @par
  16:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
  17:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
  18:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
  19:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  * ARM SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR
  20:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
  21:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  *
  22:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  ******************************************************************************/
  23:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
  24:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** #ifndef __CORE_CMINSTR_H
  25:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** #define __CORE_CMINSTR_H
  26:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
  27:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
  28:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /* ##########################  Core Instruction Access  ######################### */
  29:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
  30:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****   Access to dedicated instructions
  31:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****   @{
  32:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** */
  33:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
  34:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** #if   defined ( __CC_ARM ) /*------------------RealView Compiler -----------------*/
  35:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /* ARM armcc specific functions */
  36:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
  37:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** #if (__ARMCC_VERSION < 400677)
  38:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****   #error "Please use ARM Compiler Toolchain V4.0.677 or later!"
  39:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** #endif
  40:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
  41:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
  42:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /** \brief  No Operation
  43:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
  44:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     No Operation does nothing. This instruction can be used for code alignment purposes.
  45:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  */
  46:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** #define __NOP                             __nop
  47:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
  48:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
  49:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /** \brief  Wait For Interrupt
  50:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
  51:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     Wait For Interrupt is a hint instruction that suspends execution
  52:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     until one of a number of events occurs.
  53:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  */
  54:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** #define __WFI                             __wfi
  55:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
  56:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
  57:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /** \brief  Wait For Event
  58:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
  59:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     Wait For Event is a hint instruction that permits the processor to enter
  60:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     a low-power state until one of a number of events occurs.
  61:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  */
  62:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** #define __WFE                             __wfe
  63:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
  64:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
  65:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /** \brief  Send Event
  66:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
  67:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     Send Event is a hint instruction. It causes an event to be signaled to the CPU.
  68:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  */
  69:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** #define __SEV                             __sev
  70:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
  71:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
  72:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /** \brief  Instruction Synchronization Barrier
  73:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
  74:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     Instruction Synchronization Barrier flushes the pipeline in the processor,
  75:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     so that all instructions following the ISB are fetched from cache or
  76:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     memory, after the instruction has been completed.
  77:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  */
  78:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** #define __ISB()                           __isb(0xF)
  79:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
  80:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
  81:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /** \brief  Data Synchronization Barrier
  82:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
  83:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     This function acts as a special kind of Data Memory Barrier.
  84:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     It completes when all explicit memory accesses before this instruction complete.
  85:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  */
  86:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** #define __DSB()                           __dsb(0xF)
  87:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
  88:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
  89:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /** \brief  Data Memory Barrier
  90:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
  91:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     This function ensures the apparent order of the explicit memory operations before
  92:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     and after the instruction, without ensuring their completion.
  93:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  */
  94:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** #define __DMB()                           __dmb(0xF)
  95:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
  96:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
  97:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /** \brief  Reverse byte order (32 bit)
  98:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
  99:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     This function reverses the byte order in integer value.
 100:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 101:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \param [in]    value  Value to reverse
 102:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \return               Reversed value
 103:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  */
 104:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** #define __REV                             __rev
 105:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 106:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 107:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /** \brief  Reverse byte order (16 bit)
 108:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 109:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     This function reverses the byte order in two unsigned short values.
 110:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 111:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \param [in]    value  Value to reverse
 112:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \return               Reversed value
 113:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  */
 114:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** __attribute__((section(".rev16_text"))) __STATIC_INLINE __ASM uint32_t __REV16(uint32_t value)
 115:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** {
 116:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****   rev16 r0, r0
 117:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****   bx lr
 118:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** }
 119:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 120:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 121:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /** \brief  Reverse byte order in signed short value
 122:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 123:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     This function reverses the byte order in a signed short value with sign extension to integer.
 124:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 125:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \param [in]    value  Value to reverse
 126:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \return               Reversed value
 127:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  */
 128:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** __attribute__((section(".revsh_text"))) __STATIC_INLINE __ASM int32_t __REVSH(int32_t value)
 129:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** {
 130:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****   revsh r0, r0
 131:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****   bx lr
 132:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** }
 133:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 134:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 135:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /** \brief  Rotate Right in unsigned value (32 bit)
 136:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 137:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     This function Rotate Right (immediate) provides the value of the contents of a register rotated
 138:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 139:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \param [in]    value  Value to rotate
 140:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \param [in]    value  Number of Bits to rotate
 141:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \return               Rotated value
 142:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  */
 143:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** #define __ROR                             __ror
 144:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 145:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 146:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** #if       (__CORTEX_M >= 0x03)
 147:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 148:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /** \brief  Reverse bit order of value
 149:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 150:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     This function reverses the bit order of the given value.
 151:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 152:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \param [in]    value  Value to reverse
 153:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \return               Reversed value
 154:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  */
 155:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** #define __RBIT                            __rbit
 156:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 157:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 158:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /** \brief  LDR Exclusive (8 bit)
 159:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 160:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     This function performs a exclusive LDR command for 8 bit value.
 161:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 162:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 163:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \return             value of type uint8_t at (*ptr)
 164:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  */
 165:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** #define __LDREXB(ptr)                     ((uint8_t ) __ldrex(ptr))
 166:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 167:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 168:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /** \brief  LDR Exclusive (16 bit)
 169:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 170:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     This function performs a exclusive LDR command for 16 bit values.
 171:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 172:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 173:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \return        value of type uint16_t at (*ptr)
 174:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  */
 175:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** #define __LDREXH(ptr)                     ((uint16_t) __ldrex(ptr))
 176:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 177:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 178:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /** \brief  LDR Exclusive (32 bit)
 179:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 180:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     This function performs a exclusive LDR command for 32 bit values.
 181:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 182:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 183:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \return        value of type uint32_t at (*ptr)
 184:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  */
 185:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** #define __LDREXW(ptr)                     ((uint32_t ) __ldrex(ptr))
 186:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 187:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 188:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /** \brief  STR Exclusive (8 bit)
 189:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 190:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     This function performs a exclusive STR command for 8 bit values.
 191:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 192:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \param [in]  value  Value to store
 193:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 194:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \return          0  Function succeeded
 195:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \return          1  Function failed
 196:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  */
 197:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** #define __STREXB(value, ptr)              __strex(value, ptr)
 198:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 199:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 200:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /** \brief  STR Exclusive (16 bit)
 201:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 202:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     This function performs a exclusive STR command for 16 bit values.
 203:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 204:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \param [in]  value  Value to store
 205:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 206:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \return          0  Function succeeded
 207:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \return          1  Function failed
 208:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  */
 209:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** #define __STREXH(value, ptr)              __strex(value, ptr)
 210:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 211:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 212:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /** \brief  STR Exclusive (32 bit)
 213:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 214:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     This function performs a exclusive STR command for 32 bit values.
 215:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 216:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \param [in]  value  Value to store
 217:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 218:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \return          0  Function succeeded
 219:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \return          1  Function failed
 220:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  */
 221:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** #define __STREXW(value, ptr)              __strex(value, ptr)
 222:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 223:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 224:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /** \brief  Remove the exclusive lock
 225:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 226:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     This function removes the exclusive lock which is created by LDREX.
 227:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 228:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  */
 229:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** #define __CLREX                           __clrex
 230:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 231:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 232:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /** \brief  Signed Saturate
 233:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 234:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     This function saturates a signed value.
 235:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 236:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \param [in]  value  Value to be saturated
 237:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \param [in]    sat  Bit position to saturate to (1..32)
 238:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \return             Saturated value
 239:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  */
 240:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** #define __SSAT                            __ssat
 241:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 242:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 243:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /** \brief  Unsigned Saturate
 244:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 245:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     This function saturates an unsigned value.
 246:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 247:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \param [in]  value  Value to be saturated
 248:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \param [in]    sat  Bit position to saturate to (0..31)
 249:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \return             Saturated value
 250:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  */
 251:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** #define __USAT                            __usat
 252:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 253:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 254:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /** \brief  Count leading zeros
 255:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 256:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     This function counts the number of leading zeros of a data value.
 257:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 258:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \param [in]  value  Value to count the leading zeros
 259:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \return             number of leading zeros in value
 260:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  */
 261:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** #define __CLZ                             __clz
 262:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 263:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** #endif /* (__CORTEX_M >= 0x03) */
 264:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 265:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 266:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 267:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** #elif defined ( __ICCARM__ ) /*------------------ ICC Compiler -------------------*/
 268:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /* IAR iccarm specific functions */
 269:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 270:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** #include <cmsis_iar.h>
 271:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 272:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 273:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** #elif defined ( __TMS470__ ) /*---------------- TI CCS Compiler ------------------*/
 274:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /* TI CCS specific functions */
 275:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 276:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** #include <cmsis_ccs.h>
 277:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 278:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 279:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** #elif defined ( __GNUC__ ) /*------------------ GNU Compiler ---------------------*/
 280:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /* GNU gcc specific functions */
 281:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 282:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /** \brief  No Operation
 283:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 284:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     No Operation does nothing. This instruction can be used for code alignment purposes.
 285:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  */
 286:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
 287:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** {
 288:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****   __ASM volatile ("nop");
 289:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** }
 290:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 291:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 292:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /** \brief  Wait For Interrupt
 293:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 294:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     Wait For Interrupt is a hint instruction that suspends execution
 295:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     until one of a number of events occurs.
 296:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  */
 297:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __WFI(void)
 298:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** {
 299:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****   __ASM volatile ("wfi");
 300:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** }
 301:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 302:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 303:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /** \brief  Wait For Event
 304:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 305:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     Wait For Event is a hint instruction that permits the processor to enter
 306:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     a low-power state until one of a number of events occurs.
 307:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  */
 308:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __WFE(void)
 309:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** {
 310:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****   __ASM volatile ("wfe");
 311:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** }
 312:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 313:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 314:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /** \brief  Send Event
 315:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 316:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 317:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  */
 318:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __SEV(void)
 319:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** {
 320:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****   __ASM volatile ("sev");
 321:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** }
 322:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 323:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 324:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /** \brief  Instruction Synchronization Barrier
 325:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 326:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     Instruction Synchronization Barrier flushes the pipeline in the processor,
 327:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     so that all instructions following the ISB are fetched from cache or
 328:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     memory, after the instruction has been completed.
 329:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  */
 330:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __ISB(void)
 331:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** {
 332:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****   __ASM volatile ("isb");
 333:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** }
 334:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 335:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 336:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /** \brief  Data Synchronization Barrier
 337:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 338:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     This function acts as a special kind of Data Memory Barrier.
 339:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     It completes when all explicit memory accesses before this instruction complete.
 340:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  */
 341:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
 342:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** {
 343:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****   __ASM volatile ("dsb");
 344:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** }
 345:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 346:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 347:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /** \brief  Data Memory Barrier
 348:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 349:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     This function ensures the apparent order of the explicit memory operations before
 350:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     and after the instruction, without ensuring their completion.
 351:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  */
 352:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
 353:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** {
 354:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****   __ASM volatile ("dmb");
  87              	 .loc 3 354 0
  88              	 .syntax unified
  89              	
  90 001c BFF35F8F 	 dmb
  91              	
  92              	 .thumb
  93              	 .syntax unified
  94              	.LBE17:
  95              	.LBE16:
 147:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** 	cpu_irq_disable();
  96              	 .loc 1 147 0
  97 0020 044B     	 ldr r3,.L4
  98 0022 0022     	 movs r2,#0
  99 0024 1A70     	 strb r2,[r3]
 148:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** 	return flags;
 100              	 .loc 1 148 0
 101 0026 7B68     	 ldr r3,[r7,#4]
 149:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** }
 102              	 .loc 1 149 0
 103 0028 1846     	 mov r0,r3
 104 002a 0C37     	 adds r7,r7,#12
 105              	.LCFI3:
 106              	 .cfi_def_cfa_offset 4
 107 002c BD46     	 mov sp,r7
 108              	.LCFI4:
 109              	 .cfi_def_cfa_register 13
 110              	 
 111 002e 80BC     	 pop {r7}
 112              	.LCFI5:
 113              	 .cfi_restore 7
 114              	 .cfi_def_cfa_offset 0
 115 0030 7047     	 bx lr
 116              	.L5:
 117 0032 00BF     	 .align 2
 118              	.L4:
 119 0034 00000000 	 .word g_interrupt_enabled
 120              	 .cfi_endproc
 121              	.LFE112:
 123              	 .align 1
 124              	 .syntax unified
 125              	 .thumb
 126              	 .thumb_func
 127              	 .fpu softvfp
 129              	cpu_irq_is_enabled_flags:
 130              	.LFB113:
 150:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** 
 151:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
 152:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** {
 131              	 .loc 1 152 0
 132              	 .cfi_startproc
 133              	 
 134              	 
 135              	 
 136 0038 80B4     	 push {r7}
 137              	.LCFI6:
 138              	 .cfi_def_cfa_offset 4
 139              	 .cfi_offset 7,-4
 140 003a 83B0     	 sub sp,sp,#12
 141              	.LCFI7:
 142              	 .cfi_def_cfa_offset 16
 143 003c 00AF     	 add r7,sp,#0
 144              	.LCFI8:
 145              	 .cfi_def_cfa_register 7
 146 003e 7860     	 str r0,[r7,#4]
 153:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** 	return (flags);
 147              	 .loc 1 153 0
 148 0040 7B68     	 ldr r3,[r7,#4]
 149 0042 002B     	 cmp r3,#0
 150 0044 14BF     	 ite ne
 151 0046 0123     	 movne r3,#1
 152 0048 0023     	 moveq r3,#0
 153 004a DBB2     	 uxtb r3,r3
 154:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** }
 154              	 .loc 1 154 0
 155 004c 1846     	 mov r0,r3
 156 004e 0C37     	 adds r7,r7,#12
 157              	.LCFI9:
 158              	 .cfi_def_cfa_offset 4
 159 0050 BD46     	 mov sp,r7
 160              	.LCFI10:
 161              	 .cfi_def_cfa_register 13
 162              	 
 163 0052 80BC     	 pop {r7}
 164              	.LCFI11:
 165              	 .cfi_restore 7
 166              	 .cfi_def_cfa_offset 0
 167 0054 7047     	 bx lr
 168              	 .cfi_endproc
 169              	.LFE113:
 171              	 .align 1
 172              	 .syntax unified
 173              	 .thumb
 174              	 .thumb_func
 175              	 .fpu softvfp
 177              	cpu_irq_restore:
 178              	.LFB114:
 155:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** 
 156:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** static inline void cpu_irq_restore(irqflags_t flags)
 157:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** {
 179              	 .loc 1 157 0
 180              	 .cfi_startproc
 181              	 
 182              	 
 183 0056 80B5     	 push {r7,lr}
 184              	.LCFI12:
 185              	 .cfi_def_cfa_offset 8
 186              	 .cfi_offset 7,-8
 187              	 .cfi_offset 14,-4
 188 0058 82B0     	 sub sp,sp,#8
 189              	.LCFI13:
 190              	 .cfi_def_cfa_offset 16
 191 005a 00AF     	 add r7,sp,#0
 192              	.LCFI14:
 193              	 .cfi_def_cfa_register 7
 194 005c 7860     	 str r0,[r7,#4]
 158:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** 	if (cpu_irq_is_enabled_flags(flags))
 195              	 .loc 1 158 0
 196 005e 7868     	 ldr r0,[r7,#4]
 197 0060 FFF7EAFF 	 bl cpu_irq_is_enabled_flags
 198 0064 0346     	 mov r3,r0
 199 0066 002B     	 cmp r3,#0
 200 0068 05D0     	 beq .L10
 159:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** 		cpu_irq_enable();
 201              	 .loc 1 159 0
 202 006a 054B     	 ldr r3,.L11
 203 006c 0122     	 movs r2,#1
 204 006e 1A70     	 strb r2,[r3]
 205              	.LBB18:
 206              	.LBB19:
 207              	 .loc 3 354 0
 208              	 .syntax unified
 209              	
 210 0070 BFF35F8F 	 dmb
 211              	
 212              	 .thumb
 213              	 .syntax unified
 214              	.LBE19:
 215              	.LBE18:
 216              	.LBB20:
 217              	.LBB21:
 316:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** }
 218              	 .loc 2 316 0
 219              	 .syntax unified
 220              	
 221 0074 62B6     	 cpsie i
 222              	
 223              	 .thumb
 224              	 .syntax unified
 225              	.L10:
 226              	.LBE21:
 227              	.LBE20:
 160:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** }
 228              	 .loc 1 160 0
 229 0076 00BF     	 nop
 230 0078 0837     	 adds r7,r7,#8
 231              	.LCFI15:
 232              	 .cfi_def_cfa_offset 8
 233 007a BD46     	 mov sp,r7
 234              	.LCFI16:
 235              	 .cfi_def_cfa_register 13
 236              	 
 237 007c 80BD     	 pop {r7,pc}
 238              	.L12:
 239 007e 00BF     	 .align 2
 240              	.L11:
 241 0080 00000000 	 .word g_interrupt_enabled
 242              	 .cfi_endproc
 243              	.LFE114:
 245              	 .comm n,1,1
 246              	 .section .bss.tTS,"aw",%nobits
 247              	 .align 2
 250              	tTS:
 251 0000 00000000 	 .space 4
 252              	 .text
 253              	 .align 1
 254              	 .syntax unified
 255              	 .thumb
 256              	 .thumb_func
 257              	 .fpu softvfp
 259              	osc_enable:
 260              	.LFB126:
 261              	 .file 4 "../../../platform/common/services/clock/sam4l/osc.h"
   1:../../../platform/common/services/clock/sam4l/osc.h **** /**
   2:../../../platform/common/services/clock/sam4l/osc.h ****  * \file
   3:../../../platform/common/services/clock/sam4l/osc.h ****  *
   4:../../../platform/common/services/clock/sam4l/osc.h ****  * \brief Chip-specific oscillator management functions
   5:../../../platform/common/services/clock/sam4l/osc.h ****  *
   6:../../../platform/common/services/clock/sam4l/osc.h ****  * Copyright (c) 2012 Atmel Corporation. All rights reserved.
   7:../../../platform/common/services/clock/sam4l/osc.h ****  *
   8:../../../platform/common/services/clock/sam4l/osc.h ****  * \asf_license_start
   9:../../../platform/common/services/clock/sam4l/osc.h ****  *
  10:../../../platform/common/services/clock/sam4l/osc.h ****  * \page License
  11:../../../platform/common/services/clock/sam4l/osc.h ****  *
  12:../../../platform/common/services/clock/sam4l/osc.h ****  * Redistribution and use in source and binary forms, with or without
  13:../../../platform/common/services/clock/sam4l/osc.h ****  * modification, are permitted provided that the following conditions are met:
  14:../../../platform/common/services/clock/sam4l/osc.h ****  *
  15:../../../platform/common/services/clock/sam4l/osc.h ****  * 1. Redistributions of source code must retain the above copyright notice,
  16:../../../platform/common/services/clock/sam4l/osc.h ****  *    this list of conditions and the following disclaimer.
  17:../../../platform/common/services/clock/sam4l/osc.h ****  *
  18:../../../platform/common/services/clock/sam4l/osc.h ****  * 2. Redistributions in binary form must reproduce the above copyright notice,
  19:../../../platform/common/services/clock/sam4l/osc.h ****  *    this list of conditions and the following disclaimer in the documentation
  20:../../../platform/common/services/clock/sam4l/osc.h ****  *    and/or other materials provided with the distribution.
  21:../../../platform/common/services/clock/sam4l/osc.h ****  *
  22:../../../platform/common/services/clock/sam4l/osc.h ****  * 3. The name of Atmel may not be used to endorse or promote products derived
  23:../../../platform/common/services/clock/sam4l/osc.h ****  *    from this software without specific prior written permission.
  24:../../../platform/common/services/clock/sam4l/osc.h ****  *
  25:../../../platform/common/services/clock/sam4l/osc.h ****  * 4. This software may only be redistributed and used in connection with an
  26:../../../platform/common/services/clock/sam4l/osc.h ****  *    Atmel microcontroller product.
  27:../../../platform/common/services/clock/sam4l/osc.h ****  *
  28:../../../platform/common/services/clock/sam4l/osc.h ****  * THIS SOFTWARE IS PROVIDED BY ATMEL "AS IS" AND ANY EXPRESS OR IMPLIED
  29:../../../platform/common/services/clock/sam4l/osc.h ****  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
  30:../../../platform/common/services/clock/sam4l/osc.h ****  * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE
  31:../../../platform/common/services/clock/sam4l/osc.h ****  * EXPRESSLY AND SPECIFICALLY DISCLAIMED. IN NO EVENT SHALL ATMEL BE LIABLE FOR
  32:../../../platform/common/services/clock/sam4l/osc.h ****  * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  33:../../../platform/common/services/clock/sam4l/osc.h ****  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
  34:../../../platform/common/services/clock/sam4l/osc.h ****  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
  35:../../../platform/common/services/clock/sam4l/osc.h ****  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
  36:../../../platform/common/services/clock/sam4l/osc.h ****  * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
  37:../../../platform/common/services/clock/sam4l/osc.h ****  * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  38:../../../platform/common/services/clock/sam4l/osc.h ****  * POSSIBILITY OF SUCH DAMAGE.
  39:../../../platform/common/services/clock/sam4l/osc.h ****  *
  40:../../../platform/common/services/clock/sam4l/osc.h ****  * \asf_license_stop
  41:../../../platform/common/services/clock/sam4l/osc.h ****  *
  42:../../../platform/common/services/clock/sam4l/osc.h ****  */
  43:../../../platform/common/services/clock/sam4l/osc.h **** #ifndef CHIP_OSC_H_INCLUDED
  44:../../../platform/common/services/clock/sam4l/osc.h **** #define CHIP_OSC_H_INCLUDED
  45:../../../platform/common/services/clock/sam4l/osc.h **** 
  46:../../../platform/common/services/clock/sam4l/osc.h **** #include <board.h>
  47:../../../platform/common/services/clock/sam4l/osc.h **** 
  48:../../../platform/common/services/clock/sam4l/osc.h **** #ifdef __cplusplus
  49:../../../platform/common/services/clock/sam4l/osc.h **** extern "C" {
  50:../../../platform/common/services/clock/sam4l/osc.h **** #endif
  51:../../../platform/common/services/clock/sam4l/osc.h **** 
  52:../../../platform/common/services/clock/sam4l/osc.h **** 
  53:../../../platform/common/services/clock/sam4l/osc.h **** /**
  54:../../../platform/common/services/clock/sam4l/osc.h ****  * \weakgroup osc_group
  55:../../../platform/common/services/clock/sam4l/osc.h ****  * @{
  56:../../../platform/common/services/clock/sam4l/osc.h ****  */
  57:../../../platform/common/services/clock/sam4l/osc.h **** 
  58:../../../platform/common/services/clock/sam4l/osc.h **** //! \name Oscillator identifiers
  59:../../../platform/common/services/clock/sam4l/osc.h **** //@{
  60:../../../platform/common/services/clock/sam4l/osc.h **** #define OSC_ID_OSC0             0       //!< External Oscillator 0
  61:../../../platform/common/services/clock/sam4l/osc.h **** #define OSC_ID_OSC32            1       //!< External 32 kHz oscillator
  62:../../../platform/common/services/clock/sam4l/osc.h **** #define OSC_ID_RC32K            2       //!< Internal 32 kHz RC oscillator
  63:../../../platform/common/services/clock/sam4l/osc.h **** #define OSC_ID_RC80M            3       //!< Internal 80 MHz RC oscillator
  64:../../../platform/common/services/clock/sam4l/osc.h **** #define OSC_ID_RCFAST           4       //!< Internal 4-8-12 MHz RCFAST oscillator
  65:../../../platform/common/services/clock/sam4l/osc.h **** #define OSC_ID_RC1M             5       //!< Internal 1 MHz RC oscillator
  66:../../../platform/common/services/clock/sam4l/osc.h **** #define OSC_ID_RCSYS            6       //!< Internal System RC oscillator
  67:../../../platform/common/services/clock/sam4l/osc.h **** //@}
  68:../../../platform/common/services/clock/sam4l/osc.h **** 
  69:../../../platform/common/services/clock/sam4l/osc.h **** //! \name OSC0 mode values
  70:../../../platform/common/services/clock/sam4l/osc.h **** //@{
  71:../../../platform/common/services/clock/sam4l/osc.h **** //! External clock connected to XIN
  72:../../../platform/common/services/clock/sam4l/osc.h **** #define OSC_MODE_EXTERNAL       0
  73:../../../platform/common/services/clock/sam4l/osc.h **** //! Crystal connected to XIN/XOUT
  74:../../../platform/common/services/clock/sam4l/osc.h **** #define OSC_MODE_XTAL           SCIF_OSCCTRL0_MODE
  75:../../../platform/common/services/clock/sam4l/osc.h **** //@}
  76:../../../platform/common/services/clock/sam4l/osc.h **** 
  77:../../../platform/common/services/clock/sam4l/osc.h **** //! \name OSC32 mode values
  78:../../../platform/common/services/clock/sam4l/osc.h **** //@{
  79:../../../platform/common/services/clock/sam4l/osc.h **** //! External clock connected to XIN32
  80:../../../platform/common/services/clock/sam4l/osc.h **** #define OSC32_MODE_EXTERNAL     BSCIF_OSCCTRL32_MODE(0)
  81:../../../platform/common/services/clock/sam4l/osc.h **** //! Crystal connected to XIN32/XOUT32
  82:../../../platform/common/services/clock/sam4l/osc.h **** #define OSC32_MODE_XTAL         BSCIF_OSCCTRL32_MODE(1)
  83:../../../platform/common/services/clock/sam4l/osc.h **** //! Crystal connected to XIN32/XOUT32 in high current mode
  84:../../../platform/common/services/clock/sam4l/osc.h **** #define OSC32_MODE_XTAL_HC      BSCIF_OSCCTRL32_MODE(4)
  85:../../../platform/common/services/clock/sam4l/osc.h **** //@}
  86:../../../platform/common/services/clock/sam4l/osc.h **** 
  87:../../../platform/common/services/clock/sam4l/osc.h **** //! \name OSC0 startup values
  88:../../../platform/common/services/clock/sam4l/osc.h **** //@{
  89:../../../platform/common/services/clock/sam4l/osc.h **** //! 0 cycles
  90:../../../platform/common/services/clock/sam4l/osc.h **** #define OSC_STARTUP_0           SCIF_OSCCTRL0_STARTUP(0)
  91:../../../platform/common/services/clock/sam4l/osc.h **** //! 64 cycles (560 us)
  92:../../../platform/common/services/clock/sam4l/osc.h **** #define OSC_STARTUP_64          SCIF_OSCCTRL0_STARTUP(1)
  93:../../../platform/common/services/clock/sam4l/osc.h **** //! 128 cycles (1.1 ms)
  94:../../../platform/common/services/clock/sam4l/osc.h **** #define OSC_STARTUP_128         SCIF_OSCCTRL0_STARTUP(2)
  95:../../../platform/common/services/clock/sam4l/osc.h **** //! 2048 cycles (18 ms)
  96:../../../platform/common/services/clock/sam4l/osc.h **** #define OSC_STARTUP_2048        SCIF_OSCCTRL0_STARTUP(3)
  97:../../../platform/common/services/clock/sam4l/osc.h **** //! 4096 cycles (36 ms)
  98:../../../platform/common/services/clock/sam4l/osc.h **** #define OSC_STARTUP_4096        SCIF_OSCCTRL0_STARTUP(4)
  99:../../../platform/common/services/clock/sam4l/osc.h **** //! 8192 cycles (71 ms)
 100:../../../platform/common/services/clock/sam4l/osc.h **** #define OSC_STARTUP_8192        SCIF_OSCCTRL0_STARTUP(5)
 101:../../../platform/common/services/clock/sam4l/osc.h **** //! 16384 cycles (143 ms)
 102:../../../platform/common/services/clock/sam4l/osc.h **** #define OSC_STARTUP_16384       SCIF_OSCCTRL0_STARTUP(6)
 103:../../../platform/common/services/clock/sam4l/osc.h **** //! 32768 cycles (285 ms)
 104:../../../platform/common/services/clock/sam4l/osc.h **** #define OSC_STARTUP_32768       SCIF_OSCCTRL0_STARTUP(7)
 105:../../../platform/common/services/clock/sam4l/osc.h **** //@}
 106:../../../platform/common/services/clock/sam4l/osc.h **** 
 107:../../../platform/common/services/clock/sam4l/osc.h **** //! \name OSC32 startup values
 108:../../../platform/common/services/clock/sam4l/osc.h **** //@{
 109:../../../platform/common/services/clock/sam4l/osc.h **** //! 0 cycles
 110:../../../platform/common/services/clock/sam4l/osc.h **** #define OSC32_STARTUP_0         BSCIF_OSCCTRL32_STARTUP(0)
 111:../../../platform/common/services/clock/sam4l/osc.h **** //! 128 cycles (1.1 ms)
 112:../../../platform/common/services/clock/sam4l/osc.h **** #define OSC32_STARTUP_128       BSCIF_OSCCTRL32_STARTUP(1)
 113:../../../platform/common/services/clock/sam4l/osc.h **** //! 8192 cycles (72.3 ms)
 114:../../../platform/common/services/clock/sam4l/osc.h **** #define OSC32_STARTUP_8192      BSCIF_OSCCTRL32_STARTUP(2)
 115:../../../platform/common/services/clock/sam4l/osc.h **** //! 16384 cycles (143 ms)
 116:../../../platform/common/services/clock/sam4l/osc.h **** #define OSC32_STARTUP_16384     BSCIF_OSCCTRL32_STARTUP(3)
 117:../../../platform/common/services/clock/sam4l/osc.h **** //! 65536 cycles (570 ms)
 118:../../../platform/common/services/clock/sam4l/osc.h **** #define OSC32_STARTUP_65536     BSCIF_OSCCTRL32_STARTUP(4)
 119:../../../platform/common/services/clock/sam4l/osc.h **** //! 131072 cycles (1.1 s)
 120:../../../platform/common/services/clock/sam4l/osc.h **** #define OSC32_STARTUP_131072    BSCIF_OSCCTRL32_STARTUP(5)
 121:../../../platform/common/services/clock/sam4l/osc.h **** //! 262144 cycles (2.3 s)
 122:../../../platform/common/services/clock/sam4l/osc.h **** #define OSC32_STARTUP_262144    BSCIF_OSCCTRL32_STARTUP(6)
 123:../../../platform/common/services/clock/sam4l/osc.h **** //! 524288 cycles (4.6 s)
 124:../../../platform/common/services/clock/sam4l/osc.h **** #define OSC32_STARTUP_524288    BSCIF_OSCCTRL32_STARTUP(7)
 125:../../../platform/common/services/clock/sam4l/osc.h **** //@}
 126:../../../platform/common/services/clock/sam4l/osc.h **** 
 127:../../../platform/common/services/clock/sam4l/osc.h **** /**
 128:../../../platform/common/services/clock/sam4l/osc.h ****  * \def OSC0_STARTUP_TIMEOUT
 129:../../../platform/common/services/clock/sam4l/osc.h ****  * \brief Number of slow clock cycles to wait for OSC0 to start
 130:../../../platform/common/services/clock/sam4l/osc.h ****  *
 131:../../../platform/common/services/clock/sam4l/osc.h ****  * This is the number of slow clock cycles corresponding to
 132:../../../platform/common/services/clock/sam4l/osc.h ****  * OSC0_STARTUP_VALUE with an additional 25% safety margin. If the
 133:../../../platform/common/services/clock/sam4l/osc.h ****  * oscillator isn't running when this timeout has expired, it is assumed
 134:../../../platform/common/services/clock/sam4l/osc.h ****  * to have failed to start.
 135:../../../platform/common/services/clock/sam4l/osc.h ****  */
 136:../../../platform/common/services/clock/sam4l/osc.h **** /**
 137:../../../platform/common/services/clock/sam4l/osc.h ****  * \def OSC0_MODE_VALUE
 138:../../../platform/common/services/clock/sam4l/osc.h ****  * \brief Board-dependent value written to the MODE bitfield of
 139:../../../platform/common/services/clock/sam4l/osc.h ****  * PM_OSCCTRL(0)
 140:../../../platform/common/services/clock/sam4l/osc.h ****  */
 141:../../../platform/common/services/clock/sam4l/osc.h **** /**
 142:../../../platform/common/services/clock/sam4l/osc.h ****  * \def OSC0_STARTUP_VALUE
 143:../../../platform/common/services/clock/sam4l/osc.h ****  * \brief Board-dependent value written to the STARTUP bitfield of
 144:../../../platform/common/services/clock/sam4l/osc.h ****  * PM_OSCCTRL(0)
 145:../../../platform/common/services/clock/sam4l/osc.h ****  */
 146:../../../platform/common/services/clock/sam4l/osc.h **** #if defined(BOARD_OSC0_STARTUP_US)
 147:../../../platform/common/services/clock/sam4l/osc.h **** #   if BOARD_OSC0_STARTUP_US == 0
 148:../../../platform/common/services/clock/sam4l/osc.h **** #      define OSC0_STARTUP_VALUE    OSC_STARTUP_0
 149:../../../platform/common/services/clock/sam4l/osc.h **** #      define OSC0_STARTUP_TIMEOUT  8
 150:../../../platform/common/services/clock/sam4l/osc.h **** #   elif BOARD_OSC0_STARTUP_US <= 557
 151:../../../platform/common/services/clock/sam4l/osc.h **** #      define OSC0_STARTUP_VALUE    OSC_STARTUP_64
 152:../../../platform/common/services/clock/sam4l/osc.h **** #      define OSC0_STARTUP_TIMEOUT  80
 153:../../../platform/common/services/clock/sam4l/osc.h **** #   elif BOARD_OSC0_STARTUP_US <= 1100
 154:../../../platform/common/services/clock/sam4l/osc.h **** #      define OSC0_STARTUP_VALUE    OSC_STARTUP_128
 155:../../../platform/common/services/clock/sam4l/osc.h **** #      define OSC0_STARTUP_TIMEOUT  160
 156:../../../platform/common/services/clock/sam4l/osc.h **** #   elif BOARD_OSC0_STARTUP_US <= 18000
 157:../../../platform/common/services/clock/sam4l/osc.h **** #      define OSC0_STARTUP_VALUE    OSC_STARTUP_2048
 158:../../../platform/common/services/clock/sam4l/osc.h **** #      define OSC0_STARTUP_TIMEOUT  2560
 159:../../../platform/common/services/clock/sam4l/osc.h **** #   elif BOARD_OSC0_STARTUP_US <= 36000
 160:../../../platform/common/services/clock/sam4l/osc.h **** #      define OSC0_STARTUP_VALUE    OSC_STARTUP_4096
 161:../../../platform/common/services/clock/sam4l/osc.h **** #      define OSC0_STARTUP_TIMEOUT  5120
 162:../../../platform/common/services/clock/sam4l/osc.h **** #   elif BOARD_OSC0_STARTUP_US <= 71000
 163:../../../platform/common/services/clock/sam4l/osc.h **** #      define OSC0_STARTUP_VALUE    OSC_STARTUP_8192
 164:../../../platform/common/services/clock/sam4l/osc.h **** #      define OSC0_STARTUP_TIMEOUT  10240
 165:../../../platform/common/services/clock/sam4l/osc.h **** #   elif BOARD_OSC0_STARTUP_US <= 143000
 166:../../../platform/common/services/clock/sam4l/osc.h **** #      define OSC0_STARTUP_VALUE    OSC_STARTUP_16384
 167:../../../platform/common/services/clock/sam4l/osc.h **** #      define OSC0_STARTUP_TIMEOUT  20480
 168:../../../platform/common/services/clock/sam4l/osc.h **** #   elif BOARD_OSC0_STARTUP_US <= 285000
 169:../../../platform/common/services/clock/sam4l/osc.h **** #      define OSC0_STARTUP_VALUE    OSC_STARTUP_32768
 170:../../../platform/common/services/clock/sam4l/osc.h **** #      define OSC0_STARTUP_TIMEOUT  40960
 171:../../../platform/common/services/clock/sam4l/osc.h **** #   else
 172:../../../platform/common/services/clock/sam4l/osc.h **** #      error BOARD_OSC0_STARTUP_US is too high
 173:../../../platform/common/services/clock/sam4l/osc.h **** #   endif
 174:../../../platform/common/services/clock/sam4l/osc.h **** #   if BOARD_OSC0_IS_XTAL == true
 175:../../../platform/common/services/clock/sam4l/osc.h **** #      define OSC0_MODE_VALUE       OSC_MODE_XTAL
 176:../../../platform/common/services/clock/sam4l/osc.h **** #      if BOARD_OSC0_HZ < 2000000
 177:../../../platform/common/services/clock/sam4l/osc.h **** #         define OSC0_GAIN_VALUE      SCIF_OSCCTRL0_GAIN(0)
 178:../../../platform/common/services/clock/sam4l/osc.h **** #      elif BOARD_OSC0_HZ < 4000000
 179:../../../platform/common/services/clock/sam4l/osc.h **** #         define OSC0_GAIN_VALUE      SCIF_OSCCTRL0_GAIN(1)
 180:../../../platform/common/services/clock/sam4l/osc.h **** #      elif BOARD_OSC0_HZ < 8000000
 181:../../../platform/common/services/clock/sam4l/osc.h **** #         define OSC0_GAIN_VALUE      SCIF_OSCCTRL0_GAIN(2)
 182:../../../platform/common/services/clock/sam4l/osc.h **** #      elif BOARD_OSC0_HZ < 16000000
 183:../../../platform/common/services/clock/sam4l/osc.h **** #         define OSC0_GAIN_VALUE      SCIF_OSCCTRL0_GAIN(3)
 184:../../../platform/common/services/clock/sam4l/osc.h **** #      else
 185:../../../platform/common/services/clock/sam4l/osc.h **** #         define OSC0_GAIN_VALUE      ((0x1u << 4) | SCIF_OSCCTRL0_GAIN(0))
 186:../../../platform/common/services/clock/sam4l/osc.h **** #      endif
 187:../../../platform/common/services/clock/sam4l/osc.h **** #   else
 188:../../../platform/common/services/clock/sam4l/osc.h **** #      define OSC0_MODE_VALUE       OSC_MODE_EXTERNAL
 189:../../../platform/common/services/clock/sam4l/osc.h **** #   endif
 190:../../../platform/common/services/clock/sam4l/osc.h **** #else
 191:../../../platform/common/services/clock/sam4l/osc.h **** #   if defined(BOARD_OSC0_HZ)
 192:../../../platform/common/services/clock/sam4l/osc.h **** #      error BOARD_OSC0_STARTUP_US must be defined by the board code
 193:../../../platform/common/services/clock/sam4l/osc.h **** #   endif
 194:../../../platform/common/services/clock/sam4l/osc.h **** #   ifdef __DOXYGEN__
 195:../../../platform/common/services/clock/sam4l/osc.h **** #      define OSC0_STARTUP_VALUE     UNDEFINED
 196:../../../platform/common/services/clock/sam4l/osc.h **** #      define OSC0_STARTUP_TIMEOUT   UNDEFINED
 197:../../../platform/common/services/clock/sam4l/osc.h **** #      define OSC0_MODE_VALUE        UNDEFINED
 198:../../../platform/common/services/clock/sam4l/osc.h **** #   endif
 199:../../../platform/common/services/clock/sam4l/osc.h **** #endif
 200:../../../platform/common/services/clock/sam4l/osc.h **** 
 201:../../../platform/common/services/clock/sam4l/osc.h **** #if defined(BOARD_OSC32_STARTUP_US)
 202:../../../platform/common/services/clock/sam4l/osc.h **** #   if BOARD_OSC32_STARTUP_US == 0
 203:../../../platform/common/services/clock/sam4l/osc.h **** #      define OSC32_STARTUP_VALUE    OSC32_STARTUP_0
 204:../../../platform/common/services/clock/sam4l/osc.h **** #   elif BOARD_OSC32_STARTUP_US   <= 1100
 205:../../../platform/common/services/clock/sam4l/osc.h **** #      define OSC32_STARTUP_VALUE    OSC32_STARTUP_128
 206:../../../platform/common/services/clock/sam4l/osc.h **** #   elif BOARD_OSC32_STARTUP_US   <= 72300
 207:../../../platform/common/services/clock/sam4l/osc.h **** #      define OSC32_STARTUP_VALUE    OSC32_STARTUP_8192
 208:../../../platform/common/services/clock/sam4l/osc.h **** #   elif BOARD_OSC32_STARTUP_US   <= 143000
 209:../../../platform/common/services/clock/sam4l/osc.h **** #      define OSC32_STARTUP_VALUE    OSC32_STARTUP_16384
 210:../../../platform/common/services/clock/sam4l/osc.h **** #   elif BOARD_OSC32_STARTUP_US   <= 570000
 211:../../../platform/common/services/clock/sam4l/osc.h **** #      define OSC32_STARTUP_VALUE    OSC32_STARTUP_65536
 212:../../../platform/common/services/clock/sam4l/osc.h **** #   elif BOARD_OSC32_STARTUP_US   <= 1100000
 213:../../../platform/common/services/clock/sam4l/osc.h **** #      define OSC32_STARTUP_VALUE    OSC32_STARTUP_131072
 214:../../../platform/common/services/clock/sam4l/osc.h **** #   elif BOARD_OSC32_STARTUP_US   <= 2300000
 215:../../../platform/common/services/clock/sam4l/osc.h **** #      define OSC32_STARTUP_VALUE    OSC32_STARTUP_262144
 216:../../../platform/common/services/clock/sam4l/osc.h **** #   elif BOARD_OSC32_STARTUP_US   <= 4600000
 217:../../../platform/common/services/clock/sam4l/osc.h **** #      define OSC32_STARTUP_VALUE    OSC32_STARTUP_524288
 218:../../../platform/common/services/clock/sam4l/osc.h **** #   else
 219:../../../platform/common/services/clock/sam4l/osc.h **** #      error BOARD_OSC32_STARTUP_US is too high
 220:../../../platform/common/services/clock/sam4l/osc.h **** #   endif
 221:../../../platform/common/services/clock/sam4l/osc.h **** #   if BOARD_OSC32_IS_XTAL == true
 222:../../../platform/common/services/clock/sam4l/osc.h **** #      define OSC32_MODE_VALUE       OSC32_MODE_XTAL
 223:../../../platform/common/services/clock/sam4l/osc.h **** #   else
 224:../../../platform/common/services/clock/sam4l/osc.h **** #      define OSC32_MODE_VALUE       OSC32_MODE_EXTERNAL
 225:../../../platform/common/services/clock/sam4l/osc.h **** #   endif
 226:../../../platform/common/services/clock/sam4l/osc.h **** #else
 227:../../../platform/common/services/clock/sam4l/osc.h **** #   if defined(BOARD_OSC32_HZ)
 228:../../../platform/common/services/clock/sam4l/osc.h **** #      error BOARD_OSC32_STARTUP_US must be defined by the board code
 229:../../../platform/common/services/clock/sam4l/osc.h **** #   endif
 230:../../../platform/common/services/clock/sam4l/osc.h **** #   ifdef __DOXYGEN__
 231:../../../platform/common/services/clock/sam4l/osc.h **** #      define OSC32_STARTUP_VALUE     UNDEFINED
 232:../../../platform/common/services/clock/sam4l/osc.h **** #      define OSC32_STARTUP_TIMEOUT   UNDEFINED
 233:../../../platform/common/services/clock/sam4l/osc.h **** #      define OSC32_MODE_VALUE        UNDEFINED
 234:../../../platform/common/services/clock/sam4l/osc.h **** #   endif
 235:../../../platform/common/services/clock/sam4l/osc.h **** #endif
 236:../../../platform/common/services/clock/sam4l/osc.h **** 
 237:../../../platform/common/services/clock/sam4l/osc.h **** // Use 4 MHz frequency range for RCFAST oscillator if config was empty.
 238:../../../platform/common/services/clock/sam4l/osc.h **** #ifndef CONFIG_RCFAST_FRANGE
 239:../../../platform/common/services/clock/sam4l/osc.h **** #define CONFIG_RCFAST_FRANGE    0
 240:../../../platform/common/services/clock/sam4l/osc.h **** #endif
 241:../../../platform/common/services/clock/sam4l/osc.h **** 
 242:../../../platform/common/services/clock/sam4l/osc.h **** /**
 243:../../../platform/common/services/clock/sam4l/osc.h ****  * \name Board-specific configuration parameters
 244:../../../platform/common/services/clock/sam4l/osc.h ****  * The following definitions must be provided by the board code for all
 245:../../../platform/common/services/clock/sam4l/osc.h ****  * working oscillators on the board.
 246:../../../platform/common/services/clock/sam4l/osc.h ****  */
 247:../../../platform/common/services/clock/sam4l/osc.h **** //@{
 248:../../../platform/common/services/clock/sam4l/osc.h **** /**
 249:../../../platform/common/services/clock/sam4l/osc.h ****  * \def BOARD_OSC0_HZ
 250:../../../platform/common/services/clock/sam4l/osc.h ****  * \brief Clock frequency of OSC0 in Hz
 251:../../../platform/common/services/clock/sam4l/osc.h ****  */
 252:../../../platform/common/services/clock/sam4l/osc.h **** /**
 253:../../../platform/common/services/clock/sam4l/osc.h ****  * \def BOARD_OSC0_STARTUP_US
 254:../../../platform/common/services/clock/sam4l/osc.h ****  * \brief Startup time of OSC0 in microseconds
 255:../../../platform/common/services/clock/sam4l/osc.h ****  */
 256:../../../platform/common/services/clock/sam4l/osc.h **** /**
 257:../../../platform/common/services/clock/sam4l/osc.h ****  * \def BOARD_OSC0_IS_XTAL
 258:../../../platform/common/services/clock/sam4l/osc.h ****  * \brief OSC0 uses a crystal, not an external clock
 259:../../../platform/common/services/clock/sam4l/osc.h ****  */
 260:../../../platform/common/services/clock/sam4l/osc.h **** /**
 261:../../../platform/common/services/clock/sam4l/osc.h ****  * \def BOARD_OSC32_HZ
 262:../../../platform/common/services/clock/sam4l/osc.h ****  * \brief Clock frequency of OSC32 in Hz
 263:../../../platform/common/services/clock/sam4l/osc.h ****  */
 264:../../../platform/common/services/clock/sam4l/osc.h **** /**
 265:../../../platform/common/services/clock/sam4l/osc.h ****  * \def BOARD_OSC32_STARTUP_US
 266:../../../platform/common/services/clock/sam4l/osc.h ****  * \brief Startup time of OSC32 in microseconds
 267:../../../platform/common/services/clock/sam4l/osc.h ****  */
 268:../../../platform/common/services/clock/sam4l/osc.h **** /**
 269:../../../platform/common/services/clock/sam4l/osc.h ****  * \def BOARD_OSC32_IS_XTAL
 270:../../../platform/common/services/clock/sam4l/osc.h ****  * \brief OSC32 uses a crystal, not an external clock
 271:../../../platform/common/services/clock/sam4l/osc.h ****  */
 272:../../../platform/common/services/clock/sam4l/osc.h **** /**
 273:../../../platform/common/services/clock/sam4l/osc.h ****  * \def BOARD_OSC32_SELCURR
 274:../../../platform/common/services/clock/sam4l/osc.h ****  * \brief Crystal current selection for OSC32
 275:../../../platform/common/services/clock/sam4l/osc.h ****  *
 276:../../../platform/common/services/clock/sam4l/osc.h ****  * If not defined, the recommended value (300nA) are used.
 277:../../../platform/common/services/clock/sam4l/osc.h ****  */
 278:../../../platform/common/services/clock/sam4l/osc.h **** #ifndef BOARD_OSC32_SELCURR
 279:../../../platform/common/services/clock/sam4l/osc.h **** #   define BOARD_OSC32_SELCURR     BSCIF_OSCCTRL32_SELCURR(10)
 280:../../../platform/common/services/clock/sam4l/osc.h **** #endif
 281:../../../platform/common/services/clock/sam4l/osc.h **** 
 282:../../../platform/common/services/clock/sam4l/osc.h **** /**
 283:../../../platform/common/services/clock/sam4l/osc.h ****  * \name RC oscillator frequency limits
 284:../../../platform/common/services/clock/sam4l/osc.h ****  * The frequency of the internal RC oscillators may drift a bit as a
 285:../../../platform/common/services/clock/sam4l/osc.h ****  * result of temperature changes. These definitions provide upper and
 286:../../../platform/common/services/clock/sam4l/osc.h ****  * lower limits which may be used to calculate upper and lower limits of
 287:../../../platform/common/services/clock/sam4l/osc.h ****  * timeouts, derived clock frequencies, etc.
 288:../../../platform/common/services/clock/sam4l/osc.h ****  */
 289:../../../platform/common/services/clock/sam4l/osc.h **** //@{
 290:../../../platform/common/services/clock/sam4l/osc.h **** //! Nominal frequency of RCSYS in Hz
 291:../../../platform/common/services/clock/sam4l/osc.h **** #define OSC_RCSYS_NOMINAL_HZ    115000
 292:../../../platform/common/services/clock/sam4l/osc.h **** //! Minimum frequency of RCSYS in Hz
 293:../../../platform/common/services/clock/sam4l/osc.h **** #define OSC_RCSYS_MIN_HZ        100000
 294:../../../platform/common/services/clock/sam4l/osc.h **** //! Maximum frequency of RCSYS in Hz
 295:../../../platform/common/services/clock/sam4l/osc.h **** #define OSC_RCSYS_MAX_HZ        120000
 296:../../../platform/common/services/clock/sam4l/osc.h **** 
 297:../../../platform/common/services/clock/sam4l/osc.h **** //! Nominal frequency of RC32K in Hz
 298:../../../platform/common/services/clock/sam4l/osc.h **** #define OSC_RC32K_NOMINAL_HZ    32768
 299:../../../platform/common/services/clock/sam4l/osc.h **** //! Minimum frequency of RC32K in Hz
 300:../../../platform/common/services/clock/sam4l/osc.h **** #define OSC_RC32K_MIN_HZ        20000
 301:../../../platform/common/services/clock/sam4l/osc.h **** //! Maximum frequency of RC32K in Hz
 302:../../../platform/common/services/clock/sam4l/osc.h **** #define OSC_RC32K_MAX_HZ        44000
 303:../../../platform/common/services/clock/sam4l/osc.h **** 
 304:../../../platform/common/services/clock/sam4l/osc.h **** //! Nominal frequency of RC80M in Hz
 305:../../../platform/common/services/clock/sam4l/osc.h **** #define OSC_RC80M_NOMINAL_HZ    80000000
 306:../../../platform/common/services/clock/sam4l/osc.h **** 
 307:../../../platform/common/services/clock/sam4l/osc.h **** //! Nominal frequency of RCFAST4M in Hz
 308:../../../platform/common/services/clock/sam4l/osc.h **** #define OSC_RCFAST4M_NOMINAL_HZ 4000000
 309:../../../platform/common/services/clock/sam4l/osc.h **** 
 310:../../../platform/common/services/clock/sam4l/osc.h **** //! Nominal frequency of RCFAST8M in Hz
 311:../../../platform/common/services/clock/sam4l/osc.h **** #define OSC_RCFAST8M_NOMINAL_HZ 8000000
 312:../../../platform/common/services/clock/sam4l/osc.h **** 
 313:../../../platform/common/services/clock/sam4l/osc.h **** //! Nominal frequency of RCFAST12M in Hz
 314:../../../platform/common/services/clock/sam4l/osc.h **** #define OSC_RCFAST12M_NOMINAL_HZ 12000000
 315:../../../platform/common/services/clock/sam4l/osc.h **** 
 316:../../../platform/common/services/clock/sam4l/osc.h **** //! Nominal frequency of RC1M in Hz
 317:../../../platform/common/services/clock/sam4l/osc.h **** #define OSC_RC1M_NOMINAL_HZ     1000000
 318:../../../platform/common/services/clock/sam4l/osc.h **** //@}
 319:../../../platform/common/services/clock/sam4l/osc.h **** 
 320:../../../platform/common/services/clock/sam4l/osc.h **** #ifndef __ASSEMBLY__
 321:../../../platform/common/services/clock/sam4l/osc.h **** 
 322:../../../platform/common/services/clock/sam4l/osc.h **** #include <compiler.h>
 323:../../../platform/common/services/clock/sam4l/osc.h **** 
 324:../../../platform/common/services/clock/sam4l/osc.h **** extern void osc_priv_enable_osc0(void);
 325:../../../platform/common/services/clock/sam4l/osc.h **** extern void osc_priv_disable_osc0(void);
 326:../../../platform/common/services/clock/sam4l/osc.h **** extern void osc_priv_enable_osc32(void);
 327:../../../platform/common/services/clock/sam4l/osc.h **** extern void osc_priv_disable_osc32(void);
 328:../../../platform/common/services/clock/sam4l/osc.h **** extern void osc_priv_enable_rc32k(void);
 329:../../../platform/common/services/clock/sam4l/osc.h **** extern void osc_priv_disable_rc32k(void);
 330:../../../platform/common/services/clock/sam4l/osc.h **** extern void osc_priv_enable_rc80m(void);
 331:../../../platform/common/services/clock/sam4l/osc.h **** extern void osc_priv_disable_rc80m(void);
 332:../../../platform/common/services/clock/sam4l/osc.h **** extern void osc_priv_enable_rcfast(void);
 333:../../../platform/common/services/clock/sam4l/osc.h **** extern void osc_priv_disable_rcfast(void);
 334:../../../platform/common/services/clock/sam4l/osc.h **** extern void osc_priv_enable_rc1m(void);
 335:../../../platform/common/services/clock/sam4l/osc.h **** extern void osc_priv_disable_rc1m(void);
 336:../../../platform/common/services/clock/sam4l/osc.h **** 
 337:../../../platform/common/services/clock/sam4l/osc.h **** static inline void osc_enable(uint8_t id)
 338:../../../platform/common/services/clock/sam4l/osc.h **** {
 262              	 .loc 4 338 0
 263              	 .cfi_startproc
 264              	 
 265              	 
 266 0084 80B5     	 push {r7,lr}
 267              	.LCFI17:
 268              	 .cfi_def_cfa_offset 8
 269              	 .cfi_offset 7,-8
 270              	 .cfi_offset 14,-4
 271 0086 82B0     	 sub sp,sp,#8
 272              	.LCFI18:
 273              	 .cfi_def_cfa_offset 16
 274 0088 00AF     	 add r7,sp,#0
 275              	.LCFI19:
 276              	 .cfi_def_cfa_register 7
 277 008a 0346     	 mov r3,r0
 278 008c FB71     	 strb r3,[r7,#7]
 339:../../../platform/common/services/clock/sam4l/osc.h **** 	switch (id) {
 279              	 .loc 4 339 0
 280 008e FB79     	 ldrb r3,[r7,#7]
 281 0090 062B     	 cmp r3,#6
 282 0092 23D8     	 bhi .L24
 283 0094 01A2     	 adr r2,.L16
 284 0096 52F823F0 	 ldr pc,[r2,r3,lsl#2]
 285 009a 00BF     	 .p2align 2
 286              	.L16:
 287 009c B9000000 	 .word .L15+1
 288 00a0 BF000000 	 .word .L17+1
 289 00a4 C5000000 	 .word .L18+1
 290 00a8 CB000000 	 .word .L19+1
 291 00ac D1000000 	 .word .L20+1
 292 00b0 D7000000 	 .word .L21+1
 293 00b4 DD000000 	 .word .L24+1
 294              	 .p2align 1
 295              	.L15:
 340:../../../platform/common/services/clock/sam4l/osc.h **** #ifdef BOARD_OSC0_HZ
 341:../../../platform/common/services/clock/sam4l/osc.h **** 	case OSC_ID_OSC0:
 342:../../../platform/common/services/clock/sam4l/osc.h **** 		osc_priv_enable_osc0();
 296              	 .loc 4 342 0
 297 00b8 0B4B     	 ldr r3,.L25
 298 00ba 9847     	 blx r3
 299              	.LVL0:
 343:../../../platform/common/services/clock/sam4l/osc.h **** 		break;
 300              	 .loc 4 343 0
 301 00bc 0FE0     	 b .L23
 302              	.L17:
 344:../../../platform/common/services/clock/sam4l/osc.h **** #endif
 345:../../../platform/common/services/clock/sam4l/osc.h **** 
 346:../../../platform/common/services/clock/sam4l/osc.h **** #ifdef BOARD_OSC32_HZ
 347:../../../platform/common/services/clock/sam4l/osc.h **** 	case OSC_ID_OSC32:
 348:../../../platform/common/services/clock/sam4l/osc.h **** 		osc_priv_enable_osc32();
 303              	 .loc 4 348 0
 304 00be 0B4B     	 ldr r3,.L25+4
 305 00c0 9847     	 blx r3
 306              	.LVL1:
 349:../../../platform/common/services/clock/sam4l/osc.h **** 		break;
 307              	 .loc 4 349 0
 308 00c2 0CE0     	 b .L23
 309              	.L18:
 350:../../../platform/common/services/clock/sam4l/osc.h **** #endif
 351:../../../platform/common/services/clock/sam4l/osc.h **** 
 352:../../../platform/common/services/clock/sam4l/osc.h **** 	case OSC_ID_RC32K:
 353:../../../platform/common/services/clock/sam4l/osc.h **** 		osc_priv_enable_rc32k();
 310              	 .loc 4 353 0
 311 00c4 0A4B     	 ldr r3,.L25+8
 312 00c6 9847     	 blx r3
 313              	.LVL2:
 354:../../../platform/common/services/clock/sam4l/osc.h **** 		break;
 314              	 .loc 4 354 0
 315 00c8 09E0     	 b .L23
 316              	.L19:
 355:../../../platform/common/services/clock/sam4l/osc.h **** 
 356:../../../platform/common/services/clock/sam4l/osc.h **** 	case OSC_ID_RC80M:
 357:../../../platform/common/services/clock/sam4l/osc.h **** 		osc_priv_enable_rc80m();
 317              	 .loc 4 357 0
 318 00ca 0A4B     	 ldr r3,.L25+12
 319 00cc 9847     	 blx r3
 320              	.LVL3:
 358:../../../platform/common/services/clock/sam4l/osc.h **** 		break;
 321              	 .loc 4 358 0
 322 00ce 06E0     	 b .L23
 323              	.L20:
 359:../../../platform/common/services/clock/sam4l/osc.h **** 
 360:../../../platform/common/services/clock/sam4l/osc.h **** 	case OSC_ID_RCFAST:
 361:../../../platform/common/services/clock/sam4l/osc.h **** 		osc_priv_enable_rcfast();
 324              	 .loc 4 361 0
 325 00d0 094B     	 ldr r3,.L25+16
 326 00d2 9847     	 blx r3
 327              	.LVL4:
 362:../../../platform/common/services/clock/sam4l/osc.h **** 		break;
 328              	 .loc 4 362 0
 329 00d4 03E0     	 b .L23
 330              	.L21:
 363:../../../platform/common/services/clock/sam4l/osc.h **** 
 364:../../../platform/common/services/clock/sam4l/osc.h **** 	case OSC_ID_RC1M:
 365:../../../platform/common/services/clock/sam4l/osc.h **** 		osc_priv_enable_rc1m();
 331              	 .loc 4 365 0
 332 00d6 094B     	 ldr r3,.L25+20
 333 00d8 9847     	 blx r3
 334              	.LVL5:
 366:../../../platform/common/services/clock/sam4l/osc.h **** 		break;
 335              	 .loc 4 366 0
 336 00da 00E0     	 b .L23
 337              	.L24:
 367:../../../platform/common/services/clock/sam4l/osc.h **** 
 368:../../../platform/common/services/clock/sam4l/osc.h **** 	case OSC_ID_RCSYS:
 369:../../../platform/common/services/clock/sam4l/osc.h **** 		/* RCSYS is always running */
 370:../../../platform/common/services/clock/sam4l/osc.h **** 		break;
 371:../../../platform/common/services/clock/sam4l/osc.h **** 
 372:../../../platform/common/services/clock/sam4l/osc.h **** 	default:
 373:../../../platform/common/services/clock/sam4l/osc.h **** 		/* unhandled_case(id); */
 374:../../../platform/common/services/clock/sam4l/osc.h **** 		break;
 338              	 .loc 4 374 0
 339 00dc 00BF     	 nop
 340              	.L23:
 375:../../../platform/common/services/clock/sam4l/osc.h **** 	}
 376:../../../platform/common/services/clock/sam4l/osc.h **** }
 341              	 .loc 4 376 0
 342 00de 00BF     	 nop
 343 00e0 0837     	 adds r7,r7,#8
 344              	.LCFI20:
 345              	 .cfi_def_cfa_offset 8
 346 00e2 BD46     	 mov sp,r7
 347              	.LCFI21:
 348              	 .cfi_def_cfa_register 13
 349              	 
 350 00e4 80BD     	 pop {r7,pc}
 351              	.L26:
 352 00e6 00BF     	 .align 2
 353              	.L25:
 354 00e8 00000000 	 .word osc_priv_enable_osc0
 355 00ec 00000000 	 .word osc_priv_enable_osc32
 356 00f0 00000000 	 .word osc_priv_enable_rc32k
 357 00f4 00000000 	 .word osc_priv_enable_rc80m
 358 00f8 00000000 	 .word osc_priv_enable_rcfast
 359 00fc 00000000 	 .word osc_priv_enable_rc1m
 360              	 .cfi_endproc
 361              	.LFE126:
 363              	 .align 1
 364              	 .syntax unified
 365              	 .thumb
 366              	 .thumb_func
 367              	 .fpu softvfp
 369              	osc_is_ready:
 370              	.LFB128:
 377:../../../platform/common/services/clock/sam4l/osc.h **** 
 378:../../../platform/common/services/clock/sam4l/osc.h **** static inline void osc_disable(uint8_t id)
 379:../../../platform/common/services/clock/sam4l/osc.h **** {
 380:../../../platform/common/services/clock/sam4l/osc.h **** 	switch (id) {
 381:../../../platform/common/services/clock/sam4l/osc.h **** #ifdef BOARD_OSC0_HZ
 382:../../../platform/common/services/clock/sam4l/osc.h **** 	case OSC_ID_OSC0:
 383:../../../platform/common/services/clock/sam4l/osc.h **** 		osc_priv_disable_osc0();
 384:../../../platform/common/services/clock/sam4l/osc.h **** 		break;
 385:../../../platform/common/services/clock/sam4l/osc.h **** #endif
 386:../../../platform/common/services/clock/sam4l/osc.h **** 
 387:../../../platform/common/services/clock/sam4l/osc.h **** #ifdef BOARD_OSC32_HZ
 388:../../../platform/common/services/clock/sam4l/osc.h **** 	case OSC_ID_OSC32:
 389:../../../platform/common/services/clock/sam4l/osc.h **** 		osc_priv_disable_osc32();
 390:../../../platform/common/services/clock/sam4l/osc.h **** 		break;
 391:../../../platform/common/services/clock/sam4l/osc.h **** #endif
 392:../../../platform/common/services/clock/sam4l/osc.h **** 
 393:../../../platform/common/services/clock/sam4l/osc.h **** 	case OSC_ID_RC32K:
 394:../../../platform/common/services/clock/sam4l/osc.h **** 		osc_priv_disable_rc32k();
 395:../../../platform/common/services/clock/sam4l/osc.h **** 		break;
 396:../../../platform/common/services/clock/sam4l/osc.h **** 
 397:../../../platform/common/services/clock/sam4l/osc.h **** 	case OSC_ID_RC80M:
 398:../../../platform/common/services/clock/sam4l/osc.h **** 		osc_priv_disable_rc80m();
 399:../../../platform/common/services/clock/sam4l/osc.h **** 		break;
 400:../../../platform/common/services/clock/sam4l/osc.h **** 
 401:../../../platform/common/services/clock/sam4l/osc.h **** 	case OSC_ID_RCFAST:
 402:../../../platform/common/services/clock/sam4l/osc.h **** 		osc_priv_disable_rcfast();
 403:../../../platform/common/services/clock/sam4l/osc.h **** 		break;
 404:../../../platform/common/services/clock/sam4l/osc.h **** 
 405:../../../platform/common/services/clock/sam4l/osc.h **** 	case OSC_ID_RC1M:
 406:../../../platform/common/services/clock/sam4l/osc.h **** 		osc_priv_disable_rc1m();
 407:../../../platform/common/services/clock/sam4l/osc.h **** 		break;
 408:../../../platform/common/services/clock/sam4l/osc.h **** 
 409:../../../platform/common/services/clock/sam4l/osc.h **** 	case OSC_ID_RCSYS:
 410:../../../platform/common/services/clock/sam4l/osc.h **** 		/* RCSYS is always running */
 411:../../../platform/common/services/clock/sam4l/osc.h **** 		break;
 412:../../../platform/common/services/clock/sam4l/osc.h **** 
 413:../../../platform/common/services/clock/sam4l/osc.h **** 	default:
 414:../../../platform/common/services/clock/sam4l/osc.h **** 		/* unhandled_case(id); */
 415:../../../platform/common/services/clock/sam4l/osc.h **** 		break;
 416:../../../platform/common/services/clock/sam4l/osc.h **** 	}
 417:../../../platform/common/services/clock/sam4l/osc.h **** }
 418:../../../platform/common/services/clock/sam4l/osc.h **** 
 419:../../../platform/common/services/clock/sam4l/osc.h **** static inline bool osc_is_ready(uint8_t id)
 420:../../../platform/common/services/clock/sam4l/osc.h **** {
 371              	 .loc 4 420 0
 372              	 .cfi_startproc
 373              	 
 374              	 
 375              	 
 376 0100 80B4     	 push {r7}
 377              	.LCFI22:
 378              	 .cfi_def_cfa_offset 4
 379              	 .cfi_offset 7,-4
 380 0102 83B0     	 sub sp,sp,#12
 381              	.LCFI23:
 382              	 .cfi_def_cfa_offset 16
 383 0104 00AF     	 add r7,sp,#0
 384              	.LCFI24:
 385              	 .cfi_def_cfa_register 7
 386 0106 0346     	 mov r3,r0
 387 0108 FB71     	 strb r3,[r7,#7]
 421:../../../platform/common/services/clock/sam4l/osc.h **** 	switch (id) {
 388              	 .loc 4 421 0
 389 010a FB79     	 ldrb r3,[r7,#7]
 390 010c 062B     	 cmp r3,#6
 391 010e 4FD8     	 bhi .L28
 392 0110 01A2     	 adr r2,.L30
 393 0112 52F823F0 	 ldr pc,[r2,r3,lsl#2]
 394 0116 00BF     	 .p2align 2
 395              	.L30:
 396 0118 35010000 	 .word .L29+1
 397 011c 49010000 	 .word .L31+1
 398 0120 5D010000 	 .word .L32+1
 399 0124 71010000 	 .word .L33+1
 400 0128 85010000 	 .word .L34+1
 401 012c 99010000 	 .word .L35+1
 402 0130 AD010000 	 .word .L36+1
 403              	 .p2align 1
 404              	.L29:
 422:../../../platform/common/services/clock/sam4l/osc.h **** #ifdef BOARD_OSC0_HZ
 423:../../../platform/common/services/clock/sam4l/osc.h **** 	case OSC_ID_OSC0:
 424:../../../platform/common/services/clock/sam4l/osc.h **** 		return !!(SCIF->SCIF_PCLKSR & SCIF_PCLKSR_OSC0RDY);
 405              	 .loc 4 424 0
 406 0134 214B     	 ldr r3,.L38
 407 0136 5B69     	 ldr r3,[r3,#20]
 408 0138 03F00103 	 and r3,r3,#1
 409 013c 002B     	 cmp r3,#0
 410 013e 14BF     	 ite ne
 411 0140 0123     	 movne r3,#1
 412 0142 0023     	 moveq r3,#0
 413 0144 DBB2     	 uxtb r3,r3
 414 0146 34E0     	 b .L37
 415              	.L31:
 425:../../../platform/common/services/clock/sam4l/osc.h **** #endif
 426:../../../platform/common/services/clock/sam4l/osc.h **** 
 427:../../../platform/common/services/clock/sam4l/osc.h **** #ifdef BOARD_OSC32_HZ
 428:../../../platform/common/services/clock/sam4l/osc.h **** 	case OSC_ID_OSC32:
 429:../../../platform/common/services/clock/sam4l/osc.h **** 		return !!(BSCIF->BSCIF_PCLKSR & BSCIF_PCLKSR_OSC32RDY);
 416              	 .loc 4 429 0
 417 0148 1D4B     	 ldr r3,.L38+4
 418 014a 5B69     	 ldr r3,[r3,#20]
 419 014c 03F00103 	 and r3,r3,#1
 420 0150 002B     	 cmp r3,#0
 421 0152 14BF     	 ite ne
 422 0154 0123     	 movne r3,#1
 423 0156 0023     	 moveq r3,#0
 424 0158 DBB2     	 uxtb r3,r3
 425 015a 2AE0     	 b .L37
 426              	.L32:
 430:../../../platform/common/services/clock/sam4l/osc.h **** #endif
 431:../../../platform/common/services/clock/sam4l/osc.h **** 
 432:../../../platform/common/services/clock/sam4l/osc.h **** 	case OSC_ID_RC32K:
 433:../../../platform/common/services/clock/sam4l/osc.h **** 		return !!(BSCIF->BSCIF_RC32KCR & (BSCIF_RC32KCR_EN));
 427              	 .loc 4 433 0
 428 015c 184B     	 ldr r3,.L38+4
 429 015e 5B6A     	 ldr r3,[r3,#36]
 430 0160 03F00103 	 and r3,r3,#1
 431 0164 002B     	 cmp r3,#0
 432 0166 14BF     	 ite ne
 433 0168 0123     	 movne r3,#1
 434 016a 0023     	 moveq r3,#0
 435 016c DBB2     	 uxtb r3,r3
 436 016e 20E0     	 b .L37
 437              	.L33:
 434:../../../platform/common/services/clock/sam4l/osc.h **** 
 435:../../../platform/common/services/clock/sam4l/osc.h **** 	case OSC_ID_RC80M:
 436:../../../platform/common/services/clock/sam4l/osc.h **** 		return !!(SCIF->SCIF_RC80MCR & (SCIF_RC80MCR_EN));
 438              	 .loc 4 436 0
 439 0170 124B     	 ldr r3,.L38
 440 0172 1B6D     	 ldr r3,[r3,#80]
 441 0174 03F00103 	 and r3,r3,#1
 442 0178 002B     	 cmp r3,#0
 443 017a 14BF     	 ite ne
 444 017c 0123     	 movne r3,#1
 445 017e 0023     	 moveq r3,#0
 446 0180 DBB2     	 uxtb r3,r3
 447 0182 16E0     	 b .L37
 448              	.L34:
 437:../../../platform/common/services/clock/sam4l/osc.h **** 
 438:../../../platform/common/services/clock/sam4l/osc.h **** 	case OSC_ID_RCFAST:
 439:../../../platform/common/services/clock/sam4l/osc.h **** 		return !!(SCIF->SCIF_RCFASTCFG & (SCIF_RCFASTCFG_EN));
 449              	 .loc 4 439 0
 450 0184 0D4B     	 ldr r3,.L38
 451 0186 9B6C     	 ldr r3,[r3,#72]
 452 0188 03F00103 	 and r3,r3,#1
 453 018c 002B     	 cmp r3,#0
 454 018e 14BF     	 ite ne
 455 0190 0123     	 movne r3,#1
 456 0192 0023     	 moveq r3,#0
 457 0194 DBB2     	 uxtb r3,r3
 458 0196 0CE0     	 b .L37
 459              	.L35:
 440:../../../platform/common/services/clock/sam4l/osc.h **** 
 441:../../../platform/common/services/clock/sam4l/osc.h **** 	case OSC_ID_RC1M:
 442:../../../platform/common/services/clock/sam4l/osc.h **** 		return !!(BSCIF->BSCIF_RC1MCR & (BSCIF_RC1MCR_CLKOE));
 460              	 .loc 4 442 0
 461 0198 094B     	 ldr r3,.L38+4
 462 019a 9B6D     	 ldr r3,[r3,#88]
 463 019c 03F00103 	 and r3,r3,#1
 464 01a0 002B     	 cmp r3,#0
 465 01a2 14BF     	 ite ne
 466 01a4 0123     	 movne r3,#1
 467 01a6 0023     	 moveq r3,#0
 468 01a8 DBB2     	 uxtb r3,r3
 469 01aa 02E0     	 b .L37
 470              	.L36:
 443:../../../platform/common/services/clock/sam4l/osc.h **** 
 444:../../../platform/common/services/clock/sam4l/osc.h **** 	case OSC_ID_RCSYS:
 445:../../../platform/common/services/clock/sam4l/osc.h **** 		/* RCSYS is always ready */
 446:../../../platform/common/services/clock/sam4l/osc.h **** 		return true;
 471              	 .loc 4 446 0
 472 01ac 0123     	 movs r3,#1
 473 01ae 00E0     	 b .L37
 474              	.L28:
 447:../../../platform/common/services/clock/sam4l/osc.h **** 
 448:../../../platform/common/services/clock/sam4l/osc.h **** 	default:
 449:../../../platform/common/services/clock/sam4l/osc.h **** 		/* unhandled_case(id); */
 450:../../../platform/common/services/clock/sam4l/osc.h **** 		return false;
 475              	 .loc 4 450 0
 476 01b0 0023     	 movs r3,#0
 477              	.L37:
 451:../../../platform/common/services/clock/sam4l/osc.h **** 	}
 452:../../../platform/common/services/clock/sam4l/osc.h **** }
 478              	 .loc 4 452 0
 479 01b2 1846     	 mov r0,r3
 480 01b4 0C37     	 adds r7,r7,#12
 481              	.LCFI25:
 482              	 .cfi_def_cfa_offset 4
 483 01b6 BD46     	 mov sp,r7
 484              	.LCFI26:
 485              	 .cfi_def_cfa_register 13
 486              	 
 487 01b8 80BC     	 pop {r7}
 488              	.LCFI27:
 489              	 .cfi_restore 7
 490              	 .cfi_def_cfa_offset 0
 491 01ba 7047     	 bx lr
 492              	.L39:
 493              	 .align 2
 494              	.L38:
 495 01bc 00080E40 	 .word 1074661376
 496 01c0 00040F40 	 .word 1074725888
 497              	 .cfi_endproc
 498              	.LFE128:
 500              	 .align 1
 501              	 .syntax unified
 502              	 .thumb
 503              	 .thumb_func
 504              	 .fpu softvfp
 506              	osc_wait_ready:
 507              	.LFB130:
 508              	 .file 5 "../../../platform/common/services/clock/osc.h"
   1:../../../platform/common/services/clock/osc.h **** /**
   2:../../../platform/common/services/clock/osc.h ****  * \file
   3:../../../platform/common/services/clock/osc.h ****  *
   4:../../../platform/common/services/clock/osc.h ****  * \brief Oscillator management
   5:../../../platform/common/services/clock/osc.h ****  *
   6:../../../platform/common/services/clock/osc.h ****  * Copyright (c) 2010-2014 Atmel Corporation. All rights reserved.
   7:../../../platform/common/services/clock/osc.h ****  *
   8:../../../platform/common/services/clock/osc.h ****  * \asf_license_start
   9:../../../platform/common/services/clock/osc.h ****  *
  10:../../../platform/common/services/clock/osc.h ****  * \page License
  11:../../../platform/common/services/clock/osc.h ****  *
  12:../../../platform/common/services/clock/osc.h ****  * Redistribution and use in source and binary forms, with or without
  13:../../../platform/common/services/clock/osc.h ****  * modification, are permitted provided that the following conditions are met:
  14:../../../platform/common/services/clock/osc.h ****  *
  15:../../../platform/common/services/clock/osc.h ****  * 1. Redistributions of source code must retain the above copyright notice,
  16:../../../platform/common/services/clock/osc.h ****  *    this list of conditions and the following disclaimer.
  17:../../../platform/common/services/clock/osc.h ****  *
  18:../../../platform/common/services/clock/osc.h ****  * 2. Redistributions in binary form must reproduce the above copyright notice,
  19:../../../platform/common/services/clock/osc.h ****  *    this list of conditions and the following disclaimer in the documentation
  20:../../../platform/common/services/clock/osc.h ****  *    and/or other materials provided with the distribution.
  21:../../../platform/common/services/clock/osc.h ****  *
  22:../../../platform/common/services/clock/osc.h ****  * 3. The name of Atmel may not be used to endorse or promote products derived
  23:../../../platform/common/services/clock/osc.h ****  *    from this software without specific prior written permission.
  24:../../../platform/common/services/clock/osc.h ****  *
  25:../../../platform/common/services/clock/osc.h ****  * 4. This software may only be redistributed and used in connection with an
  26:../../../platform/common/services/clock/osc.h ****  *    Atmel microcontroller product.
  27:../../../platform/common/services/clock/osc.h ****  *
  28:../../../platform/common/services/clock/osc.h ****  * THIS SOFTWARE IS PROVIDED BY ATMEL "AS IS" AND ANY EXPRESS OR IMPLIED
  29:../../../platform/common/services/clock/osc.h ****  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
  30:../../../platform/common/services/clock/osc.h ****  * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE
  31:../../../platform/common/services/clock/osc.h ****  * EXPRESSLY AND SPECIFICALLY DISCLAIMED. IN NO EVENT SHALL ATMEL BE LIABLE FOR
  32:../../../platform/common/services/clock/osc.h ****  * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  33:../../../platform/common/services/clock/osc.h ****  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
  34:../../../platform/common/services/clock/osc.h ****  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
  35:../../../platform/common/services/clock/osc.h ****  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
  36:../../../platform/common/services/clock/osc.h ****  * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
  37:../../../platform/common/services/clock/osc.h ****  * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  38:../../../platform/common/services/clock/osc.h ****  * POSSIBILITY OF SUCH DAMAGE.
  39:../../../platform/common/services/clock/osc.h ****  *
  40:../../../platform/common/services/clock/osc.h ****  * \asf_license_stop
  41:../../../platform/common/services/clock/osc.h ****  *
  42:../../../platform/common/services/clock/osc.h ****  */
  43:../../../platform/common/services/clock/osc.h **** #ifndef OSC_H_INCLUDED
  44:../../../platform/common/services/clock/osc.h **** #define OSC_H_INCLUDED
  45:../../../platform/common/services/clock/osc.h **** 
  46:../../../platform/common/services/clock/osc.h **** #include "parts.h"
  47:../../../platform/common/services/clock/osc.h **** #include "conf_clock.h"
  48:../../../platform/common/services/clock/osc.h **** 
  49:../../../platform/common/services/clock/osc.h **** #if SAM3S
  50:../../../platform/common/services/clock/osc.h **** # include "sam3s/osc.h"
  51:../../../platform/common/services/clock/osc.h **** #elif SAM3XA
  52:../../../platform/common/services/clock/osc.h **** # include "sam3x/osc.h"
  53:../../../platform/common/services/clock/osc.h **** #elif SAM3U
  54:../../../platform/common/services/clock/osc.h **** # include "sam3u/osc.h"
  55:../../../platform/common/services/clock/osc.h **** #elif SAM3N
  56:../../../platform/common/services/clock/osc.h **** # include "sam3n/osc.h"
  57:../../../platform/common/services/clock/osc.h **** #elif SAM4S
  58:../../../platform/common/services/clock/osc.h **** # include "sam4s/osc.h"
  59:../../../platform/common/services/clock/osc.h **** #elif SAM4E
  60:../../../platform/common/services/clock/osc.h **** # include "sam4e/osc.h"
  61:../../../platform/common/services/clock/osc.h **** #elif SAM4C
  62:../../../platform/common/services/clock/osc.h **** # include "sam4c/osc.h"
  63:../../../platform/common/services/clock/osc.h **** #elif SAM4CM
  64:../../../platform/common/services/clock/osc.h **** # include "sam4cm/osc.h"
  65:../../../platform/common/services/clock/osc.h **** #elif SAM4CP
  66:../../../platform/common/services/clock/osc.h **** # include "sam4cp/osc.h"
  67:../../../platform/common/services/clock/osc.h **** #elif SAM4L
  68:../../../platform/common/services/clock/osc.h **** # include "sam4l/osc.h"
  69:../../../platform/common/services/clock/osc.h **** #elif SAM4N
  70:../../../platform/common/services/clock/osc.h **** # include "sam4n/osc.h"
  71:../../../platform/common/services/clock/osc.h **** #elif SAMG
  72:../../../platform/common/services/clock/osc.h **** # include "samg/osc.h"
  73:../../../platform/common/services/clock/osc.h **** #elif (UC3A0 || UC3A1)
  74:../../../platform/common/services/clock/osc.h **** # include "uc3a0_a1/osc.h"
  75:../../../platform/common/services/clock/osc.h **** #elif UC3A3
  76:../../../platform/common/services/clock/osc.h **** # include "uc3a3_a4/osc.h"
  77:../../../platform/common/services/clock/osc.h **** #elif UC3B
  78:../../../platform/common/services/clock/osc.h **** # include "uc3b0_b1/osc.h"
  79:../../../platform/common/services/clock/osc.h **** #elif UC3C
  80:../../../platform/common/services/clock/osc.h **** # include "uc3c/osc.h"
  81:../../../platform/common/services/clock/osc.h **** #elif UC3D
  82:../../../platform/common/services/clock/osc.h **** # include "uc3d/osc.h"
  83:../../../platform/common/services/clock/osc.h **** #elif UC3L
  84:../../../platform/common/services/clock/osc.h **** # include "uc3l/osc.h"
  85:../../../platform/common/services/clock/osc.h **** #elif XMEGA
  86:../../../platform/common/services/clock/osc.h **** # include "xmega/osc.h"
  87:../../../platform/common/services/clock/osc.h **** #else
  88:../../../platform/common/services/clock/osc.h **** # error Unsupported chip type
  89:../../../platform/common/services/clock/osc.h **** #endif
  90:../../../platform/common/services/clock/osc.h **** 
  91:../../../platform/common/services/clock/osc.h **** /**
  92:../../../platform/common/services/clock/osc.h ****  * \ingroup clk_group
  93:../../../platform/common/services/clock/osc.h ****  * \defgroup osc_group Oscillator Management
  94:../../../platform/common/services/clock/osc.h ****  *
  95:../../../platform/common/services/clock/osc.h ****  * This group contains functions and definitions related to configuring
  96:../../../platform/common/services/clock/osc.h ****  * and enabling/disabling on-chip oscillators. Internal RC-oscillators,
  97:../../../platform/common/services/clock/osc.h ****  * external crystal oscillators and external clock generators are
  98:../../../platform/common/services/clock/osc.h ****  * supported by this module. What all of these have in common is that
  99:../../../platform/common/services/clock/osc.h ****  * they swing at a fixed, nominal frequency which is normally not
 100:../../../platform/common/services/clock/osc.h ****  * adjustable.
 101:../../../platform/common/services/clock/osc.h ****  *
 102:../../../platform/common/services/clock/osc.h ****  * \par Example: Enabling an oscillator
 103:../../../platform/common/services/clock/osc.h ****  *
 104:../../../platform/common/services/clock/osc.h ****  * The following example demonstrates how to enable the external
 105:../../../platform/common/services/clock/osc.h ****  * oscillator on XMEGA A and wait for it to be ready to use. The
 106:../../../platform/common/services/clock/osc.h ****  * oscillator identifiers are platform-specific, so while the same
 107:../../../platform/common/services/clock/osc.h ****  * procedure is used on all platforms, the parameter to osc_enable()
 108:../../../platform/common/services/clock/osc.h ****  * will be different from device to device.
 109:../../../platform/common/services/clock/osc.h ****  * \code
 110:../../../platform/common/services/clock/osc.h **** 	osc_enable(OSC_ID_XOSC);
 111:../../../platform/common/services/clock/osc.h **** 	osc_wait_ready(OSC_ID_XOSC); \endcode
 112:../../../platform/common/services/clock/osc.h ****  *
 113:../../../platform/common/services/clock/osc.h ****  * \section osc_group_board Board-specific Definitions
 114:../../../platform/common/services/clock/osc.h ****  * If external oscillators are used, the board code must provide the
 115:../../../platform/common/services/clock/osc.h ****  * following definitions for each of those:
 116:../../../platform/common/services/clock/osc.h ****  *   - \b BOARD_<osc name>_HZ: The nominal frequency of the oscillator.
 117:../../../platform/common/services/clock/osc.h ****  *   - \b BOARD_<osc name>_STARTUP_US: The startup time of the
 118:../../../platform/common/services/clock/osc.h ****  *     oscillator in microseconds.
 119:../../../platform/common/services/clock/osc.h ****  *   - \b BOARD_<osc name>_TYPE: The type of oscillator connected, i.e.
 120:../../../platform/common/services/clock/osc.h ****  *     whether it's a crystal or external clock, and sometimes what kind
 121:../../../platform/common/services/clock/osc.h ****  *     of crystal it is. The meaning of this value is platform-specific.
 122:../../../platform/common/services/clock/osc.h ****  *
 123:../../../platform/common/services/clock/osc.h ****  * @{
 124:../../../platform/common/services/clock/osc.h ****  */
 125:../../../platform/common/services/clock/osc.h **** 
 126:../../../platform/common/services/clock/osc.h **** //! \name Oscillator Management
 127:../../../platform/common/services/clock/osc.h **** //@{
 128:../../../platform/common/services/clock/osc.h **** /**
 129:../../../platform/common/services/clock/osc.h ****  * \fn void osc_enable(uint8_t id)
 130:../../../platform/common/services/clock/osc.h ****  * \brief Enable oscillator \a id
 131:../../../platform/common/services/clock/osc.h ****  *
 132:../../../platform/common/services/clock/osc.h ****  * The startup time and mode value is automatically determined based on
 133:../../../platform/common/services/clock/osc.h ****  * definitions in the board code.
 134:../../../platform/common/services/clock/osc.h ****  */
 135:../../../platform/common/services/clock/osc.h **** /**
 136:../../../platform/common/services/clock/osc.h ****  * \fn void osc_disable(uint8_t id)
 137:../../../platform/common/services/clock/osc.h ****  * \brief Disable oscillator \a id
 138:../../../platform/common/services/clock/osc.h ****  */
 139:../../../platform/common/services/clock/osc.h **** /**
 140:../../../platform/common/services/clock/osc.h ****  * \fn osc_is_ready(uint8_t id)
 141:../../../platform/common/services/clock/osc.h ****  * \brief Determine whether oscillator \a id is ready.
 142:../../../platform/common/services/clock/osc.h ****  * \retval true Oscillator \a id is running and ready to use as a clock
 143:../../../platform/common/services/clock/osc.h ****  * source.
 144:../../../platform/common/services/clock/osc.h ****  * \retval false Oscillator \a id is not running.
 145:../../../platform/common/services/clock/osc.h ****  */
 146:../../../platform/common/services/clock/osc.h **** /**
 147:../../../platform/common/services/clock/osc.h ****  * \fn uint32_t osc_get_rate(uint8_t id)
 148:../../../platform/common/services/clock/osc.h ****  * \brief Return the frequency of oscillator \a id in Hz
 149:../../../platform/common/services/clock/osc.h ****  */
 150:../../../platform/common/services/clock/osc.h **** 
 151:../../../platform/common/services/clock/osc.h **** #ifndef __ASSEMBLY__
 152:../../../platform/common/services/clock/osc.h **** 
 153:../../../platform/common/services/clock/osc.h **** /**
 154:../../../platform/common/services/clock/osc.h ****  * \brief Wait until the oscillator identified by \a id is ready
 155:../../../platform/common/services/clock/osc.h ****  *
 156:../../../platform/common/services/clock/osc.h ****  * This function will busy-wait for the oscillator identified by \a id
 157:../../../platform/common/services/clock/osc.h ****  * to become stable and ready to use as a clock source.
 158:../../../platform/common/services/clock/osc.h ****  *
 159:../../../platform/common/services/clock/osc.h ****  * \param id A number identifying the oscillator to wait for.
 160:../../../platform/common/services/clock/osc.h ****  */
 161:../../../platform/common/services/clock/osc.h **** static inline void osc_wait_ready(uint8_t id)
 162:../../../platform/common/services/clock/osc.h **** {
 509              	 .loc 5 162 0
 510              	 .cfi_startproc
 511              	 
 512              	 
 513 01c4 80B5     	 push {r7,lr}
 514              	.LCFI28:
 515              	 .cfi_def_cfa_offset 8
 516              	 .cfi_offset 7,-8
 517              	 .cfi_offset 14,-4
 518 01c6 82B0     	 sub sp,sp,#8
 519              	.LCFI29:
 520              	 .cfi_def_cfa_offset 16
 521 01c8 00AF     	 add r7,sp,#0
 522              	.LCFI30:
 523              	 .cfi_def_cfa_register 7
 524 01ca 0346     	 mov r3,r0
 525 01cc FB71     	 strb r3,[r7,#7]
 163:../../../platform/common/services/clock/osc.h **** 	while (!osc_is_ready(id)) {
 526              	 .loc 5 163 0
 527 01ce 00BF     	 nop
 528              	.L41:
 529              	 .loc 5 163 0 is_stmt 0 discriminator 1
 530 01d0 FB79     	 ldrb r3,[r7,#7]
 531 01d2 1846     	 mov r0,r3
 532 01d4 FFF794FF 	 bl osc_is_ready
 533 01d8 0346     	 mov r3,r0
 534 01da 83F00103 	 eor r3,r3,#1
 535 01de DBB2     	 uxtb r3,r3
 536 01e0 002B     	 cmp r3,#0
 537 01e2 F5D1     	 bne .L41
 164:../../../platform/common/services/clock/osc.h **** 		/* Do nothing */
 165:../../../platform/common/services/clock/osc.h **** 	}
 166:../../../platform/common/services/clock/osc.h **** }
 538              	 .loc 5 166 0 is_stmt 1
 539 01e4 00BF     	 nop
 540 01e6 0837     	 adds r7,r7,#8
 541              	.LCFI31:
 542              	 .cfi_def_cfa_offset 8
 543 01e8 BD46     	 mov sp,r7
 544              	.LCFI32:
 545              	 .cfi_def_cfa_register 13
 546              	 
 547 01ea 80BD     	 pop {r7,pc}
 548              	 .cfi_endproc
 549              	.LFE130:
 551              	 .align 1
 552              	 .syntax unified
 553              	 .thumb
 554              	 .thumb_func
 555              	 .fpu softvfp
 557              	genclk_config_defaults:
 558              	.LFB139:
 559              	 .file 6 "../../../platform/common/services/clock/sam4l/genclk.h"
   1:../../../platform/common/services/clock/sam4l/genclk.h **** /**
   2:../../../platform/common/services/clock/sam4l/genclk.h ****  * \file
   3:../../../platform/common/services/clock/sam4l/genclk.h ****  *
   4:../../../platform/common/services/clock/sam4l/genclk.h ****  * \brief Chip-specific generic clock management
   5:../../../platform/common/services/clock/sam4l/genclk.h ****  *
   6:../../../platform/common/services/clock/sam4l/genclk.h ****  * Copyright (c) 2012 Atmel Corporation. All rights reserved.
   7:../../../platform/common/services/clock/sam4l/genclk.h ****  *
   8:../../../platform/common/services/clock/sam4l/genclk.h ****  * \asf_license_start
   9:../../../platform/common/services/clock/sam4l/genclk.h ****  *
  10:../../../platform/common/services/clock/sam4l/genclk.h ****  * \page License
  11:../../../platform/common/services/clock/sam4l/genclk.h ****  *
  12:../../../platform/common/services/clock/sam4l/genclk.h ****  * Redistribution and use in source and binary forms, with or without
  13:../../../platform/common/services/clock/sam4l/genclk.h ****  * modification, are permitted provided that the following conditions are met:
  14:../../../platform/common/services/clock/sam4l/genclk.h ****  *
  15:../../../platform/common/services/clock/sam4l/genclk.h ****  * 1. Redistributions of source code must retain the above copyright notice,
  16:../../../platform/common/services/clock/sam4l/genclk.h ****  *    this list of conditions and the following disclaimer.
  17:../../../platform/common/services/clock/sam4l/genclk.h ****  *
  18:../../../platform/common/services/clock/sam4l/genclk.h ****  * 2. Redistributions in binary form must reproduce the above copyright notice,
  19:../../../platform/common/services/clock/sam4l/genclk.h ****  *    this list of conditions and the following disclaimer in the documentation
  20:../../../platform/common/services/clock/sam4l/genclk.h ****  *    and/or other materials provided with the distribution.
  21:../../../platform/common/services/clock/sam4l/genclk.h ****  *
  22:../../../platform/common/services/clock/sam4l/genclk.h ****  * 3. The name of Atmel may not be used to endorse or promote products derived
  23:../../../platform/common/services/clock/sam4l/genclk.h ****  *    from this software without specific prior written permission.
  24:../../../platform/common/services/clock/sam4l/genclk.h ****  *
  25:../../../platform/common/services/clock/sam4l/genclk.h ****  * 4. This software may only be redistributed and used in connection with an
  26:../../../platform/common/services/clock/sam4l/genclk.h ****  *    Atmel microcontroller product.
  27:../../../platform/common/services/clock/sam4l/genclk.h ****  *
  28:../../../platform/common/services/clock/sam4l/genclk.h ****  * THIS SOFTWARE IS PROVIDED BY ATMEL "AS IS" AND ANY EXPRESS OR IMPLIED
  29:../../../platform/common/services/clock/sam4l/genclk.h ****  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
  30:../../../platform/common/services/clock/sam4l/genclk.h ****  * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE
  31:../../../platform/common/services/clock/sam4l/genclk.h ****  * EXPRESSLY AND SPECIFICALLY DISCLAIMED. IN NO EVENT SHALL ATMEL BE LIABLE FOR
  32:../../../platform/common/services/clock/sam4l/genclk.h ****  * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  33:../../../platform/common/services/clock/sam4l/genclk.h ****  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
  34:../../../platform/common/services/clock/sam4l/genclk.h ****  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
  35:../../../platform/common/services/clock/sam4l/genclk.h ****  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
  36:../../../platform/common/services/clock/sam4l/genclk.h ****  * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
  37:../../../platform/common/services/clock/sam4l/genclk.h ****  * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  38:../../../platform/common/services/clock/sam4l/genclk.h ****  * POSSIBILITY OF SUCH DAMAGE.
  39:../../../platform/common/services/clock/sam4l/genclk.h ****  *
  40:../../../platform/common/services/clock/sam4l/genclk.h ****  * \asf_license_stop
  41:../../../platform/common/services/clock/sam4l/genclk.h ****  *
  42:../../../platform/common/services/clock/sam4l/genclk.h ****  */
  43:../../../platform/common/services/clock/sam4l/genclk.h **** #ifndef CHIP_GENCLK_H_INCLUDED
  44:../../../platform/common/services/clock/sam4l/genclk.h **** #define CHIP_GENCLK_H_INCLUDED
  45:../../../platform/common/services/clock/sam4l/genclk.h **** 
  46:../../../platform/common/services/clock/sam4l/genclk.h **** #ifdef __cplusplus
  47:../../../platform/common/services/clock/sam4l/genclk.h **** extern "C" {
  48:../../../platform/common/services/clock/sam4l/genclk.h **** #endif
  49:../../../platform/common/services/clock/sam4l/genclk.h **** 
  50:../../../platform/common/services/clock/sam4l/genclk.h **** // dfll.h is not included to avoid a circular dependency.
  51:../../../platform/common/services/clock/sam4l/genclk.h **** extern void dfll_enable_config_defaults(uint32_t dfll_id);
  52:../../../platform/common/services/clock/sam4l/genclk.h **** 
  53:../../../platform/common/services/clock/sam4l/genclk.h **** /**
  54:../../../platform/common/services/clock/sam4l/genclk.h ****  * \weakgroup genclk_group
  55:../../../platform/common/services/clock/sam4l/genclk.h ****  * @{
  56:../../../platform/common/services/clock/sam4l/genclk.h ****  */
  57:../../../platform/common/services/clock/sam4l/genclk.h **** 
  58:../../../platform/common/services/clock/sam4l/genclk.h **** //! \name Chip-specific generic clock definitions
  59:../../../platform/common/services/clock/sam4l/genclk.h **** //@{
  60:../../../platform/common/services/clock/sam4l/genclk.h **** 
  61:../../../platform/common/services/clock/sam4l/genclk.h **** #define GENCLK_DIV_MAX          256
  62:../../../platform/common/services/clock/sam4l/genclk.h **** 
  63:../../../platform/common/services/clock/sam4l/genclk.h **** #ifndef __ASSEMBLY__
  64:../../../platform/common/services/clock/sam4l/genclk.h **** 
  65:../../../platform/common/services/clock/sam4l/genclk.h **** #include <compiler.h>
  66:../../../platform/common/services/clock/sam4l/genclk.h **** #include <osc.h>
  67:../../../platform/common/services/clock/sam4l/genclk.h **** #include <pll.h>
  68:../../../platform/common/services/clock/sam4l/genclk.h **** 
  69:../../../platform/common/services/clock/sam4l/genclk.h **** enum genclk_source {
  70:../../../platform/common/services/clock/sam4l/genclk.h **** 	GENCLK_SRC_RCSYS        = 0,    //!< System RC oscillator
  71:../../../platform/common/services/clock/sam4l/genclk.h **** 	GENCLK_SRC_OSC32K       = 1,    //!< 32 kHz oscillator
  72:../../../platform/common/services/clock/sam4l/genclk.h **** 	GENCLK_SRC_DFLL         = 2,    //!< DFLL
  73:../../../platform/common/services/clock/sam4l/genclk.h **** 	GENCLK_SRC_OSC0         = 3,    //!< Oscillator 0
  74:../../../platform/common/services/clock/sam4l/genclk.h **** 	GENCLK_SRC_RC80M        = 4,    //!< 80 MHz RC oscillator
  75:../../../platform/common/services/clock/sam4l/genclk.h **** 	GENCLK_SRC_RCFAST       = 5,    //!< 4-8-12 MHz RC oscillator
  76:../../../platform/common/services/clock/sam4l/genclk.h **** 	GENCLK_SRC_RC1M         = 6,    //!< 1 MHz RC oscillator
  77:../../../platform/common/services/clock/sam4l/genclk.h **** 	GENCLK_SRC_CLK_CPU      = 7,    //!< CPU clock
  78:../../../platform/common/services/clock/sam4l/genclk.h **** 	GENCLK_SRC_CLK_HSB      = 8,    //!< High Speed Bus clock
  79:../../../platform/common/services/clock/sam4l/genclk.h **** 	GENCLK_SRC_CLK_PBA      = 9,    //!< Peripheral Bus A clock
  80:../../../platform/common/services/clock/sam4l/genclk.h **** 	GENCLK_SRC_CLK_PBB      = 10,   //!< Peripheral Bus B clock
  81:../../../platform/common/services/clock/sam4l/genclk.h **** 	GENCLK_SRC_CLK_PBC      = 11,   //!< Peripheral Bus C clock
  82:../../../platform/common/services/clock/sam4l/genclk.h **** 	GENCLK_SRC_CLK_PBD      = 12,   //!< Peripheral Bus D clock
  83:../../../platform/common/services/clock/sam4l/genclk.h **** 	GENCLK_SRC_RC32K        = 13,   //!< 32 kHz RC oscillator
  84:../../../platform/common/services/clock/sam4l/genclk.h **** 	GENCLK_SRC_CLK_1K       = 15,   //!< 1 kHz output from OSC32K
  85:../../../platform/common/services/clock/sam4l/genclk.h **** 	GENCLK_SRC_PLL0         = 16,   //!< PLL0
  86:../../../platform/common/services/clock/sam4l/genclk.h **** 	GENCLK_SRC_HRPCLK       = 17,   //!< High resolution prescaler
  87:../../../platform/common/services/clock/sam4l/genclk.h **** 	GENCLK_SRC_FPCLK        = 18,   //!< Fractional prescaler
  88:../../../platform/common/services/clock/sam4l/genclk.h **** 	GENCLK_SRC_GCLKIN0      = 19,   //!< GCLKIN0
  89:../../../platform/common/services/clock/sam4l/genclk.h **** 	GENCLK_SRC_GCLKIN1      = 20,   //!< GCLKIN1
  90:../../../platform/common/services/clock/sam4l/genclk.h **** 	GENCLK_SRC_GCLK11       = 21,   //!< GCLK11
  91:../../../platform/common/services/clock/sam4l/genclk.h **** };
  92:../../../platform/common/services/clock/sam4l/genclk.h **** 
  93:../../../platform/common/services/clock/sam4l/genclk.h **** //@}
  94:../../../platform/common/services/clock/sam4l/genclk.h **** 
  95:../../../platform/common/services/clock/sam4l/genclk.h **** struct genclk_config {
  96:../../../platform/common/services/clock/sam4l/genclk.h **** 	uint32_t ctrl;
  97:../../../platform/common/services/clock/sam4l/genclk.h **** };
  98:../../../platform/common/services/clock/sam4l/genclk.h **** 
  99:../../../platform/common/services/clock/sam4l/genclk.h **** static inline void genclk_config_defaults(struct genclk_config *cfg,
 100:../../../platform/common/services/clock/sam4l/genclk.h **** 		uint32_t id)
 101:../../../platform/common/services/clock/sam4l/genclk.h **** {
 560              	 .loc 6 101 0
 561              	 .cfi_startproc
 562              	 
 563              	 
 564              	 
 565 01ec 80B4     	 push {r7}
 566              	.LCFI33:
 567              	 .cfi_def_cfa_offset 4
 568              	 .cfi_offset 7,-4
 569 01ee 83B0     	 sub sp,sp,#12
 570              	.LCFI34:
 571              	 .cfi_def_cfa_offset 16
 572 01f0 00AF     	 add r7,sp,#0
 573              	.LCFI35:
 574              	 .cfi_def_cfa_register 7
 575 01f2 7860     	 str r0,[r7,#4]
 576 01f4 3960     	 str r1,[r7]
 102:../../../platform/common/services/clock/sam4l/genclk.h **** 	UNUSED(id);
 103:../../../platform/common/services/clock/sam4l/genclk.h **** 	cfg->ctrl = 0;
 577              	 .loc 6 103 0
 578 01f6 7B68     	 ldr r3,[r7,#4]
 579 01f8 0022     	 movs r2,#0
 580 01fa 1A60     	 str r2,[r3]
 104:../../../platform/common/services/clock/sam4l/genclk.h **** }
 581              	 .loc 6 104 0
 582 01fc 00BF     	 nop
 583 01fe 0C37     	 adds r7,r7,#12
 584              	.LCFI36:
 585              	 .cfi_def_cfa_offset 4
 586 0200 BD46     	 mov sp,r7
 587              	.LCFI37:
 588              	 .cfi_def_cfa_register 13
 589              	 
 590 0202 80BC     	 pop {r7}
 591              	.LCFI38:
 592              	 .cfi_restore 7
 593              	 .cfi_def_cfa_offset 0
 594 0204 7047     	 bx lr
 595              	 .cfi_endproc
 596              	.LFE139:
 598              	 .align 1
 599              	 .syntax unified
 600              	 .thumb
 601              	 .thumb_func
 602              	 .fpu softvfp
 604              	genclk_config_set_source:
 605              	.LFB142:
 105:../../../platform/common/services/clock/sam4l/genclk.h **** 
 106:../../../platform/common/services/clock/sam4l/genclk.h **** static inline void genclk_config_read(struct genclk_config *cfg,
 107:../../../platform/common/services/clock/sam4l/genclk.h **** 		uint32_t id)
 108:../../../platform/common/services/clock/sam4l/genclk.h **** {
 109:../../../platform/common/services/clock/sam4l/genclk.h **** 	cfg->ctrl = SCIF->SCIF_GCCTRL[id].SCIF_GCCTRL;
 110:../../../platform/common/services/clock/sam4l/genclk.h **** }
 111:../../../platform/common/services/clock/sam4l/genclk.h **** 
 112:../../../platform/common/services/clock/sam4l/genclk.h **** static inline void genclk_config_write(const struct genclk_config *cfg,
 113:../../../platform/common/services/clock/sam4l/genclk.h **** 		uint32_t id)
 114:../../../platform/common/services/clock/sam4l/genclk.h **** {
 115:../../../platform/common/services/clock/sam4l/genclk.h **** 	SCIF->SCIF_GCCTRL[id].SCIF_GCCTRL = cfg->ctrl;
 116:../../../platform/common/services/clock/sam4l/genclk.h **** }
 117:../../../platform/common/services/clock/sam4l/genclk.h **** 
 118:../../../platform/common/services/clock/sam4l/genclk.h **** static inline void genclk_config_set_source(struct genclk_config *cfg,
 119:../../../platform/common/services/clock/sam4l/genclk.h **** 		enum genclk_source src)
 120:../../../platform/common/services/clock/sam4l/genclk.h **** {
 606              	 .loc 6 120 0
 607              	 .cfi_startproc
 608              	 
 609              	 
 610              	 
 611 0206 80B4     	 push {r7}
 612              	.LCFI39:
 613              	 .cfi_def_cfa_offset 4
 614              	 .cfi_offset 7,-4
 615 0208 83B0     	 sub sp,sp,#12
 616              	.LCFI40:
 617              	 .cfi_def_cfa_offset 16
 618 020a 00AF     	 add r7,sp,#0
 619              	.LCFI41:
 620              	 .cfi_def_cfa_register 7
 621 020c 7860     	 str r0,[r7,#4]
 622 020e 0B46     	 mov r3,r1
 623 0210 FB70     	 strb r3,[r7,#3]
 121:../../../platform/common/services/clock/sam4l/genclk.h **** 	cfg->ctrl = (cfg->ctrl & ~SCIF_GCCTRL_OSCSEL_Msk)
 624              	 .loc 6 121 0
 625 0212 7B68     	 ldr r3,[r7,#4]
 626 0214 1B68     	 ldr r3,[r3]
 627 0216 23F4F852 	 bic r2,r3,#7936
 122:../../../platform/common/services/clock/sam4l/genclk.h **** 			| SCIF_GCCTRL_OSCSEL(src);
 628              	 .loc 6 122 0
 629 021a FB78     	 ldrb r3,[r7,#3]
 630 021c 1B02     	 lsls r3,r3,#8
 631 021e 03F4F853 	 and r3,r3,#7936
 632 0222 1A43     	 orrs r2,r2,r3
 121:../../../platform/common/services/clock/sam4l/genclk.h **** 	cfg->ctrl = (cfg->ctrl & ~SCIF_GCCTRL_OSCSEL_Msk)
 633              	 .loc 6 121 0
 634 0224 7B68     	 ldr r3,[r7,#4]
 635 0226 1A60     	 str r2,[r3]
 123:../../../platform/common/services/clock/sam4l/genclk.h **** }
 636              	 .loc 6 123 0
 637 0228 00BF     	 nop
 638 022a 0C37     	 adds r7,r7,#12
 639              	.LCFI42:
 640              	 .cfi_def_cfa_offset 4
 641 022c BD46     	 mov sp,r7
 642              	.LCFI43:
 643              	 .cfi_def_cfa_register 13
 644              	 
 645 022e 80BC     	 pop {r7}
 646              	.LCFI44:
 647              	 .cfi_restore 7
 648              	 .cfi_def_cfa_offset 0
 649 0230 7047     	 bx lr
 650              	 .cfi_endproc
 651              	.LFE142:
 653              	 .align 1
 654              	 .syntax unified
 655              	 .thumb
 656              	 .thumb_func
 657              	 .fpu softvfp
 659              	genclk_config_set_divider:
 660              	.LFB143:
 124:../../../platform/common/services/clock/sam4l/genclk.h **** 
 125:../../../platform/common/services/clock/sam4l/genclk.h **** static inline void genclk_config_set_divider(struct genclk_config *cfg,
 126:../../../platform/common/services/clock/sam4l/genclk.h **** 		uint32_t divider)
 127:../../../platform/common/services/clock/sam4l/genclk.h **** {
 661              	 .loc 6 127 0
 662              	 .cfi_startproc
 663              	 
 664              	 
 665              	 
 666 0232 80B4     	 push {r7}
 667              	.LCFI45:
 668              	 .cfi_def_cfa_offset 4
 669              	 .cfi_offset 7,-4
 670 0234 83B0     	 sub sp,sp,#12
 671              	.LCFI46:
 672              	 .cfi_def_cfa_offset 16
 673 0236 00AF     	 add r7,sp,#0
 674              	.LCFI47:
 675              	 .cfi_def_cfa_register 7
 676 0238 7860     	 str r0,[r7,#4]
 677 023a 3960     	 str r1,[r7]
 128:../../../platform/common/services/clock/sam4l/genclk.h **** 	Assert(divider > 0 && divider <= GENCLK_DIV_MAX);
 129:../../../platform/common/services/clock/sam4l/genclk.h **** 
 130:../../../platform/common/services/clock/sam4l/genclk.h **** 	/* Clear all the bits we're about to modify */
 131:../../../platform/common/services/clock/sam4l/genclk.h **** 	cfg->ctrl &= ~(SCIF_GCCTRL_DIVEN
 678              	 .loc 6 131 0
 679 023c 7B68     	 ldr r3,[r7,#4]
 680 023e 1A68     	 ldr r2,[r3]
 681 0240 4FF6FD73 	 movw r3,#65533
 682 0244 1340     	 ands r3,r3,r2
 683 0246 7A68     	 ldr r2,[r7,#4]
 684 0248 1360     	 str r3,[r2]
 132:../../../platform/common/services/clock/sam4l/genclk.h **** 			| SCIF_GCCTRL_DIV_Msk);
 133:../../../platform/common/services/clock/sam4l/genclk.h **** 
 134:../../../platform/common/services/clock/sam4l/genclk.h **** 	if (divider > 1) {
 685              	 .loc 6 134 0
 686 024a 3B68     	 ldr r3,[r7]
 687 024c 012B     	 cmp r3,#1
 688 024e 0FD9     	 bls .L46
 135:../../../platform/common/services/clock/sam4l/genclk.h **** 		cfg->ctrl |= SCIF_GCCTRL_DIVEN;
 689              	 .loc 6 135 0
 690 0250 7B68     	 ldr r3,[r7,#4]
 691 0252 1B68     	 ldr r3,[r3]
 692 0254 43F00202 	 orr r2,r3,#2
 693 0258 7B68     	 ldr r3,[r7,#4]
 694 025a 1A60     	 str r2,[r3]
 136:../../../platform/common/services/clock/sam4l/genclk.h **** 		cfg->ctrl |= SCIF_GCCTRL_DIV(((divider + 1) / 2) - 1);
 695              	 .loc 6 136 0
 696 025c 7B68     	 ldr r3,[r7,#4]
 697 025e 1A68     	 ldr r2,[r3]
 698 0260 3B68     	 ldr r3,[r7]
 699 0262 0133     	 adds r3,r3,#1
 700 0264 5B08     	 lsrs r3,r3,#1
 701 0266 013B     	 subs r3,r3,#1
 702 0268 1B04     	 lsls r3,r3,#16
 703 026a 1A43     	 orrs r2,r2,r3
 704 026c 7B68     	 ldr r3,[r7,#4]
 705 026e 1A60     	 str r2,[r3]
 706              	.L46:
 137:../../../platform/common/services/clock/sam4l/genclk.h **** 	}
 138:../../../platform/common/services/clock/sam4l/genclk.h **** }
 707              	 .loc 6 138 0
 708 0270 00BF     	 nop
 709 0272 0C37     	 adds r7,r7,#12
 710              	.LCFI48:
 711              	 .cfi_def_cfa_offset 4
 712 0274 BD46     	 mov sp,r7
 713              	.LCFI49:
 714              	 .cfi_def_cfa_register 13
 715              	 
 716 0276 80BC     	 pop {r7}
 717              	.LCFI50:
 718              	 .cfi_restore 7
 719              	 .cfi_def_cfa_offset 0
 720 0278 7047     	 bx lr
 721              	 .cfi_endproc
 722              	.LFE143:
 724              	 .align 1
 725              	 .syntax unified
 726              	 .thumb
 727              	 .thumb_func
 728              	 .fpu softvfp
 730              	genclk_enable:
 731              	.LFB144:
 139:../../../platform/common/services/clock/sam4l/genclk.h **** 
 140:../../../platform/common/services/clock/sam4l/genclk.h **** static inline void genclk_enable(const struct genclk_config *cfg,
 141:../../../platform/common/services/clock/sam4l/genclk.h **** 		uint32_t id)
 142:../../../platform/common/services/clock/sam4l/genclk.h **** {
 732              	 .loc 6 142 0
 733              	 .cfi_startproc
 734              	 
 735              	 
 736              	 
 737 027a 80B4     	 push {r7}
 738              	.LCFI51:
 739              	 .cfi_def_cfa_offset 4
 740              	 .cfi_offset 7,-4
 741 027c 83B0     	 sub sp,sp,#12
 742              	.LCFI52:
 743              	 .cfi_def_cfa_offset 16
 744 027e 00AF     	 add r7,sp,#0
 745              	.LCFI53:
 746              	 .cfi_def_cfa_register 7
 747 0280 7860     	 str r0,[r7,#4]
 748 0282 3960     	 str r1,[r7]
 143:../../../platform/common/services/clock/sam4l/genclk.h **** 	 SCIF->SCIF_GCCTRL[id].SCIF_GCCTRL = cfg->ctrl | SCIF_GCCTRL_CEN;
 749              	 .loc 6 143 0
 750 0284 0749     	 ldr r1,.L48
 751 0286 7B68     	 ldr r3,[r7,#4]
 752 0288 1B68     	 ldr r3,[r3]
 753 028a 43F00102 	 orr r2,r3,#1
 754 028e 3B68     	 ldr r3,[r7]
 755 0290 1C33     	 adds r3,r3,#28
 756 0292 9B00     	 lsls r3,r3,#2
 757 0294 0B44     	 add r3,r3,r1
 758 0296 5A60     	 str r2,[r3,#4]
 144:../../../platform/common/services/clock/sam4l/genclk.h **** }
 759              	 .loc 6 144 0
 760 0298 00BF     	 nop
 761 029a 0C37     	 adds r7,r7,#12
 762              	.LCFI54:
 763              	 .cfi_def_cfa_offset 4
 764 029c BD46     	 mov sp,r7
 765              	.LCFI55:
 766              	 .cfi_def_cfa_register 13
 767              	 
 768 029e 80BC     	 pop {r7}
 769              	.LCFI56:
 770              	 .cfi_restore 7
 771              	 .cfi_def_cfa_offset 0
 772 02a0 7047     	 bx lr
 773              	.L49:
 774 02a2 00BF     	 .align 2
 775              	.L48:
 776 02a4 00080E40 	 .word 1074661376
 777              	 .cfi_endproc
 778              	.LFE144:
 780              	 .align 1
 781              	 .syntax unified
 782              	 .thumb
 783              	 .thumb_func
 784              	 .fpu softvfp
 786              	genclk_disable:
 787              	.LFB145:
 145:../../../platform/common/services/clock/sam4l/genclk.h **** 
 146:../../../platform/common/services/clock/sam4l/genclk.h **** static inline void genclk_disable(uint32_t id)
 147:../../../platform/common/services/clock/sam4l/genclk.h **** {
 788              	 .loc 6 147 0
 789              	 .cfi_startproc
 790              	 
 791              	 
 792              	 
 793 02a8 80B4     	 push {r7}
 794              	.LCFI57:
 795              	 .cfi_def_cfa_offset 4
 796              	 .cfi_offset 7,-4
 797 02aa 83B0     	 sub sp,sp,#12
 798              	.LCFI58:
 799              	 .cfi_def_cfa_offset 16
 800 02ac 00AF     	 add r7,sp,#0
 801              	.LCFI59:
 802              	 .cfi_def_cfa_register 7
 803 02ae 7860     	 str r0,[r7,#4]
 148:../../../platform/common/services/clock/sam4l/genclk.h **** 	SCIF->SCIF_GCCTRL[id].SCIF_GCCTRL = 0;
 804              	 .loc 6 148 0
 805 02b0 054A     	 ldr r2,.L51
 806 02b2 7B68     	 ldr r3,[r7,#4]
 807 02b4 1C33     	 adds r3,r3,#28
 808 02b6 9B00     	 lsls r3,r3,#2
 809 02b8 1344     	 add r3,r3,r2
 810 02ba 0022     	 movs r2,#0
 811 02bc 5A60     	 str r2,[r3,#4]
 149:../../../platform/common/services/clock/sam4l/genclk.h **** }
 812              	 .loc 6 149 0
 813 02be 00BF     	 nop
 814 02c0 0C37     	 adds r7,r7,#12
 815              	.LCFI60:
 816              	 .cfi_def_cfa_offset 4
 817 02c2 BD46     	 mov sp,r7
 818              	.LCFI61:
 819              	 .cfi_def_cfa_register 13
 820              	 
 821 02c4 80BC     	 pop {r7}
 822              	.LCFI62:
 823              	 .cfi_restore 7
 824              	 .cfi_def_cfa_offset 0
 825 02c6 7047     	 bx lr
 826              	.L52:
 827              	 .align 2
 828              	.L51:
 829 02c8 00080E40 	 .word 1074661376
 830              	 .cfi_endproc
 831              	.LFE145:
 833              	 .align 1
 834              	 .syntax unified
 835              	 .thumb
 836              	 .thumb_func
 837              	 .fpu softvfp
 839              	dfll_config_set_max_step:
 840              	.LFB148:
 841              	 .file 7 "../../../platform/common/services/clock/sam4l/dfll.h"
   1:../../../platform/common/services/clock/sam4l/dfll.h **** /**
   2:../../../platform/common/services/clock/sam4l/dfll.h ****  * \file
   3:../../../platform/common/services/clock/sam4l/dfll.h ****  *
   4:../../../platform/common/services/clock/sam4l/dfll.h ****  * \brief Chip-specific DFLL definitions
   5:../../../platform/common/services/clock/sam4l/dfll.h ****  *
   6:../../../platform/common/services/clock/sam4l/dfll.h ****  * Copyright (c) 2012 Atmel Corporation. All rights reserved.
   7:../../../platform/common/services/clock/sam4l/dfll.h ****  *
   8:../../../platform/common/services/clock/sam4l/dfll.h ****  * \asf_license_start
   9:../../../platform/common/services/clock/sam4l/dfll.h ****  *
  10:../../../platform/common/services/clock/sam4l/dfll.h ****  * \page License
  11:../../../platform/common/services/clock/sam4l/dfll.h ****  *
  12:../../../platform/common/services/clock/sam4l/dfll.h ****  * Redistribution and use in source and binary forms, with or without
  13:../../../platform/common/services/clock/sam4l/dfll.h ****  * modification, are permitted provided that the following conditions are met:
  14:../../../platform/common/services/clock/sam4l/dfll.h ****  *
  15:../../../platform/common/services/clock/sam4l/dfll.h ****  * 1. Redistributions of source code must retain the above copyright notice,
  16:../../../platform/common/services/clock/sam4l/dfll.h ****  *    this list of conditions and the following disclaimer.
  17:../../../platform/common/services/clock/sam4l/dfll.h ****  *
  18:../../../platform/common/services/clock/sam4l/dfll.h ****  * 2. Redistributions in binary form must reproduce the above copyright notice,
  19:../../../platform/common/services/clock/sam4l/dfll.h ****  *    this list of conditions and the following disclaimer in the documentation
  20:../../../platform/common/services/clock/sam4l/dfll.h ****  *    and/or other materials provided with the distribution.
  21:../../../platform/common/services/clock/sam4l/dfll.h ****  *
  22:../../../platform/common/services/clock/sam4l/dfll.h ****  * 3. The name of Atmel may not be used to endorse or promote products derived
  23:../../../platform/common/services/clock/sam4l/dfll.h ****  *    from this software without specific prior written permission.
  24:../../../platform/common/services/clock/sam4l/dfll.h ****  *
  25:../../../platform/common/services/clock/sam4l/dfll.h ****  * 4. This software may only be redistributed and used in connection with an
  26:../../../platform/common/services/clock/sam4l/dfll.h ****  *    Atmel microcontroller product.
  27:../../../platform/common/services/clock/sam4l/dfll.h ****  *
  28:../../../platform/common/services/clock/sam4l/dfll.h ****  * THIS SOFTWARE IS PROVIDED BY ATMEL "AS IS" AND ANY EXPRESS OR IMPLIED
  29:../../../platform/common/services/clock/sam4l/dfll.h ****  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
  30:../../../platform/common/services/clock/sam4l/dfll.h ****  * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE
  31:../../../platform/common/services/clock/sam4l/dfll.h ****  * EXPRESSLY AND SPECIFICALLY DISCLAIMED. IN NO EVENT SHALL ATMEL BE LIABLE FOR
  32:../../../platform/common/services/clock/sam4l/dfll.h ****  * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  33:../../../platform/common/services/clock/sam4l/dfll.h ****  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
  34:../../../platform/common/services/clock/sam4l/dfll.h ****  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
  35:../../../platform/common/services/clock/sam4l/dfll.h ****  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
  36:../../../platform/common/services/clock/sam4l/dfll.h ****  * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
  37:../../../platform/common/services/clock/sam4l/dfll.h ****  * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  38:../../../platform/common/services/clock/sam4l/dfll.h ****  * POSSIBILITY OF SUCH DAMAGE.
  39:../../../platform/common/services/clock/sam4l/dfll.h ****  *
  40:../../../platform/common/services/clock/sam4l/dfll.h ****  * \asf_license_stop
  41:../../../platform/common/services/clock/sam4l/dfll.h ****  *
  42:../../../platform/common/services/clock/sam4l/dfll.h ****  */
  43:../../../platform/common/services/clock/sam4l/dfll.h **** #ifndef CHIP_DFLL_H_INCLUDED
  44:../../../platform/common/services/clock/sam4l/dfll.h **** #define CHIP_DFLL_H_INCLUDED
  45:../../../platform/common/services/clock/sam4l/dfll.h **** 
  46:../../../platform/common/services/clock/sam4l/dfll.h **** #ifdef __cplusplus
  47:../../../platform/common/services/clock/sam4l/dfll.h **** extern "C" {
  48:../../../platform/common/services/clock/sam4l/dfll.h **** #endif
  49:../../../platform/common/services/clock/sam4l/dfll.h **** 
  50:../../../platform/common/services/clock/sam4l/dfll.h **** /**
  51:../../../platform/common/services/clock/sam4l/dfll.h ****  * \weakgroup dfll_group
  52:../../../platform/common/services/clock/sam4l/dfll.h ****  * @{
  53:../../../platform/common/services/clock/sam4l/dfll.h ****  */
  54:../../../platform/common/services/clock/sam4l/dfll.h **** 
  55:../../../platform/common/services/clock/sam4l/dfll.h **** #define NR_DFLLS          1
  56:../../../platform/common/services/clock/sam4l/dfll.h **** #define DFLL_MIN_HZ       20000000UL
  57:../../../platform/common/services/clock/sam4l/dfll.h **** #define DFLL_MAX_HZ       150000000UL
  58:../../../platform/common/services/clock/sam4l/dfll.h **** #define DFLL_MIN_KHZ      (DFLL_MIN_HZ / 1000)
  59:../../../platform/common/services/clock/sam4l/dfll.h **** #define DFLL_MAX_KHZ      (DFLL_MAX_HZ / 1000)
  60:../../../platform/common/services/clock/sam4l/dfll.h **** 
  61:../../../platform/common/services/clock/sam4l/dfll.h **** #define DFLL_COARSE_MAX   (255)
  62:../../../platform/common/services/clock/sam4l/dfll.h **** #define DFLL_FINE_MAX     (511)
  63:../../../platform/common/services/clock/sam4l/dfll.h **** #define DFLL_FINE_HALF    (255)
  64:../../../platform/common/services/clock/sam4l/dfll.h **** 
  65:../../../platform/common/services/clock/sam4l/dfll.h **** #define DFLL_CALIB_VALUE  (0x0B)
  66:../../../platform/common/services/clock/sam4l/dfll.h **** 
  67:../../../platform/common/services/clock/sam4l/dfll.h **** #define DFLL_RANGE0       (0)
  68:../../../platform/common/services/clock/sam4l/dfll.h **** #define DFLL_RANGE1       (1)
  69:../../../platform/common/services/clock/sam4l/dfll.h **** #define DFLL_RANGE2       (2)
  70:../../../platform/common/services/clock/sam4l/dfll.h **** #define DFLL_RANGE3       (3)
  71:../../../platform/common/services/clock/sam4l/dfll.h **** #define DFLL_MAX_RANGE1   (110000000)
  72:../../../platform/common/services/clock/sam4l/dfll.h **** #define DFLL_MAX_RANGE2   (55000000)
  73:../../../platform/common/services/clock/sam4l/dfll.h **** #define DFLL_MAX_RANGE3   (30000000)
  74:../../../platform/common/services/clock/sam4l/dfll.h **** 
  75:../../../platform/common/services/clock/sam4l/dfll.h **** #ifndef __ASSEMBLY__
  76:../../../platform/common/services/clock/sam4l/dfll.h **** 
  77:../../../platform/common/services/clock/sam4l/dfll.h **** #include "compiler.h"
  78:../../../platform/common/services/clock/sam4l/dfll.h **** #include <genclk.h>
  79:../../../platform/common/services/clock/sam4l/dfll.h **** #include <osc.h>
  80:../../../platform/common/services/clock/sam4l/dfll.h **** 
  81:../../../platform/common/services/clock/sam4l/dfll.h **** typedef enum genclk_source dfll_refclk_t;
  82:../../../platform/common/services/clock/sam4l/dfll.h **** 
  83:../../../platform/common/services/clock/sam4l/dfll.h **** struct dfll_config {
  84:../../../platform/common/services/clock/sam4l/dfll.h **** 	struct genclk_config    ref_cfg;        //!< Reference clock
  85:../../../platform/common/services/clock/sam4l/dfll.h **** 	uint32_t                conf;           //!< DFLLnCONF
  86:../../../platform/common/services/clock/sam4l/dfll.h **** 	uint32_t                mul;            //!< DFLLnMUL
  87:../../../platform/common/services/clock/sam4l/dfll.h **** 	uint32_t                step;           //!< DFLLnSTEP
  88:../../../platform/common/services/clock/sam4l/dfll.h **** 	uint32_t                ssg;            //!< DFLLnSSG
  89:../../../platform/common/services/clock/sam4l/dfll.h **** 	uint32_t                val;            //!< DFLLnVAL
  90:../../../platform/common/services/clock/sam4l/dfll.h **** 	uint8_t                 freq_range;     //!< Frequency Range
  91:../../../platform/common/services/clock/sam4l/dfll.h **** };
  92:../../../platform/common/services/clock/sam4l/dfll.h **** 
  93:../../../platform/common/services/clock/sam4l/dfll.h **** static inline void dfll_config_set_max_step(struct dfll_config *cfg,
  94:../../../platform/common/services/clock/sam4l/dfll.h **** 		uint16_t coarse, uint16_t fine)
  95:../../../platform/common/services/clock/sam4l/dfll.h **** {
 842              	 .loc 7 95 0
 843              	 .cfi_startproc
 844              	 
 845              	 
 846              	 
 847 02cc 80B4     	 push {r7}
 848              	.LCFI63:
 849              	 .cfi_def_cfa_offset 4
 850              	 .cfi_offset 7,-4
 851 02ce 83B0     	 sub sp,sp,#12
 852              	.LCFI64:
 853              	 .cfi_def_cfa_offset 16
 854 02d0 00AF     	 add r7,sp,#0
 855              	.LCFI65:
 856              	 .cfi_def_cfa_register 7
 857 02d2 7860     	 str r0,[r7,#4]
 858 02d4 0B46     	 mov r3,r1
 859 02d6 7B80     	 strh r3,[r7,#2]
 860 02d8 1346     	 mov r3,r2
 861 02da 3B80     	 strh r3,[r7]
  96:../../../platform/common/services/clock/sam4l/dfll.h **** 	cfg->step = (SCIF_DFLL0STEP_CSTEP(coarse)
 862              	 .loc 7 96 0
 863 02dc 7B88     	 ldrh r3,[r7,#2]
 864 02de 1B04     	 lsls r3,r3,#16
 865 02e0 03F4F812 	 and r2,r3,#2031616
  97:../../../platform/common/services/clock/sam4l/dfll.h **** 			| SCIF_DFLL0STEP_FSTEP(fine));
 866              	 .loc 7 97 0
 867 02e4 3B88     	 ldrh r3,[r7]
 868 02e6 DBB2     	 uxtb r3,r3
 869 02e8 1A43     	 orrs r2,r2,r3
  96:../../../platform/common/services/clock/sam4l/dfll.h **** 	cfg->step = (SCIF_DFLL0STEP_CSTEP(coarse)
 870              	 .loc 7 96 0
 871 02ea 7B68     	 ldr r3,[r7,#4]
 872 02ec DA60     	 str r2,[r3,#12]
  98:../../../platform/common/services/clock/sam4l/dfll.h **** }
 873              	 .loc 7 98 0
 874 02ee 00BF     	 nop
 875 02f0 0C37     	 adds r7,r7,#12
 876              	.LCFI66:
 877              	 .cfi_def_cfa_offset 4
 878 02f2 BD46     	 mov sp,r7
 879              	.LCFI67:
 880              	 .cfi_def_cfa_register 13
 881              	 
 882 02f4 80BC     	 pop {r7}
 883              	.LCFI68:
 884              	 .cfi_restore 7
 885              	 .cfi_def_cfa_offset 0
 886 02f6 7047     	 bx lr
 887              	 .cfi_endproc
 888              	.LFE148:
 890              	 .align 1
 891              	 .syntax unified
 892              	 .thumb
 893              	 .thumb_func
 894              	 .fpu softvfp
 896              	dfll_priv_set_frequency_range:
 897              	.LFB149:
  99:../../../platform/common/services/clock/sam4l/dfll.h **** 
 100:../../../platform/common/services/clock/sam4l/dfll.h **** static inline void dfll_priv_set_frequency_range(struct dfll_config *cfg,
 101:../../../platform/common/services/clock/sam4l/dfll.h **** 		uint32_t freq)
 102:../../../platform/common/services/clock/sam4l/dfll.h **** {
 898              	 .loc 7 102 0
 899              	 .cfi_startproc
 900              	 
 901              	 
 902              	 
 903 02f8 80B4     	 push {r7}
 904              	.LCFI69:
 905              	 .cfi_def_cfa_offset 4
 906              	 .cfi_offset 7,-4
 907 02fa 83B0     	 sub sp,sp,#12
 908              	.LCFI70:
 909              	 .cfi_def_cfa_offset 16
 910 02fc 00AF     	 add r7,sp,#0
 911              	.LCFI71:
 912              	 .cfi_def_cfa_register 7
 913 02fe 7860     	 str r0,[r7,#4]
 914 0300 3960     	 str r1,[r7]
 103:../../../platform/common/services/clock/sam4l/dfll.h **** 	if (freq < DFLL_MAX_RANGE3){
 915              	 .loc 7 103 0
 916 0302 3B68     	 ldr r3,[r7]
 917 0304 174A     	 ldr r2,.L59
 918 0306 9342     	 cmp r3,r2
 919 0308 03D8     	 bhi .L55
 104:../../../platform/common/services/clock/sam4l/dfll.h **** 		cfg->freq_range = DFLL_RANGE3;
 920              	 .loc 7 104 0
 921 030a 7B68     	 ldr r3,[r7,#4]
 922 030c 0322     	 movs r2,#3
 923 030e 1A76     	 strb r2,[r3,#24]
 924 0310 12E0     	 b .L56
 925              	.L55:
 105:../../../platform/common/services/clock/sam4l/dfll.h **** 	}
 106:../../../platform/common/services/clock/sam4l/dfll.h **** 	else if (freq < DFLL_MAX_RANGE2){
 926              	 .loc 7 106 0
 927 0312 3B68     	 ldr r3,[r7]
 928 0314 144A     	 ldr r2,.L59+4
 929 0316 9342     	 cmp r3,r2
 930 0318 03D8     	 bhi .L57
 107:../../../platform/common/services/clock/sam4l/dfll.h **** 		cfg->freq_range = DFLL_RANGE2;
 931              	 .loc 7 107 0
 932 031a 7B68     	 ldr r3,[r7,#4]
 933 031c 0222     	 movs r2,#2
 934 031e 1A76     	 strb r2,[r3,#24]
 935 0320 0AE0     	 b .L56
 936              	.L57:
 108:../../../platform/common/services/clock/sam4l/dfll.h **** 	}
 109:../../../platform/common/services/clock/sam4l/dfll.h **** 	else if (freq < DFLL_MAX_RANGE1){
 937              	 .loc 7 109 0
 938 0322 3B68     	 ldr r3,[r7]
 939 0324 114A     	 ldr r2,.L59+8
 940 0326 9342     	 cmp r3,r2
 941 0328 03D8     	 bhi .L58
 110:../../../platform/common/services/clock/sam4l/dfll.h **** 		cfg->freq_range = DFLL_RANGE1;
 942              	 .loc 7 110 0
 943 032a 7B68     	 ldr r3,[r7,#4]
 944 032c 0122     	 movs r2,#1
 945 032e 1A76     	 strb r2,[r3,#24]
 946 0330 02E0     	 b .L56
 947              	.L58:
 111:../../../platform/common/services/clock/sam4l/dfll.h **** 	}
 112:../../../platform/common/services/clock/sam4l/dfll.h **** 	else {
 113:../../../platform/common/services/clock/sam4l/dfll.h **** 		cfg->freq_range = DFLL_RANGE0;
 948              	 .loc 7 113 0
 949 0332 7B68     	 ldr r3,[r7,#4]
 950 0334 0022     	 movs r2,#0
 951 0336 1A76     	 strb r2,[r3,#24]
 952              	.L56:
 114:../../../platform/common/services/clock/sam4l/dfll.h **** 	}
 115:../../../platform/common/services/clock/sam4l/dfll.h **** 	cfg->conf &= ~SCIF_DFLL0CONF_RANGE_Msk;
 953              	 .loc 7 115 0
 954 0338 7B68     	 ldr r3,[r7,#4]
 955 033a 5B68     	 ldr r3,[r3,#4]
 956 033c 23F44032 	 bic r2,r3,#196608
 957 0340 7B68     	 ldr r3,[r7,#4]
 958 0342 5A60     	 str r2,[r3,#4]
 116:../../../platform/common/services/clock/sam4l/dfll.h **** 	cfg->conf |=SCIF_DFLL0CONF_RANGE(cfg->freq_range);
 959              	 .loc 7 116 0
 960 0344 7B68     	 ldr r3,[r7,#4]
 961 0346 5A68     	 ldr r2,[r3,#4]
 962 0348 7B68     	 ldr r3,[r7,#4]
 963 034a 1B7E     	 ldrb r3,[r3,#24]
 964 034c 1B04     	 lsls r3,r3,#16
 965 034e 03F44033 	 and r3,r3,#196608
 966 0352 1A43     	 orrs r2,r2,r3
 967 0354 7B68     	 ldr r3,[r7,#4]
 968 0356 5A60     	 str r2,[r3,#4]
 117:../../../platform/common/services/clock/sam4l/dfll.h **** }
 969              	 .loc 7 117 0
 970 0358 00BF     	 nop
 971 035a 0C37     	 adds r7,r7,#12
 972              	.LCFI72:
 973              	 .cfi_def_cfa_offset 4
 974 035c BD46     	 mov sp,r7
 975              	.LCFI73:
 976              	 .cfi_def_cfa_register 13
 977              	 
 978 035e 80BC     	 pop {r7}
 979              	.LCFI74:
 980              	 .cfi_restore 7
 981              	 .cfi_def_cfa_offset 0
 982 0360 7047     	 bx lr
 983              	.L60:
 984 0362 00BF     	 .align 2
 985              	.L59:
 986 0364 7FC3C901 	 .word 29999999
 987 0368 BF3B4703 	 .word 54999999
 988 036c 7F778E06 	 .word 109999999
 989              	 .cfi_endproc
 990              	.LFE149:
 992              	 .align 1
 993              	 .syntax unified
 994              	 .thumb
 995              	 .thumb_func
 996              	 .fpu softvfp
 998              	dfll_config_init_closed_loop_mode:
 999              	.LFB151:
 118:../../../platform/common/services/clock/sam4l/dfll.h **** 
 119:../../../platform/common/services/clock/sam4l/dfll.h **** static inline void dfll_config_init_open_loop_mode(struct dfll_config *cfg)
 120:../../../platform/common/services/clock/sam4l/dfll.h **** {
 121:../../../platform/common/services/clock/sam4l/dfll.h **** 	genclk_config_defaults(&cfg->ref_cfg, 0);
 122:../../../platform/common/services/clock/sam4l/dfll.h **** 	// Do a sync before reading a dfll conf register
 123:../../../platform/common/services/clock/sam4l/dfll.h **** 	SCIF->SCIF_DFLL0SYNC = SCIF_DFLL0SYNC_SYNC;
 124:../../../platform/common/services/clock/sam4l/dfll.h **** 	while (!(SCIF->SCIF_PCLKSR & SCIF_PCLKSR_DFLL0RDY));
 125:../../../platform/common/services/clock/sam4l/dfll.h **** 	cfg->conf = SCIF->SCIF_DFLL0CONF;
 126:../../../platform/common/services/clock/sam4l/dfll.h **** 	// Select Open Loop Mode
 127:../../../platform/common/services/clock/sam4l/dfll.h **** 	cfg->conf &= ~SCIF_DFLL0CONF_MODE;
 128:../../../platform/common/services/clock/sam4l/dfll.h **** 	// Clear DFLL Frequency Range
 129:../../../platform/common/services/clock/sam4l/dfll.h **** 	cfg->freq_range = 0;
 130:../../../platform/common/services/clock/sam4l/dfll.h **** 	cfg->conf &= ~SCIF_DFLL0CONF_RANGE_Msk;
 131:../../../platform/common/services/clock/sam4l/dfll.h **** 	cfg->conf |= SCIF_DFLL0CONF_RANGE(cfg->freq_range);
 132:../../../platform/common/services/clock/sam4l/dfll.h **** 
 133:../../../platform/common/services/clock/sam4l/dfll.h **** 	cfg->mul = 0;
 134:../../../platform/common/services/clock/sam4l/dfll.h **** 	cfg->step = 0;
 135:../../../platform/common/services/clock/sam4l/dfll.h **** 	cfg->ssg = 0;
 136:../../../platform/common/services/clock/sam4l/dfll.h **** 	cfg->val = 0;
 137:../../../platform/common/services/clock/sam4l/dfll.h **** }
 138:../../../platform/common/services/clock/sam4l/dfll.h **** 
 139:../../../platform/common/services/clock/sam4l/dfll.h **** #ifdef CONFIG_DFLL0_FREQ
 140:../../../platform/common/services/clock/sam4l/dfll.h **** static inline void dfll_config_init_closed_loop_mode(struct dfll_config *cfg,
 141:../../../platform/common/services/clock/sam4l/dfll.h **** 		dfll_refclk_t refclk, uint16_t divide, uint16_t mul)
 142:../../../platform/common/services/clock/sam4l/dfll.h **** {
 1000              	 .loc 7 142 0
 1001              	 .cfi_startproc
 1002              	 
 1003              	 
 1004 0370 80B5     	 push {r7,lr}
 1005              	.LCFI75:
 1006              	 .cfi_def_cfa_offset 8
 1007              	 .cfi_offset 7,-8
 1008              	 .cfi_offset 14,-4
 1009 0372 84B0     	 sub sp,sp,#16
 1010              	.LCFI76:
 1011              	 .cfi_def_cfa_offset 24
 1012 0374 00AF     	 add r7,sp,#0
 1013              	.LCFI77:
 1014              	 .cfi_def_cfa_register 7
 1015 0376 F860     	 str r0,[r7,#12]
 1016 0378 0846     	 mov r0,r1
 1017 037a 1146     	 mov r1,r2
 1018 037c 1A46     	 mov r2,r3
 1019 037e 0346     	 mov r3,r0
 1020 0380 FB72     	 strb r3,[r7,#11]
 1021 0382 0B46     	 mov r3,r1
 1022 0384 3B81     	 strh r3,[r7,#8]
 1023 0386 1346     	 mov r3,r2
 1024 0388 FB80     	 strh r3,[r7,#6]
 143:../../../platform/common/services/clock/sam4l/dfll.h **** 	/*
 144:../../../platform/common/services/clock/sam4l/dfll.h **** 	 * Set up generic clock source with specified reference clock
 145:../../../platform/common/services/clock/sam4l/dfll.h **** 	 * and divider.
 146:../../../platform/common/services/clock/sam4l/dfll.h **** 	 */
 147:../../../platform/common/services/clock/sam4l/dfll.h **** 	genclk_config_defaults(&cfg->ref_cfg, 0);
 1025              	 .loc 7 147 0
 1026 038a FB68     	 ldr r3,[r7,#12]
 1027 038c 0021     	 movs r1,#0
 1028 038e 1846     	 mov r0,r3
 1029 0390 FFF72CFF 	 bl genclk_config_defaults
 148:../../../platform/common/services/clock/sam4l/dfll.h **** 	genclk_config_set_source(&cfg->ref_cfg, refclk);
 1030              	 .loc 7 148 0
 1031 0394 FB68     	 ldr r3,[r7,#12]
 1032 0396 FA7A     	 ldrb r2,[r7,#11]
 1033 0398 1146     	 mov r1,r2
 1034 039a 1846     	 mov r0,r3
 1035 039c FFF733FF 	 bl genclk_config_set_source
 149:../../../platform/common/services/clock/sam4l/dfll.h **** 	genclk_config_set_divider(&cfg->ref_cfg, divide);
 1036              	 .loc 7 149 0
 1037 03a0 FB68     	 ldr r3,[r7,#12]
 1038 03a2 3A89     	 ldrh r2,[r7,#8]
 1039 03a4 1146     	 mov r1,r2
 1040 03a6 1846     	 mov r0,r3
 1041 03a8 FFF743FF 	 bl genclk_config_set_divider
 150:../../../platform/common/services/clock/sam4l/dfll.h **** 
 151:../../../platform/common/services/clock/sam4l/dfll.h **** 	// Do a sync before reading a dfll conf register
 152:../../../platform/common/services/clock/sam4l/dfll.h **** 	SCIF->SCIF_DFLL0SYNC = SCIF_DFLL0SYNC_SYNC;
 1042              	 .loc 7 152 0
 1043 03ac 144B     	 ldr r3,.L63
 1044 03ae 0122     	 movs r2,#1
 1045 03b0 1A64     	 str r2,[r3,#64]
 153:../../../platform/common/services/clock/sam4l/dfll.h **** 	while (!(SCIF->SCIF_PCLKSR & SCIF_PCLKSR_DFLL0RDY));
 1046              	 .loc 7 153 0
 1047 03b2 00BF     	 nop
 1048              	.L62:
 1049              	 .loc 7 153 0 is_stmt 0 discriminator 1
 1050 03b4 124B     	 ldr r3,.L63
 1051 03b6 5B69     	 ldr r3,[r3,#20]
 1052 03b8 03F00803 	 and r3,r3,#8
 1053 03bc 002B     	 cmp r3,#0
 1054 03be F9D0     	 beq .L62
 154:../../../platform/common/services/clock/sam4l/dfll.h **** 	cfg->conf = SCIF->SCIF_DFLL0CONF;
 1055              	 .loc 7 154 0 is_stmt 1
 1056 03c0 0F4B     	 ldr r3,.L63
 1057 03c2 9A6A     	 ldr r2,[r3,#40]
 1058 03c4 FB68     	 ldr r3,[r7,#12]
 1059 03c6 5A60     	 str r2,[r3,#4]
 155:../../../platform/common/services/clock/sam4l/dfll.h **** 	// Select Closed Loop Mode
 156:../../../platform/common/services/clock/sam4l/dfll.h **** 	cfg->conf |= SCIF_DFLL0CONF_MODE;
 1060              	 .loc 7 156 0
 1061 03c8 FB68     	 ldr r3,[r7,#12]
 1062 03ca 5B68     	 ldr r3,[r3,#4]
 1063 03cc 43F00202 	 orr r2,r3,#2
 1064 03d0 FB68     	 ldr r3,[r7,#12]
 1065 03d2 5A60     	 str r2,[r3,#4]
 157:../../../platform/common/services/clock/sam4l/dfll.h **** 	// Write DFLL Frequency Range
 158:../../../platform/common/services/clock/sam4l/dfll.h **** 	dfll_priv_set_frequency_range(cfg, CONFIG_DFLL0_FREQ);
 1066              	 .loc 7 158 0
 1067 03d4 0B49     	 ldr r1,.L63+4
 1068 03d6 F868     	 ldr r0,[r7,#12]
 1069 03d8 FFF78EFF 	 bl dfll_priv_set_frequency_range
 159:../../../platform/common/services/clock/sam4l/dfll.h **** 
 160:../../../platform/common/services/clock/sam4l/dfll.h **** 	cfg->mul = mul;
 1070              	 .loc 7 160 0
 1071 03dc FA88     	 ldrh r2,[r7,#6]
 1072 03de FB68     	 ldr r3,[r7,#12]
 1073 03e0 9A60     	 str r2,[r3,#8]
 161:../../../platform/common/services/clock/sam4l/dfll.h **** 	cfg->val = 0;
 1074              	 .loc 7 161 0
 1075 03e2 FB68     	 ldr r3,[r7,#12]
 1076 03e4 0022     	 movs r2,#0
 1077 03e6 5A61     	 str r2,[r3,#20]
 162:../../../platform/common/services/clock/sam4l/dfll.h **** 	/*
 163:../../../platform/common/services/clock/sam4l/dfll.h **** 	 * Initial step length of 4. If this is set too high, the DFLL
 164:../../../platform/common/services/clock/sam4l/dfll.h **** 	 * may fail to lock.
 165:../../../platform/common/services/clock/sam4l/dfll.h **** 	 */
 166:../../../platform/common/services/clock/sam4l/dfll.h **** 	dfll_config_set_max_step(cfg, 4, 4);
 1078              	 .loc 7 166 0
 1079 03e8 0422     	 movs r2,#4
 1080 03ea 0421     	 movs r1,#4
 1081 03ec F868     	 ldr r0,[r7,#12]
 1082 03ee FFF76DFF 	 bl dfll_config_set_max_step
 167:../../../platform/common/services/clock/sam4l/dfll.h **** 	cfg->ssg = 0;
 1083              	 .loc 7 167 0
 1084 03f2 FB68     	 ldr r3,[r7,#12]
 1085 03f4 0022     	 movs r2,#0
 1086 03f6 1A61     	 str r2,[r3,#16]
 168:../../../platform/common/services/clock/sam4l/dfll.h **** }
 1087              	 .loc 7 168 0
 1088 03f8 00BF     	 nop
 1089 03fa 1037     	 adds r7,r7,#16
 1090              	.LCFI78:
 1091              	 .cfi_def_cfa_offset 8
 1092 03fc BD46     	 mov sp,r7
 1093              	.LCFI79:
 1094              	 .cfi_def_cfa_register 13
 1095              	 
 1096 03fe 80BD     	 pop {r7,pc}
 1097              	.L64:
 1098              	 .align 2
 1099              	.L63:
 1100 0400 00080E40 	 .word 1074661376
 1101 0404 006CDC02 	 .word 48000000
 1102              	 .cfi_endproc
 1103              	.LFE151:
 1105              	 .align 1
 1106              	 .syntax unified
 1107              	 .thumb
 1108              	 .thumb_func
 1109              	 .fpu softvfp
 1111              	dfll_is_fine_locked:
 1112              	.LFB158:
 169:../../../platform/common/services/clock/sam4l/dfll.h **** #endif
 170:../../../platform/common/services/clock/sam4l/dfll.h **** 
 171:../../../platform/common/services/clock/sam4l/dfll.h **** static inline uint32_t dfll_priv_get_source_hz(dfll_refclk_t src)
 172:../../../platform/common/services/clock/sam4l/dfll.h **** {
 173:../../../platform/common/services/clock/sam4l/dfll.h **** 	/*
 174:../../../platform/common/services/clock/sam4l/dfll.h **** 	 * Only handle the cases that actually make sense as a DFLL
 175:../../../platform/common/services/clock/sam4l/dfll.h **** 	 * source. The DFLL itself is obviously not one of those cases.
 176:../../../platform/common/services/clock/sam4l/dfll.h **** 	 */
 177:../../../platform/common/services/clock/sam4l/dfll.h **** 	switch (src) {
 178:../../../platform/common/services/clock/sam4l/dfll.h **** 	case GENCLK_SRC_RCSYS:
 179:../../../platform/common/services/clock/sam4l/dfll.h **** 		return OSC_RCSYS_NOMINAL_HZ;
 180:../../../platform/common/services/clock/sam4l/dfll.h **** 
 181:../../../platform/common/services/clock/sam4l/dfll.h **** #ifdef BOARD_OSC32_HZ
 182:../../../platform/common/services/clock/sam4l/dfll.h **** 	case GENCLK_SRC_OSC32K:
 183:../../../platform/common/services/clock/sam4l/dfll.h **** 		return BOARD_OSC32_HZ;
 184:../../../platform/common/services/clock/sam4l/dfll.h **** #endif
 185:../../../platform/common/services/clock/sam4l/dfll.h **** 
 186:../../../platform/common/services/clock/sam4l/dfll.h **** #ifdef BOARD_OSC0_HZ
 187:../../../platform/common/services/clock/sam4l/dfll.h **** 	case GENCLK_SRC_OSC0:
 188:../../../platform/common/services/clock/sam4l/dfll.h **** 		return BOARD_OSC0_HZ;
 189:../../../platform/common/services/clock/sam4l/dfll.h **** #endif
 190:../../../platform/common/services/clock/sam4l/dfll.h **** 
 191:../../../platform/common/services/clock/sam4l/dfll.h **** 	case GENCLK_SRC_RC80M:
 192:../../../platform/common/services/clock/sam4l/dfll.h **** 		return OSC_RC80M_NOMINAL_HZ;
 193:../../../platform/common/services/clock/sam4l/dfll.h **** 
 194:../../../platform/common/services/clock/sam4l/dfll.h **** 	case GENCLK_SRC_RC32K:
 195:../../../platform/common/services/clock/sam4l/dfll.h **** 		return OSC_RC32K_NOMINAL_HZ;
 196:../../../platform/common/services/clock/sam4l/dfll.h **** 
 197:../../../platform/common/services/clock/sam4l/dfll.h **** 	default:
 198:../../../platform/common/services/clock/sam4l/dfll.h **** 		/* unhandled_case(src) */
 199:../../../platform/common/services/clock/sam4l/dfll.h **** 		return 0;
 200:../../../platform/common/services/clock/sam4l/dfll.h **** 	}
 201:../../../platform/common/services/clock/sam4l/dfll.h **** }
 202:../../../platform/common/services/clock/sam4l/dfll.h **** 
 203:../../../platform/common/services/clock/sam4l/dfll.h **** #define dfll_config_defaults(cfg, dfll_id)                                     \
 204:../../../platform/common/services/clock/sam4l/dfll.h **** 	dfll_config_init_closed_loop_mode(cfg,                                 \
 205:../../../platform/common/services/clock/sam4l/dfll.h **** 			CONFIG_DFLL##dfll_id##_SOURCE,                         \
 206:../../../platform/common/services/clock/sam4l/dfll.h **** 			CONFIG_DFLL##dfll_id##_DIV,                            \
 207:../../../platform/common/services/clock/sam4l/dfll.h **** 			CONFIG_DFLL##dfll_id##_MUL)
 208:../../../platform/common/services/clock/sam4l/dfll.h **** 
 209:../../../platform/common/services/clock/sam4l/dfll.h **** #define dfll_get_default_rate(dfll_id)                                         \
 210:../../../platform/common/services/clock/sam4l/dfll.h **** 	((dfll_priv_get_source_hz(CONFIG_DFLL##dfll_id##_SOURCE)               \
 211:../../../platform/common/services/clock/sam4l/dfll.h **** 			* CONFIG_DFLL##dfll_id##_MUL)                          \
 212:../../../platform/common/services/clock/sam4l/dfll.h **** 		/ CONFIG_DFLL##dfll_id##_DIV)
 213:../../../platform/common/services/clock/sam4l/dfll.h **** 
 214:../../../platform/common/services/clock/sam4l/dfll.h **** static inline void dfll_config_set_initial_tuning(struct dfll_config *cfg,
 215:../../../platform/common/services/clock/sam4l/dfll.h **** 		uint16_t coarse, uint16_t fine)
 216:../../../platform/common/services/clock/sam4l/dfll.h **** {
 217:../../../platform/common/services/clock/sam4l/dfll.h **** 	cfg->val = (SCIF_DFLL0VAL_COARSE(coarse)
 218:../../../platform/common/services/clock/sam4l/dfll.h **** 			| SCIF_DFLL0VAL_FINE(fine));
 219:../../../platform/common/services/clock/sam4l/dfll.h **** }
 220:../../../platform/common/services/clock/sam4l/dfll.h **** 
 221:../../../platform/common/services/clock/sam4l/dfll.h **** /**
 222:../../../platform/common/services/clock/sam4l/dfll.h ****  * \brief Tune the DFLL configuration for a specific target frequency
 223:../../../platform/common/services/clock/sam4l/dfll.h ****  *
 224:../../../platform/common/services/clock/sam4l/dfll.h ****  * This will set the initial coarse and fine DFLL tuning to match the
 225:../../../platform/common/services/clock/sam4l/dfll.h ****  * given target frequency. In open loop mode, this will cause the DFLL
 226:../../../platform/common/services/clock/sam4l/dfll.h ****  * to run close to the specified frequency, though it may not match
 227:../../../platform/common/services/clock/sam4l/dfll.h ****  * exactly. In closed loop mode, the DFLL will automatically tune itself
 228:../../../platform/common/services/clock/sam4l/dfll.h ****  * to the target frequency regardless of the initial tuning, but this
 229:../../../platform/common/services/clock/sam4l/dfll.h ****  * function may be used to set a starting point close to the desired
 230:../../../platform/common/services/clock/sam4l/dfll.h ****  * frequency in order to reduce the startup time.
 231:../../../platform/common/services/clock/sam4l/dfll.h ****  *
 232:../../../platform/common/services/clock/sam4l/dfll.h ****  * \par Calculating the DFLL frequency
 233:../../../platform/common/services/clock/sam4l/dfll.h ****  *
 234:../../../platform/common/services/clock/sam4l/dfll.h ****  * \f{eqnarray*}{
 235:../../../platform/common/services/clock/sam4l/dfll.h **** 	f_{DFLL} &=& \left[f_{min} + \left(f_{max} - f_{min}\right)
 236:../../../platform/common/services/clock/sam4l/dfll.h **** 		\frac{\mathrm{COARSE}}{\mathrm{COARSE}_{max}}\right]
 237:../../../platform/common/services/clock/sam4l/dfll.h **** 		\left(1 + x \frac{\mathrm{FINE}
 238:../../../platform/common/services/clock/sam4l/dfll.h **** 			- \mathrm{FINE}_{half}}{\mathrm{FINE}_{max}}\right)
 239:../../../platform/common/services/clock/sam4l/dfll.h **** 		= f_{coarse} \left(1 + x
 240:../../../platform/common/services/clock/sam4l/dfll.h **** 		\frac{\mathrm{FINE}
 241:../../../platform/common/services/clock/sam4l/dfll.h **** 			- \mathrm{FINE}_{half}}{\mathrm{FINE}_{max}}\right) \\
 242:../../../platform/common/services/clock/sam4l/dfll.h **** 	\mathrm{COARSE} &=& \frac{\left(f_{DFLL} - f_{min}\right)}
 243:../../../platform/common/services/clock/sam4l/dfll.h **** 		{f_{max} - f_{min}} \mathrm{COARSE}_{max} \\
 244:../../../platform/common/services/clock/sam4l/dfll.h **** 	f_{coarse} &=& f_{min} + \left(f_{max} - f_{min}\right)
 245:../../../platform/common/services/clock/sam4l/dfll.h **** 		\frac{\mathrm{COARSE}}{\mathrm{COARSE}_{max}} \\
 246:../../../platform/common/services/clock/sam4l/dfll.h **** 	\mathrm{FINE} &=& \left(10 \frac{f_{DFLL} - f_{coarse}}
 247:../../../platform/common/services/clock/sam4l/dfll.h **** 		{f_{coarse}} + \mathrm{FINE}_{half}\right) / 4
 248:../../../platform/common/services/clock/sam4l/dfll.h ****    \f}
 249:../../../platform/common/services/clock/sam4l/dfll.h ****  *
 250:../../../platform/common/services/clock/sam4l/dfll.h ****  * \param cfg The DFLL configuration to be tuned.
 251:../../../platform/common/services/clock/sam4l/dfll.h ****  * \param target_hz Target frequency in Hz.
 252:../../../platform/common/services/clock/sam4l/dfll.h ****  */
 253:../../../platform/common/services/clock/sam4l/dfll.h **** static inline void dfll_config_tune_for_target_hz(struct dfll_config *cfg,
 254:../../../platform/common/services/clock/sam4l/dfll.h **** 		uint32_t target_hz)
 255:../../../platform/common/services/clock/sam4l/dfll.h **** {
 256:../../../platform/common/services/clock/sam4l/dfll.h **** 	uint32_t target_khz;
 257:../../../platform/common/services/clock/sam4l/dfll.h **** 	uint32_t coarse_khz;
 258:../../../platform/common/services/clock/sam4l/dfll.h **** 	uint32_t delta_khz;
 259:../../../platform/common/services/clock/sam4l/dfll.h **** 	uint32_t coarse;
 260:../../../platform/common/services/clock/sam4l/dfll.h **** 	uint32_t fine;
 261:../../../platform/common/services/clock/sam4l/dfll.h **** 
 262:../../../platform/common/services/clock/sam4l/dfll.h **** 	target_khz = target_hz / 1000;
 263:../../../platform/common/services/clock/sam4l/dfll.h **** 	coarse = ((target_khz - DFLL_MIN_KHZ) * DFLL_COARSE_MAX)
 264:../../../platform/common/services/clock/sam4l/dfll.h **** 			/ (DFLL_MAX_KHZ - DFLL_MIN_KHZ);
 265:../../../platform/common/services/clock/sam4l/dfll.h **** 	coarse_khz = DFLL_MIN_KHZ + (((DFLL_MAX_KHZ - DFLL_MIN_KHZ)
 266:../../../platform/common/services/clock/sam4l/dfll.h **** 			/ DFLL_COARSE_MAX) * coarse);
 267:../../../platform/common/services/clock/sam4l/dfll.h **** 	delta_khz = target_khz - coarse_khz;
 268:../../../platform/common/services/clock/sam4l/dfll.h **** 	fine = (((delta_khz * DFLL_FINE_MAX) * 2) / coarse_khz) * 5;
 269:../../../platform/common/services/clock/sam4l/dfll.h **** 	fine += DFLL_FINE_HALF;
 270:../../../platform/common/services/clock/sam4l/dfll.h **** 	fine /= 4;
 271:../../../platform/common/services/clock/sam4l/dfll.h **** 
 272:../../../platform/common/services/clock/sam4l/dfll.h **** 	dfll_config_set_initial_tuning(cfg, coarse, fine);
 273:../../../platform/common/services/clock/sam4l/dfll.h **** 	dfll_priv_set_frequency_range(cfg, target_hz);
 274:../../../platform/common/services/clock/sam4l/dfll.h **** }
 275:../../../platform/common/services/clock/sam4l/dfll.h **** 
 276:../../../platform/common/services/clock/sam4l/dfll.h **** static inline void dfll_config_enable_ssg(struct dfll_config *cfg,
 277:../../../platform/common/services/clock/sam4l/dfll.h **** 		uint16_t amplitude, uint16_t step_size)
 278:../../../platform/common/services/clock/sam4l/dfll.h **** {
 279:../../../platform/common/services/clock/sam4l/dfll.h **** 	cfg->ssg = (SCIF_DFLL0SSG_EN
 280:../../../platform/common/services/clock/sam4l/dfll.h **** 			| SCIF_DFLL0SSG_AMPLITUDE(amplitude)
 281:../../../platform/common/services/clock/sam4l/dfll.h **** 			| SCIF_DFLL0SSG_STEPSIZE(step_size));
 282:../../../platform/common/services/clock/sam4l/dfll.h **** }
 283:../../../platform/common/services/clock/sam4l/dfll.h **** 
 284:../../../platform/common/services/clock/sam4l/dfll.h **** static inline void dfll_config_disable_ssg(struct dfll_config *cfg)
 285:../../../platform/common/services/clock/sam4l/dfll.h **** {
 286:../../../platform/common/services/clock/sam4l/dfll.h **** 	cfg->ssg = 0;
 287:../../../platform/common/services/clock/sam4l/dfll.h **** }
 288:../../../platform/common/services/clock/sam4l/dfll.h **** 
 289:../../../platform/common/services/clock/sam4l/dfll.h **** extern void dfll_enable_open_loop(const struct dfll_config *cfg,
 290:../../../platform/common/services/clock/sam4l/dfll.h **** 		uint32_t dfll_id);
 291:../../../platform/common/services/clock/sam4l/dfll.h **** extern void dfll_disable_open_loop(uint32_t dfll_id);
 292:../../../platform/common/services/clock/sam4l/dfll.h **** extern void dfll_enable_closed_loop(const struct dfll_config *cfg,
 293:../../../platform/common/services/clock/sam4l/dfll.h **** 		uint32_t dfll_id);
 294:../../../platform/common/services/clock/sam4l/dfll.h **** extern void dfll_disable_closed_loop(uint32_t dfll_id);
 295:../../../platform/common/services/clock/sam4l/dfll.h **** #ifndef CHIP_GENCLK_H_INCLUDED
 296:../../../platform/common/services/clock/sam4l/dfll.h **** // This function already has a prototype in genclk.h.
 297:../../../platform/common/services/clock/sam4l/dfll.h **** extern void dfll_enable_config_defaults(uint32_t dfll_id);
 298:../../../platform/common/services/clock/sam4l/dfll.h **** #endif
 299:../../../platform/common/services/clock/sam4l/dfll.h **** 
 300:../../../platform/common/services/clock/sam4l/dfll.h **** static inline bool dfll_is_coarse_locked(uint32_t dfll_id)
 301:../../../platform/common/services/clock/sam4l/dfll.h **** {
 302:../../../platform/common/services/clock/sam4l/dfll.h **** 	UNUSED(dfll_id);
 303:../../../platform/common/services/clock/sam4l/dfll.h **** 	return !!(SCIF->SCIF_PCLKSR & SCIF_PCLKSR_DFLL0LOCKC);
 304:../../../platform/common/services/clock/sam4l/dfll.h **** }
 305:../../../platform/common/services/clock/sam4l/dfll.h **** 
 306:../../../platform/common/services/clock/sam4l/dfll.h **** static inline bool dfll_is_fine_locked(uint32_t dfll_id)
 307:../../../platform/common/services/clock/sam4l/dfll.h **** {
 1113              	 .loc 7 307 0
 1114              	 .cfi_startproc
 1115              	 
 1116              	 
 1117              	 
 1118 0408 80B4     	 push {r7}
 1119              	.LCFI80:
 1120              	 .cfi_def_cfa_offset 4
 1121              	 .cfi_offset 7,-4
 1122 040a 83B0     	 sub sp,sp,#12
 1123              	.LCFI81:
 1124              	 .cfi_def_cfa_offset 16
 1125 040c 00AF     	 add r7,sp,#0
 1126              	.LCFI82:
 1127              	 .cfi_def_cfa_register 7
 1128 040e 7860     	 str r0,[r7,#4]
 308:../../../platform/common/services/clock/sam4l/dfll.h **** 	UNUSED(dfll_id);
 309:../../../platform/common/services/clock/sam4l/dfll.h **** 	return !!(SCIF->SCIF_PCLKSR & SCIF_PCLKSR_DFLL0LOCKF);
 1129              	 .loc 7 309 0
 1130 0410 064B     	 ldr r3,.L67
 1131 0412 5B69     	 ldr r3,[r3,#20]
 1132 0414 03F00403 	 and r3,r3,#4
 1133 0418 002B     	 cmp r3,#0
 1134 041a 14BF     	 ite ne
 1135 041c 0123     	 movne r3,#1
 1136 041e 0023     	 moveq r3,#0
 1137 0420 DBB2     	 uxtb r3,r3
 310:../../../platform/common/services/clock/sam4l/dfll.h **** }
 1138              	 .loc 7 310 0
 1139 0422 1846     	 mov r0,r3
 1140 0424 0C37     	 adds r7,r7,#12
 1141              	.LCFI83:
 1142              	 .cfi_def_cfa_offset 4
 1143 0426 BD46     	 mov sp,r7
 1144              	.LCFI84:
 1145              	 .cfi_def_cfa_register 13
 1146              	 
 1147 0428 80BC     	 pop {r7}
 1148              	.LCFI85:
 1149              	 .cfi_restore 7
 1150              	 .cfi_def_cfa_offset 0
 1151 042a 7047     	 bx lr
 1152              	.L68:
 1153              	 .align 2
 1154              	.L67:
 1155 042c 00080E40 	 .word 1074661376
 1156              	 .cfi_endproc
 1157              	.LFE158:
 1159              	 .align 1
 1160              	 .syntax unified
 1161              	 .thumb
 1162              	 .thumb_func
 1163              	 .fpu softvfp
 1165              	dfll_enable_source:
 1166              	.LFB160:
 311:../../../platform/common/services/clock/sam4l/dfll.h **** 
 312:../../../platform/common/services/clock/sam4l/dfll.h **** static inline bool dfll_is_accurate_locked(uint32_t dfll_id)
 313:../../../platform/common/services/clock/sam4l/dfll.h **** {
 314:../../../platform/common/services/clock/sam4l/dfll.h **** 	UNUSED(dfll_id);
 315:../../../platform/common/services/clock/sam4l/dfll.h **** 
 316:../../../platform/common/services/clock/sam4l/dfll.h **** 	return (dfll_is_coarse_locked(dfll_id) &&
 317:../../../platform/common/services/clock/sam4l/dfll.h **** 			dfll_is_fine_locked(dfll_id));
 318:../../../platform/common/services/clock/sam4l/dfll.h **** }
 319:../../../platform/common/services/clock/sam4l/dfll.h **** 
 320:../../../platform/common/services/clock/sam4l/dfll.h **** static inline void dfll_enable_source(dfll_refclk_t src)
 321:../../../platform/common/services/clock/sam4l/dfll.h **** {
 1167              	 .loc 7 321 0
 1168              	 .cfi_startproc
 1169              	 
 1170              	 
 1171 0430 80B5     	 push {r7,lr}
 1172              	.LCFI86:
 1173              	 .cfi_def_cfa_offset 8
 1174              	 .cfi_offset 7,-8
 1175              	 .cfi_offset 14,-4
 1176 0432 82B0     	 sub sp,sp,#8
 1177              	.LCFI87:
 1178              	 .cfi_def_cfa_offset 16
 1179 0434 00AF     	 add r7,sp,#0
 1180              	.LCFI88:
 1181              	 .cfi_def_cfa_register 7
 1182 0436 0346     	 mov r3,r0
 1183 0438 FB71     	 strb r3,[r7,#7]
 322:../../../platform/common/services/clock/sam4l/dfll.h **** 	switch (src) {
 1184              	 .loc 7 322 0
 1185 043a FB79     	 ldrb r3,[r7,#7]
 1186 043c 0D2B     	 cmp r3,#13
 1187 043e 5FD8     	 bhi .L82
 1188 0440 01A2     	 adr r2,.L72
 1189 0442 52F823F0 	 ldr pc,[r2,r3,lsl#2]
 1190 0446 00BF     	 .p2align 2
 1191              	.L72:
 1192 0448 01050000 	 .word .L82+1
 1193 044c 81040000 	 .word .L73+1
 1194 0450 01050000 	 .word .L82+1
 1195 0454 A1040000 	 .word .L74+1
 1196 0458 C1040000 	 .word .L75+1
 1197 045c 01050000 	 .word .L82+1
 1198 0460 01050000 	 .word .L82+1
 1199 0464 01050000 	 .word .L82+1
 1200 0468 01050000 	 .word .L82+1
 1201 046c 01050000 	 .word .L82+1
 1202 0470 01050000 	 .word .L82+1
 1203 0474 01050000 	 .word .L82+1
 1204 0478 01050000 	 .word .L82+1
 1205 047c E1040000 	 .word .L76+1
 1206              	 .p2align 1
 1207              	.L73:
 323:../../../platform/common/services/clock/sam4l/dfll.h **** 	case GENCLK_SRC_RCSYS:
 324:../../../platform/common/services/clock/sam4l/dfll.h **** 		/* Nothing to do */
 325:../../../platform/common/services/clock/sam4l/dfll.h **** 		break;
 326:../../../platform/common/services/clock/sam4l/dfll.h **** 
 327:../../../platform/common/services/clock/sam4l/dfll.h **** #ifdef BOARD_OSC32_HZ
 328:../../../platform/common/services/clock/sam4l/dfll.h **** 	case GENCLK_SRC_OSC32K:
 329:../../../platform/common/services/clock/sam4l/dfll.h **** 		if (!osc_is_ready(OSC_ID_OSC32)) {
 1208              	 .loc 7 329 0
 1209 0480 0120     	 movs r0,#1
 1210 0482 FFF73DFE 	 bl osc_is_ready
 1211 0486 0346     	 mov r3,r0
 1212 0488 83F00103 	 eor r3,r3,#1
 1213 048c DBB2     	 uxtb r3,r3
 1214 048e 002B     	 cmp r3,#0
 1215 0490 38D0     	 beq .L83
 330:../../../platform/common/services/clock/sam4l/dfll.h **** 			osc_enable(OSC_ID_OSC32);
 1216              	 .loc 7 330 0
 1217 0492 0120     	 movs r0,#1
 1218 0494 FFF7F6FD 	 bl osc_enable
 331:../../../platform/common/services/clock/sam4l/dfll.h **** 			osc_wait_ready(OSC_ID_OSC32);
 1219              	 .loc 7 331 0
 1220 0498 0120     	 movs r0,#1
 1221 049a FFF793FE 	 bl osc_wait_ready
 332:../../../platform/common/services/clock/sam4l/dfll.h **** 		}
 333:../../../platform/common/services/clock/sam4l/dfll.h **** 		break;
 1222              	 .loc 7 333 0
 1223 049e 31E0     	 b .L83
 1224              	.L74:
 334:../../../platform/common/services/clock/sam4l/dfll.h **** #endif
 335:../../../platform/common/services/clock/sam4l/dfll.h **** 
 336:../../../platform/common/services/clock/sam4l/dfll.h **** #ifdef BOARD_OSC0_HZ
 337:../../../platform/common/services/clock/sam4l/dfll.h **** 	case GENCLK_SRC_OSC0:
 338:../../../platform/common/services/clock/sam4l/dfll.h **** 		if (!osc_is_ready(OSC_ID_OSC0)) {
 1225              	 .loc 7 338 0
 1226 04a0 0020     	 movs r0,#0
 1227 04a2 FFF72DFE 	 bl osc_is_ready
 1228 04a6 0346     	 mov r3,r0
 1229 04a8 83F00103 	 eor r3,r3,#1
 1230 04ac DBB2     	 uxtb r3,r3
 1231 04ae 002B     	 cmp r3,#0
 1232 04b0 2AD0     	 beq .L84
 339:../../../platform/common/services/clock/sam4l/dfll.h **** 			osc_enable(OSC_ID_OSC0);
 1233              	 .loc 7 339 0
 1234 04b2 0020     	 movs r0,#0
 1235 04b4 FFF7E6FD 	 bl osc_enable
 340:../../../platform/common/services/clock/sam4l/dfll.h **** 			osc_wait_ready(OSC_ID_OSC0);
 1236              	 .loc 7 340 0
 1237 04b8 0020     	 movs r0,#0
 1238 04ba FFF783FE 	 bl osc_wait_ready
 341:../../../platform/common/services/clock/sam4l/dfll.h **** 		}
 342:../../../platform/common/services/clock/sam4l/dfll.h **** 		break;
 1239              	 .loc 7 342 0
 1240 04be 23E0     	 b .L84
 1241              	.L75:
 343:../../../platform/common/services/clock/sam4l/dfll.h **** #endif
 344:../../../platform/common/services/clock/sam4l/dfll.h **** 
 345:../../../platform/common/services/clock/sam4l/dfll.h **** 	case GENCLK_SRC_RC80M:
 346:../../../platform/common/services/clock/sam4l/dfll.h **** 		if (!osc_is_ready(OSC_ID_RC80M)) {
 1242              	 .loc 7 346 0
 1243 04c0 0320     	 movs r0,#3
 1244 04c2 FFF71DFE 	 bl osc_is_ready
 1245 04c6 0346     	 mov r3,r0
 1246 04c8 83F00103 	 eor r3,r3,#1
 1247 04cc DBB2     	 uxtb r3,r3
 1248 04ce 002B     	 cmp r3,#0
 1249 04d0 1CD0     	 beq .L85
 347:../../../platform/common/services/clock/sam4l/dfll.h **** 			osc_enable(OSC_ID_RC80M);
 1250              	 .loc 7 347 0
 1251 04d2 0320     	 movs r0,#3
 1252 04d4 FFF7D6FD 	 bl osc_enable
 348:../../../platform/common/services/clock/sam4l/dfll.h **** 			osc_wait_ready(OSC_ID_RC80M);
 1253              	 .loc 7 348 0
 1254 04d8 0320     	 movs r0,#3
 1255 04da FFF773FE 	 bl osc_wait_ready
 349:../../../platform/common/services/clock/sam4l/dfll.h **** 		}
 350:../../../platform/common/services/clock/sam4l/dfll.h **** 		break;
 1256              	 .loc 7 350 0
 1257 04de 15E0     	 b .L85
 1258              	.L76:
 351:../../../platform/common/services/clock/sam4l/dfll.h **** 
 352:../../../platform/common/services/clock/sam4l/dfll.h **** 	case GENCLK_SRC_RC32K:
 353:../../../platform/common/services/clock/sam4l/dfll.h **** 		if (!osc_is_ready(OSC_ID_RC32K)) {
 1259              	 .loc 7 353 0
 1260 04e0 0220     	 movs r0,#2
 1261 04e2 FFF70DFE 	 bl osc_is_ready
 1262 04e6 0346     	 mov r3,r0
 1263 04e8 83F00103 	 eor r3,r3,#1
 1264 04ec DBB2     	 uxtb r3,r3
 1265 04ee 002B     	 cmp r3,#0
 1266 04f0 0ED0     	 beq .L86
 354:../../../platform/common/services/clock/sam4l/dfll.h **** 			osc_enable(OSC_ID_RC32K);
 1267              	 .loc 7 354 0
 1268 04f2 0220     	 movs r0,#2
 1269 04f4 FFF7C6FD 	 bl osc_enable
 355:../../../platform/common/services/clock/sam4l/dfll.h **** 			osc_wait_ready(OSC_ID_RC32K);
 1270              	 .loc 7 355 0
 1271 04f8 0220     	 movs r0,#2
 1272 04fa FFF763FE 	 bl osc_wait_ready
 356:../../../platform/common/services/clock/sam4l/dfll.h **** 		}
 357:../../../platform/common/services/clock/sam4l/dfll.h **** 		break;
 1273              	 .loc 7 357 0
 1274 04fe 07E0     	 b .L86
 1275              	.L82:
 358:../../../platform/common/services/clock/sam4l/dfll.h **** 
 359:../../../platform/common/services/clock/sam4l/dfll.h **** 	default:
 360:../../../platform/common/services/clock/sam4l/dfll.h **** 		Assert(false);
 361:../../../platform/common/services/clock/sam4l/dfll.h **** 		break;
 1276              	 .loc 7 361 0
 1277 0500 00BF     	 nop
 1278 0502 06E0     	 b .L77
 1279              	.L83:
 333:../../../platform/common/services/clock/sam4l/dfll.h **** #endif
 1280              	 .loc 7 333 0
 1281 0504 00BF     	 nop
 1282 0506 04E0     	 b .L77
 1283              	.L84:
 342:../../../platform/common/services/clock/sam4l/dfll.h **** #endif
 1284              	 .loc 7 342 0
 1285 0508 00BF     	 nop
 1286 050a 02E0     	 b .L77
 1287              	.L85:
 350:../../../platform/common/services/clock/sam4l/dfll.h **** 
 1288              	 .loc 7 350 0
 1289 050c 00BF     	 nop
 1290 050e 00E0     	 b .L77
 1291              	.L86:
 357:../../../platform/common/services/clock/sam4l/dfll.h **** 
 1292              	 .loc 7 357 0
 1293 0510 00BF     	 nop
 1294              	.L77:
 362:../../../platform/common/services/clock/sam4l/dfll.h **** 	}
 363:../../../platform/common/services/clock/sam4l/dfll.h **** }
 1295              	 .loc 7 363 0
 1296 0512 00BF     	 nop
 1297 0514 0837     	 adds r7,r7,#8
 1298              	.LCFI89:
 1299              	 .cfi_def_cfa_offset 8
 1300 0516 BD46     	 mov sp,r7
 1301              	.LCFI90:
 1302              	 .cfi_def_cfa_register 13
 1303              	 
 1304 0518 80BD     	 pop {r7,pc}
 1305              	 .cfi_endproc
 1306              	.LFE160:
 1308              	 .align 1
 1309              	 .global dfll_enable_open_loop
 1310              	 .syntax unified
 1311              	 .thumb
 1312              	 .thumb_func
 1313              	 .fpu softvfp
 1315              	dfll_enable_open_loop:
 1316              	.LFB164:
 1317              	 .file 8 "../../../platform/common/services/clock/sam4l/dfll.c"
   1:../../../platform/common/services/clock/sam4l/dfll.c **** /**
   2:../../../platform/common/services/clock/sam4l/dfll.c ****  * \file
   3:../../../platform/common/services/clock/sam4l/dfll.c ****  *
   4:../../../platform/common/services/clock/sam4l/dfll.c ****  * \brief Chip-specific DFLL implementation
   5:../../../platform/common/services/clock/sam4l/dfll.c ****  *
   6:../../../platform/common/services/clock/sam4l/dfll.c ****  * Copyright (c) 2012-2014 Atmel Corporation. All rights reserved.
   7:../../../platform/common/services/clock/sam4l/dfll.c ****  *
   8:../../../platform/common/services/clock/sam4l/dfll.c ****  * \asf_license_start
   9:../../../platform/common/services/clock/sam4l/dfll.c ****  *
  10:../../../platform/common/services/clock/sam4l/dfll.c ****  * \page License
  11:../../../platform/common/services/clock/sam4l/dfll.c ****  *
  12:../../../platform/common/services/clock/sam4l/dfll.c ****  * Redistribution and use in source and binary forms, with or without
  13:../../../platform/common/services/clock/sam4l/dfll.c ****  * modification, are permitted provided that the following conditions are met:
  14:../../../platform/common/services/clock/sam4l/dfll.c ****  *
  15:../../../platform/common/services/clock/sam4l/dfll.c ****  * 1. Redistributions of source code must retain the above copyright notice,
  16:../../../platform/common/services/clock/sam4l/dfll.c ****  *    this list of conditions and the following disclaimer.
  17:../../../platform/common/services/clock/sam4l/dfll.c ****  *
  18:../../../platform/common/services/clock/sam4l/dfll.c ****  * 2. Redistributions in binary form must reproduce the above copyright notice,
  19:../../../platform/common/services/clock/sam4l/dfll.c ****  *    this list of conditions and the following disclaimer in the documentation
  20:../../../platform/common/services/clock/sam4l/dfll.c ****  *    and/or other materials provided with the distribution.
  21:../../../platform/common/services/clock/sam4l/dfll.c ****  *
  22:../../../platform/common/services/clock/sam4l/dfll.c ****  * 3. The name of Atmel may not be used to endorse or promote products derived
  23:../../../platform/common/services/clock/sam4l/dfll.c ****  *    from this software without specific prior written permission.
  24:../../../platform/common/services/clock/sam4l/dfll.c ****  *
  25:../../../platform/common/services/clock/sam4l/dfll.c ****  * 4. This software may only be redistributed and used in connection with an
  26:../../../platform/common/services/clock/sam4l/dfll.c ****  *    Atmel microcontroller product.
  27:../../../platform/common/services/clock/sam4l/dfll.c ****  *
  28:../../../platform/common/services/clock/sam4l/dfll.c ****  * THIS SOFTWARE IS PROVIDED BY ATMEL "AS IS" AND ANY EXPRESS OR IMPLIED
  29:../../../platform/common/services/clock/sam4l/dfll.c ****  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
  30:../../../platform/common/services/clock/sam4l/dfll.c ****  * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE
  31:../../../platform/common/services/clock/sam4l/dfll.c ****  * EXPRESSLY AND SPECIFICALLY DISCLAIMED. IN NO EVENT SHALL ATMEL BE LIABLE FOR
  32:../../../platform/common/services/clock/sam4l/dfll.c ****  * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  33:../../../platform/common/services/clock/sam4l/dfll.c ****  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
  34:../../../platform/common/services/clock/sam4l/dfll.c ****  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
  35:../../../platform/common/services/clock/sam4l/dfll.c ****  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
  36:../../../platform/common/services/clock/sam4l/dfll.c ****  * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
  37:../../../platform/common/services/clock/sam4l/dfll.c ****  * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  38:../../../platform/common/services/clock/sam4l/dfll.c ****  * POSSIBILITY OF SUCH DAMAGE.
  39:../../../platform/common/services/clock/sam4l/dfll.c ****  *
  40:../../../platform/common/services/clock/sam4l/dfll.c ****  * \asf_license_stop
  41:../../../platform/common/services/clock/sam4l/dfll.c ****  *
  42:../../../platform/common/services/clock/sam4l/dfll.c ****  */
  43:../../../platform/common/services/clock/sam4l/dfll.c **** #include <compiler.h>
  44:../../../platform/common/services/clock/sam4l/dfll.c **** #include <dfll.h>
  45:../../../platform/common/services/clock/sam4l/dfll.c **** 
  46:../../../platform/common/services/clock/sam4l/dfll.c **** #define dfll_write_reg(reg, value) \
  47:../../../platform/common/services/clock/sam4l/dfll.c **** 	do { \
  48:../../../platform/common/services/clock/sam4l/dfll.c **** 		while (!(SCIF->SCIF_PCLKSR & SCIF_PCLKSR_DFLL0RDY));                 \
  49:../../../platform/common/services/clock/sam4l/dfll.c **** 		irqflags_t ATPASTE2(dfll_flags, __LINE__) = cpu_irq_save();          \
  50:../../../platform/common/services/clock/sam4l/dfll.c **** 		SCIF->SCIF_UNLOCK = SCIF_UNLOCK_KEY(0xAAUL)                          \
  51:../../../platform/common/services/clock/sam4l/dfll.c **** 			| SCIF_UNLOCK_ADDR((uint32_t)&SCIF->SCIF_##reg - (uint32_t)SCIF);\
  52:../../../platform/common/services/clock/sam4l/dfll.c **** 		SCIF->SCIF_##reg = (value);                                          \
  53:../../../platform/common/services/clock/sam4l/dfll.c **** 		cpu_irq_restore(ATPASTE2(dfll_flags, __LINE__));                     \
  54:../../../platform/common/services/clock/sam4l/dfll.c **** 	} while (0)
  55:../../../platform/common/services/clock/sam4l/dfll.c **** 
  56:../../../platform/common/services/clock/sam4l/dfll.c **** 
  57:../../../platform/common/services/clock/sam4l/dfll.c **** 
  58:../../../platform/common/services/clock/sam4l/dfll.c **** void dfll_enable_open_loop(const struct dfll_config *cfg, uint32_t dfll_id)
  59:../../../platform/common/services/clock/sam4l/dfll.c **** {
 1318              	 .loc 8 59 0
 1319              	 .cfi_startproc
 1320              	 
 1321              	 
 1322 051a 80B5     	 push {r7,lr}
 1323              	.LCFI91:
 1324              	 .cfi_def_cfa_offset 8
 1325              	 .cfi_offset 7,-8
 1326              	 .cfi_offset 14,-4
 1327 051c 88B0     	 sub sp,sp,#32
 1328              	.LCFI92:
 1329              	 .cfi_def_cfa_offset 40
 1330 051e 00AF     	 add r7,sp,#0
 1331              	.LCFI93:
 1332              	 .cfi_def_cfa_register 7
 1333 0520 7860     	 str r0,[r7,#4]
 1334 0522 3960     	 str r1,[r7]
  60:../../../platform/common/services/clock/sam4l/dfll.c **** 	irqflags_t flags;
  61:../../../platform/common/services/clock/sam4l/dfll.c **** 
  62:../../../platform/common/services/clock/sam4l/dfll.c **** 	UNUSED(dfll_id);
  63:../../../platform/common/services/clock/sam4l/dfll.c **** 
  64:../../../platform/common/services/clock/sam4l/dfll.c **** 	/* First, enable the DFLL, then configure it */
  65:../../../platform/common/services/clock/sam4l/dfll.c **** 	flags = cpu_irq_save();
 1335              	 .loc 8 65 0
 1336 0524 FFF76CFD 	 bl cpu_irq_save
 1337 0528 F861     	 str r0,[r7,#28]
  66:../../../platform/common/services/clock/sam4l/dfll.c **** 	SCIF->SCIF_UNLOCK = SCIF_UNLOCK_KEY(0xAAUL)
 1338              	 .loc 8 66 0
 1339 052a 2F4B     	 ldr r3,.L92
 1340 052c 2F4A     	 ldr r2,.L92+4
 1341 052e 9A61     	 str r2,[r3,#24]
  67:../../../platform/common/services/clock/sam4l/dfll.c **** 		| SCIF_UNLOCK_ADDR((uint32_t)&SCIF->SCIF_DFLL0CONF - (uint32_t)SCIF);
  68:../../../platform/common/services/clock/sam4l/dfll.c **** 	SCIF->SCIF_DFLL0CONF = SCIF_DFLL0CONF_EN;
 1342              	 .loc 8 68 0
 1343 0530 2D4B     	 ldr r3,.L92
 1344 0532 0122     	 movs r2,#1
 1345 0534 9A62     	 str r2,[r3,#40]
  69:../../../platform/common/services/clock/sam4l/dfll.c **** 	cpu_irq_restore(flags);
 1346              	 .loc 8 69 0
 1347 0536 F869     	 ldr r0,[r7,#28]
 1348 0538 FFF78DFD 	 bl cpu_irq_restore
 1349              	.LBB22:
  70:../../../platform/common/services/clock/sam4l/dfll.c **** 	dfll_write_reg(DFLL0CONF, cfg->conf | SCIF_DFLL0CONF_EN);
 1350              	 .loc 8 70 0
 1351 053c 00BF     	 nop
 1352              	.L88:
 1353              	 .loc 8 70 0 is_stmt 0 discriminator 1
 1354 053e 2A4B     	 ldr r3,.L92
 1355 0540 5B69     	 ldr r3,[r3,#20]
 1356 0542 03F00803 	 and r3,r3,#8
 1357 0546 002B     	 cmp r3,#0
 1358 0548 F9D0     	 beq .L88
 1359              	 .loc 8 70 0 discriminator 2
 1360 054a FFF759FD 	 bl cpu_irq_save
 1361 054e B861     	 str r0,[r7,#24]
 1362 0550 254B     	 ldr r3,.L92
 1363 0552 264A     	 ldr r2,.L92+4
 1364 0554 9A61     	 str r2,[r3,#24]
 1365 0556 244A     	 ldr r2,.L92
 1366 0558 7B68     	 ldr r3,[r7,#4]
 1367 055a 5B68     	 ldr r3,[r3,#4]
 1368 055c 43F00103 	 orr r3,r3,#1
 1369 0560 9362     	 str r3,[r2,#40]
 1370 0562 B869     	 ldr r0,[r7,#24]
 1371 0564 FFF777FD 	 bl cpu_irq_restore
 1372              	.LBE22:
 1373              	.LBB23:
  71:../../../platform/common/services/clock/sam4l/dfll.c **** 	dfll_write_reg(DFLL0MUL, cfg->mul);
 1374              	 .loc 8 71 0 is_stmt 1 discriminator 2
 1375 0568 00BF     	 nop
 1376              	.L89:
 1377              	 .loc 8 71 0 is_stmt 0 discriminator 1
 1378 056a 1F4B     	 ldr r3,.L92
 1379 056c 5B69     	 ldr r3,[r3,#20]
 1380 056e 03F00803 	 and r3,r3,#8
 1381 0572 002B     	 cmp r3,#0
 1382 0574 F9D0     	 beq .L89
 1383              	 .loc 8 71 0 discriminator 2
 1384 0576 FFF743FD 	 bl cpu_irq_save
 1385 057a 7861     	 str r0,[r7,#20]
 1386 057c 1A4B     	 ldr r3,.L92
 1387 057e 1C4A     	 ldr r2,.L92+8
 1388 0580 9A61     	 str r2,[r3,#24]
 1389 0582 194A     	 ldr r2,.L92
 1390 0584 7B68     	 ldr r3,[r7,#4]
 1391 0586 9B68     	 ldr r3,[r3,#8]
 1392 0588 1363     	 str r3,[r2,#48]
 1393 058a 7869     	 ldr r0,[r7,#20]
 1394 058c FFF763FD 	 bl cpu_irq_restore
 1395              	.LBE23:
 1396              	.LBB24:
  72:../../../platform/common/services/clock/sam4l/dfll.c **** 	dfll_write_reg(DFLL0VAL, cfg->val);
 1397              	 .loc 8 72 0 is_stmt 1 discriminator 2
 1398 0590 00BF     	 nop
 1399              	.L90:
 1400              	 .loc 8 72 0 is_stmt 0 discriminator 1
 1401 0592 154B     	 ldr r3,.L92
 1402 0594 5B69     	 ldr r3,[r3,#20]
 1403 0596 03F00803 	 and r3,r3,#8
 1404 059a 002B     	 cmp r3,#0
 1405 059c F9D0     	 beq .L90
 1406              	 .loc 8 72 0 discriminator 2
 1407 059e FFF72FFD 	 bl cpu_irq_save
 1408 05a2 3861     	 str r0,[r7,#16]
 1409 05a4 104B     	 ldr r3,.L92
 1410 05a6 134A     	 ldr r2,.L92+12
 1411 05a8 9A61     	 str r2,[r3,#24]
 1412 05aa 0F4A     	 ldr r2,.L92
 1413 05ac 7B68     	 ldr r3,[r7,#4]
 1414 05ae 5B69     	 ldr r3,[r3,#20]
 1415 05b0 D362     	 str r3,[r2,#44]
 1416 05b2 3869     	 ldr r0,[r7,#16]
 1417 05b4 FFF74FFD 	 bl cpu_irq_restore
 1418              	.LBE24:
 1419              	.LBB25:
  73:../../../platform/common/services/clock/sam4l/dfll.c **** 	dfll_write_reg(DFLL0SSG, cfg->ssg);
 1420              	 .loc 8 73 0 is_stmt 1 discriminator 2
 1421 05b8 00BF     	 nop
 1422              	.L91:
 1423              	 .loc 8 73 0 is_stmt 0 discriminator 1
 1424 05ba 0B4B     	 ldr r3,.L92
 1425 05bc 5B69     	 ldr r3,[r3,#20]
 1426 05be 03F00803 	 and r3,r3,#8
 1427 05c2 002B     	 cmp r3,#0
 1428 05c4 F9D0     	 beq .L91
 1429              	 .loc 8 73 0 discriminator 2
 1430 05c6 FFF71BFD 	 bl cpu_irq_save
 1431 05ca F860     	 str r0,[r7,#12]
 1432 05cc 064B     	 ldr r3,.L92
 1433 05ce 0A4A     	 ldr r2,.L92+16
 1434 05d0 9A61     	 str r2,[r3,#24]
 1435 05d2 054A     	 ldr r2,.L92
 1436 05d4 7B68     	 ldr r3,[r7,#4]
 1437 05d6 1B69     	 ldr r3,[r3,#16]
 1438 05d8 9363     	 str r3,[r2,#56]
 1439 05da F868     	 ldr r0,[r7,#12]
 1440 05dc FFF73BFD 	 bl cpu_irq_restore
 1441              	.LBE25:
  74:../../../platform/common/services/clock/sam4l/dfll.c **** }
 1442              	 .loc 8 74 0 is_stmt 1 discriminator 2
 1443 05e0 00BF     	 nop
 1444 05e2 2037     	 adds r7,r7,#32
 1445              	.LCFI94:
 1446              	 .cfi_def_cfa_offset 8
 1447 05e4 BD46     	 mov sp,r7
 1448              	.LCFI95:
 1449              	 .cfi_def_cfa_register 13
 1450              	 
 1451 05e6 80BD     	 pop {r7,pc}
 1452              	.L93:
 1453              	 .align 2
 1454              	.L92:
 1455 05e8 00080E40 	 .word 1074661376
 1456 05ec 280000AA 	 .word -1442840536
 1457 05f0 300000AA 	 .word -1442840528
 1458 05f4 2C0000AA 	 .word -1442840532
 1459 05f8 380000AA 	 .word -1442840520
 1460              	 .cfi_endproc
 1461              	.LFE164:
 1463              	 .align 1
 1464              	 .global dfll_disable_open_loop
 1465              	 .syntax unified
 1466              	 .thumb
 1467              	 .thumb_func
 1468              	 .fpu softvfp
 1470              	dfll_disable_open_loop:
 1471              	.LFB165:
  75:../../../platform/common/services/clock/sam4l/dfll.c **** 
  76:../../../platform/common/services/clock/sam4l/dfll.c **** void dfll_disable_open_loop(uint32_t dfll_id)
  77:../../../platform/common/services/clock/sam4l/dfll.c **** {
 1472              	 .loc 8 77 0
 1473              	 .cfi_startproc
 1474              	 
 1475              	 
 1476 05fc 80B5     	 push {r7,lr}
 1477              	.LCFI96:
 1478              	 .cfi_def_cfa_offset 8
 1479              	 .cfi_offset 7,-8
 1480              	 .cfi_offset 14,-4
 1481 05fe 84B0     	 sub sp,sp,#16
 1482              	.LCFI97:
 1483              	 .cfi_def_cfa_offset 24
 1484 0600 00AF     	 add r7,sp,#0
 1485              	.LCFI98:
 1486              	 .cfi_def_cfa_register 7
 1487 0602 7860     	 str r0,[r7,#4]
  78:../../../platform/common/services/clock/sam4l/dfll.c **** 	UNUSED(dfll_id);
  79:../../../platform/common/services/clock/sam4l/dfll.c **** 
  80:../../../platform/common/services/clock/sam4l/dfll.c **** 	/* First, disable the DFLL. */
  81:../../../platform/common/services/clock/sam4l/dfll.c **** 	// Do a sync before reading a dfll conf register
  82:../../../platform/common/services/clock/sam4l/dfll.c **** 	SCIF->SCIF_DFLL0SYNC = SCIF_DFLL0SYNC_SYNC;
 1488              	 .loc 8 82 0
 1489 0604 154B     	 ldr r3,.L97
 1490 0606 0122     	 movs r2,#1
 1491 0608 1A64     	 str r2,[r3,#64]
  83:../../../platform/common/services/clock/sam4l/dfll.c **** 	while (!(SCIF->SCIF_PCLKSR & SCIF_PCLKSR_DFLL0RDY));
 1492              	 .loc 8 83 0
 1493 060a 00BF     	 nop
 1494              	.L95:
 1495              	 .loc 8 83 0 is_stmt 0 discriminator 1
 1496 060c 134B     	 ldr r3,.L97
 1497 060e 5B69     	 ldr r3,[r3,#20]
 1498 0610 03F00803 	 and r3,r3,#8
 1499 0614 002B     	 cmp r3,#0
 1500 0616 F9D0     	 beq .L95
  84:../../../platform/common/services/clock/sam4l/dfll.c **** 
  85:../../../platform/common/services/clock/sam4l/dfll.c **** 	uint32_t conf = SCIF->SCIF_DFLL0CONF;
 1501              	 .loc 8 85 0 is_stmt 1
 1502 0618 104B     	 ldr r3,.L97
 1503 061a 9B6A     	 ldr r3,[r3,#40]
 1504 061c FB60     	 str r3,[r7,#12]
  86:../../../platform/common/services/clock/sam4l/dfll.c **** 	conf &= ~SCIF_DFLL0CONF_EN;
 1505              	 .loc 8 86 0
 1506 061e FB68     	 ldr r3,[r7,#12]
 1507 0620 23F00103 	 bic r3,r3,#1
 1508 0624 FB60     	 str r3,[r7,#12]
 1509              	.LBB26:
  87:../../../platform/common/services/clock/sam4l/dfll.c **** 	dfll_write_reg(DFLL0CONF, conf);
 1510              	 .loc 8 87 0
 1511 0626 00BF     	 nop
 1512              	.L96:
 1513              	 .loc 8 87 0 is_stmt 0 discriminator 1
 1514 0628 0C4B     	 ldr r3,.L97
 1515 062a 5B69     	 ldr r3,[r3,#20]
 1516 062c 03F00803 	 and r3,r3,#8
 1517 0630 002B     	 cmp r3,#0
 1518 0632 F9D0     	 beq .L96
 1519              	 .loc 8 87 0 discriminator 2
 1520 0634 FFF7E4FC 	 bl cpu_irq_save
 1521 0638 B860     	 str r0,[r7,#8]
 1522 063a 084B     	 ldr r3,.L97
 1523 063c 084A     	 ldr r2,.L97+4
 1524 063e 9A61     	 str r2,[r3,#24]
 1525 0640 064A     	 ldr r2,.L97
 1526 0642 FB68     	 ldr r3,[r7,#12]
 1527 0644 9362     	 str r3,[r2,#40]
 1528 0646 B868     	 ldr r0,[r7,#8]
 1529 0648 FFF705FD 	 bl cpu_irq_restore
 1530              	.LBE26:
  88:../../../platform/common/services/clock/sam4l/dfll.c **** 
  89:../../../platform/common/services/clock/sam4l/dfll.c **** 	/* Finally, stop the reference clock */
  90:../../../platform/common/services/clock/sam4l/dfll.c **** 	genclk_disable(0);
 1531              	 .loc 8 90 0 is_stmt 1 discriminator 2
 1532 064c 0020     	 movs r0,#0
 1533 064e FFF72BFE 	 bl genclk_disable
  91:../../../platform/common/services/clock/sam4l/dfll.c **** }
 1534              	 .loc 8 91 0 discriminator 2
 1535 0652 00BF     	 nop
 1536 0654 1037     	 adds r7,r7,#16
 1537              	.LCFI99:
 1538              	 .cfi_def_cfa_offset 8
 1539 0656 BD46     	 mov sp,r7
 1540              	.LCFI100:
 1541              	 .cfi_def_cfa_register 13
 1542              	 
 1543 0658 80BD     	 pop {r7,pc}
 1544              	.L98:
 1545 065a 00BF     	 .align 2
 1546              	.L97:
 1547 065c 00080E40 	 .word 1074661376
 1548 0660 280000AA 	 .word -1442840536
 1549              	 .cfi_endproc
 1550              	.LFE165:
 1552              	 .align 1
 1553              	 .global dfll_enable_closed_loop
 1554              	 .syntax unified
 1555              	 .thumb
 1556              	 .thumb_func
 1557              	 .fpu softvfp
 1559              	dfll_enable_closed_loop:
 1560              	.LFB166:
  92:../../../platform/common/services/clock/sam4l/dfll.c **** 
  93:../../../platform/common/services/clock/sam4l/dfll.c **** void dfll_enable_closed_loop(const struct dfll_config *cfg, uint32_t dfll_id)
  94:../../../platform/common/services/clock/sam4l/dfll.c **** {
 1561              	 .loc 8 94 0
 1562              	 .cfi_startproc
 1563              	 
 1564              	 
 1565 0664 80B5     	 push {r7,lr}
 1566              	.LCFI101:
 1567              	 .cfi_def_cfa_offset 8
 1568              	 .cfi_offset 7,-8
 1569              	 .cfi_offset 14,-4
 1570 0666 88B0     	 sub sp,sp,#32
 1571              	.LCFI102:
 1572              	 .cfi_def_cfa_offset 40
 1573 0668 00AF     	 add r7,sp,#0
 1574              	.LCFI103:
 1575              	 .cfi_def_cfa_register 7
 1576 066a 7860     	 str r0,[r7,#4]
 1577 066c 3960     	 str r1,[r7]
  95:../../../platform/common/services/clock/sam4l/dfll.c **** 	irqflags_t flags;
  96:../../../platform/common/services/clock/sam4l/dfll.c **** 
  97:../../../platform/common/services/clock/sam4l/dfll.c **** 	UNUSED(dfll_id);
  98:../../../platform/common/services/clock/sam4l/dfll.c **** 
  99:../../../platform/common/services/clock/sam4l/dfll.c **** 	/* Enable the reference clock */
 100:../../../platform/common/services/clock/sam4l/dfll.c **** 	genclk_enable(&cfg->ref_cfg, 0);
 1578              	 .loc 8 100 0
 1579 066e 7B68     	 ldr r3,[r7,#4]
 1580 0670 0021     	 movs r1,#0
 1581 0672 1846     	 mov r0,r3
 1582 0674 FFF701FE 	 bl genclk_enable
 101:../../../platform/common/services/clock/sam4l/dfll.c **** 
 102:../../../platform/common/services/clock/sam4l/dfll.c **** 	/*
 103:../../../platform/common/services/clock/sam4l/dfll.c **** 	 * Enable the DFLL first, but don't wait for the DFLL0RDY bit
 104:../../../platform/common/services/clock/sam4l/dfll.c **** 	 * because if the DFLL has been disabled before, the DFLL0RDY
 105:../../../platform/common/services/clock/sam4l/dfll.c **** 	 * bit stays cleared until it is re-enabled.
 106:../../../platform/common/services/clock/sam4l/dfll.c **** 	 */
 107:../../../platform/common/services/clock/sam4l/dfll.c **** 	flags = cpu_irq_save();
 1583              	 .loc 8 107 0
 1584 0678 FFF7C2FC 	 bl cpu_irq_save
 1585 067c F861     	 str r0,[r7,#28]
 108:../../../platform/common/services/clock/sam4l/dfll.c **** 	SCIF->SCIF_UNLOCK = SCIF_UNLOCK_KEY(0xAAUL)
 1586              	 .loc 8 108 0
 1587 067e 2F4B     	 ldr r3,.L104
 1588 0680 2F4A     	 ldr r2,.L104+4
 1589 0682 9A61     	 str r2,[r3,#24]
 109:../../../platform/common/services/clock/sam4l/dfll.c **** 		| SCIF_UNLOCK_ADDR((uint32_t)&SCIF->SCIF_DFLL0CONF - (uint32_t)SCIF);
 110:../../../platform/common/services/clock/sam4l/dfll.c **** 	SCIF->SCIF_DFLL0CONF = SCIF_DFLL0CONF_EN;
 1590              	 .loc 8 110 0
 1591 0684 2D4B     	 ldr r3,.L104
 1592 0686 0122     	 movs r2,#1
 1593 0688 9A62     	 str r2,[r3,#40]
 111:../../../platform/common/services/clock/sam4l/dfll.c **** 	cpu_irq_restore(flags);
 1594              	 .loc 8 111 0
 1595 068a F869     	 ldr r0,[r7,#28]
 1596 068c FFF7E3FC 	 bl cpu_irq_restore
 1597              	.LBB27:
 112:../../../platform/common/services/clock/sam4l/dfll.c **** 
 113:../../../platform/common/services/clock/sam4l/dfll.c **** 	/*
 114:../../../platform/common/services/clock/sam4l/dfll.c **** 	 * Then, configure the DFLL, taking care to wait for the
 115:../../../platform/common/services/clock/sam4l/dfll.c **** 	 * DFLL0RDY bit before every step.
 116:../../../platform/common/services/clock/sam4l/dfll.c **** 	 */
 117:../../../platform/common/services/clock/sam4l/dfll.c **** 	dfll_write_reg(DFLL0STEP, cfg->step);
 1598              	 .loc 8 117 0
 1599 0690 00BF     	 nop
 1600              	.L100:
 1601              	 .loc 8 117 0 is_stmt 0 discriminator 1
 1602 0692 2A4B     	 ldr r3,.L104
 1603 0694 5B69     	 ldr r3,[r3,#20]
 1604 0696 03F00803 	 and r3,r3,#8
 1605 069a 002B     	 cmp r3,#0
 1606 069c F9D0     	 beq .L100
 1607              	 .loc 8 117 0 discriminator 2
 1608 069e FFF7AFFC 	 bl cpu_irq_save
 1609 06a2 B861     	 str r0,[r7,#24]
 1610 06a4 254B     	 ldr r3,.L104
 1611 06a6 274A     	 ldr r2,.L104+8
 1612 06a8 9A61     	 str r2,[r3,#24]
 1613 06aa 244A     	 ldr r2,.L104
 1614 06ac 7B68     	 ldr r3,[r7,#4]
 1615 06ae DB68     	 ldr r3,[r3,#12]
 1616 06b0 5363     	 str r3,[r2,#52]
 1617 06b2 B869     	 ldr r0,[r7,#24]
 1618 06b4 FFF7CFFC 	 bl cpu_irq_restore
 1619              	.LBE27:
 1620              	.LBB28:
 118:../../../platform/common/services/clock/sam4l/dfll.c **** 	dfll_write_reg(DFLL0MUL, cfg->mul);
 1621              	 .loc 8 118 0 is_stmt 1 discriminator 2
 1622 06b8 00BF     	 nop
 1623              	.L101:
 1624              	 .loc 8 118 0 is_stmt 0 discriminator 1
 1625 06ba 204B     	 ldr r3,.L104
 1626 06bc 5B69     	 ldr r3,[r3,#20]
 1627 06be 03F00803 	 and r3,r3,#8
 1628 06c2 002B     	 cmp r3,#0
 1629 06c4 F9D0     	 beq .L101
 1630              	 .loc 8 118 0 discriminator 2
 1631 06c6 FFF79BFC 	 bl cpu_irq_save
 1632 06ca 7861     	 str r0,[r7,#20]
 1633 06cc 1B4B     	 ldr r3,.L104
 1634 06ce 1E4A     	 ldr r2,.L104+12
 1635 06d0 9A61     	 str r2,[r3,#24]
 1636 06d2 1A4A     	 ldr r2,.L104
 1637 06d4 7B68     	 ldr r3,[r7,#4]
 1638 06d6 9B68     	 ldr r3,[r3,#8]
 1639 06d8 1363     	 str r3,[r2,#48]
 1640 06da 7869     	 ldr r0,[r7,#20]
 1641 06dc FFF7BBFC 	 bl cpu_irq_restore
 1642              	.LBE28:
 1643              	.LBB29:
 119:../../../platform/common/services/clock/sam4l/dfll.c **** 	dfll_write_reg(DFLL0SSG, cfg->ssg);
 1644              	 .loc 8 119 0 is_stmt 1 discriminator 2
 1645 06e0 00BF     	 nop
 1646              	.L102:
 1647              	 .loc 8 119 0 is_stmt 0 discriminator 1
 1648 06e2 164B     	 ldr r3,.L104
 1649 06e4 5B69     	 ldr r3,[r3,#20]
 1650 06e6 03F00803 	 and r3,r3,#8
 1651 06ea 002B     	 cmp r3,#0
 1652 06ec F9D0     	 beq .L102
 1653              	 .loc 8 119 0 discriminator 2
 1654 06ee FFF787FC 	 bl cpu_irq_save
 1655 06f2 3861     	 str r0,[r7,#16]
 1656 06f4 114B     	 ldr r3,.L104
 1657 06f6 154A     	 ldr r2,.L104+16
 1658 06f8 9A61     	 str r2,[r3,#24]
 1659 06fa 104A     	 ldr r2,.L104
 1660 06fc 7B68     	 ldr r3,[r7,#4]
 1661 06fe 1B69     	 ldr r3,[r3,#16]
 1662 0700 9363     	 str r3,[r2,#56]
 1663 0702 3869     	 ldr r0,[r7,#16]
 1664 0704 FFF7A7FC 	 bl cpu_irq_restore
 1665              	.LBE29:
 1666              	.LBB30:
 120:../../../platform/common/services/clock/sam4l/dfll.c **** 	dfll_write_reg(DFLL0CONF, cfg->conf | SCIF_DFLL0CONF_EN);
 1667              	 .loc 8 120 0 is_stmt 1 discriminator 2
 1668 0708 00BF     	 nop
 1669              	.L103:
 1670              	 .loc 8 120 0 is_stmt 0 discriminator 1
 1671 070a 0C4B     	 ldr r3,.L104
 1672 070c 5B69     	 ldr r3,[r3,#20]
 1673 070e 03F00803 	 and r3,r3,#8
 1674 0712 002B     	 cmp r3,#0
 1675 0714 F9D0     	 beq .L103
 1676              	 .loc 8 120 0 discriminator 2
 1677 0716 FFF773FC 	 bl cpu_irq_save
 1678 071a F860     	 str r0,[r7,#12]
 1679 071c 074B     	 ldr r3,.L104
 1680 071e 084A     	 ldr r2,.L104+4
 1681 0720 9A61     	 str r2,[r3,#24]
 1682 0722 064A     	 ldr r2,.L104
 1683 0724 7B68     	 ldr r3,[r7,#4]
 1684 0726 5B68     	 ldr r3,[r3,#4]
 1685 0728 43F00103 	 orr r3,r3,#1
 1686 072c 9362     	 str r3,[r2,#40]
 1687 072e F868     	 ldr r0,[r7,#12]
 1688 0730 FFF791FC 	 bl cpu_irq_restore
 1689              	.LBE30:
 121:../../../platform/common/services/clock/sam4l/dfll.c **** }
 1690              	 .loc 8 121 0 is_stmt 1 discriminator 2
 1691 0734 00BF     	 nop
 1692 0736 2037     	 adds r7,r7,#32
 1693              	.LCFI104:
 1694              	 .cfi_def_cfa_offset 8
 1695 0738 BD46     	 mov sp,r7
 1696              	.LCFI105:
 1697              	 .cfi_def_cfa_register 13
 1698              	 
 1699 073a 80BD     	 pop {r7,pc}
 1700              	.L105:
 1701              	 .align 2
 1702              	.L104:
 1703 073c 00080E40 	 .word 1074661376
 1704 0740 280000AA 	 .word -1442840536
 1705 0744 340000AA 	 .word -1442840524
 1706 0748 300000AA 	 .word -1442840528
 1707 074c 380000AA 	 .word -1442840520
 1708              	 .cfi_endproc
 1709              	.LFE166:
 1711              	 .align 1
 1712              	 .global dfll_disable_closed_loop
 1713              	 .syntax unified
 1714              	 .thumb
 1715              	 .thumb_func
 1716              	 .fpu softvfp
 1718              	dfll_disable_closed_loop:
 1719              	.LFB167:
 122:../../../platform/common/services/clock/sam4l/dfll.c **** 
 123:../../../platform/common/services/clock/sam4l/dfll.c **** void dfll_disable_closed_loop(uint32_t dfll_id)
 124:../../../platform/common/services/clock/sam4l/dfll.c **** {
 1720              	 .loc 8 124 0
 1721              	 .cfi_startproc
 1722              	 
 1723              	 
 1724 0750 80B5     	 push {r7,lr}
 1725              	.LCFI106:
 1726              	 .cfi_def_cfa_offset 8
 1727              	 .cfi_offset 7,-8
 1728              	 .cfi_offset 14,-4
 1729 0752 84B0     	 sub sp,sp,#16
 1730              	.LCFI107:
 1731              	 .cfi_def_cfa_offset 24
 1732 0754 00AF     	 add r7,sp,#0
 1733              	.LCFI108:
 1734              	 .cfi_def_cfa_register 7
 1735 0756 7860     	 str r0,[r7,#4]
 125:../../../platform/common/services/clock/sam4l/dfll.c **** 	UNUSED(dfll_id);
 126:../../../platform/common/services/clock/sam4l/dfll.c **** 
 127:../../../platform/common/services/clock/sam4l/dfll.c **** 	/* First, disable the DFLL. */
 128:../../../platform/common/services/clock/sam4l/dfll.c **** 	// Do a sync before reading a dfll conf register
 129:../../../platform/common/services/clock/sam4l/dfll.c **** 	SCIF->SCIF_DFLL0SYNC = SCIF_DFLL0SYNC_SYNC;
 1736              	 .loc 8 129 0
 1737 0758 154B     	 ldr r3,.L109
 1738 075a 0122     	 movs r2,#1
 1739 075c 1A64     	 str r2,[r3,#64]
 130:../../../platform/common/services/clock/sam4l/dfll.c **** 	while (!(SCIF->SCIF_PCLKSR & SCIF_PCLKSR_DFLL0RDY));
 1740              	 .loc 8 130 0
 1741 075e 00BF     	 nop
 1742              	.L107:
 1743              	 .loc 8 130 0 is_stmt 0 discriminator 1
 1744 0760 134B     	 ldr r3,.L109
 1745 0762 5B69     	 ldr r3,[r3,#20]
 1746 0764 03F00803 	 and r3,r3,#8
 1747 0768 002B     	 cmp r3,#0
 1748 076a F9D0     	 beq .L107
 131:../../../platform/common/services/clock/sam4l/dfll.c **** 
 132:../../../platform/common/services/clock/sam4l/dfll.c **** 	uint32_t conf = SCIF->SCIF_DFLL0CONF;
 1749              	 .loc 8 132 0 is_stmt 1
 1750 076c 104B     	 ldr r3,.L109
 1751 076e 9B6A     	 ldr r3,[r3,#40]
 1752 0770 FB60     	 str r3,[r7,#12]
 133:../../../platform/common/services/clock/sam4l/dfll.c **** 	conf &= ~SCIF_DFLL0CONF_EN;
 1753              	 .loc 8 133 0
 1754 0772 FB68     	 ldr r3,[r7,#12]
 1755 0774 23F00103 	 bic r3,r3,#1
 1756 0778 FB60     	 str r3,[r7,#12]
 1757              	.LBB31:
 134:../../../platform/common/services/clock/sam4l/dfll.c **** 	dfll_write_reg(DFLL0CONF, conf);
 1758              	 .loc 8 134 0
 1759 077a 00BF     	 nop
 1760              	.L108:
 1761              	 .loc 8 134 0 is_stmt 0 discriminator 1
 1762 077c 0C4B     	 ldr r3,.L109
 1763 077e 5B69     	 ldr r3,[r3,#20]
 1764 0780 03F00803 	 and r3,r3,#8
 1765 0784 002B     	 cmp r3,#0
 1766 0786 F9D0     	 beq .L108
 1767              	 .loc 8 134 0 discriminator 2
 1768 0788 FFF73AFC 	 bl cpu_irq_save
 1769 078c B860     	 str r0,[r7,#8]
 1770 078e 084B     	 ldr r3,.L109
 1771 0790 084A     	 ldr r2,.L109+4
 1772 0792 9A61     	 str r2,[r3,#24]
 1773 0794 064A     	 ldr r2,.L109
 1774 0796 FB68     	 ldr r3,[r7,#12]
 1775 0798 9362     	 str r3,[r2,#40]
 1776 079a B868     	 ldr r0,[r7,#8]
 1777 079c FFF75BFC 	 bl cpu_irq_restore
 1778              	.LBE31:
 135:../../../platform/common/services/clock/sam4l/dfll.c **** 
 136:../../../platform/common/services/clock/sam4l/dfll.c **** 	/* Finally, stop the reference clock */
 137:../../../platform/common/services/clock/sam4l/dfll.c **** 	genclk_disable(0);
 1779              	 .loc 8 137 0 is_stmt 1 discriminator 2
 1780 07a0 0020     	 movs r0,#0
 1781 07a2 FFF781FD 	 bl genclk_disable
 138:../../../platform/common/services/clock/sam4l/dfll.c **** }
 1782              	 .loc 8 138 0 discriminator 2
 1783 07a6 00BF     	 nop
 1784 07a8 1037     	 adds r7,r7,#16
 1785              	.LCFI109:
 1786              	 .cfi_def_cfa_offset 8
 1787 07aa BD46     	 mov sp,r7
 1788              	.LCFI110:
 1789              	 .cfi_def_cfa_register 13
 1790              	 
 1791 07ac 80BD     	 pop {r7,pc}
 1792              	.L110:
 1793 07ae 00BF     	 .align 2
 1794              	.L109:
 1795 07b0 00080E40 	 .word 1074661376
 1796 07b4 280000AA 	 .word -1442840536
 1797              	 .cfi_endproc
 1798              	.LFE167:
 1800              	 .align 1
 1801              	 .global dfll_enable_config_defaults
 1802              	 .syntax unified
 1803              	 .thumb
 1804              	 .thumb_func
 1805              	 .fpu softvfp
 1807              	dfll_enable_config_defaults:
 1808              	.LFB168:
 139:../../../platform/common/services/clock/sam4l/dfll.c **** 
 140:../../../platform/common/services/clock/sam4l/dfll.c **** void dfll_enable_config_defaults(uint32_t dfll_id)
 141:../../../platform/common/services/clock/sam4l/dfll.c **** {
 1809              	 .loc 8 141 0
 1810              	 .cfi_startproc
 1811              	 
 1812              	 
 1813 07b8 80B5     	 push {r7,lr}
 1814              	.LCFI111:
 1815              	 .cfi_def_cfa_offset 8
 1816              	 .cfi_offset 7,-8
 1817              	 .cfi_offset 14,-4
 1818 07ba 8AB0     	 sub sp,sp,#40
 1819              	.LCFI112:
 1820              	 .cfi_def_cfa_offset 48
 1821 07bc 00AF     	 add r7,sp,#0
 1822              	.LCFI113:
 1823              	 .cfi_def_cfa_register 7
 1824 07be 7860     	 str r0,[r7,#4]
 142:../../../platform/common/services/clock/sam4l/dfll.c **** #ifdef CONFIG_DFLL0_SOURCE
 143:../../../platform/common/services/clock/sam4l/dfll.c **** 	struct dfll_config dfllcfg;
 144:../../../platform/common/services/clock/sam4l/dfll.c **** #endif
 145:../../../platform/common/services/clock/sam4l/dfll.c **** 	static bool open_loop_done = false;
 146:../../../platform/common/services/clock/sam4l/dfll.c **** 
 147:../../../platform/common/services/clock/sam4l/dfll.c **** 	if((SCIF->SCIF_DFLL0CONF & SCIF_DFLL0CONF_MODE) &&
 1825              	 .loc 8 147 0
 1826 07c0 1D4B     	 ldr r3,.L122
 1827 07c2 9B6A     	 ldr r3,[r3,#40]
 1828 07c4 03F00203 	 and r3,r3,#2
 1829 07c8 002B     	 cmp r3,#0
 1830 07ca 0BD0     	 beq .L112
 148:../../../platform/common/services/clock/sam4l/dfll.c **** 	   (SCIF->SCIF_DFLL0CONF & SCIF_DFLL0CONF_EN)) {
 1831              	 .loc 8 148 0 discriminator 1
 1832 07cc 1A4B     	 ldr r3,.L122
 1833 07ce 9B6A     	 ldr r3,[r3,#40]
 1834 07d0 03F00103 	 and r3,r3,#1
 147:../../../platform/common/services/clock/sam4l/dfll.c **** 	   (SCIF->SCIF_DFLL0CONF & SCIF_DFLL0CONF_EN)) {
 1835              	 .loc 8 147 0 discriminator 1
 1836 07d4 002B     	 cmp r3,#0
 1837 07d6 05D0     	 beq .L112
 149:../../../platform/common/services/clock/sam4l/dfll.c **** 		// Closed-loop mode
 150:../../../platform/common/services/clock/sam4l/dfll.c **** 		if (dfll_is_fine_locked(dfll_id)) {
 1838              	 .loc 8 150 0
 1839 07d8 7868     	 ldr r0,[r7,#4]
 1840 07da FFF715FE 	 bl dfll_is_fine_locked
 1841 07de 0346     	 mov r3,r0
 1842 07e0 002B     	 cmp r3,#0
 1843 07e2 23D1     	 bne .L120
 1844              	.L112:
 151:../../../platform/common/services/clock/sam4l/dfll.c **** 			return; // DFLL already running
 152:../../../platform/common/services/clock/sam4l/dfll.c **** 		}
 153:../../../platform/common/services/clock/sam4l/dfll.c **** 	}
 154:../../../platform/common/services/clock/sam4l/dfll.c **** 	if (open_loop_done == true) {
 1845              	 .loc 8 154 0
 1846 07e4 154B     	 ldr r3,.L122+4
 1847 07e6 1B78     	 ldrb r3,[r3]
 1848 07e8 002B     	 cmp r3,#0
 1849 07ea 21D1     	 bne .L121
 155:../../../platform/common/services/clock/sam4l/dfll.c **** 		return;
 156:../../../platform/common/services/clock/sam4l/dfll.c **** 	}
 157:../../../platform/common/services/clock/sam4l/dfll.c **** 
 158:../../../platform/common/services/clock/sam4l/dfll.c **** 	switch (dfll_id) {
 1850              	 .loc 8 158 0
 1851 07ec 7B68     	 ldr r3,[r7,#4]
 1852 07ee 002B     	 cmp r3,#0
 1853 07f0 00D0     	 beq .L116
 159:../../../platform/common/services/clock/sam4l/dfll.c **** #ifdef CONFIG_DFLL0_SOURCE
 160:../../../platform/common/services/clock/sam4l/dfll.c **** 	case 0:
 161:../../../platform/common/services/clock/sam4l/dfll.c **** 		dfll_enable_source(CONFIG_DFLL0_SOURCE);
 162:../../../platform/common/services/clock/sam4l/dfll.c **** 		dfll_config_init_closed_loop_mode(&dfllcfg,
 163:../../../platform/common/services/clock/sam4l/dfll.c **** 			CONFIG_DFLL0_SOURCE,
 164:../../../platform/common/services/clock/sam4l/dfll.c **** 			CONFIG_DFLL0_DIV,
 165:../../../platform/common/services/clock/sam4l/dfll.c **** 			CONFIG_DFLL0_MUL);
 166:../../../platform/common/services/clock/sam4l/dfll.c **** 
 167:../../../platform/common/services/clock/sam4l/dfll.c **** 		dfll_enable_closed_loop(&dfllcfg, dfll_id);
 168:../../../platform/common/services/clock/sam4l/dfll.c **** 		while (!dfll_is_fine_locked(dfll_id));
 169:../../../platform/common/services/clock/sam4l/dfll.c **** 		break;
 170:../../../platform/common/services/clock/sam4l/dfll.c **** #endif
 171:../../../platform/common/services/clock/sam4l/dfll.c **** 
 172:../../../platform/common/services/clock/sam4l/dfll.c **** 	default:
 173:../../../platform/common/services/clock/sam4l/dfll.c **** 		Assert(false);
 174:../../../platform/common/services/clock/sam4l/dfll.c **** 		break;
 1854              	 .loc 8 174 0
 1855 07f2 1EE0     	 b .L111
 1856              	.L116:
 161:../../../platform/common/services/clock/sam4l/dfll.c **** 		dfll_config_init_closed_loop_mode(&dfllcfg,
 1857              	 .loc 8 161 0
 1858 07f4 0120     	 movs r0,#1
 1859 07f6 FFF71BFE 	 bl dfll_enable_source
 162:../../../platform/common/services/clock/sam4l/dfll.c **** 			CONFIG_DFLL0_SOURCE,
 1860              	 .loc 8 162 0
 1861 07fa 07F10C00 	 add r0,r7,#12
 1862 07fe 41F2E363 	 movw r3,#5859
 1863 0802 0422     	 movs r2,#4
 1864 0804 0121     	 movs r1,#1
 1865 0806 FFF7B3FD 	 bl dfll_config_init_closed_loop_mode
 167:../../../platform/common/services/clock/sam4l/dfll.c **** 		while (!dfll_is_fine_locked(dfll_id));
 1866              	 .loc 8 167 0
 1867 080a 07F10C03 	 add r3,r7,#12
 1868 080e 7968     	 ldr r1,[r7,#4]
 1869 0810 1846     	 mov r0,r3
 1870 0812 FFF7FEFF 	 bl dfll_enable_closed_loop
 168:../../../platform/common/services/clock/sam4l/dfll.c **** 		break;
 1871              	 .loc 8 168 0
 1872 0816 00BF     	 nop
 1873              	.L117:
 168:../../../platform/common/services/clock/sam4l/dfll.c **** 		break;
 1874              	 .loc 8 168 0 is_stmt 0 discriminator 1
 1875 0818 7868     	 ldr r0,[r7,#4]
 1876 081a FFF7F5FD 	 bl dfll_is_fine_locked
 1877 081e 0346     	 mov r3,r0
 1878 0820 83F00103 	 eor r3,r3,#1
 1879 0824 DBB2     	 uxtb r3,r3
 1880 0826 002B     	 cmp r3,#0
 1881 0828 F6D1     	 bne .L117
 169:../../../platform/common/services/clock/sam4l/dfll.c **** #endif
 1882              	 .loc 8 169 0 is_stmt 1
 1883 082a 02E0     	 b .L111
 1884              	.L120:
 151:../../../platform/common/services/clock/sam4l/dfll.c **** 		}
 1885              	 .loc 8 151 0
 1886 082c 00BF     	 nop
 1887 082e 00E0     	 b .L111
 1888              	.L121:
 155:../../../platform/common/services/clock/sam4l/dfll.c **** 	}
 1889              	 .loc 8 155 0
 1890 0830 00BF     	 nop
 1891              	.L111:
 175:../../../platform/common/services/clock/sam4l/dfll.c **** 	}
 176:../../../platform/common/services/clock/sam4l/dfll.c **** }
 1892              	 .loc 8 176 0
 1893 0832 2837     	 adds r7,r7,#40
 1894              	.LCFI114:
 1895              	 .cfi_def_cfa_offset 8
 1896 0834 BD46     	 mov sp,r7
 1897              	.LCFI115:
 1898              	 .cfi_def_cfa_register 13
 1899              	 
 1900 0836 80BD     	 pop {r7,pc}
 1901              	.L123:
 1902              	 .align 2
 1903              	.L122:
 1904 0838 00080E40 	 .word 1074661376
 1905 083c 00000000 	 .word open_loop_done.8576
 1906              	 .cfi_endproc
 1907              	.LFE168:
 1909              	 .section .bss.open_loop_done.8576,"aw",%nobits
 1912              	open_loop_done.8576:
 1913 0000 00       	 .space 1
 1914              	 .text
 1915              	.Letext0:
 1916              	 .file 9 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\arm\\arm-gnu-toolchain\\arm-none-eabi\\include\\machine\\_default_types.h"
 1917              	 .file 10 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\arm\\arm-gnu-toolchain\\arm-none-eabi\\include\\sys\\_stdint.h"
 1918              	 .file 11 "../../../platform/sam/utils/cmsis/sam4l/include/sam4lc4b.h"
 1919              	 .file 12 "../../../platform/thirdparty/CMSIS/include/core_cm4.h"
 1920              	 .file 13 "../../../platform/sam/utils/cmsis/sam4l/source/templates/system_sam4l.h"
 1921              	 .file 14 "../../../platform/sam/utils/cmsis/sam4l/include/component/component_bscif.h"
 1922              	 .file 15 "../../../platform/sam/utils/cmsis/sam4l/include/component/component_scif.h"
 1923              	 .file 16 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\arm\\arm-gnu-toolchain\\arm-none-eabi\\include\\sys\\lock.h"
 1924              	 .file 17 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\arm\\arm-gnu-toolchain\\arm-none-eabi\\include\\sys\\_types.h"
 1925              	 .file 18 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\arm\\arm-gnu-toolchain\\lib\\gcc\\arm-none-eabi\\6.3.1\\include\\stddef.h"
 1926              	 .file 19 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\arm\\arm-gnu-toolchain\\arm-none-eabi\\include\\sys\\reent.h"
 1927              	 .file 20 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\arm\\arm-gnu-toolchain\\arm-none-eabi\\include\\stdlib.h"
 1928              	 .file 21 "../../../platform/sam/utils/compiler.h"
 1929              	 .file 22 "../../../platform/common/services/usb/usb_protocol.h"
 1930              	 .file 23 "../../../platform/common/services/usb/udc/udi.h"
 1931              	 .file 24 "../../../platform/common/services/usb/udc/udc_desc.h"
 1932              	 .file 25 "../../../platform/common/services/usb/udc/udd.h"
 1933              	 .file 26 "../../../platform/common/services/usb/class/cdc/device/udi_cdc.h"
 1934              	 .file 27 "../../../platform/common/utils/stdio/stdio_usb/stdio_usb.h"
 1935              	 .file 28 "config/config.h"
DEFINED SYMBOLS
                            *ABS*:00000000 dfll.c
    {standard input}:16     .bss.cpu_irq_critical_section_counter:00000000 $d
    {standard input}:19     .bss.cpu_irq_critical_section_counter:00000000 cpu_irq_critical_section_counter
    {standard input}:24     .bss.cpu_irq_prev_interrupt_state:00000000 cpu_irq_prev_interrupt_state
    {standard input}:25     .bss.cpu_irq_prev_interrupt_state:00000000 $d
    {standard input}:27     .text:00000000 $t
    {standard input}:33     .text:00000000 cpu_irq_save
    {standard input}:119    .text:00000034 $d
    {standard input}:123    .text:00000038 $t
    {standard input}:129    .text:00000038 cpu_irq_is_enabled_flags
    {standard input}:177    .text:00000056 cpu_irq_restore
    {standard input}:241    .text:00000080 $d
                            *COM*:00000001 n
    {standard input}:247    .bss.tTS:00000000 $d
    {standard input}:250    .bss.tTS:00000000 tTS
    {standard input}:253    .text:00000084 $t
    {standard input}:259    .text:00000084 osc_enable
    {standard input}:287    .text:0000009c $d
    {standard input}:294    .text:000000b8 $t
    {standard input}:354    .text:000000e8 $d
    {standard input}:363    .text:00000100 $t
    {standard input}:369    .text:00000100 osc_is_ready
    {standard input}:396    .text:00000118 $d
    {standard input}:403    .text:00000134 $t
    {standard input}:495    .text:000001bc $d
    {standard input}:500    .text:000001c4 $t
    {standard input}:506    .text:000001c4 osc_wait_ready
    {standard input}:557    .text:000001ec genclk_config_defaults
    {standard input}:604    .text:00000206 genclk_config_set_source
    {standard input}:659    .text:00000232 genclk_config_set_divider
    {standard input}:730    .text:0000027a genclk_enable
    {standard input}:776    .text:000002a4 $d
    {standard input}:780    .text:000002a8 $t
    {standard input}:786    .text:000002a8 genclk_disable
    {standard input}:829    .text:000002c8 $d
    {standard input}:833    .text:000002cc $t
    {standard input}:839    .text:000002cc dfll_config_set_max_step
    {standard input}:896    .text:000002f8 dfll_priv_set_frequency_range
    {standard input}:986    .text:00000364 $d
    {standard input}:992    .text:00000370 $t
    {standard input}:998    .text:00000370 dfll_config_init_closed_loop_mode
    {standard input}:1100   .text:00000400 $d
    {standard input}:1105   .text:00000408 $t
    {standard input}:1111   .text:00000408 dfll_is_fine_locked
    {standard input}:1155   .text:0000042c $d
    {standard input}:1159   .text:00000430 $t
    {standard input}:1165   .text:00000430 dfll_enable_source
    {standard input}:1192   .text:00000448 $d
    {standard input}:1206   .text:00000480 $t
    {standard input}:1315   .text:0000051a dfll_enable_open_loop
    {standard input}:1455   .text:000005e8 $d
    {standard input}:1463   .text:000005fc $t
    {standard input}:1470   .text:000005fc dfll_disable_open_loop
    {standard input}:1547   .text:0000065c $d
    {standard input}:1552   .text:00000664 $t
    {standard input}:1559   .text:00000664 dfll_enable_closed_loop
    {standard input}:1703   .text:0000073c $d
    {standard input}:1711   .text:00000750 $t
    {standard input}:1718   .text:00000750 dfll_disable_closed_loop
    {standard input}:1795   .text:000007b0 $d
    {standard input}:1800   .text:000007b8 $t
    {standard input}:1807   .text:000007b8 dfll_enable_config_defaults
    {standard input}:1904   .text:00000838 $d
    {standard input}:1912   .bss.open_loop_done.8576:00000000 open_loop_done.8576
    {standard input}:1913   .bss.open_loop_done.8576:00000000 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
g_interrupt_enabled
osc_priv_enable_osc0
osc_priv_enable_osc32
osc_priv_enable_rc32k
osc_priv_enable_rc80m
osc_priv_enable_rcfast
osc_priv_enable_rc1m
