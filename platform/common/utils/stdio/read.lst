   1              	 .cpu cortex-m4
   2              	 .eabi_attribute 20,1
   3              	 .eabi_attribute 21,1
   4              	 .eabi_attribute 23,3
   5              	 .eabi_attribute 24,1
   6              	 .eabi_attribute 25,1
   7              	 .eabi_attribute 26,1
   8              	 .eabi_attribute 30,6
   9              	 .eabi_attribute 34,1
  10              	 .eabi_attribute 18,4
  11              	 .file "read.c"
  12              	 .text
  13              	.Ltext0:
  14              	 .cfi_sections .debug_frame
  15              	 .section .bss.cpu_irq_critical_section_counter,"aw",%nobits
  16              	 .align 2
  19              	cpu_irq_critical_section_counter:
  20 0000 00000000 	 .space 4
  21              	 .section .bss.cpu_irq_prev_interrupt_state,"aw",%nobits
  24              	cpu_irq_prev_interrupt_state:
  25 0000 00       	 .space 1
  26              	 .comm ptr_get,4,4
  27              	 .text
  28              	 .align 1
  29              	 .weak _read
  30              	 .syntax unified
  31              	 .thumb
  32              	 .thumb_func
  33              	 .fpu softvfp
  35              	_read:
  36              	.LFB122:
  37              	 .file 1 "../../../platform/common/utils/stdio/read.c"
   1:../../../platform/common/utils/stdio/read.c **** /**
   2:../../../platform/common/utils/stdio/read.c ****  * \file
   3:../../../platform/common/utils/stdio/read.c ****  *
   4:../../../platform/common/utils/stdio/read.c ****  * \brief System-specific implementation of the \ref _read function used by
   5:../../../platform/common/utils/stdio/read.c ****  *         the standard library.
   6:../../../platform/common/utils/stdio/read.c ****  *
   7:../../../platform/common/utils/stdio/read.c ****  * Copyright (c) 2009-2013 Atmel Corporation. All rights reserved.
   8:../../../platform/common/utils/stdio/read.c ****  *
   9:../../../platform/common/utils/stdio/read.c ****  * \asf_license_start
  10:../../../platform/common/utils/stdio/read.c ****  *
  11:../../../platform/common/utils/stdio/read.c ****  * \page License
  12:../../../platform/common/utils/stdio/read.c ****  *
  13:../../../platform/common/utils/stdio/read.c ****  * Redistribution and use in source and binary forms, with or without
  14:../../../platform/common/utils/stdio/read.c ****  * modification, are permitted provided that the following conditions are met:
  15:../../../platform/common/utils/stdio/read.c ****  *
  16:../../../platform/common/utils/stdio/read.c ****  * 1. Redistributions of source code must retain the above copyright notice,
  17:../../../platform/common/utils/stdio/read.c ****  *    this list of conditions and the following disclaimer.
  18:../../../platform/common/utils/stdio/read.c ****  *
  19:../../../platform/common/utils/stdio/read.c ****  * 2. Redistributions in binary form must reproduce the above copyright notice,
  20:../../../platform/common/utils/stdio/read.c ****  *    this list of conditions and the following disclaimer in the documentation
  21:../../../platform/common/utils/stdio/read.c ****  *    and/or other materials provided with the distribution.
  22:../../../platform/common/utils/stdio/read.c ****  *
  23:../../../platform/common/utils/stdio/read.c ****  * 3. The name of Atmel may not be used to endorse or promote products derived
  24:../../../platform/common/utils/stdio/read.c ****  *    from this software without specific prior written permission.
  25:../../../platform/common/utils/stdio/read.c ****  *
  26:../../../platform/common/utils/stdio/read.c ****  * 4. This software may only be redistributed and used in connection with an
  27:../../../platform/common/utils/stdio/read.c ****  *    Atmel microcontroller product.
  28:../../../platform/common/utils/stdio/read.c ****  *
  29:../../../platform/common/utils/stdio/read.c ****  * THIS SOFTWARE IS PROVIDED BY ATMEL "AS IS" AND ANY EXPRESS OR IMPLIED
  30:../../../platform/common/utils/stdio/read.c ****  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
  31:../../../platform/common/utils/stdio/read.c ****  * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE
  32:../../../platform/common/utils/stdio/read.c ****  * EXPRESSLY AND SPECIFICALLY DISCLAIMED. IN NO EVENT SHALL ATMEL BE LIABLE FOR
  33:../../../platform/common/utils/stdio/read.c ****  * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  34:../../../platform/common/utils/stdio/read.c ****  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
  35:../../../platform/common/utils/stdio/read.c ****  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
  36:../../../platform/common/utils/stdio/read.c ****  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
  37:../../../platform/common/utils/stdio/read.c ****  * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
  38:../../../platform/common/utils/stdio/read.c ****  * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  39:../../../platform/common/utils/stdio/read.c ****  * POSSIBILITY OF SUCH DAMAGE.
  40:../../../platform/common/utils/stdio/read.c ****  *
  41:../../../platform/common/utils/stdio/read.c ****  * \asf_license_stop
  42:../../../platform/common/utils/stdio/read.c ****  *
  43:../../../platform/common/utils/stdio/read.c ****  */
  44:../../../platform/common/utils/stdio/read.c **** 
  45:../../../platform/common/utils/stdio/read.c **** #include "compiler.h"
  46:../../../platform/common/utils/stdio/read.c **** 
  47:../../../platform/common/utils/stdio/read.c **** /**
  48:../../../platform/common/utils/stdio/read.c ****  * \defgroup group_common_utils_stdio Standard I/O (stdio)
  49:../../../platform/common/utils/stdio/read.c ****  *
  50:../../../platform/common/utils/stdio/read.c ****  * Common standard I/O driver that implements the stdio
  51:../../../platform/common/utils/stdio/read.c ****  * read and write functions on AVR and SAM devices.
  52:../../../platform/common/utils/stdio/read.c ****  *
  53:../../../platform/common/utils/stdio/read.c ****  * \{
  54:../../../platform/common/utils/stdio/read.c ****  */
  55:../../../platform/common/utils/stdio/read.c **** 
  56:../../../platform/common/utils/stdio/read.c **** extern volatile void *volatile stdio_base;
  57:../../../platform/common/utils/stdio/read.c **** void (*ptr_get)(void volatile*, char*);
  58:../../../platform/common/utils/stdio/read.c **** 
  59:../../../platform/common/utils/stdio/read.c **** 
  60:../../../platform/common/utils/stdio/read.c **** // IAR common implementation
  61:../../../platform/common/utils/stdio/read.c **** #if ( defined(__ICCAVR32__) || defined(__ICCAVR__) || defined(__ICCARM__) )
  62:../../../platform/common/utils/stdio/read.c **** 
  63:../../../platform/common/utils/stdio/read.c **** #include <yfuns.h>
  64:../../../platform/common/utils/stdio/read.c **** 
  65:../../../platform/common/utils/stdio/read.c **** _STD_BEGIN
  66:../../../platform/common/utils/stdio/read.c **** 
  67:../../../platform/common/utils/stdio/read.c **** #pragma module_name = "?__read"
  68:../../../platform/common/utils/stdio/read.c **** 
  69:../../../platform/common/utils/stdio/read.c **** /*! \brief Reads a number of bytes, at most \a size, into the memory area
  70:../../../platform/common/utils/stdio/read.c ****  *         pointed to by \a buffer.
  71:../../../platform/common/utils/stdio/read.c ****  *
  72:../../../platform/common/utils/stdio/read.c ****  * \param handle File handle to read from.
  73:../../../platform/common/utils/stdio/read.c ****  * \param buffer Pointer to buffer to write read bytes to.
  74:../../../platform/common/utils/stdio/read.c ****  * \param size Number of bytes to read.
  75:../../../platform/common/utils/stdio/read.c ****  *
  76:../../../platform/common/utils/stdio/read.c ****  * \return The number of bytes read, \c 0 at the end of the file, or
  77:../../../platform/common/utils/stdio/read.c ****  *         \c _LLIO_ERROR on failure.
  78:../../../platform/common/utils/stdio/read.c ****  */
  79:../../../platform/common/utils/stdio/read.c **** size_t __read(int handle, unsigned char *buffer, size_t size)
  80:../../../platform/common/utils/stdio/read.c **** {
  81:../../../platform/common/utils/stdio/read.c **** 	int nChars = 0;
  82:../../../platform/common/utils/stdio/read.c **** 	// This implementation only reads from stdin.
  83:../../../platform/common/utils/stdio/read.c **** 	// For all other file handles, it returns failure.
  84:../../../platform/common/utils/stdio/read.c **** 	if (handle != _LLIO_STDIN) {
  85:../../../platform/common/utils/stdio/read.c **** 		return _LLIO_ERROR;
  86:../../../platform/common/utils/stdio/read.c **** 	}
  87:../../../platform/common/utils/stdio/read.c **** 	for (; size > 0; --size) {
  88:../../../platform/common/utils/stdio/read.c **** 		ptr_get(stdio_base, (char*)buffer);
  89:../../../platform/common/utils/stdio/read.c **** 		buffer++;
  90:../../../platform/common/utils/stdio/read.c **** 		nChars++;
  91:../../../platform/common/utils/stdio/read.c **** 	}
  92:../../../platform/common/utils/stdio/read.c **** 	return nChars;
  93:../../../platform/common/utils/stdio/read.c **** }
  94:../../../platform/common/utils/stdio/read.c **** 
  95:../../../platform/common/utils/stdio/read.c **** /*! \brief This routine is required by IAR DLIB library since EWAVR V6.10
  96:../../../platform/common/utils/stdio/read.c ****  * the implementation is empty to be compatible with old IAR version.
  97:../../../platform/common/utils/stdio/read.c ****  */
  98:../../../platform/common/utils/stdio/read.c **** int __close(int handle)
  99:../../../platform/common/utils/stdio/read.c **** {
 100:../../../platform/common/utils/stdio/read.c **** 	UNUSED(handle);
 101:../../../platform/common/utils/stdio/read.c **** 	return 0;
 102:../../../platform/common/utils/stdio/read.c **** }
 103:../../../platform/common/utils/stdio/read.c **** 
 104:../../../platform/common/utils/stdio/read.c **** /*! \brief This routine is required by IAR DLIB library since EWAVR V6.10
 105:../../../platform/common/utils/stdio/read.c ****  * the implementation is empty to be compatible with old IAR version.
 106:../../../platform/common/utils/stdio/read.c ****  */
 107:../../../platform/common/utils/stdio/read.c **** int remove(const char* val)
 108:../../../platform/common/utils/stdio/read.c **** {
 109:../../../platform/common/utils/stdio/read.c **** 	UNUSED(val);
 110:../../../platform/common/utils/stdio/read.c **** 	return 0;
 111:../../../platform/common/utils/stdio/read.c **** }
 112:../../../platform/common/utils/stdio/read.c **** 
 113:../../../platform/common/utils/stdio/read.c **** /*! \brief This routine is required by IAR DLIB library since EWAVR V6.10
 114:../../../platform/common/utils/stdio/read.c ****  * the implementation is empty to be compatible with old IAR version.
 115:../../../platform/common/utils/stdio/read.c ****  */
 116:../../../platform/common/utils/stdio/read.c **** long __lseek(int handle, long val, int val2)
 117:../../../platform/common/utils/stdio/read.c **** {
 118:../../../platform/common/utils/stdio/read.c **** 	UNUSED(handle);
 119:../../../platform/common/utils/stdio/read.c **** 	UNUSED(val2);
 120:../../../platform/common/utils/stdio/read.c **** 	return val;
 121:../../../platform/common/utils/stdio/read.c **** }
 122:../../../platform/common/utils/stdio/read.c **** 
 123:../../../platform/common/utils/stdio/read.c **** _STD_END
 124:../../../platform/common/utils/stdio/read.c **** 
 125:../../../platform/common/utils/stdio/read.c **** // GCC AVR32 and SAM implementation
 126:../../../platform/common/utils/stdio/read.c **** #elif (defined(__GNUC__) && !XMEGA && !MEGA) 
 127:../../../platform/common/utils/stdio/read.c **** 
 128:../../../platform/common/utils/stdio/read.c **** int __attribute__((weak))
 129:../../../platform/common/utils/stdio/read.c **** _read (int file, char * ptr, int len); // Remove GCC compiler warning
 130:../../../platform/common/utils/stdio/read.c **** 
 131:../../../platform/common/utils/stdio/read.c **** int __attribute__((weak))
 132:../../../platform/common/utils/stdio/read.c **** _read (int file, char * ptr, int len)
 133:../../../platform/common/utils/stdio/read.c **** {
  38              	 .loc 1 133 0
  39              	 .cfi_startproc
  40              	 
  41              	 
  42 0000 80B5     	 push {r7,lr}
  43              	.LCFI0:
  44              	 .cfi_def_cfa_offset 8
  45              	 .cfi_offset 7,-8
  46              	 .cfi_offset 14,-4
  47 0002 86B0     	 sub sp,sp,#24
  48              	.LCFI1:
  49              	 .cfi_def_cfa_offset 32
  50 0004 00AF     	 add r7,sp,#0
  51              	.LCFI2:
  52              	 .cfi_def_cfa_register 7
  53 0006 F860     	 str r0,[r7,#12]
  54 0008 B960     	 str r1,[r7,#8]
  55 000a 7A60     	 str r2,[r7,#4]
 134:../../../platform/common/utils/stdio/read.c **** 	int nChars = 0;
  56              	 .loc 1 134 0
  57 000c 0023     	 movs r3,#0
  58 000e 7B61     	 str r3,[r7,#20]
 135:../../../platform/common/utils/stdio/read.c **** 
 136:../../../platform/common/utils/stdio/read.c **** 	if (file != 0) {
  59              	 .loc 1 136 0
  60 0010 FB68     	 ldr r3,[r7,#12]
  61 0012 002B     	 cmp r3,#0
  62 0014 12D0     	 beq .L4
 137:../../../platform/common/utils/stdio/read.c **** 		return -1;
  63              	 .loc 1 137 0
  64 0016 4FF0FF33 	 mov r3,#-1
  65 001a 13E0     	 b .L3
  66              	.L5:
 138:../../../platform/common/utils/stdio/read.c **** 	}
 139:../../../platform/common/utils/stdio/read.c **** 
 140:../../../platform/common/utils/stdio/read.c **** 	for (; len > 0; --len) {
 141:../../../platform/common/utils/stdio/read.c **** 		ptr_get(stdio_base, ptr);
  67              	 .loc 1 141 0 discriminator 2
  68 001c 0B4B     	 ldr r3,.L6
  69 001e 1B68     	 ldr r3,[r3]
  70 0020 0B4A     	 ldr r2,.L6+4
  71 0022 1268     	 ldr r2,[r2]
  72 0024 B968     	 ldr r1,[r7,#8]
  73 0026 1046     	 mov r0,r2
  74 0028 9847     	 blx r3
  75              	.LVL0:
 142:../../../platform/common/utils/stdio/read.c **** 		ptr++;
  76              	 .loc 1 142 0 discriminator 2
  77 002a BB68     	 ldr r3,[r7,#8]
  78 002c 0133     	 adds r3,r3,#1
  79 002e BB60     	 str r3,[r7,#8]
 143:../../../platform/common/utils/stdio/read.c **** 		nChars++;
  80              	 .loc 1 143 0 discriminator 2
  81 0030 7B69     	 ldr r3,[r7,#20]
  82 0032 0133     	 adds r3,r3,#1
  83 0034 7B61     	 str r3,[r7,#20]
 140:../../../platform/common/utils/stdio/read.c **** 		ptr_get(stdio_base, ptr);
  84              	 .loc 1 140 0 discriminator 2
  85 0036 7B68     	 ldr r3,[r7,#4]
  86 0038 013B     	 subs r3,r3,#1
  87 003a 7B60     	 str r3,[r7,#4]
  88              	.L4:
 140:../../../platform/common/utils/stdio/read.c **** 		ptr_get(stdio_base, ptr);
  89              	 .loc 1 140 0 is_stmt 0 discriminator 1
  90 003c 7B68     	 ldr r3,[r7,#4]
  91 003e 002B     	 cmp r3,#0
  92 0040 ECDC     	 bgt .L5
 144:../../../platform/common/utils/stdio/read.c **** 	}
 145:../../../platform/common/utils/stdio/read.c **** 	return nChars;
  93              	 .loc 1 145 0 is_stmt 1
  94 0042 7B69     	 ldr r3,[r7,#20]
  95              	.L3:
 146:../../../platform/common/utils/stdio/read.c **** }
  96              	 .loc 1 146 0
  97 0044 1846     	 mov r0,r3
  98 0046 1837     	 adds r7,r7,#24
  99              	.LCFI3:
 100              	 .cfi_def_cfa_offset 8
 101 0048 BD46     	 mov sp,r7
 102              	.LCFI4:
 103              	 .cfi_def_cfa_register 13
 104              	 
 105 004a 80BD     	 pop {r7,pc}
 106              	.L7:
 107              	 .align 2
 108              	.L6:
 109 004c 00000000 	 .word ptr_get
 110 0050 00000000 	 .word stdio_base
 111              	 .cfi_endproc
 112              	.LFE122:
 114              	.Letext0:
 115              	 .file 2 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\arm\\arm-gnu-toolchain\\arm-none-eabi\\include\\machine\\_default_types.h"
 116              	 .file 3 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\arm\\arm-gnu-toolchain\\arm-none-eabi\\include\\sys\\_stdint.h"
 117              	 .file 4 "../../../platform/thirdparty/CMSIS/include/core_cm4.h"
 118              	 .file 5 "../../../platform/sam/utils/cmsis/sam4l/source/templates/system_sam4l.h"
 119              	 .file 6 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\arm\\arm-gnu-toolchain\\arm-none-eabi\\include\\sys\\lock.h"
 120              	 .file 7 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\arm\\arm-gnu-toolchain\\arm-none-eabi\\include\\sys\\_types.h"
 121              	 .file 8 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\arm\\arm-gnu-toolchain\\lib\\gcc\\arm-none-eabi\\6.3.1\\include\\stddef.h"
 122              	 .file 9 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\arm\\arm-gnu-toolchain\\arm-none-eabi\\include\\sys\\reent.h"
 123              	 .file 10 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\arm\\arm-gnu-toolchain\\arm-none-eabi\\include\\stdlib.h"
 124              	 .file 11 "../../../platform/common/utils/interrupt/interrupt_sam_nvic.h"
DEFINED SYMBOLS
                            *ABS*:00000000 read.c
    {standard input}:16     .bss.cpu_irq_critical_section_counter:00000000 $d
    {standard input}:19     .bss.cpu_irq_critical_section_counter:00000000 cpu_irq_critical_section_counter
    {standard input}:24     .bss.cpu_irq_prev_interrupt_state:00000000 cpu_irq_prev_interrupt_state
    {standard input}:25     .bss.cpu_irq_prev_interrupt_state:00000000 $d
                            *COM*:00000004 ptr_get
    {standard input}:28     .text:00000000 $t
    {standard input}:35     .text:00000000 _read
    {standard input}:109    .text:0000004c $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
stdio_base
