   1               		.file	"read.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__RAMPZ__ = 0x3b
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
   8               		.text
   9               	.Ltext0:
  10               		.cfi_sections	.debug_frame
  11               		.comm	ptr_get,2,1
  12               	.global	_read
  14               	_read:
  15               	.LFB8:
  16               		.file 1 "../../../platform/common/utils/stdio/read.c"
   1:../../../platform/common/utils/stdio/read.c **** /**
   2:../../../platform/common/utils/stdio/read.c ****  * \file
   3:../../../platform/common/utils/stdio/read.c ****  *
   4:../../../platform/common/utils/stdio/read.c ****  * \brief System-specific implementation of the \ref _read function used by
   5:../../../platform/common/utils/stdio/read.c ****  *         the standard library.
   6:../../../platform/common/utils/stdio/read.c ****  *
   7:../../../platform/common/utils/stdio/read.c ****  * Copyright (c) 2009-2013 Atmel Corporation. All rights reserved.
   8:../../../platform/common/utils/stdio/read.c ****  *
   9:../../../platform/common/utils/stdio/read.c ****  * \asf_license_start
  10:../../../platform/common/utils/stdio/read.c ****  *
  11:../../../platform/common/utils/stdio/read.c ****  * \page License
  12:../../../platform/common/utils/stdio/read.c ****  *
  13:../../../platform/common/utils/stdio/read.c ****  * Redistribution and use in source and binary forms, with or without
  14:../../../platform/common/utils/stdio/read.c ****  * modification, are permitted provided that the following conditions are met:
  15:../../../platform/common/utils/stdio/read.c ****  *
  16:../../../platform/common/utils/stdio/read.c ****  * 1. Redistributions of source code must retain the above copyright notice,
  17:../../../platform/common/utils/stdio/read.c ****  *    this list of conditions and the following disclaimer.
  18:../../../platform/common/utils/stdio/read.c ****  *
  19:../../../platform/common/utils/stdio/read.c ****  * 2. Redistributions in binary form must reproduce the above copyright notice,
  20:../../../platform/common/utils/stdio/read.c ****  *    this list of conditions and the following disclaimer in the documentation
  21:../../../platform/common/utils/stdio/read.c ****  *    and/or other materials provided with the distribution.
  22:../../../platform/common/utils/stdio/read.c ****  *
  23:../../../platform/common/utils/stdio/read.c ****  * 3. The name of Atmel may not be used to endorse or promote products derived
  24:../../../platform/common/utils/stdio/read.c ****  *    from this software without specific prior written permission.
  25:../../../platform/common/utils/stdio/read.c ****  *
  26:../../../platform/common/utils/stdio/read.c ****  * 4. This software may only be redistributed and used in connection with an
  27:../../../platform/common/utils/stdio/read.c ****  *    Atmel microcontroller product.
  28:../../../platform/common/utils/stdio/read.c ****  *
  29:../../../platform/common/utils/stdio/read.c ****  * THIS SOFTWARE IS PROVIDED BY ATMEL "AS IS" AND ANY EXPRESS OR IMPLIED
  30:../../../platform/common/utils/stdio/read.c ****  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
  31:../../../platform/common/utils/stdio/read.c ****  * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE
  32:../../../platform/common/utils/stdio/read.c ****  * EXPRESSLY AND SPECIFICALLY DISCLAIMED. IN NO EVENT SHALL ATMEL BE LIABLE FOR
  33:../../../platform/common/utils/stdio/read.c ****  * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  34:../../../platform/common/utils/stdio/read.c ****  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
  35:../../../platform/common/utils/stdio/read.c ****  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
  36:../../../platform/common/utils/stdio/read.c ****  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
  37:../../../platform/common/utils/stdio/read.c ****  * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
  38:../../../platform/common/utils/stdio/read.c ****  * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  39:../../../platform/common/utils/stdio/read.c ****  * POSSIBILITY OF SUCH DAMAGE.
  40:../../../platform/common/utils/stdio/read.c ****  *
  41:../../../platform/common/utils/stdio/read.c ****  * \asf_license_stop
  42:../../../platform/common/utils/stdio/read.c ****  *
  43:../../../platform/common/utils/stdio/read.c ****  */
  44:../../../platform/common/utils/stdio/read.c **** 
  45:../../../platform/common/utils/stdio/read.c **** #include "compiler.h"
  46:../../../platform/common/utils/stdio/read.c **** 
  47:../../../platform/common/utils/stdio/read.c **** /**
  48:../../../platform/common/utils/stdio/read.c ****  * \defgroup group_common_utils_stdio Standard I/O (stdio)
  49:../../../platform/common/utils/stdio/read.c ****  *
  50:../../../platform/common/utils/stdio/read.c ****  * Common standard I/O driver that implements the stdio
  51:../../../platform/common/utils/stdio/read.c ****  * read and write functions on AVR and SAM devices.
  52:../../../platform/common/utils/stdio/read.c ****  *
  53:../../../platform/common/utils/stdio/read.c ****  * \{
  54:../../../platform/common/utils/stdio/read.c ****  */
  55:../../../platform/common/utils/stdio/read.c **** 
  56:../../../platform/common/utils/stdio/read.c **** extern volatile void *volatile stdio_base;
  57:../../../platform/common/utils/stdio/read.c **** void (*ptr_get)(void volatile*, char*);
  58:../../../platform/common/utils/stdio/read.c **** 
  59:../../../platform/common/utils/stdio/read.c **** 
  60:../../../platform/common/utils/stdio/read.c **** // IAR common implementation
  61:../../../platform/common/utils/stdio/read.c **** #if ( defined(__ICCAVR32__) || defined(__ICCAVR__) || defined(__ICCARM__) )
  62:../../../platform/common/utils/stdio/read.c **** 
  63:../../../platform/common/utils/stdio/read.c **** #include <yfuns.h>
  64:../../../platform/common/utils/stdio/read.c **** 
  65:../../../platform/common/utils/stdio/read.c **** _STD_BEGIN
  66:../../../platform/common/utils/stdio/read.c **** 
  67:../../../platform/common/utils/stdio/read.c **** #pragma module_name = "?__read"
  68:../../../platform/common/utils/stdio/read.c **** 
  69:../../../platform/common/utils/stdio/read.c **** /*! \brief Reads a number of bytes, at most \a size, into the memory area
  70:../../../platform/common/utils/stdio/read.c ****  *         pointed to by \a buffer.
  71:../../../platform/common/utils/stdio/read.c ****  *
  72:../../../platform/common/utils/stdio/read.c ****  * \param handle File handle to read from.
  73:../../../platform/common/utils/stdio/read.c ****  * \param buffer Pointer to buffer to write read bytes to.
  74:../../../platform/common/utils/stdio/read.c ****  * \param size Number of bytes to read.
  75:../../../platform/common/utils/stdio/read.c ****  *
  76:../../../platform/common/utils/stdio/read.c ****  * \return The number of bytes read, \c 0 at the end of the file, or
  77:../../../platform/common/utils/stdio/read.c ****  *         \c _LLIO_ERROR on failure.
  78:../../../platform/common/utils/stdio/read.c ****  */
  79:../../../platform/common/utils/stdio/read.c **** size_t __read(int handle, unsigned char *buffer, size_t size)
  80:../../../platform/common/utils/stdio/read.c **** {
  81:../../../platform/common/utils/stdio/read.c **** 	int nChars = 0;
  82:../../../platform/common/utils/stdio/read.c **** 	// This implementation only reads from stdin.
  83:../../../platform/common/utils/stdio/read.c **** 	// For all other file handles, it returns failure.
  84:../../../platform/common/utils/stdio/read.c **** 	if (handle != _LLIO_STDIN) {
  85:../../../platform/common/utils/stdio/read.c **** 		return _LLIO_ERROR;
  86:../../../platform/common/utils/stdio/read.c **** 	}
  87:../../../platform/common/utils/stdio/read.c **** 	for (; size > 0; --size) {
  88:../../../platform/common/utils/stdio/read.c **** 		ptr_get(stdio_base, (char*)buffer);
  89:../../../platform/common/utils/stdio/read.c **** 		buffer++;
  90:../../../platform/common/utils/stdio/read.c **** 		nChars++;
  91:../../../platform/common/utils/stdio/read.c **** 	}
  92:../../../platform/common/utils/stdio/read.c **** 	return nChars;
  93:../../../platform/common/utils/stdio/read.c **** }
  94:../../../platform/common/utils/stdio/read.c **** 
  95:../../../platform/common/utils/stdio/read.c **** /*! \brief This routine is required by IAR DLIB library since EWAVR V6.10
  96:../../../platform/common/utils/stdio/read.c ****  * the implementation is empty to be compatible with old IAR version.
  97:../../../platform/common/utils/stdio/read.c ****  */
  98:../../../platform/common/utils/stdio/read.c **** int __close(int handle)
  99:../../../platform/common/utils/stdio/read.c **** {
 100:../../../platform/common/utils/stdio/read.c **** 	UNUSED(handle);
 101:../../../platform/common/utils/stdio/read.c **** 	return 0;
 102:../../../platform/common/utils/stdio/read.c **** }
 103:../../../platform/common/utils/stdio/read.c **** 
 104:../../../platform/common/utils/stdio/read.c **** /*! \brief This routine is required by IAR DLIB library since EWAVR V6.10
 105:../../../platform/common/utils/stdio/read.c ****  * the implementation is empty to be compatible with old IAR version.
 106:../../../platform/common/utils/stdio/read.c ****  */
 107:../../../platform/common/utils/stdio/read.c **** int remove(const char* val)
 108:../../../platform/common/utils/stdio/read.c **** {
 109:../../../platform/common/utils/stdio/read.c **** 	UNUSED(val);
 110:../../../platform/common/utils/stdio/read.c **** 	return 0;
 111:../../../platform/common/utils/stdio/read.c **** }
 112:../../../platform/common/utils/stdio/read.c **** 
 113:../../../platform/common/utils/stdio/read.c **** /*! \brief This routine is required by IAR DLIB library since EWAVR V6.10
 114:../../../platform/common/utils/stdio/read.c ****  * the implementation is empty to be compatible with old IAR version.
 115:../../../platform/common/utils/stdio/read.c ****  */
 116:../../../platform/common/utils/stdio/read.c **** long __lseek(int handle, long val, int val2)
 117:../../../platform/common/utils/stdio/read.c **** {
 118:../../../platform/common/utils/stdio/read.c **** 	UNUSED(handle);
 119:../../../platform/common/utils/stdio/read.c **** 	UNUSED(val2);
 120:../../../platform/common/utils/stdio/read.c **** 	return val;
 121:../../../platform/common/utils/stdio/read.c **** }
 122:../../../platform/common/utils/stdio/read.c **** 
 123:../../../platform/common/utils/stdio/read.c **** _STD_END
 124:../../../platform/common/utils/stdio/read.c **** 
 125:../../../platform/common/utils/stdio/read.c **** // GCC AVR32 and SAM implementation
 126:../../../platform/common/utils/stdio/read.c **** #elif (defined(__GNUC__) && !XMEGA && !MEGA) 
 127:../../../platform/common/utils/stdio/read.c **** 
 128:../../../platform/common/utils/stdio/read.c **** int __attribute__((weak))
 129:../../../platform/common/utils/stdio/read.c **** _read (int file, char * ptr, int len); // Remove GCC compiler warning
 130:../../../platform/common/utils/stdio/read.c **** 
 131:../../../platform/common/utils/stdio/read.c **** int __attribute__((weak))
 132:../../../platform/common/utils/stdio/read.c **** _read (int file, char * ptr, int len)
 133:../../../platform/common/utils/stdio/read.c **** {
 134:../../../platform/common/utils/stdio/read.c **** 	int nChars = 0;
 135:../../../platform/common/utils/stdio/read.c **** 
 136:../../../platform/common/utils/stdio/read.c **** 	if (file != 0) {
 137:../../../platform/common/utils/stdio/read.c **** 		return -1;
 138:../../../platform/common/utils/stdio/read.c **** 	}
 139:../../../platform/common/utils/stdio/read.c **** 
 140:../../../platform/common/utils/stdio/read.c **** 	for (; len > 0; --len) {
 141:../../../platform/common/utils/stdio/read.c **** 		ptr_get(stdio_base, ptr);
 142:../../../platform/common/utils/stdio/read.c **** 		ptr++;
 143:../../../platform/common/utils/stdio/read.c **** 		nChars++;
 144:../../../platform/common/utils/stdio/read.c **** 	}
 145:../../../platform/common/utils/stdio/read.c **** 	return nChars;
 146:../../../platform/common/utils/stdio/read.c **** }
 147:../../../platform/common/utils/stdio/read.c **** 
 148:../../../platform/common/utils/stdio/read.c **** // GCC AVR implementation
 149:../../../platform/common/utils/stdio/read.c **** #elif (defined(__GNUC__) && (XMEGA || MEGA) )
 150:../../../platform/common/utils/stdio/read.c **** 
 151:../../../platform/common/utils/stdio/read.c **** int _read (int *f); // Remove GCC compiler warning
 152:../../../platform/common/utils/stdio/read.c **** 
 153:../../../platform/common/utils/stdio/read.c **** int _read (int *f)
 154:../../../platform/common/utils/stdio/read.c **** {
  17               		.loc 1 154 0
  18               		.cfi_startproc
  19 0000 CF93      		push r28
  20               	.LCFI0:
  21               		.cfi_def_cfa_offset 3
  22               		.cfi_offset 28, -2
  23 0002 DF93      		push r29
  24               	.LCFI1:
  25               		.cfi_def_cfa_offset 4
  26               		.cfi_offset 29, -3
  27 0004 00D0      		rcall .
  28 0006 1F92      		push __zero_reg__
  29               	.LCFI2:
  30               		.cfi_def_cfa_offset 7
  31 0008 CDB7      		in r28,__SP_L__
  32 000a DEB7      		in r29,__SP_H__
  33               	.LCFI3:
  34               		.cfi_def_cfa_register 28
  35               	/* prologue: function */
  36               	/* frame size = 3 */
  37               	/* stack size = 5 */
  38               	.L__stack_usage = 5
  39 000c 9B83      		std Y+3,r25
  40 000e 8A83      		std Y+2,r24
 155:../../../platform/common/utils/stdio/read.c **** 	(void) f;
 156:../../../platform/common/utils/stdio/read.c **** 	char c;
 157:../../../platform/common/utils/stdio/read.c **** 	ptr_get(stdio_base,&c);
  41               		.loc 1 157 0
  42 0010 2091 0000 		lds r18,ptr_get
  43 0014 3091 0000 		lds r19,ptr_get+1
  44 0018 8091 0000 		lds r24,stdio_base
  45 001c 9091 0000 		lds r25,stdio_base+1
  46 0020 AE01      		movw r20,r28
  47 0022 4F5F      		subi r20,-1
  48 0024 5F4F      		sbci r21,-1
  49 0026 BA01      		movw r22,r20
  50 0028 F901      		movw r30,r18
  51 002a 0995      		icall
 158:../../../platform/common/utils/stdio/read.c **** 	return c;
  52               		.loc 1 158 0
  53 002c 8981      		ldd r24,Y+1
  54 002e 882F      		mov r24,r24
  55 0030 90E0      		ldi r25,0
  56               	/* epilogue start */
 159:../../../platform/common/utils/stdio/read.c **** }
  57               		.loc 1 159 0
  58 0032 0F90      		pop __tmp_reg__
  59 0034 0F90      		pop __tmp_reg__
  60 0036 0F90      		pop __tmp_reg__
  61 0038 DF91      		pop r29
  62 003a CF91      		pop r28
  63 003c 0895      		ret
  64               		.cfi_endproc
  65               	.LFE8:
  67               	.Letext0:
DEFINED SYMBOLS
                            *ABS*:00000000 read.c
C:\Users\GUILHE~1\AppData\Local\Temp\ccnsL7R6.s:2      *ABS*:0000003e __SP_H__
C:\Users\GUILHE~1\AppData\Local\Temp\ccnsL7R6.s:3      *ABS*:0000003d __SP_L__
C:\Users\GUILHE~1\AppData\Local\Temp\ccnsL7R6.s:4      *ABS*:0000003f __SREG__
C:\Users\GUILHE~1\AppData\Local\Temp\ccnsL7R6.s:5      *ABS*:0000003b __RAMPZ__
C:\Users\GUILHE~1\AppData\Local\Temp\ccnsL7R6.s:6      *ABS*:00000000 __tmp_reg__
C:\Users\GUILHE~1\AppData\Local\Temp\ccnsL7R6.s:7      *ABS*:00000001 __zero_reg__
                            *COM*:00000002 ptr_get
C:\Users\GUILHE~1\AppData\Local\Temp\ccnsL7R6.s:14     .text:00000000 _read

UNDEFINED SYMBOLS
stdio_base
__do_clear_bss
