   1              	 .cpu cortex-m4
   2              	 .eabi_attribute 20,1
   3              	 .eabi_attribute 21,1
   4              	 .eabi_attribute 23,3
   5              	 .eabi_attribute 24,1
   6              	 .eabi_attribute 25,1
   7              	 .eabi_attribute 26,1
   8              	 .eabi_attribute 30,6
   9              	 .eabi_attribute 34,1
  10              	 .eabi_attribute 18,4
  11              	 .file "write.c"
  12              	 .text
  13              	.Ltext0:
  14              	 .cfi_sections .debug_frame
  15              	 .section .bss.cpu_irq_critical_section_counter,"aw",%nobits
  16              	 .align 2
  19              	cpu_irq_critical_section_counter:
  20 0000 00000000 	 .space 4
  21              	 .section .bss.cpu_irq_prev_interrupt_state,"aw",%nobits
  24              	cpu_irq_prev_interrupt_state:
  25 0000 00       	 .space 1
  26              	 .comm stdio_base,4,4
  27              	 .comm ptr_put,4,4
  28              	 .text
  29              	 .align 1
  30              	 .weak _write
  31              	 .syntax unified
  32              	 .thumb
  33              	 .thumb_func
  34              	 .fpu softvfp
  36              	_write:
  37              	.LFB122:
  38              	 .file 1 "../../../platform/common/utils/stdio/write.c"
   1:../../../platform/common/utils/stdio/write.c **** /**
   2:../../../platform/common/utils/stdio/write.c ****  * \file
   3:../../../platform/common/utils/stdio/write.c ****  *
   4:../../../platform/common/utils/stdio/write.c ****  * \brief System-specific implementation of the \ref _write function used by
   5:../../../platform/common/utils/stdio/write.c ****  *         the standard library.
   6:../../../platform/common/utils/stdio/write.c ****  *
   7:../../../platform/common/utils/stdio/write.c ****  * Copyright (c) 2009-2013 Atmel Corporation. All rights reserved.
   8:../../../platform/common/utils/stdio/write.c ****  *
   9:../../../platform/common/utils/stdio/write.c ****  * \asf_license_start
  10:../../../platform/common/utils/stdio/write.c ****  *
  11:../../../platform/common/utils/stdio/write.c ****  * \page License
  12:../../../platform/common/utils/stdio/write.c ****  *
  13:../../../platform/common/utils/stdio/write.c ****  * Redistribution and use in source and binary forms, with or without
  14:../../../platform/common/utils/stdio/write.c ****  * modification, are permitted provided that the following conditions are met:
  15:../../../platform/common/utils/stdio/write.c ****  *
  16:../../../platform/common/utils/stdio/write.c ****  * 1. Redistributions of source code must retain the above copyright notice,
  17:../../../platform/common/utils/stdio/write.c ****  *    this list of conditions and the following disclaimer.
  18:../../../platform/common/utils/stdio/write.c ****  *
  19:../../../platform/common/utils/stdio/write.c ****  * 2. Redistributions in binary form must reproduce the above copyright notice,
  20:../../../platform/common/utils/stdio/write.c ****  *    this list of conditions and the following disclaimer in the documentation
  21:../../../platform/common/utils/stdio/write.c ****  *    and/or other materials provided with the distribution.
  22:../../../platform/common/utils/stdio/write.c ****  *
  23:../../../platform/common/utils/stdio/write.c ****  * 3. The name of Atmel may not be used to endorse or promote products derived
  24:../../../platform/common/utils/stdio/write.c ****  *    from this software without specific prior written permission.
  25:../../../platform/common/utils/stdio/write.c ****  *
  26:../../../platform/common/utils/stdio/write.c ****  * 4. This software may only be redistributed and used in connection with an
  27:../../../platform/common/utils/stdio/write.c ****  *    Atmel microcontroller product.
  28:../../../platform/common/utils/stdio/write.c ****  *
  29:../../../platform/common/utils/stdio/write.c ****  * THIS SOFTWARE IS PROVIDED BY ATMEL "AS IS" AND ANY EXPRESS OR IMPLIED
  30:../../../platform/common/utils/stdio/write.c ****  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
  31:../../../platform/common/utils/stdio/write.c ****  * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE
  32:../../../platform/common/utils/stdio/write.c ****  * EXPRESSLY AND SPECIFICALLY DISCLAIMED. IN NO EVENT SHALL ATMEL BE LIABLE FOR
  33:../../../platform/common/utils/stdio/write.c ****  * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  34:../../../platform/common/utils/stdio/write.c ****  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
  35:../../../platform/common/utils/stdio/write.c ****  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
  36:../../../platform/common/utils/stdio/write.c ****  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
  37:../../../platform/common/utils/stdio/write.c ****  * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
  38:../../../platform/common/utils/stdio/write.c ****  * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  39:../../../platform/common/utils/stdio/write.c ****  * POSSIBILITY OF SUCH DAMAGE.
  40:../../../platform/common/utils/stdio/write.c ****  *
  41:../../../platform/common/utils/stdio/write.c ****  * \asf_license_stop
  42:../../../platform/common/utils/stdio/write.c ****  *
  43:../../../platform/common/utils/stdio/write.c ****  */
  44:../../../platform/common/utils/stdio/write.c **** 
  45:../../../platform/common/utils/stdio/write.c **** #include "compiler.h"
  46:../../../platform/common/utils/stdio/write.c **** 
  47:../../../platform/common/utils/stdio/write.c **** /**
  48:../../../platform/common/utils/stdio/write.c ****  * \addtogroup group_common_utils_stdio
  49:../../../platform/common/utils/stdio/write.c ****  *
  50:../../../platform/common/utils/stdio/write.c ****  * \{
  51:../../../platform/common/utils/stdio/write.c ****  */
  52:../../../platform/common/utils/stdio/write.c **** 
  53:../../../platform/common/utils/stdio/write.c **** volatile void *volatile stdio_base;
  54:../../../platform/common/utils/stdio/write.c **** int (*ptr_put)(void volatile*, char);
  55:../../../platform/common/utils/stdio/write.c **** 
  56:../../../platform/common/utils/stdio/write.c **** 
  57:../../../platform/common/utils/stdio/write.c **** #if ( defined(__ICCAVR32__) || defined(__ICCAVR__) || defined(__ICCARM__))
  58:../../../platform/common/utils/stdio/write.c **** 
  59:../../../platform/common/utils/stdio/write.c **** #include <yfuns.h>
  60:../../../platform/common/utils/stdio/write.c **** 
  61:../../../platform/common/utils/stdio/write.c **** _STD_BEGIN
  62:../../../platform/common/utils/stdio/write.c **** 
  63:../../../platform/common/utils/stdio/write.c **** #pragma module_name = "?__write"
  64:../../../platform/common/utils/stdio/write.c **** 
  65:../../../platform/common/utils/stdio/write.c **** /*! \brief Writes a number of bytes, at most \a size, from the memory area
  66:../../../platform/common/utils/stdio/write.c ****  *         pointed to by \a buffer.
  67:../../../platform/common/utils/stdio/write.c ****  *
  68:../../../platform/common/utils/stdio/write.c ****  * If \a buffer is zero then \ref __write performs flushing of internal buffers,
  69:../../../platform/common/utils/stdio/write.c ****  * if any. In this case, \a handle can be \c -1 to indicate that all handles
  70:../../../platform/common/utils/stdio/write.c ****  * should be flushed.
  71:../../../platform/common/utils/stdio/write.c ****  *
  72:../../../platform/common/utils/stdio/write.c ****  * \param handle File handle to write to.
  73:../../../platform/common/utils/stdio/write.c ****  * \param buffer Pointer to buffer to read bytes to write from.
  74:../../../platform/common/utils/stdio/write.c ****  * \param size Number of bytes to write.
  75:../../../platform/common/utils/stdio/write.c ****  *
  76:../../../platform/common/utils/stdio/write.c ****  * \return The number of bytes written, or \c _LLIO_ERROR on failure.
  77:../../../platform/common/utils/stdio/write.c ****  */
  78:../../../platform/common/utils/stdio/write.c **** size_t __write(int handle, const unsigned char *buffer, size_t size)
  79:../../../platform/common/utils/stdio/write.c **** {
  80:../../../platform/common/utils/stdio/write.c **** 	size_t nChars = 0;
  81:../../../platform/common/utils/stdio/write.c **** 
  82:../../../platform/common/utils/stdio/write.c **** 	if (buffer == 0) {
  83:../../../platform/common/utils/stdio/write.c **** 		// This means that we should flush internal buffers.
  84:../../../platform/common/utils/stdio/write.c **** 		return 0;
  85:../../../platform/common/utils/stdio/write.c **** 	}
  86:../../../platform/common/utils/stdio/write.c **** 
  87:../../../platform/common/utils/stdio/write.c **** 	// This implementation only writes to stdout and stderr.
  88:../../../platform/common/utils/stdio/write.c **** 	// For all other file handles, it returns failure.
  89:../../../platform/common/utils/stdio/write.c **** 	if (handle != _LLIO_STDOUT && handle != _LLIO_STDERR) {
  90:../../../platform/common/utils/stdio/write.c **** 		return _LLIO_ERROR;
  91:../../../platform/common/utils/stdio/write.c **** 	}
  92:../../../platform/common/utils/stdio/write.c **** 
  93:../../../platform/common/utils/stdio/write.c **** 	for (; size != 0; --size) {
  94:../../../platform/common/utils/stdio/write.c **** 		if (ptr_put(stdio_base, *buffer++) < 0) {
  95:../../../platform/common/utils/stdio/write.c **** 			return _LLIO_ERROR;
  96:../../../platform/common/utils/stdio/write.c **** 		}
  97:../../../platform/common/utils/stdio/write.c **** 		++nChars;
  98:../../../platform/common/utils/stdio/write.c **** 	}
  99:../../../platform/common/utils/stdio/write.c **** 	return nChars;
 100:../../../platform/common/utils/stdio/write.c **** }
 101:../../../platform/common/utils/stdio/write.c **** 
 102:../../../platform/common/utils/stdio/write.c **** _STD_END
 103:../../../platform/common/utils/stdio/write.c **** 
 104:../../../platform/common/utils/stdio/write.c **** 
 105:../../../platform/common/utils/stdio/write.c **** #elif (defined(__GNUC__) && !XMEGA && !MEGA)
 106:../../../platform/common/utils/stdio/write.c **** 
 107:../../../platform/common/utils/stdio/write.c **** int __attribute__((weak))
 108:../../../platform/common/utils/stdio/write.c **** _write (int file, const char *ptr, int len);
 109:../../../platform/common/utils/stdio/write.c **** 
 110:../../../platform/common/utils/stdio/write.c **** int __attribute__((weak))
 111:../../../platform/common/utils/stdio/write.c **** _write (int file, const char *ptr, int len)
 112:../../../platform/common/utils/stdio/write.c **** {
  39              	 .loc 1 112 0
  40              	 .cfi_startproc
  41              	 
  42              	 
  43 0000 80B5     	 push {r7,lr}
  44              	.LCFI0:
  45              	 .cfi_def_cfa_offset 8
  46              	 .cfi_offset 7,-8
  47              	 .cfi_offset 14,-4
  48 0002 86B0     	 sub sp,sp,#24
  49              	.LCFI1:
  50              	 .cfi_def_cfa_offset 32
  51 0004 00AF     	 add r7,sp,#0
  52              	.LCFI2:
  53              	 .cfi_def_cfa_register 7
  54 0006 F860     	 str r0,[r7,#12]
  55 0008 B960     	 str r1,[r7,#8]
  56 000a 7A60     	 str r2,[r7,#4]
 113:../../../platform/common/utils/stdio/write.c **** 	int nChars = 0;
  57              	 .loc 1 113 0
  58 000c 0023     	 movs r3,#0
  59 000e 7B61     	 str r3,[r7,#20]
 114:../../../platform/common/utils/stdio/write.c **** 
 115:../../../platform/common/utils/stdio/write.c **** 	if ((file != 1) && (file != 2) && (file!=3)) {
  60              	 .loc 1 115 0
  61 0010 FB68     	 ldr r3,[r7,#12]
  62 0012 012B     	 cmp r3,#1
  63 0014 1ED0     	 beq .L4
  64              	 .loc 1 115 0 is_stmt 0 discriminator 1
  65 0016 FB68     	 ldr r3,[r7,#12]
  66 0018 022B     	 cmp r3,#2
  67 001a 1BD0     	 beq .L4
  68              	 .loc 1 115 0 discriminator 2
  69 001c FB68     	 ldr r3,[r7,#12]
  70 001e 032B     	 cmp r3,#3
  71 0020 18D0     	 beq .L4
 116:../../../platform/common/utils/stdio/write.c **** 		return -1;
  72              	 .loc 1 116 0 is_stmt 1
  73 0022 4FF0FF33 	 mov r3,#-1
  74 0026 19E0     	 b .L3
  75              	.L6:
 117:../../../platform/common/utils/stdio/write.c **** 	}
 118:../../../platform/common/utils/stdio/write.c **** 
 119:../../../platform/common/utils/stdio/write.c **** 	for (; len != 0; --len) {
 120:../../../platform/common/utils/stdio/write.c **** 		if (ptr_put(stdio_base, *ptr++) < 0) {
  76              	 .loc 1 120 0
  77 0028 0E4B     	 ldr r3,.L7
  78 002a 1A68     	 ldr r2,[r3]
  79 002c 0E4B     	 ldr r3,.L7+4
  80 002e 1868     	 ldr r0,[r3]
  81 0030 BB68     	 ldr r3,[r7,#8]
  82 0032 591C     	 adds r1,r3,#1
  83 0034 B960     	 str r1,[r7,#8]
  84 0036 1B78     	 ldrb r3,[r3]
  85 0038 1946     	 mov r1,r3
  86 003a 9047     	 blx r2
  87              	.LVL0:
  88 003c 0346     	 mov r3,r0
  89 003e 002B     	 cmp r3,#0
  90 0040 02DA     	 bge .L5
 121:../../../platform/common/utils/stdio/write.c **** 			return -1;
  91              	 .loc 1 121 0
  92 0042 4FF0FF33 	 mov r3,#-1
  93 0046 09E0     	 b .L3
  94              	.L5:
 122:../../../platform/common/utils/stdio/write.c **** 		}
 123:../../../platform/common/utils/stdio/write.c **** 		++nChars;
  95              	 .loc 1 123 0
  96 0048 7B69     	 ldr r3,[r7,#20]
  97 004a 0133     	 adds r3,r3,#1
  98 004c 7B61     	 str r3,[r7,#20]
 119:../../../platform/common/utils/stdio/write.c **** 		if (ptr_put(stdio_base, *ptr++) < 0) {
  99              	 .loc 1 119 0
 100 004e 7B68     	 ldr r3,[r7,#4]
 101 0050 013B     	 subs r3,r3,#1
 102 0052 7B60     	 str r3,[r7,#4]
 103              	.L4:
 119:../../../platform/common/utils/stdio/write.c **** 		if (ptr_put(stdio_base, *ptr++) < 0) {
 104              	 .loc 1 119 0 is_stmt 0 discriminator 1
 105 0054 7B68     	 ldr r3,[r7,#4]
 106 0056 002B     	 cmp r3,#0
 107 0058 E6D1     	 bne .L6
 124:../../../platform/common/utils/stdio/write.c **** 	}
 125:../../../platform/common/utils/stdio/write.c **** 	return nChars;
 108              	 .loc 1 125 0 is_stmt 1
 109 005a 7B69     	 ldr r3,[r7,#20]
 110              	.L3:
 126:../../../platform/common/utils/stdio/write.c **** }
 111              	 .loc 1 126 0
 112 005c 1846     	 mov r0,r3
 113 005e 1837     	 adds r7,r7,#24
 114              	.LCFI3:
 115              	 .cfi_def_cfa_offset 8
 116 0060 BD46     	 mov sp,r7
 117              	.LCFI4:
 118              	 .cfi_def_cfa_register 13
 119              	 
 120 0062 80BD     	 pop {r7,pc}
 121              	.L8:
 122              	 .align 2
 123              	.L7:
 124 0064 00000000 	 .word ptr_put
 125 0068 00000000 	 .word stdio_base
 126              	 .cfi_endproc
 127              	.LFE122:
 129              	.Letext0:
 130              	 .file 2 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\arm\\arm-gnu-toolchain\\arm-none-eabi\\include\\machine\\_default_types.h"
 131              	 .file 3 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\arm\\arm-gnu-toolchain\\arm-none-eabi\\include\\sys\\_stdint.h"
 132              	 .file 4 "../../../platform/thirdparty/CMSIS/include/core_cm4.h"
 133              	 .file 5 "../../../platform/sam/utils/cmsis/sam4l/source/templates/system_sam4l.h"
 134              	 .file 6 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\arm\\arm-gnu-toolchain\\arm-none-eabi\\include\\sys\\lock.h"
 135              	 .file 7 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\arm\\arm-gnu-toolchain\\arm-none-eabi\\include\\sys\\_types.h"
 136              	 .file 8 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\arm\\arm-gnu-toolchain\\lib\\gcc\\arm-none-eabi\\6.3.1\\include\\stddef.h"
 137              	 .file 9 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\arm\\arm-gnu-toolchain\\arm-none-eabi\\include\\sys\\reent.h"
 138              	 .file 10 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\arm\\arm-gnu-toolchain\\arm-none-eabi\\include\\stdlib.h"
 139              	 .file 11 "../../../platform/common/utils/interrupt/interrupt_sam_nvic.h"
DEFINED SYMBOLS
                            *ABS*:00000000 write.c
    {standard input}:16     .bss.cpu_irq_critical_section_counter:00000000 $d
    {standard input}:19     .bss.cpu_irq_critical_section_counter:00000000 cpu_irq_critical_section_counter
    {standard input}:24     .bss.cpu_irq_prev_interrupt_state:00000000 cpu_irq_prev_interrupt_state
    {standard input}:25     .bss.cpu_irq_prev_interrupt_state:00000000 $d
                            *COM*:00000004 stdio_base
                            *COM*:00000004 ptr_put
    {standard input}:29     .text:00000000 $t
    {standard input}:36     .text:00000000 _write
    {standard input}:124    .text:00000064 $d
                     .debug_frame:00000010 $d

NO UNDEFINED SYMBOLS
