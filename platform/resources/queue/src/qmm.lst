   1              	 .cpu cortex-m4
   2              	 .eabi_attribute 20,1
   3              	 .eabi_attribute 21,1
   4              	 .eabi_attribute 23,3
   5              	 .eabi_attribute 24,1
   6              	 .eabi_attribute 25,1
   7              	 .eabi_attribute 26,1
   8              	 .eabi_attribute 30,6
   9              	 .eabi_attribute 34,1
  10              	 .eabi_attribute 18,4
  11              	 .file "qmm.c"
  12              	 .text
  13              	.Ltext0:
  14              	 .cfi_sections .debug_frame
  15              	 .section .bss.cpu_irq_critical_section_counter,"aw",%nobits
  16              	 .align 2
  19              	cpu_irq_critical_section_counter:
  20 0000 00000000 	 .space 4
  21              	 .section .bss.cpu_irq_prev_interrupt_state,"aw",%nobits
  24              	cpu_irq_prev_interrupt_state:
  25 0000 00       	 .space 1
  26              	 .text
  27              	 .align 1
  28              	 .syntax unified
  29              	 .thumb
  30              	 .thumb_func
  31              	 .fpu softvfp
  33              	cpu_irq_save:
  34              	.LFB112:
  35              	 .file 1 "../../../platform/common/utils/interrupt/interrupt_sam_nvic.h"
   1:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** /**
   2:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  * \file
   3:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  *
   4:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  * \brief Global interrupt management for SAM D20, SAM3 and SAM4 (NVIC based)
   5:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  *
   6:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  * Copyright (c) 2012-2013 Atmel Corporation. All rights reserved.
   7:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  *
   8:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  * \asf_license_start
   9:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  *
  10:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  * \page License
  11:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  *
  12:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  * Redistribution and use in source and binary forms, with or without
  13:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  * modification, are permitted provided that the following conditions are met:
  14:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  *
  15:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  * 1. Redistributions of source code must retain the above copyright notice,
  16:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  *    this list of conditions and the following disclaimer.
  17:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  *
  18:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  * 2. Redistributions in binary form must reproduce the above copyright notice,
  19:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  *    this list of conditions and the following disclaimer in the documentation
  20:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  *    and/or other materials provided with the distribution.
  21:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  *
  22:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  * 3. The name of Atmel may not be used to endorse or promote products derived
  23:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  *    from this software without specific prior written permission.
  24:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  *
  25:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  * 4. This software may only be redistributed and used in connection with an
  26:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  *    Atmel microcontroller product.
  27:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  *
  28:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  * THIS SOFTWARE IS PROVIDED BY ATMEL "AS IS" AND ANY EXPRESS OR IMPLIED
  29:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
  30:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE
  31:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  * EXPRESSLY AND SPECIFICALLY DISCLAIMED. IN NO EVENT SHALL ATMEL BE LIABLE FOR
  32:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  33:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
  34:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
  35:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
  36:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
  37:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  38:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  * POSSIBILITY OF SUCH DAMAGE.
  39:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  *
  40:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  * \asf_license_stop
  41:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  *
  42:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  */
  43:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** 
  44:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** #ifndef UTILS_INTERRUPT_INTERRUPT_H
  45:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** #define UTILS_INTERRUPT_INTERRUPT_H
  46:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** 
  47:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** #include <compiler.h>
  48:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** #include <parts.h>
  49:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** 
  50:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** /**
  51:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  * \weakgroup interrupt_group
  52:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  *
  53:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  * @{
  54:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  */
  55:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** 
  56:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** /**
  57:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  * \name Interrupt Service Routine definition
  58:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  *
  59:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  * @{
  60:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  */
  61:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** 
  62:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** /**
  63:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  * \brief Define service routine
  64:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  *
  65:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  * \note For NVIC devices the interrupt service routines are predefined to
  66:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  *       add to vector table in binary generation, so there is no service
  67:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  *       register at run time. The routine collections are in exceptions.h.
  68:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  *
  69:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  * Usage:
  70:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  * \code
  71:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  * ISR(foo_irq_handler)
  72:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  * {
  73:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  *      // Function definition
  74:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  *      ...
  75:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  * }
  76:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  * \endcode
  77:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  *
  78:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  * \param func Name for the function.
  79:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  */
  80:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** #  define ISR(func)   \
  81:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** 	void func (void)
  82:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** 
  83:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** /**
  84:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  * \brief Initialize interrupt vectors
  85:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  *
  86:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  * For NVIC the interrupt vectors are put in vector table. So nothing
  87:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  * to do to initialize them, except defined the vector function with
  88:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  * right name.
  89:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  *
  90:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  * This must be called prior to \ref irq_register_handler.
  91:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  */
  92:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** #  define irq_initialize_vectors()   \
  93:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** 	do {                             \
  94:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** 	} while(0)
  95:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** 
  96:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** /**
  97:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  * \brief Register handler for interrupt
  98:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  *
  99:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  * For NVIC the interrupt vectors are put in vector table. So nothing
 100:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  * to do to register them, except defined the vector function with
 101:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  * right name.
 102:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  *
 103:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  * Usage:
 104:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  * \code
 105:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  * irq_initialize_vectors();
 106:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  * irq_register_handler(foo_irq_handler);
 107:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  * \endcode
 108:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  *
 109:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  * \note The function \a func must be defined with the \ref ISR macro.
 110:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  * \note The functions prototypes can be found in the device exception header
 111:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  *       files (exceptions.h).
 112:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  */
 113:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** #  define irq_register_handler(int_num, int_prio)                      \
 114:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** 	NVIC_ClearPendingIRQ(    (IRQn_Type)int_num);                      \
 115:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** 	NVIC_SetPriority(    (IRQn_Type)int_num, int_prio);                \
 116:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** 	NVIC_EnableIRQ(      (IRQn_Type)int_num);                          \
 117:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** 
 118:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** //@}
 119:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** 
 120:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** #  define cpu_irq_enable()                     \
 121:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** 	do {                                       \
 122:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** 		g_interrupt_enabled = true;            \
 123:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** 		__DMB();                               \
 124:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** 		__enable_irq();                        \
 125:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** 	} while (0)
 126:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** #  define cpu_irq_disable()                    \
 127:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** 	do {                                       \
 128:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** 		__disable_irq();                       \
 129:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** 		__DMB();                               \
 130:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** 		g_interrupt_enabled = false;           \
 131:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** 	} while (0)
 132:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** 
 133:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** typedef uint32_t irqflags_t;
 134:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** 
 135:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** #if !defined(__DOXYGEN__)
 136:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** extern volatile bool g_interrupt_enabled;
 137:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** #endif
 138:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** 
 139:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** #define cpu_irq_is_enabled()    (__get_PRIMASK() == 0)
 140:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** 
 141:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** static volatile uint32_t cpu_irq_critical_section_counter;
 142:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** static volatile bool     cpu_irq_prev_interrupt_state;
 143:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** 
 144:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** static inline irqflags_t cpu_irq_save(void)
 145:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** {
  36              	 .loc 1 145 0
  37              	 .cfi_startproc
  38              	 
  39              	 
  40              	 
  41 0000 80B4     	 push {r7}
  42              	.LCFI0:
  43              	 .cfi_def_cfa_offset 4
  44              	 .cfi_offset 7,-4
  45 0002 83B0     	 sub sp,sp,#12
  46              	.LCFI1:
  47              	 .cfi_def_cfa_offset 16
  48 0004 00AF     	 add r7,sp,#0
  49              	.LCFI2:
  50              	 .cfi_def_cfa_register 7
  51              	.LBB12:
  52              	.LBB13:
  53              	 .file 2 "../../../platform/thirdparty/CMSIS/include/core_cmFunc.h"
   1:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** /**************************************************************************//**
   2:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  * @file     core_cmFunc.h
   3:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  * @brief    CMSIS Cortex-M Core Function Access Header File
   4:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  * @version  V3.00
   5:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  * @date     19. January 2012
   6:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  *
   7:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  * @note
   8:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  * Copyright (C) 2009-2012 ARM Limited. All rights reserved.
   9:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  *
  10:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  * @par
  11:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  * ARM Limited (ARM) is supplying this software for use with Cortex-M 
  12:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  * processor based microcontrollers.  This file can be freely distributed 
  13:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  * within development tools that are supporting such ARM based processors. 
  14:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  *
  15:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  * @par
  16:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
  17:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
  18:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
  19:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  * ARM SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR
  20:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
  21:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  *
  22:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  ******************************************************************************/
  23:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
  24:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** #ifndef __CORE_CMFUNC_H
  25:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** #define __CORE_CMFUNC_H
  26:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
  27:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** /* ###########################  Core Function Access  ########################### */
  28:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** /** \ingroup  CMSIS_Core_FunctionInterface   
  29:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
  30:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   @{
  31:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  */
  32:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
  33:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** #if   defined ( __CC_ARM ) /*------------------RealView Compiler -----------------*/
  34:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** /* ARM armcc specific functions */
  35:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
  36:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** #if (__ARMCC_VERSION < 400677)
  37:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   #error "Please use ARM Compiler Toolchain V4.0.677 or later!"
  38:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** #endif
  39:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
  40:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** /* intrinsic void __enable_irq();     */
  41:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** /* intrinsic void __disable_irq();    */
  42:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
  43:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** /** \brief  Get Control Register
  44:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
  45:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     This function returns the content of the Control Register.
  46:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
  47:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     \return               Control Register value
  48:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  */
  49:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** __STATIC_INLINE uint32_t __get_CONTROL(void)
  50:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** {
  51:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   register uint32_t __regControl         __ASM("control");
  52:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   return(__regControl);
  53:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** }
  54:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
  55:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
  56:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** /** \brief  Set Control Register
  57:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
  58:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     This function writes the given value to the Control Register.
  59:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
  60:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     \param [in]    control  Control Register value to set
  61:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  */
  62:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** __STATIC_INLINE void __set_CONTROL(uint32_t control)
  63:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** {
  64:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   register uint32_t __regControl         __ASM("control");
  65:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   __regControl = control;
  66:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** }
  67:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
  68:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
  69:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** /** \brief  Get IPSR Register
  70:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
  71:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     This function returns the content of the IPSR Register.
  72:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
  73:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     \return               IPSR Register value
  74:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  */
  75:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** __STATIC_INLINE uint32_t __get_IPSR(void)
  76:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** {
  77:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   register uint32_t __regIPSR          __ASM("ipsr");
  78:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   return(__regIPSR);
  79:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** }
  80:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
  81:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
  82:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** /** \brief  Get APSR Register
  83:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
  84:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     This function returns the content of the APSR Register.
  85:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
  86:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     \return               APSR Register value
  87:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  */
  88:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** __STATIC_INLINE uint32_t __get_APSR(void)
  89:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** {
  90:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   register uint32_t __regAPSR          __ASM("apsr");
  91:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   return(__regAPSR);
  92:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** }
  93:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
  94:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
  95:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** /** \brief  Get xPSR Register
  96:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
  97:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     This function returns the content of the xPSR Register.
  98:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
  99:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     \return               xPSR Register value
 100:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  */
 101:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** __STATIC_INLINE uint32_t __get_xPSR(void)
 102:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** {
 103:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   register uint32_t __regXPSR          __ASM("xpsr");
 104:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   return(__regXPSR);
 105:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** }
 106:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 107:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 108:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** /** \brief  Get Process Stack Pointer
 109:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 110:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     This function returns the current value of the Process Stack Pointer (PSP).
 111:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 112:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     \return               PSP Register value
 113:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  */
 114:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** __STATIC_INLINE uint32_t __get_PSP(void)
 115:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** {
 116:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   register uint32_t __regProcessStackPointer  __ASM("psp");
 117:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   return(__regProcessStackPointer);
 118:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** }
 119:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 120:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 121:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** /** \brief  Set Process Stack Pointer
 122:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 123:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     This function assigns the given value to the Process Stack Pointer (PSP).
 124:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 125:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     \param [in]    topOfProcStack  Process Stack Pointer value to set
 126:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  */
 127:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
 128:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** {
 129:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   register uint32_t __regProcessStackPointer  __ASM("psp");
 130:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   __regProcessStackPointer = topOfProcStack;
 131:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** }
 132:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 133:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 134:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** /** \brief  Get Main Stack Pointer
 135:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 136:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     This function returns the current value of the Main Stack Pointer (MSP).
 137:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 138:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     \return               MSP Register value
 139:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  */
 140:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** __STATIC_INLINE uint32_t __get_MSP(void)
 141:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** {
 142:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   register uint32_t __regMainStackPointer     __ASM("msp");
 143:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   return(__regMainStackPointer);
 144:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** }
 145:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 146:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 147:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** /** \brief  Set Main Stack Pointer
 148:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 149:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     This function assigns the given value to the Main Stack Pointer (MSP).
 150:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 151:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     \param [in]    topOfMainStack  Main Stack Pointer value to set
 152:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  */
 153:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
 154:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** {
 155:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   register uint32_t __regMainStackPointer     __ASM("msp");
 156:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   __regMainStackPointer = topOfMainStack;
 157:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** }
 158:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 159:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 160:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** /** \brief  Get Priority Mask
 161:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 162:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     This function returns the current state of the priority mask bit from the Priority Mask Registe
 163:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 164:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     \return               Priority Mask value
 165:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  */
 166:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** __STATIC_INLINE uint32_t __get_PRIMASK(void)
 167:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** {
 168:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   register uint32_t __regPriMask         __ASM("primask");
 169:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   return(__regPriMask);
 170:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** }
 171:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 172:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 173:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** /** \brief  Set Priority Mask
 174:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 175:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     This function assigns the given value to the Priority Mask Register.
 176:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 177:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     \param [in]    priMask  Priority Mask
 178:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  */
 179:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
 180:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** {
 181:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   register uint32_t __regPriMask         __ASM("primask");
 182:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   __regPriMask = (priMask);
 183:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** }
 184:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  
 185:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 186:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** #if       (__CORTEX_M >= 0x03)
 187:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 188:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** /** \brief  Enable FIQ
 189:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 190:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     This function enables FIQ interrupts by clearing the F-bit in the CPSR.
 191:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     Can only be executed in Privileged modes.
 192:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  */
 193:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** #define __enable_fault_irq                __enable_fiq
 194:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 195:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 196:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** /** \brief  Disable FIQ
 197:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 198:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     This function disables FIQ interrupts by setting the F-bit in the CPSR.
 199:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     Can only be executed in Privileged modes.
 200:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  */
 201:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** #define __disable_fault_irq               __disable_fiq
 202:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 203:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 204:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** /** \brief  Get Base Priority
 205:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 206:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     This function returns the current value of the Base Priority register.
 207:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 208:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     \return               Base Priority register value
 209:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  */
 210:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** __STATIC_INLINE uint32_t  __get_BASEPRI(void)
 211:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** {
 212:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   register uint32_t __regBasePri         __ASM("basepri");
 213:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   return(__regBasePri);
 214:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** }
 215:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 216:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 217:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** /** \brief  Set Base Priority
 218:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 219:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     This function assigns the given value to the Base Priority register.
 220:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 221:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     \param [in]    basePri  Base Priority value to set
 222:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  */
 223:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** __STATIC_INLINE void __set_BASEPRI(uint32_t basePri)
 224:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** {
 225:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   register uint32_t __regBasePri         __ASM("basepri");
 226:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   __regBasePri = (basePri & 0xff);
 227:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** }
 228:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  
 229:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 230:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** /** \brief  Get Fault Mask
 231:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 232:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     This function returns the current value of the Fault Mask register.
 233:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 234:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     \return               Fault Mask register value
 235:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  */
 236:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** __STATIC_INLINE uint32_t __get_FAULTMASK(void)
 237:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** {
 238:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   register uint32_t __regFaultMask       __ASM("faultmask");
 239:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   return(__regFaultMask);
 240:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** }
 241:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 242:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 243:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** /** \brief  Set Fault Mask
 244:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 245:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     This function assigns the given value to the Fault Mask register.
 246:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 247:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     \param [in]    faultMask  Fault Mask value to set
 248:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  */
 249:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** __STATIC_INLINE void __set_FAULTMASK(uint32_t faultMask)
 250:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** {
 251:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   register uint32_t __regFaultMask       __ASM("faultmask");
 252:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   __regFaultMask = (faultMask & (uint32_t)1);
 253:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** }
 254:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 255:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** #endif /* (__CORTEX_M >= 0x03) */
 256:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 257:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 258:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** #if       (__CORTEX_M == 0x04)
 259:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 260:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** /** \brief  Get FPSCR
 261:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 262:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     This function returns the current value of the Floating Point Status/Control register.
 263:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 264:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     \return               Floating Point Status/Control register value
 265:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  */
 266:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** __STATIC_INLINE uint32_t __get_FPSCR(void)
 267:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** {
 268:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
 269:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   register uint32_t __regfpscr         __ASM("fpscr");
 270:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   return(__regfpscr);
 271:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** #else
 272:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****    return(0);
 273:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** #endif
 274:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** }
 275:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 276:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 277:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** /** \brief  Set FPSCR
 278:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 279:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     This function assigns the given value to the Floating Point Status/Control register.
 280:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 281:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     \param [in]    fpscr  Floating Point Status/Control value to set
 282:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  */
 283:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** __STATIC_INLINE void __set_FPSCR(uint32_t fpscr)
 284:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** {
 285:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
 286:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   register uint32_t __regfpscr         __ASM("fpscr");
 287:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   __regfpscr = (fpscr);
 288:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** #endif
 289:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** }
 290:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 291:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** #endif /* (__CORTEX_M == 0x04) */
 292:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 293:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 294:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** #elif defined ( __ICCARM__ ) /*------------------ ICC Compiler -------------------*/
 295:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** /* IAR iccarm specific functions */
 296:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 297:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** #include <cmsis_iar.h>
 298:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 299:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 300:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** #elif defined ( __TMS470__ ) /*---------------- TI CCS Compiler ------------------*/
 301:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** /* TI CCS specific functions */
 302:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 303:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** #include <cmsis_ccs.h>
 304:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 305:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 306:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** #elif defined ( __GNUC__ ) /*------------------ GNU Compiler ---------------------*/
 307:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** /* GNU gcc specific functions */
 308:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 309:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** /** \brief  Enable IRQ Interrupts
 310:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 311:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   This function enables IRQ interrupts by clearing the I-bit in the CPSR.
 312:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   Can only be executed in Privileged modes.
 313:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  */
 314:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
 315:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** {
 316:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   __ASM volatile ("cpsie i");
 317:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** }
 318:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 319:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 320:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** /** \brief  Disable IRQ Interrupts
 321:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 322:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   This function disables IRQ interrupts by setting the I-bit in the CPSR.
 323:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   Can only be executed in Privileged modes.
 324:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  */
 325:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
 326:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** {
 327:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   __ASM volatile ("cpsid i");
 328:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** }
 329:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 330:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 331:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** /** \brief  Get Control Register
 332:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 333:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     This function returns the content of the Control Register.
 334:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 335:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     \return               Control Register value
 336:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  */
 337:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_CONTROL(void)
 338:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** {
 339:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   uint32_t result;
 340:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 341:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
 342:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   return(result);
 343:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** }
 344:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 345:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 346:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** /** \brief  Set Control Register
 347:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 348:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     This function writes the given value to the Control Register.
 349:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 350:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     \param [in]    control  Control Register value to set
 351:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  */
 352:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_CONTROL(uint32_t control)
 353:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** {
 354:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) );
 355:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** }
 356:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 357:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 358:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** /** \brief  Get IPSR Register
 359:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 360:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     This function returns the content of the IPSR Register.
 361:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 362:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     \return               IPSR Register value
 363:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  */
 364:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
 365:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** {
 366:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   uint32_t result;
 367:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 368:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 369:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   return(result);
 370:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** }
 371:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 372:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 373:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** /** \brief  Get APSR Register
 374:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 375:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     This function returns the content of the APSR Register.
 376:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 377:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     \return               APSR Register value
 378:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  */
 379:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_APSR(void)
 380:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** {
 381:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   uint32_t result;
 382:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 383:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 384:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   return(result);
 385:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** }
 386:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 387:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 388:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** /** \brief  Get xPSR Register
 389:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 390:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     This function returns the content of the xPSR Register.
 391:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 392:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     \return               xPSR Register value
 393:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  */
 394:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_xPSR(void)
 395:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** {
 396:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   uint32_t result;
 397:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 398:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 399:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   return(result);
 400:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** }
 401:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 402:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 403:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** /** \brief  Get Process Stack Pointer
 404:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 405:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     This function returns the current value of the Process Stack Pointer (PSP).
 406:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 407:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     \return               PSP Register value
 408:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  */
 409:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
 410:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** {
 411:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   register uint32_t result;
 412:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 413:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 414:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   return(result);
 415:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** }
 416:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  
 417:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 418:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** /** \brief  Set Process Stack Pointer
 419:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 420:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     This function assigns the given value to the Process Stack Pointer (PSP).
 421:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 422:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     \param [in]    topOfProcStack  Process Stack Pointer value to set
 423:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  */
 424:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
 425:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** {
 426:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) );
 427:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** }
 428:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 429:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 430:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** /** \brief  Get Main Stack Pointer
 431:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 432:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     This function returns the current value of the Main Stack Pointer (MSP).
 433:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 434:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     \return               MSP Register value
 435:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  */
 436:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_MSP(void)
 437:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** {
 438:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   register uint32_t result;
 439:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 440:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   __ASM volatile ("MRS %0, msp\n" : "=r" (result) );
 441:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   return(result);
 442:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** }
 443:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  
 444:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 445:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** /** \brief  Set Main Stack Pointer
 446:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 447:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     This function assigns the given value to the Main Stack Pointer (MSP).
 448:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 449:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     \param [in]    topOfMainStack  Main Stack Pointer value to set
 450:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  */
 451:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
 452:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** {
 453:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   __ASM volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) );
 454:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** }
 455:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 456:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 457:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** /** \brief  Get Priority Mask
 458:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 459:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     This function returns the current state of the priority mask bit from the Priority Mask Registe
 460:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 461:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     \return               Priority Mask value
 462:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  */
 463:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
 464:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** {
 465:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   uint32_t result;
 466:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 467:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) );
  54              	 .loc 2 467 0
  55              	 .syntax unified
  56              	
  57 0006 EFF31083 	 MRS r3,primask
  58              	
  59              	 .thumb
  60              	 .syntax unified
  61 000a 3B60     	 str r3,[r7]
 468:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   return(result);
  62              	 .loc 2 468 0
  63 000c 3B68     	 ldr r3,[r7]
  64              	.LBE13:
  65              	.LBE12:
 146:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** 	irqflags_t flags = cpu_irq_is_enabled();
  66              	 .loc 1 146 0
  67 000e 002B     	 cmp r3,#0
  68 0010 0CBF     	 ite eq
  69 0012 0123     	 moveq r3,#1
  70 0014 0023     	 movne r3,#0
  71 0016 DBB2     	 uxtb r3,r3
  72 0018 7B60     	 str r3,[r7,#4]
  73              	.LBB14:
  74              	.LBB15:
 327:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** }
  75              	 .loc 2 327 0
  76              	 .syntax unified
  77              	
  78 001a 72B6     	 cpsid i
  79              	
  80              	 .thumb
  81              	 .syntax unified
  82              	.LBE15:
  83              	.LBE14:
  84              	.LBB16:
  85              	.LBB17:
  86              	 .file 3 "../../../platform/thirdparty/CMSIS/include/core_cmInstr.h"
   1:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /**************************************************************************//**
   2:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  * @file     core_cmInstr.h
   3:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  * @brief    CMSIS Cortex-M Core Instruction Access Header File
   4:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  * @version  V3.00
   5:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  * @date     07. February 2012
   6:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  *
   7:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  * @note
   8:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  * Copyright (C) 2009-2012 ARM Limited. All rights reserved.
   9:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  *
  10:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  * @par
  11:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  * ARM Limited (ARM) is supplying this software for use with Cortex-M
  12:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  * processor based microcontrollers.  This file can be freely distributed
  13:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  * within development tools that are supporting such ARM based processors.
  14:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  *
  15:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  * @par
  16:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
  17:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
  18:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
  19:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  * ARM SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR
  20:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
  21:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  *
  22:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  ******************************************************************************/
  23:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
  24:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** #ifndef __CORE_CMINSTR_H
  25:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** #define __CORE_CMINSTR_H
  26:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
  27:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
  28:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /* ##########################  Core Instruction Access  ######################### */
  29:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
  30:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****   Access to dedicated instructions
  31:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****   @{
  32:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** */
  33:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
  34:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** #if   defined ( __CC_ARM ) /*------------------RealView Compiler -----------------*/
  35:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /* ARM armcc specific functions */
  36:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
  37:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** #if (__ARMCC_VERSION < 400677)
  38:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****   #error "Please use ARM Compiler Toolchain V4.0.677 or later!"
  39:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** #endif
  40:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
  41:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
  42:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /** \brief  No Operation
  43:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
  44:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     No Operation does nothing. This instruction can be used for code alignment purposes.
  45:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  */
  46:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** #define __NOP                             __nop
  47:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
  48:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
  49:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /** \brief  Wait For Interrupt
  50:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
  51:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     Wait For Interrupt is a hint instruction that suspends execution
  52:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     until one of a number of events occurs.
  53:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  */
  54:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** #define __WFI                             __wfi
  55:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
  56:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
  57:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /** \brief  Wait For Event
  58:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
  59:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     Wait For Event is a hint instruction that permits the processor to enter
  60:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     a low-power state until one of a number of events occurs.
  61:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  */
  62:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** #define __WFE                             __wfe
  63:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
  64:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
  65:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /** \brief  Send Event
  66:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
  67:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     Send Event is a hint instruction. It causes an event to be signaled to the CPU.
  68:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  */
  69:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** #define __SEV                             __sev
  70:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
  71:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
  72:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /** \brief  Instruction Synchronization Barrier
  73:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
  74:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     Instruction Synchronization Barrier flushes the pipeline in the processor,
  75:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     so that all instructions following the ISB are fetched from cache or
  76:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     memory, after the instruction has been completed.
  77:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  */
  78:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** #define __ISB()                           __isb(0xF)
  79:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
  80:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
  81:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /** \brief  Data Synchronization Barrier
  82:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
  83:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     This function acts as a special kind of Data Memory Barrier.
  84:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     It completes when all explicit memory accesses before this instruction complete.
  85:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  */
  86:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** #define __DSB()                           __dsb(0xF)
  87:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
  88:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
  89:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /** \brief  Data Memory Barrier
  90:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
  91:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     This function ensures the apparent order of the explicit memory operations before
  92:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     and after the instruction, without ensuring their completion.
  93:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  */
  94:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** #define __DMB()                           __dmb(0xF)
  95:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
  96:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
  97:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /** \brief  Reverse byte order (32 bit)
  98:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
  99:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     This function reverses the byte order in integer value.
 100:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 101:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \param [in]    value  Value to reverse
 102:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \return               Reversed value
 103:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  */
 104:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** #define __REV                             __rev
 105:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 106:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 107:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /** \brief  Reverse byte order (16 bit)
 108:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 109:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     This function reverses the byte order in two unsigned short values.
 110:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 111:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \param [in]    value  Value to reverse
 112:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \return               Reversed value
 113:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  */
 114:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** __attribute__((section(".rev16_text"))) __STATIC_INLINE __ASM uint32_t __REV16(uint32_t value)
 115:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** {
 116:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****   rev16 r0, r0
 117:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****   bx lr
 118:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** }
 119:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 120:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 121:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /** \brief  Reverse byte order in signed short value
 122:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 123:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     This function reverses the byte order in a signed short value with sign extension to integer.
 124:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 125:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \param [in]    value  Value to reverse
 126:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \return               Reversed value
 127:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  */
 128:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** __attribute__((section(".revsh_text"))) __STATIC_INLINE __ASM int32_t __REVSH(int32_t value)
 129:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** {
 130:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****   revsh r0, r0
 131:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****   bx lr
 132:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** }
 133:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 134:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 135:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /** \brief  Rotate Right in unsigned value (32 bit)
 136:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 137:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     This function Rotate Right (immediate) provides the value of the contents of a register rotated
 138:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 139:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \param [in]    value  Value to rotate
 140:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \param [in]    value  Number of Bits to rotate
 141:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \return               Rotated value
 142:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  */
 143:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** #define __ROR                             __ror
 144:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 145:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 146:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** #if       (__CORTEX_M >= 0x03)
 147:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 148:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /** \brief  Reverse bit order of value
 149:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 150:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     This function reverses the bit order of the given value.
 151:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 152:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \param [in]    value  Value to reverse
 153:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \return               Reversed value
 154:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  */
 155:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** #define __RBIT                            __rbit
 156:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 157:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 158:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /** \brief  LDR Exclusive (8 bit)
 159:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 160:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     This function performs a exclusive LDR command for 8 bit value.
 161:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 162:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 163:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \return             value of type uint8_t at (*ptr)
 164:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  */
 165:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** #define __LDREXB(ptr)                     ((uint8_t ) __ldrex(ptr))
 166:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 167:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 168:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /** \brief  LDR Exclusive (16 bit)
 169:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 170:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     This function performs a exclusive LDR command for 16 bit values.
 171:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 172:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 173:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \return        value of type uint16_t at (*ptr)
 174:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  */
 175:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** #define __LDREXH(ptr)                     ((uint16_t) __ldrex(ptr))
 176:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 177:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 178:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /** \brief  LDR Exclusive (32 bit)
 179:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 180:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     This function performs a exclusive LDR command for 32 bit values.
 181:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 182:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 183:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \return        value of type uint32_t at (*ptr)
 184:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  */
 185:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** #define __LDREXW(ptr)                     ((uint32_t ) __ldrex(ptr))
 186:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 187:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 188:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /** \brief  STR Exclusive (8 bit)
 189:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 190:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     This function performs a exclusive STR command for 8 bit values.
 191:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 192:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \param [in]  value  Value to store
 193:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 194:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \return          0  Function succeeded
 195:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \return          1  Function failed
 196:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  */
 197:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** #define __STREXB(value, ptr)              __strex(value, ptr)
 198:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 199:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 200:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /** \brief  STR Exclusive (16 bit)
 201:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 202:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     This function performs a exclusive STR command for 16 bit values.
 203:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 204:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \param [in]  value  Value to store
 205:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 206:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \return          0  Function succeeded
 207:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \return          1  Function failed
 208:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  */
 209:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** #define __STREXH(value, ptr)              __strex(value, ptr)
 210:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 211:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 212:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /** \brief  STR Exclusive (32 bit)
 213:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 214:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     This function performs a exclusive STR command for 32 bit values.
 215:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 216:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \param [in]  value  Value to store
 217:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 218:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \return          0  Function succeeded
 219:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \return          1  Function failed
 220:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  */
 221:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** #define __STREXW(value, ptr)              __strex(value, ptr)
 222:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 223:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 224:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /** \brief  Remove the exclusive lock
 225:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 226:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     This function removes the exclusive lock which is created by LDREX.
 227:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 228:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  */
 229:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** #define __CLREX                           __clrex
 230:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 231:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 232:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /** \brief  Signed Saturate
 233:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 234:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     This function saturates a signed value.
 235:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 236:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \param [in]  value  Value to be saturated
 237:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \param [in]    sat  Bit position to saturate to (1..32)
 238:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \return             Saturated value
 239:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  */
 240:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** #define __SSAT                            __ssat
 241:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 242:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 243:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /** \brief  Unsigned Saturate
 244:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 245:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     This function saturates an unsigned value.
 246:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 247:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \param [in]  value  Value to be saturated
 248:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \param [in]    sat  Bit position to saturate to (0..31)
 249:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \return             Saturated value
 250:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  */
 251:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** #define __USAT                            __usat
 252:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 253:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 254:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /** \brief  Count leading zeros
 255:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 256:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     This function counts the number of leading zeros of a data value.
 257:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 258:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \param [in]  value  Value to count the leading zeros
 259:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \return             number of leading zeros in value
 260:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  */
 261:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** #define __CLZ                             __clz
 262:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 263:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** #endif /* (__CORTEX_M >= 0x03) */
 264:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 265:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 266:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 267:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** #elif defined ( __ICCARM__ ) /*------------------ ICC Compiler -------------------*/
 268:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /* IAR iccarm specific functions */
 269:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 270:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** #include <cmsis_iar.h>
 271:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 272:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 273:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** #elif defined ( __TMS470__ ) /*---------------- TI CCS Compiler ------------------*/
 274:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /* TI CCS specific functions */
 275:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 276:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** #include <cmsis_ccs.h>
 277:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 278:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 279:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** #elif defined ( __GNUC__ ) /*------------------ GNU Compiler ---------------------*/
 280:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /* GNU gcc specific functions */
 281:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 282:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /** \brief  No Operation
 283:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 284:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     No Operation does nothing. This instruction can be used for code alignment purposes.
 285:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  */
 286:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
 287:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** {
 288:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****   __ASM volatile ("nop");
 289:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** }
 290:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 291:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 292:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /** \brief  Wait For Interrupt
 293:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 294:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     Wait For Interrupt is a hint instruction that suspends execution
 295:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     until one of a number of events occurs.
 296:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  */
 297:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __WFI(void)
 298:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** {
 299:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****   __ASM volatile ("wfi");
 300:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** }
 301:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 302:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 303:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /** \brief  Wait For Event
 304:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 305:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     Wait For Event is a hint instruction that permits the processor to enter
 306:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     a low-power state until one of a number of events occurs.
 307:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  */
 308:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __WFE(void)
 309:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** {
 310:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****   __ASM volatile ("wfe");
 311:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** }
 312:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 313:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 314:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /** \brief  Send Event
 315:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 316:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 317:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  */
 318:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __SEV(void)
 319:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** {
 320:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****   __ASM volatile ("sev");
 321:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** }
 322:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 323:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 324:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /** \brief  Instruction Synchronization Barrier
 325:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 326:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     Instruction Synchronization Barrier flushes the pipeline in the processor,
 327:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     so that all instructions following the ISB are fetched from cache or
 328:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     memory, after the instruction has been completed.
 329:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  */
 330:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __ISB(void)
 331:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** {
 332:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****   __ASM volatile ("isb");
 333:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** }
 334:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 335:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 336:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /** \brief  Data Synchronization Barrier
 337:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 338:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     This function acts as a special kind of Data Memory Barrier.
 339:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     It completes when all explicit memory accesses before this instruction complete.
 340:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  */
 341:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
 342:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** {
 343:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****   __ASM volatile ("dsb");
 344:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** }
 345:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 346:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 347:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /** \brief  Data Memory Barrier
 348:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 349:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     This function ensures the apparent order of the explicit memory operations before
 350:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     and after the instruction, without ensuring their completion.
 351:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  */
 352:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
 353:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** {
 354:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****   __ASM volatile ("dmb");
  87              	 .loc 3 354 0
  88              	 .syntax unified
  89              	
  90 001c BFF35F8F 	 dmb
  91              	
  92              	 .thumb
  93              	 .syntax unified
  94              	.LBE17:
  95              	.LBE16:
 147:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** 	cpu_irq_disable();
  96              	 .loc 1 147 0
  97 0020 044B     	 ldr r3,.L4
  98 0022 0022     	 movs r2,#0
  99 0024 1A70     	 strb r2,[r3]
 148:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** 	return flags;
 100              	 .loc 1 148 0
 101 0026 7B68     	 ldr r3,[r7,#4]
 149:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** }
 102              	 .loc 1 149 0
 103 0028 1846     	 mov r0,r3
 104 002a 0C37     	 adds r7,r7,#12
 105              	.LCFI3:
 106              	 .cfi_def_cfa_offset 4
 107 002c BD46     	 mov sp,r7
 108              	.LCFI4:
 109              	 .cfi_def_cfa_register 13
 110              	 
 111 002e 80BC     	 pop {r7}
 112              	.LCFI5:
 113              	 .cfi_restore 7
 114              	 .cfi_def_cfa_offset 0
 115 0030 7047     	 bx lr
 116              	.L5:
 117 0032 00BF     	 .align 2
 118              	.L4:
 119 0034 00000000 	 .word g_interrupt_enabled
 120              	 .cfi_endproc
 121              	.LFE112:
 123              	 .align 1
 124              	 .syntax unified
 125              	 .thumb
 126              	 .thumb_func
 127              	 .fpu softvfp
 129              	cpu_irq_is_enabled_flags:
 130              	.LFB113:
 150:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** 
 151:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
 152:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** {
 131              	 .loc 1 152 0
 132              	 .cfi_startproc
 133              	 
 134              	 
 135              	 
 136 0038 80B4     	 push {r7}
 137              	.LCFI6:
 138              	 .cfi_def_cfa_offset 4
 139              	 .cfi_offset 7,-4
 140 003a 83B0     	 sub sp,sp,#12
 141              	.LCFI7:
 142              	 .cfi_def_cfa_offset 16
 143 003c 00AF     	 add r7,sp,#0
 144              	.LCFI8:
 145              	 .cfi_def_cfa_register 7
 146 003e 7860     	 str r0,[r7,#4]
 153:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** 	return (flags);
 147              	 .loc 1 153 0
 148 0040 7B68     	 ldr r3,[r7,#4]
 149 0042 002B     	 cmp r3,#0
 150 0044 14BF     	 ite ne
 151 0046 0123     	 movne r3,#1
 152 0048 0023     	 moveq r3,#0
 153 004a DBB2     	 uxtb r3,r3
 154:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** }
 154              	 .loc 1 154 0
 155 004c 1846     	 mov r0,r3
 156 004e 0C37     	 adds r7,r7,#12
 157              	.LCFI9:
 158              	 .cfi_def_cfa_offset 4
 159 0050 BD46     	 mov sp,r7
 160              	.LCFI10:
 161              	 .cfi_def_cfa_register 13
 162              	 
 163 0052 80BC     	 pop {r7}
 164              	.LCFI11:
 165              	 .cfi_restore 7
 166              	 .cfi_def_cfa_offset 0
 167 0054 7047     	 bx lr
 168              	 .cfi_endproc
 169              	.LFE113:
 171              	 .align 1
 172              	 .syntax unified
 173              	 .thumb
 174              	 .thumb_func
 175              	 .fpu softvfp
 177              	cpu_irq_restore:
 178              	.LFB114:
 155:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** 
 156:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** static inline void cpu_irq_restore(irqflags_t flags)
 157:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** {
 179              	 .loc 1 157 0
 180              	 .cfi_startproc
 181              	 
 182              	 
 183 0056 80B5     	 push {r7,lr}
 184              	.LCFI12:
 185              	 .cfi_def_cfa_offset 8
 186              	 .cfi_offset 7,-8
 187              	 .cfi_offset 14,-4
 188 0058 82B0     	 sub sp,sp,#8
 189              	.LCFI13:
 190              	 .cfi_def_cfa_offset 16
 191 005a 00AF     	 add r7,sp,#0
 192              	.LCFI14:
 193              	 .cfi_def_cfa_register 7
 194 005c 7860     	 str r0,[r7,#4]
 158:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** 	if (cpu_irq_is_enabled_flags(flags))
 195              	 .loc 1 158 0
 196 005e 7868     	 ldr r0,[r7,#4]
 197 0060 FFF7EAFF 	 bl cpu_irq_is_enabled_flags
 198 0064 0346     	 mov r3,r0
 199 0066 002B     	 cmp r3,#0
 200 0068 05D0     	 beq .L10
 159:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** 		cpu_irq_enable();
 201              	 .loc 1 159 0
 202 006a 054B     	 ldr r3,.L11
 203 006c 0122     	 movs r2,#1
 204 006e 1A70     	 strb r2,[r3]
 205              	.LBB18:
 206              	.LBB19:
 207              	 .loc 3 354 0
 208              	 .syntax unified
 209              	
 210 0070 BFF35F8F 	 dmb
 211              	
 212              	 .thumb
 213              	 .syntax unified
 214              	.LBE19:
 215              	.LBE18:
 216              	.LBB20:
 217              	.LBB21:
 316:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** }
 218              	 .loc 2 316 0
 219              	 .syntax unified
 220              	
 221 0074 62B6     	 cpsie i
 222              	
 223              	 .thumb
 224              	 .syntax unified
 225              	.L10:
 226              	.LBE21:
 227              	.LBE20:
 160:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** }
 228              	 .loc 1 160 0
 229 0076 00BF     	 nop
 230 0078 0837     	 adds r7,r7,#8
 231              	.LCFI15:
 232              	 .cfi_def_cfa_offset 8
 233 007a BD46     	 mov sp,r7
 234              	.LCFI16:
 235              	 .cfi_def_cfa_register 13
 236              	 
 237 007c 80BD     	 pop {r7,pc}
 238              	.L12:
 239 007e 00BF     	 .align 2
 240              	.L11:
 241 0080 00000000 	 .word g_interrupt_enabled
 242              	 .cfi_endproc
 243              	.LFE114:
 245              	 .align 1
 246              	 .global qmm_queue_init
 247              	 .syntax unified
 248              	 .thumb
 249              	 .thumb_func
 250              	 .fpu softvfp
 252              	qmm_queue_init:
 253              	.LFB122:
 254              	 .file 4 "../../../platform/resources/queue/src/qmm.c"
   1:../../../platform/resources/queue/src/qmm.c **** /**
   2:../../../platform/resources/queue/src/qmm.c ****  * @file qmm.c
   3:../../../platform/resources/queue/src/qmm.c ****  *
   4:../../../platform/resources/queue/src/qmm.c ****  * @brief This file implements the  functions for initializing the queues,
   5:../../../platform/resources/queue/src/qmm.c ****  *  appending a buffer into the queue, removing a buffer from the queue and
   6:../../../platform/resources/queue/src/qmm.c ****  *  reading a buffer from the queue as per the search criteria.
   7:../../../platform/resources/queue/src/qmm.c ****  *
   8:../../../platform/resources/queue/src/qmm.c ****  * Copyright (c) 2013 Atmel Corporation. All rights reserved.
   9:../../../platform/resources/queue/src/qmm.c ****  *
  10:../../../platform/resources/queue/src/qmm.c ****  * \asf_license_start
  11:../../../platform/resources/queue/src/qmm.c ****  *
  12:../../../platform/resources/queue/src/qmm.c ****  * \page License
  13:../../../platform/resources/queue/src/qmm.c ****  *
  14:../../../platform/resources/queue/src/qmm.c ****  * Redistribution and use in source and binary forms, with or without
  15:../../../platform/resources/queue/src/qmm.c ****  * modification, are permitted provided that the following conditions are met:
  16:../../../platform/resources/queue/src/qmm.c ****  *
  17:../../../platform/resources/queue/src/qmm.c ****  * 1. Redistributions of source code must retain the above copyright notice,
  18:../../../platform/resources/queue/src/qmm.c ****  *    this list of conditions and the following disclaimer.
  19:../../../platform/resources/queue/src/qmm.c ****  *
  20:../../../platform/resources/queue/src/qmm.c ****  * 2. Redistributions in binary form must reproduce the above copyright notice,
  21:../../../platform/resources/queue/src/qmm.c ****  *    this list of conditions and the following disclaimer in the documentation
  22:../../../platform/resources/queue/src/qmm.c ****  *    and/or other materials provided with the distribution.
  23:../../../platform/resources/queue/src/qmm.c ****  *
  24:../../../platform/resources/queue/src/qmm.c ****  * 3. The name of Atmel may not be used to endorse or promote products derived
  25:../../../platform/resources/queue/src/qmm.c ****  *    from this software without specific prior written permission.
  26:../../../platform/resources/queue/src/qmm.c ****  *
  27:../../../platform/resources/queue/src/qmm.c ****  * 4. This software may only be redistributed and used in connection with an
  28:../../../platform/resources/queue/src/qmm.c ****  *    Atmel microcontroller product.
  29:../../../platform/resources/queue/src/qmm.c ****  *
  30:../../../platform/resources/queue/src/qmm.c ****  * THIS SOFTWARE IS PROVIDED BY ATMEL "AS IS" AND ANY EXPRESS OR IMPLIED
  31:../../../platform/resources/queue/src/qmm.c ****  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
  32:../../../platform/resources/queue/src/qmm.c ****  * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE
  33:../../../platform/resources/queue/src/qmm.c ****  * EXPRESSLY AND SPECIFICALLY DISCLAIMED. IN NO EVENT SHALL ATMEL BE LIABLE FOR
  34:../../../platform/resources/queue/src/qmm.c ****  * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  35:../../../platform/resources/queue/src/qmm.c ****  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
  36:../../../platform/resources/queue/src/qmm.c ****  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
  37:../../../platform/resources/queue/src/qmm.c ****  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
  38:../../../platform/resources/queue/src/qmm.c ****  * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
  39:../../../platform/resources/queue/src/qmm.c ****  * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  40:../../../platform/resources/queue/src/qmm.c ****  * POSSIBILITY OF SUCH DAMAGE.
  41:../../../platform/resources/queue/src/qmm.c ****  *
  42:../../../platform/resources/queue/src/qmm.c ****  * \asf_license_stop
  43:../../../platform/resources/queue/src/qmm.c ****  */
  44:../../../platform/resources/queue/src/qmm.c **** 
  45:../../../platform/resources/queue/src/qmm.c **** /*
  46:../../../platform/resources/queue/src/qmm.c ****  * Copyright (c) 2013, Atmel Corporation All rights reserved.
  47:../../../platform/resources/queue/src/qmm.c ****  *
  48:../../../platform/resources/queue/src/qmm.c ****  * Licensed under Atmel's Limited License Agreement --> EULA.txt
  49:../../../platform/resources/queue/src/qmm.c ****  */
  50:../../../platform/resources/queue/src/qmm.c **** /* === Includes ============================================================ */
  51:../../../platform/resources/queue/src/qmm.c **** 
  52:../../../platform/resources/queue/src/qmm.c **** #include <stdint.h>
  53:../../../platform/resources/queue/src/qmm.c **** #include <stdbool.h>
  54:../../../platform/resources/queue/src/qmm.c **** #include <stdlib.h>
  55:../../../platform/resources/queue/src/qmm.c **** #include "return_val.h"
  56:../../../platform/resources/queue/src/qmm.c **** #include "bmm.h"
  57:../../../platform/resources/queue/src/qmm.c **** #include "qmm.h"
  58:../../../platform/resources/queue/src/qmm.c **** #include "conf_resources.h"
  59:../../../platform/resources/queue/src/qmm.c **** 
  60:../../../platform/resources/queue/src/qmm.c **** #if (TOTAL_NUMBER_OF_BUFS > 0)
  61:../../../platform/resources/queue/src/qmm.c **** 
  62:../../../platform/resources/queue/src/qmm.c **** /* === Types =============================================================== */
  63:../../../platform/resources/queue/src/qmm.c **** 
  64:../../../platform/resources/queue/src/qmm.c **** /*
  65:../../../platform/resources/queue/src/qmm.c ****  * Specifies whether the buffer needs to be read from the queue or to be
  66:../../../platform/resources/queue/src/qmm.c ****  * removed from the queue.
  67:../../../platform/resources/queue/src/qmm.c ****  */
  68:../../../platform/resources/queue/src/qmm.c **** typedef enum buffer_mode_tag {
  69:../../../platform/resources/queue/src/qmm.c **** 	REMOVE_MODE,
  70:../../../platform/resources/queue/src/qmm.c **** 	READ_MODE
  71:../../../platform/resources/queue/src/qmm.c **** } buffer_mode_t;
  72:../../../platform/resources/queue/src/qmm.c **** 
  73:../../../platform/resources/queue/src/qmm.c **** /* === Macros ============================================================== */
  74:../../../platform/resources/queue/src/qmm.c **** 
  75:../../../platform/resources/queue/src/qmm.c **** /* === Prototypes ========================================================== */
  76:../../../platform/resources/queue/src/qmm.c **** 
  77:../../../platform/resources/queue/src/qmm.c **** static buffer_t *queue_read_or_remove(queue_t *q,
  78:../../../platform/resources/queue/src/qmm.c **** 		buffer_mode_t mode,
  79:../../../platform/resources/queue/src/qmm.c **** 		search_t *search);
  80:../../../platform/resources/queue/src/qmm.c **** 
  81:../../../platform/resources/queue/src/qmm.c **** /* === Implementation ====================================================== */
  82:../../../platform/resources/queue/src/qmm.c **** 
  83:../../../platform/resources/queue/src/qmm.c **** /**
  84:../../../platform/resources/queue/src/qmm.c ****  * @brief Initializes the queue.
  85:../../../platform/resources/queue/src/qmm.c ****  *
  86:../../../platform/resources/queue/src/qmm.c ****  * This function initializes the queue. Note that this function
  87:../../../platform/resources/queue/src/qmm.c ****  * should be called before invoking any other functionality of QMM.
  88:../../../platform/resources/queue/src/qmm.c ****  *
  89:../../../platform/resources/queue/src/qmm.c ****  * @param q The queue which should be initialized.
  90:../../../platform/resources/queue/src/qmm.c ****  */
  91:../../../platform/resources/queue/src/qmm.c **** #ifdef ENABLE_QUEUE_CAPACITY
  92:../../../platform/resources/queue/src/qmm.c **** void qmm_queue_init(queue_t *q, uint16_t capacity)
  93:../../../platform/resources/queue/src/qmm.c **** #else
  94:../../../platform/resources/queue/src/qmm.c **** void qmm_queue_init(queue_t *q)
  95:../../../platform/resources/queue/src/qmm.c **** #endif  /* ENABLE_QUEUE_CAPACITY */
  96:../../../platform/resources/queue/src/qmm.c **** {
 255              	 .loc 4 96 0
 256              	 .cfi_startproc
 257              	 
 258              	 
 259              	 
 260 0084 80B4     	 push {r7}
 261              	.LCFI17:
 262              	 .cfi_def_cfa_offset 4
 263              	 .cfi_offset 7,-4
 264 0086 83B0     	 sub sp,sp,#12
 265              	.LCFI18:
 266              	 .cfi_def_cfa_offset 16
 267 0088 00AF     	 add r7,sp,#0
 268              	.LCFI19:
 269              	 .cfi_def_cfa_register 7
 270 008a 7860     	 str r0,[r7,#4]
  97:../../../platform/resources/queue/src/qmm.c **** 	q->head = NULL;
 271              	 .loc 4 97 0
 272 008c 7B68     	 ldr r3,[r7,#4]
 273 008e 0022     	 movs r2,#0
 274 0090 1A60     	 str r2,[r3]
  98:../../../platform/resources/queue/src/qmm.c **** 	q->tail = NULL;
 275              	 .loc 4 98 0
 276 0092 7B68     	 ldr r3,[r7,#4]
 277 0094 0022     	 movs r2,#0
 278 0096 5A60     	 str r2,[r3,#4]
  99:../../../platform/resources/queue/src/qmm.c **** 	q->size = 0;
 279              	 .loc 4 99 0
 280 0098 7B68     	 ldr r3,[r7,#4]
 281 009a 0022     	 movs r2,#0
 282 009c 1A81     	 strh r2,[r3,#8]
 100:../../../platform/resources/queue/src/qmm.c **** #ifdef ENABLE_QUEUE_CAPACITY
 101:../../../platform/resources/queue/src/qmm.c **** 	q->capacity = capacity;
 102:../../../platform/resources/queue/src/qmm.c **** #endif  /* ENABLE_QUEUE_CAPACITY */
 103:../../../platform/resources/queue/src/qmm.c **** }
 283              	 .loc 4 103 0
 284 009e 00BF     	 nop
 285 00a0 0C37     	 adds r7,r7,#12
 286              	.LCFI20:
 287              	 .cfi_def_cfa_offset 4
 288 00a2 BD46     	 mov sp,r7
 289              	.LCFI21:
 290              	 .cfi_def_cfa_register 13
 291              	 
 292 00a4 80BC     	 pop {r7}
 293              	.LCFI22:
 294              	 .cfi_restore 7
 295              	 .cfi_def_cfa_offset 0
 296 00a6 7047     	 bx lr
 297              	 .cfi_endproc
 298              	.LFE122:
 300              	 .align 1
 301              	 .global qmm_queue_append
 302              	 .syntax unified
 303              	 .thumb
 304              	 .thumb_func
 305              	 .fpu softvfp
 307              	qmm_queue_append:
 308              	.LFB123:
 104:../../../platform/resources/queue/src/qmm.c **** 
 105:../../../platform/resources/queue/src/qmm.c **** /**
 106:../../../platform/resources/queue/src/qmm.c ****  * @brief Appends a buffer into the queue.
 107:../../../platform/resources/queue/src/qmm.c ****  *
 108:../../../platform/resources/queue/src/qmm.c ****  * This function appends a buffer into the queue.
 109:../../../platform/resources/queue/src/qmm.c ****  *
 110:../../../platform/resources/queue/src/qmm.c ****  * @param q Queue into which buffer should be appended
 111:../../../platform/resources/queue/src/qmm.c ****  *
 112:../../../platform/resources/queue/src/qmm.c ****  * @param buf Pointer to the buffer that should be appended into the queue.
 113:../../../platform/resources/queue/src/qmm.c ****  * Note that this pointer should be same as the
 114:../../../platform/resources/queue/src/qmm.c ****  * pointer returned by bmm_buffer_alloc.
 115:../../../platform/resources/queue/src/qmm.c ****  */
 116:../../../platform/resources/queue/src/qmm.c **** #ifdef ENABLE_QUEUE_CAPACITY
 117:../../../platform/resources/queue/src/qmm.c **** retval_t qmm_queue_append(queue_t *q, buffer_t *buf)
 118:../../../platform/resources/queue/src/qmm.c **** #else
 119:../../../platform/resources/queue/src/qmm.c **** void qmm_queue_append(queue_t *q, buffer_t *buf)
 120:../../../platform/resources/queue/src/qmm.c **** #endif  /* ENABLE_QUEUE_CAPACITY */
 121:../../../platform/resources/queue/src/qmm.c **** {
 309              	 .loc 4 121 0
 310              	 .cfi_startproc
 311              	 
 312              	 
 313 00a8 80B5     	 push {r7,lr}
 314              	.LCFI23:
 315              	 .cfi_def_cfa_offset 8
 316              	 .cfi_offset 7,-8
 317              	 .cfi_offset 14,-4
 318 00aa 84B0     	 sub sp,sp,#16
 319              	.LCFI24:
 320              	 .cfi_def_cfa_offset 24
 321 00ac 00AF     	 add r7,sp,#0
 322              	.LCFI25:
 323              	 .cfi_def_cfa_register 7
 324 00ae 7860     	 str r0,[r7,#4]
 325 00b0 3960     	 str r1,[r7]
 122:../../../platform/resources/queue/src/qmm.c **** #ifdef ENABLE_QUEUE_CAPACITY
 123:../../../platform/resources/queue/src/qmm.c **** 	retval_t status;
 124:../../../platform/resources/queue/src/qmm.c **** #endif  /* ENABLE_QUEUE_CAPACITY */
 125:../../../platform/resources/queue/src/qmm.c **** 
 126:../../../platform/resources/queue/src/qmm.c **** 	ENTER_CRITICAL_REGION();
 326              	 .loc 4 126 0
 327 00b2 FFF7A5FF 	 bl cpu_irq_save
 328 00b6 F860     	 str r0,[r7,#12]
 127:../../../platform/resources/queue/src/qmm.c **** 
 128:../../../platform/resources/queue/src/qmm.c **** #ifdef ENABLE_QUEUE_CAPACITY
 129:../../../platform/resources/queue/src/qmm.c **** 	/* Check if queue is full */
 130:../../../platform/resources/queue/src/qmm.c **** 	if (q->size == q->capacity) {
 131:../../../platform/resources/queue/src/qmm.c **** 		/* Buffer cannot be appended as queue is full */
 132:../../../platform/resources/queue/src/qmm.c **** 		status = QUEUE_FULL;
 133:../../../platform/resources/queue/src/qmm.c **** 	} else
 134:../../../platform/resources/queue/src/qmm.c **** #endif  /* ENABLE_QUEUE_CAPACITY */
 135:../../../platform/resources/queue/src/qmm.c **** 	{
 136:../../../platform/resources/queue/src/qmm.c **** 		/* Check whether queue is empty */
 137:../../../platform/resources/queue/src/qmm.c **** 		if (q->size == 0) {
 329              	 .loc 4 137 0
 330 00b8 7B68     	 ldr r3,[r7,#4]
 331 00ba 1B89     	 ldrh r3,[r3,#8]
 332 00bc 002B     	 cmp r3,#0
 333 00be 03D1     	 bne .L15
 138:../../../platform/resources/queue/src/qmm.c **** 			/* Add the buffer at the head */
 139:../../../platform/resources/queue/src/qmm.c **** 			q->head = buf;
 334              	 .loc 4 139 0
 335 00c0 7B68     	 ldr r3,[r7,#4]
 336 00c2 3A68     	 ldr r2,[r7]
 337 00c4 1A60     	 str r2,[r3]
 338 00c6 03E0     	 b .L16
 339              	.L15:
 140:../../../platform/resources/queue/src/qmm.c **** 		} else {
 141:../../../platform/resources/queue/src/qmm.c **** 			/* Add the buffer at the end */
 142:../../../platform/resources/queue/src/qmm.c **** 			q->tail->next = buf;
 340              	 .loc 4 142 0
 341 00c8 7B68     	 ldr r3,[r7,#4]
 342 00ca 5B68     	 ldr r3,[r3,#4]
 343 00cc 3A68     	 ldr r2,[r7]
 344 00ce 5A60     	 str r2,[r3,#4]
 345              	.L16:
 143:../../../platform/resources/queue/src/qmm.c **** 		}
 144:../../../platform/resources/queue/src/qmm.c **** 
 145:../../../platform/resources/queue/src/qmm.c **** 		/* Update the list */
 146:../../../platform/resources/queue/src/qmm.c **** 		q->tail = buf;
 346              	 .loc 4 146 0
 347 00d0 7B68     	 ldr r3,[r7,#4]
 348 00d2 3A68     	 ldr r2,[r7]
 349 00d4 5A60     	 str r2,[r3,#4]
 147:../../../platform/resources/queue/src/qmm.c **** 
 148:../../../platform/resources/queue/src/qmm.c **** 		/* Terminate the list */
 149:../../../platform/resources/queue/src/qmm.c **** 		buf->next = NULL;
 350              	 .loc 4 149 0
 351 00d6 3B68     	 ldr r3,[r7]
 352 00d8 0022     	 movs r2,#0
 353 00da 5A60     	 str r2,[r3,#4]
 150:../../../platform/resources/queue/src/qmm.c **** 
 151:../../../platform/resources/queue/src/qmm.c **** 		/* Update size */
 152:../../../platform/resources/queue/src/qmm.c **** 		q->size++;
 354              	 .loc 4 152 0
 355 00dc 7B68     	 ldr r3,[r7,#4]
 356 00de 1B89     	 ldrh r3,[r3,#8]
 357 00e0 0133     	 adds r3,r3,#1
 358 00e2 9AB2     	 uxth r2,r3
 359 00e4 7B68     	 ldr r3,[r7,#4]
 360 00e6 1A81     	 strh r2,[r3,#8]
 153:../../../platform/resources/queue/src/qmm.c **** 
 154:../../../platform/resources/queue/src/qmm.c **** #if (_DEBUG_ > 1)
 155:../../../platform/resources/queue/src/qmm.c **** 		if (q->head == NULL) {
 156:../../../platform/resources/queue/src/qmm.c **** 			Assert(
 157:../../../platform/resources/queue/src/qmm.c **** 					"Corrupted queue: Null pointer has been queued" ==
 158:../../../platform/resources/queue/src/qmm.c **** 					0);
 159:../../../platform/resources/queue/src/qmm.c **** 		}
 160:../../../platform/resources/queue/src/qmm.c **** 
 161:../../../platform/resources/queue/src/qmm.c **** #endif
 162:../../../platform/resources/queue/src/qmm.c **** 
 163:../../../platform/resources/queue/src/qmm.c **** #ifdef ENABLE_QUEUE_CAPACITY
 164:../../../platform/resources/queue/src/qmm.c **** 		status = MAC_SUCCESS;
 165:../../../platform/resources/queue/src/qmm.c **** #endif  /* ENABLE_QUEUE_CAPACITY */
 166:../../../platform/resources/queue/src/qmm.c **** 	}
 167:../../../platform/resources/queue/src/qmm.c **** 
 168:../../../platform/resources/queue/src/qmm.c **** 	LEAVE_CRITICAL_REGION();
 361              	 .loc 4 168 0
 362 00e8 F868     	 ldr r0,[r7,#12]
 363 00ea FFF7B4FF 	 bl cpu_irq_restore
 169:../../../platform/resources/queue/src/qmm.c **** 
 170:../../../platform/resources/queue/src/qmm.c **** #ifdef ENABLE_QUEUE_CAPACITY
 171:../../../platform/resources/queue/src/qmm.c **** 	return (status);
 172:../../../platform/resources/queue/src/qmm.c **** 
 173:../../../platform/resources/queue/src/qmm.c **** #endif
 174:../../../platform/resources/queue/src/qmm.c **** } /* qmm_queue_append */
 364              	 .loc 4 174 0
 365 00ee 00BF     	 nop
 366 00f0 1037     	 adds r7,r7,#16
 367              	.LCFI26:
 368              	 .cfi_def_cfa_offset 8
 369 00f2 BD46     	 mov sp,r7
 370              	.LCFI27:
 371              	 .cfi_def_cfa_register 13
 372              	 
 373 00f4 80BD     	 pop {r7,pc}
 374              	 .cfi_endproc
 375              	.LFE123:
 377              	 .align 1
 378              	 .syntax unified
 379              	 .thumb
 380              	 .thumb_func
 381              	 .fpu softvfp
 383              	queue_read_or_remove:
 384              	.LFB124:
 175:../../../platform/resources/queue/src/qmm.c **** 
 176:../../../platform/resources/queue/src/qmm.c **** /*
 177:../../../platform/resources/queue/src/qmm.c ****  * @brief Reads or removes a buffer from queue
 178:../../../platform/resources/queue/src/qmm.c ****  *
 179:../../../platform/resources/queue/src/qmm.c ****  * This function reads or removes a buffer from a queue as per
 180:../../../platform/resources/queue/src/qmm.c ****  * the search criteria provided. If search criteria is NULL, then the first
 181:../../../platform/resources/queue/src/qmm.c ****  * buffer is returned, otherwise buffer matching the given criteria is returned
 182:../../../platform/resources/queue/src/qmm.c ****  *
 183:../../../platform/resources/queue/src/qmm.c ****  * @param q Queue from which buffer is to be read or removed.
 184:../../../platform/resources/queue/src/qmm.c ****  *
 185:../../../platform/resources/queue/src/qmm.c ****  * @param mode Mode of operations. If this parameter has value REMOVE_MODE,
 186:../../../platform/resources/queue/src/qmm.c ****  *             buffer will be removed from queue and returned. If this parameter
 187:../../../platform/resources/queue/src/qmm.c ****  *is
 188:../../../platform/resources/queue/src/qmm.c ****  *             READ_MODE, buffer pointer will be returned without
 189:../../../platform/resources/queue/src/qmm.c ****  *             removing from queue.
 190:../../../platform/resources/queue/src/qmm.c ****  *
 191:../../../platform/resources/queue/src/qmm.c ****  * @param search Search criteria structure pointer.
 192:../../../platform/resources/queue/src/qmm.c ****  *
 193:../../../platform/resources/queue/src/qmm.c ****  * @return Buffer header pointer, if the buffer is successfully
 194:../../../platform/resources/queue/src/qmm.c ****  *         removed or read, otherwise NULL is returned.
 195:../../../platform/resources/queue/src/qmm.c ****  * \ingroup group_qmm
 196:../../../platform/resources/queue/src/qmm.c ****  */
 197:../../../platform/resources/queue/src/qmm.c **** static buffer_t *queue_read_or_remove(queue_t *q,
 198:../../../platform/resources/queue/src/qmm.c **** 		buffer_mode_t mode,
 199:../../../platform/resources/queue/src/qmm.c **** 		search_t *search)
 200:../../../platform/resources/queue/src/qmm.c **** {
 385              	 .loc 4 200 0
 386              	 .cfi_startproc
 387              	 
 388              	 
 389 00f6 80B5     	 push {r7,lr}
 390              	.LCFI28:
 391              	 .cfi_def_cfa_offset 8
 392              	 .cfi_offset 7,-8
 393              	 .cfi_offset 14,-4
 394 00f8 88B0     	 sub sp,sp,#32
 395              	.LCFI29:
 396              	 .cfi_def_cfa_offset 40
 397 00fa 00AF     	 add r7,sp,#0
 398              	.LCFI30:
 399              	 .cfi_def_cfa_register 7
 400 00fc F860     	 str r0,[r7,#12]
 401 00fe 0B46     	 mov r3,r1
 402 0100 7A60     	 str r2,[r7,#4]
 403 0102 FB72     	 strb r3,[r7,#11]
 201:../../../platform/resources/queue/src/qmm.c **** 	buffer_t *buffer_current = NULL;
 404              	 .loc 4 201 0
 405 0104 0023     	 movs r3,#0
 406 0106 FB61     	 str r3,[r7,#28]
 202:../../../platform/resources/queue/src/qmm.c **** 	buffer_t *buffer_previous;
 203:../../../platform/resources/queue/src/qmm.c **** 
 204:../../../platform/resources/queue/src/qmm.c **** 	ENTER_CRITICAL_REGION();
 407              	 .loc 4 204 0
 408 0108 FFF77AFF 	 bl cpu_irq_save
 409 010c 7861     	 str r0,[r7,#20]
 205:../../../platform/resources/queue/src/qmm.c **** 	/* Check whether queue is empty */
 206:../../../platform/resources/queue/src/qmm.c **** 	if (q->size != 0) {
 410              	 .loc 4 206 0
 411 010e FB68     	 ldr r3,[r7,#12]
 412 0110 1B89     	 ldrh r3,[r3,#8]
 413 0112 002B     	 cmp r3,#0
 414 0114 49D0     	 beq .L18
 207:../../../platform/resources/queue/src/qmm.c **** 		buffer_current = q->head;
 415              	 .loc 4 207 0
 416 0116 FB68     	 ldr r3,[r7,#12]
 417 0118 1B68     	 ldr r3,[r3]
 418 011a FB61     	 str r3,[r7,#28]
 208:../../../platform/resources/queue/src/qmm.c **** 		buffer_previous = q->head;
 419              	 .loc 4 208 0
 420 011c FB68     	 ldr r3,[r7,#12]
 421 011e 1B68     	 ldr r3,[r3]
 422 0120 BB61     	 str r3,[r7,#24]
 209:../../../platform/resources/queue/src/qmm.c **** 
 210:../../../platform/resources/queue/src/qmm.c **** 		/* First get buffer matching with criteria */
 211:../../../platform/resources/queue/src/qmm.c **** 		if (NULL != search) {
 423              	 .loc 4 211 0
 424 0122 7B68     	 ldr r3,[r7,#4]
 425 0124 002B     	 cmp r3,#0
 426 0126 17D0     	 beq .L19
 427              	.LBB22:
 212:../../../platform/resources/queue/src/qmm.c **** 			uint8_t match;
 213:../../../platform/resources/queue/src/qmm.c **** 			/* Search for all buffers in the queue */
 214:../../../platform/resources/queue/src/qmm.c **** 			while (NULL != buffer_current) {
 428              	 .loc 4 214 0
 429 0128 11E0     	 b .L20
 430              	.L22:
 215:../../../platform/resources/queue/src/qmm.c **** 				match = search->criteria_func(
 431              	 .loc 4 215 0
 432 012a 7B68     	 ldr r3,[r7,#4]
 433 012c 1B68     	 ldr r3,[r3]
 216:../../../platform/resources/queue/src/qmm.c **** 						(void *)buffer_current->body,
 434              	 .loc 4 216 0
 435 012e FA69     	 ldr r2,[r7,#28]
 436 0130 1068     	 ldr r0,[r2]
 215:../../../platform/resources/queue/src/qmm.c **** 				match = search->criteria_func(
 437              	 .loc 4 215 0
 438 0132 7A68     	 ldr r2,[r7,#4]
 439 0134 5268     	 ldr r2,[r2,#4]
 440 0136 1146     	 mov r1,r2
 441 0138 9847     	 blx r3
 442              	.LVL0:
 443 013a 0346     	 mov r3,r0
 444 013c FB74     	 strb r3,[r7,#19]
 217:../../../platform/resources/queue/src/qmm.c **** 						search->handle);
 218:../../../platform/resources/queue/src/qmm.c **** 
 219:../../../platform/resources/queue/src/qmm.c **** 				if (match) {
 445              	 .loc 4 219 0
 446 013e FB7C     	 ldrb r3,[r7,#19]
 447 0140 002B     	 cmp r3,#0
 448 0142 08D1     	 bne .L28
 220:../../../platform/resources/queue/src/qmm.c **** 					/* Break, if search criteria matches */
 221:../../../platform/resources/queue/src/qmm.c **** 					break;
 222:../../../platform/resources/queue/src/qmm.c **** 				}
 223:../../../platform/resources/queue/src/qmm.c **** 
 224:../../../platform/resources/queue/src/qmm.c **** 				buffer_previous = buffer_current;
 449              	 .loc 4 224 0
 450 0144 FB69     	 ldr r3,[r7,#28]
 451 0146 BB61     	 str r3,[r7,#24]
 225:../../../platform/resources/queue/src/qmm.c **** 				buffer_current = buffer_current->next;
 452              	 .loc 4 225 0
 453 0148 FB69     	 ldr r3,[r7,#28]
 454 014a 5B68     	 ldr r3,[r3,#4]
 455 014c FB61     	 str r3,[r7,#28]
 456              	.L20:
 214:../../../platform/resources/queue/src/qmm.c **** 				match = search->criteria_func(
 457              	 .loc 4 214 0
 458 014e FB69     	 ldr r3,[r7,#28]
 459 0150 002B     	 cmp r3,#0
 460 0152 EAD1     	 bne .L22
 461 0154 00E0     	 b .L19
 462              	.L28:
 221:../../../platform/resources/queue/src/qmm.c **** 				}
 463              	 .loc 4 221 0
 464 0156 00BF     	 nop
 465              	.L19:
 466              	.LBE22:
 226:../../../platform/resources/queue/src/qmm.c **** 			}
 227:../../../platform/resources/queue/src/qmm.c **** 		}
 228:../../../platform/resources/queue/src/qmm.c **** 
 229:../../../platform/resources/queue/src/qmm.c **** 		/* Buffer matching with search criteria found */
 230:../../../platform/resources/queue/src/qmm.c **** 		if (NULL != buffer_current) {
 467              	 .loc 4 230 0
 468 0158 FB69     	 ldr r3,[r7,#28]
 469 015a 002B     	 cmp r3,#0
 470 015c 25D0     	 beq .L18
 231:../../../platform/resources/queue/src/qmm.c **** 			/* Remove buffer from the queue */
 232:../../../platform/resources/queue/src/qmm.c **** 			if (REMOVE_MODE == mode) {
 471              	 .loc 4 232 0
 472 015e FB7A     	 ldrb r3,[r7,#11]
 473 0160 002B     	 cmp r3,#0
 474 0162 22D1     	 bne .L18
 233:../../../platform/resources/queue/src/qmm.c **** 				/* Update head if buffer removed is first node
 234:../../../platform/resources/queue/src/qmm.c **** 				 **/
 235:../../../platform/resources/queue/src/qmm.c **** 				if (buffer_current == q->head) {
 475              	 .loc 4 235 0
 476 0164 FB68     	 ldr r3,[r7,#12]
 477 0166 1A68     	 ldr r2,[r3]
 478 0168 FB69     	 ldr r3,[r7,#28]
 479 016a 9A42     	 cmp r2,r3
 480 016c 04D1     	 bne .L23
 236:../../../platform/resources/queue/src/qmm.c **** 					q->head = buffer_current->next;
 481              	 .loc 4 236 0
 482 016e FB69     	 ldr r3,[r7,#28]
 483 0170 5A68     	 ldr r2,[r3,#4]
 484 0172 FB68     	 ldr r3,[r7,#12]
 485 0174 1A60     	 str r2,[r3]
 486 0176 03E0     	 b .L24
 487              	.L23:
 237:../../../platform/resources/queue/src/qmm.c **** 				} else {
 238:../../../platform/resources/queue/src/qmm.c **** 					/* Update the link by removing the
 239:../../../platform/resources/queue/src/qmm.c **** 					 *buffer */
 240:../../../platform/resources/queue/src/qmm.c **** 					buffer_previous->next
 241:../../../platform/resources/queue/src/qmm.c **** 						= buffer_current->next;
 488              	 .loc 4 241 0
 489 0178 FB69     	 ldr r3,[r7,#28]
 490 017a 5A68     	 ldr r2,[r3,#4]
 491 017c BB69     	 ldr r3,[r7,#24]
 492 017e 5A60     	 str r2,[r3,#4]
 493              	.L24:
 242:../../../platform/resources/queue/src/qmm.c **** 				}
 243:../../../platform/resources/queue/src/qmm.c **** 
 244:../../../platform/resources/queue/src/qmm.c **** 				/* Update tail if buffer removed is last node */
 245:../../../platform/resources/queue/src/qmm.c **** 				if (buffer_current == q->tail) {
 494              	 .loc 4 245 0
 495 0180 FB68     	 ldr r3,[r7,#12]
 496 0182 5A68     	 ldr r2,[r3,#4]
 497 0184 FB69     	 ldr r3,[r7,#28]
 498 0186 9A42     	 cmp r2,r3
 499 0188 02D1     	 bne .L25
 246:../../../platform/resources/queue/src/qmm.c **** 					q->tail = buffer_previous;
 500              	 .loc 4 246 0
 501 018a FB68     	 ldr r3,[r7,#12]
 502 018c BA69     	 ldr r2,[r7,#24]
 503 018e 5A60     	 str r2,[r3,#4]
 504              	.L25:
 247:../../../platform/resources/queue/src/qmm.c **** 				}
 248:../../../platform/resources/queue/src/qmm.c **** 
 249:../../../platform/resources/queue/src/qmm.c **** 				/* Update size */
 250:../../../platform/resources/queue/src/qmm.c **** 				q->size--;
 505              	 .loc 4 250 0
 506 0190 FB68     	 ldr r3,[r7,#12]
 507 0192 1B89     	 ldrh r3,[r3,#8]
 508 0194 013B     	 subs r3,r3,#1
 509 0196 9AB2     	 uxth r2,r3
 510 0198 FB68     	 ldr r3,[r7,#12]
 511 019a 1A81     	 strh r2,[r3,#8]
 251:../../../platform/resources/queue/src/qmm.c **** 
 252:../../../platform/resources/queue/src/qmm.c **** 				if (NULL == q->head) {
 512              	 .loc 4 252 0
 513 019c FB68     	 ldr r3,[r7,#12]
 514 019e 1B68     	 ldr r3,[r3]
 515 01a0 002B     	 cmp r3,#0
 516 01a2 02D1     	 bne .L18
 253:../../../platform/resources/queue/src/qmm.c **** 					q->tail = NULL;
 517              	 .loc 4 253 0
 518 01a4 FB68     	 ldr r3,[r7,#12]
 519 01a6 0022     	 movs r2,#0
 520 01a8 5A60     	 str r2,[r3,#4]
 521              	.L18:
 254:../../../platform/resources/queue/src/qmm.c **** 				}
 255:../../../platform/resources/queue/src/qmm.c **** 			}
 256:../../../platform/resources/queue/src/qmm.c **** 			/* Read buffer from the queue */
 257:../../../platform/resources/queue/src/qmm.c **** 			else {
 258:../../../platform/resources/queue/src/qmm.c **** 				/* Nothing needs done if the mode is READ_MODE
 259:../../../platform/resources/queue/src/qmm.c **** 				 **/
 260:../../../platform/resources/queue/src/qmm.c **** 			}
 261:../../../platform/resources/queue/src/qmm.c **** 		}
 262:../../../platform/resources/queue/src/qmm.c **** 	} /* q->size != 0 */
 263:../../../platform/resources/queue/src/qmm.c **** 
 264:../../../platform/resources/queue/src/qmm.c **** 	LEAVE_CRITICAL_REGION();
 522              	 .loc 4 264 0
 523 01aa 7869     	 ldr r0,[r7,#20]
 524 01ac FFF753FF 	 bl cpu_irq_restore
 265:../../../platform/resources/queue/src/qmm.c **** 
 266:../../../platform/resources/queue/src/qmm.c **** 	/* Return the buffer. note that pointer to header of buffer is returned
 267:../../../platform/resources/queue/src/qmm.c **** 	 **/
 268:../../../platform/resources/queue/src/qmm.c **** 	return (buffer_current);
 525              	 .loc 4 268 0
 526 01b0 FB69     	 ldr r3,[r7,#28]
 269:../../../platform/resources/queue/src/qmm.c **** } /* queue_read_or_remove */
 527              	 .loc 4 269 0
 528 01b2 1846     	 mov r0,r3
 529 01b4 2037     	 adds r7,r7,#32
 530              	.LCFI31:
 531              	 .cfi_def_cfa_offset 8
 532 01b6 BD46     	 mov sp,r7
 533              	.LCFI32:
 534              	 .cfi_def_cfa_register 13
 535              	 
 536 01b8 80BD     	 pop {r7,pc}
 537              	 .cfi_endproc
 538              	.LFE124:
 540              	 .align 1
 541              	 .global qmm_queue_remove
 542              	 .syntax unified
 543              	 .thumb
 544              	 .thumb_func
 545              	 .fpu softvfp
 547              	qmm_queue_remove:
 548              	.LFB125:
 270:../../../platform/resources/queue/src/qmm.c **** 
 271:../../../platform/resources/queue/src/qmm.c **** /**
 272:../../../platform/resources/queue/src/qmm.c ****  * @brief Removes a buffer from queue.
 273:../../../platform/resources/queue/src/qmm.c ****  *
 274:../../../platform/resources/queue/src/qmm.c ****  * This function removes a buffer from queue
 275:../../../platform/resources/queue/src/qmm.c ****  *
 276:../../../platform/resources/queue/src/qmm.c ****  * @param q Queue from which buffer should be removed
 277:../../../platform/resources/queue/src/qmm.c ****  *
 278:../../../platform/resources/queue/src/qmm.c ****  * @param search Search criteria. If this parameter is NULL, first buffer in the
 279:../../../platform/resources/queue/src/qmm.c ****  * queue will be removed. Otherwise buffer matching the criteria will be
 280:../../../platform/resources/queue/src/qmm.c ****  * removed.
 281:../../../platform/resources/queue/src/qmm.c ****  *
 282:../../../platform/resources/queue/src/qmm.c ****  * @return Pointer to the buffer header, if the buffer is
 283:../../../platform/resources/queue/src/qmm.c ****  * successfully removed, NULL otherwise.
 284:../../../platform/resources/queue/src/qmm.c ****  */
 285:../../../platform/resources/queue/src/qmm.c **** buffer_t *qmm_queue_remove(queue_t *q, search_t *search)
 286:../../../platform/resources/queue/src/qmm.c **** {
 549              	 .loc 4 286 0
 550              	 .cfi_startproc
 551              	 
 552              	 
 553 01ba 80B5     	 push {r7,lr}
 554              	.LCFI33:
 555              	 .cfi_def_cfa_offset 8
 556              	 .cfi_offset 7,-8
 557              	 .cfi_offset 14,-4
 558 01bc 82B0     	 sub sp,sp,#8
 559              	.LCFI34:
 560              	 .cfi_def_cfa_offset 16
 561 01be 00AF     	 add r7,sp,#0
 562              	.LCFI35:
 563              	 .cfi_def_cfa_register 7
 564 01c0 7860     	 str r0,[r7,#4]
 565 01c2 3960     	 str r1,[r7]
 287:../../../platform/resources/queue/src/qmm.c **** 	return (queue_read_or_remove(q, REMOVE_MODE, search));
 566              	 .loc 4 287 0
 567 01c4 3A68     	 ldr r2,[r7]
 568 01c6 0021     	 movs r1,#0
 569 01c8 7868     	 ldr r0,[r7,#4]
 570 01ca FFF794FF 	 bl queue_read_or_remove
 571 01ce 0346     	 mov r3,r0
 288:../../../platform/resources/queue/src/qmm.c **** }
 572              	 .loc 4 288 0
 573 01d0 1846     	 mov r0,r3
 574 01d2 0837     	 adds r7,r7,#8
 575              	.LCFI36:
 576              	 .cfi_def_cfa_offset 8
 577 01d4 BD46     	 mov sp,r7
 578              	.LCFI37:
 579              	 .cfi_def_cfa_register 13
 580              	 
 581 01d6 80BD     	 pop {r7,pc}
 582              	 .cfi_endproc
 583              	.LFE125:
 585              	 .align 1
 586              	 .global qmm_queue_read
 587              	 .syntax unified
 588              	 .thumb
 589              	 .thumb_func
 590              	 .fpu softvfp
 592              	qmm_queue_read:
 593              	.LFB126:
 289:../../../platform/resources/queue/src/qmm.c **** 
 290:../../../platform/resources/queue/src/qmm.c **** /**
 291:../../../platform/resources/queue/src/qmm.c ****  * @brief Reads a buffer from queue.
 292:../../../platform/resources/queue/src/qmm.c ****  *
 293:../../../platform/resources/queue/src/qmm.c ****  * This function reads either the first buffer if search is NULL or buffer
 294:../../../platform/resources/queue/src/qmm.c ****  * matching the given criteria from queue.
 295:../../../platform/resources/queue/src/qmm.c ****  *
 296:../../../platform/resources/queue/src/qmm.c ****  * @param q The queue from which buffer should be read.
 297:../../../platform/resources/queue/src/qmm.c ****  *
 298:../../../platform/resources/queue/src/qmm.c ****  * @param search If this parameter is NULL first buffer in the queue will be
 299:../../../platform/resources/queue/src/qmm.c ****  * read. Otherwise buffer matching the criteria will be read
 300:../../../platform/resources/queue/src/qmm.c ****  *
 301:../../../platform/resources/queue/src/qmm.c ****  * @return Pointer to the buffer header which is to be read, NULL if the buffer
 302:../../../platform/resources/queue/src/qmm.c ****  * is not available
 303:../../../platform/resources/queue/src/qmm.c ****  */
 304:../../../platform/resources/queue/src/qmm.c **** buffer_t *qmm_queue_read(queue_t *q, search_t *search)
 305:../../../platform/resources/queue/src/qmm.c **** {
 594              	 .loc 4 305 0
 595              	 .cfi_startproc
 596              	 
 597              	 
 598 01d8 80B5     	 push {r7,lr}
 599              	.LCFI38:
 600              	 .cfi_def_cfa_offset 8
 601              	 .cfi_offset 7,-8
 602              	 .cfi_offset 14,-4
 603 01da 82B0     	 sub sp,sp,#8
 604              	.LCFI39:
 605              	 .cfi_def_cfa_offset 16
 606 01dc 00AF     	 add r7,sp,#0
 607              	.LCFI40:
 608              	 .cfi_def_cfa_register 7
 609 01de 7860     	 str r0,[r7,#4]
 610 01e0 3960     	 str r1,[r7]
 306:../../../platform/resources/queue/src/qmm.c **** 	return (queue_read_or_remove(q, READ_MODE, search));
 611              	 .loc 4 306 0
 612 01e2 3A68     	 ldr r2,[r7]
 613 01e4 0121     	 movs r1,#1
 614 01e6 7868     	 ldr r0,[r7,#4]
 615 01e8 FFF785FF 	 bl queue_read_or_remove
 616 01ec 0346     	 mov r3,r0
 307:../../../platform/resources/queue/src/qmm.c **** }
 617              	 .loc 4 307 0
 618 01ee 1846     	 mov r0,r3
 619 01f0 0837     	 adds r7,r7,#8
 620              	.LCFI41:
 621              	 .cfi_def_cfa_offset 8
 622 01f2 BD46     	 mov sp,r7
 623              	.LCFI42:
 624              	 .cfi_def_cfa_register 13
 625              	 
 626 01f4 80BD     	 pop {r7,pc}
 627              	 .cfi_endproc
 628              	.LFE126:
 630              	 .align 1
 631              	 .global qmm_queue_flush
 632              	 .syntax unified
 633              	 .thumb
 634              	 .thumb_func
 635              	 .fpu softvfp
 637              	qmm_queue_flush:
 638              	.LFB127:
 308:../../../platform/resources/queue/src/qmm.c **** 
 309:../../../platform/resources/queue/src/qmm.c **** /**
 310:../../../platform/resources/queue/src/qmm.c ****  * @brief Internal function for flushing a specific queue
 311:../../../platform/resources/queue/src/qmm.c ****  *
 312:../../../platform/resources/queue/src/qmm.c ****  * @param q Queue to be flushed
 313:../../../platform/resources/queue/src/qmm.c ****  */
 314:../../../platform/resources/queue/src/qmm.c **** void qmm_queue_flush(queue_t *q)
 315:../../../platform/resources/queue/src/qmm.c **** {
 639              	 .loc 4 315 0
 640              	 .cfi_startproc
 641              	 
 642              	 
 643 01f6 80B5     	 push {r7,lr}
 644              	.LCFI43:
 645              	 .cfi_def_cfa_offset 8
 646              	 .cfi_offset 7,-8
 647              	 .cfi_offset 14,-4
 648 01f8 84B0     	 sub sp,sp,#16
 649              	.LCFI44:
 650              	 .cfi_def_cfa_offset 24
 651 01fa 00AF     	 add r7,sp,#0
 652              	.LCFI45:
 653              	 .cfi_def_cfa_register 7
 654 01fc 7860     	 str r0,[r7,#4]
 316:../../../platform/resources/queue/src/qmm.c **** 	buffer_t *buf_to_free;
 317:../../../platform/resources/queue/src/qmm.c **** 
 318:../../../platform/resources/queue/src/qmm.c **** 	while (q->size > 0) {
 655              	 .loc 4 318 0
 656 01fe 0EE0     	 b .L34
 657              	.L37:
 319:../../../platform/resources/queue/src/qmm.c **** 		/* Remove the buffer from the queue and free it */
 320:../../../platform/resources/queue/src/qmm.c **** 		buf_to_free = qmm_queue_remove(q, NULL);
 658              	 .loc 4 320 0
 659 0200 0021     	 movs r1,#0
 660 0202 7868     	 ldr r0,[r7,#4]
 661 0204 FFF7FEFF 	 bl qmm_queue_remove
 662 0208 F860     	 str r0,[r7,#12]
 321:../../../platform/resources/queue/src/qmm.c **** 
 322:../../../platform/resources/queue/src/qmm.c **** 		if (NULL == buf_to_free) {
 663              	 .loc 4 322 0
 664 020a FB68     	 ldr r3,[r7,#12]
 665 020c 002B     	 cmp r3,#0
 666 020e 03D1     	 bne .L35
 323:../../../platform/resources/queue/src/qmm.c **** #if (_DEBUG_ > 0)
 324:../../../platform/resources/queue/src/qmm.c **** 			Assert("Corrupted queue" == 0);
 325:../../../platform/resources/queue/src/qmm.c **** #endif
 326:../../../platform/resources/queue/src/qmm.c **** 			q->size = 0;
 667              	 .loc 4 326 0
 668 0210 7B68     	 ldr r3,[r7,#4]
 669 0212 0022     	 movs r2,#0
 670 0214 1A81     	 strh r2,[r3,#8]
 327:../../../platform/resources/queue/src/qmm.c **** 			return;
 671              	 .loc 4 327 0
 672 0216 06E0     	 b .L33
 673              	.L35:
 328:../../../platform/resources/queue/src/qmm.c **** 		}
 329:../../../platform/resources/queue/src/qmm.c **** 
 330:../../../platform/resources/queue/src/qmm.c **** 		bmm_buffer_free(buf_to_free);
 674              	 .loc 4 330 0
 675 0218 F868     	 ldr r0,[r7,#12]
 676 021a 044B     	 ldr r3,.L38
 677 021c 9847     	 blx r3
 678              	.LVL1:
 679              	.L34:
 318:../../../platform/resources/queue/src/qmm.c **** 		/* Remove the buffer from the queue and free it */
 680              	 .loc 4 318 0
 681 021e 7B68     	 ldr r3,[r7,#4]
 682 0220 1B89     	 ldrh r3,[r3,#8]
 683 0222 002B     	 cmp r3,#0
 684 0224 ECD1     	 bne .L37
 685              	.L33:
 331:../../../platform/resources/queue/src/qmm.c **** 	}
 332:../../../platform/resources/queue/src/qmm.c **** }
 686              	 .loc 4 332 0
 687 0226 1037     	 adds r7,r7,#16
 688              	.LCFI46:
 689              	 .cfi_def_cfa_offset 8
 690 0228 BD46     	 mov sp,r7
 691              	.LCFI47:
 692              	 .cfi_def_cfa_register 13
 693              	 
 694 022a 80BD     	 pop {r7,pc}
 695              	.L39:
 696              	 .align 2
 697              	.L38:
 698 022c 00000000 	 .word bmm_buffer_free
 699              	 .cfi_endproc
 700              	.LFE127:
 702              	.Letext0:
 703              	 .file 5 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\arm\\arm-gnu-toolchain\\arm-none-eabi\\include\\machine\\_default_types.h"
 704              	 .file 6 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\arm\\arm-gnu-toolchain\\arm-none-eabi\\include\\sys\\_stdint.h"
 705              	 .file 7 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\arm\\arm-gnu-toolchain\\arm-none-eabi\\include\\sys\\lock.h"
 706              	 .file 8 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\arm\\arm-gnu-toolchain\\arm-none-eabi\\include\\sys\\_types.h"
 707              	 .file 9 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\arm\\arm-gnu-toolchain\\lib\\gcc\\arm-none-eabi\\6.3.1\\include\\stddef.h"
 708              	 .file 10 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\arm\\arm-gnu-toolchain\\arm-none-eabi\\include\\sys\\reent.h"
 709              	 .file 11 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\arm\\arm-gnu-toolchain\\arm-none-eabi\\include\\stdlib.h"
 710              	 .file 12 "../../../platform/thirdparty/CMSIS/include/core_cm4.h"
 711              	 .file 13 "../../../platform/sam/utils/cmsis/sam4l/source/templates/system_sam4l.h"
 712              	 .file 14 "../../../platform/resources/buffer/inc/bmm.h"
 713              	 .file 15 "../../../platform/resources/queue/inc/qmm.h"
DEFINED SYMBOLS
                            *ABS*:00000000 qmm.c
    {standard input}:16     .bss.cpu_irq_critical_section_counter:00000000 $d
    {standard input}:19     .bss.cpu_irq_critical_section_counter:00000000 cpu_irq_critical_section_counter
    {standard input}:24     .bss.cpu_irq_prev_interrupt_state:00000000 cpu_irq_prev_interrupt_state
    {standard input}:25     .bss.cpu_irq_prev_interrupt_state:00000000 $d
    {standard input}:27     .text:00000000 $t
    {standard input}:33     .text:00000000 cpu_irq_save
    {standard input}:119    .text:00000034 $d
    {standard input}:123    .text:00000038 $t
    {standard input}:129    .text:00000038 cpu_irq_is_enabled_flags
    {standard input}:177    .text:00000056 cpu_irq_restore
    {standard input}:241    .text:00000080 $d
    {standard input}:245    .text:00000084 $t
    {standard input}:252    .text:00000084 qmm_queue_init
    {standard input}:307    .text:000000a8 qmm_queue_append
    {standard input}:383    .text:000000f6 queue_read_or_remove
    {standard input}:547    .text:000001ba qmm_queue_remove
    {standard input}:592    .text:000001d8 qmm_queue_read
    {standard input}:637    .text:000001f6 qmm_queue_flush
    {standard input}:698    .text:0000022c $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
g_interrupt_enabled
bmm_buffer_free
