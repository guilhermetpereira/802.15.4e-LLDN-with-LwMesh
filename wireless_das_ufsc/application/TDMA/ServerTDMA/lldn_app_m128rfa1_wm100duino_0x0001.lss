
lldn_app_m128rfa1_wm100duino_0x0001.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002a  00800200  0000933a  000093ce  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00008fe2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bootloader   00000358  00008fe2  00008fe2  00009076  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .bss          00000ea1  0080022a  0080022a  000093f8  2**0
                  ALLOC
  4 .comment      0000008b  00000000  00000000  000093f8  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00009484  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 000003a8  00000000  00000000  000094c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000932d  00000000  00000000  0000986c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00003695  00000000  00000000  00012b99  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000057da  00000000  00000000  0001622e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00002a38  00000000  00000000  0001ba08  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00003b26  00000000  00000000  0001e440  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000050ef  00000000  00000000  00021f66  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000098  00000000  00000000  00027055  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <__ctors_end>
       4:	0c 94 90 01 	jmp	0x320	; 0x320 <__bad_interrupt>
       8:	0c 94 90 01 	jmp	0x320	; 0x320 <__bad_interrupt>
       c:	0c 94 90 01 	jmp	0x320	; 0x320 <__bad_interrupt>
      10:	0c 94 90 01 	jmp	0x320	; 0x320 <__bad_interrupt>
      14:	0c 94 90 01 	jmp	0x320	; 0x320 <__bad_interrupt>
      18:	0c 94 90 01 	jmp	0x320	; 0x320 <__bad_interrupt>
      1c:	0c 94 90 01 	jmp	0x320	; 0x320 <__bad_interrupt>
      20:	0c 94 90 01 	jmp	0x320	; 0x320 <__bad_interrupt>
      24:	0c 94 90 01 	jmp	0x320	; 0x320 <__bad_interrupt>
      28:	0c 94 90 01 	jmp	0x320	; 0x320 <__bad_interrupt>
      2c:	0c 94 90 01 	jmp	0x320	; 0x320 <__bad_interrupt>
      30:	0c 94 94 32 	jmp	0x6528	; 0x6528 <__vector_12>
      34:	0c 94 90 01 	jmp	0x320	; 0x320 <__bad_interrupt>
      38:	0c 94 90 01 	jmp	0x320	; 0x320 <__bad_interrupt>
      3c:	0c 94 90 01 	jmp	0x320	; 0x320 <__bad_interrupt>
      40:	0c 94 90 01 	jmp	0x320	; 0x320 <__bad_interrupt>
      44:	0c 94 fc 21 	jmp	0x43f8	; 0x43f8 <__vector_17>
      48:	0c 94 39 22 	jmp	0x4472	; 0x4472 <__vector_18>
      4c:	0c 94 76 22 	jmp	0x44ec	; 0x44ec <__vector_19>
      50:	0c 94 bf 21 	jmp	0x437e	; 0x437e <__vector_20>
      54:	0c 94 90 01 	jmp	0x320	; 0x320 <__bad_interrupt>
      58:	0c 94 90 01 	jmp	0x320	; 0x320 <__bad_interrupt>
      5c:	0c 94 90 01 	jmp	0x320	; 0x320 <__bad_interrupt>
      60:	0c 94 90 01 	jmp	0x320	; 0x320 <__bad_interrupt>
      64:	0c 94 90 36 	jmp	0x6d20	; 0x6d20 <__vector_25>
      68:	0c 94 90 01 	jmp	0x320	; 0x320 <__bad_interrupt>
      6c:	0c 94 90 01 	jmp	0x320	; 0x320 <__bad_interrupt>
      70:	0c 94 90 01 	jmp	0x320	; 0x320 <__bad_interrupt>
      74:	0c 94 90 01 	jmp	0x320	; 0x320 <__bad_interrupt>
      78:	0c 94 90 01 	jmp	0x320	; 0x320 <__bad_interrupt>
      7c:	0c 94 90 01 	jmp	0x320	; 0x320 <__bad_interrupt>
      80:	0c 94 f0 22 	jmp	0x45e0	; 0x45e0 <__vector_32>
      84:	0c 94 2d 23 	jmp	0x465a	; 0x465a <__vector_33>
      88:	0c 94 6a 23 	jmp	0x46d4	; 0x46d4 <__vector_34>
      8c:	0c 94 b3 22 	jmp	0x4566	; 0x4566 <__vector_35>
      90:	0c 94 90 01 	jmp	0x320	; 0x320 <__bad_interrupt>
      94:	0c 94 90 01 	jmp	0x320	; 0x320 <__bad_interrupt>
      98:	0c 94 90 01 	jmp	0x320	; 0x320 <__bad_interrupt>
      9c:	0c 94 90 01 	jmp	0x320	; 0x320 <__bad_interrupt>
      a0:	0c 94 90 01 	jmp	0x320	; 0x320 <__bad_interrupt>
      a4:	0c 94 90 01 	jmp	0x320	; 0x320 <__bad_interrupt>
      a8:	0c 94 e4 23 	jmp	0x47c8	; 0x47c8 <__vector_42>
      ac:	0c 94 21 24 	jmp	0x4842	; 0x4842 <__vector_43>
      b0:	0c 94 5e 24 	jmp	0x48bc	; 0x48bc <__vector_44>
      b4:	0c 94 a7 23 	jmp	0x474e	; 0x474e <__vector_45>
      b8:	0c 94 90 01 	jmp	0x320	; 0x320 <__bad_interrupt>
      bc:	0c 94 d8 24 	jmp	0x49b0	; 0x49b0 <__vector_47>
      c0:	0c 94 15 25 	jmp	0x4a2a	; 0x4a2a <__vector_48>
      c4:	0c 94 52 25 	jmp	0x4aa4	; 0x4aa4 <__vector_49>
      c8:	0c 94 9b 24 	jmp	0x4936	; 0x4936 <__vector_50>
      cc:	0c 94 90 01 	jmp	0x320	; 0x320 <__bad_interrupt>
      d0:	0c 94 90 01 	jmp	0x320	; 0x320 <__bad_interrupt>
      d4:	0c 94 90 01 	jmp	0x320	; 0x320 <__bad_interrupt>
      d8:	0c 94 90 01 	jmp	0x320	; 0x320 <__bad_interrupt>
      dc:	0c 94 90 01 	jmp	0x320	; 0x320 <__bad_interrupt>
      e0:	0c 94 90 01 	jmp	0x320	; 0x320 <__bad_interrupt>
      e4:	0c 94 90 01 	jmp	0x320	; 0x320 <__bad_interrupt>
      e8:	0c 94 90 01 	jmp	0x320	; 0x320 <__bad_interrupt>
      ec:	0c 94 90 01 	jmp	0x320	; 0x320 <__bad_interrupt>
      f0:	0c 94 90 01 	jmp	0x320	; 0x320 <__bad_interrupt>
      f4:	0c 94 90 01 	jmp	0x320	; 0x320 <__bad_interrupt>
      f8:	0c 94 90 01 	jmp	0x320	; 0x320 <__bad_interrupt>
      fc:	0c 94 90 01 	jmp	0x320	; 0x320 <__bad_interrupt>
     100:	0c 94 90 01 	jmp	0x320	; 0x320 <__bad_interrupt>
     104:	0c 94 a5 29 	jmp	0x534a	; 0x534a <__vector_65>
     108:	0c 94 e2 29 	jmp	0x53c4	; 0x53c4 <__vector_66>
     10c:	0c 94 1f 2a 	jmp	0x543e	; 0x543e <__vector_67>
     110:	0c 94 68 29 	jmp	0x52d0	; 0x52d0 <__vector_68>
     114:	0c 94 5c 2a 	jmp	0x54b8	; 0x54b8 <__vector_69>
     118:	0c 94 90 01 	jmp	0x320	; 0x320 <__bad_interrupt>
     11c:	0c 94 90 01 	jmp	0x320	; 0x320 <__bad_interrupt>

00000120 <__trampolines_end>:
     120:	6e 61       	ori	r22, 0x1E	; 30
     122:	6e 00       	.word	0x006e	; ????

00000124 <__c.2332>:
     124:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     134:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     144:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     154:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     164:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     174:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     184:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     194:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     1a4:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     1b4:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     1c4:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     1d4:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     1e4:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     1f4:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     204:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     214:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

00000222 <baudctrl_1mhz>:
     222:	33 00 19 00 0c 00 06 00 03 00 02 00 01 00 ff 00     3...............

00000232 <baudctrl_8mhz>:
     232:	a0 01 cf 00 67 00 33 00 19 00 0c 00 07 00 08 00     ....g.3.........

00000242 <baudctrl_16mhz>:
     242:	40 03 a0 01 cf 00 67 00 33 00 19 00 10 00 10 00     @.....g.3.......

00000252 <baudctrl_1mhz>:
     252:	33 00 19 00 0c 00 06 00 03 00 02 00 01 00 ff 00     3...............

00000262 <baudctrl_8mhz>:
     262:	a0 01 cf 00 67 00 33 00 19 00 0c 00 07 00 08 00     ....g.3.........

00000272 <baudctrl_16mhz>:
     272:	40 03 a0 01 cf 00 67 00 33 00 19 00 10 00 10 00     @.....g.3.......

00000282 <baudctrl_1mhz>:
     282:	33 00 19 00 0c 00 06 00 03 00 02 00 01 00 ff 00     3...............

00000292 <baudctrl_8mhz>:
     292:	a0 01 cf 00 67 00 33 00 19 00 0c 00 07 00 08 00     ....g.3.........

000002a2 <baudctrl_16mhz>:
     2a2:	40 03 a0 01 cf 00 67 00 33 00 19 00 10 00 10 00     @.....g.3.......

000002b2 <baudctrl_1mhz>:
     2b2:	33 00 19 00 0c 00 06 00 03 00 02 00 01 00 ff 00     3...............

000002c2 <baudctrl_8mhz>:
     2c2:	a0 01 cf 00 67 00 33 00 19 00 0c 00 07 00 08 00     ....g.3.........

000002d2 <baudctrl_16mhz>:
     2d2:	40 03 a0 01 cf 00 67 00 33 00 19 00 10 00 10 00     @.....g.3.......

000002e2 <__ctors_end>:
     2e2:	11 24       	eor	r1, r1
     2e4:	1f be       	out	0x3f, r1	; 63
     2e6:	cf ef       	ldi	r28, 0xFF	; 255
     2e8:	d1 e4       	ldi	r29, 0x41	; 65
     2ea:	de bf       	out	0x3e, r29	; 62
     2ec:	cd bf       	out	0x3d, r28	; 61

000002ee <__do_copy_data>:
     2ee:	12 e0       	ldi	r17, 0x02	; 2
     2f0:	a0 e0       	ldi	r26, 0x00	; 0
     2f2:	b2 e0       	ldi	r27, 0x02	; 2
     2f4:	ea e3       	ldi	r30, 0x3A	; 58
     2f6:	f3 e9       	ldi	r31, 0x93	; 147
     2f8:	00 e0       	ldi	r16, 0x00	; 0
     2fa:	0b bf       	out	0x3b, r16	; 59
     2fc:	02 c0       	rjmp	.+4      	; 0x302 <__do_copy_data+0x14>
     2fe:	07 90       	elpm	r0, Z+
     300:	0d 92       	st	X+, r0
     302:	aa 32       	cpi	r26, 0x2A	; 42
     304:	b1 07       	cpc	r27, r17
     306:	d9 f7       	brne	.-10     	; 0x2fe <__do_copy_data+0x10>

00000308 <__do_clear_bss>:
     308:	20 e1       	ldi	r18, 0x10	; 16
     30a:	aa e2       	ldi	r26, 0x2A	; 42
     30c:	b2 e0       	ldi	r27, 0x02	; 2
     30e:	01 c0       	rjmp	.+2      	; 0x312 <.do_clear_bss_start>

00000310 <.do_clear_bss_loop>:
     310:	1d 92       	st	X+, r1

00000312 <.do_clear_bss_start>:
     312:	ab 3c       	cpi	r26, 0xCB	; 203
     314:	b2 07       	cpc	r27, r18
     316:	e1 f7       	brne	.-8      	; 0x310 <.do_clear_bss_loop>
     318:	0e 94 69 02 	call	0x4d2	; 0x4d2 <main>
     31c:	0c 94 ef 47 	jmp	0x8fde	; 0x8fde <_exit>

00000320 <__bad_interrupt>:
     320:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000324 <sysclk_get_main_hz>:
 * configured source clock using fuses.
 * \eg. #define SYSCLK_SOURCE SYSCLK_SRC_RC16MHZ to use internal RC
 * oscillator for clock source.
 */
static inline uint32_t sysclk_get_main_hz(void)
{
     324:	cf 93       	push	r28
     326:	df 93       	push	r29
     328:	cd b7       	in	r28, 0x3d	; 61
     32a:	de b7       	in	r29, 0x3e	; 62
	case SYSCLK_SRC_RC128KHZ:
		return 128000UL;

#if MEGA_RF
	case SYSCLK_SRC_TRS16MHZ:
		return 16000000UL;
     32c:	80 e0       	ldi	r24, 0x00	; 0
     32e:	94 e2       	ldi	r25, 0x24	; 36
     330:	a4 ef       	ldi	r26, 0xF4	; 244
     332:	b0 e0       	ldi	r27, 0x00	; 0
#endif
	default:

		return 1000000UL;
	}
}
     334:	bc 01       	movw	r22, r24
     336:	cd 01       	movw	r24, r26
     338:	df 91       	pop	r29
     33a:	cf 91       	pop	r28
     33c:	08 95       	ret

0000033e <sysclk_get_source_clock_hz>:
 * is set.
 *
 * \return Frequency of the system clock, in Hz.
 */
static inline uint32_t sysclk_get_source_clock_hz(void)
{
     33e:	cf 93       	push	r28
     340:	df 93       	push	r29
     342:	cd b7       	in	r28, 0x3d	; 61
     344:	de b7       	in	r29, 0x3e	; 62
	case SYSCLK_PSDIV_1: /* Fall through */
		if (SYSCLK_SOURCE == SYSCLK_SRC_RC16MHZ ||
				SYSCLK_SOURCE == SYSCLK_SRC_RC128KHZ) {
			return sysclk_get_main_hz() / 2;
		} else {
			return sysclk_get_main_hz();
     346:	0e 94 92 01 	call	0x324	; 0x324 <sysclk_get_main_hz>
     34a:	dc 01       	movw	r26, r24
     34c:	cb 01       	movw	r24, r22

	default:
		/*Invalide case*/
		return 0;
	}
}
     34e:	bc 01       	movw	r22, r24
     350:	cd 01       	movw	r24, r26
     352:	df 91       	pop	r29
     354:	cf 91       	pop	r28
     356:	08 95       	ret

00000358 <usart_double_baud_enable>:
 * \brief Double the USART transmission speed.
 *
 * \param usart The USART module.
 */
static inline void usart_double_baud_enable(USART_t *usart)
{
     358:	cf 93       	push	r28
     35a:	df 93       	push	r29
     35c:	00 d0       	rcall	.+0      	; 0x35e <usart_double_baud_enable+0x6>
     35e:	cd b7       	in	r28, 0x3d	; 61
     360:	de b7       	in	r29, 0x3e	; 62
     362:	9a 83       	std	Y+2, r25	; 0x02
     364:	89 83       	std	Y+1, r24	; 0x01
	usart->UCSRnA |=  USART_U2X_bm;
     366:	89 81       	ldd	r24, Y+1	; 0x01
     368:	9a 81       	ldd	r25, Y+2	; 0x02
     36a:	fc 01       	movw	r30, r24
     36c:	80 81       	ld	r24, Z
     36e:	28 2f       	mov	r18, r24
     370:	22 60       	ori	r18, 0x02	; 2
     372:	89 81       	ldd	r24, Y+1	; 0x01
     374:	9a 81       	ldd	r25, Y+2	; 0x02
     376:	fc 01       	movw	r30, r24
     378:	20 83       	st	Z, r18
}
     37a:	00 00       	nop
     37c:	0f 90       	pop	r0
     37e:	0f 90       	pop	r0
     380:	df 91       	pop	r29
     382:	cf 91       	pop	r28
     384:	08 95       	ret

00000386 <usart_serial_init>:
 * \retval true if the initialization was successful
 * \retval false if initialization failed (error in baud rate calculation)
 */
static inline bool usart_serial_init(usart_if usart, const
		usart_serial_options_t *options)
{
     386:	cf 93       	push	r28
     388:	df 93       	push	r29
     38a:	cd b7       	in	r28, 0x3d	; 61
     38c:	de b7       	in	r29, 0x3e	; 62
     38e:	2b 97       	sbiw	r28, 0x0b	; 11
     390:	0f b6       	in	r0, 0x3f	; 63
     392:	f8 94       	cli
     394:	de bf       	out	0x3e, r29	; 62
     396:	0f be       	out	0x3f, r0	; 63
     398:	cd bf       	out	0x3d, r28	; 61
     39a:	99 87       	std	Y+9, r25	; 0x09
     39c:	88 87       	std	Y+8, r24	; 0x08
     39e:	7b 87       	std	Y+11, r23	; 0x0b
     3a0:	6a 87       	std	Y+10, r22	; 0x0a
	/* USART options. */
	usart_rs232_options_t usart_rs232_options;
	usart_rs232_options.charlength   = options->charlength;
     3a2:	8a 85       	ldd	r24, Y+10	; 0x0a
     3a4:	9b 85       	ldd	r25, Y+11	; 0x0b
     3a6:	fc 01       	movw	r30, r24
     3a8:	84 81       	ldd	r24, Z+4	; 0x04
     3aa:	8d 83       	std	Y+5, r24	; 0x05
	usart_rs232_options.paritytype   = options->paritytype;
     3ac:	8a 85       	ldd	r24, Y+10	; 0x0a
     3ae:	9b 85       	ldd	r25, Y+11	; 0x0b
     3b0:	fc 01       	movw	r30, r24
     3b2:	85 81       	ldd	r24, Z+5	; 0x05
     3b4:	8e 83       	std	Y+6, r24	; 0x06
	usart_rs232_options.stopbits     = options->stopbits;
     3b6:	8a 85       	ldd	r24, Y+10	; 0x0a
     3b8:	9b 85       	ldd	r25, Y+11	; 0x0b
     3ba:	fc 01       	movw	r30, r24
     3bc:	86 81       	ldd	r24, Z+6	; 0x06
     3be:	8f 83       	std	Y+7, r24	; 0x07
	usart_rs232_options.baudrate     = options->baudrate;
     3c0:	8a 85       	ldd	r24, Y+10	; 0x0a
     3c2:	9b 85       	ldd	r25, Y+11	; 0x0b
     3c4:	fc 01       	movw	r30, r24
     3c6:	80 81       	ld	r24, Z
     3c8:	91 81       	ldd	r25, Z+1	; 0x01
     3ca:	a2 81       	ldd	r26, Z+2	; 0x02
     3cc:	b3 81       	ldd	r27, Z+3	; 0x03
     3ce:	89 83       	std	Y+1, r24	; 0x01
     3d0:	9a 83       	std	Y+2, r25	; 0x02
     3d2:	ab 83       	std	Y+3, r26	; 0x03
     3d4:	bc 83       	std	Y+4, r27	; 0x04

	if (usart_init_rs232(usart, &usart_rs232_options)) {
     3d6:	88 85       	ldd	r24, Y+8	; 0x08
     3d8:	99 85       	ldd	r25, Y+9	; 0x09
     3da:	9e 01       	movw	r18, r28
     3dc:	2f 5f       	subi	r18, 0xFF	; 255
     3de:	3f 4f       	sbci	r19, 0xFF	; 255
     3e0:	b9 01       	movw	r22, r18
     3e2:	0e 94 ec 2d 	call	0x5bd8	; 0x5bd8 <usart_init_rs232>
     3e6:	88 23       	and	r24, r24
     3e8:	11 f0       	breq	.+4      	; 0x3ee <usart_serial_init+0x68>
		return true;
     3ea:	81 e0       	ldi	r24, 0x01	; 1
     3ec:	01 c0       	rjmp	.+2      	; 0x3f0 <usart_serial_init+0x6a>
	} else {
		return false;
     3ee:	80 e0       	ldi	r24, 0x00	; 0
	}
}
     3f0:	2b 96       	adiw	r28, 0x0b	; 11
     3f2:	0f b6       	in	r0, 0x3f	; 63
     3f4:	f8 94       	cli
     3f6:	de bf       	out	0x3e, r29	; 62
     3f8:	0f be       	out	0x3f, r0	; 63
     3fa:	cd bf       	out	0x3d, r28	; 61
     3fc:	df 91       	pop	r29
     3fe:	cf 91       	pop	r28
     400:	08 95       	ret

00000402 <usart_serial_putchar>:
 * \param c       Character to write.
 *
 * \return Status code
 */
static inline status_code_t usart_serial_putchar(usart_if usart, uint8_t c)
{
     402:	cf 93       	push	r28
     404:	df 93       	push	r29
     406:	00 d0       	rcall	.+0      	; 0x408 <usart_serial_putchar+0x6>
     408:	1f 92       	push	r1
     40a:	cd b7       	in	r28, 0x3d	; 61
     40c:	de b7       	in	r29, 0x3e	; 62
     40e:	9a 83       	std	Y+2, r25	; 0x02
     410:	89 83       	std	Y+1, r24	; 0x01
     412:	6b 83       	std	Y+3, r22	; 0x03
	return usart_putchar(usart, c);
     414:	89 81       	ldd	r24, Y+1	; 0x01
     416:	9a 81       	ldd	r25, Y+2	; 0x02
     418:	6b 81       	ldd	r22, Y+3	; 0x03
     41a:	0e 94 fa 2f 	call	0x5ff4	; 0x5ff4 <usart_putchar>
}
     41e:	0f 90       	pop	r0
     420:	0f 90       	pop	r0
     422:	0f 90       	pop	r0
     424:	df 91       	pop	r29
     426:	cf 91       	pop	r28
     428:	08 95       	ret

0000042a <usart_serial_getchar>:
 * \param usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if usart, uint8_t *data)
{
     42a:	cf 93       	push	r28
     42c:	df 93       	push	r29
     42e:	00 d0       	rcall	.+0      	; 0x430 <usart_serial_getchar+0x6>
     430:	00 d0       	rcall	.+0      	; 0x432 <usart_serial_getchar+0x8>
     432:	cd b7       	in	r28, 0x3d	; 61
     434:	de b7       	in	r29, 0x3e	; 62
     436:	9a 83       	std	Y+2, r25	; 0x02
     438:	89 83       	std	Y+1, r24	; 0x01
     43a:	7c 83       	std	Y+4, r23	; 0x04
     43c:	6b 83       	std	Y+3, r22	; 0x03
	*data = usart_getchar(usart);
     43e:	89 81       	ldd	r24, Y+1	; 0x01
     440:	9a 81       	ldd	r25, Y+2	; 0x02
     442:	0e 94 19 30 	call	0x6032	; 0x6032 <usart_getchar>
     446:	28 2f       	mov	r18, r24
     448:	8b 81       	ldd	r24, Y+3	; 0x03
     44a:	9c 81       	ldd	r25, Y+4	; 0x04
     44c:	fc 01       	movw	r30, r24
     44e:	20 83       	st	Z, r18
}
     450:	00 00       	nop
     452:	0f 90       	pop	r0
     454:	0f 90       	pop	r0
     456:	0f 90       	pop	r0
     458:	0f 90       	pop	r0
     45a:	df 91       	pop	r29
     45c:	cf 91       	pop	r28
     45e:	08 95       	ret

00000460 <stdio_serial_init>:
 * \param usart       Base address of the USART instance.
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
     460:	cf 93       	push	r28
     462:	df 93       	push	r29
     464:	00 d0       	rcall	.+0      	; 0x466 <stdio_serial_init+0x6>
     466:	00 d0       	rcall	.+0      	; 0x468 <stdio_serial_init+0x8>
     468:	cd b7       	in	r28, 0x3d	; 61
     46a:	de b7       	in	r29, 0x3e	; 62
     46c:	9a 83       	std	Y+2, r25	; 0x02
     46e:	89 83       	std	Y+1, r24	; 0x01
     470:	7c 83       	std	Y+4, r23	; 0x04
     472:	6b 83       	std	Y+3, r22	; 0x03
	stdio_base = (void *)usart;
     474:	89 81       	ldd	r24, Y+1	; 0x01
     476:	9a 81       	ldd	r25, Y+2	; 0x02
     478:	90 93 bf 10 	sts	0x10BF, r25	; 0x8010bf <stdio_base+0x1>
     47c:	80 93 be 10 	sts	0x10BE, r24	; 0x8010be <stdio_base>
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
     480:	81 e0       	ldi	r24, 0x01	; 1
     482:	92 e0       	ldi	r25, 0x02	; 2
     484:	90 93 bd 10 	sts	0x10BD, r25	; 0x8010bd <ptr_put+0x1>
     488:	80 93 bc 10 	sts	0x10BC, r24	; 0x8010bc <ptr_put>
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
     48c:	85 e1       	ldi	r24, 0x15	; 21
     48e:	92 e0       	ldi	r25, 0x02	; 2
     490:	90 93 bb 10 	sts	0x10BB, r25	; 0x8010bb <ptr_get+0x1>
     494:	80 93 ba 10 	sts	0x10BA, r24	; 0x8010ba <ptr_get>
# if (XMEGA || MEGA_RF)
	usart_serial_init((USART_t *)usart,opt);
     498:	2b 81       	ldd	r18, Y+3	; 0x03
     49a:	3c 81       	ldd	r19, Y+4	; 0x04
     49c:	89 81       	ldd	r24, Y+1	; 0x01
     49e:	9a 81       	ldd	r25, Y+2	; 0x02
     4a0:	b9 01       	movw	r22, r18
     4a2:	0e 94 c3 01 	call	0x386	; 0x386 <usart_serial_init>
# endif

# if defined(__GNUC__)
#  if (XMEGA || MEGA_RF)
	// For AVR GCC libc print redirection uses fdevopen.
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
     4a6:	6c ec       	ldi	r22, 0xCC	; 204
     4a8:	74 e3       	ldi	r23, 0x34	; 52
     4aa:	8b ee       	ldi	r24, 0xEB	; 235
     4ac:	94 e3       	ldi	r25, 0x34	; 52
     4ae:	0e 94 9b 45 	call	0x8b36	; 0x8b36 <fdevopen>
	// and AVR GCC library:
	// - printf() emits one character at a time.
	// - getchar() requests only 1 byte to exit.
#  endif
# endif
}
     4b2:	00 00       	nop
     4b4:	0f 90       	pop	r0
     4b6:	0f 90       	pop	r0
     4b8:	0f 90       	pop	r0
     4ba:	0f 90       	pop	r0
     4bc:	df 91       	pop	r29
     4be:	cf 91       	pop	r28
     4c0:	08 95       	ret

000004c2 <APP_TaskHandler>:


/*************************************************************************//**
*****************************************************************************/
static void APP_TaskHandler(void)
{
     4c2:	cf 93       	push	r28
     4c4:	df 93       	push	r29
     4c6:	cd b7       	in	r28, 0x3d	; 61
     4c8:	de b7       	in	r29, 0x3e	; 62

}
     4ca:	00 00       	nop
     4cc:	df 91       	pop	r29
     4ce:	cf 91       	pop	r28
     4d0:	08 95       	ret

000004d2 <main>:

/*****************************************************************************
*****************************************************************************/
int main(void)
{
     4d2:	0f 93       	push	r16
     4d4:	1f 93       	push	r17
     4d6:	cf 93       	push	r28
     4d8:	df 93       	push	r29
     4da:	cd b7       	in	r28, 0x3d	; 61
     4dc:	de b7       	in	r29, 0x3e	; 62
     4de:	27 97       	sbiw	r28, 0x07	; 7
     4e0:	0f b6       	in	r0, 0x3f	; 63
     4e2:	f8 94       	cli
     4e4:	de bf       	out	0x3e, r29	; 62
     4e6:	0f be       	out	0x3f, r0	; 63
     4e8:	cd bf       	out	0x3d, r28	; 61
	sysclk_init();
     4ea:	0e 94 b3 33 	call	0x6766	; 0x6766 <sysclk_init>
	board_init();
     4ee:	0e 94 e8 36 	call	0x6dd0	; 0x6dd0 <board_init>

	SYS_Init();
     4f2:	0e 94 d6 17 	call	0x2fac	; 0x2fac <SYS_Init>
	// Disable CSMA/CA
	// Disable auto ACK
	PHY_SetTdmaMode(true);
     4f6:	81 e0       	ldi	r24, 0x01	; 1
     4f8:	0e 94 38 14 	call	0x2870	; 0x2870 <PHY_SetTdmaMode>
	sm_init();
     4fc:	0e 94 16 29 	call	0x522c	; 0x522c <sm_init>
	
	// Initialize interrupt vector table support.
#if (SIO2HOST_CHANNEL == SIO_USB)
	irq_initialize_vectors();
#endif
	cpu_irq_enable();
     500:	78 94       	sei

	const usart_serial_options_t usart_serial_options =
     502:	27 e0       	ldi	r18, 0x07	; 7
     504:	e9 e1       	ldi	r30, 0x19	; 25
     506:	f2 e0       	ldi	r31, 0x02	; 2
     508:	ce 01       	movw	r24, r28
     50a:	01 96       	adiw	r24, 0x01	; 1
     50c:	dc 01       	movw	r26, r24
     50e:	01 90       	ld	r0, Z+
     510:	0d 92       	st	X+, r0
     512:	2a 95       	dec	r18
     514:	e1 f7       	brne	.-8      	; 0x50e <main+0x3c>
		.charlength   = USART_HOST_CHAR_LENGTH,
		.paritytype   = USART_HOST_PARITY,
		.stopbits     = USART_HOST_STOP_BITS
	};

	stdio_serial_init(USART_HOST, &usart_serial_options);
     516:	ce 01       	movw	r24, r28
     518:	01 96       	adiw	r24, 0x01	; 1
     51a:	bc 01       	movw	r22, r24
     51c:	80 ec       	ldi	r24, 0xC0	; 192
     51e:	90 e0       	ldi	r25, 0x00	; 0
     520:	0e 94 30 02 	call	0x460	; 0x460 <stdio_serial_init>
	usart_double_baud_enable(USART_HOST);
     524:	80 ec       	ldi	r24, 0xC0	; 192
     526:	90 e0       	ldi	r25, 0x00	; 0
     528:	0e 94 ac 01 	call	0x358	; 0x358 <usart_double_baud_enable>
	usart_set_baudrate_precalculated(USART_HOST, USART_HOST_BAUDRATE, sysclk_get_source_clock_hz());
     52c:	0e 94 9f 01 	call	0x33e	; 0x33e <sysclk_get_source_clock_hz>
     530:	dc 01       	movw	r26, r24
     532:	cb 01       	movw	r24, r22
     534:	8c 01       	movw	r16, r24
     536:	9d 01       	movw	r18, r26
     538:	40 e0       	ldi	r20, 0x00	; 0
     53a:	52 ec       	ldi	r21, 0xC2	; 194
     53c:	61 e0       	ldi	r22, 0x01	; 1
     53e:	70 e0       	ldi	r23, 0x00	; 0
     540:	80 ec       	ldi	r24, 0xC0	; 192
     542:	90 e0       	ldi	r25, 0x00	; 0
     544:	0e 94 95 30 	call	0x612a	; 0x612a <usart_set_baudrate_precalculated>
	
	for(;;)
	{
		SYS_TaskHandler();
     548:	0e 94 e6 17 	call	0x2fcc	; 0x2fcc <SYS_TaskHandler>
		APP_TaskHandler();
     54c:	0e 94 61 02 	call	0x4c2	; 0x4c2 <APP_TaskHandler>
	}
     550:	fb cf       	rjmp	.-10     	; 0x548 <main+0x76>

00000552 <NWK_Init>:

/*************************************************************************//**
*  @brief Initializes all network layer modules
*****************************************************************************/
void NWK_Init(void)
{
     552:	cf 93       	push	r28
     554:	df 93       	push	r29
     556:	1f 92       	push	r1
     558:	cd b7       	in	r28, 0x3d	; 61
     55a:	de b7       	in	r29, 0x3e	; 62
	nwkIb.nwkSeqNum = 0;
     55c:	10 92 8e 10 	sts	0x108E, r1	; 0x80108e <nwkIb+0x4>
	nwkIb.macSeqNum = 0;
     560:	10 92 8f 10 	sts	0x108F, r1	; 0x80108f <nwkIb+0x5>
	nwkIb.addr = 0;
     564:	10 92 8b 10 	sts	0x108B, r1	; 0x80108b <nwkIb+0x1>
     568:	10 92 8a 10 	sts	0x108A, r1	; 0x80108a <nwkIb>
	nwkIb.lock = 0;
     56c:	10 92 b1 10 	sts	0x10B1, r1	; 0x8010b1 <nwkIb+0x27>
     570:	10 92 b0 10 	sts	0x10B0, r1	; 0x8010b0 <nwkIb+0x26>

	for (uint8_t i = 0; i < NWK_ENDPOINTS_AMOUNT; i++) {
     574:	19 82       	std	Y+1, r1	; 0x01
     576:	0e c0       	rjmp	.+28     	; 0x594 <NWK_Init+0x42>
		nwkIb.endpoint[i] = NULL;
     578:	89 81       	ldd	r24, Y+1	; 0x01
     57a:	88 2f       	mov	r24, r24
     57c:	90 e0       	ldi	r25, 0x00	; 0
     57e:	03 96       	adiw	r24, 0x03	; 3
     580:	88 0f       	add	r24, r24
     582:	99 1f       	adc	r25, r25
     584:	86 57       	subi	r24, 0x76	; 118
     586:	9f 4e       	sbci	r25, 0xEF	; 239
     588:	fc 01       	movw	r30, r24
     58a:	11 82       	std	Z+1, r1	; 0x01
     58c:	10 82       	st	Z, r1
	nwkIb.nwkSeqNum = 0;
	nwkIb.macSeqNum = 0;
	nwkIb.addr = 0;
	nwkIb.lock = 0;

	for (uint8_t i = 0; i < NWK_ENDPOINTS_AMOUNT; i++) {
     58e:	89 81       	ldd	r24, Y+1	; 0x01
     590:	8f 5f       	subi	r24, 0xFF	; 255
     592:	89 83       	std	Y+1, r24	; 0x01
     594:	89 81       	ldd	r24, Y+1	; 0x01
     596:	80 31       	cpi	r24, 0x10	; 16
     598:	78 f3       	brcs	.-34     	; 0x578 <NWK_Init+0x26>
		nwkIb.endpoint[i] = NULL;
	}

	nwkTxInit();
     59a:	0e 94 7f 0f 	call	0x1efe	; 0x1efe <nwkTxInit>
	nwkRxInit();
     59e:	0e 94 17 09 	call	0x122e	; 0x122e <nwkRxInit>
	nwkFrameInit();
     5a2:	0e 94 59 07 	call	0xeb2	; 0xeb2 <nwkFrameInit>
	nwkDataReqInit();
     5a6:	0e 94 b3 03 	call	0x766	; 0x766 <nwkDataReqInit>
#endif

#ifdef NWK_ENABLE_ROUTE_DISCOVERY
	nwkRouteDiscoveryInit();
#endif
}
     5aa:	00 00       	nop
     5ac:	0f 90       	pop	r0
     5ae:	df 91       	pop	r29
     5b0:	cf 91       	pop	r28
     5b2:	08 95       	ret

000005b4 <NWK_SetAddr>:
/*************************************************************************//**
*  @brief Sets network address of the node
*  @param[in] addr Adddress to set
*****************************************************************************/
void NWK_SetAddr(uint16_t addr)
{
     5b4:	cf 93       	push	r28
     5b6:	df 93       	push	r29
     5b8:	00 d0       	rcall	.+0      	; 0x5ba <NWK_SetAddr+0x6>
     5ba:	cd b7       	in	r28, 0x3d	; 61
     5bc:	de b7       	in	r29, 0x3e	; 62
     5be:	9a 83       	std	Y+2, r25	; 0x02
     5c0:	89 83       	std	Y+1, r24	; 0x01
	nwkIb.addr = addr;
     5c2:	89 81       	ldd	r24, Y+1	; 0x01
     5c4:	9a 81       	ldd	r25, Y+2	; 0x02
     5c6:	90 93 8b 10 	sts	0x108B, r25	; 0x80108b <nwkIb+0x1>
     5ca:	80 93 8a 10 	sts	0x108A, r24	; 0x80108a <nwkIb>
	PHY_SetShortAddr(addr);
     5ce:	89 81       	ldd	r24, Y+1	; 0x01
     5d0:	9a 81       	ldd	r25, Y+2	; 0x02
     5d2:	0e 94 8a 15 	call	0x2b14	; 0x2b14 <PHY_SetShortAddr>
}
     5d6:	00 00       	nop
     5d8:	0f 90       	pop	r0
     5da:	0f 90       	pop	r0
     5dc:	df 91       	pop	r29
     5de:	cf 91       	pop	r28
     5e0:	08 95       	ret

000005e2 <NWK_SetPanId>:
/*************************************************************************//**
*  @brief Sets network identifier (PAN) of the node
*  @param[in] panId PAN ID to set
*****************************************************************************/
void NWK_SetPanId(uint16_t panId)
{
     5e2:	cf 93       	push	r28
     5e4:	df 93       	push	r29
     5e6:	00 d0       	rcall	.+0      	; 0x5e8 <NWK_SetPanId+0x6>
     5e8:	cd b7       	in	r28, 0x3d	; 61
     5ea:	de b7       	in	r29, 0x3e	; 62
     5ec:	9a 83       	std	Y+2, r25	; 0x02
     5ee:	89 83       	std	Y+1, r24	; 0x01
	nwkIb.panId = panId;
     5f0:	89 81       	ldd	r24, Y+1	; 0x01
     5f2:	9a 81       	ldd	r25, Y+2	; 0x02
     5f4:	90 93 8d 10 	sts	0x108D, r25	; 0x80108d <nwkIb+0x3>
     5f8:	80 93 8c 10 	sts	0x108C, r24	; 0x80108c <nwkIb+0x2>
	PHY_SetPanId(panId);
     5fc:	89 81       	ldd	r24, Y+1	; 0x01
     5fe:	9a 81       	ldd	r25, Y+2	; 0x02
     600:	0e 94 66 15 	call	0x2acc	; 0x2acc <PHY_SetPanId>
}
     604:	00 00       	nop
     606:	0f 90       	pop	r0
     608:	0f 90       	pop	r0
     60a:	df 91       	pop	r29
     60c:	cf 91       	pop	r28
     60e:	08 95       	ret

00000610 <NWK_OpenEndpoint>:
*  @brief Registers callback @a ind for the endpoint @a endpoint
*  @param[in] id Endpoint index (1-15)
*  @param[in] handler Pointer to the callback function
*****************************************************************************/
void NWK_OpenEndpoint(uint8_t id, bool (*handler)(NWK_DataInd_t *ind))
{
     610:	cf 93       	push	r28
     612:	df 93       	push	r29
     614:	00 d0       	rcall	.+0      	; 0x616 <NWK_OpenEndpoint+0x6>
     616:	1f 92       	push	r1
     618:	cd b7       	in	r28, 0x3d	; 61
     61a:	de b7       	in	r29, 0x3e	; 62
     61c:	89 83       	std	Y+1, r24	; 0x01
     61e:	7b 83       	std	Y+3, r23	; 0x03
     620:	6a 83       	std	Y+2, r22	; 0x02
	nwkIb.endpoint[id] = handler;
     622:	89 81       	ldd	r24, Y+1	; 0x01
     624:	88 2f       	mov	r24, r24
     626:	90 e0       	ldi	r25, 0x00	; 0
     628:	03 96       	adiw	r24, 0x03	; 3
     62a:	88 0f       	add	r24, r24
     62c:	99 1f       	adc	r25, r25
     62e:	86 57       	subi	r24, 0x76	; 118
     630:	9f 4e       	sbci	r25, 0xEF	; 239
     632:	2a 81       	ldd	r18, Y+2	; 0x02
     634:	3b 81       	ldd	r19, Y+3	; 0x03
     636:	fc 01       	movw	r30, r24
     638:	31 83       	std	Z+1, r19	; 0x01
     63a:	20 83       	st	Z, r18
}
     63c:	00 00       	nop
     63e:	0f 90       	pop	r0
     640:	0f 90       	pop	r0
     642:	0f 90       	pop	r0
     644:	df 91       	pop	r29
     646:	cf 91       	pop	r28
     648:	08 95       	ret

0000064a <NWK_Busy>:
/*************************************************************************//**
*  @brief Checks if network layer is ready for sleep
*  @return @c true if network layer is ready for sleep or @c false otherwise
*****************************************************************************/
bool NWK_Busy(void)
{
     64a:	cf 93       	push	r28
     64c:	df 93       	push	r29
     64e:	cd b7       	in	r28, 0x3d	; 61
     650:	de b7       	in	r29, 0x3e	; 62
	return nwkIb.lock > 0;
     652:	80 91 b0 10 	lds	r24, 0x10B0	; 0x8010b0 <nwkIb+0x26>
     656:	90 91 b1 10 	lds	r25, 0x10B1	; 0x8010b1 <nwkIb+0x27>
     65a:	21 e0       	ldi	r18, 0x01	; 1
     65c:	89 2b       	or	r24, r25
     65e:	09 f4       	brne	.+2      	; 0x662 <NWK_Busy+0x18>
     660:	20 e0       	ldi	r18, 0x00	; 0
     662:	82 2f       	mov	r24, r18
}
     664:	df 91       	pop	r29
     666:	cf 91       	pop	r28
     668:	08 95       	ret

0000066a <NWK_Lock>:

/*************************************************************************//**
*  @brief Increases the lock counter and sets a busy state
*****************************************************************************/
void NWK_Lock(void)
{
     66a:	cf 93       	push	r28
     66c:	df 93       	push	r29
     66e:	cd b7       	in	r28, 0x3d	; 61
     670:	de b7       	in	r29, 0x3e	; 62
	nwkIb.lock++;
     672:	80 91 b0 10 	lds	r24, 0x10B0	; 0x8010b0 <nwkIb+0x26>
     676:	90 91 b1 10 	lds	r25, 0x10B1	; 0x8010b1 <nwkIb+0x27>
     67a:	01 96       	adiw	r24, 0x01	; 1
     67c:	90 93 b1 10 	sts	0x10B1, r25	; 0x8010b1 <nwkIb+0x27>
     680:	80 93 b0 10 	sts	0x10B0, r24	; 0x8010b0 <nwkIb+0x26>
}
     684:	00 00       	nop
     686:	df 91       	pop	r29
     688:	cf 91       	pop	r28
     68a:	08 95       	ret

0000068c <NWK_Unlock>:

/*************************************************************************//**
*  @brief Decreases the lock counter and sets a free state if counter reaches 0
*****************************************************************************/
void NWK_Unlock(void)
{
     68c:	cf 93       	push	r28
     68e:	df 93       	push	r29
     690:	cd b7       	in	r28, 0x3d	; 61
     692:	de b7       	in	r29, 0x3e	; 62
	nwkIb.lock--;
     694:	80 91 b0 10 	lds	r24, 0x10B0	; 0x8010b0 <nwkIb+0x26>
     698:	90 91 b1 10 	lds	r25, 0x10B1	; 0x8010b1 <nwkIb+0x27>
     69c:	01 97       	sbiw	r24, 0x01	; 1
     69e:	90 93 b1 10 	sts	0x10B1, r25	; 0x8010b1 <nwkIb+0x27>
     6a2:	80 93 b0 10 	sts	0x10B0, r24	; 0x8010b0 <nwkIb+0x26>
}
     6a6:	00 00       	nop
     6a8:	df 91       	pop	r29
     6aa:	cf 91       	pop	r28
     6ac:	08 95       	ret

000006ae <NWK_SleepReq>:

/*************************************************************************//**
*  @brief Puts network layer to a sleeping state
*****************************************************************************/
void NWK_SleepReq(void)
{
     6ae:	cf 93       	push	r28
     6b0:	df 93       	push	r29
     6b2:	cd b7       	in	r28, 0x3d	; 61
     6b4:	de b7       	in	r29, 0x3e	; 62
	PHY_Sleep();
     6b6:	0e 94 c4 15 	call	0x2b88	; 0x2b88 <PHY_Sleep>
}
     6ba:	00 00       	nop
     6bc:	df 91       	pop	r29
     6be:	cf 91       	pop	r28
     6c0:	08 95       	ret

000006c2 <NWK_WakeupReq>:

/*************************************************************************//**
*  @brief Puts network layer to an active state
*****************************************************************************/
void NWK_WakeupReq(void)
{
     6c2:	cf 93       	push	r28
     6c4:	df 93       	push	r29
     6c6:	cd b7       	in	r28, 0x3d	; 61
     6c8:	de b7       	in	r29, 0x3e	; 62
	PHY_Wakeup();
     6ca:	0e 94 d9 15 	call	0x2bb2	; 0x2bb2 <PHY_Wakeup>
}
     6ce:	00 00       	nop
     6d0:	df 91       	pop	r29
     6d2:	cf 91       	pop	r28
     6d4:	08 95       	ret

000006d6 <NWK_LinearizeLqi>:
*  @brief Calculates linearized value for the given value of the LQI
*  @param[in] lqi LQI value as provided by the transceiver
*  @return linearized value directly proportional to the probability of delivery
*****************************************************************************/
uint8_t NWK_LinearizeLqi(uint8_t lqi)
{
     6d6:	cf 93       	push	r28
     6d8:	df 93       	push	r29
     6da:	cd b7       	in	r28, 0x3d	; 61
     6dc:	de b7       	in	r29, 0x3e	; 62
     6de:	2c 97       	sbiw	r28, 0x0c	; 12
     6e0:	0f b6       	in	r0, 0x3f	; 63
     6e2:	f8 94       	cli
     6e4:	de bf       	out	0x3e, r29	; 62
     6e6:	0f be       	out	0x3f, r0	; 63
     6e8:	cd bf       	out	0x3d, r28	; 61
     6ea:	8c 87       	std	Y+12, r24	; 0x0c
	const uint8_t val[] = { 3, 8, 26, 64, 128, 190, 230, 247, 252 };
     6ec:	89 e0       	ldi	r24, 0x09	; 9
     6ee:	e0 e2       	ldi	r30, 0x20	; 32
     6f0:	f2 e0       	ldi	r31, 0x02	; 2
     6f2:	de 01       	movw	r26, r28
     6f4:	13 96       	adiw	r26, 0x03	; 3
     6f6:	01 90       	ld	r0, Z+
     6f8:	0d 92       	st	X+, r0
     6fa:	8a 95       	dec	r24
     6fc:	e1 f7       	brne	.-8      	; 0x6f6 <NWK_LinearizeLqi+0x20>
	uint8_t cl = 25;
     6fe:	89 e1       	ldi	r24, 0x19	; 25
     700:	89 83       	std	Y+1, r24	; 0x01

	for (uint8_t i = 0; i < sizeof(val); i++) {
     702:	1a 82       	std	Y+2, r1	; 0x02
     704:	15 c0       	rjmp	.+42     	; 0x730 <NWK_LinearizeLqi+0x5a>
		if (lqi < cl) {
     706:	9c 85       	ldd	r25, Y+12	; 0x0c
     708:	89 81       	ldd	r24, Y+1	; 0x01
     70a:	98 17       	cp	r25, r24
     70c:	58 f4       	brcc	.+22     	; 0x724 <NWK_LinearizeLqi+0x4e>
			return val[i];
     70e:	8a 81       	ldd	r24, Y+2	; 0x02
     710:	88 2f       	mov	r24, r24
     712:	90 e0       	ldi	r25, 0x00	; 0
     714:	9e 01       	movw	r18, r28
     716:	2d 5f       	subi	r18, 0xFD	; 253
     718:	3f 4f       	sbci	r19, 0xFF	; 255
     71a:	82 0f       	add	r24, r18
     71c:	93 1f       	adc	r25, r19
     71e:	fc 01       	movw	r30, r24
     720:	80 81       	ld	r24, Z
     722:	0a c0       	rjmp	.+20     	; 0x738 <NWK_LinearizeLqi+0x62>
		}

		cl += 25;
     724:	89 81       	ldd	r24, Y+1	; 0x01
     726:	87 5e       	subi	r24, 0xE7	; 231
     728:	89 83       	std	Y+1, r24	; 0x01
uint8_t NWK_LinearizeLqi(uint8_t lqi)
{
	const uint8_t val[] = { 3, 8, 26, 64, 128, 190, 230, 247, 252 };
	uint8_t cl = 25;

	for (uint8_t i = 0; i < sizeof(val); i++) {
     72a:	8a 81       	ldd	r24, Y+2	; 0x02
     72c:	8f 5f       	subi	r24, 0xFF	; 255
     72e:	8a 83       	std	Y+2, r24	; 0x02
     730:	8a 81       	ldd	r24, Y+2	; 0x02
     732:	89 30       	cpi	r24, 0x09	; 9
     734:	40 f3       	brcs	.-48     	; 0x706 <NWK_LinearizeLqi+0x30>
		}

		cl += 25;
	}

	return 255;
     736:	8f ef       	ldi	r24, 0xFF	; 255
}
     738:	2c 96       	adiw	r28, 0x0c	; 12
     73a:	0f b6       	in	r0, 0x3f	; 63
     73c:	f8 94       	cli
     73e:	de bf       	out	0x3e, r29	; 62
     740:	0f be       	out	0x3f, r0	; 63
     742:	cd bf       	out	0x3d, r28	; 61
     744:	df 91       	pop	r29
     746:	cf 91       	pop	r28
     748:	08 95       	ret

0000074a <NWK_TaskHandler>:

/*************************************************************************//**
*  @brief Network layer task handler
*****************************************************************************/
void NWK_TaskHandler(void)
{
     74a:	cf 93       	push	r28
     74c:	df 93       	push	r29
     74e:	cd b7       	in	r28, 0x3d	; 61
     750:	de b7       	in	r29, 0x3e	; 62
	nwkRxTaskHandler();
     752:	0e 94 2d 0f 	call	0x1e5a	; 0x1e5a <nwkRxTaskHandler>
	nwkTxTaskHandler();
     756:	0e 94 3e 13 	call	0x267c	; 0x267c <nwkTxTaskHandler>
	nwkDataReqTaskHandler();
     75a:	0e 94 23 07 	call	0xe46	; 0xe46 <nwkDataReqTaskHandler>
#ifdef NWK_ENABLE_SECURITY
	nwkSecurityTaskHandler();
#endif
}
     75e:	00 00       	nop
     760:	df 91       	pop	r29
     762:	cf 91       	pop	r28
     764:	08 95       	ret

00000766 <nwkDataReqInit>:

/*************************************************************************//**
*  @brief Initializes the Data Request module
*****************************************************************************/
void nwkDataReqInit(void)
{
     766:	cf 93       	push	r28
     768:	df 93       	push	r29
     76a:	cd b7       	in	r28, 0x3d	; 61
     76c:	de b7       	in	r29, 0x3e	; 62
	nwkDataReqQueue = NULL;
     76e:	10 92 36 02 	sts	0x0236, r1	; 0x800236 <nwkDataReqQueue+0x1>
     772:	10 92 35 02 	sts	0x0235, r1	; 0x800235 <nwkDataReqQueue>
}
     776:	00 00       	nop
     778:	df 91       	pop	r29
     77a:	cf 91       	pop	r28
     77c:	08 95       	ret

0000077e <NWK_DataReq>:
/*************************************************************************//**
*  @brief Adds request @a req to the queue of outgoing requests
*  @param[in] req Pointer to the request parameters
*****************************************************************************/
void NWK_DataReq(NWK_DataReq_t *req)
{
     77e:	cf 93       	push	r28
     780:	df 93       	push	r29
     782:	00 d0       	rcall	.+0      	; 0x784 <NWK_DataReq+0x6>
     784:	cd b7       	in	r28, 0x3d	; 61
     786:	de b7       	in	r29, 0x3e	; 62
     788:	9a 83       	std	Y+2, r25	; 0x02
     78a:	89 83       	std	Y+1, r24	; 0x01
	req->state = NWK_DATA_REQ_STATE_INITIAL;
     78c:	89 81       	ldd	r24, Y+1	; 0x01
     78e:	9a 81       	ldd	r25, Y+2	; 0x02
     790:	fc 01       	movw	r30, r24
     792:	14 82       	std	Z+4, r1	; 0x04
	req->status = NWK_SUCCESS_STATUS;
     794:	89 81       	ldd	r24, Y+1	; 0x01
     796:	9a 81       	ldd	r25, Y+2	; 0x02
     798:	fc 01       	movw	r30, r24
     79a:	10 8a       	std	Z+16, r1	; 0x10
	req->frame = NULL;
     79c:	89 81       	ldd	r24, Y+1	; 0x01
     79e:	9a 81       	ldd	r25, Y+2	; 0x02
     7a0:	fc 01       	movw	r30, r24
     7a2:	13 82       	std	Z+3, r1	; 0x03
     7a4:	12 82       	std	Z+2, r1	; 0x02

	nwkIb.lock++;
     7a6:	80 91 b0 10 	lds	r24, 0x10B0	; 0x8010b0 <nwkIb+0x26>
     7aa:	90 91 b1 10 	lds	r25, 0x10B1	; 0x8010b1 <nwkIb+0x27>
     7ae:	01 96       	adiw	r24, 0x01	; 1
     7b0:	90 93 b1 10 	sts	0x10B1, r25	; 0x8010b1 <nwkIb+0x27>
     7b4:	80 93 b0 10 	sts	0x10B0, r24	; 0x8010b0 <nwkIb+0x26>

	if (NULL == nwkDataReqQueue) {
     7b8:	80 91 35 02 	lds	r24, 0x0235	; 0x800235 <nwkDataReqQueue>
     7bc:	90 91 36 02 	lds	r25, 0x0236	; 0x800236 <nwkDataReqQueue+0x1>
     7c0:	89 2b       	or	r24, r25
     7c2:	61 f4       	brne	.+24     	; 0x7dc <NWK_DataReq+0x5e>
		req->next = NULL;
     7c4:	89 81       	ldd	r24, Y+1	; 0x01
     7c6:	9a 81       	ldd	r25, Y+2	; 0x02
     7c8:	fc 01       	movw	r30, r24
     7ca:	11 82       	std	Z+1, r1	; 0x01
     7cc:	10 82       	st	Z, r1
		nwkDataReqQueue = req;
     7ce:	89 81       	ldd	r24, Y+1	; 0x01
     7d0:	9a 81       	ldd	r25, Y+2	; 0x02
     7d2:	90 93 36 02 	sts	0x0236, r25	; 0x800236 <nwkDataReqQueue+0x1>
     7d6:	80 93 35 02 	sts	0x0235, r24	; 0x800235 <nwkDataReqQueue>
	} else {
		req->next = nwkDataReqQueue;
		nwkDataReqQueue = req;
	}
}
     7da:	0f c0       	rjmp	.+30     	; 0x7fa <NWK_DataReq+0x7c>

	if (NULL == nwkDataReqQueue) {
		req->next = NULL;
		nwkDataReqQueue = req;
	} else {
		req->next = nwkDataReqQueue;
     7dc:	20 91 35 02 	lds	r18, 0x0235	; 0x800235 <nwkDataReqQueue>
     7e0:	30 91 36 02 	lds	r19, 0x0236	; 0x800236 <nwkDataReqQueue+0x1>
     7e4:	89 81       	ldd	r24, Y+1	; 0x01
     7e6:	9a 81       	ldd	r25, Y+2	; 0x02
     7e8:	fc 01       	movw	r30, r24
     7ea:	31 83       	std	Z+1, r19	; 0x01
     7ec:	20 83       	st	Z, r18
		nwkDataReqQueue = req;
     7ee:	89 81       	ldd	r24, Y+1	; 0x01
     7f0:	9a 81       	ldd	r25, Y+2	; 0x02
     7f2:	90 93 36 02 	sts	0x0236, r25	; 0x800236 <nwkDataReqQueue+0x1>
     7f6:	80 93 35 02 	sts	0x0235, r24	; 0x800235 <nwkDataReqQueue>
	}
}
     7fa:	00 00       	nop
     7fc:	0f 90       	pop	r0
     7fe:	0f 90       	pop	r0
     800:	df 91       	pop	r29
     802:	cf 91       	pop	r28
     804:	08 95       	ret

00000806 <nwkDataReqSendFrame>:
*  @brief Prepares and send outgoing frame based on the request @a req
* parameters
*  @param[in] req Pointer to the request parameters
*****************************************************************************/
static void nwkDataReqSendFrame(NWK_DataReq_t *req)
{
     806:	cf 93       	push	r28
     808:	df 93       	push	r29
     80a:	00 d0       	rcall	.+0      	; 0x80c <nwkDataReqSendFrame+0x6>
     80c:	00 d0       	rcall	.+0      	; 0x80e <nwkDataReqSendFrame+0x8>
     80e:	00 d0       	rcall	.+0      	; 0x810 <nwkDataReqSendFrame+0xa>
     810:	cd b7       	in	r28, 0x3d	; 61
     812:	de b7       	in	r29, 0x3e	; 62
     814:	9e 83       	std	Y+6, r25	; 0x06
     816:	8d 83       	std	Y+5, r24	; 0x05
	NwkFrame_t *frame;
	if(req->options < NWK_OPT_LLDN_BEACON ) // use original frame allocation
     818:	8d 81       	ldd	r24, Y+5	; 0x05
     81a:	9e 81       	ldd	r25, Y+6	; 0x06
     81c:	fc 01       	movw	r30, r24
     81e:	81 85       	ldd	r24, Z+9	; 0x09
     820:	92 85       	ldd	r25, Z+10	; 0x0a
     822:	80 34       	cpi	r24, 0x40	; 64
     824:	91 05       	cpc	r25, r1
     826:	98 f4       	brcc	.+38     	; 0x84e <nwkDataReqSendFrame+0x48>
	{																			 	// this is not optimezed for
		if(NULL == (frame = nwkFrameAlloc()))	// NWK_OPT_BEACON
     828:	0e 94 78 07 	call	0xef0	; 0xef0 <nwkFrameAlloc>
     82c:	9a 83       	std	Y+2, r25	; 0x02
     82e:	89 83       	std	Y+1, r24	; 0x01
     830:	89 81       	ldd	r24, Y+1	; 0x01
     832:	9a 81       	ldd	r25, Y+2	; 0x02
     834:	89 2b       	or	r24, r25
     836:	61 f5       	brne	.+88     	; 0x890 <nwkDataReqSendFrame+0x8a>
		{
			req->state = NWK_DATA_REQ_STATE_CONFIRM;
     838:	8d 81       	ldd	r24, Y+5	; 0x05
     83a:	9e 81       	ldd	r25, Y+6	; 0x06
     83c:	22 e0       	ldi	r18, 0x02	; 2
     83e:	fc 01       	movw	r30, r24
     840:	24 83       	std	Z+4, r18	; 0x04
			req->status = NWK_OUT_OF_MEMORY_STATUS;
     842:	8d 81       	ldd	r24, Y+5	; 0x05
     844:	9e 81       	ldd	r25, Y+6	; 0x06
     846:	22 e0       	ldi	r18, 0x02	; 2
     848:	fc 01       	movw	r30, r24
     84a:	20 8b       	std	Z+16, r18	; 0x10
			return;
     84c:	46 c2       	rjmp	.+1164   	; 0xcda <nwkDataReqSendFrame+0x4d4>
		}
	}	else {		// use LLDN allocation, alocattes depending on header size
		if( NULL == (frame = ((req->options & NWK_OPT_LLDN_BEACON) ? nwkFrameAlloc_LLDN(true) : nwkFrameAlloc_LLDN(false))))
     84e:	8d 81       	ldd	r24, Y+5	; 0x05
     850:	9e 81       	ldd	r25, Y+6	; 0x06
     852:	fc 01       	movw	r30, r24
     854:	81 85       	ldd	r24, Z+9	; 0x09
     856:	92 85       	ldd	r25, Z+10	; 0x0a
     858:	80 74       	andi	r24, 0x40	; 64
     85a:	99 27       	eor	r25, r25
     85c:	89 2b       	or	r24, r25
     85e:	21 f0       	breq	.+8      	; 0x868 <nwkDataReqSendFrame+0x62>
     860:	81 e0       	ldi	r24, 0x01	; 1
     862:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <nwkFrameAlloc_LLDN>
     866:	03 c0       	rjmp	.+6      	; 0x86e <nwkDataReqSendFrame+0x68>
     868:	80 e0       	ldi	r24, 0x00	; 0
     86a:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <nwkFrameAlloc_LLDN>
     86e:	9a 83       	std	Y+2, r25	; 0x02
     870:	89 83       	std	Y+1, r24	; 0x01
     872:	89 81       	ldd	r24, Y+1	; 0x01
     874:	9a 81       	ldd	r25, Y+2	; 0x02
     876:	89 2b       	or	r24, r25
     878:	59 f4       	brne	.+22     	; 0x890 <nwkDataReqSendFrame+0x8a>
		{
			// if there isn't space avaible in frame buffer queue, requested message
			// can't be process
			req->state = NWK_DATA_REQ_STATE_CONFIRM;
     87a:	8d 81       	ldd	r24, Y+5	; 0x05
     87c:	9e 81       	ldd	r25, Y+6	; 0x06
     87e:	22 e0       	ldi	r18, 0x02	; 2
     880:	fc 01       	movw	r30, r24
     882:	24 83       	std	Z+4, r18	; 0x04
			req->status = NWK_OUT_OF_MEMORY_STATUS;
     884:	8d 81       	ldd	r24, Y+5	; 0x05
     886:	9e 81       	ldd	r25, Y+6	; 0x06
     888:	22 e0       	ldi	r18, 0x02	; 2
     88a:	fc 01       	movw	r30, r24
     88c:	20 8b       	std	Z+16, r18	; 0x10
			return;
     88e:	25 c2       	rjmp	.+1098   	; 0xcda <nwkDataReqSendFrame+0x4d4>
		}
	}

	if(req->options & NWK_OPT_LLDN_BEACON)
     890:	8d 81       	ldd	r24, Y+5	; 0x05
     892:	9e 81       	ldd	r25, Y+6	; 0x06
     894:	fc 01       	movw	r30, r24
     896:	81 85       	ldd	r24, Z+9	; 0x09
     898:	92 85       	ldd	r25, Z+10	; 0x0a
     89a:	80 74       	andi	r24, 0x40	; 64
     89c:	99 27       	eor	r25, r25
     89e:	89 2b       	or	r24, r25
     8a0:	09 f4       	brne	.+2      	; 0x8a4 <nwkDataReqSendFrame+0x9e>
     8a2:	9a c0       	rjmp	.+308    	; 0x9d8 <nwkDataReqSendFrame+0x1d2>
	{
		frame->tx.control = 0;
     8a4:	89 81       	ldd	r24, Y+1	; 0x01
     8a6:	9a 81       	ldd	r25, Y+2	; 0x02
     8a8:	8a 57       	subi	r24, 0x7A	; 122
     8aa:	9f 4f       	sbci	r25, 0xFF	; 255
     8ac:	fc 01       	movw	r30, r24
     8ae:	10 82       	st	Z, r1
		// Set Flag depending on current state of coordinator
		if (req->options & NWK_OPT_LLDN_BEACON_ONLINE)
     8b0:	8d 81       	ldd	r24, Y+5	; 0x05
     8b2:	9e 81       	ldd	r25, Y+6	; 0x06
     8b4:	fc 01       	movw	r30, r24
     8b6:	81 85       	ldd	r24, Z+9	; 0x09
     8b8:	92 85       	ldd	r25, Z+10	; 0x0a
     8ba:	80 78       	andi	r24, 0x80	; 128
     8bc:	99 27       	eor	r25, r25
     8be:	89 2b       	or	r24, r25
     8c0:	41 f0       	breq	.+16     	; 0x8d2 <nwkDataReqSendFrame+0xcc>
			frame->LLbeacon.Flags.txState = 0b000; // online mode
     8c2:	89 81       	ldd	r24, Y+1	; 0x01
     8c4:	9a 81       	ldd	r25, Y+2	; 0x02
     8c6:	fc 01       	movw	r30, r24
     8c8:	25 81       	ldd	r18, Z+5	; 0x05
     8ca:	28 7f       	andi	r18, 0xF8	; 248
     8cc:	fc 01       	movw	r30, r24
     8ce:	25 83       	std	Z+5, r18	; 0x05
     8d0:	34 c0       	rjmp	.+104    	; 0x93a <nwkDataReqSendFrame+0x134>
		else if (req->options & NWK_OPT_LLDN_BEACON_DISCOVERY)
     8d2:	8d 81       	ldd	r24, Y+5	; 0x05
     8d4:	9e 81       	ldd	r25, Y+6	; 0x06
     8d6:	fc 01       	movw	r30, r24
     8d8:	81 85       	ldd	r24, Z+9	; 0x09
     8da:	92 85       	ldd	r25, Z+10	; 0x0a
     8dc:	88 27       	eor	r24, r24
     8de:	91 70       	andi	r25, 0x01	; 1
     8e0:	89 2b       	or	r24, r25
     8e2:	49 f0       	breq	.+18     	; 0x8f6 <nwkDataReqSendFrame+0xf0>
			frame->LLbeacon.Flags.txState = 0b100; // discovery mode
     8e4:	89 81       	ldd	r24, Y+1	; 0x01
     8e6:	9a 81       	ldd	r25, Y+2	; 0x02
     8e8:	fc 01       	movw	r30, r24
     8ea:	25 81       	ldd	r18, Z+5	; 0x05
     8ec:	28 7f       	andi	r18, 0xF8	; 248
     8ee:	24 60       	ori	r18, 0x04	; 4
     8f0:	fc 01       	movw	r30, r24
     8f2:	25 83       	std	Z+5, r18	; 0x05
     8f4:	22 c0       	rjmp	.+68     	; 0x93a <nwkDataReqSendFrame+0x134>
		else if (req->options & NWK_OPT_LLDN_BEACON_CONFIG)
     8f6:	8d 81       	ldd	r24, Y+5	; 0x05
     8f8:	9e 81       	ldd	r25, Y+6	; 0x06
     8fa:	fc 01       	movw	r30, r24
     8fc:	81 85       	ldd	r24, Z+9	; 0x09
     8fe:	92 85       	ldd	r25, Z+10	; 0x0a
     900:	88 27       	eor	r24, r24
     902:	92 70       	andi	r25, 0x02	; 2
     904:	89 2b       	or	r24, r25
     906:	49 f0       	breq	.+18     	; 0x91a <nwkDataReqSendFrame+0x114>
			frame->LLbeacon.Flags.txState = 0b110; // configuration mode
     908:	89 81       	ldd	r24, Y+1	; 0x01
     90a:	9a 81       	ldd	r25, Y+2	; 0x02
     90c:	fc 01       	movw	r30, r24
     90e:	25 81       	ldd	r18, Z+5	; 0x05
     910:	28 7f       	andi	r18, 0xF8	; 248
     912:	26 60       	ori	r18, 0x06	; 6
     914:	fc 01       	movw	r30, r24
     916:	25 83       	std	Z+5, r18	; 0x05
     918:	10 c0       	rjmp	.+32     	; 0x93a <nwkDataReqSendFrame+0x134>
		else if (req->options & NWK_OPT_LLDN_BEACON_RESET)
     91a:	8d 81       	ldd	r24, Y+5	; 0x05
     91c:	9e 81       	ldd	r25, Y+6	; 0x06
     91e:	fc 01       	movw	r30, r24
     920:	81 85       	ldd	r24, Z+9	; 0x09
     922:	92 85       	ldd	r25, Z+10	; 0x0a
     924:	88 27       	eor	r24, r24
     926:	94 70       	andi	r25, 0x04	; 4
     928:	89 2b       	or	r24, r25
     92a:	39 f0       	breq	.+14     	; 0x93a <nwkDataReqSendFrame+0x134>
			frame->LLbeacon.Flags.txState = 0b111; // full reset mode
     92c:	89 81       	ldd	r24, Y+1	; 0x01
     92e:	9a 81       	ldd	r25, Y+2	; 0x02
     930:	fc 01       	movw	r30, r24
     932:	25 81       	ldd	r18, Z+5	; 0x05
     934:	27 60       	ori	r18, 0x07	; 7
     936:	fc 01       	movw	r30, r24
     938:	25 83       	std	Z+5, r18	; 0x05

		// set biderectional time slots: 0 - downlink 1 - uplink
		frame->LLbeacon.Flags.txDir 		= 0b0;
     93a:	89 81       	ldd	r24, Y+1	; 0x01
     93c:	9a 81       	ldd	r25, Y+2	; 0x02
     93e:	fc 01       	movw	r30, r24
     940:	25 81       	ldd	r18, Z+5	; 0x05
     942:	27 7f       	andi	r18, 0xF7	; 247
     944:	fc 01       	movw	r30, r24
     946:	25 83       	std	Z+5, r18	; 0x05
		frame->LLbeacon.Flags.reserved 	= 0b0;
     948:	89 81       	ldd	r24, Y+1	; 0x01
     94a:	9a 81       	ldd	r25, Y+2	; 0x02
     94c:	fc 01       	movw	r30, r24
     94e:	25 81       	ldd	r18, Z+5	; 0x05
     950:	2f 7e       	andi	r18, 0xEF	; 239
     952:	fc 01       	movw	r30, r24
     954:	25 83       	std	Z+5, r18	; 0x05
		// set number of managment timeslots
		frame->LLbeacon.Flags.numMgmtTimeslots = NWK_NUMBER_OF_MGMT_TIMESLOTS;
     956:	89 81       	ldd	r24, Y+1	; 0x01
     958:	9a 81       	ldd	r25, Y+2	; 0x02
     95a:	fc 01       	movw	r30, r24
     95c:	25 81       	ldd	r18, Z+5	; 0x05
     95e:	20 6e       	ori	r18, 0xE0	; 224
     960:	fc 01       	movw	r30, r24
     962:	25 83       	std	Z+5, r18	; 0x05

		if (req->options & 	NWK_OPT_LLDN_BEACON_SECOND)
     964:	8d 81       	ldd	r24, Y+5	; 0x05
     966:	9e 81       	ldd	r25, Y+6	; 0x06
     968:	fc 01       	movw	r30, r24
     96a:	81 85       	ldd	r24, Z+9	; 0x09
     96c:	92 85       	ldd	r25, Z+10	; 0x0a
     96e:	88 27       	eor	r24, r24
     970:	98 70       	andi	r25, 0x08	; 8
     972:	89 2b       	or	r24, r25
     974:	31 f0       	breq	.+12     	; 0x982 <nwkDataReqSendFrame+0x17c>
		 frame->LLbeacon.confSeqNumber = 0x01;
     976:	89 81       	ldd	r24, Y+1	; 0x01
     978:	9a 81       	ldd	r25, Y+2	; 0x02
     97a:	21 e0       	ldi	r18, 0x01	; 1
     97c:	fc 01       	movw	r30, r24
     97e:	27 83       	std	Z+7, r18	; 0x07
     980:	13 c0       	rjmp	.+38     	; 0x9a8 <nwkDataReqSendFrame+0x1a2>
		else if (req->options & 	NWK_OPT_LLDN_BEACON_THIRD)
     982:	8d 81       	ldd	r24, Y+5	; 0x05
     984:	9e 81       	ldd	r25, Y+6	; 0x06
     986:	fc 01       	movw	r30, r24
     988:	81 85       	ldd	r24, Z+9	; 0x09
     98a:	92 85       	ldd	r25, Z+10	; 0x0a
     98c:	88 27       	eor	r24, r24
     98e:	90 71       	andi	r25, 0x10	; 16
     990:	89 2b       	or	r24, r25
     992:	31 f0       	breq	.+12     	; 0x9a0 <nwkDataReqSendFrame+0x19a>
			frame->LLbeacon.confSeqNumber = 0x02;
     994:	89 81       	ldd	r24, Y+1	; 0x01
     996:	9a 81       	ldd	r25, Y+2	; 0x02
     998:	22 e0       	ldi	r18, 0x02	; 2
     99a:	fc 01       	movw	r30, r24
     99c:	27 83       	std	Z+7, r18	; 0x07
     99e:	04 c0       	rjmp	.+8      	; 0x9a8 <nwkDataReqSendFrame+0x1a2>
		else frame->LLbeacon.confSeqNumber = 0x00;
     9a0:	89 81       	ldd	r24, Y+1	; 0x01
     9a2:	9a 81       	ldd	r25, Y+2	; 0x02
     9a4:	fc 01       	movw	r30, r24
     9a6:	17 82       	std	Z+7, r1	; 0x07

		frame->LLbeacon.TimeSlotSize 	= 0xff; // calculation needs to be implemented, see timers first
     9a8:	89 81       	ldd	r24, Y+1	; 0x01
     9aa:	9a 81       	ldd	r25, Y+2	; 0x02
     9ac:	2f ef       	ldi	r18, 0xFF	; 255
     9ae:	fc 01       	movw	r30, r24
     9b0:	20 87       	std	Z+8, r18	; 0x08

		uint8_t* shortAddr = (uint8_t* )nwkIb.addr;
     9b2:	80 91 8a 10 	lds	r24, 0x108A	; 0x80108a <nwkIb>
     9b6:	90 91 8b 10 	lds	r25, 0x108B	; 0x80108b <nwkIb+0x1>
     9ba:	9c 83       	std	Y+4, r25	; 0x04
     9bc:	8b 83       	std	Y+3, r24	; 0x03
		frame->LLbeacon.PanId = shortAddr[0];
     9be:	8b 81       	ldd	r24, Y+3	; 0x03
     9c0:	9c 81       	ldd	r25, Y+4	; 0x04
     9c2:	fc 01       	movw	r30, r24
     9c4:	20 81       	ld	r18, Z
     9c6:	89 81       	ldd	r24, Y+1	; 0x01
     9c8:	9a 81       	ldd	r25, Y+2	; 0x02
     9ca:	fc 01       	movw	r30, r24
     9cc:	26 83       	std	Z+6, r18	; 0x06
		// set Frame Control, Security Header and Sequence Nuber fields
		nwkTxBeaconFrameLLDN(frame);
     9ce:	89 81       	ldd	r24, Y+1	; 0x01
     9d0:	9a 81       	ldd	r25, Y+2	; 0x02
     9d2:	0e 94 fe 0f 	call	0x1ffc	; 0x1ffc <nwkTxBeaconFrameLLDN>
     9d6:	6c c1       	rjmp	.+728    	; 0xcb0 <nwkDataReqSendFrame+0x4aa>
	}
	else if(req->options & NWK_OPT_MAC_COMMAND ||
     9d8:	8d 81       	ldd	r24, Y+5	; 0x05
     9da:	9e 81       	ldd	r25, Y+6	; 0x06
     9dc:	fc 01       	movw	r30, r24
     9de:	81 85       	ldd	r24, Z+9	; 0x09
     9e0:	92 85       	ldd	r25, Z+10	; 0x0a
     9e2:	99 23       	and	r25, r25
     9e4:	94 f0       	brlt	.+36     	; 0xa0a <nwkDataReqSendFrame+0x204>
					req->options & NWK_OPT_LLDN_DATA 	||
     9e6:	8d 81       	ldd	r24, Y+5	; 0x05
     9e8:	9e 81       	ldd	r25, Y+6	; 0x06
     9ea:	fc 01       	movw	r30, r24
     9ec:	81 85       	ldd	r24, Z+9	; 0x09
     9ee:	92 85       	ldd	r25, Z+10	; 0x0a
     9f0:	88 27       	eor	r24, r24
     9f2:	90 72       	andi	r25, 0x20	; 32
		uint8_t* shortAddr = (uint8_t* )nwkIb.addr;
		frame->LLbeacon.PanId = shortAddr[0];
		// set Frame Control, Security Header and Sequence Nuber fields
		nwkTxBeaconFrameLLDN(frame);
	}
	else if(req->options & NWK_OPT_MAC_COMMAND ||
     9f4:	89 2b       	or	r24, r25
     9f6:	49 f4       	brne	.+18     	; 0xa0a <nwkDataReqSendFrame+0x204>
					req->options & NWK_OPT_LLDN_DATA 	||
					req->options & NWK_OPT_LLDN_ACK )
     9f8:	8d 81       	ldd	r24, Y+5	; 0x05
     9fa:	9e 81       	ldd	r25, Y+6	; 0x06
     9fc:	fc 01       	movw	r30, r24
     9fe:	81 85       	ldd	r24, Z+9	; 0x09
     a00:	92 85       	ldd	r25, Z+10	; 0x0a
     a02:	88 27       	eor	r24, r24
     a04:	90 74       	andi	r25, 0x40	; 64
		frame->LLbeacon.PanId = shortAddr[0];
		// set Frame Control, Security Header and Sequence Nuber fields
		nwkTxBeaconFrameLLDN(frame);
	}
	else if(req->options & NWK_OPT_MAC_COMMAND ||
					req->options & NWK_OPT_LLDN_DATA 	||
     a06:	89 2b       	or	r24, r25
     a08:	99 f1       	breq	.+102    	; 0xa70 <nwkDataReqSendFrame+0x26a>
					req->options & NWK_OPT_LLDN_ACK )
	{
		frame->tx.control = 0;
     a0a:	89 81       	ldd	r24, Y+1	; 0x01
     a0c:	9a 81       	ldd	r25, Y+2	; 0x02
     a0e:	8a 57       	subi	r24, 0x7A	; 122
     a10:	9f 4f       	sbci	r25, 0xFF	; 255
     a12:	fc 01       	movw	r30, r24
     a14:	10 82       	st	Z, r1
		memcpy(frame->payload, req->data, req->size);
     a16:	8d 81       	ldd	r24, Y+5	; 0x05
     a18:	9e 81       	ldd	r25, Y+6	; 0x06
     a1a:	fc 01       	movw	r30, r24
     a1c:	85 85       	ldd	r24, Z+13	; 0x0d
     a1e:	48 2f       	mov	r20, r24
     a20:	50 e0       	ldi	r21, 0x00	; 0
     a22:	8d 81       	ldd	r24, Y+5	; 0x05
     a24:	9e 81       	ldd	r25, Y+6	; 0x06
     a26:	fc 01       	movw	r30, r24
     a28:	23 85       	ldd	r18, Z+11	; 0x0b
     a2a:	34 85       	ldd	r19, Z+12	; 0x0c
     a2c:	89 81       	ldd	r24, Y+1	; 0x01
     a2e:	9a 81       	ldd	r25, Y+2	; 0x02
     a30:	8f 57       	subi	r24, 0x7F	; 127
     a32:	9f 4f       	sbci	r25, 0xFF	; 255
     a34:	fc 01       	movw	r30, r24
     a36:	80 81       	ld	r24, Z
     a38:	91 81       	ldd	r25, Z+1	; 0x01
     a3a:	b9 01       	movw	r22, r18
     a3c:	0e 94 80 45 	call	0x8b00	; 0x8b00 <memcpy>
		frame->size += req->size;
     a40:	89 81       	ldd	r24, Y+1	; 0x01
     a42:	9a 81       	ldd	r25, Y+2	; 0x02
     a44:	fc 01       	movw	r30, r24
     a46:	21 81       	ldd	r18, Z+1	; 0x01
     a48:	8d 81       	ldd	r24, Y+5	; 0x05
     a4a:	9e 81       	ldd	r25, Y+6	; 0x06
     a4c:	fc 01       	movw	r30, r24
     a4e:	85 85       	ldd	r24, Z+13	; 0x0d
     a50:	28 0f       	add	r18, r24
     a52:	89 81       	ldd	r24, Y+1	; 0x01
     a54:	9a 81       	ldd	r25, Y+2	; 0x02
     a56:	fc 01       	movw	r30, r24
     a58:	21 83       	std	Z+1, r18	; 0x01
		nwkTxMacCommandFrameLLDN(frame, req->options);
     a5a:	8d 81       	ldd	r24, Y+5	; 0x05
     a5c:	9e 81       	ldd	r25, Y+6	; 0x06
     a5e:	fc 01       	movw	r30, r24
     a60:	21 85       	ldd	r18, Z+9	; 0x09
     a62:	32 85       	ldd	r19, Z+10	; 0x0a
     a64:	89 81       	ldd	r24, Y+1	; 0x01
     a66:	9a 81       	ldd	r25, Y+2	; 0x02
     a68:	b9 01       	movw	r22, r18
     a6a:	0e 94 51 10 	call	0x20a2	; 0x20a2 <nwkTxMacCommandFrameLLDN>
     a6e:	20 c1       	rjmp	.+576    	; 0xcb0 <nwkDataReqSendFrame+0x4aa>
	}
	else if(req->options & NWK_OPT_BEACON )
     a70:	8d 81       	ldd	r24, Y+5	; 0x05
     a72:	9e 81       	ldd	r25, Y+6	; 0x06
     a74:	fc 01       	movw	r30, r24
     a76:	81 85       	ldd	r24, Z+9	; 0x09
     a78:	92 85       	ldd	r25, Z+10	; 0x0a
     a7a:	80 72       	andi	r24, 0x20	; 32
     a7c:	99 27       	eor	r25, r25
     a7e:	89 2b       	or	r24, r25
     a80:	09 f4       	brne	.+2      	; 0xa84 <nwkDataReqSendFrame+0x27e>
     a82:	62 c0       	rjmp	.+196    	; 0xb48 <nwkDataReqSendFrame+0x342>
	{
		frame->tx.control = 0;
     a84:	89 81       	ldd	r24, Y+1	; 0x01
     a86:	9a 81       	ldd	r25, Y+2	; 0x02
     a88:	8a 57       	subi	r24, 0x7A	; 122
     a8a:	9f 4f       	sbci	r25, 0xFF	; 255
     a8c:	fc 01       	movw	r30, r24
     a8e:	10 82       	st	Z, r1

		frame->beacon.macSFS.beaconOrder = BI_COEF;
     a90:	89 81       	ldd	r24, Y+1	; 0x01
     a92:	9a 81       	ldd	r25, Y+2	; 0x02
     a94:	fc 01       	movw	r30, r24
     a96:	21 85       	ldd	r18, Z+9	; 0x09
     a98:	20 7f       	andi	r18, 0xF0	; 240
     a9a:	28 60       	ori	r18, 0x08	; 8
     a9c:	fc 01       	movw	r30, r24
     a9e:	21 87       	std	Z+9, r18	; 0x09
		frame->beacon.macSFS.superframeOrder = SD_COEF;
     aa0:	89 81       	ldd	r24, Y+1	; 0x01
     aa2:	9a 81       	ldd	r25, Y+2	; 0x02
     aa4:	fc 01       	movw	r30, r24
     aa6:	21 85       	ldd	r18, Z+9	; 0x09
     aa8:	2f 70       	andi	r18, 0x0F	; 15
     aaa:	20 66       	ori	r18, 0x60	; 96
     aac:	fc 01       	movw	r30, r24
     aae:	21 87       	std	Z+9, r18	; 0x09
		frame->beacon.macSFS.finalCAPslot = FINAL_CAP_SLOT;
     ab0:	89 81       	ldd	r24, Y+1	; 0x01
     ab2:	9a 81       	ldd	r25, Y+2	; 0x02
     ab4:	fc 01       	movw	r30, r24
     ab6:	22 85       	ldd	r18, Z+10	; 0x0a
     ab8:	20 7f       	andi	r18, 0xF0	; 240
     aba:	21 60       	ori	r18, 0x01	; 1
     abc:	fc 01       	movw	r30, r24
     abe:	22 87       	std	Z+10, r18	; 0x0a
		frame->beacon.macSFS.BatteryLifeExtension = TDMA_BATTERY_EXTENSION;
     ac0:	89 81       	ldd	r24, Y+1	; 0x01
     ac2:	9a 81       	ldd	r25, Y+2	; 0x02
     ac4:	fc 01       	movw	r30, r24
     ac6:	22 85       	ldd	r18, Z+10	; 0x0a
     ac8:	20 61       	ori	r18, 0x10	; 16
     aca:	fc 01       	movw	r30, r24
     acc:	22 87       	std	Z+10, r18	; 0x0a
		frame->beacon.macSFS.PANCoordinator = 1;
     ace:	89 81       	ldd	r24, Y+1	; 0x01
     ad0:	9a 81       	ldd	r25, Y+2	; 0x02
     ad2:	fc 01       	movw	r30, r24
     ad4:	22 85       	ldd	r18, Z+10	; 0x0a
     ad6:	20 64       	ori	r18, 0x40	; 64
     ad8:	fc 01       	movw	r30, r24
     ada:	22 87       	std	Z+10, r18	; 0x0a
		frame->beacon.macSFS.AssociationPermit = 0;
     adc:	89 81       	ldd	r24, Y+1	; 0x01
     ade:	9a 81       	ldd	r25, Y+2	; 0x02
     ae0:	fc 01       	movw	r30, r24
     ae2:	22 85       	ldd	r18, Z+10	; 0x0a
     ae4:	2f 77       	andi	r18, 0x7F	; 127
     ae6:	fc 01       	movw	r30, r24
     ae8:	22 87       	std	Z+10, r18	; 0x0a

		frame->beacon.macGTS = 0;
     aea:	89 81       	ldd	r24, Y+1	; 0x01
     aec:	9a 81       	ldd	r25, Y+2	; 0x02
     aee:	fc 01       	movw	r30, r24
     af0:	13 86       	std	Z+11, r1	; 0x0b
		frame->beacon.macPending = 0;
     af2:	89 81       	ldd	r24, Y+1	; 0x01
     af4:	9a 81       	ldd	r25, Y+2	; 0x02
     af6:	fc 01       	movw	r30, r24
     af8:	14 86       	std	Z+12, r1	; 0x0c

		memcpy(frame->payload, req->data, req->size);
     afa:	8d 81       	ldd	r24, Y+5	; 0x05
     afc:	9e 81       	ldd	r25, Y+6	; 0x06
     afe:	fc 01       	movw	r30, r24
     b00:	85 85       	ldd	r24, Z+13	; 0x0d
     b02:	48 2f       	mov	r20, r24
     b04:	50 e0       	ldi	r21, 0x00	; 0
     b06:	8d 81       	ldd	r24, Y+5	; 0x05
     b08:	9e 81       	ldd	r25, Y+6	; 0x06
     b0a:	fc 01       	movw	r30, r24
     b0c:	23 85       	ldd	r18, Z+11	; 0x0b
     b0e:	34 85       	ldd	r19, Z+12	; 0x0c
     b10:	89 81       	ldd	r24, Y+1	; 0x01
     b12:	9a 81       	ldd	r25, Y+2	; 0x02
     b14:	8f 57       	subi	r24, 0x7F	; 127
     b16:	9f 4f       	sbci	r25, 0xFF	; 255
     b18:	fc 01       	movw	r30, r24
     b1a:	80 81       	ld	r24, Z
     b1c:	91 81       	ldd	r25, Z+1	; 0x01
     b1e:	b9 01       	movw	r22, r18
     b20:	0e 94 80 45 	call	0x8b00	; 0x8b00 <memcpy>
		frame->size += req->size;
     b24:	89 81       	ldd	r24, Y+1	; 0x01
     b26:	9a 81       	ldd	r25, Y+2	; 0x02
     b28:	fc 01       	movw	r30, r24
     b2a:	21 81       	ldd	r18, Z+1	; 0x01
     b2c:	8d 81       	ldd	r24, Y+5	; 0x05
     b2e:	9e 81       	ldd	r25, Y+6	; 0x06
     b30:	fc 01       	movw	r30, r24
     b32:	85 85       	ldd	r24, Z+13	; 0x0d
     b34:	28 0f       	add	r18, r24
     b36:	89 81       	ldd	r24, Y+1	; 0x01
     b38:	9a 81       	ldd	r25, Y+2	; 0x02
     b3a:	fc 01       	movw	r30, r24
     b3c:	21 83       	std	Z+1, r18	; 0x01

		nwkTxBeaconFrame(frame);
     b3e:	89 81       	ldd	r24, Y+1	; 0x01
     b40:	9a 81       	ldd	r25, Y+2	; 0x02
     b42:	0e 94 b3 0f 	call	0x1f66	; 0x1f66 <nwkTxBeaconFrame>
     b46:	b4 c0       	rjmp	.+360    	; 0xcb0 <nwkDataReqSendFrame+0x4aa>
	}
	else
	{
		frame->tx.control = (req->options & NWK_OPT_BROADCAST_PAN_ID) ? NWK_TX_CONTROL_BROADCAST_PAN_ID : 0;
     b48:	8d 81       	ldd	r24, Y+5	; 0x05
     b4a:	9e 81       	ldd	r25, Y+6	; 0x06
     b4c:	fc 01       	movw	r30, r24
     b4e:	81 85       	ldd	r24, Z+9	; 0x09
     b50:	92 85       	ldd	r25, Z+10	; 0x0a
     b52:	84 70       	andi	r24, 0x04	; 4
     b54:	99 27       	eor	r25, r25
     b56:	21 e0       	ldi	r18, 0x01	; 1
     b58:	89 2b       	or	r24, r25
     b5a:	09 f4       	brne	.+2      	; 0xb5e <nwkDataReqSendFrame+0x358>
     b5c:	20 e0       	ldi	r18, 0x00	; 0
     b5e:	89 81       	ldd	r24, Y+1	; 0x01
     b60:	9a 81       	ldd	r25, Y+2	; 0x02
     b62:	8a 57       	subi	r24, 0x7A	; 122
     b64:	9f 4f       	sbci	r25, 0xFF	; 255
     b66:	fc 01       	movw	r30, r24
     b68:	20 83       	st	Z, r18

		frame->header.nwkFcf.ackRequest = (req->options & NWK_OPT_ACK_REQUEST) ? 1 : 0;
     b6a:	8d 81       	ldd	r24, Y+5	; 0x05
     b6c:	9e 81       	ldd	r25, Y+6	; 0x06
     b6e:	fc 01       	movw	r30, r24
     b70:	81 85       	ldd	r24, Z+9	; 0x09
     b72:	92 85       	ldd	r25, Z+10	; 0x0a
     b74:	81 70       	andi	r24, 0x01	; 1
     b76:	99 27       	eor	r25, r25
     b78:	21 e0       	ldi	r18, 0x01	; 1
     b7a:	89 2b       	or	r24, r25
     b7c:	09 f4       	brne	.+2      	; 0xb80 <nwkDataReqSendFrame+0x37a>
     b7e:	20 e0       	ldi	r18, 0x00	; 0
     b80:	89 81       	ldd	r24, Y+1	; 0x01
     b82:	9a 81       	ldd	r25, Y+2	; 0x02
     b84:	21 70       	andi	r18, 0x01	; 1
     b86:	fc 01       	movw	r30, r24
     b88:	33 85       	ldd	r19, Z+11	; 0x0b
     b8a:	3e 7f       	andi	r19, 0xFE	; 254
     b8c:	23 2b       	or	r18, r19
     b8e:	fc 01       	movw	r30, r24
     b90:	23 87       	std	Z+11, r18	; 0x0b
		frame->header.nwkFcf.linkLocal = (req->options & NWK_OPT_LINK_LOCAL) ? 1 : 0;
     b92:	8d 81       	ldd	r24, Y+5	; 0x05
     b94:	9e 81       	ldd	r25, Y+6	; 0x06
     b96:	fc 01       	movw	r30, r24
     b98:	81 85       	ldd	r24, Z+9	; 0x09
     b9a:	92 85       	ldd	r25, Z+10	; 0x0a
     b9c:	88 70       	andi	r24, 0x08	; 8
     b9e:	99 27       	eor	r25, r25
     ba0:	21 e0       	ldi	r18, 0x01	; 1
     ba2:	89 2b       	or	r24, r25
     ba4:	09 f4       	brne	.+2      	; 0xba8 <nwkDataReqSendFrame+0x3a2>
     ba6:	20 e0       	ldi	r18, 0x00	; 0
     ba8:	89 81       	ldd	r24, Y+1	; 0x01
     baa:	9a 81       	ldd	r25, Y+2	; 0x02
     bac:	21 70       	andi	r18, 0x01	; 1
     bae:	22 0f       	add	r18, r18
     bb0:	22 0f       	add	r18, r18
     bb2:	fc 01       	movw	r30, r24
     bb4:	33 85       	ldd	r19, Z+11	; 0x0b
     bb6:	3b 7f       	andi	r19, 0xFB	; 251
     bb8:	23 2b       	or	r18, r19
     bba:	fc 01       	movw	r30, r24
     bbc:	23 87       	std	Z+11, r18	; 0x0b
		frame->header.nwkFcf.beacon = (req->options & NWK_OPT_BEACON) ? 1 : 0;
     bbe:	8d 81       	ldd	r24, Y+5	; 0x05
     bc0:	9e 81       	ldd	r25, Y+6	; 0x06
     bc2:	fc 01       	movw	r30, r24
     bc4:	81 85       	ldd	r24, Z+9	; 0x09
     bc6:	92 85       	ldd	r25, Z+10	; 0x0a
     bc8:	80 72       	andi	r24, 0x20	; 32
     bca:	99 27       	eor	r25, r25
     bcc:	21 e0       	ldi	r18, 0x01	; 1
     bce:	89 2b       	or	r24, r25
     bd0:	09 f4       	brne	.+2      	; 0xbd4 <nwkDataReqSendFrame+0x3ce>
     bd2:	20 e0       	ldi	r18, 0x00	; 0
     bd4:	89 81       	ldd	r24, Y+1	; 0x01
     bd6:	9a 81       	ldd	r25, Y+2	; 0x02
     bd8:	21 70       	andi	r18, 0x01	; 1
     bda:	22 95       	swap	r18
     bdc:	20 7f       	andi	r18, 0xF0	; 240
     bde:	fc 01       	movw	r30, r24
     be0:	33 85       	ldd	r19, Z+11	; 0x0b
     be2:	3f 7e       	andi	r19, 0xEF	; 239
     be4:	23 2b       	or	r18, r19
     be6:	fc 01       	movw	r30, r24
     be8:	23 87       	std	Z+11, r18	; 0x0b
			frame->payload += sizeof(NwkFrameMulticastHeader_t);
			frame->size += sizeof(NwkFrameMulticastHeader_t);
		}
#endif

		frame->header.nwkSeq = ++nwkIb.nwkSeqNum;
     bea:	80 91 8e 10 	lds	r24, 0x108E	; 0x80108e <nwkIb+0x4>
     bee:	8f 5f       	subi	r24, 0xFF	; 255
     bf0:	80 93 8e 10 	sts	0x108E, r24	; 0x80108e <nwkIb+0x4>
     bf4:	20 91 8e 10 	lds	r18, 0x108E	; 0x80108e <nwkIb+0x4>
     bf8:	89 81       	ldd	r24, Y+1	; 0x01
     bfa:	9a 81       	ldd	r25, Y+2	; 0x02
     bfc:	fc 01       	movw	r30, r24
     bfe:	24 87       	std	Z+12, r18	; 0x0c
		frame->header.nwkSrcAddr = nwkIb.addr;
     c00:	20 91 8a 10 	lds	r18, 0x108A	; 0x80108a <nwkIb>
     c04:	30 91 8b 10 	lds	r19, 0x108B	; 0x80108b <nwkIb+0x1>
     c08:	89 81       	ldd	r24, Y+1	; 0x01
     c0a:	9a 81       	ldd	r25, Y+2	; 0x02
     c0c:	fc 01       	movw	r30, r24
     c0e:	36 87       	std	Z+14, r19	; 0x0e
     c10:	25 87       	std	Z+13, r18	; 0x0d
		frame->header.nwkDstAddr = req->dstAddr;
     c12:	8d 81       	ldd	r24, Y+5	; 0x05
     c14:	9e 81       	ldd	r25, Y+6	; 0x06
     c16:	fc 01       	movw	r30, r24
     c18:	25 81       	ldd	r18, Z+5	; 0x05
     c1a:	36 81       	ldd	r19, Z+6	; 0x06
     c1c:	89 81       	ldd	r24, Y+1	; 0x01
     c1e:	9a 81       	ldd	r25, Y+2	; 0x02
     c20:	fc 01       	movw	r30, r24
     c22:	30 8b       	std	Z+16, r19	; 0x10
     c24:	27 87       	std	Z+15, r18	; 0x0f
		frame->header.nwkSrcEndpoint = req->srcEndpoint;
     c26:	8d 81       	ldd	r24, Y+5	; 0x05
     c28:	9e 81       	ldd	r25, Y+6	; 0x06
     c2a:	fc 01       	movw	r30, r24
     c2c:	80 85       	ldd	r24, Z+8	; 0x08
     c2e:	28 2f       	mov	r18, r24
     c30:	2f 70       	andi	r18, 0x0F	; 15
     c32:	89 81       	ldd	r24, Y+1	; 0x01
     c34:	9a 81       	ldd	r25, Y+2	; 0x02
     c36:	2f 70       	andi	r18, 0x0F	; 15
     c38:	fc 01       	movw	r30, r24
     c3a:	31 89       	ldd	r19, Z+17	; 0x11
     c3c:	30 7f       	andi	r19, 0xF0	; 240
     c3e:	23 2b       	or	r18, r19
     c40:	fc 01       	movw	r30, r24
     c42:	21 8b       	std	Z+17, r18	; 0x11
		frame->header.nwkDstEndpoint = req->dstEndpoint;
     c44:	8d 81       	ldd	r24, Y+5	; 0x05
     c46:	9e 81       	ldd	r25, Y+6	; 0x06
     c48:	fc 01       	movw	r30, r24
     c4a:	87 81       	ldd	r24, Z+7	; 0x07
     c4c:	28 2f       	mov	r18, r24
     c4e:	2f 70       	andi	r18, 0x0F	; 15
     c50:	89 81       	ldd	r24, Y+1	; 0x01
     c52:	9a 81       	ldd	r25, Y+2	; 0x02
     c54:	22 95       	swap	r18
     c56:	20 7f       	andi	r18, 0xF0	; 240
     c58:	fc 01       	movw	r30, r24
     c5a:	31 89       	ldd	r19, Z+17	; 0x11
     c5c:	3f 70       	andi	r19, 0x0F	; 15
     c5e:	23 2b       	or	r18, r19
     c60:	fc 01       	movw	r30, r24
     c62:	21 8b       	std	Z+17, r18	; 0x11

		memcpy(frame->payload, req->data, req->size);
     c64:	8d 81       	ldd	r24, Y+5	; 0x05
     c66:	9e 81       	ldd	r25, Y+6	; 0x06
     c68:	fc 01       	movw	r30, r24
     c6a:	85 85       	ldd	r24, Z+13	; 0x0d
     c6c:	48 2f       	mov	r20, r24
     c6e:	50 e0       	ldi	r21, 0x00	; 0
     c70:	8d 81       	ldd	r24, Y+5	; 0x05
     c72:	9e 81       	ldd	r25, Y+6	; 0x06
     c74:	fc 01       	movw	r30, r24
     c76:	23 85       	ldd	r18, Z+11	; 0x0b
     c78:	34 85       	ldd	r19, Z+12	; 0x0c
     c7a:	89 81       	ldd	r24, Y+1	; 0x01
     c7c:	9a 81       	ldd	r25, Y+2	; 0x02
     c7e:	8f 57       	subi	r24, 0x7F	; 127
     c80:	9f 4f       	sbci	r25, 0xFF	; 255
     c82:	fc 01       	movw	r30, r24
     c84:	80 81       	ld	r24, Z
     c86:	91 81       	ldd	r25, Z+1	; 0x01
     c88:	b9 01       	movw	r22, r18
     c8a:	0e 94 80 45 	call	0x8b00	; 0x8b00 <memcpy>
		frame->size += req->size;
     c8e:	89 81       	ldd	r24, Y+1	; 0x01
     c90:	9a 81       	ldd	r25, Y+2	; 0x02
     c92:	fc 01       	movw	r30, r24
     c94:	21 81       	ldd	r18, Z+1	; 0x01
     c96:	8d 81       	ldd	r24, Y+5	; 0x05
     c98:	9e 81       	ldd	r25, Y+6	; 0x06
     c9a:	fc 01       	movw	r30, r24
     c9c:	85 85       	ldd	r24, Z+13	; 0x0d
     c9e:	28 0f       	add	r18, r24
     ca0:	89 81       	ldd	r24, Y+1	; 0x01
     ca2:	9a 81       	ldd	r25, Y+2	; 0x02
     ca4:	fc 01       	movw	r30, r24
     ca6:	21 83       	std	Z+1, r18	; 0x01

		nwkTxFrame(frame);
     ca8:	89 81       	ldd	r24, Y+1	; 0x01
     caa:	9a 81       	ldd	r25, Y+2	; 0x02
     cac:	0e 94 c5 10 	call	0x218a	; 0x218a <nwkTxFrame>
	}
	req->frame = frame;
     cb0:	8d 81       	ldd	r24, Y+5	; 0x05
     cb2:	9e 81       	ldd	r25, Y+6	; 0x06
     cb4:	29 81       	ldd	r18, Y+1	; 0x01
     cb6:	3a 81       	ldd	r19, Y+2	; 0x02
     cb8:	fc 01       	movw	r30, r24
     cba:	33 83       	std	Z+3, r19	; 0x03
     cbc:	22 83       	std	Z+2, r18	; 0x02
	req->state = NWK_DATA_REQ_STATE_WAIT_CONF;
     cbe:	8d 81       	ldd	r24, Y+5	; 0x05
     cc0:	9e 81       	ldd	r25, Y+6	; 0x06
     cc2:	21 e0       	ldi	r18, 0x01	; 1
     cc4:	fc 01       	movw	r30, r24
     cc6:	24 83       	std	Z+4, r18	; 0x04

	frame->tx.confirm = nwkDataReqTxConf;
     cc8:	89 81       	ldd	r24, Y+1	; 0x01
     cca:	9a 81       	ldd	r25, Y+2	; 0x02
     ccc:	89 57       	subi	r24, 0x79	; 121
     cce:	9f 4f       	sbci	r25, 0xFF	; 255
     cd0:	26 e7       	ldi	r18, 0x76	; 118
     cd2:	36 e0       	ldi	r19, 0x06	; 6
     cd4:	fc 01       	movw	r30, r24
     cd6:	31 83       	std	Z+1, r19	; 0x01
     cd8:	20 83       	st	Z, r18
}
     cda:	26 96       	adiw	r28, 0x06	; 6
     cdc:	0f b6       	in	r0, 0x3f	; 63
     cde:	f8 94       	cli
     ce0:	de bf       	out	0x3e, r29	; 62
     ce2:	0f be       	out	0x3f, r0	; 63
     ce4:	cd bf       	out	0x3d, r28	; 61
     ce6:	df 91       	pop	r29
     ce8:	cf 91       	pop	r28
     cea:	08 95       	ret

00000cec <nwkDataReqTxConf>:
/*************************************************************************//**
*  @brief Frame transmission confirmation handler
*  @param[in] frame Pointer to the sent frame
*****************************************************************************/
static void nwkDataReqTxConf(NwkFrame_t *frame)
{
     cec:	cf 93       	push	r28
     cee:	df 93       	push	r29
     cf0:	00 d0       	rcall	.+0      	; 0xcf2 <nwkDataReqTxConf+0x6>
     cf2:	00 d0       	rcall	.+0      	; 0xcf4 <nwkDataReqTxConf+0x8>
     cf4:	cd b7       	in	r28, 0x3d	; 61
     cf6:	de b7       	in	r29, 0x3e	; 62
     cf8:	9c 83       	std	Y+4, r25	; 0x04
     cfa:	8b 83       	std	Y+3, r24	; 0x03
	for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next) {
     cfc:	80 91 35 02 	lds	r24, 0x0235	; 0x800235 <nwkDataReqQueue>
     d00:	90 91 36 02 	lds	r25, 0x0236	; 0x800236 <nwkDataReqQueue+0x1>
     d04:	9a 83       	std	Y+2, r25	; 0x02
     d06:	89 83       	std	Y+1, r24	; 0x01
     d08:	2b c0       	rjmp	.+86     	; 0xd60 <nwkDataReqTxConf+0x74>
		if (req->frame == frame) {
     d0a:	89 81       	ldd	r24, Y+1	; 0x01
     d0c:	9a 81       	ldd	r25, Y+2	; 0x02
     d0e:	fc 01       	movw	r30, r24
     d10:	22 81       	ldd	r18, Z+2	; 0x02
     d12:	33 81       	ldd	r19, Z+3	; 0x03
     d14:	8b 81       	ldd	r24, Y+3	; 0x03
     d16:	9c 81       	ldd	r25, Y+4	; 0x04
     d18:	28 17       	cp	r18, r24
     d1a:	39 07       	cpc	r19, r25
     d1c:	d1 f4       	brne	.+52     	; 0xd52 <nwkDataReqTxConf+0x66>
			req->status = frame->tx.status;
     d1e:	8b 81       	ldd	r24, Y+3	; 0x03
     d20:	9c 81       	ldd	r25, Y+4	; 0x04
     d22:	8d 57       	subi	r24, 0x7D	; 125
     d24:	9f 4f       	sbci	r25, 0xFF	; 255
     d26:	fc 01       	movw	r30, r24
     d28:	20 81       	ld	r18, Z
     d2a:	89 81       	ldd	r24, Y+1	; 0x01
     d2c:	9a 81       	ldd	r25, Y+2	; 0x02
     d2e:	fc 01       	movw	r30, r24
     d30:	20 8b       	std	Z+16, r18	; 0x10
			req->control = frame->tx.control;
     d32:	8b 81       	ldd	r24, Y+3	; 0x03
     d34:	9c 81       	ldd	r25, Y+4	; 0x04
     d36:	8a 57       	subi	r24, 0x7A	; 122
     d38:	9f 4f       	sbci	r25, 0xFF	; 255
     d3a:	fc 01       	movw	r30, r24
     d3c:	20 81       	ld	r18, Z
     d3e:	89 81       	ldd	r24, Y+1	; 0x01
     d40:	9a 81       	ldd	r25, Y+2	; 0x02
     d42:	fc 01       	movw	r30, r24
     d44:	21 8b       	std	Z+17, r18	; 0x11
			req->state = NWK_DATA_REQ_STATE_CONFIRM;
     d46:	89 81       	ldd	r24, Y+1	; 0x01
     d48:	9a 81       	ldd	r25, Y+2	; 0x02
     d4a:	22 e0       	ldi	r18, 0x02	; 2
     d4c:	fc 01       	movw	r30, r24
     d4e:	24 83       	std	Z+4, r18	; 0x04
			break;
     d50:	0b c0       	rjmp	.+22     	; 0xd68 <nwkDataReqTxConf+0x7c>
*  @brief Frame transmission confirmation handler
*  @param[in] frame Pointer to the sent frame
*****************************************************************************/
static void nwkDataReqTxConf(NwkFrame_t *frame)
{
	for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next) {
     d52:	89 81       	ldd	r24, Y+1	; 0x01
     d54:	9a 81       	ldd	r25, Y+2	; 0x02
     d56:	fc 01       	movw	r30, r24
     d58:	80 81       	ld	r24, Z
     d5a:	91 81       	ldd	r25, Z+1	; 0x01
     d5c:	9a 83       	std	Y+2, r25	; 0x02
     d5e:	89 83       	std	Y+1, r24	; 0x01
     d60:	89 81       	ldd	r24, Y+1	; 0x01
     d62:	9a 81       	ldd	r25, Y+2	; 0x02
     d64:	89 2b       	or	r24, r25
     d66:	89 f6       	brne	.-94     	; 0xd0a <nwkDataReqTxConf+0x1e>
			req->state = NWK_DATA_REQ_STATE_CONFIRM;
			break;
		}
	}

	nwkFrameFree(frame);
     d68:	8b 81       	ldd	r24, Y+3	; 0x03
     d6a:	9c 81       	ldd	r25, Y+4	; 0x04
     d6c:	0e 94 82 08 	call	0x1104	; 0x1104 <nwkFrameFree>
}
     d70:	00 00       	nop
     d72:	0f 90       	pop	r0
     d74:	0f 90       	pop	r0
     d76:	0f 90       	pop	r0
     d78:	0f 90       	pop	r0
     d7a:	df 91       	pop	r29
     d7c:	cf 91       	pop	r28
     d7e:	08 95       	ret

00000d80 <nwkDataReqConfirm>:
/*************************************************************************//**
*  @brief Confirms request @req to the application and remove it from the queue
*  @param[in] req Pointer to the request parameters
*****************************************************************************/
static void nwkDataReqConfirm(NWK_DataReq_t *req)
{
     d80:	cf 93       	push	r28
     d82:	df 93       	push	r29
     d84:	00 d0       	rcall	.+0      	; 0xd86 <nwkDataReqConfirm+0x6>
     d86:	00 d0       	rcall	.+0      	; 0xd88 <nwkDataReqConfirm+0x8>
     d88:	cd b7       	in	r28, 0x3d	; 61
     d8a:	de b7       	in	r29, 0x3e	; 62
     d8c:	9c 83       	std	Y+4, r25	; 0x04
     d8e:	8b 83       	std	Y+3, r24	; 0x03
	if (nwkDataReqQueue == req) {
     d90:	20 91 35 02 	lds	r18, 0x0235	; 0x800235 <nwkDataReqQueue>
     d94:	30 91 36 02 	lds	r19, 0x0236	; 0x800236 <nwkDataReqQueue+0x1>
     d98:	8b 81       	ldd	r24, Y+3	; 0x03
     d9a:	9c 81       	ldd	r25, Y+4	; 0x04
     d9c:	28 17       	cp	r18, r24
     d9e:	39 07       	cpc	r19, r25
     da0:	61 f4       	brne	.+24     	; 0xdba <nwkDataReqConfirm+0x3a>
		nwkDataReqQueue = nwkDataReqQueue->next;
     da2:	80 91 35 02 	lds	r24, 0x0235	; 0x800235 <nwkDataReqQueue>
     da6:	90 91 36 02 	lds	r25, 0x0236	; 0x800236 <nwkDataReqQueue+0x1>
     daa:	fc 01       	movw	r30, r24
     dac:	80 81       	ld	r24, Z
     dae:	91 81       	ldd	r25, Z+1	; 0x01
     db0:	90 93 36 02 	sts	0x0236, r25	; 0x800236 <nwkDataReqQueue+0x1>
     db4:	80 93 35 02 	sts	0x0235, r24	; 0x800235 <nwkDataReqQueue>
     db8:	25 c0       	rjmp	.+74     	; 0xe04 <nwkDataReqConfirm+0x84>
	} else {
		NWK_DataReq_t *prev = nwkDataReqQueue;
     dba:	80 91 35 02 	lds	r24, 0x0235	; 0x800235 <nwkDataReqQueue>
     dbe:	90 91 36 02 	lds	r25, 0x0236	; 0x800236 <nwkDataReqQueue+0x1>
     dc2:	9a 83       	std	Y+2, r25	; 0x02
     dc4:	89 83       	std	Y+1, r24	; 0x01
		while (prev->next != req) {
     dc6:	07 c0       	rjmp	.+14     	; 0xdd6 <nwkDataReqConfirm+0x56>
			prev = prev->next;
     dc8:	89 81       	ldd	r24, Y+1	; 0x01
     dca:	9a 81       	ldd	r25, Y+2	; 0x02
     dcc:	fc 01       	movw	r30, r24
     dce:	80 81       	ld	r24, Z
     dd0:	91 81       	ldd	r25, Z+1	; 0x01
     dd2:	9a 83       	std	Y+2, r25	; 0x02
     dd4:	89 83       	std	Y+1, r24	; 0x01
{
	if (nwkDataReqQueue == req) {
		nwkDataReqQueue = nwkDataReqQueue->next;
	} else {
		NWK_DataReq_t *prev = nwkDataReqQueue;
		while (prev->next != req) {
     dd6:	89 81       	ldd	r24, Y+1	; 0x01
     dd8:	9a 81       	ldd	r25, Y+2	; 0x02
     dda:	fc 01       	movw	r30, r24
     ddc:	20 81       	ld	r18, Z
     dde:	31 81       	ldd	r19, Z+1	; 0x01
     de0:	8b 81       	ldd	r24, Y+3	; 0x03
     de2:	9c 81       	ldd	r25, Y+4	; 0x04
     de4:	28 17       	cp	r18, r24
     de6:	39 07       	cpc	r19, r25
     de8:	79 f7       	brne	.-34     	; 0xdc8 <nwkDataReqConfirm+0x48>
			prev = prev->next;
		}
		prev->next = ((NWK_DataReq_t *)prev->next)->next;
     dea:	89 81       	ldd	r24, Y+1	; 0x01
     dec:	9a 81       	ldd	r25, Y+2	; 0x02
     dee:	fc 01       	movw	r30, r24
     df0:	80 81       	ld	r24, Z
     df2:	91 81       	ldd	r25, Z+1	; 0x01
     df4:	fc 01       	movw	r30, r24
     df6:	20 81       	ld	r18, Z
     df8:	31 81       	ldd	r19, Z+1	; 0x01
     dfa:	89 81       	ldd	r24, Y+1	; 0x01
     dfc:	9a 81       	ldd	r25, Y+2	; 0x02
     dfe:	fc 01       	movw	r30, r24
     e00:	31 83       	std	Z+1, r19	; 0x01
     e02:	20 83       	st	Z, r18
	}

	nwkIb.lock--;
     e04:	80 91 b0 10 	lds	r24, 0x10B0	; 0x8010b0 <nwkIb+0x26>
     e08:	90 91 b1 10 	lds	r25, 0x10B1	; 0x8010b1 <nwkIb+0x27>
     e0c:	01 97       	sbiw	r24, 0x01	; 1
     e0e:	90 93 b1 10 	sts	0x10B1, r25	; 0x8010b1 <nwkIb+0x27>
     e12:	80 93 b0 10 	sts	0x10B0, r24	; 0x8010b0 <nwkIb+0x26>

	if(req->confirm != NULL)
     e16:	8b 81       	ldd	r24, Y+3	; 0x03
     e18:	9c 81       	ldd	r25, Y+4	; 0x04
     e1a:	fc 01       	movw	r30, r24
     e1c:	86 85       	ldd	r24, Z+14	; 0x0e
     e1e:	97 85       	ldd	r25, Z+15	; 0x0f
     e20:	89 2b       	or	r24, r25
     e22:	49 f0       	breq	.+18     	; 0xe36 <nwkDataReqConfirm+0xb6>
	{
		req->confirm(req);
     e24:	8b 81       	ldd	r24, Y+3	; 0x03
     e26:	9c 81       	ldd	r25, Y+4	; 0x04
     e28:	fc 01       	movw	r30, r24
     e2a:	26 85       	ldd	r18, Z+14	; 0x0e
     e2c:	37 85       	ldd	r19, Z+15	; 0x0f
     e2e:	8b 81       	ldd	r24, Y+3	; 0x03
     e30:	9c 81       	ldd	r25, Y+4	; 0x04
     e32:	f9 01       	movw	r30, r18
     e34:	09 95       	icall
	}
}
     e36:	00 00       	nop
     e38:	0f 90       	pop	r0
     e3a:	0f 90       	pop	r0
     e3c:	0f 90       	pop	r0
     e3e:	0f 90       	pop	r0
     e40:	df 91       	pop	r29
     e42:	cf 91       	pop	r28
     e44:	08 95       	ret

00000e46 <nwkDataReqTaskHandler>:

/*************************************************************************//**
*  @brief Data Request module task handler
*****************************************************************************/
void nwkDataReqTaskHandler(void)
{
     e46:	cf 93       	push	r28
     e48:	df 93       	push	r29
     e4a:	00 d0       	rcall	.+0      	; 0xe4c <nwkDataReqTaskHandler+0x6>
     e4c:	cd b7       	in	r28, 0x3d	; 61
     e4e:	de b7       	in	r29, 0x3e	; 62
	for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next) {
     e50:	80 91 35 02 	lds	r24, 0x0235	; 0x800235 <nwkDataReqQueue>
     e54:	90 91 36 02 	lds	r25, 0x0236	; 0x800236 <nwkDataReqQueue+0x1>
     e58:	9a 83       	std	Y+2, r25	; 0x02
     e5a:	89 83       	std	Y+1, r24	; 0x01
     e5c:	21 c0       	rjmp	.+66     	; 0xea0 <nwkDataReqTaskHandler+0x5a>
		switch (req->state) {
     e5e:	89 81       	ldd	r24, Y+1	; 0x01
     e60:	9a 81       	ldd	r25, Y+2	; 0x02
     e62:	fc 01       	movw	r30, r24
     e64:	84 81       	ldd	r24, Z+4	; 0x04
     e66:	88 2f       	mov	r24, r24
     e68:	90 e0       	ldi	r25, 0x00	; 0
     e6a:	81 30       	cpi	r24, 0x01	; 1
     e6c:	91 05       	cpc	r25, r1
     e6e:	81 f0       	breq	.+32     	; 0xe90 <nwkDataReqTaskHandler+0x4a>
     e70:	82 30       	cpi	r24, 0x02	; 2
     e72:	91 05       	cpc	r25, r1
     e74:	41 f0       	breq	.+16     	; 0xe86 <nwkDataReqTaskHandler+0x40>
     e76:	89 2b       	or	r24, r25
     e78:	09 f0       	breq	.+2      	; 0xe7c <nwkDataReqTaskHandler+0x36>
			return;
		}
		break;

		default:
			break;
     e7a:	0b c0       	rjmp	.+22     	; 0xe92 <nwkDataReqTaskHandler+0x4c>
{
	for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next) {
		switch (req->state) {
		case NWK_DATA_REQ_STATE_INITIAL:
		{
			nwkDataReqSendFrame(req);
     e7c:	89 81       	ldd	r24, Y+1	; 0x01
     e7e:	9a 81       	ldd	r25, Y+2	; 0x02
     e80:	0e 94 03 04 	call	0x806	; 0x806 <nwkDataReqSendFrame>
			return;
     e84:	11 c0       	rjmp	.+34     	; 0xea8 <nwkDataReqTaskHandler+0x62>
		case NWK_DATA_REQ_STATE_WAIT_CONF:
			break;

		case NWK_DATA_REQ_STATE_CONFIRM:
		{
			nwkDataReqConfirm(req);
     e86:	89 81       	ldd	r24, Y+1	; 0x01
     e88:	9a 81       	ldd	r25, Y+2	; 0x02
     e8a:	0e 94 c0 06 	call	0xd80	; 0xd80 <nwkDataReqConfirm>
			return;
     e8e:	0c c0       	rjmp	.+24     	; 0xea8 <nwkDataReqTaskHandler+0x62>
			return;
		}
		break;

		case NWK_DATA_REQ_STATE_WAIT_CONF:
			break;
     e90:	00 00       	nop
/*************************************************************************//**
*  @brief Data Request module task handler
*****************************************************************************/
void nwkDataReqTaskHandler(void)
{
	for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next) {
     e92:	89 81       	ldd	r24, Y+1	; 0x01
     e94:	9a 81       	ldd	r25, Y+2	; 0x02
     e96:	fc 01       	movw	r30, r24
     e98:	80 81       	ld	r24, Z
     e9a:	91 81       	ldd	r25, Z+1	; 0x01
     e9c:	9a 83       	std	Y+2, r25	; 0x02
     e9e:	89 83       	std	Y+1, r24	; 0x01
     ea0:	89 81       	ldd	r24, Y+1	; 0x01
     ea2:	9a 81       	ldd	r25, Y+2	; 0x02
     ea4:	89 2b       	or	r24, r25
     ea6:	d9 f6       	brne	.-74     	; 0xe5e <nwkDataReqTaskHandler+0x18>

		default:
			break;
		}
	}
}
     ea8:	0f 90       	pop	r0
     eaa:	0f 90       	pop	r0
     eac:	df 91       	pop	r29
     eae:	cf 91       	pop	r28
     eb0:	08 95       	ret

00000eb2 <nwkFrameInit>:

/*************************************************************************//**
*  @brief Initializes the Frame module
*****************************************************************************/
void nwkFrameInit(void)
{
     eb2:	cf 93       	push	r28
     eb4:	df 93       	push	r29
     eb6:	1f 92       	push	r1
     eb8:	cd b7       	in	r28, 0x3d	; 61
     eba:	de b7       	in	r29, 0x3e	; 62
	for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++) {
     ebc:	19 82       	std	Y+1, r1	; 0x01
     ebe:	10 c0       	rjmp	.+32     	; 0xee0 <nwkFrameInit+0x2e>
		nwkFrameFrames[i].state = NWK_FRAME_STATE_FREE;
     ec0:	89 81       	ldd	r24, Y+1	; 0x01
     ec2:	28 2f       	mov	r18, r24
     ec4:	30 e0       	ldi	r19, 0x00	; 0
     ec6:	49 e8       	ldi	r20, 0x89	; 137
     ec8:	42 9f       	mul	r20, r18
     eca:	c0 01       	movw	r24, r0
     ecc:	43 9f       	mul	r20, r19
     ece:	90 0d       	add	r25, r0
     ed0:	11 24       	eor	r1, r1
     ed2:	89 5c       	subi	r24, 0xC9	; 201
     ed4:	9d 4f       	sbci	r25, 0xFD	; 253
     ed6:	fc 01       	movw	r30, r24
     ed8:	10 82       	st	Z, r1
/*************************************************************************//**
*  @brief Initializes the Frame module
*****************************************************************************/
void nwkFrameInit(void)
{
	for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++) {
     eda:	89 81       	ldd	r24, Y+1	; 0x01
     edc:	8f 5f       	subi	r24, 0xFF	; 255
     ede:	89 83       	std	Y+1, r24	; 0x01
     ee0:	89 81       	ldd	r24, Y+1	; 0x01
     ee2:	84 31       	cpi	r24, 0x14	; 20
     ee4:	68 f3       	brcs	.-38     	; 0xec0 <nwkFrameInit+0xe>
		nwkFrameFrames[i].state = NWK_FRAME_STATE_FREE;
	}
}
     ee6:	00 00       	nop
     ee8:	0f 90       	pop	r0
     eea:	df 91       	pop	r29
     eec:	cf 91       	pop	r28
     eee:	08 95       	ret

00000ef0 <nwkFrameAlloc>:
/*************************************************************************//**
*  @brief Allocates an empty frame from the buffer pool
*  @return Pointer to the frame or @c NULL if there are no free frames
*****************************************************************************/
NwkFrame_t *nwkFrameAlloc(void)
{
     ef0:	cf 93       	push	r28
     ef2:	df 93       	push	r29
     ef4:	1f 92       	push	r1
     ef6:	cd b7       	in	r28, 0x3d	; 61
     ef8:	de b7       	in	r29, 0x3e	; 62
	for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++) {
     efa:	19 82       	std	Y+1, r1	; 0x01
     efc:	61 c0       	rjmp	.+194    	; 0xfc0 <nwkFrameAlloc+0xd0>
		if (NWK_FRAME_STATE_FREE == nwkFrameFrames[i].state) {
     efe:	89 81       	ldd	r24, Y+1	; 0x01
     f00:	28 2f       	mov	r18, r24
     f02:	30 e0       	ldi	r19, 0x00	; 0
     f04:	49 e8       	ldi	r20, 0x89	; 137
     f06:	42 9f       	mul	r20, r18
     f08:	c0 01       	movw	r24, r0
     f0a:	43 9f       	mul	r20, r19
     f0c:	90 0d       	add	r25, r0
     f0e:	11 24       	eor	r1, r1
     f10:	89 5c       	subi	r24, 0xC9	; 201
     f12:	9d 4f       	sbci	r25, 0xFD	; 253
     f14:	fc 01       	movw	r30, r24
     f16:	80 81       	ld	r24, Z
     f18:	88 23       	and	r24, r24
     f1a:	09 f0       	breq	.+2      	; 0xf1e <nwkFrameAlloc+0x2e>
     f1c:	4e c0       	rjmp	.+156    	; 0xfba <nwkFrameAlloc+0xca>
			memset(&nwkFrameFrames[i], 0, sizeof(NwkFrame_t));
     f1e:	89 81       	ldd	r24, Y+1	; 0x01
     f20:	28 2f       	mov	r18, r24
     f22:	30 e0       	ldi	r19, 0x00	; 0
     f24:	49 e8       	ldi	r20, 0x89	; 137
     f26:	42 9f       	mul	r20, r18
     f28:	c0 01       	movw	r24, r0
     f2a:	43 9f       	mul	r20, r19
     f2c:	90 0d       	add	r25, r0
     f2e:	11 24       	eor	r1, r1
     f30:	89 5c       	subi	r24, 0xC9	; 201
     f32:	9d 4f       	sbci	r25, 0xFD	; 253
     f34:	49 e8       	ldi	r20, 0x89	; 137
     f36:	50 e0       	ldi	r21, 0x00	; 0
     f38:	60 e0       	ldi	r22, 0x00	; 0
     f3a:	70 e0       	ldi	r23, 0x00	; 0
     f3c:	0e 94 89 45 	call	0x8b12	; 0x8b12 <memset>
			nwkFrameFrames[i].size = 0;
     f40:	89 81       	ldd	r24, Y+1	; 0x01
     f42:	28 2f       	mov	r18, r24
     f44:	30 e0       	ldi	r19, 0x00	; 0
     f46:	49 e8       	ldi	r20, 0x89	; 137
     f48:	42 9f       	mul	r20, r18
     f4a:	c0 01       	movw	r24, r0
     f4c:	43 9f       	mul	r20, r19
     f4e:	90 0d       	add	r25, r0
     f50:	11 24       	eor	r1, r1
     f52:	88 5c       	subi	r24, 0xC8	; 200
     f54:	9d 4f       	sbci	r25, 0xFD	; 253
     f56:	fc 01       	movw	r30, r24
     f58:	10 82       	st	Z, r1
			nwkFrameFrames[i].payload = nwkFrameFrames[i].data;
     f5a:	89 81       	ldd	r24, Y+1	; 0x01
     f5c:	48 2f       	mov	r20, r24
     f5e:	50 e0       	ldi	r21, 0x00	; 0
     f60:	89 81       	ldd	r24, Y+1	; 0x01
     f62:	28 2f       	mov	r18, r24
     f64:	30 e0       	ldi	r19, 0x00	; 0
     f66:	69 e8       	ldi	r22, 0x89	; 137
     f68:	62 9f       	mul	r22, r18
     f6a:	c0 01       	movw	r24, r0
     f6c:	63 9f       	mul	r22, r19
     f6e:	90 0d       	add	r25, r0
     f70:	11 24       	eor	r1, r1
     f72:	02 96       	adiw	r24, 0x02	; 2
     f74:	9c 01       	movw	r18, r24
     f76:	29 5c       	subi	r18, 0xC9	; 201
     f78:	3d 4f       	sbci	r19, 0xFD	; 253
     f7a:	69 e8       	ldi	r22, 0x89	; 137
     f7c:	64 9f       	mul	r22, r20
     f7e:	c0 01       	movw	r24, r0
     f80:	65 9f       	mul	r22, r21
     f82:	90 0d       	add	r25, r0
     f84:	11 24       	eor	r1, r1
     f86:	88 54       	subi	r24, 0x48	; 72
     f88:	9d 4f       	sbci	r25, 0xFD	; 253
     f8a:	fc 01       	movw	r30, r24
     f8c:	31 83       	std	Z+1, r19	; 0x01
     f8e:	20 83       	st	Z, r18
			nwkIb.lock++;
     f90:	80 91 b0 10 	lds	r24, 0x10B0	; 0x8010b0 <nwkIb+0x26>
     f94:	90 91 b1 10 	lds	r25, 0x10B1	; 0x8010b1 <nwkIb+0x27>
     f98:	01 96       	adiw	r24, 0x01	; 1
     f9a:	90 93 b1 10 	sts	0x10B1, r25	; 0x8010b1 <nwkIb+0x27>
     f9e:	80 93 b0 10 	sts	0x10B0, r24	; 0x8010b0 <nwkIb+0x26>
			return &nwkFrameFrames[i];
     fa2:	89 81       	ldd	r24, Y+1	; 0x01
     fa4:	28 2f       	mov	r18, r24
     fa6:	30 e0       	ldi	r19, 0x00	; 0
     fa8:	49 e8       	ldi	r20, 0x89	; 137
     faa:	42 9f       	mul	r20, r18
     fac:	c0 01       	movw	r24, r0
     fae:	43 9f       	mul	r20, r19
     fb0:	90 0d       	add	r25, r0
     fb2:	11 24       	eor	r1, r1
     fb4:	89 5c       	subi	r24, 0xC9	; 201
     fb6:	9d 4f       	sbci	r25, 0xFD	; 253
     fb8:	09 c0       	rjmp	.+18     	; 0xfcc <nwkFrameAlloc+0xdc>
*  @brief Allocates an empty frame from the buffer pool
*  @return Pointer to the frame or @c NULL if there are no free frames
*****************************************************************************/
NwkFrame_t *nwkFrameAlloc(void)
{
	for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++) {
     fba:	89 81       	ldd	r24, Y+1	; 0x01
     fbc:	8f 5f       	subi	r24, 0xFF	; 255
     fbe:	89 83       	std	Y+1, r24	; 0x01
     fc0:	89 81       	ldd	r24, Y+1	; 0x01
     fc2:	84 31       	cpi	r24, 0x14	; 20
     fc4:	08 f4       	brcc	.+2      	; 0xfc8 <nwkFrameAlloc+0xd8>
     fc6:	9b cf       	rjmp	.-202    	; 0xefe <nwkFrameAlloc+0xe>
			nwkFrameFrames[i].payload = nwkFrameFrames[i].data;
			nwkIb.lock++;
			return &nwkFrameFrames[i];
		}
	}
	return NULL;
     fc8:	80 e0       	ldi	r24, 0x00	; 0
     fca:	90 e0       	ldi	r25, 0x00	; 0
}
     fcc:	0f 90       	pop	r0
     fce:	df 91       	pop	r29
     fd0:	cf 91       	pop	r28
     fd2:	08 95       	ret

00000fd4 <nwkFrameAlloc_LLDN>:

NwkFrame_t *nwkFrameAlloc_LLDN(bool beacon_frame)
{
     fd4:	cf 93       	push	r28
     fd6:	df 93       	push	r29
     fd8:	00 d0       	rcall	.+0      	; 0xfda <nwkFrameAlloc_LLDN+0x6>
     fda:	cd b7       	in	r28, 0x3d	; 61
     fdc:	de b7       	in	r29, 0x3e	; 62
     fde:	8a 83       	std	Y+2, r24	; 0x02
	for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++) {
     fe0:	19 82       	std	Y+1, r1	; 0x01
     fe2:	85 c0       	rjmp	.+266    	; 0x10ee <__EEPROM_REGION_LENGTH__+0xee>
		if (NWK_FRAME_STATE_FREE == nwkFrameFrames[i].state) {
     fe4:	89 81       	ldd	r24, Y+1	; 0x01
     fe6:	28 2f       	mov	r18, r24
     fe8:	30 e0       	ldi	r19, 0x00	; 0
     fea:	49 e8       	ldi	r20, 0x89	; 137
     fec:	42 9f       	mul	r20, r18
     fee:	c0 01       	movw	r24, r0
     ff0:	43 9f       	mul	r20, r19
     ff2:	90 0d       	add	r25, r0
     ff4:	11 24       	eor	r1, r1
     ff6:	89 5c       	subi	r24, 0xC9	; 201
     ff8:	9d 4f       	sbci	r25, 0xFD	; 253
     ffa:	fc 01       	movw	r30, r24
     ffc:	80 81       	ld	r24, Z
     ffe:	88 23       	and	r24, r24
    1000:	09 f0       	breq	.+2      	; 0x1004 <__EEPROM_REGION_LENGTH__+0x4>
    1002:	72 c0       	rjmp	.+228    	; 0x10e8 <__EEPROM_REGION_LENGTH__+0xe8>
			// clear memory of previous frame
			memset(&nwkFrameFrames[i], 0, sizeof(NwkFrame_t));
    1004:	89 81       	ldd	r24, Y+1	; 0x01
    1006:	28 2f       	mov	r18, r24
    1008:	30 e0       	ldi	r19, 0x00	; 0
    100a:	49 e8       	ldi	r20, 0x89	; 137
    100c:	42 9f       	mul	r20, r18
    100e:	c0 01       	movw	r24, r0
    1010:	43 9f       	mul	r20, r19
    1012:	90 0d       	add	r25, r0
    1014:	11 24       	eor	r1, r1
    1016:	89 5c       	subi	r24, 0xC9	; 201
    1018:	9d 4f       	sbci	r25, 0xFD	; 253
    101a:	49 e8       	ldi	r20, 0x89	; 137
    101c:	50 e0       	ldi	r21, 0x00	; 0
    101e:	60 e0       	ldi	r22, 0x00	; 0
    1020:	70 e0       	ldi	r23, 0x00	; 0
    1022:	0e 94 89 45 	call	0x8b12	; 0x8b12 <memset>
			// store in size initial size of frame, only it's MHR structure
			if(beacon_frame)
    1026:	8a 81       	ldd	r24, Y+2	; 0x02
    1028:	88 23       	and	r24, r24
    102a:	79 f0       	breq	.+30     	; 0x104a <__EEPROM_REGION_LENGTH__+0x4a>
			{
				nwkFrameFrames[i].size = sizeof(NwkFrameBeaconHeaderLLDN_t);
    102c:	89 81       	ldd	r24, Y+1	; 0x01
    102e:	28 2f       	mov	r18, r24
    1030:	30 e0       	ldi	r19, 0x00	; 0
    1032:	49 e8       	ldi	r20, 0x89	; 137
    1034:	42 9f       	mul	r20, r18
    1036:	c0 01       	movw	r24, r0
    1038:	43 9f       	mul	r20, r19
    103a:	90 0d       	add	r25, r0
    103c:	11 24       	eor	r1, r1
    103e:	88 5c       	subi	r24, 0xC8	; 200
    1040:	9d 4f       	sbci	r25, 0xFD	; 253
    1042:	27 e0       	ldi	r18, 0x07	; 7
    1044:	fc 01       	movw	r30, r24
    1046:	20 83       	st	Z, r18
    1048:	0e c0       	rjmp	.+28     	; 0x1066 <__EEPROM_REGION_LENGTH__+0x66>
			}
			else
			{
				// data, mac command and group ack share the same MHR structure
				nwkFrameFrames[i].size = sizeof(NwkFrameGeneralHeaderLLDN_t);
    104a:	89 81       	ldd	r24, Y+1	; 0x01
    104c:	28 2f       	mov	r18, r24
    104e:	30 e0       	ldi	r19, 0x00	; 0
    1050:	49 e8       	ldi	r20, 0x89	; 137
    1052:	42 9f       	mul	r20, r18
    1054:	c0 01       	movw	r24, r0
    1056:	43 9f       	mul	r20, r19
    1058:	90 0d       	add	r25, r0
    105a:	11 24       	eor	r1, r1
    105c:	88 5c       	subi	r24, 0xC8	; 200
    105e:	9d 4f       	sbci	r25, 0xFD	; 253
    1060:	23 e0       	ldi	r18, 0x03	; 3
    1062:	fc 01       	movw	r30, r24
    1064:	20 83       	st	Z, r18
			}
			// offset payload to end of MHR structure
			nwkFrameFrames[i].payload = nwkFrameFrames[i].data
    1066:	89 81       	ldd	r24, Y+1	; 0x01
    1068:	48 2f       	mov	r20, r24
    106a:	50 e0       	ldi	r21, 0x00	; 0
    106c:	89 81       	ldd	r24, Y+1	; 0x01
    106e:	28 2f       	mov	r18, r24
    1070:	30 e0       	ldi	r19, 0x00	; 0
    1072:	69 e8       	ldi	r22, 0x89	; 137
    1074:	62 9f       	mul	r22, r18
    1076:	c0 01       	movw	r24, r0
    1078:	63 9f       	mul	r22, r19
    107a:	90 0d       	add	r25, r0
    107c:	11 24       	eor	r1, r1
    107e:	02 96       	adiw	r24, 0x02	; 2
    1080:	9c 01       	movw	r18, r24
    1082:	29 5c       	subi	r18, 0xC9	; 201
    1084:	3d 4f       	sbci	r19, 0xFD	; 253
							+ nwkFrameFrames[i].size;
    1086:	89 81       	ldd	r24, Y+1	; 0x01
    1088:	68 2f       	mov	r22, r24
    108a:	70 e0       	ldi	r23, 0x00	; 0
    108c:	e9 e8       	ldi	r30, 0x89	; 137
    108e:	e6 9f       	mul	r30, r22
    1090:	c0 01       	movw	r24, r0
    1092:	e7 9f       	mul	r30, r23
    1094:	90 0d       	add	r25, r0
    1096:	11 24       	eor	r1, r1
    1098:	88 5c       	subi	r24, 0xC8	; 200
    109a:	9d 4f       	sbci	r25, 0xFD	; 253
    109c:	fc 01       	movw	r30, r24
    109e:	80 81       	ld	r24, Z
    10a0:	88 2f       	mov	r24, r24
    10a2:	90 e0       	ldi	r25, 0x00	; 0
    10a4:	28 0f       	add	r18, r24
    10a6:	39 1f       	adc	r19, r25
			{
				// data, mac command and group ack share the same MHR structure
				nwkFrameFrames[i].size = sizeof(NwkFrameGeneralHeaderLLDN_t);
			}
			// offset payload to end of MHR structure
			nwkFrameFrames[i].payload = nwkFrameFrames[i].data
    10a8:	69 e8       	ldi	r22, 0x89	; 137
    10aa:	64 9f       	mul	r22, r20
    10ac:	c0 01       	movw	r24, r0
    10ae:	65 9f       	mul	r22, r21
    10b0:	90 0d       	add	r25, r0
    10b2:	11 24       	eor	r1, r1
    10b4:	88 54       	subi	r24, 0x48	; 72
    10b6:	9d 4f       	sbci	r25, 0xFD	; 253
    10b8:	fc 01       	movw	r30, r24
    10ba:	31 83       	std	Z+1, r19	; 0x01
    10bc:	20 83       	st	Z, r18
							+ nwkFrameFrames[i].size;

			nwkIb.lock++;
    10be:	80 91 b0 10 	lds	r24, 0x10B0	; 0x8010b0 <nwkIb+0x26>
    10c2:	90 91 b1 10 	lds	r25, 0x10B1	; 0x8010b1 <nwkIb+0x27>
    10c6:	01 96       	adiw	r24, 0x01	; 1
    10c8:	90 93 b1 10 	sts	0x10B1, r25	; 0x8010b1 <nwkIb+0x27>
    10cc:	80 93 b0 10 	sts	0x10B0, r24	; 0x8010b0 <nwkIb+0x26>
			return &nwkFrameFrames[i];
    10d0:	89 81       	ldd	r24, Y+1	; 0x01
    10d2:	28 2f       	mov	r18, r24
    10d4:	30 e0       	ldi	r19, 0x00	; 0
    10d6:	49 e8       	ldi	r20, 0x89	; 137
    10d8:	42 9f       	mul	r20, r18
    10da:	c0 01       	movw	r24, r0
    10dc:	43 9f       	mul	r20, r19
    10de:	90 0d       	add	r25, r0
    10e0:	11 24       	eor	r1, r1
    10e2:	89 5c       	subi	r24, 0xC9	; 201
    10e4:	9d 4f       	sbci	r25, 0xFD	; 253
    10e6:	09 c0       	rjmp	.+18     	; 0x10fa <__EEPROM_REGION_LENGTH__+0xfa>
	return NULL;
}

NwkFrame_t *nwkFrameAlloc_LLDN(bool beacon_frame)
{
	for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++) {
    10e8:	89 81       	ldd	r24, Y+1	; 0x01
    10ea:	8f 5f       	subi	r24, 0xFF	; 255
    10ec:	89 83       	std	Y+1, r24	; 0x01
    10ee:	89 81       	ldd	r24, Y+1	; 0x01
    10f0:	84 31       	cpi	r24, 0x14	; 20
    10f2:	08 f4       	brcc	.+2      	; 0x10f6 <__EEPROM_REGION_LENGTH__+0xf6>
    10f4:	77 cf       	rjmp	.-274    	; 0xfe4 <nwkFrameAlloc_LLDN+0x10>

			nwkIb.lock++;
			return &nwkFrameFrames[i];
		}
	}
	return NULL;
    10f6:	80 e0       	ldi	r24, 0x00	; 0
    10f8:	90 e0       	ldi	r25, 0x00	; 0
}
    10fa:	0f 90       	pop	r0
    10fc:	0f 90       	pop	r0
    10fe:	df 91       	pop	r29
    1100:	cf 91       	pop	r28
    1102:	08 95       	ret

00001104 <nwkFrameFree>:
/*************************************************************************//**
*  @brief Frees a @a frame and returns it to the buffer pool
*  @param[in] frame Pointer to the frame to be freed
*****************************************************************************/
void nwkFrameFree(NwkFrame_t *frame)
{
    1104:	cf 93       	push	r28
    1106:	df 93       	push	r29
    1108:	00 d0       	rcall	.+0      	; 0x110a <nwkFrameFree+0x6>
    110a:	cd b7       	in	r28, 0x3d	; 61
    110c:	de b7       	in	r29, 0x3e	; 62
    110e:	9a 83       	std	Y+2, r25	; 0x02
    1110:	89 83       	std	Y+1, r24	; 0x01
	frame->state = NWK_FRAME_STATE_FREE;
    1112:	89 81       	ldd	r24, Y+1	; 0x01
    1114:	9a 81       	ldd	r25, Y+2	; 0x02
    1116:	fc 01       	movw	r30, r24
    1118:	10 82       	st	Z, r1
	nwkIb.lock--;
    111a:	80 91 b0 10 	lds	r24, 0x10B0	; 0x8010b0 <nwkIb+0x26>
    111e:	90 91 b1 10 	lds	r25, 0x10B1	; 0x8010b1 <nwkIb+0x27>
    1122:	01 97       	sbiw	r24, 0x01	; 1
    1124:	90 93 b1 10 	sts	0x10B1, r25	; 0x8010b1 <nwkIb+0x27>
    1128:	80 93 b0 10 	sts	0x10B0, r24	; 0x8010b0 <nwkIb+0x26>
}
    112c:	00 00       	nop
    112e:	0f 90       	pop	r0
    1130:	0f 90       	pop	r0
    1132:	df 91       	pop	r29
    1134:	cf 91       	pop	r28
    1136:	08 95       	ret

00001138 <nwkFrameNext>:
* frame
*  @param[in] frame Pointer to the current frame or @c NULL for the first frame
*  @return Next allocated frame or @c NULL if there are no more frames
*****************************************************************************/
NwkFrame_t *nwkFrameNext(NwkFrame_t *frame)
{
    1138:	cf 93       	push	r28
    113a:	df 93       	push	r29
    113c:	00 d0       	rcall	.+0      	; 0x113e <nwkFrameNext+0x6>
    113e:	cd b7       	in	r28, 0x3d	; 61
    1140:	de b7       	in	r29, 0x3e	; 62
    1142:	9a 83       	std	Y+2, r25	; 0x02
    1144:	89 83       	std	Y+1, r24	; 0x01
	if (NULL == frame) {
    1146:	89 81       	ldd	r24, Y+1	; 0x01
    1148:	9a 81       	ldd	r25, Y+2	; 0x02
    114a:	89 2b       	or	r24, r25
    114c:	29 f4       	brne	.+10     	; 0x1158 <nwkFrameNext+0x20>
		frame = nwkFrameFrames;
    114e:	87 e3       	ldi	r24, 0x37	; 55
    1150:	92 e0       	ldi	r25, 0x02	; 2
    1152:	9a 83       	std	Y+2, r25	; 0x02
    1154:	89 83       	std	Y+1, r24	; 0x01
    1156:	16 c0       	rjmp	.+44     	; 0x1184 <nwkFrameNext+0x4c>
	} else {
		frame++;
    1158:	89 81       	ldd	r24, Y+1	; 0x01
    115a:	9a 81       	ldd	r25, Y+2	; 0x02
    115c:	87 57       	subi	r24, 0x77	; 119
    115e:	9f 4f       	sbci	r25, 0xFF	; 255
    1160:	9a 83       	std	Y+2, r25	; 0x02
    1162:	89 83       	std	Y+1, r24	; 0x01
	}

	for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++) {
    1164:	0f c0       	rjmp	.+30     	; 0x1184 <nwkFrameNext+0x4c>
		if (NWK_FRAME_STATE_FREE != frame->state) {
    1166:	89 81       	ldd	r24, Y+1	; 0x01
    1168:	9a 81       	ldd	r25, Y+2	; 0x02
    116a:	fc 01       	movw	r30, r24
    116c:	80 81       	ld	r24, Z
    116e:	88 23       	and	r24, r24
    1170:	19 f0       	breq	.+6      	; 0x1178 <nwkFrameNext+0x40>
			return frame;
    1172:	89 81       	ldd	r24, Y+1	; 0x01
    1174:	9a 81       	ldd	r25, Y+2	; 0x02
    1176:	0d c0       	rjmp	.+26     	; 0x1192 <nwkFrameNext+0x5a>
		frame = nwkFrameFrames;
	} else {
		frame++;
	}

	for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++) {
    1178:	89 81       	ldd	r24, Y+1	; 0x01
    117a:	9a 81       	ldd	r25, Y+2	; 0x02
    117c:	87 57       	subi	r24, 0x77	; 119
    117e:	9f 4f       	sbci	r25, 0xFF	; 255
    1180:	9a 83       	std	Y+2, r25	; 0x02
    1182:	89 83       	std	Y+1, r24	; 0x01
    1184:	89 81       	ldd	r24, Y+1	; 0x01
    1186:	9a 81       	ldd	r25, Y+2	; 0x02
    1188:	8b 5e       	subi	r24, 0xEB	; 235
    118a:	9c 40       	sbci	r25, 0x0C	; 12
    118c:	60 f3       	brcs	.-40     	; 0x1166 <nwkFrameNext+0x2e>
		if (NWK_FRAME_STATE_FREE != frame->state) {
			return frame;
		}
	}

	return NULL;
    118e:	80 e0       	ldi	r24, 0x00	; 0
    1190:	90 e0       	ldi	r25, 0x00	; 0
}
    1192:	0f 90       	pop	r0
    1194:	0f 90       	pop	r0
    1196:	df 91       	pop	r29
    1198:	cf 91       	pop	r28
    119a:	08 95       	ret

0000119c <nwkFrameCommandInit>:
/*************************************************************************//**
*  @brief Sets default parameters for the the command @a frame
*  @param[in] frame Pointer to the command frame
*****************************************************************************/
void nwkFrameCommandInit(NwkFrame_t *frame)
{
    119c:	cf 93       	push	r28
    119e:	df 93       	push	r29
    11a0:	00 d0       	rcall	.+0      	; 0x11a2 <nwkFrameCommandInit+0x6>
    11a2:	cd b7       	in	r28, 0x3d	; 61
    11a4:	de b7       	in	r29, 0x3e	; 62
    11a6:	9a 83       	std	Y+2, r25	; 0x02
    11a8:	89 83       	std	Y+1, r24	; 0x01
	frame->tx.status = NWK_SUCCESS_STATUS;
    11aa:	89 81       	ldd	r24, Y+1	; 0x01
    11ac:	9a 81       	ldd	r25, Y+2	; 0x02
    11ae:	8d 57       	subi	r24, 0x7D	; 125
    11b0:	9f 4f       	sbci	r25, 0xFF	; 255
    11b2:	fc 01       	movw	r30, r24
    11b4:	10 82       	st	Z, r1
	frame->header.nwkSeq = ++nwkIb.nwkSeqNum;
    11b6:	80 91 8e 10 	lds	r24, 0x108E	; 0x80108e <nwkIb+0x4>
    11ba:	8f 5f       	subi	r24, 0xFF	; 255
    11bc:	80 93 8e 10 	sts	0x108E, r24	; 0x80108e <nwkIb+0x4>
    11c0:	20 91 8e 10 	lds	r18, 0x108E	; 0x80108e <nwkIb+0x4>
    11c4:	89 81       	ldd	r24, Y+1	; 0x01
    11c6:	9a 81       	ldd	r25, Y+2	; 0x02
    11c8:	fc 01       	movw	r30, r24
    11ca:	24 87       	std	Z+12, r18	; 0x0c
	frame->header.nwkSrcAddr = nwkIb.addr;
    11cc:	20 91 8a 10 	lds	r18, 0x108A	; 0x80108a <nwkIb>
    11d0:	30 91 8b 10 	lds	r19, 0x108B	; 0x80108b <nwkIb+0x1>
    11d4:	89 81       	ldd	r24, Y+1	; 0x01
    11d6:	9a 81       	ldd	r25, Y+2	; 0x02
    11d8:	fc 01       	movw	r30, r24
    11da:	36 87       	std	Z+14, r19	; 0x0e
    11dc:	25 87       	std	Z+13, r18	; 0x0d
#ifdef NWK_ENABLE_SECURE_COMMANDS
	frame->header.nwkFcf.security = 1;
#endif
}
    11de:	00 00       	nop
    11e0:	0f 90       	pop	r0
    11e2:	0f 90       	pop	r0
    11e4:	df 91       	pop	r29
    11e6:	cf 91       	pop	r28
    11e8:	08 95       	ret

000011ea <nwkFramePayloadSize>:
/*- Implementations --------------------------------------------------------*/

/*************************************************************************//**
*****************************************************************************/
static inline uint8_t nwkFramePayloadSize(NwkFrame_t *frame)
{
    11ea:	cf 93       	push	r28
    11ec:	df 93       	push	r29
    11ee:	00 d0       	rcall	.+0      	; 0x11f0 <nwkFramePayloadSize+0x6>
    11f0:	cd b7       	in	r28, 0x3d	; 61
    11f2:	de b7       	in	r29, 0x3e	; 62
    11f4:	9a 83       	std	Y+2, r25	; 0x02
    11f6:	89 83       	std	Y+1, r24	; 0x01
	return frame->size - (frame->payload - frame->data);
    11f8:	89 81       	ldd	r24, Y+1	; 0x01
    11fa:	9a 81       	ldd	r25, Y+2	; 0x02
    11fc:	fc 01       	movw	r30, r24
    11fe:	41 81       	ldd	r20, Z+1	; 0x01
    1200:	89 81       	ldd	r24, Y+1	; 0x01
    1202:	9a 81       	ldd	r25, Y+2	; 0x02
    1204:	8f 57       	subi	r24, 0x7F	; 127
    1206:	9f 4f       	sbci	r25, 0xFF	; 255
    1208:	fc 01       	movw	r30, r24
    120a:	80 81       	ld	r24, Z
    120c:	91 81       	ldd	r25, Z+1	; 0x01
    120e:	9c 01       	movw	r18, r24
    1210:	89 81       	ldd	r24, Y+1	; 0x01
    1212:	9a 81       	ldd	r25, Y+2	; 0x02
    1214:	02 96       	adiw	r24, 0x02	; 2
    1216:	b9 01       	movw	r22, r18
    1218:	68 1b       	sub	r22, r24
    121a:	79 0b       	sbc	r23, r25
    121c:	cb 01       	movw	r24, r22
    121e:	74 2f       	mov	r23, r20
    1220:	78 1b       	sub	r23, r24
    1222:	87 2f       	mov	r24, r23
}
    1224:	0f 90       	pop	r0
    1226:	0f 90       	pop	r0
    1228:	df 91       	pop	r29
    122a:	cf 91       	pop	r28
    122c:	08 95       	ret

0000122e <nwkRxInit>:

/*************************************************************************//**
*  @brief Initializes the Rx module
*****************************************************************************/
void nwkRxInit(void)
{
    122e:	cf 93       	push	r28
    1230:	df 93       	push	r29
    1232:	1f 92       	push	r1
    1234:	cd b7       	in	r28, 0x3d	; 61
    1236:	de b7       	in	r29, 0x3e	; 62
	for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++) {
    1238:	19 82       	std	Y+1, r1	; 0x01
    123a:	11 c0       	rjmp	.+34     	; 0x125e <nwkRxInit+0x30>
		nwkRxDuplicateRejectionTable[i].ttl = 0;
    123c:	89 81       	ldd	r24, Y+1	; 0x01
    123e:	28 2f       	mov	r18, r24
    1240:	30 e0       	ldi	r19, 0x00	; 0
    1242:	c9 01       	movw	r24, r18
    1244:	88 0f       	add	r24, r24
    1246:	99 1f       	adc	r25, r25
    1248:	88 0f       	add	r24, r24
    124a:	99 1f       	adc	r25, r25
    124c:	82 0f       	add	r24, r18
    124e:	93 1f       	adc	r25, r19
    1250:	81 51       	subi	r24, 0x11	; 17
    1252:	93 4f       	sbci	r25, 0xF3	; 243
    1254:	fc 01       	movw	r30, r24
    1256:	10 82       	st	Z, r1
/*************************************************************************//**
*  @brief Initializes the Rx module
*****************************************************************************/
void nwkRxInit(void)
{
	for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++) {
    1258:	89 81       	ldd	r24, Y+1	; 0x01
    125a:	8f 5f       	subi	r24, 0xFF	; 255
    125c:	89 83       	std	Y+1, r24	; 0x01
    125e:	89 81       	ldd	r24, Y+1	; 0x01
    1260:	82 33       	cpi	r24, 0x32	; 50
    1262:	60 f3       	brcs	.-40     	; 0x123c <nwkRxInit+0xe>
		nwkRxDuplicateRejectionTable[i].ttl = 0;
	}

	nwkRxDuplicateRejectionTimer.interval
		= NWK_RX_DUPLICATE_REJECTION_TIMER_INTERVAL;
    1264:	84 e6       	ldi	r24, 0x64	; 100
    1266:	90 e0       	ldi	r25, 0x00	; 0
    1268:	a0 e0       	ldi	r26, 0x00	; 0
    126a:	b0 e0       	ldi	r27, 0x00	; 0
    126c:	80 93 ec 0d 	sts	0x0DEC, r24	; 0x800dec <nwkRxDuplicateRejectionTimer+0x6>
    1270:	90 93 ed 0d 	sts	0x0DED, r25	; 0x800ded <nwkRxDuplicateRejectionTimer+0x7>
    1274:	a0 93 ee 0d 	sts	0x0DEE, r26	; 0x800dee <nwkRxDuplicateRejectionTimer+0x8>
    1278:	b0 93 ef 0d 	sts	0x0DEF, r27	; 0x800def <nwkRxDuplicateRejectionTimer+0x9>
	nwkRxDuplicateRejectionTimer.mode = SYS_TIMER_INTERVAL_MODE;
    127c:	10 92 f0 0d 	sts	0x0DF0, r1	; 0x800df0 <nwkRxDuplicateRejectionTimer+0xa>
	nwkRxDuplicateRejectionTimer.handler
		= nwkRxDuplicateRejectionTimerHandler;
    1280:	85 ee       	ldi	r24, 0xE5	; 229
    1282:	9a e0       	ldi	r25, 0x0A	; 10
    1284:	90 93 f2 0d 	sts	0x0DF2, r25	; 0x800df2 <nwkRxDuplicateRejectionTimer+0xc>
    1288:	80 93 f1 0d 	sts	0x0DF1, r24	; 0x800df1 <nwkRxDuplicateRejectionTimer+0xb>

	NWK_OpenEndpoint(NWK_SERVICE_ENDPOINT_ID, nwkRxSeriveDataInd);
    128c:	66 e0       	ldi	r22, 0x06	; 6
    128e:	7c e0       	ldi	r23, 0x0C	; 12
    1290:	80 e0       	ldi	r24, 0x00	; 0
    1292:	0e 94 08 03 	call	0x610	; 0x610 <NWK_OpenEndpoint>
}
    1296:	00 00       	nop
    1298:	0f 90       	pop	r0
    129a:	df 91       	pop	r29
    129c:	cf 91       	pop	r28
    129e:	08 95       	ret

000012a0 <PHY_DataInd>:

/*************************************************************************//**
*****************************************************************************/
void __attribute__((weak)) PHY_DataInd(PHY_DataInd_t *ind)
{
    12a0:	cf 93       	push	r28
    12a2:	df 93       	push	r29
    12a4:	00 d0       	rcall	.+0      	; 0x12a6 <PHY_DataInd+0x6>
    12a6:	00 d0       	rcall	.+0      	; 0x12a8 <PHY_DataInd+0x8>
    12a8:	cd b7       	in	r28, 0x3d	; 61
    12aa:	de b7       	in	r29, 0x3e	; 62
    12ac:	9c 83       	std	Y+4, r25	; 0x04
    12ae:	8b 83       	std	Y+3, r24	; 0x03
	NwkFrame_t *frame;

	// check frame control for a LL-Beacon frame
	if(0x0c == ind->data[0])
    12b0:	8b 81       	ldd	r24, Y+3	; 0x03
    12b2:	9c 81       	ldd	r25, Y+4	; 0x04
    12b4:	fc 01       	movw	r30, r24
    12b6:	80 81       	ld	r24, Z
    12b8:	91 81       	ldd	r25, Z+1	; 0x01
    12ba:	fc 01       	movw	r30, r24
    12bc:	80 81       	ld	r24, Z
    12be:	8c 30       	cpi	r24, 0x0C	; 12
    12c0:	41 f4       	brne	.+16     	; 0x12d2 <PHY_DataInd+0x32>
	{
		if(ind->size < sizeof(NwkFrameBeaconHeaderLLDN_t))
    12c2:	8b 81       	ldd	r24, Y+3	; 0x03
    12c4:	9c 81       	ldd	r25, Y+4	; 0x04
    12c6:	fc 01       	movw	r30, r24
    12c8:	82 81       	ldd	r24, Z+2	; 0x02
    12ca:	87 30       	cpi	r24, 0x07	; 7
    12cc:	08 f0       	brcs	.+2      	; 0x12d0 <PHY_DataInd+0x30>
    12ce:	52 c0       	rjmp	.+164    	; 0x1374 <PHY_DataInd+0xd4>
		{
			return;
    12d0:	e0 c0       	rjmp	.+448    	; 0x1492 <PHY_DataInd+0x1f2>
		}
	}
	// check frame control for a LL-MAC Command frame
	else if(0xcc == ind->data[0])
    12d2:	8b 81       	ldd	r24, Y+3	; 0x03
    12d4:	9c 81       	ldd	r25, Y+4	; 0x04
    12d6:	fc 01       	movw	r30, r24
    12d8:	80 81       	ld	r24, Z
    12da:	91 81       	ldd	r25, Z+1	; 0x01
    12dc:	fc 01       	movw	r30, r24
    12de:	80 81       	ld	r24, Z
    12e0:	8c 3c       	cpi	r24, 0xCC	; 204
    12e2:	41 f4       	brne	.+16     	; 0x12f4 <PHY_DataInd+0x54>
	{
		if(ind->size < sizeof(NwkFrameGeneralHeaderLLDN_t))
    12e4:	8b 81       	ldd	r24, Y+3	; 0x03
    12e6:	9c 81       	ldd	r25, Y+4	; 0x04
    12e8:	fc 01       	movw	r30, r24
    12ea:	82 81       	ldd	r24, Z+2	; 0x02
    12ec:	83 30       	cpi	r24, 0x03	; 3
    12ee:	08 f0       	brcs	.+2      	; 0x12f2 <PHY_DataInd+0x52>
    12f0:	41 c0       	rjmp	.+130    	; 0x1374 <PHY_DataInd+0xd4>
		{
			return;
    12f2:	cf c0       	rjmp	.+414    	; 0x1492 <PHY_DataInd+0x1f2>
		}
	}
	else if(0x88 == ind->data[1])
    12f4:	8b 81       	ldd	r24, Y+3	; 0x03
    12f6:	9c 81       	ldd	r25, Y+4	; 0x04
    12f8:	fc 01       	movw	r30, r24
    12fa:	80 81       	ld	r24, Z
    12fc:	91 81       	ldd	r25, Z+1	; 0x01
    12fe:	01 96       	adiw	r24, 0x01	; 1
    1300:	fc 01       	movw	r30, r24
    1302:	80 81       	ld	r24, Z
    1304:	88 38       	cpi	r24, 0x88	; 136
    1306:	d1 f4       	brne	.+52     	; 0x133c <PHY_DataInd+0x9c>
	{
		if((0x61 != ind->data[0] && 0x41 != ind->data[0]) || ind->size < sizeof(NwkFrameHeader_t))
    1308:	8b 81       	ldd	r24, Y+3	; 0x03
    130a:	9c 81       	ldd	r25, Y+4	; 0x04
    130c:	fc 01       	movw	r30, r24
    130e:	80 81       	ld	r24, Z
    1310:	91 81       	ldd	r25, Z+1	; 0x01
    1312:	fc 01       	movw	r30, r24
    1314:	80 81       	ld	r24, Z
    1316:	81 36       	cpi	r24, 0x61	; 97
    1318:	51 f0       	breq	.+20     	; 0x132e <PHY_DataInd+0x8e>
    131a:	8b 81       	ldd	r24, Y+3	; 0x03
    131c:	9c 81       	ldd	r25, Y+4	; 0x04
    131e:	fc 01       	movw	r30, r24
    1320:	80 81       	ld	r24, Z
    1322:	91 81       	ldd	r25, Z+1	; 0x01
    1324:	fc 01       	movw	r30, r24
    1326:	80 81       	ld	r24, Z
    1328:	81 34       	cpi	r24, 0x41	; 65
    132a:	09 f0       	breq	.+2      	; 0x132e <PHY_DataInd+0x8e>
    132c:	a7 c0       	rjmp	.+334    	; 0x147c <PHY_DataInd+0x1dc>
    132e:	8b 81       	ldd	r24, Y+3	; 0x03
    1330:	9c 81       	ldd	r25, Y+4	; 0x04
    1332:	fc 01       	movw	r30, r24
    1334:	82 81       	ldd	r24, Z+2	; 0x02
    1336:	80 31       	cpi	r24, 0x10	; 16
    1338:	e8 f4       	brcc	.+58     	; 0x1374 <PHY_DataInd+0xd4>
		{
			return;
    133a:	a0 c0       	rjmp	.+320    	; 0x147c <PHY_DataInd+0x1dc>
		}
	}
	else if(0x80 == ind->data[1])
    133c:	8b 81       	ldd	r24, Y+3	; 0x03
    133e:	9c 81       	ldd	r25, Y+4	; 0x04
    1340:	fc 01       	movw	r30, r24
    1342:	80 81       	ld	r24, Z
    1344:	91 81       	ldd	r25, Z+1	; 0x01
    1346:	01 96       	adiw	r24, 0x01	; 1
    1348:	fc 01       	movw	r30, r24
    134a:	80 81       	ld	r24, Z
    134c:	80 38       	cpi	r24, 0x80	; 128
    134e:	09 f0       	breq	.+2      	; 0x1352 <PHY_DataInd+0xb2>
    1350:	97 c0       	rjmp	.+302    	; 0x1480 <PHY_DataInd+0x1e0>
	{
		if((0x00 != ind->data[0]) || ind->size < (sizeof(NwkFrameBeaconHeader_t)))
    1352:	8b 81       	ldd	r24, Y+3	; 0x03
    1354:	9c 81       	ldd	r25, Y+4	; 0x04
    1356:	fc 01       	movw	r30, r24
    1358:	80 81       	ld	r24, Z
    135a:	91 81       	ldd	r25, Z+1	; 0x01
    135c:	fc 01       	movw	r30, r24
    135e:	80 81       	ld	r24, Z
    1360:	88 23       	and	r24, r24
    1362:	09 f0       	breq	.+2      	; 0x1366 <PHY_DataInd+0xc6>
    1364:	8f c0       	rjmp	.+286    	; 0x1484 <PHY_DataInd+0x1e4>
    1366:	8b 81       	ldd	r24, Y+3	; 0x03
    1368:	9c 81       	ldd	r25, Y+4	; 0x04
    136a:	fc 01       	movw	r30, r24
    136c:	82 81       	ldd	r24, Z+2	; 0x02
    136e:	8b 30       	cpi	r24, 0x0B	; 11
    1370:	08 f4       	brcc	.+2      	; 0x1374 <PHY_DataInd+0xd4>
    1372:	88 c0       	rjmp	.+272    	; 0x1484 <PHY_DataInd+0x1e4>
	else
	{
		return;
	}

	if(ind->data[1] == 0x88 || ind->data[1] == 0x80)
    1374:	8b 81       	ldd	r24, Y+3	; 0x03
    1376:	9c 81       	ldd	r25, Y+4	; 0x04
    1378:	fc 01       	movw	r30, r24
    137a:	80 81       	ld	r24, Z
    137c:	91 81       	ldd	r25, Z+1	; 0x01
    137e:	01 96       	adiw	r24, 0x01	; 1
    1380:	fc 01       	movw	r30, r24
    1382:	80 81       	ld	r24, Z
    1384:	88 38       	cpi	r24, 0x88	; 136
    1386:	51 f0       	breq	.+20     	; 0x139c <PHY_DataInd+0xfc>
    1388:	8b 81       	ldd	r24, Y+3	; 0x03
    138a:	9c 81       	ldd	r25, Y+4	; 0x04
    138c:	fc 01       	movw	r30, r24
    138e:	80 81       	ld	r24, Z
    1390:	91 81       	ldd	r25, Z+1	; 0x01
    1392:	01 96       	adiw	r24, 0x01	; 1
    1394:	fc 01       	movw	r30, r24
    1396:	80 81       	ld	r24, Z
    1398:	80 38       	cpi	r24, 0x80	; 128
    139a:	d9 f4       	brne	.+54     	; 0x13d2 <PHY_DataInd+0x132>
	{
		if (NULL == (frame = nwkFrameAlloc())) {
    139c:	0e 94 78 07 	call	0xef0	; 0xef0 <nwkFrameAlloc>
    13a0:	9a 83       	std	Y+2, r25	; 0x02
    13a2:	89 83       	std	Y+1, r24	; 0x01
    13a4:	89 81       	ldd	r24, Y+1	; 0x01
    13a6:	9a 81       	ldd	r25, Y+2	; 0x02
    13a8:	89 2b       	or	r24, r25
    13aa:	09 f4       	brne	.+2      	; 0x13ae <PHY_DataInd+0x10e>
    13ac:	6d c0       	rjmp	.+218    	; 0x1488 <PHY_DataInd+0x1e8>
			return;
		}
		// if frame received is NwkFrameHeader change state to Receveid
		// if frame receveid is a 802.15.4 beacon change state to Beacon
		frame->state = ((0x88 == ind->data[1]) ? NWK_RX_STATE_RECEIVED : NWK_RX_STATE_BEACON);
    13ae:	8b 81       	ldd	r24, Y+3	; 0x03
    13b0:	9c 81       	ldd	r25, Y+4	; 0x04
    13b2:	fc 01       	movw	r30, r24
    13b4:	80 81       	ld	r24, Z
    13b6:	91 81       	ldd	r25, Z+1	; 0x01
    13b8:	01 96       	adiw	r24, 0x01	; 1
    13ba:	fc 01       	movw	r30, r24
    13bc:	80 81       	ld	r24, Z
    13be:	88 38       	cpi	r24, 0x88	; 136
    13c0:	11 f4       	brne	.+4      	; 0x13c6 <PHY_DataInd+0x126>
    13c2:	20 e2       	ldi	r18, 0x20	; 32
    13c4:	01 c0       	rjmp	.+2      	; 0x13c8 <PHY_DataInd+0x128>
    13c6:	25 e2       	ldi	r18, 0x25	; 37
    13c8:	89 81       	ldd	r24, Y+1	; 0x01
    13ca:	9a 81       	ldd	r25, Y+2	; 0x02
    13cc:	fc 01       	movw	r30, r24
    13ce:	20 83       	st	Z, r18
    13d0:	27 c0       	rjmp	.+78     	; 0x1420 <PHY_DataInd+0x180>
	}
	// allocate frame buffer according to received frame
	else if(ind->data[0] == 0x0c)
    13d2:	8b 81       	ldd	r24, Y+3	; 0x03
    13d4:	9c 81       	ldd	r25, Y+4	; 0x04
    13d6:	fc 01       	movw	r30, r24
    13d8:	80 81       	ld	r24, Z
    13da:	91 81       	ldd	r25, Z+1	; 0x01
    13dc:	fc 01       	movw	r30, r24
    13de:	80 81       	ld	r24, Z
    13e0:	8c 30       	cpi	r24, 0x0C	; 12
    13e2:	81 f4       	brne	.+32     	; 0x1404 <PHY_DataInd+0x164>
	{
		// allocates a LL-Beacon frame
		if (NULL == (frame = nwkFrameAlloc_LLDN(true))){
    13e4:	81 e0       	ldi	r24, 0x01	; 1
    13e6:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <nwkFrameAlloc_LLDN>
    13ea:	9a 83       	std	Y+2, r25	; 0x02
    13ec:	89 83       	std	Y+1, r24	; 0x01
    13ee:	89 81       	ldd	r24, Y+1	; 0x01
    13f0:	9a 81       	ldd	r25, Y+2	; 0x02
    13f2:	89 2b       	or	r24, r25
    13f4:	09 f4       	brne	.+2      	; 0x13f8 <PHY_DataInd+0x158>
    13f6:	4a c0       	rjmp	.+148    	; 0x148c <PHY_DataInd+0x1ec>
			return;
		}
		// if frame receveid is LL-Beacon change state to LLBEACON
		frame->state = NWK_RX_STATE_LLBEACON;
    13f8:	89 81       	ldd	r24, Y+1	; 0x01
    13fa:	9a 81       	ldd	r25, Y+2	; 0x02
    13fc:	26 e2       	ldi	r18, 0x26	; 38
    13fe:	fc 01       	movw	r30, r24
    1400:	20 83       	st	Z, r18
    1402:	0e c0       	rjmp	.+28     	; 0x1420 <PHY_DataInd+0x180>
	}
	else
	{
		// allocates a LL-MAC command or LL-Data frame
		if (NULL == (frame = nwkFrameAlloc_LLDN(false))){
    1404:	80 e0       	ldi	r24, 0x00	; 0
    1406:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <nwkFrameAlloc_LLDN>
    140a:	9a 83       	std	Y+2, r25	; 0x02
    140c:	89 83       	std	Y+1, r24	; 0x01
    140e:	89 81       	ldd	r24, Y+1	; 0x01
    1410:	9a 81       	ldd	r25, Y+2	; 0x02
    1412:	89 2b       	or	r24, r25
    1414:	e9 f1       	breq	.+122    	; 0x1490 <PHY_DataInd+0x1f0>
			return;
		}
		frame->state = NWK_RX_STATE_LLCOMMAND;
    1416:	89 81       	ldd	r24, Y+1	; 0x01
    1418:	9a 81       	ldd	r25, Y+2	; 0x02
    141a:	27 e2       	ldi	r18, 0x27	; 39
    141c:	fc 01       	movw	r30, r24
    141e:	20 83       	st	Z, r18
	}

	frame->size = ind->size;
    1420:	8b 81       	ldd	r24, Y+3	; 0x03
    1422:	9c 81       	ldd	r25, Y+4	; 0x04
    1424:	fc 01       	movw	r30, r24
    1426:	22 81       	ldd	r18, Z+2	; 0x02
    1428:	89 81       	ldd	r24, Y+1	; 0x01
    142a:	9a 81       	ldd	r25, Y+2	; 0x02
    142c:	fc 01       	movw	r30, r24
    142e:	21 83       	std	Z+1, r18	; 0x01
	frame->rx.lqi = ind->lqi;
    1430:	8b 81       	ldd	r24, Y+3	; 0x03
    1432:	9c 81       	ldd	r25, Y+4	; 0x04
    1434:	fc 01       	movw	r30, r24
    1436:	23 81       	ldd	r18, Z+3	; 0x03
    1438:	89 81       	ldd	r24, Y+1	; 0x01
    143a:	9a 81       	ldd	r25, Y+2	; 0x02
    143c:	8d 57       	subi	r24, 0x7D	; 125
    143e:	9f 4f       	sbci	r25, 0xFF	; 255
    1440:	fc 01       	movw	r30, r24
    1442:	20 83       	st	Z, r18
	frame->rx.rssi = ind->rssi;
    1444:	8b 81       	ldd	r24, Y+3	; 0x03
    1446:	9c 81       	ldd	r25, Y+4	; 0x04
    1448:	fc 01       	movw	r30, r24
    144a:	24 81       	ldd	r18, Z+4	; 0x04
    144c:	89 81       	ldd	r24, Y+1	; 0x01
    144e:	9a 81       	ldd	r25, Y+2	; 0x02
    1450:	8c 57       	subi	r24, 0x7C	; 124
    1452:	9f 4f       	sbci	r25, 0xFF	; 255
    1454:	fc 01       	movw	r30, r24
    1456:	20 83       	st	Z, r18
	memcpy(frame->data, ind->data, ind->size);
    1458:	8b 81       	ldd	r24, Y+3	; 0x03
    145a:	9c 81       	ldd	r25, Y+4	; 0x04
    145c:	fc 01       	movw	r30, r24
    145e:	82 81       	ldd	r24, Z+2	; 0x02
    1460:	48 2f       	mov	r20, r24
    1462:	50 e0       	ldi	r21, 0x00	; 0
    1464:	8b 81       	ldd	r24, Y+3	; 0x03
    1466:	9c 81       	ldd	r25, Y+4	; 0x04
    1468:	fc 01       	movw	r30, r24
    146a:	20 81       	ld	r18, Z
    146c:	31 81       	ldd	r19, Z+1	; 0x01
    146e:	89 81       	ldd	r24, Y+1	; 0x01
    1470:	9a 81       	ldd	r25, Y+2	; 0x02
    1472:	02 96       	adiw	r24, 0x02	; 2
    1474:	b9 01       	movw	r22, r18
    1476:	0e 94 80 45 	call	0x8b00	; 0x8b00 <memcpy>
    147a:	0b c0       	rjmp	.+22     	; 0x1492 <PHY_DataInd+0x1f2>
	}
	else if(0x88 == ind->data[1])
	{
		if((0x61 != ind->data[0] && 0x41 != ind->data[0]) || ind->size < sizeof(NwkFrameHeader_t))
		{
			return;
    147c:	00 00       	nop
    147e:	09 c0       	rjmp	.+18     	; 0x1492 <PHY_DataInd+0x1f2>
			return;
		}
	}
	else
	{
		return;
    1480:	00 00       	nop
    1482:	07 c0       	rjmp	.+14     	; 0x1492 <PHY_DataInd+0x1f2>
	}
	else if(0x80 == ind->data[1])
	{
		if((0x00 != ind->data[0]) || ind->size < (sizeof(NwkFrameBeaconHeader_t)))
		{
			return;
    1484:	00 00       	nop
    1486:	05 c0       	rjmp	.+10     	; 0x1492 <PHY_DataInd+0x1f2>
	}

	if(ind->data[1] == 0x88 || ind->data[1] == 0x80)
	{
		if (NULL == (frame = nwkFrameAlloc())) {
			return;
    1488:	00 00       	nop
    148a:	03 c0       	rjmp	.+6      	; 0x1492 <PHY_DataInd+0x1f2>
	// allocate frame buffer according to received frame
	else if(ind->data[0] == 0x0c)
	{
		// allocates a LL-Beacon frame
		if (NULL == (frame = nwkFrameAlloc_LLDN(true))){
			return;
    148c:	00 00       	nop
    148e:	01 c0       	rjmp	.+2      	; 0x1492 <PHY_DataInd+0x1f2>
	}
	else
	{
		// allocates a LL-MAC command or LL-Data frame
		if (NULL == (frame = nwkFrameAlloc_LLDN(false))){
			return;
    1490:	00 00       	nop

	frame->size = ind->size;
	frame->rx.lqi = ind->lqi;
	frame->rx.rssi = ind->rssi;
	memcpy(frame->data, ind->data, ind->size);
}
    1492:	0f 90       	pop	r0
    1494:	0f 90       	pop	r0
    1496:	0f 90       	pop	r0
    1498:	0f 90       	pop	r0
    149a:	df 91       	pop	r29
    149c:	cf 91       	pop	r28
    149e:	08 95       	ret

000014a0 <nwkRxSendAck>:


/*************************************************************************//**
*****************************************************************************/
static void nwkRxSendAck(NwkFrame_t *frame)
{
    14a0:	cf 93       	push	r28
    14a2:	df 93       	push	r29
    14a4:	00 d0       	rcall	.+0      	; 0x14a6 <nwkRxSendAck+0x6>
    14a6:	00 d0       	rcall	.+0      	; 0x14a8 <nwkRxSendAck+0x8>
    14a8:	00 d0       	rcall	.+0      	; 0x14aa <nwkRxSendAck+0xa>
    14aa:	cd b7       	in	r28, 0x3d	; 61
    14ac:	de b7       	in	r29, 0x3e	; 62
    14ae:	9e 83       	std	Y+6, r25	; 0x06
    14b0:	8d 83       	std	Y+5, r24	; 0x05
	NwkFrame_t *ack;
	NwkCommandAck_t *command;

	if (NULL == (ack = nwkFrameAlloc())) {
    14b2:	0e 94 78 07 	call	0xef0	; 0xef0 <nwkFrameAlloc>
    14b6:	9a 83       	std	Y+2, r25	; 0x02
    14b8:	89 83       	std	Y+1, r24	; 0x01
    14ba:	89 81       	ldd	r24, Y+1	; 0x01
    14bc:	9a 81       	ldd	r25, Y+2	; 0x02
    14be:	89 2b       	or	r24, r25
    14c0:	09 f4       	brne	.+2      	; 0x14c4 <nwkRxSendAck+0x24>
    14c2:	6b c0       	rjmp	.+214    	; 0x159a <nwkRxSendAck+0xfa>
		return;
	}

	frame->size += sizeof(NwkFrameHeader_t);
    14c4:	8d 81       	ldd	r24, Y+5	; 0x05
    14c6:	9e 81       	ldd	r25, Y+6	; 0x06
    14c8:	fc 01       	movw	r30, r24
    14ca:	81 81       	ldd	r24, Z+1	; 0x01
    14cc:	20 e1       	ldi	r18, 0x10	; 16
    14ce:	28 0f       	add	r18, r24
    14d0:	8d 81       	ldd	r24, Y+5	; 0x05
    14d2:	9e 81       	ldd	r25, Y+6	; 0x06
    14d4:	fc 01       	movw	r30, r24
    14d6:	21 83       	std	Z+1, r18	; 0x01
	frame->payload += sizeof(NwkFrameHeader_t);
    14d8:	8d 81       	ldd	r24, Y+5	; 0x05
    14da:	9e 81       	ldd	r25, Y+6	; 0x06
    14dc:	8f 57       	subi	r24, 0x7F	; 127
    14de:	9f 4f       	sbci	r25, 0xFF	; 255
    14e0:	fc 01       	movw	r30, r24
    14e2:	80 81       	ld	r24, Z
    14e4:	91 81       	ldd	r25, Z+1	; 0x01
    14e6:	9c 01       	movw	r18, r24
    14e8:	20 5f       	subi	r18, 0xF0	; 240
    14ea:	3f 4f       	sbci	r19, 0xFF	; 255
    14ec:	8d 81       	ldd	r24, Y+5	; 0x05
    14ee:	9e 81       	ldd	r25, Y+6	; 0x06
    14f0:	8f 57       	subi	r24, 0x7F	; 127
    14f2:	9f 4f       	sbci	r25, 0xFF	; 255
    14f4:	fc 01       	movw	r30, r24
    14f6:	31 83       	std	Z+1, r19	; 0x01
    14f8:	20 83       	st	Z, r18

	nwkFrameCommandInit(ack);
    14fa:	89 81       	ldd	r24, Y+1	; 0x01
    14fc:	9a 81       	ldd	r25, Y+2	; 0x02
    14fe:	0e 94 ce 08 	call	0x119c	; 0x119c <nwkFrameCommandInit>

	ack->size += sizeof(NwkCommandAck_t);
    1502:	89 81       	ldd	r24, Y+1	; 0x01
    1504:	9a 81       	ldd	r25, Y+2	; 0x02
    1506:	fc 01       	movw	r30, r24
    1508:	81 81       	ldd	r24, Z+1	; 0x01
    150a:	23 e0       	ldi	r18, 0x03	; 3
    150c:	28 0f       	add	r18, r24
    150e:	89 81       	ldd	r24, Y+1	; 0x01
    1510:	9a 81       	ldd	r25, Y+2	; 0x02
    1512:	fc 01       	movw	r30, r24
    1514:	21 83       	std	Z+1, r18	; 0x01
	ack->tx.confirm = NULL;
    1516:	89 81       	ldd	r24, Y+1	; 0x01
    1518:	9a 81       	ldd	r25, Y+2	; 0x02
    151a:	89 57       	subi	r24, 0x79	; 121
    151c:	9f 4f       	sbci	r25, 0xFF	; 255
    151e:	fc 01       	movw	r30, r24
    1520:	11 82       	std	Z+1, r1	; 0x01
    1522:	10 82       	st	Z, r1

	ack->header.nwkFcf.security = frame->header.nwkFcf.security;
    1524:	8d 81       	ldd	r24, Y+5	; 0x05
    1526:	9e 81       	ldd	r25, Y+6	; 0x06
    1528:	fc 01       	movw	r30, r24
    152a:	83 85       	ldd	r24, Z+11	; 0x0b
    152c:	81 fb       	bst	r24, 1
    152e:	22 27       	eor	r18, r18
    1530:	20 f9       	bld	r18, 0
    1532:	89 81       	ldd	r24, Y+1	; 0x01
    1534:	9a 81       	ldd	r25, Y+2	; 0x02
    1536:	21 70       	andi	r18, 0x01	; 1
    1538:	22 0f       	add	r18, r18
    153a:	fc 01       	movw	r30, r24
    153c:	33 85       	ldd	r19, Z+11	; 0x0b
    153e:	3d 7f       	andi	r19, 0xFD	; 253
    1540:	23 2b       	or	r18, r19
    1542:	fc 01       	movw	r30, r24
    1544:	23 87       	std	Z+11, r18	; 0x0b
	ack->header.nwkDstAddr = frame->header.nwkSrcAddr;
    1546:	8d 81       	ldd	r24, Y+5	; 0x05
    1548:	9e 81       	ldd	r25, Y+6	; 0x06
    154a:	fc 01       	movw	r30, r24
    154c:	25 85       	ldd	r18, Z+13	; 0x0d
    154e:	36 85       	ldd	r19, Z+14	; 0x0e
    1550:	89 81       	ldd	r24, Y+1	; 0x01
    1552:	9a 81       	ldd	r25, Y+2	; 0x02
    1554:	fc 01       	movw	r30, r24
    1556:	30 8b       	std	Z+16, r19	; 0x10
    1558:	27 87       	std	Z+15, r18	; 0x0f

	command = (NwkCommandAck_t *)ack->payload;
    155a:	89 81       	ldd	r24, Y+1	; 0x01
    155c:	9a 81       	ldd	r25, Y+2	; 0x02
    155e:	8f 57       	subi	r24, 0x7F	; 127
    1560:	9f 4f       	sbci	r25, 0xFF	; 255
    1562:	fc 01       	movw	r30, r24
    1564:	80 81       	ld	r24, Z
    1566:	91 81       	ldd	r25, Z+1	; 0x01
    1568:	9c 83       	std	Y+4, r25	; 0x04
    156a:	8b 83       	std	Y+3, r24	; 0x03
	command->id = NWK_COMMAND_ACK;
    156c:	8b 81       	ldd	r24, Y+3	; 0x03
    156e:	9c 81       	ldd	r25, Y+4	; 0x04
    1570:	fc 01       	movw	r30, r24
    1572:	10 82       	st	Z, r1
	command->control = nwkRxAckControl;
    1574:	20 91 e5 0d 	lds	r18, 0x0DE5	; 0x800de5 <nwkRxAckControl>
    1578:	8b 81       	ldd	r24, Y+3	; 0x03
    157a:	9c 81       	ldd	r25, Y+4	; 0x04
    157c:	fc 01       	movw	r30, r24
    157e:	22 83       	std	Z+2, r18	; 0x02
	command->seq = frame->header.nwkSeq;
    1580:	8d 81       	ldd	r24, Y+5	; 0x05
    1582:	9e 81       	ldd	r25, Y+6	; 0x06
    1584:	fc 01       	movw	r30, r24
    1586:	24 85       	ldd	r18, Z+12	; 0x0c
    1588:	8b 81       	ldd	r24, Y+3	; 0x03
    158a:	9c 81       	ldd	r25, Y+4	; 0x04
    158c:	fc 01       	movw	r30, r24
    158e:	21 83       	std	Z+1, r18	; 0x01

	nwkTxFrame(ack);
    1590:	89 81       	ldd	r24, Y+1	; 0x01
    1592:	9a 81       	ldd	r25, Y+2	; 0x02
    1594:	0e 94 c5 10 	call	0x218a	; 0x218a <nwkTxFrame>
    1598:	01 c0       	rjmp	.+2      	; 0x159c <nwkRxSendAck+0xfc>
{
	NwkFrame_t *ack;
	NwkCommandAck_t *command;

	if (NULL == (ack = nwkFrameAlloc())) {
		return;
    159a:	00 00       	nop
	command->id = NWK_COMMAND_ACK;
	command->control = nwkRxAckControl;
	command->seq = frame->header.nwkSeq;

	nwkTxFrame(ack);
}
    159c:	26 96       	adiw	r28, 0x06	; 6
    159e:	0f b6       	in	r0, 0x3f	; 63
    15a0:	f8 94       	cli
    15a2:	de bf       	out	0x3e, r29	; 62
    15a4:	0f be       	out	0x3f, r0	; 63
    15a6:	cd bf       	out	0x3d, r28	; 61
    15a8:	df 91       	pop	r29
    15aa:	cf 91       	pop	r28
    15ac:	08 95       	ret

000015ae <NWK_SetAckControl>:

/*************************************************************************//**
*****************************************************************************/
void NWK_SetAckControl(uint8_t control)
{
    15ae:	cf 93       	push	r28
    15b0:	df 93       	push	r29
    15b2:	1f 92       	push	r1
    15b4:	cd b7       	in	r28, 0x3d	; 61
    15b6:	de b7       	in	r29, 0x3e	; 62
    15b8:	89 83       	std	Y+1, r24	; 0x01
	nwkRxAckControl = control;
    15ba:	89 81       	ldd	r24, Y+1	; 0x01
    15bc:	80 93 e5 0d 	sts	0x0DE5, r24	; 0x800de5 <nwkRxAckControl>
}
    15c0:	00 00       	nop
    15c2:	0f 90       	pop	r0
    15c4:	df 91       	pop	r29
    15c6:	cf 91       	pop	r28
    15c8:	08 95       	ret

000015ca <nwkRxDuplicateRejectionTimerHandler>:
#endif

/*************************************************************************//**
*****************************************************************************/
static void nwkRxDuplicateRejectionTimerHandler(SYS_Timer_t *timer)
{
    15ca:	cf 93       	push	r28
    15cc:	df 93       	push	r29
    15ce:	00 d0       	rcall	.+0      	; 0x15d0 <nwkRxDuplicateRejectionTimerHandler+0x6>
    15d0:	00 d0       	rcall	.+0      	; 0x15d2 <nwkRxDuplicateRejectionTimerHandler+0x8>
    15d2:	cd b7       	in	r28, 0x3d	; 61
    15d4:	de b7       	in	r29, 0x3e	; 62
    15d6:	9c 83       	std	Y+4, r25	; 0x04
    15d8:	8b 83       	std	Y+3, r24	; 0x03
	bool restart = false;
    15da:	19 82       	std	Y+1, r1	; 0x01

	for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++) {
    15dc:	1a 82       	std	Y+2, r1	; 0x02
    15de:	30 c0       	rjmp	.+96     	; 0x1640 <nwkRxDuplicateRejectionTimerHandler+0x76>
		if (nwkRxDuplicateRejectionTable[i].ttl) {
    15e0:	8a 81       	ldd	r24, Y+2	; 0x02
    15e2:	28 2f       	mov	r18, r24
    15e4:	30 e0       	ldi	r19, 0x00	; 0
    15e6:	c9 01       	movw	r24, r18
    15e8:	88 0f       	add	r24, r24
    15ea:	99 1f       	adc	r25, r25
    15ec:	88 0f       	add	r24, r24
    15ee:	99 1f       	adc	r25, r25
    15f0:	82 0f       	add	r24, r18
    15f2:	93 1f       	adc	r25, r19
    15f4:	81 51       	subi	r24, 0x11	; 17
    15f6:	93 4f       	sbci	r25, 0xF3	; 243
    15f8:	fc 01       	movw	r30, r24
    15fa:	80 81       	ld	r24, Z
    15fc:	88 23       	and	r24, r24
    15fe:	e9 f0       	breq	.+58     	; 0x163a <nwkRxDuplicateRejectionTimerHandler+0x70>
			nwkRxDuplicateRejectionTable[i].ttl--;
    1600:	8a 81       	ldd	r24, Y+2	; 0x02
    1602:	28 2f       	mov	r18, r24
    1604:	30 e0       	ldi	r19, 0x00	; 0
    1606:	c9 01       	movw	r24, r18
    1608:	88 0f       	add	r24, r24
    160a:	99 1f       	adc	r25, r25
    160c:	88 0f       	add	r24, r24
    160e:	99 1f       	adc	r25, r25
    1610:	82 0f       	add	r24, r18
    1612:	93 1f       	adc	r25, r19
    1614:	81 51       	subi	r24, 0x11	; 17
    1616:	93 4f       	sbci	r25, 0xF3	; 243
    1618:	fc 01       	movw	r30, r24
    161a:	80 81       	ld	r24, Z
    161c:	4f ef       	ldi	r20, 0xFF	; 255
    161e:	48 0f       	add	r20, r24
    1620:	c9 01       	movw	r24, r18
    1622:	88 0f       	add	r24, r24
    1624:	99 1f       	adc	r25, r25
    1626:	88 0f       	add	r24, r24
    1628:	99 1f       	adc	r25, r25
    162a:	82 0f       	add	r24, r18
    162c:	93 1f       	adc	r25, r19
    162e:	81 51       	subi	r24, 0x11	; 17
    1630:	93 4f       	sbci	r25, 0xF3	; 243
    1632:	fc 01       	movw	r30, r24
    1634:	40 83       	st	Z, r20
			restart = true;
    1636:	81 e0       	ldi	r24, 0x01	; 1
    1638:	89 83       	std	Y+1, r24	; 0x01
*****************************************************************************/
static void nwkRxDuplicateRejectionTimerHandler(SYS_Timer_t *timer)
{
	bool restart = false;

	for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++) {
    163a:	8a 81       	ldd	r24, Y+2	; 0x02
    163c:	8f 5f       	subi	r24, 0xFF	; 255
    163e:	8a 83       	std	Y+2, r24	; 0x02
    1640:	8a 81       	ldd	r24, Y+2	; 0x02
    1642:	82 33       	cpi	r24, 0x32	; 50
    1644:	68 f2       	brcs	.-102    	; 0x15e0 <nwkRxDuplicateRejectionTimerHandler+0x16>
			nwkRxDuplicateRejectionTable[i].ttl--;
			restart = true;
		}
	}

	if (restart) {
    1646:	89 81       	ldd	r24, Y+1	; 0x01
    1648:	88 23       	and	r24, r24
    164a:	21 f0       	breq	.+8      	; 0x1654 <nwkRxDuplicateRejectionTimerHandler+0x8a>
		SYS_TimerStart(timer);
    164c:	8b 81       	ldd	r24, Y+3	; 0x03
    164e:	9c 81       	ldd	r25, Y+4	; 0x04
    1650:	0e 94 2c 18 	call	0x3058	; 0x3058 <SYS_TimerStart>
	}
}
    1654:	00 00       	nop
    1656:	0f 90       	pop	r0
    1658:	0f 90       	pop	r0
    165a:	0f 90       	pop	r0
    165c:	0f 90       	pop	r0
    165e:	df 91       	pop	r29
    1660:	cf 91       	pop	r28
    1662:	08 95       	ret

00001664 <nwkRxRejectDuplicate>:

/*************************************************************************//**
*****************************************************************************/
static bool nwkRxRejectDuplicate(NwkFrameHeader_t *header)
{
    1664:	cf 93       	push	r28
    1666:	df 93       	push	r29
    1668:	cd b7       	in	r28, 0x3d	; 61
    166a:	de b7       	in	r29, 0x3e	; 62
    166c:	29 97       	sbiw	r28, 0x09	; 9
    166e:	0f b6       	in	r0, 0x3f	; 63
    1670:	f8 94       	cli
    1672:	de bf       	out	0x3e, r29	; 62
    1674:	0f be       	out	0x3f, r0	; 63
    1676:	cd bf       	out	0x3d, r28	; 61
    1678:	99 87       	std	Y+9, r25	; 0x09
    167a:	88 87       	std	Y+8, r24	; 0x08
	NwkDuplicateRejectionEntry_t *entry;
	NwkDuplicateRejectionEntry_t *freeEntry = NULL;
    167c:	1a 82       	std	Y+2, r1	; 0x02
    167e:	19 82       	std	Y+1, r1	; 0x01

	for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++) {
    1680:	1b 82       	std	Y+3, r1	; 0x03
    1682:	90 c0       	rjmp	.+288    	; 0x17a4 <nwkRxRejectDuplicate+0x140>
		entry = &nwkRxDuplicateRejectionTable[i];
    1684:	8b 81       	ldd	r24, Y+3	; 0x03
    1686:	28 2f       	mov	r18, r24
    1688:	30 e0       	ldi	r19, 0x00	; 0
    168a:	c9 01       	movw	r24, r18
    168c:	88 0f       	add	r24, r24
    168e:	99 1f       	adc	r25, r25
    1690:	88 0f       	add	r24, r24
    1692:	99 1f       	adc	r25, r25
    1694:	82 0f       	add	r24, r18
    1696:	93 1f       	adc	r25, r19
    1698:	85 51       	subi	r24, 0x15	; 21
    169a:	93 4f       	sbci	r25, 0xF3	; 243
    169c:	9d 83       	std	Y+5, r25	; 0x05
    169e:	8c 83       	std	Y+4, r24	; 0x04

		if (entry->ttl && header->nwkSrcAddr == entry->src) {
    16a0:	8c 81       	ldd	r24, Y+4	; 0x04
    16a2:	9d 81       	ldd	r25, Y+5	; 0x05
    16a4:	fc 01       	movw	r30, r24
    16a6:	84 81       	ldd	r24, Z+4	; 0x04
    16a8:	88 23       	and	r24, r24
    16aa:	09 f4       	brne	.+2      	; 0x16ae <nwkRxRejectDuplicate+0x4a>
    16ac:	6e c0       	rjmp	.+220    	; 0x178a <nwkRxRejectDuplicate+0x126>
    16ae:	88 85       	ldd	r24, Y+8	; 0x08
    16b0:	99 85       	ldd	r25, Y+9	; 0x09
    16b2:	fc 01       	movw	r30, r24
    16b4:	23 85       	ldd	r18, Z+11	; 0x0b
    16b6:	34 85       	ldd	r19, Z+12	; 0x0c
    16b8:	8c 81       	ldd	r24, Y+4	; 0x04
    16ba:	9d 81       	ldd	r25, Y+5	; 0x05
    16bc:	fc 01       	movw	r30, r24
    16be:	80 81       	ld	r24, Z
    16c0:	91 81       	ldd	r25, Z+1	; 0x01
    16c2:	28 17       	cp	r18, r24
    16c4:	39 07       	cpc	r19, r25
    16c6:	09 f0       	breq	.+2      	; 0x16ca <nwkRxRejectDuplicate+0x66>
    16c8:	60 c0       	rjmp	.+192    	; 0x178a <nwkRxRejectDuplicate+0x126>
			uint8_t diff = (int8_t)entry->seq - header->nwkSeq;
    16ca:	8c 81       	ldd	r24, Y+4	; 0x04
    16cc:	9d 81       	ldd	r25, Y+5	; 0x05
    16ce:	fc 01       	movw	r30, r24
    16d0:	22 81       	ldd	r18, Z+2	; 0x02
    16d2:	88 85       	ldd	r24, Y+8	; 0x08
    16d4:	99 85       	ldd	r25, Y+9	; 0x09
    16d6:	fc 01       	movw	r30, r24
    16d8:	82 85       	ldd	r24, Z+10	; 0x0a
    16da:	f2 2f       	mov	r31, r18
    16dc:	f8 1b       	sub	r31, r24
    16de:	8f 2f       	mov	r24, r31
    16e0:	8e 83       	std	Y+6, r24	; 0x06

			if (diff < 8) {
    16e2:	8e 81       	ldd	r24, Y+6	; 0x06
    16e4:	88 30       	cpi	r24, 0x08	; 8
    16e6:	58 f5       	brcc	.+86     	; 0x173e <nwkRxRejectDuplicate+0xda>
				if (entry->mask & (1 << diff)) {
    16e8:	8c 81       	ldd	r24, Y+4	; 0x04
    16ea:	9d 81       	ldd	r25, Y+5	; 0x05
    16ec:	fc 01       	movw	r30, r24
    16ee:	83 81       	ldd	r24, Z+3	; 0x03
    16f0:	88 2f       	mov	r24, r24
    16f2:	90 e0       	ldi	r25, 0x00	; 0
    16f4:	2e 81       	ldd	r18, Y+6	; 0x06
    16f6:	22 2f       	mov	r18, r18
    16f8:	30 e0       	ldi	r19, 0x00	; 0
    16fa:	02 c0       	rjmp	.+4      	; 0x1700 <nwkRxRejectDuplicate+0x9c>
    16fc:	95 95       	asr	r25
    16fe:	87 95       	ror	r24
    1700:	2a 95       	dec	r18
    1702:	e2 f7       	brpl	.-8      	; 0x16fc <nwkRxRejectDuplicate+0x98>
    1704:	81 70       	andi	r24, 0x01	; 1
    1706:	99 27       	eor	r25, r25
    1708:	89 2b       	or	r24, r25
    170a:	11 f0       	breq	.+4      	; 0x1710 <nwkRxRejectDuplicate+0xac>
								header->nwkDstAddr,
								header->nwkFcf.multicast);
					}

	#endif
					return true;
    170c:	81 e0       	ldi	r24, 0x01	; 1
    170e:	75 c0       	rjmp	.+234    	; 0x17fa <nwkRxRejectDuplicate+0x196>
				}

				entry->mask |= (1 << diff);
    1710:	8c 81       	ldd	r24, Y+4	; 0x04
    1712:	9d 81       	ldd	r25, Y+5	; 0x05
    1714:	fc 01       	movw	r30, r24
    1716:	83 81       	ldd	r24, Z+3	; 0x03
    1718:	48 2f       	mov	r20, r24
    171a:	8e 81       	ldd	r24, Y+6	; 0x06
    171c:	28 2f       	mov	r18, r24
    171e:	30 e0       	ldi	r19, 0x00	; 0
    1720:	81 e0       	ldi	r24, 0x01	; 1
    1722:	90 e0       	ldi	r25, 0x00	; 0
    1724:	02 c0       	rjmp	.+4      	; 0x172a <nwkRxRejectDuplicate+0xc6>
    1726:	88 0f       	add	r24, r24
    1728:	99 1f       	adc	r25, r25
    172a:	2a 95       	dec	r18
    172c:	e2 f7       	brpl	.-8      	; 0x1726 <nwkRxRejectDuplicate+0xc2>
    172e:	84 2b       	or	r24, r20
    1730:	28 2f       	mov	r18, r24
    1732:	8c 81       	ldd	r24, Y+4	; 0x04
    1734:	9d 81       	ldd	r25, Y+5	; 0x05
    1736:	fc 01       	movw	r30, r24
    1738:	23 83       	std	Z+3, r18	; 0x03
				return false;
    173a:	80 e0       	ldi	r24, 0x00	; 0
    173c:	5e c0       	rjmp	.+188    	; 0x17fa <nwkRxRejectDuplicate+0x196>
			} else {
				uint8_t shift = -(int8_t)diff;
    173e:	8e 81       	ldd	r24, Y+6	; 0x06
    1740:	81 95       	neg	r24
    1742:	8f 83       	std	Y+7, r24	; 0x07

				entry->seq = header->nwkSeq;
    1744:	88 85       	ldd	r24, Y+8	; 0x08
    1746:	99 85       	ldd	r25, Y+9	; 0x09
    1748:	fc 01       	movw	r30, r24
    174a:	22 85       	ldd	r18, Z+10	; 0x0a
    174c:	8c 81       	ldd	r24, Y+4	; 0x04
    174e:	9d 81       	ldd	r25, Y+5	; 0x05
    1750:	fc 01       	movw	r30, r24
    1752:	22 83       	std	Z+2, r18	; 0x02
				entry->mask = (entry->mask << shift) | 1;
    1754:	8c 81       	ldd	r24, Y+4	; 0x04
    1756:	9d 81       	ldd	r25, Y+5	; 0x05
    1758:	fc 01       	movw	r30, r24
    175a:	83 81       	ldd	r24, Z+3	; 0x03
    175c:	88 2f       	mov	r24, r24
    175e:	90 e0       	ldi	r25, 0x00	; 0
    1760:	2f 81       	ldd	r18, Y+7	; 0x07
    1762:	22 2f       	mov	r18, r18
    1764:	30 e0       	ldi	r19, 0x00	; 0
    1766:	02 c0       	rjmp	.+4      	; 0x176c <nwkRxRejectDuplicate+0x108>
    1768:	88 0f       	add	r24, r24
    176a:	99 1f       	adc	r25, r25
    176c:	2a 95       	dec	r18
    176e:	e2 f7       	brpl	.-8      	; 0x1768 <nwkRxRejectDuplicate+0x104>
    1770:	81 60       	ori	r24, 0x01	; 1
    1772:	28 2f       	mov	r18, r24
    1774:	8c 81       	ldd	r24, Y+4	; 0x04
    1776:	9d 81       	ldd	r25, Y+5	; 0x05
    1778:	fc 01       	movw	r30, r24
    177a:	23 83       	std	Z+3, r18	; 0x03
				entry->ttl = DUPLICATE_REJECTION_TTL;
    177c:	8c 81       	ldd	r24, Y+4	; 0x04
    177e:	9d 81       	ldd	r25, Y+5	; 0x05
    1780:	25 e1       	ldi	r18, 0x15	; 21
    1782:	fc 01       	movw	r30, r24
    1784:	24 83       	std	Z+4, r18	; 0x04
				return false;
    1786:	80 e0       	ldi	r24, 0x00	; 0
    1788:	38 c0       	rjmp	.+112    	; 0x17fa <nwkRxRejectDuplicate+0x196>
			}
		}

		if (0 == entry->ttl) {
    178a:	8c 81       	ldd	r24, Y+4	; 0x04
    178c:	9d 81       	ldd	r25, Y+5	; 0x05
    178e:	fc 01       	movw	r30, r24
    1790:	84 81       	ldd	r24, Z+4	; 0x04
    1792:	88 23       	and	r24, r24
    1794:	21 f4       	brne	.+8      	; 0x179e <nwkRxRejectDuplicate+0x13a>
			freeEntry = entry;
    1796:	8c 81       	ldd	r24, Y+4	; 0x04
    1798:	9d 81       	ldd	r25, Y+5	; 0x05
    179a:	9a 83       	std	Y+2, r25	; 0x02
    179c:	89 83       	std	Y+1, r24	; 0x01
static bool nwkRxRejectDuplicate(NwkFrameHeader_t *header)
{
	NwkDuplicateRejectionEntry_t *entry;
	NwkDuplicateRejectionEntry_t *freeEntry = NULL;

	for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++) {
    179e:	8b 81       	ldd	r24, Y+3	; 0x03
    17a0:	8f 5f       	subi	r24, 0xFF	; 255
    17a2:	8b 83       	std	Y+3, r24	; 0x03
    17a4:	8b 81       	ldd	r24, Y+3	; 0x03
    17a6:	82 33       	cpi	r24, 0x32	; 50
    17a8:	08 f4       	brcc	.+2      	; 0x17ac <nwkRxRejectDuplicate+0x148>
    17aa:	6c cf       	rjmp	.-296    	; 0x1684 <nwkRxRejectDuplicate+0x20>
		if (0 == entry->ttl) {
			freeEntry = entry;
		}
	}

	if (NULL == freeEntry) {
    17ac:	89 81       	ldd	r24, Y+1	; 0x01
    17ae:	9a 81       	ldd	r25, Y+2	; 0x02
    17b0:	89 2b       	or	r24, r25
    17b2:	11 f4       	brne	.+4      	; 0x17b8 <nwkRxRejectDuplicate+0x154>
		return true;
    17b4:	81 e0       	ldi	r24, 0x01	; 1
    17b6:	21 c0       	rjmp	.+66     	; 0x17fa <nwkRxRejectDuplicate+0x196>
	}

	freeEntry->src = header->nwkSrcAddr;
    17b8:	88 85       	ldd	r24, Y+8	; 0x08
    17ba:	99 85       	ldd	r25, Y+9	; 0x09
    17bc:	fc 01       	movw	r30, r24
    17be:	23 85       	ldd	r18, Z+11	; 0x0b
    17c0:	34 85       	ldd	r19, Z+12	; 0x0c
    17c2:	89 81       	ldd	r24, Y+1	; 0x01
    17c4:	9a 81       	ldd	r25, Y+2	; 0x02
    17c6:	fc 01       	movw	r30, r24
    17c8:	31 83       	std	Z+1, r19	; 0x01
    17ca:	20 83       	st	Z, r18
	freeEntry->seq = header->nwkSeq;
    17cc:	88 85       	ldd	r24, Y+8	; 0x08
    17ce:	99 85       	ldd	r25, Y+9	; 0x09
    17d0:	fc 01       	movw	r30, r24
    17d2:	22 85       	ldd	r18, Z+10	; 0x0a
    17d4:	89 81       	ldd	r24, Y+1	; 0x01
    17d6:	9a 81       	ldd	r25, Y+2	; 0x02
    17d8:	fc 01       	movw	r30, r24
    17da:	22 83       	std	Z+2, r18	; 0x02
	freeEntry->mask = 1;
    17dc:	89 81       	ldd	r24, Y+1	; 0x01
    17de:	9a 81       	ldd	r25, Y+2	; 0x02
    17e0:	21 e0       	ldi	r18, 0x01	; 1
    17e2:	fc 01       	movw	r30, r24
    17e4:	23 83       	std	Z+3, r18	; 0x03
	freeEntry->ttl = DUPLICATE_REJECTION_TTL;
    17e6:	89 81       	ldd	r24, Y+1	; 0x01
    17e8:	9a 81       	ldd	r25, Y+2	; 0x02
    17ea:	25 e1       	ldi	r18, 0x15	; 21
    17ec:	fc 01       	movw	r30, r24
    17ee:	24 83       	std	Z+4, r18	; 0x04

	SYS_TimerStart(&nwkRxDuplicateRejectionTimer);
    17f0:	86 ee       	ldi	r24, 0xE6	; 230
    17f2:	9d e0       	ldi	r25, 0x0D	; 13
    17f4:	0e 94 2c 18 	call	0x3058	; 0x3058 <SYS_TimerStart>

	return false;
    17f8:	80 e0       	ldi	r24, 0x00	; 0
}
    17fa:	29 96       	adiw	r28, 0x09	; 9
    17fc:	0f b6       	in	r0, 0x3f	; 63
    17fe:	f8 94       	cli
    1800:	de bf       	out	0x3e, r29	; 62
    1802:	0f be       	out	0x3f, r0	; 63
    1804:	cd bf       	out	0x3d, r28	; 61
    1806:	df 91       	pop	r29
    1808:	cf 91       	pop	r28
    180a:	08 95       	ret

0000180c <nwkRxSeriveDataInd>:

/*************************************************************************//**
*****************************************************************************/
static bool nwkRxSeriveDataInd(NWK_DataInd_t *ind)
{
    180c:	cf 93       	push	r28
    180e:	df 93       	push	r29
    1810:	00 d0       	rcall	.+0      	; 0x1812 <nwkRxSeriveDataInd+0x6>
    1812:	cd b7       	in	r28, 0x3d	; 61
    1814:	de b7       	in	r29, 0x3e	; 62
    1816:	9a 83       	std	Y+2, r25	; 0x02
    1818:	89 83       	std	Y+1, r24	; 0x01
		return false;
	}

#endif

	if (ind->size < 1) {
    181a:	89 81       	ldd	r24, Y+1	; 0x01
    181c:	9a 81       	ldd	r25, Y+2	; 0x02
    181e:	fc 01       	movw	r30, r24
    1820:	82 85       	ldd	r24, Z+10	; 0x0a
    1822:	88 23       	and	r24, r24
    1824:	11 f4       	brne	.+4      	; 0x182a <nwkRxSeriveDataInd+0x1e>
		return false;
    1826:	80 e0       	ldi	r24, 0x00	; 0
    1828:	11 c0       	rjmp	.+34     	; 0x184c <nwkRxSeriveDataInd+0x40>
	}

	switch (ind->data[0]) {
    182a:	89 81       	ldd	r24, Y+1	; 0x01
    182c:	9a 81       	ldd	r25, Y+2	; 0x02
    182e:	fc 01       	movw	r30, r24
    1830:	80 85       	ldd	r24, Z+8	; 0x08
    1832:	91 85       	ldd	r25, Z+9	; 0x09
    1834:	fc 01       	movw	r30, r24
    1836:	80 81       	ld	r24, Z
    1838:	88 2f       	mov	r24, r24
    183a:	90 e0       	ldi	r25, 0x00	; 0
    183c:	89 2b       	or	r24, r25
    183e:	29 f4       	brne	.+10     	; 0x184a <nwkRxSeriveDataInd+0x3e>
	case NWK_COMMAND_ACK:
		return nwkTxAckReceived(ind);
    1840:	89 81       	ldd	r24, Y+1	; 0x01
    1842:	9a 81       	ldd	r25, Y+2	; 0x02
    1844:	0e 94 eb 11 	call	0x23d6	; 0x23d6 <nwkTxAckReceived>
    1848:	01 c0       	rjmp	.+2      	; 0x184c <nwkRxSeriveDataInd+0x40>
		return nwkRouteDiscoveryReplyReceived(ind);

#endif

	default:
		return false;
    184a:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    184c:	0f 90       	pop	r0
    184e:	0f 90       	pop	r0
    1850:	df 91       	pop	r29
    1852:	cf 91       	pop	r28
    1854:	08 95       	ret

00001856 <nwkRxHandleReceivedFrame>:

/*************************************************************************//**
*****************************************************************************/
static void nwkRxHandleReceivedFrame(NwkFrame_t *frame)
{
    1856:	cf 93       	push	r28
    1858:	df 93       	push	r29
    185a:	00 d0       	rcall	.+0      	; 0x185c <nwkRxHandleReceivedFrame+0x6>
    185c:	00 d0       	rcall	.+0      	; 0x185e <nwkRxHandleReceivedFrame+0x8>
    185e:	cd b7       	in	r28, 0x3d	; 61
    1860:	de b7       	in	r29, 0x3e	; 62
    1862:	9c 83       	std	Y+4, r25	; 0x04
    1864:	8b 83       	std	Y+3, r24	; 0x03
	NwkFrameHeader_t *header = &frame->header;
    1866:	8b 81       	ldd	r24, Y+3	; 0x03
    1868:	9c 81       	ldd	r25, Y+4	; 0x04
    186a:	02 96       	adiw	r24, 0x02	; 2
    186c:	9a 83       	std	Y+2, r25	; 0x02
    186e:	89 83       	std	Y+1, r24	; 0x01

	frame->state = NWK_RX_STATE_FINISH;
    1870:	8b 81       	ldd	r24, Y+3	; 0x03
    1872:	9c 81       	ldd	r25, Y+4	; 0x04
    1874:	24 e2       	ldi	r18, 0x24	; 36
    1876:	fc 01       	movw	r30, r24
    1878:	20 83       	st	Z, r18

#ifndef NWK_ENABLE_SECURITY
	if (header->nwkFcf.security) {
    187a:	89 81       	ldd	r24, Y+1	; 0x01
    187c:	9a 81       	ldd	r25, Y+2	; 0x02
    187e:	fc 01       	movw	r30, r24
    1880:	81 85       	ldd	r24, Z+9	; 0x09
    1882:	82 70       	andi	r24, 0x02	; 2
    1884:	88 23       	and	r24, r24
    1886:	09 f0       	breq	.+2      	; 0x188a <nwkRxHandleReceivedFrame+0x34>
    1888:	83 c0       	rjmp	.+262    	; 0x1990 <nwkRxHandleReceivedFrame+0x13a>
	if (header->nwkFcf.multicast && header->nwkFcf.ackRequest) {
		return;
	}

#else
	if (header->nwkFcf.multicast) {
    188a:	89 81       	ldd	r24, Y+1	; 0x01
    188c:	9a 81       	ldd	r25, Y+2	; 0x02
    188e:	fc 01       	movw	r30, r24
    1890:	81 85       	ldd	r24, Z+9	; 0x09
    1892:	88 70       	andi	r24, 0x08	; 8
    1894:	88 23       	and	r24, r24
    1896:	09 f0       	breq	.+2      	; 0x189a <nwkRxHandleReceivedFrame+0x44>
    1898:	7d c0       	rjmp	.+250    	; 0x1994 <nwkRxHandleReceivedFrame+0x13e>
		return;
	}

#endif

	if (NWK_BROADCAST_PANID == header->macDstPanId)
    189a:	89 81       	ldd	r24, Y+1	; 0x01
    189c:	9a 81       	ldd	r25, Y+2	; 0x02
    189e:	fc 01       	movw	r30, r24
    18a0:	83 81       	ldd	r24, Z+3	; 0x03
    18a2:	94 81       	ldd	r25, Z+4	; 0x04
    18a4:	01 96       	adiw	r24, 0x01	; 1
    18a6:	d1 f4       	brne	.+52     	; 0x18dc <nwkRxHandleReceivedFrame+0x86>
	{
		if (nwkIb.addr == header->nwkDstAddr || NWK_BROADCAST_ADDR == header->nwkDstAddr)
    18a8:	20 91 8a 10 	lds	r18, 0x108A	; 0x80108a <nwkIb>
    18ac:	30 91 8b 10 	lds	r19, 0x108B	; 0x80108b <nwkIb+0x1>
    18b0:	89 81       	ldd	r24, Y+1	; 0x01
    18b2:	9a 81       	ldd	r25, Y+2	; 0x02
    18b4:	fc 01       	movw	r30, r24
    18b6:	85 85       	ldd	r24, Z+13	; 0x0d
    18b8:	96 85       	ldd	r25, Z+14	; 0x0e
    18ba:	28 17       	cp	r18, r24
    18bc:	39 07       	cpc	r19, r25
    18be:	41 f0       	breq	.+16     	; 0x18d0 <nwkRxHandleReceivedFrame+0x7a>
    18c0:	89 81       	ldd	r24, Y+1	; 0x01
    18c2:	9a 81       	ldd	r25, Y+2	; 0x02
    18c4:	fc 01       	movw	r30, r24
    18c6:	85 85       	ldd	r24, Z+13	; 0x0d
    18c8:	96 85       	ldd	r25, Z+14	; 0x0e
    18ca:	01 96       	adiw	r24, 0x01	; 1
    18cc:	09 f0       	breq	.+2      	; 0x18d0 <nwkRxHandleReceivedFrame+0x7a>
    18ce:	64 c0       	rjmp	.+200    	; 0x1998 <nwkRxHandleReceivedFrame+0x142>
			{
				frame->state = NWK_RX_STATE_DECRYPT;
			}
			else
#endif
			frame->state = NWK_RX_STATE_INDICATE;
    18d0:	8b 81       	ldd	r24, Y+3	; 0x03
    18d2:	9c 81       	ldd	r25, Y+4	; 0x04
    18d4:	22 e2       	ldi	r18, 0x22	; 34
    18d6:	fc 01       	movw	r30, r24
    18d8:	20 83       	st	Z, r18
		}

		return;
    18da:	5e c0       	rjmp	.+188    	; 0x1998 <nwkRxHandleReceivedFrame+0x142>
		return;
	}

#endif

	if (NWK_BROADCAST_ADDR == header->nwkDstAddr && header->nwkFcf.ackRequest)
    18dc:	89 81       	ldd	r24, Y+1	; 0x01
    18de:	9a 81       	ldd	r25, Y+2	; 0x02
    18e0:	fc 01       	movw	r30, r24
    18e2:	85 85       	ldd	r24, Z+13	; 0x0d
    18e4:	96 85       	ldd	r25, Z+14	; 0x0e
    18e6:	01 96       	adiw	r24, 0x01	; 1
    18e8:	41 f4       	brne	.+16     	; 0x18fa <nwkRxHandleReceivedFrame+0xa4>
    18ea:	89 81       	ldd	r24, Y+1	; 0x01
    18ec:	9a 81       	ldd	r25, Y+2	; 0x02
    18ee:	fc 01       	movw	r30, r24
    18f0:	81 85       	ldd	r24, Z+9	; 0x09
    18f2:	81 70       	andi	r24, 0x01	; 1
    18f4:	88 23       	and	r24, r24
    18f6:	09 f0       	breq	.+2      	; 0x18fa <nwkRxHandleReceivedFrame+0xa4>
    18f8:	51 c0       	rjmp	.+162    	; 0x199c <nwkRxHandleReceivedFrame+0x146>
	{
		return;
	}

	if (nwkIb.addr == header->nwkSrcAddr)
    18fa:	20 91 8a 10 	lds	r18, 0x108A	; 0x80108a <nwkIb>
    18fe:	30 91 8b 10 	lds	r19, 0x108B	; 0x80108b <nwkIb+0x1>
    1902:	89 81       	ldd	r24, Y+1	; 0x01
    1904:	9a 81       	ldd	r25, Y+2	; 0x02
    1906:	fc 01       	movw	r30, r24
    1908:	83 85       	ldd	r24, Z+11	; 0x0b
    190a:	94 85       	ldd	r25, Z+12	; 0x0c
    190c:	28 17       	cp	r18, r24
    190e:	39 07       	cpc	r19, r25
    1910:	09 f4       	brne	.+2      	; 0x1914 <nwkRxHandleReceivedFrame+0xbe>
    1912:	46 c0       	rjmp	.+140    	; 0x19a0 <nwkRxHandleReceivedFrame+0x14a>

#ifdef NWK_ENABLE_ROUTING
	nwkRouteFrameReceived(frame);
#endif

	if (nwkRxRejectDuplicate(header))
    1914:	89 81       	ldd	r24, Y+1	; 0x01
    1916:	9a 81       	ldd	r25, Y+2	; 0x02
    1918:	0e 94 32 0b 	call	0x1664	; 0x1664 <nwkRxRejectDuplicate>
    191c:	88 23       	and	r24, r24
    191e:	09 f0       	breq	.+2      	; 0x1922 <nwkRxHandleReceivedFrame+0xcc>
    1920:	41 c0       	rjmp	.+130    	; 0x19a4 <nwkRxHandleReceivedFrame+0x14e>
			frame->state = NWK_RX_STATE_INDICATE;
		}
	} else
#endif /* NWK_ENABLE_MULTICAST */
	{
		if (NWK_BROADCAST_ADDR == header->macDstAddr && nwkIb.addr !=
    1922:	89 81       	ldd	r24, Y+1	; 0x01
    1924:	9a 81       	ldd	r25, Y+2	; 0x02
    1926:	fc 01       	movw	r30, r24
    1928:	85 81       	ldd	r24, Z+5	; 0x05
    192a:	96 81       	ldd	r25, Z+6	; 0x06
    192c:	01 96       	adiw	r24, 0x01	; 1
    192e:	b9 f4       	brne	.+46     	; 0x195e <nwkRxHandleReceivedFrame+0x108>
    1930:	20 91 8a 10 	lds	r18, 0x108A	; 0x80108a <nwkIb>
    1934:	30 91 8b 10 	lds	r19, 0x108B	; 0x80108b <nwkIb+0x1>
				header->nwkDstAddr &&
    1938:	89 81       	ldd	r24, Y+1	; 0x01
    193a:	9a 81       	ldd	r25, Y+2	; 0x02
    193c:	fc 01       	movw	r30, r24
    193e:	85 85       	ldd	r24, Z+13	; 0x0d
    1940:	96 85       	ldd	r25, Z+14	; 0x0e
			frame->state = NWK_RX_STATE_INDICATE;
		}
	} else
#endif /* NWK_ENABLE_MULTICAST */
	{
		if (NWK_BROADCAST_ADDR == header->macDstAddr && nwkIb.addr !=
    1942:	28 17       	cp	r18, r24
    1944:	39 07       	cpc	r19, r25
    1946:	59 f0       	breq	.+22     	; 0x195e <nwkRxHandleReceivedFrame+0x108>
				header->nwkDstAddr &&
				0 == header->nwkFcf.linkLocal) {
    1948:	89 81       	ldd	r24, Y+1	; 0x01
    194a:	9a 81       	ldd	r25, Y+2	; 0x02
    194c:	fc 01       	movw	r30, r24
    194e:	81 85       	ldd	r24, Z+9	; 0x09
    1950:	84 70       	andi	r24, 0x04	; 4
		}
	} else
#endif /* NWK_ENABLE_MULTICAST */
	{
		if (NWK_BROADCAST_ADDR == header->macDstAddr && nwkIb.addr !=
				header->nwkDstAddr &&
    1952:	88 23       	and	r24, r24
    1954:	21 f4       	brne	.+8      	; 0x195e <nwkRxHandleReceivedFrame+0x108>
				0 == header->nwkFcf.linkLocal) {
			nwkTxBroadcastFrame(frame);
    1956:	8b 81       	ldd	r24, Y+3	; 0x03
    1958:	9c 81       	ldd	r25, Y+4	; 0x04
    195a:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <nwkTxBroadcastFrame>
		}

		if (nwkIb.addr == header->nwkDstAddr || NWK_BROADCAST_ADDR ==
    195e:	20 91 8a 10 	lds	r18, 0x108A	; 0x80108a <nwkIb>
    1962:	30 91 8b 10 	lds	r19, 0x108B	; 0x80108b <nwkIb+0x1>
    1966:	89 81       	ldd	r24, Y+1	; 0x01
    1968:	9a 81       	ldd	r25, Y+2	; 0x02
    196a:	fc 01       	movw	r30, r24
    196c:	85 85       	ldd	r24, Z+13	; 0x0d
    196e:	96 85       	ldd	r25, Z+14	; 0x0e
    1970:	28 17       	cp	r18, r24
    1972:	39 07       	cpc	r19, r25
    1974:	39 f0       	breq	.+14     	; 0x1984 <nwkRxHandleReceivedFrame+0x12e>
				header->nwkDstAddr) {
    1976:	89 81       	ldd	r24, Y+1	; 0x01
    1978:	9a 81       	ldd	r25, Y+2	; 0x02
    197a:	fc 01       	movw	r30, r24
    197c:	85 85       	ldd	r24, Z+13	; 0x0d
    197e:	96 85       	ldd	r25, Z+14	; 0x0e
				header->nwkDstAddr &&
				0 == header->nwkFcf.linkLocal) {
			nwkTxBroadcastFrame(frame);
		}

		if (nwkIb.addr == header->nwkDstAddr || NWK_BROADCAST_ADDR ==
    1980:	01 96       	adiw	r24, 0x01	; 1
    1982:	89 f4       	brne	.+34     	; 0x19a6 <nwkRxHandleReceivedFrame+0x150>
    #ifdef NWK_ENABLE_SECURITY
			if (header->nwkFcf.security) {
				frame->state = NWK_RX_STATE_DECRYPT;
			} else
    #endif
			frame->state = NWK_RX_STATE_INDICATE;
    1984:	8b 81       	ldd	r24, Y+3	; 0x03
    1986:	9c 81       	ldd	r25, Y+4	; 0x04
    1988:	22 e2       	ldi	r18, 0x22	; 34
    198a:	fc 01       	movw	r30, r24
    198c:	20 83       	st	Z, r18
    198e:	0b c0       	rjmp	.+22     	; 0x19a6 <nwkRxHandleReceivedFrame+0x150>

	frame->state = NWK_RX_STATE_FINISH;

#ifndef NWK_ENABLE_SECURITY
	if (header->nwkFcf.security) {
		return;
    1990:	00 00       	nop
    1992:	09 c0       	rjmp	.+18     	; 0x19a6 <nwkRxHandleReceivedFrame+0x150>
		return;
	}

#else
	if (header->nwkFcf.multicast) {
		return;
    1994:	00 00       	nop
    1996:	07 c0       	rjmp	.+14     	; 0x19a6 <nwkRxHandleReceivedFrame+0x150>
			else
#endif
			frame->state = NWK_RX_STATE_INDICATE;
		}

		return;
    1998:	00 00       	nop
    199a:	05 c0       	rjmp	.+10     	; 0x19a6 <nwkRxHandleReceivedFrame+0x150>

#endif

	if (NWK_BROADCAST_ADDR == header->nwkDstAddr && header->nwkFcf.ackRequest)
	{
		return;
    199c:	00 00       	nop
    199e:	03 c0       	rjmp	.+6      	; 0x19a6 <nwkRxHandleReceivedFrame+0x150>
	}

	if (nwkIb.addr == header->nwkSrcAddr)
	{
		return;
    19a0:	00 00       	nop
    19a2:	01 c0       	rjmp	.+2      	; 0x19a6 <nwkRxHandleReceivedFrame+0x150>
	nwkRouteFrameReceived(frame);
#endif

	if (nwkRxRejectDuplicate(header))
	{
		return;
    19a4:	00 00       	nop
		else if (nwkIb.addr == header->macDstAddr) {
			frame->state = NWK_RX_STATE_ROUTE;
		}
  #endif
	}
}
    19a6:	0f 90       	pop	r0
    19a8:	0f 90       	pop	r0
    19aa:	0f 90       	pop	r0
    19ac:	0f 90       	pop	r0
    19ae:	df 91       	pop	r29
    19b0:	cf 91       	pop	r28
    19b2:	08 95       	ret

000019b4 <nwkRxIndicateDataFrame>:

/*************************************************************************//**
*****************************************************************************/
static bool nwkRxIndicateDataFrame(NwkFrame_t *frame)
{
    19b4:	cf 93       	push	r28
    19b6:	df 93       	push	r29
    19b8:	cd b7       	in	r28, 0x3d	; 61
    19ba:	de b7       	in	r29, 0x3e	; 62
    19bc:	61 97       	sbiw	r28, 0x11	; 17
    19be:	0f b6       	in	r0, 0x3f	; 63
    19c0:	f8 94       	cli
    19c2:	de bf       	out	0x3e, r29	; 62
    19c4:	0f be       	out	0x3f, r0	; 63
    19c6:	cd bf       	out	0x3d, r28	; 61
    19c8:	99 8b       	std	Y+17, r25	; 0x11
    19ca:	88 8b       	std	Y+16, r24	; 0x10
	NwkFrameHeader_t *header = &frame->header;
    19cc:	88 89       	ldd	r24, Y+16	; 0x10
    19ce:	99 89       	ldd	r25, Y+17	; 0x11
    19d0:	02 96       	adiw	r24, 0x02	; 2
    19d2:	9a 83       	std	Y+2, r25	; 0x02
    19d4:	89 83       	std	Y+1, r24	; 0x01
	NWK_DataInd_t ind;

	if (NULL == nwkIb.endpoint[header->nwkDstEndpoint]) {
    19d6:	89 81       	ldd	r24, Y+1	; 0x01
    19d8:	9a 81       	ldd	r25, Y+2	; 0x02
    19da:	fc 01       	movw	r30, r24
    19dc:	87 85       	ldd	r24, Z+15	; 0x0f
    19de:	82 95       	swap	r24
    19e0:	8f 70       	andi	r24, 0x0F	; 15
    19e2:	88 2f       	mov	r24, r24
    19e4:	90 e0       	ldi	r25, 0x00	; 0
    19e6:	03 96       	adiw	r24, 0x03	; 3
    19e8:	88 0f       	add	r24, r24
    19ea:	99 1f       	adc	r25, r25
    19ec:	86 57       	subi	r24, 0x76	; 118
    19ee:	9f 4e       	sbci	r25, 0xEF	; 239
    19f0:	fc 01       	movw	r30, r24
    19f2:	80 81       	ld	r24, Z
    19f4:	91 81       	ldd	r25, Z+1	; 0x01
    19f6:	89 2b       	or	r24, r25
    19f8:	11 f4       	brne	.+4      	; 0x19fe <nwkRxIndicateDataFrame+0x4a>
		return false;
    19fa:	80 e0       	ldi	r24, 0x00	; 0
    19fc:	d9 c0       	rjmp	.+434    	; 0x1bb0 <nwkRxIndicateDataFrame+0x1fc>
	}

	ind.srcAddr = header->nwkSrcAddr;
    19fe:	89 81       	ldd	r24, Y+1	; 0x01
    1a00:	9a 81       	ldd	r25, Y+2	; 0x02
    1a02:	fc 01       	movw	r30, r24
    1a04:	83 85       	ldd	r24, Z+11	; 0x0b
    1a06:	94 85       	ldd	r25, Z+12	; 0x0c
    1a08:	9c 83       	std	Y+4, r25	; 0x04
    1a0a:	8b 83       	std	Y+3, r24	; 0x03
	ind.dstAddr = header->nwkDstAddr;
    1a0c:	89 81       	ldd	r24, Y+1	; 0x01
    1a0e:	9a 81       	ldd	r25, Y+2	; 0x02
    1a10:	fc 01       	movw	r30, r24
    1a12:	85 85       	ldd	r24, Z+13	; 0x0d
    1a14:	96 85       	ldd	r25, Z+14	; 0x0e
    1a16:	9e 83       	std	Y+6, r25	; 0x06
    1a18:	8d 83       	std	Y+5, r24	; 0x05
	ind.srcEndpoint = header->nwkSrcEndpoint;
    1a1a:	89 81       	ldd	r24, Y+1	; 0x01
    1a1c:	9a 81       	ldd	r25, Y+2	; 0x02
    1a1e:	fc 01       	movw	r30, r24
    1a20:	87 85       	ldd	r24, Z+15	; 0x0f
    1a22:	8f 70       	andi	r24, 0x0F	; 15
    1a24:	8f 83       	std	Y+7, r24	; 0x07
	ind.dstEndpoint = header->nwkDstEndpoint;
    1a26:	89 81       	ldd	r24, Y+1	; 0x01
    1a28:	9a 81       	ldd	r25, Y+2	; 0x02
    1a2a:	fc 01       	movw	r30, r24
    1a2c:	87 85       	ldd	r24, Z+15	; 0x0f
    1a2e:	82 95       	swap	r24
    1a30:	8f 70       	andi	r24, 0x0F	; 15
    1a32:	88 87       	std	Y+8, r24	; 0x08
	ind.data = frame->payload;
    1a34:	88 89       	ldd	r24, Y+16	; 0x10
    1a36:	99 89       	ldd	r25, Y+17	; 0x11
    1a38:	8f 57       	subi	r24, 0x7F	; 127
    1a3a:	9f 4f       	sbci	r25, 0xFF	; 255
    1a3c:	fc 01       	movw	r30, r24
    1a3e:	80 81       	ld	r24, Z
    1a40:	91 81       	ldd	r25, Z+1	; 0x01
    1a42:	9c 87       	std	Y+12, r25	; 0x0c
    1a44:	8b 87       	std	Y+11, r24	; 0x0b
	ind.size = nwkFramePayloadSize(frame);
    1a46:	88 89       	ldd	r24, Y+16	; 0x10
    1a48:	99 89       	ldd	r25, Y+17	; 0x11
    1a4a:	0e 94 f5 08 	call	0x11ea	; 0x11ea <nwkFramePayloadSize>
    1a4e:	8d 87       	std	Y+13, r24	; 0x0d
	ind.lqi = frame->rx.lqi;
    1a50:	88 89       	ldd	r24, Y+16	; 0x10
    1a52:	99 89       	ldd	r25, Y+17	; 0x11
    1a54:	8d 57       	subi	r24, 0x7D	; 125
    1a56:	9f 4f       	sbci	r25, 0xFF	; 255
    1a58:	fc 01       	movw	r30, r24
    1a5a:	80 81       	ld	r24, Z
    1a5c:	8e 87       	std	Y+14, r24	; 0x0e
	ind.rssi = frame->rx.rssi;
    1a5e:	88 89       	ldd	r24, Y+16	; 0x10
    1a60:	99 89       	ldd	r25, Y+17	; 0x11
    1a62:	8c 57       	subi	r24, 0x7C	; 124
    1a64:	9f 4f       	sbci	r25, 0xFF	; 255
    1a66:	fc 01       	movw	r30, r24
    1a68:	80 81       	ld	r24, Z
    1a6a:	8f 87       	std	Y+15, r24	; 0x0f

	ind.options	= (header->nwkFcf.ackRequest) ? NWK_IND_OPT_ACK_REQUESTED : 0;
    1a6c:	89 81       	ldd	r24, Y+1	; 0x01
    1a6e:	9a 81       	ldd	r25, Y+2	; 0x02
    1a70:	fc 01       	movw	r30, r24
    1a72:	81 85       	ldd	r24, Z+9	; 0x09
    1a74:	98 2f       	mov	r25, r24
    1a76:	91 70       	andi	r25, 0x01	; 1
    1a78:	81 e0       	ldi	r24, 0x01	; 1
    1a7a:	99 23       	and	r25, r25
    1a7c:	09 f4       	brne	.+2      	; 0x1a80 <nwkRxIndicateDataFrame+0xcc>
    1a7e:	80 e0       	ldi	r24, 0x00	; 0
    1a80:	88 2f       	mov	r24, r24
    1a82:	90 e0       	ldi	r25, 0x00	; 0
    1a84:	9a 87       	std	Y+10, r25	; 0x0a
    1a86:	89 87       	std	Y+9, r24	; 0x09
	ind.options |= (header->nwkFcf.security) ? NWK_IND_OPT_SECURED : 0;
    1a88:	29 85       	ldd	r18, Y+9	; 0x09
    1a8a:	3a 85       	ldd	r19, Y+10	; 0x0a
    1a8c:	89 81       	ldd	r24, Y+1	; 0x01
    1a8e:	9a 81       	ldd	r25, Y+2	; 0x02
    1a90:	fc 01       	movw	r30, r24
    1a92:	81 85       	ldd	r24, Z+9	; 0x09
    1a94:	88 2f       	mov	r24, r24
    1a96:	90 e0       	ldi	r25, 0x00	; 0
    1a98:	82 70       	andi	r24, 0x02	; 2
    1a9a:	99 27       	eor	r25, r25
    1a9c:	82 2b       	or	r24, r18
    1a9e:	93 2b       	or	r25, r19
    1aa0:	9a 87       	std	Y+10, r25	; 0x0a
    1aa2:	89 87       	std	Y+9, r24	; 0x09
	ind.options |= (header->nwkFcf.linkLocal) ? NWK_IND_OPT_LINK_LOCAL : 0;
    1aa4:	29 85       	ldd	r18, Y+9	; 0x09
    1aa6:	3a 85       	ldd	r19, Y+10	; 0x0a
    1aa8:	89 81       	ldd	r24, Y+1	; 0x01
    1aaa:	9a 81       	ldd	r25, Y+2	; 0x02
    1aac:	fc 01       	movw	r30, r24
    1aae:	81 85       	ldd	r24, Z+9	; 0x09
    1ab0:	84 70       	andi	r24, 0x04	; 4
    1ab2:	88 23       	and	r24, r24
    1ab4:	19 f0       	breq	.+6      	; 0x1abc <nwkRxIndicateDataFrame+0x108>
    1ab6:	80 e2       	ldi	r24, 0x20	; 32
    1ab8:	90 e0       	ldi	r25, 0x00	; 0
    1aba:	02 c0       	rjmp	.+4      	; 0x1ac0 <nwkRxIndicateDataFrame+0x10c>
    1abc:	80 e0       	ldi	r24, 0x00	; 0
    1abe:	90 e0       	ldi	r25, 0x00	; 0
    1ac0:	82 2b       	or	r24, r18
    1ac2:	93 2b       	or	r25, r19
    1ac4:	9a 87       	std	Y+10, r25	; 0x0a
    1ac6:	89 87       	std	Y+9, r24	; 0x09
	ind.options |= (header->nwkFcf.multicast) ? NWK_IND_OPT_MULTICAST : 0;
    1ac8:	29 85       	ldd	r18, Y+9	; 0x09
    1aca:	3a 85       	ldd	r19, Y+10	; 0x0a
    1acc:	89 81       	ldd	r24, Y+1	; 0x01
    1ace:	9a 81       	ldd	r25, Y+2	; 0x02
    1ad0:	fc 01       	movw	r30, r24
    1ad2:	81 85       	ldd	r24, Z+9	; 0x09
    1ad4:	88 70       	andi	r24, 0x08	; 8
    1ad6:	88 23       	and	r24, r24
    1ad8:	19 f0       	breq	.+6      	; 0x1ae0 <nwkRxIndicateDataFrame+0x12c>
    1ada:	80 e4       	ldi	r24, 0x40	; 64
    1adc:	90 e0       	ldi	r25, 0x00	; 0
    1ade:	02 c0       	rjmp	.+4      	; 0x1ae4 <nwkRxIndicateDataFrame+0x130>
    1ae0:	80 e0       	ldi	r24, 0x00	; 0
    1ae2:	90 e0       	ldi	r25, 0x00	; 0
    1ae4:	82 2b       	or	r24, r18
    1ae6:	93 2b       	or	r25, r19
    1ae8:	9a 87       	std	Y+10, r25	; 0x0a
    1aea:	89 87       	std	Y+9, r24	; 0x09
	ind.options |= (header->nwkFcf.beacon) ? NWK_IND_OPT_BEACON : 0;
    1aec:	29 85       	ldd	r18, Y+9	; 0x09
    1aee:	3a 85       	ldd	r19, Y+10	; 0x0a
    1af0:	89 81       	ldd	r24, Y+1	; 0x01
    1af2:	9a 81       	ldd	r25, Y+2	; 0x02
    1af4:	fc 01       	movw	r30, r24
    1af6:	81 85       	ldd	r24, Z+9	; 0x09
    1af8:	80 71       	andi	r24, 0x10	; 16
    1afa:	88 23       	and	r24, r24
    1afc:	19 f0       	breq	.+6      	; 0x1b04 <nwkRxIndicateDataFrame+0x150>
    1afe:	80 e8       	ldi	r24, 0x80	; 128
    1b00:	90 e0       	ldi	r25, 0x00	; 0
    1b02:	02 c0       	rjmp	.+4      	; 0x1b08 <nwkRxIndicateDataFrame+0x154>
    1b04:	80 e0       	ldi	r24, 0x00	; 0
    1b06:	90 e0       	ldi	r25, 0x00	; 0
    1b08:	82 2b       	or	r24, r18
    1b0a:	93 2b       	or	r25, r19
    1b0c:	9a 87       	std	Y+10, r25	; 0x0a
    1b0e:	89 87       	std	Y+9, r24	; 0x09
	ind.options	|= (NWK_BROADCAST_ADDR == header->nwkDstAddr) ? NWK_IND_OPT_BROADCAST : 0;
    1b10:	29 85       	ldd	r18, Y+9	; 0x09
    1b12:	3a 85       	ldd	r19, Y+10	; 0x0a
    1b14:	89 81       	ldd	r24, Y+1	; 0x01
    1b16:	9a 81       	ldd	r25, Y+2	; 0x02
    1b18:	fc 01       	movw	r30, r24
    1b1a:	85 85       	ldd	r24, Z+13	; 0x0d
    1b1c:	96 85       	ldd	r25, Z+14	; 0x0e
    1b1e:	01 96       	adiw	r24, 0x01	; 1
    1b20:	19 f4       	brne	.+6      	; 0x1b28 <nwkRxIndicateDataFrame+0x174>
    1b22:	84 e0       	ldi	r24, 0x04	; 4
    1b24:	90 e0       	ldi	r25, 0x00	; 0
    1b26:	02 c0       	rjmp	.+4      	; 0x1b2c <nwkRxIndicateDataFrame+0x178>
    1b28:	80 e0       	ldi	r24, 0x00	; 0
    1b2a:	90 e0       	ldi	r25, 0x00	; 0
    1b2c:	82 2b       	or	r24, r18
    1b2e:	93 2b       	or	r25, r19
    1b30:	9a 87       	std	Y+10, r25	; 0x0a
    1b32:	89 87       	std	Y+9, r24	; 0x09
	ind.options	|= (header->nwkSrcAddr == header->macSrcAddr) ? NWK_IND_OPT_LOCAL : 0;
    1b34:	29 85       	ldd	r18, Y+9	; 0x09
    1b36:	3a 85       	ldd	r19, Y+10	; 0x0a
    1b38:	89 81       	ldd	r24, Y+1	; 0x01
    1b3a:	9a 81       	ldd	r25, Y+2	; 0x02
    1b3c:	fc 01       	movw	r30, r24
    1b3e:	43 85       	ldd	r20, Z+11	; 0x0b
    1b40:	54 85       	ldd	r21, Z+12	; 0x0c
    1b42:	89 81       	ldd	r24, Y+1	; 0x01
    1b44:	9a 81       	ldd	r25, Y+2	; 0x02
    1b46:	fc 01       	movw	r30, r24
    1b48:	87 81       	ldd	r24, Z+7	; 0x07
    1b4a:	90 85       	ldd	r25, Z+8	; 0x08
    1b4c:	48 17       	cp	r20, r24
    1b4e:	59 07       	cpc	r21, r25
    1b50:	19 f4       	brne	.+6      	; 0x1b58 <nwkRxIndicateDataFrame+0x1a4>
    1b52:	88 e0       	ldi	r24, 0x08	; 8
    1b54:	90 e0       	ldi	r25, 0x00	; 0
    1b56:	02 c0       	rjmp	.+4      	; 0x1b5c <nwkRxIndicateDataFrame+0x1a8>
    1b58:	80 e0       	ldi	r24, 0x00	; 0
    1b5a:	90 e0       	ldi	r25, 0x00	; 0
    1b5c:	82 2b       	or	r24, r18
    1b5e:	93 2b       	or	r25, r19
    1b60:	9a 87       	std	Y+10, r25	; 0x0a
    1b62:	89 87       	std	Y+9, r24	; 0x09
	ind.options	|= (NWK_BROADCAST_PANID == header->macDstPanId) ? NWK_IND_OPT_BROADCAST_PAN_ID : 0;
    1b64:	29 85       	ldd	r18, Y+9	; 0x09
    1b66:	3a 85       	ldd	r19, Y+10	; 0x0a
    1b68:	89 81       	ldd	r24, Y+1	; 0x01
    1b6a:	9a 81       	ldd	r25, Y+2	; 0x02
    1b6c:	fc 01       	movw	r30, r24
    1b6e:	83 81       	ldd	r24, Z+3	; 0x03
    1b70:	94 81       	ldd	r25, Z+4	; 0x04
    1b72:	01 96       	adiw	r24, 0x01	; 1
    1b74:	19 f4       	brne	.+6      	; 0x1b7c <nwkRxIndicateDataFrame+0x1c8>
    1b76:	80 e1       	ldi	r24, 0x10	; 16
    1b78:	90 e0       	ldi	r25, 0x00	; 0
    1b7a:	02 c0       	rjmp	.+4      	; 0x1b80 <nwkRxIndicateDataFrame+0x1cc>
    1b7c:	80 e0       	ldi	r24, 0x00	; 0
    1b7e:	90 e0       	ldi	r25, 0x00	; 0
    1b80:	82 2b       	or	r24, r18
    1b82:	93 2b       	or	r25, r19
    1b84:	9a 87       	std	Y+10, r25	; 0x0a
    1b86:	89 87       	std	Y+9, r24	; 0x09

	return nwkIb.endpoint[header->nwkDstEndpoint](&ind);
    1b88:	89 81       	ldd	r24, Y+1	; 0x01
    1b8a:	9a 81       	ldd	r25, Y+2	; 0x02
    1b8c:	fc 01       	movw	r30, r24
    1b8e:	87 85       	ldd	r24, Z+15	; 0x0f
    1b90:	82 95       	swap	r24
    1b92:	8f 70       	andi	r24, 0x0F	; 15
    1b94:	88 2f       	mov	r24, r24
    1b96:	90 e0       	ldi	r25, 0x00	; 0
    1b98:	03 96       	adiw	r24, 0x03	; 3
    1b9a:	88 0f       	add	r24, r24
    1b9c:	99 1f       	adc	r25, r25
    1b9e:	86 57       	subi	r24, 0x76	; 118
    1ba0:	9f 4e       	sbci	r25, 0xEF	; 239
    1ba2:	fc 01       	movw	r30, r24
    1ba4:	20 81       	ld	r18, Z
    1ba6:	31 81       	ldd	r19, Z+1	; 0x01
    1ba8:	ce 01       	movw	r24, r28
    1baa:	03 96       	adiw	r24, 0x03	; 3
    1bac:	f9 01       	movw	r30, r18
    1bae:	09 95       	icall
}
    1bb0:	61 96       	adiw	r28, 0x11	; 17
    1bb2:	0f b6       	in	r0, 0x3f	; 63
    1bb4:	f8 94       	cli
    1bb6:	de bf       	out	0x3e, r29	; 62
    1bb8:	0f be       	out	0x3f, r0	; 63
    1bba:	cd bf       	out	0x3d, r28	; 61
    1bbc:	df 91       	pop	r29
    1bbe:	cf 91       	pop	r28
    1bc0:	08 95       	ret

00001bc2 <nwkRxIndicateBeaconFrame>:

/*************************************************************************//**
*****************************************************************************/
static bool nwkRxIndicateBeaconFrame(NwkFrame_t *frame)
{
    1bc2:	cf 93       	push	r28
    1bc4:	df 93       	push	r29
    1bc6:	cd b7       	in	r28, 0x3d	; 61
    1bc8:	de b7       	in	r29, 0x3e	; 62
    1bca:	61 97       	sbiw	r28, 0x11	; 17
    1bcc:	0f b6       	in	r0, 0x3f	; 63
    1bce:	f8 94       	cli
    1bd0:	de bf       	out	0x3e, r29	; 62
    1bd2:	0f be       	out	0x3f, r0	; 63
    1bd4:	cd bf       	out	0x3d, r28	; 61
    1bd6:	99 8b       	std	Y+17, r25	; 0x11
    1bd8:	88 8b       	std	Y+16, r24	; 0x10
	NwkFrameHeader_t *header = &frame->header;
    1bda:	88 89       	ldd	r24, Y+16	; 0x10
    1bdc:	99 89       	ldd	r25, Y+17	; 0x11
    1bde:	02 96       	adiw	r24, 0x02	; 2
    1be0:	9a 83       	std	Y+2, r25	; 0x02
    1be2:	89 83       	std	Y+1, r24	; 0x01
	NWK_DataInd_t ind;
	
	frame->state = NWK_RX_STATE_FINISH;
    1be4:	88 89       	ldd	r24, Y+16	; 0x10
    1be6:	99 89       	ldd	r25, Y+17	; 0x11
    1be8:	24 e2       	ldi	r18, 0x24	; 36
    1bea:	fc 01       	movw	r30, r24
    1bec:	20 83       	st	Z, r18

	if (NULL == nwkIb.endpoint[0]) {
    1bee:	80 91 90 10 	lds	r24, 0x1090	; 0x801090 <nwkIb+0x6>
    1bf2:	90 91 91 10 	lds	r25, 0x1091	; 0x801091 <nwkIb+0x7>
    1bf6:	89 2b       	or	r24, r25
    1bf8:	11 f4       	brne	.+4      	; 0x1bfe <nwkRxIndicateBeaconFrame+0x3c>
	return false;
    1bfa:	80 e0       	ldi	r24, 0x00	; 0
    1bfc:	44 c0       	rjmp	.+136    	; 0x1c86 <nwkRxIndicateBeaconFrame+0xc4>
	}

	ind.srcAddr = frame->beacon.macSrcAddr;
    1bfe:	88 89       	ldd	r24, Y+16	; 0x10
    1c00:	99 89       	ldd	r25, Y+17	; 0x11
    1c02:	fc 01       	movw	r30, r24
    1c04:	87 81       	ldd	r24, Z+7	; 0x07
    1c06:	90 85       	ldd	r25, Z+8	; 0x08
    1c08:	9c 83       	std	Y+4, r25	; 0x04
    1c0a:	8b 83       	std	Y+3, r24	; 0x03
	ind.dstAddr = frame->beacon.macSrcAddr;
    1c0c:	88 89       	ldd	r24, Y+16	; 0x10
    1c0e:	99 89       	ldd	r25, Y+17	; 0x11
    1c10:	fc 01       	movw	r30, r24
    1c12:	87 81       	ldd	r24, Z+7	; 0x07
    1c14:	90 85       	ldd	r25, Z+8	; 0x08
    1c16:	9e 83       	std	Y+6, r25	; 0x06
    1c18:	8d 83       	std	Y+5, r24	; 0x05
	ind.srcEndpoint = 0;
    1c1a:	1f 82       	std	Y+7, r1	; 0x07
	ind.dstEndpoint = 0;
    1c1c:	18 86       	std	Y+8, r1	; 0x08
	ind.data = frame->payload;
    1c1e:	88 89       	ldd	r24, Y+16	; 0x10
    1c20:	99 89       	ldd	r25, Y+17	; 0x11
    1c22:	8f 57       	subi	r24, 0x7F	; 127
    1c24:	9f 4f       	sbci	r25, 0xFF	; 255
    1c26:	fc 01       	movw	r30, r24
    1c28:	80 81       	ld	r24, Z
    1c2a:	91 81       	ldd	r25, Z+1	; 0x01
    1c2c:	9c 87       	std	Y+12, r25	; 0x0c
    1c2e:	8b 87       	std	Y+11, r24	; 0x0b
	ind.size = nwkFramePayloadSize(frame);
    1c30:	88 89       	ldd	r24, Y+16	; 0x10
    1c32:	99 89       	ldd	r25, Y+17	; 0x11
    1c34:	0e 94 f5 08 	call	0x11ea	; 0x11ea <nwkFramePayloadSize>
    1c38:	8d 87       	std	Y+13, r24	; 0x0d
	ind.lqi = frame->rx.lqi;
    1c3a:	88 89       	ldd	r24, Y+16	; 0x10
    1c3c:	99 89       	ldd	r25, Y+17	; 0x11
    1c3e:	8d 57       	subi	r24, 0x7D	; 125
    1c40:	9f 4f       	sbci	r25, 0xFF	; 255
    1c42:	fc 01       	movw	r30, r24
    1c44:	80 81       	ld	r24, Z
    1c46:	8e 87       	std	Y+14, r24	; 0x0e
	ind.rssi = frame->rx.rssi;
    1c48:	88 89       	ldd	r24, Y+16	; 0x10
    1c4a:	99 89       	ldd	r25, Y+17	; 0x11
    1c4c:	8c 57       	subi	r24, 0x7C	; 124
    1c4e:	9f 4f       	sbci	r25, 0xFF	; 255
    1c50:	fc 01       	movw	r30, r24
    1c52:	80 81       	ld	r24, Z
    1c54:	8f 87       	std	Y+15, r24	; 0x0f

	ind.options	= NWK_IND_OPT_BEACON;
    1c56:	80 e8       	ldi	r24, 0x80	; 128
    1c58:	90 e0       	ldi	r25, 0x00	; 0
    1c5a:	9a 87       	std	Y+10, r25	; 0x0a
    1c5c:	89 87       	std	Y+9, r24	; 0x09

	return nwkIb.endpoint[header->nwkDstEndpoint](&ind);
    1c5e:	89 81       	ldd	r24, Y+1	; 0x01
    1c60:	9a 81       	ldd	r25, Y+2	; 0x02
    1c62:	fc 01       	movw	r30, r24
    1c64:	87 85       	ldd	r24, Z+15	; 0x0f
    1c66:	82 95       	swap	r24
    1c68:	8f 70       	andi	r24, 0x0F	; 15
    1c6a:	88 2f       	mov	r24, r24
    1c6c:	90 e0       	ldi	r25, 0x00	; 0
    1c6e:	03 96       	adiw	r24, 0x03	; 3
    1c70:	88 0f       	add	r24, r24
    1c72:	99 1f       	adc	r25, r25
    1c74:	86 57       	subi	r24, 0x76	; 118
    1c76:	9f 4e       	sbci	r25, 0xEF	; 239
    1c78:	fc 01       	movw	r30, r24
    1c7a:	20 81       	ld	r18, Z
    1c7c:	31 81       	ldd	r19, Z+1	; 0x01
    1c7e:	ce 01       	movw	r24, r28
    1c80:	03 96       	adiw	r24, 0x03	; 3
    1c82:	f9 01       	movw	r30, r18
    1c84:	09 95       	icall
}
    1c86:	61 96       	adiw	r28, 0x11	; 17
    1c88:	0f b6       	in	r0, 0x3f	; 63
    1c8a:	f8 94       	cli
    1c8c:	de bf       	out	0x3e, r29	; 62
    1c8e:	0f be       	out	0x3f, r0	; 63
    1c90:	cd bf       	out	0x3d, r28	; 61
    1c92:	df 91       	pop	r29
    1c94:	cf 91       	pop	r28
    1c96:	08 95       	ret

00001c98 <nwkRxIndicateLLBeaconFrame>:

/*************************************************************************//**
*****************************************************************************/
static bool nwkRxIndicateLLBeaconFrame(NwkFrame_t *frame)
{
    1c98:	cf 93       	push	r28
    1c9a:	df 93       	push	r29
    1c9c:	cd b7       	in	r28, 0x3d	; 61
    1c9e:	de b7       	in	r29, 0x3e	; 62
    1ca0:	2f 97       	sbiw	r28, 0x0f	; 15
    1ca2:	0f b6       	in	r0, 0x3f	; 63
    1ca4:	f8 94       	cli
    1ca6:	de bf       	out	0x3e, r29	; 62
    1ca8:	0f be       	out	0x3f, r0	; 63
    1caa:	cd bf       	out	0x3d, r28	; 61
    1cac:	9f 87       	std	Y+15, r25	; 0x0f
    1cae:	8e 87       	std	Y+14, r24	; 0x0e
	// NwkFrameBeaconHeaderLLDN_t *header = &frame->LLbeacon;
	NWK_DataInd_t ind;

	frame->state = NWK_RX_STATE_FINISH;
    1cb0:	8e 85       	ldd	r24, Y+14	; 0x0e
    1cb2:	9f 85       	ldd	r25, Y+15	; 0x0f
    1cb4:	24 e2       	ldi	r18, 0x24	; 36
    1cb6:	fc 01       	movw	r30, r24
    1cb8:	20 83       	st	Z, r18

	if (NULL == nwkIb.endpoint[1]) {
    1cba:	80 91 92 10 	lds	r24, 0x1092	; 0x801092 <nwkIb+0x8>
    1cbe:	90 91 93 10 	lds	r25, 0x1093	; 0x801093 <nwkIb+0x9>
    1cc2:	89 2b       	or	r24, r25
    1cc4:	11 f4       	brne	.+4      	; 0x1cca <nwkRxIndicateLLBeaconFrame+0x32>
	return false;
    1cc6:	80 e0       	ldi	r24, 0x00	; 0
    1cc8:	1f c0       	rjmp	.+62     	; 0x1d08 <nwkRxIndicateLLBeaconFrame+0x70>
	}

	ind.data = &frame->LLbeacon;
    1cca:	8e 85       	ldd	r24, Y+14	; 0x0e
    1ccc:	9f 85       	ldd	r25, Y+15	; 0x0f
    1cce:	02 96       	adiw	r24, 0x02	; 2
    1cd0:	9a 87       	std	Y+10, r25	; 0x0a
    1cd2:	89 87       	std	Y+9, r24	; 0x09
	// ind.size = nwkFramePayloadSize(frame);
	ind.lqi = frame->rx.lqi;
    1cd4:	8e 85       	ldd	r24, Y+14	; 0x0e
    1cd6:	9f 85       	ldd	r25, Y+15	; 0x0f
    1cd8:	8d 57       	subi	r24, 0x7D	; 125
    1cda:	9f 4f       	sbci	r25, 0xFF	; 255
    1cdc:	fc 01       	movw	r30, r24
    1cde:	80 81       	ld	r24, Z
    1ce0:	8c 87       	std	Y+12, r24	; 0x0c
	ind.rssi = frame->rx.rssi;
    1ce2:	8e 85       	ldd	r24, Y+14	; 0x0e
    1ce4:	9f 85       	ldd	r25, Y+15	; 0x0f
    1ce6:	8c 57       	subi	r24, 0x7C	; 124
    1ce8:	9f 4f       	sbci	r25, 0xFF	; 255
    1cea:	fc 01       	movw	r30, r24
    1cec:	80 81       	ld	r24, Z
    1cee:	8d 87       	std	Y+13, r24	; 0x0d

	ind.options	= NWK_IND_OPT_LLDN_BEACON;
    1cf0:	80 e0       	ldi	r24, 0x00	; 0
    1cf2:	91 e0       	ldi	r25, 0x01	; 1
    1cf4:	98 87       	std	Y+8, r25	; 0x08
    1cf6:	8f 83       	std	Y+7, r24	; 0x07


	return nwkIb.endpoint[1](&ind);
    1cf8:	20 91 92 10 	lds	r18, 0x1092	; 0x801092 <nwkIb+0x8>
    1cfc:	30 91 93 10 	lds	r19, 0x1093	; 0x801093 <nwkIb+0x9>
    1d00:	ce 01       	movw	r24, r28
    1d02:	01 96       	adiw	r24, 0x01	; 1
    1d04:	f9 01       	movw	r30, r18
    1d06:	09 95       	icall
}
    1d08:	2f 96       	adiw	r28, 0x0f	; 15
    1d0a:	0f b6       	in	r0, 0x3f	; 63
    1d0c:	f8 94       	cli
    1d0e:	de bf       	out	0x3e, r29	; 62
    1d10:	0f be       	out	0x3f, r0	; 63
    1d12:	cd bf       	out	0x3d, r28	; 61
    1d14:	df 91       	pop	r29
    1d16:	cf 91       	pop	r28
    1d18:	08 95       	ret

00001d1a <nwkRxIndicateLLCommandFrame>:


static bool nwkRxIndicateLLCommandFrame(NwkFrame_t *frame)
{
    1d1a:	cf 93       	push	r28
    1d1c:	df 93       	push	r29
    1d1e:	cd b7       	in	r28, 0x3d	; 61
    1d20:	de b7       	in	r29, 0x3e	; 62
    1d22:	61 97       	sbiw	r28, 0x11	; 17
    1d24:	0f b6       	in	r0, 0x3f	; 63
    1d26:	f8 94       	cli
    1d28:	de bf       	out	0x3e, r29	; 62
    1d2a:	0f be       	out	0x3f, r0	; 63
    1d2c:	cd bf       	out	0x3d, r28	; 61
    1d2e:	99 8b       	std	Y+17, r25	; 0x11
    1d30:	88 8b       	std	Y+16, r24	; 0x10
	NwkFrameGeneralHeaderLLDN_t *header = &frame->LLgeneral;
    1d32:	88 89       	ldd	r24, Y+16	; 0x10
    1d34:	99 89       	ldd	r25, Y+17	; 0x11
    1d36:	02 96       	adiw	r24, 0x02	; 2
    1d38:	9a 83       	std	Y+2, r25	; 0x02
    1d3a:	89 83       	std	Y+1, r24	; 0x01
	NWK_DataInd_t ind;

	frame->state = NWK_RX_STATE_FINISH;
    1d3c:	88 89       	ldd	r24, Y+16	; 0x10
    1d3e:	99 89       	ldd	r25, Y+17	; 0x11
    1d40:	24 e2       	ldi	r18, 0x24	; 36
    1d42:	fc 01       	movw	r30, r24
    1d44:	20 83       	st	Z, r18

	if (NULL == nwkIb.endpoint[2]) {
    1d46:	80 91 94 10 	lds	r24, 0x1094	; 0x801094 <nwkIb+0xa>
    1d4a:	90 91 95 10 	lds	r25, 0x1095	; 0x801095 <nwkIb+0xb>
    1d4e:	89 2b       	or	r24, r25
    1d50:	11 f4       	brne	.+4      	; 0x1d56 <nwkRxIndicateLLCommandFrame+0x3c>
	return false;
    1d52:	80 e0       	ldi	r24, 0x00	; 0
    1d54:	24 c0       	rjmp	.+72     	; 0x1d9e <nwkRxIndicateLLCommandFrame+0x84>
	}

	ind.data = &frame->data;
    1d56:	88 89       	ldd	r24, Y+16	; 0x10
    1d58:	99 89       	ldd	r25, Y+17	; 0x11
    1d5a:	02 96       	adiw	r24, 0x02	; 2
    1d5c:	9c 87       	std	Y+12, r25	; 0x0c
    1d5e:	8b 87       	std	Y+11, r24	; 0x0b
	ind.size = nwkFramePayloadSize(frame);
    1d60:	88 89       	ldd	r24, Y+16	; 0x10
    1d62:	99 89       	ldd	r25, Y+17	; 0x11
    1d64:	0e 94 f5 08 	call	0x11ea	; 0x11ea <nwkFramePayloadSize>
    1d68:	8d 87       	std	Y+13, r24	; 0x0d
	ind.lqi = frame->rx.lqi;
    1d6a:	88 89       	ldd	r24, Y+16	; 0x10
    1d6c:	99 89       	ldd	r25, Y+17	; 0x11
    1d6e:	8d 57       	subi	r24, 0x7D	; 125
    1d70:	9f 4f       	sbci	r25, 0xFF	; 255
    1d72:	fc 01       	movw	r30, r24
    1d74:	80 81       	ld	r24, Z
    1d76:	8e 87       	std	Y+14, r24	; 0x0e
	ind.rssi = frame->rx.rssi;
    1d78:	88 89       	ldd	r24, Y+16	; 0x10
    1d7a:	99 89       	ldd	r25, Y+17	; 0x11
    1d7c:	8c 57       	subi	r24, 0x7C	; 124
    1d7e:	9f 4f       	sbci	r25, 0xFF	; 255
    1d80:	fc 01       	movw	r30, r24
    1d82:	80 81       	ld	r24, Z
    1d84:	8f 87       	std	Y+15, r24	; 0x0f

	ind.options	= NWK_IND_OPT_LLDN_MACCOMMAND;
    1d86:	80 e0       	ldi	r24, 0x00	; 0
    1d88:	92 e0       	ldi	r25, 0x02	; 2
    1d8a:	9a 87       	std	Y+10, r25	; 0x0a
    1d8c:	89 87       	std	Y+9, r24	; 0x09

	return nwkIb.endpoint[2](&ind);
    1d8e:	20 91 94 10 	lds	r18, 0x1094	; 0x801094 <nwkIb+0xa>
    1d92:	30 91 95 10 	lds	r19, 0x1095	; 0x801095 <nwkIb+0xb>
    1d96:	ce 01       	movw	r24, r28
    1d98:	03 96       	adiw	r24, 0x03	; 3
    1d9a:	f9 01       	movw	r30, r18
    1d9c:	09 95       	icall
}
    1d9e:	61 96       	adiw	r28, 0x11	; 17
    1da0:	0f b6       	in	r0, 0x3f	; 63
    1da2:	f8 94       	cli
    1da4:	de bf       	out	0x3e, r29	; 62
    1da6:	0f be       	out	0x3f, r0	; 63
    1da8:	cd bf       	out	0x3d, r28	; 61
    1daa:	df 91       	pop	r29
    1dac:	cf 91       	pop	r28
    1dae:	08 95       	ret

00001db0 <nwkRxHandleIndication>:


/*************************************************************************//**
*****************************************************************************/
static void nwkRxHandleIndication(NwkFrame_t *frame)
{
    1db0:	cf 93       	push	r28
    1db2:	df 93       	push	r29
    1db4:	00 d0       	rcall	.+0      	; 0x1db6 <nwkRxHandleIndication+0x6>
    1db6:	1f 92       	push	r1
    1db8:	cd b7       	in	r28, 0x3d	; 61
    1dba:	de b7       	in	r29, 0x3e	; 62
    1dbc:	9b 83       	std	Y+3, r25	; 0x03
    1dbe:	8a 83       	std	Y+2, r24	; 0x02
	bool ack;

	nwkRxAckControl = 0;
    1dc0:	10 92 e5 0d 	sts	0x0DE5, r1	; 0x800de5 <nwkRxAckControl>
	ack = nwkRxIndicateDataFrame(frame);
    1dc4:	8a 81       	ldd	r24, Y+2	; 0x02
    1dc6:	9b 81       	ldd	r25, Y+3	; 0x03
    1dc8:	0e 94 da 0c 	call	0x19b4	; 0x19b4 <nwkRxIndicateDataFrame>
    1dcc:	89 83       	std	Y+1, r24	; 0x01

	if (0 == frame->header.nwkFcf.ackRequest) {
    1dce:	8a 81       	ldd	r24, Y+2	; 0x02
    1dd0:	9b 81       	ldd	r25, Y+3	; 0x03
    1dd2:	fc 01       	movw	r30, r24
    1dd4:	83 85       	ldd	r24, Z+11	; 0x0b
    1dd6:	81 70       	andi	r24, 0x01	; 1
    1dd8:	88 23       	and	r24, r24
    1dda:	09 f4       	brne	.+2      	; 0x1dde <nwkRxHandleIndication+0x2e>
		ack = false;
    1ddc:	19 82       	std	Y+1, r1	; 0x01
	}

	if (NWK_BROADCAST_ADDR == frame->header.macDstAddr &&
    1dde:	8a 81       	ldd	r24, Y+2	; 0x02
    1de0:	9b 81       	ldd	r25, Y+3	; 0x03
    1de2:	fc 01       	movw	r30, r24
    1de4:	87 81       	ldd	r24, Z+7	; 0x07
    1de6:	90 85       	ldd	r25, Z+8	; 0x08
    1de8:	01 96       	adiw	r24, 0x01	; 1
    1dea:	a9 f4       	brne	.+42     	; 0x1e16 <nwkRxHandleIndication+0x66>
			nwkIb.addr == frame->header.nwkDstAddr &&
    1dec:	20 91 8a 10 	lds	r18, 0x108A	; 0x80108a <nwkIb>
    1df0:	30 91 8b 10 	lds	r19, 0x108B	; 0x80108b <nwkIb+0x1>
    1df4:	8a 81       	ldd	r24, Y+2	; 0x02
    1df6:	9b 81       	ldd	r25, Y+3	; 0x03
    1df8:	fc 01       	movw	r30, r24
    1dfa:	87 85       	ldd	r24, Z+15	; 0x0f
    1dfc:	90 89       	ldd	r25, Z+16	; 0x10

	if (0 == frame->header.nwkFcf.ackRequest) {
		ack = false;
	}

	if (NWK_BROADCAST_ADDR == frame->header.macDstAddr &&
    1dfe:	28 17       	cp	r18, r24
    1e00:	39 07       	cpc	r19, r25
    1e02:	49 f4       	brne	.+18     	; 0x1e16 <nwkRxHandleIndication+0x66>
			nwkIb.addr == frame->header.nwkDstAddr &&
			0 == frame->header.nwkFcf.multicast) {
    1e04:	8a 81       	ldd	r24, Y+2	; 0x02
    1e06:	9b 81       	ldd	r25, Y+3	; 0x03
    1e08:	fc 01       	movw	r30, r24
    1e0a:	83 85       	ldd	r24, Z+11	; 0x0b
    1e0c:	88 70       	andi	r24, 0x08	; 8
	if (0 == frame->header.nwkFcf.ackRequest) {
		ack = false;
	}

	if (NWK_BROADCAST_ADDR == frame->header.macDstAddr &&
			nwkIb.addr == frame->header.nwkDstAddr &&
    1e0e:	88 23       	and	r24, r24
    1e10:	11 f4       	brne	.+4      	; 0x1e16 <nwkRxHandleIndication+0x66>
			0 == frame->header.nwkFcf.multicast) {
		ack = true;
    1e12:	81 e0       	ldi	r24, 0x01	; 1
    1e14:	89 83       	std	Y+1, r24	; 0x01
	}

	if (NWK_BROADCAST_PANID == frame->header.macDstPanId) {
    1e16:	8a 81       	ldd	r24, Y+2	; 0x02
    1e18:	9b 81       	ldd	r25, Y+3	; 0x03
    1e1a:	fc 01       	movw	r30, r24
    1e1c:	85 81       	ldd	r24, Z+5	; 0x05
    1e1e:	96 81       	ldd	r25, Z+6	; 0x06
    1e20:	01 96       	adiw	r24, 0x01	; 1
    1e22:	09 f4       	brne	.+2      	; 0x1e26 <nwkRxHandleIndication+0x76>
		ack = false;
    1e24:	19 82       	std	Y+1, r1	; 0x01
	}

	if (NWK_BROADCAST_ADDR == nwkIb.addr) {
    1e26:	80 91 8a 10 	lds	r24, 0x108A	; 0x80108a <nwkIb>
    1e2a:	90 91 8b 10 	lds	r25, 0x108B	; 0x80108b <nwkIb+0x1>
    1e2e:	01 96       	adiw	r24, 0x01	; 1
    1e30:	09 f4       	brne	.+2      	; 0x1e34 <nwkRxHandleIndication+0x84>
		ack = false;
    1e32:	19 82       	std	Y+1, r1	; 0x01
	}

	if (ack) {
    1e34:	89 81       	ldd	r24, Y+1	; 0x01
    1e36:	88 23       	and	r24, r24
    1e38:	21 f0       	breq	.+8      	; 0x1e42 <nwkRxHandleIndication+0x92>
		nwkRxSendAck(frame);
    1e3a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e3c:	9b 81       	ldd	r25, Y+3	; 0x03
    1e3e:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <nwkRxSendAck>
	}

	frame->state = NWK_RX_STATE_FINISH;
    1e42:	8a 81       	ldd	r24, Y+2	; 0x02
    1e44:	9b 81       	ldd	r25, Y+3	; 0x03
    1e46:	24 e2       	ldi	r18, 0x24	; 36
    1e48:	fc 01       	movw	r30, r24
    1e4a:	20 83       	st	Z, r18
}
    1e4c:	00 00       	nop
    1e4e:	0f 90       	pop	r0
    1e50:	0f 90       	pop	r0
    1e52:	0f 90       	pop	r0
    1e54:	df 91       	pop	r29
    1e56:	cf 91       	pop	r28
    1e58:	08 95       	ret

00001e5a <nwkRxTaskHandler>:

/*************************************************************************//**
*  @brief Rx Module task handler
*****************************************************************************/
void nwkRxTaskHandler(void)
{
    1e5a:	cf 93       	push	r28
    1e5c:	df 93       	push	r29
    1e5e:	00 d0       	rcall	.+0      	; 0x1e60 <nwkRxTaskHandler+0x6>
    1e60:	cd b7       	in	r28, 0x3d	; 61
    1e62:	de b7       	in	r29, 0x3e	; 62
	NwkFrame_t *frame = NULL;
    1e64:	1a 82       	std	Y+2, r1	; 0x02
    1e66:	19 82       	std	Y+1, r1	; 0x01

	while (NULL != (frame = nwkFrameNext(frame))) {
    1e68:	39 c0       	rjmp	.+114    	; 0x1edc <nwkRxTaskHandler+0x82>
		switch (frame->state) {
    1e6a:	89 81       	ldd	r24, Y+1	; 0x01
    1e6c:	9a 81       	ldd	r25, Y+2	; 0x02
    1e6e:	fc 01       	movw	r30, r24
    1e70:	80 81       	ld	r24, Z
    1e72:	88 2f       	mov	r24, r24
    1e74:	90 e0       	ldi	r25, 0x00	; 0
    1e76:	84 32       	cpi	r24, 0x24	; 36
    1e78:	91 05       	cpc	r25, r1
    1e7a:	e1 f0       	breq	.+56     	; 0x1eb4 <nwkRxTaskHandler+0x5a>
    1e7c:	85 32       	cpi	r24, 0x25	; 37
    1e7e:	91 05       	cpc	r25, r1
    1e80:	34 f4       	brge	.+12     	; 0x1e8e <nwkRxTaskHandler+0x34>
    1e82:	80 32       	cpi	r24, 0x20	; 32
    1e84:	91 05       	cpc	r25, r1
    1e86:	61 f0       	breq	.+24     	; 0x1ea0 <nwkRxTaskHandler+0x46>
    1e88:	82 97       	sbiw	r24, 0x22	; 34
    1e8a:	79 f0       	breq	.+30     	; 0x1eaa <nwkRxTaskHandler+0x50>
    1e8c:	27 c0       	rjmp	.+78     	; 0x1edc <nwkRxTaskHandler+0x82>
    1e8e:	86 32       	cpi	r24, 0x26	; 38
    1e90:	91 05       	cpc	r25, r1
    1e92:	d1 f0       	breq	.+52     	; 0x1ec8 <nwkRxTaskHandler+0x6e>
    1e94:	86 32       	cpi	r24, 0x26	; 38
    1e96:	91 05       	cpc	r25, r1
    1e98:	94 f0       	brlt	.+36     	; 0x1ebe <nwkRxTaskHandler+0x64>
    1e9a:	87 97       	sbiw	r24, 0x27	; 39
    1e9c:	d1 f0       	breq	.+52     	; 0x1ed2 <nwkRxTaskHandler+0x78>
    1e9e:	1e c0       	rjmp	.+60     	; 0x1edc <nwkRxTaskHandler+0x82>
		case NWK_RX_STATE_RECEIVED:
		{
			nwkRxHandleReceivedFrame(frame);
    1ea0:	89 81       	ldd	r24, Y+1	; 0x01
    1ea2:	9a 81       	ldd	r25, Y+2	; 0x02
    1ea4:	0e 94 2b 0c 	call	0x1856	; 0x1856 <nwkRxHandleReceivedFrame>
		}
		break;
    1ea8:	19 c0       	rjmp	.+50     	; 0x1edc <nwkRxTaskHandler+0x82>
		break;
#endif

		case NWK_RX_STATE_INDICATE:
		{
			nwkRxHandleIndication(frame);
    1eaa:	89 81       	ldd	r24, Y+1	; 0x01
    1eac:	9a 81       	ldd	r25, Y+2	; 0x02
    1eae:	0e 94 d8 0e 	call	0x1db0	; 0x1db0 <nwkRxHandleIndication>
		}
		break;
    1eb2:	14 c0       	rjmp	.+40     	; 0x1edc <nwkRxTaskHandler+0x82>
		break;
#endif

		case NWK_RX_STATE_FINISH:
		{
			nwkFrameFree(frame);
    1eb4:	89 81       	ldd	r24, Y+1	; 0x01
    1eb6:	9a 81       	ldd	r25, Y+2	; 0x02
    1eb8:	0e 94 82 08 	call	0x1104	; 0x1104 <nwkFrameFree>
		}
		break;
    1ebc:	0f c0       	rjmp	.+30     	; 0x1edc <nwkRxTaskHandler+0x82>

		case NWK_RX_STATE_BEACON:
		{
			nwkRxIndicateBeaconFrame(frame);
    1ebe:	89 81       	ldd	r24, Y+1	; 0x01
    1ec0:	9a 81       	ldd	r25, Y+2	; 0x02
    1ec2:	0e 94 e1 0d 	call	0x1bc2	; 0x1bc2 <nwkRxIndicateBeaconFrame>
		}
		break;
    1ec6:	0a c0       	rjmp	.+20     	; 0x1edc <nwkRxTaskHandler+0x82>
		
		
		case NWK_RX_STATE_LLBEACON:
		{
			nwkRxIndicateLLBeaconFrame(frame);
    1ec8:	89 81       	ldd	r24, Y+1	; 0x01
    1eca:	9a 81       	ldd	r25, Y+2	; 0x02
    1ecc:	0e 94 4c 0e 	call	0x1c98	; 0x1c98 <nwkRxIndicateLLBeaconFrame>
		}
		break;
    1ed0:	05 c0       	rjmp	.+10     	; 0x1edc <nwkRxTaskHandler+0x82>

		case NWK_RX_STATE_LLCOMMAND:
		{
			nwkRxIndicateLLCommandFrame(frame);
    1ed2:	89 81       	ldd	r24, Y+1	; 0x01
    1ed4:	9a 81       	ldd	r25, Y+2	; 0x02
    1ed6:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <nwkRxIndicateLLCommandFrame>
		}
		break;
    1eda:	00 00       	nop
*****************************************************************************/
void nwkRxTaskHandler(void)
{
	NwkFrame_t *frame = NULL;

	while (NULL != (frame = nwkFrameNext(frame))) {
    1edc:	89 81       	ldd	r24, Y+1	; 0x01
    1ede:	9a 81       	ldd	r25, Y+2	; 0x02
    1ee0:	0e 94 9c 08 	call	0x1138	; 0x1138 <nwkFrameNext>
    1ee4:	9a 83       	std	Y+2, r25	; 0x02
    1ee6:	89 83       	std	Y+1, r24	; 0x01
    1ee8:	89 81       	ldd	r24, Y+1	; 0x01
    1eea:	9a 81       	ldd	r25, Y+2	; 0x02
    1eec:	89 2b       	or	r24, r25
    1eee:	09 f0       	breq	.+2      	; 0x1ef2 <nwkRxTaskHandler+0x98>
    1ef0:	bc cf       	rjmp	.-136    	; 0x1e6a <nwkRxTaskHandler+0x10>
			nwkRxIndicateLLCommandFrame(frame);
		}
		break;
		}
	}
}
    1ef2:	00 00       	nop
    1ef4:	0f 90       	pop	r0
    1ef6:	0f 90       	pop	r0
    1ef8:	df 91       	pop	r29
    1efa:	cf 91       	pop	r28
    1efc:	08 95       	ret

00001efe <nwkTxInit>:

/*************************************************************************//**
*  @brief Initializes the Tx module
*****************************************************************************/
void nwkTxInit(void)
{
    1efe:	cf 93       	push	r28
    1f00:	df 93       	push	r29
    1f02:	cd b7       	in	r28, 0x3d	; 61
    1f04:	de b7       	in	r29, 0x3e	; 62
	nwkTxPhyActiveFrame = NULL;
    1f06:	10 92 f4 0d 	sts	0x0DF4, r1	; 0x800df4 <nwkTxPhyActiveFrame+0x1>
    1f0a:	10 92 f3 0d 	sts	0x0DF3, r1	; 0x800df3 <nwkTxPhyActiveFrame>

	nwkTxAckWaitTimer.interval = NWK_TX_ACK_WAIT_TIMER_INTERVAL;
    1f0e:	82 e3       	ldi	r24, 0x32	; 50
    1f10:	90 e0       	ldi	r25, 0x00	; 0
    1f12:	a0 e0       	ldi	r26, 0x00	; 0
    1f14:	b0 e0       	ldi	r27, 0x00	; 0
    1f16:	80 93 fb 0d 	sts	0x0DFB, r24	; 0x800dfb <nwkTxAckWaitTimer+0x6>
    1f1a:	90 93 fc 0d 	sts	0x0DFC, r25	; 0x800dfc <nwkTxAckWaitTimer+0x7>
    1f1e:	a0 93 fd 0d 	sts	0x0DFD, r26	; 0x800dfd <nwkTxAckWaitTimer+0x8>
    1f22:	b0 93 fe 0d 	sts	0x0DFE, r27	; 0x800dfe <nwkTxAckWaitTimer+0x9>
	nwkTxAckWaitTimer.mode = SYS_TIMER_INTERVAL_MODE;
    1f26:	10 92 ff 0d 	sts	0x0DFF, r1	; 0x800dff <nwkTxAckWaitTimer+0xa>
	nwkTxAckWaitTimer.handler = nwkTxAckWaitTimerHandler;
    1f2a:	8a e3       	ldi	r24, 0x3A	; 58
    1f2c:	92 e1       	ldi	r25, 0x12	; 18
    1f2e:	90 93 01 0e 	sts	0x0E01, r25	; 0x800e01 <nwkTxAckWaitTimer+0xc>
    1f32:	80 93 00 0e 	sts	0x0E00, r24	; 0x800e00 <nwkTxAckWaitTimer+0xb>

	nwkTxDelayTimer.interval = NWK_TX_DELAY_TIMER_INTERVAL;
    1f36:	8a e0       	ldi	r24, 0x0A	; 10
    1f38:	90 e0       	ldi	r25, 0x00	; 0
    1f3a:	a0 e0       	ldi	r26, 0x00	; 0
    1f3c:	b0 e0       	ldi	r27, 0x00	; 0
    1f3e:	80 93 08 0e 	sts	0x0E08, r24	; 0x800e08 <nwkTxDelayTimer+0x6>
    1f42:	90 93 09 0e 	sts	0x0E09, r25	; 0x800e09 <nwkTxDelayTimer+0x7>
    1f46:	a0 93 0a 0e 	sts	0x0E0A, r26	; 0x800e0a <nwkTxDelayTimer+0x8>
    1f4a:	b0 93 0b 0e 	sts	0x0E0B, r27	; 0x800e0b <nwkTxDelayTimer+0x9>
	nwkTxDelayTimer.mode = SYS_TIMER_INTERVAL_MODE;
    1f4e:	10 92 0c 0e 	sts	0x0E0C, r1	; 0x800e0c <nwkTxDelayTimer+0xa>
	nwkTxDelayTimer.handler = nwkTxDelayTimerHandler;
    1f52:	84 ea       	ldi	r24, 0xA4	; 164
    1f54:	92 e1       	ldi	r25, 0x12	; 18
    1f56:	90 93 0e 0e 	sts	0x0E0E, r25	; 0x800e0e <nwkTxDelayTimer+0xc>
    1f5a:	80 93 0d 0e 	sts	0x0E0D, r24	; 0x800e0d <nwkTxDelayTimer+0xb>
}
    1f5e:	00 00       	nop
    1f60:	df 91       	pop	r29
    1f62:	cf 91       	pop	r28
    1f64:	08 95       	ret

00001f66 <nwkTxBeaconFrame>:

/*************************************************************************//**
*****************************************************************************/
void nwkTxBeaconFrame(NwkFrame_t *frame)
{
    1f66:	cf 93       	push	r28
    1f68:	df 93       	push	r29
    1f6a:	00 d0       	rcall	.+0      	; 0x1f6c <nwkTxBeaconFrame+0x6>
    1f6c:	00 d0       	rcall	.+0      	; 0x1f6e <nwkTxBeaconFrame+0x8>
    1f6e:	cd b7       	in	r28, 0x3d	; 61
    1f70:	de b7       	in	r29, 0x3e	; 62
    1f72:	9c 83       	std	Y+4, r25	; 0x04
    1f74:	8b 83       	std	Y+3, r24	; 0x03
	NwkFrameBeaconHeader_t *beacon = &frame->beacon;
    1f76:	8b 81       	ldd	r24, Y+3	; 0x03
    1f78:	9c 81       	ldd	r25, Y+4	; 0x04
    1f7a:	02 96       	adiw	r24, 0x02	; 2
    1f7c:	9a 83       	std	Y+2, r25	; 0x02
    1f7e:	89 83       	std	Y+1, r24	; 0x01

	frame->state = NWK_TX_STATE_SEND;
    1f80:	8b 81       	ldd	r24, Y+3	; 0x03
    1f82:	9c 81       	ldd	r25, Y+4	; 0x04
    1f84:	23 e1       	ldi	r18, 0x13	; 19
    1f86:	fc 01       	movw	r30, r24
    1f88:	20 83       	st	Z, r18
	frame->tx.status = NWK_SUCCESS_STATUS;
    1f8a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f8c:	9c 81       	ldd	r25, Y+4	; 0x04
    1f8e:	8d 57       	subi	r24, 0x7D	; 125
    1f90:	9f 4f       	sbci	r25, 0xFF	; 255
    1f92:	fc 01       	movw	r30, r24
    1f94:	10 82       	st	Z, r1
	frame->tx.timeout = 0;
    1f96:	8b 81       	ldd	r24, Y+3	; 0x03
    1f98:	9c 81       	ldd	r25, Y+4	; 0x04
    1f9a:	8c 57       	subi	r24, 0x7C	; 124
    1f9c:	9f 4f       	sbci	r25, 0xFF	; 255
    1f9e:	fc 01       	movw	r30, r24
    1fa0:	11 82       	std	Z+1, r1	; 0x01
    1fa2:	10 82       	st	Z, r1

	beacon->macFcf = 0x8000;
    1fa4:	89 81       	ldd	r24, Y+1	; 0x01
    1fa6:	9a 81       	ldd	r25, Y+2	; 0x02
    1fa8:	20 e0       	ldi	r18, 0x00	; 0
    1faa:	30 e8       	ldi	r19, 0x80	; 128
    1fac:	fc 01       	movw	r30, r24
    1fae:	31 83       	std	Z+1, r19	; 0x01
    1fb0:	20 83       	st	Z, r18
	beacon->macSeq = ++nwkIb.macSeqNum;
    1fb2:	80 91 8f 10 	lds	r24, 0x108F	; 0x80108f <nwkIb+0x5>
    1fb6:	8f 5f       	subi	r24, 0xFF	; 255
    1fb8:	80 93 8f 10 	sts	0x108F, r24	; 0x80108f <nwkIb+0x5>
    1fbc:	20 91 8f 10 	lds	r18, 0x108F	; 0x80108f <nwkIb+0x5>
    1fc0:	89 81       	ldd	r24, Y+1	; 0x01
    1fc2:	9a 81       	ldd	r25, Y+2	; 0x02
    1fc4:	fc 01       	movw	r30, r24
    1fc6:	22 83       	std	Z+2, r18	; 0x02
	beacon->macSrcPanId = nwkIb.panId;
    1fc8:	20 91 8c 10 	lds	r18, 0x108C	; 0x80108c <nwkIb+0x2>
    1fcc:	30 91 8d 10 	lds	r19, 0x108D	; 0x80108d <nwkIb+0x3>
    1fd0:	89 81       	ldd	r24, Y+1	; 0x01
    1fd2:	9a 81       	ldd	r25, Y+2	; 0x02
    1fd4:	fc 01       	movw	r30, r24
    1fd6:	34 83       	std	Z+4, r19	; 0x04
    1fd8:	23 83       	std	Z+3, r18	; 0x03
	beacon->macSrcAddr = nwkIb.addr;
    1fda:	20 91 8a 10 	lds	r18, 0x108A	; 0x80108a <nwkIb>
    1fde:	30 91 8b 10 	lds	r19, 0x108B	; 0x80108b <nwkIb+0x1>
    1fe2:	89 81       	ldd	r24, Y+1	; 0x01
    1fe4:	9a 81       	ldd	r25, Y+2	; 0x02
    1fe6:	fc 01       	movw	r30, r24
    1fe8:	36 83       	std	Z+6, r19	; 0x06
    1fea:	25 83       	std	Z+5, r18	; 0x05
}
    1fec:	00 00       	nop
    1fee:	0f 90       	pop	r0
    1ff0:	0f 90       	pop	r0
    1ff2:	0f 90       	pop	r0
    1ff4:	0f 90       	pop	r0
    1ff6:	df 91       	pop	r29
    1ff8:	cf 91       	pop	r28
    1ffa:	08 95       	ret

00001ffc <nwkTxBeaconFrameLLDN>:
void nwkTxBeaconFrameLLDN(NwkFrame_t *frame)
{
    1ffc:	cf 93       	push	r28
    1ffe:	df 93       	push	r29
    2000:	00 d0       	rcall	.+0      	; 0x2002 <nwkTxBeaconFrameLLDN+0x6>
    2002:	00 d0       	rcall	.+0      	; 0x2004 <nwkTxBeaconFrameLLDN+0x8>
    2004:	cd b7       	in	r28, 0x3d	; 61
    2006:	de b7       	in	r29, 0x3e	; 62
    2008:	9c 83       	std	Y+4, r25	; 0x04
    200a:	8b 83       	std	Y+3, r24	; 0x03
	NwkFrameBeaconHeaderLLDN_t *beacon = &frame->LLbeacon;
    200c:	8b 81       	ldd	r24, Y+3	; 0x03
    200e:	9c 81       	ldd	r25, Y+4	; 0x04
    2010:	02 96       	adiw	r24, 0x02	; 2
    2012:	9a 83       	std	Y+2, r25	; 0x02
    2014:	89 83       	std	Y+1, r24	; 0x01
	frame->state = NWK_TX_STATE_SEND;
    2016:	8b 81       	ldd	r24, Y+3	; 0x03
    2018:	9c 81       	ldd	r25, Y+4	; 0x04
    201a:	23 e1       	ldi	r18, 0x13	; 19
    201c:	fc 01       	movw	r30, r24
    201e:	20 83       	st	Z, r18
	frame->tx.status = NWK_SUCCESS_STATUS;
    2020:	8b 81       	ldd	r24, Y+3	; 0x03
    2022:	9c 81       	ldd	r25, Y+4	; 0x04
    2024:	8d 57       	subi	r24, 0x7D	; 125
    2026:	9f 4f       	sbci	r25, 0xFF	; 255
    2028:	fc 01       	movw	r30, r24
    202a:	10 82       	st	Z, r1
	frame->tx.timeout = 0;
    202c:	8b 81       	ldd	r24, Y+3	; 0x03
    202e:	9c 81       	ldd	r25, Y+4	; 0x04
    2030:	8c 57       	subi	r24, 0x7C	; 124
    2032:	9f 4f       	sbci	r25, 0xFF	; 255
    2034:	fc 01       	movw	r30, r24
    2036:	11 82       	std	Z+1, r1	; 0x01
    2038:	10 82       	st	Z, r1
	// beacon->macFcf.FrameType				= 0b100; 	// LLDN type
	// beacon->macFcf.SecurityEnabled 	= 0b1;	// 1 to enable security header and sequence number
	// beacon->macFcf.FrameVersion			= 0b0;	// zero to indicate compatible with IEEE Std 802.15.4.
	// beacon->macFcf.ackRequest				= 0b0;	// zero to indicade no ACK
	// beacon->macFcf.SubFrameType			= 0b00; // Subtype = LL-Beacon
	beacon->macFcf = 0x0c;
    203a:	89 81       	ldd	r24, Y+1	; 0x01
    203c:	9a 81       	ldd	r25, Y+2	; 0x02
    203e:	2c e0       	ldi	r18, 0x0C	; 12
    2040:	fc 01       	movw	r30, r24
    2042:	20 83       	st	Z, r18
	beacon->macSeqNumber = ++nwkIb.macSeqNum;
    2044:	80 91 8f 10 	lds	r24, 0x108F	; 0x80108f <nwkIb+0x5>
    2048:	8f 5f       	subi	r24, 0xFF	; 255
    204a:	80 93 8f 10 	sts	0x108F, r24	; 0x80108f <nwkIb+0x5>
    204e:	20 91 8f 10 	lds	r18, 0x108F	; 0x80108f <nwkIb+0x5>
    2052:	89 81       	ldd	r24, Y+1	; 0x01
    2054:	9a 81       	ldd	r25, Y+2	; 0x02
    2056:	fc 01       	movw	r30, r24
    2058:	21 83       	std	Z+1, r18	; 0x01

	// Auxiliarty Security is not fully implemented, it is only enabled so Sequence Number is present in frame
	beacon->macSecHeader.secLevel	= 0b000;
    205a:	89 81       	ldd	r24, Y+1	; 0x01
    205c:	9a 81       	ldd	r25, Y+2	; 0x02
    205e:	fc 01       	movw	r30, r24
    2060:	22 81       	ldd	r18, Z+2	; 0x02
    2062:	28 7f       	andi	r18, 0xF8	; 248
    2064:	fc 01       	movw	r30, r24
    2066:	22 83       	std	Z+2, r18	; 0x02
	beacon->macSecHeader.KeyId		= 0b00;
    2068:	89 81       	ldd	r24, Y+1	; 0x01
    206a:	9a 81       	ldd	r25, Y+2	; 0x02
    206c:	fc 01       	movw	r30, r24
    206e:	22 81       	ldd	r18, Z+2	; 0x02
    2070:	27 7e       	andi	r18, 0xE7	; 231
    2072:	fc 01       	movw	r30, r24
    2074:	22 83       	std	Z+2, r18	; 0x02
	beacon->macSecHeader.countSup	= 0b0;
    2076:	89 81       	ldd	r24, Y+1	; 0x01
    2078:	9a 81       	ldd	r25, Y+2	; 0x02
    207a:	fc 01       	movw	r30, r24
    207c:	22 81       	ldd	r18, Z+2	; 0x02
    207e:	2f 7d       	andi	r18, 0xDF	; 223
    2080:	fc 01       	movw	r30, r24
    2082:	22 83       	std	Z+2, r18	; 0x02
	beacon->macSecHeader.countSize= 0b0;
    2084:	89 81       	ldd	r24, Y+1	; 0x01
    2086:	9a 81       	ldd	r25, Y+2	; 0x02
    2088:	fc 01       	movw	r30, r24
    208a:	22 81       	ldd	r18, Z+2	; 0x02
    208c:	2f 7b       	andi	r18, 0xBF	; 191
    208e:	fc 01       	movw	r30, r24
    2090:	22 83       	std	Z+2, r18	; 0x02
}
    2092:	00 00       	nop
    2094:	0f 90       	pop	r0
    2096:	0f 90       	pop	r0
    2098:	0f 90       	pop	r0
    209a:	0f 90       	pop	r0
    209c:	df 91       	pop	r29
    209e:	cf 91       	pop	r28
    20a0:	08 95       	ret

000020a2 <nwkTxMacCommandFrameLLDN>:

void nwkTxMacCommandFrameLLDN(NwkFrame_t *frame, uint16_t subtype)
{
    20a2:	cf 93       	push	r28
    20a4:	df 93       	push	r29
    20a6:	00 d0       	rcall	.+0      	; 0x20a8 <nwkTxMacCommandFrameLLDN+0x6>
    20a8:	00 d0       	rcall	.+0      	; 0x20aa <nwkTxMacCommandFrameLLDN+0x8>
    20aa:	00 d0       	rcall	.+0      	; 0x20ac <nwkTxMacCommandFrameLLDN+0xa>
    20ac:	cd b7       	in	r28, 0x3d	; 61
    20ae:	de b7       	in	r29, 0x3e	; 62
    20b0:	9c 83       	std	Y+4, r25	; 0x04
    20b2:	8b 83       	std	Y+3, r24	; 0x03
    20b4:	7e 83       	std	Y+6, r23	; 0x06
    20b6:	6d 83       	std	Y+5, r22	; 0x05
	NwkFrameGeneralHeaderLLDN_t *mac_command = &frame->LLgeneral;
    20b8:	8b 81       	ldd	r24, Y+3	; 0x03
    20ba:	9c 81       	ldd	r25, Y+4	; 0x04
    20bc:	02 96       	adiw	r24, 0x02	; 2
    20be:	9a 83       	std	Y+2, r25	; 0x02
    20c0:	89 83       	std	Y+1, r24	; 0x01
	frame->state = NWK_TX_STATE_SEND;
    20c2:	8b 81       	ldd	r24, Y+3	; 0x03
    20c4:	9c 81       	ldd	r25, Y+4	; 0x04
    20c6:	23 e1       	ldi	r18, 0x13	; 19
    20c8:	fc 01       	movw	r30, r24
    20ca:	20 83       	st	Z, r18
	frame->tx.status = NWK_SUCCESS_STATUS;
    20cc:	8b 81       	ldd	r24, Y+3	; 0x03
    20ce:	9c 81       	ldd	r25, Y+4	; 0x04
    20d0:	8d 57       	subi	r24, 0x7D	; 125
    20d2:	9f 4f       	sbci	r25, 0xFF	; 255
    20d4:	fc 01       	movw	r30, r24
    20d6:	10 82       	st	Z, r1
	frame->tx.timeout = 0;
    20d8:	8b 81       	ldd	r24, Y+3	; 0x03
    20da:	9c 81       	ldd	r25, Y+4	; 0x04
    20dc:	8c 57       	subi	r24, 0x7C	; 124
    20de:	9f 4f       	sbci	r25, 0xFF	; 255
    20e0:	fc 01       	movw	r30, r24
    20e2:	11 82       	std	Z+1, r1	; 0x01
    20e4:	10 82       	st	Z, r1
	// beacon->macFcf.FrameType					= 0b100; // LLDN type
	// beacon->macFcf.SecurityEnabled 	= 0b1;	// 1 to enable security header and sequence number
	// beacon->macFcf.FrameVersion			= 0b0;	// zero to indicate compatible with IEEE Std 802.15.4.
	// beacon->macFcf.ackRequest				= 0b0;	// zero to indicade no ACK
	// beacon->macFcf.SubFrameType			= 0b11; // Subtype = LL-MAC command
	if (subtype & NWK_OPT_MAC_COMMAND) 		mac_command->macFcf = 0xcc; //LL-MAC Command
    20e6:	8d 81       	ldd	r24, Y+5	; 0x05
    20e8:	9e 81       	ldd	r25, Y+6	; 0x06
    20ea:	99 23       	and	r25, r25
    20ec:	34 f4       	brge	.+12     	; 0x20fa <nwkTxMacCommandFrameLLDN+0x58>
    20ee:	89 81       	ldd	r24, Y+1	; 0x01
    20f0:	9a 81       	ldd	r25, Y+2	; 0x02
    20f2:	2c ec       	ldi	r18, 0xCC	; 204
    20f4:	fc 01       	movw	r30, r24
    20f6:	20 83       	st	Z, r18
    20f8:	17 c0       	rjmp	.+46     	; 0x2128 <nwkTxMacCommandFrameLLDN+0x86>
	else if (subtype & NWK_OPT_LLDN_DATA) mac_command->macFcf = 0x4c; //LL-Data
    20fa:	8d 81       	ldd	r24, Y+5	; 0x05
    20fc:	9e 81       	ldd	r25, Y+6	; 0x06
    20fe:	88 27       	eor	r24, r24
    2100:	90 72       	andi	r25, 0x20	; 32
    2102:	89 2b       	or	r24, r25
    2104:	31 f0       	breq	.+12     	; 0x2112 <nwkTxMacCommandFrameLLDN+0x70>
    2106:	89 81       	ldd	r24, Y+1	; 0x01
    2108:	9a 81       	ldd	r25, Y+2	; 0x02
    210a:	2c e4       	ldi	r18, 0x4C	; 76
    210c:	fc 01       	movw	r30, r24
    210e:	20 83       	st	Z, r18
    2110:	0b c0       	rjmp	.+22     	; 0x2128 <nwkTxMacCommandFrameLLDN+0x86>
	else if (subtype & NWK_OPT_LLDN_ACK) 	mac_command->macFcf = 0x8c;	//LL-Acknowledgment
    2112:	8d 81       	ldd	r24, Y+5	; 0x05
    2114:	9e 81       	ldd	r25, Y+6	; 0x06
    2116:	88 27       	eor	r24, r24
    2118:	90 74       	andi	r25, 0x40	; 64
    211a:	89 2b       	or	r24, r25
    211c:	29 f0       	breq	.+10     	; 0x2128 <nwkTxMacCommandFrameLLDN+0x86>
    211e:	89 81       	ldd	r24, Y+1	; 0x01
    2120:	9a 81       	ldd	r25, Y+2	; 0x02
    2122:	2c e8       	ldi	r18, 0x8C	; 140
    2124:	fc 01       	movw	r30, r24
    2126:	20 83       	st	Z, r18
	mac_command->macSeqNumber = ++nwkIb.macSeqNum;
    2128:	80 91 8f 10 	lds	r24, 0x108F	; 0x80108f <nwkIb+0x5>
    212c:	8f 5f       	subi	r24, 0xFF	; 255
    212e:	80 93 8f 10 	sts	0x108F, r24	; 0x80108f <nwkIb+0x5>
    2132:	20 91 8f 10 	lds	r18, 0x108F	; 0x80108f <nwkIb+0x5>
    2136:	89 81       	ldd	r24, Y+1	; 0x01
    2138:	9a 81       	ldd	r25, Y+2	; 0x02
    213a:	fc 01       	movw	r30, r24
    213c:	21 83       	std	Z+1, r18	; 0x01

	// Auxiliarty Security is not fully implemented, it is only enabled so Sequence Number is present in frame
	mac_command->macSecHeader.secLevel	= 0b000;
    213e:	89 81       	ldd	r24, Y+1	; 0x01
    2140:	9a 81       	ldd	r25, Y+2	; 0x02
    2142:	fc 01       	movw	r30, r24
    2144:	22 81       	ldd	r18, Z+2	; 0x02
    2146:	28 7f       	andi	r18, 0xF8	; 248
    2148:	fc 01       	movw	r30, r24
    214a:	22 83       	std	Z+2, r18	; 0x02
	mac_command->macSecHeader.KeyId		= 0b00;
    214c:	89 81       	ldd	r24, Y+1	; 0x01
    214e:	9a 81       	ldd	r25, Y+2	; 0x02
    2150:	fc 01       	movw	r30, r24
    2152:	22 81       	ldd	r18, Z+2	; 0x02
    2154:	27 7e       	andi	r18, 0xE7	; 231
    2156:	fc 01       	movw	r30, r24
    2158:	22 83       	std	Z+2, r18	; 0x02
	mac_command->macSecHeader.countSup	= 0b0;
    215a:	89 81       	ldd	r24, Y+1	; 0x01
    215c:	9a 81       	ldd	r25, Y+2	; 0x02
    215e:	fc 01       	movw	r30, r24
    2160:	22 81       	ldd	r18, Z+2	; 0x02
    2162:	2f 7d       	andi	r18, 0xDF	; 223
    2164:	fc 01       	movw	r30, r24
    2166:	22 83       	std	Z+2, r18	; 0x02
	mac_command->macSecHeader.countSize= 0b0;
    2168:	89 81       	ldd	r24, Y+1	; 0x01
    216a:	9a 81       	ldd	r25, Y+2	; 0x02
    216c:	fc 01       	movw	r30, r24
    216e:	22 81       	ldd	r18, Z+2	; 0x02
    2170:	2f 7b       	andi	r18, 0xBF	; 191
    2172:	fc 01       	movw	r30, r24
    2174:	22 83       	std	Z+2, r18	; 0x02
}
    2176:	00 00       	nop
    2178:	26 96       	adiw	r28, 0x06	; 6
    217a:	0f b6       	in	r0, 0x3f	; 63
    217c:	f8 94       	cli
    217e:	de bf       	out	0x3e, r29	; 62
    2180:	0f be       	out	0x3f, r0	; 63
    2182:	cd bf       	out	0x3d, r28	; 61
    2184:	df 91       	pop	r29
    2186:	cf 91       	pop	r28
    2188:	08 95       	ret

0000218a <nwkTxFrame>:


void nwkTxFrame(NwkFrame_t *frame)
{
    218a:	cf 93       	push	r28
    218c:	df 93       	push	r29
    218e:	00 d0       	rcall	.+0      	; 0x2190 <nwkTxFrame+0x6>
    2190:	00 d0       	rcall	.+0      	; 0x2192 <nwkTxFrame+0x8>
    2192:	cd b7       	in	r28, 0x3d	; 61
    2194:	de b7       	in	r29, 0x3e	; 62
    2196:	9c 83       	std	Y+4, r25	; 0x04
    2198:	8b 83       	std	Y+3, r24	; 0x03
	NwkFrameHeader_t *header = &frame->header;
    219a:	8b 81       	ldd	r24, Y+3	; 0x03
    219c:	9c 81       	ldd	r25, Y+4	; 0x04
    219e:	02 96       	adiw	r24, 0x02	; 2
    21a0:	9a 83       	std	Y+2, r25	; 0x02
    21a2:	89 83       	std	Y+1, r24	; 0x01

	if (frame->tx.control & NWK_TX_CONTROL_ROUTING) {
    21a4:	8b 81       	ldd	r24, Y+3	; 0x03
    21a6:	9c 81       	ldd	r25, Y+4	; 0x04
    21a8:	8a 57       	subi	r24, 0x7A	; 122
    21aa:	9f 4f       	sbci	r25, 0xFF	; 255
    21ac:	fc 01       	movw	r30, r24
    21ae:	80 81       	ld	r24, Z
    21b0:	88 2f       	mov	r24, r24
    21b2:	90 e0       	ldi	r25, 0x00	; 0
    21b4:	82 70       	andi	r24, 0x02	; 2
    21b6:	99 27       	eor	r25, r25
    21b8:	89 2b       	or	r24, r25
    21ba:	31 f0       	breq	.+12     	; 0x21c8 <nwkTxFrame+0x3e>
		frame->state = NWK_TX_STATE_DELAY;
    21bc:	8b 81       	ldd	r24, Y+3	; 0x03
    21be:	9c 81       	ldd	r25, Y+4	; 0x04
    21c0:	22 e1       	ldi	r18, 0x12	; 18
    21c2:	fc 01       	movw	r30, r24
    21c4:	20 83       	st	Z, r18
    21c6:	05 c0       	rjmp	.+10     	; 0x21d2 <nwkTxFrame+0x48>
#ifdef NWK_ENABLE_SECURITY
		if (header->nwkFcf.security) {
			frame->state = NWK_TX_STATE_ENCRYPT;
		} else
#endif
		frame->state = NWK_TX_STATE_DELAY;
    21c8:	8b 81       	ldd	r24, Y+3	; 0x03
    21ca:	9c 81       	ldd	r25, Y+4	; 0x04
    21cc:	22 e1       	ldi	r18, 0x12	; 18
    21ce:	fc 01       	movw	r30, r24
    21d0:	20 83       	st	Z, r18
	}

	frame->tx.status = NWK_SUCCESS_STATUS;
    21d2:	8b 81       	ldd	r24, Y+3	; 0x03
    21d4:	9c 81       	ldd	r25, Y+4	; 0x04
    21d6:	8d 57       	subi	r24, 0x7D	; 125
    21d8:	9f 4f       	sbci	r25, 0xFF	; 255
    21da:	fc 01       	movw	r30, r24
    21dc:	10 82       	st	Z, r1

	if (frame->tx.control & NWK_TX_CONTROL_BROADCAST_PAN_ID) {
    21de:	8b 81       	ldd	r24, Y+3	; 0x03
    21e0:	9c 81       	ldd	r25, Y+4	; 0x04
    21e2:	8a 57       	subi	r24, 0x7A	; 122
    21e4:	9f 4f       	sbci	r25, 0xFF	; 255
    21e6:	fc 01       	movw	r30, r24
    21e8:	80 81       	ld	r24, Z
    21ea:	88 2f       	mov	r24, r24
    21ec:	90 e0       	ldi	r25, 0x00	; 0
    21ee:	81 70       	andi	r24, 0x01	; 1
    21f0:	99 27       	eor	r25, r25
    21f2:	89 2b       	or	r24, r25
    21f4:	41 f0       	breq	.+16     	; 0x2206 <nwkTxFrame+0x7c>
		header->macDstPanId = NWK_BROADCAST_PANID;
    21f6:	89 81       	ldd	r24, Y+1	; 0x01
    21f8:	9a 81       	ldd	r25, Y+2	; 0x02
    21fa:	2f ef       	ldi	r18, 0xFF	; 255
    21fc:	3f ef       	ldi	r19, 0xFF	; 255
    21fe:	fc 01       	movw	r30, r24
    2200:	34 83       	std	Z+4, r19	; 0x04
    2202:	23 83       	std	Z+3, r18	; 0x03
    2204:	09 c0       	rjmp	.+18     	; 0x2218 <nwkTxFrame+0x8e>
		} else {
		header->macDstPanId = nwkIb.panId;
    2206:	20 91 8c 10 	lds	r18, 0x108C	; 0x80108c <nwkIb+0x2>
    220a:	30 91 8d 10 	lds	r19, 0x108D	; 0x80108d <nwkIb+0x3>
    220e:	89 81       	ldd	r24, Y+1	; 0x01
    2210:	9a 81       	ldd	r25, Y+2	; 0x02
    2212:	fc 01       	movw	r30, r24
    2214:	34 83       	std	Z+4, r19	; 0x04
    2216:	23 83       	std	Z+3, r18	; 0x03
	(frame->tx.control & NWK_TX_CONTROL_BROADCAST_PAN_ID)) {
		nwkRoutePrepareTx(frame);
	} else
#endif

	header->macDstAddr = header->nwkDstAddr;
    2218:	89 81       	ldd	r24, Y+1	; 0x01
    221a:	9a 81       	ldd	r25, Y+2	; 0x02
    221c:	fc 01       	movw	r30, r24
    221e:	25 85       	ldd	r18, Z+13	; 0x0d
    2220:	36 85       	ldd	r19, Z+14	; 0x0e
    2222:	89 81       	ldd	r24, Y+1	; 0x01
    2224:	9a 81       	ldd	r25, Y+2	; 0x02
    2226:	fc 01       	movw	r30, r24
    2228:	36 83       	std	Z+6, r19	; 0x06
    222a:	25 83       	std	Z+5, r18	; 0x05
	header->macSrcAddr = nwkIb.addr;
    222c:	20 91 8a 10 	lds	r18, 0x108A	; 0x80108a <nwkIb>
    2230:	30 91 8b 10 	lds	r19, 0x108B	; 0x80108b <nwkIb+0x1>
    2234:	89 81       	ldd	r24, Y+1	; 0x01
    2236:	9a 81       	ldd	r25, Y+2	; 0x02
    2238:	fc 01       	movw	r30, r24
    223a:	30 87       	std	Z+8, r19	; 0x08
    223c:	27 83       	std	Z+7, r18	; 0x07
	header->macSeq = ++nwkIb.macSeqNum;
    223e:	80 91 8f 10 	lds	r24, 0x108F	; 0x80108f <nwkIb+0x5>
    2242:	8f 5f       	subi	r24, 0xFF	; 255
    2244:	80 93 8f 10 	sts	0x108F, r24	; 0x80108f <nwkIb+0x5>
    2248:	20 91 8f 10 	lds	r18, 0x108F	; 0x80108f <nwkIb+0x5>
    224c:	89 81       	ldd	r24, Y+1	; 0x01
    224e:	9a 81       	ldd	r25, Y+2	; 0x02
    2250:	fc 01       	movw	r30, r24
    2252:	22 83       	std	Z+2, r18	; 0x02

	if (NWK_BROADCAST_ADDR == header->macDstAddr) {
    2254:	89 81       	ldd	r24, Y+1	; 0x01
    2256:	9a 81       	ldd	r25, Y+2	; 0x02
    2258:	fc 01       	movw	r30, r24
    225a:	85 81       	ldd	r24, Z+5	; 0x05
    225c:	96 81       	ldd	r25, Z+6	; 0x06
    225e:	01 96       	adiw	r24, 0x01	; 1
    2260:	a9 f4       	brne	.+42     	; 0x228c <nwkTxFrame+0x102>
		header->macFcf = 0x8841;
    2262:	89 81       	ldd	r24, Y+1	; 0x01
    2264:	9a 81       	ldd	r25, Y+2	; 0x02
    2266:	21 e4       	ldi	r18, 0x41	; 65
    2268:	38 e8       	ldi	r19, 0x88	; 136
    226a:	fc 01       	movw	r30, r24
    226c:	31 83       	std	Z+1, r19	; 0x01
    226e:	20 83       	st	Z, r18
		frame->tx.timeout = (rand() & NWK_TX_DELAY_JITTER_MASK) + 1;
    2270:	0e 94 8e 44 	call	0x891c	; 0x891c <rand>
    2274:	87 70       	andi	r24, 0x07	; 7
    2276:	99 27       	eor	r25, r25
    2278:	01 96       	adiw	r24, 0x01	; 1
    227a:	9c 01       	movw	r18, r24
    227c:	8b 81       	ldd	r24, Y+3	; 0x03
    227e:	9c 81       	ldd	r25, Y+4	; 0x04
    2280:	8c 57       	subi	r24, 0x7C	; 124
    2282:	9f 4f       	sbci	r25, 0xFF	; 255
    2284:	fc 01       	movw	r30, r24
    2286:	31 83       	std	Z+1, r19	; 0x01
    2288:	20 83       	st	Z, r18
		} else {
		header->macFcf = 0x8841;
		frame->tx.timeout = 0;
	}
}
    228a:	0e c0       	rjmp	.+28     	; 0x22a8 <nwkTxFrame+0x11e>

	if (NWK_BROADCAST_ADDR == header->macDstAddr) {
		header->macFcf = 0x8841;
		frame->tx.timeout = (rand() & NWK_TX_DELAY_JITTER_MASK) + 1;
		} else {
		header->macFcf = 0x8841;
    228c:	89 81       	ldd	r24, Y+1	; 0x01
    228e:	9a 81       	ldd	r25, Y+2	; 0x02
    2290:	21 e4       	ldi	r18, 0x41	; 65
    2292:	38 e8       	ldi	r19, 0x88	; 136
    2294:	fc 01       	movw	r30, r24
    2296:	31 83       	std	Z+1, r19	; 0x01
    2298:	20 83       	st	Z, r18
		frame->tx.timeout = 0;
    229a:	8b 81       	ldd	r24, Y+3	; 0x03
    229c:	9c 81       	ldd	r25, Y+4	; 0x04
    229e:	8c 57       	subi	r24, 0x7C	; 124
    22a0:	9f 4f       	sbci	r25, 0xFF	; 255
    22a2:	fc 01       	movw	r30, r24
    22a4:	11 82       	std	Z+1, r1	; 0x01
    22a6:	10 82       	st	Z, r1
	}
}
    22a8:	00 00       	nop
    22aa:	0f 90       	pop	r0
    22ac:	0f 90       	pop	r0
    22ae:	0f 90       	pop	r0
    22b0:	0f 90       	pop	r0
    22b2:	df 91       	pop	r29
    22b4:	cf 91       	pop	r28
    22b6:	08 95       	ret

000022b8 <nwkTxBroadcastFrame>:

/*************************************************************************//**
*****************************************************************************/
void nwkTxBroadcastFrame(NwkFrame_t *frame)
{
    22b8:	cf 93       	push	r28
    22ba:	df 93       	push	r29
    22bc:	00 d0       	rcall	.+0      	; 0x22be <nwkTxBroadcastFrame+0x6>
    22be:	00 d0       	rcall	.+0      	; 0x22c0 <nwkTxBroadcastFrame+0x8>
    22c0:	cd b7       	in	r28, 0x3d	; 61
    22c2:	de b7       	in	r29, 0x3e	; 62
    22c4:	9c 83       	std	Y+4, r25	; 0x04
    22c6:	8b 83       	std	Y+3, r24	; 0x03
	NwkFrame_t *newFrame;

	if (NULL == (newFrame = nwkFrameAlloc())) {
    22c8:	0e 94 78 07 	call	0xef0	; 0xef0 <nwkFrameAlloc>
    22cc:	9a 83       	std	Y+2, r25	; 0x02
    22ce:	89 83       	std	Y+1, r24	; 0x01
    22d0:	89 81       	ldd	r24, Y+1	; 0x01
    22d2:	9a 81       	ldd	r25, Y+2	; 0x02
    22d4:	89 2b       	or	r24, r25
    22d6:	09 f4       	brne	.+2      	; 0x22da <nwkTxBroadcastFrame+0x22>
    22d8:	76 c0       	rjmp	.+236    	; 0x23c6 <nwkTxBroadcastFrame+0x10e>
		return;
	}

	newFrame->payload += sizeof(NwkFrameHeader_t);
    22da:	89 81       	ldd	r24, Y+1	; 0x01
    22dc:	9a 81       	ldd	r25, Y+2	; 0x02
    22de:	8f 57       	subi	r24, 0x7F	; 127
    22e0:	9f 4f       	sbci	r25, 0xFF	; 255
    22e2:	fc 01       	movw	r30, r24
    22e4:	80 81       	ld	r24, Z
    22e6:	91 81       	ldd	r25, Z+1	; 0x01
    22e8:	9c 01       	movw	r18, r24
    22ea:	20 5f       	subi	r18, 0xF0	; 240
    22ec:	3f 4f       	sbci	r19, 0xFF	; 255
    22ee:	89 81       	ldd	r24, Y+1	; 0x01
    22f0:	9a 81       	ldd	r25, Y+2	; 0x02
    22f2:	8f 57       	subi	r24, 0x7F	; 127
    22f4:	9f 4f       	sbci	r25, 0xFF	; 255
    22f6:	fc 01       	movw	r30, r24
    22f8:	31 83       	std	Z+1, r19	; 0x01
    22fa:	20 83       	st	Z, r18

	newFrame->state = NWK_TX_STATE_DELAY;
    22fc:	89 81       	ldd	r24, Y+1	; 0x01
    22fe:	9a 81       	ldd	r25, Y+2	; 0x02
    2300:	22 e1       	ldi	r18, 0x12	; 18
    2302:	fc 01       	movw	r30, r24
    2304:	20 83       	st	Z, r18
	newFrame->size = frame->size;
    2306:	8b 81       	ldd	r24, Y+3	; 0x03
    2308:	9c 81       	ldd	r25, Y+4	; 0x04
    230a:	fc 01       	movw	r30, r24
    230c:	21 81       	ldd	r18, Z+1	; 0x01
    230e:	89 81       	ldd	r24, Y+1	; 0x01
    2310:	9a 81       	ldd	r25, Y+2	; 0x02
    2312:	fc 01       	movw	r30, r24
    2314:	21 83       	std	Z+1, r18	; 0x01
	newFrame->tx.status = NWK_SUCCESS_STATUS;
    2316:	89 81       	ldd	r24, Y+1	; 0x01
    2318:	9a 81       	ldd	r25, Y+2	; 0x02
    231a:	8d 57       	subi	r24, 0x7D	; 125
    231c:	9f 4f       	sbci	r25, 0xFF	; 255
    231e:	fc 01       	movw	r30, r24
    2320:	10 82       	st	Z, r1
	newFrame->tx.timeout = (rand() & NWK_TX_DELAY_JITTER_MASK) + 1;
    2322:	0e 94 8e 44 	call	0x891c	; 0x891c <rand>
    2326:	87 70       	andi	r24, 0x07	; 7
    2328:	99 27       	eor	r25, r25
    232a:	01 96       	adiw	r24, 0x01	; 1
    232c:	9c 01       	movw	r18, r24
    232e:	89 81       	ldd	r24, Y+1	; 0x01
    2330:	9a 81       	ldd	r25, Y+2	; 0x02
    2332:	8c 57       	subi	r24, 0x7C	; 124
    2334:	9f 4f       	sbci	r25, 0xFF	; 255
    2336:	fc 01       	movw	r30, r24
    2338:	31 83       	std	Z+1, r19	; 0x01
    233a:	20 83       	st	Z, r18
	newFrame->tx.confirm = NULL;
    233c:	89 81       	ldd	r24, Y+1	; 0x01
    233e:	9a 81       	ldd	r25, Y+2	; 0x02
    2340:	89 57       	subi	r24, 0x79	; 121
    2342:	9f 4f       	sbci	r25, 0xFF	; 255
    2344:	fc 01       	movw	r30, r24
    2346:	11 82       	std	Z+1, r1	; 0x01
    2348:	10 82       	st	Z, r1
	memcpy(newFrame->data, frame->data, frame->size);
    234a:	8b 81       	ldd	r24, Y+3	; 0x03
    234c:	9c 81       	ldd	r25, Y+4	; 0x04
    234e:	fc 01       	movw	r30, r24
    2350:	81 81       	ldd	r24, Z+1	; 0x01
    2352:	48 2f       	mov	r20, r24
    2354:	50 e0       	ldi	r21, 0x00	; 0
    2356:	8b 81       	ldd	r24, Y+3	; 0x03
    2358:	9c 81       	ldd	r25, Y+4	; 0x04
    235a:	9c 01       	movw	r18, r24
    235c:	2e 5f       	subi	r18, 0xFE	; 254
    235e:	3f 4f       	sbci	r19, 0xFF	; 255
    2360:	89 81       	ldd	r24, Y+1	; 0x01
    2362:	9a 81       	ldd	r25, Y+2	; 0x02
    2364:	02 96       	adiw	r24, 0x02	; 2
    2366:	b9 01       	movw	r22, r18
    2368:	0e 94 80 45 	call	0x8b00	; 0x8b00 <memcpy>

	newFrame->header.macFcf = 0x8841;
    236c:	89 81       	ldd	r24, Y+1	; 0x01
    236e:	9a 81       	ldd	r25, Y+2	; 0x02
    2370:	21 e4       	ldi	r18, 0x41	; 65
    2372:	38 e8       	ldi	r19, 0x88	; 136
    2374:	fc 01       	movw	r30, r24
    2376:	33 83       	std	Z+3, r19	; 0x03
    2378:	22 83       	std	Z+2, r18	; 0x02
	newFrame->header.macDstAddr = NWK_BROADCAST_ADDR;
    237a:	89 81       	ldd	r24, Y+1	; 0x01
    237c:	9a 81       	ldd	r25, Y+2	; 0x02
    237e:	2f ef       	ldi	r18, 0xFF	; 255
    2380:	3f ef       	ldi	r19, 0xFF	; 255
    2382:	fc 01       	movw	r30, r24
    2384:	30 87       	std	Z+8, r19	; 0x08
    2386:	27 83       	std	Z+7, r18	; 0x07
	newFrame->header.macDstPanId = frame->header.macDstPanId;
    2388:	8b 81       	ldd	r24, Y+3	; 0x03
    238a:	9c 81       	ldd	r25, Y+4	; 0x04
    238c:	fc 01       	movw	r30, r24
    238e:	25 81       	ldd	r18, Z+5	; 0x05
    2390:	36 81       	ldd	r19, Z+6	; 0x06
    2392:	89 81       	ldd	r24, Y+1	; 0x01
    2394:	9a 81       	ldd	r25, Y+2	; 0x02
    2396:	fc 01       	movw	r30, r24
    2398:	36 83       	std	Z+6, r19	; 0x06
    239a:	25 83       	std	Z+5, r18	; 0x05
	newFrame->header.macSrcAddr = nwkIb.addr;
    239c:	20 91 8a 10 	lds	r18, 0x108A	; 0x80108a <nwkIb>
    23a0:	30 91 8b 10 	lds	r19, 0x108B	; 0x80108b <nwkIb+0x1>
    23a4:	89 81       	ldd	r24, Y+1	; 0x01
    23a6:	9a 81       	ldd	r25, Y+2	; 0x02
    23a8:	fc 01       	movw	r30, r24
    23aa:	32 87       	std	Z+10, r19	; 0x0a
    23ac:	21 87       	std	Z+9, r18	; 0x09
	newFrame->header.macSeq = ++nwkIb.macSeqNum;
    23ae:	80 91 8f 10 	lds	r24, 0x108F	; 0x80108f <nwkIb+0x5>
    23b2:	8f 5f       	subi	r24, 0xFF	; 255
    23b4:	80 93 8f 10 	sts	0x108F, r24	; 0x80108f <nwkIb+0x5>
    23b8:	20 91 8f 10 	lds	r18, 0x108F	; 0x80108f <nwkIb+0x5>
    23bc:	89 81       	ldd	r24, Y+1	; 0x01
    23be:	9a 81       	ldd	r25, Y+2	; 0x02
    23c0:	fc 01       	movw	r30, r24
    23c2:	24 83       	std	Z+4, r18	; 0x04
    23c4:	01 c0       	rjmp	.+2      	; 0x23c8 <nwkTxBroadcastFrame+0x110>
void nwkTxBroadcastFrame(NwkFrame_t *frame)
{
	NwkFrame_t *newFrame;

	if (NULL == (newFrame = nwkFrameAlloc())) {
		return;
    23c6:	00 00       	nop
	newFrame->header.macFcf = 0x8841;
	newFrame->header.macDstAddr = NWK_BROADCAST_ADDR;
	newFrame->header.macDstPanId = frame->header.macDstPanId;
	newFrame->header.macSrcAddr = nwkIb.addr;
	newFrame->header.macSeq = ++nwkIb.macSeqNum;
}
    23c8:	0f 90       	pop	r0
    23ca:	0f 90       	pop	r0
    23cc:	0f 90       	pop	r0
    23ce:	0f 90       	pop	r0
    23d0:	df 91       	pop	r29
    23d2:	cf 91       	pop	r28
    23d4:	08 95       	ret

000023d6 <nwkTxAckReceived>:

/*************************************************************************//**
*****************************************************************************/
bool nwkTxAckReceived(NWK_DataInd_t *ind)
{
    23d6:	cf 93       	push	r28
    23d8:	df 93       	push	r29
    23da:	00 d0       	rcall	.+0      	; 0x23dc <nwkTxAckReceived+0x6>
    23dc:	00 d0       	rcall	.+0      	; 0x23de <nwkTxAckReceived+0x8>
    23de:	00 d0       	rcall	.+0      	; 0x23e0 <nwkTxAckReceived+0xa>
    23e0:	cd b7       	in	r28, 0x3d	; 61
    23e2:	de b7       	in	r29, 0x3e	; 62
    23e4:	9e 83       	std	Y+6, r25	; 0x06
    23e6:	8d 83       	std	Y+5, r24	; 0x05
	NwkCommandAck_t *command = (NwkCommandAck_t *)ind->data;
    23e8:	8d 81       	ldd	r24, Y+5	; 0x05
    23ea:	9e 81       	ldd	r25, Y+6	; 0x06
    23ec:	fc 01       	movw	r30, r24
    23ee:	80 85       	ldd	r24, Z+8	; 0x08
    23f0:	91 85       	ldd	r25, Z+9	; 0x09
    23f2:	9c 83       	std	Y+4, r25	; 0x04
    23f4:	8b 83       	std	Y+3, r24	; 0x03
	NwkFrame_t *frame = NULL;
    23f6:	1a 82       	std	Y+2, r1	; 0x02
    23f8:	19 82       	std	Y+1, r1	; 0x01

	if (sizeof(NwkCommandAck_t) != ind->size) {
    23fa:	8d 81       	ldd	r24, Y+5	; 0x05
    23fc:	9e 81       	ldd	r25, Y+6	; 0x06
    23fe:	fc 01       	movw	r30, r24
    2400:	82 85       	ldd	r24, Z+10	; 0x0a
    2402:	83 30       	cpi	r24, 0x03	; 3
    2404:	19 f1       	breq	.+70     	; 0x244c <nwkTxAckReceived+0x76>
		return false;
    2406:	80 e0       	ldi	r24, 0x00	; 0
    2408:	2c c0       	rjmp	.+88     	; 0x2462 <nwkTxAckReceived+0x8c>
	}

	while (NULL != (frame = nwkFrameNext(frame))) {
		if (NWK_TX_STATE_WAIT_ACK == frame->state &&
    240a:	89 81       	ldd	r24, Y+1	; 0x01
    240c:	9a 81       	ldd	r25, Y+2	; 0x02
    240e:	fc 01       	movw	r30, r24
    2410:	80 81       	ld	r24, Z
    2412:	86 31       	cpi	r24, 0x16	; 22
    2414:	d9 f4       	brne	.+54     	; 0x244c <nwkTxAckReceived+0x76>
				frame->header.nwkSeq == command->seq) {
    2416:	89 81       	ldd	r24, Y+1	; 0x01
    2418:	9a 81       	ldd	r25, Y+2	; 0x02
    241a:	fc 01       	movw	r30, r24
    241c:	24 85       	ldd	r18, Z+12	; 0x0c
    241e:	8b 81       	ldd	r24, Y+3	; 0x03
    2420:	9c 81       	ldd	r25, Y+4	; 0x04
    2422:	fc 01       	movw	r30, r24
    2424:	81 81       	ldd	r24, Z+1	; 0x01
	if (sizeof(NwkCommandAck_t) != ind->size) {
		return false;
	}

	while (NULL != (frame = nwkFrameNext(frame))) {
		if (NWK_TX_STATE_WAIT_ACK == frame->state &&
    2426:	28 17       	cp	r18, r24
    2428:	89 f4       	brne	.+34     	; 0x244c <nwkTxAckReceived+0x76>
				frame->header.nwkSeq == command->seq) {
			frame->state = NWK_TX_STATE_CONFIRM;
    242a:	89 81       	ldd	r24, Y+1	; 0x01
    242c:	9a 81       	ldd	r25, Y+2	; 0x02
    242e:	27 e1       	ldi	r18, 0x17	; 23
    2430:	fc 01       	movw	r30, r24
    2432:	20 83       	st	Z, r18
			frame->tx.control = command->control;
    2434:	8b 81       	ldd	r24, Y+3	; 0x03
    2436:	9c 81       	ldd	r25, Y+4	; 0x04
    2438:	fc 01       	movw	r30, r24
    243a:	22 81       	ldd	r18, Z+2	; 0x02
    243c:	89 81       	ldd	r24, Y+1	; 0x01
    243e:	9a 81       	ldd	r25, Y+2	; 0x02
    2440:	8a 57       	subi	r24, 0x7A	; 122
    2442:	9f 4f       	sbci	r25, 0xFF	; 255
    2444:	fc 01       	movw	r30, r24
    2446:	20 83       	st	Z, r18
			return true;
    2448:	81 e0       	ldi	r24, 0x01	; 1
    244a:	0b c0       	rjmp	.+22     	; 0x2462 <nwkTxAckReceived+0x8c>

	if (sizeof(NwkCommandAck_t) != ind->size) {
		return false;
	}

	while (NULL != (frame = nwkFrameNext(frame))) {
    244c:	89 81       	ldd	r24, Y+1	; 0x01
    244e:	9a 81       	ldd	r25, Y+2	; 0x02
    2450:	0e 94 9c 08 	call	0x1138	; 0x1138 <nwkFrameNext>
    2454:	9a 83       	std	Y+2, r25	; 0x02
    2456:	89 83       	std	Y+1, r24	; 0x01
    2458:	89 81       	ldd	r24, Y+1	; 0x01
    245a:	9a 81       	ldd	r25, Y+2	; 0x02
    245c:	89 2b       	or	r24, r25
    245e:	a9 f6       	brne	.-86     	; 0x240a <nwkTxAckReceived+0x34>
			frame->tx.control = command->control;
			return true;
		}
	}

	return false;
    2460:	80 e0       	ldi	r24, 0x00	; 0
}
    2462:	26 96       	adiw	r28, 0x06	; 6
    2464:	0f b6       	in	r0, 0x3f	; 63
    2466:	f8 94       	cli
    2468:	de bf       	out	0x3e, r29	; 62
    246a:	0f be       	out	0x3f, r0	; 63
    246c:	cd bf       	out	0x3d, r28	; 61
    246e:	df 91       	pop	r29
    2470:	cf 91       	pop	r28
    2472:	08 95       	ret

00002474 <nwkTxAckWaitTimerHandler>:

/*************************************************************************//**
*****************************************************************************/
static void nwkTxAckWaitTimerHandler(SYS_Timer_t *timer)
{
    2474:	cf 93       	push	r28
    2476:	df 93       	push	r29
    2478:	00 d0       	rcall	.+0      	; 0x247a <nwkTxAckWaitTimerHandler+0x6>
    247a:	00 d0       	rcall	.+0      	; 0x247c <nwkTxAckWaitTimerHandler+0x8>
    247c:	1f 92       	push	r1
    247e:	cd b7       	in	r28, 0x3d	; 61
    2480:	de b7       	in	r29, 0x3e	; 62
    2482:	9d 83       	std	Y+5, r25	; 0x05
    2484:	8c 83       	std	Y+4, r24	; 0x04
	NwkFrame_t *frame = NULL;
    2486:	1a 82       	std	Y+2, r1	; 0x02
    2488:	19 82       	std	Y+1, r1	; 0x01
	bool restart = false;
    248a:	1b 82       	std	Y+3, r1	; 0x03

	while (NULL != (frame = nwkFrameNext(frame))) {
    248c:	27 c0       	rjmp	.+78     	; 0x24dc <nwkTxAckWaitTimerHandler+0x68>
		if (NWK_TX_STATE_WAIT_ACK == frame->state) {
    248e:	89 81       	ldd	r24, Y+1	; 0x01
    2490:	9a 81       	ldd	r25, Y+2	; 0x02
    2492:	fc 01       	movw	r30, r24
    2494:	80 81       	ld	r24, Z
    2496:	86 31       	cpi	r24, 0x16	; 22
    2498:	09 f5       	brne	.+66     	; 0x24dc <nwkTxAckWaitTimerHandler+0x68>
			restart = true;
    249a:	81 e0       	ldi	r24, 0x01	; 1
    249c:	8b 83       	std	Y+3, r24	; 0x03

			if (0 == --frame->tx.timeout) {
    249e:	89 81       	ldd	r24, Y+1	; 0x01
    24a0:	9a 81       	ldd	r25, Y+2	; 0x02
    24a2:	8c 57       	subi	r24, 0x7C	; 124
    24a4:	9f 4f       	sbci	r25, 0xFF	; 255
    24a6:	fc 01       	movw	r30, r24
    24a8:	80 81       	ld	r24, Z
    24aa:	91 81       	ldd	r25, Z+1	; 0x01
    24ac:	9c 01       	movw	r18, r24
    24ae:	21 50       	subi	r18, 0x01	; 1
    24b0:	31 09       	sbc	r19, r1
    24b2:	89 81       	ldd	r24, Y+1	; 0x01
    24b4:	9a 81       	ldd	r25, Y+2	; 0x02
    24b6:	8c 57       	subi	r24, 0x7C	; 124
    24b8:	9f 4f       	sbci	r25, 0xFF	; 255
    24ba:	fc 01       	movw	r30, r24
    24bc:	31 83       	std	Z+1, r19	; 0x01
    24be:	20 83       	st	Z, r18
    24c0:	89 81       	ldd	r24, Y+1	; 0x01
    24c2:	9a 81       	ldd	r25, Y+2	; 0x02
    24c4:	8c 57       	subi	r24, 0x7C	; 124
    24c6:	9f 4f       	sbci	r25, 0xFF	; 255
    24c8:	fc 01       	movw	r30, r24
    24ca:	80 81       	ld	r24, Z
    24cc:	91 81       	ldd	r25, Z+1	; 0x01
    24ce:	89 2b       	or	r24, r25
    24d0:	29 f4       	brne	.+10     	; 0x24dc <nwkTxAckWaitTimerHandler+0x68>
				nwkTxConfirm(frame, NWK_NO_ACK_STATUS);
    24d2:	89 81       	ldd	r24, Y+1	; 0x01
    24d4:	9a 81       	ldd	r25, Y+2	; 0x02
    24d6:	60 e1       	ldi	r22, 0x10	; 16
    24d8:	0e 94 88 12 	call	0x2510	; 0x2510 <nwkTxConfirm>
static void nwkTxAckWaitTimerHandler(SYS_Timer_t *timer)
{
	NwkFrame_t *frame = NULL;
	bool restart = false;

	while (NULL != (frame = nwkFrameNext(frame))) {
    24dc:	89 81       	ldd	r24, Y+1	; 0x01
    24de:	9a 81       	ldd	r25, Y+2	; 0x02
    24e0:	0e 94 9c 08 	call	0x1138	; 0x1138 <nwkFrameNext>
    24e4:	9a 83       	std	Y+2, r25	; 0x02
    24e6:	89 83       	std	Y+1, r24	; 0x01
    24e8:	89 81       	ldd	r24, Y+1	; 0x01
    24ea:	9a 81       	ldd	r25, Y+2	; 0x02
    24ec:	89 2b       	or	r24, r25
    24ee:	79 f6       	brne	.-98     	; 0x248e <nwkTxAckWaitTimerHandler+0x1a>
				nwkTxConfirm(frame, NWK_NO_ACK_STATUS);
			}
		}
	}

	if (restart) {
    24f0:	8b 81       	ldd	r24, Y+3	; 0x03
    24f2:	88 23       	and	r24, r24
    24f4:	21 f0       	breq	.+8      	; 0x24fe <nwkTxAckWaitTimerHandler+0x8a>
		SYS_TimerStart(timer);
    24f6:	8c 81       	ldd	r24, Y+4	; 0x04
    24f8:	9d 81       	ldd	r25, Y+5	; 0x05
    24fa:	0e 94 2c 18 	call	0x3058	; 0x3058 <SYS_TimerStart>
	}
}
    24fe:	00 00       	nop
    2500:	0f 90       	pop	r0
    2502:	0f 90       	pop	r0
    2504:	0f 90       	pop	r0
    2506:	0f 90       	pop	r0
    2508:	0f 90       	pop	r0
    250a:	df 91       	pop	r29
    250c:	cf 91       	pop	r28
    250e:	08 95       	ret

00002510 <nwkTxConfirm>:

/*************************************************************************//**
*****************************************************************************/
void nwkTxConfirm(NwkFrame_t *frame, uint8_t status)
{
    2510:	cf 93       	push	r28
    2512:	df 93       	push	r29
    2514:	00 d0       	rcall	.+0      	; 0x2516 <nwkTxConfirm+0x6>
    2516:	1f 92       	push	r1
    2518:	cd b7       	in	r28, 0x3d	; 61
    251a:	de b7       	in	r29, 0x3e	; 62
    251c:	9a 83       	std	Y+2, r25	; 0x02
    251e:	89 83       	std	Y+1, r24	; 0x01
    2520:	6b 83       	std	Y+3, r22	; 0x03
	frame->state = NWK_TX_STATE_CONFIRM;
    2522:	89 81       	ldd	r24, Y+1	; 0x01
    2524:	9a 81       	ldd	r25, Y+2	; 0x02
    2526:	27 e1       	ldi	r18, 0x17	; 23
    2528:	fc 01       	movw	r30, r24
    252a:	20 83       	st	Z, r18
	frame->tx.status = status;
    252c:	89 81       	ldd	r24, Y+1	; 0x01
    252e:	9a 81       	ldd	r25, Y+2	; 0x02
    2530:	8d 57       	subi	r24, 0x7D	; 125
    2532:	9f 4f       	sbci	r25, 0xFF	; 255
    2534:	2b 81       	ldd	r18, Y+3	; 0x03
    2536:	fc 01       	movw	r30, r24
    2538:	20 83       	st	Z, r18
}
    253a:	00 00       	nop
    253c:	0f 90       	pop	r0
    253e:	0f 90       	pop	r0
    2540:	0f 90       	pop	r0
    2542:	df 91       	pop	r29
    2544:	cf 91       	pop	r28
    2546:	08 95       	ret

00002548 <nwkTxDelayTimerHandler>:
#endif

/*************************************************************************//**
*****************************************************************************/
static void nwkTxDelayTimerHandler(SYS_Timer_t *timer)
{
    2548:	cf 93       	push	r28
    254a:	df 93       	push	r29
    254c:	00 d0       	rcall	.+0      	; 0x254e <nwkTxDelayTimerHandler+0x6>
    254e:	00 d0       	rcall	.+0      	; 0x2550 <nwkTxDelayTimerHandler+0x8>
    2550:	1f 92       	push	r1
    2552:	cd b7       	in	r28, 0x3d	; 61
    2554:	de b7       	in	r29, 0x3e	; 62
    2556:	9d 83       	std	Y+5, r25	; 0x05
    2558:	8c 83       	std	Y+4, r24	; 0x04
	NwkFrame_t *frame = NULL;
    255a:	1a 82       	std	Y+2, r1	; 0x02
    255c:	19 82       	std	Y+1, r1	; 0x01
	bool restart = false;
    255e:	1b 82       	std	Y+3, r1	; 0x03

	while (NULL != (frame = nwkFrameNext(frame))) {
    2560:	27 c0       	rjmp	.+78     	; 0x25b0 <nwkTxDelayTimerHandler+0x68>
		if (NWK_TX_STATE_WAIT_DELAY == frame->state) {
    2562:	89 81       	ldd	r24, Y+1	; 0x01
    2564:	9a 81       	ldd	r25, Y+2	; 0x02
    2566:	fc 01       	movw	r30, r24
    2568:	80 81       	ld	r24, Z
    256a:	81 31       	cpi	r24, 0x11	; 17
    256c:	09 f5       	brne	.+66     	; 0x25b0 <nwkTxDelayTimerHandler+0x68>
			restart = true;
    256e:	81 e0       	ldi	r24, 0x01	; 1
    2570:	8b 83       	std	Y+3, r24	; 0x03

			if (0 == --frame->tx.timeout) {
    2572:	89 81       	ldd	r24, Y+1	; 0x01
    2574:	9a 81       	ldd	r25, Y+2	; 0x02
    2576:	8c 57       	subi	r24, 0x7C	; 124
    2578:	9f 4f       	sbci	r25, 0xFF	; 255
    257a:	fc 01       	movw	r30, r24
    257c:	80 81       	ld	r24, Z
    257e:	91 81       	ldd	r25, Z+1	; 0x01
    2580:	9c 01       	movw	r18, r24
    2582:	21 50       	subi	r18, 0x01	; 1
    2584:	31 09       	sbc	r19, r1
    2586:	89 81       	ldd	r24, Y+1	; 0x01
    2588:	9a 81       	ldd	r25, Y+2	; 0x02
    258a:	8c 57       	subi	r24, 0x7C	; 124
    258c:	9f 4f       	sbci	r25, 0xFF	; 255
    258e:	fc 01       	movw	r30, r24
    2590:	31 83       	std	Z+1, r19	; 0x01
    2592:	20 83       	st	Z, r18
    2594:	89 81       	ldd	r24, Y+1	; 0x01
    2596:	9a 81       	ldd	r25, Y+2	; 0x02
    2598:	8c 57       	subi	r24, 0x7C	; 124
    259a:	9f 4f       	sbci	r25, 0xFF	; 255
    259c:	fc 01       	movw	r30, r24
    259e:	80 81       	ld	r24, Z
    25a0:	91 81       	ldd	r25, Z+1	; 0x01
    25a2:	89 2b       	or	r24, r25
    25a4:	29 f4       	brne	.+10     	; 0x25b0 <nwkTxDelayTimerHandler+0x68>
				frame->state = NWK_TX_STATE_SEND;
    25a6:	89 81       	ldd	r24, Y+1	; 0x01
    25a8:	9a 81       	ldd	r25, Y+2	; 0x02
    25aa:	23 e1       	ldi	r18, 0x13	; 19
    25ac:	fc 01       	movw	r30, r24
    25ae:	20 83       	st	Z, r18
static void nwkTxDelayTimerHandler(SYS_Timer_t *timer)
{
	NwkFrame_t *frame = NULL;
	bool restart = false;

	while (NULL != (frame = nwkFrameNext(frame))) {
    25b0:	89 81       	ldd	r24, Y+1	; 0x01
    25b2:	9a 81       	ldd	r25, Y+2	; 0x02
    25b4:	0e 94 9c 08 	call	0x1138	; 0x1138 <nwkFrameNext>
    25b8:	9a 83       	std	Y+2, r25	; 0x02
    25ba:	89 83       	std	Y+1, r24	; 0x01
    25bc:	89 81       	ldd	r24, Y+1	; 0x01
    25be:	9a 81       	ldd	r25, Y+2	; 0x02
    25c0:	89 2b       	or	r24, r25
    25c2:	79 f6       	brne	.-98     	; 0x2562 <nwkTxDelayTimerHandler+0x1a>
				frame->state = NWK_TX_STATE_SEND;
			}
		}
	}

	if (restart) {
    25c4:	8b 81       	ldd	r24, Y+3	; 0x03
    25c6:	88 23       	and	r24, r24
    25c8:	21 f0       	breq	.+8      	; 0x25d2 <nwkTxDelayTimerHandler+0x8a>
		SYS_TimerStart(timer);
    25ca:	8c 81       	ldd	r24, Y+4	; 0x04
    25cc:	9d 81       	ldd	r25, Y+5	; 0x05
    25ce:	0e 94 2c 18 	call	0x3058	; 0x3058 <SYS_TimerStart>
	}
}
    25d2:	00 00       	nop
    25d4:	0f 90       	pop	r0
    25d6:	0f 90       	pop	r0
    25d8:	0f 90       	pop	r0
    25da:	0f 90       	pop	r0
    25dc:	0f 90       	pop	r0
    25de:	df 91       	pop	r29
    25e0:	cf 91       	pop	r28
    25e2:	08 95       	ret

000025e4 <nwkTxConvertPhyStatus>:

/*************************************************************************//**
*****************************************************************************/
static uint8_t nwkTxConvertPhyStatus(uint8_t status)
{
    25e4:	cf 93       	push	r28
    25e6:	df 93       	push	r29
    25e8:	1f 92       	push	r1
    25ea:	cd b7       	in	r28, 0x3d	; 61
    25ec:	de b7       	in	r29, 0x3e	; 62
    25ee:	89 83       	std	Y+1, r24	; 0x01
	switch (status) {
    25f0:	89 81       	ldd	r24, Y+1	; 0x01
    25f2:	88 2f       	mov	r24, r24
    25f4:	90 e0       	ldi	r25, 0x00	; 0
    25f6:	81 30       	cpi	r24, 0x01	; 1
    25f8:	91 05       	cpc	r25, r1
    25fa:	39 f0       	breq	.+14     	; 0x260a <nwkTxConvertPhyStatus+0x26>
    25fc:	82 30       	cpi	r24, 0x02	; 2
    25fe:	91 05       	cpc	r25, r1
    2600:	31 f0       	breq	.+12     	; 0x260e <nwkTxConvertPhyStatus+0x2a>
    2602:	89 2b       	or	r24, r25
    2604:	31 f4       	brne	.+12     	; 0x2612 <nwkTxConvertPhyStatus+0x2e>
	case PHY_STATUS_SUCCESS:
		return NWK_SUCCESS_STATUS;
    2606:	80 e0       	ldi	r24, 0x00	; 0
    2608:	05 c0       	rjmp	.+10     	; 0x2614 <nwkTxConvertPhyStatus+0x30>

	case PHY_STATUS_CHANNEL_ACCESS_FAILURE:
		return NWK_PHY_CHANNEL_ACCESS_FAILURE_STATUS;
    260a:	80 e2       	ldi	r24, 0x20	; 32
    260c:	03 c0       	rjmp	.+6      	; 0x2614 <nwkTxConvertPhyStatus+0x30>

	case PHY_STATUS_NO_ACK:
		return NWK_PHY_NO_ACK_STATUS;
    260e:	81 e2       	ldi	r24, 0x21	; 33
    2610:	01 c0       	rjmp	.+2      	; 0x2614 <nwkTxConvertPhyStatus+0x30>

	default:
		return NWK_ERROR_STATUS;
    2612:	81 e0       	ldi	r24, 0x01	; 1
	}
}
    2614:	0f 90       	pop	r0
    2616:	df 91       	pop	r29
    2618:	cf 91       	pop	r28
    261a:	08 95       	ret

0000261c <PHY_DataConf>:

/*************************************************************************//**
*****************************************************************************/
void PHY_DataConf(uint8_t status)
{
    261c:	0f 93       	push	r16
    261e:	1f 93       	push	r17
    2620:	cf 93       	push	r28
    2622:	df 93       	push	r29
    2624:	1f 92       	push	r1
    2626:	cd b7       	in	r28, 0x3d	; 61
    2628:	de b7       	in	r29, 0x3e	; 62
    262a:	89 83       	std	Y+1, r24	; 0x01
	nwkTxPhyActiveFrame->tx.status = nwkTxConvertPhyStatus(status);
    262c:	00 91 f3 0d 	lds	r16, 0x0DF3	; 0x800df3 <nwkTxPhyActiveFrame>
    2630:	10 91 f4 0d 	lds	r17, 0x0DF4	; 0x800df4 <nwkTxPhyActiveFrame+0x1>
    2634:	89 81       	ldd	r24, Y+1	; 0x01
    2636:	0e 94 f2 12 	call	0x25e4	; 0x25e4 <nwkTxConvertPhyStatus>
    263a:	28 2f       	mov	r18, r24
    263c:	c8 01       	movw	r24, r16
    263e:	8d 57       	subi	r24, 0x7D	; 125
    2640:	9f 4f       	sbci	r25, 0xFF	; 255
    2642:	fc 01       	movw	r30, r24
    2644:	20 83       	st	Z, r18
	nwkTxPhyActiveFrame->state = NWK_TX_STATE_SENT;
    2646:	80 91 f3 0d 	lds	r24, 0x0DF3	; 0x800df3 <nwkTxPhyActiveFrame>
    264a:	90 91 f4 0d 	lds	r25, 0x0DF4	; 0x800df4 <nwkTxPhyActiveFrame+0x1>
    264e:	25 e1       	ldi	r18, 0x15	; 21
    2650:	fc 01       	movw	r30, r24
    2652:	20 83       	st	Z, r18
	nwkTxPhyActiveFrame = NULL;
    2654:	10 92 f4 0d 	sts	0x0DF4, r1	; 0x800df4 <nwkTxPhyActiveFrame+0x1>
    2658:	10 92 f3 0d 	sts	0x0DF3, r1	; 0x800df3 <nwkTxPhyActiveFrame>
	nwkIb.lock--;
    265c:	80 91 b0 10 	lds	r24, 0x10B0	; 0x8010b0 <nwkIb+0x26>
    2660:	90 91 b1 10 	lds	r25, 0x10B1	; 0x8010b1 <nwkIb+0x27>
    2664:	01 97       	sbiw	r24, 0x01	; 1
    2666:	90 93 b1 10 	sts	0x10B1, r25	; 0x8010b1 <nwkIb+0x27>
    266a:	80 93 b0 10 	sts	0x10B0, r24	; 0x8010b0 <nwkIb+0x26>
}
    266e:	00 00       	nop
    2670:	0f 90       	pop	r0
    2672:	df 91       	pop	r29
    2674:	cf 91       	pop	r28
    2676:	1f 91       	pop	r17
    2678:	0f 91       	pop	r16
    267a:	08 95       	ret

0000267c <nwkTxTaskHandler>:

/*************************************************************************//**
*  @brief Tx Module task handler
*****************************************************************************/
void nwkTxTaskHandler(void)
{
    267c:	cf 93       	push	r28
    267e:	df 93       	push	r29
    2680:	00 d0       	rcall	.+0      	; 0x2682 <nwkTxTaskHandler+0x6>
    2682:	cd b7       	in	r28, 0x3d	; 61
    2684:	de b7       	in	r29, 0x3e	; 62
	NwkFrame_t *frame = NULL;
    2686:	1a 82       	std	Y+2, r1	; 0x02
    2688:	19 82       	std	Y+1, r1	; 0x01

	while (NULL != (frame = nwkFrameNext(frame))) {
    268a:	b3 c0       	rjmp	.+358    	; 0x27f2 <nwkTxTaskHandler+0x176>
		switch (frame->state) {
    268c:	89 81       	ldd	r24, Y+1	; 0x01
    268e:	9a 81       	ldd	r25, Y+2	; 0x02
    2690:	fc 01       	movw	r30, r24
    2692:	80 81       	ld	r24, Z
    2694:	88 2f       	mov	r24, r24
    2696:	90 e0       	ldi	r25, 0x00	; 0
    2698:	84 31       	cpi	r24, 0x14	; 20
    269a:	91 05       	cpc	r25, r1
    269c:	09 f4       	brne	.+2      	; 0x26a0 <nwkTxTaskHandler+0x24>
    269e:	a9 c0       	rjmp	.+338    	; 0x27f2 <nwkTxTaskHandler+0x176>
    26a0:	85 31       	cpi	r24, 0x15	; 21
    26a2:	91 05       	cpc	r25, r1
    26a4:	34 f4       	brge	.+12     	; 0x26b2 <nwkTxTaskHandler+0x36>
    26a6:	82 31       	cpi	r24, 0x12	; 18
    26a8:	91 05       	cpc	r25, r1
    26aa:	79 f0       	breq	.+30     	; 0x26ca <nwkTxTaskHandler+0x4e>
    26ac:	43 97       	sbiw	r24, 0x13	; 19
    26ae:	31 f1       	breq	.+76     	; 0x26fc <nwkTxTaskHandler+0x80>
    26b0:	9f c0       	rjmp	.+318    	; 0x27f0 <nwkTxTaskHandler+0x174>
    26b2:	86 31       	cpi	r24, 0x16	; 22
    26b4:	91 05       	cpc	r25, r1
    26b6:	09 f4       	brne	.+2      	; 0x26ba <nwkTxTaskHandler+0x3e>
    26b8:	9c c0       	rjmp	.+312    	; 0x27f2 <nwkTxTaskHandler+0x176>
    26ba:	86 31       	cpi	r24, 0x16	; 22
    26bc:	91 05       	cpc	r25, r1
    26be:	0c f4       	brge	.+2      	; 0x26c2 <nwkTxTaskHandler+0x46>
    26c0:	43 c0       	rjmp	.+134    	; 0x2748 <nwkTxTaskHandler+0xcc>
    26c2:	47 97       	sbiw	r24, 0x17	; 23
    26c4:	09 f4       	brne	.+2      	; 0x26c8 <nwkTxTaskHandler+0x4c>
    26c6:	7a c0       	rjmp	.+244    	; 0x27bc <nwkTxTaskHandler+0x140>
    26c8:	93 c0       	rjmp	.+294    	; 0x27f0 <nwkTxTaskHandler+0x174>
		break;
#endif

		case NWK_TX_STATE_DELAY:
		{
			if (frame->tx.timeout > 0) {
    26ca:	89 81       	ldd	r24, Y+1	; 0x01
    26cc:	9a 81       	ldd	r25, Y+2	; 0x02
    26ce:	8c 57       	subi	r24, 0x7C	; 124
    26d0:	9f 4f       	sbci	r25, 0xFF	; 255
    26d2:	fc 01       	movw	r30, r24
    26d4:	80 81       	ld	r24, Z
    26d6:	91 81       	ldd	r25, Z+1	; 0x01
    26d8:	89 2b       	or	r24, r25
    26da:	51 f0       	breq	.+20     	; 0x26f0 <nwkTxTaskHandler+0x74>
				frame->state = NWK_TX_STATE_WAIT_DELAY;
    26dc:	89 81       	ldd	r24, Y+1	; 0x01
    26de:	9a 81       	ldd	r25, Y+2	; 0x02
    26e0:	21 e1       	ldi	r18, 0x11	; 17
    26e2:	fc 01       	movw	r30, r24
    26e4:	20 83       	st	Z, r18
				SYS_TimerStart(&nwkTxDelayTimer);
    26e6:	82 e0       	ldi	r24, 0x02	; 2
    26e8:	9e e0       	ldi	r25, 0x0E	; 14
    26ea:	0e 94 2c 18 	call	0x3058	; 0x3058 <SYS_TimerStart>
    26ee:	81 c0       	rjmp	.+258    	; 0x27f2 <nwkTxTaskHandler+0x176>
			} else {
				frame->state = NWK_TX_STATE_SEND;
    26f0:	89 81       	ldd	r24, Y+1	; 0x01
    26f2:	9a 81       	ldd	r25, Y+2	; 0x02
    26f4:	23 e1       	ldi	r18, 0x13	; 19
    26f6:	fc 01       	movw	r30, r24
    26f8:	20 83       	st	Z, r18
			}
		}
		break;
    26fa:	7b c0       	rjmp	.+246    	; 0x27f2 <nwkTxTaskHandler+0x176>

		case NWK_TX_STATE_SEND:
		{
			if (NULL == nwkTxPhyActiveFrame) {
    26fc:	80 91 f3 0d 	lds	r24, 0x0DF3	; 0x800df3 <nwkTxPhyActiveFrame>
    2700:	90 91 f4 0d 	lds	r25, 0x0DF4	; 0x800df4 <nwkTxPhyActiveFrame+0x1>
    2704:	89 2b       	or	r24, r25
    2706:	09 f0       	breq	.+2      	; 0x270a <nwkTxTaskHandler+0x8e>
    2708:	74 c0       	rjmp	.+232    	; 0x27f2 <nwkTxTaskHandler+0x176>
				nwkTxPhyActiveFrame = frame;
    270a:	89 81       	ldd	r24, Y+1	; 0x01
    270c:	9a 81       	ldd	r25, Y+2	; 0x02
    270e:	90 93 f4 0d 	sts	0x0DF4, r25	; 0x800df4 <nwkTxPhyActiveFrame+0x1>
    2712:	80 93 f3 0d 	sts	0x0DF3, r24	; 0x800df3 <nwkTxPhyActiveFrame>
				frame->state = NWK_TX_STATE_WAIT_CONF;
    2716:	89 81       	ldd	r24, Y+1	; 0x01
    2718:	9a 81       	ldd	r25, Y+2	; 0x02
    271a:	24 e1       	ldi	r18, 0x14	; 20
    271c:	fc 01       	movw	r30, r24
    271e:	20 83       	st	Z, r18
				PHY_DataReq(frame->data, frame->size);
    2720:	89 81       	ldd	r24, Y+1	; 0x01
    2722:	9a 81       	ldd	r25, Y+2	; 0x02
    2724:	fc 01       	movw	r30, r24
    2726:	21 81       	ldd	r18, Z+1	; 0x01
    2728:	89 81       	ldd	r24, Y+1	; 0x01
    272a:	9a 81       	ldd	r25, Y+2	; 0x02
    272c:	02 96       	adiw	r24, 0x02	; 2
    272e:	62 2f       	mov	r22, r18
    2730:	0e 94 ed 15 	call	0x2bda	; 0x2bda <PHY_DataReq>
				nwkIb.lock++;
    2734:	80 91 b0 10 	lds	r24, 0x10B0	; 0x8010b0 <nwkIb+0x26>
    2738:	90 91 b1 10 	lds	r25, 0x10B1	; 0x8010b1 <nwkIb+0x27>
    273c:	01 96       	adiw	r24, 0x01	; 1
    273e:	90 93 b1 10 	sts	0x10B1, r25	; 0x8010b1 <nwkIb+0x27>
    2742:	80 93 b0 10 	sts	0x10B0, r24	; 0x8010b0 <nwkIb+0x26>
			}
		}
		break;
    2746:	55 c0       	rjmp	.+170    	; 0x27f2 <nwkTxTaskHandler+0x176>
		case NWK_TX_STATE_WAIT_CONF:
			break;

		case NWK_TX_STATE_SENT:
		{
			if (NWK_SUCCESS_STATUS == frame->tx.status) {
    2748:	89 81       	ldd	r24, Y+1	; 0x01
    274a:	9a 81       	ldd	r25, Y+2	; 0x02
    274c:	8d 57       	subi	r24, 0x7D	; 125
    274e:	9f 4f       	sbci	r25, 0xFF	; 255
    2750:	fc 01       	movw	r30, r24
    2752:	80 81       	ld	r24, Z
    2754:	88 23       	and	r24, r24
    2756:	61 f5       	brne	.+88     	; 0x27b0 <nwkTxTaskHandler+0x134>
				if (frame->header.nwkSrcAddr == nwkIb.addr &&
    2758:	89 81       	ldd	r24, Y+1	; 0x01
    275a:	9a 81       	ldd	r25, Y+2	; 0x02
    275c:	fc 01       	movw	r30, r24
    275e:	25 85       	ldd	r18, Z+13	; 0x0d
    2760:	36 85       	ldd	r19, Z+14	; 0x0e
    2762:	80 91 8a 10 	lds	r24, 0x108A	; 0x80108a <nwkIb>
    2766:	90 91 8b 10 	lds	r25, 0x108B	; 0x80108b <nwkIb+0x1>
    276a:	28 17       	cp	r18, r24
    276c:	39 07       	cpc	r19, r25
    276e:	d1 f4       	brne	.+52     	; 0x27a4 <nwkTxTaskHandler+0x128>
    2770:	89 81       	ldd	r24, Y+1	; 0x01
    2772:	9a 81       	ldd	r25, Y+2	; 0x02
    2774:	fc 01       	movw	r30, r24
    2776:	83 85       	ldd	r24, Z+11	; 0x0b
    2778:	81 70       	andi	r24, 0x01	; 1
    277a:	88 23       	and	r24, r24
    277c:	99 f0       	breq	.+38     	; 0x27a4 <nwkTxTaskHandler+0x128>
						frame->header.nwkFcf.
						ackRequest) {
					frame->state = NWK_TX_STATE_WAIT_ACK;
    277e:	89 81       	ldd	r24, Y+1	; 0x01
    2780:	9a 81       	ldd	r25, Y+2	; 0x02
    2782:	26 e1       	ldi	r18, 0x16	; 22
    2784:	fc 01       	movw	r30, r24
    2786:	20 83       	st	Z, r18
					frame->tx.timeout = NWK_ACK_WAIT_TIME /
    2788:	89 81       	ldd	r24, Y+1	; 0x01
    278a:	9a 81       	ldd	r25, Y+2	; 0x02
    278c:	8c 57       	subi	r24, 0x7C	; 124
    278e:	9f 4f       	sbci	r25, 0xFF	; 255
    2790:	25 e1       	ldi	r18, 0x15	; 21
    2792:	30 e0       	ldi	r19, 0x00	; 0
    2794:	fc 01       	movw	r30, r24
    2796:	31 83       	std	Z+1, r19	; 0x01
    2798:	20 83       	st	Z, r18
							NWK_TX_ACK_WAIT_TIMER_INTERVAL
							+ 1;
					SYS_TimerStart(&nwkTxAckWaitTimer);
    279a:	85 ef       	ldi	r24, 0xF5	; 245
    279c:	9d e0       	ldi	r25, 0x0D	; 13
    279e:	0e 94 2c 18 	call	0x3058	; 0x3058 <SYS_TimerStart>
    27a2:	0b c0       	rjmp	.+22     	; 0x27ba <nwkTxTaskHandler+0x13e>
				} else {
					frame->state = NWK_TX_STATE_CONFIRM;
    27a4:	89 81       	ldd	r24, Y+1	; 0x01
    27a6:	9a 81       	ldd	r25, Y+2	; 0x02
    27a8:	27 e1       	ldi	r18, 0x17	; 23
    27aa:	fc 01       	movw	r30, r24
    27ac:	20 83       	st	Z, r18
    27ae:	21 c0       	rjmp	.+66     	; 0x27f2 <nwkTxTaskHandler+0x176>
				}
			} else {
				frame->state = NWK_TX_STATE_CONFIRM;
    27b0:	89 81       	ldd	r24, Y+1	; 0x01
    27b2:	9a 81       	ldd	r25, Y+2	; 0x02
    27b4:	27 e1       	ldi	r18, 0x17	; 23
    27b6:	fc 01       	movw	r30, r24
    27b8:	20 83       	st	Z, r18
			}
		}
		break;
    27ba:	1b c0       	rjmp	.+54     	; 0x27f2 <nwkTxTaskHandler+0x176>
		case NWK_TX_STATE_CONFIRM:
		{
#ifdef NWK_ENABLE_ROUTING
			nwkRouteFrameSent(frame);
#endif
			if (NULL == frame->tx.confirm) {
    27bc:	89 81       	ldd	r24, Y+1	; 0x01
    27be:	9a 81       	ldd	r25, Y+2	; 0x02
    27c0:	89 57       	subi	r24, 0x79	; 121
    27c2:	9f 4f       	sbci	r25, 0xFF	; 255
    27c4:	fc 01       	movw	r30, r24
    27c6:	80 81       	ld	r24, Z
    27c8:	91 81       	ldd	r25, Z+1	; 0x01
    27ca:	89 2b       	or	r24, r25
    27cc:	29 f4       	brne	.+10     	; 0x27d8 <nwkTxTaskHandler+0x15c>
				nwkFrameFree(frame);
    27ce:	89 81       	ldd	r24, Y+1	; 0x01
    27d0:	9a 81       	ldd	r25, Y+2	; 0x02
    27d2:	0e 94 82 08 	call	0x1104	; 0x1104 <nwkFrameFree>
    27d6:	0d c0       	rjmp	.+26     	; 0x27f2 <nwkTxTaskHandler+0x176>
			} else {
				frame->tx.confirm(frame);
    27d8:	89 81       	ldd	r24, Y+1	; 0x01
    27da:	9a 81       	ldd	r25, Y+2	; 0x02
    27dc:	89 57       	subi	r24, 0x79	; 121
    27de:	9f 4f       	sbci	r25, 0xFF	; 255
    27e0:	fc 01       	movw	r30, r24
    27e2:	20 81       	ld	r18, Z
    27e4:	31 81       	ldd	r19, Z+1	; 0x01
    27e6:	89 81       	ldd	r24, Y+1	; 0x01
    27e8:	9a 81       	ldd	r25, Y+2	; 0x02
    27ea:	f9 01       	movw	r30, r18
    27ec:	09 95       	icall
			}
		}
		break;
    27ee:	01 c0       	rjmp	.+2      	; 0x27f2 <nwkTxTaskHandler+0x176>

		default:
			break;
    27f0:	00 00       	nop
*****************************************************************************/
void nwkTxTaskHandler(void)
{
	NwkFrame_t *frame = NULL;

	while (NULL != (frame = nwkFrameNext(frame))) {
    27f2:	89 81       	ldd	r24, Y+1	; 0x01
    27f4:	9a 81       	ldd	r25, Y+2	; 0x02
    27f6:	0e 94 9c 08 	call	0x1138	; 0x1138 <nwkFrameNext>
    27fa:	9a 83       	std	Y+2, r25	; 0x02
    27fc:	89 83       	std	Y+1, r24	; 0x01
    27fe:	89 81       	ldd	r24, Y+1	; 0x01
    2800:	9a 81       	ldd	r25, Y+2	; 0x02
    2802:	89 2b       	or	r24, r25
    2804:	09 f0       	breq	.+2      	; 0x2808 <nwkTxTaskHandler+0x18c>
    2806:	42 cf       	rjmp	.-380    	; 0x268c <nwkTxTaskHandler+0x10>

		default:
			break;
		}
	}
}
    2808:	00 00       	nop
    280a:	0f 90       	pop	r0
    280c:	0f 90       	pop	r0
    280e:	df 91       	pop	r29
    2810:	cf 91       	pop	r28
    2812:	08 95       	ret

00002814 <__portable_avr_delay_cycles>:
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	do { barrier(); } while (--n);
    2814:	61 50       	subi	r22, 0x01	; 1
    2816:	71 09       	sbc	r23, r1
    2818:	81 09       	sbc	r24, r1
    281a:	91 09       	sbc	r25, r1
    281c:	d9 f7       	brne	.-10     	; 0x2814 <__portable_avr_delay_cycles>
}
    281e:	08 95       	ret

00002820 <PHY_Init>:
/*- Implementations --------------------------------------------------------*/

/*************************************************************************//**
*****************************************************************************/
void PHY_Init(void)
{
    2820:	0f 93       	push	r16
    2822:	1f 93       	push	r17
    2824:	cf 93       	push	r28
    2826:	df 93       	push	r29
    2828:	cd b7       	in	r28, 0x3d	; 61
    282a:	de b7       	in	r29, 0x3e	; 62
  TRXPR_REG_s.trxrst = 1;
    282c:	89 e3       	ldi	r24, 0x39	; 57
    282e:	91 e0       	ldi	r25, 0x01	; 1
    2830:	fc 01       	movw	r30, r24
    2832:	20 81       	ld	r18, Z
    2834:	21 60       	ori	r18, 0x01	; 1
    2836:	fc 01       	movw	r30, r24
    2838:	20 83       	st	Z, r18

  phyRxState = false;
    283a:	10 92 90 0e 	sts	0x0E90, r1	; 0x800e90 <phyRxState>
  phyState = PHY_STATE_IDLE;
    283e:	81 e0       	ldi	r24, 0x01	; 1
    2840:	80 93 0f 0e 	sts	0x0E0F, r24	; 0x800e0f <phyState>

  phyTrxSetState(TRX_CMD_TRX_OFF);
    2844:	88 e0       	ldi	r24, 0x08	; 8
    2846:	0e 94 81 16 	call	0x2d02	; 0x2d02 <phyTrxSetState>

  TRX_CTRL_2_REG_s.rxSafeMode = 1;
    284a:	8c e4       	ldi	r24, 0x4C	; 76
    284c:	91 e0       	ldi	r25, 0x01	; 1
    284e:	fc 01       	movw	r30, r24
    2850:	20 81       	ld	r18, Z
    2852:	20 68       	ori	r18, 0x80	; 128
    2854:	fc 01       	movw	r30, r24
    2856:	20 83       	st	Z, r18

#ifdef PHY_ENABLE_RANDOM_NUMBER_GENERATOR
  CSMA_SEED_0_REG = (uint8_t)PHY_RandomReq();
    2858:	0d e6       	ldi	r16, 0x6D	; 109
    285a:	11 e0       	ldi	r17, 0x01	; 1
    285c:	0e 94 2e 16 	call	0x2c5c	; 0x2c5c <PHY_RandomReq>
    2860:	f8 01       	movw	r30, r16
    2862:	80 83       	st	Z, r24
#ifdef EXT_RF_FRONT_END_CTRL
	TRX_CTRL_1_REG_s.paExtEn = 1;
	HAL_GPIO_RF_FRONT_END_EN_set();
#endif // EXT_RF_FRONT_END_CTRL
#endif // PLATFORM_WM100
}
    2864:	00 00       	nop
    2866:	df 91       	pop	r29
    2868:	cf 91       	pop	r28
    286a:	1f 91       	pop	r17
    286c:	0f 91       	pop	r16
    286e:	08 95       	ret

00002870 <PHY_SetTdmaMode>:
void PHY_SetTdmaMode(bool mode)
{
    2870:	cf 93       	push	r28
    2872:	df 93       	push	r29
    2874:	1f 92       	push	r1
    2876:	cd b7       	in	r28, 0x3d	; 61
    2878:	de b7       	in	r29, 0x3e	; 62
    287a:	89 83       	std	Y+1, r24	; 0x01
	if(mode)
    287c:	89 81       	ldd	r24, Y+1	; 0x01
    287e:	88 23       	and	r24, r24
    2880:	b1 f0       	breq	.+44     	; 0x28ae <PHY_SetTdmaMode+0x3e>
	{
		XAH_CTRL_0_REG_s.maxFrameRetries = 0;
    2882:	8c e6       	ldi	r24, 0x6C	; 108
    2884:	91 e0       	ldi	r25, 0x01	; 1
    2886:	fc 01       	movw	r30, r24
    2888:	20 81       	ld	r18, Z
    288a:	2f 70       	andi	r18, 0x0F	; 15
    288c:	fc 01       	movw	r30, r24
    288e:	20 83       	st	Z, r18
		XAH_CTRL_0_REG_s.maxCsmaRetries = 7; // disable csma
    2890:	8c e6       	ldi	r24, 0x6C	; 108
    2892:	91 e0       	ldi	r25, 0x01	; 1
    2894:	fc 01       	movw	r30, r24
    2896:	20 81       	ld	r18, Z
    2898:	2e 60       	ori	r18, 0x0E	; 14
    289a:	fc 01       	movw	r30, r24
    289c:	20 83       	st	Z, r18

		CSMA_SEED_1_REG_s.aackDisAck = 1;	// Disable ACK even if requested
    289e:	8e e6       	ldi	r24, 0x6E	; 110
    28a0:	91 e0       	ldi	r25, 0x01	; 1
    28a2:	fc 01       	movw	r30, r24
    28a4:	20 81       	ld	r18, Z
    28a6:	20 61       	ori	r18, 0x10	; 16
    28a8:	fc 01       	movw	r30, r24
    28aa:	20 83       	st	Z, r18
		XAH_CTRL_0_REG_s.maxFrameRetries = 3;
		XAH_CTRL_0_REG_s.maxCsmaRetries = 4;

		CSMA_SEED_1_REG_s.aackDisAck = 0;
	}
}
    28ac:	17 c0       	rjmp	.+46     	; 0x28dc <PHY_SetTdmaMode+0x6c>

		CSMA_SEED_1_REG_s.aackDisAck = 1;	// Disable ACK even if requested
	}
	else
	{
		XAH_CTRL_0_REG_s.maxFrameRetries = 3;
    28ae:	8c e6       	ldi	r24, 0x6C	; 108
    28b0:	91 e0       	ldi	r25, 0x01	; 1
    28b2:	fc 01       	movw	r30, r24
    28b4:	20 81       	ld	r18, Z
    28b6:	2f 70       	andi	r18, 0x0F	; 15
    28b8:	20 63       	ori	r18, 0x30	; 48
    28ba:	fc 01       	movw	r30, r24
    28bc:	20 83       	st	Z, r18
		XAH_CTRL_0_REG_s.maxCsmaRetries = 4;
    28be:	8c e6       	ldi	r24, 0x6C	; 108
    28c0:	91 e0       	ldi	r25, 0x01	; 1
    28c2:	fc 01       	movw	r30, r24
    28c4:	20 81       	ld	r18, Z
    28c6:	21 7f       	andi	r18, 0xF1	; 241
    28c8:	28 60       	ori	r18, 0x08	; 8
    28ca:	fc 01       	movw	r30, r24
    28cc:	20 83       	st	Z, r18

		CSMA_SEED_1_REG_s.aackDisAck = 0;
    28ce:	8e e6       	ldi	r24, 0x6E	; 110
    28d0:	91 e0       	ldi	r25, 0x01	; 1
    28d2:	fc 01       	movw	r30, r24
    28d4:	20 81       	ld	r18, Z
    28d6:	2f 7e       	andi	r18, 0xEF	; 239
    28d8:	fc 01       	movw	r30, r24
    28da:	20 83       	st	Z, r18
	}
}
    28dc:	00 00       	nop
    28de:	0f 90       	pop	r0
    28e0:	df 91       	pop	r29
    28e2:	cf 91       	pop	r28
    28e4:	08 95       	ret

000028e6 <PHY_SetPromiscuousMode>:
void PHY_SetPromiscuousMode(bool mode)
{
    28e6:	cf 93       	push	r28
    28e8:	df 93       	push	r29
    28ea:	cd b7       	in	r28, 0x3d	; 61
    28ec:	de b7       	in	r29, 0x3e	; 62
    28ee:	29 97       	sbiw	r28, 0x09	; 9
    28f0:	0f b6       	in	r0, 0x3f	; 63
    28f2:	f8 94       	cli
    28f4:	de bf       	out	0x3e, r29	; 62
    28f6:	0f be       	out	0x3f, r0	; 63
    28f8:	cd bf       	out	0x3d, r28	; 61
    28fa:	89 87       	std	Y+9, r24	; 0x09
	uint8_t ieee_address[] = { 0, 0, 0, 0, 0, 0, 0, 0 };
    28fc:	28 e0       	ldi	r18, 0x08	; 8
    28fe:	ce 01       	movw	r24, r28
    2900:	01 96       	adiw	r24, 0x01	; 1
    2902:	fc 01       	movw	r30, r24
    2904:	32 2f       	mov	r19, r18
    2906:	11 92       	st	Z+, r1
    2908:	3a 95       	dec	r19
    290a:	e9 f7       	brne	.-6      	; 0x2906 <PHY_SetPromiscuousMode+0x20>

	if(mode)
    290c:	89 85       	ldd	r24, Y+9	; 0x09
    290e:	88 23       	and	r24, r24
    2910:	49 f1       	breq	.+82     	; 0x2964 <PHY_SetPromiscuousMode+0x7e>
	{
		PHY_SetShortAddr(0);
    2912:	80 e0       	ldi	r24, 0x00	; 0
    2914:	90 e0       	ldi	r25, 0x00	; 0
    2916:	0e 94 8a 15 	call	0x2b14	; 0x2b14 <PHY_SetShortAddr>
		PHY_SetPanId(0);
    291a:	80 e0       	ldi	r24, 0x00	; 0
    291c:	90 e0       	ldi	r25, 0x00	; 0
    291e:	0e 94 66 15 	call	0x2acc	; 0x2acc <PHY_SetPanId>
		PHY_SetIEEEAddr(ieee_address);
    2922:	ce 01       	movw	r24, r28
    2924:	01 96       	adiw	r24, 0x01	; 1
    2926:	0e 94 a8 16 	call	0x2d50	; 0x2d50 <PHY_SetIEEEAddr>
//	Any non-corrupted frame with a reserved frame type is indicated by a
//	TRX24_RX_END interrupt. No further address filtering is applied on those frames.
//	A TRX24_AMI interrupt is never generated and the acknowledgment subfield is
//	ignored.

		XAH_CTRL_1_REG_s.aackPromMode = 1;	// Enable promiscuous mode
    292a:	87 e5       	ldi	r24, 0x57	; 87
    292c:	91 e0       	ldi	r25, 0x01	; 1
    292e:	fc 01       	movw	r30, r24
    2930:	20 81       	ld	r18, Z
    2932:	22 60       	ori	r18, 0x02	; 2
    2934:	fc 01       	movw	r30, r24
    2936:	20 83       	st	Z, r18
		XAH_CTRL_1_REG_s.aackUpldResFt = 1;	// Enable reserved frame type reception ; this was changed to one
    2938:	87 e5       	ldi	r24, 0x57	; 87
    293a:	91 e0       	ldi	r25, 0x01	; 1
    293c:	fc 01       	movw	r30, r24
    293e:	20 81       	ld	r18, Z
    2940:	20 61       	ori	r18, 0x10	; 16
    2942:	fc 01       	movw	r30, r24
    2944:	20 83       	st	Z, r18
                                        // so that the addres isn't checked by filter
		XAH_CTRL_1_REG_s.aackFltrResFt = 0;	// Disable filter of reserved frame types
    2946:	87 e5       	ldi	r24, 0x57	; 87
    2948:	91 e0       	ldi	r25, 0x01	; 1
    294a:	fc 01       	movw	r30, r24
    294c:	20 81       	ld	r18, Z
    294e:	2f 7d       	andi	r18, 0xDF	; 223
    2950:	fc 01       	movw	r30, r24
    2952:	20 83       	st	Z, r18
		CSMA_SEED_1_REG_s.aackDisAck = 1;		// Disable generation of acknowledgment
    2954:	8e e6       	ldi	r24, 0x6E	; 110
    2956:	91 e0       	ldi	r25, 0x01	; 1
    2958:	fc 01       	movw	r30, r24
    295a:	20 81       	ld	r18, Z
    295c:	20 61       	ori	r18, 0x10	; 16
    295e:	fc 01       	movw	r30, r24
    2960:	20 83       	st	Z, r18
	else
	{
		XAH_CTRL_1_REG = 0;
		CSMA_SEED_1_REG_s.aackDisAck = 0;
	}
}
    2962:	0b c0       	rjmp	.+22     	; 0x297a <PHY_SetPromiscuousMode+0x94>
		XAH_CTRL_1_REG_s.aackFltrResFt = 0;	// Disable filter of reserved frame types
		CSMA_SEED_1_REG_s.aackDisAck = 1;		// Disable generation of acknowledgment
	}
	else
	{
		XAH_CTRL_1_REG = 0;
    2964:	87 e5       	ldi	r24, 0x57	; 87
    2966:	91 e0       	ldi	r25, 0x01	; 1
    2968:	fc 01       	movw	r30, r24
    296a:	10 82       	st	Z, r1
		CSMA_SEED_1_REG_s.aackDisAck = 0;
    296c:	8e e6       	ldi	r24, 0x6E	; 110
    296e:	91 e0       	ldi	r25, 0x01	; 1
    2970:	fc 01       	movw	r30, r24
    2972:	20 81       	ld	r18, Z
    2974:	2f 7e       	andi	r18, 0xEF	; 239
    2976:	fc 01       	movw	r30, r24
    2978:	20 83       	st	Z, r18
	}
}
    297a:	00 00       	nop
    297c:	29 96       	adiw	r28, 0x09	; 9
    297e:	0f b6       	in	r0, 0x3f	; 63
    2980:	f8 94       	cli
    2982:	de bf       	out	0x3e, r29	; 62
    2984:	0f be       	out	0x3f, r0	; 63
    2986:	cd bf       	out	0x3d, r28	; 61
    2988:	df 91       	pop	r29
    298a:	cf 91       	pop	r28
    298c:	08 95       	ret

0000298e <PHY_SetRxState>:

/*************************************************************************//**
*****************************************************************************/
void PHY_SetRxState(bool rx)
{
    298e:	cf 93       	push	r28
    2990:	df 93       	push	r29
    2992:	1f 92       	push	r1
    2994:	cd b7       	in	r28, 0x3d	; 61
    2996:	de b7       	in	r29, 0x3e	; 62
    2998:	89 83       	std	Y+1, r24	; 0x01
  phyRxState = rx;
    299a:	89 81       	ldd	r24, Y+1	; 0x01
    299c:	80 93 90 0e 	sts	0x0E90, r24	; 0x800e90 <phyRxState>
  phySetRxState();
    29a0:	0e 94 6a 16 	call	0x2cd4	; 0x2cd4 <phySetRxState>
}
    29a4:	00 00       	nop
    29a6:	0f 90       	pop	r0
    29a8:	df 91       	pop	r29
    29aa:	cf 91       	pop	r28
    29ac:	08 95       	ret

000029ae <PHY_SetChannel>:

/*************************************************************************//**
*****************************************************************************/
void PHY_SetChannel(uint8_t channel)
{
    29ae:	cf 93       	push	r28
    29b0:	df 93       	push	r29
    29b2:	1f 92       	push	r1
    29b4:	cd b7       	in	r28, 0x3d	; 61
    29b6:	de b7       	in	r29, 0x3e	; 62
    29b8:	89 83       	std	Y+1, r24	; 0x01
  PHY_CC_CCA_REG_s.channel = channel;
    29ba:	88 e4       	ldi	r24, 0x48	; 72
    29bc:	91 e0       	ldi	r25, 0x01	; 1
    29be:	29 81       	ldd	r18, Y+1	; 0x01
    29c0:	2f 71       	andi	r18, 0x1F	; 31
    29c2:	2f 71       	andi	r18, 0x1F	; 31
    29c4:	fc 01       	movw	r30, r24
    29c6:	30 81       	ld	r19, Z
    29c8:	30 7e       	andi	r19, 0xE0	; 224
    29ca:	23 2b       	or	r18, r19
    29cc:	fc 01       	movw	r30, r24
    29ce:	20 83       	st	Z, r18
}
    29d0:	00 00       	nop
    29d2:	0f 90       	pop	r0
    29d4:	df 91       	pop	r29
    29d6:	cf 91       	pop	r28
    29d8:	08 95       	ret

000029da <PHY_SetPage>:

/*************************************************************************//**
*****************************************************************************/
void PHY_SetPage(uint8_t page)
{
    29da:	cf 93       	push	r28
    29dc:	df 93       	push	r29
    29de:	1f 92       	push	r1
    29e0:	cd b7       	in	r28, 0x3d	; 61
    29e2:	de b7       	in	r29, 0x3e	; 62
    29e4:	89 83       	std	Y+1, r24	; 0x01
	switch(page)
    29e6:	89 81       	ldd	r24, Y+1	; 0x01
    29e8:	88 2f       	mov	r24, r24
    29ea:	90 e0       	ldi	r25, 0x00	; 0
    29ec:	82 30       	cpi	r24, 0x02	; 2
    29ee:	91 05       	cpc	r25, r1
    29f0:	19 f1       	breq	.+70     	; 0x2a38 <PHY_SetPage+0x5e>
    29f2:	83 30       	cpi	r24, 0x03	; 3
    29f4:	91 05       	cpc	r25, r1
    29f6:	1c f4       	brge	.+6      	; 0x29fe <PHY_SetPage+0x24>
    29f8:	89 2b       	or	r24, r25
    29fa:	41 f0       	breq	.+16     	; 0x2a0c <PHY_SetPage+0x32>
			/* Use reduced sensitivity for 2Mbit mode */
			RX_SYN_REG_s.rxPdtLevel = 0x01;
			break;
		}
	}
}
    29fc:	62 c0       	rjmp	.+196    	; 0x2ac2 <PHY_SetPage+0xe8>

/*************************************************************************//**
*****************************************************************************/
void PHY_SetPage(uint8_t page)
{
	switch(page)
    29fe:	80 31       	cpi	r24, 0x10	; 16
    2a00:	91 05       	cpc	r25, r1
    2a02:	89 f1       	breq	.+98     	; 0x2a66 <PHY_SetPage+0x8c>
    2a04:	41 97       	sbiw	r24, 0x11	; 17
    2a06:	09 f4       	brne	.+2      	; 0x2a0a <PHY_SetPage+0x30>
    2a08:	45 c0       	rjmp	.+138    	; 0x2a94 <PHY_SetPage+0xba>
			/* Use reduced sensitivity for 2Mbit mode */
			RX_SYN_REG_s.rxPdtLevel = 0x01;
			break;
		}
	}
}
    2a0a:	5b c0       	rjmp	.+182    	; 0x2ac2 <PHY_SetPage+0xe8>
{
	switch(page)
	{
		case 0:		/* compliant O-QPSK */
		{
			TRX_CTRL_2_REG_s.oqpskDataRate = 0;	// RATE_250_KBPS
    2a0c:	8c e4       	ldi	r24, 0x4C	; 76
    2a0e:	91 e0       	ldi	r25, 0x01	; 1
    2a10:	fc 01       	movw	r30, r24
    2a12:	20 81       	ld	r18, Z
    2a14:	2c 7f       	andi	r18, 0xFC	; 252
    2a16:	fc 01       	movw	r30, r24
    2a18:	20 83       	st	Z, r18
			/* Apply compliant ACK timing */
			XAH_CTRL_1_REG_s.aackAckTime = 0;	// ACK_TIME_12_SYMBOLS
    2a1a:	87 e5       	ldi	r24, 0x57	; 87
    2a1c:	91 e0       	ldi	r25, 0x01	; 1
    2a1e:	fc 01       	movw	r30, r24
    2a20:	20 81       	ld	r18, Z
    2a22:	2b 7f       	andi	r18, 0xFB	; 251
    2a24:	fc 01       	movw	r30, r24
    2a26:	20 83       	st	Z, r18
			/* Use full sensitivity */
			RX_SYN_REG_s.rxPdtLevel = 0x00;
    2a28:	85 e5       	ldi	r24, 0x55	; 85
    2a2a:	91 e0       	ldi	r25, 0x01	; 1
    2a2c:	fc 01       	movw	r30, r24
    2a2e:	20 81       	ld	r18, Z
    2a30:	20 7f       	andi	r18, 0xF0	; 240
    2a32:	fc 01       	movw	r30, r24
    2a34:	20 83       	st	Z, r18
			break;
    2a36:	45 c0       	rjmp	.+138    	; 0x2ac2 <PHY_SetPage+0xe8>
		}
		case 2:		/* non-compliant OQPSK mode 1 */
		{
			TRX_CTRL_2_REG_s.oqpskDataRate = 1;	// RATE_500_KBPS
    2a38:	8c e4       	ldi	r24, 0x4C	; 76
    2a3a:	91 e0       	ldi	r25, 0x01	; 1
    2a3c:	fc 01       	movw	r30, r24
    2a3e:	20 81       	ld	r18, Z
    2a40:	2c 7f       	andi	r18, 0xFC	; 252
    2a42:	21 60       	ori	r18, 0x01	; 1
    2a44:	fc 01       	movw	r30, r24
    2a46:	20 83       	st	Z, r18
			/* Apply compliant ACK timing */
			XAH_CTRL_1_REG_s.aackAckTime = 1;	// ACK_TIME_2_SYMBOLS
    2a48:	87 e5       	ldi	r24, 0x57	; 87
    2a4a:	91 e0       	ldi	r25, 0x01	; 1
    2a4c:	fc 01       	movw	r30, r24
    2a4e:	20 81       	ld	r18, Z
    2a50:	24 60       	ori	r18, 0x04	; 4
    2a52:	fc 01       	movw	r30, r24
    2a54:	20 83       	st	Z, r18
			/* Use full sensitivity */
			RX_SYN_REG_s.rxPdtLevel = 0x00;
    2a56:	85 e5       	ldi	r24, 0x55	; 85
    2a58:	91 e0       	ldi	r25, 0x01	; 1
    2a5a:	fc 01       	movw	r30, r24
    2a5c:	20 81       	ld	r18, Z
    2a5e:	20 7f       	andi	r18, 0xF0	; 240
    2a60:	fc 01       	movw	r30, r24
    2a62:	20 83       	st	Z, r18
			break;
    2a64:	2e c0       	rjmp	.+92     	; 0x2ac2 <PHY_SetPage+0xe8>
		}
		case 16:	/* non-compliant OQPSK mode 2 */
		{
			TRX_CTRL_2_REG_s.oqpskDataRate = 2;	// RATE_1_MBPS
    2a66:	8c e4       	ldi	r24, 0x4C	; 76
    2a68:	91 e0       	ldi	r25, 0x01	; 1
    2a6a:	fc 01       	movw	r30, r24
    2a6c:	20 81       	ld	r18, Z
    2a6e:	2c 7f       	andi	r18, 0xFC	; 252
    2a70:	22 60       	ori	r18, 0x02	; 2
    2a72:	fc 01       	movw	r30, r24
    2a74:	20 83       	st	Z, r18
			/* Apply compliant ACK timing */
			XAH_CTRL_1_REG_s.aackAckTime = 1;	// ACK_TIME_2_SYMBOLS
    2a76:	87 e5       	ldi	r24, 0x57	; 87
    2a78:	91 e0       	ldi	r25, 0x01	; 1
    2a7a:	fc 01       	movw	r30, r24
    2a7c:	20 81       	ld	r18, Z
    2a7e:	24 60       	ori	r18, 0x04	; 4
    2a80:	fc 01       	movw	r30, r24
    2a82:	20 83       	st	Z, r18
			/* Use full sensitivity */
			RX_SYN_REG_s.rxPdtLevel = 0x00;
    2a84:	85 e5       	ldi	r24, 0x55	; 85
    2a86:	91 e0       	ldi	r25, 0x01	; 1
    2a88:	fc 01       	movw	r30, r24
    2a8a:	20 81       	ld	r18, Z
    2a8c:	20 7f       	andi	r18, 0xF0	; 240
    2a8e:	fc 01       	movw	r30, r24
    2a90:	20 83       	st	Z, r18
			break;
    2a92:	17 c0       	rjmp	.+46     	; 0x2ac2 <PHY_SetPage+0xe8>
		}
		case 17:	/* non-compliant OQPSK mode 3 */
		{
			TRX_CTRL_2_REG_s.oqpskDataRate = 3;	// RATE_2_MBPS
    2a94:	8c e4       	ldi	r24, 0x4C	; 76
    2a96:	91 e0       	ldi	r25, 0x01	; 1
    2a98:	fc 01       	movw	r30, r24
    2a9a:	20 81       	ld	r18, Z
    2a9c:	23 60       	ori	r18, 0x03	; 3
    2a9e:	fc 01       	movw	r30, r24
    2aa0:	20 83       	st	Z, r18
			/* Apply compliant ACK timing */
			XAH_CTRL_1_REG_s.aackAckTime = 1;	// ACK_TIME_2_SYMBOLS
    2aa2:	87 e5       	ldi	r24, 0x57	; 87
    2aa4:	91 e0       	ldi	r25, 0x01	; 1
    2aa6:	fc 01       	movw	r30, r24
    2aa8:	20 81       	ld	r18, Z
    2aaa:	24 60       	ori	r18, 0x04	; 4
    2aac:	fc 01       	movw	r30, r24
    2aae:	20 83       	st	Z, r18
			/* Use reduced sensitivity for 2Mbit mode */
			RX_SYN_REG_s.rxPdtLevel = 0x01;
    2ab0:	85 e5       	ldi	r24, 0x55	; 85
    2ab2:	91 e0       	ldi	r25, 0x01	; 1
    2ab4:	fc 01       	movw	r30, r24
    2ab6:	20 81       	ld	r18, Z
    2ab8:	20 7f       	andi	r18, 0xF0	; 240
    2aba:	21 60       	ori	r18, 0x01	; 1
    2abc:	fc 01       	movw	r30, r24
    2abe:	20 83       	st	Z, r18
			break;
    2ac0:	00 00       	nop
		}
	}
}
    2ac2:	00 00       	nop
    2ac4:	0f 90       	pop	r0
    2ac6:	df 91       	pop	r29
    2ac8:	cf 91       	pop	r28
    2aca:	08 95       	ret

00002acc <PHY_SetPanId>:
/*************************************************************************//**
*****************************************************************************/
void PHY_SetPanId(uint16_t panId)
{
    2acc:	cf 93       	push	r28
    2ace:	df 93       	push	r29
    2ad0:	00 d0       	rcall	.+0      	; 0x2ad2 <PHY_SetPanId+0x6>
    2ad2:	00 d0       	rcall	.+0      	; 0x2ad4 <PHY_SetPanId+0x8>
    2ad4:	cd b7       	in	r28, 0x3d	; 61
    2ad6:	de b7       	in	r29, 0x3e	; 62
    2ad8:	9c 83       	std	Y+4, r25	; 0x04
    2ada:	8b 83       	std	Y+3, r24	; 0x03
  uint8_t *d = (uint8_t *)&panId;
    2adc:	ce 01       	movw	r24, r28
    2ade:	03 96       	adiw	r24, 0x03	; 3
    2ae0:	9a 83       	std	Y+2, r25	; 0x02
    2ae2:	89 83       	std	Y+1, r24	; 0x01

  PAN_ID_0_REG = d[0];
    2ae4:	82 e6       	ldi	r24, 0x62	; 98
    2ae6:	91 e0       	ldi	r25, 0x01	; 1
    2ae8:	29 81       	ldd	r18, Y+1	; 0x01
    2aea:	3a 81       	ldd	r19, Y+2	; 0x02
    2aec:	f9 01       	movw	r30, r18
    2aee:	20 81       	ld	r18, Z
    2af0:	fc 01       	movw	r30, r24
    2af2:	20 83       	st	Z, r18
  PAN_ID_1_REG = d[1];
    2af4:	83 e6       	ldi	r24, 0x63	; 99
    2af6:	91 e0       	ldi	r25, 0x01	; 1
    2af8:	29 81       	ldd	r18, Y+1	; 0x01
    2afa:	3a 81       	ldd	r19, Y+2	; 0x02
    2afc:	f9 01       	movw	r30, r18
    2afe:	21 81       	ldd	r18, Z+1	; 0x01
    2b00:	fc 01       	movw	r30, r24
    2b02:	20 83       	st	Z, r18
}
    2b04:	00 00       	nop
    2b06:	0f 90       	pop	r0
    2b08:	0f 90       	pop	r0
    2b0a:	0f 90       	pop	r0
    2b0c:	0f 90       	pop	r0
    2b0e:	df 91       	pop	r29
    2b10:	cf 91       	pop	r28
    2b12:	08 95       	ret

00002b14 <PHY_SetShortAddr>:

/*************************************************************************//**
*****************************************************************************/
void PHY_SetShortAddr(uint16_t addr)
{
    2b14:	cf 93       	push	r28
    2b16:	df 93       	push	r29
    2b18:	00 d0       	rcall	.+0      	; 0x2b1a <PHY_SetShortAddr+0x6>
    2b1a:	00 d0       	rcall	.+0      	; 0x2b1c <PHY_SetShortAddr+0x8>
    2b1c:	cd b7       	in	r28, 0x3d	; 61
    2b1e:	de b7       	in	r29, 0x3e	; 62
    2b20:	9c 83       	std	Y+4, r25	; 0x04
    2b22:	8b 83       	std	Y+3, r24	; 0x03
  uint8_t *d = (uint8_t *)&addr;
    2b24:	ce 01       	movw	r24, r28
    2b26:	03 96       	adiw	r24, 0x03	; 3
    2b28:	9a 83       	std	Y+2, r25	; 0x02
    2b2a:	89 83       	std	Y+1, r24	; 0x01

  SHORT_ADDR_0_REG = d[0];
    2b2c:	80 e6       	ldi	r24, 0x60	; 96
    2b2e:	91 e0       	ldi	r25, 0x01	; 1
    2b30:	29 81       	ldd	r18, Y+1	; 0x01
    2b32:	3a 81       	ldd	r19, Y+2	; 0x02
    2b34:	f9 01       	movw	r30, r18
    2b36:	20 81       	ld	r18, Z
    2b38:	fc 01       	movw	r30, r24
    2b3a:	20 83       	st	Z, r18
  SHORT_ADDR_1_REG = d[1];
    2b3c:	81 e6       	ldi	r24, 0x61	; 97
    2b3e:	91 e0       	ldi	r25, 0x01	; 1
    2b40:	29 81       	ldd	r18, Y+1	; 0x01
    2b42:	3a 81       	ldd	r19, Y+2	; 0x02
    2b44:	f9 01       	movw	r30, r18
    2b46:	21 81       	ldd	r18, Z+1	; 0x01
    2b48:	fc 01       	movw	r30, r24
    2b4a:	20 83       	st	Z, r18

#ifndef PHY_ENABLE_RANDOM_NUMBER_GENERATOR
  CSMA_SEED_0_REG = d[0] + d[1];
#endif
}
    2b4c:	00 00       	nop
    2b4e:	0f 90       	pop	r0
    2b50:	0f 90       	pop	r0
    2b52:	0f 90       	pop	r0
    2b54:	0f 90       	pop	r0
    2b56:	df 91       	pop	r29
    2b58:	cf 91       	pop	r28
    2b5a:	08 95       	ret

00002b5c <PHY_SetTxPower>:

/*************************************************************************//**
*****************************************************************************/
void PHY_SetTxPower(uint8_t txPower)
{
    2b5c:	cf 93       	push	r28
    2b5e:	df 93       	push	r29
    2b60:	1f 92       	push	r1
    2b62:	cd b7       	in	r28, 0x3d	; 61
    2b64:	de b7       	in	r29, 0x3e	; 62
    2b66:	89 83       	std	Y+1, r24	; 0x01
  PHY_TX_PWR_REG_s.txPwr = txPower;
    2b68:	85 e4       	ldi	r24, 0x45	; 69
    2b6a:	91 e0       	ldi	r25, 0x01	; 1
    2b6c:	29 81       	ldd	r18, Y+1	; 0x01
    2b6e:	2f 70       	andi	r18, 0x0F	; 15
    2b70:	2f 70       	andi	r18, 0x0F	; 15
    2b72:	fc 01       	movw	r30, r24
    2b74:	30 81       	ld	r19, Z
    2b76:	30 7f       	andi	r19, 0xF0	; 240
    2b78:	23 2b       	or	r18, r19
    2b7a:	fc 01       	movw	r30, r24
    2b7c:	20 83       	st	Z, r18
}
    2b7e:	00 00       	nop
    2b80:	0f 90       	pop	r0
    2b82:	df 91       	pop	r29
    2b84:	cf 91       	pop	r28
    2b86:	08 95       	ret

00002b88 <PHY_Sleep>:

/*************************************************************************//**
*****************************************************************************/
void PHY_Sleep(void)
{
    2b88:	cf 93       	push	r28
    2b8a:	df 93       	push	r29
    2b8c:	cd b7       	in	r28, 0x3d	; 61
    2b8e:	de b7       	in	r29, 0x3e	; 62
  phyTrxSetState(TRX_CMD_TRX_OFF);
    2b90:	88 e0       	ldi	r24, 0x08	; 8
    2b92:	0e 94 81 16 	call	0x2d02	; 0x2d02 <phyTrxSetState>
  TRXPR_REG_s.slptr = 1;
    2b96:	89 e3       	ldi	r24, 0x39	; 57
    2b98:	91 e0       	ldi	r25, 0x01	; 1
    2b9a:	fc 01       	movw	r30, r24
    2b9c:	20 81       	ld	r18, Z
    2b9e:	22 60       	ori	r18, 0x02	; 2
    2ba0:	fc 01       	movw	r30, r24
    2ba2:	20 83       	st	Z, r18
  phyState = PHY_STATE_SLEEP;
    2ba4:	82 e0       	ldi	r24, 0x02	; 2
    2ba6:	80 93 0f 0e 	sts	0x0E0F, r24	; 0x800e0f <phyState>
	#ifdef EXT_RF_FRONT_END_CTRL
		TRX_CTRL_1_REG_s.paExtEn = 0;
		HAL_GPIO_RF_FRONT_END_EN_clr();
	#endif // EXT_RF_FRONT_END_CTRL
#endif // PLATFORM_WM100
}
    2baa:	00 00       	nop
    2bac:	df 91       	pop	r29
    2bae:	cf 91       	pop	r28
    2bb0:	08 95       	ret

00002bb2 <PHY_Wakeup>:

/*************************************************************************//**
*****************************************************************************/
void PHY_Wakeup(void)
{
    2bb2:	cf 93       	push	r28
    2bb4:	df 93       	push	r29
    2bb6:	cd b7       	in	r28, 0x3d	; 61
    2bb8:	de b7       	in	r29, 0x3e	; 62
  TRXPR_REG_s.slptr = 0;
    2bba:	89 e3       	ldi	r24, 0x39	; 57
    2bbc:	91 e0       	ldi	r25, 0x01	; 1
    2bbe:	fc 01       	movw	r30, r24
    2bc0:	20 81       	ld	r18, Z
    2bc2:	2d 7f       	andi	r18, 0xFD	; 253
    2bc4:	fc 01       	movw	r30, r24
    2bc6:	20 83       	st	Z, r18
  phySetRxState();
    2bc8:	0e 94 6a 16 	call	0x2cd4	; 0x2cd4 <phySetRxState>
  phyState = PHY_STATE_IDLE;
    2bcc:	81 e0       	ldi	r24, 0x01	; 1
    2bce:	80 93 0f 0e 	sts	0x0E0F, r24	; 0x800e0f <phyState>
}
    2bd2:	00 00       	nop
    2bd4:	df 91       	pop	r29
    2bd6:	cf 91       	pop	r28
    2bd8:	08 95       	ret

00002bda <PHY_DataReq>:

/*************************************************************************//**
*****************************************************************************/
void PHY_DataReq(uint8_t *data, uint8_t size)
{
    2bda:	cf 93       	push	r28
    2bdc:	df 93       	push	r29
    2bde:	00 d0       	rcall	.+0      	; 0x2be0 <PHY_DataReq+0x6>
    2be0:	00 d0       	rcall	.+0      	; 0x2be2 <PHY_DataReq+0x8>
    2be2:	cd b7       	in	r28, 0x3d	; 61
    2be4:	de b7       	in	r29, 0x3e	; 62
    2be6:	9b 83       	std	Y+3, r25	; 0x03
    2be8:	8a 83       	std	Y+2, r24	; 0x02
    2bea:	6c 83       	std	Y+4, r22	; 0x04
  phyTrxSetState(TRX_CMD_TX_ARET_ON);
    2bec:	89 e1       	ldi	r24, 0x19	; 25
    2bee:	0e 94 81 16 	call	0x2d02	; 0x2d02 <phyTrxSetState>

  IRQ_STATUS_REG = IRQ_CLEAR_VALUE;
    2bf2:	8f e4       	ldi	r24, 0x4F	; 79
    2bf4:	91 e0       	ldi	r25, 0x01	; 1
    2bf6:	2f ef       	ldi	r18, 0xFF	; 255
    2bf8:	fc 01       	movw	r30, r24
    2bfa:	20 83       	st	Z, r18

  TRX_FRAME_BUFFER(0) = size + PHY_CRC_SIZE;
    2bfc:	80 e8       	ldi	r24, 0x80	; 128
    2bfe:	91 e0       	ldi	r25, 0x01	; 1
    2c00:	2c 81       	ldd	r18, Y+4	; 0x04
    2c02:	2e 5f       	subi	r18, 0xFE	; 254
    2c04:	fc 01       	movw	r30, r24
    2c06:	20 83       	st	Z, r18
  for (uint8_t i = 0; i < size; i++)
    2c08:	19 82       	std	Y+1, r1	; 0x01
    2c0a:	14 c0       	rjmp	.+40     	; 0x2c34 <PHY_DataReq+0x5a>
    TRX_FRAME_BUFFER(i+1) = data[i];
    2c0c:	89 81       	ldd	r24, Y+1	; 0x01
    2c0e:	88 2f       	mov	r24, r24
    2c10:	90 e0       	ldi	r25, 0x00	; 0
    2c12:	8f 57       	subi	r24, 0x7F	; 127
    2c14:	9e 4f       	sbci	r25, 0xFE	; 254
    2c16:	ac 01       	movw	r20, r24
    2c18:	89 81       	ldd	r24, Y+1	; 0x01
    2c1a:	88 2f       	mov	r24, r24
    2c1c:	90 e0       	ldi	r25, 0x00	; 0
    2c1e:	2a 81       	ldd	r18, Y+2	; 0x02
    2c20:	3b 81       	ldd	r19, Y+3	; 0x03
    2c22:	82 0f       	add	r24, r18
    2c24:	93 1f       	adc	r25, r19
    2c26:	fc 01       	movw	r30, r24
    2c28:	80 81       	ld	r24, Z
    2c2a:	fa 01       	movw	r30, r20
    2c2c:	80 83       	st	Z, r24
  phyTrxSetState(TRX_CMD_TX_ARET_ON);

  IRQ_STATUS_REG = IRQ_CLEAR_VALUE;

  TRX_FRAME_BUFFER(0) = size + PHY_CRC_SIZE;
  for (uint8_t i = 0; i < size; i++)
    2c2e:	89 81       	ldd	r24, Y+1	; 0x01
    2c30:	8f 5f       	subi	r24, 0xFF	; 255
    2c32:	89 83       	std	Y+1, r24	; 0x01
    2c34:	99 81       	ldd	r25, Y+1	; 0x01
    2c36:	8c 81       	ldd	r24, Y+4	; 0x04
    2c38:	98 17       	cp	r25, r24
    2c3a:	40 f3       	brcs	.-48     	; 0x2c0c <PHY_DataReq+0x32>
    TRX_FRAME_BUFFER(i+1) = data[i];

  phyState = PHY_STATE_TX_WAIT_END;
    2c3c:	83 e0       	ldi	r24, 0x03	; 3
    2c3e:	80 93 0f 0e 	sts	0x0E0F, r24	; 0x800e0f <phyState>
  TRX_STATE_REG = TRX_CMD_TX_START;
    2c42:	82 e4       	ldi	r24, 0x42	; 66
    2c44:	91 e0       	ldi	r25, 0x01	; 1
    2c46:	22 e0       	ldi	r18, 0x02	; 2
    2c48:	fc 01       	movw	r30, r24
    2c4a:	20 83       	st	Z, r18
}
    2c4c:	00 00       	nop
    2c4e:	0f 90       	pop	r0
    2c50:	0f 90       	pop	r0
    2c52:	0f 90       	pop	r0
    2c54:	0f 90       	pop	r0
    2c56:	df 91       	pop	r29
    2c58:	cf 91       	pop	r28
    2c5a:	08 95       	ret

00002c5c <PHY_RandomReq>:

#ifdef PHY_ENABLE_RANDOM_NUMBER_GENERATOR
/*************************************************************************//**
*****************************************************************************/
uint16_t PHY_RandomReq(void)
{
    2c5c:	cf 93       	push	r28
    2c5e:	df 93       	push	r29
    2c60:	00 d0       	rcall	.+0      	; 0x2c62 <PHY_RandomReq+0x6>
    2c62:	1f 92       	push	r1
    2c64:	cd b7       	in	r28, 0x3d	; 61
    2c66:	de b7       	in	r29, 0x3e	; 62
  uint16_t rnd = 0;
    2c68:	1a 82       	std	Y+2, r1	; 0x02
    2c6a:	19 82       	std	Y+1, r1	; 0x01

  phyTrxSetState(TRX_CMD_RX_ON);
    2c6c:	86 e0       	ldi	r24, 0x06	; 6
    2c6e:	0e 94 81 16 	call	0x2d02	; 0x2d02 <phyTrxSetState>

  for (uint8_t i = 0; i < 16; i += 2)
    2c72:	1b 82       	std	Y+3, r1	; 0x03
    2c74:	22 c0       	rjmp	.+68     	; 0x2cba <PHY_RandomReq+0x5e>
  {
    delay_us(RANDOM_NUMBER_UPDATE_INTERVAL);
    2c76:	62 e0       	ldi	r22, 0x02	; 2
    2c78:	70 e0       	ldi	r23, 0x00	; 0
    2c7a:	80 e0       	ldi	r24, 0x00	; 0
    2c7c:	90 e0       	ldi	r25, 0x00	; 0
    2c7e:	0e 94 0a 14 	call	0x2814	; 0x2814 <__portable_avr_delay_cycles>
    rnd |= PHY_RSSI_REG_s.rndValue << i;
    2c82:	86 e4       	ldi	r24, 0x46	; 70
    2c84:	91 e0       	ldi	r25, 0x01	; 1
    2c86:	fc 01       	movw	r30, r24
    2c88:	80 81       	ld	r24, Z
    2c8a:	82 95       	swap	r24
    2c8c:	86 95       	lsr	r24
    2c8e:	87 70       	andi	r24, 0x07	; 7
    2c90:	83 70       	andi	r24, 0x03	; 3
    2c92:	88 2f       	mov	r24, r24
    2c94:	90 e0       	ldi	r25, 0x00	; 0
    2c96:	2b 81       	ldd	r18, Y+3	; 0x03
    2c98:	22 2f       	mov	r18, r18
    2c9a:	30 e0       	ldi	r19, 0x00	; 0
    2c9c:	02 c0       	rjmp	.+4      	; 0x2ca2 <PHY_RandomReq+0x46>
    2c9e:	88 0f       	add	r24, r24
    2ca0:	99 1f       	adc	r25, r25
    2ca2:	2a 95       	dec	r18
    2ca4:	e2 f7       	brpl	.-8      	; 0x2c9e <PHY_RandomReq+0x42>
    2ca6:	9c 01       	movw	r18, r24
    2ca8:	89 81       	ldd	r24, Y+1	; 0x01
    2caa:	9a 81       	ldd	r25, Y+2	; 0x02
    2cac:	82 2b       	or	r24, r18
    2cae:	93 2b       	or	r25, r19
    2cb0:	9a 83       	std	Y+2, r25	; 0x02
    2cb2:	89 83       	std	Y+1, r24	; 0x01
{
  uint16_t rnd = 0;

  phyTrxSetState(TRX_CMD_RX_ON);

  for (uint8_t i = 0; i < 16; i += 2)
    2cb4:	8b 81       	ldd	r24, Y+3	; 0x03
    2cb6:	8e 5f       	subi	r24, 0xFE	; 254
    2cb8:	8b 83       	std	Y+3, r24	; 0x03
    2cba:	8b 81       	ldd	r24, Y+3	; 0x03
    2cbc:	80 31       	cpi	r24, 0x10	; 16
    2cbe:	d8 f2       	brcs	.-74     	; 0x2c76 <PHY_RandomReq+0x1a>
  {
    delay_us(RANDOM_NUMBER_UPDATE_INTERVAL);
    rnd |= PHY_RSSI_REG_s.rndValue << i;
  }

  phySetRxState();
    2cc0:	0e 94 6a 16 	call	0x2cd4	; 0x2cd4 <phySetRxState>

  return rnd;
    2cc4:	89 81       	ldd	r24, Y+1	; 0x01
    2cc6:	9a 81       	ldd	r25, Y+2	; 0x02
}
    2cc8:	0f 90       	pop	r0
    2cca:	0f 90       	pop	r0
    2ccc:	0f 90       	pop	r0
    2cce:	df 91       	pop	r29
    2cd0:	cf 91       	pop	r28
    2cd2:	08 95       	ret

00002cd4 <phySetRxState>:
#endif

/*************************************************************************//**
*****************************************************************************/
static void phySetRxState(void)
{
    2cd4:	cf 93       	push	r28
    2cd6:	df 93       	push	r29
    2cd8:	cd b7       	in	r28, 0x3d	; 61
    2cda:	de b7       	in	r29, 0x3e	; 62
  phyTrxSetState(TRX_CMD_TRX_OFF);
    2cdc:	88 e0       	ldi	r24, 0x08	; 8
    2cde:	0e 94 81 16 	call	0x2d02	; 0x2d02 <phyTrxSetState>

  IRQ_STATUS_REG = IRQ_CLEAR_VALUE;
    2ce2:	8f e4       	ldi	r24, 0x4F	; 79
    2ce4:	91 e0       	ldi	r25, 0x01	; 1
    2ce6:	2f ef       	ldi	r18, 0xFF	; 255
    2ce8:	fc 01       	movw	r30, r24
    2cea:	20 83       	st	Z, r18

  if (phyRxState)
    2cec:	80 91 90 0e 	lds	r24, 0x0E90	; 0x800e90 <phyRxState>
    2cf0:	88 23       	and	r24, r24
    2cf2:	19 f0       	breq	.+6      	; 0x2cfa <phySetRxState+0x26>
    phyTrxSetState(TRX_CMD_RX_AACK_ON);
    2cf4:	86 e1       	ldi	r24, 0x16	; 22
    2cf6:	0e 94 81 16 	call	0x2d02	; 0x2d02 <phyTrxSetState>
}
    2cfa:	00 00       	nop
    2cfc:	df 91       	pop	r29
    2cfe:	cf 91       	pop	r28
    2d00:	08 95       	ret

00002d02 <phyTrxSetState>:

/*************************************************************************//**
*****************************************************************************/
static void phyTrxSetState(uint8_t state)
{
    2d02:	cf 93       	push	r28
    2d04:	df 93       	push	r29
    2d06:	1f 92       	push	r1
    2d08:	cd b7       	in	r28, 0x3d	; 61
    2d0a:	de b7       	in	r29, 0x3e	; 62
    2d0c:	89 83       	std	Y+1, r24	; 0x01
		HAL_GPIO_RF_FRONT_END_EN_set();
#endif // EXT_RF_FRONT_END_CTRL
	}
#endif // PLATFORM_WM100

  TRX_STATE_REG = TRX_CMD_FORCE_TRX_OFF;
    2d0e:	82 e4       	ldi	r24, 0x42	; 66
    2d10:	91 e0       	ldi	r25, 0x01	; 1
    2d12:	23 e0       	ldi	r18, 0x03	; 3
    2d14:	fc 01       	movw	r30, r24
    2d16:	20 83       	st	Z, r18
  while (TRX_STATUS_TRX_OFF != TRX_STATUS_REG_s.trxStatus);
    2d18:	00 00       	nop
    2d1a:	81 e4       	ldi	r24, 0x41	; 65
    2d1c:	91 e0       	ldi	r25, 0x01	; 1
    2d1e:	fc 01       	movw	r30, r24
    2d20:	80 81       	ld	r24, Z
    2d22:	8f 71       	andi	r24, 0x1F	; 31
    2d24:	88 30       	cpi	r24, 0x08	; 8
    2d26:	c9 f7       	brne	.-14     	; 0x2d1a <phyTrxSetState+0x18>

  TRX_STATE_REG = state;
    2d28:	82 e4       	ldi	r24, 0x42	; 66
    2d2a:	91 e0       	ldi	r25, 0x01	; 1
    2d2c:	29 81       	ldd	r18, Y+1	; 0x01
    2d2e:	fc 01       	movw	r30, r24
    2d30:	20 83       	st	Z, r18
  while (state != TRX_STATUS_REG_s.trxStatus);
    2d32:	00 00       	nop
    2d34:	81 e4       	ldi	r24, 0x41	; 65
    2d36:	91 e0       	ldi	r25, 0x01	; 1
    2d38:	fc 01       	movw	r30, r24
    2d3a:	80 81       	ld	r24, Z
    2d3c:	8f 71       	andi	r24, 0x1F	; 31
    2d3e:	98 2f       	mov	r25, r24
    2d40:	89 81       	ldd	r24, Y+1	; 0x01
    2d42:	98 17       	cp	r25, r24
    2d44:	b9 f7       	brne	.-18     	; 0x2d34 <phyTrxSetState+0x32>
}
    2d46:	00 00       	nop
    2d48:	0f 90       	pop	r0
    2d4a:	df 91       	pop	r29
    2d4c:	cf 91       	pop	r28
    2d4e:	08 95       	ret

00002d50 <PHY_SetIEEEAddr>:

/*************************************************************************//**
*****************************************************************************/
void PHY_SetIEEEAddr(uint8_t *ieee_addr)
{
    2d50:	cf 93       	push	r28
    2d52:	df 93       	push	r29
    2d54:	00 d0       	rcall	.+0      	; 0x2d56 <PHY_SetIEEEAddr+0x6>
    2d56:	00 d0       	rcall	.+0      	; 0x2d58 <PHY_SetIEEEAddr+0x8>
    2d58:	cd b7       	in	r28, 0x3d	; 61
    2d5a:	de b7       	in	r29, 0x3e	; 62
    2d5c:	9c 83       	std	Y+4, r25	; 0x04
    2d5e:	8b 83       	std	Y+3, r24	; 0x03
	uint8_t *ptr_to_reg = ieee_addr;
    2d60:	8b 81       	ldd	r24, Y+3	; 0x03
    2d62:	9c 81       	ldd	r25, Y+4	; 0x04
    2d64:	9a 83       	std	Y+2, r25	; 0x02
    2d66:	89 83       	std	Y+1, r24	; 0x01
	IEEE_ADDR_0_REG = *ptr_to_reg++;
    2d68:	24 e6       	ldi	r18, 0x64	; 100
    2d6a:	31 e0       	ldi	r19, 0x01	; 1
    2d6c:	89 81       	ldd	r24, Y+1	; 0x01
    2d6e:	9a 81       	ldd	r25, Y+2	; 0x02
    2d70:	ac 01       	movw	r20, r24
    2d72:	4f 5f       	subi	r20, 0xFF	; 255
    2d74:	5f 4f       	sbci	r21, 0xFF	; 255
    2d76:	5a 83       	std	Y+2, r21	; 0x02
    2d78:	49 83       	std	Y+1, r20	; 0x01
    2d7a:	fc 01       	movw	r30, r24
    2d7c:	80 81       	ld	r24, Z
    2d7e:	f9 01       	movw	r30, r18
    2d80:	80 83       	st	Z, r24
	IEEE_ADDR_1_REG = *ptr_to_reg++;
    2d82:	25 e6       	ldi	r18, 0x65	; 101
    2d84:	31 e0       	ldi	r19, 0x01	; 1
    2d86:	89 81       	ldd	r24, Y+1	; 0x01
    2d88:	9a 81       	ldd	r25, Y+2	; 0x02
    2d8a:	ac 01       	movw	r20, r24
    2d8c:	4f 5f       	subi	r20, 0xFF	; 255
    2d8e:	5f 4f       	sbci	r21, 0xFF	; 255
    2d90:	5a 83       	std	Y+2, r21	; 0x02
    2d92:	49 83       	std	Y+1, r20	; 0x01
    2d94:	fc 01       	movw	r30, r24
    2d96:	80 81       	ld	r24, Z
    2d98:	f9 01       	movw	r30, r18
    2d9a:	80 83       	st	Z, r24
	IEEE_ADDR_2_REG = *ptr_to_reg++;
    2d9c:	26 e6       	ldi	r18, 0x66	; 102
    2d9e:	31 e0       	ldi	r19, 0x01	; 1
    2da0:	89 81       	ldd	r24, Y+1	; 0x01
    2da2:	9a 81       	ldd	r25, Y+2	; 0x02
    2da4:	ac 01       	movw	r20, r24
    2da6:	4f 5f       	subi	r20, 0xFF	; 255
    2da8:	5f 4f       	sbci	r21, 0xFF	; 255
    2daa:	5a 83       	std	Y+2, r21	; 0x02
    2dac:	49 83       	std	Y+1, r20	; 0x01
    2dae:	fc 01       	movw	r30, r24
    2db0:	80 81       	ld	r24, Z
    2db2:	f9 01       	movw	r30, r18
    2db4:	80 83       	st	Z, r24
	IEEE_ADDR_3_REG = *ptr_to_reg++;
    2db6:	27 e6       	ldi	r18, 0x67	; 103
    2db8:	31 e0       	ldi	r19, 0x01	; 1
    2dba:	89 81       	ldd	r24, Y+1	; 0x01
    2dbc:	9a 81       	ldd	r25, Y+2	; 0x02
    2dbe:	ac 01       	movw	r20, r24
    2dc0:	4f 5f       	subi	r20, 0xFF	; 255
    2dc2:	5f 4f       	sbci	r21, 0xFF	; 255
    2dc4:	5a 83       	std	Y+2, r21	; 0x02
    2dc6:	49 83       	std	Y+1, r20	; 0x01
    2dc8:	fc 01       	movw	r30, r24
    2dca:	80 81       	ld	r24, Z
    2dcc:	f9 01       	movw	r30, r18
    2dce:	80 83       	st	Z, r24
	IEEE_ADDR_4_REG = *ptr_to_reg++;
    2dd0:	28 e6       	ldi	r18, 0x68	; 104
    2dd2:	31 e0       	ldi	r19, 0x01	; 1
    2dd4:	89 81       	ldd	r24, Y+1	; 0x01
    2dd6:	9a 81       	ldd	r25, Y+2	; 0x02
    2dd8:	ac 01       	movw	r20, r24
    2dda:	4f 5f       	subi	r20, 0xFF	; 255
    2ddc:	5f 4f       	sbci	r21, 0xFF	; 255
    2dde:	5a 83       	std	Y+2, r21	; 0x02
    2de0:	49 83       	std	Y+1, r20	; 0x01
    2de2:	fc 01       	movw	r30, r24
    2de4:	80 81       	ld	r24, Z
    2de6:	f9 01       	movw	r30, r18
    2de8:	80 83       	st	Z, r24
	IEEE_ADDR_5_REG = *ptr_to_reg++;
    2dea:	29 e6       	ldi	r18, 0x69	; 105
    2dec:	31 e0       	ldi	r19, 0x01	; 1
    2dee:	89 81       	ldd	r24, Y+1	; 0x01
    2df0:	9a 81       	ldd	r25, Y+2	; 0x02
    2df2:	ac 01       	movw	r20, r24
    2df4:	4f 5f       	subi	r20, 0xFF	; 255
    2df6:	5f 4f       	sbci	r21, 0xFF	; 255
    2df8:	5a 83       	std	Y+2, r21	; 0x02
    2dfa:	49 83       	std	Y+1, r20	; 0x01
    2dfc:	fc 01       	movw	r30, r24
    2dfe:	80 81       	ld	r24, Z
    2e00:	f9 01       	movw	r30, r18
    2e02:	80 83       	st	Z, r24
	IEEE_ADDR_6_REG = *ptr_to_reg++;
    2e04:	2a e6       	ldi	r18, 0x6A	; 106
    2e06:	31 e0       	ldi	r19, 0x01	; 1
    2e08:	89 81       	ldd	r24, Y+1	; 0x01
    2e0a:	9a 81       	ldd	r25, Y+2	; 0x02
    2e0c:	ac 01       	movw	r20, r24
    2e0e:	4f 5f       	subi	r20, 0xFF	; 255
    2e10:	5f 4f       	sbci	r21, 0xFF	; 255
    2e12:	5a 83       	std	Y+2, r21	; 0x02
    2e14:	49 83       	std	Y+1, r20	; 0x01
    2e16:	fc 01       	movw	r30, r24
    2e18:	80 81       	ld	r24, Z
    2e1a:	f9 01       	movw	r30, r18
    2e1c:	80 83       	st	Z, r24
	IEEE_ADDR_7_REG = *ptr_to_reg;
    2e1e:	8b e6       	ldi	r24, 0x6B	; 107
    2e20:	91 e0       	ldi	r25, 0x01	; 1
    2e22:	29 81       	ldd	r18, Y+1	; 0x01
    2e24:	3a 81       	ldd	r19, Y+2	; 0x02
    2e26:	f9 01       	movw	r30, r18
    2e28:	20 81       	ld	r18, Z
    2e2a:	fc 01       	movw	r30, r24
    2e2c:	20 83       	st	Z, r18
}
    2e2e:	00 00       	nop
    2e30:	0f 90       	pop	r0
    2e32:	0f 90       	pop	r0
    2e34:	0f 90       	pop	r0
    2e36:	0f 90       	pop	r0
    2e38:	df 91       	pop	r29
    2e3a:	cf 91       	pop	r28
    2e3c:	08 95       	ret

00002e3e <PHY_TaskHandler>:

/*************************************************************************//**
*****************************************************************************/
void PHY_TaskHandler(void)
{
    2e3e:	cf 93       	push	r28
    2e40:	df 93       	push	r29
    2e42:	cd b7       	in	r28, 0x3d	; 61
    2e44:	de b7       	in	r29, 0x3e	; 62
    2e46:	28 97       	sbiw	r28, 0x08	; 8
    2e48:	0f b6       	in	r0, 0x3f	; 63
    2e4a:	f8 94       	cli
    2e4c:	de bf       	out	0x3e, r29	; 62
    2e4e:	0f be       	out	0x3f, r0	; 63
    2e50:	cd bf       	out	0x3d, r28	; 61
  if (PHY_STATE_SLEEP == phyState)
    2e52:	80 91 0f 0e 	lds	r24, 0x0E0F	; 0x800e0f <phyState>
    2e56:	82 30       	cpi	r24, 0x02	; 2
    2e58:	09 f4       	brne	.+2      	; 0x2e5c <PHY_TaskHandler+0x1e>
    2e5a:	9e c0       	rjmp	.+316    	; 0x2f98 <PHY_TaskHandler+0x15a>
    return;

  if (IRQ_STATUS_REG_s.rxEnd)
    2e5c:	8f e4       	ldi	r24, 0x4F	; 79
    2e5e:	91 e0       	ldi	r25, 0x01	; 1
    2e60:	fc 01       	movw	r30, r24
    2e62:	80 81       	ld	r24, Z
    2e64:	83 fb       	bst	r24, 3
    2e66:	88 27       	eor	r24, r24
    2e68:	80 f9       	bld	r24, 0
    2e6a:	88 23       	and	r24, r24
    2e6c:	09 f4       	brne	.+2      	; 0x2e70 <PHY_TaskHandler+0x32>
    2e6e:	59 c0       	rjmp	.+178    	; 0x2f22 <PHY_TaskHandler+0xe4>
  {
    PHY_DataInd_t ind;
    uint8_t size = TST_RX_LENGTH_REG;
    2e70:	8b e7       	ldi	r24, 0x7B	; 123
    2e72:	91 e0       	ldi	r25, 0x01	; 1
    2e74:	fc 01       	movw	r30, r24
    2e76:	80 81       	ld	r24, Z
    2e78:	8b 83       	std	Y+3, r24	; 0x03

    for (uint8_t i = 0; i < size + 1/*lqi*/; i++)
    2e7a:	19 82       	std	Y+1, r1	; 0x01
    2e7c:	11 c0       	rjmp	.+34     	; 0x2ea0 <PHY_TaskHandler+0x62>
      phyRxBuffer[i] = TRX_FRAME_BUFFER(i);
    2e7e:	89 81       	ldd	r24, Y+1	; 0x01
    2e80:	88 2f       	mov	r24, r24
    2e82:	90 e0       	ldi	r25, 0x00	; 0
    2e84:	29 81       	ldd	r18, Y+1	; 0x01
    2e86:	22 2f       	mov	r18, r18
    2e88:	30 e0       	ldi	r19, 0x00	; 0
    2e8a:	20 58       	subi	r18, 0x80	; 128
    2e8c:	3e 4f       	sbci	r19, 0xFE	; 254
    2e8e:	f9 01       	movw	r30, r18
    2e90:	20 81       	ld	r18, Z
    2e92:	80 5f       	subi	r24, 0xF0	; 240
    2e94:	91 4f       	sbci	r25, 0xF1	; 241
    2e96:	fc 01       	movw	r30, r24
    2e98:	20 83       	st	Z, r18
  if (IRQ_STATUS_REG_s.rxEnd)
  {
    PHY_DataInd_t ind;
    uint8_t size = TST_RX_LENGTH_REG;

    for (uint8_t i = 0; i < size + 1/*lqi*/; i++)
    2e9a:	89 81       	ldd	r24, Y+1	; 0x01
    2e9c:	8f 5f       	subi	r24, 0xFF	; 255
    2e9e:	89 83       	std	Y+1, r24	; 0x01
    2ea0:	89 81       	ldd	r24, Y+1	; 0x01
    2ea2:	28 2f       	mov	r18, r24
    2ea4:	30 e0       	ldi	r19, 0x00	; 0
    2ea6:	8b 81       	ldd	r24, Y+3	; 0x03
    2ea8:	88 2f       	mov	r24, r24
    2eaa:	90 e0       	ldi	r25, 0x00	; 0
    2eac:	01 96       	adiw	r24, 0x01	; 1
    2eae:	28 17       	cp	r18, r24
    2eb0:	39 07       	cpc	r19, r25
    2eb2:	2c f3       	brlt	.-54     	; 0x2e7e <PHY_TaskHandler+0x40>
      phyRxBuffer[i] = TRX_FRAME_BUFFER(i);

    ind.data = phyRxBuffer;
    2eb4:	80 e1       	ldi	r24, 0x10	; 16
    2eb6:	9e e0       	ldi	r25, 0x0E	; 14
    2eb8:	9d 83       	std	Y+5, r25	; 0x05
    2eba:	8c 83       	std	Y+4, r24	; 0x04
    ind.size = size - PHY_CRC_SIZE;
    2ebc:	8b 81       	ldd	r24, Y+3	; 0x03
    2ebe:	82 50       	subi	r24, 0x02	; 2
    2ec0:	8e 83       	std	Y+6, r24	; 0x06
    ind.lqi  = phyRxBuffer[size];
    2ec2:	8b 81       	ldd	r24, Y+3	; 0x03
    2ec4:	88 2f       	mov	r24, r24
    2ec6:	90 e0       	ldi	r25, 0x00	; 0
    2ec8:	80 5f       	subi	r24, 0xF0	; 240
    2eca:	91 4f       	sbci	r25, 0xF1	; 241
    2ecc:	fc 01       	movw	r30, r24
    2ece:	80 81       	ld	r24, Z
    2ed0:	8f 83       	std	Y+7, r24	; 0x07
    ind.rssi = (int8_t)PHY_ED_LEVEL_REG + PHY_RSSI_BASE_VAL;
    2ed2:	87 e4       	ldi	r24, 0x47	; 71
    2ed4:	91 e0       	ldi	r25, 0x01	; 1
    2ed6:	fc 01       	movw	r30, r24
    2ed8:	80 81       	ld	r24, Z
    2eda:	8a 55       	subi	r24, 0x5A	; 90
    2edc:	88 87       	std	Y+8, r24	; 0x08
    PHY_DataInd(&ind);
    2ede:	ce 01       	movw	r24, r28
    2ee0:	04 96       	adiw	r24, 0x04	; 4
    2ee2:	0e 94 50 09 	call	0x12a0	; 0x12a0 <PHY_DataInd>

    while (TRX_STATUS_RX_AACK_ON != TRX_STATUS_REG_s.trxStatus);
    2ee6:	00 00       	nop
    2ee8:	81 e4       	ldi	r24, 0x41	; 65
    2eea:	91 e0       	ldi	r25, 0x01	; 1
    2eec:	fc 01       	movw	r30, r24
    2eee:	80 81       	ld	r24, Z
    2ef0:	8f 71       	andi	r24, 0x1F	; 31
    2ef2:	86 31       	cpi	r24, 0x16	; 22
    2ef4:	c9 f7       	brne	.-14     	; 0x2ee8 <PHY_TaskHandler+0xaa>

    IRQ_STATUS_REG_s.rxEnd = 1;
    2ef6:	8f e4       	ldi	r24, 0x4F	; 79
    2ef8:	91 e0       	ldi	r25, 0x01	; 1
    2efa:	fc 01       	movw	r30, r24
    2efc:	20 81       	ld	r18, Z
    2efe:	28 60       	ori	r18, 0x08	; 8
    2f00:	fc 01       	movw	r30, r24
    2f02:	20 83       	st	Z, r18
    TRX_CTRL_2_REG_s.rxSafeMode = 0;
    2f04:	8c e4       	ldi	r24, 0x4C	; 76
    2f06:	91 e0       	ldi	r25, 0x01	; 1
    2f08:	fc 01       	movw	r30, r24
    2f0a:	20 81       	ld	r18, Z
    2f0c:	2f 77       	andi	r18, 0x7F	; 127
    2f0e:	fc 01       	movw	r30, r24
    2f10:	20 83       	st	Z, r18
    TRX_CTRL_2_REG_s.rxSafeMode = 1;
    2f12:	8c e4       	ldi	r24, 0x4C	; 76
    2f14:	91 e0       	ldi	r25, 0x01	; 1
    2f16:	fc 01       	movw	r30, r24
    2f18:	20 81       	ld	r18, Z
    2f1a:	20 68       	ori	r18, 0x80	; 128
    2f1c:	fc 01       	movw	r30, r24
    2f1e:	20 83       	st	Z, r18
    2f20:	3c c0       	rjmp	.+120    	; 0x2f9a <PHY_TaskHandler+0x15c>
  }

  else if (IRQ_STATUS_REG_s.txEnd)
    2f22:	8f e4       	ldi	r24, 0x4F	; 79
    2f24:	91 e0       	ldi	r25, 0x01	; 1
    2f26:	fc 01       	movw	r30, r24
    2f28:	80 81       	ld	r24, Z
    2f2a:	86 fb       	bst	r24, 6
    2f2c:	88 27       	eor	r24, r24
    2f2e:	80 f9       	bld	r24, 0
    2f30:	88 23       	and	r24, r24
    2f32:	99 f1       	breq	.+102    	; 0x2f9a <PHY_TaskHandler+0x15c>
  {
    if (TRX_STATUS_TX_ARET_ON == TRX_STATUS_REG_s.trxStatus)
    2f34:	81 e4       	ldi	r24, 0x41	; 65
    2f36:	91 e0       	ldi	r25, 0x01	; 1
    2f38:	fc 01       	movw	r30, r24
    2f3a:	80 81       	ld	r24, Z
    2f3c:	8f 71       	andi	r24, 0x1F	; 31
    2f3e:	89 31       	cpi	r24, 0x19	; 25
    2f40:	19 f5       	brne	.+70     	; 0x2f88 <PHY_TaskHandler+0x14a>
    {
      uint8_t status = TRX_STATE_REG_s.tracStatus;
    2f42:	82 e4       	ldi	r24, 0x42	; 66
    2f44:	91 e0       	ldi	r25, 0x01	; 1
    2f46:	fc 01       	movw	r30, r24
    2f48:	80 81       	ld	r24, Z
    2f4a:	82 95       	swap	r24
    2f4c:	86 95       	lsr	r24
    2f4e:	87 70       	andi	r24, 0x07	; 7
    2f50:	8a 83       	std	Y+2, r24	; 0x02

      if (TRAC_STATUS_SUCCESS == status)
    2f52:	8a 81       	ldd	r24, Y+2	; 0x02
    2f54:	88 23       	and	r24, r24
    2f56:	11 f4       	brne	.+4      	; 0x2f5c <PHY_TaskHandler+0x11e>
        status = PHY_STATUS_SUCCESS;
    2f58:	1a 82       	std	Y+2, r1	; 0x02
    2f5a:	0e c0       	rjmp	.+28     	; 0x2f78 <PHY_TaskHandler+0x13a>
      else if (TRAC_STATUS_CHANNEL_ACCESS_FAILURE == status)
    2f5c:	8a 81       	ldd	r24, Y+2	; 0x02
    2f5e:	83 30       	cpi	r24, 0x03	; 3
    2f60:	19 f4       	brne	.+6      	; 0x2f68 <PHY_TaskHandler+0x12a>
        status = PHY_STATUS_CHANNEL_ACCESS_FAILURE;
    2f62:	81 e0       	ldi	r24, 0x01	; 1
    2f64:	8a 83       	std	Y+2, r24	; 0x02
    2f66:	08 c0       	rjmp	.+16     	; 0x2f78 <PHY_TaskHandler+0x13a>
      else if (TRAC_STATUS_NO_ACK == status)
    2f68:	8a 81       	ldd	r24, Y+2	; 0x02
    2f6a:	85 30       	cpi	r24, 0x05	; 5
    2f6c:	19 f4       	brne	.+6      	; 0x2f74 <PHY_TaskHandler+0x136>
        status = PHY_STATUS_NO_ACK;
    2f6e:	82 e0       	ldi	r24, 0x02	; 2
    2f70:	8a 83       	std	Y+2, r24	; 0x02
    2f72:	02 c0       	rjmp	.+4      	; 0x2f78 <PHY_TaskHandler+0x13a>
      else
        status = PHY_STATUS_ERROR;
    2f74:	83 e0       	ldi	r24, 0x03	; 3
    2f76:	8a 83       	std	Y+2, r24	; 0x02

      phySetRxState();
    2f78:	0e 94 6a 16 	call	0x2cd4	; 0x2cd4 <phySetRxState>
      phyState = PHY_STATE_IDLE;
    2f7c:	81 e0       	ldi	r24, 0x01	; 1
    2f7e:	80 93 0f 0e 	sts	0x0E0F, r24	; 0x800e0f <phyState>

      PHY_DataConf(status);
    2f82:	8a 81       	ldd	r24, Y+2	; 0x02
    2f84:	0e 94 0e 13 	call	0x261c	; 0x261c <PHY_DataConf>
    }

    IRQ_STATUS_REG_s.txEnd = 1;
    2f88:	8f e4       	ldi	r24, 0x4F	; 79
    2f8a:	91 e0       	ldi	r25, 0x01	; 1
    2f8c:	fc 01       	movw	r30, r24
    2f8e:	20 81       	ld	r18, Z
    2f90:	20 64       	ori	r18, 0x40	; 64
    2f92:	fc 01       	movw	r30, r24
    2f94:	20 83       	st	Z, r18
    2f96:	01 c0       	rjmp	.+2      	; 0x2f9a <PHY_TaskHandler+0x15c>
/*************************************************************************//**
*****************************************************************************/
void PHY_TaskHandler(void)
{
  if (PHY_STATE_SLEEP == phyState)
    return;
    2f98:	00 00       	nop
      PHY_DataConf(status);
    }

    IRQ_STATUS_REG_s.txEnd = 1;
  }
}
    2f9a:	28 96       	adiw	r28, 0x08	; 8
    2f9c:	0f b6       	in	r0, 0x3f	; 63
    2f9e:	f8 94       	cli
    2fa0:	de bf       	out	0x3e, r29	; 62
    2fa2:	0f be       	out	0x3f, r0	; 63
    2fa4:	cd bf       	out	0x3d, r28	; 61
    2fa6:	df 91       	pop	r29
    2fa8:	cf 91       	pop	r28
    2faa:	08 95       	ret

00002fac <SYS_Init>:
/*- Implementations --------------------------------------------------------*/

/*************************************************************************//**
*****************************************************************************/
void SYS_Init(void)
{
    2fac:	cf 93       	push	r28
    2fae:	df 93       	push	r29
    2fb0:	cd b7       	in	r28, 0x3d	; 61
    2fb2:	de b7       	in	r29, 0x3e	; 62
	SYS_TimerInit();
    2fb4:	0e 94 14 18 	call	0x3028	; 0x3028 <SYS_TimerInit>
#if SYS_SECURITY_MODE == 0
	sal_init();
    2fb8:	0e 94 c5 26 	call	0x4d8a	; 0x4d8a <sal_init>
#endif
	PHY_Init();
    2fbc:	0e 94 10 14 	call	0x2820	; 0x2820 <PHY_Init>
	NWK_Init();
    2fc0:	0e 94 a9 02 	call	0x552	; 0x552 <NWK_Init>
}
    2fc4:	00 00       	nop
    2fc6:	df 91       	pop	r29
    2fc8:	cf 91       	pop	r28
    2fca:	08 95       	ret

00002fcc <SYS_TaskHandler>:

/*************************************************************************//**
*****************************************************************************/
void SYS_TaskHandler(void)
{
    2fcc:	cf 93       	push	r28
    2fce:	df 93       	push	r29
    2fd0:	cd b7       	in	r28, 0x3d	; 61
    2fd2:	de b7       	in	r29, 0x3e	; 62
	PHY_TaskHandler();
    2fd4:	0e 94 1f 17 	call	0x2e3e	; 0x2e3e <PHY_TaskHandler>
	NWK_TaskHandler();
    2fd8:	0e 94 a5 03 	call	0x74a	; 0x74a <NWK_TaskHandler>
	SYS_TimerTaskHandler();
    2fdc:	0e 94 e6 18 	call	0x31cc	; 0x31cc <SYS_TimerTaskHandler>
}
    2fe0:	00 00       	nop
    2fe2:	df 91       	pop	r29
    2fe4:	cf 91       	pop	r28
    2fe6:	08 95       	ret

00002fe8 <cpu_irq_save>:
#endif

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
    2fe8:	cf 93       	push	r28
    2fea:	df 93       	push	r29
    2fec:	1f 92       	push	r1
    2fee:	cd b7       	in	r28, 0x3d	; 61
    2ff0:	de b7       	in	r29, 0x3e	; 62
	irqflags_t flags = SREG;
    2ff2:	8f e5       	ldi	r24, 0x5F	; 95
    2ff4:	90 e0       	ldi	r25, 0x00	; 0
    2ff6:	fc 01       	movw	r30, r24
    2ff8:	80 81       	ld	r24, Z
    2ffa:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    2ffc:	f8 94       	cli
	return flags;
    2ffe:	89 81       	ldd	r24, Y+1	; 0x01
}
    3000:	0f 90       	pop	r0
    3002:	df 91       	pop	r29
    3004:	cf 91       	pop	r28
    3006:	08 95       	ret

00003008 <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
    3008:	cf 93       	push	r28
    300a:	df 93       	push	r29
    300c:	1f 92       	push	r1
    300e:	cd b7       	in	r28, 0x3d	; 61
    3010:	de b7       	in	r29, 0x3e	; 62
    3012:	89 83       	std	Y+1, r24	; 0x01
	barrier();
	SREG = flags;
    3014:	8f e5       	ldi	r24, 0x5F	; 95
    3016:	90 e0       	ldi	r25, 0x00	; 0
    3018:	29 81       	ldd	r18, Y+1	; 0x01
    301a:	fc 01       	movw	r30, r24
    301c:	20 83       	st	Z, r18
}
    301e:	00 00       	nop
    3020:	0f 90       	pop	r0
    3022:	df 91       	pop	r29
    3024:	cf 91       	pop	r28
    3026:	08 95       	ret

00003028 <SYS_TimerInit>:
/*- Implementations --------------------------------------------------------*/

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerInit(void)
{
    3028:	cf 93       	push	r28
    302a:	df 93       	push	r29
    302c:	cd b7       	in	r28, 0x3d	; 61
    302e:	de b7       	in	r29, 0x3e	; 62
	SysTimerIrqCount = 0;
    3030:	10 92 b2 10 	sts	0x10B2, r1	; 0x8010b2 <SysTimerIrqCount>
	set_common_tc_expiry_callback(SYS_HwExpiry_Cb);
    3034:	8e e7       	ldi	r24, 0x7E	; 126
    3036:	9a e1       	ldi	r25, 0x1A	; 26
    3038:	0e 94 53 40 	call	0x80a6	; 0x80a6 <set_common_tc_expiry_callback>
	common_tc_init();
    303c:	0e 94 05 40 	call	0x800a	; 0x800a <common_tc_init>
	common_tc_delay(SYS_TIMER_INTERVAL * MS);
    3040:	80 e1       	ldi	r24, 0x10	; 16
    3042:	97 e2       	ldi	r25, 0x27	; 39
    3044:	0e 94 9b 3f 	call	0x7f36	; 0x7f36 <common_tc_delay>
	timers = NULL;
    3048:	10 92 92 0e 	sts	0x0E92, r1	; 0x800e92 <timers+0x1>
    304c:	10 92 91 0e 	sts	0x0E91, r1	; 0x800e91 <timers>
}
    3050:	00 00       	nop
    3052:	df 91       	pop	r29
    3054:	cf 91       	pop	r28
    3056:	08 95       	ret

00003058 <SYS_TimerStart>:

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerStart(SYS_Timer_t *timer)
{
    3058:	cf 93       	push	r28
    305a:	df 93       	push	r29
    305c:	00 d0       	rcall	.+0      	; 0x305e <SYS_TimerStart+0x6>
    305e:	cd b7       	in	r28, 0x3d	; 61
    3060:	de b7       	in	r29, 0x3e	; 62
    3062:	9a 83       	std	Y+2, r25	; 0x02
    3064:	89 83       	std	Y+1, r24	; 0x01
	if (!SYS_TimerStarted(timer)) {
    3066:	89 81       	ldd	r24, Y+1	; 0x01
    3068:	9a 81       	ldd	r25, Y+2	; 0x02
    306a:	0e 94 bb 18 	call	0x3176	; 0x3176 <SYS_TimerStarted>
    306e:	98 2f       	mov	r25, r24
    3070:	81 e0       	ldi	r24, 0x01	; 1
    3072:	89 27       	eor	r24, r25
    3074:	88 23       	and	r24, r24
    3076:	21 f0       	breq	.+8      	; 0x3080 <SYS_TimerStart+0x28>
		placeTimer(timer);
    3078:	89 81       	ldd	r24, Y+1	; 0x01
    307a:	9a 81       	ldd	r25, Y+2	; 0x02
    307c:	0e 94 a9 19 	call	0x3352	; 0x3352 <placeTimer>
	}
}
    3080:	00 00       	nop
    3082:	0f 90       	pop	r0
    3084:	0f 90       	pop	r0
    3086:	df 91       	pop	r29
    3088:	cf 91       	pop	r28
    308a:	08 95       	ret

0000308c <SYS_TimerStop>:

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerStop(SYS_Timer_t *timer)
{
    308c:	cf 93       	push	r28
    308e:	df 93       	push	r29
    3090:	00 d0       	rcall	.+0      	; 0x3092 <SYS_TimerStop+0x6>
    3092:	00 d0       	rcall	.+0      	; 0x3094 <SYS_TimerStop+0x8>
    3094:	00 d0       	rcall	.+0      	; 0x3096 <SYS_TimerStop+0xa>
    3096:	cd b7       	in	r28, 0x3d	; 61
    3098:	de b7       	in	r29, 0x3e	; 62
    309a:	9e 83       	std	Y+6, r25	; 0x06
    309c:	8d 83       	std	Y+5, r24	; 0x05
	SYS_Timer_t *prev = NULL;
    309e:	1a 82       	std	Y+2, r1	; 0x02
    30a0:	19 82       	std	Y+1, r1	; 0x01

	for (SYS_Timer_t *t = timers; t; t = t->next) {
    30a2:	80 91 91 0e 	lds	r24, 0x0E91	; 0x800e91 <timers>
    30a6:	90 91 92 0e 	lds	r25, 0x0E92	; 0x800e92 <timers+0x1>
    30aa:	9c 83       	std	Y+4, r25	; 0x04
    30ac:	8b 83       	std	Y+3, r24	; 0x03
    30ae:	52 c0       	rjmp	.+164    	; 0x3154 <SYS_TimerStop+0xc8>
		if (t == timer) {
    30b0:	2b 81       	ldd	r18, Y+3	; 0x03
    30b2:	3c 81       	ldd	r19, Y+4	; 0x04
    30b4:	8d 81       	ldd	r24, Y+5	; 0x05
    30b6:	9e 81       	ldd	r25, Y+6	; 0x06
    30b8:	28 17       	cp	r18, r24
    30ba:	39 07       	cpc	r19, r25
    30bc:	09 f0       	breq	.+2      	; 0x30c0 <SYS_TimerStop+0x34>
    30be:	3f c0       	rjmp	.+126    	; 0x313e <SYS_TimerStop+0xb2>
			if (prev) {
    30c0:	89 81       	ldd	r24, Y+1	; 0x01
    30c2:	9a 81       	ldd	r25, Y+2	; 0x02
    30c4:	89 2b       	or	r24, r25
    30c6:	59 f0       	breq	.+22     	; 0x30de <SYS_TimerStop+0x52>
				prev->next = t->next;
    30c8:	8b 81       	ldd	r24, Y+3	; 0x03
    30ca:	9c 81       	ldd	r25, Y+4	; 0x04
    30cc:	fc 01       	movw	r30, r24
    30ce:	20 81       	ld	r18, Z
    30d0:	31 81       	ldd	r19, Z+1	; 0x01
    30d2:	89 81       	ldd	r24, Y+1	; 0x01
    30d4:	9a 81       	ldd	r25, Y+2	; 0x02
    30d6:	fc 01       	movw	r30, r24
    30d8:	31 83       	std	Z+1, r19	; 0x01
    30da:	20 83       	st	Z, r18
    30dc:	09 c0       	rjmp	.+18     	; 0x30f0 <SYS_TimerStop+0x64>
			} else {
				timers = t->next;
    30de:	8b 81       	ldd	r24, Y+3	; 0x03
    30e0:	9c 81       	ldd	r25, Y+4	; 0x04
    30e2:	fc 01       	movw	r30, r24
    30e4:	80 81       	ld	r24, Z
    30e6:	91 81       	ldd	r25, Z+1	; 0x01
    30e8:	90 93 92 0e 	sts	0x0E92, r25	; 0x800e92 <timers+0x1>
    30ec:	80 93 91 0e 	sts	0x0E91, r24	; 0x800e91 <timers>
			}

			if (t->next) {
    30f0:	8b 81       	ldd	r24, Y+3	; 0x03
    30f2:	9c 81       	ldd	r25, Y+4	; 0x04
    30f4:	fc 01       	movw	r30, r24
    30f6:	80 81       	ld	r24, Z
    30f8:	91 81       	ldd	r25, Z+1	; 0x01
    30fa:	89 2b       	or	r24, r25
    30fc:	89 f1       	breq	.+98     	; 0x3160 <SYS_TimerStop+0xd4>
				t->next->timeout += timer->timeout;
    30fe:	8b 81       	ldd	r24, Y+3	; 0x03
    3100:	9c 81       	ldd	r25, Y+4	; 0x04
    3102:	fc 01       	movw	r30, r24
    3104:	60 81       	ld	r22, Z
    3106:	71 81       	ldd	r23, Z+1	; 0x01
    3108:	8b 81       	ldd	r24, Y+3	; 0x03
    310a:	9c 81       	ldd	r25, Y+4	; 0x04
    310c:	fc 01       	movw	r30, r24
    310e:	80 81       	ld	r24, Z
    3110:	91 81       	ldd	r25, Z+1	; 0x01
    3112:	fc 01       	movw	r30, r24
    3114:	22 81       	ldd	r18, Z+2	; 0x02
    3116:	33 81       	ldd	r19, Z+3	; 0x03
    3118:	44 81       	ldd	r20, Z+4	; 0x04
    311a:	55 81       	ldd	r21, Z+5	; 0x05
    311c:	8d 81       	ldd	r24, Y+5	; 0x05
    311e:	9e 81       	ldd	r25, Y+6	; 0x06
    3120:	fc 01       	movw	r30, r24
    3122:	82 81       	ldd	r24, Z+2	; 0x02
    3124:	93 81       	ldd	r25, Z+3	; 0x03
    3126:	a4 81       	ldd	r26, Z+4	; 0x04
    3128:	b5 81       	ldd	r27, Z+5	; 0x05
    312a:	82 0f       	add	r24, r18
    312c:	93 1f       	adc	r25, r19
    312e:	a4 1f       	adc	r26, r20
    3130:	b5 1f       	adc	r27, r21
    3132:	fb 01       	movw	r30, r22
    3134:	82 83       	std	Z+2, r24	; 0x02
    3136:	93 83       	std	Z+3, r25	; 0x03
    3138:	a4 83       	std	Z+4, r26	; 0x04
    313a:	b5 83       	std	Z+5, r27	; 0x05
			}

			break;
    313c:	11 c0       	rjmp	.+34     	; 0x3160 <SYS_TimerStop+0xd4>
		}

		prev = t;
    313e:	8b 81       	ldd	r24, Y+3	; 0x03
    3140:	9c 81       	ldd	r25, Y+4	; 0x04
    3142:	9a 83       	std	Y+2, r25	; 0x02
    3144:	89 83       	std	Y+1, r24	; 0x01
*****************************************************************************/
void SYS_TimerStop(SYS_Timer_t *timer)
{
	SYS_Timer_t *prev = NULL;

	for (SYS_Timer_t *t = timers; t; t = t->next) {
    3146:	8b 81       	ldd	r24, Y+3	; 0x03
    3148:	9c 81       	ldd	r25, Y+4	; 0x04
    314a:	fc 01       	movw	r30, r24
    314c:	80 81       	ld	r24, Z
    314e:	91 81       	ldd	r25, Z+1	; 0x01
    3150:	9c 83       	std	Y+4, r25	; 0x04
    3152:	8b 83       	std	Y+3, r24	; 0x03
    3154:	8b 81       	ldd	r24, Y+3	; 0x03
    3156:	9c 81       	ldd	r25, Y+4	; 0x04
    3158:	89 2b       	or	r24, r25
    315a:	09 f0       	breq	.+2      	; 0x315e <SYS_TimerStop+0xd2>
    315c:	a9 cf       	rjmp	.-174    	; 0x30b0 <SYS_TimerStop+0x24>
			break;
		}

		prev = t;
	}
}
    315e:	01 c0       	rjmp	.+2      	; 0x3162 <SYS_TimerStop+0xd6>

			if (t->next) {
				t->next->timeout += timer->timeout;
			}

			break;
    3160:	00 00       	nop
		}

		prev = t;
	}
}
    3162:	00 00       	nop
    3164:	26 96       	adiw	r28, 0x06	; 6
    3166:	0f b6       	in	r0, 0x3f	; 63
    3168:	f8 94       	cli
    316a:	de bf       	out	0x3e, r29	; 62
    316c:	0f be       	out	0x3f, r0	; 63
    316e:	cd bf       	out	0x3d, r28	; 61
    3170:	df 91       	pop	r29
    3172:	cf 91       	pop	r28
    3174:	08 95       	ret

00003176 <SYS_TimerStarted>:

/*************************************************************************//**
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
    3176:	cf 93       	push	r28
    3178:	df 93       	push	r29
    317a:	00 d0       	rcall	.+0      	; 0x317c <SYS_TimerStarted+0x6>
    317c:	00 d0       	rcall	.+0      	; 0x317e <SYS_TimerStarted+0x8>
    317e:	cd b7       	in	r28, 0x3d	; 61
    3180:	de b7       	in	r29, 0x3e	; 62
    3182:	9c 83       	std	Y+4, r25	; 0x04
    3184:	8b 83       	std	Y+3, r24	; 0x03
	for (SYS_Timer_t *t = timers; t; t = t->next) {
    3186:	80 91 91 0e 	lds	r24, 0x0E91	; 0x800e91 <timers>
    318a:	90 91 92 0e 	lds	r25, 0x0E92	; 0x800e92 <timers+0x1>
    318e:	9a 83       	std	Y+2, r25	; 0x02
    3190:	89 83       	std	Y+1, r24	; 0x01
    3192:	10 c0       	rjmp	.+32     	; 0x31b4 <SYS_TimerStarted+0x3e>
		if (t == timer) {
    3194:	29 81       	ldd	r18, Y+1	; 0x01
    3196:	3a 81       	ldd	r19, Y+2	; 0x02
    3198:	8b 81       	ldd	r24, Y+3	; 0x03
    319a:	9c 81       	ldd	r25, Y+4	; 0x04
    319c:	28 17       	cp	r18, r24
    319e:	39 07       	cpc	r19, r25
    31a0:	11 f4       	brne	.+4      	; 0x31a6 <SYS_TimerStarted+0x30>
			return true;
    31a2:	81 e0       	ldi	r24, 0x01	; 1
    31a4:	0c c0       	rjmp	.+24     	; 0x31be <SYS_TimerStarted+0x48>

/*************************************************************************//**
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
	for (SYS_Timer_t *t = timers; t; t = t->next) {
    31a6:	89 81       	ldd	r24, Y+1	; 0x01
    31a8:	9a 81       	ldd	r25, Y+2	; 0x02
    31aa:	fc 01       	movw	r30, r24
    31ac:	80 81       	ld	r24, Z
    31ae:	91 81       	ldd	r25, Z+1	; 0x01
    31b0:	9a 83       	std	Y+2, r25	; 0x02
    31b2:	89 83       	std	Y+1, r24	; 0x01
    31b4:	89 81       	ldd	r24, Y+1	; 0x01
    31b6:	9a 81       	ldd	r25, Y+2	; 0x02
    31b8:	89 2b       	or	r24, r25
    31ba:	61 f7       	brne	.-40     	; 0x3194 <SYS_TimerStarted+0x1e>
		if (t == timer) {
			return true;
		}
	}
	return false;
    31bc:	80 e0       	ldi	r24, 0x00	; 0
}
    31be:	0f 90       	pop	r0
    31c0:	0f 90       	pop	r0
    31c2:	0f 90       	pop	r0
    31c4:	0f 90       	pop	r0
    31c6:	df 91       	pop	r29
    31c8:	cf 91       	pop	r28
    31ca:	08 95       	ret

000031cc <SYS_TimerTaskHandler>:

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerTaskHandler(void)
{
    31cc:	ef 92       	push	r14
    31ce:	ff 92       	push	r15
    31d0:	0f 93       	push	r16
    31d2:	1f 93       	push	r17
    31d4:	cf 93       	push	r28
    31d6:	df 93       	push	r29
    31d8:	cd b7       	in	r28, 0x3d	; 61
    31da:	de b7       	in	r29, 0x3e	; 62
    31dc:	28 97       	sbiw	r28, 0x08	; 8
    31de:	0f b6       	in	r0, 0x3f	; 63
    31e0:	f8 94       	cli
    31e2:	de bf       	out	0x3e, r29	; 62
    31e4:	0f be       	out	0x3f, r0	; 63
    31e6:	cd bf       	out	0x3d, r28	; 61
	uint32_t elapsed;
	uint8_t cnt;
	irqflags_t flags;

	if (0 == SysTimerIrqCount) {
    31e8:	80 91 b2 10 	lds	r24, 0x10B2	; 0x8010b2 <SysTimerIrqCount>
    31ec:	88 23       	and	r24, r24
    31ee:	09 f4       	brne	.+2      	; 0x31f2 <SYS_TimerTaskHandler+0x26>
    31f0:	a2 c0       	rjmp	.+324    	; 0x3336 <SYS_TimerTaskHandler+0x16a>
		return;
	}

	/* Enter a critical section */
	flags = cpu_irq_save();
    31f2:	0e 94 f4 17 	call	0x2fe8	; 0x2fe8 <cpu_irq_save>
    31f6:	8d 83       	std	Y+5, r24	; 0x05
	cnt = SysTimerIrqCount;
    31f8:	80 91 b2 10 	lds	r24, 0x10B2	; 0x8010b2 <SysTimerIrqCount>
    31fc:	8e 83       	std	Y+6, r24	; 0x06
	SysTimerIrqCount = 0;
    31fe:	10 92 b2 10 	sts	0x10B2, r1	; 0x8010b2 <SysTimerIrqCount>
	/* Leave the critical section */
	cpu_irq_restore(flags);
    3202:	8d 81       	ldd	r24, Y+5	; 0x05
    3204:	0e 94 04 18 	call	0x3008	; 0x3008 <cpu_irq_restore>

	elapsed = cnt * SYS_TIMER_INTERVAL;
    3208:	8e 81       	ldd	r24, Y+6	; 0x06
    320a:	88 2f       	mov	r24, r24
    320c:	90 e0       	ldi	r25, 0x00	; 0
    320e:	a0 e0       	ldi	r26, 0x00	; 0
    3210:	b0 e0       	ldi	r27, 0x00	; 0
    3212:	88 0f       	add	r24, r24
    3214:	99 1f       	adc	r25, r25
    3216:	aa 1f       	adc	r26, r26
    3218:	bb 1f       	adc	r27, r27
    321a:	9c 01       	movw	r18, r24
    321c:	ad 01       	movw	r20, r26
    321e:	22 0f       	add	r18, r18
    3220:	33 1f       	adc	r19, r19
    3222:	44 1f       	adc	r20, r20
    3224:	55 1f       	adc	r21, r21
    3226:	22 0f       	add	r18, r18
    3228:	33 1f       	adc	r19, r19
    322a:	44 1f       	adc	r20, r20
    322c:	55 1f       	adc	r21, r21
    322e:	82 0f       	add	r24, r18
    3230:	93 1f       	adc	r25, r19
    3232:	a4 1f       	adc	r26, r20
    3234:	b5 1f       	adc	r27, r21
    3236:	89 83       	std	Y+1, r24	; 0x01
    3238:	9a 83       	std	Y+2, r25	; 0x02
    323a:	ab 83       	std	Y+3, r26	; 0x03
    323c:	bc 83       	std	Y+4, r27	; 0x04

	while (timers && (timers->timeout <= elapsed)) {
    323e:	3d c0       	rjmp	.+122    	; 0x32ba <SYS_TimerTaskHandler+0xee>
		SYS_Timer_t *timer = timers;
    3240:	80 91 91 0e 	lds	r24, 0x0E91	; 0x800e91 <timers>
    3244:	90 91 92 0e 	lds	r25, 0x0E92	; 0x800e92 <timers+0x1>
    3248:	98 87       	std	Y+8, r25	; 0x08
    324a:	8f 83       	std	Y+7, r24	; 0x07

		elapsed -= timers->timeout;
    324c:	80 91 91 0e 	lds	r24, 0x0E91	; 0x800e91 <timers>
    3250:	90 91 92 0e 	lds	r25, 0x0E92	; 0x800e92 <timers+0x1>
    3254:	fc 01       	movw	r30, r24
    3256:	82 81       	ldd	r24, Z+2	; 0x02
    3258:	93 81       	ldd	r25, Z+3	; 0x03
    325a:	a4 81       	ldd	r26, Z+4	; 0x04
    325c:	b5 81       	ldd	r27, Z+5	; 0x05
    325e:	29 81       	ldd	r18, Y+1	; 0x01
    3260:	3a 81       	ldd	r19, Y+2	; 0x02
    3262:	4b 81       	ldd	r20, Y+3	; 0x03
    3264:	5c 81       	ldd	r21, Y+4	; 0x04
    3266:	79 01       	movw	r14, r18
    3268:	8a 01       	movw	r16, r20
    326a:	e8 1a       	sub	r14, r24
    326c:	f9 0a       	sbc	r15, r25
    326e:	0a 0b       	sbc	r16, r26
    3270:	1b 0b       	sbc	r17, r27
    3272:	d8 01       	movw	r26, r16
    3274:	c7 01       	movw	r24, r14
    3276:	89 83       	std	Y+1, r24	; 0x01
    3278:	9a 83       	std	Y+2, r25	; 0x02
    327a:	ab 83       	std	Y+3, r26	; 0x03
    327c:	bc 83       	std	Y+4, r27	; 0x04
		timers = timers->next;
    327e:	80 91 91 0e 	lds	r24, 0x0E91	; 0x800e91 <timers>
    3282:	90 91 92 0e 	lds	r25, 0x0E92	; 0x800e92 <timers+0x1>
    3286:	fc 01       	movw	r30, r24
    3288:	80 81       	ld	r24, Z
    328a:	91 81       	ldd	r25, Z+1	; 0x01
    328c:	90 93 92 0e 	sts	0x0E92, r25	; 0x800e92 <timers+0x1>
    3290:	80 93 91 0e 	sts	0x0E91, r24	; 0x800e91 <timers>
		if (SYS_TIMER_PERIODIC_MODE == timer->mode) {
    3294:	8f 81       	ldd	r24, Y+7	; 0x07
    3296:	98 85       	ldd	r25, Y+8	; 0x08
    3298:	fc 01       	movw	r30, r24
    329a:	82 85       	ldd	r24, Z+10	; 0x0a
    329c:	81 30       	cpi	r24, 0x01	; 1
    329e:	21 f4       	brne	.+8      	; 0x32a8 <SYS_TimerTaskHandler+0xdc>
			placeTimer(timer);
    32a0:	8f 81       	ldd	r24, Y+7	; 0x07
    32a2:	98 85       	ldd	r25, Y+8	; 0x08
    32a4:	0e 94 a9 19 	call	0x3352	; 0x3352 <placeTimer>
		}

		timer->handler(timer);
    32a8:	8f 81       	ldd	r24, Y+7	; 0x07
    32aa:	98 85       	ldd	r25, Y+8	; 0x08
    32ac:	fc 01       	movw	r30, r24
    32ae:	23 85       	ldd	r18, Z+11	; 0x0b
    32b0:	34 85       	ldd	r19, Z+12	; 0x0c
    32b2:	8f 81       	ldd	r24, Y+7	; 0x07
    32b4:	98 85       	ldd	r25, Y+8	; 0x08
    32b6:	f9 01       	movw	r30, r18
    32b8:	09 95       	icall
	/* Leave the critical section */
	cpu_irq_restore(flags);

	elapsed = cnt * SYS_TIMER_INTERVAL;

	while (timers && (timers->timeout <= elapsed)) {
    32ba:	80 91 91 0e 	lds	r24, 0x0E91	; 0x800e91 <timers>
    32be:	90 91 92 0e 	lds	r25, 0x0E92	; 0x800e92 <timers+0x1>
    32c2:	89 2b       	or	r24, r25
    32c4:	99 f0       	breq	.+38     	; 0x32ec <SYS_TimerTaskHandler+0x120>
    32c6:	80 91 91 0e 	lds	r24, 0x0E91	; 0x800e91 <timers>
    32ca:	90 91 92 0e 	lds	r25, 0x0E92	; 0x800e92 <timers+0x1>
    32ce:	fc 01       	movw	r30, r24
    32d0:	22 81       	ldd	r18, Z+2	; 0x02
    32d2:	33 81       	ldd	r19, Z+3	; 0x03
    32d4:	44 81       	ldd	r20, Z+4	; 0x04
    32d6:	55 81       	ldd	r21, Z+5	; 0x05
    32d8:	89 81       	ldd	r24, Y+1	; 0x01
    32da:	9a 81       	ldd	r25, Y+2	; 0x02
    32dc:	ab 81       	ldd	r26, Y+3	; 0x03
    32de:	bc 81       	ldd	r27, Y+4	; 0x04
    32e0:	82 17       	cp	r24, r18
    32e2:	93 07       	cpc	r25, r19
    32e4:	a4 07       	cpc	r26, r20
    32e6:	b5 07       	cpc	r27, r21
    32e8:	08 f0       	brcs	.+2      	; 0x32ec <SYS_TimerTaskHandler+0x120>
    32ea:	aa cf       	rjmp	.-172    	; 0x3240 <SYS_TimerTaskHandler+0x74>
		}

		timer->handler(timer);
	}

	if (timers) {
    32ec:	80 91 91 0e 	lds	r24, 0x0E91	; 0x800e91 <timers>
    32f0:	90 91 92 0e 	lds	r25, 0x0E92	; 0x800e92 <timers+0x1>
    32f4:	89 2b       	or	r24, r25
    32f6:	01 f1       	breq	.+64     	; 0x3338 <SYS_TimerTaskHandler+0x16c>
		timers->timeout -= elapsed;
    32f8:	60 91 91 0e 	lds	r22, 0x0E91	; 0x800e91 <timers>
    32fc:	70 91 92 0e 	lds	r23, 0x0E92	; 0x800e92 <timers+0x1>
    3300:	80 91 91 0e 	lds	r24, 0x0E91	; 0x800e91 <timers>
    3304:	90 91 92 0e 	lds	r25, 0x0E92	; 0x800e92 <timers+0x1>
    3308:	fc 01       	movw	r30, r24
    330a:	22 81       	ldd	r18, Z+2	; 0x02
    330c:	33 81       	ldd	r19, Z+3	; 0x03
    330e:	44 81       	ldd	r20, Z+4	; 0x04
    3310:	55 81       	ldd	r21, Z+5	; 0x05
    3312:	89 81       	ldd	r24, Y+1	; 0x01
    3314:	9a 81       	ldd	r25, Y+2	; 0x02
    3316:	ab 81       	ldd	r26, Y+3	; 0x03
    3318:	bc 81       	ldd	r27, Y+4	; 0x04
    331a:	79 01       	movw	r14, r18
    331c:	8a 01       	movw	r16, r20
    331e:	e8 1a       	sub	r14, r24
    3320:	f9 0a       	sbc	r15, r25
    3322:	0a 0b       	sbc	r16, r26
    3324:	1b 0b       	sbc	r17, r27
    3326:	d8 01       	movw	r26, r16
    3328:	c7 01       	movw	r24, r14
    332a:	fb 01       	movw	r30, r22
    332c:	82 83       	std	Z+2, r24	; 0x02
    332e:	93 83       	std	Z+3, r25	; 0x03
    3330:	a4 83       	std	Z+4, r26	; 0x04
    3332:	b5 83       	std	Z+5, r27	; 0x05
    3334:	01 c0       	rjmp	.+2      	; 0x3338 <SYS_TimerTaskHandler+0x16c>
	uint32_t elapsed;
	uint8_t cnt;
	irqflags_t flags;

	if (0 == SysTimerIrqCount) {
		return;
    3336:	00 00       	nop
	}

	if (timers) {
		timers->timeout -= elapsed;
	}
}
    3338:	28 96       	adiw	r28, 0x08	; 8
    333a:	0f b6       	in	r0, 0x3f	; 63
    333c:	f8 94       	cli
    333e:	de bf       	out	0x3e, r29	; 62
    3340:	0f be       	out	0x3f, r0	; 63
    3342:	cd bf       	out	0x3d, r28	; 61
    3344:	df 91       	pop	r29
    3346:	cf 91       	pop	r28
    3348:	1f 91       	pop	r17
    334a:	0f 91       	pop	r16
    334c:	ff 90       	pop	r15
    334e:	ef 90       	pop	r14
    3350:	08 95       	ret

00003352 <placeTimer>:

/*************************************************************************//**
*****************************************************************************/
static void placeTimer(SYS_Timer_t *timer)
{
    3352:	ef 92       	push	r14
    3354:	ff 92       	push	r15
    3356:	0f 93       	push	r16
    3358:	1f 93       	push	r17
    335a:	cf 93       	push	r28
    335c:	df 93       	push	r29
    335e:	cd b7       	in	r28, 0x3d	; 61
    3360:	de b7       	in	r29, 0x3e	; 62
    3362:	2a 97       	sbiw	r28, 0x0a	; 10
    3364:	0f b6       	in	r0, 0x3f	; 63
    3366:	f8 94       	cli
    3368:	de bf       	out	0x3e, r29	; 62
    336a:	0f be       	out	0x3f, r0	; 63
    336c:	cd bf       	out	0x3d, r28	; 61
    336e:	9a 87       	std	Y+10, r25	; 0x0a
    3370:	89 87       	std	Y+9, r24	; 0x09
	if (timers) {
    3372:	80 91 91 0e 	lds	r24, 0x0E91	; 0x800e91 <timers>
    3376:	90 91 92 0e 	lds	r25, 0x0E92	; 0x800e92 <timers+0x1>
    337a:	89 2b       	or	r24, r25
    337c:	09 f4       	brne	.+2      	; 0x3380 <placeTimer+0x2e>
    337e:	97 c0       	rjmp	.+302    	; 0x34ae <placeTimer+0x15c>
		SYS_Timer_t *prev = NULL;
    3380:	1a 82       	std	Y+2, r1	; 0x02
    3382:	19 82       	std	Y+1, r1	; 0x01
		uint32_t timeout = timer->interval;
    3384:	89 85       	ldd	r24, Y+9	; 0x09
    3386:	9a 85       	ldd	r25, Y+10	; 0x0a
    3388:	fc 01       	movw	r30, r24
    338a:	86 81       	ldd	r24, Z+6	; 0x06
    338c:	97 81       	ldd	r25, Z+7	; 0x07
    338e:	a0 85       	ldd	r26, Z+8	; 0x08
    3390:	b1 85       	ldd	r27, Z+9	; 0x09
    3392:	8b 83       	std	Y+3, r24	; 0x03
    3394:	9c 83       	std	Y+4, r25	; 0x04
    3396:	ad 83       	std	Y+5, r26	; 0x05
    3398:	be 83       	std	Y+6, r27	; 0x06

		for (SYS_Timer_t *t = timers; t; t = t->next) {
    339a:	80 91 91 0e 	lds	r24, 0x0E91	; 0x800e91 <timers>
    339e:	90 91 92 0e 	lds	r25, 0x0E92	; 0x800e92 <timers+0x1>
    33a2:	98 87       	std	Y+8, r25	; 0x08
    33a4:	8f 83       	std	Y+7, r24	; 0x07
    33a6:	4d c0       	rjmp	.+154    	; 0x3442 <placeTimer+0xf0>
			if (timeout < t->timeout) {
    33a8:	8f 81       	ldd	r24, Y+7	; 0x07
    33aa:	98 85       	ldd	r25, Y+8	; 0x08
    33ac:	fc 01       	movw	r30, r24
    33ae:	22 81       	ldd	r18, Z+2	; 0x02
    33b0:	33 81       	ldd	r19, Z+3	; 0x03
    33b2:	44 81       	ldd	r20, Z+4	; 0x04
    33b4:	55 81       	ldd	r21, Z+5	; 0x05
    33b6:	8b 81       	ldd	r24, Y+3	; 0x03
    33b8:	9c 81       	ldd	r25, Y+4	; 0x04
    33ba:	ad 81       	ldd	r26, Y+5	; 0x05
    33bc:	be 81       	ldd	r27, Y+6	; 0x06
    33be:	82 17       	cp	r24, r18
    33c0:	93 07       	cpc	r25, r19
    33c2:	a4 07       	cpc	r26, r20
    33c4:	b5 07       	cpc	r27, r21
    33c6:	d8 f4       	brcc	.+54     	; 0x33fe <placeTimer+0xac>
				t->timeout -= timeout;
    33c8:	8f 81       	ldd	r24, Y+7	; 0x07
    33ca:	98 85       	ldd	r25, Y+8	; 0x08
    33cc:	fc 01       	movw	r30, r24
    33ce:	22 81       	ldd	r18, Z+2	; 0x02
    33d0:	33 81       	ldd	r19, Z+3	; 0x03
    33d2:	44 81       	ldd	r20, Z+4	; 0x04
    33d4:	55 81       	ldd	r21, Z+5	; 0x05
    33d6:	8b 81       	ldd	r24, Y+3	; 0x03
    33d8:	9c 81       	ldd	r25, Y+4	; 0x04
    33da:	ad 81       	ldd	r26, Y+5	; 0x05
    33dc:	be 81       	ldd	r27, Y+6	; 0x06
    33de:	79 01       	movw	r14, r18
    33e0:	8a 01       	movw	r16, r20
    33e2:	e8 1a       	sub	r14, r24
    33e4:	f9 0a       	sbc	r15, r25
    33e6:	0a 0b       	sbc	r16, r26
    33e8:	1b 0b       	sbc	r17, r27
    33ea:	d8 01       	movw	r26, r16
    33ec:	c7 01       	movw	r24, r14
    33ee:	2f 81       	ldd	r18, Y+7	; 0x07
    33f0:	38 85       	ldd	r19, Y+8	; 0x08
    33f2:	f9 01       	movw	r30, r18
    33f4:	82 83       	std	Z+2, r24	; 0x02
    33f6:	93 83       	std	Z+3, r25	; 0x03
    33f8:	a4 83       	std	Z+4, r26	; 0x04
    33fa:	b5 83       	std	Z+5, r27	; 0x05
				break;
    33fc:	27 c0       	rjmp	.+78     	; 0x344c <placeTimer+0xfa>
			} else {
				timeout -= t->timeout;
    33fe:	8f 81       	ldd	r24, Y+7	; 0x07
    3400:	98 85       	ldd	r25, Y+8	; 0x08
    3402:	fc 01       	movw	r30, r24
    3404:	82 81       	ldd	r24, Z+2	; 0x02
    3406:	93 81       	ldd	r25, Z+3	; 0x03
    3408:	a4 81       	ldd	r26, Z+4	; 0x04
    340a:	b5 81       	ldd	r27, Z+5	; 0x05
    340c:	2b 81       	ldd	r18, Y+3	; 0x03
    340e:	3c 81       	ldd	r19, Y+4	; 0x04
    3410:	4d 81       	ldd	r20, Y+5	; 0x05
    3412:	5e 81       	ldd	r21, Y+6	; 0x06
    3414:	79 01       	movw	r14, r18
    3416:	8a 01       	movw	r16, r20
    3418:	e8 1a       	sub	r14, r24
    341a:	f9 0a       	sbc	r15, r25
    341c:	0a 0b       	sbc	r16, r26
    341e:	1b 0b       	sbc	r17, r27
    3420:	d8 01       	movw	r26, r16
    3422:	c7 01       	movw	r24, r14
    3424:	8b 83       	std	Y+3, r24	; 0x03
    3426:	9c 83       	std	Y+4, r25	; 0x04
    3428:	ad 83       	std	Y+5, r26	; 0x05
    342a:	be 83       	std	Y+6, r27	; 0x06
			}

			prev = t;
    342c:	8f 81       	ldd	r24, Y+7	; 0x07
    342e:	98 85       	ldd	r25, Y+8	; 0x08
    3430:	9a 83       	std	Y+2, r25	; 0x02
    3432:	89 83       	std	Y+1, r24	; 0x01
{
	if (timers) {
		SYS_Timer_t *prev = NULL;
		uint32_t timeout = timer->interval;

		for (SYS_Timer_t *t = timers; t; t = t->next) {
    3434:	8f 81       	ldd	r24, Y+7	; 0x07
    3436:	98 85       	ldd	r25, Y+8	; 0x08
    3438:	fc 01       	movw	r30, r24
    343a:	80 81       	ld	r24, Z
    343c:	91 81       	ldd	r25, Z+1	; 0x01
    343e:	98 87       	std	Y+8, r25	; 0x08
    3440:	8f 83       	std	Y+7, r24	; 0x07
    3442:	8f 81       	ldd	r24, Y+7	; 0x07
    3444:	98 85       	ldd	r25, Y+8	; 0x08
    3446:	89 2b       	or	r24, r25
    3448:	09 f0       	breq	.+2      	; 0x344c <placeTimer+0xfa>
    344a:	ae cf       	rjmp	.-164    	; 0x33a8 <placeTimer+0x56>
			}

			prev = t;
		}

		timer->timeout = timeout;
    344c:	29 85       	ldd	r18, Y+9	; 0x09
    344e:	3a 85       	ldd	r19, Y+10	; 0x0a
    3450:	8b 81       	ldd	r24, Y+3	; 0x03
    3452:	9c 81       	ldd	r25, Y+4	; 0x04
    3454:	ad 81       	ldd	r26, Y+5	; 0x05
    3456:	be 81       	ldd	r27, Y+6	; 0x06
    3458:	f9 01       	movw	r30, r18
    345a:	82 83       	std	Z+2, r24	; 0x02
    345c:	93 83       	std	Z+3, r25	; 0x03
    345e:	a4 83       	std	Z+4, r26	; 0x04
    3460:	b5 83       	std	Z+5, r27	; 0x05

		if (prev) {
    3462:	89 81       	ldd	r24, Y+1	; 0x01
    3464:	9a 81       	ldd	r25, Y+2	; 0x02
    3466:	89 2b       	or	r24, r25
    3468:	91 f0       	breq	.+36     	; 0x348e <placeTimer+0x13c>
			timer->next = prev->next;
    346a:	89 81       	ldd	r24, Y+1	; 0x01
    346c:	9a 81       	ldd	r25, Y+2	; 0x02
    346e:	fc 01       	movw	r30, r24
    3470:	20 81       	ld	r18, Z
    3472:	31 81       	ldd	r19, Z+1	; 0x01
    3474:	89 85       	ldd	r24, Y+9	; 0x09
    3476:	9a 85       	ldd	r25, Y+10	; 0x0a
    3478:	fc 01       	movw	r30, r24
    347a:	31 83       	std	Z+1, r19	; 0x01
    347c:	20 83       	st	Z, r18
			prev->next = timer;
    347e:	89 81       	ldd	r24, Y+1	; 0x01
    3480:	9a 81       	ldd	r25, Y+2	; 0x02
    3482:	29 85       	ldd	r18, Y+9	; 0x09
    3484:	3a 85       	ldd	r19, Y+10	; 0x0a
    3486:	fc 01       	movw	r30, r24
    3488:	31 83       	std	Z+1, r19	; 0x01
    348a:	20 83       	st	Z, r18
	} else {
		timer->next = NULL;
		timer->timeout = timer->interval;
		timers = timer;
	}
}
    348c:	29 c0       	rjmp	.+82     	; 0x34e0 <placeTimer+0x18e>

		if (prev) {
			timer->next = prev->next;
			prev->next = timer;
		} else {
			timer->next = timers;
    348e:	20 91 91 0e 	lds	r18, 0x0E91	; 0x800e91 <timers>
    3492:	30 91 92 0e 	lds	r19, 0x0E92	; 0x800e92 <timers+0x1>
    3496:	89 85       	ldd	r24, Y+9	; 0x09
    3498:	9a 85       	ldd	r25, Y+10	; 0x0a
    349a:	fc 01       	movw	r30, r24
    349c:	31 83       	std	Z+1, r19	; 0x01
    349e:	20 83       	st	Z, r18
			timers = timer;
    34a0:	89 85       	ldd	r24, Y+9	; 0x09
    34a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    34a4:	90 93 92 0e 	sts	0x0E92, r25	; 0x800e92 <timers+0x1>
    34a8:	80 93 91 0e 	sts	0x0E91, r24	; 0x800e91 <timers>
	} else {
		timer->next = NULL;
		timer->timeout = timer->interval;
		timers = timer;
	}
}
    34ac:	19 c0       	rjmp	.+50     	; 0x34e0 <placeTimer+0x18e>
		} else {
			timer->next = timers;
			timers = timer;
		}
	} else {
		timer->next = NULL;
    34ae:	89 85       	ldd	r24, Y+9	; 0x09
    34b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    34b2:	fc 01       	movw	r30, r24
    34b4:	11 82       	std	Z+1, r1	; 0x01
    34b6:	10 82       	st	Z, r1
		timer->timeout = timer->interval;
    34b8:	89 85       	ldd	r24, Y+9	; 0x09
    34ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    34bc:	fc 01       	movw	r30, r24
    34be:	86 81       	ldd	r24, Z+6	; 0x06
    34c0:	97 81       	ldd	r25, Z+7	; 0x07
    34c2:	a0 85       	ldd	r26, Z+8	; 0x08
    34c4:	b1 85       	ldd	r27, Z+9	; 0x09
    34c6:	29 85       	ldd	r18, Y+9	; 0x09
    34c8:	3a 85       	ldd	r19, Y+10	; 0x0a
    34ca:	f9 01       	movw	r30, r18
    34cc:	82 83       	std	Z+2, r24	; 0x02
    34ce:	93 83       	std	Z+3, r25	; 0x03
    34d0:	a4 83       	std	Z+4, r26	; 0x04
    34d2:	b5 83       	std	Z+5, r27	; 0x05
		timers = timer;
    34d4:	89 85       	ldd	r24, Y+9	; 0x09
    34d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    34d8:	90 93 92 0e 	sts	0x0E92, r25	; 0x800e92 <timers+0x1>
    34dc:	80 93 91 0e 	sts	0x0E91, r24	; 0x800e91 <timers>
	}
}
    34e0:	00 00       	nop
    34e2:	2a 96       	adiw	r28, 0x0a	; 10
    34e4:	0f b6       	in	r0, 0x3f	; 63
    34e6:	f8 94       	cli
    34e8:	de bf       	out	0x3e, r29	; 62
    34ea:	0f be       	out	0x3f, r0	; 63
    34ec:	cd bf       	out	0x3d, r28	; 61
    34ee:	df 91       	pop	r29
    34f0:	cf 91       	pop	r28
    34f2:	1f 91       	pop	r17
    34f4:	0f 91       	pop	r16
    34f6:	ff 90       	pop	r15
    34f8:	ef 90       	pop	r14
    34fa:	08 95       	ret

000034fc <SYS_HwExpiry_Cb>:

/*****************************************************************************
*****************************************************************************/
void SYS_HwExpiry_Cb(void)
{
    34fc:	cf 93       	push	r28
    34fe:	df 93       	push	r29
    3500:	cd b7       	in	r28, 0x3d	; 61
    3502:	de b7       	in	r29, 0x3e	; 62
	SysTimerIrqCount++;
    3504:	80 91 b2 10 	lds	r24, 0x10B2	; 0x8010b2 <SysTimerIrqCount>
    3508:	8f 5f       	subi	r24, 0xFF	; 255
    350a:	80 93 b2 10 	sts	0x10B2, r24	; 0x8010b2 <SysTimerIrqCount>
	common_tc_delay(SYS_TIMER_INTERVAL * MS);
    350e:	80 e1       	ldi	r24, 0x10	; 16
    3510:	97 e2       	ldi	r25, 0x27	; 39
    3512:	0e 94 9b 3f 	call	0x7f36	; 0x7f36 <common_tc_delay>
}
    3516:	00 00       	nop
    3518:	df 91       	pop	r29
    351a:	cf 91       	pop	r28
    351c:	08 95       	ret

0000351e <cpu_irq_save>:
#endif

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
    351e:	cf 93       	push	r28
    3520:	df 93       	push	r29
    3522:	1f 92       	push	r1
    3524:	cd b7       	in	r28, 0x3d	; 61
    3526:	de b7       	in	r29, 0x3e	; 62
	irqflags_t flags = SREG;
    3528:	8f e5       	ldi	r24, 0x5F	; 95
    352a:	90 e0       	ldi	r25, 0x00	; 0
    352c:	fc 01       	movw	r30, r24
    352e:	80 81       	ld	r24, Z
    3530:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    3532:	f8 94       	cli
	return flags;
    3534:	89 81       	ldd	r24, Y+1	; 0x01
}
    3536:	0f 90       	pop	r0
    3538:	df 91       	pop	r29
    353a:	cf 91       	pop	r28
    353c:	08 95       	ret

0000353e <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
    353e:	cf 93       	push	r28
    3540:	df 93       	push	r29
    3542:	1f 92       	push	r1
    3544:	cd b7       	in	r28, 0x3d	; 61
    3546:	de b7       	in	r29, 0x3e	; 62
    3548:	89 83       	std	Y+1, r24	; 0x01
	barrier();
	SREG = flags;
    354a:	8f e5       	ldi	r24, 0x5F	; 95
    354c:	90 e0       	ldi	r25, 0x00	; 0
    354e:	29 81       	ldd	r18, Y+1	; 0x01
    3550:	fc 01       	movw	r30, r24
    3552:	20 83       	st	Z, r18
}
    3554:	00 00       	nop
    3556:	0f 90       	pop	r0
    3558:	df 91       	pop	r29
    355a:	cf 91       	pop	r28
    355c:	08 95       	ret

0000355e <sysclk_get_main_hz>:
 * configured source clock using fuses.
 * \eg. #define SYSCLK_SOURCE SYSCLK_SRC_RC16MHZ to use internal RC
 * oscillator for clock source.
 */
static inline uint32_t sysclk_get_main_hz(void)
{
    355e:	cf 93       	push	r28
    3560:	df 93       	push	r29
    3562:	cd b7       	in	r28, 0x3d	; 61
    3564:	de b7       	in	r29, 0x3e	; 62
	case SYSCLK_SRC_RC128KHZ:
		return 128000UL;

#if MEGA_RF
	case SYSCLK_SRC_TRS16MHZ:
		return 16000000UL;
    3566:	80 e0       	ldi	r24, 0x00	; 0
    3568:	94 e2       	ldi	r25, 0x24	; 36
    356a:	a4 ef       	ldi	r26, 0xF4	; 244
    356c:	b0 e0       	ldi	r27, 0x00	; 0
#endif
	default:

		return 1000000UL;
	}
}
    356e:	bc 01       	movw	r22, r24
    3570:	cd 01       	movw	r24, r26
    3572:	df 91       	pop	r29
    3574:	cf 91       	pop	r28
    3576:	08 95       	ret

00003578 <sysclk_get_source_clock_hz>:
 * is set.
 *
 * \return Frequency of the system clock, in Hz.
 */
static inline uint32_t sysclk_get_source_clock_hz(void)
{
    3578:	cf 93       	push	r28
    357a:	df 93       	push	r29
    357c:	cd b7       	in	r28, 0x3d	; 61
    357e:	de b7       	in	r29, 0x3e	; 62
	case SYSCLK_PSDIV_1: /* Fall through */
		if (SYSCLK_SOURCE == SYSCLK_SRC_RC16MHZ ||
				SYSCLK_SOURCE == SYSCLK_SRC_RC128KHZ) {
			return sysclk_get_main_hz() / 2;
		} else {
			return sysclk_get_main_hz();
    3580:	0e 94 af 1a 	call	0x355e	; 0x355e <sysclk_get_main_hz>
    3584:	dc 01       	movw	r26, r24
    3586:	cb 01       	movw	r24, r22

	default:
		/*Invalide case*/
		return 0;
	}
}
    3588:	bc 01       	movw	r22, r24
    358a:	cd 01       	movw	r24, r26
    358c:	df 91       	pop	r29
    358e:	cf 91       	pop	r28
    3590:	08 95       	ret

00003592 <sysclk_get_peripheral_bus_hz>:
 * \param module Pointer to the module's base address.
 *
 * \return Frequency of the bus attached to the specified peripheral, in Hz.
 */
static inline uint32_t sysclk_get_peripheral_bus_hz(const volatile void *module)
{
    3592:	cf 93       	push	r28
    3594:	df 93       	push	r29
    3596:	00 d0       	rcall	.+0      	; 0x3598 <sysclk_get_peripheral_bus_hz+0x6>
    3598:	cd b7       	in	r28, 0x3d	; 61
    359a:	de b7       	in	r29, 0x3e	; 62
    359c:	9a 83       	std	Y+2, r25	; 0x02
    359e:	89 83       	std	Y+1, r24	; 0x01
	if (module == NULL) {
    35a0:	89 81       	ldd	r24, Y+1	; 0x01
    35a2:	9a 81       	ldd	r25, Y+2	; 0x02
    35a4:	89 2b       	or	r24, r25
    35a6:	21 f4       	brne	.+8      	; 0x35b0 <sysclk_get_peripheral_bus_hz+0x1e>
		Assert(false);
		return 0;
    35a8:	80 e0       	ldi	r24, 0x00	; 0
    35aa:	90 e0       	ldi	r25, 0x00	; 0
    35ac:	dc 01       	movw	r26, r24
    35ae:	a3 c0       	rjmp	.+326    	; 0x36f6 <sysclk_get_peripheral_bus_hz+0x164>
	} else if (module == &ADC) {
    35b0:	89 81       	ldd	r24, Y+1	; 0x01
    35b2:	9a 81       	ldd	r25, Y+2	; 0x02
    35b4:	88 37       	cpi	r24, 0x78	; 120
    35b6:	91 05       	cpc	r25, r1
    35b8:	29 f4       	brne	.+10     	; 0x35c4 <sysclk_get_peripheral_bus_hz+0x32>
		return sysclk_get_source_clock_hz();
    35ba:	0e 94 bc 1a 	call	0x3578	; 0x3578 <sysclk_get_source_clock_hz>
    35be:	dc 01       	movw	r26, r24
    35c0:	cb 01       	movw	r24, r22
    35c2:	99 c0       	rjmp	.+306    	; 0x36f6 <sysclk_get_peripheral_bus_hz+0x164>
	}

#if !MEGA_UNSPECIFIED
	else if (module == &UCSR0A) {
    35c4:	89 81       	ldd	r24, Y+1	; 0x01
    35c6:	9a 81       	ldd	r25, Y+2	; 0x02
    35c8:	80 3c       	cpi	r24, 0xC0	; 192
    35ca:	91 05       	cpc	r25, r1
    35cc:	29 f4       	brne	.+10     	; 0x35d8 <sysclk_get_peripheral_bus_hz+0x46>
		return sysclk_get_source_clock_hz();
    35ce:	0e 94 bc 1a 	call	0x3578	; 0x3578 <sysclk_get_source_clock_hz>
    35d2:	dc 01       	movw	r26, r24
    35d4:	cb 01       	movw	r24, r22
    35d6:	8f c0       	rjmp	.+286    	; 0x36f6 <sysclk_get_peripheral_bus_hz+0x164>
	}
#endif

#if MEGA_RF
	else if (module == &SPCR) {
    35d8:	89 81       	ldd	r24, Y+1	; 0x01
    35da:	9a 81       	ldd	r25, Y+2	; 0x02
    35dc:	8c 34       	cpi	r24, 0x4C	; 76
    35de:	91 05       	cpc	r25, r1
    35e0:	29 f4       	brne	.+10     	; 0x35ec <sysclk_get_peripheral_bus_hz+0x5a>
		return sysclk_get_source_clock_hz();
    35e2:	0e 94 bc 1a 	call	0x3578	; 0x3578 <sysclk_get_source_clock_hz>
    35e6:	dc 01       	movw	r26, r24
    35e8:	cb 01       	movw	r24, r22
    35ea:	85 c0       	rjmp	.+266    	; 0x36f6 <sysclk_get_peripheral_bus_hz+0x164>
	}
#endif
	else if (module == &TCCR1A) {
    35ec:	89 81       	ldd	r24, Y+1	; 0x01
    35ee:	9a 81       	ldd	r25, Y+2	; 0x02
    35f0:	80 38       	cpi	r24, 0x80	; 128
    35f2:	91 05       	cpc	r25, r1
    35f4:	29 f4       	brne	.+10     	; 0x3600 <sysclk_get_peripheral_bus_hz+0x6e>
		return sysclk_get_source_clock_hz();
    35f6:	0e 94 bc 1a 	call	0x3578	; 0x3578 <sysclk_get_source_clock_hz>
    35fa:	dc 01       	movw	r26, r24
    35fc:	cb 01       	movw	r24, r22
    35fe:	7b c0       	rjmp	.+246    	; 0x36f6 <sysclk_get_peripheral_bus_hz+0x164>
	}
#if !MEGA_UNSPECIFIED
	else if (module == &TCCR0A) {
    3600:	89 81       	ldd	r24, Y+1	; 0x01
    3602:	9a 81       	ldd	r25, Y+2	; 0x02
    3604:	84 34       	cpi	r24, 0x44	; 68
    3606:	91 05       	cpc	r25, r1
    3608:	29 f4       	brne	.+10     	; 0x3614 <sysclk_get_peripheral_bus_hz+0x82>
		return sysclk_get_source_clock_hz();
    360a:	0e 94 bc 1a 	call	0x3578	; 0x3578 <sysclk_get_source_clock_hz>
    360e:	dc 01       	movw	r26, r24
    3610:	cb 01       	movw	r24, r22
    3612:	71 c0       	rjmp	.+226    	; 0x36f6 <sysclk_get_peripheral_bus_hz+0x164>
	} else if (module == &TCCR2A) {
    3614:	89 81       	ldd	r24, Y+1	; 0x01
    3616:	9a 81       	ldd	r25, Y+2	; 0x02
    3618:	80 3b       	cpi	r24, 0xB0	; 176
    361a:	91 05       	cpc	r25, r1
    361c:	29 f4       	brne	.+10     	; 0x3628 <sysclk_get_peripheral_bus_hz+0x96>
		return sysclk_get_source_clock_hz();
    361e:	0e 94 bc 1a 	call	0x3578	; 0x3578 <sysclk_get_source_clock_hz>
    3622:	dc 01       	movw	r26, r24
    3624:	cb 01       	movw	r24, r22
    3626:	67 c0       	rjmp	.+206    	; 0x36f6 <sysclk_get_peripheral_bus_hz+0x164>
	} else if (module == &UCSR0A) {
    3628:	89 81       	ldd	r24, Y+1	; 0x01
    362a:	9a 81       	ldd	r25, Y+2	; 0x02
    362c:	80 3c       	cpi	r24, 0xC0	; 192
    362e:	91 05       	cpc	r25, r1
    3630:	29 f4       	brne	.+10     	; 0x363c <sysclk_get_peripheral_bus_hz+0xaa>
		return sysclk_get_source_clock_hz();
    3632:	0e 94 bc 1a 	call	0x3578	; 0x3578 <sysclk_get_source_clock_hz>
    3636:	dc 01       	movw	r26, r24
    3638:	cb 01       	movw	r24, r22
    363a:	5d c0       	rjmp	.+186    	; 0x36f6 <sysclk_get_peripheral_bus_hz+0x164>
	} else if (module == &TWBR) {
    363c:	89 81       	ldd	r24, Y+1	; 0x01
    363e:	9a 81       	ldd	r25, Y+2	; 0x02
    3640:	88 3b       	cpi	r24, 0xB8	; 184
    3642:	91 05       	cpc	r25, r1
    3644:	29 f4       	brne	.+10     	; 0x3650 <sysclk_get_peripheral_bus_hz+0xbe>
		return sysclk_get_source_clock_hz();
    3646:	0e 94 bc 1a 	call	0x3578	; 0x3578 <sysclk_get_source_clock_hz>
    364a:	dc 01       	movw	r26, r24
    364c:	cb 01       	movw	r24, r22
    364e:	53 c0       	rjmp	.+166    	; 0x36f6 <sysclk_get_peripheral_bus_hz+0x164>
	}
#endif
#if MEGA_RF
	else if (module == &TCCR3A) {
    3650:	89 81       	ldd	r24, Y+1	; 0x01
    3652:	9a 81       	ldd	r25, Y+2	; 0x02
    3654:	80 39       	cpi	r24, 0x90	; 144
    3656:	91 05       	cpc	r25, r1
    3658:	29 f4       	brne	.+10     	; 0x3664 <sysclk_get_peripheral_bus_hz+0xd2>
		return sysclk_get_source_clock_hz();
    365a:	0e 94 bc 1a 	call	0x3578	; 0x3578 <sysclk_get_source_clock_hz>
    365e:	dc 01       	movw	r26, r24
    3660:	cb 01       	movw	r24, r22
    3662:	49 c0       	rjmp	.+146    	; 0x36f6 <sysclk_get_peripheral_bus_hz+0x164>
	} else if (module == &TCCR4A) {
    3664:	89 81       	ldd	r24, Y+1	; 0x01
    3666:	9a 81       	ldd	r25, Y+2	; 0x02
    3668:	80 3a       	cpi	r24, 0xA0	; 160
    366a:	91 05       	cpc	r25, r1
    366c:	29 f4       	brne	.+10     	; 0x3678 <sysclk_get_peripheral_bus_hz+0xe6>
		return sysclk_get_source_clock_hz();
    366e:	0e 94 bc 1a 	call	0x3578	; 0x3578 <sysclk_get_source_clock_hz>
    3672:	dc 01       	movw	r26, r24
    3674:	cb 01       	movw	r24, r22
    3676:	3f c0       	rjmp	.+126    	; 0x36f6 <sysclk_get_peripheral_bus_hz+0x164>
	} else if (module == &TCCR5A) {
    3678:	89 81       	ldd	r24, Y+1	; 0x01
    367a:	9a 81       	ldd	r25, Y+2	; 0x02
    367c:	80 32       	cpi	r24, 0x20	; 32
    367e:	91 40       	sbci	r25, 0x01	; 1
    3680:	29 f4       	brne	.+10     	; 0x368c <sysclk_get_peripheral_bus_hz+0xfa>
		return sysclk_get_source_clock_hz();
    3682:	0e 94 bc 1a 	call	0x3578	; 0x3578 <sysclk_get_source_clock_hz>
    3686:	dc 01       	movw	r26, r24
    3688:	cb 01       	movw	r24, r22
    368a:	35 c0       	rjmp	.+106    	; 0x36f6 <sysclk_get_peripheral_bus_hz+0x164>
	} else if (module == &TRX_CTRL_0) {
    368c:	89 81       	ldd	r24, Y+1	; 0x01
    368e:	9a 81       	ldd	r25, Y+2	; 0x02
    3690:	83 34       	cpi	r24, 0x43	; 67
    3692:	91 40       	sbci	r25, 0x01	; 1
    3694:	29 f4       	brne	.+10     	; 0x36a0 <sysclk_get_peripheral_bus_hz+0x10e>
		return sysclk_get_source_clock_hz();
    3696:	0e 94 bc 1a 	call	0x3578	; 0x3578 <sysclk_get_source_clock_hz>
    369a:	dc 01       	movw	r26, r24
    369c:	cb 01       	movw	r24, r22
    369e:	2b c0       	rjmp	.+86     	; 0x36f6 <sysclk_get_peripheral_bus_hz+0x164>
	} else if (module == &DRTRAM0) {
    36a0:	89 81       	ldd	r24, Y+1	; 0x01
    36a2:	9a 81       	ldd	r25, Y+2	; 0x02
    36a4:	85 33       	cpi	r24, 0x35	; 53
    36a6:	91 40       	sbci	r25, 0x01	; 1
    36a8:	29 f4       	brne	.+10     	; 0x36b4 <sysclk_get_peripheral_bus_hz+0x122>
		return sysclk_get_source_clock_hz();
    36aa:	0e 94 bc 1a 	call	0x3578	; 0x3578 <sysclk_get_source_clock_hz>
    36ae:	dc 01       	movw	r26, r24
    36b0:	cb 01       	movw	r24, r22
    36b2:	21 c0       	rjmp	.+66     	; 0x36f6 <sysclk_get_peripheral_bus_hz+0x164>
	} else if (module == &DRTRAM1) {
    36b4:	89 81       	ldd	r24, Y+1	; 0x01
    36b6:	9a 81       	ldd	r25, Y+2	; 0x02
    36b8:	84 33       	cpi	r24, 0x34	; 52
    36ba:	91 40       	sbci	r25, 0x01	; 1
    36bc:	29 f4       	brne	.+10     	; 0x36c8 <sysclk_get_peripheral_bus_hz+0x136>
		return sysclk_get_source_clock_hz();
    36be:	0e 94 bc 1a 	call	0x3578	; 0x3578 <sysclk_get_source_clock_hz>
    36c2:	dc 01       	movw	r26, r24
    36c4:	cb 01       	movw	r24, r22
    36c6:	17 c0       	rjmp	.+46     	; 0x36f6 <sysclk_get_peripheral_bus_hz+0x164>
	} else if (module == &DRTRAM2) {
    36c8:	89 81       	ldd	r24, Y+1	; 0x01
    36ca:	9a 81       	ldd	r25, Y+2	; 0x02
    36cc:	83 33       	cpi	r24, 0x33	; 51
    36ce:	91 40       	sbci	r25, 0x01	; 1
    36d0:	29 f4       	brne	.+10     	; 0x36dc <sysclk_get_peripheral_bus_hz+0x14a>
		return sysclk_get_source_clock_hz();
    36d2:	0e 94 bc 1a 	call	0x3578	; 0x3578 <sysclk_get_source_clock_hz>
    36d6:	dc 01       	movw	r26, r24
    36d8:	cb 01       	movw	r24, r22
    36da:	0d c0       	rjmp	.+26     	; 0x36f6 <sysclk_get_peripheral_bus_hz+0x164>
	} else if (module == &DRTRAM3) {
    36dc:	89 81       	ldd	r24, Y+1	; 0x01
    36de:	9a 81       	ldd	r25, Y+2	; 0x02
    36e0:	82 33       	cpi	r24, 0x32	; 50
    36e2:	91 40       	sbci	r25, 0x01	; 1
    36e4:	29 f4       	brne	.+10     	; 0x36f0 <sysclk_get_peripheral_bus_hz+0x15e>
		return sysclk_get_source_clock_hz();
    36e6:	0e 94 bc 1a 	call	0x3578	; 0x3578 <sysclk_get_source_clock_hz>
    36ea:	dc 01       	movw	r26, r24
    36ec:	cb 01       	movw	r24, r22
    36ee:	03 c0       	rjmp	.+6      	; 0x36f6 <sysclk_get_peripheral_bus_hz+0x164>
	}
#endif
	else {
		Assert(false);
		return 0;
    36f0:	80 e0       	ldi	r24, 0x00	; 0
    36f2:	90 e0       	ldi	r25, 0x00	; 0
    36f4:	dc 01       	movw	r26, r24
	}
}
    36f6:	bc 01       	movw	r22, r24
    36f8:	cd 01       	movw	r24, r26
    36fa:	0f 90       	pop	r0
    36fc:	0f 90       	pop	r0
    36fe:	df 91       	pop	r29
    3700:	cf 91       	pop	r28
    3702:	08 95       	ret

00003704 <tc_write_clock_source>:
 * @param tc Timer Address
 * @param TC_CLKSEL_enum Select a source from enum type
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
    3704:	cf 93       	push	r28
    3706:	df 93       	push	r29
    3708:	00 d0       	rcall	.+0      	; 0x370a <tc_write_clock_source+0x6>
    370a:	1f 92       	push	r1
    370c:	cd b7       	in	r28, 0x3d	; 61
    370e:	de b7       	in	r29, 0x3e	; 62
    3710:	9a 83       	std	Y+2, r25	; 0x02
    3712:	89 83       	std	Y+1, r24	; 0x01
    3714:	6b 83       	std	Y+3, r22	; 0x03
	if ((uintptr_t)tc == (uintptr_t)&TCCR1A) {
    3716:	89 81       	ldd	r24, Y+1	; 0x01
    3718:	9a 81       	ldd	r25, Y+2	; 0x02
    371a:	80 38       	cpi	r24, 0x80	; 128
    371c:	91 05       	cpc	r25, r1
    371e:	59 f4       	brne	.+22     	; 0x3736 <tc_write_clock_source+0x32>
		TCCR1B |=  TC_CLKSEL_enum;
    3720:	81 e8       	ldi	r24, 0x81	; 129
    3722:	90 e0       	ldi	r25, 0x00	; 0
    3724:	21 e8       	ldi	r18, 0x81	; 129
    3726:	30 e0       	ldi	r19, 0x00	; 0
    3728:	f9 01       	movw	r30, r18
    372a:	30 81       	ld	r19, Z
    372c:	2b 81       	ldd	r18, Y+3	; 0x03
    372e:	23 2b       	or	r18, r19
    3730:	fc 01       	movw	r30, r24
    3732:	20 83       	st	Z, r18
	} else if ((uintptr_t)tc == (uintptr_t)&TCCR4A) {
		TCCR4B |=  TC_CLKSEL_enum;
	} else if ((uintptr_t)tc == (uintptr_t)&TCCR5A) {
		TCCR5B |=  TC_CLKSEL_enum;
	} else {}
}
    3734:	2f c0       	rjmp	.+94     	; 0x3794 <tc_write_clock_source+0x90>
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	if ((uintptr_t)tc == (uintptr_t)&TCCR1A) {
		TCCR1B |=  TC_CLKSEL_enum;
	} else if ((uintptr_t)tc == (uintptr_t)&TCCR3A) {
    3736:	89 81       	ldd	r24, Y+1	; 0x01
    3738:	9a 81       	ldd	r25, Y+2	; 0x02
    373a:	80 39       	cpi	r24, 0x90	; 144
    373c:	91 05       	cpc	r25, r1
    373e:	59 f4       	brne	.+22     	; 0x3756 <tc_write_clock_source+0x52>
		TCCR3B |=  TC_CLKSEL_enum;
    3740:	81 e9       	ldi	r24, 0x91	; 145
    3742:	90 e0       	ldi	r25, 0x00	; 0
    3744:	21 e9       	ldi	r18, 0x91	; 145
    3746:	30 e0       	ldi	r19, 0x00	; 0
    3748:	f9 01       	movw	r30, r18
    374a:	30 81       	ld	r19, Z
    374c:	2b 81       	ldd	r18, Y+3	; 0x03
    374e:	23 2b       	or	r18, r19
    3750:	fc 01       	movw	r30, r24
    3752:	20 83       	st	Z, r18
	} else if ((uintptr_t)tc == (uintptr_t)&TCCR4A) {
		TCCR4B |=  TC_CLKSEL_enum;
	} else if ((uintptr_t)tc == (uintptr_t)&TCCR5A) {
		TCCR5B |=  TC_CLKSEL_enum;
	} else {}
}
    3754:	1f c0       	rjmp	.+62     	; 0x3794 <tc_write_clock_source+0x90>
{
	if ((uintptr_t)tc == (uintptr_t)&TCCR1A) {
		TCCR1B |=  TC_CLKSEL_enum;
	} else if ((uintptr_t)tc == (uintptr_t)&TCCR3A) {
		TCCR3B |=  TC_CLKSEL_enum;
	} else if ((uintptr_t)tc == (uintptr_t)&TCCR4A) {
    3756:	89 81       	ldd	r24, Y+1	; 0x01
    3758:	9a 81       	ldd	r25, Y+2	; 0x02
    375a:	80 3a       	cpi	r24, 0xA0	; 160
    375c:	91 05       	cpc	r25, r1
    375e:	59 f4       	brne	.+22     	; 0x3776 <tc_write_clock_source+0x72>
		TCCR4B |=  TC_CLKSEL_enum;
    3760:	81 ea       	ldi	r24, 0xA1	; 161
    3762:	90 e0       	ldi	r25, 0x00	; 0
    3764:	21 ea       	ldi	r18, 0xA1	; 161
    3766:	30 e0       	ldi	r19, 0x00	; 0
    3768:	f9 01       	movw	r30, r18
    376a:	30 81       	ld	r19, Z
    376c:	2b 81       	ldd	r18, Y+3	; 0x03
    376e:	23 2b       	or	r18, r19
    3770:	fc 01       	movw	r30, r24
    3772:	20 83       	st	Z, r18
	} else if ((uintptr_t)tc == (uintptr_t)&TCCR5A) {
		TCCR5B |=  TC_CLKSEL_enum;
	} else {}
}
    3774:	0f c0       	rjmp	.+30     	; 0x3794 <tc_write_clock_source+0x90>
		TCCR1B |=  TC_CLKSEL_enum;
	} else if ((uintptr_t)tc == (uintptr_t)&TCCR3A) {
		TCCR3B |=  TC_CLKSEL_enum;
	} else if ((uintptr_t)tc == (uintptr_t)&TCCR4A) {
		TCCR4B |=  TC_CLKSEL_enum;
	} else if ((uintptr_t)tc == (uintptr_t)&TCCR5A) {
    3776:	89 81       	ldd	r24, Y+1	; 0x01
    3778:	9a 81       	ldd	r25, Y+2	; 0x02
    377a:	80 32       	cpi	r24, 0x20	; 32
    377c:	91 40       	sbci	r25, 0x01	; 1
    377e:	51 f4       	brne	.+20     	; 0x3794 <tc_write_clock_source+0x90>
		TCCR5B |=  TC_CLKSEL_enum;
    3780:	81 e2       	ldi	r24, 0x21	; 33
    3782:	91 e0       	ldi	r25, 0x01	; 1
    3784:	21 e2       	ldi	r18, 0x21	; 33
    3786:	31 e0       	ldi	r19, 0x01	; 1
    3788:	f9 01       	movw	r30, r18
    378a:	30 81       	ld	r19, Z
    378c:	2b 81       	ldd	r18, Y+3	; 0x03
    378e:	23 2b       	or	r18, r19
    3790:	fc 01       	movw	r30, r24
    3792:	20 83       	st	Z, r18
	} else {}
}
    3794:	00 00       	nop
    3796:	0f 90       	pop	r0
    3798:	0f 90       	pop	r0
    379a:	0f 90       	pop	r0
    379c:	df 91       	pop	r29
    379e:	cf 91       	pop	r28
    37a0:	08 95       	ret

000037a2 <tc_enable_ovf_int>:
/**
 * @brief Enable Overflow Interrupt
 * @param tc Timer Address
 */
static inline void tc_enable_ovf_int(volatile void *tc)
{
    37a2:	cf 93       	push	r28
    37a4:	df 93       	push	r29
    37a6:	00 d0       	rcall	.+0      	; 0x37a8 <tc_enable_ovf_int+0x6>
    37a8:	cd b7       	in	r28, 0x3d	; 61
    37aa:	de b7       	in	r29, 0x3e	; 62
    37ac:	9a 83       	std	Y+2, r25	; 0x02
    37ae:	89 83       	std	Y+1, r24	; 0x01
	if ((uintptr_t)tc == (uintptr_t)&TCCR1A) {
    37b0:	89 81       	ldd	r24, Y+1	; 0x01
    37b2:	9a 81       	ldd	r25, Y+2	; 0x02
    37b4:	80 38       	cpi	r24, 0x80	; 128
    37b6:	91 05       	cpc	r25, r1
    37b8:	51 f4       	brne	.+20     	; 0x37ce <tc_enable_ovf_int+0x2c>
		TIMSK1 |= (1 << TOIE1);
    37ba:	8f e6       	ldi	r24, 0x6F	; 111
    37bc:	90 e0       	ldi	r25, 0x00	; 0
    37be:	2f e6       	ldi	r18, 0x6F	; 111
    37c0:	30 e0       	ldi	r19, 0x00	; 0
    37c2:	f9 01       	movw	r30, r18
    37c4:	20 81       	ld	r18, Z
    37c6:	21 60       	ori	r18, 0x01	; 1
    37c8:	fc 01       	movw	r30, r24
    37ca:	20 83       	st	Z, r18
	} else if ((uintptr_t)tc == (uintptr_t)&TCCR4A) {
		TIMSK4 |= (1 << TOIE4);
	} else if ((uintptr_t)tc == (uintptr_t)&TCCR5A) {
		TIMSK5 |= (1 << TOIE5);
	} else {}
}
    37cc:	2c c0       	rjmp	.+88     	; 0x3826 <tc_enable_ovf_int+0x84>
 */
static inline void tc_enable_ovf_int(volatile void *tc)
{
	if ((uintptr_t)tc == (uintptr_t)&TCCR1A) {
		TIMSK1 |= (1 << TOIE1);
	} else if ((uintptr_t)tc == (uintptr_t)&TCCR3A) {
    37ce:	89 81       	ldd	r24, Y+1	; 0x01
    37d0:	9a 81       	ldd	r25, Y+2	; 0x02
    37d2:	80 39       	cpi	r24, 0x90	; 144
    37d4:	91 05       	cpc	r25, r1
    37d6:	51 f4       	brne	.+20     	; 0x37ec <tc_enable_ovf_int+0x4a>
		TIMSK3 |= (1 << TOIE3);
    37d8:	81 e7       	ldi	r24, 0x71	; 113
    37da:	90 e0       	ldi	r25, 0x00	; 0
    37dc:	21 e7       	ldi	r18, 0x71	; 113
    37de:	30 e0       	ldi	r19, 0x00	; 0
    37e0:	f9 01       	movw	r30, r18
    37e2:	20 81       	ld	r18, Z
    37e4:	21 60       	ori	r18, 0x01	; 1
    37e6:	fc 01       	movw	r30, r24
    37e8:	20 83       	st	Z, r18
	} else if ((uintptr_t)tc == (uintptr_t)&TCCR4A) {
		TIMSK4 |= (1 << TOIE4);
	} else if ((uintptr_t)tc == (uintptr_t)&TCCR5A) {
		TIMSK5 |= (1 << TOIE5);
	} else {}
}
    37ea:	1d c0       	rjmp	.+58     	; 0x3826 <tc_enable_ovf_int+0x84>
{
	if ((uintptr_t)tc == (uintptr_t)&TCCR1A) {
		TIMSK1 |= (1 << TOIE1);
	} else if ((uintptr_t)tc == (uintptr_t)&TCCR3A) {
		TIMSK3 |= (1 << TOIE3);
	} else if ((uintptr_t)tc == (uintptr_t)&TCCR4A) {
    37ec:	89 81       	ldd	r24, Y+1	; 0x01
    37ee:	9a 81       	ldd	r25, Y+2	; 0x02
    37f0:	80 3a       	cpi	r24, 0xA0	; 160
    37f2:	91 05       	cpc	r25, r1
    37f4:	51 f4       	brne	.+20     	; 0x380a <tc_enable_ovf_int+0x68>
		TIMSK4 |= (1 << TOIE4);
    37f6:	82 e7       	ldi	r24, 0x72	; 114
    37f8:	90 e0       	ldi	r25, 0x00	; 0
    37fa:	22 e7       	ldi	r18, 0x72	; 114
    37fc:	30 e0       	ldi	r19, 0x00	; 0
    37fe:	f9 01       	movw	r30, r18
    3800:	20 81       	ld	r18, Z
    3802:	21 60       	ori	r18, 0x01	; 1
    3804:	fc 01       	movw	r30, r24
    3806:	20 83       	st	Z, r18
	} else if ((uintptr_t)tc == (uintptr_t)&TCCR5A) {
		TIMSK5 |= (1 << TOIE5);
	} else {}
}
    3808:	0e c0       	rjmp	.+28     	; 0x3826 <tc_enable_ovf_int+0x84>
		TIMSK1 |= (1 << TOIE1);
	} else if ((uintptr_t)tc == (uintptr_t)&TCCR3A) {
		TIMSK3 |= (1 << TOIE3);
	} else if ((uintptr_t)tc == (uintptr_t)&TCCR4A) {
		TIMSK4 |= (1 << TOIE4);
	} else if ((uintptr_t)tc == (uintptr_t)&TCCR5A) {
    380a:	89 81       	ldd	r24, Y+1	; 0x01
    380c:	9a 81       	ldd	r25, Y+2	; 0x02
    380e:	80 32       	cpi	r24, 0x20	; 32
    3810:	91 40       	sbci	r25, 0x01	; 1
    3812:	49 f4       	brne	.+18     	; 0x3826 <tc_enable_ovf_int+0x84>
		TIMSK5 |= (1 << TOIE5);
    3814:	83 e7       	ldi	r24, 0x73	; 115
    3816:	90 e0       	ldi	r25, 0x00	; 0
    3818:	23 e7       	ldi	r18, 0x73	; 115
    381a:	30 e0       	ldi	r19, 0x00	; 0
    381c:	f9 01       	movw	r30, r18
    381e:	20 81       	ld	r18, Z
    3820:	21 60       	ori	r18, 0x01	; 1
    3822:	fc 01       	movw	r30, r24
    3824:	20 83       	st	Z, r18
	} else {}
}
    3826:	00 00       	nop
    3828:	0f 90       	pop	r0
    382a:	0f 90       	pop	r0
    382c:	df 91       	pop	r29
    382e:	cf 91       	pop	r28
    3830:	08 95       	ret

00003832 <tc_enable_compa_int>:
/**
 * @brief Enable Compare Interrupt in channel A
 * @param tc Timer Address
 */
static inline void tc_enable_compa_int(volatile void *tc)
{
    3832:	cf 93       	push	r28
    3834:	df 93       	push	r29
    3836:	00 d0       	rcall	.+0      	; 0x3838 <tc_enable_compa_int+0x6>
    3838:	cd b7       	in	r28, 0x3d	; 61
    383a:	de b7       	in	r29, 0x3e	; 62
    383c:	9a 83       	std	Y+2, r25	; 0x02
    383e:	89 83       	std	Y+1, r24	; 0x01
	if ((uintptr_t)tc == (uintptr_t)&TCCR1A) {
    3840:	89 81       	ldd	r24, Y+1	; 0x01
    3842:	9a 81       	ldd	r25, Y+2	; 0x02
    3844:	80 38       	cpi	r24, 0x80	; 128
    3846:	91 05       	cpc	r25, r1
    3848:	51 f4       	brne	.+20     	; 0x385e <tc_enable_compa_int+0x2c>
		TIMSK1 |= (1 << OCIE1A);
    384a:	8f e6       	ldi	r24, 0x6F	; 111
    384c:	90 e0       	ldi	r25, 0x00	; 0
    384e:	2f e6       	ldi	r18, 0x6F	; 111
    3850:	30 e0       	ldi	r19, 0x00	; 0
    3852:	f9 01       	movw	r30, r18
    3854:	20 81       	ld	r18, Z
    3856:	22 60       	ori	r18, 0x02	; 2
    3858:	fc 01       	movw	r30, r24
    385a:	20 83       	st	Z, r18
	} else if ((uintptr_t)tc == (uintptr_t)&TCCR4A) {
		TIMSK4 |= (1 << OCIE4A);
	} else if ((uintptr_t)tc == (uintptr_t)&TCCR5A) {
		TIMSK5 |= (1 << OCIE5A);
	} else {}
}
    385c:	2c c0       	rjmp	.+88     	; 0x38b6 <tc_enable_compa_int+0x84>
 */
static inline void tc_enable_compa_int(volatile void *tc)
{
	if ((uintptr_t)tc == (uintptr_t)&TCCR1A) {
		TIMSK1 |= (1 << OCIE1A);
	} else if ((uintptr_t)tc == (uintptr_t)&TCCR3A) {
    385e:	89 81       	ldd	r24, Y+1	; 0x01
    3860:	9a 81       	ldd	r25, Y+2	; 0x02
    3862:	80 39       	cpi	r24, 0x90	; 144
    3864:	91 05       	cpc	r25, r1
    3866:	51 f4       	brne	.+20     	; 0x387c <tc_enable_compa_int+0x4a>
		TIMSK3 |= (1 << OCIE3A);
    3868:	81 e7       	ldi	r24, 0x71	; 113
    386a:	90 e0       	ldi	r25, 0x00	; 0
    386c:	21 e7       	ldi	r18, 0x71	; 113
    386e:	30 e0       	ldi	r19, 0x00	; 0
    3870:	f9 01       	movw	r30, r18
    3872:	20 81       	ld	r18, Z
    3874:	22 60       	ori	r18, 0x02	; 2
    3876:	fc 01       	movw	r30, r24
    3878:	20 83       	st	Z, r18
	} else if ((uintptr_t)tc == (uintptr_t)&TCCR4A) {
		TIMSK4 |= (1 << OCIE4A);
	} else if ((uintptr_t)tc == (uintptr_t)&TCCR5A) {
		TIMSK5 |= (1 << OCIE5A);
	} else {}
}
    387a:	1d c0       	rjmp	.+58     	; 0x38b6 <tc_enable_compa_int+0x84>
{
	if ((uintptr_t)tc == (uintptr_t)&TCCR1A) {
		TIMSK1 |= (1 << OCIE1A);
	} else if ((uintptr_t)tc == (uintptr_t)&TCCR3A) {
		TIMSK3 |= (1 << OCIE3A);
	} else if ((uintptr_t)tc == (uintptr_t)&TCCR4A) {
    387c:	89 81       	ldd	r24, Y+1	; 0x01
    387e:	9a 81       	ldd	r25, Y+2	; 0x02
    3880:	80 3a       	cpi	r24, 0xA0	; 160
    3882:	91 05       	cpc	r25, r1
    3884:	51 f4       	brne	.+20     	; 0x389a <tc_enable_compa_int+0x68>
		TIMSK4 |= (1 << OCIE4A);
    3886:	82 e7       	ldi	r24, 0x72	; 114
    3888:	90 e0       	ldi	r25, 0x00	; 0
    388a:	22 e7       	ldi	r18, 0x72	; 114
    388c:	30 e0       	ldi	r19, 0x00	; 0
    388e:	f9 01       	movw	r30, r18
    3890:	20 81       	ld	r18, Z
    3892:	22 60       	ori	r18, 0x02	; 2
    3894:	fc 01       	movw	r30, r24
    3896:	20 83       	st	Z, r18
	} else if ((uintptr_t)tc == (uintptr_t)&TCCR5A) {
		TIMSK5 |= (1 << OCIE5A);
	} else {}
}
    3898:	0e c0       	rjmp	.+28     	; 0x38b6 <tc_enable_compa_int+0x84>
		TIMSK1 |= (1 << OCIE1A);
	} else if ((uintptr_t)tc == (uintptr_t)&TCCR3A) {
		TIMSK3 |= (1 << OCIE3A);
	} else if ((uintptr_t)tc == (uintptr_t)&TCCR4A) {
		TIMSK4 |= (1 << OCIE4A);
	} else if ((uintptr_t)tc == (uintptr_t)&TCCR5A) {
    389a:	89 81       	ldd	r24, Y+1	; 0x01
    389c:	9a 81       	ldd	r25, Y+2	; 0x02
    389e:	80 32       	cpi	r24, 0x20	; 32
    38a0:	91 40       	sbci	r25, 0x01	; 1
    38a2:	49 f4       	brne	.+18     	; 0x38b6 <tc_enable_compa_int+0x84>
		TIMSK5 |= (1 << OCIE5A);
    38a4:	83 e7       	ldi	r24, 0x73	; 115
    38a6:	90 e0       	ldi	r25, 0x00	; 0
    38a8:	23 e7       	ldi	r18, 0x73	; 115
    38aa:	30 e0       	ldi	r19, 0x00	; 0
    38ac:	f9 01       	movw	r30, r18
    38ae:	20 81       	ld	r18, Z
    38b0:	22 60       	ori	r18, 0x02	; 2
    38b2:	fc 01       	movw	r30, r24
    38b4:	20 83       	st	Z, r18
	} else {}
}
    38b6:	00 00       	nop
    38b8:	0f 90       	pop	r0
    38ba:	0f 90       	pop	r0
    38bc:	df 91       	pop	r29
    38be:	cf 91       	pop	r28
    38c0:	08 95       	ret

000038c2 <tc_disable_compa_int>:
/**
 * @brief Disable Compare Interrupt in channel A
 * @param tc Timer Address
 */
static inline void tc_disable_compa_int(volatile void *tc)
{
    38c2:	cf 93       	push	r28
    38c4:	df 93       	push	r29
    38c6:	00 d0       	rcall	.+0      	; 0x38c8 <tc_disable_compa_int+0x6>
    38c8:	cd b7       	in	r28, 0x3d	; 61
    38ca:	de b7       	in	r29, 0x3e	; 62
    38cc:	9a 83       	std	Y+2, r25	; 0x02
    38ce:	89 83       	std	Y+1, r24	; 0x01
	if ((uintptr_t)tc == (uintptr_t)&TCCR1A) {
    38d0:	89 81       	ldd	r24, Y+1	; 0x01
    38d2:	9a 81       	ldd	r25, Y+2	; 0x02
    38d4:	80 38       	cpi	r24, 0x80	; 128
    38d6:	91 05       	cpc	r25, r1
    38d8:	51 f4       	brne	.+20     	; 0x38ee <tc_disable_compa_int+0x2c>
		TIMSK1 &= ~(1 << OCIE1A);
    38da:	8f e6       	ldi	r24, 0x6F	; 111
    38dc:	90 e0       	ldi	r25, 0x00	; 0
    38de:	2f e6       	ldi	r18, 0x6F	; 111
    38e0:	30 e0       	ldi	r19, 0x00	; 0
    38e2:	f9 01       	movw	r30, r18
    38e4:	20 81       	ld	r18, Z
    38e6:	2d 7f       	andi	r18, 0xFD	; 253
    38e8:	fc 01       	movw	r30, r24
    38ea:	20 83       	st	Z, r18
	} else if ((uintptr_t)tc == (uintptr_t)&TCCR4A) {
		TIMSK4 &= ~(1 << OCIE4A);
	} else if ((uintptr_t)tc == (uintptr_t)&TCCR5A) {
		TIMSK5 &= ~(1 << OCIE5A);
	} else {}
}
    38ec:	2c c0       	rjmp	.+88     	; 0x3946 <tc_disable_compa_int+0x84>
 */
static inline void tc_disable_compa_int(volatile void *tc)
{
	if ((uintptr_t)tc == (uintptr_t)&TCCR1A) {
		TIMSK1 &= ~(1 << OCIE1A);
	} else if ((uintptr_t)tc == (uintptr_t)&TCCR3A) {
    38ee:	89 81       	ldd	r24, Y+1	; 0x01
    38f0:	9a 81       	ldd	r25, Y+2	; 0x02
    38f2:	80 39       	cpi	r24, 0x90	; 144
    38f4:	91 05       	cpc	r25, r1
    38f6:	51 f4       	brne	.+20     	; 0x390c <tc_disable_compa_int+0x4a>
		TIMSK3 &= ~(1 << OCIE3A);
    38f8:	81 e7       	ldi	r24, 0x71	; 113
    38fa:	90 e0       	ldi	r25, 0x00	; 0
    38fc:	21 e7       	ldi	r18, 0x71	; 113
    38fe:	30 e0       	ldi	r19, 0x00	; 0
    3900:	f9 01       	movw	r30, r18
    3902:	20 81       	ld	r18, Z
    3904:	2d 7f       	andi	r18, 0xFD	; 253
    3906:	fc 01       	movw	r30, r24
    3908:	20 83       	st	Z, r18
	} else if ((uintptr_t)tc == (uintptr_t)&TCCR4A) {
		TIMSK4 &= ~(1 << OCIE4A);
	} else if ((uintptr_t)tc == (uintptr_t)&TCCR5A) {
		TIMSK5 &= ~(1 << OCIE5A);
	} else {}
}
    390a:	1d c0       	rjmp	.+58     	; 0x3946 <tc_disable_compa_int+0x84>
{
	if ((uintptr_t)tc == (uintptr_t)&TCCR1A) {
		TIMSK1 &= ~(1 << OCIE1A);
	} else if ((uintptr_t)tc == (uintptr_t)&TCCR3A) {
		TIMSK3 &= ~(1 << OCIE3A);
	} else if ((uintptr_t)tc == (uintptr_t)&TCCR4A) {
    390c:	89 81       	ldd	r24, Y+1	; 0x01
    390e:	9a 81       	ldd	r25, Y+2	; 0x02
    3910:	80 3a       	cpi	r24, 0xA0	; 160
    3912:	91 05       	cpc	r25, r1
    3914:	51 f4       	brne	.+20     	; 0x392a <tc_disable_compa_int+0x68>
		TIMSK4 &= ~(1 << OCIE4A);
    3916:	82 e7       	ldi	r24, 0x72	; 114
    3918:	90 e0       	ldi	r25, 0x00	; 0
    391a:	22 e7       	ldi	r18, 0x72	; 114
    391c:	30 e0       	ldi	r19, 0x00	; 0
    391e:	f9 01       	movw	r30, r18
    3920:	20 81       	ld	r18, Z
    3922:	2d 7f       	andi	r18, 0xFD	; 253
    3924:	fc 01       	movw	r30, r24
    3926:	20 83       	st	Z, r18
	} else if ((uintptr_t)tc == (uintptr_t)&TCCR5A) {
		TIMSK5 &= ~(1 << OCIE5A);
	} else {}
}
    3928:	0e c0       	rjmp	.+28     	; 0x3946 <tc_disable_compa_int+0x84>
		TIMSK1 &= ~(1 << OCIE1A);
	} else if ((uintptr_t)tc == (uintptr_t)&TCCR3A) {
		TIMSK3 &= ~(1 << OCIE3A);
	} else if ((uintptr_t)tc == (uintptr_t)&TCCR4A) {
		TIMSK4 &= ~(1 << OCIE4A);
	} else if ((uintptr_t)tc == (uintptr_t)&TCCR5A) {
    392a:	89 81       	ldd	r24, Y+1	; 0x01
    392c:	9a 81       	ldd	r25, Y+2	; 0x02
    392e:	80 32       	cpi	r24, 0x20	; 32
    3930:	91 40       	sbci	r25, 0x01	; 1
    3932:	49 f4       	brne	.+18     	; 0x3946 <tc_disable_compa_int+0x84>
		TIMSK5 &= ~(1 << OCIE5A);
    3934:	83 e7       	ldi	r24, 0x73	; 115
    3936:	90 e0       	ldi	r25, 0x00	; 0
    3938:	23 e7       	ldi	r18, 0x73	; 115
    393a:	30 e0       	ldi	r19, 0x00	; 0
    393c:	f9 01       	movw	r30, r18
    393e:	20 81       	ld	r18, Z
    3940:	2d 7f       	andi	r18, 0xFD	; 253
    3942:	fc 01       	movw	r30, r24
    3944:	20 83       	st	Z, r18
	} else {}
}
    3946:	00 00       	nop
    3948:	0f 90       	pop	r0
    394a:	0f 90       	pop	r0
    394c:	df 91       	pop	r29
    394e:	cf 91       	pop	r28
    3950:	08 95       	ret

00003952 <tc_write_cc>:
 * @param channel_index Compare Channel to be used
 * @param value Compare value to be written
 */
static inline void tc_write_cc(volatile void *tc,
		enum tc_cc_channel_t channel_index, uint16_t value)
{
    3952:	cf 93       	push	r28
    3954:	df 93       	push	r29
    3956:	cd b7       	in	r28, 0x3d	; 61
    3958:	de b7       	in	r29, 0x3e	; 62
    395a:	27 97       	sbiw	r28, 0x07	; 7
    395c:	0f b6       	in	r0, 0x3f	; 63
    395e:	f8 94       	cli
    3960:	de bf       	out	0x3e, r29	; 62
    3962:	0f be       	out	0x3f, r0	; 63
    3964:	cd bf       	out	0x3d, r28	; 61
    3966:	9c 83       	std	Y+4, r25	; 0x04
    3968:	8b 83       	std	Y+3, r24	; 0x03
    396a:	6d 83       	std	Y+5, r22	; 0x05
    396c:	5f 83       	std	Y+7, r21	; 0x07
    396e:	4e 83       	std	Y+6, r20	; 0x06
	uint8_t *reg = (uint8_t *)tc;
    3970:	8b 81       	ldd	r24, Y+3	; 0x03
    3972:	9c 81       	ldd	r25, Y+4	; 0x04
    3974:	9a 83       	std	Y+2, r25	; 0x02
    3976:	89 83       	std	Y+1, r24	; 0x01
	*(reg + channel_index + 1) |=  (value >> 8);
    3978:	8d 81       	ldd	r24, Y+5	; 0x05
    397a:	88 2f       	mov	r24, r24
    397c:	90 e0       	ldi	r25, 0x00	; 0
    397e:	01 96       	adiw	r24, 0x01	; 1
    3980:	29 81       	ldd	r18, Y+1	; 0x01
    3982:	3a 81       	ldd	r19, Y+2	; 0x02
    3984:	82 0f       	add	r24, r18
    3986:	93 1f       	adc	r25, r19
    3988:	2d 81       	ldd	r18, Y+5	; 0x05
    398a:	22 2f       	mov	r18, r18
    398c:	30 e0       	ldi	r19, 0x00	; 0
    398e:	2f 5f       	subi	r18, 0xFF	; 255
    3990:	3f 4f       	sbci	r19, 0xFF	; 255
    3992:	49 81       	ldd	r20, Y+1	; 0x01
    3994:	5a 81       	ldd	r21, Y+2	; 0x02
    3996:	24 0f       	add	r18, r20
    3998:	35 1f       	adc	r19, r21
    399a:	f9 01       	movw	r30, r18
    399c:	40 81       	ld	r20, Z
    399e:	2e 81       	ldd	r18, Y+6	; 0x06
    39a0:	3f 81       	ldd	r19, Y+7	; 0x07
    39a2:	23 2f       	mov	r18, r19
    39a4:	33 27       	eor	r19, r19
    39a6:	24 2b       	or	r18, r20
    39a8:	fc 01       	movw	r30, r24
    39aa:	20 83       	st	Z, r18
	*(reg + channel_index) |=  value;
    39ac:	8d 81       	ldd	r24, Y+5	; 0x05
    39ae:	88 2f       	mov	r24, r24
    39b0:	90 e0       	ldi	r25, 0x00	; 0
    39b2:	29 81       	ldd	r18, Y+1	; 0x01
    39b4:	3a 81       	ldd	r19, Y+2	; 0x02
    39b6:	82 0f       	add	r24, r18
    39b8:	93 1f       	adc	r25, r19
    39ba:	2d 81       	ldd	r18, Y+5	; 0x05
    39bc:	22 2f       	mov	r18, r18
    39be:	30 e0       	ldi	r19, 0x00	; 0
    39c0:	49 81       	ldd	r20, Y+1	; 0x01
    39c2:	5a 81       	ldd	r21, Y+2	; 0x02
    39c4:	24 0f       	add	r18, r20
    39c6:	35 1f       	adc	r19, r21
    39c8:	f9 01       	movw	r30, r18
    39ca:	30 81       	ld	r19, Z
    39cc:	2e 81       	ldd	r18, Y+6	; 0x06
    39ce:	23 2b       	or	r18, r19
    39d0:	fc 01       	movw	r30, r24
    39d2:	20 83       	st	Z, r18
}
    39d4:	00 00       	nop
    39d6:	27 96       	adiw	r28, 0x07	; 7
    39d8:	0f b6       	in	r0, 0x3f	; 63
    39da:	f8 94       	cli
    39dc:	de bf       	out	0x3e, r29	; 62
    39de:	0f be       	out	0x3f, r0	; 63
    39e0:	cd bf       	out	0x3d, r28	; 61
    39e2:	df 91       	pop	r29
    39e4:	cf 91       	pop	r28
    39e6:	08 95       	ret

000039e8 <clear_ovf_flag>:
/**
 * @brief Clears Overflow Flag
 * @param tc Timer Address
 */
static inline void clear_ovf_flag(volatile void *tc)
{
    39e8:	cf 93       	push	r28
    39ea:	df 93       	push	r29
    39ec:	00 d0       	rcall	.+0      	; 0x39ee <clear_ovf_flag+0x6>
    39ee:	cd b7       	in	r28, 0x3d	; 61
    39f0:	de b7       	in	r29, 0x3e	; 62
    39f2:	9a 83       	std	Y+2, r25	; 0x02
    39f4:	89 83       	std	Y+1, r24	; 0x01
	if ((uintptr_t)tc == (uintptr_t)&TCCR1A) {
    39f6:	89 81       	ldd	r24, Y+1	; 0x01
    39f8:	9a 81       	ldd	r25, Y+2	; 0x02
    39fa:	80 38       	cpi	r24, 0x80	; 128
    39fc:	91 05       	cpc	r25, r1
    39fe:	51 f4       	brne	.+20     	; 0x3a14 <clear_ovf_flag+0x2c>
		TIFR1 |= (1 << TOV1);
    3a00:	86 e3       	ldi	r24, 0x36	; 54
    3a02:	90 e0       	ldi	r25, 0x00	; 0
    3a04:	26 e3       	ldi	r18, 0x36	; 54
    3a06:	30 e0       	ldi	r19, 0x00	; 0
    3a08:	f9 01       	movw	r30, r18
    3a0a:	20 81       	ld	r18, Z
    3a0c:	21 60       	ori	r18, 0x01	; 1
    3a0e:	fc 01       	movw	r30, r24
    3a10:	20 83       	st	Z, r18
	} else if ((uintptr_t)tc == (uintptr_t)&TCCR4A) {
		(TIFR4 |= (1 << TOV4));
	} else if ((uintptr_t)tc == (uintptr_t)&TCCR5A) {
		(TIFR5 |= (1 << TOV5));
	} else {}
}
    3a12:	2c c0       	rjmp	.+88     	; 0x3a6c <clear_ovf_flag+0x84>
 */
static inline void clear_ovf_flag(volatile void *tc)
{
	if ((uintptr_t)tc == (uintptr_t)&TCCR1A) {
		TIFR1 |= (1 << TOV1);
	} else if ((uintptr_t)tc == (uintptr_t)&TCCR3A) {
    3a14:	89 81       	ldd	r24, Y+1	; 0x01
    3a16:	9a 81       	ldd	r25, Y+2	; 0x02
    3a18:	80 39       	cpi	r24, 0x90	; 144
    3a1a:	91 05       	cpc	r25, r1
    3a1c:	51 f4       	brne	.+20     	; 0x3a32 <clear_ovf_flag+0x4a>
		(TIFR3 |= (1 << TOV3));
    3a1e:	88 e3       	ldi	r24, 0x38	; 56
    3a20:	90 e0       	ldi	r25, 0x00	; 0
    3a22:	28 e3       	ldi	r18, 0x38	; 56
    3a24:	30 e0       	ldi	r19, 0x00	; 0
    3a26:	f9 01       	movw	r30, r18
    3a28:	20 81       	ld	r18, Z
    3a2a:	21 60       	ori	r18, 0x01	; 1
    3a2c:	fc 01       	movw	r30, r24
    3a2e:	20 83       	st	Z, r18
	} else if ((uintptr_t)tc == (uintptr_t)&TCCR4A) {
		(TIFR4 |= (1 << TOV4));
	} else if ((uintptr_t)tc == (uintptr_t)&TCCR5A) {
		(TIFR5 |= (1 << TOV5));
	} else {}
}
    3a30:	1d c0       	rjmp	.+58     	; 0x3a6c <clear_ovf_flag+0x84>
{
	if ((uintptr_t)tc == (uintptr_t)&TCCR1A) {
		TIFR1 |= (1 << TOV1);
	} else if ((uintptr_t)tc == (uintptr_t)&TCCR3A) {
		(TIFR3 |= (1 << TOV3));
	} else if ((uintptr_t)tc == (uintptr_t)&TCCR4A) {
    3a32:	89 81       	ldd	r24, Y+1	; 0x01
    3a34:	9a 81       	ldd	r25, Y+2	; 0x02
    3a36:	80 3a       	cpi	r24, 0xA0	; 160
    3a38:	91 05       	cpc	r25, r1
    3a3a:	51 f4       	brne	.+20     	; 0x3a50 <clear_ovf_flag+0x68>
		(TIFR4 |= (1 << TOV4));
    3a3c:	89 e3       	ldi	r24, 0x39	; 57
    3a3e:	90 e0       	ldi	r25, 0x00	; 0
    3a40:	29 e3       	ldi	r18, 0x39	; 57
    3a42:	30 e0       	ldi	r19, 0x00	; 0
    3a44:	f9 01       	movw	r30, r18
    3a46:	20 81       	ld	r18, Z
    3a48:	21 60       	ori	r18, 0x01	; 1
    3a4a:	fc 01       	movw	r30, r24
    3a4c:	20 83       	st	Z, r18
	} else if ((uintptr_t)tc == (uintptr_t)&TCCR5A) {
		(TIFR5 |= (1 << TOV5));
	} else {}
}
    3a4e:	0e c0       	rjmp	.+28     	; 0x3a6c <clear_ovf_flag+0x84>
		TIFR1 |= (1 << TOV1);
	} else if ((uintptr_t)tc == (uintptr_t)&TCCR3A) {
		(TIFR3 |= (1 << TOV3));
	} else if ((uintptr_t)tc == (uintptr_t)&TCCR4A) {
		(TIFR4 |= (1 << TOV4));
	} else if ((uintptr_t)tc == (uintptr_t)&TCCR5A) {
    3a50:	89 81       	ldd	r24, Y+1	; 0x01
    3a52:	9a 81       	ldd	r25, Y+2	; 0x02
    3a54:	80 32       	cpi	r24, 0x20	; 32
    3a56:	91 40       	sbci	r25, 0x01	; 1
    3a58:	49 f4       	brne	.+18     	; 0x3a6c <clear_ovf_flag+0x84>
		(TIFR5 |= (1 << TOV5));
    3a5a:	8a e3       	ldi	r24, 0x3A	; 58
    3a5c:	90 e0       	ldi	r25, 0x00	; 0
    3a5e:	2a e3       	ldi	r18, 0x3A	; 58
    3a60:	30 e0       	ldi	r19, 0x00	; 0
    3a62:	f9 01       	movw	r30, r18
    3a64:	20 81       	ld	r18, Z
    3a66:	21 60       	ori	r18, 0x01	; 1
    3a68:	fc 01       	movw	r30, r24
    3a6a:	20 83       	st	Z, r18
	} else {}
}
    3a6c:	00 00       	nop
    3a6e:	0f 90       	pop	r0
    3a70:	0f 90       	pop	r0
    3a72:	df 91       	pop	r29
    3a74:	cf 91       	pop	r28
    3a76:	08 95       	ret

00003a78 <clear_compa_flag>:
/**
 * @brief Clears Compare Match  Flag in channel A
 * @param tc Timer Address
 */
static inline void clear_compa_flag(volatile void *tc)
{
    3a78:	cf 93       	push	r28
    3a7a:	df 93       	push	r29
    3a7c:	00 d0       	rcall	.+0      	; 0x3a7e <clear_compa_flag+0x6>
    3a7e:	cd b7       	in	r28, 0x3d	; 61
    3a80:	de b7       	in	r29, 0x3e	; 62
    3a82:	9a 83       	std	Y+2, r25	; 0x02
    3a84:	89 83       	std	Y+1, r24	; 0x01
	if ((uintptr_t)tc == (uintptr_t)&TCCR1A) {
    3a86:	89 81       	ldd	r24, Y+1	; 0x01
    3a88:	9a 81       	ldd	r25, Y+2	; 0x02
    3a8a:	80 38       	cpi	r24, 0x80	; 128
    3a8c:	91 05       	cpc	r25, r1
    3a8e:	51 f4       	brne	.+20     	; 0x3aa4 <clear_compa_flag+0x2c>
		TIFR1 |= (1 << OCF1A);
    3a90:	86 e3       	ldi	r24, 0x36	; 54
    3a92:	90 e0       	ldi	r25, 0x00	; 0
    3a94:	26 e3       	ldi	r18, 0x36	; 54
    3a96:	30 e0       	ldi	r19, 0x00	; 0
    3a98:	f9 01       	movw	r30, r18
    3a9a:	20 81       	ld	r18, Z
    3a9c:	22 60       	ori	r18, 0x02	; 2
    3a9e:	fc 01       	movw	r30, r24
    3aa0:	20 83       	st	Z, r18
	} else if ((uintptr_t)tc == (uintptr_t)&TCCR4A) {
		(TIFR4 |= (1 << OCF1A));
	} else if ((uintptr_t)tc == (uintptr_t)&TCCR5A) {
		(TIFR5 |= (1 << OCF1A));
	} else {}
}
    3aa2:	2c c0       	rjmp	.+88     	; 0x3afc <clear_compa_flag+0x84>
 */
static inline void clear_compa_flag(volatile void *tc)
{
	if ((uintptr_t)tc == (uintptr_t)&TCCR1A) {
		TIFR1 |= (1 << OCF1A);
	} else if ((uintptr_t)tc == (uintptr_t)&TCCR3A) {
    3aa4:	89 81       	ldd	r24, Y+1	; 0x01
    3aa6:	9a 81       	ldd	r25, Y+2	; 0x02
    3aa8:	80 39       	cpi	r24, 0x90	; 144
    3aaa:	91 05       	cpc	r25, r1
    3aac:	51 f4       	brne	.+20     	; 0x3ac2 <clear_compa_flag+0x4a>
		(TIFR3 |= (1 << OCF1A));
    3aae:	88 e3       	ldi	r24, 0x38	; 56
    3ab0:	90 e0       	ldi	r25, 0x00	; 0
    3ab2:	28 e3       	ldi	r18, 0x38	; 56
    3ab4:	30 e0       	ldi	r19, 0x00	; 0
    3ab6:	f9 01       	movw	r30, r18
    3ab8:	20 81       	ld	r18, Z
    3aba:	22 60       	ori	r18, 0x02	; 2
    3abc:	fc 01       	movw	r30, r24
    3abe:	20 83       	st	Z, r18
	} else if ((uintptr_t)tc == (uintptr_t)&TCCR4A) {
		(TIFR4 |= (1 << OCF1A));
	} else if ((uintptr_t)tc == (uintptr_t)&TCCR5A) {
		(TIFR5 |= (1 << OCF1A));
	} else {}
}
    3ac0:	1d c0       	rjmp	.+58     	; 0x3afc <clear_compa_flag+0x84>
{
	if ((uintptr_t)tc == (uintptr_t)&TCCR1A) {
		TIFR1 |= (1 << OCF1A);
	} else if ((uintptr_t)tc == (uintptr_t)&TCCR3A) {
		(TIFR3 |= (1 << OCF1A));
	} else if ((uintptr_t)tc == (uintptr_t)&TCCR4A) {
    3ac2:	89 81       	ldd	r24, Y+1	; 0x01
    3ac4:	9a 81       	ldd	r25, Y+2	; 0x02
    3ac6:	80 3a       	cpi	r24, 0xA0	; 160
    3ac8:	91 05       	cpc	r25, r1
    3aca:	51 f4       	brne	.+20     	; 0x3ae0 <clear_compa_flag+0x68>
		(TIFR4 |= (1 << OCF1A));
    3acc:	89 e3       	ldi	r24, 0x39	; 57
    3ace:	90 e0       	ldi	r25, 0x00	; 0
    3ad0:	29 e3       	ldi	r18, 0x39	; 57
    3ad2:	30 e0       	ldi	r19, 0x00	; 0
    3ad4:	f9 01       	movw	r30, r18
    3ad6:	20 81       	ld	r18, Z
    3ad8:	22 60       	ori	r18, 0x02	; 2
    3ada:	fc 01       	movw	r30, r24
    3adc:	20 83       	st	Z, r18
	} else if ((uintptr_t)tc == (uintptr_t)&TCCR5A) {
		(TIFR5 |= (1 << OCF1A));
	} else {}
}
    3ade:	0e c0       	rjmp	.+28     	; 0x3afc <clear_compa_flag+0x84>
		TIFR1 |= (1 << OCF1A);
	} else if ((uintptr_t)tc == (uintptr_t)&TCCR3A) {
		(TIFR3 |= (1 << OCF1A));
	} else if ((uintptr_t)tc == (uintptr_t)&TCCR4A) {
		(TIFR4 |= (1 << OCF1A));
	} else if ((uintptr_t)tc == (uintptr_t)&TCCR5A) {
    3ae0:	89 81       	ldd	r24, Y+1	; 0x01
    3ae2:	9a 81       	ldd	r25, Y+2	; 0x02
    3ae4:	80 32       	cpi	r24, 0x20	; 32
    3ae6:	91 40       	sbci	r25, 0x01	; 1
    3ae8:	49 f4       	brne	.+18     	; 0x3afc <clear_compa_flag+0x84>
		(TIFR5 |= (1 << OCF1A));
    3aea:	8a e3       	ldi	r24, 0x3A	; 58
    3aec:	90 e0       	ldi	r25, 0x00	; 0
    3aee:	2a e3       	ldi	r18, 0x3A	; 58
    3af0:	30 e0       	ldi	r19, 0x00	; 0
    3af2:	f9 01       	movw	r30, r18
    3af4:	20 81       	ld	r18, Z
    3af6:	22 60       	ori	r18, 0x02	; 2
    3af8:	fc 01       	movw	r30, r24
    3afa:	20 83       	st	Z, r18
	} else {}
}
    3afc:	00 00       	nop
    3afe:	0f 90       	pop	r0
    3b00:	0f 90       	pop	r0
    3b02:	df 91       	pop	r29
    3b04:	cf 91       	pop	r28
    3b06:	08 95       	ret

00003b08 <tc_read_count>:
 * @brief Reads the  count value in the Timer Counter Register
 * @param tc Timer Address
 * @return  count  in the register
 */
static inline uint16_t tc_read_count(volatile void *tc)
{
    3b08:	cf 93       	push	r28
    3b0a:	df 93       	push	r29
    3b0c:	00 d0       	rcall	.+0      	; 0x3b0e <tc_read_count+0x6>
    3b0e:	cd b7       	in	r28, 0x3d	; 61
    3b10:	de b7       	in	r29, 0x3e	; 62
    3b12:	9a 83       	std	Y+2, r25	; 0x02
    3b14:	89 83       	std	Y+1, r24	; 0x01
	if ((uintptr_t)tc == (uintptr_t)&TCCR1A) {
    3b16:	89 81       	ldd	r24, Y+1	; 0x01
    3b18:	9a 81       	ldd	r25, Y+2	; 0x02
    3b1a:	80 38       	cpi	r24, 0x80	; 128
    3b1c:	91 05       	cpc	r25, r1
    3b1e:	31 f4       	brne	.+12     	; 0x3b2c <tc_read_count+0x24>
		return TCNT1;
    3b20:	84 e8       	ldi	r24, 0x84	; 132
    3b22:	90 e0       	ldi	r25, 0x00	; 0
    3b24:	fc 01       	movw	r30, r24
    3b26:	80 81       	ld	r24, Z
    3b28:	91 81       	ldd	r25, Z+1	; 0x01
    3b2a:	23 c0       	rjmp	.+70     	; 0x3b72 <tc_read_count+0x6a>
	} else if ((uintptr_t)tc == (uintptr_t)&TCCR3A) {
    3b2c:	89 81       	ldd	r24, Y+1	; 0x01
    3b2e:	9a 81       	ldd	r25, Y+2	; 0x02
    3b30:	80 39       	cpi	r24, 0x90	; 144
    3b32:	91 05       	cpc	r25, r1
    3b34:	31 f4       	brne	.+12     	; 0x3b42 <tc_read_count+0x3a>
		return TCNT3;
    3b36:	84 e9       	ldi	r24, 0x94	; 148
    3b38:	90 e0       	ldi	r25, 0x00	; 0
    3b3a:	fc 01       	movw	r30, r24
    3b3c:	80 81       	ld	r24, Z
    3b3e:	91 81       	ldd	r25, Z+1	; 0x01
    3b40:	18 c0       	rjmp	.+48     	; 0x3b72 <tc_read_count+0x6a>
	} else if ((uintptr_t)tc == (uintptr_t)&TCCR4A) {
    3b42:	89 81       	ldd	r24, Y+1	; 0x01
    3b44:	9a 81       	ldd	r25, Y+2	; 0x02
    3b46:	80 3a       	cpi	r24, 0xA0	; 160
    3b48:	91 05       	cpc	r25, r1
    3b4a:	31 f4       	brne	.+12     	; 0x3b58 <tc_read_count+0x50>
		return TCNT4;
    3b4c:	84 ea       	ldi	r24, 0xA4	; 164
    3b4e:	90 e0       	ldi	r25, 0x00	; 0
    3b50:	fc 01       	movw	r30, r24
    3b52:	80 81       	ld	r24, Z
    3b54:	91 81       	ldd	r25, Z+1	; 0x01
    3b56:	0d c0       	rjmp	.+26     	; 0x3b72 <tc_read_count+0x6a>
	} else if ((uintptr_t)tc == (uintptr_t)&TCCR5A) {
    3b58:	89 81       	ldd	r24, Y+1	; 0x01
    3b5a:	9a 81       	ldd	r25, Y+2	; 0x02
    3b5c:	80 32       	cpi	r24, 0x20	; 32
    3b5e:	91 40       	sbci	r25, 0x01	; 1
    3b60:	31 f4       	brne	.+12     	; 0x3b6e <tc_read_count+0x66>
		return TCNT5;
    3b62:	84 e2       	ldi	r24, 0x24	; 36
    3b64:	91 e0       	ldi	r25, 0x01	; 1
    3b66:	fc 01       	movw	r30, r24
    3b68:	80 81       	ld	r24, Z
    3b6a:	91 81       	ldd	r25, Z+1	; 0x01
    3b6c:	02 c0       	rjmp	.+4      	; 0x3b72 <tc_read_count+0x6a>
	}

	return 0;
    3b6e:	80 e0       	ldi	r24, 0x00	; 0
    3b70:	90 e0       	ldi	r25, 0x00	; 0
}
    3b72:	0f 90       	pop	r0
    3b74:	0f 90       	pop	r0
    3b76:	df 91       	pop	r29
    3b78:	cf 91       	pop	r28
    3b7a:	08 95       	ret

00003b7c <tc_set_mode>:
 * @brief Sets a timer in a particular mode of operation
 * @param tc Timer Address
 * @param mode Enum value of the selected mode
 */
static inline void tc_set_mode(volatile void *tc, TC_MODE_t mode)
{
    3b7c:	cf 93       	push	r28
    3b7e:	df 93       	push	r29
    3b80:	00 d0       	rcall	.+0      	; 0x3b82 <tc_set_mode+0x6>
    3b82:	00 d0       	rcall	.+0      	; 0x3b84 <tc_set_mode+0x8>
    3b84:	1f 92       	push	r1
    3b86:	cd b7       	in	r28, 0x3d	; 61
    3b88:	de b7       	in	r29, 0x3e	; 62
    3b8a:	9c 83       	std	Y+4, r25	; 0x04
    3b8c:	8b 83       	std	Y+3, r24	; 0x03
    3b8e:	6d 83       	std	Y+5, r22	; 0x05
	uint8_t *reg = (uint8_t *)tc;
    3b90:	8b 81       	ldd	r24, Y+3	; 0x03
    3b92:	9c 81       	ldd	r25, Y+4	; 0x04
    3b94:	9a 83       	std	Y+2, r25	; 0x02
    3b96:	89 83       	std	Y+1, r24	; 0x01
	if (mode == NORMAL) {
    3b98:	8d 81       	ldd	r24, Y+5	; 0x05
    3b9a:	88 23       	and	r24, r24
    3b9c:	49 f4       	brne	.+18     	; 0x3bb0 <tc_set_mode+0x34>
		*(reg) |=  ((0 << WGM10) || ((0 << WGM11)));
    3b9e:	89 81       	ldd	r24, Y+1	; 0x01
    3ba0:	9a 81       	ldd	r25, Y+2	; 0x02
    3ba2:	fc 01       	movw	r30, r24
    3ba4:	20 81       	ld	r18, Z
    3ba6:	89 81       	ldd	r24, Y+1	; 0x01
    3ba8:	9a 81       	ldd	r25, Y+2	; 0x02
    3baa:	fc 01       	movw	r30, r24
    3bac:	20 83       	st	Z, r18
	} else if (mode == CTC_Mode1) {
		*(reg + TCCRB_OFFSET) |= (1 << WGM12);
	}
}
    3bae:	0f c0       	rjmp	.+30     	; 0x3bce <tc_set_mode+0x52>
static inline void tc_set_mode(volatile void *tc, TC_MODE_t mode)
{
	uint8_t *reg = (uint8_t *)tc;
	if (mode == NORMAL) {
		*(reg) |=  ((0 << WGM10) || ((0 << WGM11)));
	} else if (mode == CTC_Mode1) {
    3bb0:	8d 81       	ldd	r24, Y+5	; 0x05
    3bb2:	84 30       	cpi	r24, 0x04	; 4
    3bb4:	61 f4       	brne	.+24     	; 0x3bce <tc_set_mode+0x52>
		*(reg + TCCRB_OFFSET) |= (1 << WGM12);
    3bb6:	89 81       	ldd	r24, Y+1	; 0x01
    3bb8:	9a 81       	ldd	r25, Y+2	; 0x02
    3bba:	01 96       	adiw	r24, 0x01	; 1
    3bbc:	29 81       	ldd	r18, Y+1	; 0x01
    3bbe:	3a 81       	ldd	r19, Y+2	; 0x02
    3bc0:	2f 5f       	subi	r18, 0xFF	; 255
    3bc2:	3f 4f       	sbci	r19, 0xFF	; 255
    3bc4:	f9 01       	movw	r30, r18
    3bc6:	20 81       	ld	r18, Z
    3bc8:	28 60       	ori	r18, 0x08	; 8
    3bca:	fc 01       	movw	r30, r24
    3bcc:	20 83       	st	Z, r18
	}
}
    3bce:	00 00       	nop
    3bd0:	0f 90       	pop	r0
    3bd2:	0f 90       	pop	r0
    3bd4:	0f 90       	pop	r0
    3bd6:	0f 90       	pop	r0
    3bd8:	0f 90       	pop	r0
    3bda:	df 91       	pop	r29
    3bdc:	cf 91       	pop	r28
    3bde:	08 95       	ret

00003be0 <tmr_read_count>:
static void configure_tc_callback(volatile void *timer);

/*! \brief  read the actual timer count from register
 */
uint16_t tmr_read_count(void)
{
    3be0:	cf 93       	push	r28
    3be2:	df 93       	push	r29
    3be4:	cd b7       	in	r28, 0x3d	; 61
    3be6:	de b7       	in	r29, 0x3e	; 62
	return tc_read_count(TIMER);
    3be8:	80 e8       	ldi	r24, 0x80	; 128
    3bea:	90 e0       	ldi	r25, 0x00	; 0
    3bec:	0e 94 84 1d 	call	0x3b08	; 0x3b08 <tc_read_count>
}
    3bf0:	df 91       	pop	r29
    3bf2:	cf 91       	pop	r28
    3bf4:	08 95       	ret

00003bf6 <tmr_disable_cc_interrupt>:

/*! \brief  to disable compare interrupt
 */
void tmr_disable_cc_interrupt(void)
{
    3bf6:	cf 93       	push	r28
    3bf8:	df 93       	push	r29
    3bfa:	cd b7       	in	r28, 0x3d	; 61
    3bfc:	de b7       	in	r29, 0x3e	; 62
	tc_disable_compa_int(TIMER);
    3bfe:	80 e8       	ldi	r24, 0x80	; 128
    3c00:	90 e0       	ldi	r25, 0x00	; 0
    3c02:	0e 94 61 1c 	call	0x38c2	; 0x38c2 <tc_disable_compa_int>
	clear_compa_flag(TIMER);
    3c06:	80 e8       	ldi	r24, 0x80	; 128
    3c08:	90 e0       	ldi	r25, 0x00	; 0
    3c0a:	0e 94 3c 1d 	call	0x3a78	; 0x3a78 <clear_compa_flag>
}
    3c0e:	00 00       	nop
    3c10:	df 91       	pop	r29
    3c12:	cf 91       	pop	r28
    3c14:	08 95       	ret

00003c16 <tmr_enable_cc_interrupt>:

/*! \brief  to enable compare interrupt
 */
void tmr_enable_cc_interrupt(void)
{
    3c16:	cf 93       	push	r28
    3c18:	df 93       	push	r29
    3c1a:	cd b7       	in	r28, 0x3d	; 61
    3c1c:	de b7       	in	r29, 0x3e	; 62
	clear_compa_flag(TIMER);
    3c1e:	80 e8       	ldi	r24, 0x80	; 128
    3c20:	90 e0       	ldi	r25, 0x00	; 0
    3c22:	0e 94 3c 1d 	call	0x3a78	; 0x3a78 <clear_compa_flag>
	tc_enable_compa_int(TIMER);
    3c26:	80 e8       	ldi	r24, 0x80	; 128
    3c28:	90 e0       	ldi	r25, 0x00	; 0
    3c2a:	0e 94 19 1c 	call	0x3832	; 0x3832 <tc_enable_compa_int>
}
    3c2e:	00 00       	nop
    3c30:	df 91       	pop	r29
    3c32:	cf 91       	pop	r28
    3c34:	08 95       	ret

00003c36 <tmr_disable_ovf_interrupt>:

/*! \brief  to disable overflow interrupt
 */
void tmr_disable_ovf_interrupt(void)
{
    3c36:	cf 93       	push	r28
    3c38:	df 93       	push	r29
    3c3a:	cd b7       	in	r28, 0x3d	; 61
    3c3c:	de b7       	in	r29, 0x3e	; 62
	tc_enable_ovf_int(TIMER);
    3c3e:	80 e8       	ldi	r24, 0x80	; 128
    3c40:	90 e0       	ldi	r25, 0x00	; 0
    3c42:	0e 94 d1 1b 	call	0x37a2	; 0x37a2 <tc_enable_ovf_int>
	clear_ovf_flag(TIMER);
    3c46:	80 e8       	ldi	r24, 0x80	; 128
    3c48:	90 e0       	ldi	r25, 0x00	; 0
    3c4a:	0e 94 f4 1c 	call	0x39e8	; 0x39e8 <clear_ovf_flag>
}
    3c4e:	00 00       	nop
    3c50:	df 91       	pop	r29
    3c52:	cf 91       	pop	r28
    3c54:	08 95       	ret

00003c56 <tmr_stop>:

/*! \brief  to stop the running timer
 */
void tmr_stop(void)
{
    3c56:	cf 93       	push	r28
    3c58:	df 93       	push	r29
    3c5a:	cd b7       	in	r28, 0x3d	; 61
    3c5c:	de b7       	in	r29, 0x3e	; 62
	tc_disable(TIMER);
    3c5e:	80 e8       	ldi	r24, 0x80	; 128
    3c60:	90 e0       	ldi	r25, 0x00	; 0
    3c62:	0e 94 a8 25 	call	0x4b50	; 0x4b50 <tc_disable>
}
    3c66:	00 00       	nop
    3c68:	df 91       	pop	r29
    3c6a:	cf 91       	pop	r28
    3c6c:	08 95       	ret

00003c6e <tmr_write_cmpreg>:

/*! \brief  to load compare value in channel compare register
 */
void tmr_write_cmpreg(uint16_t compare_value)
{
    3c6e:	cf 93       	push	r28
    3c70:	df 93       	push	r29
    3c72:	00 d0       	rcall	.+0      	; 0x3c74 <tmr_write_cmpreg+0x6>
    3c74:	cd b7       	in	r28, 0x3d	; 61
    3c76:	de b7       	in	r29, 0x3e	; 62
    3c78:	9a 83       	std	Y+2, r25	; 0x02
    3c7a:	89 83       	std	Y+1, r24	; 0x01
	tc_write_cc(TIMER, TC_COMPA, compare_value);
    3c7c:	89 81       	ldd	r24, Y+1	; 0x01
    3c7e:	9a 81       	ldd	r25, Y+2	; 0x02
    3c80:	ac 01       	movw	r20, r24
    3c82:	68 e0       	ldi	r22, 0x08	; 8
    3c84:	80 e8       	ldi	r24, 0x80	; 128
    3c86:	90 e0       	ldi	r25, 0x00	; 0
    3c88:	0e 94 a9 1c 	call	0x3952	; 0x3952 <tc_write_cc>
}
    3c8c:	00 00       	nop
    3c8e:	0f 90       	pop	r0
    3c90:	0f 90       	pop	r0
    3c92:	df 91       	pop	r29
    3c94:	cf 91       	pop	r28
    3c96:	08 95       	ret

00003c98 <save_cpu_interrupt>:

/*! \brief  to save current interrupts status
 */
uint8_t save_cpu_interrupt(void)
{
    3c98:	cf 93       	push	r28
    3c9a:	df 93       	push	r29
    3c9c:	cd b7       	in	r28, 0x3d	; 61
    3c9e:	de b7       	in	r29, 0x3e	; 62
	return cpu_irq_save();
    3ca0:	0e 94 8f 1a 	call	0x351e	; 0x351e <cpu_irq_save>
}
    3ca4:	df 91       	pop	r29
    3ca6:	cf 91       	pop	r28
    3ca8:	08 95       	ret

00003caa <restore_cpu_interrupt>:

/*! \brief  to restore saved interrupts status
 *  \param  saved interrupt status
 */
void restore_cpu_interrupt(uint8_t flags)
{
    3caa:	cf 93       	push	r28
    3cac:	df 93       	push	r29
    3cae:	1f 92       	push	r1
    3cb0:	cd b7       	in	r28, 0x3d	; 61
    3cb2:	de b7       	in	r29, 0x3e	; 62
    3cb4:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_restore(flags);
    3cb6:	89 81       	ldd	r24, Y+1	; 0x01
    3cb8:	0e 94 9f 1a 	call	0x353e	; 0x353e <cpu_irq_restore>
}
    3cbc:	00 00       	nop
    3cbe:	0f 90       	pop	r0
    3cc0:	df 91       	pop	r29
    3cc2:	cf 91       	pop	r28
    3cc4:	08 95       	ret

00003cc6 <tmr_init>:

/*! \brief  to initialiaze hw timer
 */
uint8_t tmr_init(void)
{
    3cc6:	cf 93       	push	r28
    3cc8:	df 93       	push	r29
    3cca:	1f 92       	push	r1
    3ccc:	cd b7       	in	r28, 0x3d	; 61
    3cce:	de b7       	in	r29, 0x3e	; 62
	uint8_t timer_multiplier;

	tc_enable(TIMER);
    3cd0:	80 e8       	ldi	r24, 0x80	; 128
    3cd2:	90 e0       	ldi	r25, 0x00	; 0
    3cd4:	0e 94 8f 25 	call	0x4b1e	; 0x4b1e <tc_enable>

	tc_set_overflow_interrupt_callback(TIMER, tc_ovf_callback);
    3cd8:	6c ef       	ldi	r22, 0xFC	; 252
    3cda:	7e e1       	ldi	r23, 0x1E	; 30
    3cdc:	80 e8       	ldi	r24, 0x80	; 128
    3cde:	90 e0       	ldi	r25, 0x00	; 0
    3ce0:	0e 94 c1 25 	call	0x4b82	; 0x4b82 <tc_set_overflow_interrupt_callback>

	tc_set_mode(TIMER, NORMAL);
    3ce4:	60 e0       	ldi	r22, 0x00	; 0
    3ce6:	80 e8       	ldi	r24, 0x80	; 128
    3ce8:	90 e0       	ldi	r25, 0x00	; 0
    3cea:	0e 94 be 1d 	call	0x3b7c	; 0x3b7c <tc_set_mode>

	tc_enable_ovf_int(TIMER);
    3cee:	80 e8       	ldi	r24, 0x80	; 128
    3cf0:	90 e0       	ldi	r25, 0x00	; 0
    3cf2:	0e 94 d1 1b 	call	0x37a2	; 0x37a2 <tc_enable_ovf_int>

	configure_tc_callback(TIMER);
    3cf6:	80 e8       	ldi	r24, 0x80	; 128
    3cf8:	90 e0       	ldi	r25, 0x00	; 0
    3cfa:	0e 94 9e 1e 	call	0x3d3c	; 0x3d3c <configure_tc_callback>

	tc_disable_compa_int(TIMER);
    3cfe:	80 e8       	ldi	r24, 0x80	; 128
    3d00:	90 e0       	ldi	r25, 0x00	; 0
    3d02:	0e 94 61 1c 	call	0x38c2	; 0x38c2 <tc_disable_compa_int>

	tc_write_clock_source(TIMER, TC_CLKSEL_DIV1_gc);
    3d06:	61 e0       	ldi	r22, 0x01	; 1
    3d08:	80 e8       	ldi	r24, 0x80	; 128
    3d0a:	90 e0       	ldi	r25, 0x00	; 0
    3d0c:	0e 94 82 1b 	call	0x3704	; 0x3704 <tc_write_clock_source>

	timer_multiplier = sysclk_get_peripheral_bus_hz(TIMER) / DEF_1MHZ;
    3d10:	80 e8       	ldi	r24, 0x80	; 128
    3d12:	90 e0       	ldi	r25, 0x00	; 0
    3d14:	0e 94 c9 1a 	call	0x3592	; 0x3592 <sysclk_get_peripheral_bus_hz>
    3d18:	dc 01       	movw	r26, r24
    3d1a:	cb 01       	movw	r24, r22
    3d1c:	20 e4       	ldi	r18, 0x40	; 64
    3d1e:	32 e4       	ldi	r19, 0x42	; 66
    3d20:	4f e0       	ldi	r20, 0x0F	; 15
    3d22:	50 e0       	ldi	r21, 0x00	; 0
    3d24:	bc 01       	movw	r22, r24
    3d26:	cd 01       	movw	r24, r26
    3d28:	0e 94 12 44 	call	0x8824	; 0x8824 <__udivmodsi4>
    3d2c:	da 01       	movw	r26, r20
    3d2e:	c9 01       	movw	r24, r18
    3d30:	89 83       	std	Y+1, r24	; 0x01

	return timer_multiplier;
    3d32:	89 81       	ldd	r24, Y+1	; 0x01
}
    3d34:	0f 90       	pop	r0
    3d36:	df 91       	pop	r29
    3d38:	cf 91       	pop	r28
    3d3a:	08 95       	ret

00003d3c <configure_tc_callback>:
/*! \brief to set compare interrupt callback according to the timer channel
 * input
 *  \param timer - hw timer channel
 */
static void configure_tc_callback(volatile void *timer)
{
    3d3c:	cf 93       	push	r28
    3d3e:	df 93       	push	r29
    3d40:	00 d0       	rcall	.+0      	; 0x3d42 <configure_tc_callback+0x6>
    3d42:	cd b7       	in	r28, 0x3d	; 61
    3d44:	de b7       	in	r29, 0x3e	; 62
    3d46:	9a 83       	std	Y+2, r25	; 0x02
    3d48:	89 83       	std	Y+1, r24	; 0x01
	if ((&TCCR1A == timer) || (&TCCR3A == timer) ||
    3d4a:	89 81       	ldd	r24, Y+1	; 0x01
    3d4c:	9a 81       	ldd	r25, Y+2	; 0x02
    3d4e:	80 38       	cpi	r24, 0x80	; 128
    3d50:	91 05       	cpc	r25, r1
    3d52:	79 f0       	breq	.+30     	; 0x3d72 <configure_tc_callback+0x36>
    3d54:	89 81       	ldd	r24, Y+1	; 0x01
    3d56:	9a 81       	ldd	r25, Y+2	; 0x02
    3d58:	80 39       	cpi	r24, 0x90	; 144
    3d5a:	91 05       	cpc	r25, r1
    3d5c:	51 f0       	breq	.+20     	; 0x3d72 <configure_tc_callback+0x36>
    3d5e:	89 81       	ldd	r24, Y+1	; 0x01
    3d60:	9a 81       	ldd	r25, Y+2	; 0x02
    3d62:	80 3a       	cpi	r24, 0xA0	; 160
    3d64:	91 05       	cpc	r25, r1
    3d66:	29 f0       	breq	.+10     	; 0x3d72 <configure_tc_callback+0x36>
			(&TCCR4A == timer) || (&TCCR5A == timer)) {
    3d68:	89 81       	ldd	r24, Y+1	; 0x01
    3d6a:	9a 81       	ldd	r25, Y+2	; 0x02
    3d6c:	80 32       	cpi	r24, 0x20	; 32
    3d6e:	91 40       	sbci	r25, 0x01	; 1
    3d70:	39 f4       	brne	.+14     	; 0x3d80 <configure_tc_callback+0x44>
		tc_set_compa_interrupt_callback(TIMER, tc_cca_callback);
    3d72:	66 e0       	ldi	r22, 0x06	; 6
    3d74:	7f e1       	ldi	r23, 0x1F	; 31
    3d76:	80 e8       	ldi	r24, 0x80	; 128
    3d78:	90 e0       	ldi	r25, 0x00	; 0
    3d7a:	0e 94 02 26 	call	0x4c04	; 0x4c04 <tc_set_compa_interrupt_callback>
    3d7e:	36 c0       	rjmp	.+108    	; 0x3dec <configure_tc_callback+0xb0>
	} else if ((&TCCR1B == timer) || (&TCCR3B == timer) ||
    3d80:	89 81       	ldd	r24, Y+1	; 0x01
    3d82:	9a 81       	ldd	r25, Y+2	; 0x02
    3d84:	81 38       	cpi	r24, 0x81	; 129
    3d86:	91 05       	cpc	r25, r1
    3d88:	79 f0       	breq	.+30     	; 0x3da8 <configure_tc_callback+0x6c>
    3d8a:	89 81       	ldd	r24, Y+1	; 0x01
    3d8c:	9a 81       	ldd	r25, Y+2	; 0x02
    3d8e:	81 39       	cpi	r24, 0x91	; 145
    3d90:	91 05       	cpc	r25, r1
    3d92:	51 f0       	breq	.+20     	; 0x3da8 <configure_tc_callback+0x6c>
    3d94:	89 81       	ldd	r24, Y+1	; 0x01
    3d96:	9a 81       	ldd	r25, Y+2	; 0x02
    3d98:	81 3a       	cpi	r24, 0xA1	; 161
    3d9a:	91 05       	cpc	r25, r1
    3d9c:	29 f0       	breq	.+10     	; 0x3da8 <configure_tc_callback+0x6c>
			(&TCCR4B == timer) || (&TCCR5B == timer)) {
    3d9e:	89 81       	ldd	r24, Y+1	; 0x01
    3da0:	9a 81       	ldd	r25, Y+2	; 0x02
    3da2:	81 32       	cpi	r24, 0x21	; 33
    3da4:	91 40       	sbci	r25, 0x01	; 1
    3da6:	39 f4       	brne	.+14     	; 0x3db6 <configure_tc_callback+0x7a>
		tc_set_compb_interrupt_callback(TIMER, tc_cca_callback);
    3da8:	66 e0       	ldi	r22, 0x06	; 6
    3daa:	7f e1       	ldi	r23, 0x1F	; 31
    3dac:	80 e8       	ldi	r24, 0x80	; 128
    3dae:	90 e0       	ldi	r25, 0x00	; 0
    3db0:	0e 94 43 26 	call	0x4c86	; 0x4c86 <tc_set_compb_interrupt_callback>
    3db4:	1b c0       	rjmp	.+54     	; 0x3dec <configure_tc_callback+0xb0>
	} else if ((&TCCR1C == timer) || (&TCCR3C == timer) ||
    3db6:	89 81       	ldd	r24, Y+1	; 0x01
    3db8:	9a 81       	ldd	r25, Y+2	; 0x02
    3dba:	82 38       	cpi	r24, 0x82	; 130
    3dbc:	91 05       	cpc	r25, r1
    3dbe:	79 f0       	breq	.+30     	; 0x3dde <configure_tc_callback+0xa2>
    3dc0:	89 81       	ldd	r24, Y+1	; 0x01
    3dc2:	9a 81       	ldd	r25, Y+2	; 0x02
    3dc4:	82 39       	cpi	r24, 0x92	; 146
    3dc6:	91 05       	cpc	r25, r1
    3dc8:	51 f0       	breq	.+20     	; 0x3dde <configure_tc_callback+0xa2>
    3dca:	89 81       	ldd	r24, Y+1	; 0x01
    3dcc:	9a 81       	ldd	r25, Y+2	; 0x02
    3dce:	82 3a       	cpi	r24, 0xA2	; 162
    3dd0:	91 05       	cpc	r25, r1
    3dd2:	29 f0       	breq	.+10     	; 0x3dde <configure_tc_callback+0xa2>
			(&TCCR4C == timer) || (&TCCR5C == timer)) {
    3dd4:	89 81       	ldd	r24, Y+1	; 0x01
    3dd6:	9a 81       	ldd	r25, Y+2	; 0x02
    3dd8:	82 32       	cpi	r24, 0x22	; 34
    3dda:	91 40       	sbci	r25, 0x01	; 1
    3ddc:	39 f4       	brne	.+14     	; 0x3dec <configure_tc_callback+0xb0>
		tc_set_compc_interrupt_callback(TIMER, tc_cca_callback);
    3dde:	66 e0       	ldi	r22, 0x06	; 6
    3de0:	7f e1       	ldi	r23, 0x1F	; 31
    3de2:	80 e8       	ldi	r24, 0x80	; 128
    3de4:	90 e0       	ldi	r25, 0x00	; 0
    3de6:	0e 94 84 26 	call	0x4d08	; 0x4d08 <tc_set_compc_interrupt_callback>
	}
}
    3dea:	00 c0       	rjmp	.+0      	; 0x3dec <configure_tc_callback+0xb0>
    3dec:	00 00       	nop
    3dee:	0f 90       	pop	r0
    3df0:	0f 90       	pop	r0
    3df2:	df 91       	pop	r29
    3df4:	cf 91       	pop	r28
    3df6:	08 95       	ret

00003df8 <tc_ovf_callback>:

/*! \brief  hw timer overflow callback
 */
void tc_ovf_callback(void)
{
    3df8:	cf 93       	push	r28
    3dfa:	df 93       	push	r29
    3dfc:	cd b7       	in	r28, 0x3d	; 61
    3dfe:	de b7       	in	r29, 0x3e	; 62
	tmr_ovf_callback();
    3e00:	0e 94 0c 40 	call	0x8018	; 0x8018 <tmr_ovf_callback>
}
    3e04:	00 00       	nop
    3e06:	df 91       	pop	r29
    3e08:	cf 91       	pop	r28
    3e0a:	08 95       	ret

00003e0c <tc_cca_callback>:

/*! \brief  hw timer compare callback
 */
void tc_cca_callback(void)
{
    3e0c:	cf 93       	push	r28
    3e0e:	df 93       	push	r29
    3e10:	cd b7       	in	r28, 0x3d	; 61
    3e12:	de b7       	in	r29, 0x3e	; 62
	tmr_cca_callback();
    3e14:	0e 94 44 40 	call	0x8088	; 0x8088 <tmr_cca_callback>
}
    3e18:	00 00       	nop
    3e1a:	df 91       	pop	r29
    3e1c:	cf 91       	pop	r28
    3e1e:	08 95       	ret

00003e20 <cpu_irq_save>:
#endif

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
    3e20:	cf 93       	push	r28
    3e22:	df 93       	push	r29
    3e24:	1f 92       	push	r1
    3e26:	cd b7       	in	r28, 0x3d	; 61
    3e28:	de b7       	in	r29, 0x3e	; 62
	irqflags_t flags = SREG;
    3e2a:	8f e5       	ldi	r24, 0x5F	; 95
    3e2c:	90 e0       	ldi	r25, 0x00	; 0
    3e2e:	fc 01       	movw	r30, r24
    3e30:	80 81       	ld	r24, Z
    3e32:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    3e34:	f8 94       	cli
	return flags;
    3e36:	89 81       	ldd	r24, Y+1	; 0x01
}
    3e38:	0f 90       	pop	r0
    3e3a:	df 91       	pop	r29
    3e3c:	cf 91       	pop	r28
    3e3e:	08 95       	ret

00003e40 <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
    3e40:	cf 93       	push	r28
    3e42:	df 93       	push	r29
    3e44:	1f 92       	push	r1
    3e46:	cd b7       	in	r28, 0x3d	; 61
    3e48:	de b7       	in	r29, 0x3e	; 62
    3e4a:	89 83       	std	Y+1, r24	; 0x01
	barrier();
	SREG = flags;
    3e4c:	8f e5       	ldi	r24, 0x5F	; 95
    3e4e:	90 e0       	ldi	r25, 0x00	; 0
    3e50:	29 81       	ldd	r18, Y+1	; 0x01
    3e52:	fc 01       	movw	r30, r24
    3e54:	20 83       	st	Z, r18
}
    3e56:	00 00       	nop
    3e58:	0f 90       	pop	r0
    3e5a:	df 91       	pop	r29
    3e5c:	cf 91       	pop	r28
    3e5e:	08 95       	ret

00003e60 <flash_write>:
#include "flash.h"
#include "sysclk.h"
#include "status_codes.h"

void flash_write(uint32_t flash_addr, uint32_t length, uint8_t *data)
{
    3e60:	ef 92       	push	r14
    3e62:	ff 92       	push	r15
    3e64:	0f 93       	push	r16
    3e66:	1f 93       	push	r17
    3e68:	cf 93       	push	r28
    3e6a:	df 93       	push	r29
    3e6c:	cd b7       	in	r28, 0x3d	; 61
    3e6e:	de b7       	in	r29, 0x3e	; 62
    3e70:	2c 97       	sbiw	r28, 0x0c	; 12
    3e72:	0f b6       	in	r0, 0x3f	; 63
    3e74:	f8 94       	cli
    3e76:	de bf       	out	0x3e, r29	; 62
    3e78:	0f be       	out	0x3f, r0	; 63
    3e7a:	cd bf       	out	0x3d, r28	; 61
    3e7c:	6b 83       	std	Y+3, r22	; 0x03
    3e7e:	7c 83       	std	Y+4, r23	; 0x04
    3e80:	8d 83       	std	Y+5, r24	; 0x05
    3e82:	9e 83       	std	Y+6, r25	; 0x06
    3e84:	2f 83       	std	Y+7, r18	; 0x07
    3e86:	38 87       	std	Y+8, r19	; 0x08
    3e88:	49 87       	std	Y+9, r20	; 0x09
    3e8a:	5a 87       	std	Y+10, r21	; 0x0a
    3e8c:	1c 87       	std	Y+12, r17	; 0x0c
    3e8e:	0b 87       	std	Y+11, r16	; 0x0b
	static uint8_t temp_buf[SPM_PAGESIZE];
	static uint32_t remaining_len;
	remaining_len = length;
    3e90:	8f 81       	ldd	r24, Y+7	; 0x07
    3e92:	98 85       	ldd	r25, Y+8	; 0x08
    3e94:	a9 85       	ldd	r26, Y+9	; 0x09
    3e96:	ba 85       	ldd	r27, Y+10	; 0x0a
    3e98:	80 93 93 0e 	sts	0x0E93, r24	; 0x800e93 <remaining_len.3222>
    3e9c:	90 93 94 0e 	sts	0x0E94, r25	; 0x800e94 <remaining_len.3222+0x1>
    3ea0:	a0 93 95 0e 	sts	0x0E95, r26	; 0x800e95 <remaining_len.3222+0x2>
    3ea4:	b0 93 96 0e 	sts	0x0E96, r27	; 0x800e96 <remaining_len.3222+0x3>
	uint8_t *ptr = data;
    3ea8:	8b 85       	ldd	r24, Y+11	; 0x0b
    3eaa:	9c 85       	ldd	r25, Y+12	; 0x0c
    3eac:	9a 83       	std	Y+2, r25	; 0x02
    3eae:	89 83       	std	Y+1, r24	; 0x01
	static uint32_t next_page_addr;
	static uint16_t current_len;
	do {
		next_page_addr
			= ((flash_addr +
				SPM_PAGESIZE) - (flash_addr % SPM_PAGESIZE));
    3eb0:	8b 81       	ldd	r24, Y+3	; 0x03
    3eb2:	9c 81       	ldd	r25, Y+4	; 0x04
    3eb4:	ad 81       	ldd	r26, Y+5	; 0x05
    3eb6:	be 81       	ldd	r27, Y+6	; 0x06
    3eb8:	88 27       	eor	r24, r24
    3eba:	9f 5f       	subi	r25, 0xFF	; 255
    3ebc:	af 4f       	sbci	r26, 0xFF	; 255
    3ebe:	bf 4f       	sbci	r27, 0xFF	; 255
	uint8_t *ptr = data;
	static uint32_t next_page_addr;
	static uint16_t current_len;
	do {
		next_page_addr
			= ((flash_addr +
    3ec0:	80 93 97 0e 	sts	0x0E97, r24	; 0x800e97 <next_page_addr.3224>
    3ec4:	90 93 98 0e 	sts	0x0E98, r25	; 0x800e98 <next_page_addr.3224+0x1>
    3ec8:	a0 93 99 0e 	sts	0x0E99, r26	; 0x800e99 <next_page_addr.3224+0x2>
    3ecc:	b0 93 9a 0e 	sts	0x0E9A, r27	; 0x800e9a <next_page_addr.3224+0x3>
				SPM_PAGESIZE) - (flash_addr % SPM_PAGESIZE));

		/* copy the data in the page to be written into a temporary
		 * buffer,before erasing */
		flash_read((flash_addr - (flash_addr % SPM_PAGESIZE)),
    3ed0:	8b 81       	ldd	r24, Y+3	; 0x03
    3ed2:	9c 81       	ldd	r25, Y+4	; 0x04
    3ed4:	ad 81       	ldd	r26, Y+5	; 0x05
    3ed6:	be 81       	ldd	r27, Y+6	; 0x06
    3ed8:	88 27       	eor	r24, r24
    3eda:	0b e9       	ldi	r16, 0x9B	; 155
    3edc:	1e e0       	ldi	r17, 0x0E	; 14
    3ede:	20 e0       	ldi	r18, 0x00	; 0
    3ee0:	31 e0       	ldi	r19, 0x01	; 1
    3ee2:	40 e0       	ldi	r20, 0x00	; 0
    3ee4:	50 e0       	ldi	r21, 0x00	; 0
    3ee6:	bc 01       	movw	r22, r24
    3ee8:	cd 01       	movw	r24, r26
    3eea:	0e 94 23 20 	call	0x4046	; 0x4046 <flash_read>
				SPM_PAGESIZE, temp_buf);

		/* fill the temporary page buffer starting from address 0 */
		flash_fill_page_buffer(0x0000, SPM_PAGESIZE, temp_buf);
    3eee:	2b e9       	ldi	r18, 0x9B	; 155
    3ef0:	3e e0       	ldi	r19, 0x0E	; 14
    3ef2:	40 e0       	ldi	r20, 0x00	; 0
    3ef4:	51 e0       	ldi	r21, 0x01	; 1
    3ef6:	60 e0       	ldi	r22, 0x00	; 0
    3ef8:	70 e0       	ldi	r23, 0x00	; 0
    3efa:	cb 01       	movw	r24, r22
    3efc:	0e 94 3e 48 	call	0x907c	; 0x907c <flash_fill_page_buffer>

		/* If the length of bytes to be written crosses the current
		 * page,
		 *      write till the end of the current page and calculate the
		 * remaining length to be written*/
		if ((flash_addr + remaining_len) > (next_page_addr)) {
    3f00:	20 91 93 0e 	lds	r18, 0x0E93	; 0x800e93 <remaining_len.3222>
    3f04:	30 91 94 0e 	lds	r19, 0x0E94	; 0x800e94 <remaining_len.3222+0x1>
    3f08:	40 91 95 0e 	lds	r20, 0x0E95	; 0x800e95 <remaining_len.3222+0x2>
    3f0c:	50 91 96 0e 	lds	r21, 0x0E96	; 0x800e96 <remaining_len.3222+0x3>
    3f10:	8b 81       	ldd	r24, Y+3	; 0x03
    3f12:	9c 81       	ldd	r25, Y+4	; 0x04
    3f14:	ad 81       	ldd	r26, Y+5	; 0x05
    3f16:	be 81       	ldd	r27, Y+6	; 0x06
    3f18:	28 0f       	add	r18, r24
    3f1a:	39 1f       	adc	r19, r25
    3f1c:	4a 1f       	adc	r20, r26
    3f1e:	5b 1f       	adc	r21, r27
    3f20:	80 91 97 0e 	lds	r24, 0x0E97	; 0x800e97 <next_page_addr.3224>
    3f24:	90 91 98 0e 	lds	r25, 0x0E98	; 0x800e98 <next_page_addr.3224+0x1>
    3f28:	a0 91 99 0e 	lds	r26, 0x0E99	; 0x800e99 <next_page_addr.3224+0x2>
    3f2c:	b0 91 9a 0e 	lds	r27, 0x0E9A	; 0x800e9a <next_page_addr.3224+0x3>
    3f30:	82 17       	cp	r24, r18
    3f32:	93 07       	cpc	r25, r19
    3f34:	a4 07       	cpc	r26, r20
    3f36:	b5 07       	cpc	r27, r21
    3f38:	a0 f4       	brcc	.+40     	; 0x3f62 <flash_write+0x102>
			current_len = (next_page_addr - flash_addr);
    3f3a:	80 91 97 0e 	lds	r24, 0x0E97	; 0x800e97 <next_page_addr.3224>
    3f3e:	90 91 98 0e 	lds	r25, 0x0E98	; 0x800e98 <next_page_addr.3224+0x1>
    3f42:	a0 91 99 0e 	lds	r26, 0x0E99	; 0x800e99 <next_page_addr.3224+0x2>
    3f46:	b0 91 9a 0e 	lds	r27, 0x0E9A	; 0x800e9a <next_page_addr.3224+0x3>
    3f4a:	9c 01       	movw	r18, r24
    3f4c:	8b 81       	ldd	r24, Y+3	; 0x03
    3f4e:	9c 81       	ldd	r25, Y+4	; 0x04
    3f50:	79 01       	movw	r14, r18
    3f52:	e8 1a       	sub	r14, r24
    3f54:	f9 0a       	sbc	r15, r25
    3f56:	c7 01       	movw	r24, r14
    3f58:	90 93 9c 0f 	sts	0x0F9C, r25	; 0x800f9c <current_len.3225+0x1>
    3f5c:	80 93 9b 0f 	sts	0x0F9B, r24	; 0x800f9b <current_len.3225>
    3f60:	0c c0       	rjmp	.+24     	; 0x3f7a <flash_write+0x11a>
		} else {
			current_len = remaining_len;
    3f62:	80 91 93 0e 	lds	r24, 0x0E93	; 0x800e93 <remaining_len.3222>
    3f66:	90 91 94 0e 	lds	r25, 0x0E94	; 0x800e94 <remaining_len.3222+0x1>
    3f6a:	a0 91 95 0e 	lds	r26, 0x0E95	; 0x800e95 <remaining_len.3222+0x2>
    3f6e:	b0 91 96 0e 	lds	r27, 0x0E96	; 0x800e96 <remaining_len.3222+0x3>
    3f72:	90 93 9c 0f 	sts	0x0F9C, r25	; 0x800f9c <current_len.3225+0x1>
    3f76:	80 93 9b 0f 	sts	0x0F9B, r24	; 0x800f9b <current_len.3225>
		}

		remaining_len -= current_len;
    3f7a:	20 91 93 0e 	lds	r18, 0x0E93	; 0x800e93 <remaining_len.3222>
    3f7e:	30 91 94 0e 	lds	r19, 0x0E94	; 0x800e94 <remaining_len.3222+0x1>
    3f82:	40 91 95 0e 	lds	r20, 0x0E95	; 0x800e95 <remaining_len.3222+0x2>
    3f86:	50 91 96 0e 	lds	r21, 0x0E96	; 0x800e96 <remaining_len.3222+0x3>
    3f8a:	80 91 9b 0f 	lds	r24, 0x0F9B	; 0x800f9b <current_len.3225>
    3f8e:	90 91 9c 0f 	lds	r25, 0x0F9C	; 0x800f9c <current_len.3225+0x1>
    3f92:	cc 01       	movw	r24, r24
    3f94:	a0 e0       	ldi	r26, 0x00	; 0
    3f96:	b0 e0       	ldi	r27, 0x00	; 0
    3f98:	79 01       	movw	r14, r18
    3f9a:	8a 01       	movw	r16, r20
    3f9c:	e8 1a       	sub	r14, r24
    3f9e:	f9 0a       	sbc	r15, r25
    3fa0:	0a 0b       	sbc	r16, r26
    3fa2:	1b 0b       	sbc	r17, r27
    3fa4:	d8 01       	movw	r26, r16
    3fa6:	c7 01       	movw	r24, r14
    3fa8:	80 93 93 0e 	sts	0x0E93, r24	; 0x800e93 <remaining_len.3222>
    3fac:	90 93 94 0e 	sts	0x0E94, r25	; 0x800e94 <remaining_len.3222+0x1>
    3fb0:	a0 93 95 0e 	sts	0x0E95, r26	; 0x800e95 <remaining_len.3222+0x2>
    3fb4:	b0 93 96 0e 	sts	0x0E96, r27	; 0x800e96 <remaining_len.3222+0x3>

		/* Fill the page buffer with the data to be written at the given
		 * address */
		flash_fill_page_buffer(flash_addr, current_len, ptr);
    3fb8:	40 91 9b 0f 	lds	r20, 0x0F9B	; 0x800f9b <current_len.3225>
    3fbc:	50 91 9c 0f 	lds	r21, 0x0F9C	; 0x800f9c <current_len.3225+0x1>
    3fc0:	29 81       	ldd	r18, Y+1	; 0x01
    3fc2:	3a 81       	ldd	r19, Y+2	; 0x02
    3fc4:	8b 81       	ldd	r24, Y+3	; 0x03
    3fc6:	9c 81       	ldd	r25, Y+4	; 0x04
    3fc8:	ad 81       	ldd	r26, Y+5	; 0x05
    3fca:	be 81       	ldd	r27, Y+6	; 0x06
    3fcc:	bc 01       	movw	r22, r24
    3fce:	cd 01       	movw	r24, r26
    3fd0:	0e 94 3e 48 	call	0x907c	; 0x907c <flash_fill_page_buffer>
		/* Erase and program flash page */
		flash_program_page(flash_addr);
    3fd4:	8b 81       	ldd	r24, Y+3	; 0x03
    3fd6:	9c 81       	ldd	r25, Y+4	; 0x04
    3fd8:	ad 81       	ldd	r26, Y+5	; 0x05
    3fda:	be 81       	ldd	r27, Y+6	; 0x06
    3fdc:	bc 01       	movw	r22, r24
    3fde:	cd 01       	movw	r24, r26
    3fe0:	0e 94 4b 49 	call	0x9296	; 0x9296 <flash_program_page>
		flash_addr = next_page_addr;
    3fe4:	80 91 97 0e 	lds	r24, 0x0E97	; 0x800e97 <next_page_addr.3224>
    3fe8:	90 91 98 0e 	lds	r25, 0x0E98	; 0x800e98 <next_page_addr.3224+0x1>
    3fec:	a0 91 99 0e 	lds	r26, 0x0E99	; 0x800e99 <next_page_addr.3224+0x2>
    3ff0:	b0 91 9a 0e 	lds	r27, 0x0E9A	; 0x800e9a <next_page_addr.3224+0x3>
    3ff4:	8b 83       	std	Y+3, r24	; 0x03
    3ff6:	9c 83       	std	Y+4, r25	; 0x04
    3ff8:	ad 83       	std	Y+5, r26	; 0x05
    3ffa:	be 83       	std	Y+6, r27	; 0x06
		ptr += current_len;
    3ffc:	80 91 9b 0f 	lds	r24, 0x0F9B	; 0x800f9b <current_len.3225>
    4000:	90 91 9c 0f 	lds	r25, 0x0F9C	; 0x800f9c <current_len.3225+0x1>
    4004:	29 81       	ldd	r18, Y+1	; 0x01
    4006:	3a 81       	ldd	r19, Y+2	; 0x02
    4008:	82 0f       	add	r24, r18
    400a:	93 1f       	adc	r25, r19
    400c:	9a 83       	std	Y+2, r25	; 0x02
    400e:	89 83       	std	Y+1, r24	; 0x01
	} while (remaining_len != 0); /* Check if there is remaining  data  to
    4010:	80 91 93 0e 	lds	r24, 0x0E93	; 0x800e93 <remaining_len.3222>
    4014:	90 91 94 0e 	lds	r25, 0x0E94	; 0x800e94 <remaining_len.3222+0x1>
    4018:	a0 91 95 0e 	lds	r26, 0x0E95	; 0x800e95 <remaining_len.3222+0x2>
    401c:	b0 91 96 0e 	lds	r27, 0x0E96	; 0x800e96 <remaining_len.3222+0x3>
    4020:	89 2b       	or	r24, r25
    4022:	8a 2b       	or	r24, r26
    4024:	8b 2b       	or	r24, r27
    4026:	09 f0       	breq	.+2      	; 0x402a <__DATA_REGION_LENGTH__+0x2a>
    4028:	43 cf       	rjmp	.-378    	; 0x3eb0 <flash_write+0x50>
	                               * be written to the next page */
}
    402a:	00 00       	nop
    402c:	2c 96       	adiw	r28, 0x0c	; 12
    402e:	0f b6       	in	r0, 0x3f	; 63
    4030:	f8 94       	cli
    4032:	de bf       	out	0x3e, r29	; 62
    4034:	0f be       	out	0x3f, r0	; 63
    4036:	cd bf       	out	0x3d, r28	; 61
    4038:	df 91       	pop	r29
    403a:	cf 91       	pop	r28
    403c:	1f 91       	pop	r17
    403e:	0f 91       	pop	r16
    4040:	ff 90       	pop	r15
    4042:	ef 90       	pop	r14
    4044:	08 95       	ret

00004046 <flash_read>:

	cpu_irq_restore(flags);
}

void flash_read(uint32_t read_addr, uint32_t len, uint8_t *ret_buf)
{
    4046:	0f 93       	push	r16
    4048:	1f 93       	push	r17
    404a:	cf 93       	push	r28
    404c:	df 93       	push	r29
    404e:	cd b7       	in	r28, 0x3d	; 61
    4050:	de b7       	in	r29, 0x3e	; 62
    4052:	62 97       	sbiw	r28, 0x12	; 18
    4054:	0f b6       	in	r0, 0x3f	; 63
    4056:	f8 94       	cli
    4058:	de bf       	out	0x3e, r29	; 62
    405a:	0f be       	out	0x3f, r0	; 63
    405c:	cd bf       	out	0x3d, r28	; 61
    405e:	69 87       	std	Y+9, r22	; 0x09
    4060:	7a 87       	std	Y+10, r23	; 0x0a
    4062:	8b 87       	std	Y+11, r24	; 0x0b
    4064:	9c 87       	std	Y+12, r25	; 0x0c
    4066:	2d 87       	std	Y+13, r18	; 0x0d
    4068:	3e 87       	std	Y+14, r19	; 0x0e
    406a:	4f 87       	std	Y+15, r20	; 0x0f
    406c:	58 8b       	std	Y+16, r21	; 0x10
    406e:	1a 8b       	std	Y+18, r17	; 0x12
    4070:	09 8b       	std	Y+17, r16	; 0x11
	irqflags_t flags;

	flags = cpu_irq_save();
    4072:	0e 94 10 1f 	call	0x3e20	; 0x3e20 <cpu_irq_save>
    4076:	8b 83       	std	Y+3, r24	; 0x03

	for (uint16_t k = 0; k < len; k++) {
    4078:	1a 82       	std	Y+2, r1	; 0x02
    407a:	19 82       	std	Y+1, r1	; 0x01
    407c:	29 c0       	rjmp	.+82     	; 0x40d0 <flash_read+0x8a>
		/* copy a byte and push to the ret_buf */
		*(ret_buf + k) = PGM_READ_BYTE_FAR(read_addr++);
    407e:	29 89       	ldd	r18, Y+17	; 0x11
    4080:	3a 89       	ldd	r19, Y+18	; 0x12
    4082:	89 81       	ldd	r24, Y+1	; 0x01
    4084:	9a 81       	ldd	r25, Y+2	; 0x02
    4086:	b9 01       	movw	r22, r18
    4088:	68 0f       	add	r22, r24
    408a:	79 1f       	adc	r23, r25
    408c:	89 85       	ldd	r24, Y+9	; 0x09
    408e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4090:	ab 85       	ldd	r26, Y+11	; 0x0b
    4092:	bc 85       	ldd	r27, Y+12	; 0x0c
    4094:	9c 01       	movw	r18, r24
    4096:	ad 01       	movw	r20, r26
    4098:	2f 5f       	subi	r18, 0xFF	; 255
    409a:	3f 4f       	sbci	r19, 0xFF	; 255
    409c:	4f 4f       	sbci	r20, 0xFF	; 255
    409e:	5f 4f       	sbci	r21, 0xFF	; 255
    40a0:	29 87       	std	Y+9, r18	; 0x09
    40a2:	3a 87       	std	Y+10, r19	; 0x0a
    40a4:	4b 87       	std	Y+11, r20	; 0x0b
    40a6:	5c 87       	std	Y+12, r21	; 0x0c
    40a8:	8c 83       	std	Y+4, r24	; 0x04
    40aa:	9d 83       	std	Y+5, r25	; 0x05
    40ac:	ae 83       	std	Y+6, r26	; 0x06
    40ae:	bf 83       	std	Y+7, r27	; 0x07
    40b0:	8c 81       	ldd	r24, Y+4	; 0x04
    40b2:	9d 81       	ldd	r25, Y+5	; 0x05
    40b4:	ae 81       	ldd	r26, Y+6	; 0x06
    40b6:	bf 81       	ldd	r27, Y+7	; 0x07
    40b8:	ab bf       	out	0x3b, r26	; 59
    40ba:	fc 01       	movw	r30, r24
    40bc:	87 91       	elpm	r24, Z+
    40be:	88 87       	std	Y+8, r24	; 0x08
    40c0:	88 85       	ldd	r24, Y+8	; 0x08
    40c2:	fb 01       	movw	r30, r22
    40c4:	80 83       	st	Z, r24
{
	irqflags_t flags;

	flags = cpu_irq_save();

	for (uint16_t k = 0; k < len; k++) {
    40c6:	89 81       	ldd	r24, Y+1	; 0x01
    40c8:	9a 81       	ldd	r25, Y+2	; 0x02
    40ca:	01 96       	adiw	r24, 0x01	; 1
    40cc:	9a 83       	std	Y+2, r25	; 0x02
    40ce:	89 83       	std	Y+1, r24	; 0x01
    40d0:	89 81       	ldd	r24, Y+1	; 0x01
    40d2:	9a 81       	ldd	r25, Y+2	; 0x02
    40d4:	9c 01       	movw	r18, r24
    40d6:	40 e0       	ldi	r20, 0x00	; 0
    40d8:	50 e0       	ldi	r21, 0x00	; 0
    40da:	8d 85       	ldd	r24, Y+13	; 0x0d
    40dc:	9e 85       	ldd	r25, Y+14	; 0x0e
    40de:	af 85       	ldd	r26, Y+15	; 0x0f
    40e0:	b8 89       	ldd	r27, Y+16	; 0x10
    40e2:	28 17       	cp	r18, r24
    40e4:	39 07       	cpc	r19, r25
    40e6:	4a 07       	cpc	r20, r26
    40e8:	5b 07       	cpc	r21, r27
    40ea:	48 f2       	brcs	.-110    	; 0x407e <flash_read+0x38>
		/* copy a byte and push to the ret_buf */
		*(ret_buf + k) = PGM_READ_BYTE_FAR(read_addr++);
	}
	cpu_irq_restore(flags);
    40ec:	8b 81       	ldd	r24, Y+3	; 0x03
    40ee:	0e 94 20 1f 	call	0x3e40	; 0x3e40 <cpu_irq_restore>
}
    40f2:	00 00       	nop
    40f4:	62 96       	adiw	r28, 0x12	; 18
    40f6:	0f b6       	in	r0, 0x3f	; 63
    40f8:	f8 94       	cli
    40fa:	de bf       	out	0x3e, r29	; 62
    40fc:	0f be       	out	0x3f, r0	; 63
    40fe:	cd bf       	out	0x3d, r28	; 61
    4100:	df 91       	pop	r29
    4102:	cf 91       	pop	r28
    4104:	1f 91       	pop	r17
    4106:	0f 91       	pop	r16
    4108:	08 95       	ret

0000410a <cpu_irq_save>:
#endif

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
    410a:	cf 93       	push	r28
    410c:	df 93       	push	r29
    410e:	1f 92       	push	r1
    4110:	cd b7       	in	r28, 0x3d	; 61
    4112:	de b7       	in	r29, 0x3e	; 62
	irqflags_t flags = SREG;
    4114:	8f e5       	ldi	r24, 0x5F	; 95
    4116:	90 e0       	ldi	r25, 0x00	; 0
    4118:	fc 01       	movw	r30, r24
    411a:	80 81       	ld	r24, Z
    411c:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    411e:	f8 94       	cli
	return flags;
    4120:	89 81       	ldd	r24, Y+1	; 0x01
}
    4122:	0f 90       	pop	r0
    4124:	df 91       	pop	r29
    4126:	cf 91       	pop	r28
    4128:	08 95       	ret

0000412a <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
    412a:	cf 93       	push	r28
    412c:	df 93       	push	r29
    412e:	1f 92       	push	r1
    4130:	cd b7       	in	r28, 0x3d	; 61
    4132:	de b7       	in	r29, 0x3e	; 62
    4134:	89 83       	std	Y+1, r24	; 0x01
	barrier();
	SREG = flags;
    4136:	8f e5       	ldi	r24, 0x5F	; 95
    4138:	90 e0       	ldi	r25, 0x00	; 0
    413a:	29 81       	ldd	r18, Y+1	; 0x01
    413c:	fc 01       	movw	r30, r24
    413e:	20 83       	st	Z, r18
}
    4140:	00 00       	nop
    4142:	0f 90       	pop	r0
    4144:	df 91       	pop	r29
    4146:	cf 91       	pop	r28
    4148:	08 95       	ret

0000414a <sysclk_enable_peripheral_clock>:
 *  has an associated clock on the HSB bus, this will be enabled also.
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
    414a:	cf 93       	push	r28
    414c:	df 93       	push	r29
    414e:	00 d0       	rcall	.+0      	; 0x4150 <sysclk_enable_peripheral_clock+0x6>
    4150:	cd b7       	in	r28, 0x3d	; 61
    4152:	de b7       	in	r29, 0x3e	; 62
    4154:	9a 83       	std	Y+2, r25	; 0x02
    4156:	89 83       	std	Y+1, r24	; 0x01
	if (module == NULL) {
    4158:	89 81       	ldd	r24, Y+1	; 0x01
    415a:	9a 81       	ldd	r25, Y+2	; 0x02
    415c:	89 2b       	or	r24, r25
    415e:	09 f4       	brne	.+2      	; 0x4162 <sysclk_enable_peripheral_clock+0x18>
    4160:	7b c0       	rjmp	.+246    	; 0x4258 <__stack+0x59>
		Assert(false);
	}

#if !MEGA_XX_UN0 && !MEGA_XX_UN1
	else if (module == &ADC) {
    4162:	89 81       	ldd	r24, Y+1	; 0x01
    4164:	9a 81       	ldd	r25, Y+2	; 0x02
    4166:	88 37       	cpi	r24, 0x78	; 120
    4168:	91 05       	cpc	r25, r1
    416a:	49 f4       	brne	.+18     	; 0x417e <sysclk_enable_peripheral_clock+0x34>
		sysclk_enable_module(POWER_RED_REG0, PRADC_bm);
    416c:	61 e0       	ldi	r22, 0x01	; 1
    416e:	80 e0       	ldi	r24, 0x00	; 0
    4170:	0e 94 d9 33 	call	0x67b2	; 0x67b2 <sysclk_enable_module>
#if MEGA_RF
		sysclk_enable_module(POWER_RED_REG0, PRPGA_bm);
    4174:	60 e1       	ldi	r22, 0x10	; 16
    4176:	80 e0       	ldi	r24, 0x00	; 0
    4178:	0e 94 d9 33 	call	0x67b2	; 0x67b2 <sysclk_enable_module>
#endif
#endif
	else {
		Assert(false);
	}
}
    417c:	6d c0       	rjmp	.+218    	; 0x4258 <__stack+0x59>
	else if (module == &ADC) {
		sysclk_enable_module(POWER_RED_REG0, PRADC_bm);
#if MEGA_RF
		sysclk_enable_module(POWER_RED_REG0, PRPGA_bm);
#endif
	} else if (module == &UCSR0A) {
    417e:	89 81       	ldd	r24, Y+1	; 0x01
    4180:	9a 81       	ldd	r25, Y+2	; 0x02
    4182:	80 3c       	cpi	r24, 0xC0	; 192
    4184:	91 05       	cpc	r25, r1
    4186:	29 f4       	brne	.+10     	; 0x4192 <sysclk_enable_peripheral_clock+0x48>
		sysclk_enable_module(POWER_RED_REG0, PRUSART0_bm);
    4188:	62 e0       	ldi	r22, 0x02	; 2
    418a:	80 e0       	ldi	r24, 0x00	; 0
    418c:	0e 94 d9 33 	call	0x67b2	; 0x67b2 <sysclk_enable_module>
#endif
#endif
	else {
		Assert(false);
	}
}
    4190:	63 c0       	rjmp	.+198    	; 0x4258 <__stack+0x59>
#endif
	} else if (module == &UCSR0A) {
		sysclk_enable_module(POWER_RED_REG0, PRUSART0_bm);
	}
#if MEGA_RF
	else if (module == &SPCR) {
    4192:	89 81       	ldd	r24, Y+1	; 0x01
    4194:	9a 81       	ldd	r25, Y+2	; 0x02
    4196:	8c 34       	cpi	r24, 0x4C	; 76
    4198:	91 05       	cpc	r25, r1
    419a:	29 f4       	brne	.+10     	; 0x41a6 <sysclk_enable_peripheral_clock+0x5c>
		sysclk_enable_module(POWER_RED_REG0, PRSPI_bm);
    419c:	64 e0       	ldi	r22, 0x04	; 4
    419e:	80 e0       	ldi	r24, 0x00	; 0
    41a0:	0e 94 d9 33 	call	0x67b2	; 0x67b2 <sysclk_enable_module>
#endif
#endif
	else {
		Assert(false);
	}
}
    41a4:	59 c0       	rjmp	.+178    	; 0x4258 <__stack+0x59>
	else if (module == &SPCR) {
		sysclk_enable_module(POWER_RED_REG0, PRSPI_bm);
	}
#endif

	else if (module == &TCCR1A) {
    41a6:	89 81       	ldd	r24, Y+1	; 0x01
    41a8:	9a 81       	ldd	r25, Y+2	; 0x02
    41aa:	80 38       	cpi	r24, 0x80	; 128
    41ac:	91 05       	cpc	r25, r1
    41ae:	29 f4       	brne	.+10     	; 0x41ba <sysclk_enable_peripheral_clock+0x70>
		sysclk_enable_module(POWER_RED_REG0, PRTIM1_bm);
    41b0:	68 e0       	ldi	r22, 0x08	; 8
    41b2:	80 e0       	ldi	r24, 0x00	; 0
    41b4:	0e 94 d9 33 	call	0x67b2	; 0x67b2 <sysclk_enable_module>
#endif
#endif
	else {
		Assert(false);
	}
}
    41b8:	4f c0       	rjmp	.+158    	; 0x4258 <__stack+0x59>
		sysclk_enable_module(POWER_RED_REG0, PRLCD_bm);
	}
#endif

#if !MEGA_XX_UN2
	else if (module == &TCCR0A) {
    41ba:	89 81       	ldd	r24, Y+1	; 0x01
    41bc:	9a 81       	ldd	r25, Y+2	; 0x02
    41be:	84 34       	cpi	r24, 0x44	; 68
    41c0:	91 05       	cpc	r25, r1
    41c2:	29 f4       	brne	.+10     	; 0x41ce <sysclk_enable_peripheral_clock+0x84>
		sysclk_enable_module(POWER_RED_REG0, PRTIM0_bm);
    41c4:	60 e2       	ldi	r22, 0x20	; 32
    41c6:	80 e0       	ldi	r24, 0x00	; 0
    41c8:	0e 94 d9 33 	call	0x67b2	; 0x67b2 <sysclk_enable_module>
#endif
#endif
	else {
		Assert(false);
	}
}
    41cc:	45 c0       	rjmp	.+138    	; 0x4258 <__stack+0x59>
#endif

#if !MEGA_XX_UN2
	else if (module == &TCCR0A) {
		sysclk_enable_module(POWER_RED_REG0, PRTIM0_bm);
	} else if (module == &TCCR2A) {
    41ce:	89 81       	ldd	r24, Y+1	; 0x01
    41d0:	9a 81       	ldd	r25, Y+2	; 0x02
    41d2:	80 3b       	cpi	r24, 0xB0	; 176
    41d4:	91 05       	cpc	r25, r1
    41d6:	29 f4       	brne	.+10     	; 0x41e2 <sysclk_enable_peripheral_clock+0x98>
		sysclk_enable_module(POWER_RED_REG0, PRTIM2_bm);
    41d8:	60 e4       	ldi	r22, 0x40	; 64
    41da:	80 e0       	ldi	r24, 0x00	; 0
    41dc:	0e 94 d9 33 	call	0x67b2	; 0x67b2 <sysclk_enable_module>
#endif
#endif
	else {
		Assert(false);
	}
}
    41e0:	3b c0       	rjmp	.+118    	; 0x4258 <__stack+0x59>
#if !MEGA_XX_UN2
	else if (module == &TCCR0A) {
		sysclk_enable_module(POWER_RED_REG0, PRTIM0_bm);
	} else if (module == &TCCR2A) {
		sysclk_enable_module(POWER_RED_REG0, PRTIM2_bm);
	} else if (module == &TWBR) {
    41e2:	89 81       	ldd	r24, Y+1	; 0x01
    41e4:	9a 81       	ldd	r25, Y+2	; 0x02
    41e6:	88 3b       	cpi	r24, 0xB8	; 184
    41e8:	91 05       	cpc	r25, r1
    41ea:	29 f4       	brne	.+10     	; 0x41f6 <sysclk_enable_peripheral_clock+0xac>
		sysclk_enable_module(POWER_RED_REG0, PRTWI_bm);
    41ec:	60 e8       	ldi	r22, 0x80	; 128
    41ee:	80 e0       	ldi	r24, 0x00	; 0
    41f0:	0e 94 d9 33 	call	0x67b2	; 0x67b2 <sysclk_enable_module>
#endif
#endif
	else {
		Assert(false);
	}
}
    41f4:	31 c0       	rjmp	.+98     	; 0x4258 <__stack+0x59>
		sysclk_enable_module(POWER_RED_REG0, PRTWI_bm);
	}
#endif

#if MEGA_RF
	else if (module == &UCSR1A) {
    41f6:	89 81       	ldd	r24, Y+1	; 0x01
    41f8:	9a 81       	ldd	r25, Y+2	; 0x02
    41fa:	88 3c       	cpi	r24, 0xC8	; 200
    41fc:	91 05       	cpc	r25, r1
    41fe:	29 f4       	brne	.+10     	; 0x420a <__stack+0xb>
		sysclk_enable_module(POWER_RED_REG1, PRUSART1_bm);
    4200:	61 e0       	ldi	r22, 0x01	; 1
    4202:	81 e0       	ldi	r24, 0x01	; 1
    4204:	0e 94 d9 33 	call	0x67b2	; 0x67b2 <sysclk_enable_module>
#endif
#endif
	else {
		Assert(false);
	}
}
    4208:	27 c0       	rjmp	.+78     	; 0x4258 <__stack+0x59>
#endif

#if MEGA_RF
	else if (module == &UCSR1A) {
		sysclk_enable_module(POWER_RED_REG1, PRUSART1_bm);
	} else if (module == &TCCR3A) {
    420a:	89 81       	ldd	r24, Y+1	; 0x01
    420c:	9a 81       	ldd	r25, Y+2	; 0x02
    420e:	80 39       	cpi	r24, 0x90	; 144
    4210:	91 05       	cpc	r25, r1
    4212:	29 f4       	brne	.+10     	; 0x421e <__stack+0x1f>
		sysclk_enable_module(POWER_RED_REG1, PRTIM3_bm);
    4214:	68 e0       	ldi	r22, 0x08	; 8
    4216:	81 e0       	ldi	r24, 0x01	; 1
    4218:	0e 94 d9 33 	call	0x67b2	; 0x67b2 <sysclk_enable_module>
#endif
#endif
	else {
		Assert(false);
	}
}
    421c:	1d c0       	rjmp	.+58     	; 0x4258 <__stack+0x59>
#if MEGA_RF
	else if (module == &UCSR1A) {
		sysclk_enable_module(POWER_RED_REG1, PRUSART1_bm);
	} else if (module == &TCCR3A) {
		sysclk_enable_module(POWER_RED_REG1, PRTIM3_bm);
	} else if (module == &TCCR4A) {
    421e:	89 81       	ldd	r24, Y+1	; 0x01
    4220:	9a 81       	ldd	r25, Y+2	; 0x02
    4222:	80 3a       	cpi	r24, 0xA0	; 160
    4224:	91 05       	cpc	r25, r1
    4226:	29 f4       	brne	.+10     	; 0x4232 <__stack+0x33>
		sysclk_enable_module(POWER_RED_REG1, PRTIM4_bm);
    4228:	60 e1       	ldi	r22, 0x10	; 16
    422a:	81 e0       	ldi	r24, 0x01	; 1
    422c:	0e 94 d9 33 	call	0x67b2	; 0x67b2 <sysclk_enable_module>
#endif
#endif
	else {
		Assert(false);
	}
}
    4230:	13 c0       	rjmp	.+38     	; 0x4258 <__stack+0x59>
		sysclk_enable_module(POWER_RED_REG1, PRUSART1_bm);
	} else if (module == &TCCR3A) {
		sysclk_enable_module(POWER_RED_REG1, PRTIM3_bm);
	} else if (module == &TCCR4A) {
		sysclk_enable_module(POWER_RED_REG1, PRTIM4_bm);
	} else if (module == &TCCR5A) {
    4232:	89 81       	ldd	r24, Y+1	; 0x01
    4234:	9a 81       	ldd	r25, Y+2	; 0x02
    4236:	80 32       	cpi	r24, 0x20	; 32
    4238:	91 40       	sbci	r25, 0x01	; 1
    423a:	29 f4       	brne	.+10     	; 0x4246 <__stack+0x47>
		sysclk_enable_module(POWER_RED_REG1, PRTIM5_bm);
    423c:	60 e2       	ldi	r22, 0x20	; 32
    423e:	81 e0       	ldi	r24, 0x01	; 1
    4240:	0e 94 d9 33 	call	0x67b2	; 0x67b2 <sysclk_enable_module>
#endif
#endif
	else {
		Assert(false);
	}
}
    4244:	09 c0       	rjmp	.+18     	; 0x4258 <__stack+0x59>
		sysclk_enable_module(POWER_RED_REG1, PRTIM3_bm);
	} else if (module == &TCCR4A) {
		sysclk_enable_module(POWER_RED_REG1, PRTIM4_bm);
	} else if (module == &TCCR5A) {
		sysclk_enable_module(POWER_RED_REG1, PRTIM5_bm);
	} else if (module == &TRX_CTRL_0) {
    4246:	89 81       	ldd	r24, Y+1	; 0x01
    4248:	9a 81       	ldd	r25, Y+2	; 0x02
    424a:	83 34       	cpi	r24, 0x43	; 67
    424c:	91 40       	sbci	r25, 0x01	; 1
    424e:	21 f4       	brne	.+8      	; 0x4258 <__stack+0x59>
		sysclk_enable_module(POWER_RED_REG1, PRTRX24_bm);
    4250:	60 e4       	ldi	r22, 0x40	; 64
    4252:	81 e0       	ldi	r24, 0x01	; 1
    4254:	0e 94 d9 33 	call	0x67b2	; 0x67b2 <sysclk_enable_module>
#endif
#endif
	else {
		Assert(false);
	}
}
    4258:	00 00       	nop
    425a:	0f 90       	pop	r0
    425c:	0f 90       	pop	r0
    425e:	df 91       	pop	r29
    4260:	cf 91       	pop	r28
    4262:	08 95       	ret

00004264 <sysclk_disable_peripheral_clock>:
 *  Disables the clock to a peripheral, given its base address.
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_disable_peripheral_clock(const volatile void *module)
{
    4264:	cf 93       	push	r28
    4266:	df 93       	push	r29
    4268:	00 d0       	rcall	.+0      	; 0x426a <sysclk_disable_peripheral_clock+0x6>
    426a:	cd b7       	in	r28, 0x3d	; 61
    426c:	de b7       	in	r29, 0x3e	; 62
    426e:	9a 83       	std	Y+2, r25	; 0x02
    4270:	89 83       	std	Y+1, r24	; 0x01
	if (module == NULL) {
    4272:	89 81       	ldd	r24, Y+1	; 0x01
    4274:	9a 81       	ldd	r25, Y+2	; 0x02
    4276:	89 2b       	or	r24, r25
    4278:	09 f4       	brne	.+2      	; 0x427c <sysclk_disable_peripheral_clock+0x18>
    427a:	7b c0       	rjmp	.+246    	; 0x4372 <sysclk_disable_peripheral_clock+0x10e>
		Assert(false);
	}

#if !MEGA_XX_UN0 && !MEGA_XX_UN1
	else if (module == &ADC) {
    427c:	89 81       	ldd	r24, Y+1	; 0x01
    427e:	9a 81       	ldd	r25, Y+2	; 0x02
    4280:	88 37       	cpi	r24, 0x78	; 120
    4282:	91 05       	cpc	r25, r1
    4284:	49 f4       	brne	.+18     	; 0x4298 <sysclk_disable_peripheral_clock+0x34>
		sysclk_disable_module(POWER_RED_REG0, PRADC_bm);
    4286:	61 e0       	ldi	r22, 0x01	; 1
    4288:	80 e0       	ldi	r24, 0x00	; 0
    428a:	0e 94 0e 34 	call	0x681c	; 0x681c <sysclk_disable_module>
#if MEGA_RF
		sysclk_disable_module(POWER_RED_REG0, PRPGA_bm);
    428e:	60 e1       	ldi	r22, 0x10	; 16
    4290:	80 e0       	ldi	r24, 0x00	; 0
    4292:	0e 94 0e 34 	call	0x681c	; 0x681c <sysclk_disable_module>
#endif
#endif
	else {
		Assert(false);
	}
}
    4296:	6d c0       	rjmp	.+218    	; 0x4372 <sysclk_disable_peripheral_clock+0x10e>
	else if (module == &ADC) {
		sysclk_disable_module(POWER_RED_REG0, PRADC_bm);
#if MEGA_RF
		sysclk_disable_module(POWER_RED_REG0, PRPGA_bm);
#endif
	} else if (module == &UCSR0A) {
    4298:	89 81       	ldd	r24, Y+1	; 0x01
    429a:	9a 81       	ldd	r25, Y+2	; 0x02
    429c:	80 3c       	cpi	r24, 0xC0	; 192
    429e:	91 05       	cpc	r25, r1
    42a0:	29 f4       	brne	.+10     	; 0x42ac <sysclk_disable_peripheral_clock+0x48>
		sysclk_disable_module(POWER_RED_REG0, PRUSART0_bm);
    42a2:	62 e0       	ldi	r22, 0x02	; 2
    42a4:	80 e0       	ldi	r24, 0x00	; 0
    42a6:	0e 94 0e 34 	call	0x681c	; 0x681c <sysclk_disable_module>
#endif
#endif
	else {
		Assert(false);
	}
}
    42aa:	63 c0       	rjmp	.+198    	; 0x4372 <sysclk_disable_peripheral_clock+0x10e>
#endif
	} else if (module == &UCSR0A) {
		sysclk_disable_module(POWER_RED_REG0, PRUSART0_bm);
	}
#if MEGA_RF
	else if (module == &SPCR) {
    42ac:	89 81       	ldd	r24, Y+1	; 0x01
    42ae:	9a 81       	ldd	r25, Y+2	; 0x02
    42b0:	8c 34       	cpi	r24, 0x4C	; 76
    42b2:	91 05       	cpc	r25, r1
    42b4:	29 f4       	brne	.+10     	; 0x42c0 <sysclk_disable_peripheral_clock+0x5c>
		sysclk_disable_module(POWER_RED_REG0, PRSPI_bm);
    42b6:	64 e0       	ldi	r22, 0x04	; 4
    42b8:	80 e0       	ldi	r24, 0x00	; 0
    42ba:	0e 94 0e 34 	call	0x681c	; 0x681c <sysclk_disable_module>
#endif
#endif
	else {
		Assert(false);
	}
}
    42be:	59 c0       	rjmp	.+178    	; 0x4372 <sysclk_disable_peripheral_clock+0x10e>
#if MEGA_RF
	else if (module == &SPCR) {
		sysclk_disable_module(POWER_RED_REG0, PRSPI_bm);
	}
#endif
	else if (module == &TCCR1A) {
    42c0:	89 81       	ldd	r24, Y+1	; 0x01
    42c2:	9a 81       	ldd	r25, Y+2	; 0x02
    42c4:	80 38       	cpi	r24, 0x80	; 128
    42c6:	91 05       	cpc	r25, r1
    42c8:	29 f4       	brne	.+10     	; 0x42d4 <sysclk_disable_peripheral_clock+0x70>
		sysclk_disable_module(POWER_RED_REG0, PRTIM1_bm);
    42ca:	68 e0       	ldi	r22, 0x08	; 8
    42cc:	80 e0       	ldi	r24, 0x00	; 0
    42ce:	0e 94 0e 34 	call	0x681c	; 0x681c <sysclk_disable_module>
#endif
#endif
	else {
		Assert(false);
	}
}
    42d2:	4f c0       	rjmp	.+158    	; 0x4372 <sysclk_disable_peripheral_clock+0x10e>
	else if (module == &LCDCRA) {
		sysclk_disable_module(POWER_RED_REG0, PRLCD_bm);
	}
#endif
#if !MEGA_XX_UN2
	else if (module == &TCCR0A) {
    42d4:	89 81       	ldd	r24, Y+1	; 0x01
    42d6:	9a 81       	ldd	r25, Y+2	; 0x02
    42d8:	84 34       	cpi	r24, 0x44	; 68
    42da:	91 05       	cpc	r25, r1
    42dc:	29 f4       	brne	.+10     	; 0x42e8 <sysclk_disable_peripheral_clock+0x84>
		sysclk_disable_module(POWER_RED_REG0, PRTIM0_bm);
    42de:	60 e2       	ldi	r22, 0x20	; 32
    42e0:	80 e0       	ldi	r24, 0x00	; 0
    42e2:	0e 94 0e 34 	call	0x681c	; 0x681c <sysclk_disable_module>
#endif
#endif
	else {
		Assert(false);
	}
}
    42e6:	45 c0       	rjmp	.+138    	; 0x4372 <sysclk_disable_peripheral_clock+0x10e>
	}
#endif
#if !MEGA_XX_UN2
	else if (module == &TCCR0A) {
		sysclk_disable_module(POWER_RED_REG0, PRTIM0_bm);
	} else if (module == &TCCR2A) {
    42e8:	89 81       	ldd	r24, Y+1	; 0x01
    42ea:	9a 81       	ldd	r25, Y+2	; 0x02
    42ec:	80 3b       	cpi	r24, 0xB0	; 176
    42ee:	91 05       	cpc	r25, r1
    42f0:	29 f4       	brne	.+10     	; 0x42fc <sysclk_disable_peripheral_clock+0x98>
		sysclk_disable_module(POWER_RED_REG0, PRTIM2_bm);
    42f2:	60 e4       	ldi	r22, 0x40	; 64
    42f4:	80 e0       	ldi	r24, 0x00	; 0
    42f6:	0e 94 0e 34 	call	0x681c	; 0x681c <sysclk_disable_module>
#endif
#endif
	else {
		Assert(false);
	}
}
    42fa:	3b c0       	rjmp	.+118    	; 0x4372 <sysclk_disable_peripheral_clock+0x10e>
#if !MEGA_XX_UN2
	else if (module == &TCCR0A) {
		sysclk_disable_module(POWER_RED_REG0, PRTIM0_bm);
	} else if (module == &TCCR2A) {
		sysclk_disable_module(POWER_RED_REG0, PRTIM2_bm);
	} else if (module == &TWBR) {
    42fc:	89 81       	ldd	r24, Y+1	; 0x01
    42fe:	9a 81       	ldd	r25, Y+2	; 0x02
    4300:	88 3b       	cpi	r24, 0xB8	; 184
    4302:	91 05       	cpc	r25, r1
    4304:	29 f4       	brne	.+10     	; 0x4310 <sysclk_disable_peripheral_clock+0xac>
		sysclk_disable_module(POWER_RED_REG0, PRTWI_bm);
    4306:	60 e8       	ldi	r22, 0x80	; 128
    4308:	80 e0       	ldi	r24, 0x00	; 0
    430a:	0e 94 0e 34 	call	0x681c	; 0x681c <sysclk_disable_module>
#endif
#endif
	else {
		Assert(false);
	}
}
    430e:	31 c0       	rjmp	.+98     	; 0x4372 <sysclk_disable_peripheral_clock+0x10e>
	} else if (module == &TWBR) {
		sysclk_disable_module(POWER_RED_REG0, PRTWI_bm);
	}
#endif
#if MEGA_RF
	else if (module == &UCSR1A) {
    4310:	89 81       	ldd	r24, Y+1	; 0x01
    4312:	9a 81       	ldd	r25, Y+2	; 0x02
    4314:	88 3c       	cpi	r24, 0xC8	; 200
    4316:	91 05       	cpc	r25, r1
    4318:	29 f4       	brne	.+10     	; 0x4324 <sysclk_disable_peripheral_clock+0xc0>
		sysclk_disable_module(POWER_RED_REG1, PRUSART1_bm);
    431a:	61 e0       	ldi	r22, 0x01	; 1
    431c:	81 e0       	ldi	r24, 0x01	; 1
    431e:	0e 94 0e 34 	call	0x681c	; 0x681c <sysclk_disable_module>
#endif
#endif
	else {
		Assert(false);
	}
}
    4322:	27 c0       	rjmp	.+78     	; 0x4372 <sysclk_disable_peripheral_clock+0x10e>
	}
#endif
#if MEGA_RF
	else if (module == &UCSR1A) {
		sysclk_disable_module(POWER_RED_REG1, PRUSART1_bm);
	} else if (module == &TCCR3A) {
    4324:	89 81       	ldd	r24, Y+1	; 0x01
    4326:	9a 81       	ldd	r25, Y+2	; 0x02
    4328:	80 39       	cpi	r24, 0x90	; 144
    432a:	91 05       	cpc	r25, r1
    432c:	29 f4       	brne	.+10     	; 0x4338 <sysclk_disable_peripheral_clock+0xd4>
		sysclk_disable_module(POWER_RED_REG1, PRTIM3_bm);
    432e:	68 e0       	ldi	r22, 0x08	; 8
    4330:	81 e0       	ldi	r24, 0x01	; 1
    4332:	0e 94 0e 34 	call	0x681c	; 0x681c <sysclk_disable_module>
#endif
#endif
	else {
		Assert(false);
	}
}
    4336:	1d c0       	rjmp	.+58     	; 0x4372 <sysclk_disable_peripheral_clock+0x10e>
#if MEGA_RF
	else if (module == &UCSR1A) {
		sysclk_disable_module(POWER_RED_REG1, PRUSART1_bm);
	} else if (module == &TCCR3A) {
		sysclk_disable_module(POWER_RED_REG1, PRTIM3_bm);
	} else if (module == &TCCR4A) {
    4338:	89 81       	ldd	r24, Y+1	; 0x01
    433a:	9a 81       	ldd	r25, Y+2	; 0x02
    433c:	80 3a       	cpi	r24, 0xA0	; 160
    433e:	91 05       	cpc	r25, r1
    4340:	29 f4       	brne	.+10     	; 0x434c <sysclk_disable_peripheral_clock+0xe8>
		sysclk_disable_module(POWER_RED_REG1, PRTIM4_bm);
    4342:	60 e1       	ldi	r22, 0x10	; 16
    4344:	81 e0       	ldi	r24, 0x01	; 1
    4346:	0e 94 0e 34 	call	0x681c	; 0x681c <sysclk_disable_module>
#endif
#endif
	else {
		Assert(false);
	}
}
    434a:	13 c0       	rjmp	.+38     	; 0x4372 <sysclk_disable_peripheral_clock+0x10e>
		sysclk_disable_module(POWER_RED_REG1, PRUSART1_bm);
	} else if (module == &TCCR3A) {
		sysclk_disable_module(POWER_RED_REG1, PRTIM3_bm);
	} else if (module == &TCCR4A) {
		sysclk_disable_module(POWER_RED_REG1, PRTIM4_bm);
	} else if (module == &TCCR5A) {
    434c:	89 81       	ldd	r24, Y+1	; 0x01
    434e:	9a 81       	ldd	r25, Y+2	; 0x02
    4350:	80 32       	cpi	r24, 0x20	; 32
    4352:	91 40       	sbci	r25, 0x01	; 1
    4354:	29 f4       	brne	.+10     	; 0x4360 <sysclk_disable_peripheral_clock+0xfc>
		sysclk_disable_module(POWER_RED_REG1, PRTIM5_bm);
    4356:	60 e2       	ldi	r22, 0x20	; 32
    4358:	81 e0       	ldi	r24, 0x01	; 1
    435a:	0e 94 0e 34 	call	0x681c	; 0x681c <sysclk_disable_module>
#endif
#endif
	else {
		Assert(false);
	}
}
    435e:	09 c0       	rjmp	.+18     	; 0x4372 <sysclk_disable_peripheral_clock+0x10e>
		sysclk_disable_module(POWER_RED_REG1, PRTIM3_bm);
	} else if (module == &TCCR4A) {
		sysclk_disable_module(POWER_RED_REG1, PRTIM4_bm);
	} else if (module == &TCCR5A) {
		sysclk_disable_module(POWER_RED_REG1, PRTIM5_bm);
	} else if (module == &TRX_CTRL_0) {
    4360:	89 81       	ldd	r24, Y+1	; 0x01
    4362:	9a 81       	ldd	r25, Y+2	; 0x02
    4364:	83 34       	cpi	r24, 0x43	; 67
    4366:	91 40       	sbci	r25, 0x01	; 1
    4368:	21 f4       	brne	.+8      	; 0x4372 <sysclk_disable_peripheral_clock+0x10e>
		sysclk_disable_module(POWER_RED_REG1, PRTRX24_bm);
    436a:	60 e4       	ldi	r22, 0x40	; 64
    436c:	81 e0       	ldi	r24, 0x01	; 1
    436e:	0e 94 0e 34 	call	0x681c	; 0x681c <sysclk_disable_module>
#endif
#endif
	else {
		Assert(false);
	}
}
    4372:	00 00       	nop
    4374:	0f 90       	pop	r0
    4376:	0f 90       	pop	r0
    4378:	df 91       	pop	r29
    437a:	cf 91       	pop	r28
    437c:	08 95       	ret

0000437e <__vector_20>:
/**
 * \internal
 * \brief Interrupt handler for Timer Counter  overflow
 */
ISR(TIMER1_OVF_vect)
{
    437e:	1f 92       	push	r1
    4380:	0f 92       	push	r0
    4382:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    4386:	0f 92       	push	r0
    4388:	11 24       	eor	r1, r1
    438a:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
    438e:	0f 92       	push	r0
    4390:	2f 93       	push	r18
    4392:	3f 93       	push	r19
    4394:	4f 93       	push	r20
    4396:	5f 93       	push	r21
    4398:	6f 93       	push	r22
    439a:	7f 93       	push	r23
    439c:	8f 93       	push	r24
    439e:	9f 93       	push	r25
    43a0:	af 93       	push	r26
    43a2:	bf 93       	push	r27
    43a4:	ef 93       	push	r30
    43a6:	ff 93       	push	r31
    43a8:	cf 93       	push	r28
    43aa:	df 93       	push	r29
    43ac:	cd b7       	in	r28, 0x3d	; 61
    43ae:	de b7       	in	r29, 0x3e	; 62
	if (tc_tccr1_ovf_callback) {
    43b0:	80 91 9d 0f 	lds	r24, 0x0F9D	; 0x800f9d <tc_tccr1_ovf_callback>
    43b4:	90 91 9e 0f 	lds	r25, 0x0F9E	; 0x800f9e <tc_tccr1_ovf_callback+0x1>
    43b8:	89 2b       	or	r24, r25
    43ba:	31 f0       	breq	.+12     	; 0x43c8 <__vector_20+0x4a>
		tc_tccr1_ovf_callback();
    43bc:	80 91 9d 0f 	lds	r24, 0x0F9D	; 0x800f9d <tc_tccr1_ovf_callback>
    43c0:	90 91 9e 0f 	lds	r25, 0x0F9E	; 0x800f9e <tc_tccr1_ovf_callback+0x1>
    43c4:	fc 01       	movw	r30, r24
    43c6:	09 95       	icall
	}
}
    43c8:	00 00       	nop
    43ca:	df 91       	pop	r29
    43cc:	cf 91       	pop	r28
    43ce:	ff 91       	pop	r31
    43d0:	ef 91       	pop	r30
    43d2:	bf 91       	pop	r27
    43d4:	af 91       	pop	r26
    43d6:	9f 91       	pop	r25
    43d8:	8f 91       	pop	r24
    43da:	7f 91       	pop	r23
    43dc:	6f 91       	pop	r22
    43de:	5f 91       	pop	r21
    43e0:	4f 91       	pop	r20
    43e2:	3f 91       	pop	r19
    43e4:	2f 91       	pop	r18
    43e6:	0f 90       	pop	r0
    43e8:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
    43ec:	0f 90       	pop	r0
    43ee:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    43f2:	0f 90       	pop	r0
    43f4:	1f 90       	pop	r1
    43f6:	18 95       	reti

000043f8 <__vector_17>:

/**
 * \brief Interrupt handler for Timer Counter  Compare Match in Channel A
 */
ISR(TIMER1_COMPA_vect)
{
    43f8:	1f 92       	push	r1
    43fa:	0f 92       	push	r0
    43fc:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    4400:	0f 92       	push	r0
    4402:	11 24       	eor	r1, r1
    4404:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
    4408:	0f 92       	push	r0
    440a:	2f 93       	push	r18
    440c:	3f 93       	push	r19
    440e:	4f 93       	push	r20
    4410:	5f 93       	push	r21
    4412:	6f 93       	push	r22
    4414:	7f 93       	push	r23
    4416:	8f 93       	push	r24
    4418:	9f 93       	push	r25
    441a:	af 93       	push	r26
    441c:	bf 93       	push	r27
    441e:	ef 93       	push	r30
    4420:	ff 93       	push	r31
    4422:	cf 93       	push	r28
    4424:	df 93       	push	r29
    4426:	cd b7       	in	r28, 0x3d	; 61
    4428:	de b7       	in	r29, 0x3e	; 62
	if (tc_tccr1_compa_callback) {
    442a:	80 91 9f 0f 	lds	r24, 0x0F9F	; 0x800f9f <tc_tccr1_compa_callback>
    442e:	90 91 a0 0f 	lds	r25, 0x0FA0	; 0x800fa0 <tc_tccr1_compa_callback+0x1>
    4432:	89 2b       	or	r24, r25
    4434:	31 f0       	breq	.+12     	; 0x4442 <__vector_17+0x4a>
		tc_tccr1_compa_callback();
    4436:	80 91 9f 0f 	lds	r24, 0x0F9F	; 0x800f9f <tc_tccr1_compa_callback>
    443a:	90 91 a0 0f 	lds	r25, 0x0FA0	; 0x800fa0 <tc_tccr1_compa_callback+0x1>
    443e:	fc 01       	movw	r30, r24
    4440:	09 95       	icall
	}
}
    4442:	00 00       	nop
    4444:	df 91       	pop	r29
    4446:	cf 91       	pop	r28
    4448:	ff 91       	pop	r31
    444a:	ef 91       	pop	r30
    444c:	bf 91       	pop	r27
    444e:	af 91       	pop	r26
    4450:	9f 91       	pop	r25
    4452:	8f 91       	pop	r24
    4454:	7f 91       	pop	r23
    4456:	6f 91       	pop	r22
    4458:	5f 91       	pop	r21
    445a:	4f 91       	pop	r20
    445c:	3f 91       	pop	r19
    445e:	2f 91       	pop	r18
    4460:	0f 90       	pop	r0
    4462:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
    4466:	0f 90       	pop	r0
    4468:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    446c:	0f 90       	pop	r0
    446e:	1f 90       	pop	r1
    4470:	18 95       	reti

00004472 <__vector_18>:

/**
 * \brief Interrupt handler for Timer Counter  Compare Match in Channel B
 */
ISR(TIMER1_COMPB_vect)
{
    4472:	1f 92       	push	r1
    4474:	0f 92       	push	r0
    4476:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    447a:	0f 92       	push	r0
    447c:	11 24       	eor	r1, r1
    447e:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
    4482:	0f 92       	push	r0
    4484:	2f 93       	push	r18
    4486:	3f 93       	push	r19
    4488:	4f 93       	push	r20
    448a:	5f 93       	push	r21
    448c:	6f 93       	push	r22
    448e:	7f 93       	push	r23
    4490:	8f 93       	push	r24
    4492:	9f 93       	push	r25
    4494:	af 93       	push	r26
    4496:	bf 93       	push	r27
    4498:	ef 93       	push	r30
    449a:	ff 93       	push	r31
    449c:	cf 93       	push	r28
    449e:	df 93       	push	r29
    44a0:	cd b7       	in	r28, 0x3d	; 61
    44a2:	de b7       	in	r29, 0x3e	; 62
	if (tc_tccr1_compb_callback) {
    44a4:	80 91 a1 0f 	lds	r24, 0x0FA1	; 0x800fa1 <tc_tccr1_compb_callback>
    44a8:	90 91 a2 0f 	lds	r25, 0x0FA2	; 0x800fa2 <tc_tccr1_compb_callback+0x1>
    44ac:	89 2b       	or	r24, r25
    44ae:	31 f0       	breq	.+12     	; 0x44bc <__vector_18+0x4a>
		tc_tccr1_compb_callback();
    44b0:	80 91 a1 0f 	lds	r24, 0x0FA1	; 0x800fa1 <tc_tccr1_compb_callback>
    44b4:	90 91 a2 0f 	lds	r25, 0x0FA2	; 0x800fa2 <tc_tccr1_compb_callback+0x1>
    44b8:	fc 01       	movw	r30, r24
    44ba:	09 95       	icall
	}
}
    44bc:	00 00       	nop
    44be:	df 91       	pop	r29
    44c0:	cf 91       	pop	r28
    44c2:	ff 91       	pop	r31
    44c4:	ef 91       	pop	r30
    44c6:	bf 91       	pop	r27
    44c8:	af 91       	pop	r26
    44ca:	9f 91       	pop	r25
    44cc:	8f 91       	pop	r24
    44ce:	7f 91       	pop	r23
    44d0:	6f 91       	pop	r22
    44d2:	5f 91       	pop	r21
    44d4:	4f 91       	pop	r20
    44d6:	3f 91       	pop	r19
    44d8:	2f 91       	pop	r18
    44da:	0f 90       	pop	r0
    44dc:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
    44e0:	0f 90       	pop	r0
    44e2:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    44e6:	0f 90       	pop	r0
    44e8:	1f 90       	pop	r1
    44ea:	18 95       	reti

000044ec <__vector_19>:

/**
 * \brief Interrupt handler for Timer Counter  Compare Match in Channel C
 */
ISR(TIMER1_COMPC_vect)
{
    44ec:	1f 92       	push	r1
    44ee:	0f 92       	push	r0
    44f0:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    44f4:	0f 92       	push	r0
    44f6:	11 24       	eor	r1, r1
    44f8:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
    44fc:	0f 92       	push	r0
    44fe:	2f 93       	push	r18
    4500:	3f 93       	push	r19
    4502:	4f 93       	push	r20
    4504:	5f 93       	push	r21
    4506:	6f 93       	push	r22
    4508:	7f 93       	push	r23
    450a:	8f 93       	push	r24
    450c:	9f 93       	push	r25
    450e:	af 93       	push	r26
    4510:	bf 93       	push	r27
    4512:	ef 93       	push	r30
    4514:	ff 93       	push	r31
    4516:	cf 93       	push	r28
    4518:	df 93       	push	r29
    451a:	cd b7       	in	r28, 0x3d	; 61
    451c:	de b7       	in	r29, 0x3e	; 62
	if (tc_tccr1_compc_callback) {
    451e:	80 91 a3 0f 	lds	r24, 0x0FA3	; 0x800fa3 <tc_tccr1_compc_callback>
    4522:	90 91 a4 0f 	lds	r25, 0x0FA4	; 0x800fa4 <tc_tccr1_compc_callback+0x1>
    4526:	89 2b       	or	r24, r25
    4528:	31 f0       	breq	.+12     	; 0x4536 <__vector_19+0x4a>
		tc_tccr1_compc_callback();
    452a:	80 91 a3 0f 	lds	r24, 0x0FA3	; 0x800fa3 <tc_tccr1_compc_callback>
    452e:	90 91 a4 0f 	lds	r25, 0x0FA4	; 0x800fa4 <tc_tccr1_compc_callback+0x1>
    4532:	fc 01       	movw	r30, r24
    4534:	09 95       	icall
	}
}
    4536:	00 00       	nop
    4538:	df 91       	pop	r29
    453a:	cf 91       	pop	r28
    453c:	ff 91       	pop	r31
    453e:	ef 91       	pop	r30
    4540:	bf 91       	pop	r27
    4542:	af 91       	pop	r26
    4544:	9f 91       	pop	r25
    4546:	8f 91       	pop	r24
    4548:	7f 91       	pop	r23
    454a:	6f 91       	pop	r22
    454c:	5f 91       	pop	r21
    454e:	4f 91       	pop	r20
    4550:	3f 91       	pop	r19
    4552:	2f 91       	pop	r18
    4554:	0f 90       	pop	r0
    4556:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
    455a:	0f 90       	pop	r0
    455c:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    4560:	0f 90       	pop	r0
    4562:	1f 90       	pop	r1
    4564:	18 95       	reti

00004566 <__vector_35>:
static tc_callback_t tc_tccr3_compa_callback;
static tc_callback_t tc_tccr3_compb_callback;
static tc_callback_t tc_tccr3_compc_callback;

ISR(TIMER3_OVF_vect)
{
    4566:	1f 92       	push	r1
    4568:	0f 92       	push	r0
    456a:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    456e:	0f 92       	push	r0
    4570:	11 24       	eor	r1, r1
    4572:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
    4576:	0f 92       	push	r0
    4578:	2f 93       	push	r18
    457a:	3f 93       	push	r19
    457c:	4f 93       	push	r20
    457e:	5f 93       	push	r21
    4580:	6f 93       	push	r22
    4582:	7f 93       	push	r23
    4584:	8f 93       	push	r24
    4586:	9f 93       	push	r25
    4588:	af 93       	push	r26
    458a:	bf 93       	push	r27
    458c:	ef 93       	push	r30
    458e:	ff 93       	push	r31
    4590:	cf 93       	push	r28
    4592:	df 93       	push	r29
    4594:	cd b7       	in	r28, 0x3d	; 61
    4596:	de b7       	in	r29, 0x3e	; 62
	if (tc_tccr3_ovf_callback) {
    4598:	80 91 a5 0f 	lds	r24, 0x0FA5	; 0x800fa5 <tc_tccr3_ovf_callback>
    459c:	90 91 a6 0f 	lds	r25, 0x0FA6	; 0x800fa6 <tc_tccr3_ovf_callback+0x1>
    45a0:	89 2b       	or	r24, r25
    45a2:	31 f0       	breq	.+12     	; 0x45b0 <__vector_35+0x4a>
		tc_tccr3_ovf_callback();
    45a4:	80 91 a5 0f 	lds	r24, 0x0FA5	; 0x800fa5 <tc_tccr3_ovf_callback>
    45a8:	90 91 a6 0f 	lds	r25, 0x0FA6	; 0x800fa6 <tc_tccr3_ovf_callback+0x1>
    45ac:	fc 01       	movw	r30, r24
    45ae:	09 95       	icall
	}
}
    45b0:	00 00       	nop
    45b2:	df 91       	pop	r29
    45b4:	cf 91       	pop	r28
    45b6:	ff 91       	pop	r31
    45b8:	ef 91       	pop	r30
    45ba:	bf 91       	pop	r27
    45bc:	af 91       	pop	r26
    45be:	9f 91       	pop	r25
    45c0:	8f 91       	pop	r24
    45c2:	7f 91       	pop	r23
    45c4:	6f 91       	pop	r22
    45c6:	5f 91       	pop	r21
    45c8:	4f 91       	pop	r20
    45ca:	3f 91       	pop	r19
    45cc:	2f 91       	pop	r18
    45ce:	0f 90       	pop	r0
    45d0:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
    45d4:	0f 90       	pop	r0
    45d6:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    45da:	0f 90       	pop	r0
    45dc:	1f 90       	pop	r1
    45de:	18 95       	reti

000045e0 <__vector_32>:

ISR(TIMER3_COMPA_vect)
{
    45e0:	1f 92       	push	r1
    45e2:	0f 92       	push	r0
    45e4:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    45e8:	0f 92       	push	r0
    45ea:	11 24       	eor	r1, r1
    45ec:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
    45f0:	0f 92       	push	r0
    45f2:	2f 93       	push	r18
    45f4:	3f 93       	push	r19
    45f6:	4f 93       	push	r20
    45f8:	5f 93       	push	r21
    45fa:	6f 93       	push	r22
    45fc:	7f 93       	push	r23
    45fe:	8f 93       	push	r24
    4600:	9f 93       	push	r25
    4602:	af 93       	push	r26
    4604:	bf 93       	push	r27
    4606:	ef 93       	push	r30
    4608:	ff 93       	push	r31
    460a:	cf 93       	push	r28
    460c:	df 93       	push	r29
    460e:	cd b7       	in	r28, 0x3d	; 61
    4610:	de b7       	in	r29, 0x3e	; 62
	if (tc_tccr3_compa_callback) {
    4612:	80 91 a7 0f 	lds	r24, 0x0FA7	; 0x800fa7 <tc_tccr3_compa_callback>
    4616:	90 91 a8 0f 	lds	r25, 0x0FA8	; 0x800fa8 <tc_tccr3_compa_callback+0x1>
    461a:	89 2b       	or	r24, r25
    461c:	31 f0       	breq	.+12     	; 0x462a <__vector_32+0x4a>
		tc_tccr3_compa_callback();
    461e:	80 91 a7 0f 	lds	r24, 0x0FA7	; 0x800fa7 <tc_tccr3_compa_callback>
    4622:	90 91 a8 0f 	lds	r25, 0x0FA8	; 0x800fa8 <tc_tccr3_compa_callback+0x1>
    4626:	fc 01       	movw	r30, r24
    4628:	09 95       	icall
	}
}
    462a:	00 00       	nop
    462c:	df 91       	pop	r29
    462e:	cf 91       	pop	r28
    4630:	ff 91       	pop	r31
    4632:	ef 91       	pop	r30
    4634:	bf 91       	pop	r27
    4636:	af 91       	pop	r26
    4638:	9f 91       	pop	r25
    463a:	8f 91       	pop	r24
    463c:	7f 91       	pop	r23
    463e:	6f 91       	pop	r22
    4640:	5f 91       	pop	r21
    4642:	4f 91       	pop	r20
    4644:	3f 91       	pop	r19
    4646:	2f 91       	pop	r18
    4648:	0f 90       	pop	r0
    464a:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
    464e:	0f 90       	pop	r0
    4650:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    4654:	0f 90       	pop	r0
    4656:	1f 90       	pop	r1
    4658:	18 95       	reti

0000465a <__vector_33>:

ISR(TIMER3_COMPB_vect)
{
    465a:	1f 92       	push	r1
    465c:	0f 92       	push	r0
    465e:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    4662:	0f 92       	push	r0
    4664:	11 24       	eor	r1, r1
    4666:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
    466a:	0f 92       	push	r0
    466c:	2f 93       	push	r18
    466e:	3f 93       	push	r19
    4670:	4f 93       	push	r20
    4672:	5f 93       	push	r21
    4674:	6f 93       	push	r22
    4676:	7f 93       	push	r23
    4678:	8f 93       	push	r24
    467a:	9f 93       	push	r25
    467c:	af 93       	push	r26
    467e:	bf 93       	push	r27
    4680:	ef 93       	push	r30
    4682:	ff 93       	push	r31
    4684:	cf 93       	push	r28
    4686:	df 93       	push	r29
    4688:	cd b7       	in	r28, 0x3d	; 61
    468a:	de b7       	in	r29, 0x3e	; 62
	if (tc_tccr3_compb_callback) {
    468c:	80 91 a9 0f 	lds	r24, 0x0FA9	; 0x800fa9 <tc_tccr3_compb_callback>
    4690:	90 91 aa 0f 	lds	r25, 0x0FAA	; 0x800faa <tc_tccr3_compb_callback+0x1>
    4694:	89 2b       	or	r24, r25
    4696:	31 f0       	breq	.+12     	; 0x46a4 <__vector_33+0x4a>
		tc_tccr3_compb_callback();
    4698:	80 91 a9 0f 	lds	r24, 0x0FA9	; 0x800fa9 <tc_tccr3_compb_callback>
    469c:	90 91 aa 0f 	lds	r25, 0x0FAA	; 0x800faa <tc_tccr3_compb_callback+0x1>
    46a0:	fc 01       	movw	r30, r24
    46a2:	09 95       	icall
	}
}
    46a4:	00 00       	nop
    46a6:	df 91       	pop	r29
    46a8:	cf 91       	pop	r28
    46aa:	ff 91       	pop	r31
    46ac:	ef 91       	pop	r30
    46ae:	bf 91       	pop	r27
    46b0:	af 91       	pop	r26
    46b2:	9f 91       	pop	r25
    46b4:	8f 91       	pop	r24
    46b6:	7f 91       	pop	r23
    46b8:	6f 91       	pop	r22
    46ba:	5f 91       	pop	r21
    46bc:	4f 91       	pop	r20
    46be:	3f 91       	pop	r19
    46c0:	2f 91       	pop	r18
    46c2:	0f 90       	pop	r0
    46c4:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
    46c8:	0f 90       	pop	r0
    46ca:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    46ce:	0f 90       	pop	r0
    46d0:	1f 90       	pop	r1
    46d2:	18 95       	reti

000046d4 <__vector_34>:

ISR(TIMER3_COMPC_vect)
{
    46d4:	1f 92       	push	r1
    46d6:	0f 92       	push	r0
    46d8:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    46dc:	0f 92       	push	r0
    46de:	11 24       	eor	r1, r1
    46e0:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
    46e4:	0f 92       	push	r0
    46e6:	2f 93       	push	r18
    46e8:	3f 93       	push	r19
    46ea:	4f 93       	push	r20
    46ec:	5f 93       	push	r21
    46ee:	6f 93       	push	r22
    46f0:	7f 93       	push	r23
    46f2:	8f 93       	push	r24
    46f4:	9f 93       	push	r25
    46f6:	af 93       	push	r26
    46f8:	bf 93       	push	r27
    46fa:	ef 93       	push	r30
    46fc:	ff 93       	push	r31
    46fe:	cf 93       	push	r28
    4700:	df 93       	push	r29
    4702:	cd b7       	in	r28, 0x3d	; 61
    4704:	de b7       	in	r29, 0x3e	; 62
	if (tc_tccr3_compc_callback) {
    4706:	80 91 ab 0f 	lds	r24, 0x0FAB	; 0x800fab <tc_tccr3_compc_callback>
    470a:	90 91 ac 0f 	lds	r25, 0x0FAC	; 0x800fac <tc_tccr3_compc_callback+0x1>
    470e:	89 2b       	or	r24, r25
    4710:	31 f0       	breq	.+12     	; 0x471e <__vector_34+0x4a>
		tc_tccr3_compc_callback();
    4712:	80 91 ab 0f 	lds	r24, 0x0FAB	; 0x800fab <tc_tccr3_compc_callback>
    4716:	90 91 ac 0f 	lds	r25, 0x0FAC	; 0x800fac <tc_tccr3_compc_callback+0x1>
    471a:	fc 01       	movw	r30, r24
    471c:	09 95       	icall
	}
}
    471e:	00 00       	nop
    4720:	df 91       	pop	r29
    4722:	cf 91       	pop	r28
    4724:	ff 91       	pop	r31
    4726:	ef 91       	pop	r30
    4728:	bf 91       	pop	r27
    472a:	af 91       	pop	r26
    472c:	9f 91       	pop	r25
    472e:	8f 91       	pop	r24
    4730:	7f 91       	pop	r23
    4732:	6f 91       	pop	r22
    4734:	5f 91       	pop	r21
    4736:	4f 91       	pop	r20
    4738:	3f 91       	pop	r19
    473a:	2f 91       	pop	r18
    473c:	0f 90       	pop	r0
    473e:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
    4742:	0f 90       	pop	r0
    4744:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    4748:	0f 90       	pop	r0
    474a:	1f 90       	pop	r1
    474c:	18 95       	reti

0000474e <__vector_45>:
static tc_callback_t tc_tccr4_compa_callback;
static tc_callback_t tc_tccr4_compb_callback;
static tc_callback_t tc_tccr4_compc_callback;

ISR(TIMER4_OVF_vect)
{
    474e:	1f 92       	push	r1
    4750:	0f 92       	push	r0
    4752:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    4756:	0f 92       	push	r0
    4758:	11 24       	eor	r1, r1
    475a:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
    475e:	0f 92       	push	r0
    4760:	2f 93       	push	r18
    4762:	3f 93       	push	r19
    4764:	4f 93       	push	r20
    4766:	5f 93       	push	r21
    4768:	6f 93       	push	r22
    476a:	7f 93       	push	r23
    476c:	8f 93       	push	r24
    476e:	9f 93       	push	r25
    4770:	af 93       	push	r26
    4772:	bf 93       	push	r27
    4774:	ef 93       	push	r30
    4776:	ff 93       	push	r31
    4778:	cf 93       	push	r28
    477a:	df 93       	push	r29
    477c:	cd b7       	in	r28, 0x3d	; 61
    477e:	de b7       	in	r29, 0x3e	; 62
	if (tc_tccr4_ovf_callback) {
    4780:	80 91 ad 0f 	lds	r24, 0x0FAD	; 0x800fad <tc_tccr4_ovf_callback>
    4784:	90 91 ae 0f 	lds	r25, 0x0FAE	; 0x800fae <tc_tccr4_ovf_callback+0x1>
    4788:	89 2b       	or	r24, r25
    478a:	31 f0       	breq	.+12     	; 0x4798 <__vector_45+0x4a>
		tc_tccr4_ovf_callback();
    478c:	80 91 ad 0f 	lds	r24, 0x0FAD	; 0x800fad <tc_tccr4_ovf_callback>
    4790:	90 91 ae 0f 	lds	r25, 0x0FAE	; 0x800fae <tc_tccr4_ovf_callback+0x1>
    4794:	fc 01       	movw	r30, r24
    4796:	09 95       	icall
	}
}
    4798:	00 00       	nop
    479a:	df 91       	pop	r29
    479c:	cf 91       	pop	r28
    479e:	ff 91       	pop	r31
    47a0:	ef 91       	pop	r30
    47a2:	bf 91       	pop	r27
    47a4:	af 91       	pop	r26
    47a6:	9f 91       	pop	r25
    47a8:	8f 91       	pop	r24
    47aa:	7f 91       	pop	r23
    47ac:	6f 91       	pop	r22
    47ae:	5f 91       	pop	r21
    47b0:	4f 91       	pop	r20
    47b2:	3f 91       	pop	r19
    47b4:	2f 91       	pop	r18
    47b6:	0f 90       	pop	r0
    47b8:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
    47bc:	0f 90       	pop	r0
    47be:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    47c2:	0f 90       	pop	r0
    47c4:	1f 90       	pop	r1
    47c6:	18 95       	reti

000047c8 <__vector_42>:

ISR(TIMER4_COMPA_vect)
{
    47c8:	1f 92       	push	r1
    47ca:	0f 92       	push	r0
    47cc:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    47d0:	0f 92       	push	r0
    47d2:	11 24       	eor	r1, r1
    47d4:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
    47d8:	0f 92       	push	r0
    47da:	2f 93       	push	r18
    47dc:	3f 93       	push	r19
    47de:	4f 93       	push	r20
    47e0:	5f 93       	push	r21
    47e2:	6f 93       	push	r22
    47e4:	7f 93       	push	r23
    47e6:	8f 93       	push	r24
    47e8:	9f 93       	push	r25
    47ea:	af 93       	push	r26
    47ec:	bf 93       	push	r27
    47ee:	ef 93       	push	r30
    47f0:	ff 93       	push	r31
    47f2:	cf 93       	push	r28
    47f4:	df 93       	push	r29
    47f6:	cd b7       	in	r28, 0x3d	; 61
    47f8:	de b7       	in	r29, 0x3e	; 62
	if (tc_tccr4_compa_callback) {
    47fa:	80 91 af 0f 	lds	r24, 0x0FAF	; 0x800faf <tc_tccr4_compa_callback>
    47fe:	90 91 b0 0f 	lds	r25, 0x0FB0	; 0x800fb0 <tc_tccr4_compa_callback+0x1>
    4802:	89 2b       	or	r24, r25
    4804:	31 f0       	breq	.+12     	; 0x4812 <__vector_42+0x4a>
		tc_tccr4_compa_callback();
    4806:	80 91 af 0f 	lds	r24, 0x0FAF	; 0x800faf <tc_tccr4_compa_callback>
    480a:	90 91 b0 0f 	lds	r25, 0x0FB0	; 0x800fb0 <tc_tccr4_compa_callback+0x1>
    480e:	fc 01       	movw	r30, r24
    4810:	09 95       	icall
	}
}
    4812:	00 00       	nop
    4814:	df 91       	pop	r29
    4816:	cf 91       	pop	r28
    4818:	ff 91       	pop	r31
    481a:	ef 91       	pop	r30
    481c:	bf 91       	pop	r27
    481e:	af 91       	pop	r26
    4820:	9f 91       	pop	r25
    4822:	8f 91       	pop	r24
    4824:	7f 91       	pop	r23
    4826:	6f 91       	pop	r22
    4828:	5f 91       	pop	r21
    482a:	4f 91       	pop	r20
    482c:	3f 91       	pop	r19
    482e:	2f 91       	pop	r18
    4830:	0f 90       	pop	r0
    4832:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
    4836:	0f 90       	pop	r0
    4838:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    483c:	0f 90       	pop	r0
    483e:	1f 90       	pop	r1
    4840:	18 95       	reti

00004842 <__vector_43>:

ISR(TIMER4_COMPB_vect)
{
    4842:	1f 92       	push	r1
    4844:	0f 92       	push	r0
    4846:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    484a:	0f 92       	push	r0
    484c:	11 24       	eor	r1, r1
    484e:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
    4852:	0f 92       	push	r0
    4854:	2f 93       	push	r18
    4856:	3f 93       	push	r19
    4858:	4f 93       	push	r20
    485a:	5f 93       	push	r21
    485c:	6f 93       	push	r22
    485e:	7f 93       	push	r23
    4860:	8f 93       	push	r24
    4862:	9f 93       	push	r25
    4864:	af 93       	push	r26
    4866:	bf 93       	push	r27
    4868:	ef 93       	push	r30
    486a:	ff 93       	push	r31
    486c:	cf 93       	push	r28
    486e:	df 93       	push	r29
    4870:	cd b7       	in	r28, 0x3d	; 61
    4872:	de b7       	in	r29, 0x3e	; 62
	if (tc_tccr4_compb_callback) {
    4874:	80 91 b1 0f 	lds	r24, 0x0FB1	; 0x800fb1 <tc_tccr4_compb_callback>
    4878:	90 91 b2 0f 	lds	r25, 0x0FB2	; 0x800fb2 <tc_tccr4_compb_callback+0x1>
    487c:	89 2b       	or	r24, r25
    487e:	31 f0       	breq	.+12     	; 0x488c <__vector_43+0x4a>
		tc_tccr4_compb_callback();
    4880:	80 91 b1 0f 	lds	r24, 0x0FB1	; 0x800fb1 <tc_tccr4_compb_callback>
    4884:	90 91 b2 0f 	lds	r25, 0x0FB2	; 0x800fb2 <tc_tccr4_compb_callback+0x1>
    4888:	fc 01       	movw	r30, r24
    488a:	09 95       	icall
	}
}
    488c:	00 00       	nop
    488e:	df 91       	pop	r29
    4890:	cf 91       	pop	r28
    4892:	ff 91       	pop	r31
    4894:	ef 91       	pop	r30
    4896:	bf 91       	pop	r27
    4898:	af 91       	pop	r26
    489a:	9f 91       	pop	r25
    489c:	8f 91       	pop	r24
    489e:	7f 91       	pop	r23
    48a0:	6f 91       	pop	r22
    48a2:	5f 91       	pop	r21
    48a4:	4f 91       	pop	r20
    48a6:	3f 91       	pop	r19
    48a8:	2f 91       	pop	r18
    48aa:	0f 90       	pop	r0
    48ac:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
    48b0:	0f 90       	pop	r0
    48b2:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    48b6:	0f 90       	pop	r0
    48b8:	1f 90       	pop	r1
    48ba:	18 95       	reti

000048bc <__vector_44>:

ISR(TIMER4_COMPC_vect)
{
    48bc:	1f 92       	push	r1
    48be:	0f 92       	push	r0
    48c0:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    48c4:	0f 92       	push	r0
    48c6:	11 24       	eor	r1, r1
    48c8:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
    48cc:	0f 92       	push	r0
    48ce:	2f 93       	push	r18
    48d0:	3f 93       	push	r19
    48d2:	4f 93       	push	r20
    48d4:	5f 93       	push	r21
    48d6:	6f 93       	push	r22
    48d8:	7f 93       	push	r23
    48da:	8f 93       	push	r24
    48dc:	9f 93       	push	r25
    48de:	af 93       	push	r26
    48e0:	bf 93       	push	r27
    48e2:	ef 93       	push	r30
    48e4:	ff 93       	push	r31
    48e6:	cf 93       	push	r28
    48e8:	df 93       	push	r29
    48ea:	cd b7       	in	r28, 0x3d	; 61
    48ec:	de b7       	in	r29, 0x3e	; 62
	if (tc_tccr4_compc_callback) {
    48ee:	80 91 b3 0f 	lds	r24, 0x0FB3	; 0x800fb3 <tc_tccr4_compc_callback>
    48f2:	90 91 b4 0f 	lds	r25, 0x0FB4	; 0x800fb4 <tc_tccr4_compc_callback+0x1>
    48f6:	89 2b       	or	r24, r25
    48f8:	31 f0       	breq	.+12     	; 0x4906 <__vector_44+0x4a>
		tc_tccr4_compc_callback();
    48fa:	80 91 b3 0f 	lds	r24, 0x0FB3	; 0x800fb3 <tc_tccr4_compc_callback>
    48fe:	90 91 b4 0f 	lds	r25, 0x0FB4	; 0x800fb4 <tc_tccr4_compc_callback+0x1>
    4902:	fc 01       	movw	r30, r24
    4904:	09 95       	icall
	}
}
    4906:	00 00       	nop
    4908:	df 91       	pop	r29
    490a:	cf 91       	pop	r28
    490c:	ff 91       	pop	r31
    490e:	ef 91       	pop	r30
    4910:	bf 91       	pop	r27
    4912:	af 91       	pop	r26
    4914:	9f 91       	pop	r25
    4916:	8f 91       	pop	r24
    4918:	7f 91       	pop	r23
    491a:	6f 91       	pop	r22
    491c:	5f 91       	pop	r21
    491e:	4f 91       	pop	r20
    4920:	3f 91       	pop	r19
    4922:	2f 91       	pop	r18
    4924:	0f 90       	pop	r0
    4926:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
    492a:	0f 90       	pop	r0
    492c:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    4930:	0f 90       	pop	r0
    4932:	1f 90       	pop	r1
    4934:	18 95       	reti

00004936 <__vector_50>:
static tc_callback_t tc_tccr5_compa_callback;
static tc_callback_t tc_tccr5_compb_callback;
static tc_callback_t tc_tccr5_compc_callback;

ISR(TIMER5_OVF_vect)
{
    4936:	1f 92       	push	r1
    4938:	0f 92       	push	r0
    493a:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    493e:	0f 92       	push	r0
    4940:	11 24       	eor	r1, r1
    4942:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
    4946:	0f 92       	push	r0
    4948:	2f 93       	push	r18
    494a:	3f 93       	push	r19
    494c:	4f 93       	push	r20
    494e:	5f 93       	push	r21
    4950:	6f 93       	push	r22
    4952:	7f 93       	push	r23
    4954:	8f 93       	push	r24
    4956:	9f 93       	push	r25
    4958:	af 93       	push	r26
    495a:	bf 93       	push	r27
    495c:	ef 93       	push	r30
    495e:	ff 93       	push	r31
    4960:	cf 93       	push	r28
    4962:	df 93       	push	r29
    4964:	cd b7       	in	r28, 0x3d	; 61
    4966:	de b7       	in	r29, 0x3e	; 62
	if (tc_tccr5_ovf_callback) {
    4968:	80 91 b5 0f 	lds	r24, 0x0FB5	; 0x800fb5 <tc_tccr5_ovf_callback>
    496c:	90 91 b6 0f 	lds	r25, 0x0FB6	; 0x800fb6 <tc_tccr5_ovf_callback+0x1>
    4970:	89 2b       	or	r24, r25
    4972:	31 f0       	breq	.+12     	; 0x4980 <__vector_50+0x4a>
		tc_tccr5_ovf_callback();
    4974:	80 91 b5 0f 	lds	r24, 0x0FB5	; 0x800fb5 <tc_tccr5_ovf_callback>
    4978:	90 91 b6 0f 	lds	r25, 0x0FB6	; 0x800fb6 <tc_tccr5_ovf_callback+0x1>
    497c:	fc 01       	movw	r30, r24
    497e:	09 95       	icall
	}
}
    4980:	00 00       	nop
    4982:	df 91       	pop	r29
    4984:	cf 91       	pop	r28
    4986:	ff 91       	pop	r31
    4988:	ef 91       	pop	r30
    498a:	bf 91       	pop	r27
    498c:	af 91       	pop	r26
    498e:	9f 91       	pop	r25
    4990:	8f 91       	pop	r24
    4992:	7f 91       	pop	r23
    4994:	6f 91       	pop	r22
    4996:	5f 91       	pop	r21
    4998:	4f 91       	pop	r20
    499a:	3f 91       	pop	r19
    499c:	2f 91       	pop	r18
    499e:	0f 90       	pop	r0
    49a0:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
    49a4:	0f 90       	pop	r0
    49a6:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    49aa:	0f 90       	pop	r0
    49ac:	1f 90       	pop	r1
    49ae:	18 95       	reti

000049b0 <__vector_47>:

ISR(TIMER5_COMPA_vect)
{
    49b0:	1f 92       	push	r1
    49b2:	0f 92       	push	r0
    49b4:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    49b8:	0f 92       	push	r0
    49ba:	11 24       	eor	r1, r1
    49bc:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
    49c0:	0f 92       	push	r0
    49c2:	2f 93       	push	r18
    49c4:	3f 93       	push	r19
    49c6:	4f 93       	push	r20
    49c8:	5f 93       	push	r21
    49ca:	6f 93       	push	r22
    49cc:	7f 93       	push	r23
    49ce:	8f 93       	push	r24
    49d0:	9f 93       	push	r25
    49d2:	af 93       	push	r26
    49d4:	bf 93       	push	r27
    49d6:	ef 93       	push	r30
    49d8:	ff 93       	push	r31
    49da:	cf 93       	push	r28
    49dc:	df 93       	push	r29
    49de:	cd b7       	in	r28, 0x3d	; 61
    49e0:	de b7       	in	r29, 0x3e	; 62
	if (tc_tccr5_compa_callback) {
    49e2:	80 91 b7 0f 	lds	r24, 0x0FB7	; 0x800fb7 <tc_tccr5_compa_callback>
    49e6:	90 91 b8 0f 	lds	r25, 0x0FB8	; 0x800fb8 <tc_tccr5_compa_callback+0x1>
    49ea:	89 2b       	or	r24, r25
    49ec:	31 f0       	breq	.+12     	; 0x49fa <__vector_47+0x4a>
		tc_tccr5_compa_callback();
    49ee:	80 91 b7 0f 	lds	r24, 0x0FB7	; 0x800fb7 <tc_tccr5_compa_callback>
    49f2:	90 91 b8 0f 	lds	r25, 0x0FB8	; 0x800fb8 <tc_tccr5_compa_callback+0x1>
    49f6:	fc 01       	movw	r30, r24
    49f8:	09 95       	icall
	}
}
    49fa:	00 00       	nop
    49fc:	df 91       	pop	r29
    49fe:	cf 91       	pop	r28
    4a00:	ff 91       	pop	r31
    4a02:	ef 91       	pop	r30
    4a04:	bf 91       	pop	r27
    4a06:	af 91       	pop	r26
    4a08:	9f 91       	pop	r25
    4a0a:	8f 91       	pop	r24
    4a0c:	7f 91       	pop	r23
    4a0e:	6f 91       	pop	r22
    4a10:	5f 91       	pop	r21
    4a12:	4f 91       	pop	r20
    4a14:	3f 91       	pop	r19
    4a16:	2f 91       	pop	r18
    4a18:	0f 90       	pop	r0
    4a1a:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
    4a1e:	0f 90       	pop	r0
    4a20:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    4a24:	0f 90       	pop	r0
    4a26:	1f 90       	pop	r1
    4a28:	18 95       	reti

00004a2a <__vector_48>:

ISR(TIMER5_COMPB_vect)
{
    4a2a:	1f 92       	push	r1
    4a2c:	0f 92       	push	r0
    4a2e:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    4a32:	0f 92       	push	r0
    4a34:	11 24       	eor	r1, r1
    4a36:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
    4a3a:	0f 92       	push	r0
    4a3c:	2f 93       	push	r18
    4a3e:	3f 93       	push	r19
    4a40:	4f 93       	push	r20
    4a42:	5f 93       	push	r21
    4a44:	6f 93       	push	r22
    4a46:	7f 93       	push	r23
    4a48:	8f 93       	push	r24
    4a4a:	9f 93       	push	r25
    4a4c:	af 93       	push	r26
    4a4e:	bf 93       	push	r27
    4a50:	ef 93       	push	r30
    4a52:	ff 93       	push	r31
    4a54:	cf 93       	push	r28
    4a56:	df 93       	push	r29
    4a58:	cd b7       	in	r28, 0x3d	; 61
    4a5a:	de b7       	in	r29, 0x3e	; 62
	if (tc_tccr5_compb_callback) {
    4a5c:	80 91 b9 0f 	lds	r24, 0x0FB9	; 0x800fb9 <tc_tccr5_compb_callback>
    4a60:	90 91 ba 0f 	lds	r25, 0x0FBA	; 0x800fba <tc_tccr5_compb_callback+0x1>
    4a64:	89 2b       	or	r24, r25
    4a66:	31 f0       	breq	.+12     	; 0x4a74 <__vector_48+0x4a>
		tc_tccr5_compb_callback();
    4a68:	80 91 b9 0f 	lds	r24, 0x0FB9	; 0x800fb9 <tc_tccr5_compb_callback>
    4a6c:	90 91 ba 0f 	lds	r25, 0x0FBA	; 0x800fba <tc_tccr5_compb_callback+0x1>
    4a70:	fc 01       	movw	r30, r24
    4a72:	09 95       	icall
	}
}
    4a74:	00 00       	nop
    4a76:	df 91       	pop	r29
    4a78:	cf 91       	pop	r28
    4a7a:	ff 91       	pop	r31
    4a7c:	ef 91       	pop	r30
    4a7e:	bf 91       	pop	r27
    4a80:	af 91       	pop	r26
    4a82:	9f 91       	pop	r25
    4a84:	8f 91       	pop	r24
    4a86:	7f 91       	pop	r23
    4a88:	6f 91       	pop	r22
    4a8a:	5f 91       	pop	r21
    4a8c:	4f 91       	pop	r20
    4a8e:	3f 91       	pop	r19
    4a90:	2f 91       	pop	r18
    4a92:	0f 90       	pop	r0
    4a94:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
    4a98:	0f 90       	pop	r0
    4a9a:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    4a9e:	0f 90       	pop	r0
    4aa0:	1f 90       	pop	r1
    4aa2:	18 95       	reti

00004aa4 <__vector_49>:

ISR(TIMER5_COMPC_vect)
{
    4aa4:	1f 92       	push	r1
    4aa6:	0f 92       	push	r0
    4aa8:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    4aac:	0f 92       	push	r0
    4aae:	11 24       	eor	r1, r1
    4ab0:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
    4ab4:	0f 92       	push	r0
    4ab6:	2f 93       	push	r18
    4ab8:	3f 93       	push	r19
    4aba:	4f 93       	push	r20
    4abc:	5f 93       	push	r21
    4abe:	6f 93       	push	r22
    4ac0:	7f 93       	push	r23
    4ac2:	8f 93       	push	r24
    4ac4:	9f 93       	push	r25
    4ac6:	af 93       	push	r26
    4ac8:	bf 93       	push	r27
    4aca:	ef 93       	push	r30
    4acc:	ff 93       	push	r31
    4ace:	cf 93       	push	r28
    4ad0:	df 93       	push	r29
    4ad2:	cd b7       	in	r28, 0x3d	; 61
    4ad4:	de b7       	in	r29, 0x3e	; 62
	if (tc_tccr5_compc_callback) {
    4ad6:	80 91 bb 0f 	lds	r24, 0x0FBB	; 0x800fbb <tc_tccr5_compc_callback>
    4ada:	90 91 bc 0f 	lds	r25, 0x0FBC	; 0x800fbc <tc_tccr5_compc_callback+0x1>
    4ade:	89 2b       	or	r24, r25
    4ae0:	31 f0       	breq	.+12     	; 0x4aee <__vector_49+0x4a>
		tc_tccr5_compc_callback();
    4ae2:	80 91 bb 0f 	lds	r24, 0x0FBB	; 0x800fbb <tc_tccr5_compc_callback>
    4ae6:	90 91 bc 0f 	lds	r25, 0x0FBC	; 0x800fbc <tc_tccr5_compc_callback+0x1>
    4aea:	fc 01       	movw	r30, r24
    4aec:	09 95       	icall
	}
}
    4aee:	00 00       	nop
    4af0:	df 91       	pop	r29
    4af2:	cf 91       	pop	r28
    4af4:	ff 91       	pop	r31
    4af6:	ef 91       	pop	r30
    4af8:	bf 91       	pop	r27
    4afa:	af 91       	pop	r26
    4afc:	9f 91       	pop	r25
    4afe:	8f 91       	pop	r24
    4b00:	7f 91       	pop	r23
    4b02:	6f 91       	pop	r22
    4b04:	5f 91       	pop	r21
    4b06:	4f 91       	pop	r20
    4b08:	3f 91       	pop	r19
    4b0a:	2f 91       	pop	r18
    4b0c:	0f 90       	pop	r0
    4b0e:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
    4b12:	0f 90       	pop	r0
    4b14:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    4b18:	0f 90       	pop	r0
    4b1a:	1f 90       	pop	r1
    4b1c:	18 95       	reti

00004b1e <tc_enable>:

void tc_enable(volatile void *tc)
{
    4b1e:	cf 93       	push	r28
    4b20:	df 93       	push	r29
    4b22:	00 d0       	rcall	.+0      	; 0x4b24 <tc_enable+0x6>
    4b24:	1f 92       	push	r1
    4b26:	cd b7       	in	r28, 0x3d	; 61
    4b28:	de b7       	in	r29, 0x3e	; 62
    4b2a:	9b 83       	std	Y+3, r25	; 0x03
    4b2c:	8a 83       	std	Y+2, r24	; 0x02
	irqflags_t iflags = cpu_irq_save();
    4b2e:	0e 94 85 20 	call	0x410a	; 0x410a <cpu_irq_save>
    4b32:	89 83       	std	Y+1, r24	; 0x01

	sysclk_enable_peripheral_clock(tc);
    4b34:	8a 81       	ldd	r24, Y+2	; 0x02
    4b36:	9b 81       	ldd	r25, Y+3	; 0x03
    4b38:	0e 94 a5 20 	call	0x414a	; 0x414a <sysclk_enable_peripheral_clock>

	cpu_irq_restore(iflags);
    4b3c:	89 81       	ldd	r24, Y+1	; 0x01
    4b3e:	0e 94 95 20 	call	0x412a	; 0x412a <cpu_irq_restore>
}
    4b42:	00 00       	nop
    4b44:	0f 90       	pop	r0
    4b46:	0f 90       	pop	r0
    4b48:	0f 90       	pop	r0
    4b4a:	df 91       	pop	r29
    4b4c:	cf 91       	pop	r28
    4b4e:	08 95       	ret

00004b50 <tc_disable>:

void tc_disable(volatile void *tc)
{
    4b50:	cf 93       	push	r28
    4b52:	df 93       	push	r29
    4b54:	00 d0       	rcall	.+0      	; 0x4b56 <tc_disable+0x6>
    4b56:	1f 92       	push	r1
    4b58:	cd b7       	in	r28, 0x3d	; 61
    4b5a:	de b7       	in	r29, 0x3e	; 62
    4b5c:	9b 83       	std	Y+3, r25	; 0x03
    4b5e:	8a 83       	std	Y+2, r24	; 0x02
	irqflags_t iflags = cpu_irq_save();
    4b60:	0e 94 85 20 	call	0x410a	; 0x410a <cpu_irq_save>
    4b64:	89 83       	std	Y+1, r24	; 0x01

	sysclk_disable_peripheral_clock(tc);
    4b66:	8a 81       	ldd	r24, Y+2	; 0x02
    4b68:	9b 81       	ldd	r25, Y+3	; 0x03
    4b6a:	0e 94 32 21 	call	0x4264	; 0x4264 <sysclk_disable_peripheral_clock>

	cpu_irq_restore(iflags);
    4b6e:	89 81       	ldd	r24, Y+1	; 0x01
    4b70:	0e 94 95 20 	call	0x412a	; 0x412a <cpu_irq_restore>
}
    4b74:	00 00       	nop
    4b76:	0f 90       	pop	r0
    4b78:	0f 90       	pop	r0
    4b7a:	0f 90       	pop	r0
    4b7c:	df 91       	pop	r29
    4b7e:	cf 91       	pop	r28
    4b80:	08 95       	ret

00004b82 <tc_set_overflow_interrupt_callback>:

void tc_set_overflow_interrupt_callback(volatile void *tc,
		tc_callback_t callback)
{
    4b82:	cf 93       	push	r28
    4b84:	df 93       	push	r29
    4b86:	00 d0       	rcall	.+0      	; 0x4b88 <tc_set_overflow_interrupt_callback+0x6>
    4b88:	00 d0       	rcall	.+0      	; 0x4b8a <tc_set_overflow_interrupt_callback+0x8>
    4b8a:	cd b7       	in	r28, 0x3d	; 61
    4b8c:	de b7       	in	r29, 0x3e	; 62
    4b8e:	9a 83       	std	Y+2, r25	; 0x02
    4b90:	89 83       	std	Y+1, r24	; 0x01
    4b92:	7c 83       	std	Y+4, r23	; 0x04
    4b94:	6b 83       	std	Y+3, r22	; 0x03
	if ((uintptr_t)tc == (uintptr_t)&TCCR1A) {
    4b96:	89 81       	ldd	r24, Y+1	; 0x01
    4b98:	9a 81       	ldd	r25, Y+2	; 0x02
    4b9a:	80 38       	cpi	r24, 0x80	; 128
    4b9c:	91 05       	cpc	r25, r1
    4b9e:	39 f4       	brne	.+14     	; 0x4bae <tc_set_overflow_interrupt_callback+0x2c>
		tc_tccr1_ovf_callback = callback;
    4ba0:	8b 81       	ldd	r24, Y+3	; 0x03
    4ba2:	9c 81       	ldd	r25, Y+4	; 0x04
    4ba4:	90 93 9e 0f 	sts	0x0F9E, r25	; 0x800f9e <tc_tccr1_ovf_callback+0x1>
    4ba8:	80 93 9d 0f 	sts	0x0F9D, r24	; 0x800f9d <tc_tccr1_ovf_callback>
	} else if ((uintptr_t)tc == (uintptr_t)&TCCR4A) {
		tc_tccr4_ovf_callback = callback;
	} else if ((uintptr_t)tc == (uintptr_t)&TCCR5A) {
		tc_tccr5_ovf_callback = callback;
	} else {}
}
    4bac:	23 c0       	rjmp	.+70     	; 0x4bf4 <tc_set_overflow_interrupt_callback+0x72>
void tc_set_overflow_interrupt_callback(volatile void *tc,
		tc_callback_t callback)
{
	if ((uintptr_t)tc == (uintptr_t)&TCCR1A) {
		tc_tccr1_ovf_callback = callback;
	} else if ((uintptr_t)tc == (uintptr_t)&TCCR3A) {
    4bae:	89 81       	ldd	r24, Y+1	; 0x01
    4bb0:	9a 81       	ldd	r25, Y+2	; 0x02
    4bb2:	80 39       	cpi	r24, 0x90	; 144
    4bb4:	91 05       	cpc	r25, r1
    4bb6:	39 f4       	brne	.+14     	; 0x4bc6 <tc_set_overflow_interrupt_callback+0x44>
		tc_tccr3_ovf_callback = callback;
    4bb8:	8b 81       	ldd	r24, Y+3	; 0x03
    4bba:	9c 81       	ldd	r25, Y+4	; 0x04
    4bbc:	90 93 a6 0f 	sts	0x0FA6, r25	; 0x800fa6 <tc_tccr3_ovf_callback+0x1>
    4bc0:	80 93 a5 0f 	sts	0x0FA5, r24	; 0x800fa5 <tc_tccr3_ovf_callback>
	} else if ((uintptr_t)tc == (uintptr_t)&TCCR4A) {
		tc_tccr4_ovf_callback = callback;
	} else if ((uintptr_t)tc == (uintptr_t)&TCCR5A) {
		tc_tccr5_ovf_callback = callback;
	} else {}
}
    4bc4:	17 c0       	rjmp	.+46     	; 0x4bf4 <tc_set_overflow_interrupt_callback+0x72>
{
	if ((uintptr_t)tc == (uintptr_t)&TCCR1A) {
		tc_tccr1_ovf_callback = callback;
	} else if ((uintptr_t)tc == (uintptr_t)&TCCR3A) {
		tc_tccr3_ovf_callback = callback;
	} else if ((uintptr_t)tc == (uintptr_t)&TCCR4A) {
    4bc6:	89 81       	ldd	r24, Y+1	; 0x01
    4bc8:	9a 81       	ldd	r25, Y+2	; 0x02
    4bca:	80 3a       	cpi	r24, 0xA0	; 160
    4bcc:	91 05       	cpc	r25, r1
    4bce:	39 f4       	brne	.+14     	; 0x4bde <tc_set_overflow_interrupt_callback+0x5c>
		tc_tccr4_ovf_callback = callback;
    4bd0:	8b 81       	ldd	r24, Y+3	; 0x03
    4bd2:	9c 81       	ldd	r25, Y+4	; 0x04
    4bd4:	90 93 ae 0f 	sts	0x0FAE, r25	; 0x800fae <tc_tccr4_ovf_callback+0x1>
    4bd8:	80 93 ad 0f 	sts	0x0FAD, r24	; 0x800fad <tc_tccr4_ovf_callback>
	} else if ((uintptr_t)tc == (uintptr_t)&TCCR5A) {
		tc_tccr5_ovf_callback = callback;
	} else {}
}
    4bdc:	0b c0       	rjmp	.+22     	; 0x4bf4 <tc_set_overflow_interrupt_callback+0x72>
		tc_tccr1_ovf_callback = callback;
	} else if ((uintptr_t)tc == (uintptr_t)&TCCR3A) {
		tc_tccr3_ovf_callback = callback;
	} else if ((uintptr_t)tc == (uintptr_t)&TCCR4A) {
		tc_tccr4_ovf_callback = callback;
	} else if ((uintptr_t)tc == (uintptr_t)&TCCR5A) {
    4bde:	89 81       	ldd	r24, Y+1	; 0x01
    4be0:	9a 81       	ldd	r25, Y+2	; 0x02
    4be2:	80 32       	cpi	r24, 0x20	; 32
    4be4:	91 40       	sbci	r25, 0x01	; 1
    4be6:	31 f4       	brne	.+12     	; 0x4bf4 <tc_set_overflow_interrupt_callback+0x72>
		tc_tccr5_ovf_callback = callback;
    4be8:	8b 81       	ldd	r24, Y+3	; 0x03
    4bea:	9c 81       	ldd	r25, Y+4	; 0x04
    4bec:	90 93 b6 0f 	sts	0x0FB6, r25	; 0x800fb6 <tc_tccr5_ovf_callback+0x1>
    4bf0:	80 93 b5 0f 	sts	0x0FB5, r24	; 0x800fb5 <tc_tccr5_ovf_callback>
	} else {}
}
    4bf4:	00 00       	nop
    4bf6:	0f 90       	pop	r0
    4bf8:	0f 90       	pop	r0
    4bfa:	0f 90       	pop	r0
    4bfc:	0f 90       	pop	r0
    4bfe:	df 91       	pop	r29
    4c00:	cf 91       	pop	r28
    4c02:	08 95       	ret

00004c04 <tc_set_compa_interrupt_callback>:

void tc_set_compa_interrupt_callback(volatile void *tc, tc_callback_t callback)
{
    4c04:	cf 93       	push	r28
    4c06:	df 93       	push	r29
    4c08:	00 d0       	rcall	.+0      	; 0x4c0a <tc_set_compa_interrupt_callback+0x6>
    4c0a:	00 d0       	rcall	.+0      	; 0x4c0c <tc_set_compa_interrupt_callback+0x8>
    4c0c:	cd b7       	in	r28, 0x3d	; 61
    4c0e:	de b7       	in	r29, 0x3e	; 62
    4c10:	9a 83       	std	Y+2, r25	; 0x02
    4c12:	89 83       	std	Y+1, r24	; 0x01
    4c14:	7c 83       	std	Y+4, r23	; 0x04
    4c16:	6b 83       	std	Y+3, r22	; 0x03
	if ((uintptr_t)tc == (uintptr_t)&TCCR1A) {
    4c18:	89 81       	ldd	r24, Y+1	; 0x01
    4c1a:	9a 81       	ldd	r25, Y+2	; 0x02
    4c1c:	80 38       	cpi	r24, 0x80	; 128
    4c1e:	91 05       	cpc	r25, r1
    4c20:	39 f4       	brne	.+14     	; 0x4c30 <tc_set_compa_interrupt_callback+0x2c>
		tc_tccr1_compa_callback = callback;
    4c22:	8b 81       	ldd	r24, Y+3	; 0x03
    4c24:	9c 81       	ldd	r25, Y+4	; 0x04
    4c26:	90 93 a0 0f 	sts	0x0FA0, r25	; 0x800fa0 <tc_tccr1_compa_callback+0x1>
    4c2a:	80 93 9f 0f 	sts	0x0F9F, r24	; 0x800f9f <tc_tccr1_compa_callback>
	} else if ((uintptr_t)tc == (uintptr_t)&TCCR4A) {
		tc_tccr4_compa_callback = callback;
	} else if ((uintptr_t)tc == (uintptr_t)&TCCR5A) {
		tc_tccr5_compa_callback = callback;
	} else {}
}
    4c2e:	23 c0       	rjmp	.+70     	; 0x4c76 <tc_set_compa_interrupt_callback+0x72>

void tc_set_compa_interrupt_callback(volatile void *tc, tc_callback_t callback)
{
	if ((uintptr_t)tc == (uintptr_t)&TCCR1A) {
		tc_tccr1_compa_callback = callback;
	} else if ((uintptr_t)tc == (uintptr_t)&TCCR3A) {
    4c30:	89 81       	ldd	r24, Y+1	; 0x01
    4c32:	9a 81       	ldd	r25, Y+2	; 0x02
    4c34:	80 39       	cpi	r24, 0x90	; 144
    4c36:	91 05       	cpc	r25, r1
    4c38:	39 f4       	brne	.+14     	; 0x4c48 <tc_set_compa_interrupt_callback+0x44>
		tc_tccr3_compa_callback = callback;
    4c3a:	8b 81       	ldd	r24, Y+3	; 0x03
    4c3c:	9c 81       	ldd	r25, Y+4	; 0x04
    4c3e:	90 93 a8 0f 	sts	0x0FA8, r25	; 0x800fa8 <tc_tccr3_compa_callback+0x1>
    4c42:	80 93 a7 0f 	sts	0x0FA7, r24	; 0x800fa7 <tc_tccr3_compa_callback>
	} else if ((uintptr_t)tc == (uintptr_t)&TCCR4A) {
		tc_tccr4_compa_callback = callback;
	} else if ((uintptr_t)tc == (uintptr_t)&TCCR5A) {
		tc_tccr5_compa_callback = callback;
	} else {}
}
    4c46:	17 c0       	rjmp	.+46     	; 0x4c76 <tc_set_compa_interrupt_callback+0x72>
{
	if ((uintptr_t)tc == (uintptr_t)&TCCR1A) {
		tc_tccr1_compa_callback = callback;
	} else if ((uintptr_t)tc == (uintptr_t)&TCCR3A) {
		tc_tccr3_compa_callback = callback;
	} else if ((uintptr_t)tc == (uintptr_t)&TCCR4A) {
    4c48:	89 81       	ldd	r24, Y+1	; 0x01
    4c4a:	9a 81       	ldd	r25, Y+2	; 0x02
    4c4c:	80 3a       	cpi	r24, 0xA0	; 160
    4c4e:	91 05       	cpc	r25, r1
    4c50:	39 f4       	brne	.+14     	; 0x4c60 <tc_set_compa_interrupt_callback+0x5c>
		tc_tccr4_compa_callback = callback;
    4c52:	8b 81       	ldd	r24, Y+3	; 0x03
    4c54:	9c 81       	ldd	r25, Y+4	; 0x04
    4c56:	90 93 b0 0f 	sts	0x0FB0, r25	; 0x800fb0 <tc_tccr4_compa_callback+0x1>
    4c5a:	80 93 af 0f 	sts	0x0FAF, r24	; 0x800faf <tc_tccr4_compa_callback>
	} else if ((uintptr_t)tc == (uintptr_t)&TCCR5A) {
		tc_tccr5_compa_callback = callback;
	} else {}
}
    4c5e:	0b c0       	rjmp	.+22     	; 0x4c76 <tc_set_compa_interrupt_callback+0x72>
		tc_tccr1_compa_callback = callback;
	} else if ((uintptr_t)tc == (uintptr_t)&TCCR3A) {
		tc_tccr3_compa_callback = callback;
	} else if ((uintptr_t)tc == (uintptr_t)&TCCR4A) {
		tc_tccr4_compa_callback = callback;
	} else if ((uintptr_t)tc == (uintptr_t)&TCCR5A) {
    4c60:	89 81       	ldd	r24, Y+1	; 0x01
    4c62:	9a 81       	ldd	r25, Y+2	; 0x02
    4c64:	80 32       	cpi	r24, 0x20	; 32
    4c66:	91 40       	sbci	r25, 0x01	; 1
    4c68:	31 f4       	brne	.+12     	; 0x4c76 <tc_set_compa_interrupt_callback+0x72>
		tc_tccr5_compa_callback = callback;
    4c6a:	8b 81       	ldd	r24, Y+3	; 0x03
    4c6c:	9c 81       	ldd	r25, Y+4	; 0x04
    4c6e:	90 93 b8 0f 	sts	0x0FB8, r25	; 0x800fb8 <tc_tccr5_compa_callback+0x1>
    4c72:	80 93 b7 0f 	sts	0x0FB7, r24	; 0x800fb7 <tc_tccr5_compa_callback>
	} else {}
}
    4c76:	00 00       	nop
    4c78:	0f 90       	pop	r0
    4c7a:	0f 90       	pop	r0
    4c7c:	0f 90       	pop	r0
    4c7e:	0f 90       	pop	r0
    4c80:	df 91       	pop	r29
    4c82:	cf 91       	pop	r28
    4c84:	08 95       	ret

00004c86 <tc_set_compb_interrupt_callback>:

void tc_set_compb_interrupt_callback(volatile void *tc, tc_callback_t callback)
{
    4c86:	cf 93       	push	r28
    4c88:	df 93       	push	r29
    4c8a:	00 d0       	rcall	.+0      	; 0x4c8c <tc_set_compb_interrupt_callback+0x6>
    4c8c:	00 d0       	rcall	.+0      	; 0x4c8e <tc_set_compb_interrupt_callback+0x8>
    4c8e:	cd b7       	in	r28, 0x3d	; 61
    4c90:	de b7       	in	r29, 0x3e	; 62
    4c92:	9a 83       	std	Y+2, r25	; 0x02
    4c94:	89 83       	std	Y+1, r24	; 0x01
    4c96:	7c 83       	std	Y+4, r23	; 0x04
    4c98:	6b 83       	std	Y+3, r22	; 0x03
	if ((uintptr_t)tc == (uintptr_t)&TCCR1A) {
    4c9a:	89 81       	ldd	r24, Y+1	; 0x01
    4c9c:	9a 81       	ldd	r25, Y+2	; 0x02
    4c9e:	80 38       	cpi	r24, 0x80	; 128
    4ca0:	91 05       	cpc	r25, r1
    4ca2:	39 f4       	brne	.+14     	; 0x4cb2 <tc_set_compb_interrupt_callback+0x2c>
		tc_tccr1_compb_callback = callback;
    4ca4:	8b 81       	ldd	r24, Y+3	; 0x03
    4ca6:	9c 81       	ldd	r25, Y+4	; 0x04
    4ca8:	90 93 a2 0f 	sts	0x0FA2, r25	; 0x800fa2 <tc_tccr1_compb_callback+0x1>
    4cac:	80 93 a1 0f 	sts	0x0FA1, r24	; 0x800fa1 <tc_tccr1_compb_callback>
	} else if ((uintptr_t)tc == (uintptr_t)&TCCR4A) {
		tc_tccr4_compb_callback = callback;
	} else if ((uintptr_t)tc == (uintptr_t)&TCCR5A) {
		tc_tccr5_compb_callback = callback;
	} else {}
}
    4cb0:	23 c0       	rjmp	.+70     	; 0x4cf8 <tc_set_compb_interrupt_callback+0x72>

void tc_set_compb_interrupt_callback(volatile void *tc, tc_callback_t callback)
{
	if ((uintptr_t)tc == (uintptr_t)&TCCR1A) {
		tc_tccr1_compb_callback = callback;
	} else if ((uintptr_t)tc == (uintptr_t)&TCCR3A) {
    4cb2:	89 81       	ldd	r24, Y+1	; 0x01
    4cb4:	9a 81       	ldd	r25, Y+2	; 0x02
    4cb6:	80 39       	cpi	r24, 0x90	; 144
    4cb8:	91 05       	cpc	r25, r1
    4cba:	39 f4       	brne	.+14     	; 0x4cca <tc_set_compb_interrupt_callback+0x44>
		tc_tccr3_compb_callback = callback;
    4cbc:	8b 81       	ldd	r24, Y+3	; 0x03
    4cbe:	9c 81       	ldd	r25, Y+4	; 0x04
    4cc0:	90 93 aa 0f 	sts	0x0FAA, r25	; 0x800faa <tc_tccr3_compb_callback+0x1>
    4cc4:	80 93 a9 0f 	sts	0x0FA9, r24	; 0x800fa9 <tc_tccr3_compb_callback>
	} else if ((uintptr_t)tc == (uintptr_t)&TCCR4A) {
		tc_tccr4_compb_callback = callback;
	} else if ((uintptr_t)tc == (uintptr_t)&TCCR5A) {
		tc_tccr5_compb_callback = callback;
	} else {}
}
    4cc8:	17 c0       	rjmp	.+46     	; 0x4cf8 <tc_set_compb_interrupt_callback+0x72>
{
	if ((uintptr_t)tc == (uintptr_t)&TCCR1A) {
		tc_tccr1_compb_callback = callback;
	} else if ((uintptr_t)tc == (uintptr_t)&TCCR3A) {
		tc_tccr3_compb_callback = callback;
	} else if ((uintptr_t)tc == (uintptr_t)&TCCR4A) {
    4cca:	89 81       	ldd	r24, Y+1	; 0x01
    4ccc:	9a 81       	ldd	r25, Y+2	; 0x02
    4cce:	80 3a       	cpi	r24, 0xA0	; 160
    4cd0:	91 05       	cpc	r25, r1
    4cd2:	39 f4       	brne	.+14     	; 0x4ce2 <tc_set_compb_interrupt_callback+0x5c>
		tc_tccr4_compb_callback = callback;
    4cd4:	8b 81       	ldd	r24, Y+3	; 0x03
    4cd6:	9c 81       	ldd	r25, Y+4	; 0x04
    4cd8:	90 93 b2 0f 	sts	0x0FB2, r25	; 0x800fb2 <tc_tccr4_compb_callback+0x1>
    4cdc:	80 93 b1 0f 	sts	0x0FB1, r24	; 0x800fb1 <tc_tccr4_compb_callback>
	} else if ((uintptr_t)tc == (uintptr_t)&TCCR5A) {
		tc_tccr5_compb_callback = callback;
	} else {}
}
    4ce0:	0b c0       	rjmp	.+22     	; 0x4cf8 <tc_set_compb_interrupt_callback+0x72>
		tc_tccr1_compb_callback = callback;
	} else if ((uintptr_t)tc == (uintptr_t)&TCCR3A) {
		tc_tccr3_compb_callback = callback;
	} else if ((uintptr_t)tc == (uintptr_t)&TCCR4A) {
		tc_tccr4_compb_callback = callback;
	} else if ((uintptr_t)tc == (uintptr_t)&TCCR5A) {
    4ce2:	89 81       	ldd	r24, Y+1	; 0x01
    4ce4:	9a 81       	ldd	r25, Y+2	; 0x02
    4ce6:	80 32       	cpi	r24, 0x20	; 32
    4ce8:	91 40       	sbci	r25, 0x01	; 1
    4cea:	31 f4       	brne	.+12     	; 0x4cf8 <tc_set_compb_interrupt_callback+0x72>
		tc_tccr5_compb_callback = callback;
    4cec:	8b 81       	ldd	r24, Y+3	; 0x03
    4cee:	9c 81       	ldd	r25, Y+4	; 0x04
    4cf0:	90 93 ba 0f 	sts	0x0FBA, r25	; 0x800fba <tc_tccr5_compb_callback+0x1>
    4cf4:	80 93 b9 0f 	sts	0x0FB9, r24	; 0x800fb9 <tc_tccr5_compb_callback>
	} else {}
}
    4cf8:	00 00       	nop
    4cfa:	0f 90       	pop	r0
    4cfc:	0f 90       	pop	r0
    4cfe:	0f 90       	pop	r0
    4d00:	0f 90       	pop	r0
    4d02:	df 91       	pop	r29
    4d04:	cf 91       	pop	r28
    4d06:	08 95       	ret

00004d08 <tc_set_compc_interrupt_callback>:

void tc_set_compc_interrupt_callback(volatile void *tc, tc_callback_t callback)
{
    4d08:	cf 93       	push	r28
    4d0a:	df 93       	push	r29
    4d0c:	00 d0       	rcall	.+0      	; 0x4d0e <tc_set_compc_interrupt_callback+0x6>
    4d0e:	00 d0       	rcall	.+0      	; 0x4d10 <tc_set_compc_interrupt_callback+0x8>
    4d10:	cd b7       	in	r28, 0x3d	; 61
    4d12:	de b7       	in	r29, 0x3e	; 62
    4d14:	9a 83       	std	Y+2, r25	; 0x02
    4d16:	89 83       	std	Y+1, r24	; 0x01
    4d18:	7c 83       	std	Y+4, r23	; 0x04
    4d1a:	6b 83       	std	Y+3, r22	; 0x03
	if ((uintptr_t)tc == (uintptr_t)&TCCR1A) {
    4d1c:	89 81       	ldd	r24, Y+1	; 0x01
    4d1e:	9a 81       	ldd	r25, Y+2	; 0x02
    4d20:	80 38       	cpi	r24, 0x80	; 128
    4d22:	91 05       	cpc	r25, r1
    4d24:	39 f4       	brne	.+14     	; 0x4d34 <tc_set_compc_interrupt_callback+0x2c>
		tc_tccr1_compc_callback = callback;
    4d26:	8b 81       	ldd	r24, Y+3	; 0x03
    4d28:	9c 81       	ldd	r25, Y+4	; 0x04
    4d2a:	90 93 a4 0f 	sts	0x0FA4, r25	; 0x800fa4 <tc_tccr1_compc_callback+0x1>
    4d2e:	80 93 a3 0f 	sts	0x0FA3, r24	; 0x800fa3 <tc_tccr1_compc_callback>
	} else if ((uintptr_t)tc == (uintptr_t)&TCCR4A) {
		tc_tccr4_compc_callback = callback;
	} else if ((uintptr_t)tc == (uintptr_t)&TCCR5A) {
		tc_tccr5_compc_callback = callback;
	} else {}
}
    4d32:	23 c0       	rjmp	.+70     	; 0x4d7a <tc_set_compc_interrupt_callback+0x72>

void tc_set_compc_interrupt_callback(volatile void *tc, tc_callback_t callback)
{
	if ((uintptr_t)tc == (uintptr_t)&TCCR1A) {
		tc_tccr1_compc_callback = callback;
	} else if ((uintptr_t)tc == (uintptr_t)&TCCR3A) {
    4d34:	89 81       	ldd	r24, Y+1	; 0x01
    4d36:	9a 81       	ldd	r25, Y+2	; 0x02
    4d38:	80 39       	cpi	r24, 0x90	; 144
    4d3a:	91 05       	cpc	r25, r1
    4d3c:	39 f4       	brne	.+14     	; 0x4d4c <tc_set_compc_interrupt_callback+0x44>
		tc_tccr3_compc_callback = callback;
    4d3e:	8b 81       	ldd	r24, Y+3	; 0x03
    4d40:	9c 81       	ldd	r25, Y+4	; 0x04
    4d42:	90 93 ac 0f 	sts	0x0FAC, r25	; 0x800fac <tc_tccr3_compc_callback+0x1>
    4d46:	80 93 ab 0f 	sts	0x0FAB, r24	; 0x800fab <tc_tccr3_compc_callback>
	} else if ((uintptr_t)tc == (uintptr_t)&TCCR4A) {
		tc_tccr4_compc_callback = callback;
	} else if ((uintptr_t)tc == (uintptr_t)&TCCR5A) {
		tc_tccr5_compc_callback = callback;
	} else {}
}
    4d4a:	17 c0       	rjmp	.+46     	; 0x4d7a <tc_set_compc_interrupt_callback+0x72>
{
	if ((uintptr_t)tc == (uintptr_t)&TCCR1A) {
		tc_tccr1_compc_callback = callback;
	} else if ((uintptr_t)tc == (uintptr_t)&TCCR3A) {
		tc_tccr3_compc_callback = callback;
	} else if ((uintptr_t)tc == (uintptr_t)&TCCR4A) {
    4d4c:	89 81       	ldd	r24, Y+1	; 0x01
    4d4e:	9a 81       	ldd	r25, Y+2	; 0x02
    4d50:	80 3a       	cpi	r24, 0xA0	; 160
    4d52:	91 05       	cpc	r25, r1
    4d54:	39 f4       	brne	.+14     	; 0x4d64 <tc_set_compc_interrupt_callback+0x5c>
		tc_tccr4_compc_callback = callback;
    4d56:	8b 81       	ldd	r24, Y+3	; 0x03
    4d58:	9c 81       	ldd	r25, Y+4	; 0x04
    4d5a:	90 93 b4 0f 	sts	0x0FB4, r25	; 0x800fb4 <tc_tccr4_compc_callback+0x1>
    4d5e:	80 93 b3 0f 	sts	0x0FB3, r24	; 0x800fb3 <tc_tccr4_compc_callback>
	} else if ((uintptr_t)tc == (uintptr_t)&TCCR5A) {
		tc_tccr5_compc_callback = callback;
	} else {}
}
    4d62:	0b c0       	rjmp	.+22     	; 0x4d7a <tc_set_compc_interrupt_callback+0x72>
		tc_tccr1_compc_callback = callback;
	} else if ((uintptr_t)tc == (uintptr_t)&TCCR3A) {
		tc_tccr3_compc_callback = callback;
	} else if ((uintptr_t)tc == (uintptr_t)&TCCR4A) {
		tc_tccr4_compc_callback = callback;
	} else if ((uintptr_t)tc == (uintptr_t)&TCCR5A) {
    4d64:	89 81       	ldd	r24, Y+1	; 0x01
    4d66:	9a 81       	ldd	r25, Y+2	; 0x02
    4d68:	80 32       	cpi	r24, 0x20	; 32
    4d6a:	91 40       	sbci	r25, 0x01	; 1
    4d6c:	31 f4       	brne	.+12     	; 0x4d7a <tc_set_compc_interrupt_callback+0x72>
		tc_tccr5_compc_callback = callback;
    4d6e:	8b 81       	ldd	r24, Y+3	; 0x03
    4d70:	9c 81       	ldd	r25, Y+4	; 0x04
    4d72:	90 93 bc 0f 	sts	0x0FBC, r25	; 0x800fbc <tc_tccr5_compc_callback+0x1>
    4d76:	80 93 bb 0f 	sts	0x0FBB, r24	; 0x800fbb <tc_tccr5_compc_callback>
	} else {}
}
    4d7a:	00 00       	nop
    4d7c:	0f 90       	pop	r0
    4d7e:	0f 90       	pop	r0
    4d80:	0f 90       	pop	r0
    4d82:	0f 90       	pop	r0
    4d84:	df 91       	pop	r29
    4d86:	cf 91       	pop	r28
    4d88:	08 95       	ret

00004d8a <sal_init>:
 * @brief Initialization of SAL.
 *
 * This functions initializes the SAL.
 */
void sal_init(void)
{
    4d8a:	cf 93       	push	r28
    4d8c:	df 93       	push	r29
    4d8e:	cd b7       	in	r28, 0x3d	; 61
    4d90:	de b7       	in	r29, 0x3e	; 62
}
    4d92:	00 00       	nop
    4d94:	df 91       	pop	r29
    4d96:	cf 91       	pop	r28
    4d98:	08 95       	ret

00004d9a <sal_aes_setup>:
 * @return  False if some parameter was illegal, true else
 */
bool sal_aes_setup(uint8_t *key,
		uint8_t enc_mode,
		uint8_t dir)
{
    4d9a:	cf 93       	push	r28
    4d9c:	df 93       	push	r29
    4d9e:	cd b7       	in	r28, 0x3d	; 61
    4da0:	de b7       	in	r29, 0x3e	; 62
    4da2:	65 97       	sbiw	r28, 0x15	; 21
    4da4:	0f b6       	in	r0, 0x3f	; 63
    4da6:	f8 94       	cli
    4da8:	de bf       	out	0x3e, r29	; 62
    4daa:	0f be       	out	0x3f, r0	; 63
    4dac:	cd bf       	out	0x3d, r28	; 61
    4dae:	9b 8b       	std	Y+19, r25	; 0x13
    4db0:	8a 8b       	std	Y+18, r24	; 0x12
    4db2:	6c 8b       	std	Y+20, r22	; 0x14
    4db4:	4d 8b       	std	Y+21, r20	; 0x15
	uint8_t i;

	if (key != NULL) {
    4db6:	8a 89       	ldd	r24, Y+18	; 0x12
    4db8:	9b 89       	ldd	r25, Y+19	; 0x13
    4dba:	89 2b       	or	r24, r25
    4dbc:	21 f1       	breq	.+72     	; 0x4e06 <sal_aes_setup+0x6c>
		/* Setup key. */
		dec_initialized = false;
    4dbe:	10 92 bd 0f 	sts	0x0FBD, r1	; 0x800fbd <dec_initialized>

		last_dir = AES_DIR_VOID;
    4dc2:	82 e0       	ldi	r24, 0x02	; 2
    4dc4:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <last_dir>

		/* Save key for later use after decryption or sleep. */
		memcpy(enc_key, key, AES_KEYSIZE);
    4dc8:	8a 89       	ldd	r24, Y+18	; 0x12
    4dca:	9b 89       	ldd	r25, Y+19	; 0x13
    4dcc:	20 e1       	ldi	r18, 0x10	; 16
    4dce:	fc 01       	movw	r30, r24
    4dd0:	af eb       	ldi	r26, 0xBF	; 191
    4dd2:	bf e0       	ldi	r27, 0x0F	; 15
    4dd4:	01 90       	ld	r0, Z+
    4dd6:	0d 92       	st	X+, r0
    4dd8:	2a 95       	dec	r18
    4dda:	e1 f7       	brne	.-8      	; 0x4dd4 <sal_aes_setup+0x3a>

		/* fill in key */
		for (i = 0; i < AES_BLOCKSIZE; ++i) {
    4ddc:	19 82       	std	Y+1, r1	; 0x01
    4dde:	10 c0       	rjmp	.+32     	; 0x4e00 <sal_aes_setup+0x66>
			trx_reg_write(RG_AES_KEY, key[i]);
    4de0:	8f e3       	ldi	r24, 0x3F	; 63
    4de2:	91 e0       	ldi	r25, 0x01	; 1
    4de4:	29 81       	ldd	r18, Y+1	; 0x01
    4de6:	22 2f       	mov	r18, r18
    4de8:	30 e0       	ldi	r19, 0x00	; 0
    4dea:	4a 89       	ldd	r20, Y+18	; 0x12
    4dec:	5b 89       	ldd	r21, Y+19	; 0x13
    4dee:	24 0f       	add	r18, r20
    4df0:	35 1f       	adc	r19, r21
    4df2:	f9 01       	movw	r30, r18
    4df4:	20 81       	ld	r18, Z
    4df6:	fc 01       	movw	r30, r24
    4df8:	20 83       	st	Z, r18

		/* Save key for later use after decryption or sleep. */
		memcpy(enc_key, key, AES_KEYSIZE);

		/* fill in key */
		for (i = 0; i < AES_BLOCKSIZE; ++i) {
    4dfa:	89 81       	ldd	r24, Y+1	; 0x01
    4dfc:	8f 5f       	subi	r24, 0xFF	; 255
    4dfe:	89 83       	std	Y+1, r24	; 0x01
    4e00:	89 81       	ldd	r24, Y+1	; 0x01
    4e02:	80 31       	cpi	r24, 0x10	; 16
    4e04:	68 f3       	brcs	.-38     	; 0x4de0 <sal_aes_setup+0x46>
			trx_reg_write(RG_AES_KEY, key[i]);
		}
	}

	/* Set encryption direction. */
	switch (dir) {
    4e06:	8d 89       	ldd	r24, Y+21	; 0x15
    4e08:	88 2f       	mov	r24, r24
    4e0a:	90 e0       	ldi	r25, 0x00	; 0
    4e0c:	00 97       	sbiw	r24, 0x00	; 0
    4e0e:	19 f0       	breq	.+6      	; 0x4e16 <sal_aes_setup+0x7c>
    4e10:	01 97       	sbiw	r24, 0x01	; 1
    4e12:	d1 f0       	breq	.+52     	; 0x4e48 <sal_aes_setup+0xae>
    4e14:	59 c0       	rjmp	.+178    	; 0x4ec8 <sal_aes_setup+0x12e>
	case AES_DIR_ENCRYPT:
		if (last_dir == AES_DIR_DECRYPT) {
    4e16:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <last_dir>
    4e1a:	81 30       	cpi	r24, 0x01	; 1
    4e1c:	09 f0       	breq	.+2      	; 0x4e20 <sal_aes_setup+0x86>
    4e1e:	56 c0       	rjmp	.+172    	; 0x4ecc <sal_aes_setup+0x132>
			/*
			 * If the last operation was decryption, the encryption
			 * key must be stored in enc_key, so re-initialize it.
			 */
			for (i = 0; i < AES_BLOCKSIZE; ++i) {
    4e20:	19 82       	std	Y+1, r1	; 0x01
    4e22:	0e c0       	rjmp	.+28     	; 0x4e40 <sal_aes_setup+0xa6>
				trx_reg_write(RG_AES_KEY, enc_key[i]);
    4e24:	8f e3       	ldi	r24, 0x3F	; 63
    4e26:	91 e0       	ldi	r25, 0x01	; 1
    4e28:	29 81       	ldd	r18, Y+1	; 0x01
    4e2a:	22 2f       	mov	r18, r18
    4e2c:	30 e0       	ldi	r19, 0x00	; 0
    4e2e:	21 54       	subi	r18, 0x41	; 65
    4e30:	30 4f       	sbci	r19, 0xF0	; 240
    4e32:	f9 01       	movw	r30, r18
    4e34:	20 81       	ld	r18, Z
    4e36:	fc 01       	movw	r30, r24
    4e38:	20 83       	st	Z, r18
		if (last_dir == AES_DIR_DECRYPT) {
			/*
			 * If the last operation was decryption, the encryption
			 * key must be stored in enc_key, so re-initialize it.
			 */
			for (i = 0; i < AES_BLOCKSIZE; ++i) {
    4e3a:	89 81       	ldd	r24, Y+1	; 0x01
    4e3c:	8f 5f       	subi	r24, 0xFF	; 255
    4e3e:	89 83       	std	Y+1, r24	; 0x01
    4e40:	89 81       	ldd	r24, Y+1	; 0x01
    4e42:	80 31       	cpi	r24, 0x10	; 16
    4e44:	78 f3       	brcs	.-34     	; 0x4e24 <sal_aes_setup+0x8a>
				trx_reg_write(RG_AES_KEY, enc_key[i]);
			}
		}

		break;
    4e46:	42 c0       	rjmp	.+132    	; 0x4ecc <sal_aes_setup+0x132>

	case AES_DIR_DECRYPT:
		if (last_dir != AES_DIR_DECRYPT) {
    4e48:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <last_dir>
    4e4c:	81 30       	cpi	r24, 0x01	; 1
    4e4e:	e1 f1       	breq	.+120    	; 0x4ec8 <sal_aes_setup+0x12e>
			if (!dec_initialized) {
    4e50:	90 91 bd 0f 	lds	r25, 0x0FBD	; 0x800fbd <dec_initialized>
    4e54:	81 e0       	ldi	r24, 0x01	; 1
    4e56:	89 27       	eor	r24, r25
    4e58:	88 23       	and	r24, r24
    4e5a:	11 f1       	breq	.+68     	; 0x4ea0 <sal_aes_setup+0x106>

				/* Compute decryption key and initialize unit
				 * with it. */

				/* Dummy ECB encryption. */
				mode_byte = SR_MASK(SR_AES_MODE, AES_MODE_ECB) |
    4e5c:	10 92 be 0f 	sts	0x0FBE, r1	; 0x800fbe <mode_byte>
						SR_MASK(SR_AES_DIR,
						AES_DIR_ENCRYPT);
				trx_reg_write(RG_AES_CTRL, mode_byte);
    4e60:	8c e3       	ldi	r24, 0x3C	; 60
    4e62:	91 e0       	ldi	r25, 0x01	; 1
    4e64:	20 91 be 0f 	lds	r18, 0x0FBE	; 0x800fbe <mode_byte>
    4e68:	fc 01       	movw	r30, r24
    4e6a:	20 83       	st	Z, r18
				sal_aes_exec(dummy);
    4e6c:	ce 01       	movw	r24, r28
    4e6e:	02 96       	adiw	r24, 0x02	; 2
    4e70:	0e 94 d9 27 	call	0x4fb2	; 0x4fb2 <sal_aes_exec>

				/* Read last round key. */
				for (i = 0; i < AES_BLOCKSIZE; ++i) {
    4e74:	19 82       	std	Y+1, r1	; 0x01
    4e76:	0e c0       	rjmp	.+28     	; 0x4e94 <sal_aes_setup+0xfa>
					dec_key[i]
    4e78:	89 81       	ldd	r24, Y+1	; 0x01
    4e7a:	88 2f       	mov	r24, r24
    4e7c:	90 e0       	ldi	r25, 0x00	; 0
						= trx_reg_read(RG_AES_KEY);
    4e7e:	2f e3       	ldi	r18, 0x3F	; 63
    4e80:	31 e0       	ldi	r19, 0x01	; 1
    4e82:	f9 01       	movw	r30, r18
    4e84:	20 81       	ld	r18, Z
    4e86:	81 53       	subi	r24, 0x31	; 49
    4e88:	90 4f       	sbci	r25, 0xF0	; 240
    4e8a:	fc 01       	movw	r30, r24
    4e8c:	20 83       	st	Z, r18
						AES_DIR_ENCRYPT);
				trx_reg_write(RG_AES_CTRL, mode_byte);
				sal_aes_exec(dummy);

				/* Read last round key. */
				for (i = 0; i < AES_BLOCKSIZE; ++i) {
    4e8e:	89 81       	ldd	r24, Y+1	; 0x01
    4e90:	8f 5f       	subi	r24, 0xFF	; 255
    4e92:	89 83       	std	Y+1, r24	; 0x01
    4e94:	89 81       	ldd	r24, Y+1	; 0x01
    4e96:	80 31       	cpi	r24, 0x10	; 16
    4e98:	78 f3       	brcs	.-34     	; 0x4e78 <sal_aes_setup+0xde>
					dec_key[i]
						= trx_reg_read(RG_AES_KEY);
				}

				dec_initialized = true;
    4e9a:	81 e0       	ldi	r24, 0x01	; 1
    4e9c:	80 93 bd 0f 	sts	0x0FBD, r24	; 0x800fbd <dec_initialized>
			}

			/* Initialize the key. */
			for (i = 0; i < AES_BLOCKSIZE; ++i) {
    4ea0:	19 82       	std	Y+1, r1	; 0x01
    4ea2:	0e c0       	rjmp	.+28     	; 0x4ec0 <sal_aes_setup+0x126>
				trx_reg_write(RG_AES_KEY, dec_key[i]);
    4ea4:	8f e3       	ldi	r24, 0x3F	; 63
    4ea6:	91 e0       	ldi	r25, 0x01	; 1
    4ea8:	29 81       	ldd	r18, Y+1	; 0x01
    4eaa:	22 2f       	mov	r18, r18
    4eac:	30 e0       	ldi	r19, 0x00	; 0
    4eae:	21 53       	subi	r18, 0x31	; 49
    4eb0:	30 4f       	sbci	r19, 0xF0	; 240
    4eb2:	f9 01       	movw	r30, r18
    4eb4:	20 81       	ld	r18, Z
    4eb6:	fc 01       	movw	r30, r24
    4eb8:	20 83       	st	Z, r18

				dec_initialized = true;
			}

			/* Initialize the key. */
			for (i = 0; i < AES_BLOCKSIZE; ++i) {
    4eba:	89 81       	ldd	r24, Y+1	; 0x01
    4ebc:	8f 5f       	subi	r24, 0xFF	; 255
    4ebe:	89 83       	std	Y+1, r24	; 0x01
    4ec0:	89 81       	ldd	r24, Y+1	; 0x01
    4ec2:	80 31       	cpi	r24, 0x10	; 16
    4ec4:	78 f3       	brcs	.-34     	; 0x4ea4 <sal_aes_setup+0x10a>
				trx_reg_write(RG_AES_KEY, dec_key[i]);
			}

			break;
    4ec6:	03 c0       	rjmp	.+6      	; 0x4ece <sal_aes_setup+0x134>
		}

	default:
		return false;
    4ec8:	80 e0       	ldi	r24, 0x00	; 0
    4eca:	2d c0       	rjmp	.+90     	; 0x4f26 <sal_aes_setup+0x18c>
			for (i = 0; i < AES_BLOCKSIZE; ++i) {
				trx_reg_write(RG_AES_KEY, enc_key[i]);
			}
		}

		break;
    4ecc:	00 00       	nop

	default:
		return false;
	}

	last_dir = dir;
    4ece:	8d 89       	ldd	r24, Y+21	; 0x15
    4ed0:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <last_dir>

	/* Set encryption mode. */
	switch (enc_mode) {
    4ed4:	8c 89       	ldd	r24, Y+20	; 0x14
    4ed6:	88 2f       	mov	r24, r24
    4ed8:	90 e0       	ldi	r25, 0x00	; 0
    4eda:	02 97       	sbiw	r24, 0x02	; 2
    4edc:	18 f5       	brcc	.+70     	; 0x4f24 <sal_aes_setup+0x18a>
	case AES_MODE_ECB:
	case AES_MODE_CBC:
		mode_byte
			= SR_MASK(SR_AES_MODE, enc_mode) | SR_MASK(SR_AES_DIR,
    4ede:	8c 89       	ldd	r24, Y+20	; 0x14
    4ee0:	88 2f       	mov	r24, r24
    4ee2:	90 e0       	ldi	r25, 0x00	; 0
    4ee4:	88 0f       	add	r24, r24
    4ee6:	99 1f       	adc	r25, r25
    4ee8:	82 95       	swap	r24
    4eea:	92 95       	swap	r25
    4eec:	90 7f       	andi	r25, 0xF0	; 240
    4eee:	98 27       	eor	r25, r24
    4ef0:	80 7f       	andi	r24, 0xF0	; 240
    4ef2:	98 27       	eor	r25, r24
    4ef4:	28 2f       	mov	r18, r24
    4ef6:	20 72       	andi	r18, 0x20	; 32
    4ef8:	8d 89       	ldd	r24, Y+21	; 0x15
    4efa:	88 2f       	mov	r24, r24
    4efc:	90 e0       	ldi	r25, 0x00	; 0
    4efe:	88 0f       	add	r24, r24
    4f00:	99 1f       	adc	r25, r25
    4f02:	88 0f       	add	r24, r24
    4f04:	99 1f       	adc	r25, r25
    4f06:	88 0f       	add	r24, r24
    4f08:	99 1f       	adc	r25, r25
    4f0a:	88 70       	andi	r24, 0x08	; 8
    4f0c:	82 2b       	or	r24, r18
    4f0e:	80 93 be 0f 	sts	0x0FBE, r24	; 0x800fbe <mode_byte>
				dir);
		break;
    4f12:	00 00       	nop
		return (false);
	}

	/* set mode and direction */

	trx_reg_write(RG_AES_CTRL, mode_byte);
    4f14:	8c e3       	ldi	r24, 0x3C	; 60
    4f16:	91 e0       	ldi	r25, 0x01	; 1
    4f18:	20 91 be 0f 	lds	r18, 0x0FBE	; 0x800fbe <mode_byte>
    4f1c:	fc 01       	movw	r30, r24
    4f1e:	20 83       	st	Z, r18

	return (true);
    4f20:	81 e0       	ldi	r24, 0x01	; 1
    4f22:	01 c0       	rjmp	.+2      	; 0x4f26 <sal_aes_setup+0x18c>
			= SR_MASK(SR_AES_MODE, enc_mode) | SR_MASK(SR_AES_DIR,
				dir);
		break;

	default:
		return (false);
    4f24:	80 e0       	ldi	r24, 0x00	; 0
	/* set mode and direction */

	trx_reg_write(RG_AES_CTRL, mode_byte);

	return (true);
}
    4f26:	65 96       	adiw	r28, 0x15	; 21
    4f28:	0f b6       	in	r0, 0x3f	; 63
    4f2a:	f8 94       	cli
    4f2c:	de bf       	out	0x3e, r29	; 62
    4f2e:	0f be       	out	0x3f, r0	; 63
    4f30:	cd bf       	out	0x3d, r28	; 61
    4f32:	df 91       	pop	r29
    4f34:	cf 91       	pop	r28
    4f36:	08 95       	ret

00004f38 <sal_aes_restart>:
 * The contents of AES register AES_CON is restored,
 * the next AES operation started with sal_aes_exec()
 * will be executed correctly.
 */
void sal_aes_restart(void)
{
    4f38:	cf 93       	push	r28
    4f3a:	df 93       	push	r29
    4f3c:	00 d0       	rcall	.+0      	; 0x4f3e <sal_aes_restart+0x6>
    4f3e:	1f 92       	push	r1
    4f40:	cd b7       	in	r28, 0x3d	; 61
    4f42:	de b7       	in	r29, 0x3e	; 62
	uint8_t i;
	uint8_t *keyp;

	if (last_dir == AES_DIR_ENCRYPT) {
    4f44:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <last_dir>
    4f48:	88 23       	and	r24, r24
    4f4a:	29 f4       	brne	.+10     	; 0x4f56 <sal_aes_restart+0x1e>
		keyp = enc_key;
    4f4c:	8f eb       	ldi	r24, 0xBF	; 191
    4f4e:	9f e0       	ldi	r25, 0x0F	; 15
    4f50:	9b 83       	std	Y+3, r25	; 0x03
    4f52:	8a 83       	std	Y+2, r24	; 0x02
    4f54:	04 c0       	rjmp	.+8      	; 0x4f5e <sal_aes_restart+0x26>
	} else {
		keyp = dec_key;
    4f56:	8f ec       	ldi	r24, 0xCF	; 207
    4f58:	9f e0       	ldi	r25, 0x0F	; 15
    4f5a:	9b 83       	std	Y+3, r25	; 0x03
    4f5c:	8a 83       	std	Y+2, r24	; 0x02
	}

	/* fill in key */
	for (i = 0; i < AES_BLOCKSIZE; ++i) {
    4f5e:	19 82       	std	Y+1, r1	; 0x01
    4f60:	10 c0       	rjmp	.+32     	; 0x4f82 <sal_aes_restart+0x4a>
		trx_reg_write(RG_AES_KEY, *keyp++);
    4f62:	2f e3       	ldi	r18, 0x3F	; 63
    4f64:	31 e0       	ldi	r19, 0x01	; 1
    4f66:	8a 81       	ldd	r24, Y+2	; 0x02
    4f68:	9b 81       	ldd	r25, Y+3	; 0x03
    4f6a:	ac 01       	movw	r20, r24
    4f6c:	4f 5f       	subi	r20, 0xFF	; 255
    4f6e:	5f 4f       	sbci	r21, 0xFF	; 255
    4f70:	5b 83       	std	Y+3, r21	; 0x03
    4f72:	4a 83       	std	Y+2, r20	; 0x02
    4f74:	fc 01       	movw	r30, r24
    4f76:	80 81       	ld	r24, Z
    4f78:	f9 01       	movw	r30, r18
    4f7a:	80 83       	st	Z, r24
	} else {
		keyp = dec_key;
	}

	/* fill in key */
	for (i = 0; i < AES_BLOCKSIZE; ++i) {
    4f7c:	89 81       	ldd	r24, Y+1	; 0x01
    4f7e:	8f 5f       	subi	r24, 0xFF	; 255
    4f80:	89 83       	std	Y+1, r24	; 0x01
    4f82:	89 81       	ldd	r24, Y+1	; 0x01
    4f84:	80 31       	cpi	r24, 0x10	; 16
    4f86:	68 f3       	brcs	.-38     	; 0x4f62 <sal_aes_restart+0x2a>
		trx_reg_write(RG_AES_KEY, *keyp++);
	}

	trx_reg_write(RG_AES_CTRL, mode_byte);
    4f88:	8c e3       	ldi	r24, 0x3C	; 60
    4f8a:	91 e0       	ldi	r25, 0x01	; 1
    4f8c:	20 91 be 0f 	lds	r18, 0x0FBE	; 0x800fbe <mode_byte>
    4f90:	fc 01       	movw	r30, r24
    4f92:	20 83       	st	Z, r18
}
    4f94:	00 00       	nop
    4f96:	0f 90       	pop	r0
    4f98:	0f 90       	pop	r0
    4f9a:	0f 90       	pop	r0
    4f9c:	df 91       	pop	r29
    4f9e:	cf 91       	pop	r28
    4fa0:	08 95       	ret

00004fa2 <_sal_aes_clean_up>:

/**
 * @brief Cleans up the SAL/AES after STB has been finished
 */
void _sal_aes_clean_up(void)
{
    4fa2:	cf 93       	push	r28
    4fa4:	df 93       	push	r29
    4fa6:	cd b7       	in	r28, 0x3d	; 61
    4fa8:	de b7       	in	r29, 0x3e	; 62
}
    4faa:	00 00       	nop
    4fac:	df 91       	pop	r29
    4fae:	cf 91       	pop	r28
    4fb0:	08 95       	ret

00004fb2 <sal_aes_exec>:
 * The function returns after the AES operation is finished.
 *
 * @param[in]  data  AES block to be en/decrypted
 */
void sal_aes_exec(uint8_t *data)
{
    4fb2:	cf 93       	push	r28
    4fb4:	df 93       	push	r29
    4fb6:	00 d0       	rcall	.+0      	; 0x4fb8 <sal_aes_exec+0x6>
    4fb8:	1f 92       	push	r1
    4fba:	cd b7       	in	r28, 0x3d	; 61
    4fbc:	de b7       	in	r29, 0x3e	; 62
    4fbe:	9b 83       	std	Y+3, r25	; 0x03
    4fc0:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t i;

	for (i = 0; i < AES_BLOCKSIZE; ++i) {
    4fc2:	19 82       	std	Y+1, r1	; 0x01
    4fc4:	10 c0       	rjmp	.+32     	; 0x4fe6 <sal_aes_exec+0x34>
		trx_reg_write(RG_AES_STATE, *data++);
    4fc6:	2e e3       	ldi	r18, 0x3E	; 62
    4fc8:	31 e0       	ldi	r19, 0x01	; 1
    4fca:	8a 81       	ldd	r24, Y+2	; 0x02
    4fcc:	9b 81       	ldd	r25, Y+3	; 0x03
    4fce:	ac 01       	movw	r20, r24
    4fd0:	4f 5f       	subi	r20, 0xFF	; 255
    4fd2:	5f 4f       	sbci	r21, 0xFF	; 255
    4fd4:	5b 83       	std	Y+3, r21	; 0x03
    4fd6:	4a 83       	std	Y+2, r20	; 0x02
    4fd8:	fc 01       	movw	r30, r24
    4fda:	80 81       	ld	r24, Z
    4fdc:	f9 01       	movw	r30, r18
    4fde:	80 83       	st	Z, r24
 */
void sal_aes_exec(uint8_t *data)
{
	uint8_t i;

	for (i = 0; i < AES_BLOCKSIZE; ++i) {
    4fe0:	89 81       	ldd	r24, Y+1	; 0x01
    4fe2:	8f 5f       	subi	r24, 0xFF	; 255
    4fe4:	89 83       	std	Y+1, r24	; 0x01
    4fe6:	89 81       	ldd	r24, Y+1	; 0x01
    4fe8:	80 31       	cpi	r24, 0x10	; 16
    4fea:	68 f3       	brcs	.-38     	; 0x4fc6 <sal_aes_exec+0x14>
		trx_reg_write(RG_AES_STATE, *data++);
	}

	trx_reg_write(RG_AES_CTRL,
    4fec:	8c e3       	ldi	r24, 0x3C	; 60
    4fee:	91 e0       	ldi	r25, 0x01	; 1
    4ff0:	20 91 be 0f 	lds	r18, 0x0FBE	; 0x800fbe <mode_byte>
    4ff4:	20 68       	ori	r18, 0x80	; 128
    4ff6:	fc 01       	movw	r30, r24
    4ff8:	20 83       	st	Z, r18
			mode_byte | SR_MASK(SR_AES_REQUEST, AES_START));

	/* Wait for the operation to finish - poll RG_AES_RY. */
	while (!trx_bit_read(SR_AES_DONE)) {
    4ffa:	00 00       	nop
    4ffc:	8d e3       	ldi	r24, 0x3D	; 61
    4ffe:	91 e0       	ldi	r25, 0x01	; 1
    5000:	fc 01       	movw	r30, r24
    5002:	80 81       	ld	r24, Z
    5004:	88 2f       	mov	r24, r24
    5006:	90 e0       	ldi	r25, 0x00	; 0
    5008:	81 70       	andi	r24, 0x01	; 1
    500a:	99 27       	eor	r25, r25
    500c:	89 2b       	or	r24, r25
    500e:	b1 f3       	breq	.-20     	; 0x4ffc <sal_aes_exec+0x4a>
	}
}
    5010:	00 00       	nop
    5012:	0f 90       	pop	r0
    5014:	0f 90       	pop	r0
    5016:	0f 90       	pop	r0
    5018:	df 91       	pop	r29
    501a:	cf 91       	pop	r28
    501c:	08 95       	ret

0000501e <sal_aes_read>:
 * of a series of sal_aes_wrrd() calls.
 *
 * @param[out] data     - result of previous operation
 */
void sal_aes_read(uint8_t *data)
{
    501e:	cf 93       	push	r28
    5020:	df 93       	push	r29
    5022:	00 d0       	rcall	.+0      	; 0x5024 <sal_aes_read+0x6>
    5024:	1f 92       	push	r1
    5026:	cd b7       	in	r28, 0x3d	; 61
    5028:	de b7       	in	r29, 0x3e	; 62
    502a:	9b 83       	std	Y+3, r25	; 0x03
    502c:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t i;

	for (i = 0; i < AES_BLOCKSIZE; ++i) {
    502e:	19 82       	std	Y+1, r1	; 0x01
    5030:	10 c0       	rjmp	.+32     	; 0x5052 <sal_aes_read+0x34>
		*data++ = trx_reg_read(RG_AES_STATE);
    5032:	8a 81       	ldd	r24, Y+2	; 0x02
    5034:	9b 81       	ldd	r25, Y+3	; 0x03
    5036:	9c 01       	movw	r18, r24
    5038:	2f 5f       	subi	r18, 0xFF	; 255
    503a:	3f 4f       	sbci	r19, 0xFF	; 255
    503c:	3b 83       	std	Y+3, r19	; 0x03
    503e:	2a 83       	std	Y+2, r18	; 0x02
    5040:	2e e3       	ldi	r18, 0x3E	; 62
    5042:	31 e0       	ldi	r19, 0x01	; 1
    5044:	f9 01       	movw	r30, r18
    5046:	20 81       	ld	r18, Z
    5048:	fc 01       	movw	r30, r24
    504a:	20 83       	st	Z, r18
 */
void sal_aes_read(uint8_t *data)
{
	uint8_t i;

	for (i = 0; i < AES_BLOCKSIZE; ++i) {
    504c:	89 81       	ldd	r24, Y+1	; 0x01
    504e:	8f 5f       	subi	r24, 0xFF	; 255
    5050:	89 83       	std	Y+1, r24	; 0x01
    5052:	89 81       	ldd	r24, Y+1	; 0x01
    5054:	80 31       	cpi	r24, 0x10	; 16
    5056:	68 f3       	brcs	.-38     	; 0x5032 <sal_aes_read+0x14>
		*data++ = trx_reg_read(RG_AES_STATE);
	}
}
    5058:	00 00       	nop
    505a:	0f 90       	pop	r0
    505c:	0f 90       	pop	r0
    505e:	0f 90       	pop	r0
    5060:	df 91       	pop	r29
    5062:	cf 91       	pop	r28
    5064:	08 95       	ret

00005066 <sleep_set_mode>:
 * \brief Set new sleep mode
 *
 * \param mode Sleep mode, from the device IO header file.
 */
static inline void sleep_set_mode(enum SLEEP_SMODE_enum mode)
{
    5066:	cf 93       	push	r28
    5068:	df 93       	push	r29
    506a:	1f 92       	push	r1
    506c:	cd b7       	in	r28, 0x3d	; 61
    506e:	de b7       	in	r29, 0x3e	; 62
    5070:	89 83       	std	Y+1, r24	; 0x01
	SMCR = mode | (SMCR & ~((1 << SM0) | (1 << SM1) | (1 << SM2)));
    5072:	83 e5       	ldi	r24, 0x53	; 83
    5074:	90 e0       	ldi	r25, 0x00	; 0
    5076:	23 e5       	ldi	r18, 0x53	; 83
    5078:	30 e0       	ldi	r19, 0x00	; 0
    507a:	f9 01       	movw	r30, r18
    507c:	20 81       	ld	r18, Z
    507e:	32 2f       	mov	r19, r18
    5080:	31 7f       	andi	r19, 0xF1	; 241
    5082:	29 81       	ldd	r18, Y+1	; 0x01
    5084:	23 2b       	or	r18, r19
    5086:	fc 01       	movw	r30, r24
    5088:	20 83       	st	Z, r18
}
    508a:	00 00       	nop
    508c:	0f 90       	pop	r0
    508e:	df 91       	pop	r29
    5090:	cf 91       	pop	r28
    5092:	08 95       	ret

00005094 <macsc_sleep_clk_enable>:
 *
 * \param none
 */

static inline void macsc_sleep_clk_enable(void)
{
    5094:	cf 93       	push	r28
    5096:	df 93       	push	r29
    5098:	cd b7       	in	r28, 0x3d	; 61
    509a:	de b7       	in	r29, 0x3e	; 62
	ASSR |= (1 << AS2);
    509c:	86 eb       	ldi	r24, 0xB6	; 182
    509e:	90 e0       	ldi	r25, 0x00	; 0
    50a0:	26 eb       	ldi	r18, 0xB6	; 182
    50a2:	30 e0       	ldi	r19, 0x00	; 0
    50a4:	f9 01       	movw	r30, r18
    50a6:	20 81       	ld	r18, Z
    50a8:	20 62       	ori	r18, 0x20	; 32
    50aa:	fc 01       	movw	r30, r24
    50ac:	20 83       	st	Z, r18
}
    50ae:	00 00       	nop
    50b0:	df 91       	pop	r29
    50b2:	cf 91       	pop	r28
    50b4:	08 95       	ret

000050b6 <macsc_write_clock_source>:
 * \brief Configure MAC Symbol Counter Clock Source
 *
 * \param macsc macsc clk src
 */
static inline void macsc_write_clock_source(enum macsc_xtal source)
{
    50b6:	cf 93       	push	r28
    50b8:	df 93       	push	r29
    50ba:	1f 92       	push	r1
    50bc:	cd b7       	in	r28, 0x3d	; 61
    50be:	de b7       	in	r29, 0x3e	; 62
    50c0:	89 83       	std	Y+1, r24	; 0x01
	if (source == MACSC_16MHz) {
    50c2:	89 81       	ldd	r24, Y+1	; 0x01
    50c4:	88 23       	and	r24, r24
    50c6:	a1 f4       	brne	.+40     	; 0x50f0 <macsc_write_clock_source+0x3a>
		SCCR0 |= (source << SCCKSEL);
    50c8:	8c ed       	ldi	r24, 0xDC	; 220
    50ca:	90 e0       	ldi	r25, 0x00	; 0
    50cc:	2c ed       	ldi	r18, 0xDC	; 220
    50ce:	30 e0       	ldi	r19, 0x00	; 0
    50d0:	f9 01       	movw	r30, r18
    50d2:	20 81       	ld	r18, Z
    50d4:	42 2f       	mov	r20, r18
    50d6:	29 81       	ldd	r18, Y+1	; 0x01
    50d8:	22 2f       	mov	r18, r18
    50da:	30 e0       	ldi	r19, 0x00	; 0
    50dc:	22 95       	swap	r18
    50de:	32 95       	swap	r19
    50e0:	30 7f       	andi	r19, 0xF0	; 240
    50e2:	32 27       	eor	r19, r18
    50e4:	20 7f       	andi	r18, 0xF0	; 240
    50e6:	32 27       	eor	r19, r18
    50e8:	24 2b       	or	r18, r20
    50ea:	fc 01       	movw	r30, r24
    50ec:	20 83       	st	Z, r18
	} else if (source == MACSC_32KHz) {
		SCCR0 &= ~(1 << SCCKSEL);
	}
}
    50ee:	0c c0       	rjmp	.+24     	; 0x5108 <macsc_write_clock_source+0x52>
 */
static inline void macsc_write_clock_source(enum macsc_xtal source)
{
	if (source == MACSC_16MHz) {
		SCCR0 |= (source << SCCKSEL);
	} else if (source == MACSC_32KHz) {
    50f0:	89 81       	ldd	r24, Y+1	; 0x01
    50f2:	81 30       	cpi	r24, 0x01	; 1
    50f4:	49 f4       	brne	.+18     	; 0x5108 <macsc_write_clock_source+0x52>
		SCCR0 &= ~(1 << SCCKSEL);
    50f6:	8c ed       	ldi	r24, 0xDC	; 220
    50f8:	90 e0       	ldi	r25, 0x00	; 0
    50fa:	2c ed       	ldi	r18, 0xDC	; 220
    50fc:	30 e0       	ldi	r19, 0x00	; 0
    50fe:	f9 01       	movw	r30, r18
    5100:	20 81       	ld	r18, Z
    5102:	2f 7e       	andi	r18, 0xEF	; 239
    5104:	fc 01       	movw	r30, r24
    5106:	20 83       	st	Z, r18
	}
}
    5108:	00 00       	nop
    510a:	0f 90       	pop	r0
    510c:	df 91       	pop	r29
    510e:	cf 91       	pop	r28
    5110:	08 95       	ret

00005112 <sysclk_enable_peripheral_clock>:
 *  has an associated clock on the HSB bus, this will be enabled also.
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
    5112:	cf 93       	push	r28
    5114:	df 93       	push	r29
    5116:	00 d0       	rcall	.+0      	; 0x5118 <sysclk_enable_peripheral_clock+0x6>
    5118:	cd b7       	in	r28, 0x3d	; 61
    511a:	de b7       	in	r29, 0x3e	; 62
    511c:	9a 83       	std	Y+2, r25	; 0x02
    511e:	89 83       	std	Y+1, r24	; 0x01
	if (module == NULL) {
    5120:	89 81       	ldd	r24, Y+1	; 0x01
    5122:	9a 81       	ldd	r25, Y+2	; 0x02
    5124:	89 2b       	or	r24, r25
    5126:	09 f4       	brne	.+2      	; 0x512a <sysclk_enable_peripheral_clock+0x18>
    5128:	7b c0       	rjmp	.+246    	; 0x5220 <sysclk_enable_peripheral_clock+0x10e>
		Assert(false);
	}

#if !MEGA_XX_UN0 && !MEGA_XX_UN1
	else if (module == &ADC) {
    512a:	89 81       	ldd	r24, Y+1	; 0x01
    512c:	9a 81       	ldd	r25, Y+2	; 0x02
    512e:	88 37       	cpi	r24, 0x78	; 120
    5130:	91 05       	cpc	r25, r1
    5132:	49 f4       	brne	.+18     	; 0x5146 <sysclk_enable_peripheral_clock+0x34>
		sysclk_enable_module(POWER_RED_REG0, PRADC_bm);
    5134:	61 e0       	ldi	r22, 0x01	; 1
    5136:	80 e0       	ldi	r24, 0x00	; 0
    5138:	0e 94 d9 33 	call	0x67b2	; 0x67b2 <sysclk_enable_module>
#if MEGA_RF
		sysclk_enable_module(POWER_RED_REG0, PRPGA_bm);
    513c:	60 e1       	ldi	r22, 0x10	; 16
    513e:	80 e0       	ldi	r24, 0x00	; 0
    5140:	0e 94 d9 33 	call	0x67b2	; 0x67b2 <sysclk_enable_module>
#endif
#endif
	else {
		Assert(false);
	}
}
    5144:	6d c0       	rjmp	.+218    	; 0x5220 <sysclk_enable_peripheral_clock+0x10e>
	else if (module == &ADC) {
		sysclk_enable_module(POWER_RED_REG0, PRADC_bm);
#if MEGA_RF
		sysclk_enable_module(POWER_RED_REG0, PRPGA_bm);
#endif
	} else if (module == &UCSR0A) {
    5146:	89 81       	ldd	r24, Y+1	; 0x01
    5148:	9a 81       	ldd	r25, Y+2	; 0x02
    514a:	80 3c       	cpi	r24, 0xC0	; 192
    514c:	91 05       	cpc	r25, r1
    514e:	29 f4       	brne	.+10     	; 0x515a <sysclk_enable_peripheral_clock+0x48>
		sysclk_enable_module(POWER_RED_REG0, PRUSART0_bm);
    5150:	62 e0       	ldi	r22, 0x02	; 2
    5152:	80 e0       	ldi	r24, 0x00	; 0
    5154:	0e 94 d9 33 	call	0x67b2	; 0x67b2 <sysclk_enable_module>
#endif
#endif
	else {
		Assert(false);
	}
}
    5158:	63 c0       	rjmp	.+198    	; 0x5220 <sysclk_enable_peripheral_clock+0x10e>
#endif
	} else if (module == &UCSR0A) {
		sysclk_enable_module(POWER_RED_REG0, PRUSART0_bm);
	}
#if MEGA_RF
	else if (module == &SPCR) {
    515a:	89 81       	ldd	r24, Y+1	; 0x01
    515c:	9a 81       	ldd	r25, Y+2	; 0x02
    515e:	8c 34       	cpi	r24, 0x4C	; 76
    5160:	91 05       	cpc	r25, r1
    5162:	29 f4       	brne	.+10     	; 0x516e <sysclk_enable_peripheral_clock+0x5c>
		sysclk_enable_module(POWER_RED_REG0, PRSPI_bm);
    5164:	64 e0       	ldi	r22, 0x04	; 4
    5166:	80 e0       	ldi	r24, 0x00	; 0
    5168:	0e 94 d9 33 	call	0x67b2	; 0x67b2 <sysclk_enable_module>
#endif
#endif
	else {
		Assert(false);
	}
}
    516c:	59 c0       	rjmp	.+178    	; 0x5220 <sysclk_enable_peripheral_clock+0x10e>
	else if (module == &SPCR) {
		sysclk_enable_module(POWER_RED_REG0, PRSPI_bm);
	}
#endif

	else if (module == &TCCR1A) {
    516e:	89 81       	ldd	r24, Y+1	; 0x01
    5170:	9a 81       	ldd	r25, Y+2	; 0x02
    5172:	80 38       	cpi	r24, 0x80	; 128
    5174:	91 05       	cpc	r25, r1
    5176:	29 f4       	brne	.+10     	; 0x5182 <sysclk_enable_peripheral_clock+0x70>
		sysclk_enable_module(POWER_RED_REG0, PRTIM1_bm);
    5178:	68 e0       	ldi	r22, 0x08	; 8
    517a:	80 e0       	ldi	r24, 0x00	; 0
    517c:	0e 94 d9 33 	call	0x67b2	; 0x67b2 <sysclk_enable_module>
#endif
#endif
	else {
		Assert(false);
	}
}
    5180:	4f c0       	rjmp	.+158    	; 0x5220 <sysclk_enable_peripheral_clock+0x10e>
		sysclk_enable_module(POWER_RED_REG0, PRLCD_bm);
	}
#endif

#if !MEGA_XX_UN2
	else if (module == &TCCR0A) {
    5182:	89 81       	ldd	r24, Y+1	; 0x01
    5184:	9a 81       	ldd	r25, Y+2	; 0x02
    5186:	84 34       	cpi	r24, 0x44	; 68
    5188:	91 05       	cpc	r25, r1
    518a:	29 f4       	brne	.+10     	; 0x5196 <sysclk_enable_peripheral_clock+0x84>
		sysclk_enable_module(POWER_RED_REG0, PRTIM0_bm);
    518c:	60 e2       	ldi	r22, 0x20	; 32
    518e:	80 e0       	ldi	r24, 0x00	; 0
    5190:	0e 94 d9 33 	call	0x67b2	; 0x67b2 <sysclk_enable_module>
#endif
#endif
	else {
		Assert(false);
	}
}
    5194:	45 c0       	rjmp	.+138    	; 0x5220 <sysclk_enable_peripheral_clock+0x10e>
#endif

#if !MEGA_XX_UN2
	else if (module == &TCCR0A) {
		sysclk_enable_module(POWER_RED_REG0, PRTIM0_bm);
	} else if (module == &TCCR2A) {
    5196:	89 81       	ldd	r24, Y+1	; 0x01
    5198:	9a 81       	ldd	r25, Y+2	; 0x02
    519a:	80 3b       	cpi	r24, 0xB0	; 176
    519c:	91 05       	cpc	r25, r1
    519e:	29 f4       	brne	.+10     	; 0x51aa <sysclk_enable_peripheral_clock+0x98>
		sysclk_enable_module(POWER_RED_REG0, PRTIM2_bm);
    51a0:	60 e4       	ldi	r22, 0x40	; 64
    51a2:	80 e0       	ldi	r24, 0x00	; 0
    51a4:	0e 94 d9 33 	call	0x67b2	; 0x67b2 <sysclk_enable_module>
#endif
#endif
	else {
		Assert(false);
	}
}
    51a8:	3b c0       	rjmp	.+118    	; 0x5220 <sysclk_enable_peripheral_clock+0x10e>
#if !MEGA_XX_UN2
	else if (module == &TCCR0A) {
		sysclk_enable_module(POWER_RED_REG0, PRTIM0_bm);
	} else if (module == &TCCR2A) {
		sysclk_enable_module(POWER_RED_REG0, PRTIM2_bm);
	} else if (module == &TWBR) {
    51aa:	89 81       	ldd	r24, Y+1	; 0x01
    51ac:	9a 81       	ldd	r25, Y+2	; 0x02
    51ae:	88 3b       	cpi	r24, 0xB8	; 184
    51b0:	91 05       	cpc	r25, r1
    51b2:	29 f4       	brne	.+10     	; 0x51be <sysclk_enable_peripheral_clock+0xac>
		sysclk_enable_module(POWER_RED_REG0, PRTWI_bm);
    51b4:	60 e8       	ldi	r22, 0x80	; 128
    51b6:	80 e0       	ldi	r24, 0x00	; 0
    51b8:	0e 94 d9 33 	call	0x67b2	; 0x67b2 <sysclk_enable_module>
#endif
#endif
	else {
		Assert(false);
	}
}
    51bc:	31 c0       	rjmp	.+98     	; 0x5220 <sysclk_enable_peripheral_clock+0x10e>
		sysclk_enable_module(POWER_RED_REG0, PRTWI_bm);
	}
#endif

#if MEGA_RF
	else if (module == &UCSR1A) {
    51be:	89 81       	ldd	r24, Y+1	; 0x01
    51c0:	9a 81       	ldd	r25, Y+2	; 0x02
    51c2:	88 3c       	cpi	r24, 0xC8	; 200
    51c4:	91 05       	cpc	r25, r1
    51c6:	29 f4       	brne	.+10     	; 0x51d2 <sysclk_enable_peripheral_clock+0xc0>
		sysclk_enable_module(POWER_RED_REG1, PRUSART1_bm);
    51c8:	61 e0       	ldi	r22, 0x01	; 1
    51ca:	81 e0       	ldi	r24, 0x01	; 1
    51cc:	0e 94 d9 33 	call	0x67b2	; 0x67b2 <sysclk_enable_module>
#endif
#endif
	else {
		Assert(false);
	}
}
    51d0:	27 c0       	rjmp	.+78     	; 0x5220 <sysclk_enable_peripheral_clock+0x10e>
#endif

#if MEGA_RF
	else if (module == &UCSR1A) {
		sysclk_enable_module(POWER_RED_REG1, PRUSART1_bm);
	} else if (module == &TCCR3A) {
    51d2:	89 81       	ldd	r24, Y+1	; 0x01
    51d4:	9a 81       	ldd	r25, Y+2	; 0x02
    51d6:	80 39       	cpi	r24, 0x90	; 144
    51d8:	91 05       	cpc	r25, r1
    51da:	29 f4       	brne	.+10     	; 0x51e6 <sysclk_enable_peripheral_clock+0xd4>
		sysclk_enable_module(POWER_RED_REG1, PRTIM3_bm);
    51dc:	68 e0       	ldi	r22, 0x08	; 8
    51de:	81 e0       	ldi	r24, 0x01	; 1
    51e0:	0e 94 d9 33 	call	0x67b2	; 0x67b2 <sysclk_enable_module>
#endif
#endif
	else {
		Assert(false);
	}
}
    51e4:	1d c0       	rjmp	.+58     	; 0x5220 <sysclk_enable_peripheral_clock+0x10e>
#if MEGA_RF
	else if (module == &UCSR1A) {
		sysclk_enable_module(POWER_RED_REG1, PRUSART1_bm);
	} else if (module == &TCCR3A) {
		sysclk_enable_module(POWER_RED_REG1, PRTIM3_bm);
	} else if (module == &TCCR4A) {
    51e6:	89 81       	ldd	r24, Y+1	; 0x01
    51e8:	9a 81       	ldd	r25, Y+2	; 0x02
    51ea:	80 3a       	cpi	r24, 0xA0	; 160
    51ec:	91 05       	cpc	r25, r1
    51ee:	29 f4       	brne	.+10     	; 0x51fa <sysclk_enable_peripheral_clock+0xe8>
		sysclk_enable_module(POWER_RED_REG1, PRTIM4_bm);
    51f0:	60 e1       	ldi	r22, 0x10	; 16
    51f2:	81 e0       	ldi	r24, 0x01	; 1
    51f4:	0e 94 d9 33 	call	0x67b2	; 0x67b2 <sysclk_enable_module>
#endif
#endif
	else {
		Assert(false);
	}
}
    51f8:	13 c0       	rjmp	.+38     	; 0x5220 <sysclk_enable_peripheral_clock+0x10e>
		sysclk_enable_module(POWER_RED_REG1, PRUSART1_bm);
	} else if (module == &TCCR3A) {
		sysclk_enable_module(POWER_RED_REG1, PRTIM3_bm);
	} else if (module == &TCCR4A) {
		sysclk_enable_module(POWER_RED_REG1, PRTIM4_bm);
	} else if (module == &TCCR5A) {
    51fa:	89 81       	ldd	r24, Y+1	; 0x01
    51fc:	9a 81       	ldd	r25, Y+2	; 0x02
    51fe:	80 32       	cpi	r24, 0x20	; 32
    5200:	91 40       	sbci	r25, 0x01	; 1
    5202:	29 f4       	brne	.+10     	; 0x520e <sysclk_enable_peripheral_clock+0xfc>
		sysclk_enable_module(POWER_RED_REG1, PRTIM5_bm);
    5204:	60 e2       	ldi	r22, 0x20	; 32
    5206:	81 e0       	ldi	r24, 0x01	; 1
    5208:	0e 94 d9 33 	call	0x67b2	; 0x67b2 <sysclk_enable_module>
#endif
#endif
	else {
		Assert(false);
	}
}
    520c:	09 c0       	rjmp	.+18     	; 0x5220 <sysclk_enable_peripheral_clock+0x10e>
		sysclk_enable_module(POWER_RED_REG1, PRTIM3_bm);
	} else if (module == &TCCR4A) {
		sysclk_enable_module(POWER_RED_REG1, PRTIM4_bm);
	} else if (module == &TCCR5A) {
		sysclk_enable_module(POWER_RED_REG1, PRTIM5_bm);
	} else if (module == &TRX_CTRL_0) {
    520e:	89 81       	ldd	r24, Y+1	; 0x01
    5210:	9a 81       	ldd	r25, Y+2	; 0x02
    5212:	83 34       	cpi	r24, 0x43	; 67
    5214:	91 40       	sbci	r25, 0x01	; 1
    5216:	21 f4       	brne	.+8      	; 0x5220 <sysclk_enable_peripheral_clock+0x10e>
		sysclk_enable_module(POWER_RED_REG1, PRTRX24_bm);
    5218:	60 e4       	ldi	r22, 0x40	; 64
    521a:	81 e0       	ldi	r24, 0x01	; 1
    521c:	0e 94 d9 33 	call	0x67b2	; 0x67b2 <sysclk_enable_module>
#endif
#endif
	else {
		Assert(false);
	}
}
    5220:	00 00       	nop
    5222:	0f 90       	pop	r0
    5224:	0f 90       	pop	r0
    5226:	df 91       	pop	r29
    5228:	cf 91       	pop	r28
    522a:	08 95       	ret

0000522c <sm_init>:

/**
 * \brief This function Initializes the Sleep functions
 */
void sm_init(void)
{
    522c:	cf 93       	push	r28
    522e:	df 93       	push	r29
    5230:	cd b7       	in	r28, 0x3d	; 61
    5232:	de b7       	in	r29, 0x3e	; 62
	/* Set the sleep mode to initially lock. */
	sleep_set_mode(SLEEP_SMODE_PSAVE);
    5234:	86 e0       	ldi	r24, 0x06	; 6
    5236:	0e 94 33 28 	call	0x5066	; 0x5066 <sleep_set_mode>
	sysclk_enable_peripheral_clock(&TCCR2A);
    523a:	80 eb       	ldi	r24, 0xB0	; 176
    523c:	90 e0       	ldi	r25, 0x00	; 0
    523e:	0e 94 89 28 	call	0x5112	; 0x5112 <sysclk_enable_peripheral_clock>
	macsc_write_clock_source(MACSC_32KHz);
    5242:	81 e0       	ldi	r24, 0x01	; 1
    5244:	0e 94 5b 28 	call	0x50b6	; 0x50b6 <macsc_write_clock_source>
	macsc_sleep_clk_enable();
    5248:	0e 94 4a 28 	call	0x5094	; 0x5094 <macsc_sleep_clk_enable>
//	macsc_set_cmp3_int_cb(cmp3_int_cb);
//	macsc_enable_cmp_int(MACSC_CC3);
	macsc_enable();
    524c:	0e 94 99 2a 	call	0x5532	; 0x5532 <macsc_enable>
}
    5250:	00 00       	nop
    5252:	df 91       	pop	r29
    5254:	cf 91       	pop	r28
    5256:	08 95       	ret

00005258 <sm_sleep>:
 * \brief This function puts the  device to sleep
 * \param interval : in seconds for the device to sleep.Range of Interval is
 *1-68719s
 */
void sm_sleep(uint32_t interval)
{
    5258:	cf 93       	push	r28
    525a:	df 93       	push	r29
    525c:	00 d0       	rcall	.+0      	; 0x525e <sm_sleep+0x6>
    525e:	00 d0       	rcall	.+0      	; 0x5260 <sm_sleep+0x8>
    5260:	cd b7       	in	r28, 0x3d	; 61
    5262:	de b7       	in	r29, 0x3e	; 62
    5264:	69 83       	std	Y+1, r22	; 0x01
    5266:	7a 83       	std	Y+2, r23	; 0x02
    5268:	8b 83       	std	Y+3, r24	; 0x03
    526a:	9c 83       	std	Y+4, r25	; 0x04
//	/*Enable MAC Symbol Counter*/
//	macsc_enable();
	/*Timestamp the current symbol counter value for Comparison*/
//	macsc_enable_manual_bts();
//	macsc_use_cmp(COMPARE_MODE, interval * CONFIG_MACSC_HZ, MACSC_CC3);
	sleep_enable();
    526c:	83 e5       	ldi	r24, 0x53	; 83
    526e:	90 e0       	ldi	r25, 0x00	; 0
    5270:	23 e5       	ldi	r18, 0x53	; 83
    5272:	30 e0       	ldi	r19, 0x00	; 0
    5274:	f9 01       	movw	r30, r18
    5276:	20 81       	ld	r18, Z
    5278:	21 60       	ori	r18, 0x01	; 1
    527a:	fc 01       	movw	r30, r24
    527c:	20 83       	st	Z, r18
	sleep_enter();
    527e:	88 95       	sleep
}
    5280:	00 00       	nop
    5282:	0f 90       	pop	r0
    5284:	0f 90       	pop	r0
    5286:	0f 90       	pop	r0
    5288:	0f 90       	pop	r0
    528a:	df 91       	pop	r29
    528c:	cf 91       	pop	r28
    528e:	08 95       	ret

00005290 <cpu_irq_save>:
#endif

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
    5290:	cf 93       	push	r28
    5292:	df 93       	push	r29
    5294:	1f 92       	push	r1
    5296:	cd b7       	in	r28, 0x3d	; 61
    5298:	de b7       	in	r29, 0x3e	; 62
	irqflags_t flags = SREG;
    529a:	8f e5       	ldi	r24, 0x5F	; 95
    529c:	90 e0       	ldi	r25, 0x00	; 0
    529e:	fc 01       	movw	r30, r24
    52a0:	80 81       	ld	r24, Z
    52a2:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    52a4:	f8 94       	cli
	return flags;
    52a6:	89 81       	ldd	r24, Y+1	; 0x01
}
    52a8:	0f 90       	pop	r0
    52aa:	df 91       	pop	r29
    52ac:	cf 91       	pop	r28
    52ae:	08 95       	ret

000052b0 <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
    52b0:	cf 93       	push	r28
    52b2:	df 93       	push	r29
    52b4:	1f 92       	push	r1
    52b6:	cd b7       	in	r28, 0x3d	; 61
    52b8:	de b7       	in	r29, 0x3e	; 62
    52ba:	89 83       	std	Y+1, r24	; 0x01
	barrier();
	SREG = flags;
    52bc:	8f e5       	ldi	r24, 0x5F	; 95
    52be:	90 e0       	ldi	r25, 0x00	; 0
    52c0:	29 81       	ldd	r18, Y+1	; 0x01
    52c2:	fc 01       	movw	r30, r24
    52c4:	20 83       	st	Z, r18
}
    52c6:	00 00       	nop
    52c8:	0f 90       	pop	r0
    52ca:	df 91       	pop	r29
    52cc:	cf 91       	pop	r28
    52ce:	08 95       	ret

000052d0 <__vector_68>:
 *
 * This function will handle interrupt on MAC Symbol counter overflow and
 * call the callback function.
 */
ISR(SCNT_OVFL_vect)
{
    52d0:	1f 92       	push	r1
    52d2:	0f 92       	push	r0
    52d4:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    52d8:	0f 92       	push	r0
    52da:	11 24       	eor	r1, r1
    52dc:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
    52e0:	0f 92       	push	r0
    52e2:	2f 93       	push	r18
    52e4:	3f 93       	push	r19
    52e6:	4f 93       	push	r20
    52e8:	5f 93       	push	r21
    52ea:	6f 93       	push	r22
    52ec:	7f 93       	push	r23
    52ee:	8f 93       	push	r24
    52f0:	9f 93       	push	r25
    52f2:	af 93       	push	r26
    52f4:	bf 93       	push	r27
    52f6:	ef 93       	push	r30
    52f8:	ff 93       	push	r31
    52fa:	cf 93       	push	r28
    52fc:	df 93       	push	r29
    52fe:	cd b7       	in	r28, 0x3d	; 61
    5300:	de b7       	in	r29, 0x3e	; 62
	if (macsc_ovf_cb) {
    5302:	80 91 df 0f 	lds	r24, 0x0FDF	; 0x800fdf <macsc_ovf_cb>
    5306:	90 91 e0 0f 	lds	r25, 0x0FE0	; 0x800fe0 <macsc_ovf_cb+0x1>
    530a:	89 2b       	or	r24, r25
    530c:	31 f0       	breq	.+12     	; 0x531a <__vector_68+0x4a>
		macsc_ovf_cb();
    530e:	80 91 df 0f 	lds	r24, 0x0FDF	; 0x800fdf <macsc_ovf_cb>
    5312:	90 91 e0 0f 	lds	r25, 0x0FE0	; 0x800fe0 <macsc_ovf_cb+0x1>
    5316:	fc 01       	movw	r30, r24
    5318:	09 95       	icall
	}
}
    531a:	00 00       	nop
    531c:	df 91       	pop	r29
    531e:	cf 91       	pop	r28
    5320:	ff 91       	pop	r31
    5322:	ef 91       	pop	r30
    5324:	bf 91       	pop	r27
    5326:	af 91       	pop	r26
    5328:	9f 91       	pop	r25
    532a:	8f 91       	pop	r24
    532c:	7f 91       	pop	r23
    532e:	6f 91       	pop	r22
    5330:	5f 91       	pop	r21
    5332:	4f 91       	pop	r20
    5334:	3f 91       	pop	r19
    5336:	2f 91       	pop	r18
    5338:	0f 90       	pop	r0
    533a:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
    533e:	0f 90       	pop	r0
    5340:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    5344:	0f 90       	pop	r0
    5346:	1f 90       	pop	r1
    5348:	18 95       	reti

0000534a <__vector_65>:
 *
 * This function will handle interrupt on MAC Symbol counter Compare 1 Match and
 * call the callback function.
 */
ISR(SCNT_CMP1_vect)
{
    534a:	1f 92       	push	r1
    534c:	0f 92       	push	r0
    534e:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    5352:	0f 92       	push	r0
    5354:	11 24       	eor	r1, r1
    5356:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
    535a:	0f 92       	push	r0
    535c:	2f 93       	push	r18
    535e:	3f 93       	push	r19
    5360:	4f 93       	push	r20
    5362:	5f 93       	push	r21
    5364:	6f 93       	push	r22
    5366:	7f 93       	push	r23
    5368:	8f 93       	push	r24
    536a:	9f 93       	push	r25
    536c:	af 93       	push	r26
    536e:	bf 93       	push	r27
    5370:	ef 93       	push	r30
    5372:	ff 93       	push	r31
    5374:	cf 93       	push	r28
    5376:	df 93       	push	r29
    5378:	cd b7       	in	r28, 0x3d	; 61
    537a:	de b7       	in	r29, 0x3e	; 62
	if (macsc_cmp1_cb) {
    537c:	80 91 e1 0f 	lds	r24, 0x0FE1	; 0x800fe1 <macsc_cmp1_cb>
    5380:	90 91 e2 0f 	lds	r25, 0x0FE2	; 0x800fe2 <macsc_cmp1_cb+0x1>
    5384:	89 2b       	or	r24, r25
    5386:	31 f0       	breq	.+12     	; 0x5394 <__vector_65+0x4a>
		macsc_cmp1_cb();
    5388:	80 91 e1 0f 	lds	r24, 0x0FE1	; 0x800fe1 <macsc_cmp1_cb>
    538c:	90 91 e2 0f 	lds	r25, 0x0FE2	; 0x800fe2 <macsc_cmp1_cb+0x1>
    5390:	fc 01       	movw	r30, r24
    5392:	09 95       	icall
	}
}
    5394:	00 00       	nop
    5396:	df 91       	pop	r29
    5398:	cf 91       	pop	r28
    539a:	ff 91       	pop	r31
    539c:	ef 91       	pop	r30
    539e:	bf 91       	pop	r27
    53a0:	af 91       	pop	r26
    53a2:	9f 91       	pop	r25
    53a4:	8f 91       	pop	r24
    53a6:	7f 91       	pop	r23
    53a8:	6f 91       	pop	r22
    53aa:	5f 91       	pop	r21
    53ac:	4f 91       	pop	r20
    53ae:	3f 91       	pop	r19
    53b0:	2f 91       	pop	r18
    53b2:	0f 90       	pop	r0
    53b4:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
    53b8:	0f 90       	pop	r0
    53ba:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    53be:	0f 90       	pop	r0
    53c0:	1f 90       	pop	r1
    53c2:	18 95       	reti

000053c4 <__vector_66>:
 *
 * This function will handle interrupt on MAC Symbol counter Compare 2 Match and
 * call the callback function.
 */
ISR(SCNT_CMP2_vect)
{
    53c4:	1f 92       	push	r1
    53c6:	0f 92       	push	r0
    53c8:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    53cc:	0f 92       	push	r0
    53ce:	11 24       	eor	r1, r1
    53d0:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
    53d4:	0f 92       	push	r0
    53d6:	2f 93       	push	r18
    53d8:	3f 93       	push	r19
    53da:	4f 93       	push	r20
    53dc:	5f 93       	push	r21
    53de:	6f 93       	push	r22
    53e0:	7f 93       	push	r23
    53e2:	8f 93       	push	r24
    53e4:	9f 93       	push	r25
    53e6:	af 93       	push	r26
    53e8:	bf 93       	push	r27
    53ea:	ef 93       	push	r30
    53ec:	ff 93       	push	r31
    53ee:	cf 93       	push	r28
    53f0:	df 93       	push	r29
    53f2:	cd b7       	in	r28, 0x3d	; 61
    53f4:	de b7       	in	r29, 0x3e	; 62
	if (macsc_cmp2_cb) {
    53f6:	80 91 e3 0f 	lds	r24, 0x0FE3	; 0x800fe3 <macsc_cmp2_cb>
    53fa:	90 91 e4 0f 	lds	r25, 0x0FE4	; 0x800fe4 <macsc_cmp2_cb+0x1>
    53fe:	89 2b       	or	r24, r25
    5400:	31 f0       	breq	.+12     	; 0x540e <__vector_66+0x4a>
		macsc_cmp2_cb();
    5402:	80 91 e3 0f 	lds	r24, 0x0FE3	; 0x800fe3 <macsc_cmp2_cb>
    5406:	90 91 e4 0f 	lds	r25, 0x0FE4	; 0x800fe4 <macsc_cmp2_cb+0x1>
    540a:	fc 01       	movw	r30, r24
    540c:	09 95       	icall
	}
}
    540e:	00 00       	nop
    5410:	df 91       	pop	r29
    5412:	cf 91       	pop	r28
    5414:	ff 91       	pop	r31
    5416:	ef 91       	pop	r30
    5418:	bf 91       	pop	r27
    541a:	af 91       	pop	r26
    541c:	9f 91       	pop	r25
    541e:	8f 91       	pop	r24
    5420:	7f 91       	pop	r23
    5422:	6f 91       	pop	r22
    5424:	5f 91       	pop	r21
    5426:	4f 91       	pop	r20
    5428:	3f 91       	pop	r19
    542a:	2f 91       	pop	r18
    542c:	0f 90       	pop	r0
    542e:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
    5432:	0f 90       	pop	r0
    5434:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    5438:	0f 90       	pop	r0
    543a:	1f 90       	pop	r1
    543c:	18 95       	reti

0000543e <__vector_67>:
 *
 * This function will handle interrupt on MAC Symbol counter Compare 3 Match and
 * call the callback function.
 */
ISR(SCNT_CMP3_vect)
{
    543e:	1f 92       	push	r1
    5440:	0f 92       	push	r0
    5442:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    5446:	0f 92       	push	r0
    5448:	11 24       	eor	r1, r1
    544a:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
    544e:	0f 92       	push	r0
    5450:	2f 93       	push	r18
    5452:	3f 93       	push	r19
    5454:	4f 93       	push	r20
    5456:	5f 93       	push	r21
    5458:	6f 93       	push	r22
    545a:	7f 93       	push	r23
    545c:	8f 93       	push	r24
    545e:	9f 93       	push	r25
    5460:	af 93       	push	r26
    5462:	bf 93       	push	r27
    5464:	ef 93       	push	r30
    5466:	ff 93       	push	r31
    5468:	cf 93       	push	r28
    546a:	df 93       	push	r29
    546c:	cd b7       	in	r28, 0x3d	; 61
    546e:	de b7       	in	r29, 0x3e	; 62
	if (macsc_cmp3_cb) {
    5470:	80 91 e5 0f 	lds	r24, 0x0FE5	; 0x800fe5 <macsc_cmp3_cb>
    5474:	90 91 e6 0f 	lds	r25, 0x0FE6	; 0x800fe6 <macsc_cmp3_cb+0x1>
    5478:	89 2b       	or	r24, r25
    547a:	31 f0       	breq	.+12     	; 0x5488 <__vector_67+0x4a>
		macsc_cmp3_cb();
    547c:	80 91 e5 0f 	lds	r24, 0x0FE5	; 0x800fe5 <macsc_cmp3_cb>
    5480:	90 91 e6 0f 	lds	r25, 0x0FE6	; 0x800fe6 <macsc_cmp3_cb+0x1>
    5484:	fc 01       	movw	r30, r24
    5486:	09 95       	icall
	}
}
    5488:	00 00       	nop
    548a:	df 91       	pop	r29
    548c:	cf 91       	pop	r28
    548e:	ff 91       	pop	r31
    5490:	ef 91       	pop	r30
    5492:	bf 91       	pop	r27
    5494:	af 91       	pop	r26
    5496:	9f 91       	pop	r25
    5498:	8f 91       	pop	r24
    549a:	7f 91       	pop	r23
    549c:	6f 91       	pop	r22
    549e:	5f 91       	pop	r21
    54a0:	4f 91       	pop	r20
    54a2:	3f 91       	pop	r19
    54a4:	2f 91       	pop	r18
    54a6:	0f 90       	pop	r0
    54a8:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
    54ac:	0f 90       	pop	r0
    54ae:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    54b2:	0f 90       	pop	r0
    54b4:	1f 90       	pop	r1
    54b6:	18 95       	reti

000054b8 <__vector_69>:
 *
 * This function will handle interrupt of the Back-off Slot counter and
 * call the callback function.
 */
ISR(SCNT_BACKOFF_vect)
{
    54b8:	1f 92       	push	r1
    54ba:	0f 92       	push	r0
    54bc:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    54c0:	0f 92       	push	r0
    54c2:	11 24       	eor	r1, r1
    54c4:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
    54c8:	0f 92       	push	r0
    54ca:	2f 93       	push	r18
    54cc:	3f 93       	push	r19
    54ce:	4f 93       	push	r20
    54d0:	5f 93       	push	r21
    54d2:	6f 93       	push	r22
    54d4:	7f 93       	push	r23
    54d6:	8f 93       	push	r24
    54d8:	9f 93       	push	r25
    54da:	af 93       	push	r26
    54dc:	bf 93       	push	r27
    54de:	ef 93       	push	r30
    54e0:	ff 93       	push	r31
    54e2:	cf 93       	push	r28
    54e4:	df 93       	push	r29
    54e6:	cd b7       	in	r28, 0x3d	; 61
    54e8:	de b7       	in	r29, 0x3e	; 62
	if (macsc_slotcnt_cb) {
    54ea:	80 91 e7 0f 	lds	r24, 0x0FE7	; 0x800fe7 <macsc_slotcnt_cb>
    54ee:	90 91 e8 0f 	lds	r25, 0x0FE8	; 0x800fe8 <macsc_slotcnt_cb+0x1>
    54f2:	89 2b       	or	r24, r25
    54f4:	31 f0       	breq	.+12     	; 0x5502 <__vector_69+0x4a>
		macsc_slotcnt_cb();
    54f6:	80 91 e7 0f 	lds	r24, 0x0FE7	; 0x800fe7 <macsc_slotcnt_cb>
    54fa:	90 91 e8 0f 	lds	r25, 0x0FE8	; 0x800fe8 <macsc_slotcnt_cb+0x1>
    54fe:	fc 01       	movw	r30, r24
    5500:	09 95       	icall
	}
}
    5502:	00 00       	nop
    5504:	df 91       	pop	r29
    5506:	cf 91       	pop	r28
    5508:	ff 91       	pop	r31
    550a:	ef 91       	pop	r30
    550c:	bf 91       	pop	r27
    550e:	af 91       	pop	r26
    5510:	9f 91       	pop	r25
    5512:	8f 91       	pop	r24
    5514:	7f 91       	pop	r23
    5516:	6f 91       	pop	r22
    5518:	5f 91       	pop	r21
    551a:	4f 91       	pop	r20
    551c:	3f 91       	pop	r19
    551e:	2f 91       	pop	r18
    5520:	0f 90       	pop	r0
    5522:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
    5526:	0f 90       	pop	r0
    5528:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    552c:	0f 90       	pop	r0
    552e:	1f 90       	pop	r1
    5530:	18 95       	reti

00005532 <macsc_enable>:
 *
 * \param none
 *
 */
void macsc_enable(void)
{
    5532:	cf 93       	push	r28
    5534:	df 93       	push	r29
    5536:	1f 92       	push	r1
    5538:	cd b7       	in	r28, 0x3d	; 61
    553a:	de b7       	in	r29, 0x3e	; 62
	irqflags_t iflags = cpu_irq_save();
    553c:	0e 94 48 29 	call	0x5290	; 0x5290 <cpu_irq_save>
    5540:	89 83       	std	Y+1, r24	; 0x01

	SCCR0 |= (1 << SCEN);
    5542:	8c ed       	ldi	r24, 0xDC	; 220
    5544:	90 e0       	ldi	r25, 0x00	; 0
    5546:	2c ed       	ldi	r18, 0xDC	; 220
    5548:	30 e0       	ldi	r19, 0x00	; 0
    554a:	f9 01       	movw	r30, r18
    554c:	20 81       	ld	r18, Z
    554e:	20 62       	ori	r18, 0x20	; 32
    5550:	fc 01       	movw	r30, r24
    5552:	20 83       	st	Z, r18

	cpu_irq_restore(iflags);
    5554:	89 81       	ldd	r24, Y+1	; 0x01
    5556:	0e 94 58 29 	call	0x52b0	; 0x52b0 <cpu_irq_restore>
}
    555a:	00 00       	nop
    555c:	0f 90       	pop	r0
    555e:	df 91       	pop	r29
    5560:	cf 91       	pop	r28
    5562:	08 95       	ret

00005564 <is_macsc_enable>:
 *
 * \param none
 *
 */
bool is_macsc_enable(void)
{	
    5564:	cf 93       	push	r28
    5566:	df 93       	push	r29
    5568:	cd b7       	in	r28, 0x3d	; 61
    556a:	de b7       	in	r29, 0x3e	; 62
   	return(SCCR0&&(1<<SCEN));	
    556c:	8c ed       	ldi	r24, 0xDC	; 220
    556e:	90 e0       	ldi	r25, 0x00	; 0
    5570:	fc 01       	movw	r30, r24
    5572:	80 81       	ld	r24, Z
    5574:	88 23       	and	r24, r24
    5576:	19 f0       	breq	.+6      	; 0x557e <is_macsc_enable+0x1a>
    5578:	81 e0       	ldi	r24, 0x01	; 1
    557a:	90 e0       	ldi	r25, 0x00	; 0
    557c:	02 c0       	rjmp	.+4      	; 0x5582 <is_macsc_enable+0x1e>
    557e:	80 e0       	ldi	r24, 0x00	; 0
    5580:	90 e0       	ldi	r25, 0x00	; 0
    5582:	81 70       	andi	r24, 0x01	; 1
}
    5584:	df 91       	pop	r29
    5586:	cf 91       	pop	r28
    5588:	08 95       	ret

0000558a <macsc_disable>:
 *
 * \param none
 *
 */
void macsc_disable(void)
{
    558a:	cf 93       	push	r28
    558c:	df 93       	push	r29
    558e:	cd b7       	in	r28, 0x3d	; 61
    5590:	de b7       	in	r29, 0x3e	; 62
	SCCR0 &= ~(1<<SCEN);
    5592:	8c ed       	ldi	r24, 0xDC	; 220
    5594:	90 e0       	ldi	r25, 0x00	; 0
    5596:	2c ed       	ldi	r18, 0xDC	; 220
    5598:	30 e0       	ldi	r19, 0x00	; 0
    559a:	f9 01       	movw	r30, r18
    559c:	20 81       	ld	r18, Z
    559e:	2f 7d       	andi	r18, 0xDF	; 223
    55a0:	fc 01       	movw	r30, r24
    55a2:	20 83       	st	Z, r18
}
    55a4:	00 00       	nop
    55a6:	df 91       	pop	r29
    55a8:	cf 91       	pop	r28
    55aa:	08 95       	ret

000055ac <is_macsc_backoff_enable>:
 *
 * \param none
 *
 */
bool is_macsc_backoff_enable(void)
{	
    55ac:	cf 93       	push	r28
    55ae:	df 93       	push	r29
    55b0:	cd b7       	in	r28, 0x3d	; 61
    55b2:	de b7       	in	r29, 0x3e	; 62
   	return(SCCR1&&(1<<SCENBO));	
    55b4:	8d ed       	ldi	r24, 0xDD	; 221
    55b6:	90 e0       	ldi	r25, 0x00	; 0
    55b8:	fc 01       	movw	r30, r24
    55ba:	80 81       	ld	r24, Z
    55bc:	88 23       	and	r24, r24
    55be:	19 f0       	breq	.+6      	; 0x55c6 <is_macsc_backoff_enable+0x1a>
    55c0:	81 e0       	ldi	r24, 0x01	; 1
    55c2:	90 e0       	ldi	r25, 0x00	; 0
    55c4:	02 c0       	rjmp	.+4      	; 0x55ca <is_macsc_backoff_enable+0x1e>
    55c6:	80 e0       	ldi	r24, 0x00	; 0
    55c8:	90 e0       	ldi	r25, 0x00	; 0
    55ca:	81 70       	andi	r24, 0x01	; 1
}
    55cc:	df 91       	pop	r29
    55ce:	cf 91       	pop	r28
    55d0:	08 95       	ret

000055d2 <macsc_enable_cmp_int>:
/**
 * \brief Enables compare interrupts of the MACSC 
 * \param channel Compare channel
 */
void macsc_enable_cmp_int(enum macsc_cc_channel channel)
{
    55d2:	cf 93       	push	r28
    55d4:	df 93       	push	r29
    55d6:	1f 92       	push	r1
    55d8:	cd b7       	in	r28, 0x3d	; 61
    55da:	de b7       	in	r29, 0x3e	; 62
    55dc:	89 83       	std	Y+1, r24	; 0x01
	switch (channel) {
    55de:	89 81       	ldd	r24, Y+1	; 0x01
    55e0:	88 2f       	mov	r24, r24
    55e2:	90 e0       	ldi	r25, 0x00	; 0
    55e4:	82 30       	cpi	r24, 0x02	; 2
    55e6:	91 05       	cpc	r25, r1
    55e8:	29 f1       	breq	.+74     	; 0x5634 <macsc_enable_cmp_int+0x62>
    55ea:	83 30       	cpi	r24, 0x03	; 3
    55ec:	91 05       	cpc	r25, r1
    55ee:	09 f4       	brne	.+2      	; 0x55f2 <macsc_enable_cmp_int+0x20>
    55f0:	3e c0       	rjmp	.+124    	; 0x566e <macsc_enable_cmp_int+0x9c>
    55f2:	01 97       	sbiw	r24, 0x01	; 1
    55f4:	09 f0       	breq	.+2      	; 0x55f8 <macsc_enable_cmp_int+0x26>
		}
	}
	break;

	default:
		break;
    55f6:	5d c0       	rjmp	.+186    	; 0x56b2 <macsc_enable_cmp_int+0xe0>
void macsc_enable_cmp_int(enum macsc_cc_channel channel)
{
	switch (channel) {
	case MACSC_CC1:
	{
		if ((SCIRQM & (1 << IRQMCP1)) == 0) {
    55f8:	8f ed       	ldi	r24, 0xDF	; 223
    55fa:	90 e0       	ldi	r25, 0x00	; 0
    55fc:	fc 01       	movw	r30, r24
    55fe:	80 81       	ld	r24, Z
    5600:	88 2f       	mov	r24, r24
    5602:	90 e0       	ldi	r25, 0x00	; 0
    5604:	81 70       	andi	r24, 0x01	; 1
    5606:	99 27       	eor	r25, r25
    5608:	89 2b       	or	r24, r25
    560a:	09 f0       	breq	.+2      	; 0x560e <macsc_enable_cmp_int+0x3c>
    560c:	4d c0       	rjmp	.+154    	; 0x56a8 <macsc_enable_cmp_int+0xd6>
			SCIRQS |= (1 << IRQSCP1);
    560e:	80 ee       	ldi	r24, 0xE0	; 224
    5610:	90 e0       	ldi	r25, 0x00	; 0
    5612:	20 ee       	ldi	r18, 0xE0	; 224
    5614:	30 e0       	ldi	r19, 0x00	; 0
    5616:	f9 01       	movw	r30, r18
    5618:	20 81       	ld	r18, Z
    561a:	21 60       	ori	r18, 0x01	; 1
    561c:	fc 01       	movw	r30, r24
    561e:	20 83       	st	Z, r18
			SCIRQM |= (1 << IRQMCP1);
    5620:	8f ed       	ldi	r24, 0xDF	; 223
    5622:	90 e0       	ldi	r25, 0x00	; 0
    5624:	2f ed       	ldi	r18, 0xDF	; 223
    5626:	30 e0       	ldi	r19, 0x00	; 0
    5628:	f9 01       	movw	r30, r18
    562a:	20 81       	ld	r18, Z
    562c:	21 60       	ori	r18, 0x01	; 1
    562e:	fc 01       	movw	r30, r24
    5630:	20 83       	st	Z, r18
		}
	}
	break;
    5632:	3a c0       	rjmp	.+116    	; 0x56a8 <macsc_enable_cmp_int+0xd6>

	case MACSC_CC2:
	{
		if ((SCIRQM & (1 << IRQMCP2)) == 0) {
    5634:	8f ed       	ldi	r24, 0xDF	; 223
    5636:	90 e0       	ldi	r25, 0x00	; 0
    5638:	fc 01       	movw	r30, r24
    563a:	80 81       	ld	r24, Z
    563c:	88 2f       	mov	r24, r24
    563e:	90 e0       	ldi	r25, 0x00	; 0
    5640:	82 70       	andi	r24, 0x02	; 2
    5642:	99 27       	eor	r25, r25
    5644:	89 2b       	or	r24, r25
    5646:	91 f5       	brne	.+100    	; 0x56ac <macsc_enable_cmp_int+0xda>
			SCIRQS |= (1 << IRQSCP2);
    5648:	80 ee       	ldi	r24, 0xE0	; 224
    564a:	90 e0       	ldi	r25, 0x00	; 0
    564c:	20 ee       	ldi	r18, 0xE0	; 224
    564e:	30 e0       	ldi	r19, 0x00	; 0
    5650:	f9 01       	movw	r30, r18
    5652:	20 81       	ld	r18, Z
    5654:	22 60       	ori	r18, 0x02	; 2
    5656:	fc 01       	movw	r30, r24
    5658:	20 83       	st	Z, r18
			SCIRQM |= (1 << IRQMCP2);
    565a:	8f ed       	ldi	r24, 0xDF	; 223
    565c:	90 e0       	ldi	r25, 0x00	; 0
    565e:	2f ed       	ldi	r18, 0xDF	; 223
    5660:	30 e0       	ldi	r19, 0x00	; 0
    5662:	f9 01       	movw	r30, r18
    5664:	20 81       	ld	r18, Z
    5666:	22 60       	ori	r18, 0x02	; 2
    5668:	fc 01       	movw	r30, r24
    566a:	20 83       	st	Z, r18
		}
	}
	break;
    566c:	1f c0       	rjmp	.+62     	; 0x56ac <macsc_enable_cmp_int+0xda>

	case MACSC_CC3:
	{
		if ((SCIRQM & (1 << IRQMCP3)) == 0) {
    566e:	8f ed       	ldi	r24, 0xDF	; 223
    5670:	90 e0       	ldi	r25, 0x00	; 0
    5672:	fc 01       	movw	r30, r24
    5674:	80 81       	ld	r24, Z
    5676:	88 2f       	mov	r24, r24
    5678:	90 e0       	ldi	r25, 0x00	; 0
    567a:	84 70       	andi	r24, 0x04	; 4
    567c:	99 27       	eor	r25, r25
    567e:	89 2b       	or	r24, r25
    5680:	b9 f4       	brne	.+46     	; 0x56b0 <macsc_enable_cmp_int+0xde>
			SCIRQS |= (1 << IRQSCP3);
    5682:	80 ee       	ldi	r24, 0xE0	; 224
    5684:	90 e0       	ldi	r25, 0x00	; 0
    5686:	20 ee       	ldi	r18, 0xE0	; 224
    5688:	30 e0       	ldi	r19, 0x00	; 0
    568a:	f9 01       	movw	r30, r18
    568c:	20 81       	ld	r18, Z
    568e:	24 60       	ori	r18, 0x04	; 4
    5690:	fc 01       	movw	r30, r24
    5692:	20 83       	st	Z, r18
			SCIRQM |= (1 << IRQMCP3);
    5694:	8f ed       	ldi	r24, 0xDF	; 223
    5696:	90 e0       	ldi	r25, 0x00	; 0
    5698:	2f ed       	ldi	r18, 0xDF	; 223
    569a:	30 e0       	ldi	r19, 0x00	; 0
    569c:	f9 01       	movw	r30, r18
    569e:	20 81       	ld	r18, Z
    56a0:	24 60       	ori	r18, 0x04	; 4
    56a2:	fc 01       	movw	r30, r24
    56a4:	20 83       	st	Z, r18
		}
	}
	break;
    56a6:	04 c0       	rjmp	.+8      	; 0x56b0 <macsc_enable_cmp_int+0xde>
		if ((SCIRQM & (1 << IRQMCP1)) == 0) {
			SCIRQS |= (1 << IRQSCP1);
			SCIRQM |= (1 << IRQMCP1);
		}
	}
	break;
    56a8:	00 00       	nop
    56aa:	03 c0       	rjmp	.+6      	; 0x56b2 <macsc_enable_cmp_int+0xe0>
		if ((SCIRQM & (1 << IRQMCP2)) == 0) {
			SCIRQS |= (1 << IRQSCP2);
			SCIRQM |= (1 << IRQMCP2);
		}
	}
	break;
    56ac:	00 00       	nop
    56ae:	01 c0       	rjmp	.+2      	; 0x56b2 <macsc_enable_cmp_int+0xe0>
		if ((SCIRQM & (1 << IRQMCP3)) == 0) {
			SCIRQS |= (1 << IRQSCP3);
			SCIRQM |= (1 << IRQMCP3);
		}
	}
	break;
    56b0:	00 00       	nop

	default:
		break;
	}
}
    56b2:	00 00       	nop
    56b4:	0f 90       	pop	r0
    56b6:	df 91       	pop	r29
    56b8:	cf 91       	pop	r28
    56ba:	08 95       	ret

000056bc <macsc_disable_cmp_int>:
/**
 * \brief Disables compare interrupts of the MACSC 
 * \param channel Compare channel
 */
void macsc_disable_cmp_int(enum macsc_cc_channel channel)
{
    56bc:	cf 93       	push	r28
    56be:	df 93       	push	r29
    56c0:	1f 92       	push	r1
    56c2:	cd b7       	in	r28, 0x3d	; 61
    56c4:	de b7       	in	r29, 0x3e	; 62
    56c6:	89 83       	std	Y+1, r24	; 0x01
	switch (channel) {
    56c8:	89 81       	ldd	r24, Y+1	; 0x01
    56ca:	88 2f       	mov	r24, r24
    56cc:	90 e0       	ldi	r25, 0x00	; 0
    56ce:	82 30       	cpi	r24, 0x02	; 2
    56d0:	91 05       	cpc	r25, r1
    56d2:	19 f1       	breq	.+70     	; 0x571a <macsc_disable_cmp_int+0x5e>
    56d4:	83 30       	cpi	r24, 0x03	; 3
    56d6:	91 05       	cpc	r25, r1
    56d8:	29 f1       	breq	.+74     	; 0x5724 <macsc_disable_cmp_int+0x68>
    56da:	01 97       	sbiw	r24, 0x01	; 1
    56dc:	09 f0       	breq	.+2      	; 0x56e0 <macsc_disable_cmp_int+0x24>
		}
	}
	break;

	default:
		break;
    56de:	28 c0       	rjmp	.+80     	; 0x5730 <macsc_disable_cmp_int+0x74>
void macsc_disable_cmp_int(enum macsc_cc_channel channel)
{
	switch (channel) {
	case MACSC_CC1:
	{
		if ((SCIRQM & (1 << IRQMCP1)) == 1) {
    56e0:	8f ed       	ldi	r24, 0xDF	; 223
    56e2:	90 e0       	ldi	r25, 0x00	; 0
    56e4:	fc 01       	movw	r30, r24
    56e6:	80 81       	ld	r24, Z
    56e8:	88 2f       	mov	r24, r24
    56ea:	90 e0       	ldi	r25, 0x00	; 0
    56ec:	81 70       	andi	r24, 0x01	; 1
    56ee:	99 27       	eor	r25, r25
    56f0:	89 2b       	or	r24, r25
    56f2:	e9 f0       	breq	.+58     	; 0x572e <macsc_disable_cmp_int+0x72>
			SCIRQS |= (1 << IRQSCP1);
    56f4:	80 ee       	ldi	r24, 0xE0	; 224
    56f6:	90 e0       	ldi	r25, 0x00	; 0
    56f8:	20 ee       	ldi	r18, 0xE0	; 224
    56fa:	30 e0       	ldi	r19, 0x00	; 0
    56fc:	f9 01       	movw	r30, r18
    56fe:	20 81       	ld	r18, Z
    5700:	21 60       	ori	r18, 0x01	; 1
    5702:	fc 01       	movw	r30, r24
    5704:	20 83       	st	Z, r18
			SCIRQM &= ~(1 << IRQMCP1);
    5706:	8f ed       	ldi	r24, 0xDF	; 223
    5708:	90 e0       	ldi	r25, 0x00	; 0
    570a:	2f ed       	ldi	r18, 0xDF	; 223
    570c:	30 e0       	ldi	r19, 0x00	; 0
    570e:	f9 01       	movw	r30, r18
    5710:	20 81       	ld	r18, Z
    5712:	2e 7f       	andi	r18, 0xFE	; 254
    5714:	fc 01       	movw	r30, r24
    5716:	20 83       	st	Z, r18
		}
	}
	break;
    5718:	0a c0       	rjmp	.+20     	; 0x572e <macsc_disable_cmp_int+0x72>

	case MACSC_CC2:
	{
		if ((SCIRQM & (1 << IRQMCP2)) == 1) {
    571a:	8f ed       	ldi	r24, 0xDF	; 223
    571c:	90 e0       	ldi	r25, 0x00	; 0
    571e:	fc 01       	movw	r30, r24
    5720:	80 81       	ld	r24, Z
			SCIRQS |= (1 << IRQSCP2);
			SCIRQM &= ~(1 << IRQMCP2);
		}
	}
	break;
    5722:	06 c0       	rjmp	.+12     	; 0x5730 <macsc_disable_cmp_int+0x74>

	case MACSC_CC3:
	{
		if ((SCIRQM & (1 << IRQMCP3)) == 1) {
    5724:	8f ed       	ldi	r24, 0xDF	; 223
    5726:	90 e0       	ldi	r25, 0x00	; 0
    5728:	fc 01       	movw	r30, r24
    572a:	80 81       	ld	r24, Z
			SCIRQS |= (1 << IRQSCP3);
			SCIRQM &= ~(1 << IRQMCP3);
		}
	}
	break;
    572c:	01 c0       	rjmp	.+2      	; 0x5730 <macsc_disable_cmp_int+0x74>
		if ((SCIRQM & (1 << IRQMCP1)) == 1) {
			SCIRQS |= (1 << IRQSCP1);
			SCIRQM &= ~(1 << IRQMCP1);
		}
	}
	break;
    572e:	00 00       	nop
	break;

	default:
		break;
	}
}
    5730:	00 00       	nop
    5732:	0f 90       	pop	r0
    5734:	df 91       	pop	r29
    5736:	cf 91       	pop	r28
    5738:	08 95       	ret

0000573a <macsc_use_cmp>:
 * \param cmp compare value for SCOCRx register
 * \param channel Compare channel
 */
void macsc_use_cmp(bool abs_rel, uint32_t cmp,
		enum macsc_cc_channel channel)
{
    573a:	cf 93       	push	r28
    573c:	df 93       	push	r29
    573e:	cd b7       	in	r28, 0x3d	; 61
    5740:	de b7       	in	r29, 0x3e	; 62
    5742:	62 97       	sbiw	r28, 0x12	; 18
    5744:	0f b6       	in	r0, 0x3f	; 63
    5746:	f8 94       	cli
    5748:	de bf       	out	0x3e, r29	; 62
    574a:	0f be       	out	0x3f, r0	; 63
    574c:	cd bf       	out	0x3d, r28	; 61
    574e:	8d 87       	std	Y+13, r24	; 0x0d
    5750:	4e 87       	std	Y+14, r20	; 0x0e
    5752:	5f 87       	std	Y+15, r21	; 0x0f
    5754:	68 8b       	std	Y+16, r22	; 0x10
    5756:	79 8b       	std	Y+17, r23	; 0x11
    5758:	2a 8b       	std	Y+18, r18	; 0x12
	switch (channel) {
    575a:	8a 89       	ldd	r24, Y+18	; 0x12
    575c:	88 2f       	mov	r24, r24
    575e:	90 e0       	ldi	r25, 0x00	; 0
    5760:	82 30       	cpi	r24, 0x02	; 2
    5762:	91 05       	cpc	r25, r1
    5764:	d1 f1       	breq	.+116    	; 0x57da <macsc_use_cmp+0xa0>
    5766:	83 30       	cpi	r24, 0x03	; 3
    5768:	91 05       	cpc	r25, r1
    576a:	09 f4       	brne	.+2      	; 0x576e <macsc_use_cmp+0x34>
    576c:	69 c0       	rjmp	.+210    	; 0x5840 <macsc_use_cmp+0x106>
    576e:	01 97       	sbiw	r24, 0x01	; 1
    5770:	09 f0       	breq	.+2      	; 0x5774 <macsc_use_cmp+0x3a>
		MACSC_WRITE32(SCOCR3, cmp);
	}
	break;

	default:
		break;
    5772:	99 c0       	rjmp	.+306    	; 0x58a6 <macsc_use_cmp+0x16c>
		enum macsc_cc_channel channel)
{
	switch (channel) {
	case MACSC_CC1:
	{
		if (abs_rel) {
    5774:	8d 85       	ldd	r24, Y+13	; 0x0d
    5776:	88 23       	and	r24, r24
    5778:	51 f0       	breq	.+20     	; 0x578e <macsc_use_cmp+0x54>
			SCCR0 |= (1 << SCCMP1);
    577a:	8c ed       	ldi	r24, 0xDC	; 220
    577c:	90 e0       	ldi	r25, 0x00	; 0
    577e:	2c ed       	ldi	r18, 0xDC	; 220
    5780:	30 e0       	ldi	r19, 0x00	; 0
    5782:	f9 01       	movw	r30, r18
    5784:	20 81       	ld	r18, Z
    5786:	21 60       	ori	r18, 0x01	; 1
    5788:	fc 01       	movw	r30, r24
    578a:	20 83       	st	Z, r18
    578c:	09 c0       	rjmp	.+18     	; 0x57a0 <macsc_use_cmp+0x66>
		} else {
			SCCR0 &= ~(1 << SCCMP1);
    578e:	8c ed       	ldi	r24, 0xDC	; 220
    5790:	90 e0       	ldi	r25, 0x00	; 0
    5792:	2c ed       	ldi	r18, 0xDC	; 220
    5794:	30 e0       	ldi	r19, 0x00	; 0
    5796:	f9 01       	movw	r30, r18
    5798:	20 81       	ld	r18, Z
    579a:	2e 7f       	andi	r18, 0xFE	; 254
    579c:	fc 01       	movw	r30, r24
    579e:	20 83       	st	Z, r18
		}

		MACSC_WRITE32(SCOCR1, cmp);
    57a0:	8e 85       	ldd	r24, Y+14	; 0x0e
    57a2:	9f 85       	ldd	r25, Y+15	; 0x0f
    57a4:	a8 89       	ldd	r26, Y+16	; 0x10
    57a6:	b9 89       	ldd	r27, Y+17	; 0x11
    57a8:	89 83       	std	Y+1, r24	; 0x01
    57aa:	9a 83       	std	Y+2, r25	; 0x02
    57ac:	ab 83       	std	Y+3, r26	; 0x03
    57ae:	bc 83       	std	Y+4, r27	; 0x04
    57b0:	88 ef       	ldi	r24, 0xF8	; 248
    57b2:	90 e0       	ldi	r25, 0x00	; 0
    57b4:	2c 81       	ldd	r18, Y+4	; 0x04
    57b6:	fc 01       	movw	r30, r24
    57b8:	20 83       	st	Z, r18
    57ba:	87 ef       	ldi	r24, 0xF7	; 247
    57bc:	90 e0       	ldi	r25, 0x00	; 0
    57be:	2b 81       	ldd	r18, Y+3	; 0x03
    57c0:	fc 01       	movw	r30, r24
    57c2:	20 83       	st	Z, r18
    57c4:	86 ef       	ldi	r24, 0xF6	; 246
    57c6:	90 e0       	ldi	r25, 0x00	; 0
    57c8:	2a 81       	ldd	r18, Y+2	; 0x02
    57ca:	fc 01       	movw	r30, r24
    57cc:	20 83       	st	Z, r18
    57ce:	85 ef       	ldi	r24, 0xF5	; 245
    57d0:	90 e0       	ldi	r25, 0x00	; 0
    57d2:	29 81       	ldd	r18, Y+1	; 0x01
    57d4:	fc 01       	movw	r30, r24
    57d6:	20 83       	st	Z, r18
	}
	break;
    57d8:	66 c0       	rjmp	.+204    	; 0x58a6 <macsc_use_cmp+0x16c>

	case MACSC_CC2:
	{
		if (abs_rel) {
    57da:	8d 85       	ldd	r24, Y+13	; 0x0d
    57dc:	88 23       	and	r24, r24
    57de:	51 f0       	breq	.+20     	; 0x57f4 <macsc_use_cmp+0xba>
			SCCR0 |= (1 << SCCMP2);
    57e0:	8c ed       	ldi	r24, 0xDC	; 220
    57e2:	90 e0       	ldi	r25, 0x00	; 0
    57e4:	2c ed       	ldi	r18, 0xDC	; 220
    57e6:	30 e0       	ldi	r19, 0x00	; 0
    57e8:	f9 01       	movw	r30, r18
    57ea:	20 81       	ld	r18, Z
    57ec:	22 60       	ori	r18, 0x02	; 2
    57ee:	fc 01       	movw	r30, r24
    57f0:	20 83       	st	Z, r18
    57f2:	09 c0       	rjmp	.+18     	; 0x5806 <macsc_use_cmp+0xcc>
		} else {
			SCCR0 &= ~(1 << SCCMP2);
    57f4:	8c ed       	ldi	r24, 0xDC	; 220
    57f6:	90 e0       	ldi	r25, 0x00	; 0
    57f8:	2c ed       	ldi	r18, 0xDC	; 220
    57fa:	30 e0       	ldi	r19, 0x00	; 0
    57fc:	f9 01       	movw	r30, r18
    57fe:	20 81       	ld	r18, Z
    5800:	2d 7f       	andi	r18, 0xFD	; 253
    5802:	fc 01       	movw	r30, r24
    5804:	20 83       	st	Z, r18
		}

		MACSC_WRITE32(SCOCR2, cmp);
    5806:	8e 85       	ldd	r24, Y+14	; 0x0e
    5808:	9f 85       	ldd	r25, Y+15	; 0x0f
    580a:	a8 89       	ldd	r26, Y+16	; 0x10
    580c:	b9 89       	ldd	r27, Y+17	; 0x11
    580e:	8d 83       	std	Y+5, r24	; 0x05
    5810:	9e 83       	std	Y+6, r25	; 0x06
    5812:	af 83       	std	Y+7, r26	; 0x07
    5814:	b8 87       	std	Y+8, r27	; 0x08
    5816:	84 ef       	ldi	r24, 0xF4	; 244
    5818:	90 e0       	ldi	r25, 0x00	; 0
    581a:	28 85       	ldd	r18, Y+8	; 0x08
    581c:	fc 01       	movw	r30, r24
    581e:	20 83       	st	Z, r18
    5820:	83 ef       	ldi	r24, 0xF3	; 243
    5822:	90 e0       	ldi	r25, 0x00	; 0
    5824:	2f 81       	ldd	r18, Y+7	; 0x07
    5826:	fc 01       	movw	r30, r24
    5828:	20 83       	st	Z, r18
    582a:	82 ef       	ldi	r24, 0xF2	; 242
    582c:	90 e0       	ldi	r25, 0x00	; 0
    582e:	2e 81       	ldd	r18, Y+6	; 0x06
    5830:	fc 01       	movw	r30, r24
    5832:	20 83       	st	Z, r18
    5834:	81 ef       	ldi	r24, 0xF1	; 241
    5836:	90 e0       	ldi	r25, 0x00	; 0
    5838:	2d 81       	ldd	r18, Y+5	; 0x05
    583a:	fc 01       	movw	r30, r24
    583c:	20 83       	st	Z, r18
	}
	break;
    583e:	33 c0       	rjmp	.+102    	; 0x58a6 <macsc_use_cmp+0x16c>

	case MACSC_CC3:
	{
		if (abs_rel) {
    5840:	8d 85       	ldd	r24, Y+13	; 0x0d
    5842:	88 23       	and	r24, r24
    5844:	51 f0       	breq	.+20     	; 0x585a <macsc_use_cmp+0x120>
			SCCR0 |= (1 << SCCMP3);
    5846:	8c ed       	ldi	r24, 0xDC	; 220
    5848:	90 e0       	ldi	r25, 0x00	; 0
    584a:	2c ed       	ldi	r18, 0xDC	; 220
    584c:	30 e0       	ldi	r19, 0x00	; 0
    584e:	f9 01       	movw	r30, r18
    5850:	20 81       	ld	r18, Z
    5852:	24 60       	ori	r18, 0x04	; 4
    5854:	fc 01       	movw	r30, r24
    5856:	20 83       	st	Z, r18
    5858:	09 c0       	rjmp	.+18     	; 0x586c <macsc_use_cmp+0x132>
		} else {
			SCCR0 &= ~(1 << SCCMP3);
    585a:	8c ed       	ldi	r24, 0xDC	; 220
    585c:	90 e0       	ldi	r25, 0x00	; 0
    585e:	2c ed       	ldi	r18, 0xDC	; 220
    5860:	30 e0       	ldi	r19, 0x00	; 0
    5862:	f9 01       	movw	r30, r18
    5864:	20 81       	ld	r18, Z
    5866:	2b 7f       	andi	r18, 0xFB	; 251
    5868:	fc 01       	movw	r30, r24
    586a:	20 83       	st	Z, r18
		}

		MACSC_WRITE32(SCOCR3, cmp);
    586c:	8e 85       	ldd	r24, Y+14	; 0x0e
    586e:	9f 85       	ldd	r25, Y+15	; 0x0f
    5870:	a8 89       	ldd	r26, Y+16	; 0x10
    5872:	b9 89       	ldd	r27, Y+17	; 0x11
    5874:	89 87       	std	Y+9, r24	; 0x09
    5876:	9a 87       	std	Y+10, r25	; 0x0a
    5878:	ab 87       	std	Y+11, r26	; 0x0b
    587a:	bc 87       	std	Y+12, r27	; 0x0c
    587c:	80 ef       	ldi	r24, 0xF0	; 240
    587e:	90 e0       	ldi	r25, 0x00	; 0
    5880:	2c 85       	ldd	r18, Y+12	; 0x0c
    5882:	fc 01       	movw	r30, r24
    5884:	20 83       	st	Z, r18
    5886:	8f ee       	ldi	r24, 0xEF	; 239
    5888:	90 e0       	ldi	r25, 0x00	; 0
    588a:	2b 85       	ldd	r18, Y+11	; 0x0b
    588c:	fc 01       	movw	r30, r24
    588e:	20 83       	st	Z, r18
    5890:	8e ee       	ldi	r24, 0xEE	; 238
    5892:	90 e0       	ldi	r25, 0x00	; 0
    5894:	2a 85       	ldd	r18, Y+10	; 0x0a
    5896:	fc 01       	movw	r30, r24
    5898:	20 83       	st	Z, r18
    589a:	8d ee       	ldi	r24, 0xED	; 237
    589c:	90 e0       	ldi	r25, 0x00	; 0
    589e:	29 85       	ldd	r18, Y+9	; 0x09
    58a0:	fc 01       	movw	r30, r24
    58a2:	20 83       	st	Z, r18
	}
	break;
    58a4:	00 00       	nop

	default:
		break;
	}
}
    58a6:	00 00       	nop
    58a8:	62 96       	adiw	r28, 0x12	; 18
    58aa:	0f b6       	in	r0, 0x3f	; 63
    58ac:	f8 94       	cli
    58ae:	de bf       	out	0x3e, r29	; 62
    58b0:	0f be       	out	0x3f, r0	; 63
    58b2:	cd bf       	out	0x3d, r28	; 61
    58b4:	df 91       	pop	r29
    58b6:	cf 91       	pop	r28
    58b8:	08 95       	ret

000058ba <macsc_set_ovf_int_cb>:

void macsc_set_ovf_int_cb(macsc_callback_t callback)
{
    58ba:	cf 93       	push	r28
    58bc:	df 93       	push	r29
    58be:	00 d0       	rcall	.+0      	; 0x58c0 <macsc_set_ovf_int_cb+0x6>
    58c0:	cd b7       	in	r28, 0x3d	; 61
    58c2:	de b7       	in	r29, 0x3e	; 62
    58c4:	9a 83       	std	Y+2, r25	; 0x02
    58c6:	89 83       	std	Y+1, r24	; 0x01
	macsc_ovf_cb = callback;
    58c8:	89 81       	ldd	r24, Y+1	; 0x01
    58ca:	9a 81       	ldd	r25, Y+2	; 0x02
    58cc:	90 93 e0 0f 	sts	0x0FE0, r25	; 0x800fe0 <macsc_ovf_cb+0x1>
    58d0:	80 93 df 0f 	sts	0x0FDF, r24	; 0x800fdf <macsc_ovf_cb>
}
    58d4:	00 00       	nop
    58d6:	0f 90       	pop	r0
    58d8:	0f 90       	pop	r0
    58da:	df 91       	pop	r29
    58dc:	cf 91       	pop	r28
    58de:	08 95       	ret

000058e0 <macsc_set_cmp1_int_cb>:

void macsc_set_cmp1_int_cb(macsc_callback_t callback)
{
    58e0:	cf 93       	push	r28
    58e2:	df 93       	push	r29
    58e4:	00 d0       	rcall	.+0      	; 0x58e6 <macsc_set_cmp1_int_cb+0x6>
    58e6:	cd b7       	in	r28, 0x3d	; 61
    58e8:	de b7       	in	r29, 0x3e	; 62
    58ea:	9a 83       	std	Y+2, r25	; 0x02
    58ec:	89 83       	std	Y+1, r24	; 0x01
	macsc_cmp1_cb = callback;
    58ee:	89 81       	ldd	r24, Y+1	; 0x01
    58f0:	9a 81       	ldd	r25, Y+2	; 0x02
    58f2:	90 93 e2 0f 	sts	0x0FE2, r25	; 0x800fe2 <macsc_cmp1_cb+0x1>
    58f6:	80 93 e1 0f 	sts	0x0FE1, r24	; 0x800fe1 <macsc_cmp1_cb>
}
    58fa:	00 00       	nop
    58fc:	0f 90       	pop	r0
    58fe:	0f 90       	pop	r0
    5900:	df 91       	pop	r29
    5902:	cf 91       	pop	r28
    5904:	08 95       	ret

00005906 <macsc_set_cmp2_int_cb>:

void macsc_set_cmp2_int_cb(macsc_callback_t callback)
{
    5906:	cf 93       	push	r28
    5908:	df 93       	push	r29
    590a:	00 d0       	rcall	.+0      	; 0x590c <macsc_set_cmp2_int_cb+0x6>
    590c:	cd b7       	in	r28, 0x3d	; 61
    590e:	de b7       	in	r29, 0x3e	; 62
    5910:	9a 83       	std	Y+2, r25	; 0x02
    5912:	89 83       	std	Y+1, r24	; 0x01
	macsc_cmp2_cb = callback;
    5914:	89 81       	ldd	r24, Y+1	; 0x01
    5916:	9a 81       	ldd	r25, Y+2	; 0x02
    5918:	90 93 e4 0f 	sts	0x0FE4, r25	; 0x800fe4 <macsc_cmp2_cb+0x1>
    591c:	80 93 e3 0f 	sts	0x0FE3, r24	; 0x800fe3 <macsc_cmp2_cb>
}
    5920:	00 00       	nop
    5922:	0f 90       	pop	r0
    5924:	0f 90       	pop	r0
    5926:	df 91       	pop	r29
    5928:	cf 91       	pop	r28
    592a:	08 95       	ret

0000592c <macsc_set_cmp3_int_cb>:

void macsc_set_cmp3_int_cb(macsc_callback_t callback)
{
    592c:	cf 93       	push	r28
    592e:	df 93       	push	r29
    5930:	00 d0       	rcall	.+0      	; 0x5932 <macsc_set_cmp3_int_cb+0x6>
    5932:	cd b7       	in	r28, 0x3d	; 61
    5934:	de b7       	in	r29, 0x3e	; 62
    5936:	9a 83       	std	Y+2, r25	; 0x02
    5938:	89 83       	std	Y+1, r24	; 0x01
	macsc_cmp3_cb = callback;
    593a:	89 81       	ldd	r24, Y+1	; 0x01
    593c:	9a 81       	ldd	r25, Y+2	; 0x02
    593e:	90 93 e6 0f 	sts	0x0FE6, r25	; 0x800fe6 <macsc_cmp3_cb+0x1>
    5942:	80 93 e5 0f 	sts	0x0FE5, r24	; 0x800fe5 <macsc_cmp3_cb>
}
    5946:	00 00       	nop
    5948:	0f 90       	pop	r0
    594a:	0f 90       	pop	r0
    594c:	df 91       	pop	r29
    594e:	cf 91       	pop	r28
    5950:	08 95       	ret

00005952 <macsc_set_backoff_slot_cntr_int_cb>:

void macsc_set_backoff_slot_cntr_int_cb(macsc_callback_t callback)
{
    5952:	cf 93       	push	r28
    5954:	df 93       	push	r29
    5956:	00 d0       	rcall	.+0      	; 0x5958 <macsc_set_backoff_slot_cntr_int_cb+0x6>
    5958:	cd b7       	in	r28, 0x3d	; 61
    595a:	de b7       	in	r29, 0x3e	; 62
    595c:	9a 83       	std	Y+2, r25	; 0x02
    595e:	89 83       	std	Y+1, r24	; 0x01
	macsc_slotcnt_cb = callback;
    5960:	89 81       	ldd	r24, Y+1	; 0x01
    5962:	9a 81       	ldd	r25, Y+2	; 0x02
    5964:	90 93 e8 0f 	sts	0x0FE8, r25	; 0x800fe8 <macsc_slotcnt_cb+0x1>
    5968:	80 93 e7 0f 	sts	0x0FE7, r24	; 0x800fe7 <macsc_slotcnt_cb>
}
    596c:	00 00       	nop
    596e:	0f 90       	pop	r0
    5970:	0f 90       	pop	r0
    5972:	df 91       	pop	r29
    5974:	cf 91       	pop	r28
    5976:	08 95       	ret

00005978 <usart_rx_enable>:
 * \brief Enable USART receiver.
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
    5978:	cf 93       	push	r28
    597a:	df 93       	push	r29
    597c:	00 d0       	rcall	.+0      	; 0x597e <usart_rx_enable+0x6>
    597e:	cd b7       	in	r28, 0x3d	; 61
    5980:	de b7       	in	r29, 0x3e	; 62
    5982:	9a 83       	std	Y+2, r25	; 0x02
    5984:	89 83       	std	Y+1, r24	; 0x01
	(usart)->UCSRnB |= USART_RXEN_bm;
    5986:	89 81       	ldd	r24, Y+1	; 0x01
    5988:	9a 81       	ldd	r25, Y+2	; 0x02
    598a:	fc 01       	movw	r30, r24
    598c:	81 81       	ldd	r24, Z+1	; 0x01
    598e:	28 2f       	mov	r18, r24
    5990:	20 61       	ori	r18, 0x10	; 16
    5992:	89 81       	ldd	r24, Y+1	; 0x01
    5994:	9a 81       	ldd	r25, Y+2	; 0x02
    5996:	fc 01       	movw	r30, r24
    5998:	21 83       	std	Z+1, r18	; 0x01
}
    599a:	00 00       	nop
    599c:	0f 90       	pop	r0
    599e:	0f 90       	pop	r0
    59a0:	df 91       	pop	r29
    59a2:	cf 91       	pop	r28
    59a4:	08 95       	ret

000059a6 <usart_format_set>:
 *  \param parityMode The parity Mode. Use USART_PMODE_t type.
 *  \param twoStopBits Enable two stop bit mode. Use bool type.
 */
static inline void usart_format_set(USART_t *usart, USART_CHSIZE_t charSize,
		USART_PMODE_t parityMode, bool twoStopBits)
{
    59a6:	cf 93       	push	r28
    59a8:	df 93       	push	r29
    59aa:	00 d0       	rcall	.+0      	; 0x59ac <usart_format_set+0x6>
    59ac:	00 d0       	rcall	.+0      	; 0x59ae <usart_format_set+0x8>
    59ae:	1f 92       	push	r1
    59b0:	cd b7       	in	r28, 0x3d	; 61
    59b2:	de b7       	in	r29, 0x3e	; 62
    59b4:	9a 83       	std	Y+2, r25	; 0x02
    59b6:	89 83       	std	Y+1, r24	; 0x01
    59b8:	6b 83       	std	Y+3, r22	; 0x03
    59ba:	4c 83       	std	Y+4, r20	; 0x04
    59bc:	2d 83       	std	Y+5, r18	; 0x05
	(usart)->UCSRnC
		= ((usart)->UCSRnC &
    59be:	89 81       	ldd	r24, Y+1	; 0x01
    59c0:	9a 81       	ldd	r25, Y+2	; 0x02
    59c2:	fc 01       	movw	r30, r24
    59c4:	82 81       	ldd	r24, Z+2	; 0x02
    59c6:	28 2f       	mov	r18, r24
    59c8:	29 7f       	andi	r18, 0xF9	; 249
			(~USART_CHSIZE01C_gm)) | ((charSize & 0x03)
    59ca:	8b 81       	ldd	r24, Y+3	; 0x03
    59cc:	88 2f       	mov	r24, r24
    59ce:	90 e0       	ldi	r25, 0x00	; 0
    59d0:	83 70       	andi	r24, 0x03	; 3
    59d2:	99 27       	eor	r25, r25
			<< USART_CHSIZE01C_gp);
    59d4:	88 0f       	add	r24, r24
    59d6:	99 1f       	adc	r25, r25
 */
static inline void usart_format_set(USART_t *usart, USART_CHSIZE_t charSize,
		USART_PMODE_t parityMode, bool twoStopBits)
{
	(usart)->UCSRnC
		= ((usart)->UCSRnC &
    59d8:	82 2b       	or	r24, r18
    59da:	28 2f       	mov	r18, r24
    59dc:	89 81       	ldd	r24, Y+1	; 0x01
    59de:	9a 81       	ldd	r25, Y+2	; 0x02
    59e0:	fc 01       	movw	r30, r24
    59e2:	22 83       	std	Z+2, r18	; 0x02
			(~USART_CHSIZE01C_gm)) | ((charSize & 0x03)
			<< USART_CHSIZE01C_gp);
	(usart)->UCSRnB
		= ((usart)->UCSRnB &
    59e4:	89 81       	ldd	r24, Y+1	; 0x01
    59e6:	9a 81       	ldd	r25, Y+2	; 0x02
    59e8:	fc 01       	movw	r30, r24
    59ea:	81 81       	ldd	r24, Z+1	; 0x01
    59ec:	28 2f       	mov	r18, r24
    59ee:	2b 7f       	andi	r18, 0xFB	; 251
			(~USART_CHSIZE2_bm)) | ((charSize & 0x04)
    59f0:	8b 81       	ldd	r24, Y+3	; 0x03
    59f2:	88 2f       	mov	r24, r24
    59f4:	90 e0       	ldi	r25, 0x00	; 0
    59f6:	84 70       	andi	r24, 0x04	; 4
    59f8:	99 27       	eor	r25, r25
			<< USART_CHSIZE2_bp);
    59fa:	88 0f       	add	r24, r24
    59fc:	99 1f       	adc	r25, r25
    59fe:	88 0f       	add	r24, r24
    5a00:	99 1f       	adc	r25, r25
	(usart)->UCSRnC
		= ((usart)->UCSRnC &
			(~USART_CHSIZE01C_gm)) | ((charSize & 0x03)
			<< USART_CHSIZE01C_gp);
	(usart)->UCSRnB
		= ((usart)->UCSRnB &
    5a02:	82 2b       	or	r24, r18
    5a04:	28 2f       	mov	r18, r24
    5a06:	89 81       	ldd	r24, Y+1	; 0x01
    5a08:	9a 81       	ldd	r25, Y+2	; 0x02
    5a0a:	fc 01       	movw	r30, r24
    5a0c:	21 83       	std	Z+1, r18	; 0x01
			(~USART_CHSIZE2_bm)) | ((charSize & 0x04)
			<< USART_CHSIZE2_bp);

	(usart)->UCSRnC = ((usart)->UCSRnC & (~USART_PMODE_gm)) | parityMode;
    5a0e:	89 81       	ldd	r24, Y+1	; 0x01
    5a10:	9a 81       	ldd	r25, Y+2	; 0x02
    5a12:	fc 01       	movw	r30, r24
    5a14:	82 81       	ldd	r24, Z+2	; 0x02
    5a16:	98 2f       	mov	r25, r24
    5a18:	9f 7c       	andi	r25, 0xCF	; 207
    5a1a:	8c 81       	ldd	r24, Y+4	; 0x04
    5a1c:	89 2b       	or	r24, r25
    5a1e:	28 2f       	mov	r18, r24
    5a20:	89 81       	ldd	r24, Y+1	; 0x01
    5a22:	9a 81       	ldd	r25, Y+2	; 0x02
    5a24:	fc 01       	movw	r30, r24
    5a26:	22 83       	std	Z+2, r18	; 0x02

	(usart)->UCSRnC = ((usart)->UCSRnC & (~USART_STOPB_bm)) | (twoStopBits
    5a28:	89 81       	ldd	r24, Y+1	; 0x01
    5a2a:	9a 81       	ldd	r25, Y+2	; 0x02
    5a2c:	fc 01       	movw	r30, r24
    5a2e:	82 81       	ldd	r24, Z+2	; 0x02
    5a30:	28 2f       	mov	r18, r24
    5a32:	27 7f       	andi	r18, 0xF7	; 247
			<< USART_STOPB_bp);
    5a34:	8d 81       	ldd	r24, Y+5	; 0x05
    5a36:	88 2f       	mov	r24, r24
    5a38:	90 e0       	ldi	r25, 0x00	; 0
    5a3a:	88 0f       	add	r24, r24
    5a3c:	99 1f       	adc	r25, r25
    5a3e:	88 0f       	add	r24, r24
    5a40:	99 1f       	adc	r25, r25
    5a42:	88 0f       	add	r24, r24
    5a44:	99 1f       	adc	r25, r25
			(~USART_CHSIZE2_bm)) | ((charSize & 0x04)
			<< USART_CHSIZE2_bp);

	(usart)->UCSRnC = ((usart)->UCSRnC & (~USART_PMODE_gm)) | parityMode;

	(usart)->UCSRnC = ((usart)->UCSRnC & (~USART_STOPB_bm)) | (twoStopBits
    5a46:	82 2b       	or	r24, r18
    5a48:	28 2f       	mov	r18, r24
    5a4a:	89 81       	ldd	r24, Y+1	; 0x01
    5a4c:	9a 81       	ldd	r25, Y+2	; 0x02
    5a4e:	fc 01       	movw	r30, r24
    5a50:	22 83       	std	Z+2, r18	; 0x02
			<< USART_STOPB_bp);
}
    5a52:	00 00       	nop
    5a54:	0f 90       	pop	r0
    5a56:	0f 90       	pop	r0
    5a58:	0f 90       	pop	r0
    5a5a:	0f 90       	pop	r0
    5a5c:	0f 90       	pop	r0
    5a5e:	df 91       	pop	r29
    5a60:	cf 91       	pop	r28
    5a62:	08 95       	ret

00005a64 <usart_tx_enable>:
 * \brief Enable USART transmitter.
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
    5a64:	cf 93       	push	r28
    5a66:	df 93       	push	r29
    5a68:	00 d0       	rcall	.+0      	; 0x5a6a <usart_tx_enable+0x6>
    5a6a:	cd b7       	in	r28, 0x3d	; 61
    5a6c:	de b7       	in	r29, 0x3e	; 62
    5a6e:	9a 83       	std	Y+2, r25	; 0x02
    5a70:	89 83       	std	Y+1, r24	; 0x01
	(usart)->UCSRnB |= USART_TXEN_bm;
    5a72:	89 81       	ldd	r24, Y+1	; 0x01
    5a74:	9a 81       	ldd	r25, Y+2	; 0x02
    5a76:	fc 01       	movw	r30, r24
    5a78:	81 81       	ldd	r24, Z+1	; 0x01
    5a7a:	28 2f       	mov	r18, r24
    5a7c:	28 60       	ori	r18, 0x08	; 8
    5a7e:	89 81       	ldd	r24, Y+1	; 0x01
    5a80:	9a 81       	ldd	r25, Y+2	; 0x02
    5a82:	fc 01       	movw	r30, r24
    5a84:	21 83       	std	Z+1, r18	; 0x01
}
    5a86:	00 00       	nop
    5a88:	0f 90       	pop	r0
    5a8a:	0f 90       	pop	r0
    5a8c:	df 91       	pop	r29
    5a8e:	cf 91       	pop	r28
    5a90:	08 95       	ret

00005a92 <usart_set_mode>:
 * - 0x1        : Synchronous mode.
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
    5a92:	cf 93       	push	r28
    5a94:	df 93       	push	r29
    5a96:	00 d0       	rcall	.+0      	; 0x5a98 <usart_set_mode+0x6>
    5a98:	1f 92       	push	r1
    5a9a:	cd b7       	in	r28, 0x3d	; 61
    5a9c:	de b7       	in	r29, 0x3e	; 62
    5a9e:	9a 83       	std	Y+2, r25	; 0x02
    5aa0:	89 83       	std	Y+1, r24	; 0x01
    5aa2:	6b 83       	std	Y+3, r22	; 0x03
	(usart)->UCSRnC = ((usart)->UCSRnC & (~USART_UMSEL01_gm)) | usartmode;
    5aa4:	89 81       	ldd	r24, Y+1	; 0x01
    5aa6:	9a 81       	ldd	r25, Y+2	; 0x02
    5aa8:	fc 01       	movw	r30, r24
    5aaa:	82 81       	ldd	r24, Z+2	; 0x02
    5aac:	98 2f       	mov	r25, r24
    5aae:	9f 73       	andi	r25, 0x3F	; 63
    5ab0:	8b 81       	ldd	r24, Y+3	; 0x03
    5ab2:	89 2b       	or	r24, r25
    5ab4:	28 2f       	mov	r18, r24
    5ab6:	89 81       	ldd	r24, Y+1	; 0x01
    5ab8:	9a 81       	ldd	r25, Y+2	; 0x02
    5aba:	fc 01       	movw	r30, r24
    5abc:	22 83       	std	Z+2, r18	; 0x02
}
    5abe:	00 00       	nop
    5ac0:	0f 90       	pop	r0
    5ac2:	0f 90       	pop	r0
    5ac4:	0f 90       	pop	r0
    5ac6:	df 91       	pop	r29
    5ac8:	cf 91       	pop	r28
    5aca:	08 95       	ret

00005acc <usart_data_register_is_empty>:
 * \brief Check if data register empty flag is set.
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t *usart)
{
    5acc:	cf 93       	push	r28
    5ace:	df 93       	push	r29
    5ad0:	00 d0       	rcall	.+0      	; 0x5ad2 <usart_data_register_is_empty+0x6>
    5ad2:	cd b7       	in	r28, 0x3d	; 61
    5ad4:	de b7       	in	r29, 0x3e	; 62
    5ad6:	9a 83       	std	Y+2, r25	; 0x02
    5ad8:	89 83       	std	Y+1, r24	; 0x01
	return (usart)->UCSRnA & USART_DRE_bm;
    5ada:	89 81       	ldd	r24, Y+1	; 0x01
    5adc:	9a 81       	ldd	r25, Y+2	; 0x02
    5ade:	fc 01       	movw	r30, r24
    5ae0:	80 81       	ld	r24, Z
    5ae2:	88 2f       	mov	r24, r24
    5ae4:	90 e0       	ldi	r25, 0x00	; 0
    5ae6:	80 72       	andi	r24, 0x20	; 32
    5ae8:	99 27       	eor	r25, r25
    5aea:	21 e0       	ldi	r18, 0x01	; 1
    5aec:	89 2b       	or	r24, r25
    5aee:	09 f4       	brne	.+2      	; 0x5af2 <usart_data_register_is_empty+0x26>
    5af0:	20 e0       	ldi	r18, 0x00	; 0
    5af2:	82 2f       	mov	r24, r18
}
    5af4:	0f 90       	pop	r0
    5af6:	0f 90       	pop	r0
    5af8:	df 91       	pop	r29
    5afa:	cf 91       	pop	r28
    5afc:	08 95       	ret

00005afe <usart_rx_is_complete>:
 * Checks if the RX complete interrupt flag is set.
 *
 * \param usart The USART module.
 */
static inline bool usart_rx_is_complete(USART_t *usart)
{
    5afe:	cf 93       	push	r28
    5b00:	df 93       	push	r29
    5b02:	00 d0       	rcall	.+0      	; 0x5b04 <usart_rx_is_complete+0x6>
    5b04:	cd b7       	in	r28, 0x3d	; 61
    5b06:	de b7       	in	r29, 0x3e	; 62
    5b08:	9a 83       	std	Y+2, r25	; 0x02
    5b0a:	89 83       	std	Y+1, r24	; 0x01
	return (usart)->UCSRnA & USART_RXC_bm;
    5b0c:	89 81       	ldd	r24, Y+1	; 0x01
    5b0e:	9a 81       	ldd	r25, Y+2	; 0x02
    5b10:	fc 01       	movw	r30, r24
    5b12:	80 81       	ld	r24, Z
    5b14:	88 2f       	mov	r24, r24
    5b16:	90 e0       	ldi	r25, 0x00	; 0
    5b18:	80 78       	andi	r24, 0x80	; 128
    5b1a:	99 27       	eor	r25, r25
    5b1c:	21 e0       	ldi	r18, 0x01	; 1
    5b1e:	89 2b       	or	r24, r25
    5b20:	09 f4       	brne	.+2      	; 0x5b24 <usart_rx_is_complete+0x26>
    5b22:	20 e0       	ldi	r18, 0x00	; 0
    5b24:	82 2f       	mov	r24, r18
}
    5b26:	0f 90       	pop	r0
    5b28:	0f 90       	pop	r0
    5b2a:	df 91       	pop	r29
    5b2c:	cf 91       	pop	r28
    5b2e:	08 95       	ret

00005b30 <ioport_pin_to_mask>:
 *
 * \param pin IOPORT pin ID to convert
 * \retval Bitmask with a bit set that corresponds to the given pin ID in its port
 */
static inline ioport_port_mask_t ioport_pin_to_mask(ioport_pin_t pin)
{
    5b30:	cf 93       	push	r28
    5b32:	df 93       	push	r29
    5b34:	00 d0       	rcall	.+0      	; 0x5b36 <ioport_pin_to_mask+0x6>
    5b36:	cd b7       	in	r28, 0x3d	; 61
    5b38:	de b7       	in	r29, 0x3e	; 62
    5b3a:	8a 83       	std	Y+2, r24	; 0x02
    5b3c:	8a 81       	ldd	r24, Y+2	; 0x02
    5b3e:	89 83       	std	Y+1, r24	; 0x01
 * \param: pin. the pin number defined by IOPORT_CREATE_PIN
 */
__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask
	(ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
    5b40:	89 81       	ldd	r24, Y+1	; 0x01
    5b42:	88 2f       	mov	r24, r24
    5b44:	90 e0       	ldi	r25, 0x00	; 0
    5b46:	9c 01       	movw	r18, r24
    5b48:	27 70       	andi	r18, 0x07	; 7
    5b4a:	33 27       	eor	r19, r19
    5b4c:	81 e0       	ldi	r24, 0x01	; 1
    5b4e:	90 e0       	ldi	r25, 0x00	; 0
    5b50:	02 c0       	rjmp	.+4      	; 0x5b56 <ioport_pin_to_mask+0x26>
    5b52:	88 0f       	add	r24, r24
    5b54:	99 1f       	adc	r25, r25
    5b56:	2a 95       	dec	r18
    5b58:	e2 f7       	brpl	.-8      	; 0x5b52 <ioport_pin_to_mask+0x22>
	return arch_ioport_pin_to_mask(pin);
    5b5a:	00 00       	nop
}
    5b5c:	0f 90       	pop	r0
    5b5e:	0f 90       	pop	r0
    5b60:	df 91       	pop	r29
    5b62:	cf 91       	pop	r28
    5b64:	08 95       	ret

00005b66 <sysclk_get_main_hz>:
 * configured source clock using fuses.
 * \eg. #define SYSCLK_SOURCE SYSCLK_SRC_RC16MHZ to use internal RC
 * oscillator for clock source.
 */
static inline uint32_t sysclk_get_main_hz(void)
{
    5b66:	cf 93       	push	r28
    5b68:	df 93       	push	r29
    5b6a:	cd b7       	in	r28, 0x3d	; 61
    5b6c:	de b7       	in	r29, 0x3e	; 62
	case SYSCLK_SRC_RC128KHZ:
		return 128000UL;

#if MEGA_RF
	case SYSCLK_SRC_TRS16MHZ:
		return 16000000UL;
    5b6e:	80 e0       	ldi	r24, 0x00	; 0
    5b70:	94 e2       	ldi	r25, 0x24	; 36
    5b72:	a4 ef       	ldi	r26, 0xF4	; 244
    5b74:	b0 e0       	ldi	r27, 0x00	; 0
#endif
	default:

		return 1000000UL;
	}
}
    5b76:	bc 01       	movw	r22, r24
    5b78:	cd 01       	movw	r24, r26
    5b7a:	df 91       	pop	r29
    5b7c:	cf 91       	pop	r28
    5b7e:	08 95       	ret

00005b80 <sysclk_get_source_clock_hz>:
 * is set.
 *
 * \return Frequency of the system clock, in Hz.
 */
static inline uint32_t sysclk_get_source_clock_hz(void)
{
    5b80:	cf 93       	push	r28
    5b82:	df 93       	push	r29
    5b84:	cd b7       	in	r28, 0x3d	; 61
    5b86:	de b7       	in	r29, 0x3e	; 62
	case SYSCLK_PSDIV_1: /* Fall through */
		if (SYSCLK_SOURCE == SYSCLK_SRC_RC16MHZ ||
				SYSCLK_SOURCE == SYSCLK_SRC_RC128KHZ) {
			return sysclk_get_main_hz() / 2;
		} else {
			return sysclk_get_main_hz();
    5b88:	0e 94 b3 2d 	call	0x5b66	; 0x5b66 <sysclk_get_main_hz>
    5b8c:	dc 01       	movw	r26, r24
    5b8e:	cb 01       	movw	r24, r22

	default:
		/*Invalide case*/
		return 0;
	}
}
    5b90:	bc 01       	movw	r22, r24
    5b92:	cd 01       	movw	r24, r26
    5b94:	df 91       	pop	r29
    5b96:	cf 91       	pop	r28
    5b98:	08 95       	ret

00005b9a <usart_enable_module_clock>:
 * module.
 *
 * \brief usart Pointer to an USART module.
 */
static inline void usart_enable_module_clock(USART_t *usart)
{
    5b9a:	cf 93       	push	r28
    5b9c:	df 93       	push	r29
    5b9e:	00 d0       	rcall	.+0      	; 0x5ba0 <usart_enable_module_clock+0x6>
    5ba0:	cd b7       	in	r28, 0x3d	; 61
    5ba2:	de b7       	in	r29, 0x3e	; 62
    5ba4:	9a 83       	std	Y+2, r25	; 0x02
    5ba6:	89 83       	std	Y+1, r24	; 0x01
#ifdef USARTA0
	if ((uintptr_t)usart == (uintptr_t)&UCSR0A) {
    5ba8:	89 81       	ldd	r24, Y+1	; 0x01
    5baa:	9a 81       	ldd	r25, Y+2	; 0x02
    5bac:	80 3c       	cpi	r24, 0xC0	; 192
    5bae:	91 05       	cpc	r25, r1
    5bb0:	21 f4       	brne	.+8      	; 0x5bba <usart_enable_module_clock+0x20>
		sysclk_enable_module(POWER_RED_REG0, PRUSART0_bm);
    5bb2:	62 e0       	ldi	r22, 0x02	; 2
    5bb4:	80 e0       	ldi	r24, 0x00	; 0
    5bb6:	0e 94 d9 33 	call	0x67b2	; 0x67b2 <sysclk_enable_module>
	}
#endif
#ifdef USARTA1
	if ((uintptr_t)usart == (uintptr_t)&UCSR1A) {
    5bba:	89 81       	ldd	r24, Y+1	; 0x01
    5bbc:	9a 81       	ldd	r25, Y+2	; 0x02
    5bbe:	88 3c       	cpi	r24, 0xC8	; 200
    5bc0:	91 05       	cpc	r25, r1
    5bc2:	21 f4       	brne	.+8      	; 0x5bcc <usart_enable_module_clock+0x32>
		sysclk_enable_module(POWER_RED_REG1, PRUSART1_bm);
    5bc4:	61 e0       	ldi	r22, 0x01	; 1
    5bc6:	81 e0       	ldi	r24, 0x01	; 1
    5bc8:	0e 94 d9 33 	call	0x67b2	; 0x67b2 <sysclk_enable_module>
	}
#endif
}
    5bcc:	00 00       	nop
    5bce:	0f 90       	pop	r0
    5bd0:	0f 90       	pop	r0
    5bd2:	df 91       	pop	r29
    5bd4:	cf 91       	pop	r28
    5bd6:	08 95       	ret

00005bd8 <usart_init_rs232>:
 *
 * \retval true if the initialization was successful
 * \retval false if the initialization failed (error in baud rate calculation)
 */
bool usart_init_rs232(USART_t *usart, const usart_rs232_options_t *opt)
{
    5bd8:	0f 93       	push	r16
    5bda:	1f 93       	push	r17
    5bdc:	cf 93       	push	r28
    5bde:	df 93       	push	r29
    5be0:	00 d0       	rcall	.+0      	; 0x5be2 <usart_init_rs232+0xa>
    5be2:	00 d0       	rcall	.+0      	; 0x5be4 <usart_init_rs232+0xc>
    5be4:	1f 92       	push	r1
    5be6:	cd b7       	in	r28, 0x3d	; 61
    5be8:	de b7       	in	r29, 0x3e	; 62
    5bea:	9b 83       	std	Y+3, r25	; 0x03
    5bec:	8a 83       	std	Y+2, r24	; 0x02
    5bee:	7d 83       	std	Y+5, r23	; 0x05
    5bf0:	6c 83       	std	Y+4, r22	; 0x04
	bool result;
	usart_enable_module_clock(usart);
    5bf2:	8a 81       	ldd	r24, Y+2	; 0x02
    5bf4:	9b 81       	ldd	r25, Y+3	; 0x03
    5bf6:	0e 94 cd 2d 	call	0x5b9a	; 0x5b9a <usart_enable_module_clock>
	usart_set_mode(usart, USART_CMODE_ASYNCHRONOUS_gc);
    5bfa:	8a 81       	ldd	r24, Y+2	; 0x02
    5bfc:	9b 81       	ldd	r25, Y+3	; 0x03
    5bfe:	60 e0       	ldi	r22, 0x00	; 0
    5c00:	0e 94 49 2d 	call	0x5a92	; 0x5a92 <usart_set_mode>
	usart_format_set(usart, opt->charlength, opt->paritytype,
    5c04:	8c 81       	ldd	r24, Y+4	; 0x04
    5c06:	9d 81       	ldd	r25, Y+5	; 0x05
    5c08:	fc 01       	movw	r30, r24
    5c0a:	26 81       	ldd	r18, Z+6	; 0x06
    5c0c:	8c 81       	ldd	r24, Y+4	; 0x04
    5c0e:	9d 81       	ldd	r25, Y+5	; 0x05
    5c10:	fc 01       	movw	r30, r24
    5c12:	45 81       	ldd	r20, Z+5	; 0x05
    5c14:	8c 81       	ldd	r24, Y+4	; 0x04
    5c16:	9d 81       	ldd	r25, Y+5	; 0x05
    5c18:	fc 01       	movw	r30, r24
    5c1a:	34 81       	ldd	r19, Z+4	; 0x04
    5c1c:	8a 81       	ldd	r24, Y+2	; 0x02
    5c1e:	9b 81       	ldd	r25, Y+3	; 0x03
    5c20:	63 2f       	mov	r22, r19
    5c22:	0e 94 d3 2c 	call	0x59a6	; 0x59a6 <usart_format_set>
			opt->stopbits);
	result = usart_set_baudrate(usart, opt->baudrate,
    5c26:	0e 94 c0 2d 	call	0x5b80	; 0x5b80 <sysclk_get_source_clock_hz>
    5c2a:	9b 01       	movw	r18, r22
    5c2c:	ac 01       	movw	r20, r24
    5c2e:	8c 81       	ldd	r24, Y+4	; 0x04
    5c30:	9d 81       	ldd	r25, Y+5	; 0x05
    5c32:	fc 01       	movw	r30, r24
    5c34:	80 81       	ld	r24, Z
    5c36:	91 81       	ldd	r25, Z+1	; 0x01
    5c38:	a2 81       	ldd	r26, Z+2	; 0x02
    5c3a:	b3 81       	ldd	r27, Z+3	; 0x03
    5c3c:	ea 81       	ldd	r30, Y+2	; 0x02
    5c3e:	fb 81       	ldd	r31, Y+3	; 0x03
    5c40:	89 01       	movw	r16, r18
    5c42:	9a 01       	movw	r18, r20
    5c44:	ac 01       	movw	r20, r24
    5c46:	bd 01       	movw	r22, r26
    5c48:	cf 01       	movw	r24, r30
    5c4a:	0e 94 2e 31 	call	0x625c	; 0x625c <usart_set_baudrate>
    5c4e:	89 83       	std	Y+1, r24	; 0x01
			sysclk_get_source_clock_hz());
	usart_tx_enable(usart);
    5c50:	8a 81       	ldd	r24, Y+2	; 0x02
    5c52:	9b 81       	ldd	r25, Y+3	; 0x03
    5c54:	0e 94 32 2d 	call	0x5a64	; 0x5a64 <usart_tx_enable>
	usart_rx_enable(usart);
    5c58:	8a 81       	ldd	r24, Y+2	; 0x02
    5c5a:	9b 81       	ldd	r25, Y+3	; 0x03
    5c5c:	0e 94 bc 2c 	call	0x5978	; 0x5978 <usart_rx_enable>
	return result;
    5c60:	89 81       	ldd	r24, Y+1	; 0x01
}
    5c62:	0f 90       	pop	r0
    5c64:	0f 90       	pop	r0
    5c66:	0f 90       	pop	r0
    5c68:	0f 90       	pop	r0
    5c6a:	0f 90       	pop	r0
    5c6c:	df 91       	pop	r29
    5c6e:	cf 91       	pop	r28
    5c70:	1f 91       	pop	r17
    5c72:	0f 91       	pop	r16
    5c74:	08 95       	ret

00005c76 <usart_init_spi>:
 *
 * \param usart The USART module.
 * \param opt The RS232 configuration option.
 */
void usart_init_spi(USART_t *usart, const usart_spi_options_t *opt)
{
    5c76:	0f 93       	push	r16
    5c78:	1f 93       	push	r17
    5c7a:	cf 93       	push	r28
    5c7c:	df 93       	push	r29
    5c7e:	cd b7       	in	r28, 0x3d	; 61
    5c80:	de b7       	in	r29, 0x3e	; 62
    5c82:	65 97       	sbiw	r28, 0x15	; 21
    5c84:	0f b6       	in	r0, 0x3f	; 63
    5c86:	f8 94       	cli
    5c88:	de bf       	out	0x3e, r29	; 62
    5c8a:	0f be       	out	0x3f, r0	; 63
    5c8c:	cd bf       	out	0x3d, r28	; 61
    5c8e:	9b 8b       	std	Y+19, r25	; 0x13
    5c90:	8a 8b       	std	Y+18, r24	; 0x12
    5c92:	7d 8b       	std	Y+21, r23	; 0x15
    5c94:	6c 8b       	std	Y+20, r22	; 0x14
	usart->UBRR = 0;
    5c96:	8a 89       	ldd	r24, Y+18	; 0x12
    5c98:	9b 89       	ldd	r25, Y+19	; 0x13
    5c9a:	fc 01       	movw	r30, r24
    5c9c:	15 82       	std	Z+5, r1	; 0x05
    5c9e:	14 82       	std	Z+4, r1	; 0x04

	usart_enable_module_clock(usart);
    5ca0:	8a 89       	ldd	r24, Y+18	; 0x12
    5ca2:	9b 89       	ldd	r25, Y+19	; 0x13
    5ca4:	0e 94 cd 2d 	call	0x5b9a	; 0x5b9a <usart_enable_module_clock>
	usart_set_mode(usart, USART_CMODE_MSPI_gc);
    5ca8:	8a 89       	ldd	r24, Y+18	; 0x12
    5caa:	9b 89       	ldd	r25, Y+19	; 0x13
    5cac:	60 ec       	ldi	r22, 0xC0	; 192
    5cae:	0e 94 49 2d 	call	0x5a92	; 0x5a92 <usart_set_mode>
	port_pin_t sck_pin;

#ifdef USARTA0
	if ((uintptr_t)usart == (uintptr_t)&UCSR0A) {
    5cb2:	8a 89       	ldd	r24, Y+18	; 0x12
    5cb4:	9b 89       	ldd	r25, Y+19	; 0x13
    5cb6:	80 3c       	cpi	r24, 0xC0	; 192
    5cb8:	91 05       	cpc	r25, r1
    5cba:	09 f0       	breq	.+2      	; 0x5cbe <usart_init_spi+0x48>
    5cbc:	88 c0       	rjmp	.+272    	; 0x5dce <usart_init_spi+0x158>
		sck_pin = IOPORT_CREATE_PIN(PORTE, 2);
    5cbe:	82 e2       	ldi	r24, 0x22	; 34
    5cc0:	89 83       	std	Y+1, r24	; 0x01
		ioport_configure_port_pin(ioport_pin_to_port(sck_pin),
    5cc2:	89 81       	ldd	r24, Y+1	; 0x01
    5cc4:	0e 94 98 2d 	call	0x5b30	; 0x5b30 <ioport_pin_to_mask>
    5cc8:	48 2f       	mov	r20, r24
    5cca:	89 81       	ldd	r24, Y+1	; 0x01
    5ccc:	8c 83       	std	Y+4, r24	; 0x04
    5cce:	8c 81       	ldd	r24, Y+4	; 0x04
    5cd0:	8b 87       	std	Y+11, r24	; 0x0b
 * \brief: To get the base address of port number from defined pin
 * \param: pin. the pin number defined by IOPORT_CREATE_PIN
 */
__always_inline static PORT_t *arch_ioport_pin_to_base(ioport_pin_t pin)
{
	return arch_ioport_port_to_base(pin >> 3);
    5cd2:	8b 85       	ldd	r24, Y+11	; 0x0b
    5cd4:	86 95       	lsr	r24
    5cd6:	86 95       	lsr	r24
    5cd8:	86 95       	lsr	r24
    5cda:	8c 87       	std	Y+12, r24	; 0x0c
 * \param: port number e.g. IOPORT_PORTB
 */
__always_inline static PORT_t *arch_ioport_port_to_base(uint8_t port)
{
	return (PORT_t *)((uintptr_t)(IOPORT_BASE_ADDRESS +
	       (port * IOPORT_PORT_OFFSET)));
    5cdc:	8c 85       	ldd	r24, Y+12	; 0x0c
    5cde:	28 2f       	mov	r18, r24
    5ce0:	30 e0       	ldi	r19, 0x00	; 0
    5ce2:	c9 01       	movw	r24, r18
    5ce4:	88 0f       	add	r24, r24
    5ce6:	99 1f       	adc	r25, r25
    5ce8:	82 0f       	add	r24, r18
    5cea:	93 1f       	adc	r25, r19
 * \brief: To get the base address of port number
 * \param: port number e.g. IOPORT_PORTB
 */
__always_inline static PORT_t *arch_ioport_port_to_base(uint8_t port)
{
	return (PORT_t *)((uintptr_t)(IOPORT_BASE_ADDRESS +
    5cec:	80 96       	adiw	r24, 0x20	; 32
    5cee:	9f 83       	std	Y+7, r25	; 0x07
    5cf0:	8e 83       	std	Y+6, r24	; 0x06
    5cf2:	48 87       	std	Y+8, r20	; 0x08
    5cf4:	83 e0       	ldi	r24, 0x03	; 3
    5cf6:	90 e0       	ldi	r25, 0x00	; 0
    5cf8:	9a 87       	std	Y+10, r25	; 0x0a
    5cfa:	89 87       	std	Y+9, r24	; 0x09
__always_inline static inline void ioport_configure_port_pin(void *port,
		pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
    5cfc:	89 85       	ldd	r24, Y+9	; 0x09
    5cfe:	9a 85       	ldd	r25, Y+10	; 0x0a
    5d00:	81 70       	andi	r24, 0x01	; 1
    5d02:	99 27       	eor	r25, r25
    5d04:	89 2b       	or	r24, r25
    5d06:	89 f1       	breq	.+98     	; 0x5d6a <usart_init_spi+0xf4>
		if (flags & IOPORT_INIT_HIGH) {
    5d08:	89 85       	ldd	r24, Y+9	; 0x09
    5d0a:	9a 85       	ldd	r25, Y+10	; 0x0a
    5d0c:	82 70       	andi	r24, 0x02	; 2
    5d0e:	99 27       	eor	r25, r25
    5d10:	89 2b       	or	r24, r25
    5d12:	71 f0       	breq	.+28     	; 0x5d30 <usart_init_spi+0xba>
			*((uint8_t *)port + 2) |= pin_mask;
    5d14:	8e 81       	ldd	r24, Y+6	; 0x06
    5d16:	9f 81       	ldd	r25, Y+7	; 0x07
    5d18:	02 96       	adiw	r24, 0x02	; 2
    5d1a:	2e 81       	ldd	r18, Y+6	; 0x06
    5d1c:	3f 81       	ldd	r19, Y+7	; 0x07
    5d1e:	2e 5f       	subi	r18, 0xFE	; 254
    5d20:	3f 4f       	sbci	r19, 0xFF	; 255
    5d22:	f9 01       	movw	r30, r18
    5d24:	30 81       	ld	r19, Z
    5d26:	28 85       	ldd	r18, Y+8	; 0x08
    5d28:	23 2b       	or	r18, r19
    5d2a:	fc 01       	movw	r30, r24
    5d2c:	20 83       	st	Z, r18
    5d2e:	0f c0       	rjmp	.+30     	; 0x5d4e <usart_init_spi+0xd8>
		} else {
			*((uint8_t *)port + 2) &= ~pin_mask;
    5d30:	8e 81       	ldd	r24, Y+6	; 0x06
    5d32:	9f 81       	ldd	r25, Y+7	; 0x07
    5d34:	02 96       	adiw	r24, 0x02	; 2
    5d36:	2e 81       	ldd	r18, Y+6	; 0x06
    5d38:	3f 81       	ldd	r19, Y+7	; 0x07
    5d3a:	2e 5f       	subi	r18, 0xFE	; 254
    5d3c:	3f 4f       	sbci	r19, 0xFF	; 255
    5d3e:	f9 01       	movw	r30, r18
    5d40:	20 81       	ld	r18, Z
    5d42:	32 2f       	mov	r19, r18
    5d44:	28 85       	ldd	r18, Y+8	; 0x08
    5d46:	20 95       	com	r18
    5d48:	23 23       	and	r18, r19
    5d4a:	fc 01       	movw	r30, r24
    5d4c:	20 83       	st	Z, r18
		}

		*((uint8_t *)port + 1) |= pin_mask;
    5d4e:	8e 81       	ldd	r24, Y+6	; 0x06
    5d50:	9f 81       	ldd	r25, Y+7	; 0x07
    5d52:	01 96       	adiw	r24, 0x01	; 1
    5d54:	2e 81       	ldd	r18, Y+6	; 0x06
    5d56:	3f 81       	ldd	r19, Y+7	; 0x07
    5d58:	2f 5f       	subi	r18, 0xFF	; 255
    5d5a:	3f 4f       	sbci	r19, 0xFF	; 255
    5d5c:	f9 01       	movw	r30, r18
    5d5e:	30 81       	ld	r19, Z
    5d60:	28 85       	ldd	r18, Y+8	; 0x08
    5d62:	23 2b       	or	r18, r19
    5d64:	fc 01       	movw	r30, r24
    5d66:	20 83       	st	Z, r18
    5d68:	32 c0       	rjmp	.+100    	; 0x5dce <usart_init_spi+0x158>
	} else {
		*((uint8_t *)port + 1) &= ~pin_mask;
    5d6a:	8e 81       	ldd	r24, Y+6	; 0x06
    5d6c:	9f 81       	ldd	r25, Y+7	; 0x07
    5d6e:	01 96       	adiw	r24, 0x01	; 1
    5d70:	2e 81       	ldd	r18, Y+6	; 0x06
    5d72:	3f 81       	ldd	r19, Y+7	; 0x07
    5d74:	2f 5f       	subi	r18, 0xFF	; 255
    5d76:	3f 4f       	sbci	r19, 0xFF	; 255
    5d78:	f9 01       	movw	r30, r18
    5d7a:	20 81       	ld	r18, Z
    5d7c:	32 2f       	mov	r19, r18
    5d7e:	28 85       	ldd	r18, Y+8	; 0x08
    5d80:	20 95       	com	r18
    5d82:	23 23       	and	r18, r19
    5d84:	fc 01       	movw	r30, r24
    5d86:	20 83       	st	Z, r18
		if (flags & IOPORT_PULL_UP) {
    5d88:	89 85       	ldd	r24, Y+9	; 0x09
    5d8a:	9a 85       	ldd	r25, Y+10	; 0x0a
    5d8c:	84 70       	andi	r24, 0x04	; 4
    5d8e:	99 27       	eor	r25, r25
    5d90:	89 2b       	or	r24, r25
    5d92:	71 f0       	breq	.+28     	; 0x5db0 <usart_init_spi+0x13a>
			*((uint8_t *)port + 2) |= pin_mask;
    5d94:	8e 81       	ldd	r24, Y+6	; 0x06
    5d96:	9f 81       	ldd	r25, Y+7	; 0x07
    5d98:	02 96       	adiw	r24, 0x02	; 2
    5d9a:	2e 81       	ldd	r18, Y+6	; 0x06
    5d9c:	3f 81       	ldd	r19, Y+7	; 0x07
    5d9e:	2e 5f       	subi	r18, 0xFE	; 254
    5da0:	3f 4f       	sbci	r19, 0xFF	; 255
    5da2:	f9 01       	movw	r30, r18
    5da4:	30 81       	ld	r19, Z
    5da6:	28 85       	ldd	r18, Y+8	; 0x08
    5da8:	23 2b       	or	r18, r19
    5daa:	fc 01       	movw	r30, r24
    5dac:	20 83       	st	Z, r18
    5dae:	0f c0       	rjmp	.+30     	; 0x5dce <usart_init_spi+0x158>
		} else {
			*((uint8_t *)port + 2) &= ~pin_mask;
    5db0:	8e 81       	ldd	r24, Y+6	; 0x06
    5db2:	9f 81       	ldd	r25, Y+7	; 0x07
    5db4:	02 96       	adiw	r24, 0x02	; 2
    5db6:	2e 81       	ldd	r18, Y+6	; 0x06
    5db8:	3f 81       	ldd	r19, Y+7	; 0x07
    5dba:	2e 5f       	subi	r18, 0xFE	; 254
    5dbc:	3f 4f       	sbci	r19, 0xFF	; 255
    5dbe:	f9 01       	movw	r30, r18
    5dc0:	20 81       	ld	r18, Z
    5dc2:	32 2f       	mov	r19, r18
    5dc4:	28 85       	ldd	r18, Y+8	; 0x08
    5dc6:	20 95       	com	r18
    5dc8:	23 23       	and	r18, r19
    5dca:	fc 01       	movw	r30, r24
    5dcc:	20 83       	st	Z, r18
				ioport_pin_to_mask(sck_pin),
				IOPORT_DIR_OUTPUT | IOPORT_INIT_HIGH );
	}
#endif
#ifdef USARTA1
	if ((uintptr_t)usart == (uintptr_t)&UCSR1A) {
    5dce:	8a 89       	ldd	r24, Y+18	; 0x12
    5dd0:	9b 89       	ldd	r25, Y+19	; 0x13
    5dd2:	88 3c       	cpi	r24, 0xC8	; 200
    5dd4:	91 05       	cpc	r25, r1
    5dd6:	09 f0       	breq	.+2      	; 0x5dda <usart_init_spi+0x164>
    5dd8:	88 c0       	rjmp	.+272    	; 0x5eea <usart_init_spi+0x274>
		sck_pin = IOPORT_CREATE_PIN(PORTD, 5);
    5dda:	8d e1       	ldi	r24, 0x1D	; 29
    5ddc:	89 83       	std	Y+1, r24	; 0x01
		ioport_configure_port_pin(ioport_pin_to_port(sck_pin),
    5dde:	89 81       	ldd	r24, Y+1	; 0x01
    5de0:	0e 94 98 2d 	call	0x5b30	; 0x5b30 <ioport_pin_to_mask>
    5de4:	48 2f       	mov	r20, r24
    5de6:	89 81       	ldd	r24, Y+1	; 0x01
    5de8:	8d 83       	std	Y+5, r24	; 0x05
    5dea:	8d 81       	ldd	r24, Y+5	; 0x05
    5dec:	88 8b       	std	Y+16, r24	; 0x10
 * \brief: To get the base address of port number from defined pin
 * \param: pin. the pin number defined by IOPORT_CREATE_PIN
 */
__always_inline static PORT_t *arch_ioport_pin_to_base(ioport_pin_t pin)
{
	return arch_ioport_port_to_base(pin >> 3);
    5dee:	88 89       	ldd	r24, Y+16	; 0x10
    5df0:	86 95       	lsr	r24
    5df2:	86 95       	lsr	r24
    5df4:	86 95       	lsr	r24
    5df6:	89 8b       	std	Y+17, r24	; 0x11
 * \param: port number e.g. IOPORT_PORTB
 */
__always_inline static PORT_t *arch_ioport_port_to_base(uint8_t port)
{
	return (PORT_t *)((uintptr_t)(IOPORT_BASE_ADDRESS +
	       (port * IOPORT_PORT_OFFSET)));
    5df8:	89 89       	ldd	r24, Y+17	; 0x11
    5dfa:	28 2f       	mov	r18, r24
    5dfc:	30 e0       	ldi	r19, 0x00	; 0
    5dfe:	c9 01       	movw	r24, r18
    5e00:	88 0f       	add	r24, r24
    5e02:	99 1f       	adc	r25, r25
    5e04:	82 0f       	add	r24, r18
    5e06:	93 1f       	adc	r25, r19
 * \brief: To get the base address of port number
 * \param: port number e.g. IOPORT_PORTB
 */
__always_inline static PORT_t *arch_ioport_port_to_base(uint8_t port)
{
	return (PORT_t *)((uintptr_t)(IOPORT_BASE_ADDRESS +
    5e08:	80 96       	adiw	r24, 0x20	; 32
    5e0a:	9b 83       	std	Y+3, r25	; 0x03
    5e0c:	8a 83       	std	Y+2, r24	; 0x02
    5e0e:	4d 87       	std	Y+13, r20	; 0x0d
    5e10:	83 e0       	ldi	r24, 0x03	; 3
    5e12:	90 e0       	ldi	r25, 0x00	; 0
    5e14:	9f 87       	std	Y+15, r25	; 0x0f
    5e16:	8e 87       	std	Y+14, r24	; 0x0e
__always_inline static inline void ioport_configure_port_pin(void *port,
		pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
    5e18:	8e 85       	ldd	r24, Y+14	; 0x0e
    5e1a:	9f 85       	ldd	r25, Y+15	; 0x0f
    5e1c:	81 70       	andi	r24, 0x01	; 1
    5e1e:	99 27       	eor	r25, r25
    5e20:	89 2b       	or	r24, r25
    5e22:	89 f1       	breq	.+98     	; 0x5e86 <usart_init_spi+0x210>
		if (flags & IOPORT_INIT_HIGH) {
    5e24:	8e 85       	ldd	r24, Y+14	; 0x0e
    5e26:	9f 85       	ldd	r25, Y+15	; 0x0f
    5e28:	82 70       	andi	r24, 0x02	; 2
    5e2a:	99 27       	eor	r25, r25
    5e2c:	89 2b       	or	r24, r25
    5e2e:	71 f0       	breq	.+28     	; 0x5e4c <usart_init_spi+0x1d6>
			*((uint8_t *)port + 2) |= pin_mask;
    5e30:	8a 81       	ldd	r24, Y+2	; 0x02
    5e32:	9b 81       	ldd	r25, Y+3	; 0x03
    5e34:	02 96       	adiw	r24, 0x02	; 2
    5e36:	2a 81       	ldd	r18, Y+2	; 0x02
    5e38:	3b 81       	ldd	r19, Y+3	; 0x03
    5e3a:	2e 5f       	subi	r18, 0xFE	; 254
    5e3c:	3f 4f       	sbci	r19, 0xFF	; 255
    5e3e:	f9 01       	movw	r30, r18
    5e40:	30 81       	ld	r19, Z
    5e42:	2d 85       	ldd	r18, Y+13	; 0x0d
    5e44:	23 2b       	or	r18, r19
    5e46:	fc 01       	movw	r30, r24
    5e48:	20 83       	st	Z, r18
    5e4a:	0f c0       	rjmp	.+30     	; 0x5e6a <usart_init_spi+0x1f4>
		} else {
			*((uint8_t *)port + 2) &= ~pin_mask;
    5e4c:	8a 81       	ldd	r24, Y+2	; 0x02
    5e4e:	9b 81       	ldd	r25, Y+3	; 0x03
    5e50:	02 96       	adiw	r24, 0x02	; 2
    5e52:	2a 81       	ldd	r18, Y+2	; 0x02
    5e54:	3b 81       	ldd	r19, Y+3	; 0x03
    5e56:	2e 5f       	subi	r18, 0xFE	; 254
    5e58:	3f 4f       	sbci	r19, 0xFF	; 255
    5e5a:	f9 01       	movw	r30, r18
    5e5c:	20 81       	ld	r18, Z
    5e5e:	32 2f       	mov	r19, r18
    5e60:	2d 85       	ldd	r18, Y+13	; 0x0d
    5e62:	20 95       	com	r18
    5e64:	23 23       	and	r18, r19
    5e66:	fc 01       	movw	r30, r24
    5e68:	20 83       	st	Z, r18
		}

		*((uint8_t *)port + 1) |= pin_mask;
    5e6a:	8a 81       	ldd	r24, Y+2	; 0x02
    5e6c:	9b 81       	ldd	r25, Y+3	; 0x03
    5e6e:	01 96       	adiw	r24, 0x01	; 1
    5e70:	2a 81       	ldd	r18, Y+2	; 0x02
    5e72:	3b 81       	ldd	r19, Y+3	; 0x03
    5e74:	2f 5f       	subi	r18, 0xFF	; 255
    5e76:	3f 4f       	sbci	r19, 0xFF	; 255
    5e78:	f9 01       	movw	r30, r18
    5e7a:	30 81       	ld	r19, Z
    5e7c:	2d 85       	ldd	r18, Y+13	; 0x0d
    5e7e:	23 2b       	or	r18, r19
    5e80:	fc 01       	movw	r30, r24
    5e82:	20 83       	st	Z, r18
    5e84:	32 c0       	rjmp	.+100    	; 0x5eea <usart_init_spi+0x274>
	} else {
		*((uint8_t *)port + 1) &= ~pin_mask;
    5e86:	8a 81       	ldd	r24, Y+2	; 0x02
    5e88:	9b 81       	ldd	r25, Y+3	; 0x03
    5e8a:	01 96       	adiw	r24, 0x01	; 1
    5e8c:	2a 81       	ldd	r18, Y+2	; 0x02
    5e8e:	3b 81       	ldd	r19, Y+3	; 0x03
    5e90:	2f 5f       	subi	r18, 0xFF	; 255
    5e92:	3f 4f       	sbci	r19, 0xFF	; 255
    5e94:	f9 01       	movw	r30, r18
    5e96:	20 81       	ld	r18, Z
    5e98:	32 2f       	mov	r19, r18
    5e9a:	2d 85       	ldd	r18, Y+13	; 0x0d
    5e9c:	20 95       	com	r18
    5e9e:	23 23       	and	r18, r19
    5ea0:	fc 01       	movw	r30, r24
    5ea2:	20 83       	st	Z, r18
		if (flags & IOPORT_PULL_UP) {
    5ea4:	8e 85       	ldd	r24, Y+14	; 0x0e
    5ea6:	9f 85       	ldd	r25, Y+15	; 0x0f
    5ea8:	84 70       	andi	r24, 0x04	; 4
    5eaa:	99 27       	eor	r25, r25
    5eac:	89 2b       	or	r24, r25
    5eae:	71 f0       	breq	.+28     	; 0x5ecc <usart_init_spi+0x256>
			*((uint8_t *)port + 2) |= pin_mask;
    5eb0:	8a 81       	ldd	r24, Y+2	; 0x02
    5eb2:	9b 81       	ldd	r25, Y+3	; 0x03
    5eb4:	02 96       	adiw	r24, 0x02	; 2
    5eb6:	2a 81       	ldd	r18, Y+2	; 0x02
    5eb8:	3b 81       	ldd	r19, Y+3	; 0x03
    5eba:	2e 5f       	subi	r18, 0xFE	; 254
    5ebc:	3f 4f       	sbci	r19, 0xFF	; 255
    5ebe:	f9 01       	movw	r30, r18
    5ec0:	30 81       	ld	r19, Z
    5ec2:	2d 85       	ldd	r18, Y+13	; 0x0d
    5ec4:	23 2b       	or	r18, r19
    5ec6:	fc 01       	movw	r30, r24
    5ec8:	20 83       	st	Z, r18
    5eca:	0f c0       	rjmp	.+30     	; 0x5eea <usart_init_spi+0x274>
		} else {
			*((uint8_t *)port + 2) &= ~pin_mask;
    5ecc:	8a 81       	ldd	r24, Y+2	; 0x02
    5ece:	9b 81       	ldd	r25, Y+3	; 0x03
    5ed0:	02 96       	adiw	r24, 0x02	; 2
    5ed2:	2a 81       	ldd	r18, Y+2	; 0x02
    5ed4:	3b 81       	ldd	r19, Y+3	; 0x03
    5ed6:	2e 5f       	subi	r18, 0xFE	; 254
    5ed8:	3f 4f       	sbci	r19, 0xFF	; 255
    5eda:	f9 01       	movw	r30, r18
    5edc:	20 81       	ld	r18, Z
    5ede:	32 2f       	mov	r19, r18
    5ee0:	2d 85       	ldd	r18, Y+13	; 0x0d
    5ee2:	20 95       	com	r18
    5ee4:	23 23       	and	r18, r19
    5ee6:	fc 01       	movw	r30, r24
    5ee8:	20 83       	st	Z, r18
				ioport_pin_to_mask(sck_pin),
				IOPORT_DIR_OUTPUT | IOPORT_INIT_HIGH );
	}
#endif
	if (opt->spimode == 1 || opt->spimode == 3) {
    5eea:	8c 89       	ldd	r24, Y+20	; 0x14
    5eec:	9d 89       	ldd	r25, Y+21	; 0x15
    5eee:	fc 01       	movw	r30, r24
    5ef0:	84 81       	ldd	r24, Z+4	; 0x04
    5ef2:	81 30       	cpi	r24, 0x01	; 1
    5ef4:	31 f0       	breq	.+12     	; 0x5f02 <usart_init_spi+0x28c>
    5ef6:	8c 89       	ldd	r24, Y+20	; 0x14
    5ef8:	9d 89       	ldd	r25, Y+21	; 0x15
    5efa:	fc 01       	movw	r30, r24
    5efc:	84 81       	ldd	r24, Z+4	; 0x04
    5efe:	83 30       	cpi	r24, 0x03	; 3
    5f00:	59 f4       	brne	.+22     	; 0x5f18 <usart_init_spi+0x2a2>
		usart->UCSRnC |= USART_UCPHA_bm;
    5f02:	8a 89       	ldd	r24, Y+18	; 0x12
    5f04:	9b 89       	ldd	r25, Y+19	; 0x13
    5f06:	fc 01       	movw	r30, r24
    5f08:	82 81       	ldd	r24, Z+2	; 0x02
    5f0a:	28 2f       	mov	r18, r24
    5f0c:	22 60       	ori	r18, 0x02	; 2
    5f0e:	8a 89       	ldd	r24, Y+18	; 0x12
    5f10:	9b 89       	ldd	r25, Y+19	; 0x13
    5f12:	fc 01       	movw	r30, r24
    5f14:	22 83       	std	Z+2, r18	; 0x02
    5f16:	0a c0       	rjmp	.+20     	; 0x5f2c <usart_init_spi+0x2b6>
	} else {
		usart->UCSRnC &= ~USART_UCPHA_bm;
    5f18:	8a 89       	ldd	r24, Y+18	; 0x12
    5f1a:	9b 89       	ldd	r25, Y+19	; 0x13
    5f1c:	fc 01       	movw	r30, r24
    5f1e:	82 81       	ldd	r24, Z+2	; 0x02
    5f20:	28 2f       	mov	r18, r24
    5f22:	2d 7f       	andi	r18, 0xFD	; 253
    5f24:	8a 89       	ldd	r24, Y+18	; 0x12
    5f26:	9b 89       	ldd	r25, Y+19	; 0x13
    5f28:	fc 01       	movw	r30, r24
    5f2a:	22 83       	std	Z+2, r18	; 0x02
	}
	if (opt->spimode == 2 || opt->spimode == 3) {
    5f2c:	8c 89       	ldd	r24, Y+20	; 0x14
    5f2e:	9d 89       	ldd	r25, Y+21	; 0x15
    5f30:	fc 01       	movw	r30, r24
    5f32:	84 81       	ldd	r24, Z+4	; 0x04
    5f34:	82 30       	cpi	r24, 0x02	; 2
    5f36:	31 f0       	breq	.+12     	; 0x5f44 <usart_init_spi+0x2ce>
    5f38:	8c 89       	ldd	r24, Y+20	; 0x14
    5f3a:	9d 89       	ldd	r25, Y+21	; 0x15
    5f3c:	fc 01       	movw	r30, r24
    5f3e:	84 81       	ldd	r24, Z+4	; 0x04
    5f40:	83 30       	cpi	r24, 0x03	; 3
    5f42:	59 f4       	brne	.+22     	; 0x5f5a <usart_init_spi+0x2e4>
		usart->UCSRnC |= USART_UCPOL_bm;
    5f44:	8a 89       	ldd	r24, Y+18	; 0x12
    5f46:	9b 89       	ldd	r25, Y+19	; 0x13
    5f48:	fc 01       	movw	r30, r24
    5f4a:	82 81       	ldd	r24, Z+2	; 0x02
    5f4c:	28 2f       	mov	r18, r24
    5f4e:	21 60       	ori	r18, 0x01	; 1
    5f50:	8a 89       	ldd	r24, Y+18	; 0x12
    5f52:	9b 89       	ldd	r25, Y+19	; 0x13
    5f54:	fc 01       	movw	r30, r24
    5f56:	22 83       	std	Z+2, r18	; 0x02
    5f58:	0a c0       	rjmp	.+20     	; 0x5f6e <usart_init_spi+0x2f8>
	} else {
		usart->UCSRnC &= ~USART_UCPOL_bm;
    5f5a:	8a 89       	ldd	r24, Y+18	; 0x12
    5f5c:	9b 89       	ldd	r25, Y+19	; 0x13
    5f5e:	fc 01       	movw	r30, r24
    5f60:	82 81       	ldd	r24, Z+2	; 0x02
    5f62:	28 2f       	mov	r18, r24
    5f64:	2e 7f       	andi	r18, 0xFE	; 254
    5f66:	8a 89       	ldd	r24, Y+18	; 0x12
    5f68:	9b 89       	ldd	r25, Y+19	; 0x13
    5f6a:	fc 01       	movw	r30, r24
    5f6c:	22 83       	std	Z+2, r18	; 0x02
	}	
	
	if (opt->data_order) {
    5f6e:	8c 89       	ldd	r24, Y+20	; 0x14
    5f70:	9d 89       	ldd	r25, Y+21	; 0x15
    5f72:	fc 01       	movw	r30, r24
    5f74:	85 81       	ldd	r24, Z+5	; 0x05
    5f76:	88 23       	and	r24, r24
    5f78:	59 f0       	breq	.+22     	; 0x5f90 <usart_init_spi+0x31a>
		usart->UCSRnC |= USART_DORD_bm;
    5f7a:	8a 89       	ldd	r24, Y+18	; 0x12
    5f7c:	9b 89       	ldd	r25, Y+19	; 0x13
    5f7e:	fc 01       	movw	r30, r24
    5f80:	82 81       	ldd	r24, Z+2	; 0x02
    5f82:	28 2f       	mov	r18, r24
    5f84:	24 60       	ori	r18, 0x04	; 4
    5f86:	8a 89       	ldd	r24, Y+18	; 0x12
    5f88:	9b 89       	ldd	r25, Y+19	; 0x13
    5f8a:	fc 01       	movw	r30, r24
    5f8c:	22 83       	std	Z+2, r18	; 0x02
    5f8e:	0a c0       	rjmp	.+20     	; 0x5fa4 <usart_init_spi+0x32e>
	} else {
		usart->UCSRnC &= ~USART_DORD_bm;
    5f90:	8a 89       	ldd	r24, Y+18	; 0x12
    5f92:	9b 89       	ldd	r25, Y+19	; 0x13
    5f94:	fc 01       	movw	r30, r24
    5f96:	82 81       	ldd	r24, Z+2	; 0x02
    5f98:	28 2f       	mov	r18, r24
    5f9a:	2b 7f       	andi	r18, 0xFB	; 251
    5f9c:	8a 89       	ldd	r24, Y+18	; 0x12
    5f9e:	9b 89       	ldd	r25, Y+19	; 0x13
    5fa0:	fc 01       	movw	r30, r24
    5fa2:	22 83       	std	Z+2, r18	; 0x02
	}
	
	
	usart_spi_set_baudrate(usart, opt->baudrate,
    5fa4:	0e 94 c0 2d 	call	0x5b80	; 0x5b80 <sysclk_get_source_clock_hz>
    5fa8:	9b 01       	movw	r18, r22
    5faa:	ac 01       	movw	r20, r24
    5fac:	8c 89       	ldd	r24, Y+20	; 0x14
    5fae:	9d 89       	ldd	r25, Y+21	; 0x15
    5fb0:	fc 01       	movw	r30, r24
    5fb2:	80 81       	ld	r24, Z
    5fb4:	91 81       	ldd	r25, Z+1	; 0x01
    5fb6:	a2 81       	ldd	r26, Z+2	; 0x02
    5fb8:	b3 81       	ldd	r27, Z+3	; 0x03
    5fba:	ea 89       	ldd	r30, Y+18	; 0x12
    5fbc:	fb 89       	ldd	r31, Y+19	; 0x13
    5fbe:	89 01       	movw	r16, r18
    5fc0:	9a 01       	movw	r18, r20
    5fc2:	ac 01       	movw	r20, r24
    5fc4:	bd 01       	movw	r22, r26
    5fc6:	cf 01       	movw	r24, r30
    5fc8:	0e 94 07 32 	call	0x640e	; 0x640e <usart_spi_set_baudrate>
			sysclk_get_source_clock_hz());
	usart_tx_enable(usart);
    5fcc:	8a 89       	ldd	r24, Y+18	; 0x12
    5fce:	9b 89       	ldd	r25, Y+19	; 0x13
    5fd0:	0e 94 32 2d 	call	0x5a64	; 0x5a64 <usart_tx_enable>
	usart_rx_enable(usart);
    5fd4:	8a 89       	ldd	r24, Y+18	; 0x12
    5fd6:	9b 89       	ldd	r25, Y+19	; 0x13
    5fd8:	0e 94 bc 2c 	call	0x5978	; 0x5978 <usart_rx_enable>
}
    5fdc:	00 00       	nop
    5fde:	65 96       	adiw	r28, 0x15	; 21
    5fe0:	0f b6       	in	r0, 0x3f	; 63
    5fe2:	f8 94       	cli
    5fe4:	de bf       	out	0x3e, r29	; 62
    5fe6:	0f be       	out	0x3f, r0	; 63
    5fe8:	cd bf       	out	0x3d, r28	; 61
    5fea:	df 91       	pop	r29
    5fec:	cf 91       	pop	r28
    5fee:	1f 91       	pop	r17
    5ff0:	0f 91       	pop	r16
    5ff2:	08 95       	ret

00005ff4 <usart_putchar>:
 * \param c The data to send.
 *
 * \return STATUS_OK
 */
status_code_t usart_putchar(USART_t *usart, uint8_t c)
{
    5ff4:	cf 93       	push	r28
    5ff6:	df 93       	push	r29
    5ff8:	00 d0       	rcall	.+0      	; 0x5ffa <usart_putchar+0x6>
    5ffa:	1f 92       	push	r1
    5ffc:	cd b7       	in	r28, 0x3d	; 61
    5ffe:	de b7       	in	r29, 0x3e	; 62
    6000:	9a 83       	std	Y+2, r25	; 0x02
    6002:	89 83       	std	Y+1, r24	; 0x01
    6004:	6b 83       	std	Y+3, r22	; 0x03
	while (usart_data_register_is_empty(usart) == false) {
    6006:	00 00       	nop
    6008:	89 81       	ldd	r24, Y+1	; 0x01
    600a:	9a 81       	ldd	r25, Y+2	; 0x02
    600c:	0e 94 66 2d 	call	0x5acc	; 0x5acc <usart_data_register_is_empty>
    6010:	98 2f       	mov	r25, r24
    6012:	81 e0       	ldi	r24, 0x01	; 1
    6014:	89 27       	eor	r24, r25
    6016:	88 23       	and	r24, r24
    6018:	b9 f7       	brne	.-18     	; 0x6008 <usart_putchar+0x14>
	}

	usart->UDR = c;
    601a:	89 81       	ldd	r24, Y+1	; 0x01
    601c:	9a 81       	ldd	r25, Y+2	; 0x02
    601e:	2b 81       	ldd	r18, Y+3	; 0x03
    6020:	fc 01       	movw	r30, r24
    6022:	26 83       	std	Z+6, r18	; 0x06
	return STATUS_OK;
    6024:	80 e0       	ldi	r24, 0x00	; 0
}
    6026:	0f 90       	pop	r0
    6028:	0f 90       	pop	r0
    602a:	0f 90       	pop	r0
    602c:	df 91       	pop	r29
    602e:	cf 91       	pop	r28
    6030:	08 95       	ret

00006032 <usart_getchar>:
 * \param usart The USART module.
 *
 * \return The received data.
 */
uint8_t usart_getchar(USART_t *usart)
{
    6032:	cf 93       	push	r28
    6034:	df 93       	push	r29
    6036:	00 d0       	rcall	.+0      	; 0x6038 <usart_getchar+0x6>
    6038:	cd b7       	in	r28, 0x3d	; 61
    603a:	de b7       	in	r29, 0x3e	; 62
    603c:	9a 83       	std	Y+2, r25	; 0x02
    603e:	89 83       	std	Y+1, r24	; 0x01
	while (usart_rx_is_complete(usart) == false) {
    6040:	00 00       	nop
    6042:	89 81       	ldd	r24, Y+1	; 0x01
    6044:	9a 81       	ldd	r25, Y+2	; 0x02
    6046:	0e 94 7f 2d 	call	0x5afe	; 0x5afe <usart_rx_is_complete>
    604a:	98 2f       	mov	r25, r24
    604c:	81 e0       	ldi	r24, 0x01	; 1
    604e:	89 27       	eor	r24, r25
    6050:	88 23       	and	r24, r24
    6052:	b9 f7       	brne	.-18     	; 0x6042 <usart_getchar+0x10>
	}

	return ((uint8_t)usart->UDR);
    6054:	89 81       	ldd	r24, Y+1	; 0x01
    6056:	9a 81       	ldd	r25, Y+2	; 0x02
    6058:	fc 01       	movw	r30, r24
    605a:	86 81       	ldd	r24, Z+6	; 0x06
}
    605c:	0f 90       	pop	r0
    605e:	0f 90       	pop	r0
    6060:	df 91       	pop	r29
    6062:	cf 91       	pop	r28
    6064:	08 95       	ret

00006066 <usart_get_baud_offset>:
 *
 * \return The baudrate offset in PROGMEM table
 * \retval USART_BAUD_UNDEFINED for baudrates not in lookup table
 */
static uint8_t usart_get_baud_offset(uint32_t baud)
{
    6066:	cf 93       	push	r28
    6068:	df 93       	push	r29
    606a:	00 d0       	rcall	.+0      	; 0x606c <usart_get_baud_offset+0x6>
    606c:	00 d0       	rcall	.+0      	; 0x606e <usart_get_baud_offset+0x8>
    606e:	cd b7       	in	r28, 0x3d	; 61
    6070:	de b7       	in	r29, 0x3e	; 62
    6072:	69 83       	std	Y+1, r22	; 0x01
    6074:	7a 83       	std	Y+2, r23	; 0x02
    6076:	8b 83       	std	Y+3, r24	; 0x03
    6078:	9c 83       	std	Y+4, r25	; 0x04
	switch (baud) {
    607a:	89 81       	ldd	r24, Y+1	; 0x01
    607c:	9a 81       	ldd	r25, Y+2	; 0x02
    607e:	ab 81       	ldd	r26, Y+3	; 0x03
    6080:	bc 81       	ldd	r27, Y+4	; 0x04
    6082:	80 38       	cpi	r24, 0x80	; 128
    6084:	25 e2       	ldi	r18, 0x25	; 37
    6086:	92 07       	cpc	r25, r18
    6088:	a1 05       	cpc	r26, r1
    608a:	b1 05       	cpc	r27, r1
    608c:	e1 f1       	breq	.+120    	; 0x6106 <usart_get_baud_offset+0xa0>
    608e:	81 38       	cpi	r24, 0x81	; 129
    6090:	25 e2       	ldi	r18, 0x25	; 37
    6092:	92 07       	cpc	r25, r18
    6094:	a1 05       	cpc	r26, r1
    6096:	b1 05       	cpc	r27, r1
    6098:	90 f4       	brcc	.+36     	; 0x60be <usart_get_baud_offset+0x58>
    609a:	80 36       	cpi	r24, 0x60	; 96
    609c:	29 e0       	ldi	r18, 0x09	; 9
    609e:	92 07       	cpc	r25, r18
    60a0:	a1 05       	cpc	r26, r1
    60a2:	b1 05       	cpc	r27, r1
    60a4:	61 f1       	breq	.+88     	; 0x60fe <usart_get_baud_offset+0x98>
    60a6:	80 3c       	cpi	r24, 0xC0	; 192
    60a8:	22 e1       	ldi	r18, 0x12	; 18
    60aa:	92 07       	cpc	r25, r18
    60ac:	a1 05       	cpc	r26, r1
    60ae:	b1 05       	cpc	r27, r1
    60b0:	41 f1       	breq	.+80     	; 0x6102 <usart_get_baud_offset+0x9c>
    60b2:	80 3b       	cpi	r24, 0xB0	; 176
    60b4:	94 40       	sbci	r25, 0x04	; 4
    60b6:	a1 05       	cpc	r26, r1
    60b8:	b1 05       	cpc	r27, r1
    60ba:	f9 f0       	breq	.+62     	; 0x60fa <usart_get_baud_offset+0x94>
    60bc:	2e c0       	rjmp	.+92     	; 0x611a <usart_get_baud_offset+0xb4>
    60be:	81 15       	cp	r24, r1
    60c0:	26 e9       	ldi	r18, 0x96	; 150
    60c2:	92 07       	cpc	r25, r18
    60c4:	a1 05       	cpc	r26, r1
    60c6:	b1 05       	cpc	r27, r1
    60c8:	11 f1       	breq	.+68     	; 0x610e <usart_get_baud_offset+0xa8>
    60ca:	81 30       	cpi	r24, 0x01	; 1
    60cc:	26 e9       	ldi	r18, 0x96	; 150
    60ce:	92 07       	cpc	r25, r18
    60d0:	a1 05       	cpc	r26, r1
    60d2:	b1 05       	cpc	r27, r1
    60d4:	30 f4       	brcc	.+12     	; 0x60e2 <usart_get_baud_offset+0x7c>
    60d6:	81 15       	cp	r24, r1
    60d8:	9b 44       	sbci	r25, 0x4B	; 75
    60da:	a1 05       	cpc	r26, r1
    60dc:	b1 05       	cpc	r27, r1
    60de:	a9 f0       	breq	.+42     	; 0x610a <usart_get_baud_offset+0xa4>
    60e0:	1c c0       	rjmp	.+56     	; 0x611a <usart_get_baud_offset+0xb4>
    60e2:	81 15       	cp	r24, r1
    60e4:	21 ee       	ldi	r18, 0xE1	; 225
    60e6:	92 07       	cpc	r25, r18
    60e8:	a1 05       	cpc	r26, r1
    60ea:	b1 05       	cpc	r27, r1
    60ec:	91 f0       	breq	.+36     	; 0x6112 <usart_get_baud_offset+0xac>
    60ee:	81 15       	cp	r24, r1
    60f0:	92 4c       	sbci	r25, 0xC2	; 194
    60f2:	a1 40       	sbci	r26, 0x01	; 1
    60f4:	b1 05       	cpc	r27, r1
    60f6:	79 f0       	breq	.+30     	; 0x6116 <usart_get_baud_offset+0xb0>
    60f8:	10 c0       	rjmp	.+32     	; 0x611a <usart_get_baud_offset+0xb4>
	case 1200:
		return (uint8_t)USART_BAUD_1200;
    60fa:	80 e0       	ldi	r24, 0x00	; 0
    60fc:	0f c0       	rjmp	.+30     	; 0x611c <usart_get_baud_offset+0xb6>

	case 2400:
		return (uint8_t)USART_BAUD_2400;
    60fe:	81 e0       	ldi	r24, 0x01	; 1
    6100:	0d c0       	rjmp	.+26     	; 0x611c <usart_get_baud_offset+0xb6>

	case 4800:
		return (uint8_t)USART_BAUD_4800;
    6102:	82 e0       	ldi	r24, 0x02	; 2
    6104:	0b c0       	rjmp	.+22     	; 0x611c <usart_get_baud_offset+0xb6>

	case 9600:
		return (uint8_t)USART_BAUD_9600;
    6106:	83 e0       	ldi	r24, 0x03	; 3
    6108:	09 c0       	rjmp	.+18     	; 0x611c <usart_get_baud_offset+0xb6>

	case 19200:
		return (uint8_t)USART_BAUD_19200;
    610a:	84 e0       	ldi	r24, 0x04	; 4
    610c:	07 c0       	rjmp	.+14     	; 0x611c <usart_get_baud_offset+0xb6>

	case 38400:
		return (uint8_t)USART_BAUD_38400;
    610e:	85 e0       	ldi	r24, 0x05	; 5
    6110:	05 c0       	rjmp	.+10     	; 0x611c <usart_get_baud_offset+0xb6>

	case 57600:
		return (uint8_t)USART_BAUD_57600;
    6112:	86 e0       	ldi	r24, 0x06	; 6
    6114:	03 c0       	rjmp	.+6      	; 0x611c <usart_get_baud_offset+0xb6>

	case 115200:
		return (uint8_t)USART_BAUD_115200;
    6116:	87 e0       	ldi	r24, 0x07	; 7
    6118:	01 c0       	rjmp	.+2      	; 0x611c <usart_get_baud_offset+0xb6>

	default:
		return (uint8_t)USART_BAUD_UNDEFINED;
    611a:	8f ef       	ldi	r24, 0xFF	; 255
	}
}
    611c:	0f 90       	pop	r0
    611e:	0f 90       	pop	r0
    6120:	0f 90       	pop	r0
    6122:	0f 90       	pop	r0
    6124:	df 91       	pop	r29
    6126:	cf 91       	pop	r28
    6128:	08 95       	ret

0000612a <usart_set_baudrate_precalculated>:
 * \param cpu_hz The CPU frequency.
 *
 */
void usart_set_baudrate_precalculated(USART_t *usart, uint32_t baud,
		uint32_t cpu_hz)
{
    612a:	0f 93       	push	r16
    612c:	1f 93       	push	r17
    612e:	cf 93       	push	r28
    6130:	df 93       	push	r29
    6132:	cd b7       	in	r28, 0x3d	; 61
    6134:	de b7       	in	r29, 0x3e	; 62
    6136:	69 97       	sbiw	r28, 0x19	; 25
    6138:	0f b6       	in	r0, 0x3f	; 63
    613a:	f8 94       	cli
    613c:	de bf       	out	0x3e, r29	; 62
    613e:	0f be       	out	0x3f, r0	; 63
    6140:	cd bf       	out	0x3d, r28	; 61
    6142:	99 8b       	std	Y+17, r25	; 0x11
    6144:	88 8b       	std	Y+16, r24	; 0x10
    6146:	4a 8b       	std	Y+18, r20	; 0x12
    6148:	5b 8b       	std	Y+19, r21	; 0x13
    614a:	6c 8b       	std	Y+20, r22	; 0x14
    614c:	7d 8b       	std	Y+21, r23	; 0x15
    614e:	0e 8b       	std	Y+22, r16	; 0x16
    6150:	1f 8b       	std	Y+23, r17	; 0x17
    6152:	28 8f       	std	Y+24, r18	; 0x18
    6154:	39 8f       	std	Y+25, r19	; 0x19
	uint8_t baud_offset;
	uint16_t baudctrl = 0;
    6156:	1a 82       	std	Y+2, r1	; 0x02
    6158:	19 82       	std	Y+1, r1	; 0x01

	baud_offset = usart_get_baud_offset(baud);
    615a:	8a 89       	ldd	r24, Y+18	; 0x12
    615c:	9b 89       	ldd	r25, Y+19	; 0x13
    615e:	ac 89       	ldd	r26, Y+20	; 0x14
    6160:	bd 89       	ldd	r27, Y+21	; 0x15
    6162:	bc 01       	movw	r22, r24
    6164:	cd 01       	movw	r24, r26
    6166:	0e 94 33 30 	call	0x6066	; 0x6066 <usart_get_baud_offset>
    616a:	8b 83       	std	Y+3, r24	; 0x03

	if (cpu_hz == 1000000UL) {
    616c:	8e 89       	ldd	r24, Y+22	; 0x16
    616e:	9f 89       	ldd	r25, Y+23	; 0x17
    6170:	a8 8d       	ldd	r26, Y+24	; 0x18
    6172:	b9 8d       	ldd	r27, Y+25	; 0x19
    6174:	80 34       	cpi	r24, 0x40	; 64
    6176:	92 44       	sbci	r25, 0x42	; 66
    6178:	af 40       	sbci	r26, 0x0F	; 15
    617a:	b1 05       	cpc	r27, r1
    617c:	c1 f4       	brne	.+48     	; 0x61ae <usart_set_baudrate_precalculated+0x84>
		baudctrl = PROGMEM_READ_WORD(baudctrl_1mhz + baud_offset);
    617e:	8b 81       	ldd	r24, Y+3	; 0x03
    6180:	88 2f       	mov	r24, r24
    6182:	90 e0       	ldi	r25, 0x00	; 0
    6184:	88 0f       	add	r24, r24
    6186:	99 1f       	adc	r25, r25
    6188:	8e 5a       	subi	r24, 0xAE	; 174
    618a:	9d 4f       	sbci	r25, 0xFD	; 253
    618c:	9d 83       	std	Y+5, r25	; 0x05
    618e:	8c 83       	std	Y+4, r24	; 0x04
    6190:	8c 81       	ldd	r24, Y+4	; 0x04
    6192:	9d 81       	ldd	r25, Y+5	; 0x05
    6194:	fc 01       	movw	r30, r24
    6196:	25 91       	lpm	r18, Z+
    6198:	34 91       	lpm	r19, Z
    619a:	cf 01       	movw	r24, r30
    619c:	3f 83       	std	Y+7, r19	; 0x07
    619e:	2e 83       	std	Y+6, r18	; 0x06
    61a0:	9d 83       	std	Y+5, r25	; 0x05
    61a2:	8c 83       	std	Y+4, r24	; 0x04
    61a4:	8e 81       	ldd	r24, Y+6	; 0x06
    61a6:	9f 81       	ldd	r25, Y+7	; 0x07
    61a8:	9a 83       	std	Y+2, r25	; 0x02
    61aa:	89 83       	std	Y+1, r24	; 0x01
    61ac:	41 c0       	rjmp	.+130    	; 0x6230 <usart_set_baudrate_precalculated+0x106>
	} else if (cpu_hz == 8000000UL) {
    61ae:	8e 89       	ldd	r24, Y+22	; 0x16
    61b0:	9f 89       	ldd	r25, Y+23	; 0x17
    61b2:	a8 8d       	ldd	r26, Y+24	; 0x18
    61b4:	b9 8d       	ldd	r27, Y+25	; 0x19
    61b6:	81 15       	cp	r24, r1
    61b8:	92 41       	sbci	r25, 0x12	; 18
    61ba:	aa 47       	sbci	r26, 0x7A	; 122
    61bc:	b1 05       	cpc	r27, r1
    61be:	c1 f4       	brne	.+48     	; 0x61f0 <usart_set_baudrate_precalculated+0xc6>
		baudctrl = PROGMEM_READ_WORD(baudctrl_8mhz + baud_offset);
    61c0:	8b 81       	ldd	r24, Y+3	; 0x03
    61c2:	88 2f       	mov	r24, r24
    61c4:	90 e0       	ldi	r25, 0x00	; 0
    61c6:	88 0f       	add	r24, r24
    61c8:	99 1f       	adc	r25, r25
    61ca:	8e 59       	subi	r24, 0x9E	; 158
    61cc:	9d 4f       	sbci	r25, 0xFD	; 253
    61ce:	99 87       	std	Y+9, r25	; 0x09
    61d0:	88 87       	std	Y+8, r24	; 0x08
    61d2:	88 85       	ldd	r24, Y+8	; 0x08
    61d4:	99 85       	ldd	r25, Y+9	; 0x09
    61d6:	fc 01       	movw	r30, r24
    61d8:	25 91       	lpm	r18, Z+
    61da:	34 91       	lpm	r19, Z
    61dc:	cf 01       	movw	r24, r30
    61de:	3b 87       	std	Y+11, r19	; 0x0b
    61e0:	2a 87       	std	Y+10, r18	; 0x0a
    61e2:	99 87       	std	Y+9, r25	; 0x09
    61e4:	88 87       	std	Y+8, r24	; 0x08
    61e6:	8a 85       	ldd	r24, Y+10	; 0x0a
    61e8:	9b 85       	ldd	r25, Y+11	; 0x0b
    61ea:	9a 83       	std	Y+2, r25	; 0x02
    61ec:	89 83       	std	Y+1, r24	; 0x01
    61ee:	20 c0       	rjmp	.+64     	; 0x6230 <usart_set_baudrate_precalculated+0x106>
	} else if (cpu_hz == 16000000UL) {
    61f0:	8e 89       	ldd	r24, Y+22	; 0x16
    61f2:	9f 89       	ldd	r25, Y+23	; 0x17
    61f4:	a8 8d       	ldd	r26, Y+24	; 0x18
    61f6:	b9 8d       	ldd	r27, Y+25	; 0x19
    61f8:	81 15       	cp	r24, r1
    61fa:	94 42       	sbci	r25, 0x24	; 36
    61fc:	a4 4f       	sbci	r26, 0xF4	; 244
    61fe:	b1 05       	cpc	r27, r1
    6200:	b9 f4       	brne	.+46     	; 0x6230 <usart_set_baudrate_precalculated+0x106>
		baudctrl = PROGMEM_READ_WORD(baudctrl_16mhz + baud_offset);
    6202:	8b 81       	ldd	r24, Y+3	; 0x03
    6204:	88 2f       	mov	r24, r24
    6206:	90 e0       	ldi	r25, 0x00	; 0
    6208:	88 0f       	add	r24, r24
    620a:	99 1f       	adc	r25, r25
    620c:	8e 58       	subi	r24, 0x8E	; 142
    620e:	9d 4f       	sbci	r25, 0xFD	; 253
    6210:	9d 87       	std	Y+13, r25	; 0x0d
    6212:	8c 87       	std	Y+12, r24	; 0x0c
    6214:	8c 85       	ldd	r24, Y+12	; 0x0c
    6216:	9d 85       	ldd	r25, Y+13	; 0x0d
    6218:	fc 01       	movw	r30, r24
    621a:	25 91       	lpm	r18, Z+
    621c:	34 91       	lpm	r19, Z
    621e:	cf 01       	movw	r24, r30
    6220:	3f 87       	std	Y+15, r19	; 0x0f
    6222:	2e 87       	std	Y+14, r18	; 0x0e
    6224:	9d 87       	std	Y+13, r25	; 0x0d
    6226:	8c 87       	std	Y+12, r24	; 0x0c
    6228:	8e 85       	ldd	r24, Y+14	; 0x0e
    622a:	9f 85       	ldd	r25, Y+15	; 0x0f
    622c:	9a 83       	std	Y+2, r25	; 0x02
    622e:	89 83       	std	Y+1, r24	; 0x01
		/* Error, system clock speed or USART baud rate is not supported
		 * by the look-up table */
		Assert(false);
	}

	if (baud_offset != USART_BAUD_UNDEFINED) {
    6230:	8b 81       	ldd	r24, Y+3	; 0x03
    6232:	8f 3f       	cpi	r24, 0xFF	; 255
    6234:	39 f0       	breq	.+14     	; 0x6244 <usart_set_baudrate_precalculated+0x11a>
		usart->UBRR = baudctrl;
    6236:	88 89       	ldd	r24, Y+16	; 0x10
    6238:	99 89       	ldd	r25, Y+17	; 0x11
    623a:	29 81       	ldd	r18, Y+1	; 0x01
    623c:	3a 81       	ldd	r19, Y+2	; 0x02
    623e:	fc 01       	movw	r30, r24
    6240:	35 83       	std	Z+5, r19	; 0x05
    6242:	24 83       	std	Z+4, r18	; 0x04
	}
}
    6244:	00 00       	nop
    6246:	69 96       	adiw	r28, 0x19	; 25
    6248:	0f b6       	in	r0, 0x3f	; 63
    624a:	f8 94       	cli
    624c:	de bf       	out	0x3e, r29	; 62
    624e:	0f be       	out	0x3f, r0	; 63
    6250:	cd bf       	out	0x3d, r28	; 61
    6252:	df 91       	pop	r29
    6254:	cf 91       	pop	r28
    6256:	1f 91       	pop	r17
    6258:	0f 91       	pop	r16
    625a:	08 95       	ret

0000625c <usart_set_baudrate>:
 * \retval true if the hardware supports the baud rate
 * \retval false if the hardware does not support the baud rate (i.e. it's
 *               either too high or too low.)
 */
bool usart_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
    625c:	0f 93       	push	r16
    625e:	1f 93       	push	r17
    6260:	cf 93       	push	r28
    6262:	df 93       	push	r29
    6264:	cd b7       	in	r28, 0x3d	; 61
    6266:	de b7       	in	r29, 0x3e	; 62
    6268:	66 97       	sbiw	r28, 0x16	; 22
    626a:	0f b6       	in	r0, 0x3f	; 63
    626c:	f8 94       	cli
    626e:	de bf       	out	0x3e, r29	; 62
    6270:	0f be       	out	0x3f, r0	; 63
    6272:	cd bf       	out	0x3d, r28	; 61
    6274:	9e 87       	std	Y+14, r25	; 0x0e
    6276:	8d 87       	std	Y+13, r24	; 0x0d
    6278:	4f 87       	std	Y+15, r20	; 0x0f
    627a:	58 8b       	std	Y+16, r21	; 0x10
    627c:	69 8b       	std	Y+17, r22	; 0x11
    627e:	7a 8b       	std	Y+18, r23	; 0x12
    6280:	0b 8b       	std	Y+19, r16	; 0x13
    6282:	1c 8b       	std	Y+20, r17	; 0x14
    6284:	2d 8b       	std	Y+21, r18	; 0x15
    6286:	3e 8b       	std	Y+22, r19	; 0x16

	/*
	 * Check if the hardware supports the given baud rate
	 */
	/* 8 =  8 * (0 + 1) = (UBRRn_min + 1) */
	max_rate = cpu_hz / 8;
    6288:	8b 89       	ldd	r24, Y+19	; 0x13
    628a:	9c 89       	ldd	r25, Y+20	; 0x14
    628c:	ad 89       	ldd	r26, Y+21	; 0x15
    628e:	be 89       	ldd	r27, Y+22	; 0x16
    6290:	68 94       	set
    6292:	12 f8       	bld	r1, 2
    6294:	b6 95       	lsr	r27
    6296:	a7 95       	ror	r26
    6298:	97 95       	ror	r25
    629a:	87 95       	ror	r24
    629c:	16 94       	lsr	r1
    629e:	d1 f7       	brne	.-12     	; 0x6294 <usart_set_baudrate+0x38>
    62a0:	8d 83       	std	Y+5, r24	; 0x05
    62a2:	9e 83       	std	Y+6, r25	; 0x06
    62a4:	af 83       	std	Y+7, r26	; 0x07
    62a6:	b8 87       	std	Y+8, r27	; 0x08
	/* 524288 =  8 * (65535 + 1)  =  8 *(UBRRn_max+1) */
	min_rate = cpu_hz / 524288;
    62a8:	8b 89       	ldd	r24, Y+19	; 0x13
    62aa:	9c 89       	ldd	r25, Y+20	; 0x14
    62ac:	ad 89       	ldd	r26, Y+21	; 0x15
    62ae:	be 89       	ldd	r27, Y+22	; 0x16
    62b0:	07 2e       	mov	r0, r23
    62b2:	73 e1       	ldi	r23, 0x13	; 19
    62b4:	b6 95       	lsr	r27
    62b6:	a7 95       	ror	r26
    62b8:	97 95       	ror	r25
    62ba:	87 95       	ror	r24
    62bc:	7a 95       	dec	r23
    62be:	d1 f7       	brne	.-12     	; 0x62b4 <usart_set_baudrate+0x58>
    62c0:	70 2d       	mov	r23, r0
    62c2:	89 83       	std	Y+1, r24	; 0x01
    62c4:	9a 83       	std	Y+2, r25	; 0x02
    62c6:	ab 83       	std	Y+3, r26	; 0x03
    62c8:	bc 83       	std	Y+4, r27	; 0x04

	if (usart->UCSRnA & USART_U2X_bm) {
    62ca:	8d 85       	ldd	r24, Y+13	; 0x0d
    62cc:	9e 85       	ldd	r25, Y+14	; 0x0e
    62ce:	fc 01       	movw	r30, r24
    62d0:	80 81       	ld	r24, Z
    62d2:	88 2f       	mov	r24, r24
    62d4:	90 e0       	ldi	r25, 0x00	; 0
    62d6:	82 70       	andi	r24, 0x02	; 2
    62d8:	99 27       	eor	r25, r25
    62da:	89 2b       	or	r24, r25
    62dc:	c1 f0       	breq	.+48     	; 0x630e <usart_set_baudrate+0xb2>
		max_rate /= 2;
    62de:	8d 81       	ldd	r24, Y+5	; 0x05
    62e0:	9e 81       	ldd	r25, Y+6	; 0x06
    62e2:	af 81       	ldd	r26, Y+7	; 0x07
    62e4:	b8 85       	ldd	r27, Y+8	; 0x08
    62e6:	b6 95       	lsr	r27
    62e8:	a7 95       	ror	r26
    62ea:	97 95       	ror	r25
    62ec:	87 95       	ror	r24
    62ee:	8d 83       	std	Y+5, r24	; 0x05
    62f0:	9e 83       	std	Y+6, r25	; 0x06
    62f2:	af 83       	std	Y+7, r26	; 0x07
    62f4:	b8 87       	std	Y+8, r27	; 0x08
		min_rate /= 2;
    62f6:	89 81       	ldd	r24, Y+1	; 0x01
    62f8:	9a 81       	ldd	r25, Y+2	; 0x02
    62fa:	ab 81       	ldd	r26, Y+3	; 0x03
    62fc:	bc 81       	ldd	r27, Y+4	; 0x04
    62fe:	b6 95       	lsr	r27
    6300:	a7 95       	ror	r26
    6302:	97 95       	ror	r25
    6304:	87 95       	ror	r24
    6306:	89 83       	std	Y+1, r24	; 0x01
    6308:	9a 83       	std	Y+2, r25	; 0x02
    630a:	ab 83       	std	Y+3, r26	; 0x03
    630c:	bc 83       	std	Y+4, r27	; 0x04
	}

	if ((baud > max_rate) || (baud < min_rate)) {
    630e:	2f 85       	ldd	r18, Y+15	; 0x0f
    6310:	38 89       	ldd	r19, Y+16	; 0x10
    6312:	49 89       	ldd	r20, Y+17	; 0x11
    6314:	5a 89       	ldd	r21, Y+18	; 0x12
    6316:	8d 81       	ldd	r24, Y+5	; 0x05
    6318:	9e 81       	ldd	r25, Y+6	; 0x06
    631a:	af 81       	ldd	r26, Y+7	; 0x07
    631c:	b8 85       	ldd	r27, Y+8	; 0x08
    631e:	82 17       	cp	r24, r18
    6320:	93 07       	cpc	r25, r19
    6322:	a4 07       	cpc	r26, r20
    6324:	b5 07       	cpc	r27, r21
    6326:	68 f0       	brcs	.+26     	; 0x6342 <usart_set_baudrate+0xe6>
    6328:	2f 85       	ldd	r18, Y+15	; 0x0f
    632a:	38 89       	ldd	r19, Y+16	; 0x10
    632c:	49 89       	ldd	r20, Y+17	; 0x11
    632e:	5a 89       	ldd	r21, Y+18	; 0x12
    6330:	89 81       	ldd	r24, Y+1	; 0x01
    6332:	9a 81       	ldd	r25, Y+2	; 0x02
    6334:	ab 81       	ldd	r26, Y+3	; 0x03
    6336:	bc 81       	ldd	r27, Y+4	; 0x04
    6338:	28 17       	cp	r18, r24
    633a:	39 07       	cpc	r19, r25
    633c:	4a 07       	cpc	r20, r26
    633e:	5b 07       	cpc	r21, r27
    6340:	10 f4       	brcc	.+4      	; 0x6346 <usart_set_baudrate+0xea>
		return false;
    6342:	80 e0       	ldi	r24, 0x00	; 0
    6344:	59 c0       	rjmp	.+178    	; 0x63f8 <usart_set_baudrate+0x19c>
	}

	/* Check if double speed is enabled. */
	if (usart->UCSRnA & USART_U2X_bm) {
    6346:	8d 85       	ldd	r24, Y+13	; 0x0d
    6348:	9e 85       	ldd	r25, Y+14	; 0x0e
    634a:	fc 01       	movw	r30, r24
    634c:	80 81       	ld	r24, Z
    634e:	88 2f       	mov	r24, r24
    6350:	90 e0       	ldi	r25, 0x00	; 0
    6352:	82 70       	andi	r24, 0x02	; 2
    6354:	99 27       	eor	r25, r25
    6356:	89 2b       	or	r24, r25
    6358:	51 f1       	breq	.+84     	; 0x63ae <usart_set_baudrate+0x152>
		baud *= 2;
    635a:	8f 85       	ldd	r24, Y+15	; 0x0f
    635c:	98 89       	ldd	r25, Y+16	; 0x10
    635e:	a9 89       	ldd	r26, Y+17	; 0x11
    6360:	ba 89       	ldd	r27, Y+18	; 0x12
    6362:	88 0f       	add	r24, r24
    6364:	99 1f       	adc	r25, r25
    6366:	aa 1f       	adc	r26, r26
    6368:	bb 1f       	adc	r27, r27
    636a:	8f 87       	std	Y+15, r24	; 0x0f
    636c:	98 8b       	std	Y+16, r25	; 0x10
    636e:	a9 8b       	std	Y+17, r26	; 0x11
    6370:	ba 8b       	std	Y+18, r27	; 0x12
		ubrr = (uint32_t)(cpu_hz / 8 / baud) - 1;
    6372:	8b 89       	ldd	r24, Y+19	; 0x13
    6374:	9c 89       	ldd	r25, Y+20	; 0x14
    6376:	ad 89       	ldd	r26, Y+21	; 0x15
    6378:	be 89       	ldd	r27, Y+22	; 0x16
    637a:	68 94       	set
    637c:	12 f8       	bld	r1, 2
    637e:	b6 95       	lsr	r27
    6380:	a7 95       	ror	r26
    6382:	97 95       	ror	r25
    6384:	87 95       	ror	r24
    6386:	16 94       	lsr	r1
    6388:	d1 f7       	brne	.-12     	; 0x637e <usart_set_baudrate+0x122>
    638a:	2f 85       	ldd	r18, Y+15	; 0x0f
    638c:	38 89       	ldd	r19, Y+16	; 0x10
    638e:	49 89       	ldd	r20, Y+17	; 0x11
    6390:	5a 89       	ldd	r21, Y+18	; 0x12
    6392:	bc 01       	movw	r22, r24
    6394:	cd 01       	movw	r24, r26
    6396:	0e 94 12 44 	call	0x8824	; 0x8824 <__udivmodsi4>
    639a:	da 01       	movw	r26, r20
    639c:	c9 01       	movw	r24, r18
    639e:	01 97       	sbiw	r24, 0x01	; 1
    63a0:	a1 09       	sbc	r26, r1
    63a2:	b1 09       	sbc	r27, r1
    63a4:	89 87       	std	Y+9, r24	; 0x09
    63a6:	9a 87       	std	Y+10, r25	; 0x0a
    63a8:	ab 87       	std	Y+11, r26	; 0x0b
    63aa:	bc 87       	std	Y+12, r27	; 0x0c
    63ac:	1d c0       	rjmp	.+58     	; 0x63e8 <usart_set_baudrate+0x18c>
	} else {
		ubrr = (uint32_t)(cpu_hz / 16 / baud) - 1;
    63ae:	8b 89       	ldd	r24, Y+19	; 0x13
    63b0:	9c 89       	ldd	r25, Y+20	; 0x14
    63b2:	ad 89       	ldd	r26, Y+21	; 0x15
    63b4:	be 89       	ldd	r27, Y+22	; 0x16
    63b6:	68 94       	set
    63b8:	13 f8       	bld	r1, 3
    63ba:	b6 95       	lsr	r27
    63bc:	a7 95       	ror	r26
    63be:	97 95       	ror	r25
    63c0:	87 95       	ror	r24
    63c2:	16 94       	lsr	r1
    63c4:	d1 f7       	brne	.-12     	; 0x63ba <usart_set_baudrate+0x15e>
    63c6:	2f 85       	ldd	r18, Y+15	; 0x0f
    63c8:	38 89       	ldd	r19, Y+16	; 0x10
    63ca:	49 89       	ldd	r20, Y+17	; 0x11
    63cc:	5a 89       	ldd	r21, Y+18	; 0x12
    63ce:	bc 01       	movw	r22, r24
    63d0:	cd 01       	movw	r24, r26
    63d2:	0e 94 12 44 	call	0x8824	; 0x8824 <__udivmodsi4>
    63d6:	da 01       	movw	r26, r20
    63d8:	c9 01       	movw	r24, r18
    63da:	01 97       	sbiw	r24, 0x01	; 1
    63dc:	a1 09       	sbc	r26, r1
    63de:	b1 09       	sbc	r27, r1
    63e0:	89 87       	std	Y+9, r24	; 0x09
    63e2:	9a 87       	std	Y+10, r25	; 0x0a
    63e4:	ab 87       	std	Y+11, r26	; 0x0b
    63e6:	bc 87       	std	Y+12, r27	; 0x0c
	}

	usart->UBRR = ubrr;
    63e8:	29 85       	ldd	r18, Y+9	; 0x09
    63ea:	3a 85       	ldd	r19, Y+10	; 0x0a
    63ec:	8d 85       	ldd	r24, Y+13	; 0x0d
    63ee:	9e 85       	ldd	r25, Y+14	; 0x0e
    63f0:	fc 01       	movw	r30, r24
    63f2:	35 83       	std	Z+5, r19	; 0x05
    63f4:	24 83       	std	Z+4, r18	; 0x04
	return true;
    63f6:	81 e0       	ldi	r24, 0x01	; 1
}
    63f8:	66 96       	adiw	r28, 0x16	; 22
    63fa:	0f b6       	in	r0, 0x3f	; 63
    63fc:	f8 94       	cli
    63fe:	de bf       	out	0x3e, r29	; 62
    6400:	0f be       	out	0x3f, r0	; 63
    6402:	cd bf       	out	0x3d, r28	; 61
    6404:	df 91       	pop	r29
    6406:	cf 91       	pop	r28
    6408:	1f 91       	pop	r17
    640a:	0f 91       	pop	r16
    640c:	08 95       	ret

0000640e <usart_spi_set_baudrate>:
 * \param usart The USART(SPI) module.
 * \param baud The baudrate.
 * \param cpu_hz The CPU frequency.
 */
void usart_spi_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
    640e:	0f 93       	push	r16
    6410:	1f 93       	push	r17
    6412:	cf 93       	push	r28
    6414:	df 93       	push	r29
    6416:	cd b7       	in	r28, 0x3d	; 61
    6418:	de b7       	in	r29, 0x3e	; 62
    641a:	2e 97       	sbiw	r28, 0x0e	; 14
    641c:	0f b6       	in	r0, 0x3f	; 63
    641e:	f8 94       	cli
    6420:	de bf       	out	0x3e, r29	; 62
    6422:	0f be       	out	0x3f, r0	; 63
    6424:	cd bf       	out	0x3d, r28	; 61
    6426:	9e 83       	std	Y+6, r25	; 0x06
    6428:	8d 83       	std	Y+5, r24	; 0x05
    642a:	4f 83       	std	Y+7, r20	; 0x07
    642c:	58 87       	std	Y+8, r21	; 0x08
    642e:	69 87       	std	Y+9, r22	; 0x09
    6430:	7a 87       	std	Y+10, r23	; 0x0a
    6432:	0b 87       	std	Y+11, r16	; 0x0b
    6434:	1c 87       	std	Y+12, r17	; 0x0c
    6436:	2d 87       	std	Y+13, r18	; 0x0d
    6438:	3e 87       	std	Y+14, r19	; 0x0e
	uint32_t ubrr;

	/* Check if baudrate is less than the maximim limit specified in
	 * datasheet */
	if (baud < (cpu_hz / 2)) {
    643a:	8b 85       	ldd	r24, Y+11	; 0x0b
    643c:	9c 85       	ldd	r25, Y+12	; 0x0c
    643e:	ad 85       	ldd	r26, Y+13	; 0x0d
    6440:	be 85       	ldd	r27, Y+14	; 0x0e
    6442:	9c 01       	movw	r18, r24
    6444:	ad 01       	movw	r20, r26
    6446:	56 95       	lsr	r21
    6448:	47 95       	ror	r20
    644a:	37 95       	ror	r19
    644c:	27 95       	ror	r18
    644e:	8f 81       	ldd	r24, Y+7	; 0x07
    6450:	98 85       	ldd	r25, Y+8	; 0x08
    6452:	a9 85       	ldd	r26, Y+9	; 0x09
    6454:	ba 85       	ldd	r27, Y+10	; 0x0a
    6456:	82 17       	cp	r24, r18
    6458:	93 07       	cpc	r25, r19
    645a:	a4 07       	cpc	r26, r20
    645c:	b5 07       	cpc	r27, r21
    645e:	e0 f4       	brcc	.+56     	; 0x6498 <usart_spi_set_baudrate+0x8a>
		ubrr = (cpu_hz / (2 * baud) - 1);
    6460:	8f 81       	ldd	r24, Y+7	; 0x07
    6462:	98 85       	ldd	r25, Y+8	; 0x08
    6464:	a9 85       	ldd	r26, Y+9	; 0x09
    6466:	ba 85       	ldd	r27, Y+10	; 0x0a
    6468:	9c 01       	movw	r18, r24
    646a:	ad 01       	movw	r20, r26
    646c:	22 0f       	add	r18, r18
    646e:	33 1f       	adc	r19, r19
    6470:	44 1f       	adc	r20, r20
    6472:	55 1f       	adc	r21, r21
    6474:	8b 85       	ldd	r24, Y+11	; 0x0b
    6476:	9c 85       	ldd	r25, Y+12	; 0x0c
    6478:	ad 85       	ldd	r26, Y+13	; 0x0d
    647a:	be 85       	ldd	r27, Y+14	; 0x0e
    647c:	bc 01       	movw	r22, r24
    647e:	cd 01       	movw	r24, r26
    6480:	0e 94 12 44 	call	0x8824	; 0x8824 <__udivmodsi4>
    6484:	da 01       	movw	r26, r20
    6486:	c9 01       	movw	r24, r18
    6488:	01 97       	sbiw	r24, 0x01	; 1
    648a:	a1 09       	sbc	r26, r1
    648c:	b1 09       	sbc	r27, r1
    648e:	89 83       	std	Y+1, r24	; 0x01
    6490:	9a 83       	std	Y+2, r25	; 0x02
    6492:	ab 83       	std	Y+3, r26	; 0x03
    6494:	bc 83       	std	Y+4, r27	; 0x04
    6496:	04 c0       	rjmp	.+8      	; 0x64a0 <usart_spi_set_baudrate+0x92>
	} else {
		/* If baudrate is not within the specfication in datasheet,
		 * assign maximum baudrate possible for the current CPU frequency */
		ubrr = 0;
    6498:	19 82       	std	Y+1, r1	; 0x01
    649a:	1a 82       	std	Y+2, r1	; 0x02
    649c:	1b 82       	std	Y+3, r1	; 0x03
    649e:	1c 82       	std	Y+4, r1	; 0x04
	}
	
	usart->UBRR  = ubrr;
    64a0:	29 81       	ldd	r18, Y+1	; 0x01
    64a2:	3a 81       	ldd	r19, Y+2	; 0x02
    64a4:	8d 81       	ldd	r24, Y+5	; 0x05
    64a6:	9e 81       	ldd	r25, Y+6	; 0x06
    64a8:	fc 01       	movw	r30, r24
    64aa:	35 83       	std	Z+5, r19	; 0x05
    64ac:	24 83       	std	Z+4, r18	; 0x04
}
    64ae:	00 00       	nop
    64b0:	2e 96       	adiw	r28, 0x0e	; 14
    64b2:	0f b6       	in	r0, 0x3f	; 63
    64b4:	f8 94       	cli
    64b6:	de bf       	out	0x3e, r29	; 62
    64b8:	0f be       	out	0x3f, r0	; 63
    64ba:	cd bf       	out	0x3d, r28	; 61
    64bc:	df 91       	pop	r29
    64be:	cf 91       	pop	r28
    64c0:	1f 91       	pop	r17
    64c2:	0f 91       	pop	r16
    64c4:	08 95       	ret

000064c6 <cpu_irq_save>:
#endif

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
    64c6:	cf 93       	push	r28
    64c8:	df 93       	push	r29
    64ca:	1f 92       	push	r1
    64cc:	cd b7       	in	r28, 0x3d	; 61
    64ce:	de b7       	in	r29, 0x3e	; 62
	irqflags_t flags = SREG;
    64d0:	8f e5       	ldi	r24, 0x5F	; 95
    64d2:	90 e0       	ldi	r25, 0x00	; 0
    64d4:	fc 01       	movw	r30, r24
    64d6:	80 81       	ld	r24, Z
    64d8:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    64da:	f8 94       	cli
	return flags;
    64dc:	89 81       	ldd	r24, Y+1	; 0x01
}
    64de:	0f 90       	pop	r0
    64e0:	df 91       	pop	r29
    64e2:	cf 91       	pop	r28
    64e4:	08 95       	ret

000064e6 <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
    64e6:	cf 93       	push	r28
    64e8:	df 93       	push	r29
    64ea:	1f 92       	push	r1
    64ec:	cd b7       	in	r28, 0x3d	; 61
    64ee:	de b7       	in	r29, 0x3e	; 62
    64f0:	89 83       	std	Y+1, r24	; 0x01
	barrier();
	SREG = flags;
    64f2:	8f e5       	ldi	r24, 0x5F	; 95
    64f4:	90 e0       	ldi	r25, 0x00	; 0
    64f6:	29 81       	ldd	r18, Y+1	; 0x01
    64f8:	fc 01       	movw	r30, r24
    64fa:	20 83       	st	Z, r18
}
    64fc:	00 00       	nop
    64fe:	0f 90       	pop	r0
    6500:	df 91       	pop	r29
    6502:	cf 91       	pop	r28
    6504:	08 95       	ret

00006506 <wdt_reset_flag_clear>:
 *  This function clears the WDT flag.
 *
 ***\param  none
 */
static inline void wdt_reset_flag_clear(void)
{
    6506:	cf 93       	push	r28
    6508:	df 93       	push	r29
    650a:	cd b7       	in	r28, 0x3d	; 61
    650c:	de b7       	in	r29, 0x3e	; 62
	/* Clear WDRF flag in MCUSR */
	MCUSR &= ~WDRF_bm;
    650e:	84 e5       	ldi	r24, 0x54	; 84
    6510:	90 e0       	ldi	r25, 0x00	; 0
    6512:	24 e5       	ldi	r18, 0x54	; 84
    6514:	30 e0       	ldi	r19, 0x00	; 0
    6516:	f9 01       	movw	r30, r18
    6518:	20 81       	ld	r18, Z
    651a:	27 7f       	andi	r18, 0xF7	; 247
    651c:	fc 01       	movw	r30, r24
    651e:	20 83       	st	Z, r18
}
    6520:	00 00       	nop
    6522:	df 91       	pop	r29
    6524:	cf 91       	pop	r28
    6526:	08 95       	ret

00006528 <__vector_12>:
 * This function will handle interrupt on WDT Timer overflow and
 * call the callback function.
 */

ISR(WDT_vect)
{
    6528:	1f 92       	push	r1
    652a:	0f 92       	push	r0
    652c:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    6530:	0f 92       	push	r0
    6532:	11 24       	eor	r1, r1
    6534:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
    6538:	0f 92       	push	r0
    653a:	2f 93       	push	r18
    653c:	3f 93       	push	r19
    653e:	4f 93       	push	r20
    6540:	5f 93       	push	r21
    6542:	6f 93       	push	r22
    6544:	7f 93       	push	r23
    6546:	8f 93       	push	r24
    6548:	9f 93       	push	r25
    654a:	af 93       	push	r26
    654c:	bf 93       	push	r27
    654e:	ef 93       	push	r30
    6550:	ff 93       	push	r31
    6552:	cf 93       	push	r28
    6554:	df 93       	push	r29
    6556:	cd b7       	in	r28, 0x3d	; 61
    6558:	de b7       	in	r29, 0x3e	; 62
	if (wdt_timer_callback) {
    655a:	80 91 e9 0f 	lds	r24, 0x0FE9	; 0x800fe9 <wdt_timer_callback>
    655e:	90 91 ea 0f 	lds	r25, 0x0FEA	; 0x800fea <wdt_timer_callback+0x1>
    6562:	89 2b       	or	r24, r25
    6564:	31 f0       	breq	.+12     	; 0x6572 <__vector_12+0x4a>
		wdt_timer_callback();
    6566:	80 91 e9 0f 	lds	r24, 0x0FE9	; 0x800fe9 <wdt_timer_callback>
    656a:	90 91 ea 0f 	lds	r25, 0x0FEA	; 0x800fea <wdt_timer_callback+0x1>
    656e:	fc 01       	movw	r30, r24
    6570:	09 95       	icall
	}
}
    6572:	00 00       	nop
    6574:	df 91       	pop	r29
    6576:	cf 91       	pop	r28
    6578:	ff 91       	pop	r31
    657a:	ef 91       	pop	r30
    657c:	bf 91       	pop	r27
    657e:	af 91       	pop	r26
    6580:	9f 91       	pop	r25
    6582:	8f 91       	pop	r24
    6584:	7f 91       	pop	r23
    6586:	6f 91       	pop	r22
    6588:	5f 91       	pop	r21
    658a:	4f 91       	pop	r20
    658c:	3f 91       	pop	r19
    658e:	2f 91       	pop	r18
    6590:	0f 90       	pop	r0
    6592:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
    6596:	0f 90       	pop	r0
    6598:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    659c:	0f 90       	pop	r0
    659e:	1f 90       	pop	r1
    65a0:	18 95       	reti

000065a2 <wdt_disable>:
 *
 *  This function disables the WDT without changing period settings.
 *  This function is written in asm where ever the time is critical
 */
void wdt_disable(void)
{
    65a2:	cf 93       	push	r28
    65a4:	df 93       	push	r29
    65a6:	1f 92       	push	r1
    65a8:	cd b7       	in	r28, 0x3d	; 61
    65aa:	de b7       	in	r29, 0x3e	; 62
	/* Disable Global interrupt */
	uint8_t sreg = cpu_irq_save();
    65ac:	0e 94 63 32 	call	0x64c6	; 0x64c6 <cpu_irq_save>
    65b0:	89 83       	std	Y+1, r24	; 0x01

	/* Reset Watchdog timer */
	wdt_reset();
    65b2:	a8 95       	wdr

	/* Clear WDRF flag in MCUSR */
	wdt_reset_flag_clear();
    65b4:	0e 94 83 32 	call	0x6506	; 0x6506 <wdt_reset_flag_clear>

	/* Write logical one to WDCE and WDE to keep old prescale setting */
	asm ("LDS R17,0x60");   /* WDTCSR Address = 0x60 */
    65b8:	10 91 60 00 	lds	r17, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
	asm ("ORI R17,0x18");
    65bc:	18 61       	ori	r17, 0x18	; 24
	asm ("LDI R18,0x00");
    65be:	20 e0       	ldi	r18, 0x00	; 0
	asm ("STS 0x60,R17");   /* WDTCSR Address = 0x60 */
    65c0:	10 93 60 00 	sts	0x0060, r17	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
	/* Disable WDT */
	asm ("STS 0x60,R18");   /* WDTCSR Address = 0x60 */
    65c4:	20 93 60 00 	sts	0x0060, r18	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>

	/* Restore Global interrupt */
	cpu_irq_restore(sreg);
    65c8:	89 81       	ldd	r24, Y+1	; 0x01
    65ca:	0e 94 73 32 	call	0x64e6	; 0x64e6 <cpu_irq_restore>
}
    65ce:	00 00       	nop
    65d0:	0f 90       	pop	r0
    65d2:	df 91       	pop	r29
    65d4:	cf 91       	pop	r28
    65d6:	08 95       	ret

000065d8 <wdt_set_timeout_period>:
 *  This function is written in asm where ever the time is critical
 *
 *  \param  to_period  WDT timeout period
 */
void wdt_set_timeout_period(enum wdt_timeout_period to_period)
{
    65d8:	cf 93       	push	r28
    65da:	df 93       	push	r29
    65dc:	00 d0       	rcall	.+0      	; 0x65de <wdt_set_timeout_period+0x6>
    65de:	cd b7       	in	r28, 0x3d	; 61
    65e0:	de b7       	in	r29, 0x3e	; 62
    65e2:	8a 83       	std	Y+2, r24	; 0x02
	/* Store the prescale value to temp register */
#if defined (__GNUC__)
	asm ("MOV R19,R24");
    65e4:	38 2f       	mov	r19, r24
#else
#error Unsupported compiler.
#endif

	/* Mask for WDP3 */
	if (to_period & MASK_PRESCALE_WPD3) {
    65e6:	8a 81       	ldd	r24, Y+2	; 0x02
    65e8:	88 2f       	mov	r24, r24
    65ea:	90 e0       	ldi	r25, 0x00	; 0
    65ec:	88 70       	andi	r24, 0x08	; 8
    65ee:	99 27       	eor	r25, r25
    65f0:	89 2b       	or	r24, r25
    65f2:	11 f0       	breq	.+4      	; 0x65f8 <wdt_set_timeout_period+0x20>
		asm ("LDI R21,0x20");
    65f4:	50 e2       	ldi	r21, 0x20	; 32
    65f6:	01 c0       	rjmp	.+2      	; 0x65fa <wdt_set_timeout_period+0x22>
	} else {
		asm ("LDI R21,0x00");
    65f8:	50 e0       	ldi	r21, 0x00	; 0
	}

	/* Disable Global interrupt */
	uint8_t sreg = cpu_irq_save();
    65fa:	0e 94 63 32 	call	0x64c6	; 0x64c6 <cpu_irq_save>
    65fe:	89 83       	std	Y+1, r24	; 0x01

	/* Reset Watchdog timer */
	wdt_reset();
    6600:	a8 95       	wdr

	asm ("LDI R17,0xD8");
    6602:	18 ed       	ldi	r17, 0xD8	; 216
	asm ("LDS R18,0x60");   /* WDTCSR Address = 0x60 */
    6604:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
	asm ("AND R17,R18");
    6608:	12 23       	and	r17, r18
	asm ("STS 0x60,R17");   /* WDTCSR Address = 0x60 */
    660a:	10 93 60 00 	sts	0x0060, r17	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
	/* Load the new prescale value */
	asm ("LDI R20,0x18");
    660e:	48 e1       	ldi	r20, 0x18	; 24
	asm ("LDI R18,0x07");
    6610:	27 e0       	ldi	r18, 0x07	; 7
	asm ("AND R19,R18");
    6612:	32 23       	and	r19, r18
	asm ("OR R19,R21");
    6614:	35 2b       	or	r19, r21
	asm ("OR R19,R17");
    6616:	31 2b       	or	r19, r17
	/* Write logical one to WDCE and WDE */
	asm ("STS 0x60,R20");   /* WDTCSR Address = 0x60 */
    6618:	40 93 60 00 	sts	0x0060, r20	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
	/* Write new prescale setting */
	asm ("STS 0x60,R19");   /* WDTCSR Address = 0x60 */
    661c:	30 93 60 00 	sts	0x0060, r19	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>

	/* Restore Global interrupt */
	cpu_irq_restore(sreg);
    6620:	89 81       	ldd	r24, Y+1	; 0x01
    6622:	0e 94 73 32 	call	0x64e6	; 0x64e6 <cpu_irq_restore>
}
    6626:	00 00       	nop
    6628:	0f 90       	pop	r0
    662a:	0f 90       	pop	r0
    662c:	df 91       	pop	r29
    662e:	cf 91       	pop	r28
    6630:	08 95       	ret

00006632 <wdt_enable>:
 * This function is written in asm where ever the time is critical
 *
 * \param mode WDT timer mode selection
 */
void wdt_enable(enum wdt_mode_select mode)
{
    6632:	cf 93       	push	r28
    6634:	df 93       	push	r29
    6636:	00 d0       	rcall	.+0      	; 0x6638 <wdt_enable+0x6>
    6638:	cd b7       	in	r28, 0x3d	; 61
    663a:	de b7       	in	r29, 0x3e	; 62
    663c:	8a 83       	std	Y+2, r24	; 0x02
	/* Disable Global interrupt */
	uint8_t sreg = cpu_irq_save();
    663e:	0e 94 63 32 	call	0x64c6	; 0x64c6 <cpu_irq_save>
    6642:	89 83       	std	Y+1, r24	; 0x01

	/* Reset Watchdog timer */
	wdt_reset();
    6644:	a8 95       	wdr

	/* Clear WDRF flag in MCUSR */
	wdt_reset_flag_clear();
    6646:	0e 94 83 32 	call	0x6506	; 0x6506 <wdt_reset_flag_clear>

	/*System reset mode */
	if (mode == SYSTEM_RESET_MODE) {
    664a:	8a 81       	ldd	r24, Y+2	; 0x02
    664c:	81 30       	cpi	r24, 0x01	; 1
    664e:	59 f4       	brne	.+22     	; 0x6666 <wdt_enable+0x34>
		/* Write logical zero to WDIE */
		asm ("LDI R17,0xBF");
    6650:	1f eb       	ldi	r17, 0xBF	; 191
		asm ("LDS R18,0x60"); /* WDTCSR Address = 0x60 */
    6652:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
		asm ("AND R17,R18");
    6656:	12 23       	and	r17, r18
		asm ("STS 0x60,R17"); /* WDTCSR Address = 0x60 */
    6658:	10 93 60 00 	sts	0x0060, r17	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
		/* Write WDIF,WDE and WDCE to logical one */
		asm ("LDI R18,0x98");
    665c:	28 e9       	ldi	r18, 0x98	; 152
		asm ("OR R18,R17");
    665e:	21 2b       	or	r18, r17
		asm ("STS 0x60,R18"); /* WDTCSR Address = 0x60 */
    6660:	20 93 60 00 	sts	0x0060, r18	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    6664:	1e c0       	rjmp	.+60     	; 0x66a2 <wdt_enable+0x70>
	}
	/* Interrupt mode */
	else if (mode == INTERRUPT_MODE) {
    6666:	8a 81       	ldd	r24, Y+2	; 0x02
    6668:	88 23       	and	r24, r24
    666a:	71 f4       	brne	.+28     	; 0x6688 <wdt_enable+0x56>
		/* Write logical zero to WDE */
		asm ("LDI R17,0xF7");
    666c:	17 ef       	ldi	r17, 0xF7	; 247
		asm ("LDS R18,0x60"); /* WDTCSR Address = 0x60 */
    666e:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
		asm ("AND R17,R18");
    6672:	12 23       	and	r17, r18
		asm ("STS 0x60,R17"); /* WDTCSR Address = 0x60 */
    6674:	10 93 60 00 	sts	0x0060, r17	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
		asm ("LDI R20,0x18");
    6678:	48 e1       	ldi	r20, 0x18	; 24
		asm ("LDI R19,0xD0");
    667a:	30 ed       	ldi	r19, 0xD0	; 208
		asm ("OR R19,R17");
    667c:	31 2b       	or	r19, r17
		/* Write logical one to WDCE and WDE */
		asm ("STS 0x60,R20"); /* WDTCSR Address = 0x60 */
    667e:	40 93 60 00 	sts	0x0060, r20	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
		/* Write WDIF,WDIE and WDCE to logical one */
		asm ("STS 0x60,R19"); /* WDTCSR Address = 0x60 */
    6682:	30 93 60 00 	sts	0x0060, r19	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    6686:	0d c0       	rjmp	.+26     	; 0x66a2 <wdt_enable+0x70>
	}
	/* Interrupt and System reset mode */
	else if (mode == INTERRUPT_SYSTEM_RESET_MODE) {
    6688:	8a 81       	ldd	r24, Y+2	; 0x02
    668a:	82 30       	cpi	r24, 0x02	; 2
    668c:	51 f4       	brne	.+20     	; 0x66a2 <wdt_enable+0x70>
		/* Write logical zero to WDE */
		asm ("LDI R17,0xF7");
    668e:	17 ef       	ldi	r17, 0xF7	; 247
		asm ("LDS R18,0x60"); /* WDTCSR Address = 0x60 */
    6690:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
		asm ("AND R17,R18");
    6694:	12 23       	and	r17, r18
		asm ("STS 0x60,R17"); /* WDTCSR Address = 0x60 */
    6696:	10 93 60 00 	sts	0x0060, r17	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
		/* Write logical one to WDCE, WDIE,WDIF and WDE */
		asm ("LDI R18,0xD8");
    669a:	28 ed       	ldi	r18, 0xD8	; 216
		asm ("OR R18,R17");
    669c:	21 2b       	or	r18, r17
		asm ("STS 0x60,R18"); /* WDTCSR Address = 0x60 */
    669e:	20 93 60 00 	sts	0x0060, r18	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
	}

	/* Restore Global interrupt */
	cpu_irq_restore(sreg);
    66a2:	89 81       	ldd	r24, Y+1	; 0x01
    66a4:	0e 94 73 32 	call	0x64e6	; 0x64e6 <cpu_irq_restore>
}
    66a8:	00 00       	nop
    66aa:	0f 90       	pop	r0
    66ac:	0f 90       	pop	r0
    66ae:	df 91       	pop	r29
    66b0:	cf 91       	pop	r28
    66b2:	08 95       	ret

000066b4 <wdt_set_interrupt_callback>:
 * driver will only clear the interrupt flags.
 *
 * \param callback Reference to a callback function
 */
void wdt_set_interrupt_callback(wdt_callback_t callback)
{
    66b4:	cf 93       	push	r28
    66b6:	df 93       	push	r29
    66b8:	00 d0       	rcall	.+0      	; 0x66ba <wdt_set_interrupt_callback+0x6>
    66ba:	cd b7       	in	r28, 0x3d	; 61
    66bc:	de b7       	in	r29, 0x3e	; 62
    66be:	9a 83       	std	Y+2, r25	; 0x02
    66c0:	89 83       	std	Y+1, r24	; 0x01
	wdt_timer_callback = callback;
    66c2:	89 81       	ldd	r24, Y+1	; 0x01
    66c4:	9a 81       	ldd	r25, Y+2	; 0x02
    66c6:	90 93 ea 0f 	sts	0x0FEA, r25	; 0x800fea <wdt_timer_callback+0x1>
    66ca:	80 93 e9 0f 	sts	0x0FE9, r24	; 0x800fe9 <wdt_timer_callback>
}
    66ce:	00 00       	nop
    66d0:	0f 90       	pop	r0
    66d2:	0f 90       	pop	r0
    66d4:	df 91       	pop	r29
    66d6:	cf 91       	pop	r28
    66d8:	08 95       	ret

000066da <wdt_reset_mcu>:
 *  This function generates an hardware microcontroller reset using the WDT.
 *
 *  The function loads enables the WDT in system reset mode.
 */
void wdt_reset_mcu(void)
{
    66da:	cf 93       	push	r28
    66dc:	df 93       	push	r29
    66de:	cd b7       	in	r28, 0x3d	; 61
    66e0:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Set minimum timeout period
	 */
	wdt_set_timeout_period(WDT_TIMEOUT_PERIOD_2KCLK);
    66e2:	80 e0       	ldi	r24, 0x00	; 0
    66e4:	0e 94 ec 32 	call	0x65d8	; 0x65d8 <wdt_set_timeout_period>

	/*
	 * WDT enabled
	 */
	wdt_enable(SYSTEM_RESET_MODE);
    66e8:	81 e0       	ldi	r24, 0x01	; 1
    66ea:	0e 94 19 33 	call	0x6632	; 0x6632 <wdt_enable>

	/*
	 * WDT Reset
	 */
	wdt_reset();
    66ee:	a8 95       	wdr
	/*
	 * No exit to prevent the execution of the following instructions.
	 */
	while (true) {
		/* Wait for Watchdog reset. */
	}
    66f0:	ff cf       	rjmp	.-2      	; 0x66f0 <wdt_reset_mcu+0x16>

000066f2 <cpu_irq_save>:
#endif

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
    66f2:	cf 93       	push	r28
    66f4:	df 93       	push	r29
    66f6:	1f 92       	push	r1
    66f8:	cd b7       	in	r28, 0x3d	; 61
    66fa:	de b7       	in	r29, 0x3e	; 62
	irqflags_t flags = SREG;
    66fc:	8f e5       	ldi	r24, 0x5F	; 95
    66fe:	90 e0       	ldi	r25, 0x00	; 0
    6700:	fc 01       	movw	r30, r24
    6702:	80 81       	ld	r24, Z
    6704:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    6706:	f8 94       	cli
	return flags;
    6708:	89 81       	ldd	r24, Y+1	; 0x01
}
    670a:	0f 90       	pop	r0
    670c:	df 91       	pop	r29
    670e:	cf 91       	pop	r28
    6710:	08 95       	ret

00006712 <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
    6712:	cf 93       	push	r28
    6714:	df 93       	push	r29
    6716:	1f 92       	push	r1
    6718:	cd b7       	in	r28, 0x3d	; 61
    671a:	de b7       	in	r29, 0x3e	; 62
    671c:	89 83       	std	Y+1, r24	; 0x01
	barrier();
	SREG = flags;
    671e:	8f e5       	ldi	r24, 0x5F	; 95
    6720:	90 e0       	ldi	r25, 0x00	; 0
    6722:	29 81       	ldd	r18, Y+1	; 0x01
    6724:	fc 01       	movw	r30, r24
    6726:	20 83       	st	Z, r18
}
    6728:	00 00       	nop
    672a:	0f 90       	pop	r0
    672c:	df 91       	pop	r29
    672e:	cf 91       	pop	r28
    6730:	08 95       	ret

00006732 <sysclk_set_prescalers>:
 * Note: Prescaler setting is not working with the brain dead un optimised code
 * e.g. avr-gcc -00
 */

static inline void sysclk_set_prescalers(uint8_t psdiv)
{
    6732:	cf 93       	push	r28
    6734:	df 93       	push	r29
    6736:	00 d0       	rcall	.+0      	; 0x6738 <sysclk_set_prescalers+0x6>
    6738:	cd b7       	in	r28, 0x3d	; 61
    673a:	de b7       	in	r29, 0x3e	; 62
    673c:	8a 83       	std	Y+2, r24	; 0x02
	(void) psdiv;
#if !MEGA_UNSPECIFIED
	irqflags_t flags = cpu_irq_save();
    673e:	0e 94 79 33 	call	0x66f2	; 0x66f2 <cpu_irq_save>
    6742:	89 83       	std	Y+1, r24	; 0x01

	ASM(
    6744:	5f 93       	push	r21
    6746:	50 e8       	ldi	r21, 0x80	; 128
    6748:	50 93 61 00 	sts	0x0061, r21	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
    674c:	50 e0       	ldi	r21, 0x00	; 0
    674e:	50 93 61 00 	sts	0x0061, r21	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
    6752:	5f 91       	pop	r21
	                                                    *      */

			"pop r21                     \n\t"
			);

	cpu_irq_restore(flags);
    6754:	89 81       	ldd	r24, Y+1	; 0x01
    6756:	0e 94 89 33 	call	0x6712	; 0x6712 <cpu_irq_restore>
#endif
}
    675a:	00 00       	nop
    675c:	0f 90       	pop	r0
    675e:	0f 90       	pop	r0
    6760:	df 91       	pop	r29
    6762:	cf 91       	pop	r28
    6764:	08 95       	ret

00006766 <sysclk_init>:

/**
 *  Function to initialize the clock and disable clock for not required modules.
 */
void sysclk_init(void)
{
    6766:	cf 93       	push	r28
    6768:	df 93       	push	r29
    676a:	00 d0       	rcall	.+0      	; 0x676c <sysclk_init+0x6>
    676c:	1f 92       	push	r1
    676e:	cd b7       	in	r28, 0x3d	; 61
    6770:	de b7       	in	r29, 0x3e	; 62
#if !MEGA_XX_UN0 && !MEGA_XX_UN1
	uint8_t *reg = (uint8_t *)&(POWER_REG_ADD);
    6772:	84 e6       	ldi	r24, 0x64	; 100
    6774:	90 e0       	ldi	r25, 0x00	; 0
    6776:	9a 83       	std	Y+2, r25	; 0x02
    6778:	89 83       	std	Y+1, r24	; 0x01
	uint8_t i;
	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i < NUMBER_OF_POWER_REG; i++) {
    677a:	1b 82       	std	Y+3, r1	; 0x03
    677c:	0d c0       	rjmp	.+26     	; 0x6798 <sysclk_init+0x32>
		*(reg++) = 0xFF;
    677e:	89 81       	ldd	r24, Y+1	; 0x01
    6780:	9a 81       	ldd	r25, Y+2	; 0x02
    6782:	9c 01       	movw	r18, r24
    6784:	2f 5f       	subi	r18, 0xFF	; 255
    6786:	3f 4f       	sbci	r19, 0xFF	; 255
    6788:	3a 83       	std	Y+2, r19	; 0x02
    678a:	29 83       	std	Y+1, r18	; 0x01
    678c:	2f ef       	ldi	r18, 0xFF	; 255
    678e:	fc 01       	movw	r30, r24
    6790:	20 83       	st	Z, r18
{
#if !MEGA_XX_UN0 && !MEGA_XX_UN1
	uint8_t *reg = (uint8_t *)&(POWER_REG_ADD);
	uint8_t i;
	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i < NUMBER_OF_POWER_REG; i++) {
    6792:	8b 81       	ldd	r24, Y+3	; 0x03
    6794:	8f 5f       	subi	r24, 0xFF	; 255
    6796:	8b 83       	std	Y+3, r24	; 0x03
    6798:	8b 81       	ldd	r24, Y+3	; 0x03
    679a:	82 30       	cpi	r24, 0x02	; 2
    679c:	80 f3       	brcs	.-32     	; 0x677e <sysclk_init+0x18>
#endif
#if !MEGA_UNSPECIFIED && !MEGA_XX
	/* Set up system clock prescalers if different from defaults */
	if ((CONFIG_SYSCLK_PSDIV != SYSCLK_PSDIV_8) ||
			(SYSCLK_PSDIV_8 != CLKPR)) {
		sysclk_set_prescalers(CONFIG_SYSCLK_PSDIV);
    679e:	80 e0       	ldi	r24, 0x00	; 0
    67a0:	0e 94 99 33 	call	0x6732	; 0x6732 <sysclk_set_prescalers>
	}
#endif
}
    67a4:	00 00       	nop
    67a6:	0f 90       	pop	r0
    67a8:	0f 90       	pop	r0
    67aa:	0f 90       	pop	r0
    67ac:	df 91       	pop	r29
    67ae:	cf 91       	pop	r28
    67b0:	08 95       	ret

000067b2 <sysclk_enable_module>:
 * \param port ID of the port to which the module is connected (one of
 * the \c power_red_id *definitions).
 * \param id The ID (bitmask) of the peripheral module to be enabled.
 */
void sysclk_enable_module(enum power_red_id port, uint8_t id)
{
    67b2:	cf 93       	push	r28
    67b4:	df 93       	push	r29
    67b6:	00 d0       	rcall	.+0      	; 0x67b8 <sysclk_enable_module+0x6>
    67b8:	00 d0       	rcall	.+0      	; 0x67ba <sysclk_enable_module+0x8>
    67ba:	1f 92       	push	r1
    67bc:	cd b7       	in	r28, 0x3d	; 61
    67be:	de b7       	in	r29, 0x3e	; 62
    67c0:	8c 83       	std	Y+4, r24	; 0x04
    67c2:	6d 83       	std	Y+5, r22	; 0x05
#if !MEGA_UNSPECIFIED && !MEGA_XX
	uint8_t *reg = (uint8_t *)&(POWER_REG_ADD);
    67c4:	84 e6       	ldi	r24, 0x64	; 100
    67c6:	90 e0       	ldi	r25, 0x00	; 0
    67c8:	9a 83       	std	Y+2, r25	; 0x02
    67ca:	89 83       	std	Y+1, r24	; 0x01
	irqflags_t flags = cpu_irq_save();
    67cc:	0e 94 79 33 	call	0x66f2	; 0x66f2 <cpu_irq_save>
    67d0:	8b 83       	std	Y+3, r24	; 0x03

	if (port < NUMBER_OF_POWER_REG) {
    67d2:	8c 81       	ldd	r24, Y+4	; 0x04
    67d4:	82 30       	cpi	r24, 0x02	; 2
    67d6:	b0 f4       	brcc	.+44     	; 0x6804 <sysclk_enable_module+0x52>
		*(reg + port)  &= ~id;
    67d8:	8c 81       	ldd	r24, Y+4	; 0x04
    67da:	88 2f       	mov	r24, r24
    67dc:	90 e0       	ldi	r25, 0x00	; 0
    67de:	29 81       	ldd	r18, Y+1	; 0x01
    67e0:	3a 81       	ldd	r19, Y+2	; 0x02
    67e2:	82 0f       	add	r24, r18
    67e4:	93 1f       	adc	r25, r19
    67e6:	2c 81       	ldd	r18, Y+4	; 0x04
    67e8:	22 2f       	mov	r18, r18
    67ea:	30 e0       	ldi	r19, 0x00	; 0
    67ec:	49 81       	ldd	r20, Y+1	; 0x01
    67ee:	5a 81       	ldd	r21, Y+2	; 0x02
    67f0:	24 0f       	add	r18, r20
    67f2:	35 1f       	adc	r19, r21
    67f4:	f9 01       	movw	r30, r18
    67f6:	20 81       	ld	r18, Z
    67f8:	32 2f       	mov	r19, r18
    67fa:	2d 81       	ldd	r18, Y+5	; 0x05
    67fc:	20 95       	com	r18
    67fe:	23 23       	and	r18, r19
    6800:	fc 01       	movw	r30, r24
    6802:	20 83       	st	Z, r18
	}
	cpu_irq_restore(flags);
    6804:	8b 81       	ldd	r24, Y+3	; 0x03
    6806:	0e 94 89 33 	call	0x6712	; 0x6712 <cpu_irq_restore>
#endif
}
    680a:	00 00       	nop
    680c:	0f 90       	pop	r0
    680e:	0f 90       	pop	r0
    6810:	0f 90       	pop	r0
    6812:	0f 90       	pop	r0
    6814:	0f 90       	pop	r0
    6816:	df 91       	pop	r29
    6818:	cf 91       	pop	r28
    681a:	08 95       	ret

0000681c <sysclk_disable_module>:
 * \param port ID of the port to which the module is connected (one of
 * the \c power_red_id *definitions).
 * \param id The ID (bit mask) of the peripheral module to be disabled.
 */
void sysclk_disable_module( enum power_red_id port, uint8_t id)
{
    681c:	cf 93       	push	r28
    681e:	df 93       	push	r29
    6820:	00 d0       	rcall	.+0      	; 0x6822 <sysclk_disable_module+0x6>
    6822:	00 d0       	rcall	.+0      	; 0x6824 <sysclk_disable_module+0x8>
    6824:	1f 92       	push	r1
    6826:	cd b7       	in	r28, 0x3d	; 61
    6828:	de b7       	in	r29, 0x3e	; 62
    682a:	8c 83       	std	Y+4, r24	; 0x04
    682c:	6d 83       	std	Y+5, r22	; 0x05
#if !MEGA_UNSPECIFIED && !MEGA_XX
	uint8_t *reg = (uint8_t *)&(POWER_REG_ADD);
    682e:	84 e6       	ldi	r24, 0x64	; 100
    6830:	90 e0       	ldi	r25, 0x00	; 0
    6832:	9a 83       	std	Y+2, r25	; 0x02
    6834:	89 83       	std	Y+1, r24	; 0x01
	irqflags_t flags = cpu_irq_save();
    6836:	0e 94 79 33 	call	0x66f2	; 0x66f2 <cpu_irq_save>
    683a:	8b 83       	std	Y+3, r24	; 0x03
	if (port < NUMBER_OF_POWER_REG) {
    683c:	8c 81       	ldd	r24, Y+4	; 0x04
    683e:	82 30       	cpi	r24, 0x02	; 2
    6840:	a0 f4       	brcc	.+40     	; 0x686a <sysclk_disable_module+0x4e>
		*(reg + port) |= id;
    6842:	8c 81       	ldd	r24, Y+4	; 0x04
    6844:	88 2f       	mov	r24, r24
    6846:	90 e0       	ldi	r25, 0x00	; 0
    6848:	29 81       	ldd	r18, Y+1	; 0x01
    684a:	3a 81       	ldd	r19, Y+2	; 0x02
    684c:	82 0f       	add	r24, r18
    684e:	93 1f       	adc	r25, r19
    6850:	2c 81       	ldd	r18, Y+4	; 0x04
    6852:	22 2f       	mov	r18, r18
    6854:	30 e0       	ldi	r19, 0x00	; 0
    6856:	49 81       	ldd	r20, Y+1	; 0x01
    6858:	5a 81       	ldd	r21, Y+2	; 0x02
    685a:	24 0f       	add	r18, r20
    685c:	35 1f       	adc	r19, r21
    685e:	f9 01       	movw	r30, r18
    6860:	30 81       	ld	r19, Z
    6862:	2d 81       	ldd	r18, Y+5	; 0x05
    6864:	23 2b       	or	r18, r19
    6866:	fc 01       	movw	r30, r24
    6868:	20 83       	st	Z, r18
	}
	cpu_irq_restore(flags);
    686a:	8b 81       	ldd	r24, Y+3	; 0x03
    686c:	0e 94 89 33 	call	0x6712	; 0x6712 <cpu_irq_restore>
#endif
}
    6870:	00 00       	nop
    6872:	0f 90       	pop	r0
    6874:	0f 90       	pop	r0
    6876:	0f 90       	pop	r0
    6878:	0f 90       	pop	r0
    687a:	0f 90       	pop	r0
    687c:	df 91       	pop	r29
    687e:	cf 91       	pop	r28
    6880:	08 95       	ret

00006882 <usart_serial_putchar>:
 * \param c       Character to write.
 *
 * \return Status code
 */
static inline status_code_t usart_serial_putchar(usart_if usart, uint8_t c)
{
    6882:	cf 93       	push	r28
    6884:	df 93       	push	r29
    6886:	00 d0       	rcall	.+0      	; 0x6888 <usart_serial_putchar+0x6>
    6888:	1f 92       	push	r1
    688a:	cd b7       	in	r28, 0x3d	; 61
    688c:	de b7       	in	r29, 0x3e	; 62
    688e:	9a 83       	std	Y+2, r25	; 0x02
    6890:	89 83       	std	Y+1, r24	; 0x01
    6892:	6b 83       	std	Y+3, r22	; 0x03
	return usart_putchar(usart, c);
    6894:	89 81       	ldd	r24, Y+1	; 0x01
    6896:	9a 81       	ldd	r25, Y+2	; 0x02
    6898:	6b 81       	ldd	r22, Y+3	; 0x03
    689a:	0e 94 fa 2f 	call	0x5ff4	; 0x5ff4 <usart_putchar>
}
    689e:	0f 90       	pop	r0
    68a0:	0f 90       	pop	r0
    68a2:	0f 90       	pop	r0
    68a4:	df 91       	pop	r29
    68a6:	cf 91       	pop	r28
    68a8:	08 95       	ret

000068aa <usart_serial_getchar>:
 * \param usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if usart, uint8_t *data)
{
    68aa:	cf 93       	push	r28
    68ac:	df 93       	push	r29
    68ae:	00 d0       	rcall	.+0      	; 0x68b0 <usart_serial_getchar+0x6>
    68b0:	00 d0       	rcall	.+0      	; 0x68b2 <usart_serial_getchar+0x8>
    68b2:	cd b7       	in	r28, 0x3d	; 61
    68b4:	de b7       	in	r29, 0x3e	; 62
    68b6:	9a 83       	std	Y+2, r25	; 0x02
    68b8:	89 83       	std	Y+1, r24	; 0x01
    68ba:	7c 83       	std	Y+4, r23	; 0x04
    68bc:	6b 83       	std	Y+3, r22	; 0x03
	*data = usart_getchar(usart);
    68be:	89 81       	ldd	r24, Y+1	; 0x01
    68c0:	9a 81       	ldd	r25, Y+2	; 0x02
    68c2:	0e 94 19 30 	call	0x6032	; 0x6032 <usart_getchar>
    68c6:	28 2f       	mov	r18, r24
    68c8:	8b 81       	ldd	r24, Y+3	; 0x03
    68ca:	9c 81       	ldd	r25, Y+4	; 0x04
    68cc:	fc 01       	movw	r30, r24
    68ce:	20 83       	st	Z, r18
}
    68d0:	00 00       	nop
    68d2:	0f 90       	pop	r0
    68d4:	0f 90       	pop	r0
    68d6:	0f 90       	pop	r0
    68d8:	0f 90       	pop	r0
    68da:	df 91       	pop	r29
    68dc:	cf 91       	pop	r28
    68de:	08 95       	ret

000068e0 <usart_serial_write_packet>:
 * \param len    Length of data
 *
 */
status_code_t usart_serial_write_packet(usart_if usart, const uint8_t *data,
		size_t len)
{
    68e0:	cf 93       	push	r28
    68e2:	df 93       	push	r29
    68e4:	00 d0       	rcall	.+0      	; 0x68e6 <usart_serial_write_packet+0x6>
    68e6:	00 d0       	rcall	.+0      	; 0x68e8 <usart_serial_write_packet+0x8>
    68e8:	00 d0       	rcall	.+0      	; 0x68ea <usart_serial_write_packet+0xa>
    68ea:	cd b7       	in	r28, 0x3d	; 61
    68ec:	de b7       	in	r29, 0x3e	; 62
    68ee:	9a 83       	std	Y+2, r25	; 0x02
    68f0:	89 83       	std	Y+1, r24	; 0x01
    68f2:	7c 83       	std	Y+4, r23	; 0x04
    68f4:	6b 83       	std	Y+3, r22	; 0x03
    68f6:	5e 83       	std	Y+6, r21	; 0x06
    68f8:	4d 83       	std	Y+5, r20	; 0x05
	while (len) {
    68fa:	13 c0       	rjmp	.+38     	; 0x6922 <usart_serial_write_packet+0x42>
		usart_serial_putchar(usart, *data);
    68fc:	8b 81       	ldd	r24, Y+3	; 0x03
    68fe:	9c 81       	ldd	r25, Y+4	; 0x04
    6900:	fc 01       	movw	r30, r24
    6902:	20 81       	ld	r18, Z
    6904:	89 81       	ldd	r24, Y+1	; 0x01
    6906:	9a 81       	ldd	r25, Y+2	; 0x02
    6908:	62 2f       	mov	r22, r18
    690a:	0e 94 41 34 	call	0x6882	; 0x6882 <usart_serial_putchar>
		len--;
    690e:	8d 81       	ldd	r24, Y+5	; 0x05
    6910:	9e 81       	ldd	r25, Y+6	; 0x06
    6912:	01 97       	sbiw	r24, 0x01	; 1
    6914:	9e 83       	std	Y+6, r25	; 0x06
    6916:	8d 83       	std	Y+5, r24	; 0x05
		data++;
    6918:	8b 81       	ldd	r24, Y+3	; 0x03
    691a:	9c 81       	ldd	r25, Y+4	; 0x04
    691c:	01 96       	adiw	r24, 0x01	; 1
    691e:	9c 83       	std	Y+4, r25	; 0x04
    6920:	8b 83       	std	Y+3, r24	; 0x03
 *
 */
status_code_t usart_serial_write_packet(usart_if usart, const uint8_t *data,
		size_t len)
{
	while (len) {
    6922:	8d 81       	ldd	r24, Y+5	; 0x05
    6924:	9e 81       	ldd	r25, Y+6	; 0x06
    6926:	89 2b       	or	r24, r25
    6928:	49 f7       	brne	.-46     	; 0x68fc <usart_serial_write_packet+0x1c>
		usart_serial_putchar(usart, *data);
		len--;
		data++;
	}
	return STATUS_OK;
    692a:	80 e0       	ldi	r24, 0x00	; 0
}
    692c:	26 96       	adiw	r28, 0x06	; 6
    692e:	0f b6       	in	r0, 0x3f	; 63
    6930:	f8 94       	cli
    6932:	de bf       	out	0x3e, r29	; 62
    6934:	0f be       	out	0x3f, r0	; 63
    6936:	cd bf       	out	0x3d, r28	; 61
    6938:	df 91       	pop	r29
    693a:	cf 91       	pop	r28
    693c:	08 95       	ret

0000693e <usart_serial_read_packet>:
 * \param len    Length of data
 *
 */
status_code_t usart_serial_read_packet(usart_if usart, uint8_t *data,
		size_t len)
{
    693e:	cf 93       	push	r28
    6940:	df 93       	push	r29
    6942:	00 d0       	rcall	.+0      	; 0x6944 <usart_serial_read_packet+0x6>
    6944:	00 d0       	rcall	.+0      	; 0x6946 <usart_serial_read_packet+0x8>
    6946:	00 d0       	rcall	.+0      	; 0x6948 <usart_serial_read_packet+0xa>
    6948:	cd b7       	in	r28, 0x3d	; 61
    694a:	de b7       	in	r29, 0x3e	; 62
    694c:	9a 83       	std	Y+2, r25	; 0x02
    694e:	89 83       	std	Y+1, r24	; 0x01
    6950:	7c 83       	std	Y+4, r23	; 0x04
    6952:	6b 83       	std	Y+3, r22	; 0x03
    6954:	5e 83       	std	Y+6, r21	; 0x06
    6956:	4d 83       	std	Y+5, r20	; 0x05
	while (len) {
    6958:	11 c0       	rjmp	.+34     	; 0x697c <usart_serial_read_packet+0x3e>
		usart_serial_getchar(usart, data);
    695a:	2b 81       	ldd	r18, Y+3	; 0x03
    695c:	3c 81       	ldd	r19, Y+4	; 0x04
    695e:	89 81       	ldd	r24, Y+1	; 0x01
    6960:	9a 81       	ldd	r25, Y+2	; 0x02
    6962:	b9 01       	movw	r22, r18
    6964:	0e 94 55 34 	call	0x68aa	; 0x68aa <usart_serial_getchar>
		len--;
    6968:	8d 81       	ldd	r24, Y+5	; 0x05
    696a:	9e 81       	ldd	r25, Y+6	; 0x06
    696c:	01 97       	sbiw	r24, 0x01	; 1
    696e:	9e 83       	std	Y+6, r25	; 0x06
    6970:	8d 83       	std	Y+5, r24	; 0x05
		data++;
    6972:	8b 81       	ldd	r24, Y+3	; 0x03
    6974:	9c 81       	ldd	r25, Y+4	; 0x04
    6976:	01 96       	adiw	r24, 0x01	; 1
    6978:	9c 83       	std	Y+4, r25	; 0x04
    697a:	8b 83       	std	Y+3, r24	; 0x03
 *
 */
status_code_t usart_serial_read_packet(usart_if usart, uint8_t *data,
		size_t len)
{
	while (len) {
    697c:	8d 81       	ldd	r24, Y+5	; 0x05
    697e:	9e 81       	ldd	r25, Y+6	; 0x06
    6980:	89 2b       	or	r24, r25
    6982:	59 f7       	brne	.-42     	; 0x695a <usart_serial_read_packet+0x1c>
		usart_serial_getchar(usart, data);
		len--;
		data++;
	}
	return STATUS_OK;
    6984:	80 e0       	ldi	r24, 0x00	; 0
}
    6986:	26 96       	adiw	r28, 0x06	; 6
    6988:	0f b6       	in	r0, 0x3f	; 63
    698a:	f8 94       	cli
    698c:	de bf       	out	0x3e, r29	; 62
    698e:	0f be       	out	0x3f, r0	; 63
    6990:	cd bf       	out	0x3d, r28	; 61
    6992:	df 91       	pop	r29
    6994:	cf 91       	pop	r28
    6996:	08 95       	ret

00006998 <_read>:
#elif (defined(__GNUC__) && (XMEGA || MEGA) )

int _read (int *f); // Remove GCC compiler warning

int _read (int *f)
{
    6998:	cf 93       	push	r28
    699a:	df 93       	push	r29
    699c:	00 d0       	rcall	.+0      	; 0x699e <_read+0x6>
    699e:	1f 92       	push	r1
    69a0:	cd b7       	in	r28, 0x3d	; 61
    69a2:	de b7       	in	r29, 0x3e	; 62
    69a4:	9b 83       	std	Y+3, r25	; 0x03
    69a6:	8a 83       	std	Y+2, r24	; 0x02
	(void) f;
	char c;
	ptr_get(stdio_base,&c);
    69a8:	20 91 ba 10 	lds	r18, 0x10BA	; 0x8010ba <ptr_get>
    69ac:	30 91 bb 10 	lds	r19, 0x10BB	; 0x8010bb <ptr_get+0x1>
    69b0:	80 91 be 10 	lds	r24, 0x10BE	; 0x8010be <stdio_base>
    69b4:	90 91 bf 10 	lds	r25, 0x10BF	; 0x8010bf <stdio_base+0x1>
    69b8:	ae 01       	movw	r20, r28
    69ba:	4f 5f       	subi	r20, 0xFF	; 255
    69bc:	5f 4f       	sbci	r21, 0xFF	; 255
    69be:	ba 01       	movw	r22, r20
    69c0:	f9 01       	movw	r30, r18
    69c2:	09 95       	icall
	return c;
    69c4:	89 81       	ldd	r24, Y+1	; 0x01
    69c6:	88 2f       	mov	r24, r24
    69c8:	90 e0       	ldi	r25, 0x00	; 0
}
    69ca:	0f 90       	pop	r0
    69cc:	0f 90       	pop	r0
    69ce:	0f 90       	pop	r0
    69d0:	df 91       	pop	r29
    69d2:	cf 91       	pop	r28
    69d4:	08 95       	ret

000069d6 <_write>:
#elif (defined(__GNUC__) && (XMEGA || MEGA))

int _write (char c, int *f);

int _write (char c, int *f)
{
    69d6:	cf 93       	push	r28
    69d8:	df 93       	push	r29
    69da:	00 d0       	rcall	.+0      	; 0x69dc <_write+0x6>
    69dc:	1f 92       	push	r1
    69de:	cd b7       	in	r28, 0x3d	; 61
    69e0:	de b7       	in	r29, 0x3e	; 62
    69e2:	89 83       	std	Y+1, r24	; 0x01
    69e4:	7b 83       	std	Y+3, r23	; 0x03
    69e6:	6a 83       	std	Y+2, r22	; 0x02
	(void) f;

	if (ptr_put(stdio_base, c) < 0) {
    69e8:	20 91 bc 10 	lds	r18, 0x10BC	; 0x8010bc <ptr_put>
    69ec:	30 91 bd 10 	lds	r19, 0x10BD	; 0x8010bd <ptr_put+0x1>
    69f0:	80 91 be 10 	lds	r24, 0x10BE	; 0x8010be <stdio_base>
    69f4:	90 91 bf 10 	lds	r25, 0x10BF	; 0x8010bf <stdio_base+0x1>
    69f8:	69 81       	ldd	r22, Y+1	; 0x01
    69fa:	f9 01       	movw	r30, r18
    69fc:	09 95       	icall
    69fe:	99 23       	and	r25, r25
    6a00:	1c f4       	brge	.+6      	; 0x6a08 <_write+0x32>
		return -1;
    6a02:	8f ef       	ldi	r24, 0xFF	; 255
    6a04:	9f ef       	ldi	r25, 0xFF	; 255
    6a06:	02 c0       	rjmp	.+4      	; 0x6a0c <_write+0x36>
	}
	return 1;
    6a08:	81 e0       	ldi	r24, 0x01	; 1
    6a0a:	90 e0       	ldi	r25, 0x00	; 0
}
    6a0c:	0f 90       	pop	r0
    6a0e:	0f 90       	pop	r0
    6a10:	0f 90       	pop	r0
    6a12:	df 91       	pop	r29
    6a14:	cf 91       	pop	r28
    6a16:	08 95       	ret

00006a18 <usart_rx_complete_interrupt_enable>:
 * \brief Enable USART receive complete interrupt.
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_rx_complete_interrupt_enable(USART_t *usart)
{
    6a18:	cf 93       	push	r28
    6a1a:	df 93       	push	r29
    6a1c:	00 d0       	rcall	.+0      	; 0x6a1e <usart_rx_complete_interrupt_enable+0x6>
    6a1e:	cd b7       	in	r28, 0x3d	; 61
    6a20:	de b7       	in	r29, 0x3e	; 62
    6a22:	9a 83       	std	Y+2, r25	; 0x02
    6a24:	89 83       	std	Y+1, r24	; 0x01
	(usart)->UCSRnB |= USART_RXC_bm;
    6a26:	89 81       	ldd	r24, Y+1	; 0x01
    6a28:	9a 81       	ldd	r25, Y+2	; 0x02
    6a2a:	fc 01       	movw	r30, r24
    6a2c:	81 81       	ldd	r24, Z+1	; 0x01
    6a2e:	28 2f       	mov	r18, r24
    6a30:	20 68       	ori	r18, 0x80	; 128
    6a32:	89 81       	ldd	r24, Y+1	; 0x01
    6a34:	9a 81       	ldd	r25, Y+2	; 0x02
    6a36:	fc 01       	movw	r30, r24
    6a38:	21 83       	std	Z+1, r18	; 0x01
}
    6a3a:	00 00       	nop
    6a3c:	0f 90       	pop	r0
    6a3e:	0f 90       	pop	r0
    6a40:	df 91       	pop	r29
    6a42:	cf 91       	pop	r28
    6a44:	08 95       	ret

00006a46 <usart_serial_init>:
 * \retval true if the initialization was successful
 * \retval false if initialization failed (error in baud rate calculation)
 */
static inline bool usart_serial_init(usart_if usart, const
		usart_serial_options_t *options)
{
    6a46:	cf 93       	push	r28
    6a48:	df 93       	push	r29
    6a4a:	cd b7       	in	r28, 0x3d	; 61
    6a4c:	de b7       	in	r29, 0x3e	; 62
    6a4e:	2b 97       	sbiw	r28, 0x0b	; 11
    6a50:	0f b6       	in	r0, 0x3f	; 63
    6a52:	f8 94       	cli
    6a54:	de bf       	out	0x3e, r29	; 62
    6a56:	0f be       	out	0x3f, r0	; 63
    6a58:	cd bf       	out	0x3d, r28	; 61
    6a5a:	99 87       	std	Y+9, r25	; 0x09
    6a5c:	88 87       	std	Y+8, r24	; 0x08
    6a5e:	7b 87       	std	Y+11, r23	; 0x0b
    6a60:	6a 87       	std	Y+10, r22	; 0x0a
	/* USART options. */
	usart_rs232_options_t usart_rs232_options;
	usart_rs232_options.charlength   = options->charlength;
    6a62:	8a 85       	ldd	r24, Y+10	; 0x0a
    6a64:	9b 85       	ldd	r25, Y+11	; 0x0b
    6a66:	fc 01       	movw	r30, r24
    6a68:	84 81       	ldd	r24, Z+4	; 0x04
    6a6a:	8d 83       	std	Y+5, r24	; 0x05
	usart_rs232_options.paritytype   = options->paritytype;
    6a6c:	8a 85       	ldd	r24, Y+10	; 0x0a
    6a6e:	9b 85       	ldd	r25, Y+11	; 0x0b
    6a70:	fc 01       	movw	r30, r24
    6a72:	85 81       	ldd	r24, Z+5	; 0x05
    6a74:	8e 83       	std	Y+6, r24	; 0x06
	usart_rs232_options.stopbits     = options->stopbits;
    6a76:	8a 85       	ldd	r24, Y+10	; 0x0a
    6a78:	9b 85       	ldd	r25, Y+11	; 0x0b
    6a7a:	fc 01       	movw	r30, r24
    6a7c:	86 81       	ldd	r24, Z+6	; 0x06
    6a7e:	8f 83       	std	Y+7, r24	; 0x07
	usart_rs232_options.baudrate     = options->baudrate;
    6a80:	8a 85       	ldd	r24, Y+10	; 0x0a
    6a82:	9b 85       	ldd	r25, Y+11	; 0x0b
    6a84:	fc 01       	movw	r30, r24
    6a86:	80 81       	ld	r24, Z
    6a88:	91 81       	ldd	r25, Z+1	; 0x01
    6a8a:	a2 81       	ldd	r26, Z+2	; 0x02
    6a8c:	b3 81       	ldd	r27, Z+3	; 0x03
    6a8e:	89 83       	std	Y+1, r24	; 0x01
    6a90:	9a 83       	std	Y+2, r25	; 0x02
    6a92:	ab 83       	std	Y+3, r26	; 0x03
    6a94:	bc 83       	std	Y+4, r27	; 0x04

	if (usart_init_rs232(usart, &usart_rs232_options)) {
    6a96:	88 85       	ldd	r24, Y+8	; 0x08
    6a98:	99 85       	ldd	r25, Y+9	; 0x09
    6a9a:	9e 01       	movw	r18, r28
    6a9c:	2f 5f       	subi	r18, 0xFF	; 255
    6a9e:	3f 4f       	sbci	r19, 0xFF	; 255
    6aa0:	b9 01       	movw	r22, r18
    6aa2:	0e 94 ec 2d 	call	0x5bd8	; 0x5bd8 <usart_init_rs232>
    6aa6:	88 23       	and	r24, r24
    6aa8:	11 f0       	breq	.+4      	; 0x6aae <usart_serial_init+0x68>
		return true;
    6aaa:	81 e0       	ldi	r24, 0x01	; 1
    6aac:	01 c0       	rjmp	.+2      	; 0x6ab0 <usart_serial_init+0x6a>
	} else {
		return false;
    6aae:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    6ab0:	2b 96       	adiw	r28, 0x0b	; 11
    6ab2:	0f b6       	in	r0, 0x3f	; 63
    6ab4:	f8 94       	cli
    6ab6:	de bf       	out	0x3e, r29	; 62
    6ab8:	0f be       	out	0x3f, r0	; 63
    6aba:	cd bf       	out	0x3d, r28	; 61
    6abc:	df 91       	pop	r29
    6abe:	cf 91       	pop	r28
    6ac0:	08 95       	ret

00006ac2 <usart_serial_putchar>:
 * \param c       Character to write.
 *
 * \return Status code
 */
static inline status_code_t usart_serial_putchar(usart_if usart, uint8_t c)
{
    6ac2:	cf 93       	push	r28
    6ac4:	df 93       	push	r29
    6ac6:	00 d0       	rcall	.+0      	; 0x6ac8 <usart_serial_putchar+0x6>
    6ac8:	1f 92       	push	r1
    6aca:	cd b7       	in	r28, 0x3d	; 61
    6acc:	de b7       	in	r29, 0x3e	; 62
    6ace:	9a 83       	std	Y+2, r25	; 0x02
    6ad0:	89 83       	std	Y+1, r24	; 0x01
    6ad2:	6b 83       	std	Y+3, r22	; 0x03
	return usart_putchar(usart, c);
    6ad4:	89 81       	ldd	r24, Y+1	; 0x01
    6ad6:	9a 81       	ldd	r25, Y+2	; 0x02
    6ad8:	6b 81       	ldd	r22, Y+3	; 0x03
    6ada:	0e 94 fa 2f 	call	0x5ff4	; 0x5ff4 <usart_putchar>
}
    6ade:	0f 90       	pop	r0
    6ae0:	0f 90       	pop	r0
    6ae2:	0f 90       	pop	r0
    6ae4:	df 91       	pop	r29
    6ae6:	cf 91       	pop	r28
    6ae8:	08 95       	ret

00006aea <usart_serial_getchar>:
 * \param usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if usart, uint8_t *data)
{
    6aea:	cf 93       	push	r28
    6aec:	df 93       	push	r29
    6aee:	00 d0       	rcall	.+0      	; 0x6af0 <usart_serial_getchar+0x6>
    6af0:	00 d0       	rcall	.+0      	; 0x6af2 <usart_serial_getchar+0x8>
    6af2:	cd b7       	in	r28, 0x3d	; 61
    6af4:	de b7       	in	r29, 0x3e	; 62
    6af6:	9a 83       	std	Y+2, r25	; 0x02
    6af8:	89 83       	std	Y+1, r24	; 0x01
    6afa:	7c 83       	std	Y+4, r23	; 0x04
    6afc:	6b 83       	std	Y+3, r22	; 0x03
	*data = usart_getchar(usart);
    6afe:	89 81       	ldd	r24, Y+1	; 0x01
    6b00:	9a 81       	ldd	r25, Y+2	; 0x02
    6b02:	0e 94 19 30 	call	0x6032	; 0x6032 <usart_getchar>
    6b06:	28 2f       	mov	r18, r24
    6b08:	8b 81       	ldd	r24, Y+3	; 0x03
    6b0a:	9c 81       	ldd	r25, Y+4	; 0x04
    6b0c:	fc 01       	movw	r30, r24
    6b0e:	20 83       	st	Z, r18
}
    6b10:	00 00       	nop
    6b12:	0f 90       	pop	r0
    6b14:	0f 90       	pop	r0
    6b16:	0f 90       	pop	r0
    6b18:	0f 90       	pop	r0
    6b1a:	df 91       	pop	r29
    6b1c:	cf 91       	pop	r28
    6b1e:	08 95       	ret

00006b20 <stdio_serial_init>:
 * \param usart       Base address of the USART instance.
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
    6b20:	cf 93       	push	r28
    6b22:	df 93       	push	r29
    6b24:	00 d0       	rcall	.+0      	; 0x6b26 <stdio_serial_init+0x6>
    6b26:	00 d0       	rcall	.+0      	; 0x6b28 <stdio_serial_init+0x8>
    6b28:	cd b7       	in	r28, 0x3d	; 61
    6b2a:	de b7       	in	r29, 0x3e	; 62
    6b2c:	9a 83       	std	Y+2, r25	; 0x02
    6b2e:	89 83       	std	Y+1, r24	; 0x01
    6b30:	7c 83       	std	Y+4, r23	; 0x04
    6b32:	6b 83       	std	Y+3, r22	; 0x03
	stdio_base = (void *)usart;
    6b34:	89 81       	ldd	r24, Y+1	; 0x01
    6b36:	9a 81       	ldd	r25, Y+2	; 0x02
    6b38:	90 93 bf 10 	sts	0x10BF, r25	; 0x8010bf <stdio_base+0x1>
    6b3c:	80 93 be 10 	sts	0x10BE, r24	; 0x8010be <stdio_base>
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    6b40:	81 e6       	ldi	r24, 0x61	; 97
    6b42:	95 e3       	ldi	r25, 0x35	; 53
    6b44:	90 93 bd 10 	sts	0x10BD, r25	; 0x8010bd <ptr_put+0x1>
    6b48:	80 93 bc 10 	sts	0x10BC, r24	; 0x8010bc <ptr_put>
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    6b4c:	85 e7       	ldi	r24, 0x75	; 117
    6b4e:	95 e3       	ldi	r25, 0x35	; 53
    6b50:	90 93 bb 10 	sts	0x10BB, r25	; 0x8010bb <ptr_get+0x1>
    6b54:	80 93 ba 10 	sts	0x10BA, r24	; 0x8010ba <ptr_get>
# if (XMEGA || MEGA_RF)
	usart_serial_init((USART_t *)usart,opt);
    6b58:	2b 81       	ldd	r18, Y+3	; 0x03
    6b5a:	3c 81       	ldd	r19, Y+4	; 0x04
    6b5c:	89 81       	ldd	r24, Y+1	; 0x01
    6b5e:	9a 81       	ldd	r25, Y+2	; 0x02
    6b60:	b9 01       	movw	r22, r18
    6b62:	0e 94 23 35 	call	0x6a46	; 0x6a46 <usart_serial_init>
# endif

# if defined(__GNUC__)
#  if (XMEGA || MEGA_RF)
	// For AVR GCC libc print redirection uses fdevopen.
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
    6b66:	6c ec       	ldi	r22, 0xCC	; 204
    6b68:	74 e3       	ldi	r23, 0x34	; 52
    6b6a:	8b ee       	ldi	r24, 0xEB	; 235
    6b6c:	94 e3       	ldi	r25, 0x34	; 52
    6b6e:	0e 94 9b 45 	call	0x8b36	; 0x8b36 <fdevopen>
	// and AVR GCC library:
	// - printf() emits one character at a time.
	// - getchar() requests only 1 byte to exit.
#  endif
# endif
}
    6b72:	00 00       	nop
    6b74:	0f 90       	pop	r0
    6b76:	0f 90       	pop	r0
    6b78:	0f 90       	pop	r0
    6b7a:	0f 90       	pop	r0
    6b7c:	df 91       	pop	r29
    6b7e:	cf 91       	pop	r28
    6b80:	08 95       	ret

00006b82 <sio2host_init>:
static uint8_t serial_rx_count;

/* === IMPLEMENTATION ====================================================== */

void sio2host_init(void)
{
    6b82:	cf 93       	push	r28
    6b84:	df 93       	push	r29
    6b86:	cd b7       	in	r28, 0x3d	; 61
    6b88:	de b7       	in	r29, 0x3e	; 62
	usart_enable(&cdc_uart_module);
	/* Enable transceivers */
	usart_enable_transceiver(&cdc_uart_module, USART_TRANSCEIVER_TX);
	usart_enable_transceiver(&cdc_uart_module, USART_TRANSCEIVER_RX);
#else
	stdio_serial_init(USART_HOST, &usart_serial_options);
    6b8a:	62 e1       	ldi	r22, 0x12	; 18
    6b8c:	72 e0       	ldi	r23, 0x02	; 2
    6b8e:	80 ec       	ldi	r24, 0xC0	; 192
    6b90:	90 e0       	ldi	r25, 0x00	; 0
    6b92:	0e 94 90 35 	call	0x6b20	; 0x6b20 <stdio_serial_init>
#endif
	USART_HOST_RX_ISR_ENABLE();
    6b96:	80 ec       	ldi	r24, 0xC0	; 192
    6b98:	90 e0       	ldi	r25, 0x00	; 0
    6b9a:	0e 94 0c 35 	call	0x6a18	; 0x6a18 <usart_rx_complete_interrupt_enable>
}
    6b9e:	00 00       	nop
    6ba0:	df 91       	pop	r29
    6ba2:	cf 91       	pop	r28
    6ba4:	08 95       	ret

00006ba6 <sio2host_tx>:

uint8_t sio2host_tx(uint8_t *data, uint8_t length)
{
    6ba6:	cf 93       	push	r28
    6ba8:	df 93       	push	r29
    6baa:	00 d0       	rcall	.+0      	; 0x6bac <sio2host_tx+0x6>
    6bac:	00 d0       	rcall	.+0      	; 0x6bae <sio2host_tx+0x8>
    6bae:	cd b7       	in	r28, 0x3d	; 61
    6bb0:	de b7       	in	r29, 0x3e	; 62
    6bb2:	9b 83       	std	Y+3, r25	; 0x03
    6bb4:	8a 83       	std	Y+2, r24	; 0x02
    6bb6:	6c 83       	std	Y+4, r22	; 0x04
#if SAMD || SAMR21
		status
			= usart_serial_write_packet(&cdc_uart_module,
				(const uint8_t *)data, length);
#else
		status = usart_serial_write_packet(USART_HOST,
    6bb8:	8c 81       	ldd	r24, Y+4	; 0x04
    6bba:	28 2f       	mov	r18, r24
    6bbc:	30 e0       	ldi	r19, 0x00	; 0
    6bbe:	8a 81       	ldd	r24, Y+2	; 0x02
    6bc0:	9b 81       	ldd	r25, Y+3	; 0x03
    6bc2:	a9 01       	movw	r20, r18
    6bc4:	bc 01       	movw	r22, r24
    6bc6:	80 ec       	ldi	r24, 0xC0	; 192
    6bc8:	90 e0       	ldi	r25, 0x00	; 0
    6bca:	0e 94 70 34 	call	0x68e0	; 0x68e0 <usart_serial_write_packet>
    6bce:	89 83       	std	Y+1, r24	; 0x01
				(const uint8_t *)data,
				length);
#endif
	} while (status != STATUS_OK);
    6bd0:	89 81       	ldd	r24, Y+1	; 0x01
    6bd2:	88 23       	and	r24, r24
    6bd4:	89 f7       	brne	.-30     	; 0x6bb8 <sio2host_tx+0x12>
	return length;
    6bd6:	8c 81       	ldd	r24, Y+4	; 0x04
}
    6bd8:	0f 90       	pop	r0
    6bda:	0f 90       	pop	r0
    6bdc:	0f 90       	pop	r0
    6bde:	0f 90       	pop	r0
    6be0:	df 91       	pop	r29
    6be2:	cf 91       	pop	r28
    6be4:	08 95       	ret

00006be6 <sio2host_rx>:

uint8_t sio2host_rx(uint8_t *data, uint8_t max_length)
{
    6be6:	cf 93       	push	r28
    6be8:	df 93       	push	r29
    6bea:	00 d0       	rcall	.+0      	; 0x6bec <sio2host_rx+0x6>
    6bec:	00 d0       	rcall	.+0      	; 0x6bee <sio2host_rx+0x8>
    6bee:	cd b7       	in	r28, 0x3d	; 61
    6bf0:	de b7       	in	r29, 0x3e	; 62
    6bf2:	9b 83       	std	Y+3, r25	; 0x03
    6bf4:	8a 83       	std	Y+2, r24	; 0x02
    6bf6:	6c 83       	std	Y+4, r22	; 0x04
	uint8_t data_received = 0;
    6bf8:	19 82       	std	Y+1, r1	; 0x01
	if (0 == serial_rx_count) {
    6bfa:	80 91 89 10 	lds	r24, 0x1089	; 0x801089 <serial_rx_count>
    6bfe:	88 23       	and	r24, r24
    6c00:	11 f4       	brne	.+4      	; 0x6c06 <sio2host_rx+0x20>
		return 0;
    6c02:	80 e0       	ldi	r24, 0x00	; 0
    6c04:	44 c0       	rjmp	.+136    	; 0x6c8e <sio2host_rx+0xa8>
	}

	if (SERIAL_RX_BUF_SIZE_HOST <= serial_rx_count) {
    6c06:	80 91 89 10 	lds	r24, 0x1089	; 0x801089 <serial_rx_count>
    6c0a:	8c 39       	cpi	r24, 0x9C	; 156
    6c0c:	68 f0       	brcs	.+26     	; 0x6c28 <sio2host_rx+0x42>
		/*
		 * Bytes between head and tail are overwritten by new data.
		 * The oldest data in buffer is the one to which the tail is
		 * pointing. So reading operation should start from the tail.
		 */
		serial_rx_buf_head = serial_rx_buf_tail;
    6c0e:	80 91 88 10 	lds	r24, 0x1088	; 0x801088 <serial_rx_buf_tail>
    6c12:	80 93 87 10 	sts	0x1087, r24	; 0x801087 <serial_rx_buf_head>
		/*
		 * This is a buffer overflow case. But still only the number of
		 * bytes equivalent to
		 * full buffer size are useful.
		 */
		serial_rx_count = SERIAL_RX_BUF_SIZE_HOST;
    6c16:	8c e9       	ldi	r24, 0x9C	; 156
    6c18:	80 93 89 10 	sts	0x1089, r24	; 0x801089 <serial_rx_count>

		/* Bytes received is more than or equal to buffer. */
		if (SERIAL_RX_BUF_SIZE_HOST <= max_length) {
    6c1c:	8c 81       	ldd	r24, Y+4	; 0x04
    6c1e:	8c 39       	cpi	r24, 0x9C	; 156
    6c20:	58 f0       	brcs	.+22     	; 0x6c38 <sio2host_rx+0x52>
			 * Requested receive length (max_length) is more than
			 * the
			 * max size of receive buffer, but at max the full
			 * buffer can be read.
			 */
			max_length = SERIAL_RX_BUF_SIZE_HOST;
    6c22:	8c e9       	ldi	r24, 0x9C	; 156
    6c24:	8c 83       	std	Y+4, r24	; 0x04
    6c26:	08 c0       	rjmp	.+16     	; 0x6c38 <sio2host_rx+0x52>
		}
	} else {
		/* Bytes received is less than receive buffer maximum length. */
		if (max_length > serial_rx_count) {
    6c28:	80 91 89 10 	lds	r24, 0x1089	; 0x801089 <serial_rx_count>
    6c2c:	9c 81       	ldd	r25, Y+4	; 0x04
    6c2e:	89 17       	cp	r24, r25
    6c30:	18 f4       	brcc	.+6      	; 0x6c38 <sio2host_rx+0x52>
			 * the data
			 * present in receive buffer. Hence only the number of
			 * bytes
			 * present in receive buffer are read.
			 */
			max_length = serial_rx_count;
    6c32:	80 91 89 10 	lds	r24, 0x1089	; 0x801089 <serial_rx_count>
    6c36:	8c 83       	std	Y+4, r24	; 0x04
		}
	}

	data_received = max_length;
    6c38:	8c 81       	ldd	r24, Y+4	; 0x04
    6c3a:	89 83       	std	Y+1, r24	; 0x01
	while (max_length > 0) {
    6c3c:	24 c0       	rjmp	.+72     	; 0x6c86 <sio2host_rx+0xa0>
		/* Start to copy from head. */
		*data = serial_rx_buf[serial_rx_buf_head];
    6c3e:	80 91 87 10 	lds	r24, 0x1087	; 0x801087 <serial_rx_buf_head>
    6c42:	88 2f       	mov	r24, r24
    6c44:	90 e0       	ldi	r25, 0x00	; 0
    6c46:	85 51       	subi	r24, 0x15	; 21
    6c48:	90 4f       	sbci	r25, 0xF0	; 240
    6c4a:	fc 01       	movw	r30, r24
    6c4c:	20 81       	ld	r18, Z
    6c4e:	8a 81       	ldd	r24, Y+2	; 0x02
    6c50:	9b 81       	ldd	r25, Y+3	; 0x03
    6c52:	fc 01       	movw	r30, r24
    6c54:	20 83       	st	Z, r18
		serial_rx_buf_head++;
    6c56:	80 91 87 10 	lds	r24, 0x1087	; 0x801087 <serial_rx_buf_head>
    6c5a:	8f 5f       	subi	r24, 0xFF	; 255
    6c5c:	80 93 87 10 	sts	0x1087, r24	; 0x801087 <serial_rx_buf_head>
		serial_rx_count--;
    6c60:	80 91 89 10 	lds	r24, 0x1089	; 0x801089 <serial_rx_count>
    6c64:	81 50       	subi	r24, 0x01	; 1
    6c66:	80 93 89 10 	sts	0x1089, r24	; 0x801089 <serial_rx_count>
		data++;
    6c6a:	8a 81       	ldd	r24, Y+2	; 0x02
    6c6c:	9b 81       	ldd	r25, Y+3	; 0x03
    6c6e:	01 96       	adiw	r24, 0x01	; 1
    6c70:	9b 83       	std	Y+3, r25	; 0x03
    6c72:	8a 83       	std	Y+2, r24	; 0x02
		max_length--;
    6c74:	8c 81       	ldd	r24, Y+4	; 0x04
    6c76:	81 50       	subi	r24, 0x01	; 1
    6c78:	8c 83       	std	Y+4, r24	; 0x04
		if ((SERIAL_RX_BUF_SIZE_HOST) == serial_rx_buf_head) {
    6c7a:	80 91 87 10 	lds	r24, 0x1087	; 0x801087 <serial_rx_buf_head>
    6c7e:	8c 39       	cpi	r24, 0x9C	; 156
    6c80:	11 f4       	brne	.+4      	; 0x6c86 <sio2host_rx+0xa0>
			serial_rx_buf_head = 0;
    6c82:	10 92 87 10 	sts	0x1087, r1	; 0x801087 <serial_rx_buf_head>
			max_length = serial_rx_count;
		}
	}

	data_received = max_length;
	while (max_length > 0) {
    6c86:	8c 81       	ldd	r24, Y+4	; 0x04
    6c88:	88 23       	and	r24, r24
    6c8a:	c9 f6       	brne	.-78     	; 0x6c3e <sio2host_rx+0x58>
		max_length--;
		if ((SERIAL_RX_BUF_SIZE_HOST) == serial_rx_buf_head) {
			serial_rx_buf_head = 0;
		}
	}
	return data_received;
    6c8c:	89 81       	ldd	r24, Y+1	; 0x01
}
    6c8e:	0f 90       	pop	r0
    6c90:	0f 90       	pop	r0
    6c92:	0f 90       	pop	r0
    6c94:	0f 90       	pop	r0
    6c96:	df 91       	pop	r29
    6c98:	cf 91       	pop	r28
    6c9a:	08 95       	ret

00006c9c <sio2host_getchar>:

uint8_t sio2host_getchar(void)
{
    6c9c:	cf 93       	push	r28
    6c9e:	df 93       	push	r29
    6ca0:	1f 92       	push	r1
    6ca2:	cd b7       	in	r28, 0x3d	; 61
    6ca4:	de b7       	in	r29, 0x3e	; 62
	uint8_t c;
	while (0 == sio2host_rx(&c, 1)) {
    6ca6:	00 00       	nop
    6ca8:	61 e0       	ldi	r22, 0x01	; 1
    6caa:	ce 01       	movw	r24, r28
    6cac:	01 96       	adiw	r24, 0x01	; 1
    6cae:	0e 94 f3 35 	call	0x6be6	; 0x6be6 <sio2host_rx>
    6cb2:	88 23       	and	r24, r24
    6cb4:	c9 f3       	breq	.-14     	; 0x6ca8 <sio2host_getchar+0xc>
	}
	return c;
    6cb6:	89 81       	ldd	r24, Y+1	; 0x01
}
    6cb8:	0f 90       	pop	r0
    6cba:	df 91       	pop	r29
    6cbc:	cf 91       	pop	r28
    6cbe:	08 95       	ret

00006cc0 <sio2host_putchar>:

void sio2host_putchar(uint8_t ch)
{
    6cc0:	cf 93       	push	r28
    6cc2:	df 93       	push	r29
    6cc4:	1f 92       	push	r1
    6cc6:	cd b7       	in	r28, 0x3d	; 61
    6cc8:	de b7       	in	r29, 0x3e	; 62
    6cca:	89 83       	std	Y+1, r24	; 0x01
	sio2host_tx(&ch, 1);
    6ccc:	61 e0       	ldi	r22, 0x01	; 1
    6cce:	ce 01       	movw	r24, r28
    6cd0:	01 96       	adiw	r24, 0x01	; 1
    6cd2:	0e 94 d3 35 	call	0x6ba6	; 0x6ba6 <sio2host_tx>
}
    6cd6:	00 00       	nop
    6cd8:	0f 90       	pop	r0
    6cda:	df 91       	pop	r29
    6cdc:	cf 91       	pop	r28
    6cde:	08 95       	ret

00006ce0 <sio2host_getchar_nowait>:

int sio2host_getchar_nowait(void)
{
    6ce0:	cf 93       	push	r28
    6ce2:	df 93       	push	r29
    6ce4:	00 d0       	rcall	.+0      	; 0x6ce6 <sio2host_getchar_nowait+0x6>
    6ce6:	1f 92       	push	r1
    6ce8:	cd b7       	in	r28, 0x3d	; 61
    6cea:	de b7       	in	r29, 0x3e	; 62
	uint8_t c;
	int back = sio2host_rx(&c, 1);
    6cec:	ce 01       	movw	r24, r28
    6cee:	03 96       	adiw	r24, 0x03	; 3
    6cf0:	61 e0       	ldi	r22, 0x01	; 1
    6cf2:	0e 94 f3 35 	call	0x6be6	; 0x6be6 <sio2host_rx>
    6cf6:	88 2f       	mov	r24, r24
    6cf8:	90 e0       	ldi	r25, 0x00	; 0
    6cfa:	9a 83       	std	Y+2, r25	; 0x02
    6cfc:	89 83       	std	Y+1, r24	; 0x01
	if (back >= 1) {
    6cfe:	89 81       	ldd	r24, Y+1	; 0x01
    6d00:	9a 81       	ldd	r25, Y+2	; 0x02
    6d02:	18 16       	cp	r1, r24
    6d04:	19 06       	cpc	r1, r25
    6d06:	24 f4       	brge	.+8      	; 0x6d10 <sio2host_getchar_nowait+0x30>
		return c;
    6d08:	8b 81       	ldd	r24, Y+3	; 0x03
    6d0a:	88 2f       	mov	r24, r24
    6d0c:	90 e0       	ldi	r25, 0x00	; 0
    6d0e:	02 c0       	rjmp	.+4      	; 0x6d14 <sio2host_getchar_nowait+0x34>
	} else {
		return (-1);
    6d10:	8f ef       	ldi	r24, 0xFF	; 255
    6d12:	9f ef       	ldi	r25, 0xFF	; 255
	}
}
    6d14:	0f 90       	pop	r0
    6d16:	0f 90       	pop	r0
    6d18:	0f 90       	pop	r0
    6d1a:	df 91       	pop	r29
    6d1c:	cf 91       	pop	r28
    6d1e:	08 95       	ret

00006d20 <__vector_25>:
#if SAMD || SAMR21
void USART_HOST_ISR_VECT(uint8_t instance)
#else
USART_HOST_ISR_VECT()
#endif
{
    6d20:	1f 92       	push	r1
    6d22:	0f 92       	push	r0
    6d24:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    6d28:	0f 92       	push	r0
    6d2a:	11 24       	eor	r1, r1
    6d2c:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
    6d30:	0f 92       	push	r0
    6d32:	2f 93       	push	r18
    6d34:	3f 93       	push	r19
    6d36:	4f 93       	push	r20
    6d38:	5f 93       	push	r21
    6d3a:	6f 93       	push	r22
    6d3c:	7f 93       	push	r23
    6d3e:	8f 93       	push	r24
    6d40:	9f 93       	push	r25
    6d42:	af 93       	push	r26
    6d44:	bf 93       	push	r27
    6d46:	ef 93       	push	r30
    6d48:	ff 93       	push	r31
    6d4a:	cf 93       	push	r28
    6d4c:	df 93       	push	r29
    6d4e:	1f 92       	push	r1
    6d50:	cd b7       	in	r28, 0x3d	; 61
    6d52:	de b7       	in	r29, 0x3e	; 62
	uint8_t temp;
#if SAMD || SAMR21
	usart_serial_read_packet(&cdc_uart_module, &temp, 1);
#else
	usart_serial_read_packet(USART_HOST, &temp, 1);
    6d54:	41 e0       	ldi	r20, 0x01	; 1
    6d56:	50 e0       	ldi	r21, 0x00	; 0
    6d58:	ce 01       	movw	r24, r28
    6d5a:	01 96       	adiw	r24, 0x01	; 1
    6d5c:	bc 01       	movw	r22, r24
    6d5e:	80 ec       	ldi	r24, 0xC0	; 192
    6d60:	90 e0       	ldi	r25, 0x00	; 0
    6d62:	0e 94 9f 34 	call	0x693e	; 0x693e <usart_serial_read_packet>
#endif

	/* Introducing critical section to avoid buffer corruption. */
	cpu_irq_disable();
    6d66:	f8 94       	cli

	/* The number of data in the receive buffer is incremented and the
	 * buffer is updated. */
	serial_rx_count++;
    6d68:	80 91 89 10 	lds	r24, 0x1089	; 0x801089 <serial_rx_count>
    6d6c:	8f 5f       	subi	r24, 0xFF	; 255
    6d6e:	80 93 89 10 	sts	0x1089, r24	; 0x801089 <serial_rx_count>

	serial_rx_buf[serial_rx_buf_tail] = temp;
    6d72:	80 91 88 10 	lds	r24, 0x1088	; 0x801088 <serial_rx_buf_tail>
    6d76:	88 2f       	mov	r24, r24
    6d78:	90 e0       	ldi	r25, 0x00	; 0
    6d7a:	29 81       	ldd	r18, Y+1	; 0x01
    6d7c:	85 51       	subi	r24, 0x15	; 21
    6d7e:	90 4f       	sbci	r25, 0xF0	; 240
    6d80:	fc 01       	movw	r30, r24
    6d82:	20 83       	st	Z, r18

	if ((SERIAL_RX_BUF_SIZE_HOST - 1) == serial_rx_buf_tail) {
    6d84:	80 91 88 10 	lds	r24, 0x1088	; 0x801088 <serial_rx_buf_tail>
    6d88:	8b 39       	cpi	r24, 0x9B	; 155
    6d8a:	19 f4       	brne	.+6      	; 0x6d92 <__vector_25+0x72>
		/* Reached the end of buffer, revert back to beginning of
		 * buffer. */
		serial_rx_buf_tail = 0x00;
    6d8c:	10 92 88 10 	sts	0x1088, r1	; 0x801088 <serial_rx_buf_tail>
    6d90:	05 c0       	rjmp	.+10     	; 0x6d9c <__vector_25+0x7c>
	} else {
		serial_rx_buf_tail++;
    6d92:	80 91 88 10 	lds	r24, 0x1088	; 0x801088 <serial_rx_buf_tail>
    6d96:	8f 5f       	subi	r24, 0xFF	; 255
    6d98:	80 93 88 10 	sts	0x1088, r24	; 0x801088 <serial_rx_buf_tail>
	}

	cpu_irq_enable();
    6d9c:	78 94       	sei
}
    6d9e:	00 00       	nop
    6da0:	0f 90       	pop	r0
    6da2:	df 91       	pop	r29
    6da4:	cf 91       	pop	r28
    6da6:	ff 91       	pop	r31
    6da8:	ef 91       	pop	r30
    6daa:	bf 91       	pop	r27
    6dac:	af 91       	pop	r26
    6dae:	9f 91       	pop	r25
    6db0:	8f 91       	pop	r24
    6db2:	7f 91       	pop	r23
    6db4:	6f 91       	pop	r22
    6db6:	5f 91       	pop	r21
    6db8:	4f 91       	pop	r20
    6dba:	3f 91       	pop	r19
    6dbc:	2f 91       	pop	r18
    6dbe:	0f 90       	pop	r0
    6dc0:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
    6dc4:	0f 90       	pop	r0
    6dc6:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    6dca:	0f 90       	pop	r0
    6dcc:	1f 90       	pop	r1
    6dce:	18 95       	reti

00006dd0 <board_init>:
#include <conf_board.h>
#include <board.h>
#include <ioport.h>

void board_init(void)
{
    6dd0:	cf 93       	push	r28
    6dd2:	df 93       	push	r29
    6dd4:	cd b7       	in	r28, 0x3d	; 61
    6dd6:	de b7       	in	r29, 0x3e	; 62
    6dd8:	ce 56       	subi	r28, 0x6E	; 110
    6dda:	d1 09       	sbc	r29, r1
    6ddc:	0f b6       	in	r0, 0x3f	; 63
    6dde:	f8 94       	cli
    6de0:	de bf       	out	0x3e, r29	; 62
    6de2:	0f be       	out	0x3f, r0	; 63
    6de4:	cd bf       	out	0x3d, r28	; 61
    6de6:	83 e2       	ldi	r24, 0x23	; 35
    6de8:	89 83       	std	Y+1, r24	; 0x01
    6dea:	ce 01       	movw	r24, r28
    6dec:	8b 59       	subi	r24, 0x9B	; 155
    6dee:	9f 4f       	sbci	r25, 0xFF	; 255
    6df0:	23 e0       	ldi	r18, 0x03	; 3
    6df2:	30 e0       	ldi	r19, 0x00	; 0
    6df4:	fc 01       	movw	r30, r24
    6df6:	31 83       	std	Z+1, r19	; 0x01
    6df8:	20 83       	st	Z, r18
    6dfa:	ce 01       	movw	r24, r28
    6dfc:	89 59       	subi	r24, 0x99	; 153
    6dfe:	9f 4f       	sbci	r25, 0xFF	; 255
    6e00:	29 81       	ldd	r18, Y+1	; 0x01
    6e02:	fc 01       	movw	r30, r24
    6e04:	20 83       	st	Z, r18
 * \param: pin. the pin number defined by IOPORT_CREATE_PIN
 */
__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask
	(ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
    6e06:	ce 01       	movw	r24, r28
    6e08:	89 59       	subi	r24, 0x99	; 153
    6e0a:	9f 4f       	sbci	r25, 0xFF	; 255
    6e0c:	fc 01       	movw	r30, r24
    6e0e:	80 81       	ld	r24, Z
    6e10:	88 2f       	mov	r24, r24
    6e12:	90 e0       	ldi	r25, 0x00	; 0
    6e14:	9c 01       	movw	r18, r24
    6e16:	27 70       	andi	r18, 0x07	; 7
    6e18:	33 27       	eor	r19, r19
    6e1a:	81 e0       	ldi	r24, 0x01	; 1
    6e1c:	90 e0       	ldi	r25, 0x00	; 0
    6e1e:	02 c0       	rjmp	.+4      	; 0x6e24 <board_init+0x54>
    6e20:	88 0f       	add	r24, r24
    6e22:	99 1f       	adc	r25, r25
    6e24:	2a 95       	dec	r18
    6e26:	e2 f7       	brpl	.-8      	; 0x6e20 <board_init+0x50>
    6e28:	48 2f       	mov	r20, r24
    6e2a:	ce 01       	movw	r24, r28
    6e2c:	88 59       	subi	r24, 0x98	; 152
    6e2e:	9f 4f       	sbci	r25, 0xFF	; 255
    6e30:	29 81       	ldd	r18, Y+1	; 0x01
    6e32:	fc 01       	movw	r30, r24
    6e34:	20 83       	st	Z, r18
 * \brief: To get the base address of port number from defined pin
 * \param: pin. the pin number defined by IOPORT_CREATE_PIN
 */
__always_inline static PORT_t *arch_ioport_pin_to_base(ioport_pin_t pin)
{
	return arch_ioport_port_to_base(pin >> 3);
    6e36:	ce 01       	movw	r24, r28
    6e38:	88 59       	subi	r24, 0x98	; 152
    6e3a:	9f 4f       	sbci	r25, 0xFF	; 255
    6e3c:	fc 01       	movw	r30, r24
    6e3e:	80 81       	ld	r24, Z
    6e40:	28 2f       	mov	r18, r24
    6e42:	26 95       	lsr	r18
    6e44:	26 95       	lsr	r18
    6e46:	26 95       	lsr	r18
    6e48:	ce 01       	movw	r24, r28
    6e4a:	87 59       	subi	r24, 0x97	; 151
    6e4c:	9f 4f       	sbci	r25, 0xFF	; 255
    6e4e:	fc 01       	movw	r30, r24
    6e50:	20 83       	st	Z, r18
 * \param: port number e.g. IOPORT_PORTB
 */
__always_inline static PORT_t *arch_ioport_port_to_base(uint8_t port)
{
	return (PORT_t *)((uintptr_t)(IOPORT_BASE_ADDRESS +
	       (port * IOPORT_PORT_OFFSET)));
    6e52:	ce 01       	movw	r24, r28
    6e54:	87 59       	subi	r24, 0x97	; 151
    6e56:	9f 4f       	sbci	r25, 0xFF	; 255
    6e58:	fc 01       	movw	r30, r24
    6e5a:	80 81       	ld	r24, Z
    6e5c:	28 2f       	mov	r18, r24
    6e5e:	30 e0       	ldi	r19, 0x00	; 0
    6e60:	c9 01       	movw	r24, r18
    6e62:	88 0f       	add	r24, r24
    6e64:	99 1f       	adc	r25, r25
    6e66:	82 0f       	add	r24, r18
    6e68:	93 1f       	adc	r25, r19
 * \brief: To get the base address of port number
 * \param: port number e.g. IOPORT_PORTB
 */
__always_inline static PORT_t *arch_ioport_port_to_base(uint8_t port)
{
	return (PORT_t *)((uintptr_t)(IOPORT_BASE_ADDRESS +
    6e6a:	80 96       	adiw	r24, 0x20	; 32
    6e6c:	9c 01       	movw	r18, r24
    6e6e:	ce 01       	movw	r24, r28
    6e70:	86 59       	subi	r24, 0x96	; 150
    6e72:	9f 4f       	sbci	r25, 0xFF	; 255
    6e74:	fc 01       	movw	r30, r24
    6e76:	31 83       	std	Z+1, r19	; 0x01
    6e78:	20 83       	st	Z, r18
    6e7a:	ce 01       	movw	r24, r28
    6e7c:	84 59       	subi	r24, 0x94	; 148
    6e7e:	9f 4f       	sbci	r25, 0xFF	; 255
    6e80:	fc 01       	movw	r30, r24
    6e82:	40 83       	st	Z, r20
    6e84:	ce 01       	movw	r24, r28
    6e86:	83 59       	subi	r24, 0x93	; 147
    6e88:	9f 4f       	sbci	r25, 0xFF	; 255
    6e8a:	9e 01       	movw	r18, r28
    6e8c:	2b 59       	subi	r18, 0x9B	; 155
    6e8e:	3f 4f       	sbci	r19, 0xFF	; 255
    6e90:	f9 01       	movw	r30, r18
    6e92:	20 81       	ld	r18, Z
    6e94:	31 81       	ldd	r19, Z+1	; 0x01
    6e96:	fc 01       	movw	r30, r24
    6e98:	31 83       	std	Z+1, r19	; 0x01
    6e9a:	20 83       	st	Z, r18
__always_inline static inline void ioport_configure_port_pin(void *port,
		pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
    6e9c:	ce 01       	movw	r24, r28
    6e9e:	83 59       	subi	r24, 0x93	; 147
    6ea0:	9f 4f       	sbci	r25, 0xFF	; 255
    6ea2:	fc 01       	movw	r30, r24
    6ea4:	80 81       	ld	r24, Z
    6ea6:	91 81       	ldd	r25, Z+1	; 0x01
    6ea8:	81 70       	andi	r24, 0x01	; 1
    6eaa:	99 27       	eor	r25, r25
    6eac:	89 2b       	or	r24, r25
    6eae:	09 f4       	brne	.+2      	; 0x6eb2 <board_init+0xe2>
    6eb0:	59 c0       	rjmp	.+178    	; 0x6f64 <board_init+0x194>
		if (flags & IOPORT_INIT_HIGH) {
    6eb2:	ce 01       	movw	r24, r28
    6eb4:	83 59       	subi	r24, 0x93	; 147
    6eb6:	9f 4f       	sbci	r25, 0xFF	; 255
    6eb8:	fc 01       	movw	r30, r24
    6eba:	80 81       	ld	r24, Z
    6ebc:	91 81       	ldd	r25, Z+1	; 0x01
    6ebe:	82 70       	andi	r24, 0x02	; 2
    6ec0:	99 27       	eor	r25, r25
    6ec2:	89 2b       	or	r24, r25
    6ec4:	d1 f0       	breq	.+52     	; 0x6efa <board_init+0x12a>
			*((uint8_t *)port + 2) |= pin_mask;
    6ec6:	ce 01       	movw	r24, r28
    6ec8:	86 59       	subi	r24, 0x96	; 150
    6eca:	9f 4f       	sbci	r25, 0xFF	; 255
    6ecc:	fc 01       	movw	r30, r24
    6ece:	80 81       	ld	r24, Z
    6ed0:	91 81       	ldd	r25, Z+1	; 0x01
    6ed2:	02 96       	adiw	r24, 0x02	; 2
    6ed4:	9e 01       	movw	r18, r28
    6ed6:	26 59       	subi	r18, 0x96	; 150
    6ed8:	3f 4f       	sbci	r19, 0xFF	; 255
    6eda:	f9 01       	movw	r30, r18
    6edc:	20 81       	ld	r18, Z
    6ede:	31 81       	ldd	r19, Z+1	; 0x01
    6ee0:	2e 5f       	subi	r18, 0xFE	; 254
    6ee2:	3f 4f       	sbci	r19, 0xFF	; 255
    6ee4:	f9 01       	movw	r30, r18
    6ee6:	40 81       	ld	r20, Z
    6ee8:	9e 01       	movw	r18, r28
    6eea:	24 59       	subi	r18, 0x94	; 148
    6eec:	3f 4f       	sbci	r19, 0xFF	; 255
    6eee:	f9 01       	movw	r30, r18
    6ef0:	20 81       	ld	r18, Z
    6ef2:	24 2b       	or	r18, r20
    6ef4:	fc 01       	movw	r30, r24
    6ef6:	20 83       	st	Z, r18
    6ef8:	1b c0       	rjmp	.+54     	; 0x6f30 <board_init+0x160>
		} else {
			*((uint8_t *)port + 2) &= ~pin_mask;
    6efa:	ce 01       	movw	r24, r28
    6efc:	86 59       	subi	r24, 0x96	; 150
    6efe:	9f 4f       	sbci	r25, 0xFF	; 255
    6f00:	fc 01       	movw	r30, r24
    6f02:	80 81       	ld	r24, Z
    6f04:	91 81       	ldd	r25, Z+1	; 0x01
    6f06:	02 96       	adiw	r24, 0x02	; 2
    6f08:	9e 01       	movw	r18, r28
    6f0a:	26 59       	subi	r18, 0x96	; 150
    6f0c:	3f 4f       	sbci	r19, 0xFF	; 255
    6f0e:	f9 01       	movw	r30, r18
    6f10:	20 81       	ld	r18, Z
    6f12:	31 81       	ldd	r19, Z+1	; 0x01
    6f14:	2e 5f       	subi	r18, 0xFE	; 254
    6f16:	3f 4f       	sbci	r19, 0xFF	; 255
    6f18:	f9 01       	movw	r30, r18
    6f1a:	20 81       	ld	r18, Z
    6f1c:	42 2f       	mov	r20, r18
    6f1e:	9e 01       	movw	r18, r28
    6f20:	24 59       	subi	r18, 0x94	; 148
    6f22:	3f 4f       	sbci	r19, 0xFF	; 255
    6f24:	f9 01       	movw	r30, r18
    6f26:	20 81       	ld	r18, Z
    6f28:	20 95       	com	r18
    6f2a:	24 23       	and	r18, r20
    6f2c:	fc 01       	movw	r30, r24
    6f2e:	20 83       	st	Z, r18
		}

		*((uint8_t *)port + 1) |= pin_mask;
    6f30:	ce 01       	movw	r24, r28
    6f32:	86 59       	subi	r24, 0x96	; 150
    6f34:	9f 4f       	sbci	r25, 0xFF	; 255
    6f36:	fc 01       	movw	r30, r24
    6f38:	80 81       	ld	r24, Z
    6f3a:	91 81       	ldd	r25, Z+1	; 0x01
    6f3c:	01 96       	adiw	r24, 0x01	; 1
    6f3e:	9e 01       	movw	r18, r28
    6f40:	26 59       	subi	r18, 0x96	; 150
    6f42:	3f 4f       	sbci	r19, 0xFF	; 255
    6f44:	f9 01       	movw	r30, r18
    6f46:	20 81       	ld	r18, Z
    6f48:	31 81       	ldd	r19, Z+1	; 0x01
    6f4a:	2f 5f       	subi	r18, 0xFF	; 255
    6f4c:	3f 4f       	sbci	r19, 0xFF	; 255
    6f4e:	f9 01       	movw	r30, r18
    6f50:	40 81       	ld	r20, Z
    6f52:	9e 01       	movw	r18, r28
    6f54:	24 59       	subi	r18, 0x94	; 148
    6f56:	3f 4f       	sbci	r19, 0xFF	; 255
    6f58:	f9 01       	movw	r30, r18
    6f5a:	20 81       	ld	r18, Z
    6f5c:	24 2b       	or	r18, r20
    6f5e:	fc 01       	movw	r30, r24
    6f60:	20 83       	st	Z, r18
    6f62:	5a c0       	rjmp	.+180    	; 0x7018 <board_init+0x248>
	} else {
		*((uint8_t *)port + 1) &= ~pin_mask;
    6f64:	ce 01       	movw	r24, r28
    6f66:	86 59       	subi	r24, 0x96	; 150
    6f68:	9f 4f       	sbci	r25, 0xFF	; 255
    6f6a:	fc 01       	movw	r30, r24
    6f6c:	80 81       	ld	r24, Z
    6f6e:	91 81       	ldd	r25, Z+1	; 0x01
    6f70:	01 96       	adiw	r24, 0x01	; 1
    6f72:	9e 01       	movw	r18, r28
    6f74:	26 59       	subi	r18, 0x96	; 150
    6f76:	3f 4f       	sbci	r19, 0xFF	; 255
    6f78:	f9 01       	movw	r30, r18
    6f7a:	20 81       	ld	r18, Z
    6f7c:	31 81       	ldd	r19, Z+1	; 0x01
    6f7e:	2f 5f       	subi	r18, 0xFF	; 255
    6f80:	3f 4f       	sbci	r19, 0xFF	; 255
    6f82:	f9 01       	movw	r30, r18
    6f84:	20 81       	ld	r18, Z
    6f86:	42 2f       	mov	r20, r18
    6f88:	9e 01       	movw	r18, r28
    6f8a:	24 59       	subi	r18, 0x94	; 148
    6f8c:	3f 4f       	sbci	r19, 0xFF	; 255
    6f8e:	f9 01       	movw	r30, r18
    6f90:	20 81       	ld	r18, Z
    6f92:	20 95       	com	r18
    6f94:	24 23       	and	r18, r20
    6f96:	fc 01       	movw	r30, r24
    6f98:	20 83       	st	Z, r18
		if (flags & IOPORT_PULL_UP) {
    6f9a:	ce 01       	movw	r24, r28
    6f9c:	83 59       	subi	r24, 0x93	; 147
    6f9e:	9f 4f       	sbci	r25, 0xFF	; 255
    6fa0:	fc 01       	movw	r30, r24
    6fa2:	80 81       	ld	r24, Z
    6fa4:	91 81       	ldd	r25, Z+1	; 0x01
    6fa6:	84 70       	andi	r24, 0x04	; 4
    6fa8:	99 27       	eor	r25, r25
    6faa:	89 2b       	or	r24, r25
    6fac:	d1 f0       	breq	.+52     	; 0x6fe2 <board_init+0x212>
			*((uint8_t *)port + 2) |= pin_mask;
    6fae:	ce 01       	movw	r24, r28
    6fb0:	86 59       	subi	r24, 0x96	; 150
    6fb2:	9f 4f       	sbci	r25, 0xFF	; 255
    6fb4:	fc 01       	movw	r30, r24
    6fb6:	80 81       	ld	r24, Z
    6fb8:	91 81       	ldd	r25, Z+1	; 0x01
    6fba:	02 96       	adiw	r24, 0x02	; 2
    6fbc:	9e 01       	movw	r18, r28
    6fbe:	26 59       	subi	r18, 0x96	; 150
    6fc0:	3f 4f       	sbci	r19, 0xFF	; 255
    6fc2:	f9 01       	movw	r30, r18
    6fc4:	20 81       	ld	r18, Z
    6fc6:	31 81       	ldd	r19, Z+1	; 0x01
    6fc8:	2e 5f       	subi	r18, 0xFE	; 254
    6fca:	3f 4f       	sbci	r19, 0xFF	; 255
    6fcc:	f9 01       	movw	r30, r18
    6fce:	40 81       	ld	r20, Z
    6fd0:	9e 01       	movw	r18, r28
    6fd2:	24 59       	subi	r18, 0x94	; 148
    6fd4:	3f 4f       	sbci	r19, 0xFF	; 255
    6fd6:	f9 01       	movw	r30, r18
    6fd8:	20 81       	ld	r18, Z
    6fda:	24 2b       	or	r18, r20
    6fdc:	fc 01       	movw	r30, r24
    6fde:	20 83       	st	Z, r18
    6fe0:	1b c0       	rjmp	.+54     	; 0x7018 <board_init+0x248>
		} else {
			*((uint8_t *)port + 2) &= ~pin_mask;
    6fe2:	ce 01       	movw	r24, r28
    6fe4:	86 59       	subi	r24, 0x96	; 150
    6fe6:	9f 4f       	sbci	r25, 0xFF	; 255
    6fe8:	fc 01       	movw	r30, r24
    6fea:	80 81       	ld	r24, Z
    6fec:	91 81       	ldd	r25, Z+1	; 0x01
    6fee:	02 96       	adiw	r24, 0x02	; 2
    6ff0:	9e 01       	movw	r18, r28
    6ff2:	26 59       	subi	r18, 0x96	; 150
    6ff4:	3f 4f       	sbci	r19, 0xFF	; 255
    6ff6:	f9 01       	movw	r30, r18
    6ff8:	20 81       	ld	r18, Z
    6ffa:	31 81       	ldd	r19, Z+1	; 0x01
    6ffc:	2e 5f       	subi	r18, 0xFE	; 254
    6ffe:	3f 4f       	sbci	r19, 0xFF	; 255
    7000:	f9 01       	movw	r30, r18
    7002:	20 81       	ld	r18, Z
    7004:	42 2f       	mov	r20, r18
    7006:	9e 01       	movw	r18, r28
    7008:	24 59       	subi	r18, 0x94	; 148
    700a:	3f 4f       	sbci	r19, 0xFF	; 255
    700c:	f9 01       	movw	r30, r18
    700e:	20 81       	ld	r18, Z
    7010:	20 95       	com	r18
    7012:	24 23       	and	r18, r20
    7014:	fc 01       	movw	r30, r24
    7016:	20 83       	st	Z, r18
    7018:	84 e2       	ldi	r24, 0x24	; 36
    701a:	8a 83       	std	Y+2, r24	; 0x02
    701c:	ce 01       	movw	r24, r28
    701e:	85 5a       	subi	r24, 0xA5	; 165
    7020:	9f 4f       	sbci	r25, 0xFF	; 255
    7022:	23 e0       	ldi	r18, 0x03	; 3
    7024:	30 e0       	ldi	r19, 0x00	; 0
    7026:	fc 01       	movw	r30, r24
    7028:	31 83       	std	Z+1, r19	; 0x01
    702a:	20 83       	st	Z, r18
    702c:	ce 01       	movw	r24, r28
    702e:	83 5a       	subi	r24, 0xA3	; 163
    7030:	9f 4f       	sbci	r25, 0xFF	; 255
    7032:	2a 81       	ldd	r18, Y+2	; 0x02
    7034:	fc 01       	movw	r30, r24
    7036:	20 83       	st	Z, r18
 * \param: pin. the pin number defined by IOPORT_CREATE_PIN
 */
__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask
	(ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
    7038:	ce 01       	movw	r24, r28
    703a:	83 5a       	subi	r24, 0xA3	; 163
    703c:	9f 4f       	sbci	r25, 0xFF	; 255
    703e:	fc 01       	movw	r30, r24
    7040:	80 81       	ld	r24, Z
    7042:	88 2f       	mov	r24, r24
    7044:	90 e0       	ldi	r25, 0x00	; 0
    7046:	9c 01       	movw	r18, r24
    7048:	27 70       	andi	r18, 0x07	; 7
    704a:	33 27       	eor	r19, r19
    704c:	81 e0       	ldi	r24, 0x01	; 1
    704e:	90 e0       	ldi	r25, 0x00	; 0
    7050:	02 c0       	rjmp	.+4      	; 0x7056 <board_init+0x286>
    7052:	88 0f       	add	r24, r24
    7054:	99 1f       	adc	r25, r25
    7056:	2a 95       	dec	r18
    7058:	e2 f7       	brpl	.-8      	; 0x7052 <board_init+0x282>
    705a:	48 2f       	mov	r20, r24
    705c:	ce 01       	movw	r24, r28
    705e:	82 5a       	subi	r24, 0xA2	; 162
    7060:	9f 4f       	sbci	r25, 0xFF	; 255
    7062:	2a 81       	ldd	r18, Y+2	; 0x02
    7064:	fc 01       	movw	r30, r24
    7066:	20 83       	st	Z, r18
 * \brief: To get the base address of port number from defined pin
 * \param: pin. the pin number defined by IOPORT_CREATE_PIN
 */
__always_inline static PORT_t *arch_ioport_pin_to_base(ioport_pin_t pin)
{
	return arch_ioport_port_to_base(pin >> 3);
    7068:	ce 01       	movw	r24, r28
    706a:	82 5a       	subi	r24, 0xA2	; 162
    706c:	9f 4f       	sbci	r25, 0xFF	; 255
    706e:	fc 01       	movw	r30, r24
    7070:	80 81       	ld	r24, Z
    7072:	28 2f       	mov	r18, r24
    7074:	26 95       	lsr	r18
    7076:	26 95       	lsr	r18
    7078:	26 95       	lsr	r18
    707a:	ce 01       	movw	r24, r28
    707c:	81 5a       	subi	r24, 0xA1	; 161
    707e:	9f 4f       	sbci	r25, 0xFF	; 255
    7080:	fc 01       	movw	r30, r24
    7082:	20 83       	st	Z, r18
 * \param: port number e.g. IOPORT_PORTB
 */
__always_inline static PORT_t *arch_ioport_port_to_base(uint8_t port)
{
	return (PORT_t *)((uintptr_t)(IOPORT_BASE_ADDRESS +
	       (port * IOPORT_PORT_OFFSET)));
    7084:	ce 01       	movw	r24, r28
    7086:	81 5a       	subi	r24, 0xA1	; 161
    7088:	9f 4f       	sbci	r25, 0xFF	; 255
    708a:	fc 01       	movw	r30, r24
    708c:	80 81       	ld	r24, Z
    708e:	28 2f       	mov	r18, r24
    7090:	30 e0       	ldi	r19, 0x00	; 0
    7092:	c9 01       	movw	r24, r18
    7094:	88 0f       	add	r24, r24
    7096:	99 1f       	adc	r25, r25
    7098:	82 0f       	add	r24, r18
    709a:	93 1f       	adc	r25, r19
 * \brief: To get the base address of port number
 * \param: port number e.g. IOPORT_PORTB
 */
__always_inline static PORT_t *arch_ioport_port_to_base(uint8_t port)
{
	return (PORT_t *)((uintptr_t)(IOPORT_BASE_ADDRESS +
    709c:	80 96       	adiw	r24, 0x20	; 32
    709e:	9c 01       	movw	r18, r24
    70a0:	ce 01       	movw	r24, r28
    70a2:	80 5a       	subi	r24, 0xA0	; 160
    70a4:	9f 4f       	sbci	r25, 0xFF	; 255
    70a6:	fc 01       	movw	r30, r24
    70a8:	31 83       	std	Z+1, r19	; 0x01
    70aa:	20 83       	st	Z, r18
    70ac:	ce 01       	movw	r24, r28
    70ae:	8e 59       	subi	r24, 0x9E	; 158
    70b0:	9f 4f       	sbci	r25, 0xFF	; 255
    70b2:	fc 01       	movw	r30, r24
    70b4:	40 83       	st	Z, r20
    70b6:	ce 01       	movw	r24, r28
    70b8:	8d 59       	subi	r24, 0x9D	; 157
    70ba:	9f 4f       	sbci	r25, 0xFF	; 255
    70bc:	9e 01       	movw	r18, r28
    70be:	25 5a       	subi	r18, 0xA5	; 165
    70c0:	3f 4f       	sbci	r19, 0xFF	; 255
    70c2:	f9 01       	movw	r30, r18
    70c4:	20 81       	ld	r18, Z
    70c6:	31 81       	ldd	r19, Z+1	; 0x01
    70c8:	fc 01       	movw	r30, r24
    70ca:	31 83       	std	Z+1, r19	; 0x01
    70cc:	20 83       	st	Z, r18
__always_inline static inline void ioport_configure_port_pin(void *port,
		pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
    70ce:	ce 01       	movw	r24, r28
    70d0:	8d 59       	subi	r24, 0x9D	; 157
    70d2:	9f 4f       	sbci	r25, 0xFF	; 255
    70d4:	fc 01       	movw	r30, r24
    70d6:	80 81       	ld	r24, Z
    70d8:	91 81       	ldd	r25, Z+1	; 0x01
    70da:	81 70       	andi	r24, 0x01	; 1
    70dc:	99 27       	eor	r25, r25
    70de:	89 2b       	or	r24, r25
    70e0:	09 f4       	brne	.+2      	; 0x70e4 <board_init+0x314>
    70e2:	59 c0       	rjmp	.+178    	; 0x7196 <board_init+0x3c6>
		if (flags & IOPORT_INIT_HIGH) {
    70e4:	ce 01       	movw	r24, r28
    70e6:	8d 59       	subi	r24, 0x9D	; 157
    70e8:	9f 4f       	sbci	r25, 0xFF	; 255
    70ea:	fc 01       	movw	r30, r24
    70ec:	80 81       	ld	r24, Z
    70ee:	91 81       	ldd	r25, Z+1	; 0x01
    70f0:	82 70       	andi	r24, 0x02	; 2
    70f2:	99 27       	eor	r25, r25
    70f4:	89 2b       	or	r24, r25
    70f6:	d1 f0       	breq	.+52     	; 0x712c <board_init+0x35c>
			*((uint8_t *)port + 2) |= pin_mask;
    70f8:	ce 01       	movw	r24, r28
    70fa:	80 5a       	subi	r24, 0xA0	; 160
    70fc:	9f 4f       	sbci	r25, 0xFF	; 255
    70fe:	fc 01       	movw	r30, r24
    7100:	80 81       	ld	r24, Z
    7102:	91 81       	ldd	r25, Z+1	; 0x01
    7104:	02 96       	adiw	r24, 0x02	; 2
    7106:	9e 01       	movw	r18, r28
    7108:	20 5a       	subi	r18, 0xA0	; 160
    710a:	3f 4f       	sbci	r19, 0xFF	; 255
    710c:	f9 01       	movw	r30, r18
    710e:	20 81       	ld	r18, Z
    7110:	31 81       	ldd	r19, Z+1	; 0x01
    7112:	2e 5f       	subi	r18, 0xFE	; 254
    7114:	3f 4f       	sbci	r19, 0xFF	; 255
    7116:	f9 01       	movw	r30, r18
    7118:	40 81       	ld	r20, Z
    711a:	9e 01       	movw	r18, r28
    711c:	2e 59       	subi	r18, 0x9E	; 158
    711e:	3f 4f       	sbci	r19, 0xFF	; 255
    7120:	f9 01       	movw	r30, r18
    7122:	20 81       	ld	r18, Z
    7124:	24 2b       	or	r18, r20
    7126:	fc 01       	movw	r30, r24
    7128:	20 83       	st	Z, r18
    712a:	1b c0       	rjmp	.+54     	; 0x7162 <board_init+0x392>
		} else {
			*((uint8_t *)port + 2) &= ~pin_mask;
    712c:	ce 01       	movw	r24, r28
    712e:	80 5a       	subi	r24, 0xA0	; 160
    7130:	9f 4f       	sbci	r25, 0xFF	; 255
    7132:	fc 01       	movw	r30, r24
    7134:	80 81       	ld	r24, Z
    7136:	91 81       	ldd	r25, Z+1	; 0x01
    7138:	02 96       	adiw	r24, 0x02	; 2
    713a:	9e 01       	movw	r18, r28
    713c:	20 5a       	subi	r18, 0xA0	; 160
    713e:	3f 4f       	sbci	r19, 0xFF	; 255
    7140:	f9 01       	movw	r30, r18
    7142:	20 81       	ld	r18, Z
    7144:	31 81       	ldd	r19, Z+1	; 0x01
    7146:	2e 5f       	subi	r18, 0xFE	; 254
    7148:	3f 4f       	sbci	r19, 0xFF	; 255
    714a:	f9 01       	movw	r30, r18
    714c:	20 81       	ld	r18, Z
    714e:	42 2f       	mov	r20, r18
    7150:	9e 01       	movw	r18, r28
    7152:	2e 59       	subi	r18, 0x9E	; 158
    7154:	3f 4f       	sbci	r19, 0xFF	; 255
    7156:	f9 01       	movw	r30, r18
    7158:	20 81       	ld	r18, Z
    715a:	20 95       	com	r18
    715c:	24 23       	and	r18, r20
    715e:	fc 01       	movw	r30, r24
    7160:	20 83       	st	Z, r18
		}

		*((uint8_t *)port + 1) |= pin_mask;
    7162:	ce 01       	movw	r24, r28
    7164:	80 5a       	subi	r24, 0xA0	; 160
    7166:	9f 4f       	sbci	r25, 0xFF	; 255
    7168:	fc 01       	movw	r30, r24
    716a:	80 81       	ld	r24, Z
    716c:	91 81       	ldd	r25, Z+1	; 0x01
    716e:	01 96       	adiw	r24, 0x01	; 1
    7170:	9e 01       	movw	r18, r28
    7172:	20 5a       	subi	r18, 0xA0	; 160
    7174:	3f 4f       	sbci	r19, 0xFF	; 255
    7176:	f9 01       	movw	r30, r18
    7178:	20 81       	ld	r18, Z
    717a:	31 81       	ldd	r19, Z+1	; 0x01
    717c:	2f 5f       	subi	r18, 0xFF	; 255
    717e:	3f 4f       	sbci	r19, 0xFF	; 255
    7180:	f9 01       	movw	r30, r18
    7182:	40 81       	ld	r20, Z
    7184:	9e 01       	movw	r18, r28
    7186:	2e 59       	subi	r18, 0x9E	; 158
    7188:	3f 4f       	sbci	r19, 0xFF	; 255
    718a:	f9 01       	movw	r30, r18
    718c:	20 81       	ld	r18, Z
    718e:	24 2b       	or	r18, r20
    7190:	fc 01       	movw	r30, r24
    7192:	20 83       	st	Z, r18
    7194:	5a c0       	rjmp	.+180    	; 0x724a <board_init+0x47a>
	} else {
		*((uint8_t *)port + 1) &= ~pin_mask;
    7196:	ce 01       	movw	r24, r28
    7198:	80 5a       	subi	r24, 0xA0	; 160
    719a:	9f 4f       	sbci	r25, 0xFF	; 255
    719c:	fc 01       	movw	r30, r24
    719e:	80 81       	ld	r24, Z
    71a0:	91 81       	ldd	r25, Z+1	; 0x01
    71a2:	01 96       	adiw	r24, 0x01	; 1
    71a4:	9e 01       	movw	r18, r28
    71a6:	20 5a       	subi	r18, 0xA0	; 160
    71a8:	3f 4f       	sbci	r19, 0xFF	; 255
    71aa:	f9 01       	movw	r30, r18
    71ac:	20 81       	ld	r18, Z
    71ae:	31 81       	ldd	r19, Z+1	; 0x01
    71b0:	2f 5f       	subi	r18, 0xFF	; 255
    71b2:	3f 4f       	sbci	r19, 0xFF	; 255
    71b4:	f9 01       	movw	r30, r18
    71b6:	20 81       	ld	r18, Z
    71b8:	42 2f       	mov	r20, r18
    71ba:	9e 01       	movw	r18, r28
    71bc:	2e 59       	subi	r18, 0x9E	; 158
    71be:	3f 4f       	sbci	r19, 0xFF	; 255
    71c0:	f9 01       	movw	r30, r18
    71c2:	20 81       	ld	r18, Z
    71c4:	20 95       	com	r18
    71c6:	24 23       	and	r18, r20
    71c8:	fc 01       	movw	r30, r24
    71ca:	20 83       	st	Z, r18
		if (flags & IOPORT_PULL_UP) {
    71cc:	ce 01       	movw	r24, r28
    71ce:	8d 59       	subi	r24, 0x9D	; 157
    71d0:	9f 4f       	sbci	r25, 0xFF	; 255
    71d2:	fc 01       	movw	r30, r24
    71d4:	80 81       	ld	r24, Z
    71d6:	91 81       	ldd	r25, Z+1	; 0x01
    71d8:	84 70       	andi	r24, 0x04	; 4
    71da:	99 27       	eor	r25, r25
    71dc:	89 2b       	or	r24, r25
    71de:	d1 f0       	breq	.+52     	; 0x7214 <board_init+0x444>
			*((uint8_t *)port + 2) |= pin_mask;
    71e0:	ce 01       	movw	r24, r28
    71e2:	80 5a       	subi	r24, 0xA0	; 160
    71e4:	9f 4f       	sbci	r25, 0xFF	; 255
    71e6:	fc 01       	movw	r30, r24
    71e8:	80 81       	ld	r24, Z
    71ea:	91 81       	ldd	r25, Z+1	; 0x01
    71ec:	02 96       	adiw	r24, 0x02	; 2
    71ee:	9e 01       	movw	r18, r28
    71f0:	20 5a       	subi	r18, 0xA0	; 160
    71f2:	3f 4f       	sbci	r19, 0xFF	; 255
    71f4:	f9 01       	movw	r30, r18
    71f6:	20 81       	ld	r18, Z
    71f8:	31 81       	ldd	r19, Z+1	; 0x01
    71fa:	2e 5f       	subi	r18, 0xFE	; 254
    71fc:	3f 4f       	sbci	r19, 0xFF	; 255
    71fe:	f9 01       	movw	r30, r18
    7200:	40 81       	ld	r20, Z
    7202:	9e 01       	movw	r18, r28
    7204:	2e 59       	subi	r18, 0x9E	; 158
    7206:	3f 4f       	sbci	r19, 0xFF	; 255
    7208:	f9 01       	movw	r30, r18
    720a:	20 81       	ld	r18, Z
    720c:	24 2b       	or	r18, r20
    720e:	fc 01       	movw	r30, r24
    7210:	20 83       	st	Z, r18
    7212:	1b c0       	rjmp	.+54     	; 0x724a <board_init+0x47a>
		} else {
			*((uint8_t *)port + 2) &= ~pin_mask;
    7214:	ce 01       	movw	r24, r28
    7216:	80 5a       	subi	r24, 0xA0	; 160
    7218:	9f 4f       	sbci	r25, 0xFF	; 255
    721a:	fc 01       	movw	r30, r24
    721c:	80 81       	ld	r24, Z
    721e:	91 81       	ldd	r25, Z+1	; 0x01
    7220:	02 96       	adiw	r24, 0x02	; 2
    7222:	9e 01       	movw	r18, r28
    7224:	20 5a       	subi	r18, 0xA0	; 160
    7226:	3f 4f       	sbci	r19, 0xFF	; 255
    7228:	f9 01       	movw	r30, r18
    722a:	20 81       	ld	r18, Z
    722c:	31 81       	ldd	r19, Z+1	; 0x01
    722e:	2e 5f       	subi	r18, 0xFE	; 254
    7230:	3f 4f       	sbci	r19, 0xFF	; 255
    7232:	f9 01       	movw	r30, r18
    7234:	20 81       	ld	r18, Z
    7236:	42 2f       	mov	r20, r18
    7238:	9e 01       	movw	r18, r28
    723a:	2e 59       	subi	r18, 0x9E	; 158
    723c:	3f 4f       	sbci	r19, 0xFF	; 255
    723e:	f9 01       	movw	r30, r18
    7240:	20 81       	ld	r18, Z
    7242:	20 95       	com	r18
    7244:	24 23       	and	r18, r20
    7246:	fc 01       	movw	r30, r24
    7248:	20 83       	st	Z, r18
    724a:	85 e2       	ldi	r24, 0x25	; 37
    724c:	8b 83       	std	Y+3, r24	; 0x03
    724e:	ce 01       	movw	r24, r28
    7250:	8f 5a       	subi	r24, 0xAF	; 175
    7252:	9f 4f       	sbci	r25, 0xFF	; 255
    7254:	23 e0       	ldi	r18, 0x03	; 3
    7256:	30 e0       	ldi	r19, 0x00	; 0
    7258:	fc 01       	movw	r30, r24
    725a:	31 83       	std	Z+1, r19	; 0x01
    725c:	20 83       	st	Z, r18
    725e:	ce 01       	movw	r24, r28
    7260:	8d 5a       	subi	r24, 0xAD	; 173
    7262:	9f 4f       	sbci	r25, 0xFF	; 255
    7264:	2b 81       	ldd	r18, Y+3	; 0x03
    7266:	fc 01       	movw	r30, r24
    7268:	20 83       	st	Z, r18
 * \param: pin. the pin number defined by IOPORT_CREATE_PIN
 */
__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask
	(ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
    726a:	ce 01       	movw	r24, r28
    726c:	8d 5a       	subi	r24, 0xAD	; 173
    726e:	9f 4f       	sbci	r25, 0xFF	; 255
    7270:	fc 01       	movw	r30, r24
    7272:	80 81       	ld	r24, Z
    7274:	88 2f       	mov	r24, r24
    7276:	90 e0       	ldi	r25, 0x00	; 0
    7278:	9c 01       	movw	r18, r24
    727a:	27 70       	andi	r18, 0x07	; 7
    727c:	33 27       	eor	r19, r19
    727e:	81 e0       	ldi	r24, 0x01	; 1
    7280:	90 e0       	ldi	r25, 0x00	; 0
    7282:	02 c0       	rjmp	.+4      	; 0x7288 <board_init+0x4b8>
    7284:	88 0f       	add	r24, r24
    7286:	99 1f       	adc	r25, r25
    7288:	2a 95       	dec	r18
    728a:	e2 f7       	brpl	.-8      	; 0x7284 <board_init+0x4b4>
    728c:	48 2f       	mov	r20, r24
    728e:	ce 01       	movw	r24, r28
    7290:	8c 5a       	subi	r24, 0xAC	; 172
    7292:	9f 4f       	sbci	r25, 0xFF	; 255
    7294:	2b 81       	ldd	r18, Y+3	; 0x03
    7296:	fc 01       	movw	r30, r24
    7298:	20 83       	st	Z, r18
 * \brief: To get the base address of port number from defined pin
 * \param: pin. the pin number defined by IOPORT_CREATE_PIN
 */
__always_inline static PORT_t *arch_ioport_pin_to_base(ioport_pin_t pin)
{
	return arch_ioport_port_to_base(pin >> 3);
    729a:	ce 01       	movw	r24, r28
    729c:	8c 5a       	subi	r24, 0xAC	; 172
    729e:	9f 4f       	sbci	r25, 0xFF	; 255
    72a0:	fc 01       	movw	r30, r24
    72a2:	80 81       	ld	r24, Z
    72a4:	28 2f       	mov	r18, r24
    72a6:	26 95       	lsr	r18
    72a8:	26 95       	lsr	r18
    72aa:	26 95       	lsr	r18
    72ac:	ce 01       	movw	r24, r28
    72ae:	8b 5a       	subi	r24, 0xAB	; 171
    72b0:	9f 4f       	sbci	r25, 0xFF	; 255
    72b2:	fc 01       	movw	r30, r24
    72b4:	20 83       	st	Z, r18
 * \param: port number e.g. IOPORT_PORTB
 */
__always_inline static PORT_t *arch_ioport_port_to_base(uint8_t port)
{
	return (PORT_t *)((uintptr_t)(IOPORT_BASE_ADDRESS +
	       (port * IOPORT_PORT_OFFSET)));
    72b6:	ce 01       	movw	r24, r28
    72b8:	8b 5a       	subi	r24, 0xAB	; 171
    72ba:	9f 4f       	sbci	r25, 0xFF	; 255
    72bc:	fc 01       	movw	r30, r24
    72be:	80 81       	ld	r24, Z
    72c0:	28 2f       	mov	r18, r24
    72c2:	30 e0       	ldi	r19, 0x00	; 0
    72c4:	c9 01       	movw	r24, r18
    72c6:	88 0f       	add	r24, r24
    72c8:	99 1f       	adc	r25, r25
    72ca:	82 0f       	add	r24, r18
    72cc:	93 1f       	adc	r25, r19
 * \brief: To get the base address of port number
 * \param: port number e.g. IOPORT_PORTB
 */
__always_inline static PORT_t *arch_ioport_port_to_base(uint8_t port)
{
	return (PORT_t *)((uintptr_t)(IOPORT_BASE_ADDRESS +
    72ce:	80 96       	adiw	r24, 0x20	; 32
    72d0:	9c 01       	movw	r18, r24
    72d2:	ce 01       	movw	r24, r28
    72d4:	8a 5a       	subi	r24, 0xAA	; 170
    72d6:	9f 4f       	sbci	r25, 0xFF	; 255
    72d8:	fc 01       	movw	r30, r24
    72da:	31 83       	std	Z+1, r19	; 0x01
    72dc:	20 83       	st	Z, r18
    72de:	ce 01       	movw	r24, r28
    72e0:	88 5a       	subi	r24, 0xA8	; 168
    72e2:	9f 4f       	sbci	r25, 0xFF	; 255
    72e4:	fc 01       	movw	r30, r24
    72e6:	40 83       	st	Z, r20
    72e8:	ce 01       	movw	r24, r28
    72ea:	87 5a       	subi	r24, 0xA7	; 167
    72ec:	9f 4f       	sbci	r25, 0xFF	; 255
    72ee:	9e 01       	movw	r18, r28
    72f0:	2f 5a       	subi	r18, 0xAF	; 175
    72f2:	3f 4f       	sbci	r19, 0xFF	; 255
    72f4:	f9 01       	movw	r30, r18
    72f6:	20 81       	ld	r18, Z
    72f8:	31 81       	ldd	r19, Z+1	; 0x01
    72fa:	fc 01       	movw	r30, r24
    72fc:	31 83       	std	Z+1, r19	; 0x01
    72fe:	20 83       	st	Z, r18
__always_inline static inline void ioport_configure_port_pin(void *port,
		pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
    7300:	ce 01       	movw	r24, r28
    7302:	87 5a       	subi	r24, 0xA7	; 167
    7304:	9f 4f       	sbci	r25, 0xFF	; 255
    7306:	fc 01       	movw	r30, r24
    7308:	80 81       	ld	r24, Z
    730a:	91 81       	ldd	r25, Z+1	; 0x01
    730c:	81 70       	andi	r24, 0x01	; 1
    730e:	99 27       	eor	r25, r25
    7310:	89 2b       	or	r24, r25
    7312:	09 f4       	brne	.+2      	; 0x7316 <board_init+0x546>
    7314:	59 c0       	rjmp	.+178    	; 0x73c8 <board_init+0x5f8>
		if (flags & IOPORT_INIT_HIGH) {
    7316:	ce 01       	movw	r24, r28
    7318:	87 5a       	subi	r24, 0xA7	; 167
    731a:	9f 4f       	sbci	r25, 0xFF	; 255
    731c:	fc 01       	movw	r30, r24
    731e:	80 81       	ld	r24, Z
    7320:	91 81       	ldd	r25, Z+1	; 0x01
    7322:	82 70       	andi	r24, 0x02	; 2
    7324:	99 27       	eor	r25, r25
    7326:	89 2b       	or	r24, r25
    7328:	d1 f0       	breq	.+52     	; 0x735e <board_init+0x58e>
			*((uint8_t *)port + 2) |= pin_mask;
    732a:	ce 01       	movw	r24, r28
    732c:	8a 5a       	subi	r24, 0xAA	; 170
    732e:	9f 4f       	sbci	r25, 0xFF	; 255
    7330:	fc 01       	movw	r30, r24
    7332:	80 81       	ld	r24, Z
    7334:	91 81       	ldd	r25, Z+1	; 0x01
    7336:	02 96       	adiw	r24, 0x02	; 2
    7338:	9e 01       	movw	r18, r28
    733a:	2a 5a       	subi	r18, 0xAA	; 170
    733c:	3f 4f       	sbci	r19, 0xFF	; 255
    733e:	f9 01       	movw	r30, r18
    7340:	20 81       	ld	r18, Z
    7342:	31 81       	ldd	r19, Z+1	; 0x01
    7344:	2e 5f       	subi	r18, 0xFE	; 254
    7346:	3f 4f       	sbci	r19, 0xFF	; 255
    7348:	f9 01       	movw	r30, r18
    734a:	40 81       	ld	r20, Z
    734c:	9e 01       	movw	r18, r28
    734e:	28 5a       	subi	r18, 0xA8	; 168
    7350:	3f 4f       	sbci	r19, 0xFF	; 255
    7352:	f9 01       	movw	r30, r18
    7354:	20 81       	ld	r18, Z
    7356:	24 2b       	or	r18, r20
    7358:	fc 01       	movw	r30, r24
    735a:	20 83       	st	Z, r18
    735c:	1b c0       	rjmp	.+54     	; 0x7394 <board_init+0x5c4>
		} else {
			*((uint8_t *)port + 2) &= ~pin_mask;
    735e:	ce 01       	movw	r24, r28
    7360:	8a 5a       	subi	r24, 0xAA	; 170
    7362:	9f 4f       	sbci	r25, 0xFF	; 255
    7364:	fc 01       	movw	r30, r24
    7366:	80 81       	ld	r24, Z
    7368:	91 81       	ldd	r25, Z+1	; 0x01
    736a:	02 96       	adiw	r24, 0x02	; 2
    736c:	9e 01       	movw	r18, r28
    736e:	2a 5a       	subi	r18, 0xAA	; 170
    7370:	3f 4f       	sbci	r19, 0xFF	; 255
    7372:	f9 01       	movw	r30, r18
    7374:	20 81       	ld	r18, Z
    7376:	31 81       	ldd	r19, Z+1	; 0x01
    7378:	2e 5f       	subi	r18, 0xFE	; 254
    737a:	3f 4f       	sbci	r19, 0xFF	; 255
    737c:	f9 01       	movw	r30, r18
    737e:	20 81       	ld	r18, Z
    7380:	42 2f       	mov	r20, r18
    7382:	9e 01       	movw	r18, r28
    7384:	28 5a       	subi	r18, 0xA8	; 168
    7386:	3f 4f       	sbci	r19, 0xFF	; 255
    7388:	f9 01       	movw	r30, r18
    738a:	20 81       	ld	r18, Z
    738c:	20 95       	com	r18
    738e:	24 23       	and	r18, r20
    7390:	fc 01       	movw	r30, r24
    7392:	20 83       	st	Z, r18
		}

		*((uint8_t *)port + 1) |= pin_mask;
    7394:	ce 01       	movw	r24, r28
    7396:	8a 5a       	subi	r24, 0xAA	; 170
    7398:	9f 4f       	sbci	r25, 0xFF	; 255
    739a:	fc 01       	movw	r30, r24
    739c:	80 81       	ld	r24, Z
    739e:	91 81       	ldd	r25, Z+1	; 0x01
    73a0:	01 96       	adiw	r24, 0x01	; 1
    73a2:	9e 01       	movw	r18, r28
    73a4:	2a 5a       	subi	r18, 0xAA	; 170
    73a6:	3f 4f       	sbci	r19, 0xFF	; 255
    73a8:	f9 01       	movw	r30, r18
    73aa:	20 81       	ld	r18, Z
    73ac:	31 81       	ldd	r19, Z+1	; 0x01
    73ae:	2f 5f       	subi	r18, 0xFF	; 255
    73b0:	3f 4f       	sbci	r19, 0xFF	; 255
    73b2:	f9 01       	movw	r30, r18
    73b4:	40 81       	ld	r20, Z
    73b6:	9e 01       	movw	r18, r28
    73b8:	28 5a       	subi	r18, 0xA8	; 168
    73ba:	3f 4f       	sbci	r19, 0xFF	; 255
    73bc:	f9 01       	movw	r30, r18
    73be:	20 81       	ld	r18, Z
    73c0:	24 2b       	or	r18, r20
    73c2:	fc 01       	movw	r30, r24
    73c4:	20 83       	st	Z, r18
    73c6:	5a c0       	rjmp	.+180    	; 0x747c <board_init+0x6ac>
	} else {
		*((uint8_t *)port + 1) &= ~pin_mask;
    73c8:	ce 01       	movw	r24, r28
    73ca:	8a 5a       	subi	r24, 0xAA	; 170
    73cc:	9f 4f       	sbci	r25, 0xFF	; 255
    73ce:	fc 01       	movw	r30, r24
    73d0:	80 81       	ld	r24, Z
    73d2:	91 81       	ldd	r25, Z+1	; 0x01
    73d4:	01 96       	adiw	r24, 0x01	; 1
    73d6:	9e 01       	movw	r18, r28
    73d8:	2a 5a       	subi	r18, 0xAA	; 170
    73da:	3f 4f       	sbci	r19, 0xFF	; 255
    73dc:	f9 01       	movw	r30, r18
    73de:	20 81       	ld	r18, Z
    73e0:	31 81       	ldd	r19, Z+1	; 0x01
    73e2:	2f 5f       	subi	r18, 0xFF	; 255
    73e4:	3f 4f       	sbci	r19, 0xFF	; 255
    73e6:	f9 01       	movw	r30, r18
    73e8:	20 81       	ld	r18, Z
    73ea:	42 2f       	mov	r20, r18
    73ec:	9e 01       	movw	r18, r28
    73ee:	28 5a       	subi	r18, 0xA8	; 168
    73f0:	3f 4f       	sbci	r19, 0xFF	; 255
    73f2:	f9 01       	movw	r30, r18
    73f4:	20 81       	ld	r18, Z
    73f6:	20 95       	com	r18
    73f8:	24 23       	and	r18, r20
    73fa:	fc 01       	movw	r30, r24
    73fc:	20 83       	st	Z, r18
		if (flags & IOPORT_PULL_UP) {
    73fe:	ce 01       	movw	r24, r28
    7400:	87 5a       	subi	r24, 0xA7	; 167
    7402:	9f 4f       	sbci	r25, 0xFF	; 255
    7404:	fc 01       	movw	r30, r24
    7406:	80 81       	ld	r24, Z
    7408:	91 81       	ldd	r25, Z+1	; 0x01
    740a:	84 70       	andi	r24, 0x04	; 4
    740c:	99 27       	eor	r25, r25
    740e:	89 2b       	or	r24, r25
    7410:	d1 f0       	breq	.+52     	; 0x7446 <board_init+0x676>
			*((uint8_t *)port + 2) |= pin_mask;
    7412:	ce 01       	movw	r24, r28
    7414:	8a 5a       	subi	r24, 0xAA	; 170
    7416:	9f 4f       	sbci	r25, 0xFF	; 255
    7418:	fc 01       	movw	r30, r24
    741a:	80 81       	ld	r24, Z
    741c:	91 81       	ldd	r25, Z+1	; 0x01
    741e:	02 96       	adiw	r24, 0x02	; 2
    7420:	9e 01       	movw	r18, r28
    7422:	2a 5a       	subi	r18, 0xAA	; 170
    7424:	3f 4f       	sbci	r19, 0xFF	; 255
    7426:	f9 01       	movw	r30, r18
    7428:	20 81       	ld	r18, Z
    742a:	31 81       	ldd	r19, Z+1	; 0x01
    742c:	2e 5f       	subi	r18, 0xFE	; 254
    742e:	3f 4f       	sbci	r19, 0xFF	; 255
    7430:	f9 01       	movw	r30, r18
    7432:	40 81       	ld	r20, Z
    7434:	9e 01       	movw	r18, r28
    7436:	28 5a       	subi	r18, 0xA8	; 168
    7438:	3f 4f       	sbci	r19, 0xFF	; 255
    743a:	f9 01       	movw	r30, r18
    743c:	20 81       	ld	r18, Z
    743e:	24 2b       	or	r18, r20
    7440:	fc 01       	movw	r30, r24
    7442:	20 83       	st	Z, r18
    7444:	1b c0       	rjmp	.+54     	; 0x747c <board_init+0x6ac>
		} else {
			*((uint8_t *)port + 2) &= ~pin_mask;
    7446:	ce 01       	movw	r24, r28
    7448:	8a 5a       	subi	r24, 0xAA	; 170
    744a:	9f 4f       	sbci	r25, 0xFF	; 255
    744c:	fc 01       	movw	r30, r24
    744e:	80 81       	ld	r24, Z
    7450:	91 81       	ldd	r25, Z+1	; 0x01
    7452:	02 96       	adiw	r24, 0x02	; 2
    7454:	9e 01       	movw	r18, r28
    7456:	2a 5a       	subi	r18, 0xAA	; 170
    7458:	3f 4f       	sbci	r19, 0xFF	; 255
    745a:	f9 01       	movw	r30, r18
    745c:	20 81       	ld	r18, Z
    745e:	31 81       	ldd	r19, Z+1	; 0x01
    7460:	2e 5f       	subi	r18, 0xFE	; 254
    7462:	3f 4f       	sbci	r19, 0xFF	; 255
    7464:	f9 01       	movw	r30, r18
    7466:	20 81       	ld	r18, Z
    7468:	42 2f       	mov	r20, r18
    746a:	9e 01       	movw	r18, r28
    746c:	28 5a       	subi	r18, 0xA8	; 168
    746e:	3f 4f       	sbci	r19, 0xFF	; 255
    7470:	f9 01       	movw	r30, r18
    7472:	20 81       	ld	r18, Z
    7474:	20 95       	com	r18
    7476:	24 23       	and	r18, r20
    7478:	fc 01       	movw	r30, r24
    747a:	20 83       	st	Z, r18
    747c:	8e e0       	ldi	r24, 0x0E	; 14
    747e:	8c 83       	std	Y+4, r24	; 0x04
    7480:	ce 01       	movw	r24, r28
    7482:	89 5b       	subi	r24, 0xB9	; 185
    7484:	9f 4f       	sbci	r25, 0xFF	; 255
    7486:	24 e0       	ldi	r18, 0x04	; 4
    7488:	30 e0       	ldi	r19, 0x00	; 0
    748a:	fc 01       	movw	r30, r24
    748c:	31 83       	std	Z+1, r19	; 0x01
    748e:	20 83       	st	Z, r18
    7490:	ce 01       	movw	r24, r28
    7492:	87 5b       	subi	r24, 0xB7	; 183
    7494:	9f 4f       	sbci	r25, 0xFF	; 255
    7496:	2c 81       	ldd	r18, Y+4	; 0x04
    7498:	fc 01       	movw	r30, r24
    749a:	20 83       	st	Z, r18
 * \param: pin. the pin number defined by IOPORT_CREATE_PIN
 */
__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask
	(ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
    749c:	ce 01       	movw	r24, r28
    749e:	87 5b       	subi	r24, 0xB7	; 183
    74a0:	9f 4f       	sbci	r25, 0xFF	; 255
    74a2:	fc 01       	movw	r30, r24
    74a4:	80 81       	ld	r24, Z
    74a6:	88 2f       	mov	r24, r24
    74a8:	90 e0       	ldi	r25, 0x00	; 0
    74aa:	9c 01       	movw	r18, r24
    74ac:	27 70       	andi	r18, 0x07	; 7
    74ae:	33 27       	eor	r19, r19
    74b0:	81 e0       	ldi	r24, 0x01	; 1
    74b2:	90 e0       	ldi	r25, 0x00	; 0
    74b4:	02 c0       	rjmp	.+4      	; 0x74ba <board_init+0x6ea>
    74b6:	88 0f       	add	r24, r24
    74b8:	99 1f       	adc	r25, r25
    74ba:	2a 95       	dec	r18
    74bc:	e2 f7       	brpl	.-8      	; 0x74b6 <board_init+0x6e6>
    74be:	48 2f       	mov	r20, r24
    74c0:	ce 01       	movw	r24, r28
    74c2:	86 5b       	subi	r24, 0xB6	; 182
    74c4:	9f 4f       	sbci	r25, 0xFF	; 255
    74c6:	2c 81       	ldd	r18, Y+4	; 0x04
    74c8:	fc 01       	movw	r30, r24
    74ca:	20 83       	st	Z, r18
 * \brief: To get the base address of port number from defined pin
 * \param: pin. the pin number defined by IOPORT_CREATE_PIN
 */
__always_inline static PORT_t *arch_ioport_pin_to_base(ioport_pin_t pin)
{
	return arch_ioport_port_to_base(pin >> 3);
    74cc:	ce 01       	movw	r24, r28
    74ce:	86 5b       	subi	r24, 0xB6	; 182
    74d0:	9f 4f       	sbci	r25, 0xFF	; 255
    74d2:	fc 01       	movw	r30, r24
    74d4:	80 81       	ld	r24, Z
    74d6:	28 2f       	mov	r18, r24
    74d8:	26 95       	lsr	r18
    74da:	26 95       	lsr	r18
    74dc:	26 95       	lsr	r18
    74de:	ce 01       	movw	r24, r28
    74e0:	85 5b       	subi	r24, 0xB5	; 181
    74e2:	9f 4f       	sbci	r25, 0xFF	; 255
    74e4:	fc 01       	movw	r30, r24
    74e6:	20 83       	st	Z, r18
 * \param: port number e.g. IOPORT_PORTB
 */
__always_inline static PORT_t *arch_ioport_port_to_base(uint8_t port)
{
	return (PORT_t *)((uintptr_t)(IOPORT_BASE_ADDRESS +
	       (port * IOPORT_PORT_OFFSET)));
    74e8:	ce 01       	movw	r24, r28
    74ea:	85 5b       	subi	r24, 0xB5	; 181
    74ec:	9f 4f       	sbci	r25, 0xFF	; 255
    74ee:	fc 01       	movw	r30, r24
    74f0:	80 81       	ld	r24, Z
    74f2:	28 2f       	mov	r18, r24
    74f4:	30 e0       	ldi	r19, 0x00	; 0
    74f6:	c9 01       	movw	r24, r18
    74f8:	88 0f       	add	r24, r24
    74fa:	99 1f       	adc	r25, r25
    74fc:	82 0f       	add	r24, r18
    74fe:	93 1f       	adc	r25, r19
 * \brief: To get the base address of port number
 * \param: port number e.g. IOPORT_PORTB
 */
__always_inline static PORT_t *arch_ioport_port_to_base(uint8_t port)
{
	return (PORT_t *)((uintptr_t)(IOPORT_BASE_ADDRESS +
    7500:	80 96       	adiw	r24, 0x20	; 32
    7502:	9c 01       	movw	r18, r24
    7504:	ce 01       	movw	r24, r28
    7506:	84 5b       	subi	r24, 0xB4	; 180
    7508:	9f 4f       	sbci	r25, 0xFF	; 255
    750a:	fc 01       	movw	r30, r24
    750c:	31 83       	std	Z+1, r19	; 0x01
    750e:	20 83       	st	Z, r18
    7510:	ce 01       	movw	r24, r28
    7512:	82 5b       	subi	r24, 0xB2	; 178
    7514:	9f 4f       	sbci	r25, 0xFF	; 255
    7516:	fc 01       	movw	r30, r24
    7518:	40 83       	st	Z, r20
    751a:	ce 01       	movw	r24, r28
    751c:	81 5b       	subi	r24, 0xB1	; 177
    751e:	9f 4f       	sbci	r25, 0xFF	; 255
    7520:	9e 01       	movw	r18, r28
    7522:	29 5b       	subi	r18, 0xB9	; 185
    7524:	3f 4f       	sbci	r19, 0xFF	; 255
    7526:	f9 01       	movw	r30, r18
    7528:	20 81       	ld	r18, Z
    752a:	31 81       	ldd	r19, Z+1	; 0x01
    752c:	fc 01       	movw	r30, r24
    752e:	31 83       	std	Z+1, r19	; 0x01
    7530:	20 83       	st	Z, r18
__always_inline static inline void ioport_configure_port_pin(void *port,
		pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
    7532:	ce 01       	movw	r24, r28
    7534:	81 5b       	subi	r24, 0xB1	; 177
    7536:	9f 4f       	sbci	r25, 0xFF	; 255
    7538:	fc 01       	movw	r30, r24
    753a:	80 81       	ld	r24, Z
    753c:	91 81       	ldd	r25, Z+1	; 0x01
    753e:	81 70       	andi	r24, 0x01	; 1
    7540:	99 27       	eor	r25, r25
    7542:	89 2b       	or	r24, r25
    7544:	09 f4       	brne	.+2      	; 0x7548 <board_init+0x778>
    7546:	59 c0       	rjmp	.+178    	; 0x75fa <board_init+0x82a>
		if (flags & IOPORT_INIT_HIGH) {
    7548:	ce 01       	movw	r24, r28
    754a:	81 5b       	subi	r24, 0xB1	; 177
    754c:	9f 4f       	sbci	r25, 0xFF	; 255
    754e:	fc 01       	movw	r30, r24
    7550:	80 81       	ld	r24, Z
    7552:	91 81       	ldd	r25, Z+1	; 0x01
    7554:	82 70       	andi	r24, 0x02	; 2
    7556:	99 27       	eor	r25, r25
    7558:	89 2b       	or	r24, r25
    755a:	d1 f0       	breq	.+52     	; 0x7590 <board_init+0x7c0>
			*((uint8_t *)port + 2) |= pin_mask;
    755c:	ce 01       	movw	r24, r28
    755e:	84 5b       	subi	r24, 0xB4	; 180
    7560:	9f 4f       	sbci	r25, 0xFF	; 255
    7562:	fc 01       	movw	r30, r24
    7564:	80 81       	ld	r24, Z
    7566:	91 81       	ldd	r25, Z+1	; 0x01
    7568:	02 96       	adiw	r24, 0x02	; 2
    756a:	9e 01       	movw	r18, r28
    756c:	24 5b       	subi	r18, 0xB4	; 180
    756e:	3f 4f       	sbci	r19, 0xFF	; 255
    7570:	f9 01       	movw	r30, r18
    7572:	20 81       	ld	r18, Z
    7574:	31 81       	ldd	r19, Z+1	; 0x01
    7576:	2e 5f       	subi	r18, 0xFE	; 254
    7578:	3f 4f       	sbci	r19, 0xFF	; 255
    757a:	f9 01       	movw	r30, r18
    757c:	40 81       	ld	r20, Z
    757e:	9e 01       	movw	r18, r28
    7580:	22 5b       	subi	r18, 0xB2	; 178
    7582:	3f 4f       	sbci	r19, 0xFF	; 255
    7584:	f9 01       	movw	r30, r18
    7586:	20 81       	ld	r18, Z
    7588:	24 2b       	or	r18, r20
    758a:	fc 01       	movw	r30, r24
    758c:	20 83       	st	Z, r18
    758e:	1b c0       	rjmp	.+54     	; 0x75c6 <board_init+0x7f6>
		} else {
			*((uint8_t *)port + 2) &= ~pin_mask;
    7590:	ce 01       	movw	r24, r28
    7592:	84 5b       	subi	r24, 0xB4	; 180
    7594:	9f 4f       	sbci	r25, 0xFF	; 255
    7596:	fc 01       	movw	r30, r24
    7598:	80 81       	ld	r24, Z
    759a:	91 81       	ldd	r25, Z+1	; 0x01
    759c:	02 96       	adiw	r24, 0x02	; 2
    759e:	9e 01       	movw	r18, r28
    75a0:	24 5b       	subi	r18, 0xB4	; 180
    75a2:	3f 4f       	sbci	r19, 0xFF	; 255
    75a4:	f9 01       	movw	r30, r18
    75a6:	20 81       	ld	r18, Z
    75a8:	31 81       	ldd	r19, Z+1	; 0x01
    75aa:	2e 5f       	subi	r18, 0xFE	; 254
    75ac:	3f 4f       	sbci	r19, 0xFF	; 255
    75ae:	f9 01       	movw	r30, r18
    75b0:	20 81       	ld	r18, Z
    75b2:	42 2f       	mov	r20, r18
    75b4:	9e 01       	movw	r18, r28
    75b6:	22 5b       	subi	r18, 0xB2	; 178
    75b8:	3f 4f       	sbci	r19, 0xFF	; 255
    75ba:	f9 01       	movw	r30, r18
    75bc:	20 81       	ld	r18, Z
    75be:	20 95       	com	r18
    75c0:	24 23       	and	r18, r20
    75c2:	fc 01       	movw	r30, r24
    75c4:	20 83       	st	Z, r18
		}

		*((uint8_t *)port + 1) |= pin_mask;
    75c6:	ce 01       	movw	r24, r28
    75c8:	84 5b       	subi	r24, 0xB4	; 180
    75ca:	9f 4f       	sbci	r25, 0xFF	; 255
    75cc:	fc 01       	movw	r30, r24
    75ce:	80 81       	ld	r24, Z
    75d0:	91 81       	ldd	r25, Z+1	; 0x01
    75d2:	01 96       	adiw	r24, 0x01	; 1
    75d4:	9e 01       	movw	r18, r28
    75d6:	24 5b       	subi	r18, 0xB4	; 180
    75d8:	3f 4f       	sbci	r19, 0xFF	; 255
    75da:	f9 01       	movw	r30, r18
    75dc:	20 81       	ld	r18, Z
    75de:	31 81       	ldd	r19, Z+1	; 0x01
    75e0:	2f 5f       	subi	r18, 0xFF	; 255
    75e2:	3f 4f       	sbci	r19, 0xFF	; 255
    75e4:	f9 01       	movw	r30, r18
    75e6:	40 81       	ld	r20, Z
    75e8:	9e 01       	movw	r18, r28
    75ea:	22 5b       	subi	r18, 0xB2	; 178
    75ec:	3f 4f       	sbci	r19, 0xFF	; 255
    75ee:	f9 01       	movw	r30, r18
    75f0:	20 81       	ld	r18, Z
    75f2:	24 2b       	or	r18, r20
    75f4:	fc 01       	movw	r30, r24
    75f6:	20 83       	st	Z, r18
    75f8:	5a c0       	rjmp	.+180    	; 0x76ae <board_init+0x8de>
	} else {
		*((uint8_t *)port + 1) &= ~pin_mask;
    75fa:	ce 01       	movw	r24, r28
    75fc:	84 5b       	subi	r24, 0xB4	; 180
    75fe:	9f 4f       	sbci	r25, 0xFF	; 255
    7600:	fc 01       	movw	r30, r24
    7602:	80 81       	ld	r24, Z
    7604:	91 81       	ldd	r25, Z+1	; 0x01
    7606:	01 96       	adiw	r24, 0x01	; 1
    7608:	9e 01       	movw	r18, r28
    760a:	24 5b       	subi	r18, 0xB4	; 180
    760c:	3f 4f       	sbci	r19, 0xFF	; 255
    760e:	f9 01       	movw	r30, r18
    7610:	20 81       	ld	r18, Z
    7612:	31 81       	ldd	r19, Z+1	; 0x01
    7614:	2f 5f       	subi	r18, 0xFF	; 255
    7616:	3f 4f       	sbci	r19, 0xFF	; 255
    7618:	f9 01       	movw	r30, r18
    761a:	20 81       	ld	r18, Z
    761c:	42 2f       	mov	r20, r18
    761e:	9e 01       	movw	r18, r28
    7620:	22 5b       	subi	r18, 0xB2	; 178
    7622:	3f 4f       	sbci	r19, 0xFF	; 255
    7624:	f9 01       	movw	r30, r18
    7626:	20 81       	ld	r18, Z
    7628:	20 95       	com	r18
    762a:	24 23       	and	r18, r20
    762c:	fc 01       	movw	r30, r24
    762e:	20 83       	st	Z, r18
		if (flags & IOPORT_PULL_UP) {
    7630:	ce 01       	movw	r24, r28
    7632:	81 5b       	subi	r24, 0xB1	; 177
    7634:	9f 4f       	sbci	r25, 0xFF	; 255
    7636:	fc 01       	movw	r30, r24
    7638:	80 81       	ld	r24, Z
    763a:	91 81       	ldd	r25, Z+1	; 0x01
    763c:	84 70       	andi	r24, 0x04	; 4
    763e:	99 27       	eor	r25, r25
    7640:	89 2b       	or	r24, r25
    7642:	d1 f0       	breq	.+52     	; 0x7678 <board_init+0x8a8>
			*((uint8_t *)port + 2) |= pin_mask;
    7644:	ce 01       	movw	r24, r28
    7646:	84 5b       	subi	r24, 0xB4	; 180
    7648:	9f 4f       	sbci	r25, 0xFF	; 255
    764a:	fc 01       	movw	r30, r24
    764c:	80 81       	ld	r24, Z
    764e:	91 81       	ldd	r25, Z+1	; 0x01
    7650:	02 96       	adiw	r24, 0x02	; 2
    7652:	9e 01       	movw	r18, r28
    7654:	24 5b       	subi	r18, 0xB4	; 180
    7656:	3f 4f       	sbci	r19, 0xFF	; 255
    7658:	f9 01       	movw	r30, r18
    765a:	20 81       	ld	r18, Z
    765c:	31 81       	ldd	r19, Z+1	; 0x01
    765e:	2e 5f       	subi	r18, 0xFE	; 254
    7660:	3f 4f       	sbci	r19, 0xFF	; 255
    7662:	f9 01       	movw	r30, r18
    7664:	40 81       	ld	r20, Z
    7666:	9e 01       	movw	r18, r28
    7668:	22 5b       	subi	r18, 0xB2	; 178
    766a:	3f 4f       	sbci	r19, 0xFF	; 255
    766c:	f9 01       	movw	r30, r18
    766e:	20 81       	ld	r18, Z
    7670:	24 2b       	or	r18, r20
    7672:	fc 01       	movw	r30, r24
    7674:	20 83       	st	Z, r18
    7676:	1b c0       	rjmp	.+54     	; 0x76ae <board_init+0x8de>
		} else {
			*((uint8_t *)port + 2) &= ~pin_mask;
    7678:	ce 01       	movw	r24, r28
    767a:	84 5b       	subi	r24, 0xB4	; 180
    767c:	9f 4f       	sbci	r25, 0xFF	; 255
    767e:	fc 01       	movw	r30, r24
    7680:	80 81       	ld	r24, Z
    7682:	91 81       	ldd	r25, Z+1	; 0x01
    7684:	02 96       	adiw	r24, 0x02	; 2
    7686:	9e 01       	movw	r18, r28
    7688:	24 5b       	subi	r18, 0xB4	; 180
    768a:	3f 4f       	sbci	r19, 0xFF	; 255
    768c:	f9 01       	movw	r30, r18
    768e:	20 81       	ld	r18, Z
    7690:	31 81       	ldd	r19, Z+1	; 0x01
    7692:	2e 5f       	subi	r18, 0xFE	; 254
    7694:	3f 4f       	sbci	r19, 0xFF	; 255
    7696:	f9 01       	movw	r30, r18
    7698:	20 81       	ld	r18, Z
    769a:	42 2f       	mov	r20, r18
    769c:	9e 01       	movw	r18, r28
    769e:	22 5b       	subi	r18, 0xB2	; 178
    76a0:	3f 4f       	sbci	r19, 0xFF	; 255
    76a2:	f9 01       	movw	r30, r18
    76a4:	20 81       	ld	r18, Z
    76a6:	20 95       	com	r18
    76a8:	24 23       	and	r18, r20
    76aa:	fc 01       	movw	r30, r24
    76ac:	20 83       	st	Z, r18
    76ae:	81 e2       	ldi	r24, 0x21	; 33
    76b0:	8d 83       	std	Y+5, r24	; 0x05
    76b2:	83 e0       	ldi	r24, 0x03	; 3
    76b4:	90 e0       	ldi	r25, 0x00	; 0
    76b6:	9e af       	std	Y+62, r25	; 0x3e
    76b8:	8d af       	std	Y+61, r24	; 0x3d
    76ba:	8d 81       	ldd	r24, Y+5	; 0x05
    76bc:	8f af       	std	Y+63, r24	; 0x3f
 * \param: pin. the pin number defined by IOPORT_CREATE_PIN
 */
__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask
	(ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
    76be:	8f ad       	ldd	r24, Y+63	; 0x3f
    76c0:	88 2f       	mov	r24, r24
    76c2:	90 e0       	ldi	r25, 0x00	; 0
    76c4:	9c 01       	movw	r18, r24
    76c6:	27 70       	andi	r18, 0x07	; 7
    76c8:	33 27       	eor	r19, r19
    76ca:	81 e0       	ldi	r24, 0x01	; 1
    76cc:	90 e0       	ldi	r25, 0x00	; 0
    76ce:	02 c0       	rjmp	.+4      	; 0x76d4 <board_init+0x904>
    76d0:	88 0f       	add	r24, r24
    76d2:	99 1f       	adc	r25, r25
    76d4:	2a 95       	dec	r18
    76d6:	e2 f7       	brpl	.-8      	; 0x76d0 <board_init+0x900>
    76d8:	48 2f       	mov	r20, r24
    76da:	2d 81       	ldd	r18, Y+5	; 0x05
    76dc:	ce 01       	movw	r24, r28
    76de:	80 5c       	subi	r24, 0xC0	; 192
    76e0:	9f 4f       	sbci	r25, 0xFF	; 255
    76e2:	fc 01       	movw	r30, r24
    76e4:	20 83       	st	Z, r18
 * \brief: To get the base address of port number from defined pin
 * \param: pin. the pin number defined by IOPORT_CREATE_PIN
 */
__always_inline static PORT_t *arch_ioport_pin_to_base(ioport_pin_t pin)
{
	return arch_ioport_port_to_base(pin >> 3);
    76e6:	ce 01       	movw	r24, r28
    76e8:	80 5c       	subi	r24, 0xC0	; 192
    76ea:	9f 4f       	sbci	r25, 0xFF	; 255
    76ec:	fc 01       	movw	r30, r24
    76ee:	80 81       	ld	r24, Z
    76f0:	28 2f       	mov	r18, r24
    76f2:	26 95       	lsr	r18
    76f4:	26 95       	lsr	r18
    76f6:	26 95       	lsr	r18
    76f8:	ce 01       	movw	r24, r28
    76fa:	8f 5b       	subi	r24, 0xBF	; 191
    76fc:	9f 4f       	sbci	r25, 0xFF	; 255
    76fe:	fc 01       	movw	r30, r24
    7700:	20 83       	st	Z, r18
 * \param: port number e.g. IOPORT_PORTB
 */
__always_inline static PORT_t *arch_ioport_port_to_base(uint8_t port)
{
	return (PORT_t *)((uintptr_t)(IOPORT_BASE_ADDRESS +
	       (port * IOPORT_PORT_OFFSET)));
    7702:	ce 01       	movw	r24, r28
    7704:	8f 5b       	subi	r24, 0xBF	; 191
    7706:	9f 4f       	sbci	r25, 0xFF	; 255
    7708:	fc 01       	movw	r30, r24
    770a:	80 81       	ld	r24, Z
    770c:	28 2f       	mov	r18, r24
    770e:	30 e0       	ldi	r19, 0x00	; 0
    7710:	c9 01       	movw	r24, r18
    7712:	88 0f       	add	r24, r24
    7714:	99 1f       	adc	r25, r25
    7716:	82 0f       	add	r24, r18
    7718:	93 1f       	adc	r25, r19
 * \brief: To get the base address of port number
 * \param: port number e.g. IOPORT_PORTB
 */
__always_inline static PORT_t *arch_ioport_port_to_base(uint8_t port)
{
	return (PORT_t *)((uintptr_t)(IOPORT_BASE_ADDRESS +
    771a:	80 96       	adiw	r24, 0x20	; 32
    771c:	9c 01       	movw	r18, r24
    771e:	ce 01       	movw	r24, r28
    7720:	8e 5b       	subi	r24, 0xBE	; 190
    7722:	9f 4f       	sbci	r25, 0xFF	; 255
    7724:	fc 01       	movw	r30, r24
    7726:	31 83       	std	Z+1, r19	; 0x01
    7728:	20 83       	st	Z, r18
    772a:	ce 01       	movw	r24, r28
    772c:	8c 5b       	subi	r24, 0xBC	; 188
    772e:	9f 4f       	sbci	r25, 0xFF	; 255
    7730:	fc 01       	movw	r30, r24
    7732:	40 83       	st	Z, r20
    7734:	ce 01       	movw	r24, r28
    7736:	8b 5b       	subi	r24, 0xBB	; 187
    7738:	9f 4f       	sbci	r25, 0xFF	; 255
    773a:	2d ad       	ldd	r18, Y+61	; 0x3d
    773c:	3e ad       	ldd	r19, Y+62	; 0x3e
    773e:	fc 01       	movw	r30, r24
    7740:	31 83       	std	Z+1, r19	; 0x01
    7742:	20 83       	st	Z, r18
__always_inline static inline void ioport_configure_port_pin(void *port,
		pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
    7744:	ce 01       	movw	r24, r28
    7746:	8b 5b       	subi	r24, 0xBB	; 187
    7748:	9f 4f       	sbci	r25, 0xFF	; 255
    774a:	fc 01       	movw	r30, r24
    774c:	80 81       	ld	r24, Z
    774e:	91 81       	ldd	r25, Z+1	; 0x01
    7750:	81 70       	andi	r24, 0x01	; 1
    7752:	99 27       	eor	r25, r25
    7754:	89 2b       	or	r24, r25
    7756:	09 f4       	brne	.+2      	; 0x775a <board_init+0x98a>
    7758:	59 c0       	rjmp	.+178    	; 0x780c <board_init+0xa3c>
		if (flags & IOPORT_INIT_HIGH) {
    775a:	ce 01       	movw	r24, r28
    775c:	8b 5b       	subi	r24, 0xBB	; 187
    775e:	9f 4f       	sbci	r25, 0xFF	; 255
    7760:	fc 01       	movw	r30, r24
    7762:	80 81       	ld	r24, Z
    7764:	91 81       	ldd	r25, Z+1	; 0x01
    7766:	82 70       	andi	r24, 0x02	; 2
    7768:	99 27       	eor	r25, r25
    776a:	89 2b       	or	r24, r25
    776c:	d1 f0       	breq	.+52     	; 0x77a2 <board_init+0x9d2>
			*((uint8_t *)port + 2) |= pin_mask;
    776e:	ce 01       	movw	r24, r28
    7770:	8e 5b       	subi	r24, 0xBE	; 190
    7772:	9f 4f       	sbci	r25, 0xFF	; 255
    7774:	fc 01       	movw	r30, r24
    7776:	80 81       	ld	r24, Z
    7778:	91 81       	ldd	r25, Z+1	; 0x01
    777a:	02 96       	adiw	r24, 0x02	; 2
    777c:	9e 01       	movw	r18, r28
    777e:	2e 5b       	subi	r18, 0xBE	; 190
    7780:	3f 4f       	sbci	r19, 0xFF	; 255
    7782:	f9 01       	movw	r30, r18
    7784:	20 81       	ld	r18, Z
    7786:	31 81       	ldd	r19, Z+1	; 0x01
    7788:	2e 5f       	subi	r18, 0xFE	; 254
    778a:	3f 4f       	sbci	r19, 0xFF	; 255
    778c:	f9 01       	movw	r30, r18
    778e:	40 81       	ld	r20, Z
    7790:	9e 01       	movw	r18, r28
    7792:	2c 5b       	subi	r18, 0xBC	; 188
    7794:	3f 4f       	sbci	r19, 0xFF	; 255
    7796:	f9 01       	movw	r30, r18
    7798:	20 81       	ld	r18, Z
    779a:	24 2b       	or	r18, r20
    779c:	fc 01       	movw	r30, r24
    779e:	20 83       	st	Z, r18
    77a0:	1b c0       	rjmp	.+54     	; 0x77d8 <board_init+0xa08>
		} else {
			*((uint8_t *)port + 2) &= ~pin_mask;
    77a2:	ce 01       	movw	r24, r28
    77a4:	8e 5b       	subi	r24, 0xBE	; 190
    77a6:	9f 4f       	sbci	r25, 0xFF	; 255
    77a8:	fc 01       	movw	r30, r24
    77aa:	80 81       	ld	r24, Z
    77ac:	91 81       	ldd	r25, Z+1	; 0x01
    77ae:	02 96       	adiw	r24, 0x02	; 2
    77b0:	9e 01       	movw	r18, r28
    77b2:	2e 5b       	subi	r18, 0xBE	; 190
    77b4:	3f 4f       	sbci	r19, 0xFF	; 255
    77b6:	f9 01       	movw	r30, r18
    77b8:	20 81       	ld	r18, Z
    77ba:	31 81       	ldd	r19, Z+1	; 0x01
    77bc:	2e 5f       	subi	r18, 0xFE	; 254
    77be:	3f 4f       	sbci	r19, 0xFF	; 255
    77c0:	f9 01       	movw	r30, r18
    77c2:	20 81       	ld	r18, Z
    77c4:	42 2f       	mov	r20, r18
    77c6:	9e 01       	movw	r18, r28
    77c8:	2c 5b       	subi	r18, 0xBC	; 188
    77ca:	3f 4f       	sbci	r19, 0xFF	; 255
    77cc:	f9 01       	movw	r30, r18
    77ce:	20 81       	ld	r18, Z
    77d0:	20 95       	com	r18
    77d2:	24 23       	and	r18, r20
    77d4:	fc 01       	movw	r30, r24
    77d6:	20 83       	st	Z, r18
		}

		*((uint8_t *)port + 1) |= pin_mask;
    77d8:	ce 01       	movw	r24, r28
    77da:	8e 5b       	subi	r24, 0xBE	; 190
    77dc:	9f 4f       	sbci	r25, 0xFF	; 255
    77de:	fc 01       	movw	r30, r24
    77e0:	80 81       	ld	r24, Z
    77e2:	91 81       	ldd	r25, Z+1	; 0x01
    77e4:	01 96       	adiw	r24, 0x01	; 1
    77e6:	9e 01       	movw	r18, r28
    77e8:	2e 5b       	subi	r18, 0xBE	; 190
    77ea:	3f 4f       	sbci	r19, 0xFF	; 255
    77ec:	f9 01       	movw	r30, r18
    77ee:	20 81       	ld	r18, Z
    77f0:	31 81       	ldd	r19, Z+1	; 0x01
    77f2:	2f 5f       	subi	r18, 0xFF	; 255
    77f4:	3f 4f       	sbci	r19, 0xFF	; 255
    77f6:	f9 01       	movw	r30, r18
    77f8:	40 81       	ld	r20, Z
    77fa:	9e 01       	movw	r18, r28
    77fc:	2c 5b       	subi	r18, 0xBC	; 188
    77fe:	3f 4f       	sbci	r19, 0xFF	; 255
    7800:	f9 01       	movw	r30, r18
    7802:	20 81       	ld	r18, Z
    7804:	24 2b       	or	r18, r20
    7806:	fc 01       	movw	r30, r24
    7808:	20 83       	st	Z, r18
    780a:	5a c0       	rjmp	.+180    	; 0x78c0 <board_init+0xaf0>
	} else {
		*((uint8_t *)port + 1) &= ~pin_mask;
    780c:	ce 01       	movw	r24, r28
    780e:	8e 5b       	subi	r24, 0xBE	; 190
    7810:	9f 4f       	sbci	r25, 0xFF	; 255
    7812:	fc 01       	movw	r30, r24
    7814:	80 81       	ld	r24, Z
    7816:	91 81       	ldd	r25, Z+1	; 0x01
    7818:	01 96       	adiw	r24, 0x01	; 1
    781a:	9e 01       	movw	r18, r28
    781c:	2e 5b       	subi	r18, 0xBE	; 190
    781e:	3f 4f       	sbci	r19, 0xFF	; 255
    7820:	f9 01       	movw	r30, r18
    7822:	20 81       	ld	r18, Z
    7824:	31 81       	ldd	r19, Z+1	; 0x01
    7826:	2f 5f       	subi	r18, 0xFF	; 255
    7828:	3f 4f       	sbci	r19, 0xFF	; 255
    782a:	f9 01       	movw	r30, r18
    782c:	20 81       	ld	r18, Z
    782e:	42 2f       	mov	r20, r18
    7830:	9e 01       	movw	r18, r28
    7832:	2c 5b       	subi	r18, 0xBC	; 188
    7834:	3f 4f       	sbci	r19, 0xFF	; 255
    7836:	f9 01       	movw	r30, r18
    7838:	20 81       	ld	r18, Z
    783a:	20 95       	com	r18
    783c:	24 23       	and	r18, r20
    783e:	fc 01       	movw	r30, r24
    7840:	20 83       	st	Z, r18
		if (flags & IOPORT_PULL_UP) {
    7842:	ce 01       	movw	r24, r28
    7844:	8b 5b       	subi	r24, 0xBB	; 187
    7846:	9f 4f       	sbci	r25, 0xFF	; 255
    7848:	fc 01       	movw	r30, r24
    784a:	80 81       	ld	r24, Z
    784c:	91 81       	ldd	r25, Z+1	; 0x01
    784e:	84 70       	andi	r24, 0x04	; 4
    7850:	99 27       	eor	r25, r25
    7852:	89 2b       	or	r24, r25
    7854:	d1 f0       	breq	.+52     	; 0x788a <board_init+0xaba>
			*((uint8_t *)port + 2) |= pin_mask;
    7856:	ce 01       	movw	r24, r28
    7858:	8e 5b       	subi	r24, 0xBE	; 190
    785a:	9f 4f       	sbci	r25, 0xFF	; 255
    785c:	fc 01       	movw	r30, r24
    785e:	80 81       	ld	r24, Z
    7860:	91 81       	ldd	r25, Z+1	; 0x01
    7862:	02 96       	adiw	r24, 0x02	; 2
    7864:	9e 01       	movw	r18, r28
    7866:	2e 5b       	subi	r18, 0xBE	; 190
    7868:	3f 4f       	sbci	r19, 0xFF	; 255
    786a:	f9 01       	movw	r30, r18
    786c:	20 81       	ld	r18, Z
    786e:	31 81       	ldd	r19, Z+1	; 0x01
    7870:	2e 5f       	subi	r18, 0xFE	; 254
    7872:	3f 4f       	sbci	r19, 0xFF	; 255
    7874:	f9 01       	movw	r30, r18
    7876:	40 81       	ld	r20, Z
    7878:	9e 01       	movw	r18, r28
    787a:	2c 5b       	subi	r18, 0xBC	; 188
    787c:	3f 4f       	sbci	r19, 0xFF	; 255
    787e:	f9 01       	movw	r30, r18
    7880:	20 81       	ld	r18, Z
    7882:	24 2b       	or	r18, r20
    7884:	fc 01       	movw	r30, r24
    7886:	20 83       	st	Z, r18
    7888:	1b c0       	rjmp	.+54     	; 0x78c0 <board_init+0xaf0>
		} else {
			*((uint8_t *)port + 2) &= ~pin_mask;
    788a:	ce 01       	movw	r24, r28
    788c:	8e 5b       	subi	r24, 0xBE	; 190
    788e:	9f 4f       	sbci	r25, 0xFF	; 255
    7890:	fc 01       	movw	r30, r24
    7892:	80 81       	ld	r24, Z
    7894:	91 81       	ldd	r25, Z+1	; 0x01
    7896:	02 96       	adiw	r24, 0x02	; 2
    7898:	9e 01       	movw	r18, r28
    789a:	2e 5b       	subi	r18, 0xBE	; 190
    789c:	3f 4f       	sbci	r19, 0xFF	; 255
    789e:	f9 01       	movw	r30, r18
    78a0:	20 81       	ld	r18, Z
    78a2:	31 81       	ldd	r19, Z+1	; 0x01
    78a4:	2e 5f       	subi	r18, 0xFE	; 254
    78a6:	3f 4f       	sbci	r19, 0xFF	; 255
    78a8:	f9 01       	movw	r30, r18
    78aa:	20 81       	ld	r18, Z
    78ac:	42 2f       	mov	r20, r18
    78ae:	9e 01       	movw	r18, r28
    78b0:	2c 5b       	subi	r18, 0xBC	; 188
    78b2:	3f 4f       	sbci	r19, 0xFF	; 255
    78b4:	f9 01       	movw	r30, r18
    78b6:	20 81       	ld	r18, Z
    78b8:	20 95       	com	r18
    78ba:	24 23       	and	r18, r20
    78bc:	fc 01       	movw	r30, r24
    78be:	20 83       	st	Z, r18
    78c0:	80 e2       	ldi	r24, 0x20	; 32
    78c2:	8e 83       	std	Y+6, r24	; 0x06
    78c4:	1c aa       	std	Y+52, r1	; 0x34
    78c6:	1b aa       	std	Y+51, r1	; 0x33
    78c8:	8e 81       	ldd	r24, Y+6	; 0x06
    78ca:	8d ab       	std	Y+53, r24	; 0x35
 * \param: pin. the pin number defined by IOPORT_CREATE_PIN
 */
__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask
	(ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
    78cc:	8d a9       	ldd	r24, Y+53	; 0x35
    78ce:	88 2f       	mov	r24, r24
    78d0:	90 e0       	ldi	r25, 0x00	; 0
    78d2:	9c 01       	movw	r18, r24
    78d4:	27 70       	andi	r18, 0x07	; 7
    78d6:	33 27       	eor	r19, r19
    78d8:	81 e0       	ldi	r24, 0x01	; 1
    78da:	90 e0       	ldi	r25, 0x00	; 0
    78dc:	02 c0       	rjmp	.+4      	; 0x78e2 <board_init+0xb12>
    78de:	88 0f       	add	r24, r24
    78e0:	99 1f       	adc	r25, r25
    78e2:	2a 95       	dec	r18
    78e4:	e2 f7       	brpl	.-8      	; 0x78de <board_init+0xb0e>
    78e6:	48 2f       	mov	r20, r24
    78e8:	8e 81       	ldd	r24, Y+6	; 0x06
    78ea:	8e ab       	std	Y+54, r24	; 0x36
 * \brief: To get the base address of port number from defined pin
 * \param: pin. the pin number defined by IOPORT_CREATE_PIN
 */
__always_inline static PORT_t *arch_ioport_pin_to_base(ioport_pin_t pin)
{
	return arch_ioport_port_to_base(pin >> 3);
    78ec:	8e a9       	ldd	r24, Y+54	; 0x36
    78ee:	86 95       	lsr	r24
    78f0:	86 95       	lsr	r24
    78f2:	86 95       	lsr	r24
    78f4:	8f ab       	std	Y+55, r24	; 0x37
 * \param: port number e.g. IOPORT_PORTB
 */
__always_inline static PORT_t *arch_ioport_port_to_base(uint8_t port)
{
	return (PORT_t *)((uintptr_t)(IOPORT_BASE_ADDRESS +
	       (port * IOPORT_PORT_OFFSET)));
    78f6:	8f a9       	ldd	r24, Y+55	; 0x37
    78f8:	28 2f       	mov	r18, r24
    78fa:	30 e0       	ldi	r19, 0x00	; 0
    78fc:	c9 01       	movw	r24, r18
    78fe:	88 0f       	add	r24, r24
    7900:	99 1f       	adc	r25, r25
    7902:	82 0f       	add	r24, r18
    7904:	93 1f       	adc	r25, r19
 * \brief: To get the base address of port number
 * \param: port number e.g. IOPORT_PORTB
 */
__always_inline static PORT_t *arch_ioport_port_to_base(uint8_t port)
{
	return (PORT_t *)((uintptr_t)(IOPORT_BASE_ADDRESS +
    7906:	80 96       	adiw	r24, 0x20	; 32
    7908:	99 af       	std	Y+57, r25	; 0x39
    790a:	88 af       	std	Y+56, r24	; 0x38
    790c:	4a af       	std	Y+58, r20	; 0x3a
    790e:	8b a9       	ldd	r24, Y+51	; 0x33
    7910:	9c a9       	ldd	r25, Y+52	; 0x34
    7912:	9c af       	std	Y+60, r25	; 0x3c
    7914:	8b af       	std	Y+59, r24	; 0x3b
__always_inline static inline void ioport_configure_port_pin(void *port,
		pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
    7916:	8b ad       	ldd	r24, Y+59	; 0x3b
    7918:	9c ad       	ldd	r25, Y+60	; 0x3c
    791a:	81 70       	andi	r24, 0x01	; 1
    791c:	99 27       	eor	r25, r25
    791e:	89 2b       	or	r24, r25
    7920:	89 f1       	breq	.+98     	; 0x7984 <board_init+0xbb4>
		if (flags & IOPORT_INIT_HIGH) {
    7922:	8b ad       	ldd	r24, Y+59	; 0x3b
    7924:	9c ad       	ldd	r25, Y+60	; 0x3c
    7926:	82 70       	andi	r24, 0x02	; 2
    7928:	99 27       	eor	r25, r25
    792a:	89 2b       	or	r24, r25
    792c:	71 f0       	breq	.+28     	; 0x794a <board_init+0xb7a>
			*((uint8_t *)port + 2) |= pin_mask;
    792e:	88 ad       	ldd	r24, Y+56	; 0x38
    7930:	99 ad       	ldd	r25, Y+57	; 0x39
    7932:	02 96       	adiw	r24, 0x02	; 2
    7934:	28 ad       	ldd	r18, Y+56	; 0x38
    7936:	39 ad       	ldd	r19, Y+57	; 0x39
    7938:	2e 5f       	subi	r18, 0xFE	; 254
    793a:	3f 4f       	sbci	r19, 0xFF	; 255
    793c:	f9 01       	movw	r30, r18
    793e:	30 81       	ld	r19, Z
    7940:	2a ad       	ldd	r18, Y+58	; 0x3a
    7942:	23 2b       	or	r18, r19
    7944:	fc 01       	movw	r30, r24
    7946:	20 83       	st	Z, r18
    7948:	0f c0       	rjmp	.+30     	; 0x7968 <board_init+0xb98>
		} else {
			*((uint8_t *)port + 2) &= ~pin_mask;
    794a:	88 ad       	ldd	r24, Y+56	; 0x38
    794c:	99 ad       	ldd	r25, Y+57	; 0x39
    794e:	02 96       	adiw	r24, 0x02	; 2
    7950:	28 ad       	ldd	r18, Y+56	; 0x38
    7952:	39 ad       	ldd	r19, Y+57	; 0x39
    7954:	2e 5f       	subi	r18, 0xFE	; 254
    7956:	3f 4f       	sbci	r19, 0xFF	; 255
    7958:	f9 01       	movw	r30, r18
    795a:	20 81       	ld	r18, Z
    795c:	32 2f       	mov	r19, r18
    795e:	2a ad       	ldd	r18, Y+58	; 0x3a
    7960:	20 95       	com	r18
    7962:	23 23       	and	r18, r19
    7964:	fc 01       	movw	r30, r24
    7966:	20 83       	st	Z, r18
		}

		*((uint8_t *)port + 1) |= pin_mask;
    7968:	88 ad       	ldd	r24, Y+56	; 0x38
    796a:	99 ad       	ldd	r25, Y+57	; 0x39
    796c:	01 96       	adiw	r24, 0x01	; 1
    796e:	28 ad       	ldd	r18, Y+56	; 0x38
    7970:	39 ad       	ldd	r19, Y+57	; 0x39
    7972:	2f 5f       	subi	r18, 0xFF	; 255
    7974:	3f 4f       	sbci	r19, 0xFF	; 255
    7976:	f9 01       	movw	r30, r18
    7978:	30 81       	ld	r19, Z
    797a:	2a ad       	ldd	r18, Y+58	; 0x3a
    797c:	23 2b       	or	r18, r19
    797e:	fc 01       	movw	r30, r24
    7980:	20 83       	st	Z, r18
    7982:	32 c0       	rjmp	.+100    	; 0x79e8 <board_init+0xc18>
	} else {
		*((uint8_t *)port + 1) &= ~pin_mask;
    7984:	88 ad       	ldd	r24, Y+56	; 0x38
    7986:	99 ad       	ldd	r25, Y+57	; 0x39
    7988:	01 96       	adiw	r24, 0x01	; 1
    798a:	28 ad       	ldd	r18, Y+56	; 0x38
    798c:	39 ad       	ldd	r19, Y+57	; 0x39
    798e:	2f 5f       	subi	r18, 0xFF	; 255
    7990:	3f 4f       	sbci	r19, 0xFF	; 255
    7992:	f9 01       	movw	r30, r18
    7994:	20 81       	ld	r18, Z
    7996:	32 2f       	mov	r19, r18
    7998:	2a ad       	ldd	r18, Y+58	; 0x3a
    799a:	20 95       	com	r18
    799c:	23 23       	and	r18, r19
    799e:	fc 01       	movw	r30, r24
    79a0:	20 83       	st	Z, r18
		if (flags & IOPORT_PULL_UP) {
    79a2:	8b ad       	ldd	r24, Y+59	; 0x3b
    79a4:	9c ad       	ldd	r25, Y+60	; 0x3c
    79a6:	84 70       	andi	r24, 0x04	; 4
    79a8:	99 27       	eor	r25, r25
    79aa:	89 2b       	or	r24, r25
    79ac:	71 f0       	breq	.+28     	; 0x79ca <board_init+0xbfa>
			*((uint8_t *)port + 2) |= pin_mask;
    79ae:	88 ad       	ldd	r24, Y+56	; 0x38
    79b0:	99 ad       	ldd	r25, Y+57	; 0x39
    79b2:	02 96       	adiw	r24, 0x02	; 2
    79b4:	28 ad       	ldd	r18, Y+56	; 0x38
    79b6:	39 ad       	ldd	r19, Y+57	; 0x39
    79b8:	2e 5f       	subi	r18, 0xFE	; 254
    79ba:	3f 4f       	sbci	r19, 0xFF	; 255
    79bc:	f9 01       	movw	r30, r18
    79be:	30 81       	ld	r19, Z
    79c0:	2a ad       	ldd	r18, Y+58	; 0x3a
    79c2:	23 2b       	or	r18, r19
    79c4:	fc 01       	movw	r30, r24
    79c6:	20 83       	st	Z, r18
    79c8:	0f c0       	rjmp	.+30     	; 0x79e8 <board_init+0xc18>
		} else {
			*((uint8_t *)port + 2) &= ~pin_mask;
    79ca:	88 ad       	ldd	r24, Y+56	; 0x38
    79cc:	99 ad       	ldd	r25, Y+57	; 0x39
    79ce:	02 96       	adiw	r24, 0x02	; 2
    79d0:	28 ad       	ldd	r18, Y+56	; 0x38
    79d2:	39 ad       	ldd	r19, Y+57	; 0x39
    79d4:	2e 5f       	subi	r18, 0xFE	; 254
    79d6:	3f 4f       	sbci	r19, 0xFF	; 255
    79d8:	f9 01       	movw	r30, r18
    79da:	20 81       	ld	r18, Z
    79dc:	32 2f       	mov	r19, r18
    79de:	2a ad       	ldd	r18, Y+58	; 0x3a
    79e0:	20 95       	com	r18
    79e2:	23 23       	and	r18, r19
    79e4:	fc 01       	movw	r30, r24
    79e6:	20 83       	st	Z, r18
    79e8:	8b e1       	ldi	r24, 0x1B	; 27
    79ea:	8f 83       	std	Y+7, r24	; 0x07
    79ec:	83 e0       	ldi	r24, 0x03	; 3
    79ee:	90 e0       	ldi	r25, 0x00	; 0
    79f0:	9a a7       	std	Y+42, r25	; 0x2a
    79f2:	89 a7       	std	Y+41, r24	; 0x29
    79f4:	8f 81       	ldd	r24, Y+7	; 0x07
    79f6:	8b a7       	std	Y+43, r24	; 0x2b
 * \param: pin. the pin number defined by IOPORT_CREATE_PIN
 */
__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask
	(ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
    79f8:	8b a5       	ldd	r24, Y+43	; 0x2b
    79fa:	88 2f       	mov	r24, r24
    79fc:	90 e0       	ldi	r25, 0x00	; 0
    79fe:	9c 01       	movw	r18, r24
    7a00:	27 70       	andi	r18, 0x07	; 7
    7a02:	33 27       	eor	r19, r19
    7a04:	81 e0       	ldi	r24, 0x01	; 1
    7a06:	90 e0       	ldi	r25, 0x00	; 0
    7a08:	02 c0       	rjmp	.+4      	; 0x7a0e <board_init+0xc3e>
    7a0a:	88 0f       	add	r24, r24
    7a0c:	99 1f       	adc	r25, r25
    7a0e:	2a 95       	dec	r18
    7a10:	e2 f7       	brpl	.-8      	; 0x7a0a <board_init+0xc3a>
    7a12:	48 2f       	mov	r20, r24
    7a14:	8f 81       	ldd	r24, Y+7	; 0x07
    7a16:	8c a7       	std	Y+44, r24	; 0x2c
 * \brief: To get the base address of port number from defined pin
 * \param: pin. the pin number defined by IOPORT_CREATE_PIN
 */
__always_inline static PORT_t *arch_ioport_pin_to_base(ioport_pin_t pin)
{
	return arch_ioport_port_to_base(pin >> 3);
    7a18:	8c a5       	ldd	r24, Y+44	; 0x2c
    7a1a:	86 95       	lsr	r24
    7a1c:	86 95       	lsr	r24
    7a1e:	86 95       	lsr	r24
    7a20:	8d a7       	std	Y+45, r24	; 0x2d
 * \param: port number e.g. IOPORT_PORTB
 */
__always_inline static PORT_t *arch_ioport_port_to_base(uint8_t port)
{
	return (PORT_t *)((uintptr_t)(IOPORT_BASE_ADDRESS +
	       (port * IOPORT_PORT_OFFSET)));
    7a22:	8d a5       	ldd	r24, Y+45	; 0x2d
    7a24:	28 2f       	mov	r18, r24
    7a26:	30 e0       	ldi	r19, 0x00	; 0
    7a28:	c9 01       	movw	r24, r18
    7a2a:	88 0f       	add	r24, r24
    7a2c:	99 1f       	adc	r25, r25
    7a2e:	82 0f       	add	r24, r18
    7a30:	93 1f       	adc	r25, r19
 * \brief: To get the base address of port number
 * \param: port number e.g. IOPORT_PORTB
 */
__always_inline static PORT_t *arch_ioport_port_to_base(uint8_t port)
{
	return (PORT_t *)((uintptr_t)(IOPORT_BASE_ADDRESS +
    7a32:	80 96       	adiw	r24, 0x20	; 32
    7a34:	9f a7       	std	Y+47, r25	; 0x2f
    7a36:	8e a7       	std	Y+46, r24	; 0x2e
    7a38:	48 ab       	std	Y+48, r20	; 0x30
    7a3a:	89 a5       	ldd	r24, Y+41	; 0x29
    7a3c:	9a a5       	ldd	r25, Y+42	; 0x2a
    7a3e:	9a ab       	std	Y+50, r25	; 0x32
    7a40:	89 ab       	std	Y+49, r24	; 0x31
__always_inline static inline void ioport_configure_port_pin(void *port,
		pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
    7a42:	89 a9       	ldd	r24, Y+49	; 0x31
    7a44:	9a a9       	ldd	r25, Y+50	; 0x32
    7a46:	81 70       	andi	r24, 0x01	; 1
    7a48:	99 27       	eor	r25, r25
    7a4a:	89 2b       	or	r24, r25
    7a4c:	89 f1       	breq	.+98     	; 0x7ab0 <board_init+0xce0>
		if (flags & IOPORT_INIT_HIGH) {
    7a4e:	89 a9       	ldd	r24, Y+49	; 0x31
    7a50:	9a a9       	ldd	r25, Y+50	; 0x32
    7a52:	82 70       	andi	r24, 0x02	; 2
    7a54:	99 27       	eor	r25, r25
    7a56:	89 2b       	or	r24, r25
    7a58:	71 f0       	breq	.+28     	; 0x7a76 <board_init+0xca6>
			*((uint8_t *)port + 2) |= pin_mask;
    7a5a:	8e a5       	ldd	r24, Y+46	; 0x2e
    7a5c:	9f a5       	ldd	r25, Y+47	; 0x2f
    7a5e:	02 96       	adiw	r24, 0x02	; 2
    7a60:	2e a5       	ldd	r18, Y+46	; 0x2e
    7a62:	3f a5       	ldd	r19, Y+47	; 0x2f
    7a64:	2e 5f       	subi	r18, 0xFE	; 254
    7a66:	3f 4f       	sbci	r19, 0xFF	; 255
    7a68:	f9 01       	movw	r30, r18
    7a6a:	30 81       	ld	r19, Z
    7a6c:	28 a9       	ldd	r18, Y+48	; 0x30
    7a6e:	23 2b       	or	r18, r19
    7a70:	fc 01       	movw	r30, r24
    7a72:	20 83       	st	Z, r18
    7a74:	0f c0       	rjmp	.+30     	; 0x7a94 <board_init+0xcc4>
		} else {
			*((uint8_t *)port + 2) &= ~pin_mask;
    7a76:	8e a5       	ldd	r24, Y+46	; 0x2e
    7a78:	9f a5       	ldd	r25, Y+47	; 0x2f
    7a7a:	02 96       	adiw	r24, 0x02	; 2
    7a7c:	2e a5       	ldd	r18, Y+46	; 0x2e
    7a7e:	3f a5       	ldd	r19, Y+47	; 0x2f
    7a80:	2e 5f       	subi	r18, 0xFE	; 254
    7a82:	3f 4f       	sbci	r19, 0xFF	; 255
    7a84:	f9 01       	movw	r30, r18
    7a86:	20 81       	ld	r18, Z
    7a88:	32 2f       	mov	r19, r18
    7a8a:	28 a9       	ldd	r18, Y+48	; 0x30
    7a8c:	20 95       	com	r18
    7a8e:	23 23       	and	r18, r19
    7a90:	fc 01       	movw	r30, r24
    7a92:	20 83       	st	Z, r18
		}

		*((uint8_t *)port + 1) |= pin_mask;
    7a94:	8e a5       	ldd	r24, Y+46	; 0x2e
    7a96:	9f a5       	ldd	r25, Y+47	; 0x2f
    7a98:	01 96       	adiw	r24, 0x01	; 1
    7a9a:	2e a5       	ldd	r18, Y+46	; 0x2e
    7a9c:	3f a5       	ldd	r19, Y+47	; 0x2f
    7a9e:	2f 5f       	subi	r18, 0xFF	; 255
    7aa0:	3f 4f       	sbci	r19, 0xFF	; 255
    7aa2:	f9 01       	movw	r30, r18
    7aa4:	30 81       	ld	r19, Z
    7aa6:	28 a9       	ldd	r18, Y+48	; 0x30
    7aa8:	23 2b       	or	r18, r19
    7aaa:	fc 01       	movw	r30, r24
    7aac:	20 83       	st	Z, r18
    7aae:	32 c0       	rjmp	.+100    	; 0x7b14 <board_init+0xd44>
	} else {
		*((uint8_t *)port + 1) &= ~pin_mask;
    7ab0:	8e a5       	ldd	r24, Y+46	; 0x2e
    7ab2:	9f a5       	ldd	r25, Y+47	; 0x2f
    7ab4:	01 96       	adiw	r24, 0x01	; 1
    7ab6:	2e a5       	ldd	r18, Y+46	; 0x2e
    7ab8:	3f a5       	ldd	r19, Y+47	; 0x2f
    7aba:	2f 5f       	subi	r18, 0xFF	; 255
    7abc:	3f 4f       	sbci	r19, 0xFF	; 255
    7abe:	f9 01       	movw	r30, r18
    7ac0:	20 81       	ld	r18, Z
    7ac2:	32 2f       	mov	r19, r18
    7ac4:	28 a9       	ldd	r18, Y+48	; 0x30
    7ac6:	20 95       	com	r18
    7ac8:	23 23       	and	r18, r19
    7aca:	fc 01       	movw	r30, r24
    7acc:	20 83       	st	Z, r18
		if (flags & IOPORT_PULL_UP) {
    7ace:	89 a9       	ldd	r24, Y+49	; 0x31
    7ad0:	9a a9       	ldd	r25, Y+50	; 0x32
    7ad2:	84 70       	andi	r24, 0x04	; 4
    7ad4:	99 27       	eor	r25, r25
    7ad6:	89 2b       	or	r24, r25
    7ad8:	71 f0       	breq	.+28     	; 0x7af6 <board_init+0xd26>
			*((uint8_t *)port + 2) |= pin_mask;
    7ada:	8e a5       	ldd	r24, Y+46	; 0x2e
    7adc:	9f a5       	ldd	r25, Y+47	; 0x2f
    7ade:	02 96       	adiw	r24, 0x02	; 2
    7ae0:	2e a5       	ldd	r18, Y+46	; 0x2e
    7ae2:	3f a5       	ldd	r19, Y+47	; 0x2f
    7ae4:	2e 5f       	subi	r18, 0xFE	; 254
    7ae6:	3f 4f       	sbci	r19, 0xFF	; 255
    7ae8:	f9 01       	movw	r30, r18
    7aea:	30 81       	ld	r19, Z
    7aec:	28 a9       	ldd	r18, Y+48	; 0x30
    7aee:	23 2b       	or	r18, r19
    7af0:	fc 01       	movw	r30, r24
    7af2:	20 83       	st	Z, r18
    7af4:	0f c0       	rjmp	.+30     	; 0x7b14 <board_init+0xd44>
		} else {
			*((uint8_t *)port + 2) &= ~pin_mask;
    7af6:	8e a5       	ldd	r24, Y+46	; 0x2e
    7af8:	9f a5       	ldd	r25, Y+47	; 0x2f
    7afa:	02 96       	adiw	r24, 0x02	; 2
    7afc:	2e a5       	ldd	r18, Y+46	; 0x2e
    7afe:	3f a5       	ldd	r19, Y+47	; 0x2f
    7b00:	2e 5f       	subi	r18, 0xFE	; 254
    7b02:	3f 4f       	sbci	r19, 0xFF	; 255
    7b04:	f9 01       	movw	r30, r18
    7b06:	20 81       	ld	r18, Z
    7b08:	32 2f       	mov	r19, r18
    7b0a:	28 a9       	ldd	r18, Y+48	; 0x30
    7b0c:	20 95       	com	r18
    7b0e:	23 23       	and	r18, r19
    7b10:	fc 01       	movw	r30, r24
    7b12:	20 83       	st	Z, r18
    7b14:	8a e1       	ldi	r24, 0x1A	; 26
    7b16:	88 87       	std	Y+8, r24	; 0x08
    7b18:	18 a2       	std	Y+32, r1	; 0x20
    7b1a:	1f 8e       	std	Y+31, r1	; 0x1f
    7b1c:	88 85       	ldd	r24, Y+8	; 0x08
    7b1e:	89 a3       	std	Y+33, r24	; 0x21
 * \param: pin. the pin number defined by IOPORT_CREATE_PIN
 */
__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask
	(ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
    7b20:	89 a1       	ldd	r24, Y+33	; 0x21
    7b22:	88 2f       	mov	r24, r24
    7b24:	90 e0       	ldi	r25, 0x00	; 0
    7b26:	9c 01       	movw	r18, r24
    7b28:	27 70       	andi	r18, 0x07	; 7
    7b2a:	33 27       	eor	r19, r19
    7b2c:	81 e0       	ldi	r24, 0x01	; 1
    7b2e:	90 e0       	ldi	r25, 0x00	; 0
    7b30:	02 c0       	rjmp	.+4      	; 0x7b36 <board_init+0xd66>
    7b32:	88 0f       	add	r24, r24
    7b34:	99 1f       	adc	r25, r25
    7b36:	2a 95       	dec	r18
    7b38:	e2 f7       	brpl	.-8      	; 0x7b32 <board_init+0xd62>
    7b3a:	48 2f       	mov	r20, r24
    7b3c:	88 85       	ldd	r24, Y+8	; 0x08
    7b3e:	8a a3       	std	Y+34, r24	; 0x22
 * \brief: To get the base address of port number from defined pin
 * \param: pin. the pin number defined by IOPORT_CREATE_PIN
 */
__always_inline static PORT_t *arch_ioport_pin_to_base(ioport_pin_t pin)
{
	return arch_ioport_port_to_base(pin >> 3);
    7b40:	8a a1       	ldd	r24, Y+34	; 0x22
    7b42:	86 95       	lsr	r24
    7b44:	86 95       	lsr	r24
    7b46:	86 95       	lsr	r24
    7b48:	8b a3       	std	Y+35, r24	; 0x23
 * \param: port number e.g. IOPORT_PORTB
 */
__always_inline static PORT_t *arch_ioport_port_to_base(uint8_t port)
{
	return (PORT_t *)((uintptr_t)(IOPORT_BASE_ADDRESS +
	       (port * IOPORT_PORT_OFFSET)));
    7b4a:	8b a1       	ldd	r24, Y+35	; 0x23
    7b4c:	28 2f       	mov	r18, r24
    7b4e:	30 e0       	ldi	r19, 0x00	; 0
    7b50:	c9 01       	movw	r24, r18
    7b52:	88 0f       	add	r24, r24
    7b54:	99 1f       	adc	r25, r25
    7b56:	82 0f       	add	r24, r18
    7b58:	93 1f       	adc	r25, r19
 * \brief: To get the base address of port number
 * \param: port number e.g. IOPORT_PORTB
 */
__always_inline static PORT_t *arch_ioport_port_to_base(uint8_t port)
{
	return (PORT_t *)((uintptr_t)(IOPORT_BASE_ADDRESS +
    7b5a:	80 96       	adiw	r24, 0x20	; 32
    7b5c:	9d a3       	std	Y+37, r25	; 0x25
    7b5e:	8c a3       	std	Y+36, r24	; 0x24
    7b60:	4e a3       	std	Y+38, r20	; 0x26
    7b62:	8f 8d       	ldd	r24, Y+31	; 0x1f
    7b64:	98 a1       	ldd	r25, Y+32	; 0x20
    7b66:	98 a7       	std	Y+40, r25	; 0x28
    7b68:	8f a3       	std	Y+39, r24	; 0x27
__always_inline static inline void ioport_configure_port_pin(void *port,
		pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
    7b6a:	8f a1       	ldd	r24, Y+39	; 0x27
    7b6c:	98 a5       	ldd	r25, Y+40	; 0x28
    7b6e:	81 70       	andi	r24, 0x01	; 1
    7b70:	99 27       	eor	r25, r25
    7b72:	89 2b       	or	r24, r25
    7b74:	89 f1       	breq	.+98     	; 0x7bd8 <board_init+0xe08>
		if (flags & IOPORT_INIT_HIGH) {
    7b76:	8f a1       	ldd	r24, Y+39	; 0x27
    7b78:	98 a5       	ldd	r25, Y+40	; 0x28
    7b7a:	82 70       	andi	r24, 0x02	; 2
    7b7c:	99 27       	eor	r25, r25
    7b7e:	89 2b       	or	r24, r25
    7b80:	71 f0       	breq	.+28     	; 0x7b9e <board_init+0xdce>
			*((uint8_t *)port + 2) |= pin_mask;
    7b82:	8c a1       	ldd	r24, Y+36	; 0x24
    7b84:	9d a1       	ldd	r25, Y+37	; 0x25
    7b86:	02 96       	adiw	r24, 0x02	; 2
    7b88:	2c a1       	ldd	r18, Y+36	; 0x24
    7b8a:	3d a1       	ldd	r19, Y+37	; 0x25
    7b8c:	2e 5f       	subi	r18, 0xFE	; 254
    7b8e:	3f 4f       	sbci	r19, 0xFF	; 255
    7b90:	f9 01       	movw	r30, r18
    7b92:	30 81       	ld	r19, Z
    7b94:	2e a1       	ldd	r18, Y+38	; 0x26
    7b96:	23 2b       	or	r18, r19
    7b98:	fc 01       	movw	r30, r24
    7b9a:	20 83       	st	Z, r18
    7b9c:	0f c0       	rjmp	.+30     	; 0x7bbc <board_init+0xdec>
		} else {
			*((uint8_t *)port + 2) &= ~pin_mask;
    7b9e:	8c a1       	ldd	r24, Y+36	; 0x24
    7ba0:	9d a1       	ldd	r25, Y+37	; 0x25
    7ba2:	02 96       	adiw	r24, 0x02	; 2
    7ba4:	2c a1       	ldd	r18, Y+36	; 0x24
    7ba6:	3d a1       	ldd	r19, Y+37	; 0x25
    7ba8:	2e 5f       	subi	r18, 0xFE	; 254
    7baa:	3f 4f       	sbci	r19, 0xFF	; 255
    7bac:	f9 01       	movw	r30, r18
    7bae:	20 81       	ld	r18, Z
    7bb0:	32 2f       	mov	r19, r18
    7bb2:	2e a1       	ldd	r18, Y+38	; 0x26
    7bb4:	20 95       	com	r18
    7bb6:	23 23       	and	r18, r19
    7bb8:	fc 01       	movw	r30, r24
    7bba:	20 83       	st	Z, r18
		}

		*((uint8_t *)port + 1) |= pin_mask;
    7bbc:	8c a1       	ldd	r24, Y+36	; 0x24
    7bbe:	9d a1       	ldd	r25, Y+37	; 0x25
    7bc0:	01 96       	adiw	r24, 0x01	; 1
    7bc2:	2c a1       	ldd	r18, Y+36	; 0x24
    7bc4:	3d a1       	ldd	r19, Y+37	; 0x25
    7bc6:	2f 5f       	subi	r18, 0xFF	; 255
    7bc8:	3f 4f       	sbci	r19, 0xFF	; 255
    7bca:	f9 01       	movw	r30, r18
    7bcc:	30 81       	ld	r19, Z
    7bce:	2e a1       	ldd	r18, Y+38	; 0x26
    7bd0:	23 2b       	or	r18, r19
    7bd2:	fc 01       	movw	r30, r24
    7bd4:	20 83       	st	Z, r18
    7bd6:	32 c0       	rjmp	.+100    	; 0x7c3c <board_init+0xe6c>
	} else {
		*((uint8_t *)port + 1) &= ~pin_mask;
    7bd8:	8c a1       	ldd	r24, Y+36	; 0x24
    7bda:	9d a1       	ldd	r25, Y+37	; 0x25
    7bdc:	01 96       	adiw	r24, 0x01	; 1
    7bde:	2c a1       	ldd	r18, Y+36	; 0x24
    7be0:	3d a1       	ldd	r19, Y+37	; 0x25
    7be2:	2f 5f       	subi	r18, 0xFF	; 255
    7be4:	3f 4f       	sbci	r19, 0xFF	; 255
    7be6:	f9 01       	movw	r30, r18
    7be8:	20 81       	ld	r18, Z
    7bea:	32 2f       	mov	r19, r18
    7bec:	2e a1       	ldd	r18, Y+38	; 0x26
    7bee:	20 95       	com	r18
    7bf0:	23 23       	and	r18, r19
    7bf2:	fc 01       	movw	r30, r24
    7bf4:	20 83       	st	Z, r18
		if (flags & IOPORT_PULL_UP) {
    7bf6:	8f a1       	ldd	r24, Y+39	; 0x27
    7bf8:	98 a5       	ldd	r25, Y+40	; 0x28
    7bfa:	84 70       	andi	r24, 0x04	; 4
    7bfc:	99 27       	eor	r25, r25
    7bfe:	89 2b       	or	r24, r25
    7c00:	71 f0       	breq	.+28     	; 0x7c1e <board_init+0xe4e>
			*((uint8_t *)port + 2) |= pin_mask;
    7c02:	8c a1       	ldd	r24, Y+36	; 0x24
    7c04:	9d a1       	ldd	r25, Y+37	; 0x25
    7c06:	02 96       	adiw	r24, 0x02	; 2
    7c08:	2c a1       	ldd	r18, Y+36	; 0x24
    7c0a:	3d a1       	ldd	r19, Y+37	; 0x25
    7c0c:	2e 5f       	subi	r18, 0xFE	; 254
    7c0e:	3f 4f       	sbci	r19, 0xFF	; 255
    7c10:	f9 01       	movw	r30, r18
    7c12:	30 81       	ld	r19, Z
    7c14:	2e a1       	ldd	r18, Y+38	; 0x26
    7c16:	23 2b       	or	r18, r19
    7c18:	fc 01       	movw	r30, r24
    7c1a:	20 83       	st	Z, r18
    7c1c:	0f c0       	rjmp	.+30     	; 0x7c3c <board_init+0xe6c>
		} else {
			*((uint8_t *)port + 2) &= ~pin_mask;
    7c1e:	8c a1       	ldd	r24, Y+36	; 0x24
    7c20:	9d a1       	ldd	r25, Y+37	; 0x25
    7c22:	02 96       	adiw	r24, 0x02	; 2
    7c24:	2c a1       	ldd	r18, Y+36	; 0x24
    7c26:	3d a1       	ldd	r19, Y+37	; 0x25
    7c28:	2e 5f       	subi	r18, 0xFE	; 254
    7c2a:	3f 4f       	sbci	r19, 0xFF	; 255
    7c2c:	f9 01       	movw	r30, r18
    7c2e:	20 81       	ld	r18, Z
    7c30:	32 2f       	mov	r19, r18
    7c32:	2e a1       	ldd	r18, Y+38	; 0x26
    7c34:	20 95       	com	r18
    7c36:	23 23       	and	r18, r19
    7c38:	fc 01       	movw	r30, r24
    7c3a:	20 83       	st	Z, r18
    7c3c:	85 e3       	ldi	r24, 0x35	; 53
    7c3e:	89 87       	std	Y+9, r24	; 0x09
    7c40:	83 e0       	ldi	r24, 0x03	; 3
    7c42:	90 e0       	ldi	r25, 0x00	; 0
    7c44:	9e 8b       	std	Y+22, r25	; 0x16
    7c46:	8d 8b       	std	Y+21, r24	; 0x15
    7c48:	89 85       	ldd	r24, Y+9	; 0x09
    7c4a:	8f 8b       	std	Y+23, r24	; 0x17
 * \param: pin. the pin number defined by IOPORT_CREATE_PIN
 */
__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask
	(ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
    7c4c:	8f 89       	ldd	r24, Y+23	; 0x17
    7c4e:	88 2f       	mov	r24, r24
    7c50:	90 e0       	ldi	r25, 0x00	; 0
    7c52:	9c 01       	movw	r18, r24
    7c54:	27 70       	andi	r18, 0x07	; 7
    7c56:	33 27       	eor	r19, r19
    7c58:	81 e0       	ldi	r24, 0x01	; 1
    7c5a:	90 e0       	ldi	r25, 0x00	; 0
    7c5c:	02 c0       	rjmp	.+4      	; 0x7c62 <board_init+0xe92>
    7c5e:	88 0f       	add	r24, r24
    7c60:	99 1f       	adc	r25, r25
    7c62:	2a 95       	dec	r18
    7c64:	e2 f7       	brpl	.-8      	; 0x7c5e <board_init+0xe8e>
    7c66:	48 2f       	mov	r20, r24
    7c68:	89 85       	ldd	r24, Y+9	; 0x09
    7c6a:	88 8f       	std	Y+24, r24	; 0x18
 * \brief: To get the base address of port number from defined pin
 * \param: pin. the pin number defined by IOPORT_CREATE_PIN
 */
__always_inline static PORT_t *arch_ioport_pin_to_base(ioport_pin_t pin)
{
	return arch_ioport_port_to_base(pin >> 3);
    7c6c:	88 8d       	ldd	r24, Y+24	; 0x18
    7c6e:	86 95       	lsr	r24
    7c70:	86 95       	lsr	r24
    7c72:	86 95       	lsr	r24
    7c74:	89 8f       	std	Y+25, r24	; 0x19
 * \param: port number e.g. IOPORT_PORTB
 */
__always_inline static PORT_t *arch_ioport_port_to_base(uint8_t port)
{
	return (PORT_t *)((uintptr_t)(IOPORT_BASE_ADDRESS +
	       (port * IOPORT_PORT_OFFSET)));
    7c76:	89 8d       	ldd	r24, Y+25	; 0x19
    7c78:	28 2f       	mov	r18, r24
    7c7a:	30 e0       	ldi	r19, 0x00	; 0
    7c7c:	c9 01       	movw	r24, r18
    7c7e:	88 0f       	add	r24, r24
    7c80:	99 1f       	adc	r25, r25
    7c82:	82 0f       	add	r24, r18
    7c84:	93 1f       	adc	r25, r19
 * \brief: To get the base address of port number
 * \param: port number e.g. IOPORT_PORTB
 */
__always_inline static PORT_t *arch_ioport_port_to_base(uint8_t port)
{
	return (PORT_t *)((uintptr_t)(IOPORT_BASE_ADDRESS +
    7c86:	80 96       	adiw	r24, 0x20	; 32
    7c88:	9b 8f       	std	Y+27, r25	; 0x1b
    7c8a:	8a 8f       	std	Y+26, r24	; 0x1a
    7c8c:	4c 8f       	std	Y+28, r20	; 0x1c
    7c8e:	8d 89       	ldd	r24, Y+21	; 0x15
    7c90:	9e 89       	ldd	r25, Y+22	; 0x16
    7c92:	9e 8f       	std	Y+30, r25	; 0x1e
    7c94:	8d 8f       	std	Y+29, r24	; 0x1d
__always_inline static inline void ioport_configure_port_pin(void *port,
		pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
    7c96:	8d 8d       	ldd	r24, Y+29	; 0x1d
    7c98:	9e 8d       	ldd	r25, Y+30	; 0x1e
    7c9a:	81 70       	andi	r24, 0x01	; 1
    7c9c:	99 27       	eor	r25, r25
    7c9e:	89 2b       	or	r24, r25
    7ca0:	89 f1       	breq	.+98     	; 0x7d04 <board_init+0xf34>
		if (flags & IOPORT_INIT_HIGH) {
    7ca2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    7ca4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    7ca6:	82 70       	andi	r24, 0x02	; 2
    7ca8:	99 27       	eor	r25, r25
    7caa:	89 2b       	or	r24, r25
    7cac:	71 f0       	breq	.+28     	; 0x7cca <board_init+0xefa>
			*((uint8_t *)port + 2) |= pin_mask;
    7cae:	8a 8d       	ldd	r24, Y+26	; 0x1a
    7cb0:	9b 8d       	ldd	r25, Y+27	; 0x1b
    7cb2:	02 96       	adiw	r24, 0x02	; 2
    7cb4:	2a 8d       	ldd	r18, Y+26	; 0x1a
    7cb6:	3b 8d       	ldd	r19, Y+27	; 0x1b
    7cb8:	2e 5f       	subi	r18, 0xFE	; 254
    7cba:	3f 4f       	sbci	r19, 0xFF	; 255
    7cbc:	f9 01       	movw	r30, r18
    7cbe:	30 81       	ld	r19, Z
    7cc0:	2c 8d       	ldd	r18, Y+28	; 0x1c
    7cc2:	23 2b       	or	r18, r19
    7cc4:	fc 01       	movw	r30, r24
    7cc6:	20 83       	st	Z, r18
    7cc8:	0f c0       	rjmp	.+30     	; 0x7ce8 <board_init+0xf18>
		} else {
			*((uint8_t *)port + 2) &= ~pin_mask;
    7cca:	8a 8d       	ldd	r24, Y+26	; 0x1a
    7ccc:	9b 8d       	ldd	r25, Y+27	; 0x1b
    7cce:	02 96       	adiw	r24, 0x02	; 2
    7cd0:	2a 8d       	ldd	r18, Y+26	; 0x1a
    7cd2:	3b 8d       	ldd	r19, Y+27	; 0x1b
    7cd4:	2e 5f       	subi	r18, 0xFE	; 254
    7cd6:	3f 4f       	sbci	r19, 0xFF	; 255
    7cd8:	f9 01       	movw	r30, r18
    7cda:	20 81       	ld	r18, Z
    7cdc:	32 2f       	mov	r19, r18
    7cde:	2c 8d       	ldd	r18, Y+28	; 0x1c
    7ce0:	20 95       	com	r18
    7ce2:	23 23       	and	r18, r19
    7ce4:	fc 01       	movw	r30, r24
    7ce6:	20 83       	st	Z, r18
		}

		*((uint8_t *)port + 1) |= pin_mask;
    7ce8:	8a 8d       	ldd	r24, Y+26	; 0x1a
    7cea:	9b 8d       	ldd	r25, Y+27	; 0x1b
    7cec:	01 96       	adiw	r24, 0x01	; 1
    7cee:	2a 8d       	ldd	r18, Y+26	; 0x1a
    7cf0:	3b 8d       	ldd	r19, Y+27	; 0x1b
    7cf2:	2f 5f       	subi	r18, 0xFF	; 255
    7cf4:	3f 4f       	sbci	r19, 0xFF	; 255
    7cf6:	f9 01       	movw	r30, r18
    7cf8:	30 81       	ld	r19, Z
    7cfa:	2c 8d       	ldd	r18, Y+28	; 0x1c
    7cfc:	23 2b       	or	r18, r19
    7cfe:	fc 01       	movw	r30, r24
    7d00:	20 83       	st	Z, r18
    7d02:	32 c0       	rjmp	.+100    	; 0x7d68 <board_init+0xf98>
	} else {
		*((uint8_t *)port + 1) &= ~pin_mask;
    7d04:	8a 8d       	ldd	r24, Y+26	; 0x1a
    7d06:	9b 8d       	ldd	r25, Y+27	; 0x1b
    7d08:	01 96       	adiw	r24, 0x01	; 1
    7d0a:	2a 8d       	ldd	r18, Y+26	; 0x1a
    7d0c:	3b 8d       	ldd	r19, Y+27	; 0x1b
    7d0e:	2f 5f       	subi	r18, 0xFF	; 255
    7d10:	3f 4f       	sbci	r19, 0xFF	; 255
    7d12:	f9 01       	movw	r30, r18
    7d14:	20 81       	ld	r18, Z
    7d16:	32 2f       	mov	r19, r18
    7d18:	2c 8d       	ldd	r18, Y+28	; 0x1c
    7d1a:	20 95       	com	r18
    7d1c:	23 23       	and	r18, r19
    7d1e:	fc 01       	movw	r30, r24
    7d20:	20 83       	st	Z, r18
		if (flags & IOPORT_PULL_UP) {
    7d22:	8d 8d       	ldd	r24, Y+29	; 0x1d
    7d24:	9e 8d       	ldd	r25, Y+30	; 0x1e
    7d26:	84 70       	andi	r24, 0x04	; 4
    7d28:	99 27       	eor	r25, r25
    7d2a:	89 2b       	or	r24, r25
    7d2c:	71 f0       	breq	.+28     	; 0x7d4a <board_init+0xf7a>
			*((uint8_t *)port + 2) |= pin_mask;
    7d2e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    7d30:	9b 8d       	ldd	r25, Y+27	; 0x1b
    7d32:	02 96       	adiw	r24, 0x02	; 2
    7d34:	2a 8d       	ldd	r18, Y+26	; 0x1a
    7d36:	3b 8d       	ldd	r19, Y+27	; 0x1b
    7d38:	2e 5f       	subi	r18, 0xFE	; 254
    7d3a:	3f 4f       	sbci	r19, 0xFF	; 255
    7d3c:	f9 01       	movw	r30, r18
    7d3e:	30 81       	ld	r19, Z
    7d40:	2c 8d       	ldd	r18, Y+28	; 0x1c
    7d42:	23 2b       	or	r18, r19
    7d44:	fc 01       	movw	r30, r24
    7d46:	20 83       	st	Z, r18
    7d48:	0f c0       	rjmp	.+30     	; 0x7d68 <board_init+0xf98>
		} else {
			*((uint8_t *)port + 2) &= ~pin_mask;
    7d4a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    7d4c:	9b 8d       	ldd	r25, Y+27	; 0x1b
    7d4e:	02 96       	adiw	r24, 0x02	; 2
    7d50:	2a 8d       	ldd	r18, Y+26	; 0x1a
    7d52:	3b 8d       	ldd	r19, Y+27	; 0x1b
    7d54:	2e 5f       	subi	r18, 0xFE	; 254
    7d56:	3f 4f       	sbci	r19, 0xFF	; 255
    7d58:	f9 01       	movw	r30, r18
    7d5a:	20 81       	ld	r18, Z
    7d5c:	32 2f       	mov	r19, r18
    7d5e:	2c 8d       	ldd	r18, Y+28	; 0x1c
    7d60:	20 95       	com	r18
    7d62:	23 23       	and	r18, r19
    7d64:	fc 01       	movw	r30, r24
    7d66:	20 83       	st	Z, r18
    7d68:	8d e1       	ldi	r24, 0x1D	; 29
    7d6a:	8a 87       	std	Y+10, r24	; 0x0a
    7d6c:	83 e0       	ldi	r24, 0x03	; 3
    7d6e:	90 e0       	ldi	r25, 0x00	; 0
    7d70:	9c 87       	std	Y+12, r25	; 0x0c
    7d72:	8b 87       	std	Y+11, r24	; 0x0b
    7d74:	8a 85       	ldd	r24, Y+10	; 0x0a
    7d76:	8d 87       	std	Y+13, r24	; 0x0d
 * \param: pin. the pin number defined by IOPORT_CREATE_PIN
 */
__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask
	(ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
    7d78:	8d 85       	ldd	r24, Y+13	; 0x0d
    7d7a:	88 2f       	mov	r24, r24
    7d7c:	90 e0       	ldi	r25, 0x00	; 0
    7d7e:	9c 01       	movw	r18, r24
    7d80:	27 70       	andi	r18, 0x07	; 7
    7d82:	33 27       	eor	r19, r19
    7d84:	81 e0       	ldi	r24, 0x01	; 1
    7d86:	90 e0       	ldi	r25, 0x00	; 0
    7d88:	02 c0       	rjmp	.+4      	; 0x7d8e <board_init+0xfbe>
    7d8a:	88 0f       	add	r24, r24
    7d8c:	99 1f       	adc	r25, r25
    7d8e:	2a 95       	dec	r18
    7d90:	e2 f7       	brpl	.-8      	; 0x7d8a <board_init+0xfba>
    7d92:	48 2f       	mov	r20, r24
    7d94:	8a 85       	ldd	r24, Y+10	; 0x0a
    7d96:	8e 87       	std	Y+14, r24	; 0x0e
 * \brief: To get the base address of port number from defined pin
 * \param: pin. the pin number defined by IOPORT_CREATE_PIN
 */
__always_inline static PORT_t *arch_ioport_pin_to_base(ioport_pin_t pin)
{
	return arch_ioport_port_to_base(pin >> 3);
    7d98:	8e 85       	ldd	r24, Y+14	; 0x0e
    7d9a:	86 95       	lsr	r24
    7d9c:	86 95       	lsr	r24
    7d9e:	86 95       	lsr	r24
    7da0:	8f 87       	std	Y+15, r24	; 0x0f
 * \param: port number e.g. IOPORT_PORTB
 */
__always_inline static PORT_t *arch_ioport_port_to_base(uint8_t port)
{
	return (PORT_t *)((uintptr_t)(IOPORT_BASE_ADDRESS +
	       (port * IOPORT_PORT_OFFSET)));
    7da2:	8f 85       	ldd	r24, Y+15	; 0x0f
    7da4:	28 2f       	mov	r18, r24
    7da6:	30 e0       	ldi	r19, 0x00	; 0
    7da8:	c9 01       	movw	r24, r18
    7daa:	88 0f       	add	r24, r24
    7dac:	99 1f       	adc	r25, r25
    7dae:	82 0f       	add	r24, r18
    7db0:	93 1f       	adc	r25, r19
 * \brief: To get the base address of port number
 * \param: port number e.g. IOPORT_PORTB
 */
__always_inline static PORT_t *arch_ioport_port_to_base(uint8_t port)
{
	return (PORT_t *)((uintptr_t)(IOPORT_BASE_ADDRESS +
    7db2:	80 96       	adiw	r24, 0x20	; 32
    7db4:	99 8b       	std	Y+17, r25	; 0x11
    7db6:	88 8b       	std	Y+16, r24	; 0x10
    7db8:	4a 8b       	std	Y+18, r20	; 0x12
    7dba:	8b 85       	ldd	r24, Y+11	; 0x0b
    7dbc:	9c 85       	ldd	r25, Y+12	; 0x0c
    7dbe:	9c 8b       	std	Y+20, r25	; 0x14
    7dc0:	8b 8b       	std	Y+19, r24	; 0x13
__always_inline static inline void ioport_configure_port_pin(void *port,
		pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
    7dc2:	8b 89       	ldd	r24, Y+19	; 0x13
    7dc4:	9c 89       	ldd	r25, Y+20	; 0x14
    7dc6:	81 70       	andi	r24, 0x01	; 1
    7dc8:	99 27       	eor	r25, r25
    7dca:	89 2b       	or	r24, r25
    7dcc:	89 f1       	breq	.+98     	; 0x7e30 <board_init+0x1060>
		if (flags & IOPORT_INIT_HIGH) {
    7dce:	8b 89       	ldd	r24, Y+19	; 0x13
    7dd0:	9c 89       	ldd	r25, Y+20	; 0x14
    7dd2:	82 70       	andi	r24, 0x02	; 2
    7dd4:	99 27       	eor	r25, r25
    7dd6:	89 2b       	or	r24, r25
    7dd8:	71 f0       	breq	.+28     	; 0x7df6 <board_init+0x1026>
			*((uint8_t *)port + 2) |= pin_mask;
    7dda:	88 89       	ldd	r24, Y+16	; 0x10
    7ddc:	99 89       	ldd	r25, Y+17	; 0x11
    7dde:	02 96       	adiw	r24, 0x02	; 2
    7de0:	28 89       	ldd	r18, Y+16	; 0x10
    7de2:	39 89       	ldd	r19, Y+17	; 0x11
    7de4:	2e 5f       	subi	r18, 0xFE	; 254
    7de6:	3f 4f       	sbci	r19, 0xFF	; 255
    7de8:	f9 01       	movw	r30, r18
    7dea:	30 81       	ld	r19, Z
    7dec:	2a 89       	ldd	r18, Y+18	; 0x12
    7dee:	23 2b       	or	r18, r19
    7df0:	fc 01       	movw	r30, r24
    7df2:	20 83       	st	Z, r18
    7df4:	0f c0       	rjmp	.+30     	; 0x7e14 <board_init+0x1044>
		} else {
			*((uint8_t *)port + 2) &= ~pin_mask;
    7df6:	88 89       	ldd	r24, Y+16	; 0x10
    7df8:	99 89       	ldd	r25, Y+17	; 0x11
    7dfa:	02 96       	adiw	r24, 0x02	; 2
    7dfc:	28 89       	ldd	r18, Y+16	; 0x10
    7dfe:	39 89       	ldd	r19, Y+17	; 0x11
    7e00:	2e 5f       	subi	r18, 0xFE	; 254
    7e02:	3f 4f       	sbci	r19, 0xFF	; 255
    7e04:	f9 01       	movw	r30, r18
    7e06:	20 81       	ld	r18, Z
    7e08:	32 2f       	mov	r19, r18
    7e0a:	2a 89       	ldd	r18, Y+18	; 0x12
    7e0c:	20 95       	com	r18
    7e0e:	23 23       	and	r18, r19
    7e10:	fc 01       	movw	r30, r24
    7e12:	20 83       	st	Z, r18
		}

		*((uint8_t *)port + 1) |= pin_mask;
    7e14:	88 89       	ldd	r24, Y+16	; 0x10
    7e16:	99 89       	ldd	r25, Y+17	; 0x11
    7e18:	01 96       	adiw	r24, 0x01	; 1
    7e1a:	28 89       	ldd	r18, Y+16	; 0x10
    7e1c:	39 89       	ldd	r19, Y+17	; 0x11
    7e1e:	2f 5f       	subi	r18, 0xFF	; 255
    7e20:	3f 4f       	sbci	r19, 0xFF	; 255
    7e22:	f9 01       	movw	r30, r18
    7e24:	30 81       	ld	r19, Z
    7e26:	2a 89       	ldd	r18, Y+18	; 0x12
    7e28:	23 2b       	or	r18, r19
    7e2a:	fc 01       	movw	r30, r24
    7e2c:	20 83       	st	Z, r18
#endif
#ifdef EXT_RF_FRONT_END_CTRL
	ioport_configure_pin(RF_FRONT_END_EN, IOPORT_DIR_OUTPUT | IOPORT_INIT_HIGH);
	ioport_configure_pin(RF_FRONT_END_LNA_EN, IOPORT_DIR_OUTPUT | IOPORT_INIT_HIGH);
#endif
}
    7e2e:	32 c0       	rjmp	.+100    	; 0x7e94 <board_init+0x10c4>
	} else {
		*((uint8_t *)port + 1) &= ~pin_mask;
    7e30:	88 89       	ldd	r24, Y+16	; 0x10
    7e32:	99 89       	ldd	r25, Y+17	; 0x11
    7e34:	01 96       	adiw	r24, 0x01	; 1
    7e36:	28 89       	ldd	r18, Y+16	; 0x10
    7e38:	39 89       	ldd	r19, Y+17	; 0x11
    7e3a:	2f 5f       	subi	r18, 0xFF	; 255
    7e3c:	3f 4f       	sbci	r19, 0xFF	; 255
    7e3e:	f9 01       	movw	r30, r18
    7e40:	20 81       	ld	r18, Z
    7e42:	32 2f       	mov	r19, r18
    7e44:	2a 89       	ldd	r18, Y+18	; 0x12
    7e46:	20 95       	com	r18
    7e48:	23 23       	and	r18, r19
    7e4a:	fc 01       	movw	r30, r24
    7e4c:	20 83       	st	Z, r18
		if (flags & IOPORT_PULL_UP) {
    7e4e:	8b 89       	ldd	r24, Y+19	; 0x13
    7e50:	9c 89       	ldd	r25, Y+20	; 0x14
    7e52:	84 70       	andi	r24, 0x04	; 4
    7e54:	99 27       	eor	r25, r25
    7e56:	89 2b       	or	r24, r25
    7e58:	71 f0       	breq	.+28     	; 0x7e76 <board_init+0x10a6>
			*((uint8_t *)port + 2) |= pin_mask;
    7e5a:	88 89       	ldd	r24, Y+16	; 0x10
    7e5c:	99 89       	ldd	r25, Y+17	; 0x11
    7e5e:	02 96       	adiw	r24, 0x02	; 2
    7e60:	28 89       	ldd	r18, Y+16	; 0x10
    7e62:	39 89       	ldd	r19, Y+17	; 0x11
    7e64:	2e 5f       	subi	r18, 0xFE	; 254
    7e66:	3f 4f       	sbci	r19, 0xFF	; 255
    7e68:	f9 01       	movw	r30, r18
    7e6a:	30 81       	ld	r19, Z
    7e6c:	2a 89       	ldd	r18, Y+18	; 0x12
    7e6e:	23 2b       	or	r18, r19
    7e70:	fc 01       	movw	r30, r24
    7e72:	20 83       	st	Z, r18
    7e74:	0f c0       	rjmp	.+30     	; 0x7e94 <board_init+0x10c4>
		} else {
			*((uint8_t *)port + 2) &= ~pin_mask;
    7e76:	88 89       	ldd	r24, Y+16	; 0x10
    7e78:	99 89       	ldd	r25, Y+17	; 0x11
    7e7a:	02 96       	adiw	r24, 0x02	; 2
    7e7c:	28 89       	ldd	r18, Y+16	; 0x10
    7e7e:	39 89       	ldd	r19, Y+17	; 0x11
    7e80:	2e 5f       	subi	r18, 0xFE	; 254
    7e82:	3f 4f       	sbci	r19, 0xFF	; 255
    7e84:	f9 01       	movw	r30, r18
    7e86:	20 81       	ld	r18, Z
    7e88:	32 2f       	mov	r19, r18
    7e8a:	2a 89       	ldd	r18, Y+18	; 0x12
    7e8c:	20 95       	com	r18
    7e8e:	23 23       	and	r18, r19
    7e90:	fc 01       	movw	r30, r24
    7e92:	20 83       	st	Z, r18
    7e94:	00 00       	nop
    7e96:	c2 59       	subi	r28, 0x92	; 146
    7e98:	df 4f       	sbci	r29, 0xFF	; 255
    7e9a:	0f b6       	in	r0, 0x3f	; 63
    7e9c:	f8 94       	cli
    7e9e:	de bf       	out	0x3e, r29	; 62
    7ea0:	0f be       	out	0x3f, r0	; 63
    7ea2:	cd bf       	out	0x3d, r28	; 61
    7ea4:	df 91       	pop	r29
    7ea6:	cf 91       	pop	r28
    7ea8:	08 95       	ret

00007eaa <common_tc_read_count>:
    7eaa:	0e 94 f0 1d 	call	0x3be0	; 0x3be0 <tmr_read_count>
    7eae:	20 91 2e 02 	lds	r18, 0x022E	; 0x80022e <timer_mul_var>
    7eb2:	22 23       	and	r18, r18
    7eb4:	c9 f0       	breq	.+50     	; 0x7ee8 <common_tc_read_count+0x3e>
    7eb6:	e0 91 c0 10 	lds	r30, 0x10C0	; 0x8010c0 <timer_multiplier>
    7eba:	40 e0       	ldi	r20, 0x00	; 0
    7ebc:	f0 91 2e 02 	lds	r31, 0x022E	; 0x80022e <timer_mul_var>
    7ec0:	6e 2f       	mov	r22, r30
    7ec2:	74 2f       	mov	r23, r20
    7ec4:	0e 94 fe 43 	call	0x87fc	; 0x87fc <__udivmodhi4>
    7ec8:	9b 01       	movw	r18, r22
    7eca:	8f ef       	ldi	r24, 0xFF	; 255
    7ecc:	9f ef       	ldi	r25, 0xFF	; 255
    7ece:	6e 2f       	mov	r22, r30
    7ed0:	74 2f       	mov	r23, r20
    7ed2:	0e 94 fe 43 	call	0x87fc	; 0x87fc <__udivmodhi4>
    7ed6:	f6 9f       	mul	r31, r22
    7ed8:	c0 01       	movw	r24, r0
    7eda:	f7 9f       	mul	r31, r23
    7edc:	90 0d       	add	r25, r0
    7ede:	11 24       	eor	r1, r1
    7ee0:	b9 01       	movw	r22, r18
    7ee2:	68 0f       	add	r22, r24
    7ee4:	79 1f       	adc	r23, r25
    7ee6:	05 c0       	rjmp	.+10     	; 0x7ef2 <common_tc_read_count+0x48>
    7ee8:	60 91 c0 10 	lds	r22, 0x10C0	; 0x8010c0 <timer_multiplier>
    7eec:	70 e0       	ldi	r23, 0x00	; 0
    7eee:	0e 94 fe 43 	call	0x87fc	; 0x87fc <__udivmodhi4>
    7ef2:	86 2f       	mov	r24, r22
    7ef4:	97 2f       	mov	r25, r23
    7ef6:	08 95       	ret

00007ef8 <common_tc_compare_stop>:
    7ef8:	0e 94 fb 1d 	call	0x3bf6	; 0x3bf6 <tmr_disable_cc_interrupt>
    7efc:	0e 94 4c 1e 	call	0x3c98	; 0x3c98 <save_cpu_interrupt>
    7f00:	10 92 2a 02 	sts	0x022A, r1	; 0x80022a <__data_end>
    7f04:	10 92 2b 02 	sts	0x022B, r1	; 0x80022b <__data_end+0x1>
    7f08:	10 92 2c 02 	sts	0x022C, r1	; 0x80022c <__data_end+0x2>
    7f0c:	10 92 2d 02 	sts	0x022D, r1	; 0x80022d <__data_end+0x3>
    7f10:	10 92 30 02 	sts	0x0230, r1	; 0x800230 <compare_value+0x1>
    7f14:	10 92 2f 02 	sts	0x022F, r1	; 0x80022f <compare_value>
    7f18:	0e 94 55 1e 	call	0x3caa	; 0x3caa <restore_cpu_interrupt>
    7f1c:	08 95       	ret

00007f1e <common_tc_overflow_stop>:
    7f1e:	0e 94 1b 1e 	call	0x3c36	; 0x3c36 <tmr_disable_ovf_interrupt>
    7f22:	10 92 2e 02 	sts	0x022E, r1	; 0x80022e <timer_mul_var>
    7f26:	08 95       	ret

00007f28 <common_tc_stop>:
    7f28:	0e 94 7c 3f 	call	0x7ef8	; 0x7ef8 <common_tc_compare_stop>
    7f2c:	0e 94 8f 3f 	call	0x7f1e	; 0x7f1e <common_tc_overflow_stop>
    7f30:	0e 94 2b 1e 	call	0x3c56	; 0x3c56 <tmr_stop>
    7f34:	08 95       	ret

00007f36 <common_tc_delay>:
    7f36:	0f 93       	push	r16
    7f38:	1f 93       	push	r17
    7f3a:	8c 01       	movw	r16, r24
    7f3c:	0e 94 f0 1d 	call	0x3be0	; 0x3be0 <tmr_read_count>
    7f40:	ac 01       	movw	r20, r24
    7f42:	a0 91 c0 10 	lds	r26, 0x10C0	; 0x8010c0 <timer_multiplier>
    7f46:	98 01       	movw	r18, r16
    7f48:	b0 e0       	ldi	r27, 0x00	; 0
    7f4a:	0e 94 34 44 	call	0x8868	; 0x8868 <__umulhisi3>
    7f4e:	8b 01       	movw	r16, r22
    7f50:	9c 01       	movw	r18, r24
    7f52:	04 0f       	add	r16, r20
    7f54:	15 1f       	adc	r17, r21
    7f56:	21 1d       	adc	r18, r1
    7f58:	31 1d       	adc	r19, r1
    7f5a:	00 93 2a 02 	sts	0x022A, r16	; 0x80022a <__data_end>
    7f5e:	10 93 2b 02 	sts	0x022B, r17	; 0x80022b <__data_end+0x1>
    7f62:	20 93 2c 02 	sts	0x022C, r18	; 0x80022c <__data_end+0x2>
    7f66:	30 93 2d 02 	sts	0x022D, r19	; 0x80022d <__data_end+0x3>
    7f6a:	00 91 2a 02 	lds	r16, 0x022A	; 0x80022a <__data_end>
    7f6e:	10 91 2b 02 	lds	r17, 0x022B	; 0x80022b <__data_end+0x1>
    7f72:	20 91 2c 02 	lds	r18, 0x022C	; 0x80022c <__data_end+0x2>
    7f76:	30 91 2d 02 	lds	r19, 0x022D	; 0x80022d <__data_end+0x3>
    7f7a:	89 01       	movw	r16, r18
    7f7c:	22 27       	eor	r18, r18
    7f7e:	33 27       	eor	r19, r19
    7f80:	00 93 2a 02 	sts	0x022A, r16	; 0x80022a <__data_end>
    7f84:	10 93 2b 02 	sts	0x022B, r17	; 0x80022b <__data_end+0x1>
    7f88:	20 93 2c 02 	sts	0x022C, r18	; 0x80022c <__data_end+0x2>
    7f8c:	30 93 2d 02 	sts	0x022D, r19	; 0x80022d <__data_end+0x3>
    7f90:	00 91 2a 02 	lds	r16, 0x022A	; 0x80022a <__data_end>
    7f94:	10 91 2b 02 	lds	r17, 0x022B	; 0x80022b <__data_end+0x1>
    7f98:	20 91 2c 02 	lds	r18, 0x022C	; 0x80022c <__data_end+0x2>
    7f9c:	30 91 2d 02 	lds	r19, 0x022D	; 0x80022d <__data_end+0x3>
    7fa0:	01 2b       	or	r16, r17
    7fa2:	02 2b       	or	r16, r18
    7fa4:	03 2b       	or	r16, r19
    7fa6:	99 f0       	breq	.+38     	; 0x7fce <common_tc_delay+0x98>
    7fa8:	00 91 2a 02 	lds	r16, 0x022A	; 0x80022a <__data_end>
    7fac:	10 91 2b 02 	lds	r17, 0x022B	; 0x80022b <__data_end+0x1>
    7fb0:	20 91 2c 02 	lds	r18, 0x022C	; 0x80022c <__data_end+0x2>
    7fb4:	30 91 2d 02 	lds	r19, 0x022D	; 0x80022d <__data_end+0x3>
    7fb8:	6f 5f       	subi	r22, 0xFF	; 255
    7fba:	7f 4f       	sbci	r23, 0xFF	; 255
    7fbc:	46 0f       	add	r20, r22
    7fbe:	57 1f       	adc	r21, r23
    7fc0:	50 93 30 02 	sts	0x0230, r21	; 0x800230 <compare_value+0x1>
    7fc4:	40 93 2f 02 	sts	0x022F, r20	; 0x80022f <compare_value>
    7fc8:	0e 94 fb 1d 	call	0x3bf6	; 0x3bf6 <tmr_disable_cc_interrupt>
    7fcc:	08 c0       	rjmp	.+16     	; 0x7fde <common_tc_delay+0xa8>
    7fce:	64 0f       	add	r22, r20
    7fd0:	75 1f       	adc	r23, r21
    7fd2:	70 93 30 02 	sts	0x0230, r23	; 0x800230 <compare_value+0x1>
    7fd6:	60 93 2f 02 	sts	0x022F, r22	; 0x80022f <compare_value>
    7fda:	0e 94 0b 1e 	call	0x3c16	; 0x3c16 <tmr_enable_cc_interrupt>
    7fde:	80 91 2f 02 	lds	r24, 0x022F	; 0x80022f <compare_value>
    7fe2:	90 91 30 02 	lds	r25, 0x0230	; 0x800230 <compare_value+0x1>
    7fe6:	84 36       	cpi	r24, 0x64	; 100
    7fe8:	91 05       	cpc	r25, r1
    7fea:	30 f4       	brcc	.+12     	; 0x7ff8 <common_tc_delay+0xc2>
    7fec:	8c 59       	subi	r24, 0x9C	; 156
    7fee:	9f 4f       	sbci	r25, 0xFF	; 255
    7ff0:	90 93 30 02 	sts	0x0230, r25	; 0x800230 <compare_value+0x1>
    7ff4:	80 93 2f 02 	sts	0x022F, r24	; 0x80022f <compare_value>
    7ff8:	80 91 2f 02 	lds	r24, 0x022F	; 0x80022f <compare_value>
    7ffc:	90 91 30 02 	lds	r25, 0x0230	; 0x800230 <compare_value+0x1>
    8000:	0e 94 37 1e 	call	0x3c6e	; 0x3c6e <tmr_write_cmpreg>
    8004:	1f 91       	pop	r17
    8006:	0f 91       	pop	r16
    8008:	08 95       	ret

0000800a <common_tc_init>:
    800a:	10 92 2e 02 	sts	0x022E, r1	; 0x80022e <timer_mul_var>
    800e:	0e 94 63 1e 	call	0x3cc6	; 0x3cc6 <tmr_init>
    8012:	80 93 c0 10 	sts	0x10C0, r24	; 0x8010c0 <timer_multiplier>
    8016:	08 95       	ret

00008018 <tmr_ovf_callback>:
    8018:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <__data_end>
    801c:	90 91 2b 02 	lds	r25, 0x022B	; 0x80022b <__data_end+0x1>
    8020:	a0 91 2c 02 	lds	r26, 0x022C	; 0x80022c <__data_end+0x2>
    8024:	b0 91 2d 02 	lds	r27, 0x022D	; 0x80022d <__data_end+0x3>
    8028:	89 2b       	or	r24, r25
    802a:	8a 2b       	or	r24, r26
    802c:	8b 2b       	or	r24, r27
    802e:	c9 f0       	breq	.+50     	; 0x8062 <tmr_ovf_callback+0x4a>
    8030:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <__data_end>
    8034:	90 91 2b 02 	lds	r25, 0x022B	; 0x80022b <__data_end+0x1>
    8038:	a0 91 2c 02 	lds	r26, 0x022C	; 0x80022c <__data_end+0x2>
    803c:	b0 91 2d 02 	lds	r27, 0x022D	; 0x80022d <__data_end+0x3>
    8040:	01 97       	sbiw	r24, 0x01	; 1
    8042:	a1 09       	sbc	r26, r1
    8044:	b1 09       	sbc	r27, r1
    8046:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <__data_end>
    804a:	90 93 2b 02 	sts	0x022B, r25	; 0x80022b <__data_end+0x1>
    804e:	a0 93 2c 02 	sts	0x022C, r26	; 0x80022c <__data_end+0x2>
    8052:	b0 93 2d 02 	sts	0x022D, r27	; 0x80022d <__data_end+0x3>
    8056:	89 2b       	or	r24, r25
    8058:	8a 2b       	or	r24, r26
    805a:	8b 2b       	or	r24, r27
    805c:	11 f4       	brne	.+4      	; 0x8062 <tmr_ovf_callback+0x4a>
    805e:	0e 94 0b 1e 	call	0x3c16	; 0x3c16 <tmr_enable_cc_interrupt>
    8062:	80 91 2e 02 	lds	r24, 0x022E	; 0x80022e <timer_mul_var>
    8066:	8f 5f       	subi	r24, 0xFF	; 255
    8068:	80 93 2e 02 	sts	0x022E, r24	; 0x80022e <timer_mul_var>
    806c:	90 91 c0 10 	lds	r25, 0x10C0	; 0x8010c0 <timer_multiplier>
    8070:	89 17       	cp	r24, r25
    8072:	48 f0       	brcs	.+18     	; 0x8086 <tmr_ovf_callback+0x6e>
    8074:	10 92 2e 02 	sts	0x022E, r1	; 0x80022e <timer_mul_var>
    8078:	e0 91 31 02 	lds	r30, 0x0231	; 0x800231 <common_tc_ovf_callback>
    807c:	f0 91 32 02 	lds	r31, 0x0232	; 0x800232 <common_tc_ovf_callback+0x1>
    8080:	30 97       	sbiw	r30, 0x00	; 0
    8082:	09 f0       	breq	.+2      	; 0x8086 <tmr_ovf_callback+0x6e>
    8084:	09 95       	icall
    8086:	08 95       	ret

00008088 <tmr_cca_callback>:
    8088:	0e 94 fb 1d 	call	0x3bf6	; 0x3bf6 <tmr_disable_cc_interrupt>
    808c:	e0 91 33 02 	lds	r30, 0x0233	; 0x800233 <common_tc_cca_callback>
    8090:	f0 91 34 02 	lds	r31, 0x0234	; 0x800234 <common_tc_cca_callback+0x1>
    8094:	30 97       	sbiw	r30, 0x00	; 0
    8096:	09 f0       	breq	.+2      	; 0x809a <tmr_cca_callback+0x12>
    8098:	09 95       	icall
    809a:	08 95       	ret

0000809c <set_common_tc_overflow_callback>:
    809c:	90 93 32 02 	sts	0x0232, r25	; 0x800232 <common_tc_ovf_callback+0x1>
    80a0:	80 93 31 02 	sts	0x0231, r24	; 0x800231 <common_tc_ovf_callback>
    80a4:	08 95       	ret

000080a6 <set_common_tc_expiry_callback>:
    80a6:	90 93 34 02 	sts	0x0234, r25	; 0x800234 <common_tc_cca_callback+0x1>
    80aa:	80 93 33 02 	sts	0x0233, r24	; 0x800233 <common_tc_cca_callback>
    80ae:	08 95       	ret

000080b0 <vfprintf>:
    80b0:	2f 92       	push	r2
    80b2:	3f 92       	push	r3
    80b4:	4f 92       	push	r4
    80b6:	5f 92       	push	r5
    80b8:	6f 92       	push	r6
    80ba:	7f 92       	push	r7
    80bc:	8f 92       	push	r8
    80be:	9f 92       	push	r9
    80c0:	af 92       	push	r10
    80c2:	bf 92       	push	r11
    80c4:	cf 92       	push	r12
    80c6:	df 92       	push	r13
    80c8:	ef 92       	push	r14
    80ca:	ff 92       	push	r15
    80cc:	0f 93       	push	r16
    80ce:	1f 93       	push	r17
    80d0:	cf 93       	push	r28
    80d2:	df 93       	push	r29
    80d4:	cd b7       	in	r28, 0x3d	; 61
    80d6:	de b7       	in	r29, 0x3e	; 62
    80d8:	60 97       	sbiw	r28, 0x10	; 16
    80da:	0f b6       	in	r0, 0x3f	; 63
    80dc:	f8 94       	cli
    80de:	de bf       	out	0x3e, r29	; 62
    80e0:	0f be       	out	0x3f, r0	; 63
    80e2:	cd bf       	out	0x3d, r28	; 61
    80e4:	7c 01       	movw	r14, r24
    80e6:	1b 01       	movw	r2, r22
    80e8:	6a 01       	movw	r12, r20
    80ea:	fc 01       	movw	r30, r24
    80ec:	17 82       	std	Z+7, r1	; 0x07
    80ee:	16 82       	std	Z+6, r1	; 0x06
    80f0:	83 81       	ldd	r24, Z+3	; 0x03
    80f2:	81 ff       	sbrs	r24, 1
    80f4:	44 c3       	rjmp	.+1672   	; 0x877e <vfprintf+0x6ce>
    80f6:	9e 01       	movw	r18, r28
    80f8:	2f 5f       	subi	r18, 0xFF	; 255
    80fa:	3f 4f       	sbci	r19, 0xFF	; 255
    80fc:	39 01       	movw	r6, r18
    80fe:	f7 01       	movw	r30, r14
    8100:	93 81       	ldd	r25, Z+3	; 0x03
    8102:	f1 01       	movw	r30, r2
    8104:	93 fd       	sbrc	r25, 3
    8106:	85 91       	lpm	r24, Z+
    8108:	93 ff       	sbrs	r25, 3
    810a:	81 91       	ld	r24, Z+
    810c:	1f 01       	movw	r2, r30
    810e:	88 23       	and	r24, r24
    8110:	09 f4       	brne	.+2      	; 0x8114 <vfprintf+0x64>
    8112:	31 c3       	rjmp	.+1634   	; 0x8776 <vfprintf+0x6c6>
    8114:	85 32       	cpi	r24, 0x25	; 37
    8116:	39 f4       	brne	.+14     	; 0x8126 <vfprintf+0x76>
    8118:	93 fd       	sbrc	r25, 3
    811a:	85 91       	lpm	r24, Z+
    811c:	93 ff       	sbrs	r25, 3
    811e:	81 91       	ld	r24, Z+
    8120:	1f 01       	movw	r2, r30
    8122:	85 32       	cpi	r24, 0x25	; 37
    8124:	39 f4       	brne	.+14     	; 0x8134 <vfprintf+0x84>
    8126:	b7 01       	movw	r22, r14
    8128:	90 e0       	ldi	r25, 0x00	; 0
    812a:	0e 94 e6 45 	call	0x8bcc	; 0x8bcc <fputc>
    812e:	56 01       	movw	r10, r12
    8130:	65 01       	movw	r12, r10
    8132:	e5 cf       	rjmp	.-54     	; 0x80fe <vfprintf+0x4e>
    8134:	10 e0       	ldi	r17, 0x00	; 0
    8136:	51 2c       	mov	r5, r1
    8138:	91 2c       	mov	r9, r1
    813a:	ff e1       	ldi	r31, 0x1F	; 31
    813c:	f9 15       	cp	r31, r9
    813e:	d8 f0       	brcs	.+54     	; 0x8176 <vfprintf+0xc6>
    8140:	8b 32       	cpi	r24, 0x2B	; 43
    8142:	79 f0       	breq	.+30     	; 0x8162 <vfprintf+0xb2>
    8144:	38 f4       	brcc	.+14     	; 0x8154 <vfprintf+0xa4>
    8146:	80 32       	cpi	r24, 0x20	; 32
    8148:	79 f0       	breq	.+30     	; 0x8168 <vfprintf+0xb8>
    814a:	83 32       	cpi	r24, 0x23	; 35
    814c:	a1 f4       	brne	.+40     	; 0x8176 <vfprintf+0xc6>
    814e:	f9 2d       	mov	r31, r9
    8150:	f0 61       	ori	r31, 0x10	; 16
    8152:	2e c0       	rjmp	.+92     	; 0x81b0 <vfprintf+0x100>
    8154:	8d 32       	cpi	r24, 0x2D	; 45
    8156:	61 f0       	breq	.+24     	; 0x8170 <vfprintf+0xc0>
    8158:	80 33       	cpi	r24, 0x30	; 48
    815a:	69 f4       	brne	.+26     	; 0x8176 <vfprintf+0xc6>
    815c:	29 2d       	mov	r18, r9
    815e:	21 60       	ori	r18, 0x01	; 1
    8160:	2d c0       	rjmp	.+90     	; 0x81bc <vfprintf+0x10c>
    8162:	39 2d       	mov	r19, r9
    8164:	32 60       	ori	r19, 0x02	; 2
    8166:	93 2e       	mov	r9, r19
    8168:	89 2d       	mov	r24, r9
    816a:	84 60       	ori	r24, 0x04	; 4
    816c:	98 2e       	mov	r9, r24
    816e:	2a c0       	rjmp	.+84     	; 0x81c4 <vfprintf+0x114>
    8170:	e9 2d       	mov	r30, r9
    8172:	e8 60       	ori	r30, 0x08	; 8
    8174:	15 c0       	rjmp	.+42     	; 0x81a0 <vfprintf+0xf0>
    8176:	97 fc       	sbrc	r9, 7
    8178:	2d c0       	rjmp	.+90     	; 0x81d4 <vfprintf+0x124>
    817a:	20 ed       	ldi	r18, 0xD0	; 208
    817c:	28 0f       	add	r18, r24
    817e:	2a 30       	cpi	r18, 0x0A	; 10
    8180:	88 f4       	brcc	.+34     	; 0x81a4 <vfprintf+0xf4>
    8182:	96 fe       	sbrs	r9, 6
    8184:	06 c0       	rjmp	.+12     	; 0x8192 <vfprintf+0xe2>
    8186:	3a e0       	ldi	r19, 0x0A	; 10
    8188:	13 9f       	mul	r17, r19
    818a:	20 0d       	add	r18, r0
    818c:	11 24       	eor	r1, r1
    818e:	12 2f       	mov	r17, r18
    8190:	19 c0       	rjmp	.+50     	; 0x81c4 <vfprintf+0x114>
    8192:	8a e0       	ldi	r24, 0x0A	; 10
    8194:	58 9e       	mul	r5, r24
    8196:	20 0d       	add	r18, r0
    8198:	11 24       	eor	r1, r1
    819a:	52 2e       	mov	r5, r18
    819c:	e9 2d       	mov	r30, r9
    819e:	e0 62       	ori	r30, 0x20	; 32
    81a0:	9e 2e       	mov	r9, r30
    81a2:	10 c0       	rjmp	.+32     	; 0x81c4 <vfprintf+0x114>
    81a4:	8e 32       	cpi	r24, 0x2E	; 46
    81a6:	31 f4       	brne	.+12     	; 0x81b4 <vfprintf+0x104>
    81a8:	96 fc       	sbrc	r9, 6
    81aa:	e5 c2       	rjmp	.+1482   	; 0x8776 <vfprintf+0x6c6>
    81ac:	f9 2d       	mov	r31, r9
    81ae:	f0 64       	ori	r31, 0x40	; 64
    81b0:	9f 2e       	mov	r9, r31
    81b2:	08 c0       	rjmp	.+16     	; 0x81c4 <vfprintf+0x114>
    81b4:	8c 36       	cpi	r24, 0x6C	; 108
    81b6:	21 f4       	brne	.+8      	; 0x81c0 <vfprintf+0x110>
    81b8:	29 2d       	mov	r18, r9
    81ba:	20 68       	ori	r18, 0x80	; 128
    81bc:	92 2e       	mov	r9, r18
    81be:	02 c0       	rjmp	.+4      	; 0x81c4 <vfprintf+0x114>
    81c0:	88 36       	cpi	r24, 0x68	; 104
    81c2:	41 f4       	brne	.+16     	; 0x81d4 <vfprintf+0x124>
    81c4:	f1 01       	movw	r30, r2
    81c6:	93 fd       	sbrc	r25, 3
    81c8:	85 91       	lpm	r24, Z+
    81ca:	93 ff       	sbrs	r25, 3
    81cc:	81 91       	ld	r24, Z+
    81ce:	1f 01       	movw	r2, r30
    81d0:	81 11       	cpse	r24, r1
    81d2:	b3 cf       	rjmp	.-154    	; 0x813a <vfprintf+0x8a>
    81d4:	9b eb       	ldi	r25, 0xBB	; 187
    81d6:	98 0f       	add	r25, r24
    81d8:	93 30       	cpi	r25, 0x03	; 3
    81da:	20 f4       	brcc	.+8      	; 0x81e4 <vfprintf+0x134>
    81dc:	99 2d       	mov	r25, r9
    81de:	90 61       	ori	r25, 0x10	; 16
    81e0:	80 5e       	subi	r24, 0xE0	; 224
    81e2:	07 c0       	rjmp	.+14     	; 0x81f2 <vfprintf+0x142>
    81e4:	9b e9       	ldi	r25, 0x9B	; 155
    81e6:	98 0f       	add	r25, r24
    81e8:	93 30       	cpi	r25, 0x03	; 3
    81ea:	08 f0       	brcs	.+2      	; 0x81ee <vfprintf+0x13e>
    81ec:	66 c1       	rjmp	.+716    	; 0x84ba <vfprintf+0x40a>
    81ee:	99 2d       	mov	r25, r9
    81f0:	9f 7e       	andi	r25, 0xEF	; 239
    81f2:	96 ff       	sbrs	r25, 6
    81f4:	16 e0       	ldi	r17, 0x06	; 6
    81f6:	9f 73       	andi	r25, 0x3F	; 63
    81f8:	99 2e       	mov	r9, r25
    81fa:	85 36       	cpi	r24, 0x65	; 101
    81fc:	19 f4       	brne	.+6      	; 0x8204 <vfprintf+0x154>
    81fe:	90 64       	ori	r25, 0x40	; 64
    8200:	99 2e       	mov	r9, r25
    8202:	08 c0       	rjmp	.+16     	; 0x8214 <vfprintf+0x164>
    8204:	86 36       	cpi	r24, 0x66	; 102
    8206:	21 f4       	brne	.+8      	; 0x8210 <vfprintf+0x160>
    8208:	39 2f       	mov	r19, r25
    820a:	30 68       	ori	r19, 0x80	; 128
    820c:	93 2e       	mov	r9, r19
    820e:	02 c0       	rjmp	.+4      	; 0x8214 <vfprintf+0x164>
    8210:	11 11       	cpse	r17, r1
    8212:	11 50       	subi	r17, 0x01	; 1
    8214:	97 fe       	sbrs	r9, 7
    8216:	07 c0       	rjmp	.+14     	; 0x8226 <vfprintf+0x176>
    8218:	1c 33       	cpi	r17, 0x3C	; 60
    821a:	50 f4       	brcc	.+20     	; 0x8230 <vfprintf+0x180>
    821c:	44 24       	eor	r4, r4
    821e:	43 94       	inc	r4
    8220:	41 0e       	add	r4, r17
    8222:	27 e0       	ldi	r18, 0x07	; 7
    8224:	0b c0       	rjmp	.+22     	; 0x823c <vfprintf+0x18c>
    8226:	18 30       	cpi	r17, 0x08	; 8
    8228:	38 f0       	brcs	.+14     	; 0x8238 <vfprintf+0x188>
    822a:	27 e0       	ldi	r18, 0x07	; 7
    822c:	17 e0       	ldi	r17, 0x07	; 7
    822e:	05 c0       	rjmp	.+10     	; 0x823a <vfprintf+0x18a>
    8230:	27 e0       	ldi	r18, 0x07	; 7
    8232:	9c e3       	ldi	r25, 0x3C	; 60
    8234:	49 2e       	mov	r4, r25
    8236:	02 c0       	rjmp	.+4      	; 0x823c <vfprintf+0x18c>
    8238:	21 2f       	mov	r18, r17
    823a:	41 2c       	mov	r4, r1
    823c:	56 01       	movw	r10, r12
    823e:	84 e0       	ldi	r24, 0x04	; 4
    8240:	a8 0e       	add	r10, r24
    8242:	b1 1c       	adc	r11, r1
    8244:	f6 01       	movw	r30, r12
    8246:	60 81       	ld	r22, Z
    8248:	71 81       	ldd	r23, Z+1	; 0x01
    824a:	82 81       	ldd	r24, Z+2	; 0x02
    824c:	93 81       	ldd	r25, Z+3	; 0x03
    824e:	04 2d       	mov	r16, r4
    8250:	a3 01       	movw	r20, r6
    8252:	0e 94 9d 44 	call	0x893a	; 0x893a <__ftoa_engine>
    8256:	6c 01       	movw	r12, r24
    8258:	f9 81       	ldd	r31, Y+1	; 0x01
    825a:	fc 87       	std	Y+12, r31	; 0x0c
    825c:	f0 ff       	sbrs	r31, 0
    825e:	02 c0       	rjmp	.+4      	; 0x8264 <vfprintf+0x1b4>
    8260:	f3 ff       	sbrs	r31, 3
    8262:	06 c0       	rjmp	.+12     	; 0x8270 <vfprintf+0x1c0>
    8264:	91 fc       	sbrc	r9, 1
    8266:	06 c0       	rjmp	.+12     	; 0x8274 <vfprintf+0x1c4>
    8268:	92 fe       	sbrs	r9, 2
    826a:	06 c0       	rjmp	.+12     	; 0x8278 <vfprintf+0x1c8>
    826c:	00 e2       	ldi	r16, 0x20	; 32
    826e:	05 c0       	rjmp	.+10     	; 0x827a <vfprintf+0x1ca>
    8270:	0d e2       	ldi	r16, 0x2D	; 45
    8272:	03 c0       	rjmp	.+6      	; 0x827a <vfprintf+0x1ca>
    8274:	0b e2       	ldi	r16, 0x2B	; 43
    8276:	01 c0       	rjmp	.+2      	; 0x827a <vfprintf+0x1ca>
    8278:	00 e0       	ldi	r16, 0x00	; 0
    827a:	8c 85       	ldd	r24, Y+12	; 0x0c
    827c:	8c 70       	andi	r24, 0x0C	; 12
    827e:	19 f0       	breq	.+6      	; 0x8286 <vfprintf+0x1d6>
    8280:	01 11       	cpse	r16, r1
    8282:	5a c2       	rjmp	.+1204   	; 0x8738 <vfprintf+0x688>
    8284:	9b c2       	rjmp	.+1334   	; 0x87bc <vfprintf+0x70c>
    8286:	97 fe       	sbrs	r9, 7
    8288:	10 c0       	rjmp	.+32     	; 0x82aa <vfprintf+0x1fa>
    828a:	4c 0c       	add	r4, r12
    828c:	fc 85       	ldd	r31, Y+12	; 0x0c
    828e:	f4 ff       	sbrs	r31, 4
    8290:	04 c0       	rjmp	.+8      	; 0x829a <vfprintf+0x1ea>
    8292:	8a 81       	ldd	r24, Y+2	; 0x02
    8294:	81 33       	cpi	r24, 0x31	; 49
    8296:	09 f4       	brne	.+2      	; 0x829a <vfprintf+0x1ea>
    8298:	4a 94       	dec	r4
    829a:	14 14       	cp	r1, r4
    829c:	74 f5       	brge	.+92     	; 0x82fa <vfprintf+0x24a>
    829e:	28 e0       	ldi	r18, 0x08	; 8
    82a0:	24 15       	cp	r18, r4
    82a2:	78 f5       	brcc	.+94     	; 0x8302 <vfprintf+0x252>
    82a4:	88 e0       	ldi	r24, 0x08	; 8
    82a6:	48 2e       	mov	r4, r24
    82a8:	2c c0       	rjmp	.+88     	; 0x8302 <vfprintf+0x252>
    82aa:	96 fc       	sbrc	r9, 6
    82ac:	2a c0       	rjmp	.+84     	; 0x8302 <vfprintf+0x252>
    82ae:	81 2f       	mov	r24, r17
    82b0:	90 e0       	ldi	r25, 0x00	; 0
    82b2:	8c 15       	cp	r24, r12
    82b4:	9d 05       	cpc	r25, r13
    82b6:	9c f0       	brlt	.+38     	; 0x82de <vfprintf+0x22e>
    82b8:	3c ef       	ldi	r19, 0xFC	; 252
    82ba:	c3 16       	cp	r12, r19
    82bc:	3f ef       	ldi	r19, 0xFF	; 255
    82be:	d3 06       	cpc	r13, r19
    82c0:	74 f0       	brlt	.+28     	; 0x82de <vfprintf+0x22e>
    82c2:	89 2d       	mov	r24, r9
    82c4:	80 68       	ori	r24, 0x80	; 128
    82c6:	98 2e       	mov	r9, r24
    82c8:	0a c0       	rjmp	.+20     	; 0x82de <vfprintf+0x22e>
    82ca:	e2 e0       	ldi	r30, 0x02	; 2
    82cc:	f0 e0       	ldi	r31, 0x00	; 0
    82ce:	ec 0f       	add	r30, r28
    82d0:	fd 1f       	adc	r31, r29
    82d2:	e1 0f       	add	r30, r17
    82d4:	f1 1d       	adc	r31, r1
    82d6:	80 81       	ld	r24, Z
    82d8:	80 33       	cpi	r24, 0x30	; 48
    82da:	19 f4       	brne	.+6      	; 0x82e2 <vfprintf+0x232>
    82dc:	11 50       	subi	r17, 0x01	; 1
    82de:	11 11       	cpse	r17, r1
    82e0:	f4 cf       	rjmp	.-24     	; 0x82ca <vfprintf+0x21a>
    82e2:	97 fe       	sbrs	r9, 7
    82e4:	0e c0       	rjmp	.+28     	; 0x8302 <vfprintf+0x252>
    82e6:	44 24       	eor	r4, r4
    82e8:	43 94       	inc	r4
    82ea:	41 0e       	add	r4, r17
    82ec:	81 2f       	mov	r24, r17
    82ee:	90 e0       	ldi	r25, 0x00	; 0
    82f0:	c8 16       	cp	r12, r24
    82f2:	d9 06       	cpc	r13, r25
    82f4:	2c f4       	brge	.+10     	; 0x8300 <vfprintf+0x250>
    82f6:	1c 19       	sub	r17, r12
    82f8:	04 c0       	rjmp	.+8      	; 0x8302 <vfprintf+0x252>
    82fa:	44 24       	eor	r4, r4
    82fc:	43 94       	inc	r4
    82fe:	01 c0       	rjmp	.+2      	; 0x8302 <vfprintf+0x252>
    8300:	10 e0       	ldi	r17, 0x00	; 0
    8302:	97 fe       	sbrs	r9, 7
    8304:	06 c0       	rjmp	.+12     	; 0x8312 <vfprintf+0x262>
    8306:	1c 14       	cp	r1, r12
    8308:	1d 04       	cpc	r1, r13
    830a:	34 f4       	brge	.+12     	; 0x8318 <vfprintf+0x268>
    830c:	c6 01       	movw	r24, r12
    830e:	01 96       	adiw	r24, 0x01	; 1
    8310:	05 c0       	rjmp	.+10     	; 0x831c <vfprintf+0x26c>
    8312:	85 e0       	ldi	r24, 0x05	; 5
    8314:	90 e0       	ldi	r25, 0x00	; 0
    8316:	02 c0       	rjmp	.+4      	; 0x831c <vfprintf+0x26c>
    8318:	81 e0       	ldi	r24, 0x01	; 1
    831a:	90 e0       	ldi	r25, 0x00	; 0
    831c:	01 11       	cpse	r16, r1
    831e:	01 96       	adiw	r24, 0x01	; 1
    8320:	11 23       	and	r17, r17
    8322:	31 f0       	breq	.+12     	; 0x8330 <vfprintf+0x280>
    8324:	21 2f       	mov	r18, r17
    8326:	30 e0       	ldi	r19, 0x00	; 0
    8328:	2f 5f       	subi	r18, 0xFF	; 255
    832a:	3f 4f       	sbci	r19, 0xFF	; 255
    832c:	82 0f       	add	r24, r18
    832e:	93 1f       	adc	r25, r19
    8330:	25 2d       	mov	r18, r5
    8332:	30 e0       	ldi	r19, 0x00	; 0
    8334:	82 17       	cp	r24, r18
    8336:	93 07       	cpc	r25, r19
    8338:	14 f4       	brge	.+4      	; 0x833e <vfprintf+0x28e>
    833a:	58 1a       	sub	r5, r24
    833c:	01 c0       	rjmp	.+2      	; 0x8340 <vfprintf+0x290>
    833e:	51 2c       	mov	r5, r1
    8340:	89 2d       	mov	r24, r9
    8342:	89 70       	andi	r24, 0x09	; 9
    8344:	49 f4       	brne	.+18     	; 0x8358 <vfprintf+0x2a8>
    8346:	55 20       	and	r5, r5
    8348:	39 f0       	breq	.+14     	; 0x8358 <vfprintf+0x2a8>
    834a:	b7 01       	movw	r22, r14
    834c:	80 e2       	ldi	r24, 0x20	; 32
    834e:	90 e0       	ldi	r25, 0x00	; 0
    8350:	0e 94 e6 45 	call	0x8bcc	; 0x8bcc <fputc>
    8354:	5a 94       	dec	r5
    8356:	f7 cf       	rjmp	.-18     	; 0x8346 <vfprintf+0x296>
    8358:	00 23       	and	r16, r16
    835a:	29 f0       	breq	.+10     	; 0x8366 <vfprintf+0x2b6>
    835c:	b7 01       	movw	r22, r14
    835e:	80 2f       	mov	r24, r16
    8360:	90 e0       	ldi	r25, 0x00	; 0
    8362:	0e 94 e6 45 	call	0x8bcc	; 0x8bcc <fputc>
    8366:	93 fc       	sbrc	r9, 3
    8368:	09 c0       	rjmp	.+18     	; 0x837c <vfprintf+0x2cc>
    836a:	55 20       	and	r5, r5
    836c:	39 f0       	breq	.+14     	; 0x837c <vfprintf+0x2cc>
    836e:	b7 01       	movw	r22, r14
    8370:	80 e3       	ldi	r24, 0x30	; 48
    8372:	90 e0       	ldi	r25, 0x00	; 0
    8374:	0e 94 e6 45 	call	0x8bcc	; 0x8bcc <fputc>
    8378:	5a 94       	dec	r5
    837a:	f7 cf       	rjmp	.-18     	; 0x836a <vfprintf+0x2ba>
    837c:	97 fe       	sbrs	r9, 7
    837e:	4c c0       	rjmp	.+152    	; 0x8418 <vfprintf+0x368>
    8380:	46 01       	movw	r8, r12
    8382:	d7 fe       	sbrs	r13, 7
    8384:	02 c0       	rjmp	.+4      	; 0x838a <vfprintf+0x2da>
    8386:	81 2c       	mov	r8, r1
    8388:	91 2c       	mov	r9, r1
    838a:	c6 01       	movw	r24, r12
    838c:	88 19       	sub	r24, r8
    838e:	99 09       	sbc	r25, r9
    8390:	f3 01       	movw	r30, r6
    8392:	e8 0f       	add	r30, r24
    8394:	f9 1f       	adc	r31, r25
    8396:	fe 87       	std	Y+14, r31	; 0x0e
    8398:	ed 87       	std	Y+13, r30	; 0x0d
    839a:	96 01       	movw	r18, r12
    839c:	24 19       	sub	r18, r4
    839e:	31 09       	sbc	r19, r1
    83a0:	38 8b       	std	Y+16, r19	; 0x10
    83a2:	2f 87       	std	Y+15, r18	; 0x0f
    83a4:	01 2f       	mov	r16, r17
    83a6:	10 e0       	ldi	r17, 0x00	; 0
    83a8:	11 95       	neg	r17
    83aa:	01 95       	neg	r16
    83ac:	11 09       	sbc	r17, r1
    83ae:	3f ef       	ldi	r19, 0xFF	; 255
    83b0:	83 16       	cp	r8, r19
    83b2:	93 06       	cpc	r9, r19
    83b4:	29 f4       	brne	.+10     	; 0x83c0 <vfprintf+0x310>
    83b6:	b7 01       	movw	r22, r14
    83b8:	8e e2       	ldi	r24, 0x2E	; 46
    83ba:	90 e0       	ldi	r25, 0x00	; 0
    83bc:	0e 94 e6 45 	call	0x8bcc	; 0x8bcc <fputc>
    83c0:	c8 14       	cp	r12, r8
    83c2:	d9 04       	cpc	r13, r9
    83c4:	4c f0       	brlt	.+18     	; 0x83d8 <vfprintf+0x328>
    83c6:	8f 85       	ldd	r24, Y+15	; 0x0f
    83c8:	98 89       	ldd	r25, Y+16	; 0x10
    83ca:	88 15       	cp	r24, r8
    83cc:	99 05       	cpc	r25, r9
    83ce:	24 f4       	brge	.+8      	; 0x83d8 <vfprintf+0x328>
    83d0:	ed 85       	ldd	r30, Y+13	; 0x0d
    83d2:	fe 85       	ldd	r31, Y+14	; 0x0e
    83d4:	81 81       	ldd	r24, Z+1	; 0x01
    83d6:	01 c0       	rjmp	.+2      	; 0x83da <vfprintf+0x32a>
    83d8:	80 e3       	ldi	r24, 0x30	; 48
    83da:	f1 e0       	ldi	r31, 0x01	; 1
    83dc:	8f 1a       	sub	r8, r31
    83de:	91 08       	sbc	r9, r1
    83e0:	2d 85       	ldd	r18, Y+13	; 0x0d
    83e2:	3e 85       	ldd	r19, Y+14	; 0x0e
    83e4:	2f 5f       	subi	r18, 0xFF	; 255
    83e6:	3f 4f       	sbci	r19, 0xFF	; 255
    83e8:	3e 87       	std	Y+14, r19	; 0x0e
    83ea:	2d 87       	std	Y+13, r18	; 0x0d
    83ec:	80 16       	cp	r8, r16
    83ee:	91 06       	cpc	r9, r17
    83f0:	2c f0       	brlt	.+10     	; 0x83fc <vfprintf+0x34c>
    83f2:	b7 01       	movw	r22, r14
    83f4:	90 e0       	ldi	r25, 0x00	; 0
    83f6:	0e 94 e6 45 	call	0x8bcc	; 0x8bcc <fputc>
    83fa:	d9 cf       	rjmp	.-78     	; 0x83ae <vfprintf+0x2fe>
    83fc:	c8 14       	cp	r12, r8
    83fe:	d9 04       	cpc	r13, r9
    8400:	41 f4       	brne	.+16     	; 0x8412 <vfprintf+0x362>
    8402:	9a 81       	ldd	r25, Y+2	; 0x02
    8404:	96 33       	cpi	r25, 0x36	; 54
    8406:	20 f4       	brcc	.+8      	; 0x8410 <vfprintf+0x360>
    8408:	95 33       	cpi	r25, 0x35	; 53
    840a:	19 f4       	brne	.+6      	; 0x8412 <vfprintf+0x362>
    840c:	3c 85       	ldd	r19, Y+12	; 0x0c
    840e:	34 ff       	sbrs	r19, 4
    8410:	81 e3       	ldi	r24, 0x31	; 49
    8412:	b7 01       	movw	r22, r14
    8414:	90 e0       	ldi	r25, 0x00	; 0
    8416:	4e c0       	rjmp	.+156    	; 0x84b4 <vfprintf+0x404>
    8418:	8a 81       	ldd	r24, Y+2	; 0x02
    841a:	81 33       	cpi	r24, 0x31	; 49
    841c:	19 f0       	breq	.+6      	; 0x8424 <vfprintf+0x374>
    841e:	9c 85       	ldd	r25, Y+12	; 0x0c
    8420:	9f 7e       	andi	r25, 0xEF	; 239
    8422:	9c 87       	std	Y+12, r25	; 0x0c
    8424:	b7 01       	movw	r22, r14
    8426:	90 e0       	ldi	r25, 0x00	; 0
    8428:	0e 94 e6 45 	call	0x8bcc	; 0x8bcc <fputc>
    842c:	11 11       	cpse	r17, r1
    842e:	05 c0       	rjmp	.+10     	; 0x843a <vfprintf+0x38a>
    8430:	94 fc       	sbrc	r9, 4
    8432:	18 c0       	rjmp	.+48     	; 0x8464 <vfprintf+0x3b4>
    8434:	85 e6       	ldi	r24, 0x65	; 101
    8436:	90 e0       	ldi	r25, 0x00	; 0
    8438:	17 c0       	rjmp	.+46     	; 0x8468 <vfprintf+0x3b8>
    843a:	b7 01       	movw	r22, r14
    843c:	8e e2       	ldi	r24, 0x2E	; 46
    843e:	90 e0       	ldi	r25, 0x00	; 0
    8440:	0e 94 e6 45 	call	0x8bcc	; 0x8bcc <fputc>
    8444:	1e 5f       	subi	r17, 0xFE	; 254
    8446:	82 e0       	ldi	r24, 0x02	; 2
    8448:	01 e0       	ldi	r16, 0x01	; 1
    844a:	08 0f       	add	r16, r24
    844c:	f3 01       	movw	r30, r6
    844e:	e8 0f       	add	r30, r24
    8450:	f1 1d       	adc	r31, r1
    8452:	80 81       	ld	r24, Z
    8454:	b7 01       	movw	r22, r14
    8456:	90 e0       	ldi	r25, 0x00	; 0
    8458:	0e 94 e6 45 	call	0x8bcc	; 0x8bcc <fputc>
    845c:	80 2f       	mov	r24, r16
    845e:	01 13       	cpse	r16, r17
    8460:	f3 cf       	rjmp	.-26     	; 0x8448 <vfprintf+0x398>
    8462:	e6 cf       	rjmp	.-52     	; 0x8430 <vfprintf+0x380>
    8464:	85 e4       	ldi	r24, 0x45	; 69
    8466:	90 e0       	ldi	r25, 0x00	; 0
    8468:	b7 01       	movw	r22, r14
    846a:	0e 94 e6 45 	call	0x8bcc	; 0x8bcc <fputc>
    846e:	d7 fc       	sbrc	r13, 7
    8470:	06 c0       	rjmp	.+12     	; 0x847e <vfprintf+0x3ce>
    8472:	c1 14       	cp	r12, r1
    8474:	d1 04       	cpc	r13, r1
    8476:	41 f4       	brne	.+16     	; 0x8488 <vfprintf+0x3d8>
    8478:	ec 85       	ldd	r30, Y+12	; 0x0c
    847a:	e4 ff       	sbrs	r30, 4
    847c:	05 c0       	rjmp	.+10     	; 0x8488 <vfprintf+0x3d8>
    847e:	d1 94       	neg	r13
    8480:	c1 94       	neg	r12
    8482:	d1 08       	sbc	r13, r1
    8484:	8d e2       	ldi	r24, 0x2D	; 45
    8486:	01 c0       	rjmp	.+2      	; 0x848a <vfprintf+0x3da>
    8488:	8b e2       	ldi	r24, 0x2B	; 43
    848a:	b7 01       	movw	r22, r14
    848c:	90 e0       	ldi	r25, 0x00	; 0
    848e:	0e 94 e6 45 	call	0x8bcc	; 0x8bcc <fputc>
    8492:	80 e3       	ldi	r24, 0x30	; 48
    8494:	2a e0       	ldi	r18, 0x0A	; 10
    8496:	c2 16       	cp	r12, r18
    8498:	d1 04       	cpc	r13, r1
    849a:	2c f0       	brlt	.+10     	; 0x84a6 <vfprintf+0x3f6>
    849c:	8f 5f       	subi	r24, 0xFF	; 255
    849e:	fa e0       	ldi	r31, 0x0A	; 10
    84a0:	cf 1a       	sub	r12, r31
    84a2:	d1 08       	sbc	r13, r1
    84a4:	f7 cf       	rjmp	.-18     	; 0x8494 <vfprintf+0x3e4>
    84a6:	b7 01       	movw	r22, r14
    84a8:	90 e0       	ldi	r25, 0x00	; 0
    84aa:	0e 94 e6 45 	call	0x8bcc	; 0x8bcc <fputc>
    84ae:	b7 01       	movw	r22, r14
    84b0:	c6 01       	movw	r24, r12
    84b2:	c0 96       	adiw	r24, 0x30	; 48
    84b4:	0e 94 e6 45 	call	0x8bcc	; 0x8bcc <fputc>
    84b8:	54 c1       	rjmp	.+680    	; 0x8762 <vfprintf+0x6b2>
    84ba:	83 36       	cpi	r24, 0x63	; 99
    84bc:	31 f0       	breq	.+12     	; 0x84ca <vfprintf+0x41a>
    84be:	83 37       	cpi	r24, 0x73	; 115
    84c0:	79 f0       	breq	.+30     	; 0x84e0 <vfprintf+0x430>
    84c2:	83 35       	cpi	r24, 0x53	; 83
    84c4:	09 f0       	breq	.+2      	; 0x84c8 <vfprintf+0x418>
    84c6:	56 c0       	rjmp	.+172    	; 0x8574 <vfprintf+0x4c4>
    84c8:	20 c0       	rjmp	.+64     	; 0x850a <vfprintf+0x45a>
    84ca:	56 01       	movw	r10, r12
    84cc:	32 e0       	ldi	r19, 0x02	; 2
    84ce:	a3 0e       	add	r10, r19
    84d0:	b1 1c       	adc	r11, r1
    84d2:	f6 01       	movw	r30, r12
    84d4:	80 81       	ld	r24, Z
    84d6:	89 83       	std	Y+1, r24	; 0x01
    84d8:	01 e0       	ldi	r16, 0x01	; 1
    84da:	10 e0       	ldi	r17, 0x00	; 0
    84dc:	63 01       	movw	r12, r6
    84de:	12 c0       	rjmp	.+36     	; 0x8504 <vfprintf+0x454>
    84e0:	56 01       	movw	r10, r12
    84e2:	f2 e0       	ldi	r31, 0x02	; 2
    84e4:	af 0e       	add	r10, r31
    84e6:	b1 1c       	adc	r11, r1
    84e8:	f6 01       	movw	r30, r12
    84ea:	c0 80       	ld	r12, Z
    84ec:	d1 80       	ldd	r13, Z+1	; 0x01
    84ee:	96 fe       	sbrs	r9, 6
    84f0:	03 c0       	rjmp	.+6      	; 0x84f8 <vfprintf+0x448>
    84f2:	61 2f       	mov	r22, r17
    84f4:	70 e0       	ldi	r23, 0x00	; 0
    84f6:	02 c0       	rjmp	.+4      	; 0x84fc <vfprintf+0x44c>
    84f8:	6f ef       	ldi	r22, 0xFF	; 255
    84fa:	7f ef       	ldi	r23, 0xFF	; 255
    84fc:	c6 01       	movw	r24, r12
    84fe:	0e 94 90 45 	call	0x8b20	; 0x8b20 <strnlen>
    8502:	8c 01       	movw	r16, r24
    8504:	f9 2d       	mov	r31, r9
    8506:	ff 77       	andi	r31, 0x7F	; 127
    8508:	14 c0       	rjmp	.+40     	; 0x8532 <vfprintf+0x482>
    850a:	56 01       	movw	r10, r12
    850c:	22 e0       	ldi	r18, 0x02	; 2
    850e:	a2 0e       	add	r10, r18
    8510:	b1 1c       	adc	r11, r1
    8512:	f6 01       	movw	r30, r12
    8514:	c0 80       	ld	r12, Z
    8516:	d1 80       	ldd	r13, Z+1	; 0x01
    8518:	96 fe       	sbrs	r9, 6
    851a:	03 c0       	rjmp	.+6      	; 0x8522 <vfprintf+0x472>
    851c:	61 2f       	mov	r22, r17
    851e:	70 e0       	ldi	r23, 0x00	; 0
    8520:	02 c0       	rjmp	.+4      	; 0x8526 <vfprintf+0x476>
    8522:	6f ef       	ldi	r22, 0xFF	; 255
    8524:	7f ef       	ldi	r23, 0xFF	; 255
    8526:	c6 01       	movw	r24, r12
    8528:	0e 94 75 45 	call	0x8aea	; 0x8aea <strnlen_P>
    852c:	8c 01       	movw	r16, r24
    852e:	f9 2d       	mov	r31, r9
    8530:	f0 68       	ori	r31, 0x80	; 128
    8532:	9f 2e       	mov	r9, r31
    8534:	f3 fd       	sbrc	r31, 3
    8536:	1a c0       	rjmp	.+52     	; 0x856c <vfprintf+0x4bc>
    8538:	85 2d       	mov	r24, r5
    853a:	90 e0       	ldi	r25, 0x00	; 0
    853c:	08 17       	cp	r16, r24
    853e:	19 07       	cpc	r17, r25
    8540:	a8 f4       	brcc	.+42     	; 0x856c <vfprintf+0x4bc>
    8542:	b7 01       	movw	r22, r14
    8544:	80 e2       	ldi	r24, 0x20	; 32
    8546:	90 e0       	ldi	r25, 0x00	; 0
    8548:	0e 94 e6 45 	call	0x8bcc	; 0x8bcc <fputc>
    854c:	5a 94       	dec	r5
    854e:	f4 cf       	rjmp	.-24     	; 0x8538 <vfprintf+0x488>
    8550:	f6 01       	movw	r30, r12
    8552:	97 fc       	sbrc	r9, 7
    8554:	85 91       	lpm	r24, Z+
    8556:	97 fe       	sbrs	r9, 7
    8558:	81 91       	ld	r24, Z+
    855a:	6f 01       	movw	r12, r30
    855c:	b7 01       	movw	r22, r14
    855e:	90 e0       	ldi	r25, 0x00	; 0
    8560:	0e 94 e6 45 	call	0x8bcc	; 0x8bcc <fputc>
    8564:	51 10       	cpse	r5, r1
    8566:	5a 94       	dec	r5
    8568:	01 50       	subi	r16, 0x01	; 1
    856a:	11 09       	sbc	r17, r1
    856c:	01 15       	cp	r16, r1
    856e:	11 05       	cpc	r17, r1
    8570:	79 f7       	brne	.-34     	; 0x8550 <vfprintf+0x4a0>
    8572:	f7 c0       	rjmp	.+494    	; 0x8762 <vfprintf+0x6b2>
    8574:	84 36       	cpi	r24, 0x64	; 100
    8576:	11 f0       	breq	.+4      	; 0x857c <vfprintf+0x4cc>
    8578:	89 36       	cpi	r24, 0x69	; 105
    857a:	61 f5       	brne	.+88     	; 0x85d4 <vfprintf+0x524>
    857c:	56 01       	movw	r10, r12
    857e:	97 fe       	sbrs	r9, 7
    8580:	09 c0       	rjmp	.+18     	; 0x8594 <vfprintf+0x4e4>
    8582:	24 e0       	ldi	r18, 0x04	; 4
    8584:	a2 0e       	add	r10, r18
    8586:	b1 1c       	adc	r11, r1
    8588:	f6 01       	movw	r30, r12
    858a:	60 81       	ld	r22, Z
    858c:	71 81       	ldd	r23, Z+1	; 0x01
    858e:	82 81       	ldd	r24, Z+2	; 0x02
    8590:	93 81       	ldd	r25, Z+3	; 0x03
    8592:	0a c0       	rjmp	.+20     	; 0x85a8 <vfprintf+0x4f8>
    8594:	f2 e0       	ldi	r31, 0x02	; 2
    8596:	af 0e       	add	r10, r31
    8598:	b1 1c       	adc	r11, r1
    859a:	f6 01       	movw	r30, r12
    859c:	60 81       	ld	r22, Z
    859e:	71 81       	ldd	r23, Z+1	; 0x01
    85a0:	07 2e       	mov	r0, r23
    85a2:	00 0c       	add	r0, r0
    85a4:	88 0b       	sbc	r24, r24
    85a6:	99 0b       	sbc	r25, r25
    85a8:	f9 2d       	mov	r31, r9
    85aa:	ff 76       	andi	r31, 0x6F	; 111
    85ac:	9f 2e       	mov	r9, r31
    85ae:	97 ff       	sbrs	r25, 7
    85b0:	09 c0       	rjmp	.+18     	; 0x85c4 <vfprintf+0x514>
    85b2:	90 95       	com	r25
    85b4:	80 95       	com	r24
    85b6:	70 95       	com	r23
    85b8:	61 95       	neg	r22
    85ba:	7f 4f       	sbci	r23, 0xFF	; 255
    85bc:	8f 4f       	sbci	r24, 0xFF	; 255
    85be:	9f 4f       	sbci	r25, 0xFF	; 255
    85c0:	f0 68       	ori	r31, 0x80	; 128
    85c2:	9f 2e       	mov	r9, r31
    85c4:	2a e0       	ldi	r18, 0x0A	; 10
    85c6:	30 e0       	ldi	r19, 0x00	; 0
    85c8:	a3 01       	movw	r20, r6
    85ca:	0e 94 22 46 	call	0x8c44	; 0x8c44 <__ultoa_invert>
    85ce:	c8 2e       	mov	r12, r24
    85d0:	c6 18       	sub	r12, r6
    85d2:	3f c0       	rjmp	.+126    	; 0x8652 <vfprintf+0x5a2>
    85d4:	09 2d       	mov	r16, r9
    85d6:	85 37       	cpi	r24, 0x75	; 117
    85d8:	21 f4       	brne	.+8      	; 0x85e2 <vfprintf+0x532>
    85da:	0f 7e       	andi	r16, 0xEF	; 239
    85dc:	2a e0       	ldi	r18, 0x0A	; 10
    85de:	30 e0       	ldi	r19, 0x00	; 0
    85e0:	1d c0       	rjmp	.+58     	; 0x861c <vfprintf+0x56c>
    85e2:	09 7f       	andi	r16, 0xF9	; 249
    85e4:	8f 36       	cpi	r24, 0x6F	; 111
    85e6:	91 f0       	breq	.+36     	; 0x860c <vfprintf+0x55c>
    85e8:	18 f4       	brcc	.+6      	; 0x85f0 <vfprintf+0x540>
    85ea:	88 35       	cpi	r24, 0x58	; 88
    85ec:	59 f0       	breq	.+22     	; 0x8604 <vfprintf+0x554>
    85ee:	c3 c0       	rjmp	.+390    	; 0x8776 <vfprintf+0x6c6>
    85f0:	80 37       	cpi	r24, 0x70	; 112
    85f2:	19 f0       	breq	.+6      	; 0x85fa <vfprintf+0x54a>
    85f4:	88 37       	cpi	r24, 0x78	; 120
    85f6:	11 f0       	breq	.+4      	; 0x85fc <vfprintf+0x54c>
    85f8:	be c0       	rjmp	.+380    	; 0x8776 <vfprintf+0x6c6>
    85fa:	00 61       	ori	r16, 0x10	; 16
    85fc:	04 ff       	sbrs	r16, 4
    85fe:	09 c0       	rjmp	.+18     	; 0x8612 <vfprintf+0x562>
    8600:	04 60       	ori	r16, 0x04	; 4
    8602:	07 c0       	rjmp	.+14     	; 0x8612 <vfprintf+0x562>
    8604:	94 fe       	sbrs	r9, 4
    8606:	08 c0       	rjmp	.+16     	; 0x8618 <vfprintf+0x568>
    8608:	06 60       	ori	r16, 0x06	; 6
    860a:	06 c0       	rjmp	.+12     	; 0x8618 <vfprintf+0x568>
    860c:	28 e0       	ldi	r18, 0x08	; 8
    860e:	30 e0       	ldi	r19, 0x00	; 0
    8610:	05 c0       	rjmp	.+10     	; 0x861c <vfprintf+0x56c>
    8612:	20 e1       	ldi	r18, 0x10	; 16
    8614:	30 e0       	ldi	r19, 0x00	; 0
    8616:	02 c0       	rjmp	.+4      	; 0x861c <vfprintf+0x56c>
    8618:	20 e1       	ldi	r18, 0x10	; 16
    861a:	32 e0       	ldi	r19, 0x02	; 2
    861c:	56 01       	movw	r10, r12
    861e:	07 ff       	sbrs	r16, 7
    8620:	09 c0       	rjmp	.+18     	; 0x8634 <vfprintf+0x584>
    8622:	84 e0       	ldi	r24, 0x04	; 4
    8624:	a8 0e       	add	r10, r24
    8626:	b1 1c       	adc	r11, r1
    8628:	f6 01       	movw	r30, r12
    862a:	60 81       	ld	r22, Z
    862c:	71 81       	ldd	r23, Z+1	; 0x01
    862e:	82 81       	ldd	r24, Z+2	; 0x02
    8630:	93 81       	ldd	r25, Z+3	; 0x03
    8632:	08 c0       	rjmp	.+16     	; 0x8644 <vfprintf+0x594>
    8634:	f2 e0       	ldi	r31, 0x02	; 2
    8636:	af 0e       	add	r10, r31
    8638:	b1 1c       	adc	r11, r1
    863a:	f6 01       	movw	r30, r12
    863c:	60 81       	ld	r22, Z
    863e:	71 81       	ldd	r23, Z+1	; 0x01
    8640:	80 e0       	ldi	r24, 0x00	; 0
    8642:	90 e0       	ldi	r25, 0x00	; 0
    8644:	a3 01       	movw	r20, r6
    8646:	0e 94 22 46 	call	0x8c44	; 0x8c44 <__ultoa_invert>
    864a:	c8 2e       	mov	r12, r24
    864c:	c6 18       	sub	r12, r6
    864e:	0f 77       	andi	r16, 0x7F	; 127
    8650:	90 2e       	mov	r9, r16
    8652:	96 fe       	sbrs	r9, 6
    8654:	0b c0       	rjmp	.+22     	; 0x866c <vfprintf+0x5bc>
    8656:	09 2d       	mov	r16, r9
    8658:	0e 7f       	andi	r16, 0xFE	; 254
    865a:	c1 16       	cp	r12, r17
    865c:	50 f4       	brcc	.+20     	; 0x8672 <vfprintf+0x5c2>
    865e:	94 fe       	sbrs	r9, 4
    8660:	0a c0       	rjmp	.+20     	; 0x8676 <vfprintf+0x5c6>
    8662:	92 fc       	sbrc	r9, 2
    8664:	08 c0       	rjmp	.+16     	; 0x8676 <vfprintf+0x5c6>
    8666:	09 2d       	mov	r16, r9
    8668:	0e 7e       	andi	r16, 0xEE	; 238
    866a:	05 c0       	rjmp	.+10     	; 0x8676 <vfprintf+0x5c6>
    866c:	dc 2c       	mov	r13, r12
    866e:	09 2d       	mov	r16, r9
    8670:	03 c0       	rjmp	.+6      	; 0x8678 <vfprintf+0x5c8>
    8672:	dc 2c       	mov	r13, r12
    8674:	01 c0       	rjmp	.+2      	; 0x8678 <vfprintf+0x5c8>
    8676:	d1 2e       	mov	r13, r17
    8678:	04 ff       	sbrs	r16, 4
    867a:	0d c0       	rjmp	.+26     	; 0x8696 <vfprintf+0x5e6>
    867c:	fe 01       	movw	r30, r28
    867e:	ec 0d       	add	r30, r12
    8680:	f1 1d       	adc	r31, r1
    8682:	80 81       	ld	r24, Z
    8684:	80 33       	cpi	r24, 0x30	; 48
    8686:	11 f4       	brne	.+4      	; 0x868c <vfprintf+0x5dc>
    8688:	09 7e       	andi	r16, 0xE9	; 233
    868a:	09 c0       	rjmp	.+18     	; 0x869e <vfprintf+0x5ee>
    868c:	02 ff       	sbrs	r16, 2
    868e:	06 c0       	rjmp	.+12     	; 0x869c <vfprintf+0x5ec>
    8690:	d3 94       	inc	r13
    8692:	d3 94       	inc	r13
    8694:	04 c0       	rjmp	.+8      	; 0x869e <vfprintf+0x5ee>
    8696:	80 2f       	mov	r24, r16
    8698:	86 78       	andi	r24, 0x86	; 134
    869a:	09 f0       	breq	.+2      	; 0x869e <vfprintf+0x5ee>
    869c:	d3 94       	inc	r13
    869e:	03 fd       	sbrc	r16, 3
    86a0:	11 c0       	rjmp	.+34     	; 0x86c4 <vfprintf+0x614>
    86a2:	00 ff       	sbrs	r16, 0
    86a4:	06 c0       	rjmp	.+12     	; 0x86b2 <vfprintf+0x602>
    86a6:	1c 2d       	mov	r17, r12
    86a8:	d5 14       	cp	r13, r5
    86aa:	80 f4       	brcc	.+32     	; 0x86cc <vfprintf+0x61c>
    86ac:	15 0d       	add	r17, r5
    86ae:	1d 19       	sub	r17, r13
    86b0:	0d c0       	rjmp	.+26     	; 0x86cc <vfprintf+0x61c>
    86b2:	d5 14       	cp	r13, r5
    86b4:	58 f4       	brcc	.+22     	; 0x86cc <vfprintf+0x61c>
    86b6:	b7 01       	movw	r22, r14
    86b8:	80 e2       	ldi	r24, 0x20	; 32
    86ba:	90 e0       	ldi	r25, 0x00	; 0
    86bc:	0e 94 e6 45 	call	0x8bcc	; 0x8bcc <fputc>
    86c0:	d3 94       	inc	r13
    86c2:	f7 cf       	rjmp	.-18     	; 0x86b2 <vfprintf+0x602>
    86c4:	d5 14       	cp	r13, r5
    86c6:	10 f4       	brcc	.+4      	; 0x86cc <vfprintf+0x61c>
    86c8:	5d 18       	sub	r5, r13
    86ca:	01 c0       	rjmp	.+2      	; 0x86ce <vfprintf+0x61e>
    86cc:	51 2c       	mov	r5, r1
    86ce:	04 ff       	sbrs	r16, 4
    86d0:	10 c0       	rjmp	.+32     	; 0x86f2 <vfprintf+0x642>
    86d2:	b7 01       	movw	r22, r14
    86d4:	80 e3       	ldi	r24, 0x30	; 48
    86d6:	90 e0       	ldi	r25, 0x00	; 0
    86d8:	0e 94 e6 45 	call	0x8bcc	; 0x8bcc <fputc>
    86dc:	02 ff       	sbrs	r16, 2
    86de:	17 c0       	rjmp	.+46     	; 0x870e <vfprintf+0x65e>
    86e0:	01 fd       	sbrc	r16, 1
    86e2:	03 c0       	rjmp	.+6      	; 0x86ea <vfprintf+0x63a>
    86e4:	88 e7       	ldi	r24, 0x78	; 120
    86e6:	90 e0       	ldi	r25, 0x00	; 0
    86e8:	02 c0       	rjmp	.+4      	; 0x86ee <vfprintf+0x63e>
    86ea:	88 e5       	ldi	r24, 0x58	; 88
    86ec:	90 e0       	ldi	r25, 0x00	; 0
    86ee:	b7 01       	movw	r22, r14
    86f0:	0c c0       	rjmp	.+24     	; 0x870a <vfprintf+0x65a>
    86f2:	80 2f       	mov	r24, r16
    86f4:	86 78       	andi	r24, 0x86	; 134
    86f6:	59 f0       	breq	.+22     	; 0x870e <vfprintf+0x65e>
    86f8:	01 ff       	sbrs	r16, 1
    86fa:	02 c0       	rjmp	.+4      	; 0x8700 <vfprintf+0x650>
    86fc:	8b e2       	ldi	r24, 0x2B	; 43
    86fe:	01 c0       	rjmp	.+2      	; 0x8702 <vfprintf+0x652>
    8700:	80 e2       	ldi	r24, 0x20	; 32
    8702:	07 fd       	sbrc	r16, 7
    8704:	8d e2       	ldi	r24, 0x2D	; 45
    8706:	b7 01       	movw	r22, r14
    8708:	90 e0       	ldi	r25, 0x00	; 0
    870a:	0e 94 e6 45 	call	0x8bcc	; 0x8bcc <fputc>
    870e:	c1 16       	cp	r12, r17
    8710:	38 f4       	brcc	.+14     	; 0x8720 <vfprintf+0x670>
    8712:	b7 01       	movw	r22, r14
    8714:	80 e3       	ldi	r24, 0x30	; 48
    8716:	90 e0       	ldi	r25, 0x00	; 0
    8718:	0e 94 e6 45 	call	0x8bcc	; 0x8bcc <fputc>
    871c:	11 50       	subi	r17, 0x01	; 1
    871e:	f7 cf       	rjmp	.-18     	; 0x870e <vfprintf+0x65e>
    8720:	ca 94       	dec	r12
    8722:	f3 01       	movw	r30, r6
    8724:	ec 0d       	add	r30, r12
    8726:	f1 1d       	adc	r31, r1
    8728:	80 81       	ld	r24, Z
    872a:	b7 01       	movw	r22, r14
    872c:	90 e0       	ldi	r25, 0x00	; 0
    872e:	0e 94 e6 45 	call	0x8bcc	; 0x8bcc <fputc>
    8732:	c1 10       	cpse	r12, r1
    8734:	f5 cf       	rjmp	.-22     	; 0x8720 <vfprintf+0x670>
    8736:	15 c0       	rjmp	.+42     	; 0x8762 <vfprintf+0x6b2>
    8738:	f4 e0       	ldi	r31, 0x04	; 4
    873a:	f5 15       	cp	r31, r5
    873c:	60 f5       	brcc	.+88     	; 0x8796 <vfprintf+0x6e6>
    873e:	84 e0       	ldi	r24, 0x04	; 4
    8740:	58 1a       	sub	r5, r24
    8742:	93 fe       	sbrs	r9, 3
    8744:	1f c0       	rjmp	.+62     	; 0x8784 <vfprintf+0x6d4>
    8746:	01 11       	cpse	r16, r1
    8748:	27 c0       	rjmp	.+78     	; 0x8798 <vfprintf+0x6e8>
    874a:	2c 85       	ldd	r18, Y+12	; 0x0c
    874c:	23 ff       	sbrs	r18, 3
    874e:	2a c0       	rjmp	.+84     	; 0x87a4 <vfprintf+0x6f4>
    8750:	00 e2       	ldi	r16, 0x20	; 32
    8752:	11 e0       	ldi	r17, 0x01	; 1
    8754:	39 2d       	mov	r19, r9
    8756:	30 71       	andi	r19, 0x10	; 16
    8758:	93 2e       	mov	r9, r19
    875a:	f8 01       	movw	r30, r16
    875c:	84 91       	lpm	r24, Z
    875e:	81 11       	cpse	r24, r1
    8760:	24 c0       	rjmp	.+72     	; 0x87aa <vfprintf+0x6fa>
    8762:	55 20       	and	r5, r5
    8764:	09 f4       	brne	.+2      	; 0x8768 <vfprintf+0x6b8>
    8766:	e4 cc       	rjmp	.-1592   	; 0x8130 <vfprintf+0x80>
    8768:	b7 01       	movw	r22, r14
    876a:	80 e2       	ldi	r24, 0x20	; 32
    876c:	90 e0       	ldi	r25, 0x00	; 0
    876e:	0e 94 e6 45 	call	0x8bcc	; 0x8bcc <fputc>
    8772:	5a 94       	dec	r5
    8774:	f6 cf       	rjmp	.-20     	; 0x8762 <vfprintf+0x6b2>
    8776:	f7 01       	movw	r30, r14
    8778:	86 81       	ldd	r24, Z+6	; 0x06
    877a:	97 81       	ldd	r25, Z+7	; 0x07
    877c:	26 c0       	rjmp	.+76     	; 0x87ca <vfprintf+0x71a>
    877e:	8f ef       	ldi	r24, 0xFF	; 255
    8780:	9f ef       	ldi	r25, 0xFF	; 255
    8782:	23 c0       	rjmp	.+70     	; 0x87ca <vfprintf+0x71a>
    8784:	b7 01       	movw	r22, r14
    8786:	80 e2       	ldi	r24, 0x20	; 32
    8788:	90 e0       	ldi	r25, 0x00	; 0
    878a:	0e 94 e6 45 	call	0x8bcc	; 0x8bcc <fputc>
    878e:	5a 94       	dec	r5
    8790:	51 10       	cpse	r5, r1
    8792:	f8 cf       	rjmp	.-16     	; 0x8784 <vfprintf+0x6d4>
    8794:	d8 cf       	rjmp	.-80     	; 0x8746 <vfprintf+0x696>
    8796:	51 2c       	mov	r5, r1
    8798:	b7 01       	movw	r22, r14
    879a:	80 2f       	mov	r24, r16
    879c:	90 e0       	ldi	r25, 0x00	; 0
    879e:	0e 94 e6 45 	call	0x8bcc	; 0x8bcc <fputc>
    87a2:	d3 cf       	rjmp	.-90     	; 0x874a <vfprintf+0x69a>
    87a4:	04 e2       	ldi	r16, 0x24	; 36
    87a6:	11 e0       	ldi	r17, 0x01	; 1
    87a8:	d5 cf       	rjmp	.-86     	; 0x8754 <vfprintf+0x6a4>
    87aa:	91 10       	cpse	r9, r1
    87ac:	80 52       	subi	r24, 0x20	; 32
    87ae:	b7 01       	movw	r22, r14
    87b0:	90 e0       	ldi	r25, 0x00	; 0
    87b2:	0e 94 e6 45 	call	0x8bcc	; 0x8bcc <fputc>
    87b6:	0f 5f       	subi	r16, 0xFF	; 255
    87b8:	1f 4f       	sbci	r17, 0xFF	; 255
    87ba:	cf cf       	rjmp	.-98     	; 0x875a <vfprintf+0x6aa>
    87bc:	23 e0       	ldi	r18, 0x03	; 3
    87be:	25 15       	cp	r18, r5
    87c0:	10 f4       	brcc	.+4      	; 0x87c6 <vfprintf+0x716>
    87c2:	83 e0       	ldi	r24, 0x03	; 3
    87c4:	bd cf       	rjmp	.-134    	; 0x8740 <vfprintf+0x690>
    87c6:	51 2c       	mov	r5, r1
    87c8:	c0 cf       	rjmp	.-128    	; 0x874a <vfprintf+0x69a>
    87ca:	60 96       	adiw	r28, 0x10	; 16
    87cc:	0f b6       	in	r0, 0x3f	; 63
    87ce:	f8 94       	cli
    87d0:	de bf       	out	0x3e, r29	; 62
    87d2:	0f be       	out	0x3f, r0	; 63
    87d4:	cd bf       	out	0x3d, r28	; 61
    87d6:	df 91       	pop	r29
    87d8:	cf 91       	pop	r28
    87da:	1f 91       	pop	r17
    87dc:	0f 91       	pop	r16
    87de:	ff 90       	pop	r15
    87e0:	ef 90       	pop	r14
    87e2:	df 90       	pop	r13
    87e4:	cf 90       	pop	r12
    87e6:	bf 90       	pop	r11
    87e8:	af 90       	pop	r10
    87ea:	9f 90       	pop	r9
    87ec:	8f 90       	pop	r8
    87ee:	7f 90       	pop	r7
    87f0:	6f 90       	pop	r6
    87f2:	5f 90       	pop	r5
    87f4:	4f 90       	pop	r4
    87f6:	3f 90       	pop	r3
    87f8:	2f 90       	pop	r2
    87fa:	08 95       	ret

000087fc <__udivmodhi4>:
    87fc:	aa 1b       	sub	r26, r26
    87fe:	bb 1b       	sub	r27, r27
    8800:	51 e1       	ldi	r21, 0x11	; 17
    8802:	07 c0       	rjmp	.+14     	; 0x8812 <__udivmodhi4_ep>

00008804 <__udivmodhi4_loop>:
    8804:	aa 1f       	adc	r26, r26
    8806:	bb 1f       	adc	r27, r27
    8808:	a6 17       	cp	r26, r22
    880a:	b7 07       	cpc	r27, r23
    880c:	10 f0       	brcs	.+4      	; 0x8812 <__udivmodhi4_ep>
    880e:	a6 1b       	sub	r26, r22
    8810:	b7 0b       	sbc	r27, r23

00008812 <__udivmodhi4_ep>:
    8812:	88 1f       	adc	r24, r24
    8814:	99 1f       	adc	r25, r25
    8816:	5a 95       	dec	r21
    8818:	a9 f7       	brne	.-22     	; 0x8804 <__udivmodhi4_loop>
    881a:	80 95       	com	r24
    881c:	90 95       	com	r25
    881e:	bc 01       	movw	r22, r24
    8820:	cd 01       	movw	r24, r26
    8822:	08 95       	ret

00008824 <__udivmodsi4>:
    8824:	a1 e2       	ldi	r26, 0x21	; 33
    8826:	1a 2e       	mov	r1, r26
    8828:	aa 1b       	sub	r26, r26
    882a:	bb 1b       	sub	r27, r27
    882c:	fd 01       	movw	r30, r26
    882e:	0d c0       	rjmp	.+26     	; 0x884a <__udivmodsi4_ep>

00008830 <__udivmodsi4_loop>:
    8830:	aa 1f       	adc	r26, r26
    8832:	bb 1f       	adc	r27, r27
    8834:	ee 1f       	adc	r30, r30
    8836:	ff 1f       	adc	r31, r31
    8838:	a2 17       	cp	r26, r18
    883a:	b3 07       	cpc	r27, r19
    883c:	e4 07       	cpc	r30, r20
    883e:	f5 07       	cpc	r31, r21
    8840:	20 f0       	brcs	.+8      	; 0x884a <__udivmodsi4_ep>
    8842:	a2 1b       	sub	r26, r18
    8844:	b3 0b       	sbc	r27, r19
    8846:	e4 0b       	sbc	r30, r20
    8848:	f5 0b       	sbc	r31, r21

0000884a <__udivmodsi4_ep>:
    884a:	66 1f       	adc	r22, r22
    884c:	77 1f       	adc	r23, r23
    884e:	88 1f       	adc	r24, r24
    8850:	99 1f       	adc	r25, r25
    8852:	1a 94       	dec	r1
    8854:	69 f7       	brne	.-38     	; 0x8830 <__udivmodsi4_loop>
    8856:	60 95       	com	r22
    8858:	70 95       	com	r23
    885a:	80 95       	com	r24
    885c:	90 95       	com	r25
    885e:	9b 01       	movw	r18, r22
    8860:	ac 01       	movw	r20, r24
    8862:	bd 01       	movw	r22, r26
    8864:	cf 01       	movw	r24, r30
    8866:	08 95       	ret

00008868 <__umulhisi3>:
    8868:	a2 9f       	mul	r26, r18
    886a:	b0 01       	movw	r22, r0
    886c:	b3 9f       	mul	r27, r19
    886e:	c0 01       	movw	r24, r0
    8870:	a3 9f       	mul	r26, r19
    8872:	70 0d       	add	r23, r0
    8874:	81 1d       	adc	r24, r1
    8876:	11 24       	eor	r1, r1
    8878:	91 1d       	adc	r25, r1
    887a:	b2 9f       	mul	r27, r18
    887c:	70 0d       	add	r23, r0
    887e:	81 1d       	adc	r24, r1
    8880:	11 24       	eor	r1, r1
    8882:	91 1d       	adc	r25, r1
    8884:	08 95       	ret

00008886 <do_rand>:
    8886:	8f 92       	push	r8
    8888:	9f 92       	push	r9
    888a:	af 92       	push	r10
    888c:	bf 92       	push	r11
    888e:	cf 92       	push	r12
    8890:	df 92       	push	r13
    8892:	ef 92       	push	r14
    8894:	ff 92       	push	r15
    8896:	cf 93       	push	r28
    8898:	df 93       	push	r29
    889a:	ec 01       	movw	r28, r24
    889c:	68 81       	ld	r22, Y
    889e:	79 81       	ldd	r23, Y+1	; 0x01
    88a0:	8a 81       	ldd	r24, Y+2	; 0x02
    88a2:	9b 81       	ldd	r25, Y+3	; 0x03
    88a4:	61 15       	cp	r22, r1
    88a6:	71 05       	cpc	r23, r1
    88a8:	81 05       	cpc	r24, r1
    88aa:	91 05       	cpc	r25, r1
    88ac:	21 f4       	brne	.+8      	; 0x88b6 <do_rand+0x30>
    88ae:	64 e2       	ldi	r22, 0x24	; 36
    88b0:	79 ed       	ldi	r23, 0xD9	; 217
    88b2:	8b e5       	ldi	r24, 0x5B	; 91
    88b4:	97 e0       	ldi	r25, 0x07	; 7
    88b6:	2d e1       	ldi	r18, 0x1D	; 29
    88b8:	33 ef       	ldi	r19, 0xF3	; 243
    88ba:	41 e0       	ldi	r20, 0x01	; 1
    88bc:	50 e0       	ldi	r21, 0x00	; 0
    88be:	0e 94 bd 47 	call	0x8f7a	; 0x8f7a <__divmodsi4>
    88c2:	49 01       	movw	r8, r18
    88c4:	5a 01       	movw	r10, r20
    88c6:	9b 01       	movw	r18, r22
    88c8:	ac 01       	movw	r20, r24
    88ca:	a7 ea       	ldi	r26, 0xA7	; 167
    88cc:	b1 e4       	ldi	r27, 0x41	; 65
    88ce:	0e 94 dc 47 	call	0x8fb8	; 0x8fb8 <__muluhisi3>
    88d2:	6b 01       	movw	r12, r22
    88d4:	7c 01       	movw	r14, r24
    88d6:	ac ee       	ldi	r26, 0xEC	; 236
    88d8:	b4 ef       	ldi	r27, 0xF4	; 244
    88da:	a5 01       	movw	r20, r10
    88dc:	94 01       	movw	r18, r8
    88de:	0e 94 ea 47 	call	0x8fd4	; 0x8fd4 <__mulohisi3>
    88e2:	dc 01       	movw	r26, r24
    88e4:	cb 01       	movw	r24, r22
    88e6:	8c 0d       	add	r24, r12
    88e8:	9d 1d       	adc	r25, r13
    88ea:	ae 1d       	adc	r26, r14
    88ec:	bf 1d       	adc	r27, r15
    88ee:	b7 ff       	sbrs	r27, 7
    88f0:	03 c0       	rjmp	.+6      	; 0x88f8 <do_rand+0x72>
    88f2:	01 97       	sbiw	r24, 0x01	; 1
    88f4:	a1 09       	sbc	r26, r1
    88f6:	b0 48       	sbci	r27, 0x80	; 128
    88f8:	88 83       	st	Y, r24
    88fa:	99 83       	std	Y+1, r25	; 0x01
    88fc:	aa 83       	std	Y+2, r26	; 0x02
    88fe:	bb 83       	std	Y+3, r27	; 0x03
    8900:	9f 77       	andi	r25, 0x7F	; 127
    8902:	df 91       	pop	r29
    8904:	cf 91       	pop	r28
    8906:	ff 90       	pop	r15
    8908:	ef 90       	pop	r14
    890a:	df 90       	pop	r13
    890c:	cf 90       	pop	r12
    890e:	bf 90       	pop	r11
    8910:	af 90       	pop	r10
    8912:	9f 90       	pop	r9
    8914:	8f 90       	pop	r8
    8916:	08 95       	ret

00008918 <rand_r>:
    8918:	0c 94 43 44 	jmp	0x8886	; 0x8886 <do_rand>

0000891c <rand>:
    891c:	80 e0       	ldi	r24, 0x00	; 0
    891e:	92 e0       	ldi	r25, 0x02	; 2
    8920:	0c 94 43 44 	jmp	0x8886	; 0x8886 <do_rand>

00008924 <srand>:
    8924:	a0 e0       	ldi	r26, 0x00	; 0
    8926:	b0 e0       	ldi	r27, 0x00	; 0
    8928:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__DATA_REGION_ORIGIN__>
    892c:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    8930:	a0 93 02 02 	sts	0x0202, r26	; 0x800202 <__DATA_REGION_ORIGIN__+0x2>
    8934:	b0 93 03 02 	sts	0x0203, r27	; 0x800203 <__DATA_REGION_ORIGIN__+0x3>
    8938:	08 95       	ret

0000893a <__ftoa_engine>:
    893a:	28 30       	cpi	r18, 0x08	; 8
    893c:	08 f0       	brcs	.+2      	; 0x8940 <__ftoa_engine+0x6>
    893e:	27 e0       	ldi	r18, 0x07	; 7
    8940:	33 27       	eor	r19, r19
    8942:	da 01       	movw	r26, r20
    8944:	99 0f       	add	r25, r25
    8946:	31 1d       	adc	r19, r1
    8948:	87 fd       	sbrc	r24, 7
    894a:	91 60       	ori	r25, 0x01	; 1
    894c:	00 96       	adiw	r24, 0x00	; 0
    894e:	61 05       	cpc	r22, r1
    8950:	71 05       	cpc	r23, r1
    8952:	39 f4       	brne	.+14     	; 0x8962 <__ftoa_engine+0x28>
    8954:	32 60       	ori	r19, 0x02	; 2
    8956:	2e 5f       	subi	r18, 0xFE	; 254
    8958:	3d 93       	st	X+, r19
    895a:	30 e3       	ldi	r19, 0x30	; 48
    895c:	2a 95       	dec	r18
    895e:	e1 f7       	brne	.-8      	; 0x8958 <__ftoa_engine+0x1e>
    8960:	08 95       	ret
    8962:	9f 3f       	cpi	r25, 0xFF	; 255
    8964:	30 f0       	brcs	.+12     	; 0x8972 <__ftoa_engine+0x38>
    8966:	80 38       	cpi	r24, 0x80	; 128
    8968:	71 05       	cpc	r23, r1
    896a:	61 05       	cpc	r22, r1
    896c:	09 f0       	breq	.+2      	; 0x8970 <__ftoa_engine+0x36>
    896e:	3c 5f       	subi	r19, 0xFC	; 252
    8970:	3c 5f       	subi	r19, 0xFC	; 252
    8972:	3d 93       	st	X+, r19
    8974:	91 30       	cpi	r25, 0x01	; 1
    8976:	08 f0       	brcs	.+2      	; 0x897a <__ftoa_engine+0x40>
    8978:	80 68       	ori	r24, 0x80	; 128
    897a:	91 1d       	adc	r25, r1
    897c:	df 93       	push	r29
    897e:	cf 93       	push	r28
    8980:	1f 93       	push	r17
    8982:	0f 93       	push	r16
    8984:	ff 92       	push	r15
    8986:	ef 92       	push	r14
    8988:	19 2f       	mov	r17, r25
    898a:	98 7f       	andi	r25, 0xF8	; 248
    898c:	96 95       	lsr	r25
    898e:	e9 2f       	mov	r30, r25
    8990:	96 95       	lsr	r25
    8992:	96 95       	lsr	r25
    8994:	e9 0f       	add	r30, r25
    8996:	ff 27       	eor	r31, r31
    8998:	ee 57       	subi	r30, 0x7E	; 126
    899a:	fe 4f       	sbci	r31, 0xFE	; 254
    899c:	99 27       	eor	r25, r25
    899e:	33 27       	eor	r19, r19
    89a0:	ee 24       	eor	r14, r14
    89a2:	ff 24       	eor	r15, r15
    89a4:	a7 01       	movw	r20, r14
    89a6:	e7 01       	movw	r28, r14
    89a8:	05 90       	lpm	r0, Z+
    89aa:	08 94       	sec
    89ac:	07 94       	ror	r0
    89ae:	28 f4       	brcc	.+10     	; 0x89ba <__ftoa_engine+0x80>
    89b0:	36 0f       	add	r19, r22
    89b2:	e7 1e       	adc	r14, r23
    89b4:	f8 1e       	adc	r15, r24
    89b6:	49 1f       	adc	r20, r25
    89b8:	51 1d       	adc	r21, r1
    89ba:	66 0f       	add	r22, r22
    89bc:	77 1f       	adc	r23, r23
    89be:	88 1f       	adc	r24, r24
    89c0:	99 1f       	adc	r25, r25
    89c2:	06 94       	lsr	r0
    89c4:	a1 f7       	brne	.-24     	; 0x89ae <__ftoa_engine+0x74>
    89c6:	05 90       	lpm	r0, Z+
    89c8:	07 94       	ror	r0
    89ca:	28 f4       	brcc	.+10     	; 0x89d6 <__ftoa_engine+0x9c>
    89cc:	e7 0e       	add	r14, r23
    89ce:	f8 1e       	adc	r15, r24
    89d0:	49 1f       	adc	r20, r25
    89d2:	56 1f       	adc	r21, r22
    89d4:	c1 1d       	adc	r28, r1
    89d6:	77 0f       	add	r23, r23
    89d8:	88 1f       	adc	r24, r24
    89da:	99 1f       	adc	r25, r25
    89dc:	66 1f       	adc	r22, r22
    89de:	06 94       	lsr	r0
    89e0:	a1 f7       	brne	.-24     	; 0x89ca <__ftoa_engine+0x90>
    89e2:	05 90       	lpm	r0, Z+
    89e4:	07 94       	ror	r0
    89e6:	28 f4       	brcc	.+10     	; 0x89f2 <__ftoa_engine+0xb8>
    89e8:	f8 0e       	add	r15, r24
    89ea:	49 1f       	adc	r20, r25
    89ec:	56 1f       	adc	r21, r22
    89ee:	c7 1f       	adc	r28, r23
    89f0:	d1 1d       	adc	r29, r1
    89f2:	88 0f       	add	r24, r24
    89f4:	99 1f       	adc	r25, r25
    89f6:	66 1f       	adc	r22, r22
    89f8:	77 1f       	adc	r23, r23
    89fa:	06 94       	lsr	r0
    89fc:	a1 f7       	brne	.-24     	; 0x89e6 <__ftoa_engine+0xac>
    89fe:	05 90       	lpm	r0, Z+
    8a00:	07 94       	ror	r0
    8a02:	20 f4       	brcc	.+8      	; 0x8a0c <__ftoa_engine+0xd2>
    8a04:	49 0f       	add	r20, r25
    8a06:	56 1f       	adc	r21, r22
    8a08:	c7 1f       	adc	r28, r23
    8a0a:	d8 1f       	adc	r29, r24
    8a0c:	99 0f       	add	r25, r25
    8a0e:	66 1f       	adc	r22, r22
    8a10:	77 1f       	adc	r23, r23
    8a12:	88 1f       	adc	r24, r24
    8a14:	06 94       	lsr	r0
    8a16:	a9 f7       	brne	.-22     	; 0x8a02 <__ftoa_engine+0xc8>
    8a18:	84 91       	lpm	r24, Z
    8a1a:	10 95       	com	r17
    8a1c:	17 70       	andi	r17, 0x07	; 7
    8a1e:	41 f0       	breq	.+16     	; 0x8a30 <__ftoa_engine+0xf6>
    8a20:	d6 95       	lsr	r29
    8a22:	c7 95       	ror	r28
    8a24:	57 95       	ror	r21
    8a26:	47 95       	ror	r20
    8a28:	f7 94       	ror	r15
    8a2a:	e7 94       	ror	r14
    8a2c:	1a 95       	dec	r17
    8a2e:	c1 f7       	brne	.-16     	; 0x8a20 <__ftoa_engine+0xe6>
    8a30:	e8 e2       	ldi	r30, 0x28	; 40
    8a32:	f1 e0       	ldi	r31, 0x01	; 1
    8a34:	68 94       	set
    8a36:	15 90       	lpm	r1, Z+
    8a38:	15 91       	lpm	r17, Z+
    8a3a:	35 91       	lpm	r19, Z+
    8a3c:	65 91       	lpm	r22, Z+
    8a3e:	95 91       	lpm	r25, Z+
    8a40:	05 90       	lpm	r0, Z+
    8a42:	7f e2       	ldi	r23, 0x2F	; 47
    8a44:	73 95       	inc	r23
    8a46:	e1 18       	sub	r14, r1
    8a48:	f1 0a       	sbc	r15, r17
    8a4a:	43 0b       	sbc	r20, r19
    8a4c:	56 0b       	sbc	r21, r22
    8a4e:	c9 0b       	sbc	r28, r25
    8a50:	d0 09       	sbc	r29, r0
    8a52:	c0 f7       	brcc	.-16     	; 0x8a44 <__ftoa_engine+0x10a>
    8a54:	e1 0c       	add	r14, r1
    8a56:	f1 1e       	adc	r15, r17
    8a58:	43 1f       	adc	r20, r19
    8a5a:	56 1f       	adc	r21, r22
    8a5c:	c9 1f       	adc	r28, r25
    8a5e:	d0 1d       	adc	r29, r0
    8a60:	7e f4       	brtc	.+30     	; 0x8a80 <__ftoa_engine+0x146>
    8a62:	70 33       	cpi	r23, 0x30	; 48
    8a64:	11 f4       	brne	.+4      	; 0x8a6a <__ftoa_engine+0x130>
    8a66:	8a 95       	dec	r24
    8a68:	e6 cf       	rjmp	.-52     	; 0x8a36 <__ftoa_engine+0xfc>
    8a6a:	e8 94       	clt
    8a6c:	01 50       	subi	r16, 0x01	; 1
    8a6e:	30 f0       	brcs	.+12     	; 0x8a7c <__ftoa_engine+0x142>
    8a70:	08 0f       	add	r16, r24
    8a72:	0a f4       	brpl	.+2      	; 0x8a76 <__ftoa_engine+0x13c>
    8a74:	00 27       	eor	r16, r16
    8a76:	02 17       	cp	r16, r18
    8a78:	08 f4       	brcc	.+2      	; 0x8a7c <__ftoa_engine+0x142>
    8a7a:	20 2f       	mov	r18, r16
    8a7c:	23 95       	inc	r18
    8a7e:	02 2f       	mov	r16, r18
    8a80:	7a 33       	cpi	r23, 0x3A	; 58
    8a82:	28 f0       	brcs	.+10     	; 0x8a8e <__ftoa_engine+0x154>
    8a84:	79 e3       	ldi	r23, 0x39	; 57
    8a86:	7d 93       	st	X+, r23
    8a88:	2a 95       	dec	r18
    8a8a:	e9 f7       	brne	.-6      	; 0x8a86 <__ftoa_engine+0x14c>
    8a8c:	10 c0       	rjmp	.+32     	; 0x8aae <__ftoa_engine+0x174>
    8a8e:	7d 93       	st	X+, r23
    8a90:	2a 95       	dec	r18
    8a92:	89 f6       	brne	.-94     	; 0x8a36 <__ftoa_engine+0xfc>
    8a94:	06 94       	lsr	r0
    8a96:	97 95       	ror	r25
    8a98:	67 95       	ror	r22
    8a9a:	37 95       	ror	r19
    8a9c:	17 95       	ror	r17
    8a9e:	17 94       	ror	r1
    8aa0:	e1 18       	sub	r14, r1
    8aa2:	f1 0a       	sbc	r15, r17
    8aa4:	43 0b       	sbc	r20, r19
    8aa6:	56 0b       	sbc	r21, r22
    8aa8:	c9 0b       	sbc	r28, r25
    8aaa:	d0 09       	sbc	r29, r0
    8aac:	98 f0       	brcs	.+38     	; 0x8ad4 <__ftoa_engine+0x19a>
    8aae:	23 95       	inc	r18
    8ab0:	7e 91       	ld	r23, -X
    8ab2:	73 95       	inc	r23
    8ab4:	7a 33       	cpi	r23, 0x3A	; 58
    8ab6:	08 f0       	brcs	.+2      	; 0x8aba <__ftoa_engine+0x180>
    8ab8:	70 e3       	ldi	r23, 0x30	; 48
    8aba:	7c 93       	st	X, r23
    8abc:	20 13       	cpse	r18, r16
    8abe:	b8 f7       	brcc	.-18     	; 0x8aae <__ftoa_engine+0x174>
    8ac0:	7e 91       	ld	r23, -X
    8ac2:	70 61       	ori	r23, 0x10	; 16
    8ac4:	7d 93       	st	X+, r23
    8ac6:	30 f0       	brcs	.+12     	; 0x8ad4 <__ftoa_engine+0x19a>
    8ac8:	83 95       	inc	r24
    8aca:	71 e3       	ldi	r23, 0x31	; 49
    8acc:	7d 93       	st	X+, r23
    8ace:	70 e3       	ldi	r23, 0x30	; 48
    8ad0:	2a 95       	dec	r18
    8ad2:	e1 f7       	brne	.-8      	; 0x8acc <__ftoa_engine+0x192>
    8ad4:	11 24       	eor	r1, r1
    8ad6:	ef 90       	pop	r14
    8ad8:	ff 90       	pop	r15
    8ada:	0f 91       	pop	r16
    8adc:	1f 91       	pop	r17
    8ade:	cf 91       	pop	r28
    8ae0:	df 91       	pop	r29
    8ae2:	99 27       	eor	r25, r25
    8ae4:	87 fd       	sbrc	r24, 7
    8ae6:	90 95       	com	r25
    8ae8:	08 95       	ret

00008aea <strnlen_P>:
    8aea:	fc 01       	movw	r30, r24
    8aec:	05 90       	lpm	r0, Z+
    8aee:	61 50       	subi	r22, 0x01	; 1
    8af0:	70 40       	sbci	r23, 0x00	; 0
    8af2:	01 10       	cpse	r0, r1
    8af4:	d8 f7       	brcc	.-10     	; 0x8aec <strnlen_P+0x2>
    8af6:	80 95       	com	r24
    8af8:	90 95       	com	r25
    8afa:	8e 0f       	add	r24, r30
    8afc:	9f 1f       	adc	r25, r31
    8afe:	08 95       	ret

00008b00 <memcpy>:
    8b00:	fb 01       	movw	r30, r22
    8b02:	dc 01       	movw	r26, r24
    8b04:	02 c0       	rjmp	.+4      	; 0x8b0a <memcpy+0xa>
    8b06:	01 90       	ld	r0, Z+
    8b08:	0d 92       	st	X+, r0
    8b0a:	41 50       	subi	r20, 0x01	; 1
    8b0c:	50 40       	sbci	r21, 0x00	; 0
    8b0e:	d8 f7       	brcc	.-10     	; 0x8b06 <memcpy+0x6>
    8b10:	08 95       	ret

00008b12 <memset>:
    8b12:	dc 01       	movw	r26, r24
    8b14:	01 c0       	rjmp	.+2      	; 0x8b18 <memset+0x6>
    8b16:	6d 93       	st	X+, r22
    8b18:	41 50       	subi	r20, 0x01	; 1
    8b1a:	50 40       	sbci	r21, 0x00	; 0
    8b1c:	e0 f7       	brcc	.-8      	; 0x8b16 <memset+0x4>
    8b1e:	08 95       	ret

00008b20 <strnlen>:
    8b20:	fc 01       	movw	r30, r24
    8b22:	61 50       	subi	r22, 0x01	; 1
    8b24:	70 40       	sbci	r23, 0x00	; 0
    8b26:	01 90       	ld	r0, Z+
    8b28:	01 10       	cpse	r0, r1
    8b2a:	d8 f7       	brcc	.-10     	; 0x8b22 <strnlen+0x2>
    8b2c:	80 95       	com	r24
    8b2e:	90 95       	com	r25
    8b30:	8e 0f       	add	r24, r30
    8b32:	9f 1f       	adc	r25, r31
    8b34:	08 95       	ret

00008b36 <fdevopen>:
    8b36:	0f 93       	push	r16
    8b38:	1f 93       	push	r17
    8b3a:	cf 93       	push	r28
    8b3c:	df 93       	push	r29
    8b3e:	00 97       	sbiw	r24, 0x00	; 0
    8b40:	31 f4       	brne	.+12     	; 0x8b4e <fdevopen+0x18>
    8b42:	61 15       	cp	r22, r1
    8b44:	71 05       	cpc	r23, r1
    8b46:	19 f4       	brne	.+6      	; 0x8b4e <fdevopen+0x18>
    8b48:	80 e0       	ldi	r24, 0x00	; 0
    8b4a:	90 e0       	ldi	r25, 0x00	; 0
    8b4c:	3a c0       	rjmp	.+116    	; 0x8bc2 <fdevopen+0x8c>
    8b4e:	8b 01       	movw	r16, r22
    8b50:	ec 01       	movw	r28, r24
    8b52:	6e e0       	ldi	r22, 0x0E	; 14
    8b54:	70 e0       	ldi	r23, 0x00	; 0
    8b56:	81 e0       	ldi	r24, 0x01	; 1
    8b58:	90 e0       	ldi	r25, 0x00	; 0
    8b5a:	0e 94 80 46 	call	0x8d00	; 0x8d00 <calloc>
    8b5e:	fc 01       	movw	r30, r24
    8b60:	89 2b       	or	r24, r25
    8b62:	91 f3       	breq	.-28     	; 0x8b48 <fdevopen+0x12>
    8b64:	80 e8       	ldi	r24, 0x80	; 128
    8b66:	83 83       	std	Z+3, r24	; 0x03
    8b68:	01 15       	cp	r16, r1
    8b6a:	11 05       	cpc	r17, r1
    8b6c:	71 f0       	breq	.+28     	; 0x8b8a <fdevopen+0x54>
    8b6e:	13 87       	std	Z+11, r17	; 0x0b
    8b70:	02 87       	std	Z+10, r16	; 0x0a
    8b72:	81 e8       	ldi	r24, 0x81	; 129
    8b74:	83 83       	std	Z+3, r24	; 0x03
    8b76:	80 91 c1 10 	lds	r24, 0x10C1	; 0x8010c1 <__iob>
    8b7a:	90 91 c2 10 	lds	r25, 0x10C2	; 0x8010c2 <__iob+0x1>
    8b7e:	89 2b       	or	r24, r25
    8b80:	21 f4       	brne	.+8      	; 0x8b8a <fdevopen+0x54>
    8b82:	f0 93 c2 10 	sts	0x10C2, r31	; 0x8010c2 <__iob+0x1>
    8b86:	e0 93 c1 10 	sts	0x10C1, r30	; 0x8010c1 <__iob>
    8b8a:	20 97       	sbiw	r28, 0x00	; 0
    8b8c:	c9 f0       	breq	.+50     	; 0x8bc0 <fdevopen+0x8a>
    8b8e:	d1 87       	std	Z+9, r29	; 0x09
    8b90:	c0 87       	std	Z+8, r28	; 0x08
    8b92:	83 81       	ldd	r24, Z+3	; 0x03
    8b94:	82 60       	ori	r24, 0x02	; 2
    8b96:	83 83       	std	Z+3, r24	; 0x03
    8b98:	80 91 c3 10 	lds	r24, 0x10C3	; 0x8010c3 <__iob+0x2>
    8b9c:	90 91 c4 10 	lds	r25, 0x10C4	; 0x8010c4 <__iob+0x3>
    8ba0:	89 2b       	or	r24, r25
    8ba2:	71 f4       	brne	.+28     	; 0x8bc0 <fdevopen+0x8a>
    8ba4:	f0 93 c4 10 	sts	0x10C4, r31	; 0x8010c4 <__iob+0x3>
    8ba8:	e0 93 c3 10 	sts	0x10C3, r30	; 0x8010c3 <__iob+0x2>
    8bac:	80 91 c5 10 	lds	r24, 0x10C5	; 0x8010c5 <__iob+0x4>
    8bb0:	90 91 c6 10 	lds	r25, 0x10C6	; 0x8010c6 <__iob+0x5>
    8bb4:	89 2b       	or	r24, r25
    8bb6:	21 f4       	brne	.+8      	; 0x8bc0 <fdevopen+0x8a>
    8bb8:	f0 93 c6 10 	sts	0x10C6, r31	; 0x8010c6 <__iob+0x5>
    8bbc:	e0 93 c5 10 	sts	0x10C5, r30	; 0x8010c5 <__iob+0x4>
    8bc0:	cf 01       	movw	r24, r30
    8bc2:	df 91       	pop	r29
    8bc4:	cf 91       	pop	r28
    8bc6:	1f 91       	pop	r17
    8bc8:	0f 91       	pop	r16
    8bca:	08 95       	ret

00008bcc <fputc>:
    8bcc:	0f 93       	push	r16
    8bce:	1f 93       	push	r17
    8bd0:	cf 93       	push	r28
    8bd2:	df 93       	push	r29
    8bd4:	fb 01       	movw	r30, r22
    8bd6:	23 81       	ldd	r18, Z+3	; 0x03
    8bd8:	21 fd       	sbrc	r18, 1
    8bda:	03 c0       	rjmp	.+6      	; 0x8be2 <fputc+0x16>
    8bdc:	8f ef       	ldi	r24, 0xFF	; 255
    8bde:	9f ef       	ldi	r25, 0xFF	; 255
    8be0:	2c c0       	rjmp	.+88     	; 0x8c3a <fputc+0x6e>
    8be2:	22 ff       	sbrs	r18, 2
    8be4:	16 c0       	rjmp	.+44     	; 0x8c12 <fputc+0x46>
    8be6:	46 81       	ldd	r20, Z+6	; 0x06
    8be8:	57 81       	ldd	r21, Z+7	; 0x07
    8bea:	24 81       	ldd	r18, Z+4	; 0x04
    8bec:	35 81       	ldd	r19, Z+5	; 0x05
    8bee:	42 17       	cp	r20, r18
    8bf0:	53 07       	cpc	r21, r19
    8bf2:	44 f4       	brge	.+16     	; 0x8c04 <fputc+0x38>
    8bf4:	a0 81       	ld	r26, Z
    8bf6:	b1 81       	ldd	r27, Z+1	; 0x01
    8bf8:	9d 01       	movw	r18, r26
    8bfa:	2f 5f       	subi	r18, 0xFF	; 255
    8bfc:	3f 4f       	sbci	r19, 0xFF	; 255
    8bfe:	31 83       	std	Z+1, r19	; 0x01
    8c00:	20 83       	st	Z, r18
    8c02:	8c 93       	st	X, r24
    8c04:	26 81       	ldd	r18, Z+6	; 0x06
    8c06:	37 81       	ldd	r19, Z+7	; 0x07
    8c08:	2f 5f       	subi	r18, 0xFF	; 255
    8c0a:	3f 4f       	sbci	r19, 0xFF	; 255
    8c0c:	37 83       	std	Z+7, r19	; 0x07
    8c0e:	26 83       	std	Z+6, r18	; 0x06
    8c10:	14 c0       	rjmp	.+40     	; 0x8c3a <fputc+0x6e>
    8c12:	8b 01       	movw	r16, r22
    8c14:	ec 01       	movw	r28, r24
    8c16:	fb 01       	movw	r30, r22
    8c18:	00 84       	ldd	r0, Z+8	; 0x08
    8c1a:	f1 85       	ldd	r31, Z+9	; 0x09
    8c1c:	e0 2d       	mov	r30, r0
    8c1e:	09 95       	icall
    8c20:	89 2b       	or	r24, r25
    8c22:	e1 f6       	brne	.-72     	; 0x8bdc <fputc+0x10>
    8c24:	d8 01       	movw	r26, r16
    8c26:	16 96       	adiw	r26, 0x06	; 6
    8c28:	8d 91       	ld	r24, X+
    8c2a:	9c 91       	ld	r25, X
    8c2c:	17 97       	sbiw	r26, 0x07	; 7
    8c2e:	01 96       	adiw	r24, 0x01	; 1
    8c30:	17 96       	adiw	r26, 0x07	; 7
    8c32:	9c 93       	st	X, r25
    8c34:	8e 93       	st	-X, r24
    8c36:	16 97       	sbiw	r26, 0x06	; 6
    8c38:	ce 01       	movw	r24, r28
    8c3a:	df 91       	pop	r29
    8c3c:	cf 91       	pop	r28
    8c3e:	1f 91       	pop	r17
    8c40:	0f 91       	pop	r16
    8c42:	08 95       	ret

00008c44 <__ultoa_invert>:
    8c44:	fa 01       	movw	r30, r20
    8c46:	aa 27       	eor	r26, r26
    8c48:	28 30       	cpi	r18, 0x08	; 8
    8c4a:	51 f1       	breq	.+84     	; 0x8ca0 <__ultoa_invert+0x5c>
    8c4c:	20 31       	cpi	r18, 0x10	; 16
    8c4e:	81 f1       	breq	.+96     	; 0x8cb0 <__ultoa_invert+0x6c>
    8c50:	e8 94       	clt
    8c52:	6f 93       	push	r22
    8c54:	6e 7f       	andi	r22, 0xFE	; 254
    8c56:	6e 5f       	subi	r22, 0xFE	; 254
    8c58:	7f 4f       	sbci	r23, 0xFF	; 255
    8c5a:	8f 4f       	sbci	r24, 0xFF	; 255
    8c5c:	9f 4f       	sbci	r25, 0xFF	; 255
    8c5e:	af 4f       	sbci	r26, 0xFF	; 255
    8c60:	b1 e0       	ldi	r27, 0x01	; 1
    8c62:	3e d0       	rcall	.+124    	; 0x8ce0 <__ultoa_invert+0x9c>
    8c64:	b4 e0       	ldi	r27, 0x04	; 4
    8c66:	3c d0       	rcall	.+120    	; 0x8ce0 <__ultoa_invert+0x9c>
    8c68:	67 0f       	add	r22, r23
    8c6a:	78 1f       	adc	r23, r24
    8c6c:	89 1f       	adc	r24, r25
    8c6e:	9a 1f       	adc	r25, r26
    8c70:	a1 1d       	adc	r26, r1
    8c72:	68 0f       	add	r22, r24
    8c74:	79 1f       	adc	r23, r25
    8c76:	8a 1f       	adc	r24, r26
    8c78:	91 1d       	adc	r25, r1
    8c7a:	a1 1d       	adc	r26, r1
    8c7c:	6a 0f       	add	r22, r26
    8c7e:	71 1d       	adc	r23, r1
    8c80:	81 1d       	adc	r24, r1
    8c82:	91 1d       	adc	r25, r1
    8c84:	a1 1d       	adc	r26, r1
    8c86:	20 d0       	rcall	.+64     	; 0x8cc8 <__ultoa_invert+0x84>
    8c88:	09 f4       	brne	.+2      	; 0x8c8c <__ultoa_invert+0x48>
    8c8a:	68 94       	set
    8c8c:	3f 91       	pop	r19
    8c8e:	2a e0       	ldi	r18, 0x0A	; 10
    8c90:	26 9f       	mul	r18, r22
    8c92:	11 24       	eor	r1, r1
    8c94:	30 19       	sub	r19, r0
    8c96:	30 5d       	subi	r19, 0xD0	; 208
    8c98:	31 93       	st	Z+, r19
    8c9a:	de f6       	brtc	.-74     	; 0x8c52 <__ultoa_invert+0xe>
    8c9c:	cf 01       	movw	r24, r30
    8c9e:	08 95       	ret
    8ca0:	46 2f       	mov	r20, r22
    8ca2:	47 70       	andi	r20, 0x07	; 7
    8ca4:	40 5d       	subi	r20, 0xD0	; 208
    8ca6:	41 93       	st	Z+, r20
    8ca8:	b3 e0       	ldi	r27, 0x03	; 3
    8caa:	0f d0       	rcall	.+30     	; 0x8cca <__ultoa_invert+0x86>
    8cac:	c9 f7       	brne	.-14     	; 0x8ca0 <__ultoa_invert+0x5c>
    8cae:	f6 cf       	rjmp	.-20     	; 0x8c9c <__ultoa_invert+0x58>
    8cb0:	46 2f       	mov	r20, r22
    8cb2:	4f 70       	andi	r20, 0x0F	; 15
    8cb4:	40 5d       	subi	r20, 0xD0	; 208
    8cb6:	4a 33       	cpi	r20, 0x3A	; 58
    8cb8:	18 f0       	brcs	.+6      	; 0x8cc0 <__ultoa_invert+0x7c>
    8cba:	49 5d       	subi	r20, 0xD9	; 217
    8cbc:	31 fd       	sbrc	r19, 1
    8cbe:	40 52       	subi	r20, 0x20	; 32
    8cc0:	41 93       	st	Z+, r20
    8cc2:	02 d0       	rcall	.+4      	; 0x8cc8 <__ultoa_invert+0x84>
    8cc4:	a9 f7       	brne	.-22     	; 0x8cb0 <__ultoa_invert+0x6c>
    8cc6:	ea cf       	rjmp	.-44     	; 0x8c9c <__ultoa_invert+0x58>
    8cc8:	b4 e0       	ldi	r27, 0x04	; 4
    8cca:	a6 95       	lsr	r26
    8ccc:	97 95       	ror	r25
    8cce:	87 95       	ror	r24
    8cd0:	77 95       	ror	r23
    8cd2:	67 95       	ror	r22
    8cd4:	ba 95       	dec	r27
    8cd6:	c9 f7       	brne	.-14     	; 0x8cca <__ultoa_invert+0x86>
    8cd8:	00 97       	sbiw	r24, 0x00	; 0
    8cda:	61 05       	cpc	r22, r1
    8cdc:	71 05       	cpc	r23, r1
    8cde:	08 95       	ret
    8ce0:	9b 01       	movw	r18, r22
    8ce2:	ac 01       	movw	r20, r24
    8ce4:	0a 2e       	mov	r0, r26
    8ce6:	06 94       	lsr	r0
    8ce8:	57 95       	ror	r21
    8cea:	47 95       	ror	r20
    8cec:	37 95       	ror	r19
    8cee:	27 95       	ror	r18
    8cf0:	ba 95       	dec	r27
    8cf2:	c9 f7       	brne	.-14     	; 0x8ce6 <__ultoa_invert+0xa2>
    8cf4:	62 0f       	add	r22, r18
    8cf6:	73 1f       	adc	r23, r19
    8cf8:	84 1f       	adc	r24, r20
    8cfa:	95 1f       	adc	r25, r21
    8cfc:	a0 1d       	adc	r26, r0
    8cfe:	08 95       	ret

00008d00 <calloc>:
    8d00:	0f 93       	push	r16
    8d02:	1f 93       	push	r17
    8d04:	cf 93       	push	r28
    8d06:	df 93       	push	r29
    8d08:	86 9f       	mul	r24, r22
    8d0a:	80 01       	movw	r16, r0
    8d0c:	87 9f       	mul	r24, r23
    8d0e:	10 0d       	add	r17, r0
    8d10:	96 9f       	mul	r25, r22
    8d12:	10 0d       	add	r17, r0
    8d14:	11 24       	eor	r1, r1
    8d16:	c8 01       	movw	r24, r16
    8d18:	0e 94 9c 46 	call	0x8d38	; 0x8d38 <malloc>
    8d1c:	ec 01       	movw	r28, r24
    8d1e:	00 97       	sbiw	r24, 0x00	; 0
    8d20:	29 f0       	breq	.+10     	; 0x8d2c <calloc+0x2c>
    8d22:	a8 01       	movw	r20, r16
    8d24:	60 e0       	ldi	r22, 0x00	; 0
    8d26:	70 e0       	ldi	r23, 0x00	; 0
    8d28:	0e 94 89 45 	call	0x8b12	; 0x8b12 <memset>
    8d2c:	ce 01       	movw	r24, r28
    8d2e:	df 91       	pop	r29
    8d30:	cf 91       	pop	r28
    8d32:	1f 91       	pop	r17
    8d34:	0f 91       	pop	r16
    8d36:	08 95       	ret

00008d38 <malloc>:
    8d38:	0f 93       	push	r16
    8d3a:	1f 93       	push	r17
    8d3c:	cf 93       	push	r28
    8d3e:	df 93       	push	r29
    8d40:	82 30       	cpi	r24, 0x02	; 2
    8d42:	91 05       	cpc	r25, r1
    8d44:	10 f4       	brcc	.+4      	; 0x8d4a <malloc+0x12>
    8d46:	82 e0       	ldi	r24, 0x02	; 2
    8d48:	90 e0       	ldi	r25, 0x00	; 0
    8d4a:	e0 91 c9 10 	lds	r30, 0x10C9	; 0x8010c9 <__flp>
    8d4e:	f0 91 ca 10 	lds	r31, 0x10CA	; 0x8010ca <__flp+0x1>
    8d52:	20 e0       	ldi	r18, 0x00	; 0
    8d54:	30 e0       	ldi	r19, 0x00	; 0
    8d56:	a0 e0       	ldi	r26, 0x00	; 0
    8d58:	b0 e0       	ldi	r27, 0x00	; 0
    8d5a:	30 97       	sbiw	r30, 0x00	; 0
    8d5c:	19 f1       	breq	.+70     	; 0x8da4 <malloc+0x6c>
    8d5e:	40 81       	ld	r20, Z
    8d60:	51 81       	ldd	r21, Z+1	; 0x01
    8d62:	02 81       	ldd	r16, Z+2	; 0x02
    8d64:	13 81       	ldd	r17, Z+3	; 0x03
    8d66:	48 17       	cp	r20, r24
    8d68:	59 07       	cpc	r21, r25
    8d6a:	c8 f0       	brcs	.+50     	; 0x8d9e <malloc+0x66>
    8d6c:	84 17       	cp	r24, r20
    8d6e:	95 07       	cpc	r25, r21
    8d70:	69 f4       	brne	.+26     	; 0x8d8c <malloc+0x54>
    8d72:	10 97       	sbiw	r26, 0x00	; 0
    8d74:	31 f0       	breq	.+12     	; 0x8d82 <malloc+0x4a>
    8d76:	12 96       	adiw	r26, 0x02	; 2
    8d78:	0c 93       	st	X, r16
    8d7a:	12 97       	sbiw	r26, 0x02	; 2
    8d7c:	13 96       	adiw	r26, 0x03	; 3
    8d7e:	1c 93       	st	X, r17
    8d80:	27 c0       	rjmp	.+78     	; 0x8dd0 <malloc+0x98>
    8d82:	00 93 c9 10 	sts	0x10C9, r16	; 0x8010c9 <__flp>
    8d86:	10 93 ca 10 	sts	0x10CA, r17	; 0x8010ca <__flp+0x1>
    8d8a:	22 c0       	rjmp	.+68     	; 0x8dd0 <malloc+0x98>
    8d8c:	21 15       	cp	r18, r1
    8d8e:	31 05       	cpc	r19, r1
    8d90:	19 f0       	breq	.+6      	; 0x8d98 <malloc+0x60>
    8d92:	42 17       	cp	r20, r18
    8d94:	53 07       	cpc	r21, r19
    8d96:	18 f4       	brcc	.+6      	; 0x8d9e <malloc+0x66>
    8d98:	9a 01       	movw	r18, r20
    8d9a:	bd 01       	movw	r22, r26
    8d9c:	ef 01       	movw	r28, r30
    8d9e:	df 01       	movw	r26, r30
    8da0:	f8 01       	movw	r30, r16
    8da2:	db cf       	rjmp	.-74     	; 0x8d5a <malloc+0x22>
    8da4:	21 15       	cp	r18, r1
    8da6:	31 05       	cpc	r19, r1
    8da8:	f9 f0       	breq	.+62     	; 0x8de8 <malloc+0xb0>
    8daa:	28 1b       	sub	r18, r24
    8dac:	39 0b       	sbc	r19, r25
    8dae:	24 30       	cpi	r18, 0x04	; 4
    8db0:	31 05       	cpc	r19, r1
    8db2:	80 f4       	brcc	.+32     	; 0x8dd4 <malloc+0x9c>
    8db4:	8a 81       	ldd	r24, Y+2	; 0x02
    8db6:	9b 81       	ldd	r25, Y+3	; 0x03
    8db8:	61 15       	cp	r22, r1
    8dba:	71 05       	cpc	r23, r1
    8dbc:	21 f0       	breq	.+8      	; 0x8dc6 <malloc+0x8e>
    8dbe:	fb 01       	movw	r30, r22
    8dc0:	93 83       	std	Z+3, r25	; 0x03
    8dc2:	82 83       	std	Z+2, r24	; 0x02
    8dc4:	04 c0       	rjmp	.+8      	; 0x8dce <malloc+0x96>
    8dc6:	90 93 ca 10 	sts	0x10CA, r25	; 0x8010ca <__flp+0x1>
    8dca:	80 93 c9 10 	sts	0x10C9, r24	; 0x8010c9 <__flp>
    8dce:	fe 01       	movw	r30, r28
    8dd0:	32 96       	adiw	r30, 0x02	; 2
    8dd2:	44 c0       	rjmp	.+136    	; 0x8e5c <malloc+0x124>
    8dd4:	fe 01       	movw	r30, r28
    8dd6:	e2 0f       	add	r30, r18
    8dd8:	f3 1f       	adc	r31, r19
    8dda:	81 93       	st	Z+, r24
    8ddc:	91 93       	st	Z+, r25
    8dde:	22 50       	subi	r18, 0x02	; 2
    8de0:	31 09       	sbc	r19, r1
    8de2:	39 83       	std	Y+1, r19	; 0x01
    8de4:	28 83       	st	Y, r18
    8de6:	3a c0       	rjmp	.+116    	; 0x8e5c <malloc+0x124>
    8de8:	20 91 c7 10 	lds	r18, 0x10C7	; 0x8010c7 <__brkval>
    8dec:	30 91 c8 10 	lds	r19, 0x10C8	; 0x8010c8 <__brkval+0x1>
    8df0:	23 2b       	or	r18, r19
    8df2:	41 f4       	brne	.+16     	; 0x8e04 <malloc+0xcc>
    8df4:	20 91 06 02 	lds	r18, 0x0206	; 0x800206 <__malloc_heap_start>
    8df8:	30 91 07 02 	lds	r19, 0x0207	; 0x800207 <__malloc_heap_start+0x1>
    8dfc:	30 93 c8 10 	sts	0x10C8, r19	; 0x8010c8 <__brkval+0x1>
    8e00:	20 93 c7 10 	sts	0x10C7, r18	; 0x8010c7 <__brkval>
    8e04:	20 91 04 02 	lds	r18, 0x0204	; 0x800204 <__malloc_heap_end>
    8e08:	30 91 05 02 	lds	r19, 0x0205	; 0x800205 <__malloc_heap_end+0x1>
    8e0c:	21 15       	cp	r18, r1
    8e0e:	31 05       	cpc	r19, r1
    8e10:	41 f4       	brne	.+16     	; 0x8e22 <malloc+0xea>
    8e12:	2d b7       	in	r18, 0x3d	; 61
    8e14:	3e b7       	in	r19, 0x3e	; 62
    8e16:	40 91 08 02 	lds	r20, 0x0208	; 0x800208 <__malloc_margin>
    8e1a:	50 91 09 02 	lds	r21, 0x0209	; 0x800209 <__malloc_margin+0x1>
    8e1e:	24 1b       	sub	r18, r20
    8e20:	35 0b       	sbc	r19, r21
    8e22:	e0 91 c7 10 	lds	r30, 0x10C7	; 0x8010c7 <__brkval>
    8e26:	f0 91 c8 10 	lds	r31, 0x10C8	; 0x8010c8 <__brkval+0x1>
    8e2a:	e2 17       	cp	r30, r18
    8e2c:	f3 07       	cpc	r31, r19
    8e2e:	a0 f4       	brcc	.+40     	; 0x8e58 <malloc+0x120>
    8e30:	2e 1b       	sub	r18, r30
    8e32:	3f 0b       	sbc	r19, r31
    8e34:	28 17       	cp	r18, r24
    8e36:	39 07       	cpc	r19, r25
    8e38:	78 f0       	brcs	.+30     	; 0x8e58 <malloc+0x120>
    8e3a:	ac 01       	movw	r20, r24
    8e3c:	4e 5f       	subi	r20, 0xFE	; 254
    8e3e:	5f 4f       	sbci	r21, 0xFF	; 255
    8e40:	24 17       	cp	r18, r20
    8e42:	35 07       	cpc	r19, r21
    8e44:	48 f0       	brcs	.+18     	; 0x8e58 <malloc+0x120>
    8e46:	4e 0f       	add	r20, r30
    8e48:	5f 1f       	adc	r21, r31
    8e4a:	50 93 c8 10 	sts	0x10C8, r21	; 0x8010c8 <__brkval+0x1>
    8e4e:	40 93 c7 10 	sts	0x10C7, r20	; 0x8010c7 <__brkval>
    8e52:	81 93       	st	Z+, r24
    8e54:	91 93       	st	Z+, r25
    8e56:	02 c0       	rjmp	.+4      	; 0x8e5c <malloc+0x124>
    8e58:	e0 e0       	ldi	r30, 0x00	; 0
    8e5a:	f0 e0       	ldi	r31, 0x00	; 0
    8e5c:	cf 01       	movw	r24, r30
    8e5e:	df 91       	pop	r29
    8e60:	cf 91       	pop	r28
    8e62:	1f 91       	pop	r17
    8e64:	0f 91       	pop	r16
    8e66:	08 95       	ret

00008e68 <free>:
    8e68:	cf 93       	push	r28
    8e6a:	df 93       	push	r29
    8e6c:	00 97       	sbiw	r24, 0x00	; 0
    8e6e:	09 f4       	brne	.+2      	; 0x8e72 <free+0xa>
    8e70:	81 c0       	rjmp	.+258    	; 0x8f74 <free+0x10c>
    8e72:	fc 01       	movw	r30, r24
    8e74:	32 97       	sbiw	r30, 0x02	; 2
    8e76:	13 82       	std	Z+3, r1	; 0x03
    8e78:	12 82       	std	Z+2, r1	; 0x02
    8e7a:	a0 91 c9 10 	lds	r26, 0x10C9	; 0x8010c9 <__flp>
    8e7e:	b0 91 ca 10 	lds	r27, 0x10CA	; 0x8010ca <__flp+0x1>
    8e82:	10 97       	sbiw	r26, 0x00	; 0
    8e84:	81 f4       	brne	.+32     	; 0x8ea6 <free+0x3e>
    8e86:	20 81       	ld	r18, Z
    8e88:	31 81       	ldd	r19, Z+1	; 0x01
    8e8a:	82 0f       	add	r24, r18
    8e8c:	93 1f       	adc	r25, r19
    8e8e:	20 91 c7 10 	lds	r18, 0x10C7	; 0x8010c7 <__brkval>
    8e92:	30 91 c8 10 	lds	r19, 0x10C8	; 0x8010c8 <__brkval+0x1>
    8e96:	28 17       	cp	r18, r24
    8e98:	39 07       	cpc	r19, r25
    8e9a:	51 f5       	brne	.+84     	; 0x8ef0 <free+0x88>
    8e9c:	f0 93 c8 10 	sts	0x10C8, r31	; 0x8010c8 <__brkval+0x1>
    8ea0:	e0 93 c7 10 	sts	0x10C7, r30	; 0x8010c7 <__brkval>
    8ea4:	67 c0       	rjmp	.+206    	; 0x8f74 <free+0x10c>
    8ea6:	ed 01       	movw	r28, r26
    8ea8:	20 e0       	ldi	r18, 0x00	; 0
    8eaa:	30 e0       	ldi	r19, 0x00	; 0
    8eac:	ce 17       	cp	r28, r30
    8eae:	df 07       	cpc	r29, r31
    8eb0:	40 f4       	brcc	.+16     	; 0x8ec2 <free+0x5a>
    8eb2:	4a 81       	ldd	r20, Y+2	; 0x02
    8eb4:	5b 81       	ldd	r21, Y+3	; 0x03
    8eb6:	9e 01       	movw	r18, r28
    8eb8:	41 15       	cp	r20, r1
    8eba:	51 05       	cpc	r21, r1
    8ebc:	f1 f0       	breq	.+60     	; 0x8efa <free+0x92>
    8ebe:	ea 01       	movw	r28, r20
    8ec0:	f5 cf       	rjmp	.-22     	; 0x8eac <free+0x44>
    8ec2:	d3 83       	std	Z+3, r29	; 0x03
    8ec4:	c2 83       	std	Z+2, r28	; 0x02
    8ec6:	40 81       	ld	r20, Z
    8ec8:	51 81       	ldd	r21, Z+1	; 0x01
    8eca:	84 0f       	add	r24, r20
    8ecc:	95 1f       	adc	r25, r21
    8ece:	c8 17       	cp	r28, r24
    8ed0:	d9 07       	cpc	r29, r25
    8ed2:	59 f4       	brne	.+22     	; 0x8eea <free+0x82>
    8ed4:	88 81       	ld	r24, Y
    8ed6:	99 81       	ldd	r25, Y+1	; 0x01
    8ed8:	84 0f       	add	r24, r20
    8eda:	95 1f       	adc	r25, r21
    8edc:	02 96       	adiw	r24, 0x02	; 2
    8ede:	91 83       	std	Z+1, r25	; 0x01
    8ee0:	80 83       	st	Z, r24
    8ee2:	8a 81       	ldd	r24, Y+2	; 0x02
    8ee4:	9b 81       	ldd	r25, Y+3	; 0x03
    8ee6:	93 83       	std	Z+3, r25	; 0x03
    8ee8:	82 83       	std	Z+2, r24	; 0x02
    8eea:	21 15       	cp	r18, r1
    8eec:	31 05       	cpc	r19, r1
    8eee:	29 f4       	brne	.+10     	; 0x8efa <free+0x92>
    8ef0:	f0 93 ca 10 	sts	0x10CA, r31	; 0x8010ca <__flp+0x1>
    8ef4:	e0 93 c9 10 	sts	0x10C9, r30	; 0x8010c9 <__flp>
    8ef8:	3d c0       	rjmp	.+122    	; 0x8f74 <free+0x10c>
    8efa:	e9 01       	movw	r28, r18
    8efc:	fb 83       	std	Y+3, r31	; 0x03
    8efe:	ea 83       	std	Y+2, r30	; 0x02
    8f00:	49 91       	ld	r20, Y+
    8f02:	59 91       	ld	r21, Y+
    8f04:	c4 0f       	add	r28, r20
    8f06:	d5 1f       	adc	r29, r21
    8f08:	ec 17       	cp	r30, r28
    8f0a:	fd 07       	cpc	r31, r29
    8f0c:	61 f4       	brne	.+24     	; 0x8f26 <free+0xbe>
    8f0e:	80 81       	ld	r24, Z
    8f10:	91 81       	ldd	r25, Z+1	; 0x01
    8f12:	84 0f       	add	r24, r20
    8f14:	95 1f       	adc	r25, r21
    8f16:	02 96       	adiw	r24, 0x02	; 2
    8f18:	e9 01       	movw	r28, r18
    8f1a:	99 83       	std	Y+1, r25	; 0x01
    8f1c:	88 83       	st	Y, r24
    8f1e:	82 81       	ldd	r24, Z+2	; 0x02
    8f20:	93 81       	ldd	r25, Z+3	; 0x03
    8f22:	9b 83       	std	Y+3, r25	; 0x03
    8f24:	8a 83       	std	Y+2, r24	; 0x02
    8f26:	e0 e0       	ldi	r30, 0x00	; 0
    8f28:	f0 e0       	ldi	r31, 0x00	; 0
    8f2a:	12 96       	adiw	r26, 0x02	; 2
    8f2c:	8d 91       	ld	r24, X+
    8f2e:	9c 91       	ld	r25, X
    8f30:	13 97       	sbiw	r26, 0x03	; 3
    8f32:	00 97       	sbiw	r24, 0x00	; 0
    8f34:	19 f0       	breq	.+6      	; 0x8f3c <free+0xd4>
    8f36:	fd 01       	movw	r30, r26
    8f38:	dc 01       	movw	r26, r24
    8f3a:	f7 cf       	rjmp	.-18     	; 0x8f2a <free+0xc2>
    8f3c:	8d 91       	ld	r24, X+
    8f3e:	9c 91       	ld	r25, X
    8f40:	11 97       	sbiw	r26, 0x01	; 1
    8f42:	9d 01       	movw	r18, r26
    8f44:	2e 5f       	subi	r18, 0xFE	; 254
    8f46:	3f 4f       	sbci	r19, 0xFF	; 255
    8f48:	82 0f       	add	r24, r18
    8f4a:	93 1f       	adc	r25, r19
    8f4c:	20 91 c7 10 	lds	r18, 0x10C7	; 0x8010c7 <__brkval>
    8f50:	30 91 c8 10 	lds	r19, 0x10C8	; 0x8010c8 <__brkval+0x1>
    8f54:	28 17       	cp	r18, r24
    8f56:	39 07       	cpc	r19, r25
    8f58:	69 f4       	brne	.+26     	; 0x8f74 <free+0x10c>
    8f5a:	30 97       	sbiw	r30, 0x00	; 0
    8f5c:	29 f4       	brne	.+10     	; 0x8f68 <free+0x100>
    8f5e:	10 92 ca 10 	sts	0x10CA, r1	; 0x8010ca <__flp+0x1>
    8f62:	10 92 c9 10 	sts	0x10C9, r1	; 0x8010c9 <__flp>
    8f66:	02 c0       	rjmp	.+4      	; 0x8f6c <free+0x104>
    8f68:	13 82       	std	Z+3, r1	; 0x03
    8f6a:	12 82       	std	Z+2, r1	; 0x02
    8f6c:	b0 93 c8 10 	sts	0x10C8, r27	; 0x8010c8 <__brkval+0x1>
    8f70:	a0 93 c7 10 	sts	0x10C7, r26	; 0x8010c7 <__brkval>
    8f74:	df 91       	pop	r29
    8f76:	cf 91       	pop	r28
    8f78:	08 95       	ret

00008f7a <__divmodsi4>:
    8f7a:	05 2e       	mov	r0, r21
    8f7c:	97 fb       	bst	r25, 7
    8f7e:	1e f4       	brtc	.+6      	; 0x8f86 <__divmodsi4+0xc>
    8f80:	00 94       	com	r0
    8f82:	0e 94 d4 47 	call	0x8fa8	; 0x8fa8 <__negsi2>
    8f86:	57 fd       	sbrc	r21, 7
    8f88:	07 d0       	rcall	.+14     	; 0x8f98 <__divmodsi4_neg2>
    8f8a:	0e 94 12 44 	call	0x8824	; 0x8824 <__udivmodsi4>
    8f8e:	07 fc       	sbrc	r0, 7
    8f90:	03 d0       	rcall	.+6      	; 0x8f98 <__divmodsi4_neg2>
    8f92:	4e f4       	brtc	.+18     	; 0x8fa6 <__divmodsi4_exit>
    8f94:	0c 94 d4 47 	jmp	0x8fa8	; 0x8fa8 <__negsi2>

00008f98 <__divmodsi4_neg2>:
    8f98:	50 95       	com	r21
    8f9a:	40 95       	com	r20
    8f9c:	30 95       	com	r19
    8f9e:	21 95       	neg	r18
    8fa0:	3f 4f       	sbci	r19, 0xFF	; 255
    8fa2:	4f 4f       	sbci	r20, 0xFF	; 255
    8fa4:	5f 4f       	sbci	r21, 0xFF	; 255

00008fa6 <__divmodsi4_exit>:
    8fa6:	08 95       	ret

00008fa8 <__negsi2>:
    8fa8:	90 95       	com	r25
    8faa:	80 95       	com	r24
    8fac:	70 95       	com	r23
    8fae:	61 95       	neg	r22
    8fb0:	7f 4f       	sbci	r23, 0xFF	; 255
    8fb2:	8f 4f       	sbci	r24, 0xFF	; 255
    8fb4:	9f 4f       	sbci	r25, 0xFF	; 255
    8fb6:	08 95       	ret

00008fb8 <__muluhisi3>:
    8fb8:	0e 94 34 44 	call	0x8868	; 0x8868 <__umulhisi3>
    8fbc:	a5 9f       	mul	r26, r21
    8fbe:	90 0d       	add	r25, r0
    8fc0:	b4 9f       	mul	r27, r20
    8fc2:	90 0d       	add	r25, r0
    8fc4:	a4 9f       	mul	r26, r20
    8fc6:	80 0d       	add	r24, r0
    8fc8:	91 1d       	adc	r25, r1
    8fca:	11 24       	eor	r1, r1
    8fcc:	08 95       	ret

00008fce <__mulshisi3>:
    8fce:	b7 ff       	sbrs	r27, 7
    8fd0:	0c 94 dc 47 	jmp	0x8fb8	; 0x8fb8 <__muluhisi3>

00008fd4 <__mulohisi3>:
    8fd4:	0e 94 dc 47 	call	0x8fb8	; 0x8fb8 <__muluhisi3>
    8fd8:	82 1b       	sub	r24, r18
    8fda:	93 0b       	sbc	r25, r19
    8fdc:	08 95       	ret

00008fde <_exit>:
    8fde:	f8 94       	cli

00008fe0 <__stop_program>:
    8fe0:	ff cf       	rjmp	.-2      	; 0x8fe0 <__stop_program>

Disassembly of section .bootloader:

00008fe2 <flash_erase_page>:

#ifdef __ICCAVR__
#pragma optimize = no_inline
#endif
void flash_erase_page(uint32_t page_number)
{
    8fe2:	cf 93       	push	r28
    8fe4:	df 93       	push	r29
    8fe6:	cd b7       	in	r28, 0x3d	; 61
    8fe8:	de b7       	in	r29, 0x3e	; 62
    8fea:	29 97       	sbiw	r28, 0x09	; 9
    8fec:	0f b6       	in	r0, 0x3f	; 63
    8fee:	f8 94       	cli
    8ff0:	de bf       	out	0x3e, r29	; 62
    8ff2:	0f be       	out	0x3f, r0	; 63
    8ff4:	cd bf       	out	0x3d, r28	; 61
    8ff6:	6e 83       	std	Y+6, r22	; 0x06
    8ff8:	7f 83       	std	Y+7, r23	; 0x07
    8ffa:	88 87       	std	Y+8, r24	; 0x08
    8ffc:	99 87       	std	Y+9, r25	; 0x09
	uint32_t page_start_addr;
	/* Find the start address of the given page number */
	page_start_addr = (page_number * FLASH_PAGE_SIZE);
    8ffe:	8e 81       	ldd	r24, Y+6	; 0x06
    9000:	9f 81       	ldd	r25, Y+7	; 0x07
    9002:	a8 85       	ldd	r26, Y+8	; 0x08
    9004:	b9 85       	ldd	r27, Y+9	; 0x09
    9006:	ba 2f       	mov	r27, r26
    9008:	a9 2f       	mov	r26, r25
    900a:	98 2f       	mov	r25, r24
    900c:	88 27       	eor	r24, r24
    900e:	89 83       	std	Y+1, r24	; 0x01
    9010:	9a 83       	std	Y+2, r25	; 0x02
    9012:	ab 83       	std	Y+3, r26	; 0x03
    9014:	bc 83       	std	Y+4, r27	; 0x04
	irqflags_t flags;
	flags = cpu_irq_save();
    9016:	0e 94 10 1f 	call	0x3e20	; 0x3e20 <cpu_irq_save>
    901a:	8d 83       	std	Y+5, r24	; 0x05

	EEPROM_BUSY_WAIT();
    901c:	8f e3       	ldi	r24, 0x3F	; 63
    901e:	90 e0       	ldi	r25, 0x00	; 0
    9020:	fc 01       	movw	r30, r24
    9022:	80 81       	ld	r24, Z
    9024:	88 2f       	mov	r24, r24
    9026:	90 e0       	ldi	r25, 0x00	; 0
    9028:	82 70       	andi	r24, 0x02	; 2
    902a:	99 27       	eor	r25, r25
    902c:	89 2b       	or	r24, r25
    902e:	b1 f7       	brne	.-20     	; 0x901c <flash_erase_page+0x3a>
	/* Perform Page Erase */
	FLASH_ERASE(page_start_addr);
    9030:	23 e0       	ldi	r18, 0x03	; 3
    9032:	89 81       	ldd	r24, Y+1	; 0x01
    9034:	9a 81       	ldd	r25, Y+2	; 0x02
    9036:	ab 81       	ldd	r26, Y+3	; 0x03
    9038:	bc 81       	ldd	r27, Y+4	; 0x04
    903a:	fc 01       	movw	r30, r24
    903c:	a0 93 5b 00 	sts	0x005B, r26	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
    9040:	20 93 57 00 	sts	0x0057, r18	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
    9044:	e8 95       	spm
	SPM_BUSY_WAIT(); /* Wait until the memory is erased. */
    9046:	87 e5       	ldi	r24, 0x57	; 87
    9048:	90 e0       	ldi	r25, 0x00	; 0
    904a:	fc 01       	movw	r30, r24
    904c:	80 81       	ld	r24, Z
    904e:	88 2f       	mov	r24, r24
    9050:	90 e0       	ldi	r25, 0x00	; 0
    9052:	81 70       	andi	r24, 0x01	; 1
    9054:	99 27       	eor	r25, r25
    9056:	89 2b       	or	r24, r25
    9058:	b1 f7       	brne	.-20     	; 0x9046 <flash_erase_page+0x64>

	/* Reenable RWW-section again. */
	ENABLE_RWW_SECTION();
    905a:	81 e1       	ldi	r24, 0x11	; 17
    905c:	80 93 57 00 	sts	0x0057, r24	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
    9060:	e8 95       	spm

	cpu_irq_restore(flags);
    9062:	8d 81       	ldd	r24, Y+5	; 0x05
    9064:	0e 94 20 1f 	call	0x3e40	; 0x3e40 <cpu_irq_restore>
}
    9068:	00 00       	nop
    906a:	29 96       	adiw	r28, 0x09	; 9
    906c:	0f b6       	in	r0, 0x3f	; 63
    906e:	f8 94       	cli
    9070:	de bf       	out	0x3e, r29	; 62
    9072:	0f be       	out	0x3f, r0	; 63
    9074:	cd bf       	out	0x3d, r28	; 61
    9076:	df 91       	pop	r29
    9078:	cf 91       	pop	r28
    907a:	08 95       	ret

0000907c <flash_fill_page_buffer>:
#ifdef __ICCAVR__
#pragma optimize = no_inline
#endif
void flash_fill_page_buffer(uint32_t flash_addr, uint16_t length,
		uint8_t *data )
{
    907c:	cf 93       	push	r28
    907e:	df 93       	push	r29
    9080:	cd b7       	in	r28, 0x3d	; 61
    9082:	de b7       	in	r29, 0x3e	; 62
    9084:	6e 97       	sbiw	r28, 0x1e	; 30
    9086:	0f b6       	in	r0, 0x3f	; 63
    9088:	f8 94       	cli
    908a:	de bf       	out	0x3e, r29	; 62
    908c:	0f be       	out	0x3f, r0	; 63
    908e:	cd bf       	out	0x3d, r28	; 61
    9090:	6f 8b       	std	Y+23, r22	; 0x17
    9092:	78 8f       	std	Y+24, r23	; 0x18
    9094:	89 8f       	std	Y+25, r24	; 0x19
    9096:	9a 8f       	std	Y+26, r25	; 0x1a
    9098:	5c 8f       	std	Y+28, r21	; 0x1c
    909a:	4b 8f       	std	Y+27, r20	; 0x1b
    909c:	3e 8f       	std	Y+30, r19	; 0x1e
    909e:	2d 8f       	std	Y+29, r18	; 0x1d
	uint8_t temp;
	uint8_t write_length = length;
    90a0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    90a2:	8d 83       	std	Y+5, r24	; 0x05
	uint16_t start_offset = (flash_addr % SPM_PAGESIZE);
    90a4:	8f 89       	ldd	r24, Y+23	; 0x17
    90a6:	98 8d       	ldd	r25, Y+24	; 0x18
    90a8:	99 27       	eor	r25, r25
    90aa:	9a 83       	std	Y+2, r25	; 0x02
    90ac:	89 83       	std	Y+1, r24	; 0x01

	/* For even address we can directly write a word to the address.
	 * For odd address the previous byte has to be copied and written
	 * together as a word */
	if (start_offset % 2) { /* odd address */
    90ae:	89 81       	ldd	r24, Y+1	; 0x01
    90b0:	9a 81       	ldd	r25, Y+2	; 0x02
    90b2:	81 70       	andi	r24, 0x01	; 1
    90b4:	99 27       	eor	r25, r25
    90b6:	89 2b       	or	r24, r25
    90b8:	09 f4       	brne	.+2      	; 0x90bc <flash_fill_page_buffer+0x40>
    90ba:	48 c0       	rjmp	.+144    	; 0x914c <flash_fill_page_buffer+0xd0>
		temp = PGM_READ_BYTE_FAR(flash_addr - 1);
    90bc:	8f 89       	ldd	r24, Y+23	; 0x17
    90be:	98 8d       	ldd	r25, Y+24	; 0x18
    90c0:	a9 8d       	ldd	r26, Y+25	; 0x19
    90c2:	ba 8d       	ldd	r27, Y+26	; 0x1a
    90c4:	01 97       	sbiw	r24, 0x01	; 1
    90c6:	a1 09       	sbc	r26, r1
    90c8:	b1 09       	sbc	r27, r1
    90ca:	8e 83       	std	Y+6, r24	; 0x06
    90cc:	9f 83       	std	Y+7, r25	; 0x07
    90ce:	a8 87       	std	Y+8, r26	; 0x08
    90d0:	b9 87       	std	Y+9, r27	; 0x09
    90d2:	8e 81       	ldd	r24, Y+6	; 0x06
    90d4:	9f 81       	ldd	r25, Y+7	; 0x07
    90d6:	a8 85       	ldd	r26, Y+8	; 0x08
    90d8:	b9 85       	ldd	r27, Y+9	; 0x09
    90da:	ab bf       	out	0x3b, r26	; 59
    90dc:	fc 01       	movw	r30, r24
    90de:	87 91       	elpm	r24, Z+
    90e0:	8a 87       	std	Y+10, r24	; 0x0a
    90e2:	8a 85       	ldd	r24, Y+10	; 0x0a
    90e4:	8b 87       	std	Y+11, r24	; 0x0b
		uint16_t w = temp;
    90e6:	8b 85       	ldd	r24, Y+11	; 0x0b
    90e8:	88 2f       	mov	r24, r24
    90ea:	90 e0       	ldi	r25, 0x00	; 0
    90ec:	9d 87       	std	Y+13, r25	; 0x0d
    90ee:	8c 87       	std	Y+12, r24	; 0x0c
		w += (*data++) << 8;
    90f0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    90f2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    90f4:	9c 01       	movw	r18, r24
    90f6:	2f 5f       	subi	r18, 0xFF	; 255
    90f8:	3f 4f       	sbci	r19, 0xFF	; 255
    90fa:	3e 8f       	std	Y+30, r19	; 0x1e
    90fc:	2d 8f       	std	Y+29, r18	; 0x1d
    90fe:	fc 01       	movw	r30, r24
    9100:	80 81       	ld	r24, Z
    9102:	88 2f       	mov	r24, r24
    9104:	90 e0       	ldi	r25, 0x00	; 0
    9106:	98 2f       	mov	r25, r24
    9108:	88 27       	eor	r24, r24
    910a:	9c 01       	movw	r18, r24
    910c:	8c 85       	ldd	r24, Y+12	; 0x0c
    910e:	9d 85       	ldd	r25, Y+13	; 0x0d
    9110:	82 0f       	add	r24, r18
    9112:	93 1f       	adc	r25, r19
    9114:	9d 87       	std	Y+13, r25	; 0x0d
    9116:	8c 87       	std	Y+12, r24	; 0x0c
		FLASH_PAGE_FILL(start_offset++, w);
    9118:	89 81       	ldd	r24, Y+1	; 0x01
    911a:	9a 81       	ldd	r25, Y+2	; 0x02
    911c:	9c 01       	movw	r18, r24
    911e:	2f 5f       	subi	r18, 0xFF	; 255
    9120:	3f 4f       	sbci	r19, 0xFF	; 255
    9122:	3a 83       	std	Y+2, r19	; 0x02
    9124:	29 83       	std	Y+1, r18	; 0x01
    9126:	cc 01       	movw	r24, r24
    9128:	a0 e0       	ldi	r26, 0x00	; 0
    912a:	b0 e0       	ldi	r27, 0x00	; 0
    912c:	41 e0       	ldi	r20, 0x01	; 1
    912e:	2c 85       	ldd	r18, Y+12	; 0x0c
    9130:	3d 85       	ldd	r19, Y+13	; 0x0d
    9132:	09 01       	movw	r0, r18
    9134:	fc 01       	movw	r30, r24
    9136:	a0 93 5b 00 	sts	0x005B, r26	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
    913a:	40 93 57 00 	sts	0x0057, r20	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
    913e:	e8 95       	spm
    9140:	11 24       	eor	r1, r1
		length--;
    9142:	8b 8d       	ldd	r24, Y+27	; 0x1b
    9144:	9c 8d       	ldd	r25, Y+28	; 0x1c
    9146:	01 97       	sbiw	r24, 0x01	; 1
    9148:	9c 8f       	std	Y+28, r25	; 0x1c
    914a:	8b 8f       	std	Y+27, r24	; 0x1b
	}

	for (uint16_t i = start_offset; i < length + start_offset; i += 2) {
    914c:	89 81       	ldd	r24, Y+1	; 0x01
    914e:	9a 81       	ldd	r25, Y+2	; 0x02
    9150:	9c 83       	std	Y+4, r25	; 0x04
    9152:	8b 83       	std	Y+3, r24	; 0x03
    9154:	8a c0       	rjmp	.+276    	; 0x926a <flash_fill_page_buffer+0x1ee>
		/* If the last address to be written is odd ,then copy the
		 * adjacent byte and push it as a word */
		if (((length + start_offset) - i) == 1) {
    9156:	2b 8d       	ldd	r18, Y+27	; 0x1b
    9158:	3c 8d       	ldd	r19, Y+28	; 0x1c
    915a:	89 81       	ldd	r24, Y+1	; 0x01
    915c:	9a 81       	ldd	r25, Y+2	; 0x02
    915e:	28 0f       	add	r18, r24
    9160:	39 1f       	adc	r19, r25
    9162:	8b 81       	ldd	r24, Y+3	; 0x03
    9164:	9c 81       	ldd	r25, Y+4	; 0x04
    9166:	a9 01       	movw	r20, r18
    9168:	48 1b       	sub	r20, r24
    916a:	59 0b       	sbc	r21, r25
    916c:	ca 01       	movw	r24, r20
    916e:	01 97       	sbiw	r24, 0x01	; 1
    9170:	09 f0       	breq	.+2      	; 0x9174 <flash_fill_page_buffer+0xf8>
    9172:	45 c0       	rjmp	.+138    	; 0x91fe <flash_fill_page_buffer+0x182>
			temp = PGM_READ_BYTE_FAR(flash_addr + write_length);
    9174:	8d 81       	ldd	r24, Y+5	; 0x05
    9176:	28 2f       	mov	r18, r24
    9178:	30 e0       	ldi	r19, 0x00	; 0
    917a:	40 e0       	ldi	r20, 0x00	; 0
    917c:	50 e0       	ldi	r21, 0x00	; 0
    917e:	8f 89       	ldd	r24, Y+23	; 0x17
    9180:	98 8d       	ldd	r25, Y+24	; 0x18
    9182:	a9 8d       	ldd	r26, Y+25	; 0x19
    9184:	ba 8d       	ldd	r27, Y+26	; 0x1a
    9186:	82 0f       	add	r24, r18
    9188:	93 1f       	adc	r25, r19
    918a:	a4 1f       	adc	r26, r20
    918c:	b5 1f       	adc	r27, r21
    918e:	8e 87       	std	Y+14, r24	; 0x0e
    9190:	9f 87       	std	Y+15, r25	; 0x0f
    9192:	a8 8b       	std	Y+16, r26	; 0x10
    9194:	b9 8b       	std	Y+17, r27	; 0x11
    9196:	8e 85       	ldd	r24, Y+14	; 0x0e
    9198:	9f 85       	ldd	r25, Y+15	; 0x0f
    919a:	a8 89       	ldd	r26, Y+16	; 0x10
    919c:	b9 89       	ldd	r27, Y+17	; 0x11
    919e:	ab bf       	out	0x3b, r26	; 59
    91a0:	fc 01       	movw	r30, r24
    91a2:	87 91       	elpm	r24, Z+
    91a4:	8a 8b       	std	Y+18, r24	; 0x12
    91a6:	8a 89       	ldd	r24, Y+18	; 0x12
    91a8:	8b 87       	std	Y+11, r24	; 0x0b
			uint16_t w = *data++;
    91aa:	8d 8d       	ldd	r24, Y+29	; 0x1d
    91ac:	9e 8d       	ldd	r25, Y+30	; 0x1e
    91ae:	9c 01       	movw	r18, r24
    91b0:	2f 5f       	subi	r18, 0xFF	; 255
    91b2:	3f 4f       	sbci	r19, 0xFF	; 255
    91b4:	3e 8f       	std	Y+30, r19	; 0x1e
    91b6:	2d 8f       	std	Y+29, r18	; 0x1d
    91b8:	fc 01       	movw	r30, r24
    91ba:	80 81       	ld	r24, Z
    91bc:	88 2f       	mov	r24, r24
    91be:	90 e0       	ldi	r25, 0x00	; 0
    91c0:	9c 8b       	std	Y+20, r25	; 0x14
    91c2:	8b 8b       	std	Y+19, r24	; 0x13
			w += (temp) << 8;
    91c4:	8b 85       	ldd	r24, Y+11	; 0x0b
    91c6:	88 2f       	mov	r24, r24
    91c8:	90 e0       	ldi	r25, 0x00	; 0
    91ca:	98 2f       	mov	r25, r24
    91cc:	88 27       	eor	r24, r24
    91ce:	9c 01       	movw	r18, r24
    91d0:	8b 89       	ldd	r24, Y+19	; 0x13
    91d2:	9c 89       	ldd	r25, Y+20	; 0x14
    91d4:	82 0f       	add	r24, r18
    91d6:	93 1f       	adc	r25, r19
    91d8:	9c 8b       	std	Y+20, r25	; 0x14
    91da:	8b 8b       	std	Y+19, r24	; 0x13
			FLASH_PAGE_FILL(i, w);
    91dc:	8b 81       	ldd	r24, Y+3	; 0x03
    91de:	9c 81       	ldd	r25, Y+4	; 0x04
    91e0:	cc 01       	movw	r24, r24
    91e2:	a0 e0       	ldi	r26, 0x00	; 0
    91e4:	b0 e0       	ldi	r27, 0x00	; 0
    91e6:	41 e0       	ldi	r20, 0x01	; 1
    91e8:	2b 89       	ldd	r18, Y+19	; 0x13
    91ea:	3c 89       	ldd	r19, Y+20	; 0x14
    91ec:	09 01       	movw	r0, r18
    91ee:	fc 01       	movw	r30, r24
    91f0:	a0 93 5b 00 	sts	0x005B, r26	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
    91f4:	40 93 57 00 	sts	0x0057, r20	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
    91f8:	e8 95       	spm
    91fa:	11 24       	eor	r1, r1
    91fc:	31 c0       	rjmp	.+98     	; 0x9260 <flash_fill_page_buffer+0x1e4>
		} else {
			uint16_t w = *data++;
    91fe:	8d 8d       	ldd	r24, Y+29	; 0x1d
    9200:	9e 8d       	ldd	r25, Y+30	; 0x1e
    9202:	9c 01       	movw	r18, r24
    9204:	2f 5f       	subi	r18, 0xFF	; 255
    9206:	3f 4f       	sbci	r19, 0xFF	; 255
    9208:	3e 8f       	std	Y+30, r19	; 0x1e
    920a:	2d 8f       	std	Y+29, r18	; 0x1d
    920c:	fc 01       	movw	r30, r24
    920e:	80 81       	ld	r24, Z
    9210:	88 2f       	mov	r24, r24
    9212:	90 e0       	ldi	r25, 0x00	; 0
    9214:	9e 8b       	std	Y+22, r25	; 0x16
    9216:	8d 8b       	std	Y+21, r24	; 0x15
			w += (*data++) << 8;
    9218:	8d 8d       	ldd	r24, Y+29	; 0x1d
    921a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    921c:	9c 01       	movw	r18, r24
    921e:	2f 5f       	subi	r18, 0xFF	; 255
    9220:	3f 4f       	sbci	r19, 0xFF	; 255
    9222:	3e 8f       	std	Y+30, r19	; 0x1e
    9224:	2d 8f       	std	Y+29, r18	; 0x1d
    9226:	fc 01       	movw	r30, r24
    9228:	80 81       	ld	r24, Z
    922a:	88 2f       	mov	r24, r24
    922c:	90 e0       	ldi	r25, 0x00	; 0
    922e:	98 2f       	mov	r25, r24
    9230:	88 27       	eor	r24, r24
    9232:	9c 01       	movw	r18, r24
    9234:	8d 89       	ldd	r24, Y+21	; 0x15
    9236:	9e 89       	ldd	r25, Y+22	; 0x16
    9238:	82 0f       	add	r24, r18
    923a:	93 1f       	adc	r25, r19
    923c:	9e 8b       	std	Y+22, r25	; 0x16
    923e:	8d 8b       	std	Y+21, r24	; 0x15
			FLASH_PAGE_FILL(i, w);
    9240:	8b 81       	ldd	r24, Y+3	; 0x03
    9242:	9c 81       	ldd	r25, Y+4	; 0x04
    9244:	cc 01       	movw	r24, r24
    9246:	a0 e0       	ldi	r26, 0x00	; 0
    9248:	b0 e0       	ldi	r27, 0x00	; 0
    924a:	41 e0       	ldi	r20, 0x01	; 1
    924c:	2d 89       	ldd	r18, Y+21	; 0x15
    924e:	3e 89       	ldd	r19, Y+22	; 0x16
    9250:	09 01       	movw	r0, r18
    9252:	fc 01       	movw	r30, r24
    9254:	a0 93 5b 00 	sts	0x005B, r26	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
    9258:	40 93 57 00 	sts	0x0057, r20	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
    925c:	e8 95       	spm
    925e:	11 24       	eor	r1, r1
		w += (*data++) << 8;
		FLASH_PAGE_FILL(start_offset++, w);
		length--;
	}

	for (uint16_t i = start_offset; i < length + start_offset; i += 2) {
    9260:	8b 81       	ldd	r24, Y+3	; 0x03
    9262:	9c 81       	ldd	r25, Y+4	; 0x04
    9264:	02 96       	adiw	r24, 0x02	; 2
    9266:	9c 83       	std	Y+4, r25	; 0x04
    9268:	8b 83       	std	Y+3, r24	; 0x03
    926a:	2b 8d       	ldd	r18, Y+27	; 0x1b
    926c:	3c 8d       	ldd	r19, Y+28	; 0x1c
    926e:	89 81       	ldd	r24, Y+1	; 0x01
    9270:	9a 81       	ldd	r25, Y+2	; 0x02
    9272:	28 0f       	add	r18, r24
    9274:	39 1f       	adc	r19, r25
    9276:	8b 81       	ldd	r24, Y+3	; 0x03
    9278:	9c 81       	ldd	r25, Y+4	; 0x04
    927a:	82 17       	cp	r24, r18
    927c:	93 07       	cpc	r25, r19
    927e:	08 f4       	brcc	.+2      	; 0x9282 <flash_fill_page_buffer+0x206>
    9280:	6a cf       	rjmp	.-300    	; 0x9156 <flash_fill_page_buffer+0xda>
			uint16_t w = *data++;
			w += (*data++) << 8;
			FLASH_PAGE_FILL(i, w);
		}
	}
}
    9282:	00 00       	nop
    9284:	6e 96       	adiw	r28, 0x1e	; 30
    9286:	0f b6       	in	r0, 0x3f	; 63
    9288:	f8 94       	cli
    928a:	de bf       	out	0x3e, r29	; 62
    928c:	0f be       	out	0x3f, r0	; 63
    928e:	cd bf       	out	0x3d, r28	; 61
    9290:	df 91       	pop	r29
    9292:	cf 91       	pop	r28
    9294:	08 95       	ret

00009296 <flash_program_page>:

#ifdef __ICCAVR__
#pragma optimize = no_inline
#endif
void flash_program_page(uint32_t page_start_addr)
{
    9296:	cf 93       	push	r28
    9298:	df 93       	push	r29
    929a:	00 d0       	rcall	.+0      	; 0x929c <flash_program_page+0x6>
    929c:	00 d0       	rcall	.+0      	; 0x929e <flash_program_page+0x8>
    929e:	1f 92       	push	r1
    92a0:	cd b7       	in	r28, 0x3d	; 61
    92a2:	de b7       	in	r29, 0x3e	; 62
    92a4:	6a 83       	std	Y+2, r22	; 0x02
    92a6:	7b 83       	std	Y+3, r23	; 0x03
    92a8:	8c 83       	std	Y+4, r24	; 0x04
    92aa:	9d 83       	std	Y+5, r25	; 0x05
	irqflags_t flags;

	flags = cpu_irq_save();
    92ac:	0e 94 10 1f 	call	0x3e20	; 0x3e20 <cpu_irq_save>
    92b0:	89 83       	std	Y+1, r24	; 0x01

	EEPROM_BUSY_WAIT();
    92b2:	8f e3       	ldi	r24, 0x3F	; 63
    92b4:	90 e0       	ldi	r25, 0x00	; 0
    92b6:	fc 01       	movw	r30, r24
    92b8:	80 81       	ld	r24, Z
    92ba:	88 2f       	mov	r24, r24
    92bc:	90 e0       	ldi	r25, 0x00	; 0
    92be:	82 70       	andi	r24, 0x02	; 2
    92c0:	99 27       	eor	r25, r25
    92c2:	89 2b       	or	r24, r25
    92c4:	b1 f7       	brne	.-20     	; 0x92b2 <flash_program_page+0x1c>

	FLASH_ERASE(page_start_addr);
    92c6:	23 e0       	ldi	r18, 0x03	; 3
    92c8:	8a 81       	ldd	r24, Y+2	; 0x02
    92ca:	9b 81       	ldd	r25, Y+3	; 0x03
    92cc:	ac 81       	ldd	r26, Y+4	; 0x04
    92ce:	bd 81       	ldd	r27, Y+5	; 0x05
    92d0:	fc 01       	movw	r30, r24
    92d2:	a0 93 5b 00 	sts	0x005B, r26	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
    92d6:	20 93 57 00 	sts	0x0057, r18	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
    92da:	e8 95       	spm
	SPM_BUSY_WAIT(); /* Wait until the memory is erased. */
    92dc:	87 e5       	ldi	r24, 0x57	; 87
    92de:	90 e0       	ldi	r25, 0x00	; 0
    92e0:	fc 01       	movw	r30, r24
    92e2:	80 81       	ld	r24, Z
    92e4:	88 2f       	mov	r24, r24
    92e6:	90 e0       	ldi	r25, 0x00	; 0
    92e8:	81 70       	andi	r24, 0x01	; 1
    92ea:	99 27       	eor	r25, r25
    92ec:	89 2b       	or	r24, r25
    92ee:	b1 f7       	brne	.-20     	; 0x92dc <flash_program_page+0x46>

	FLASH_PAGE_WRITE(page_start_addr); /* Store buffer in flash page. */
    92f0:	25 e0       	ldi	r18, 0x05	; 5
    92f2:	8a 81       	ldd	r24, Y+2	; 0x02
    92f4:	9b 81       	ldd	r25, Y+3	; 0x03
    92f6:	ac 81       	ldd	r26, Y+4	; 0x04
    92f8:	bd 81       	ldd	r27, Y+5	; 0x05
    92fa:	fc 01       	movw	r30, r24
    92fc:	a0 93 5b 00 	sts	0x005B, r26	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
    9300:	20 93 57 00 	sts	0x0057, r18	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
    9304:	e8 95       	spm
	SPM_BUSY_WAIT(); /* Wait until the memory is written. */
    9306:	87 e5       	ldi	r24, 0x57	; 87
    9308:	90 e0       	ldi	r25, 0x00	; 0
    930a:	fc 01       	movw	r30, r24
    930c:	80 81       	ld	r24, Z
    930e:	88 2f       	mov	r24, r24
    9310:	90 e0       	ldi	r25, 0x00	; 0
    9312:	81 70       	andi	r24, 0x01	; 1
    9314:	99 27       	eor	r25, r25
    9316:	89 2b       	or	r24, r25
    9318:	b1 f7       	brne	.-20     	; 0x9306 <flash_program_page+0x70>

	/* Reenable RWW-section again. */
	ENABLE_RWW_SECTION();
    931a:	81 e1       	ldi	r24, 0x11	; 17
    931c:	80 93 57 00 	sts	0x0057, r24	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
    9320:	e8 95       	spm

	cpu_irq_restore(flags);
    9322:	89 81       	ldd	r24, Y+1	; 0x01
    9324:	0e 94 20 1f 	call	0x3e40	; 0x3e40 <cpu_irq_restore>
}
    9328:	00 00       	nop
    932a:	0f 90       	pop	r0
    932c:	0f 90       	pop	r0
    932e:	0f 90       	pop	r0
    9330:	0f 90       	pop	r0
    9332:	0f 90       	pop	r0
    9334:	df 91       	pop	r29
    9336:	cf 91       	pop	r28
    9338:	08 95       	ret
