   1               		.file	"Energy.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__RAMPZ__ = 0x3b
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
   8               		.text
   9               	.Ltext0:
  10               		.cfi_sections	.debug_frame
  11               		.section	.bss.n_collab,"aw",@nobits
  14               	n_collab:
  15 0000 00        		.zero	1
  16               		.section	.bss.SamLoss,"aw",@nobits
  19               	SamLoss:
  20 0000 00        		.zero	1
  21               		.section	.data.alpha,"aw",@progbits
  24               	alpha:
  25 0000 CD        		.byte	-51
  26 0001 CC        		.byte	-52
  27 0002 4C        		.byte	76
  28 0003 3E        		.byte	62
  29               		.section	.data.betha,"aw",@progbits
  32               	betha:
  33 0000 CD        		.byte	-51
  34 0001 CC        		.byte	-52
  35 0002 4C        		.byte	76
  36 0003 3E        		.byte	62
  37               		.section	.data.ganho,"aw",@progbits
  40               	ganho:
  41 0000 00        		.byte	0
  42 0001 00        		.byte	0
  43 0002 00        		.byte	0
  44 0003 40        		.byte	64
  45               		.section	.bss.EstLoss,"aw",@nobits
  48               	EstLoss:
  49 0000 0000 0000 		.zero	4
  50               		.section	.bss.DevLoss,"aw",@nobits
  53               	DevLoss:
  54 0000 0000 0000 		.zero	4
  55               		.section	.bss.motes,"aw",@nobits
  58               	motes:
  59 0000 0000 0000 		.zero	294
  59      0000 0000 
  59      0000 0000 
  59      0000 0000 
  59      0000 0000 
  60               		.section	.bss.motes_aux,"aw",@nobits
  63               	motes_aux:
  64 0000 0000 0000 		.zero	294
  64      0000 0000 
  64      0000 0000 
  64      0000 0000 
  64      0000 0000 
  65               		.section	.bss.motes_connected_n,"aw",@nobits
  68               	motes_connected_n:
  69 0000 00        		.zero	1
  70               		.section	.bss.motes_connected_vector,"aw",@nobits
  73               	motes_connected_vector:
  74 0000 0000 0000 		.zero	14
  74      0000 0000 
  74      0000 0000 
  74      0000 
  75               		.section	.bss.collab_vector,"aw",@nobits
  78               	collab_vector:
  79 0000 0000 0000 		.zero	32
  79      0000 0000 
  79      0000 0000 
  79      0000 0000 
  79      0000 0000 
  80               		.text
  82               	cmp_EnergyStatistics_t_func:
  83               	.LFB68:
  84               		.file 1 "Energy.c"
   1:Energy.c      **** /*
   2:Energy.c      ****  * Energy.c
   3:Energy.c      ****  *
   4:Energy.c      ****  * Created: 27/09/2014 17:10:18
   5:Energy.c      ****  *  Author: nando
   6:Energy.c      ****  */ 
   7:Energy.c      **** 
   8:Energy.c      **** #include <math.h>
   9:Energy.c      **** #include <string.h>
  10:Energy.c      **** 
  11:Energy.c      **** #include "Energy.h"
  12:Energy.c      **** #include "Solver.h"
  13:Energy.c      **** 
  14:Energy.c      **** static uint8_t					n_collab					= 0;
  15:Energy.c      **** static int8_t					SamLoss						= 0;				// Número de Amostras Perdidas.
  16:Energy.c      **** static float					alpha						= 0.2;
  17:Energy.c      **** static float					betha						= 0.2;
  18:Energy.c      **** static float					ganho						= 2.0;
  19:Energy.c      **** static float					EstLoss						= 0.0;
  20:Energy.c      **** static float					DevLoss						= 0.0;
  21:Energy.c      **** static EnergyStatistics_t		motes						[N_MOTES_COLLAB_MAX];
  22:Energy.c      **** static EnergyStatistics_t		motes_aux					[N_MOTES_COLLAB_MAX];
  23:Energy.c      **** static uint8_t					motes_connected_n			= 0;
  24:Energy.c      **** static uint8_t					motes_connected_vector		[N_MOTES_COLLAB_MAX];
  25:Energy.c      **** static uint8_t					collab_vector				[N_COLLAB_VECTOR];
  26:Energy.c      **** 
  27:Energy.c      **** 								// Add 1 byte to size,
  28:Energy.c      **** 								// Add 1 byte to count,
  29:Energy.c      **** 								// Mul by 2 (actual list, next list)
  30:Energy.c      **** 
  31:Energy.c      **** // Rotina de ordenação do algoritmo quicksort. É chamado recursivamente até
  32:Energy.c      **** // ordenar o vetor de dados.
  33:Energy.c      **** static int cmp_EnergyStatistics_t_func(const void * a, const void * b)
  34:Energy.c      **** {
  85               		.loc 1 34 0
  86               		.cfi_startproc
  87 0000 2F92      		push r2
  88               	.LCFI0:
  89               		.cfi_def_cfa_offset 3
  90               		.cfi_offset 2, -2
  91 0002 3F92      		push r3
  92               	.LCFI1:
  93               		.cfi_def_cfa_offset 4
  94               		.cfi_offset 3, -3
  95 0004 4F92      		push r4
  96               	.LCFI2:
  97               		.cfi_def_cfa_offset 5
  98               		.cfi_offset 4, -4
  99 0006 5F92      		push r5
 100               	.LCFI3:
 101               		.cfi_def_cfa_offset 6
 102               		.cfi_offset 5, -5
 103 0008 6F92      		push r6
 104               	.LCFI4:
 105               		.cfi_def_cfa_offset 7
 106               		.cfi_offset 6, -6
 107 000a 7F92      		push r7
 108               	.LCFI5:
 109               		.cfi_def_cfa_offset 8
 110               		.cfi_offset 7, -7
 111 000c 8F92      		push r8
 112               	.LCFI6:
 113               		.cfi_def_cfa_offset 9
 114               		.cfi_offset 8, -8
 115 000e 9F92      		push r9
 116               	.LCFI7:
 117               		.cfi_def_cfa_offset 10
 118               		.cfi_offset 9, -9
 119 0010 AF92      		push r10
 120               	.LCFI8:
 121               		.cfi_def_cfa_offset 11
 122               		.cfi_offset 10, -10
 123 0012 BF92      		push r11
 124               	.LCFI9:
 125               		.cfi_def_cfa_offset 12
 126               		.cfi_offset 11, -11
 127 0014 CF92      		push r12
 128               	.LCFI10:
 129               		.cfi_def_cfa_offset 13
 130               		.cfi_offset 12, -12
 131 0016 DF92      		push r13
 132               	.LCFI11:
 133               		.cfi_def_cfa_offset 14
 134               		.cfi_offset 13, -13
 135 0018 EF92      		push r14
 136               	.LCFI12:
 137               		.cfi_def_cfa_offset 15
 138               		.cfi_offset 14, -14
 139 001a FF92      		push r15
 140               	.LCFI13:
 141               		.cfi_def_cfa_offset 16
 142               		.cfi_offset 15, -15
 143 001c 0F93      		push r16
 144               	.LCFI14:
 145               		.cfi_def_cfa_offset 17
 146               		.cfi_offset 16, -16
 147 001e 1F93      		push r17
 148               	.LCFI15:
 149               		.cfi_def_cfa_offset 18
 150               		.cfi_offset 17, -17
 151 0020 CF93      		push r28
 152               	.LCFI16:
 153               		.cfi_def_cfa_offset 19
 154               		.cfi_offset 28, -18
 155 0022 DF93      		push r29
 156               	.LCFI17:
 157               		.cfi_def_cfa_offset 20
 158               		.cfi_offset 29, -19
 159 0024 CDB7      		in r28,__SP_L__
 160 0026 DEB7      		in r29,__SP_H__
 161               	.LCFI18:
 162               		.cfi_def_cfa_register 28
 163 0028 6297      		sbiw r28,18
 164               	.LCFI19:
 165               		.cfi_def_cfa_offset 38
 166 002a 0FB6      		in __tmp_reg__,__SREG__
 167 002c F894      		cli
 168 002e DEBF      		out __SP_H__,r29
 169 0030 0FBE      		out __SREG__,__tmp_reg__
 170 0032 CDBF      		out __SP_L__,r28
 171               	/* prologue: function */
 172               	/* frame size = 18 */
 173               	/* stack size = 36 */
 174               	.L__stack_usage = 36
 175 0034 988B      		std Y+16,r25
 176 0036 8F87      		std Y+15,r24
 177 0038 7A8B      		std Y+18,r23
 178 003a 698B      		std Y+17,r22
  35:Energy.c      **** 	// Se a diferênça da potência do sinal for maior que 10% [25 de 256] ordenar
  36:Energy.c      **** 	// ignorando a taxa de transmissão.
  37:Energy.c      **** 	//
  38:Energy.c      **** 	// Retorno:
  39:Energy.c      **** 	// value_a > value_b		>=1
  40:Energy.c      **** 	// value_a = value_b		0
  41:Energy.c      **** 	// value_a < value_b		<=-1
  42:Energy.c      **** 
  43:Energy.c      **** 	EnergyStatistics_t*			value_a						= (EnergyStatistics_t*) a;
 179               		.loc 1 43 0
 180 003c 8F85      		ldd r24,Y+15
 181 003e 9889      		ldd r25,Y+16
 182 0040 9A83      		std Y+2,r25
 183 0042 8983      		std Y+1,r24
  44:Energy.c      **** 	EnergyStatistics_t*			value_b						= (EnergyStatistics_t*) b;
 184               		.loc 1 44 0
 185 0044 8989      		ldd r24,Y+17
 186 0046 9A89      		ldd r25,Y+18
 187 0048 9C83      		std Y+4,r25
 188 004a 8B83      		std Y+3,r24
  45:Energy.c      **** 	
  46:Energy.c      **** 	int							diff						= (value_b->rssi - value_a->rssi);
 189               		.loc 1 46 0
 190 004c 8B81      		ldd r24,Y+3
 191 004e 9C81      		ldd r25,Y+4
 192 0050 FC01      		movw r30,r24
 193 0052 8181      		ldd r24,Z+1
 194 0054 282F      		mov r18,r24
 195 0056 30E0      		ldi r19,0
 196 0058 8981      		ldd r24,Y+1
 197 005a 9A81      		ldd r25,Y+2
 198 005c FC01      		movw r30,r24
 199 005e 8181      		ldd r24,Z+1
 200 0060 882F      		mov r24,r24
 201 0062 90E0      		ldi r25,0
 202 0064 A901      		movw r20,r18
 203 0066 481B      		sub r20,r24
 204 0068 590B      		sbc r21,r25
 205 006a CA01      		movw r24,r20
 206 006c 9E83      		std Y+6,r25
 207 006e 8D83      		std Y+5,r24
  47:Energy.c      **** 
  48:Energy.c      **** 	// Condição de Ordenação.
  49:Energy.c      **** 	// Se a diferença absoluta for >= 25, significa que independente das transmissões é necessário
  50:Energy.c      **** 	// ordenar pela qualidade de sinal de transmissão, ou seja, não utilizar nodos com LQI baixo como 
  51:Energy.c      **** 	if(abs(diff) >= 25)
 208               		.loc 1 51 0
 209 0070 8D81      		ldd r24,Y+5
 210 0072 9E81      		ldd r25,Y+6
 211 0074 9923      		tst r25
 212 0076 04F4      		brge .L2
 213 0078 9195      		neg r25
 214 007a 8195      		neg r24
 215 007c 9109      		sbc r25,__zero_reg__
 216               	.L2:
 217 007e 4997      		sbiw r24,25
 218 0080 04F0      		brlt .L3
  52:Energy.c      **** 	{
  53:Energy.c      **** 		return(diff);
 219               		.loc 1 53 0
 220 0082 8D81      		ldd r24,Y+5
 221 0084 9E81      		ldd r25,Y+6
 222 0086 00C0      		rjmp .L4
 223               	.L3:
  54:Energy.c      **** 	}
  55:Energy.c      **** 
  56:Energy.c      **** 	// Condição de Ordenação.
  57:Energy.c      **** 	// Se o nodo A e B alcançam pelo menos n% das vezes o coordenador, então pode-se utilizar a regra 
  58:Energy.c      **** 	// Isto é de suma importância para garantir que os nodos que nunca alcançam o coordenador, ou estã
  59:Energy.c      **** 	// não sejam indicados como colaboradores. Assim, somente quem tem um certo nível de participação 
  60:Energy.c      **** 	// Exemplo, Acabou a bateria de um nodo. O número de colaboração dele pode ser 0. Sem esta regra e
  61:Energy.c      **** 	// ser o colaborador e nunca colaboraria com o sistema.
  62:Energy.c      **** 	if(value_a->reach_coord && value_b->reach_coord)
 224               		.loc 1 62 0
 225 0088 8981      		ldd r24,Y+1
 226 008a 9A81      		ldd r25,Y+2
 227 008c FC01      		movw r30,r24
 228 008e 8489      		ldd r24,Z+20
 229 0090 8823      		tst r24
 230 0092 01F4      		brne .+2
 231 0094 00C0      		rjmp .L5
 232               		.loc 1 62 0 is_stmt 0 discriminator 1
 233 0096 8B81      		ldd r24,Y+3
 234 0098 9C81      		ldd r25,Y+4
 235 009a FC01      		movw r30,r24
 236 009c 8489      		ldd r24,Z+20
 237 009e 8823      		tst r24
 238 00a0 01F4      		brne .+2
 239 00a2 00C0      		rjmp .L5
 240               	.LBB2:
  63:Energy.c      **** 	{	
  64:Energy.c      **** 		// Caso contrário (pouca diferença entre o LQI dos nodos), organizar nodos cooperantes da seginte
  65:Energy.c      **** 		// Selecionar o nodo cooperante pelo número de mensagens transmitidas alternando (rotacionar) os 
  66:Energy.c      **** 		// Neste caso, a ordenação será decrescente (quem transmitiu menos será o primeiro da lista)
  67:Energy.c      **** 		// Isto visa economizar bateria por alguns ciclos conforme as condições da rede.
  68:Energy.c      **** 		int64_t					diff_collab					= (value_a->n_collab_msg - value_b->n_collab_msg);
 241               		.loc 1 68 0 is_stmt 1
 242 00a4 8981      		ldd r24,Y+1
 243 00a6 9A81      		ldd r25,Y+2
 244 00a8 FC01      		movw r30,r24
 245 00aa A384      		ldd r10,Z+11
 246 00ac FC01      		movw r30,r24
 247 00ae B484      		ldd r11,Z+12
 248 00b0 FC01      		movw r30,r24
 249 00b2 C584      		ldd r12,Z+13
 250 00b4 FC01      		movw r30,r24
 251 00b6 D684      		ldd r13,Z+14
 252 00b8 FC01      		movw r30,r24
 253 00ba E784      		ldd r14,Z+15
 254 00bc FC01      		movw r30,r24
 255 00be F088      		ldd r15,Z+16
 256 00c0 FC01      		movw r30,r24
 257 00c2 0189      		ldd r16,Z+17
 258 00c4 FC01      		movw r30,r24
 259 00c6 1289      		ldd r17,Z+18
 260 00c8 8B81      		ldd r24,Y+3
 261 00ca 9C81      		ldd r25,Y+4
 262 00cc FC01      		movw r30,r24
 263 00ce 2384      		ldd r2,Z+11
 264 00d0 FC01      		movw r30,r24
 265 00d2 3484      		ldd r3,Z+12
 266 00d4 FC01      		movw r30,r24
 267 00d6 4584      		ldd r4,Z+13
 268 00d8 FC01      		movw r30,r24
 269 00da 5684      		ldd r5,Z+14
 270 00dc FC01      		movw r30,r24
 271 00de 6784      		ldd r6,Z+15
 272 00e0 FC01      		movw r30,r24
 273 00e2 7088      		ldd r7,Z+16
 274 00e4 FC01      		movw r30,r24
 275 00e6 8188      		ldd r8,Z+17
 276 00e8 FC01      		movw r30,r24
 277 00ea 9288      		ldd r9,Z+18
 278 00ec 2A2D      		mov r18,r10
 279 00ee 3B2D      		mov r19,r11
 280 00f0 4C2D      		mov r20,r12
 281 00f2 5D2D      		mov r21,r13
 282 00f4 6E2D      		mov r22,r14
 283 00f6 7F2D      		mov r23,r15
 284 00f8 802F      		mov r24,r16
 285 00fa 912F      		mov r25,r17
 286 00fc A22C      		mov r10,r2
 287 00fe B32C      		mov r11,r3
 288 0100 C42C      		mov r12,r4
 289 0102 D52C      		mov r13,r5
 290 0104 E62C      		mov r14,r6
 291 0106 F72C      		mov r15,r7
 292 0108 082D      		mov r16,r8
 293 010a 192D      		mov r17,r9
 294 010c 0E94 0000 		call __subdi3
 295 0110 A22E      		mov r10,r18
 296 0112 B32E      		mov r11,r19
 297 0114 C42E      		mov r12,r20
 298 0116 D52E      		mov r13,r21
 299 0118 E62E      		mov r14,r22
 300 011a F72E      		mov r15,r23
 301 011c 082F      		mov r16,r24
 302 011e 192F      		mov r17,r25
 303 0120 AF82      		std Y+7,r10
 304 0122 B886      		std Y+8,r11
 305 0124 C986      		std Y+9,r12
 306 0126 DA86      		std Y+10,r13
 307 0128 EB86      		std Y+11,r14
 308 012a FC86      		std Y+12,r15
 309 012c 0D87      		std Y+13,r16
 310 012e 1E87      		std Y+14,r17
  69:Energy.c      **** 
  70:Energy.c      **** 		if(diff_collab > 0)									// A transmitiu > que B
 311               		.loc 1 70 0
 312 0130 AF80      		ldd r10,Y+7
 313 0132 B884      		ldd r11,Y+8
 314 0134 C984      		ldd r12,Y+9
 315 0136 DA84      		ldd r13,Y+10
 316 0138 EB84      		ldd r14,Y+11
 317 013a FC84      		ldd r15,Y+12
 318 013c 0D85      		ldd r16,Y+13
 319 013e 1E85      		ldd r17,Y+14
 320 0140 2A2D      		mov r18,r10
 321 0142 3B2D      		mov r19,r11
 322 0144 4C2D      		mov r20,r12
 323 0146 5D2D      		mov r21,r13
 324 0148 6E2D      		mov r22,r14
 325 014a 7F2D      		mov r23,r15
 326 014c 802F      		mov r24,r16
 327 014e 912F      		mov r25,r17
 328 0150 A0E0      		ldi r26,0
 329 0152 0E94 0000 		call __cmpdi2_s8
 330 0156 01F0      		breq .L6
 331 0158 04F0      		brlt .L6
  71:Energy.c      **** 			return(-1);										// Indica que A < B para reordenar
 332               		.loc 1 71 0
 333 015a 8FEF      		ldi r24,lo8(-1)
 334 015c 9FEF      		ldi r25,lo8(-1)
 335 015e 00C0      		rjmp .L4
 336               	.L6:
  72:Energy.c      **** 		else if(diff_collab < 0)							// A transmitiu < que B
 337               		.loc 1 72 0
 338 0160 AF80      		ldd r10,Y+7
 339 0162 B884      		ldd r11,Y+8
 340 0164 C984      		ldd r12,Y+9
 341 0166 DA84      		ldd r13,Y+10
 342 0168 EB84      		ldd r14,Y+11
 343 016a FC84      		ldd r15,Y+12
 344 016c 0D85      		ldd r16,Y+13
 345 016e 1E85      		ldd r17,Y+14
 346 0170 2A2D      		mov r18,r10
 347 0172 3B2D      		mov r19,r11
 348 0174 4C2D      		mov r20,r12
 349 0176 5D2D      		mov r21,r13
 350 0178 6E2D      		mov r22,r14
 351 017a 7F2D      		mov r23,r15
 352 017c 802F      		mov r24,r16
 353 017e 912F      		mov r25,r17
 354 0180 A0E0      		ldi r26,0
 355 0182 0E94 0000 		call __cmpdi2_s8
 356 0186 04F4      		brge .L7
  73:Energy.c      **** 			return(1);										// Indica que A > B para reordenar
 357               		.loc 1 73 0
 358 0188 81E0      		ldi r24,lo8(1)
 359 018a 90E0      		ldi r25,0
 360 018c 00C0      		rjmp .L4
 361               	.L7:
  74:Energy.c      **** 		else
  75:Energy.c      **** 			return(0);										// A transmitiu == B, não importa
 362               		.loc 1 75 0
 363 018e 80E0      		ldi r24,0
 364 0190 90E0      		ldi r25,0
 365 0192 00C0      		rjmp .L4
 366               	.L5:
 367               	.LBE2:
  76:Energy.c      **** 	}
  77:Energy.c      **** 	// Se apenas o nodo A alcança o coordenador, deixar ele antes de B
  78:Energy.c      **** 	else if(value_a->reach_coord)
 368               		.loc 1 78 0
 369 0194 8981      		ldd r24,Y+1
 370 0196 9A81      		ldd r25,Y+2
 371 0198 FC01      		movw r30,r24
 372 019a 8489      		ldd r24,Z+20
 373 019c 8823      		tst r24
 374 019e 01F0      		breq .L8
  79:Energy.c      **** 	{
  80:Energy.c      **** 		return(1);
 375               		.loc 1 80 0
 376 01a0 81E0      		ldi r24,lo8(1)
 377 01a2 90E0      		ldi r25,0
 378 01a4 00C0      		rjmp .L4
 379               	.L8:
  81:Energy.c      **** 	}
  82:Energy.c      **** 	// Se apenas o nodo B alcança o coordenador, deixar ele antes de A
  83:Energy.c      **** 	else if(value_b->reach_coord)
 380               		.loc 1 83 0
 381 01a6 8B81      		ldd r24,Y+3
 382 01a8 9C81      		ldd r25,Y+4
 383 01aa FC01      		movw r30,r24
 384 01ac 8489      		ldd r24,Z+20
 385 01ae 8823      		tst r24
 386 01b0 01F0      		breq .L9
  84:Energy.c      **** 	{
  85:Energy.c      **** 		return(-1);
 387               		.loc 1 85 0
 388 01b2 8FEF      		ldi r24,lo8(-1)
 389 01b4 9FEF      		ldi r25,lo8(-1)
 390 01b6 00C0      		rjmp .L4
 391               	.L9:
  86:Energy.c      **** 	}
  87:Energy.c      **** 	// Se nenhuma alcança o coordenador, não deixar como esta
  88:Energy.c      **** 	else
  89:Energy.c      **** 	{
  90:Energy.c      **** 		return(0);
 392               		.loc 1 90 0
 393 01b8 80E0      		ldi r24,0
 394 01ba 90E0      		ldi r25,0
 395               	.L4:
 396               	/* epilogue start */
  91:Energy.c      **** 	}
  92:Energy.c      **** }
 397               		.loc 1 92 0
 398 01bc 6296      		adiw r28,18
 399 01be 0FB6      		in __tmp_reg__,__SREG__
 400 01c0 F894      		cli
 401 01c2 DEBF      		out __SP_H__,r29
 402 01c4 0FBE      		out __SREG__,__tmp_reg__
 403 01c6 CDBF      		out __SP_L__,r28
 404 01c8 DF91      		pop r29
 405 01ca CF91      		pop r28
 406 01cc 1F91      		pop r17
 407 01ce 0F91      		pop r16
 408 01d0 FF90      		pop r15
 409 01d2 EF90      		pop r14
 410 01d4 DF90      		pop r13
 411 01d6 CF90      		pop r12
 412 01d8 BF90      		pop r11
 413 01da AF90      		pop r10
 414 01dc 9F90      		pop r9
 415 01de 8F90      		pop r8
 416 01e0 7F90      		pop r7
 417 01e2 6F90      		pop r6
 418 01e4 5F90      		pop r5
 419 01e6 4F90      		pop r4
 420 01e8 3F90      		pop r3
 421 01ea 2F90      		pop r2
 422 01ec 0895      		ret
 423               		.cfi_endproc
 424               	.LFE68:
 426               	.global	__subsf3
 427               	.global	__mulsf3
 428               	.global	__floatsisf
 429               	.global	__addsf3
 430               	.global	__fixsfsi
 431               	.global	__fixunssfsi
 433               	energy_Calc_NumMotes:
 434               	.LFB69:
  93:Energy.c      **** static void energy_Calc_NumMotes(void)
  94:Energy.c      **** {
 435               		.loc 1 94 0
 436               		.cfi_startproc
 437 01ee 8F92      		push r8
 438               	.LCFI20:
 439               		.cfi_def_cfa_offset 3
 440               		.cfi_offset 8, -2
 441 01f0 9F92      		push r9
 442               	.LCFI21:
 443               		.cfi_def_cfa_offset 4
 444               		.cfi_offset 9, -3
 445 01f2 AF92      		push r10
 446               	.LCFI22:
 447               		.cfi_def_cfa_offset 5
 448               		.cfi_offset 10, -4
 449 01f4 BF92      		push r11
 450               	.LCFI23:
 451               		.cfi_def_cfa_offset 6
 452               		.cfi_offset 11, -5
 453 01f6 CF92      		push r12
 454               	.LCFI24:
 455               		.cfi_def_cfa_offset 7
 456               		.cfi_offset 12, -6
 457 01f8 DF92      		push r13
 458               	.LCFI25:
 459               		.cfi_def_cfa_offset 8
 460               		.cfi_offset 13, -7
 461 01fa EF92      		push r14
 462               	.LCFI26:
 463               		.cfi_def_cfa_offset 9
 464               		.cfi_offset 14, -8
 465 01fc FF92      		push r15
 466               	.LCFI27:
 467               		.cfi_def_cfa_offset 10
 468               		.cfi_offset 15, -9
 469 01fe 0F93      		push r16
 470               	.LCFI28:
 471               		.cfi_def_cfa_offset 11
 472               		.cfi_offset 16, -10
 473 0200 1F93      		push r17
 474               	.LCFI29:
 475               		.cfi_def_cfa_offset 12
 476               		.cfi_offset 17, -11
 477 0202 CF93      		push r28
 478               	.LCFI30:
 479               		.cfi_def_cfa_offset 13
 480               		.cfi_offset 28, -12
 481 0204 DF93      		push r29
 482               	.LCFI31:
 483               		.cfi_def_cfa_offset 14
 484               		.cfi_offset 29, -13
 485 0206 CDB7      		in r28,__SP_L__
 486 0208 DEB7      		in r29,__SP_H__
 487               	.LCFI32:
 488               		.cfi_def_cfa_register 28
 489               	/* prologue: function */
 490               	/* frame size = 0 */
 491               	/* stack size = 12 */
 492               	.L__stack_usage = 12
  95:Energy.c      **** 	// taxa de perda
  96:Energy.c      **** //	SamLoss								= N_MOTES_COLLAB_MAX - solver_get_n_received();	// Exclude Coordinator Node
  97:Energy.c      **** 	SamLoss								= motes_connected_n - solver_get_n_received();	// Exclude Coordinator Node
 493               		.loc 1 97 0
 494 020a 1091 0000 		lds r17,motes_connected_n
 495 020e 0E94 0000 		call solver_get_n_received
 496 0212 912F      		mov r25,r17
 497 0214 981B      		sub r25,r24
 498 0216 892F      		mov r24,r25
 499 0218 8093 0000 		sts SamLoss,r24
  98:Energy.c      **** 	if(SamLoss < 0)
 500               		.loc 1 98 0
 501 021c 8091 0000 		lds r24,SamLoss
 502 0220 8823      		tst r24
 503 0222 04F4      		brge .L11
  99:Energy.c      **** 	{
 100:Energy.c      **** 		SamLoss							= 0;
 504               		.loc 1 100 0
 505 0224 1092 0000 		sts SamLoss,__zero_reg__
 506               	.L11:
 101:Energy.c      **** 	}
 102:Energy.c      **** 
 103:Energy.c      **** 	//vectortaxaperda.recordWithTimestamp(simTime(),SamLoss);
 104:Energy.c      **** 	//
 105:Energy.c      **** 	//if (alpha > limiaralpha)
 106:Energy.c      **** 	//alpha							= alpha - 0.1;
 107:Energy.c      **** 	//
 108:Energy.c      **** 	//if (betha > limiarbetha)
 109:Energy.c      **** 	//betha							= betha - 0.1;
 110:Energy.c      **** 
 111:Energy.c      **** 	EstLoss								= (1.0 - alpha) * EstLoss + alpha * SamLoss;
 507               		.loc 1 111 0
 508 0228 8091 0000 		lds r24,alpha
 509 022c 9091 0000 		lds r25,alpha+1
 510 0230 A091 0000 		lds r26,alpha+2
 511 0234 B091 0000 		lds r27,alpha+3
 512 0238 9C01      		movw r18,r24
 513 023a AD01      		movw r20,r26
 514 023c 60E0      		ldi r22,0
 515 023e 70E0      		ldi r23,0
 516 0240 80E8      		ldi r24,lo8(-128)
 517 0242 9FE3      		ldi r25,lo8(63)
 518 0244 0E94 0000 		call __subsf3
 519 0248 DC01      		movw r26,r24
 520 024a CB01      		movw r24,r22
 521 024c 7C01      		movw r14,r24
 522 024e 8D01      		movw r16,r26
 523 0250 8091 0000 		lds r24,EstLoss
 524 0254 9091 0000 		lds r25,EstLoss+1
 525 0258 A091 0000 		lds r26,EstLoss+2
 526 025c B091 0000 		lds r27,EstLoss+3
 527 0260 9C01      		movw r18,r24
 528 0262 AD01      		movw r20,r26
 529 0264 C801      		movw r24,r16
 530 0266 B701      		movw r22,r14
 531 0268 0E94 0000 		call __mulsf3
 532 026c DC01      		movw r26,r24
 533 026e CB01      		movw r24,r22
 534 0270 6C01      		movw r12,r24
 535 0272 7D01      		movw r14,r26
 536 0274 8091 0000 		lds r24,SamLoss
 537 0278 082E      		mov __tmp_reg__,r24
 538 027a 000C      		lsl r0
 539 027c 990B      		sbc r25,r25
 540 027e AA0B      		sbc r26,r26
 541 0280 BB0B      		sbc r27,r27
 542 0282 BC01      		movw r22,r24
 543 0284 CD01      		movw r24,r26
 544 0286 0E94 0000 		call __floatsisf
 545 028a 4B01      		movw r8,r22
 546 028c 5C01      		movw r10,r24
 547 028e 8091 0000 		lds r24,alpha
 548 0292 9091 0000 		lds r25,alpha+1
 549 0296 A091 0000 		lds r26,alpha+2
 550 029a B091 0000 		lds r27,alpha+3
 551 029e 9C01      		movw r18,r24
 552 02a0 AD01      		movw r20,r26
 553 02a2 C501      		movw r24,r10
 554 02a4 B401      		movw r22,r8
 555 02a6 0E94 0000 		call __mulsf3
 556 02aa DC01      		movw r26,r24
 557 02ac CB01      		movw r24,r22
 558 02ae 9C01      		movw r18,r24
 559 02b0 AD01      		movw r20,r26
 560 02b2 C701      		movw r24,r14
 561 02b4 B601      		movw r22,r12
 562 02b6 0E94 0000 		call __addsf3
 563 02ba DC01      		movw r26,r24
 564 02bc CB01      		movw r24,r22
 565 02be 8093 0000 		sts EstLoss,r24
 566 02c2 9093 0000 		sts EstLoss+1,r25
 567 02c6 A093 0000 		sts EstLoss+2,r26
 568 02ca B093 0000 		sts EstLoss+3,r27
 112:Energy.c      **** 	DevLoss								= (1.0 - betha) * DevLoss + betha * abs(SamLoss - EstLoss);
 569               		.loc 1 112 0
 570 02ce 8091 0000 		lds r24,betha
 571 02d2 9091 0000 		lds r25,betha+1
 572 02d6 A091 0000 		lds r26,betha+2
 573 02da B091 0000 		lds r27,betha+3
 574 02de 9C01      		movw r18,r24
 575 02e0 AD01      		movw r20,r26
 576 02e2 60E0      		ldi r22,0
 577 02e4 70E0      		ldi r23,0
 578 02e6 80E8      		ldi r24,lo8(-128)
 579 02e8 9FE3      		ldi r25,lo8(63)
 580 02ea 0E94 0000 		call __subsf3
 581 02ee DC01      		movw r26,r24
 582 02f0 CB01      		movw r24,r22
 583 02f2 7C01      		movw r14,r24
 584 02f4 8D01      		movw r16,r26
 585 02f6 8091 0000 		lds r24,DevLoss
 586 02fa 9091 0000 		lds r25,DevLoss+1
 587 02fe A091 0000 		lds r26,DevLoss+2
 588 0302 B091 0000 		lds r27,DevLoss+3
 589 0306 9C01      		movw r18,r24
 590 0308 AD01      		movw r20,r26
 591 030a C801      		movw r24,r16
 592 030c B701      		movw r22,r14
 593 030e 0E94 0000 		call __mulsf3
 594 0312 DC01      		movw r26,r24
 595 0314 CB01      		movw r24,r22
 596 0316 6C01      		movw r12,r24
 597 0318 7D01      		movw r14,r26
 598 031a 8091 0000 		lds r24,SamLoss
 599 031e 082E      		mov __tmp_reg__,r24
 600 0320 000C      		lsl r0
 601 0322 990B      		sbc r25,r25
 602 0324 AA0B      		sbc r26,r26
 603 0326 BB0B      		sbc r27,r27
 604 0328 BC01      		movw r22,r24
 605 032a CD01      		movw r24,r26
 606 032c 0E94 0000 		call __floatsisf
 607 0330 4B01      		movw r8,r22
 608 0332 5C01      		movw r10,r24
 609 0334 8091 0000 		lds r24,EstLoss
 610 0338 9091 0000 		lds r25,EstLoss+1
 611 033c A091 0000 		lds r26,EstLoss+2
 612 0340 B091 0000 		lds r27,EstLoss+3
 613 0344 9C01      		movw r18,r24
 614 0346 AD01      		movw r20,r26
 615 0348 C501      		movw r24,r10
 616 034a B401      		movw r22,r8
 617 034c 0E94 0000 		call __subsf3
 618 0350 DC01      		movw r26,r24
 619 0352 CB01      		movw r24,r22
 620 0354 BC01      		movw r22,r24
 621 0356 CD01      		movw r24,r26
 622 0358 0E94 0000 		call __fixsfsi
 623 035c DC01      		movw r26,r24
 624 035e CB01      		movw r24,r22
 625 0360 9923      		tst r25
 626 0362 04F4      		brge .L12
 627 0364 9195      		neg r25
 628 0366 8195      		neg r24
 629 0368 9109      		sbc r25,__zero_reg__
 630               	.L12:
 631 036a 092E      		mov __tmp_reg__,r25
 632 036c 000C      		lsl r0
 633 036e AA0B      		sbc r26,r26
 634 0370 BB0B      		sbc r27,r27
 635 0372 BC01      		movw r22,r24
 636 0374 CD01      		movw r24,r26
 637 0376 0E94 0000 		call __floatsisf
 638 037a 4B01      		movw r8,r22
 639 037c 5C01      		movw r10,r24
 640 037e 8091 0000 		lds r24,betha
 641 0382 9091 0000 		lds r25,betha+1
 642 0386 A091 0000 		lds r26,betha+2
 643 038a B091 0000 		lds r27,betha+3
 644 038e 9C01      		movw r18,r24
 645 0390 AD01      		movw r20,r26
 646 0392 C501      		movw r24,r10
 647 0394 B401      		movw r22,r8
 648 0396 0E94 0000 		call __mulsf3
 649 039a DC01      		movw r26,r24
 650 039c CB01      		movw r24,r22
 651 039e 9C01      		movw r18,r24
 652 03a0 AD01      		movw r20,r26
 653 03a2 C701      		movw r24,r14
 654 03a4 B601      		movw r22,r12
 655 03a6 0E94 0000 		call __addsf3
 656 03aa DC01      		movw r26,r24
 657 03ac CB01      		movw r24,r22
 658 03ae 8093 0000 		sts DevLoss,r24
 659 03b2 9093 0000 		sts DevLoss+1,r25
 660 03b6 A093 0000 		sts DevLoss+2,r26
 661 03ba B093 0000 		sts DevLoss+3,r27
 113:Energy.c      **** 	n_collab							= ceil(ganho * EstLoss + DevLoss);
 662               		.loc 1 113 0
 663 03be 8091 0000 		lds r24,ganho
 664 03c2 9091 0000 		lds r25,ganho+1
 665 03c6 A091 0000 		lds r26,ganho+2
 666 03ca B091 0000 		lds r27,ganho+3
 667 03ce 2091 0000 		lds r18,EstLoss
 668 03d2 3091 0000 		lds r19,EstLoss+1
 669 03d6 4091 0000 		lds r20,EstLoss+2
 670 03da 5091 0000 		lds r21,EstLoss+3
 671 03de BC01      		movw r22,r24
 672 03e0 CD01      		movw r24,r26
 673 03e2 0E94 0000 		call __mulsf3
 674 03e6 DC01      		movw r26,r24
 675 03e8 CB01      		movw r24,r22
 676 03ea 7C01      		movw r14,r24
 677 03ec 8D01      		movw r16,r26
 678 03ee 8091 0000 		lds r24,DevLoss
 679 03f2 9091 0000 		lds r25,DevLoss+1
 680 03f6 A091 0000 		lds r26,DevLoss+2
 681 03fa B091 0000 		lds r27,DevLoss+3
 682 03fe 9C01      		movw r18,r24
 683 0400 AD01      		movw r20,r26
 684 0402 C801      		movw r24,r16
 685 0404 B701      		movw r22,r14
 686 0406 0E94 0000 		call __addsf3
 687 040a DC01      		movw r26,r24
 688 040c CB01      		movw r24,r22
 689 040e BC01      		movw r22,r24
 690 0410 CD01      		movw r24,r26
 691 0412 0E94 0000 		call ceil
 692 0416 DC01      		movw r26,r24
 693 0418 CB01      		movw r24,r22
 694 041a BC01      		movw r22,r24
 695 041c CD01      		movw r24,r26
 696 041e 0E94 0000 		call __fixunssfsi
 697 0422 DC01      		movw r26,r24
 698 0424 CB01      		movw r24,r22
 699 0426 8093 0000 		sts n_collab,r24
 114:Energy.c      **** 	
 115:Energy.c      **** 	if(n_collab > N_MOTES_COLLAB_MAX)
 700               		.loc 1 115 0
 701 042a 8091 0000 		lds r24,n_collab
 702 042e 8F30      		cpi r24,lo8(15)
 703 0430 00F0      		brlo .L14
 116:Energy.c      **** 	{
 117:Energy.c      **** 		n_collab						= N_MOTES_COLLAB_MAX;
 704               		.loc 1 117 0
 705 0432 8EE0      		ldi r24,lo8(14)
 706 0434 8093 0000 		sts n_collab,r24
 707               	.L14:
 118:Energy.c      **** 	}
 119:Energy.c      **** }
 708               		.loc 1 119 0
 709 0438 0000      		nop
 710               	/* epilogue start */
 711 043a DF91      		pop r29
 712 043c CF91      		pop r28
 713 043e 1F91      		pop r17
 714 0440 0F91      		pop r16
 715 0442 FF90      		pop r15
 716 0444 EF90      		pop r14
 717 0446 DF90      		pop r13
 718 0448 CF90      		pop r12
 719 044a BF90      		pop r11
 720 044c AF90      		pop r10
 721 044e 9F90      		pop r9
 722 0450 8F90      		pop r8
 723 0452 0895      		ret
 724               		.cfi_endproc
 725               	.LFE69:
 728               	energy_check_each_coordinator:
 729               	.LFB70:
 120:Energy.c      **** static void energy_check_each_coordinator(void)
 121:Energy.c      **** {
 730               		.loc 1 121 0
 731               		.cfi_startproc
 732 0454 CF93      		push r28
 733               	.LCFI33:
 734               		.cfi_def_cfa_offset 3
 735               		.cfi_offset 28, -2
 736 0456 DF93      		push r29
 737               	.LCFI34:
 738               		.cfi_def_cfa_offset 4
 739               		.cfi_offset 29, -3
 740 0458 00D0      		rcall .
 741               	.LCFI35:
 742               		.cfi_def_cfa_offset 6
 743 045a CDB7      		in r28,__SP_L__
 744 045c DEB7      		in r29,__SP_H__
 745               	.LCFI36:
 746               		.cfi_def_cfa_register 28
 747               	/* prologue: function */
 748               	/* frame size = 2 */
 749               	/* stack size = 4 */
 750               	.L__stack_usage = 4
 751               	.LBB3:
 122:Energy.c      **** 	for (int i = 0; i <= N_MOTES_COLLAB_MAX; ++i)
 752               		.loc 1 122 0
 753 045e 1A82      		std Y+2,__zero_reg__
 754 0460 1982      		std Y+1,__zero_reg__
 755 0462 00C0      		rjmp .L16
 756               	.L18:
 123:Energy.c      **** 	{
 124:Energy.c      **** 		// 50 %
 125:Energy.c      **** 		motes[i].reach_coord			= ((motes[i].n_recv_msg_turn + motes[i].n_collab_msg_turn) >= COLLAB_ALG_T
 757               		.loc 1 125 0 discriminator 3
 758 0464 2981      		ldd r18,Y+1
 759 0466 3A81      		ldd r19,Y+2
 760 0468 45E1      		ldi r20,lo8(21)
 761 046a 429F      		mul r20,r18
 762 046c C001      		movw r24,r0
 763 046e 439F      		mul r20,r19
 764 0470 900D      		add r25,r0
 765 0472 1124      		clr __zero_reg__
 766 0474 8050      		subi r24,lo8(-(motes+10))
 767 0476 9040      		sbci r25,hi8(-(motes+10))
 768 0478 FC01      		movw r30,r24
 769 047a 8081      		ld r24,Z
 770 047c 282F      		mov r18,r24
 771 047e 30E0      		ldi r19,0
 772 0480 4981      		ldd r20,Y+1
 773 0482 5A81      		ldd r21,Y+2
 774 0484 65E1      		ldi r22,lo8(21)
 775 0486 649F      		mul r22,r20
 776 0488 C001      		movw r24,r0
 777 048a 659F      		mul r22,r21
 778 048c 900D      		add r25,r0
 779 048e 1124      		clr __zero_reg__
 780 0490 8050      		subi r24,lo8(-(motes+19))
 781 0492 9040      		sbci r25,hi8(-(motes+19))
 782 0494 FC01      		movw r30,r24
 783 0496 8081      		ld r24,Z
 784 0498 882F      		mov r24,r24
 785 049a 90E0      		ldi r25,0
 786 049c 820F      		add r24,r18
 787 049e 931F      		adc r25,r19
 788 04a0 41E0      		ldi r20,lo8(1)
 789 04a2 0497      		sbiw r24,4
 790 04a4 04F4      		brge .L17
 791 04a6 40E0      		ldi r20,0
 792               	.L17:
 793 04a8 2981      		ldd r18,Y+1
 794 04aa 3A81      		ldd r19,Y+2
 795 04ac 55E1      		ldi r21,lo8(21)
 796 04ae 529F      		mul r21,r18
 797 04b0 C001      		movw r24,r0
 798 04b2 539F      		mul r21,r19
 799 04b4 900D      		add r25,r0
 800 04b6 1124      		clr __zero_reg__
 801 04b8 8050      		subi r24,lo8(-(motes+20))
 802 04ba 9040      		sbci r25,hi8(-(motes+20))
 803 04bc FC01      		movw r30,r24
 804 04be 4083      		st Z,r20
 126:Energy.c      **** 		
 127:Energy.c      **** 		// Reset to calc again after next COLLAB_ALG_TURN.
 128:Energy.c      **** 		motes[i].n_recv_msg_turn		= 0;
 805               		.loc 1 128 0 discriminator 3
 806 04c0 2981      		ldd r18,Y+1
 807 04c2 3A81      		ldd r19,Y+2
 808 04c4 45E1      		ldi r20,lo8(21)
 809 04c6 429F      		mul r20,r18
 810 04c8 C001      		movw r24,r0
 811 04ca 439F      		mul r20,r19
 812 04cc 900D      		add r25,r0
 813 04ce 1124      		clr __zero_reg__
 814 04d0 8050      		subi r24,lo8(-(motes+10))
 815 04d2 9040      		sbci r25,hi8(-(motes+10))
 816 04d4 FC01      		movw r30,r24
 817 04d6 1082      		st Z,__zero_reg__
 129:Energy.c      **** 		motes[i].n_collab_msg_turn		= 0;
 818               		.loc 1 129 0 discriminator 3
 819 04d8 2981      		ldd r18,Y+1
 820 04da 3A81      		ldd r19,Y+2
 821 04dc 45E1      		ldi r20,lo8(21)
 822 04de 429F      		mul r20,r18
 823 04e0 C001      		movw r24,r0
 824 04e2 439F      		mul r20,r19
 825 04e4 900D      		add r25,r0
 826 04e6 1124      		clr __zero_reg__
 827 04e8 8050      		subi r24,lo8(-(motes+19))
 828 04ea 9040      		sbci r25,hi8(-(motes+19))
 829 04ec FC01      		movw r30,r24
 830 04ee 1082      		st Z,__zero_reg__
 122:Energy.c      **** 	{
 831               		.loc 1 122 0 discriminator 3
 832 04f0 8981      		ldd r24,Y+1
 833 04f2 9A81      		ldd r25,Y+2
 834 04f4 0196      		adiw r24,1
 835 04f6 9A83      		std Y+2,r25
 836 04f8 8983      		std Y+1,r24
 837               	.L16:
 122:Energy.c      **** 	{
 838               		.loc 1 122 0 is_stmt 0 discriminator 1
 839 04fa 8981      		ldd r24,Y+1
 840 04fc 9A81      		ldd r25,Y+2
 841 04fe 0F97      		sbiw r24,15
 842 0500 04F4      		brge .+2
 843 0502 00C0      		rjmp .L18
 844               	.LBE3:
 130:Energy.c      **** 	}
 131:Energy.c      **** }
 845               		.loc 1 131 0 is_stmt 1
 846 0504 0000      		nop
 847               	/* epilogue start */
 848 0506 0F90      		pop __tmp_reg__
 849 0508 0F90      		pop __tmp_reg__
 850 050a DF91      		pop r29
 851 050c CF91      		pop r28
 852 050e 0895      		ret
 853               		.cfi_endproc
 854               	.LFE70:
 857               	energy_generate_collab_vector:
 858               	.LFB71:
 132:Energy.c      **** // Método do PAN
 133:Energy.c      **** static void energy_generate_collab_vector(void)
 134:Energy.c      **** {
 859               		.loc 1 134 0
 860               		.cfi_startproc
 861 0510 CF93      		push r28
 862               	.LCFI37:
 863               		.cfi_def_cfa_offset 3
 864               		.cfi_offset 28, -2
 865 0512 DF93      		push r29
 866               	.LCFI38:
 867               		.cfi_def_cfa_offset 4
 868               		.cfi_offset 29, -3
 869 0514 CDB7      		in r28,__SP_L__
 870 0516 DEB7      		in r29,__SP_H__
 871               	.LCFI39:
 872               		.cfi_def_cfa_register 28
 873 0518 2997      		sbiw r28,9
 874               	.LCFI40:
 875               		.cfi_def_cfa_offset 13
 876 051a 0FB6      		in __tmp_reg__,__SREG__
 877 051c F894      		cli
 878 051e DEBF      		out __SP_H__,r29
 879 0520 0FBE      		out __SREG__,__tmp_reg__
 880 0522 CDBF      		out __SP_L__,r28
 881               	/* prologue: function */
 882               	/* frame size = 9 */
 883               	/* stack size = 11 */
 884               	.L__stack_usage = 11
 135:Energy.c      **** 	// Lógica para escolher os nodos cooperantes.
 136:Energy.c      **** 	// Utilizar SNR médio (média ou (pior+melhor)/nº de nodos).
 137:Energy.c      **** 	// Verificação simples, melhorar depois. Está pegando os nodos cooperantes com SNR acima da média,
 138:Energy.c      **** 	// os N primeiros da lista, sendo N= nº de nodos cooperantes.
 139:Energy.c      **** 	// O número máximo de nodos cooperantes está limitado a 20, pela classe Ieee802154BeaconFrame.msg
 140:Energy.c      **** 	// na propriedade listanodoscooperantes
 141:Energy.c      **** 
 142:Energy.c      **** 	uint32_t snrmedio					= 0.0;
 885               		.loc 1 142 0
 886 0524 1982      		std Y+1,__zero_reg__
 887 0526 1A82      		std Y+2,__zero_reg__
 888 0528 1B82      		std Y+3,__zero_reg__
 889 052a 1C82      		std Y+4,__zero_reg__
 143:Energy.c      **** 	memcpy(motes_aux, motes, sizeof(motes));		// Copia toda a estrutura motes para motes_aux
 890               		.loc 1 143 0
 891 052c 86E2      		ldi r24,lo8(38)
 892 052e 91E0      		ldi r25,lo8(1)
 893 0530 E0E0      		ldi r30,lo8(motes)
 894 0532 F0E0      		ldi r31,hi8(motes)
 895 0534 A0E0      		ldi r26,lo8(motes_aux)
 896 0536 B0E0      		ldi r27,hi8(motes_aux)
 897               		0:
 898 0538 0190      		ld r0,Z+
 899 053a 0D92      		st X+,r0
 900 053c 0197      		sbiw r24,1
 901 053e 01F4      		brne 0b
 902               	.LBB4:
 144:Energy.c      **** 
 145:Energy.c      **** 	// Calcula o SNR médio para ponto de corte...
 146:Energy.c      **** 	for (int i = 0; i <= N_MOTES_COLLAB_MAX; ++i)
 903               		.loc 1 146 0
 904 0540 1E82      		std Y+6,__zero_reg__
 905 0542 1D82      		std Y+5,__zero_reg__
 906 0544 00C0      		rjmp .L20
 907               	.L22:
 147:Energy.c      **** 	{
 148:Energy.c      **** 		// Estabelece um SNR bem baixo (23) para os nodos que não tiveram sucesso ao enviar msg para o PA
 149:Energy.c      **** 		if(motes_aux[i].rssi == 0)
 908               		.loc 1 149 0
 909 0546 2D81      		ldd r18,Y+5
 910 0548 3E81      		ldd r19,Y+6
 911 054a 45E1      		ldi r20,lo8(21)
 912 054c 429F      		mul r20,r18
 913 054e C001      		movw r24,r0
 914 0550 439F      		mul r20,r19
 915 0552 900D      		add r25,r0
 916 0554 1124      		clr __zero_reg__
 917 0556 8050      		subi r24,lo8(-(motes_aux+1))
 918 0558 9040      		sbci r25,hi8(-(motes_aux+1))
 919 055a FC01      		movw r30,r24
 920 055c 8081      		ld r24,Z
 921 055e 8823      		tst r24
 922 0560 01F4      		brne .L21
 150:Energy.c      **** 		{
 151:Energy.c      **** 			motes_aux[i].rssi			= 23;
 923               		.loc 1 151 0
 924 0562 2D81      		ldd r18,Y+5
 925 0564 3E81      		ldd r19,Y+6
 926 0566 45E1      		ldi r20,lo8(21)
 927 0568 429F      		mul r20,r18
 928 056a C001      		movw r24,r0
 929 056c 439F      		mul r20,r19
 930 056e 900D      		add r25,r0
 931 0570 1124      		clr __zero_reg__
 932 0572 8050      		subi r24,lo8(-(motes_aux+1))
 933 0574 9040      		sbci r25,hi8(-(motes_aux+1))
 934 0576 27E1      		ldi r18,lo8(23)
 935 0578 FC01      		movw r30,r24
 936 057a 2083      		st Z,r18
 937               	.L21:
 152:Energy.c      **** 		}
 153:Energy.c      **** 		snrmedio						+= motes_aux[i].rssi;
 938               		.loc 1 153 0 discriminator 2
 939 057c 2D81      		ldd r18,Y+5
 940 057e 3E81      		ldd r19,Y+6
 941 0580 45E1      		ldi r20,lo8(21)
 942 0582 429F      		mul r20,r18
 943 0584 C001      		movw r24,r0
 944 0586 439F      		mul r20,r19
 945 0588 900D      		add r25,r0
 946 058a 1124      		clr __zero_reg__
 947 058c 8050      		subi r24,lo8(-(motes_aux+1))
 948 058e 9040      		sbci r25,hi8(-(motes_aux+1))
 949 0590 FC01      		movw r30,r24
 950 0592 8081      		ld r24,Z
 951 0594 882F      		mov r24,r24
 952 0596 90E0      		ldi r25,0
 953 0598 A0E0      		ldi r26,0
 954 059a B0E0      		ldi r27,0
 955 059c 2981      		ldd r18,Y+1
 956 059e 3A81      		ldd r19,Y+2
 957 05a0 4B81      		ldd r20,Y+3
 958 05a2 5C81      		ldd r21,Y+4
 959 05a4 820F      		add r24,r18
 960 05a6 931F      		adc r25,r19
 961 05a8 A41F      		adc r26,r20
 962 05aa B51F      		adc r27,r21
 963 05ac 8983      		std Y+1,r24
 964 05ae 9A83      		std Y+2,r25
 965 05b0 AB83      		std Y+3,r26
 966 05b2 BC83      		std Y+4,r27
 146:Energy.c      **** 	{
 967               		.loc 1 146 0 discriminator 2
 968 05b4 8D81      		ldd r24,Y+5
 969 05b6 9E81      		ldd r25,Y+6
 970 05b8 0196      		adiw r24,1
 971 05ba 9E83      		std Y+6,r25
 972 05bc 8D83      		std Y+5,r24
 973               	.L20:
 146:Energy.c      **** 	{
 974               		.loc 1 146 0 is_stmt 0 discriminator 1
 975 05be 8D81      		ldd r24,Y+5
 976 05c0 9E81      		ldd r25,Y+6
 977 05c2 0F97      		sbiw r24,15
 978 05c4 04F4      		brge .+2
 979 05c6 00C0      		rjmp .L22
 980               	.LBE4:
 154:Energy.c      **** 	}
 155:Energy.c      **** 	snrmedio							/= N_MOTES_COLLAB_MAX;
 981               		.loc 1 155 0 is_stmt 1
 982 05c8 8981      		ldd r24,Y+1
 983 05ca 9A81      		ldd r25,Y+2
 984 05cc AB81      		ldd r26,Y+3
 985 05ce BC81      		ldd r27,Y+4
 986 05d0 2EE0      		ldi r18,lo8(14)
 987 05d2 30E0      		ldi r19,0
 988 05d4 40E0      		ldi r20,0
 989 05d6 50E0      		ldi r21,0
 990 05d8 BC01      		movw r22,r24
 991 05da CD01      		movw r24,r26
 992 05dc 0E94 0000 		call __udivmodsi4
 993 05e0 DA01      		movw r26,r20
 994 05e2 C901      		movw r24,r18
 995 05e4 8983      		std Y+1,r24
 996 05e6 9A83      		std Y+2,r25
 997 05e8 AB83      		std Y+3,r26
 998 05ea BC83      		std Y+4,r27
 156:Energy.c      **** 	
 157:Energy.c      **** 	// Força um valor mínimo de SNR para nodos colaboradores. Isto remove os nodos com baixa taxa de s
 158:Energy.c      **** 	if(snrmedio <= 23)
 999               		.loc 1 158 0
 1000 05ec 8981      		ldd r24,Y+1
 1001 05ee 9A81      		ldd r25,Y+2
 1002 05f0 AB81      		ldd r26,Y+3
 1003 05f2 BC81      		ldd r27,Y+4
 1004 05f4 4897      		sbiw r24,24
 1005 05f6 A105      		cpc r26,__zero_reg__
 1006 05f8 B105      		cpc r27,__zero_reg__
 1007 05fa 00F4      		brsh .L23
 159:Energy.c      **** 	{
 160:Energy.c      **** 		snrmedio						= 25;
 1008               		.loc 1 160 0
 1009 05fc 89E1      		ldi r24,lo8(25)
 1010 05fe 90E0      		ldi r25,0
 1011 0600 A0E0      		ldi r26,0
 1012 0602 B0E0      		ldi r27,0
 1013 0604 8983      		std Y+1,r24
 1014 0606 9A83      		std Y+2,r25
 1015 0608 AB83      		std Y+3,r26
 1016 060a BC83      		std Y+4,r27
 1017               	.L23:
 161:Energy.c      **** 	}
 162:Energy.c      **** 	
 163:Energy.c      **** 	// Ordena motes_aux da MAIOR potência para a MENOR
 164:Energy.c      **** 	qsort(motes_aux, N_MOTES_COLLAB_MAX, sizeof(EnergyStatistics_t), cmp_EnergyStatistics_t_func);
 1018               		.loc 1 164 0
 1019 060c 20E0      		ldi r18,lo8(gs(cmp_EnergyStatistics_t_func))
 1020 060e 30E0      		ldi r19,hi8(gs(cmp_EnergyStatistics_t_func))
 1021 0610 45E1      		ldi r20,lo8(21)
 1022 0612 50E0      		ldi r21,0
 1023 0614 6EE0      		ldi r22,lo8(14)
 1024 0616 70E0      		ldi r23,0
 1025 0618 80E0      		ldi r24,lo8(motes_aux)
 1026 061a 90E0      		ldi r25,hi8(motes_aux)
 1027 061c 0E94 0000 		call qsort
 165:Energy.c      **** 
 166:Energy.c      **** 	// Diversidade temporal
 167:Energy.c      **** 	// 1° Copia o next vector para o first
 168:Energy.c      **** 	// 2° Cria next vector com no máximo n_collab
 169:Energy.c      **** 
 170:Energy.c      **** 	// 1°
 171:Energy.c      **** 	uint8_t			n_collab_next_index	= collab_vector[0] + 2;						// Header (number os collabs + count ==
 1028               		.loc 1 171 0
 1029 0620 8091 0000 		lds r24,collab_vector
 1030 0624 8E5F      		subi r24,lo8(-(2))
 1031 0626 8987      		std Y+9,r24
 172:Energy.c      **** 	memcpy(collab_vector, collab_vector + n_collab_next_index, collab_vector[n_collab_next_index] + 2)
 1032               		.loc 1 172 0
 1033 0628 8985      		ldd r24,Y+9
 1034 062a 882F      		mov r24,r24
 1035 062c 90E0      		ldi r25,0
 1036 062e 8050      		subi r24,lo8(-(collab_vector))
 1037 0630 9040      		sbci r25,hi8(-(collab_vector))
 1038 0632 FC01      		movw r30,r24
 1039 0634 8081      		ld r24,Z
 1040 0636 882F      		mov r24,r24
 1041 0638 90E0      		ldi r25,0
 1042 063a 0296      		adiw r24,2
 1043 063c 9C01      		movw r18,r24
 1044 063e 8985      		ldd r24,Y+9
 1045 0640 882F      		mov r24,r24
 1046 0642 90E0      		ldi r25,0
 1047 0644 8050      		subi r24,lo8(-(collab_vector))
 1048 0646 9040      		sbci r25,hi8(-(collab_vector))
 1049 0648 A901      		movw r20,r18
 1050 064a BC01      		movw r22,r24
 1051 064c 80E0      		ldi r24,lo8(collab_vector)
 1052 064e 90E0      		ldi r25,hi8(collab_vector)
 1053 0650 0E94 0000 		call memcpy
 173:Energy.c      **** 	n_collab_next_index					= collab_vector[0] + 2;
 1054               		.loc 1 173 0
 1055 0654 8091 0000 		lds r24,collab_vector
 1056 0658 8E5F      		subi r24,lo8(-(2))
 1057 065a 8987      		std Y+9,r24
 174:Energy.c      **** 
 175:Energy.c      **** 	// 2°
 176:Energy.c      **** 	uint8_t			n_collab_cycle		= 0;
 1058               		.loc 1 176 0
 1059 065c 1F82      		std Y+7,__zero_reg__
 1060               	.LBB5:
 177:Energy.c      **** 	for(uint8_t i = 0; i < n_collab; ++i)
 1061               		.loc 1 177 0
 1062 065e 1886      		std Y+8,__zero_reg__
 1063 0660 00C0      		rjmp .L24
 1064               	.L27:
 178:Energy.c      **** 	{
 179:Energy.c      **** 		// Verifica se os possíveis nodos colaborantes tenham condições de atender. Se a rede esta muito 
 180:Energy.c      **** 		// os nodos devem ser ignorados independente da ordenação gerada. 
 181:Energy.c      **** 		if(motes_aux[i].rssi < snrmedio)
 1065               		.loc 1 181 0
 1066 0662 8885      		ldd r24,Y+8
 1067 0664 282F      		mov r18,r24
 1068 0666 30E0      		ldi r19,0
 1069 0668 45E1      		ldi r20,lo8(21)
 1070 066a 429F      		mul r20,r18
 1071 066c C001      		movw r24,r0
 1072 066e 439F      		mul r20,r19
 1073 0670 900D      		add r25,r0
 1074 0672 1124      		clr __zero_reg__
 1075 0674 8050      		subi r24,lo8(-(motes_aux+1))
 1076 0676 9040      		sbci r25,hi8(-(motes_aux+1))
 1077 0678 FC01      		movw r30,r24
 1078 067a 8081      		ld r24,Z
 1079 067c 282F      		mov r18,r24
 1080 067e 30E0      		ldi r19,0
 1081 0680 40E0      		ldi r20,0
 1082 0682 50E0      		ldi r21,0
 1083 0684 8981      		ldd r24,Y+1
 1084 0686 9A81      		ldd r25,Y+2
 1085 0688 AB81      		ldd r26,Y+3
 1086 068a BC81      		ldd r27,Y+4
 1087 068c 2817      		cp r18,r24
 1088 068e 3907      		cpc r19,r25
 1089 0690 4A07      		cpc r20,r26
 1090 0692 5B07      		cpc r21,r27
 1091 0694 00F0      		brlo .L28
 182:Energy.c      **** 		{
 183:Energy.c      **** 			continue;
 184:Energy.c      **** 		}
 185:Energy.c      **** 
 186:Energy.c      **** 		collab_vector[n_collab_next_index + n_collab_cycle + 2]	= motes_aux[n_collab_cycle].address;
 1092               		.loc 1 186 0
 1093 0696 8985      		ldd r24,Y+9
 1094 0698 282F      		mov r18,r24
 1095 069a 30E0      		ldi r19,0
 1096 069c 8F81      		ldd r24,Y+7
 1097 069e 882F      		mov r24,r24
 1098 06a0 90E0      		ldi r25,0
 1099 06a2 820F      		add r24,r18
 1100 06a4 931F      		adc r25,r19
 1101 06a6 0296      		adiw r24,2
 1102 06a8 2F81      		ldd r18,Y+7
 1103 06aa 422F      		mov r20,r18
 1104 06ac 50E0      		ldi r21,0
 1105 06ae 65E1      		ldi r22,lo8(21)
 1106 06b0 649F      		mul r22,r20
 1107 06b2 9001      		movw r18,r0
 1108 06b4 659F      		mul r22,r21
 1109 06b6 300D      		add r19,r0
 1110 06b8 1124      		clr __zero_reg__
 1111 06ba 2050      		subi r18,lo8(-(motes_aux))
 1112 06bc 3040      		sbci r19,hi8(-(motes_aux))
 1113 06be F901      		movw r30,r18
 1114 06c0 2081      		ld r18,Z
 1115 06c2 8050      		subi r24,lo8(-(collab_vector))
 1116 06c4 9040      		sbci r25,hi8(-(collab_vector))
 1117 06c6 FC01      		movw r30,r24
 1118 06c8 2083      		st Z,r18
 187:Energy.c      **** 		++n_collab_cycle;
 1119               		.loc 1 187 0
 1120 06ca 8F81      		ldd r24,Y+7
 1121 06cc 8F5F      		subi r24,lo8(-(1))
 1122 06ce 8F83      		std Y+7,r24
 1123 06d0 00C0      		rjmp .L26
 1124               	.L28:
 183:Energy.c      **** 		}
 1125               		.loc 1 183 0
 1126 06d2 0000      		nop
 1127               	.L26:
 177:Energy.c      **** 	{
 1128               		.loc 1 177 0 discriminator 2
 1129 06d4 8885      		ldd r24,Y+8
 1130 06d6 8F5F      		subi r24,lo8(-(1))
 1131 06d8 8887      		std Y+8,r24
 1132               	.L24:
 177:Energy.c      **** 	{
 1133               		.loc 1 177 0 is_stmt 0 discriminator 1
 1134 06da 8091 0000 		lds r24,n_collab
 1135 06de 9885      		ldd r25,Y+8
 1136 06e0 9817      		cp r25,r24
 1137 06e2 00F4      		brsh .+2
 1138 06e4 00C0      		rjmp .L27
 1139               	.LBE5:
 188:Energy.c      **** 	}
 189:Energy.c      **** 	collab_vector[n_collab_next_index]	= n_collab_cycle;
 1140               		.loc 1 189 0 is_stmt 1
 1141 06e6 8985      		ldd r24,Y+9
 1142 06e8 882F      		mov r24,r24
 1143 06ea 90E0      		ldi r25,0
 1144 06ec 8050      		subi r24,lo8(-(collab_vector))
 1145 06ee 9040      		sbci r25,hi8(-(collab_vector))
 1146 06f0 2F81      		ldd r18,Y+7
 1147 06f2 FC01      		movw r30,r24
 1148 06f4 2083      		st Z,r18
 190:Energy.c      **** 	collab_vector[n_collab_next_index + 1] = COLLAB_ALG_TURN;
 1149               		.loc 1 190 0
 1150 06f6 8985      		ldd r24,Y+9
 1151 06f8 882F      		mov r24,r24
 1152 06fa 90E0      		ldi r25,0
 1153 06fc 0196      		adiw r24,1
 1154 06fe 8050      		subi r24,lo8(-(collab_vector))
 1155 0700 9040      		sbci r25,hi8(-(collab_vector))
 1156 0702 24E0      		ldi r18,lo8(4)
 1157 0704 FC01      		movw r30,r24
 1158 0706 2083      		st Z,r18
 191:Energy.c      **** }
 1159               		.loc 1 191 0
 1160 0708 0000      		nop
 1161               	/* epilogue start */
 1162 070a 2996      		adiw r28,9
 1163 070c 0FB6      		in __tmp_reg__,__SREG__
 1164 070e F894      		cli
 1165 0710 DEBF      		out __SP_H__,r29
 1166 0712 0FBE      		out __SREG__,__tmp_reg__
 1167 0714 CDBF      		out __SP_L__,r28
 1168 0716 DF91      		pop r29
 1169 0718 CF91      		pop r28
 1170 071a 0895      		ret
 1171               		.cfi_endproc
 1172               	.LFE71:
 1174               	.global	energy_init
 1176               	energy_init:
 1177               	.LFB72:
 192:Energy.c      **** void energy_init(void)
 193:Energy.c      **** {
 1178               		.loc 1 193 0
 1179               		.cfi_startproc
 1180 071c CF93      		push r28
 1181               	.LCFI41:
 1182               		.cfi_def_cfa_offset 3
 1183               		.cfi_offset 28, -2
 1184 071e DF93      		push r29
 1185               	.LCFI42:
 1186               		.cfi_def_cfa_offset 4
 1187               		.cfi_offset 29, -3
 1188 0720 1F92      		push __zero_reg__
 1189               	.LCFI43:
 1190               		.cfi_def_cfa_offset 5
 1191 0722 CDB7      		in r28,__SP_L__
 1192 0724 DEB7      		in r29,__SP_H__
 1193               	.LCFI44:
 1194               		.cfi_def_cfa_register 28
 1195               	/* prologue: function */
 1196               	/* frame size = 1 */
 1197               	/* stack size = 3 */
 1198               	.L__stack_usage = 3
 194:Energy.c      **** 	n_collab					= 0;
 1199               		.loc 1 194 0
 1200 0726 1092 0000 		sts n_collab,__zero_reg__
 195:Energy.c      **** 	motes_connected_n			= 0;
 1201               		.loc 1 195 0
 1202 072a 1092 0000 		sts motes_connected_n,__zero_reg__
 1203               	.LBB6:
 196:Energy.c      **** 	for(uint8_t i = 0; i < N_MOTES_COLLAB_MAX; ++i)
 1204               		.loc 1 196 0
 1205 072e 1982      		std Y+1,__zero_reg__
 1206 0730 00C0      		rjmp .L30
 1207               	.L31:
 197:Energy.c      **** 	{
 198:Energy.c      **** 		motes[i].address				= i + 1;	// 0 is coordinator
 1208               		.loc 1 198 0 discriminator 3
 1209 0732 8981      		ldd r24,Y+1
 1210 0734 282F      		mov r18,r24
 1211 0736 30E0      		ldi r19,0
 1212 0738 8981      		ldd r24,Y+1
 1213 073a 41E0      		ldi r20,lo8(1)
 1214 073c 480F      		add r20,r24
 1215 073e 55E1      		ldi r21,lo8(21)
 1216 0740 529F      		mul r21,r18
 1217 0742 C001      		movw r24,r0
 1218 0744 539F      		mul r21,r19
 1219 0746 900D      		add r25,r0
 1220 0748 1124      		clr __zero_reg__
 1221 074a 8050      		subi r24,lo8(-(motes))
 1222 074c 9040      		sbci r25,hi8(-(motes))
 1223 074e FC01      		movw r30,r24
 1224 0750 4083      		st Z,r20
 199:Energy.c      **** 		motes[i].rssi					= 0;
 1225               		.loc 1 199 0 discriminator 3
 1226 0752 8981      		ldd r24,Y+1
 1227 0754 282F      		mov r18,r24
 1228 0756 30E0      		ldi r19,0
 1229 0758 45E1      		ldi r20,lo8(21)
 1230 075a 429F      		mul r20,r18
 1231 075c C001      		movw r24,r0
 1232 075e 439F      		mul r20,r19
 1233 0760 900D      		add r25,r0
 1234 0762 1124      		clr __zero_reg__
 1235 0764 8050      		subi r24,lo8(-(motes+1))
 1236 0766 9040      		sbci r25,hi8(-(motes+1))
 1237 0768 FC01      		movw r30,r24
 1238 076a 1082      		st Z,__zero_reg__
 200:Energy.c      **** 		motes[i].n_recv_msg				= 0;
 1239               		.loc 1 200 0 discriminator 3
 1240 076c 8981      		ldd r24,Y+1
 1241 076e 282F      		mov r18,r24
 1242 0770 30E0      		ldi r19,0
 1243 0772 45E1      		ldi r20,lo8(21)
 1244 0774 429F      		mul r20,r18
 1245 0776 C001      		movw r24,r0
 1246 0778 439F      		mul r20,r19
 1247 077a 900D      		add r25,r0
 1248 077c 1124      		clr __zero_reg__
 1249 077e 8050      		subi r24,lo8(-(motes+2))
 1250 0780 9040      		sbci r25,hi8(-(motes+2))
 1251 0782 FC01      		movw r30,r24
 1252 0784 1082      		st Z,__zero_reg__
 1253 0786 FC01      		movw r30,r24
 1254 0788 1182      		std Z+1,__zero_reg__
 1255 078a FC01      		movw r30,r24
 1256 078c 1282      		std Z+2,__zero_reg__
 1257 078e FC01      		movw r30,r24
 1258 0790 1382      		std Z+3,__zero_reg__
 1259 0792 FC01      		movw r30,r24
 1260 0794 1482      		std Z+4,__zero_reg__
 1261 0796 FC01      		movw r30,r24
 1262 0798 1582      		std Z+5,__zero_reg__
 1263 079a FC01      		movw r30,r24
 1264 079c 1682      		std Z+6,__zero_reg__
 1265 079e FC01      		movw r30,r24
 1266 07a0 1782      		std Z+7,__zero_reg__
 201:Energy.c      **** 		motes[i].n_collab_msg			= 0;
 1267               		.loc 1 201 0 discriminator 3
 1268 07a2 8981      		ldd r24,Y+1
 1269 07a4 282F      		mov r18,r24
 1270 07a6 30E0      		ldi r19,0
 1271 07a8 45E1      		ldi r20,lo8(21)
 1272 07aa 429F      		mul r20,r18
 1273 07ac C001      		movw r24,r0
 1274 07ae 439F      		mul r20,r19
 1275 07b0 900D      		add r25,r0
 1276 07b2 1124      		clr __zero_reg__
 1277 07b4 8050      		subi r24,lo8(-(motes+11))
 1278 07b6 9040      		sbci r25,hi8(-(motes+11))
 1279 07b8 FC01      		movw r30,r24
 1280 07ba 1082      		st Z,__zero_reg__
 1281 07bc FC01      		movw r30,r24
 1282 07be 1182      		std Z+1,__zero_reg__
 1283 07c0 FC01      		movw r30,r24
 1284 07c2 1282      		std Z+2,__zero_reg__
 1285 07c4 FC01      		movw r30,r24
 1286 07c6 1382      		std Z+3,__zero_reg__
 1287 07c8 FC01      		movw r30,r24
 1288 07ca 1482      		std Z+4,__zero_reg__
 1289 07cc FC01      		movw r30,r24
 1290 07ce 1582      		std Z+5,__zero_reg__
 1291 07d0 FC01      		movw r30,r24
 1292 07d2 1682      		std Z+6,__zero_reg__
 1293 07d4 FC01      		movw r30,r24
 1294 07d6 1782      		std Z+7,__zero_reg__
 202:Energy.c      **** 		motes[i].n_recv_msg_turn		= 0;
 1295               		.loc 1 202 0 discriminator 3
 1296 07d8 8981      		ldd r24,Y+1
 1297 07da 282F      		mov r18,r24
 1298 07dc 30E0      		ldi r19,0
 1299 07de 45E1      		ldi r20,lo8(21)
 1300 07e0 429F      		mul r20,r18
 1301 07e2 C001      		movw r24,r0
 1302 07e4 439F      		mul r20,r19
 1303 07e6 900D      		add r25,r0
 1304 07e8 1124      		clr __zero_reg__
 1305 07ea 8050      		subi r24,lo8(-(motes+10))
 1306 07ec 9040      		sbci r25,hi8(-(motes+10))
 1307 07ee FC01      		movw r30,r24
 1308 07f0 1082      		st Z,__zero_reg__
 203:Energy.c      **** 		motes[i].n_collab_msg_turn		= 0;
 1309               		.loc 1 203 0 discriminator 3
 1310 07f2 8981      		ldd r24,Y+1
 1311 07f4 282F      		mov r18,r24
 1312 07f6 30E0      		ldi r19,0
 1313 07f8 45E1      		ldi r20,lo8(21)
 1314 07fa 429F      		mul r20,r18
 1315 07fc C001      		movw r24,r0
 1316 07fe 439F      		mul r20,r19
 1317 0800 900D      		add r25,r0
 1318 0802 1124      		clr __zero_reg__
 1319 0804 8050      		subi r24,lo8(-(motes+19))
 1320 0806 9040      		sbci r25,hi8(-(motes+19))
 1321 0808 FC01      		movw r30,r24
 1322 080a 1082      		st Z,__zero_reg__
 204:Energy.c      **** 		motes[i].reach_coord			= 0;
 1323               		.loc 1 204 0 discriminator 3
 1324 080c 8981      		ldd r24,Y+1
 1325 080e 282F      		mov r18,r24
 1326 0810 30E0      		ldi r19,0
 1327 0812 45E1      		ldi r20,lo8(21)
 1328 0814 429F      		mul r20,r18
 1329 0816 C001      		movw r24,r0
 1330 0818 439F      		mul r20,r19
 1331 081a 900D      		add r25,r0
 1332 081c 1124      		clr __zero_reg__
 1333 081e 8050      		subi r24,lo8(-(motes+20))
 1334 0820 9040      		sbci r25,hi8(-(motes+20))
 1335 0822 FC01      		movw r30,r24
 1336 0824 1082      		st Z,__zero_reg__
 205:Energy.c      **** 		
 206:Energy.c      **** 		motes_connected_vector[i]		= 0;
 1337               		.loc 1 206 0 discriminator 3
 1338 0826 8981      		ldd r24,Y+1
 1339 0828 882F      		mov r24,r24
 1340 082a 90E0      		ldi r25,0
 1341 082c 8050      		subi r24,lo8(-(motes_connected_vector))
 1342 082e 9040      		sbci r25,hi8(-(motes_connected_vector))
 1343 0830 FC01      		movw r30,r24
 1344 0832 1082      		st Z,__zero_reg__
 196:Energy.c      **** 	{
 1345               		.loc 1 196 0 discriminator 3
 1346 0834 8981      		ldd r24,Y+1
 1347 0836 8F5F      		subi r24,lo8(-(1))
 1348 0838 8983      		std Y+1,r24
 1349               	.L30:
 196:Energy.c      **** 	{
 1350               		.loc 1 196 0 is_stmt 0 discriminator 1
 1351 083a 8981      		ldd r24,Y+1
 1352 083c 8E30      		cpi r24,lo8(14)
 1353 083e 00F4      		brsh .+2
 1354 0840 00C0      		rjmp .L31
 1355               	.LBE6:
 207:Energy.c      **** 	}
 208:Energy.c      **** 	memset(collab_vector, 0x00, N_COLLAB_VECTOR);
 1356               		.loc 1 208 0 is_stmt 1
 1357 0842 40E2      		ldi r20,lo8(32)
 1358 0844 50E0      		ldi r21,0
 1359 0846 60E0      		ldi r22,0
 1360 0848 70E0      		ldi r23,0
 1361 084a 80E0      		ldi r24,lo8(collab_vector)
 1362 084c 90E0      		ldi r25,hi8(collab_vector)
 1363 084e 0E94 0000 		call memset
 209:Energy.c      **** }
 1364               		.loc 1 209 0
 1365 0852 0000      		nop
 1366               	/* epilogue start */
 1367 0854 0F90      		pop __tmp_reg__
 1368 0856 DF91      		pop r29
 1369 0858 CF91      		pop r28
 1370 085a 0895      		ret
 1371               		.cfi_endproc
 1372               	.LFE72:
 1374               	.global	energy_receive_statistics
 1376               	energy_receive_statistics:
 1377               	.LFB73:
 210:Energy.c      **** void energy_receive_statistics(NWK_DataInd_t *ind)
 211:Energy.c      **** {
 1378               		.loc 1 211 0
 1379               		.cfi_startproc
 1380 085c AF92      		push r10
 1381               	.LCFI45:
 1382               		.cfi_def_cfa_offset 3
 1383               		.cfi_offset 10, -2
 1384 085e BF92      		push r11
 1385               	.LCFI46:
 1386               		.cfi_def_cfa_offset 4
 1387               		.cfi_offset 11, -3
 1388 0860 CF92      		push r12
 1389               	.LCFI47:
 1390               		.cfi_def_cfa_offset 5
 1391               		.cfi_offset 12, -4
 1392 0862 DF92      		push r13
 1393               	.LCFI48:
 1394               		.cfi_def_cfa_offset 6
 1395               		.cfi_offset 13, -5
 1396 0864 EF92      		push r14
 1397               	.LCFI49:
 1398               		.cfi_def_cfa_offset 7
 1399               		.cfi_offset 14, -6
 1400 0866 FF92      		push r15
 1401               	.LCFI50:
 1402               		.cfi_def_cfa_offset 8
 1403               		.cfi_offset 15, -7
 1404 0868 0F93      		push r16
 1405               	.LCFI51:
 1406               		.cfi_def_cfa_offset 9
 1407               		.cfi_offset 16, -8
 1408 086a 1F93      		push r17
 1409               	.LCFI52:
 1410               		.cfi_def_cfa_offset 10
 1411               		.cfi_offset 17, -9
 1412 086c CF93      		push r28
 1413               	.LCFI53:
 1414               		.cfi_def_cfa_offset 11
 1415               		.cfi_offset 28, -10
 1416 086e DF93      		push r29
 1417               	.LCFI54:
 1418               		.cfi_def_cfa_offset 12
 1419               		.cfi_offset 29, -11
 1420 0870 00D0      		rcall .
 1421 0872 00D0      		rcall .
 1422               	.LCFI55:
 1423               		.cfi_def_cfa_offset 16
 1424 0874 CDB7      		in r28,__SP_L__
 1425 0876 DEB7      		in r29,__SP_H__
 1426               	.LCFI56:
 1427               		.cfi_def_cfa_register 28
 1428               	/* prologue: function */
 1429               	/* frame size = 4 */
 1430               	/* stack size = 14 */
 1431               	.L__stack_usage = 14
 1432 0878 9C83      		std Y+4,r25
 1433 087a 8B83      		std Y+3,r24
 212:Energy.c      **** 	// Sanity check!
 213:Energy.c      **** 	if(ind->srcAddr == 0 || ind->srcAddr >= N_MOTES_MAX)
 1434               		.loc 1 213 0
 1435 087c 8B81      		ldd r24,Y+3
 1436 087e 9C81      		ldd r25,Y+4
 1437 0880 DC01      		movw r26,r24
 1438 0882 8D91      		ld r24,X+
 1439 0884 9C91      		ld r25,X
 1440 0886 892B      		or r24,r25
 1441 0888 01F4      		brne .+2
 1442 088a 00C0      		rjmp .L36
 1443               		.loc 1 213 0 is_stmt 0 discriminator 1
 1444 088c 8B81      		ldd r24,Y+3
 1445 088e 9C81      		ldd r25,Y+4
 1446 0890 FC01      		movw r30,r24
 1447 0892 8081      		ld r24,Z
 1448 0894 9181      		ldd r25,Z+1
 1449 0896 0F97      		sbiw r24,15
 1450 0898 00F0      		brlo .+2
 1451 089a 00C0      		rjmp .L36
 214:Energy.c      **** 		return;
 215:Energy.c      **** 
 216:Energy.c      **** 	AppMessageFrame_t*	frame_struct= (AppMessageFrame_t*) ind->data;
 1452               		.loc 1 216 0 is_stmt 1
 1453 089c 8B81      		ldd r24,Y+3
 1454 089e 9C81      		ldd r25,Y+4
 1455 08a0 DC01      		movw r26,r24
 1456 08a2 1796      		adiw r26,7
 1457 08a4 8D91      		ld r24,X+
 1458 08a6 9C91      		ld r25,X
 1459 08a8 1897      		sbiw r26,7+1
 1460 08aa 9A83      		std Y+2,r25
 1461 08ac 8983      		std Y+1,r24
 217:Energy.c      **** 
 218:Energy.c      **** 	motes[ind->srcAddr - 1].rssi	= ind->rssi;
 1462               		.loc 1 218 0
 1463 08ae 8B81      		ldd r24,Y+3
 1464 08b0 9C81      		ldd r25,Y+4
 1465 08b2 FC01      		movw r30,r24
 1466 08b4 8081      		ld r24,Z
 1467 08b6 9181      		ldd r25,Z+1
 1468 08b8 9C01      		movw r18,r24
 1469 08ba 2150      		subi r18,1
 1470 08bc 3109      		sbc r19,__zero_reg__
 1471 08be 8B81      		ldd r24,Y+3
 1472 08c0 9C81      		ldd r25,Y+4
 1473 08c2 DC01      		movw r26,r24
 1474 08c4 1B96      		adiw r26,11
 1475 08c6 8C91      		ld r24,X
 1476 08c8 582F      		mov r21,r24
 1477 08ca 45E1      		ldi r20,lo8(21)
 1478 08cc 429F      		mul r20,r18
 1479 08ce C001      		movw r24,r0
 1480 08d0 439F      		mul r20,r19
 1481 08d2 900D      		add r25,r0
 1482 08d4 1124      		clr __zero_reg__
 1483 08d6 8050      		subi r24,lo8(-(motes+1))
 1484 08d8 9040      		sbci r25,hi8(-(motes+1))
 1485 08da FC01      		movw r30,r24
 1486 08dc 5083      		st Z,r21
 219:Energy.c      **** 
 220:Energy.c      **** 	if(frame_struct->frameType == MSG_STATE_DATA)
 1487               		.loc 1 220 0
 1488 08de 8981      		ldd r24,Y+1
 1489 08e0 9A81      		ldd r25,Y+2
 1490 08e2 DC01      		movw r26,r24
 1491 08e4 8C91      		ld r24,X
 1492 08e6 8130      		cpi r24,lo8(1)
 1493 08e8 01F0      		breq .+2
 1494 08ea 00C0      		rjmp .L32
 221:Energy.c      **** 	{
 222:Energy.c      **** 		motes[ind->srcAddr - 1].n_recv_msg++;
 1495               		.loc 1 222 0
 1496 08ec 8B81      		ldd r24,Y+3
 1497 08ee 9C81      		ldd r25,Y+4
 1498 08f0 FC01      		movw r30,r24
 1499 08f2 8081      		ld r24,Z
 1500 08f4 9181      		ldd r25,Z+1
 1501 08f6 FC01      		movw r30,r24
 1502 08f8 3197      		sbiw r30,1
 1503 08fa 25E1      		ldi r18,lo8(21)
 1504 08fc 2E9F      		mul r18,r30
 1505 08fe C001      		movw r24,r0
 1506 0900 2F9F      		mul r18,r31
 1507 0902 900D      		add r25,r0
 1508 0904 1124      		clr __zero_reg__
 1509 0906 8050      		subi r24,lo8(-(motes+2))
 1510 0908 9040      		sbci r25,hi8(-(motes+2))
 1511 090a DC01      		movw r26,r24
 1512 090c AC90      		ld r10,X
 1513 090e DC01      		movw r26,r24
 1514 0910 1196      		adiw r26,1
 1515 0912 BC90      		ld r11,X
 1516 0914 DC01      		movw r26,r24
 1517 0916 1296      		adiw r26,2
 1518 0918 CC90      		ld r12,X
 1519 091a DC01      		movw r26,r24
 1520 091c 1396      		adiw r26,3
 1521 091e DC90      		ld r13,X
 1522 0920 DC01      		movw r26,r24
 1523 0922 1496      		adiw r26,4
 1524 0924 EC90      		ld r14,X
 1525 0926 DC01      		movw r26,r24
 1526 0928 1596      		adiw r26,5
 1527 092a FC90      		ld r15,X
 1528 092c DC01      		movw r26,r24
 1529 092e 1696      		adiw r26,6
 1530 0930 0C91      		ld r16,X
 1531 0932 DC01      		movw r26,r24
 1532 0934 1796      		adiw r26,7
 1533 0936 1C91      		ld r17,X
 1534 0938 2A2D      		mov r18,r10
 1535 093a 3B2D      		mov r19,r11
 1536 093c 4C2D      		mov r20,r12
 1537 093e 5D2D      		mov r21,r13
 1538 0940 6E2D      		mov r22,r14
 1539 0942 7F2D      		mov r23,r15
 1540 0944 802F      		mov r24,r16
 1541 0946 912F      		mov r25,r17
 1542 0948 A1E0      		ldi r26,lo8(1)
 1543 094a 0E94 0000 		call __adddi3_s8
 1544 094e A22E      		mov r10,r18
 1545 0950 B32E      		mov r11,r19
 1546 0952 C42E      		mov r12,r20
 1547 0954 D52E      		mov r13,r21
 1548 0956 E62E      		mov r14,r22
 1549 0958 F72E      		mov r15,r23
 1550 095a 082F      		mov r16,r24
 1551 095c 192F      		mov r17,r25
 1552 095e 25E1      		ldi r18,lo8(21)
 1553 0960 2E9F      		mul r18,r30
 1554 0962 C001      		movw r24,r0
 1555 0964 2F9F      		mul r18,r31
 1556 0966 900D      		add r25,r0
 1557 0968 1124      		clr __zero_reg__
 1558 096a 8050      		subi r24,lo8(-(motes+2))
 1559 096c 9040      		sbci r25,hi8(-(motes+2))
 1560 096e FC01      		movw r30,r24
 1561 0970 A082      		st Z,r10
 1562 0972 DC01      		movw r26,r24
 1563 0974 1196      		adiw r26,1
 1564 0976 BC92      		st X,r11
 1565 0978 FC01      		movw r30,r24
 1566 097a C282      		std Z+2,r12
 1567 097c DC01      		movw r26,r24
 1568 097e 1396      		adiw r26,3
 1569 0980 DC92      		st X,r13
 1570 0982 FC01      		movw r30,r24
 1571 0984 E482      		std Z+4,r14
 1572 0986 DC01      		movw r26,r24
 1573 0988 1596      		adiw r26,5
 1574 098a FC92      		st X,r15
 1575 098c FC01      		movw r30,r24
 1576 098e 0683      		std Z+6,r16
 1577 0990 DC01      		movw r26,r24
 1578 0992 1796      		adiw r26,7
 1579 0994 1C93      		st X,r17
 223:Energy.c      **** 		motes[ind->srcAddr - 1].n_recv_msg_turn++;
 1580               		.loc 1 223 0
 1581 0996 8B81      		ldd r24,Y+3
 1582 0998 9C81      		ldd r25,Y+4
 1583 099a FC01      		movw r30,r24
 1584 099c 8081      		ld r24,Z
 1585 099e 9181      		ldd r25,Z+1
 1586 09a0 0197      		sbiw r24,1
 1587 09a2 45E1      		ldi r20,lo8(21)
 1588 09a4 489F      		mul r20,r24
 1589 09a6 9001      		movw r18,r0
 1590 09a8 499F      		mul r20,r25
 1591 09aa 300D      		add r19,r0
 1592 09ac 1124      		clr __zero_reg__
 1593 09ae 2050      		subi r18,lo8(-(motes+10))
 1594 09b0 3040      		sbci r19,hi8(-(motes+10))
 1595 09b2 D901      		movw r26,r18
 1596 09b4 2C91      		ld r18,X
 1597 09b6 41E0      		ldi r20,lo8(1)
 1598 09b8 420F      		add r20,r18
 1599 09ba 55E1      		ldi r21,lo8(21)
 1600 09bc 589F      		mul r21,r24
 1601 09be 9001      		movw r18,r0
 1602 09c0 599F      		mul r21,r25
 1603 09c2 300D      		add r19,r0
 1604 09c4 1124      		clr __zero_reg__
 1605 09c6 C901      		movw r24,r18
 1606 09c8 8050      		subi r24,lo8(-(motes+10))
 1607 09ca 9040      		sbci r25,hi8(-(motes+10))
 1608 09cc FC01      		movw r30,r24
 1609 09ce 4083      		st Z,r20
 1610 09d0 00C0      		rjmp .L32
 1611               	.L36:
 214:Energy.c      **** 
 1612               		.loc 1 214 0
 1613 09d2 0000      		nop
 1614               	.L32:
 1615               	/* epilogue start */
 224:Energy.c      **** 	}
 225:Energy.c      **** #if APP_COORDINATOR
 226:Energy.c      **** 	else if(frame_struct->frameType == MSG_STATE_ENCODED_DATA)
 227:Energy.c      **** 	{
 228:Energy.c      **** 		motes[ind->srcAddr - 1].n_collab_msg++;
 229:Energy.c      **** 		motes[ind->srcAddr - 1].n_collab_msg_turn++;
 230:Energy.c      **** 	}
 231:Energy.c      **** 	else if(frame_struct->frameType == MSG_STATE_CONNECTION)
 232:Energy.c      **** 	{
 233:Energy.c      **** 		if(motes_connected_vector[ind->srcAddr - 1] == 0)
 234:Energy.c      **** 		{
 235:Energy.c      **** 			motes_connected_vector[ind->srcAddr - 1]	= 1;
 236:Energy.c      **** 			motes_connected_n++;
 237:Energy.c      **** 		}
 238:Energy.c      **** 	}
 239:Energy.c      **** #endif
 240:Energy.c      **** }
 1616               		.loc 1 240 0
 1617 09d4 0F90      		pop __tmp_reg__
 1618 09d6 0F90      		pop __tmp_reg__
 1619 09d8 0F90      		pop __tmp_reg__
 1620 09da 0F90      		pop __tmp_reg__
 1621 09dc DF91      		pop r29
 1622 09de CF91      		pop r28
 1623 09e0 1F91      		pop r17
 1624 09e2 0F91      		pop r16
 1625 09e4 FF90      		pop r15
 1626 09e6 EF90      		pop r14
 1627 09e8 DF90      		pop r13
 1628 09ea CF90      		pop r12
 1629 09ec BF90      		pop r11
 1630 09ee AF90      		pop r10
 1631 09f0 0895      		ret
 1632               		.cfi_endproc
 1633               	.LFE73:
 1635               	.global	energy_prepare_next_turn
 1637               	energy_prepare_next_turn:
 1638               	.LFB74:
 241:Energy.c      **** void energy_prepare_next_turn(void)
 242:Energy.c      **** {
 1639               		.loc 1 242 0
 1640               		.cfi_startproc
 1641 09f2 CF93      		push r28
 1642               	.LCFI57:
 1643               		.cfi_def_cfa_offset 3
 1644               		.cfi_offset 28, -2
 1645 09f4 DF93      		push r29
 1646               	.LCFI58:
 1647               		.cfi_def_cfa_offset 4
 1648               		.cfi_offset 29, -3
 1649 09f6 CDB7      		in r28,__SP_L__
 1650 09f8 DEB7      		in r29,__SP_H__
 1651               	.LCFI59:
 1652               		.cfi_def_cfa_register 28
 1653               	/* prologue: function */
 1654               	/* frame size = 0 */
 1655               	/* stack size = 2 */
 1656               	.L__stack_usage = 2
 243:Energy.c      **** #if APP_ENDDEVICE
 244:Energy.c      **** 	return;
 1657               		.loc 1 244 0
 1658 09fa 0000      		nop
 1659               	/* epilogue start */
 245:Energy.c      **** #endif
 246:Energy.c      **** 	
 247:Energy.c      **** 	energy_Calc_NumMotes();
 248:Energy.c      **** 	if(collab_vector[1] > 0)
 249:Energy.c      **** 	{
 250:Energy.c      **** 		collab_vector[1]--;
 251:Energy.c      **** 	}
 252:Energy.c      **** 
 253:Energy.c      **** 	if(collab_vector[1] == 0)
 254:Energy.c      **** 	{
 255:Energy.c      **** 		energy_check_each_coordinator();
 256:Energy.c      **** 		energy_generate_collab_vector();
 257:Energy.c      **** 	}
 258:Energy.c      **** 
 259:Energy.c      **** 	for(uint8_t i = 0; i < N_MOTES_COLLAB_MAX; ++i)
 260:Energy.c      **** 	{
 261:Energy.c      **** 		motes[i].rssi			= 0;
 262:Energy.c      **** 	}
 263:Energy.c      **** }
 1660               		.loc 1 263 0
 1661 09fc DF91      		pop r29
 1662 09fe CF91      		pop r28
 1663 0a00 0895      		ret
 1664               		.cfi_endproc
 1665               	.LFE74:
 1667               	.global	energy_get_collab_vector
 1669               	energy_get_collab_vector:
 1670               	.LFB75:
 264:Energy.c      **** void energy_get_collab_vector(uint8_t* vector)
 265:Energy.c      **** {
 1671               		.loc 1 265 0
 1672               		.cfi_startproc
 1673 0a02 CF93      		push r28
 1674               	.LCFI60:
 1675               		.cfi_def_cfa_offset 3
 1676               		.cfi_offset 28, -2
 1677 0a04 DF93      		push r29
 1678               	.LCFI61:
 1679               		.cfi_def_cfa_offset 4
 1680               		.cfi_offset 29, -3
 1681 0a06 00D0      		rcall .
 1682               	.LCFI62:
 1683               		.cfi_def_cfa_offset 6
 1684 0a08 CDB7      		in r28,__SP_L__
 1685 0a0a DEB7      		in r29,__SP_H__
 1686               	.LCFI63:
 1687               		.cfi_def_cfa_register 28
 1688               	/* prologue: function */
 1689               	/* frame size = 2 */
 1690               	/* stack size = 4 */
 1691               	.L__stack_usage = 4
 1692 0a0c 9A83      		std Y+2,r25
 1693 0a0e 8983      		std Y+1,r24
 266:Energy.c      **** 	memcpy(vector, collab_vector, N_COLLAB_VECTOR);
 1694               		.loc 1 266 0
 1695 0a10 8981      		ldd r24,Y+1
 1696 0a12 9A81      		ldd r25,Y+2
 1697 0a14 20E2      		ldi r18,lo8(32)
 1698 0a16 E0E0      		ldi r30,lo8(collab_vector)
 1699 0a18 F0E0      		ldi r31,hi8(collab_vector)
 1700 0a1a DC01      		movw r26,r24
 1701               		0:
 1702 0a1c 0190      		ld r0,Z+
 1703 0a1e 0D92      		st X+,r0
 1704 0a20 2A95      		dec r18
 1705 0a22 01F4      		brne 0b
 267:Energy.c      **** }
 1706               		.loc 1 267 0
 1707 0a24 0000      		nop
 1708               	/* epilogue start */
 1709 0a26 0F90      		pop __tmp_reg__
 1710 0a28 0F90      		pop __tmp_reg__
 1711 0a2a DF91      		pop r29
 1712 0a2c CF91      		pop r28
 1713 0a2e 0895      		ret
 1714               		.cfi_endproc
 1715               	.LFE75:
 1717               	.global	energy_get_connected_vector
 1719               	energy_get_connected_vector:
 1720               	.LFB76:
 268:Energy.c      **** uint8_t energy_get_connected_vector(uint8_t* vector)
 269:Energy.c      **** {
 1721               		.loc 1 269 0
 1722               		.cfi_startproc
 1723 0a30 CF93      		push r28
 1724               	.LCFI64:
 1725               		.cfi_def_cfa_offset 3
 1726               		.cfi_offset 28, -2
 1727 0a32 DF93      		push r29
 1728               	.LCFI65:
 1729               		.cfi_def_cfa_offset 4
 1730               		.cfi_offset 29, -3
 1731 0a34 00D0      		rcall .
 1732               	.LCFI66:
 1733               		.cfi_def_cfa_offset 6
 1734 0a36 CDB7      		in r28,__SP_L__
 1735 0a38 DEB7      		in r29,__SP_H__
 1736               	.LCFI67:
 1737               		.cfi_def_cfa_register 28
 1738               	/* prologue: function */
 1739               	/* frame size = 2 */
 1740               	/* stack size = 4 */
 1741               	.L__stack_usage = 4
 1742 0a3a 9A83      		std Y+2,r25
 1743 0a3c 8983      		std Y+1,r24
 270:Energy.c      **** 	memcpy(vector, motes_connected_vector, N_MOTES_COLLAB_MAX);
 1744               		.loc 1 270 0
 1745 0a3e 8981      		ldd r24,Y+1
 1746 0a40 9A81      		ldd r25,Y+2
 1747 0a42 2EE0      		ldi r18,lo8(14)
 1748 0a44 E0E0      		ldi r30,lo8(motes_connected_vector)
 1749 0a46 F0E0      		ldi r31,hi8(motes_connected_vector)
 1750 0a48 DC01      		movw r26,r24
 1751               		0:
 1752 0a4a 0190      		ld r0,Z+
 1753 0a4c 0D92      		st X+,r0
 1754 0a4e 2A95      		dec r18
 1755 0a50 01F4      		brne 0b
 271:Energy.c      **** 
 272:Energy.c      **** 	return(motes_connected_n);
 1756               		.loc 1 272 0
 1757 0a52 8091 0000 		lds r24,motes_connected_n
 1758               	/* epilogue start */
 273:Energy.c      **** }
 1759               		.loc 1 273 0
 1760 0a56 0F90      		pop __tmp_reg__
 1761 0a58 0F90      		pop __tmp_reg__
 1762 0a5a DF91      		pop r29
 1763 0a5c CF91      		pop r28
 1764 0a5e 0895      		ret
 1765               		.cfi_endproc
 1766               	.LFE76:
 1768               	.global	energy_get_statistics
 1770               	energy_get_statistics:
 1771               	.LFB77:
 274:Energy.c      **** EnergyStatistics_t* energy_get_statistics(uint8_t index)
 275:Energy.c      **** {
 1772               		.loc 1 275 0
 1773               		.cfi_startproc
 1774 0a60 CF93      		push r28
 1775               	.LCFI68:
 1776               		.cfi_def_cfa_offset 3
 1777               		.cfi_offset 28, -2
 1778 0a62 DF93      		push r29
 1779               	.LCFI69:
 1780               		.cfi_def_cfa_offset 4
 1781               		.cfi_offset 29, -3
 1782 0a64 1F92      		push __zero_reg__
 1783               	.LCFI70:
 1784               		.cfi_def_cfa_offset 5
 1785 0a66 CDB7      		in r28,__SP_L__
 1786 0a68 DEB7      		in r29,__SP_H__
 1787               	.LCFI71:
 1788               		.cfi_def_cfa_register 28
 1789               	/* prologue: function */
 1790               	/* frame size = 1 */
 1791               	/* stack size = 3 */
 1792               	.L__stack_usage = 3
 1793 0a6a 8983      		std Y+1,r24
 276:Energy.c      **** 	return(&motes[index]);
 1794               		.loc 1 276 0
 1795 0a6c 8981      		ldd r24,Y+1
 1796 0a6e 282F      		mov r18,r24
 1797 0a70 30E0      		ldi r19,0
 1798 0a72 45E1      		ldi r20,lo8(21)
 1799 0a74 429F      		mul r20,r18
 1800 0a76 C001      		movw r24,r0
 1801 0a78 439F      		mul r20,r19
 1802 0a7a 900D      		add r25,r0
 1803 0a7c 1124      		clr __zero_reg__
 1804 0a7e 8050      		subi r24,lo8(-(motes))
 1805 0a80 9040      		sbci r25,hi8(-(motes))
 1806               	/* epilogue start */
 277:Energy.c      **** }...
 1807               		.loc 1 277 0
 1808 0a82 0F90      		pop __tmp_reg__
 1809 0a84 DF91      		pop r29
 1810 0a86 CF91      		pop r28
 1811 0a88 0895      		ret
 1812               		.cfi_endproc
 1813               	.LFE77:
 1815               	.Letext0:
 1816               		.file 2 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\in
 1817               		.file 3 "../../../stack/LwMesh/TDMA/nwk/inc/nwkRx.h"
 1818               		.file 4 "Solver.h"
 1819               		.file 5 "Energy.h"
DEFINED SYMBOLS
                            *ABS*:00000000 Energy.c
C:\Users\guilh\AppData\Local\Temp\cc0wJgVG.s:2      *ABS*:0000003e __SP_H__
C:\Users\guilh\AppData\Local\Temp\cc0wJgVG.s:3      *ABS*:0000003d __SP_L__
C:\Users\guilh\AppData\Local\Temp\cc0wJgVG.s:4      *ABS*:0000003f __SREG__
C:\Users\guilh\AppData\Local\Temp\cc0wJgVG.s:5      *ABS*:0000003b __RAMPZ__
C:\Users\guilh\AppData\Local\Temp\cc0wJgVG.s:6      *ABS*:00000000 __tmp_reg__
C:\Users\guilh\AppData\Local\Temp\cc0wJgVG.s:7      *ABS*:00000001 __zero_reg__
C:\Users\guilh\AppData\Local\Temp\cc0wJgVG.s:14     .bss.n_collab:00000000 n_collab
C:\Users\guilh\AppData\Local\Temp\cc0wJgVG.s:19     .bss.SamLoss:00000000 SamLoss
C:\Users\guilh\AppData\Local\Temp\cc0wJgVG.s:24     .data.alpha:00000000 alpha
C:\Users\guilh\AppData\Local\Temp\cc0wJgVG.s:32     .data.betha:00000000 betha
C:\Users\guilh\AppData\Local\Temp\cc0wJgVG.s:40     .data.ganho:00000000 ganho
C:\Users\guilh\AppData\Local\Temp\cc0wJgVG.s:48     .bss.EstLoss:00000000 EstLoss
C:\Users\guilh\AppData\Local\Temp\cc0wJgVG.s:53     .bss.DevLoss:00000000 DevLoss
C:\Users\guilh\AppData\Local\Temp\cc0wJgVG.s:58     .bss.motes:00000000 motes
C:\Users\guilh\AppData\Local\Temp\cc0wJgVG.s:63     .bss.motes_aux:00000000 motes_aux
C:\Users\guilh\AppData\Local\Temp\cc0wJgVG.s:68     .bss.motes_connected_n:00000000 motes_connected_n
C:\Users\guilh\AppData\Local\Temp\cc0wJgVG.s:73     .bss.motes_connected_vector:00000000 motes_connected_vector
C:\Users\guilh\AppData\Local\Temp\cc0wJgVG.s:78     .bss.collab_vector:00000000 collab_vector
C:\Users\guilh\AppData\Local\Temp\cc0wJgVG.s:82     .text:00000000 cmp_EnergyStatistics_t_func
C:\Users\guilh\AppData\Local\Temp\cc0wJgVG.s:433    .text:000001ee energy_Calc_NumMotes
C:\Users\guilh\AppData\Local\Temp\cc0wJgVG.s:728    .text:00000454 energy_check_each_coordinator
C:\Users\guilh\AppData\Local\Temp\cc0wJgVG.s:857    .text:00000510 energy_generate_collab_vector
C:\Users\guilh\AppData\Local\Temp\cc0wJgVG.s:1176   .text:0000071c energy_init
C:\Users\guilh\AppData\Local\Temp\cc0wJgVG.s:1376   .text:0000085c energy_receive_statistics
C:\Users\guilh\AppData\Local\Temp\cc0wJgVG.s:1637   .text:000009f2 energy_prepare_next_turn
C:\Users\guilh\AppData\Local\Temp\cc0wJgVG.s:1669   .text:00000a02 energy_get_collab_vector
C:\Users\guilh\AppData\Local\Temp\cc0wJgVG.s:1719   .text:00000a30 energy_get_connected_vector
C:\Users\guilh\AppData\Local\Temp\cc0wJgVG.s:1770   .text:00000a60 energy_get_statistics

UNDEFINED SYMBOLS
__subdi3
__cmpdi2_s8
__subsf3
__mulsf3
__floatsisf
__addsf3
__fixsfsi
__fixunssfsi
solver_get_n_received
ceil
__udivmodsi4
qsort
memcpy
memset
__adddi3_s8
__do_copy_data
__do_clear_bss
