   1              	 .cpu cortex-m4
   2              	 .eabi_attribute 20,1
   3              	 .eabi_attribute 21,1
   4              	 .eabi_attribute 23,3
   5              	 .eabi_attribute 24,1
   6              	 .eabi_attribute 25,1
   7              	 .eabi_attribute 26,1
   8              	 .eabi_attribute 30,6
   9              	 .eabi_attribute 34,1
  10              	 .eabi_attribute 18,4
  11              	 .file "sleep_mgr.c"
  12              	 .text
  13              	.Ltext0:
  14              	 .cfi_sections .debug_frame
  15              	 .section .bss.cpu_irq_critical_section_counter,"aw",%nobits
  16              	 .align 2
  19              	cpu_irq_critical_section_counter:
  20 0000 00000000 	 .space 4
  21              	 .section .bss.cpu_irq_prev_interrupt_state,"aw",%nobits
  24              	cpu_irq_prev_interrupt_state:
  25 0000 00       	 .space 1
  26              	 .text
  27              	 .align 1
  28              	 .syntax unified
  29              	 .thumb
  30              	 .thumb_func
  31              	 .fpu softvfp
  33              	cpu_irq_save:
  34              	.LFB112:
  35              	 .file 1 "../../../platform/common/utils/interrupt/interrupt_sam_nvic.h"
   1:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** /**
   2:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  * \file
   3:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  *
   4:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  * \brief Global interrupt management for SAM D20, SAM3 and SAM4 (NVIC based)
   5:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  *
   6:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  * Copyright (c) 2012-2013 Atmel Corporation. All rights reserved.
   7:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  *
   8:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  * \asf_license_start
   9:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  *
  10:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  * \page License
  11:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  *
  12:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  * Redistribution and use in source and binary forms, with or without
  13:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  * modification, are permitted provided that the following conditions are met:
  14:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  *
  15:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  * 1. Redistributions of source code must retain the above copyright notice,
  16:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  *    this list of conditions and the following disclaimer.
  17:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  *
  18:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  * 2. Redistributions in binary form must reproduce the above copyright notice,
  19:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  *    this list of conditions and the following disclaimer in the documentation
  20:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  *    and/or other materials provided with the distribution.
  21:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  *
  22:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  * 3. The name of Atmel may not be used to endorse or promote products derived
  23:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  *    from this software without specific prior written permission.
  24:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  *
  25:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  * 4. This software may only be redistributed and used in connection with an
  26:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  *    Atmel microcontroller product.
  27:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  *
  28:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  * THIS SOFTWARE IS PROVIDED BY ATMEL "AS IS" AND ANY EXPRESS OR IMPLIED
  29:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
  30:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE
  31:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  * EXPRESSLY AND SPECIFICALLY DISCLAIMED. IN NO EVENT SHALL ATMEL BE LIABLE FOR
  32:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  33:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
  34:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
  35:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
  36:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
  37:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  38:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  * POSSIBILITY OF SUCH DAMAGE.
  39:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  *
  40:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  * \asf_license_stop
  41:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  *
  42:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  */
  43:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** 
  44:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** #ifndef UTILS_INTERRUPT_INTERRUPT_H
  45:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** #define UTILS_INTERRUPT_INTERRUPT_H
  46:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** 
  47:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** #include <compiler.h>
  48:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** #include <parts.h>
  49:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** 
  50:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** /**
  51:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  * \weakgroup interrupt_group
  52:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  *
  53:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  * @{
  54:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  */
  55:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** 
  56:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** /**
  57:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  * \name Interrupt Service Routine definition
  58:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  *
  59:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  * @{
  60:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  */
  61:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** 
  62:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** /**
  63:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  * \brief Define service routine
  64:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  *
  65:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  * \note For NVIC devices the interrupt service routines are predefined to
  66:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  *       add to vector table in binary generation, so there is no service
  67:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  *       register at run time. The routine collections are in exceptions.h.
  68:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  *
  69:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  * Usage:
  70:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  * \code
  71:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  * ISR(foo_irq_handler)
  72:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  * {
  73:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  *      // Function definition
  74:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  *      ...
  75:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  * }
  76:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  * \endcode
  77:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  *
  78:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  * \param func Name for the function.
  79:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  */
  80:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** #  define ISR(func)   \
  81:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** 	void func (void)
  82:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** 
  83:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** /**
  84:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  * \brief Initialize interrupt vectors
  85:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  *
  86:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  * For NVIC the interrupt vectors are put in vector table. So nothing
  87:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  * to do to initialize them, except defined the vector function with
  88:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  * right name.
  89:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  *
  90:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  * This must be called prior to \ref irq_register_handler.
  91:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  */
  92:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** #  define irq_initialize_vectors()   \
  93:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** 	do {                             \
  94:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** 	} while(0)
  95:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** 
  96:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** /**
  97:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  * \brief Register handler for interrupt
  98:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  *
  99:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  * For NVIC the interrupt vectors are put in vector table. So nothing
 100:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  * to do to register them, except defined the vector function with
 101:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  * right name.
 102:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  *
 103:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  * Usage:
 104:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  * \code
 105:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  * irq_initialize_vectors();
 106:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  * irq_register_handler(foo_irq_handler);
 107:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  * \endcode
 108:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  *
 109:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  * \note The function \a func must be defined with the \ref ISR macro.
 110:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  * \note The functions prototypes can be found in the device exception header
 111:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  *       files (exceptions.h).
 112:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h ****  */
 113:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** #  define irq_register_handler(int_num, int_prio)                      \
 114:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** 	NVIC_ClearPendingIRQ(    (IRQn_Type)int_num);                      \
 115:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** 	NVIC_SetPriority(    (IRQn_Type)int_num, int_prio);                \
 116:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** 	NVIC_EnableIRQ(      (IRQn_Type)int_num);                          \
 117:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** 
 118:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** //@}
 119:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** 
 120:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** #  define cpu_irq_enable()                     \
 121:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** 	do {                                       \
 122:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** 		g_interrupt_enabled = true;            \
 123:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** 		__DMB();                               \
 124:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** 		__enable_irq();                        \
 125:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** 	} while (0)
 126:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** #  define cpu_irq_disable()                    \
 127:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** 	do {                                       \
 128:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** 		__disable_irq();                       \
 129:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** 		__DMB();                               \
 130:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** 		g_interrupt_enabled = false;           \
 131:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** 	} while (0)
 132:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** 
 133:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** typedef uint32_t irqflags_t;
 134:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** 
 135:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** #if !defined(__DOXYGEN__)
 136:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** extern volatile bool g_interrupt_enabled;
 137:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** #endif
 138:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** 
 139:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** #define cpu_irq_is_enabled()    (__get_PRIMASK() == 0)
 140:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** 
 141:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** static volatile uint32_t cpu_irq_critical_section_counter;
 142:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** static volatile bool     cpu_irq_prev_interrupt_state;
 143:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** 
 144:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** static inline irqflags_t cpu_irq_save(void)
 145:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** {
  36              	 .loc 1 145 0
  37              	 .cfi_startproc
  38              	 
  39              	 
  40              	 
  41 0000 80B4     	 push {r7}
  42              	.LCFI0:
  43              	 .cfi_def_cfa_offset 4
  44              	 .cfi_offset 7,-4
  45 0002 83B0     	 sub sp,sp,#12
  46              	.LCFI1:
  47              	 .cfi_def_cfa_offset 16
  48 0004 00AF     	 add r7,sp,#0
  49              	.LCFI2:
  50              	 .cfi_def_cfa_register 7
  51              	.LBB24:
  52              	.LBB25:
  53              	 .file 2 "../../../platform/thirdparty/CMSIS/include/core_cmFunc.h"
   1:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** /**************************************************************************//**
   2:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  * @file     core_cmFunc.h
   3:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  * @brief    CMSIS Cortex-M Core Function Access Header File
   4:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  * @version  V3.00
   5:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  * @date     19. January 2012
   6:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  *
   7:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  * @note
   8:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  * Copyright (C) 2009-2012 ARM Limited. All rights reserved.
   9:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  *
  10:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  * @par
  11:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  * ARM Limited (ARM) is supplying this software for use with Cortex-M 
  12:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  * processor based microcontrollers.  This file can be freely distributed 
  13:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  * within development tools that are supporting such ARM based processors. 
  14:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  *
  15:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  * @par
  16:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
  17:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
  18:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
  19:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  * ARM SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR
  20:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
  21:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  *
  22:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  ******************************************************************************/
  23:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
  24:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** #ifndef __CORE_CMFUNC_H
  25:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** #define __CORE_CMFUNC_H
  26:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
  27:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** /* ###########################  Core Function Access  ########################### */
  28:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** /** \ingroup  CMSIS_Core_FunctionInterface   
  29:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
  30:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   @{
  31:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  */
  32:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
  33:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** #if   defined ( __CC_ARM ) /*------------------RealView Compiler -----------------*/
  34:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** /* ARM armcc specific functions */
  35:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
  36:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** #if (__ARMCC_VERSION < 400677)
  37:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   #error "Please use ARM Compiler Toolchain V4.0.677 or later!"
  38:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** #endif
  39:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
  40:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** /* intrinsic void __enable_irq();     */
  41:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** /* intrinsic void __disable_irq();    */
  42:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
  43:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** /** \brief  Get Control Register
  44:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
  45:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     This function returns the content of the Control Register.
  46:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
  47:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     \return               Control Register value
  48:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  */
  49:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** __STATIC_INLINE uint32_t __get_CONTROL(void)
  50:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** {
  51:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   register uint32_t __regControl         __ASM("control");
  52:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   return(__regControl);
  53:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** }
  54:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
  55:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
  56:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** /** \brief  Set Control Register
  57:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
  58:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     This function writes the given value to the Control Register.
  59:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
  60:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     \param [in]    control  Control Register value to set
  61:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  */
  62:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** __STATIC_INLINE void __set_CONTROL(uint32_t control)
  63:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** {
  64:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   register uint32_t __regControl         __ASM("control");
  65:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   __regControl = control;
  66:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** }
  67:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
  68:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
  69:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** /** \brief  Get IPSR Register
  70:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
  71:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     This function returns the content of the IPSR Register.
  72:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
  73:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     \return               IPSR Register value
  74:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  */
  75:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** __STATIC_INLINE uint32_t __get_IPSR(void)
  76:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** {
  77:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   register uint32_t __regIPSR          __ASM("ipsr");
  78:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   return(__regIPSR);
  79:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** }
  80:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
  81:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
  82:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** /** \brief  Get APSR Register
  83:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
  84:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     This function returns the content of the APSR Register.
  85:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
  86:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     \return               APSR Register value
  87:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  */
  88:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** __STATIC_INLINE uint32_t __get_APSR(void)
  89:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** {
  90:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   register uint32_t __regAPSR          __ASM("apsr");
  91:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   return(__regAPSR);
  92:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** }
  93:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
  94:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
  95:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** /** \brief  Get xPSR Register
  96:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
  97:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     This function returns the content of the xPSR Register.
  98:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
  99:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     \return               xPSR Register value
 100:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  */
 101:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** __STATIC_INLINE uint32_t __get_xPSR(void)
 102:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** {
 103:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   register uint32_t __regXPSR          __ASM("xpsr");
 104:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   return(__regXPSR);
 105:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** }
 106:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 107:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 108:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** /** \brief  Get Process Stack Pointer
 109:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 110:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     This function returns the current value of the Process Stack Pointer (PSP).
 111:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 112:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     \return               PSP Register value
 113:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  */
 114:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** __STATIC_INLINE uint32_t __get_PSP(void)
 115:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** {
 116:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   register uint32_t __regProcessStackPointer  __ASM("psp");
 117:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   return(__regProcessStackPointer);
 118:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** }
 119:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 120:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 121:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** /** \brief  Set Process Stack Pointer
 122:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 123:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     This function assigns the given value to the Process Stack Pointer (PSP).
 124:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 125:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     \param [in]    topOfProcStack  Process Stack Pointer value to set
 126:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  */
 127:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
 128:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** {
 129:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   register uint32_t __regProcessStackPointer  __ASM("psp");
 130:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   __regProcessStackPointer = topOfProcStack;
 131:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** }
 132:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 133:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 134:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** /** \brief  Get Main Stack Pointer
 135:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 136:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     This function returns the current value of the Main Stack Pointer (MSP).
 137:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 138:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     \return               MSP Register value
 139:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  */
 140:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** __STATIC_INLINE uint32_t __get_MSP(void)
 141:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** {
 142:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   register uint32_t __regMainStackPointer     __ASM("msp");
 143:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   return(__regMainStackPointer);
 144:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** }
 145:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 146:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 147:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** /** \brief  Set Main Stack Pointer
 148:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 149:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     This function assigns the given value to the Main Stack Pointer (MSP).
 150:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 151:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     \param [in]    topOfMainStack  Main Stack Pointer value to set
 152:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  */
 153:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
 154:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** {
 155:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   register uint32_t __regMainStackPointer     __ASM("msp");
 156:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   __regMainStackPointer = topOfMainStack;
 157:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** }
 158:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 159:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 160:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** /** \brief  Get Priority Mask
 161:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 162:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     This function returns the current state of the priority mask bit from the Priority Mask Registe
 163:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 164:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     \return               Priority Mask value
 165:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  */
 166:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** __STATIC_INLINE uint32_t __get_PRIMASK(void)
 167:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** {
 168:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   register uint32_t __regPriMask         __ASM("primask");
 169:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   return(__regPriMask);
 170:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** }
 171:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 172:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 173:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** /** \brief  Set Priority Mask
 174:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 175:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     This function assigns the given value to the Priority Mask Register.
 176:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 177:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     \param [in]    priMask  Priority Mask
 178:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  */
 179:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
 180:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** {
 181:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   register uint32_t __regPriMask         __ASM("primask");
 182:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   __regPriMask = (priMask);
 183:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** }
 184:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  
 185:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 186:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** #if       (__CORTEX_M >= 0x03)
 187:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 188:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** /** \brief  Enable FIQ
 189:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 190:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     This function enables FIQ interrupts by clearing the F-bit in the CPSR.
 191:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     Can only be executed in Privileged modes.
 192:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  */
 193:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** #define __enable_fault_irq                __enable_fiq
 194:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 195:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 196:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** /** \brief  Disable FIQ
 197:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 198:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     This function disables FIQ interrupts by setting the F-bit in the CPSR.
 199:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     Can only be executed in Privileged modes.
 200:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  */
 201:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** #define __disable_fault_irq               __disable_fiq
 202:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 203:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 204:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** /** \brief  Get Base Priority
 205:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 206:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     This function returns the current value of the Base Priority register.
 207:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 208:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     \return               Base Priority register value
 209:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  */
 210:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** __STATIC_INLINE uint32_t  __get_BASEPRI(void)
 211:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** {
 212:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   register uint32_t __regBasePri         __ASM("basepri");
 213:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   return(__regBasePri);
 214:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** }
 215:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 216:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 217:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** /** \brief  Set Base Priority
 218:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 219:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     This function assigns the given value to the Base Priority register.
 220:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 221:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     \param [in]    basePri  Base Priority value to set
 222:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  */
 223:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** __STATIC_INLINE void __set_BASEPRI(uint32_t basePri)
 224:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** {
 225:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   register uint32_t __regBasePri         __ASM("basepri");
 226:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   __regBasePri = (basePri & 0xff);
 227:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** }
 228:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  
 229:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 230:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** /** \brief  Get Fault Mask
 231:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 232:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     This function returns the current value of the Fault Mask register.
 233:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 234:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     \return               Fault Mask register value
 235:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  */
 236:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** __STATIC_INLINE uint32_t __get_FAULTMASK(void)
 237:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** {
 238:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   register uint32_t __regFaultMask       __ASM("faultmask");
 239:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   return(__regFaultMask);
 240:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** }
 241:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 242:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 243:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** /** \brief  Set Fault Mask
 244:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 245:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     This function assigns the given value to the Fault Mask register.
 246:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 247:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     \param [in]    faultMask  Fault Mask value to set
 248:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  */
 249:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** __STATIC_INLINE void __set_FAULTMASK(uint32_t faultMask)
 250:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** {
 251:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   register uint32_t __regFaultMask       __ASM("faultmask");
 252:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   __regFaultMask = (faultMask & (uint32_t)1);
 253:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** }
 254:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 255:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** #endif /* (__CORTEX_M >= 0x03) */
 256:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 257:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 258:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** #if       (__CORTEX_M == 0x04)
 259:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 260:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** /** \brief  Get FPSCR
 261:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 262:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     This function returns the current value of the Floating Point Status/Control register.
 263:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 264:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     \return               Floating Point Status/Control register value
 265:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  */
 266:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** __STATIC_INLINE uint32_t __get_FPSCR(void)
 267:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** {
 268:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
 269:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   register uint32_t __regfpscr         __ASM("fpscr");
 270:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   return(__regfpscr);
 271:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** #else
 272:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****    return(0);
 273:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** #endif
 274:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** }
 275:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 276:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 277:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** /** \brief  Set FPSCR
 278:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 279:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     This function assigns the given value to the Floating Point Status/Control register.
 280:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 281:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     \param [in]    fpscr  Floating Point Status/Control value to set
 282:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  */
 283:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** __STATIC_INLINE void __set_FPSCR(uint32_t fpscr)
 284:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** {
 285:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
 286:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   register uint32_t __regfpscr         __ASM("fpscr");
 287:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   __regfpscr = (fpscr);
 288:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** #endif
 289:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** }
 290:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 291:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** #endif /* (__CORTEX_M == 0x04) */
 292:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 293:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 294:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** #elif defined ( __ICCARM__ ) /*------------------ ICC Compiler -------------------*/
 295:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** /* IAR iccarm specific functions */
 296:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 297:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** #include <cmsis_iar.h>
 298:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 299:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 300:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** #elif defined ( __TMS470__ ) /*---------------- TI CCS Compiler ------------------*/
 301:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** /* TI CCS specific functions */
 302:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 303:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** #include <cmsis_ccs.h>
 304:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 305:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 306:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** #elif defined ( __GNUC__ ) /*------------------ GNU Compiler ---------------------*/
 307:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** /* GNU gcc specific functions */
 308:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 309:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** /** \brief  Enable IRQ Interrupts
 310:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 311:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   This function enables IRQ interrupts by clearing the I-bit in the CPSR.
 312:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   Can only be executed in Privileged modes.
 313:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  */
 314:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
 315:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** {
 316:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   __ASM volatile ("cpsie i");
 317:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** }
 318:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 319:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 320:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** /** \brief  Disable IRQ Interrupts
 321:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 322:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   This function disables IRQ interrupts by setting the I-bit in the CPSR.
 323:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   Can only be executed in Privileged modes.
 324:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  */
 325:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
 326:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** {
 327:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   __ASM volatile ("cpsid i");
 328:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** }
 329:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 330:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 331:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** /** \brief  Get Control Register
 332:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 333:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     This function returns the content of the Control Register.
 334:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 335:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     \return               Control Register value
 336:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  */
 337:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_CONTROL(void)
 338:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** {
 339:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   uint32_t result;
 340:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 341:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
 342:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   return(result);
 343:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** }
 344:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 345:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 346:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** /** \brief  Set Control Register
 347:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 348:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     This function writes the given value to the Control Register.
 349:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 350:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     \param [in]    control  Control Register value to set
 351:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  */
 352:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_CONTROL(uint32_t control)
 353:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** {
 354:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) );
 355:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** }
 356:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 357:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 358:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** /** \brief  Get IPSR Register
 359:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 360:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     This function returns the content of the IPSR Register.
 361:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 362:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     \return               IPSR Register value
 363:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  */
 364:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
 365:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** {
 366:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   uint32_t result;
 367:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 368:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 369:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   return(result);
 370:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** }
 371:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 372:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 373:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** /** \brief  Get APSR Register
 374:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 375:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     This function returns the content of the APSR Register.
 376:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 377:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     \return               APSR Register value
 378:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  */
 379:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_APSR(void)
 380:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** {
 381:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   uint32_t result;
 382:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 383:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 384:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   return(result);
 385:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** }
 386:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 387:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 388:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** /** \brief  Get xPSR Register
 389:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 390:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     This function returns the content of the xPSR Register.
 391:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 392:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     \return               xPSR Register value
 393:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  */
 394:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_xPSR(void)
 395:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** {
 396:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   uint32_t result;
 397:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 398:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 399:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   return(result);
 400:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** }
 401:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 402:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 403:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** /** \brief  Get Process Stack Pointer
 404:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 405:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     This function returns the current value of the Process Stack Pointer (PSP).
 406:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 407:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     \return               PSP Register value
 408:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  */
 409:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
 410:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** {
 411:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   register uint32_t result;
 412:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 413:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 414:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   return(result);
 415:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** }
 416:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  
 417:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 418:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** /** \brief  Set Process Stack Pointer
 419:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 420:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     This function assigns the given value to the Process Stack Pointer (PSP).
 421:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 422:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     \param [in]    topOfProcStack  Process Stack Pointer value to set
 423:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  */
 424:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
 425:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** {
 426:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) );
 427:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** }
 428:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 429:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 430:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** /** \brief  Get Main Stack Pointer
 431:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 432:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     This function returns the current value of the Main Stack Pointer (MSP).
 433:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 434:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     \return               MSP Register value
 435:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  */
 436:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_MSP(void)
 437:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** {
 438:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   register uint32_t result;
 439:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 440:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   __ASM volatile ("MRS %0, msp\n" : "=r" (result) );
 441:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   return(result);
 442:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** }
 443:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  
 444:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 445:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** /** \brief  Set Main Stack Pointer
 446:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 447:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     This function assigns the given value to the Main Stack Pointer (MSP).
 448:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 449:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     \param [in]    topOfMainStack  Main Stack Pointer value to set
 450:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  */
 451:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
 452:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** {
 453:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   __ASM volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) );
 454:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** }
 455:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 456:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 457:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** /** \brief  Get Priority Mask
 458:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 459:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     This function returns the current state of the priority mask bit from the Priority Mask Registe
 460:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 461:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****     \return               Priority Mask value
 462:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****  */
 463:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
 464:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** {
 465:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   uint32_t result;
 466:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** 
 467:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) );
  54              	 .loc 2 467 0
  55              	 .syntax unified
  56              	
  57 0006 EFF31083 	 MRS r3,primask
  58              	
  59              	 .thumb
  60              	 .syntax unified
  61 000a 3B60     	 str r3,[r7]
 468:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h ****   return(result);
  62              	 .loc 2 468 0
  63 000c 3B68     	 ldr r3,[r7]
  64              	.LBE25:
  65              	.LBE24:
 146:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** 	irqflags_t flags = cpu_irq_is_enabled();
  66              	 .loc 1 146 0
  67 000e 002B     	 cmp r3,#0
  68 0010 0CBF     	 ite eq
  69 0012 0123     	 moveq r3,#1
  70 0014 0023     	 movne r3,#0
  71 0016 DBB2     	 uxtb r3,r3
  72 0018 7B60     	 str r3,[r7,#4]
  73              	.LBB26:
  74              	.LBB27:
 327:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** }
  75              	 .loc 2 327 0
  76              	 .syntax unified
  77              	
  78 001a 72B6     	 cpsid i
  79              	
  80              	 .thumb
  81              	 .syntax unified
  82              	.LBE27:
  83              	.LBE26:
  84              	.LBB28:
  85              	.LBB29:
  86              	 .file 3 "../../../platform/thirdparty/CMSIS/include/core_cmInstr.h"
   1:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /**************************************************************************//**
   2:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  * @file     core_cmInstr.h
   3:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  * @brief    CMSIS Cortex-M Core Instruction Access Header File
   4:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  * @version  V3.00
   5:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  * @date     07. February 2012
   6:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  *
   7:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  * @note
   8:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  * Copyright (C) 2009-2012 ARM Limited. All rights reserved.
   9:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  *
  10:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  * @par
  11:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  * ARM Limited (ARM) is supplying this software for use with Cortex-M
  12:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  * processor based microcontrollers.  This file can be freely distributed
  13:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  * within development tools that are supporting such ARM based processors.
  14:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  *
  15:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  * @par
  16:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
  17:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
  18:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
  19:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  * ARM SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR
  20:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
  21:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  *
  22:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  ******************************************************************************/
  23:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
  24:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** #ifndef __CORE_CMINSTR_H
  25:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** #define __CORE_CMINSTR_H
  26:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
  27:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
  28:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /* ##########################  Core Instruction Access  ######################### */
  29:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
  30:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****   Access to dedicated instructions
  31:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****   @{
  32:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** */
  33:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
  34:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** #if   defined ( __CC_ARM ) /*------------------RealView Compiler -----------------*/
  35:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /* ARM armcc specific functions */
  36:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
  37:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** #if (__ARMCC_VERSION < 400677)
  38:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****   #error "Please use ARM Compiler Toolchain V4.0.677 or later!"
  39:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** #endif
  40:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
  41:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
  42:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /** \brief  No Operation
  43:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
  44:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     No Operation does nothing. This instruction can be used for code alignment purposes.
  45:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  */
  46:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** #define __NOP                             __nop
  47:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
  48:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
  49:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /** \brief  Wait For Interrupt
  50:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
  51:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     Wait For Interrupt is a hint instruction that suspends execution
  52:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     until one of a number of events occurs.
  53:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  */
  54:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** #define __WFI                             __wfi
  55:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
  56:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
  57:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /** \brief  Wait For Event
  58:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
  59:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     Wait For Event is a hint instruction that permits the processor to enter
  60:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     a low-power state until one of a number of events occurs.
  61:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  */
  62:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** #define __WFE                             __wfe
  63:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
  64:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
  65:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /** \brief  Send Event
  66:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
  67:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     Send Event is a hint instruction. It causes an event to be signaled to the CPU.
  68:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  */
  69:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** #define __SEV                             __sev
  70:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
  71:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
  72:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /** \brief  Instruction Synchronization Barrier
  73:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
  74:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     Instruction Synchronization Barrier flushes the pipeline in the processor,
  75:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     so that all instructions following the ISB are fetched from cache or
  76:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     memory, after the instruction has been completed.
  77:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  */
  78:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** #define __ISB()                           __isb(0xF)
  79:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
  80:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
  81:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /** \brief  Data Synchronization Barrier
  82:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
  83:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     This function acts as a special kind of Data Memory Barrier.
  84:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     It completes when all explicit memory accesses before this instruction complete.
  85:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  */
  86:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** #define __DSB()                           __dsb(0xF)
  87:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
  88:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
  89:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /** \brief  Data Memory Barrier
  90:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
  91:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     This function ensures the apparent order of the explicit memory operations before
  92:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     and after the instruction, without ensuring their completion.
  93:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  */
  94:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** #define __DMB()                           __dmb(0xF)
  95:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
  96:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
  97:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /** \brief  Reverse byte order (32 bit)
  98:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
  99:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     This function reverses the byte order in integer value.
 100:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 101:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \param [in]    value  Value to reverse
 102:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \return               Reversed value
 103:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  */
 104:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** #define __REV                             __rev
 105:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 106:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 107:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /** \brief  Reverse byte order (16 bit)
 108:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 109:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     This function reverses the byte order in two unsigned short values.
 110:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 111:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \param [in]    value  Value to reverse
 112:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \return               Reversed value
 113:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  */
 114:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** __attribute__((section(".rev16_text"))) __STATIC_INLINE __ASM uint32_t __REV16(uint32_t value)
 115:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** {
 116:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****   rev16 r0, r0
 117:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****   bx lr
 118:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** }
 119:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 120:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 121:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /** \brief  Reverse byte order in signed short value
 122:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 123:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     This function reverses the byte order in a signed short value with sign extension to integer.
 124:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 125:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \param [in]    value  Value to reverse
 126:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \return               Reversed value
 127:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  */
 128:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** __attribute__((section(".revsh_text"))) __STATIC_INLINE __ASM int32_t __REVSH(int32_t value)
 129:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** {
 130:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****   revsh r0, r0
 131:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****   bx lr
 132:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** }
 133:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 134:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 135:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /** \brief  Rotate Right in unsigned value (32 bit)
 136:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 137:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     This function Rotate Right (immediate) provides the value of the contents of a register rotated
 138:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 139:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \param [in]    value  Value to rotate
 140:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \param [in]    value  Number of Bits to rotate
 141:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \return               Rotated value
 142:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  */
 143:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** #define __ROR                             __ror
 144:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 145:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 146:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** #if       (__CORTEX_M >= 0x03)
 147:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 148:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /** \brief  Reverse bit order of value
 149:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 150:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     This function reverses the bit order of the given value.
 151:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 152:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \param [in]    value  Value to reverse
 153:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \return               Reversed value
 154:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  */
 155:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** #define __RBIT                            __rbit
 156:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 157:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 158:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /** \brief  LDR Exclusive (8 bit)
 159:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 160:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     This function performs a exclusive LDR command for 8 bit value.
 161:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 162:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 163:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \return             value of type uint8_t at (*ptr)
 164:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  */
 165:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** #define __LDREXB(ptr)                     ((uint8_t ) __ldrex(ptr))
 166:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 167:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 168:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /** \brief  LDR Exclusive (16 bit)
 169:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 170:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     This function performs a exclusive LDR command for 16 bit values.
 171:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 172:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 173:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \return        value of type uint16_t at (*ptr)
 174:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  */
 175:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** #define __LDREXH(ptr)                     ((uint16_t) __ldrex(ptr))
 176:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 177:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 178:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /** \brief  LDR Exclusive (32 bit)
 179:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 180:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     This function performs a exclusive LDR command for 32 bit values.
 181:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 182:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 183:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \return        value of type uint32_t at (*ptr)
 184:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  */
 185:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** #define __LDREXW(ptr)                     ((uint32_t ) __ldrex(ptr))
 186:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 187:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 188:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /** \brief  STR Exclusive (8 bit)
 189:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 190:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     This function performs a exclusive STR command for 8 bit values.
 191:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 192:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \param [in]  value  Value to store
 193:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 194:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \return          0  Function succeeded
 195:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \return          1  Function failed
 196:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  */
 197:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** #define __STREXB(value, ptr)              __strex(value, ptr)
 198:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 199:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 200:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /** \brief  STR Exclusive (16 bit)
 201:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 202:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     This function performs a exclusive STR command for 16 bit values.
 203:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 204:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \param [in]  value  Value to store
 205:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 206:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \return          0  Function succeeded
 207:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \return          1  Function failed
 208:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  */
 209:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** #define __STREXH(value, ptr)              __strex(value, ptr)
 210:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 211:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 212:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /** \brief  STR Exclusive (32 bit)
 213:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 214:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     This function performs a exclusive STR command for 32 bit values.
 215:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 216:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \param [in]  value  Value to store
 217:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 218:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \return          0  Function succeeded
 219:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \return          1  Function failed
 220:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  */
 221:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** #define __STREXW(value, ptr)              __strex(value, ptr)
 222:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 223:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 224:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /** \brief  Remove the exclusive lock
 225:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 226:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     This function removes the exclusive lock which is created by LDREX.
 227:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 228:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  */
 229:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** #define __CLREX                           __clrex
 230:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 231:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 232:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /** \brief  Signed Saturate
 233:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 234:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     This function saturates a signed value.
 235:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 236:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \param [in]  value  Value to be saturated
 237:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \param [in]    sat  Bit position to saturate to (1..32)
 238:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \return             Saturated value
 239:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  */
 240:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** #define __SSAT                            __ssat
 241:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 242:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 243:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /** \brief  Unsigned Saturate
 244:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 245:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     This function saturates an unsigned value.
 246:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 247:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \param [in]  value  Value to be saturated
 248:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \param [in]    sat  Bit position to saturate to (0..31)
 249:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \return             Saturated value
 250:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  */
 251:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** #define __USAT                            __usat
 252:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 253:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 254:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /** \brief  Count leading zeros
 255:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 256:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     This function counts the number of leading zeros of a data value.
 257:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 258:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \param [in]  value  Value to count the leading zeros
 259:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     \return             number of leading zeros in value
 260:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  */
 261:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** #define __CLZ                             __clz
 262:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 263:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** #endif /* (__CORTEX_M >= 0x03) */
 264:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 265:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 266:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 267:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** #elif defined ( __ICCARM__ ) /*------------------ ICC Compiler -------------------*/
 268:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /* IAR iccarm specific functions */
 269:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 270:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** #include <cmsis_iar.h>
 271:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 272:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 273:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** #elif defined ( __TMS470__ ) /*---------------- TI CCS Compiler ------------------*/
 274:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /* TI CCS specific functions */
 275:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 276:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** #include <cmsis_ccs.h>
 277:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 278:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 279:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** #elif defined ( __GNUC__ ) /*------------------ GNU Compiler ---------------------*/
 280:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /* GNU gcc specific functions */
 281:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 282:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /** \brief  No Operation
 283:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 284:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     No Operation does nothing. This instruction can be used for code alignment purposes.
 285:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  */
 286:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
 287:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** {
 288:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****   __ASM volatile ("nop");
 289:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** }
 290:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 291:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 292:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /** \brief  Wait For Interrupt
 293:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 294:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     Wait For Interrupt is a hint instruction that suspends execution
 295:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     until one of a number of events occurs.
 296:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  */
 297:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __WFI(void)
 298:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** {
 299:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****   __ASM volatile ("wfi");
 300:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** }
 301:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 302:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 303:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /** \brief  Wait For Event
 304:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 305:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     Wait For Event is a hint instruction that permits the processor to enter
 306:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     a low-power state until one of a number of events occurs.
 307:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  */
 308:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __WFE(void)
 309:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** {
 310:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****   __ASM volatile ("wfe");
 311:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** }
 312:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 313:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 314:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /** \brief  Send Event
 315:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 316:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 317:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  */
 318:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __SEV(void)
 319:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** {
 320:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****   __ASM volatile ("sev");
 321:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** }
 322:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 323:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 324:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /** \brief  Instruction Synchronization Barrier
 325:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 326:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     Instruction Synchronization Barrier flushes the pipeline in the processor,
 327:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     so that all instructions following the ISB are fetched from cache or
 328:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     memory, after the instruction has been completed.
 329:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  */
 330:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __ISB(void)
 331:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** {
 332:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****   __ASM volatile ("isb");
 333:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** }
 334:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 335:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 336:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /** \brief  Data Synchronization Barrier
 337:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 338:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     This function acts as a special kind of Data Memory Barrier.
 339:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     It completes when all explicit memory accesses before this instruction complete.
 340:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  */
 341:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
 342:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** {
 343:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****   __ASM volatile ("dsb");
 344:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** }
 345:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 346:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 347:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** /** \brief  Data Memory Barrier
 348:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** 
 349:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     This function ensures the apparent order of the explicit memory operations before
 350:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****     and after the instruction, without ensuring their completion.
 351:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****  */
 352:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
 353:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h **** {
 354:../../../platform/thirdparty/CMSIS/include/core_cmInstr.h ****   __ASM volatile ("dmb");
  87              	 .loc 3 354 0
  88              	 .syntax unified
  89              	
  90 001c BFF35F8F 	 dmb
  91              	
  92              	 .thumb
  93              	 .syntax unified
  94              	.LBE29:
  95              	.LBE28:
 147:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** 	cpu_irq_disable();
  96              	 .loc 1 147 0
  97 0020 044B     	 ldr r3,.L4
  98 0022 0022     	 movs r2,#0
  99 0024 1A70     	 strb r2,[r3]
 148:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** 	return flags;
 100              	 .loc 1 148 0
 101 0026 7B68     	 ldr r3,[r7,#4]
 149:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** }
 102              	 .loc 1 149 0
 103 0028 1846     	 mov r0,r3
 104 002a 0C37     	 adds r7,r7,#12
 105              	.LCFI3:
 106              	 .cfi_def_cfa_offset 4
 107 002c BD46     	 mov sp,r7
 108              	.LCFI4:
 109              	 .cfi_def_cfa_register 13
 110              	 
 111 002e 80BC     	 pop {r7}
 112              	.LCFI5:
 113              	 .cfi_restore 7
 114              	 .cfi_def_cfa_offset 0
 115 0030 7047     	 bx lr
 116              	.L5:
 117 0032 00BF     	 .align 2
 118              	.L4:
 119 0034 00000000 	 .word g_interrupt_enabled
 120              	 .cfi_endproc
 121              	.LFE112:
 123              	 .align 1
 124              	 .syntax unified
 125              	 .thumb
 126              	 .thumb_func
 127              	 .fpu softvfp
 129              	cpu_irq_is_enabled_flags:
 130              	.LFB113:
 150:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** 
 151:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
 152:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** {
 131              	 .loc 1 152 0
 132              	 .cfi_startproc
 133              	 
 134              	 
 135              	 
 136 0038 80B4     	 push {r7}
 137              	.LCFI6:
 138              	 .cfi_def_cfa_offset 4
 139              	 .cfi_offset 7,-4
 140 003a 83B0     	 sub sp,sp,#12
 141              	.LCFI7:
 142              	 .cfi_def_cfa_offset 16
 143 003c 00AF     	 add r7,sp,#0
 144              	.LCFI8:
 145              	 .cfi_def_cfa_register 7
 146 003e 7860     	 str r0,[r7,#4]
 153:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** 	return (flags);
 147              	 .loc 1 153 0
 148 0040 7B68     	 ldr r3,[r7,#4]
 149 0042 002B     	 cmp r3,#0
 150 0044 14BF     	 ite ne
 151 0046 0123     	 movne r3,#1
 152 0048 0023     	 moveq r3,#0
 153 004a DBB2     	 uxtb r3,r3
 154:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** }
 154              	 .loc 1 154 0
 155 004c 1846     	 mov r0,r3
 156 004e 0C37     	 adds r7,r7,#12
 157              	.LCFI9:
 158              	 .cfi_def_cfa_offset 4
 159 0050 BD46     	 mov sp,r7
 160              	.LCFI10:
 161              	 .cfi_def_cfa_register 13
 162              	 
 163 0052 80BC     	 pop {r7}
 164              	.LCFI11:
 165              	 .cfi_restore 7
 166              	 .cfi_def_cfa_offset 0
 167 0054 7047     	 bx lr
 168              	 .cfi_endproc
 169              	.LFE113:
 171              	 .align 1
 172              	 .syntax unified
 173              	 .thumb
 174              	 .thumb_func
 175              	 .fpu softvfp
 177              	cpu_irq_restore:
 178              	.LFB114:
 155:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** 
 156:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** static inline void cpu_irq_restore(irqflags_t flags)
 157:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** {
 179              	 .loc 1 157 0
 180              	 .cfi_startproc
 181              	 
 182              	 
 183 0056 80B5     	 push {r7,lr}
 184              	.LCFI12:
 185              	 .cfi_def_cfa_offset 8
 186              	 .cfi_offset 7,-8
 187              	 .cfi_offset 14,-4
 188 0058 82B0     	 sub sp,sp,#8
 189              	.LCFI13:
 190              	 .cfi_def_cfa_offset 16
 191 005a 00AF     	 add r7,sp,#0
 192              	.LCFI14:
 193              	 .cfi_def_cfa_register 7
 194 005c 7860     	 str r0,[r7,#4]
 158:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** 	if (cpu_irq_is_enabled_flags(flags))
 195              	 .loc 1 158 0
 196 005e 7868     	 ldr r0,[r7,#4]
 197 0060 FFF7EAFF 	 bl cpu_irq_is_enabled_flags
 198 0064 0346     	 mov r3,r0
 199 0066 002B     	 cmp r3,#0
 200 0068 05D0     	 beq .L10
 159:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** 		cpu_irq_enable();
 201              	 .loc 1 159 0
 202 006a 054B     	 ldr r3,.L11
 203 006c 0122     	 movs r2,#1
 204 006e 1A70     	 strb r2,[r3]
 205              	.LBB30:
 206              	.LBB31:
 207              	 .loc 3 354 0
 208              	 .syntax unified
 209              	
 210 0070 BFF35F8F 	 dmb
 211              	
 212              	 .thumb
 213              	 .syntax unified
 214              	.LBE31:
 215              	.LBE30:
 216              	.LBB32:
 217              	.LBB33:
 316:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** }
 218              	 .loc 2 316 0
 219              	 .syntax unified
 220              	
 221 0074 62B6     	 cpsie i
 222              	
 223              	 .thumb
 224              	 .syntax unified
 225              	.L10:
 226              	.LBE33:
 227              	.LBE32:
 160:../../../platform/common/utils/interrupt/interrupt_sam_nvic.h **** }
 228              	 .loc 1 160 0
 229 0076 00BF     	 nop
 230 0078 0837     	 adds r7,r7,#8
 231              	.LCFI15:
 232              	 .cfi_def_cfa_offset 8
 233 007a BD46     	 mov sp,r7
 234              	.LCFI16:
 235              	 .cfi_def_cfa_register 13
 236              	 
 237 007c 80BD     	 pop {r7,pc}
 238              	.L12:
 239 007e 00BF     	 .align 2
 240              	.L11:
 241 0080 00000000 	 .word g_interrupt_enabled
 242              	 .cfi_endproc
 243              	.LFE114:
 245              	 .align 1
 246              	 .syntax unified
 247              	 .thumb
 248              	 .thumb_func
 249              	 .fpu softvfp
 251              	sleepmgr_sleep:
 252              	.LFB123:
 253              	 .file 4 "../../../platform/common/services/sleepmgr/sam4l/sleepmgr.h"
   1:../../../platform/common/services/sleepmgr/sam4l/sleepmgr.h **** /**
   2:../../../platform/common/services/sleepmgr/sam4l/sleepmgr.h ****  * \file
   3:../../../platform/common/services/sleepmgr/sam4l/sleepmgr.h ****  *
   4:../../../platform/common/services/sleepmgr/sam4l/sleepmgr.h ****  * \brief Chip-specific sleep manager configuration
   5:../../../platform/common/services/sleepmgr/sam4l/sleepmgr.h ****  *
   6:../../../platform/common/services/sleepmgr/sam4l/sleepmgr.h ****  * Copyright (c) 2012 - 2013 Atmel Corporation. All rights reserved.
   7:../../../platform/common/services/sleepmgr/sam4l/sleepmgr.h ****  *
   8:../../../platform/common/services/sleepmgr/sam4l/sleepmgr.h ****  * \asf_license_start
   9:../../../platform/common/services/sleepmgr/sam4l/sleepmgr.h ****  *
  10:../../../platform/common/services/sleepmgr/sam4l/sleepmgr.h ****  * \page License
  11:../../../platform/common/services/sleepmgr/sam4l/sleepmgr.h ****  *
  12:../../../platform/common/services/sleepmgr/sam4l/sleepmgr.h ****  * Redistribution and use in source and binary forms, with or without
  13:../../../platform/common/services/sleepmgr/sam4l/sleepmgr.h ****  * modification, are permitted provided that the following conditions are met:
  14:../../../platform/common/services/sleepmgr/sam4l/sleepmgr.h ****  *
  15:../../../platform/common/services/sleepmgr/sam4l/sleepmgr.h ****  * 1. Redistributions of source code must retain the above copyright notice,
  16:../../../platform/common/services/sleepmgr/sam4l/sleepmgr.h ****  *    this list of conditions and the following disclaimer.
  17:../../../platform/common/services/sleepmgr/sam4l/sleepmgr.h ****  *
  18:../../../platform/common/services/sleepmgr/sam4l/sleepmgr.h ****  * 2. Redistributions in binary form must reproduce the above copyright notice,
  19:../../../platform/common/services/sleepmgr/sam4l/sleepmgr.h ****  *    this list of conditions and the following disclaimer in the documentation
  20:../../../platform/common/services/sleepmgr/sam4l/sleepmgr.h ****  *    and/or other materials provided with the distribution.
  21:../../../platform/common/services/sleepmgr/sam4l/sleepmgr.h ****  *
  22:../../../platform/common/services/sleepmgr/sam4l/sleepmgr.h ****  * 3. The name of Atmel may not be used to endorse or promote products derived
  23:../../../platform/common/services/sleepmgr/sam4l/sleepmgr.h ****  *    from this software without specific prior written permission.
  24:../../../platform/common/services/sleepmgr/sam4l/sleepmgr.h ****  *
  25:../../../platform/common/services/sleepmgr/sam4l/sleepmgr.h ****  * 4. This software may only be redistributed and used in connection with an
  26:../../../platform/common/services/sleepmgr/sam4l/sleepmgr.h ****  *    Atmel microcontroller product.
  27:../../../platform/common/services/sleepmgr/sam4l/sleepmgr.h ****  *
  28:../../../platform/common/services/sleepmgr/sam4l/sleepmgr.h ****  * THIS SOFTWARE IS PROVIDED BY ATMEL "AS IS" AND ANY EXPRESS OR IMPLIED
  29:../../../platform/common/services/sleepmgr/sam4l/sleepmgr.h ****  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
  30:../../../platform/common/services/sleepmgr/sam4l/sleepmgr.h ****  * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE
  31:../../../platform/common/services/sleepmgr/sam4l/sleepmgr.h ****  * EXPRESSLY AND SPECIFICALLY DISCLAIMED. IN NO EVENT SHALL ATMEL BE LIABLE FOR
  32:../../../platform/common/services/sleepmgr/sam4l/sleepmgr.h ****  * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  33:../../../platform/common/services/sleepmgr/sam4l/sleepmgr.h ****  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
  34:../../../platform/common/services/sleepmgr/sam4l/sleepmgr.h ****  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
  35:../../../platform/common/services/sleepmgr/sam4l/sleepmgr.h ****  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
  36:../../../platform/common/services/sleepmgr/sam4l/sleepmgr.h ****  * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
  37:../../../platform/common/services/sleepmgr/sam4l/sleepmgr.h ****  * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  38:../../../platform/common/services/sleepmgr/sam4l/sleepmgr.h ****  * POSSIBILITY OF SUCH DAMAGE.
  39:../../../platform/common/services/sleepmgr/sam4l/sleepmgr.h ****  *
  40:../../../platform/common/services/sleepmgr/sam4l/sleepmgr.h ****  * \asf_license_stop
  41:../../../platform/common/services/sleepmgr/sam4l/sleepmgr.h ****  *
  42:../../../platform/common/services/sleepmgr/sam4l/sleepmgr.h ****  */
  43:../../../platform/common/services/sleepmgr/sam4l/sleepmgr.h **** 
  44:../../../platform/common/services/sleepmgr/sam4l/sleepmgr.h **** #ifndef SAM_SLEEPMGR_INCLUDED
  45:../../../platform/common/services/sleepmgr/sam4l/sleepmgr.h **** #define SAM_SLEEPMGR_INCLUDED
  46:../../../platform/common/services/sleepmgr/sam4l/sleepmgr.h **** 
  47:../../../platform/common/services/sleepmgr/sam4l/sleepmgr.h **** #ifdef __cplusplus
  48:../../../platform/common/services/sleepmgr/sam4l/sleepmgr.h **** extern "C" {
  49:../../../platform/common/services/sleepmgr/sam4l/sleepmgr.h **** #endif
  50:../../../platform/common/services/sleepmgr/sam4l/sleepmgr.h **** 
  51:../../../platform/common/services/sleepmgr/sam4l/sleepmgr.h **** #include <compiler.h>
  52:../../../platform/common/services/sleepmgr/sam4l/sleepmgr.h **** #include <conf_sleepmgr.h>
  53:../../../platform/common/services/sleepmgr/sam4l/sleepmgr.h **** #include <interrupt.h>
  54:../../../platform/common/services/sleepmgr/sam4l/sleepmgr.h **** #include "bpm.h"
  55:../../../platform/common/services/sleepmgr/sam4l/sleepmgr.h **** 
  56:../../../platform/common/services/sleepmgr/sam4l/sleepmgr.h **** /**
  57:../../../platform/common/services/sleepmgr/sam4l/sleepmgr.h ****  * \weakgroup sleepmgr_group
  58:../../../platform/common/services/sleepmgr/sam4l/sleepmgr.h ****  * @{
  59:../../../platform/common/services/sleepmgr/sam4l/sleepmgr.h ****  */
  60:../../../platform/common/services/sleepmgr/sam4l/sleepmgr.h **** 
  61:../../../platform/common/services/sleepmgr/sam4l/sleepmgr.h **** enum sleepmgr_mode {
  62:../../../platform/common/services/sleepmgr/sam4l/sleepmgr.h **** 	/** Active mode. */
  63:../../../platform/common/services/sleepmgr/sam4l/sleepmgr.h **** 	SLEEPMGR_ACTIVE = 0,
  64:../../../platform/common/services/sleepmgr/sam4l/sleepmgr.h **** 
  65:../../../platform/common/services/sleepmgr/sam4l/sleepmgr.h **** 	/**
  66:../../../platform/common/services/sleepmgr/sam4l/sleepmgr.h **** 	 *  Sleep mode.
  67:../../../platform/common/services/sleepmgr/sam4l/sleepmgr.h **** 	 *  Potential Wake Up sources: fast startup events and interrupt.
  68:../../../platform/common/services/sleepmgr/sam4l/sleepmgr.h **** 	 */
  69:../../../platform/common/services/sleepmgr/sam4l/sleepmgr.h **** 	SLEEPMGR_SLEEP_0,
  70:../../../platform/common/services/sleepmgr/sam4l/sleepmgr.h **** 	SLEEPMGR_SLEEP_1,
  71:../../../platform/common/services/sleepmgr/sam4l/sleepmgr.h **** 	SLEEPMGR_SLEEP_2,
  72:../../../platform/common/services/sleepmgr/sam4l/sleepmgr.h **** 	SLEEPMGR_SLEEP_3,
  73:../../../platform/common/services/sleepmgr/sam4l/sleepmgr.h **** 
  74:../../../platform/common/services/sleepmgr/sam4l/sleepmgr.h **** 	/**
  75:../../../platform/common/services/sleepmgr/sam4l/sleepmgr.h **** 	 *  Wait mode.
  76:../../../platform/common/services/sleepmgr/sam4l/sleepmgr.h **** 	 *  Potential Wake Up sources: fast startup events
  77:../../../platform/common/services/sleepmgr/sam4l/sleepmgr.h **** 	 */
  78:../../../platform/common/services/sleepmgr/sam4l/sleepmgr.h **** 	SLEEPMGR_WAIT,
  79:../../../platform/common/services/sleepmgr/sam4l/sleepmgr.h **** 
  80:../../../platform/common/services/sleepmgr/sam4l/sleepmgr.h **** 	/**
  81:../../../platform/common/services/sleepmgr/sam4l/sleepmgr.h **** 	 *  Retention mode.
  82:../../../platform/common/services/sleepmgr/sam4l/sleepmgr.h **** 	 *  Potential Wake Up sources: fast startup events
  83:../../../platform/common/services/sleepmgr/sam4l/sleepmgr.h **** 	 */
  84:../../../platform/common/services/sleepmgr/sam4l/sleepmgr.h **** 	SLEEPMGR_RET,
  85:../../../platform/common/services/sleepmgr/sam4l/sleepmgr.h **** 
  86:../../../platform/common/services/sleepmgr/sam4l/sleepmgr.h **** 	/** Backup mode. Potential Wake Up sources: WKUPs, SM, RTT, RTC. */
  87:../../../platform/common/services/sleepmgr/sam4l/sleepmgr.h **** 	SLEEPMGR_BACKUP,
  88:../../../platform/common/services/sleepmgr/sam4l/sleepmgr.h **** 
  89:../../../platform/common/services/sleepmgr/sam4l/sleepmgr.h **** 	SLEEPMGR_NR_OF_MODES,
  90:../../../platform/common/services/sleepmgr/sam4l/sleepmgr.h **** };
  91:../../../platform/common/services/sleepmgr/sam4l/sleepmgr.h **** 
  92:../../../platform/common/services/sleepmgr/sam4l/sleepmgr.h **** /**
  93:../../../platform/common/services/sleepmgr/sam4l/sleepmgr.h ****  * \internal
  94:../../../platform/common/services/sleepmgr/sam4l/sleepmgr.h ****  * \name Internal arrays
  95:../../../platform/common/services/sleepmgr/sam4l/sleepmgr.h ****  * @{
  96:../../../platform/common/services/sleepmgr/sam4l/sleepmgr.h ****  */
  97:../../../platform/common/services/sleepmgr/sam4l/sleepmgr.h **** #if defined(CONFIG_SLEEPMGR_ENABLE) || defined(__DOXYGEN__)
  98:../../../platform/common/services/sleepmgr/sam4l/sleepmgr.h **** /** Sleep mode lock counters */
  99:../../../platform/common/services/sleepmgr/sam4l/sleepmgr.h **** extern uint8_t sleepmgr_locks[];
 100:../../../platform/common/services/sleepmgr/sam4l/sleepmgr.h **** #endif /* CONFIG_SLEEPMGR_ENABLE */
 101:../../../platform/common/services/sleepmgr/sam4l/sleepmgr.h **** /** @} */
 102:../../../platform/common/services/sleepmgr/sam4l/sleepmgr.h **** 
 103:../../../platform/common/services/sleepmgr/sam4l/sleepmgr.h **** static inline void sleepmgr_sleep(const enum sleepmgr_mode sleep_mode)
 104:../../../platform/common/services/sleepmgr/sam4l/sleepmgr.h **** {
 254              	 .loc 4 104 0
 255              	 .cfi_startproc
 256              	 
 257              	 
 258 0084 80B5     	 push {r7,lr}
 259              	.LCFI17:
 260              	 .cfi_def_cfa_offset 8
 261              	 .cfi_offset 7,-8
 262              	 .cfi_offset 14,-4
 263 0086 82B0     	 sub sp,sp,#8
 264              	.LCFI18:
 265              	 .cfi_def_cfa_offset 16
 266 0088 00AF     	 add r7,sp,#0
 267              	.LCFI19:
 268              	 .cfi_def_cfa_register 7
 269 008a 0346     	 mov r3,r0
 270 008c FB71     	 strb r3,[r7,#7]
 271              	.LBB34:
 272              	.LBB35:
 327:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** }
 273              	 .loc 2 327 0
 274              	 .syntax unified
 275              	
 276 008e 72B6     	 cpsid i
 277              	
 278              	 .thumb
 279              	 .syntax unified
 280              	.LBE35:
 281              	.LBE34:
 282              	.LBB36:
 283              	.LBB37:
 284              	 .loc 3 354 0
 285              	 .syntax unified
 286              	
 287 0090 BFF35F8F 	 dmb
 288              	
 289              	 .thumb
 290              	 .syntax unified
 291              	.LBE37:
 292              	.LBE36:
 105:../../../platform/common/services/sleepmgr/sam4l/sleepmgr.h **** 	Assert(sleep_mode != SLEEPMGR_ACTIVE);
 106:../../../platform/common/services/sleepmgr/sam4l/sleepmgr.h **** #ifdef CONFIG_SLEEPMGR_ENABLE
 107:../../../platform/common/services/sleepmgr/sam4l/sleepmgr.h **** 	cpu_irq_disable();
 293              	 .loc 4 107 0
 294 0094 054B     	 ldr r3,.L14
 295 0096 0022     	 movs r2,#0
 296 0098 1A70     	 strb r2,[r3]
 108:../../../platform/common/services/sleepmgr/sam4l/sleepmgr.h **** 
 109:../../../platform/common/services/sleepmgr/sam4l/sleepmgr.h **** 	/* Enter the sleep mode. */
 110:../../../platform/common/services/sleepmgr/sam4l/sleepmgr.h **** 	bpm_sleep(BPM, sleep_mode);
 297              	 .loc 4 110 0
 298 009a FB79     	 ldrb r3,[r7,#7]
 299 009c 1946     	 mov r1,r3
 300 009e 0448     	 ldr r0,.L14+4
 301 00a0 044B     	 ldr r3,.L14+8
 302 00a2 9847     	 blx r3
 303              	.LVL0:
 111:../../../platform/common/services/sleepmgr/sam4l/sleepmgr.h **** #else
 112:../../../platform/common/services/sleepmgr/sam4l/sleepmgr.h **** 	UNUSED(sleep_mode);
 113:../../../platform/common/services/sleepmgr/sam4l/sleepmgr.h **** 	cpu_irq_enable();
 114:../../../platform/common/services/sleepmgr/sam4l/sleepmgr.h **** #endif /* CONFIG_SLEEPMGR_ENABLE */
 115:../../../platform/common/services/sleepmgr/sam4l/sleepmgr.h **** }
 304              	 .loc 4 115 0
 305 00a4 00BF     	 nop
 306 00a6 0837     	 adds r7,r7,#8
 307              	.LCFI20:
 308              	 .cfi_def_cfa_offset 8
 309 00a8 BD46     	 mov sp,r7
 310              	.LCFI21:
 311              	 .cfi_def_cfa_register 13
 312              	 
 313 00aa 80BD     	 pop {r7,pc}
 314              	.L15:
 315              	 .align 2
 316              	.L14:
 317 00ac 00000000 	 .word g_interrupt_enabled
 318 00b0 00000F40 	 .word 1074724864
 319 00b4 00000000 	 .word bpm_sleep
 320              	 .cfi_endproc
 321              	.LFE123:
 323              	 .align 1
 324              	 .syntax unified
 325              	 .thumb
 326              	 .thumb_func
 327              	 .fpu softvfp
 329              	sleepmgr_init:
 330              	.LFB124:
 331              	 .file 5 "../../../platform/common/services/sleepmgr/sleepmgr.h"
   1:../../../platform/common/services/sleepmgr/sleepmgr.h **** /**
   2:../../../platform/common/services/sleepmgr/sleepmgr.h ****  * \file
   3:../../../platform/common/services/sleepmgr/sleepmgr.h ****  *
   4:../../../platform/common/services/sleepmgr/sleepmgr.h ****  * \brief Sleep manager
   5:../../../platform/common/services/sleepmgr/sleepmgr.h ****  *
   6:../../../platform/common/services/sleepmgr/sleepmgr.h ****  * Copyright (c) 2010 - 2013 Atmel Corporation. All rights reserved.
   7:../../../platform/common/services/sleepmgr/sleepmgr.h ****  *
   8:../../../platform/common/services/sleepmgr/sleepmgr.h ****  * \asf_license_start
   9:../../../platform/common/services/sleepmgr/sleepmgr.h ****  *
  10:../../../platform/common/services/sleepmgr/sleepmgr.h ****  * \page License
  11:../../../platform/common/services/sleepmgr/sleepmgr.h ****  *
  12:../../../platform/common/services/sleepmgr/sleepmgr.h ****  * Redistribution and use in source and binary forms, with or without
  13:../../../platform/common/services/sleepmgr/sleepmgr.h ****  * modification, are permitted provided that the following conditions are met:
  14:../../../platform/common/services/sleepmgr/sleepmgr.h ****  *
  15:../../../platform/common/services/sleepmgr/sleepmgr.h ****  * 1. Redistributions of source code must retain the above copyright notice,
  16:../../../platform/common/services/sleepmgr/sleepmgr.h ****  *    this list of conditions and the following disclaimer.
  17:../../../platform/common/services/sleepmgr/sleepmgr.h ****  *
  18:../../../platform/common/services/sleepmgr/sleepmgr.h ****  * 2. Redistributions in binary form must reproduce the above copyright notice,
  19:../../../platform/common/services/sleepmgr/sleepmgr.h ****  *    this list of conditions and the following disclaimer in the documentation
  20:../../../platform/common/services/sleepmgr/sleepmgr.h ****  *    and/or other materials provided with the distribution.
  21:../../../platform/common/services/sleepmgr/sleepmgr.h ****  *
  22:../../../platform/common/services/sleepmgr/sleepmgr.h ****  * 3. The name of Atmel may not be used to endorse or promote products derived
  23:../../../platform/common/services/sleepmgr/sleepmgr.h ****  *    from this software without specific prior written permission.
  24:../../../platform/common/services/sleepmgr/sleepmgr.h ****  *
  25:../../../platform/common/services/sleepmgr/sleepmgr.h ****  * 4. This software may only be redistributed and used in connection with an
  26:../../../platform/common/services/sleepmgr/sleepmgr.h ****  *    Atmel microcontroller product.
  27:../../../platform/common/services/sleepmgr/sleepmgr.h ****  *
  28:../../../platform/common/services/sleepmgr/sleepmgr.h ****  * THIS SOFTWARE IS PROVIDED BY ATMEL "AS IS" AND ANY EXPRESS OR IMPLIED
  29:../../../platform/common/services/sleepmgr/sleepmgr.h ****  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
  30:../../../platform/common/services/sleepmgr/sleepmgr.h ****  * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE
  31:../../../platform/common/services/sleepmgr/sleepmgr.h ****  * EXPRESSLY AND SPECIFICALLY DISCLAIMED. IN NO EVENT SHALL ATMEL BE LIABLE FOR
  32:../../../platform/common/services/sleepmgr/sleepmgr.h ****  * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  33:../../../platform/common/services/sleepmgr/sleepmgr.h ****  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
  34:../../../platform/common/services/sleepmgr/sleepmgr.h ****  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
  35:../../../platform/common/services/sleepmgr/sleepmgr.h ****  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
  36:../../../platform/common/services/sleepmgr/sleepmgr.h ****  * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
  37:../../../platform/common/services/sleepmgr/sleepmgr.h ****  * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  38:../../../platform/common/services/sleepmgr/sleepmgr.h ****  * POSSIBILITY OF SUCH DAMAGE.
  39:../../../platform/common/services/sleepmgr/sleepmgr.h ****  *
  40:../../../platform/common/services/sleepmgr/sleepmgr.h ****  * \asf_license_stop
  41:../../../platform/common/services/sleepmgr/sleepmgr.h ****  *
  42:../../../platform/common/services/sleepmgr/sleepmgr.h ****  */
  43:../../../platform/common/services/sleepmgr/sleepmgr.h **** #ifndef SLEEPMGR_H
  44:../../../platform/common/services/sleepmgr/sleepmgr.h **** #define SLEEPMGR_H
  45:../../../platform/common/services/sleepmgr/sleepmgr.h **** 
  46:../../../platform/common/services/sleepmgr/sleepmgr.h **** #include <compiler.h>
  47:../../../platform/common/services/sleepmgr/sleepmgr.h **** #include <parts.h>
  48:../../../platform/common/services/sleepmgr/sleepmgr.h **** 
  49:../../../platform/common/services/sleepmgr/sleepmgr.h **** #if (SAM3S || SAM3U || SAM3N || SAM3XA || SAM4S || SAM4E)
  50:../../../platform/common/services/sleepmgr/sleepmgr.h **** # include "sam/sleepmgr.h"
  51:../../../platform/common/services/sleepmgr/sleepmgr.h **** #elif XMEGA
  52:../../../platform/common/services/sleepmgr/sleepmgr.h **** # include "xmega/sleepmgr.h"
  53:../../../platform/common/services/sleepmgr/sleepmgr.h **** #elif UC3
  54:../../../platform/common/services/sleepmgr/sleepmgr.h **** # include "uc3/sleepmgr.h"
  55:../../../platform/common/services/sleepmgr/sleepmgr.h **** #elif SAM4L
  56:../../../platform/common/services/sleepmgr/sleepmgr.h **** # include "sam4l/sleepmgr.h"
  57:../../../platform/common/services/sleepmgr/sleepmgr.h **** #elif (MEGA || MEGA_RF)
  58:../../../platform/common/services/sleepmgr/sleepmgr.h **** # include "mega_rf/sleepmgr.h"
  59:../../../platform/common/services/sleepmgr/sleepmgr.h **** #else
  60:../../../platform/common/services/sleepmgr/sleepmgr.h **** # error Unsupported device.
  61:../../../platform/common/services/sleepmgr/sleepmgr.h **** #endif
  62:../../../platform/common/services/sleepmgr/sleepmgr.h **** 
  63:../../../platform/common/services/sleepmgr/sleepmgr.h **** /**
  64:../../../platform/common/services/sleepmgr/sleepmgr.h ****  * \defgroup sleepmgr_group Sleep manager
  65:../../../platform/common/services/sleepmgr/sleepmgr.h ****  *
  66:../../../platform/common/services/sleepmgr/sleepmgr.h ****  * The sleep manager is a service for ensuring that the device is not put to
  67:../../../platform/common/services/sleepmgr/sleepmgr.h ****  * sleep in deeper sleep modes than the system (e.g., peripheral drivers,
  68:../../../platform/common/services/sleepmgr/sleepmgr.h ****  * services or the application) allows at any given time.
  69:../../../platform/common/services/sleepmgr/sleepmgr.h ****  *
  70:../../../platform/common/services/sleepmgr/sleepmgr.h ****  * It is based on the use of lock counting for the individual sleep modes, and
  71:../../../platform/common/services/sleepmgr/sleepmgr.h ****  * will put the device to sleep in the shallowest sleep mode that has a non-zero
  72:../../../platform/common/services/sleepmgr/sleepmgr.h ****  * lock count. The drivers/services/application can change these counts by use
  73:../../../platform/common/services/sleepmgr/sleepmgr.h ****  * of \ref sleepmgr_lock_mode and \ref sleepmgr_unlock_mode.
  74:../../../platform/common/services/sleepmgr/sleepmgr.h ****  * Refer to \ref sleepmgr_mode for a list of the sleep modes available for
  75:../../../platform/common/services/sleepmgr/sleepmgr.h ****  * locking, and the device datasheet for information on their effect.
  76:../../../platform/common/services/sleepmgr/sleepmgr.h ****  *
  77:../../../platform/common/services/sleepmgr/sleepmgr.h ****  * The application must supply the file \ref conf_sleepmgr.h.
  78:../../../platform/common/services/sleepmgr/sleepmgr.h ****  *
  79:../../../platform/common/services/sleepmgr/sleepmgr.h ****  * For the sleep manager to be enabled, the symbol \ref CONFIG_SLEEPMGR_ENABLE
  80:../../../platform/common/services/sleepmgr/sleepmgr.h ****  * must be defined, e.g., in \ref conf_sleepmgr.h. If this symbol is not
  81:../../../platform/common/services/sleepmgr/sleepmgr.h ****  * defined, the functions are replaced with dummy functions and no RAM is used.
  82:../../../platform/common/services/sleepmgr/sleepmgr.h ****  *
  83:../../../platform/common/services/sleepmgr/sleepmgr.h ****  * @{
  84:../../../platform/common/services/sleepmgr/sleepmgr.h ****  */
  85:../../../platform/common/services/sleepmgr/sleepmgr.h **** 
  86:../../../platform/common/services/sleepmgr/sleepmgr.h **** /**
  87:../../../platform/common/services/sleepmgr/sleepmgr.h ****  * \def CONFIG_SLEEPMGR_ENABLE
  88:../../../platform/common/services/sleepmgr/sleepmgr.h ****  * \brief Configuration symbol for enabling the sleep manager
  89:../../../platform/common/services/sleepmgr/sleepmgr.h ****  *
  90:../../../platform/common/services/sleepmgr/sleepmgr.h ****  * If this symbol is not defined, the functions of this service are replaced
  91:../../../platform/common/services/sleepmgr/sleepmgr.h ****  * with dummy functions. This is useful for reducing code size and execution
  92:../../../platform/common/services/sleepmgr/sleepmgr.h ****  * time if the sleep manager is not needed in the application.
  93:../../../platform/common/services/sleepmgr/sleepmgr.h ****  *
  94:../../../platform/common/services/sleepmgr/sleepmgr.h ****  * This symbol may be defined in \ref conf_sleepmgr.h.
  95:../../../platform/common/services/sleepmgr/sleepmgr.h ****  */
  96:../../../platform/common/services/sleepmgr/sleepmgr.h **** #if defined(__DOXYGEN__) && !defined(CONFIG_SLEEPMGR_ENABLE)
  97:../../../platform/common/services/sleepmgr/sleepmgr.h **** #  define CONFIG_SLEEPMGR_ENABLE
  98:../../../platform/common/services/sleepmgr/sleepmgr.h **** #endif
  99:../../../platform/common/services/sleepmgr/sleepmgr.h **** 
 100:../../../platform/common/services/sleepmgr/sleepmgr.h **** /**
 101:../../../platform/common/services/sleepmgr/sleepmgr.h ****  * \enum sleepmgr_mode
 102:../../../platform/common/services/sleepmgr/sleepmgr.h ****  * \brief Sleep mode locks
 103:../../../platform/common/services/sleepmgr/sleepmgr.h ****  *
 104:../../../platform/common/services/sleepmgr/sleepmgr.h ****  * Identifiers for the different sleep mode locks.
 105:../../../platform/common/services/sleepmgr/sleepmgr.h ****  */
 106:../../../platform/common/services/sleepmgr/sleepmgr.h **** 
 107:../../../platform/common/services/sleepmgr/sleepmgr.h **** /**
 108:../../../platform/common/services/sleepmgr/sleepmgr.h ****  * \brief Initialize the lock counts
 109:../../../platform/common/services/sleepmgr/sleepmgr.h ****  *
 110:../../../platform/common/services/sleepmgr/sleepmgr.h ****  * Sets all lock counts to 0, except the very last one, which is set to 1. This
 111:../../../platform/common/services/sleepmgr/sleepmgr.h ****  * is done to simplify the algorithm for finding the deepest allowable sleep
 112:../../../platform/common/services/sleepmgr/sleepmgr.h ****  * mode in \ref sleepmgr_enter_sleep.
 113:../../../platform/common/services/sleepmgr/sleepmgr.h ****  */
 114:../../../platform/common/services/sleepmgr/sleepmgr.h **** static inline void sleepmgr_init(void)
 115:../../../platform/common/services/sleepmgr/sleepmgr.h **** {
 332              	 .loc 5 115 0
 333              	 .cfi_startproc
 334              	 
 335              	 
 336              	 
 337 00b8 80B4     	 push {r7}
 338              	.LCFI22:
 339              	 .cfi_def_cfa_offset 4
 340              	 .cfi_offset 7,-4
 341 00ba 83B0     	 sub sp,sp,#12
 342              	.LCFI23:
 343              	 .cfi_def_cfa_offset 16
 344 00bc 00AF     	 add r7,sp,#0
 345              	.LCFI24:
 346              	 .cfi_def_cfa_register 7
 116:../../../platform/common/services/sleepmgr/sleepmgr.h **** #ifdef CONFIG_SLEEPMGR_ENABLE
 117:../../../platform/common/services/sleepmgr/sleepmgr.h **** 	uint8_t i;
 118:../../../platform/common/services/sleepmgr/sleepmgr.h **** 
 119:../../../platform/common/services/sleepmgr/sleepmgr.h **** 	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
 347              	 .loc 5 119 0
 348 00be 0023     	 movs r3,#0
 349 00c0 FB71     	 strb r3,[r7,#7]
 350 00c2 06E0     	 b .L17
 351              	.L18:
 120:../../../platform/common/services/sleepmgr/sleepmgr.h **** 		sleepmgr_locks[i] = 0;
 352              	 .loc 5 120 0 discriminator 3
 353 00c4 FB79     	 ldrb r3,[r7,#7]
 354 00c6 084A     	 ldr r2,.L19
 355 00c8 0021     	 movs r1,#0
 356 00ca D154     	 strb r1,[r2,r3]
 119:../../../platform/common/services/sleepmgr/sleepmgr.h **** 		sleepmgr_locks[i] = 0;
 357              	 .loc 5 119 0 discriminator 3
 358 00cc FB79     	 ldrb r3,[r7,#7]
 359 00ce 0133     	 adds r3,r3,#1
 360 00d0 FB71     	 strb r3,[r7,#7]
 361              	.L17:
 119:../../../platform/common/services/sleepmgr/sleepmgr.h **** 		sleepmgr_locks[i] = 0;
 362              	 .loc 5 119 0 is_stmt 0 discriminator 1
 363 00d2 FB79     	 ldrb r3,[r7,#7]
 364 00d4 062B     	 cmp r3,#6
 365 00d6 F5D9     	 bls .L18
 121:../../../platform/common/services/sleepmgr/sleepmgr.h **** 	}
 122:../../../platform/common/services/sleepmgr/sleepmgr.h **** 	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
 366              	 .loc 5 122 0 is_stmt 1
 367 00d8 034B     	 ldr r3,.L19
 368 00da 0122     	 movs r2,#1
 369 00dc DA71     	 strb r2,[r3,#7]
 123:../../../platform/common/services/sleepmgr/sleepmgr.h **** #endif /* CONFIG_SLEEPMGR_ENABLE */
 124:../../../platform/common/services/sleepmgr/sleepmgr.h **** }
 370              	 .loc 5 124 0
 371 00de 00BF     	 nop
 372 00e0 0C37     	 adds r7,r7,#12
 373              	.LCFI25:
 374              	 .cfi_def_cfa_offset 4
 375 00e2 BD46     	 mov sp,r7
 376              	.LCFI26:
 377              	 .cfi_def_cfa_register 13
 378              	 
 379 00e4 80BC     	 pop {r7}
 380              	.LCFI27:
 381              	 .cfi_restore 7
 382              	 .cfi_def_cfa_offset 0
 383 00e6 7047     	 bx lr
 384              	.L20:
 385              	 .align 2
 386              	.L19:
 387 00e8 00000000 	 .word sleepmgr_locks
 388              	 .cfi_endproc
 389              	.LFE124:
 391              	 .align 1
 392              	 .syntax unified
 393              	 .thumb
 394              	 .thumb_func
 395              	 .fpu softvfp
 397              	sleepmgr_lock_mode:
 398              	.LFB125:
 125:../../../platform/common/services/sleepmgr/sleepmgr.h **** 
 126:../../../platform/common/services/sleepmgr/sleepmgr.h **** /**
 127:../../../platform/common/services/sleepmgr/sleepmgr.h ****  * \brief Increase lock count for a sleep mode
 128:../../../platform/common/services/sleepmgr/sleepmgr.h ****  *
 129:../../../platform/common/services/sleepmgr/sleepmgr.h ****  * Increases the lock count for \a mode to ensure that the sleep manager does
 130:../../../platform/common/services/sleepmgr/sleepmgr.h ****  * not put the device to sleep in the deeper sleep modes.
 131:../../../platform/common/services/sleepmgr/sleepmgr.h ****  *
 132:../../../platform/common/services/sleepmgr/sleepmgr.h ****  * \param mode Sleep mode to lock.
 133:../../../platform/common/services/sleepmgr/sleepmgr.h ****  */
 134:../../../platform/common/services/sleepmgr/sleepmgr.h **** static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
 135:../../../platform/common/services/sleepmgr/sleepmgr.h **** {
 399              	 .loc 5 135 0
 400              	 .cfi_startproc
 401              	 
 402              	 
 403 00ec 80B5     	 push {r7,lr}
 404              	.LCFI28:
 405              	 .cfi_def_cfa_offset 8
 406              	 .cfi_offset 7,-8
 407              	 .cfi_offset 14,-4
 408 00ee 84B0     	 sub sp,sp,#16
 409              	.LCFI29:
 410              	 .cfi_def_cfa_offset 24
 411 00f0 00AF     	 add r7,sp,#0
 412              	.LCFI30:
 413              	 .cfi_def_cfa_register 7
 414 00f2 0346     	 mov r3,r0
 415 00f4 FB71     	 strb r3,[r7,#7]
 136:../../../platform/common/services/sleepmgr/sleepmgr.h **** #ifdef CONFIG_SLEEPMGR_ENABLE
 137:../../../platform/common/services/sleepmgr/sleepmgr.h **** 	irqflags_t flags;
 138:../../../platform/common/services/sleepmgr/sleepmgr.h **** 
 139:../../../platform/common/services/sleepmgr/sleepmgr.h **** 	Assert(sleepmgr_locks[mode] < 0xff);
 140:../../../platform/common/services/sleepmgr/sleepmgr.h **** 
 141:../../../platform/common/services/sleepmgr/sleepmgr.h **** 	// Enter a critical section
 142:../../../platform/common/services/sleepmgr/sleepmgr.h **** 	flags = cpu_irq_save();
 416              	 .loc 5 142 0
 417 00f6 FFF783FF 	 bl cpu_irq_save
 418 00fa F860     	 str r0,[r7,#12]
 143:../../../platform/common/services/sleepmgr/sleepmgr.h **** 
 144:../../../platform/common/services/sleepmgr/sleepmgr.h **** 	++sleepmgr_locks[mode];
 419              	 .loc 5 144 0
 420 00fc FB79     	 ldrb r3,[r7,#7]
 421 00fe 064A     	 ldr r2,.L22
 422 0100 D25C     	 ldrb r2,[r2,r3]
 423 0102 0132     	 adds r2,r2,#1
 424 0104 D1B2     	 uxtb r1,r2
 425 0106 044A     	 ldr r2,.L22
 426 0108 D154     	 strb r1,[r2,r3]
 145:../../../platform/common/services/sleepmgr/sleepmgr.h **** 
 146:../../../platform/common/services/sleepmgr/sleepmgr.h **** 	// Leave the critical section
 147:../../../platform/common/services/sleepmgr/sleepmgr.h **** 	cpu_irq_restore(flags);
 427              	 .loc 5 147 0
 428 010a F868     	 ldr r0,[r7,#12]
 429 010c FFF7A3FF 	 bl cpu_irq_restore
 148:../../../platform/common/services/sleepmgr/sleepmgr.h **** #else
 149:../../../platform/common/services/sleepmgr/sleepmgr.h **** 	UNUSED(mode);
 150:../../../platform/common/services/sleepmgr/sleepmgr.h **** #endif /* CONFIG_SLEEPMGR_ENABLE */
 151:../../../platform/common/services/sleepmgr/sleepmgr.h **** }
 430              	 .loc 5 151 0
 431 0110 00BF     	 nop
 432 0112 1037     	 adds r7,r7,#16
 433              	.LCFI31:
 434              	 .cfi_def_cfa_offset 8
 435 0114 BD46     	 mov sp,r7
 436              	.LCFI32:
 437              	 .cfi_def_cfa_register 13
 438              	 
 439 0116 80BD     	 pop {r7,pc}
 440              	.L23:
 441              	 .align 2
 442              	.L22:
 443 0118 00000000 	 .word sleepmgr_locks
 444              	 .cfi_endproc
 445              	.LFE125:
 447              	 .align 1
 448              	 .syntax unified
 449              	 .thumb
 450              	 .thumb_func
 451              	 .fpu softvfp
 453              	sleepmgr_get_sleep_mode:
 454              	.LFB127:
 152:../../../platform/common/services/sleepmgr/sleepmgr.h **** 
 153:../../../platform/common/services/sleepmgr/sleepmgr.h **** /**
 154:../../../platform/common/services/sleepmgr/sleepmgr.h ****  * \brief Decrease lock count for a sleep mode
 155:../../../platform/common/services/sleepmgr/sleepmgr.h ****  *
 156:../../../platform/common/services/sleepmgr/sleepmgr.h ****  * Decreases the lock count for \a mode. If the lock count reaches 0, the sleep
 157:../../../platform/common/services/sleepmgr/sleepmgr.h ****  * manager can put the device to sleep in the deeper sleep modes.
 158:../../../platform/common/services/sleepmgr/sleepmgr.h ****  *
 159:../../../platform/common/services/sleepmgr/sleepmgr.h ****  * \param mode Sleep mode to unlock.
 160:../../../platform/common/services/sleepmgr/sleepmgr.h ****  */
 161:../../../platform/common/services/sleepmgr/sleepmgr.h **** static inline void sleepmgr_unlock_mode(enum sleepmgr_mode mode)
 162:../../../platform/common/services/sleepmgr/sleepmgr.h **** {
 163:../../../platform/common/services/sleepmgr/sleepmgr.h **** #ifdef CONFIG_SLEEPMGR_ENABLE
 164:../../../platform/common/services/sleepmgr/sleepmgr.h **** 	irqflags_t flags;
 165:../../../platform/common/services/sleepmgr/sleepmgr.h **** 
 166:../../../platform/common/services/sleepmgr/sleepmgr.h **** 	Assert(sleepmgr_locks[mode]);
 167:../../../platform/common/services/sleepmgr/sleepmgr.h **** 
 168:../../../platform/common/services/sleepmgr/sleepmgr.h **** 	// Enter a critical section
 169:../../../platform/common/services/sleepmgr/sleepmgr.h **** 	flags = cpu_irq_save();
 170:../../../platform/common/services/sleepmgr/sleepmgr.h **** 
 171:../../../platform/common/services/sleepmgr/sleepmgr.h **** 	--sleepmgr_locks[mode];
 172:../../../platform/common/services/sleepmgr/sleepmgr.h **** 
 173:../../../platform/common/services/sleepmgr/sleepmgr.h **** 	// Leave the critical section
 174:../../../platform/common/services/sleepmgr/sleepmgr.h **** 	cpu_irq_restore(flags);
 175:../../../platform/common/services/sleepmgr/sleepmgr.h **** #else
 176:../../../platform/common/services/sleepmgr/sleepmgr.h **** 	UNUSED(mode);
 177:../../../platform/common/services/sleepmgr/sleepmgr.h **** #endif /* CONFIG_SLEEPMGR_ENABLE */
 178:../../../platform/common/services/sleepmgr/sleepmgr.h **** }
 179:../../../platform/common/services/sleepmgr/sleepmgr.h **** 
 180:../../../platform/common/services/sleepmgr/sleepmgr.h ****  /**
 181:../../../platform/common/services/sleepmgr/sleepmgr.h ****  * \brief Retrieves the deepest allowable sleep mode
 182:../../../platform/common/services/sleepmgr/sleepmgr.h ****  *
 183:../../../platform/common/services/sleepmgr/sleepmgr.h ****  * Searches through the sleep mode lock counts, starting at the shallowest sleep
 184:../../../platform/common/services/sleepmgr/sleepmgr.h ****  * mode, until the first non-zero lock count is found. The deepest allowable
 185:../../../platform/common/services/sleepmgr/sleepmgr.h ****  * sleep mode is then returned.
 186:../../../platform/common/services/sleepmgr/sleepmgr.h ****  */
 187:../../../platform/common/services/sleepmgr/sleepmgr.h **** static inline enum sleepmgr_mode sleepmgr_get_sleep_mode(void)
 188:../../../platform/common/services/sleepmgr/sleepmgr.h **** {
 455              	 .loc 5 188 0
 456              	 .cfi_startproc
 457              	 
 458              	 
 459              	 
 460 011c 80B4     	 push {r7}
 461              	.LCFI33:
 462              	 .cfi_def_cfa_offset 4
 463              	 .cfi_offset 7,-4
 464 011e 83B0     	 sub sp,sp,#12
 465              	.LCFI34:
 466              	 .cfi_def_cfa_offset 16
 467 0120 00AF     	 add r7,sp,#0
 468              	.LCFI35:
 469              	 .cfi_def_cfa_register 7
 189:../../../platform/common/services/sleepmgr/sleepmgr.h **** 	enum sleepmgr_mode sleep_mode = SLEEPMGR_ACTIVE;
 470              	 .loc 5 189 0
 471 0122 0023     	 movs r3,#0
 472 0124 FB71     	 strb r3,[r7,#7]
 190:../../../platform/common/services/sleepmgr/sleepmgr.h **** 
 191:../../../platform/common/services/sleepmgr/sleepmgr.h **** #ifdef CONFIG_SLEEPMGR_ENABLE
 192:../../../platform/common/services/sleepmgr/sleepmgr.h **** 	uint8_t *lock_ptr = sleepmgr_locks;
 473              	 .loc 5 192 0
 474 0126 094B     	 ldr r3,.L28
 475 0128 3B60     	 str r3,[r7]
 193:../../../platform/common/services/sleepmgr/sleepmgr.h **** 
 194:../../../platform/common/services/sleepmgr/sleepmgr.h **** 	// Find first non-zero lock count, starting with the shallowest modes.
 195:../../../platform/common/services/sleepmgr/sleepmgr.h **** 	while (!(*lock_ptr)) {
 476              	 .loc 5 195 0
 477 012a 05E0     	 b .L25
 478              	.L26:
 196:../../../platform/common/services/sleepmgr/sleepmgr.h **** 		lock_ptr++;
 479              	 .loc 5 196 0
 480 012c 3B68     	 ldr r3,[r7]
 481 012e 0133     	 adds r3,r3,#1
 482 0130 3B60     	 str r3,[r7]
 197:../../../platform/common/services/sleepmgr/sleepmgr.h **** 		sleep_mode = (enum sleepmgr_mode)(sleep_mode + 1);
 483              	 .loc 5 197 0
 484 0132 FB79     	 ldrb r3,[r7,#7]
 485 0134 0133     	 adds r3,r3,#1
 486 0136 FB71     	 strb r3,[r7,#7]
 487              	.L25:
 195:../../../platform/common/services/sleepmgr/sleepmgr.h **** 		lock_ptr++;
 488              	 .loc 5 195 0
 489 0138 3B68     	 ldr r3,[r7]
 490 013a 1B78     	 ldrb r3,[r3]
 491 013c 002B     	 cmp r3,#0
 492 013e F5D0     	 beq .L26
 198:../../../platform/common/services/sleepmgr/sleepmgr.h **** 	}
 199:../../../platform/common/services/sleepmgr/sleepmgr.h **** 
 200:../../../platform/common/services/sleepmgr/sleepmgr.h **** 	// Catch the case where one too many sleepmgr_unlock_mode() call has been
 201:../../../platform/common/services/sleepmgr/sleepmgr.h **** 	// performed on the deepest sleep mode.
 202:../../../platform/common/services/sleepmgr/sleepmgr.h **** 	Assert((uintptr_t)(lock_ptr - sleepmgr_locks) < SLEEPMGR_NR_OF_MODES);
 203:../../../platform/common/services/sleepmgr/sleepmgr.h **** 
 204:../../../platform/common/services/sleepmgr/sleepmgr.h **** #endif /* CONFIG_SLEEPMGR_ENABLE */
 205:../../../platform/common/services/sleepmgr/sleepmgr.h **** 
 206:../../../platform/common/services/sleepmgr/sleepmgr.h **** 	return sleep_mode;
 493              	 .loc 5 206 0
 494 0140 FB79     	 ldrb r3,[r7,#7]
 207:../../../platform/common/services/sleepmgr/sleepmgr.h **** }
 495              	 .loc 5 207 0
 496 0142 1846     	 mov r0,r3
 497 0144 0C37     	 adds r7,r7,#12
 498              	.LCFI36:
 499              	 .cfi_def_cfa_offset 4
 500 0146 BD46     	 mov sp,r7
 501              	.LCFI37:
 502              	 .cfi_def_cfa_register 13
 503              	 
 504 0148 80BC     	 pop {r7}
 505              	.LCFI38:
 506              	 .cfi_restore 7
 507              	 .cfi_def_cfa_offset 0
 508 014a 7047     	 bx lr
 509              	.L29:
 510              	 .align 2
 511              	.L28:
 512 014c 00000000 	 .word sleepmgr_locks
 513              	 .cfi_endproc
 514              	.LFE127:
 516              	 .align 1
 517              	 .syntax unified
 518              	 .thumb
 519              	 .thumb_func
 520              	 .fpu softvfp
 522              	sleepmgr_enter_sleep:
 523              	.LFB128:
 208:../../../platform/common/services/sleepmgr/sleepmgr.h **** 
 209:../../../platform/common/services/sleepmgr/sleepmgr.h **** /**
 210:../../../platform/common/services/sleepmgr/sleepmgr.h ****  * \fn sleepmgr_enter_sleep
 211:../../../platform/common/services/sleepmgr/sleepmgr.h ****  * \brief Go to sleep in the deepest allowed mode
 212:../../../platform/common/services/sleepmgr/sleepmgr.h ****  *
 213:../../../platform/common/services/sleepmgr/sleepmgr.h ****  * Searches through the sleep mode lock counts, starting at the shallowest sleep
 214:../../../platform/common/services/sleepmgr/sleepmgr.h ****  * mode, until the first non-zero lock count is found. The device is then put to
 215:../../../platform/common/services/sleepmgr/sleepmgr.h ****  * sleep in the sleep mode that corresponds to the lock.
 216:../../../platform/common/services/sleepmgr/sleepmgr.h ****  *
 217:../../../platform/common/services/sleepmgr/sleepmgr.h ****  * \note This function enables interrupts before going to sleep, and will leave
 218:../../../platform/common/services/sleepmgr/sleepmgr.h ****  * them enabled upon return. This also applies if sleep is skipped due to ACTIVE
 219:../../../platform/common/services/sleepmgr/sleepmgr.h ****  * mode being locked.
 220:../../../platform/common/services/sleepmgr/sleepmgr.h ****  */
 221:../../../platform/common/services/sleepmgr/sleepmgr.h **** 
 222:../../../platform/common/services/sleepmgr/sleepmgr.h **** static inline void sleepmgr_enter_sleep(void)
 223:../../../platform/common/services/sleepmgr/sleepmgr.h **** {
 524              	 .loc 5 223 0
 525              	 .cfi_startproc
 526              	 
 527              	 
 528 0150 80B5     	 push {r7,lr}
 529              	.LCFI39:
 530              	 .cfi_def_cfa_offset 8
 531              	 .cfi_offset 7,-8
 532              	 .cfi_offset 14,-4
 533 0152 82B0     	 sub sp,sp,#8
 534              	.LCFI40:
 535              	 .cfi_def_cfa_offset 16
 536 0154 00AF     	 add r7,sp,#0
 537              	.LCFI41:
 538              	 .cfi_def_cfa_register 7
 539              	.LBB38:
 540              	.LBB39:
 327:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** }
 541              	 .loc 2 327 0
 542              	 .syntax unified
 543              	
 544 0156 72B6     	 cpsid i
 545              	
 546              	 .thumb
 547              	 .syntax unified
 548              	.LBE39:
 549              	.LBE38:
 550              	.LBB40:
 551              	.LBB41:
 552              	 .loc 3 354 0
 553              	 .syntax unified
 554              	
 555 0158 BFF35F8F 	 dmb
 556              	
 557              	 .thumb
 558              	 .syntax unified
 559              	.LBE41:
 560              	.LBE40:
 224:../../../platform/common/services/sleepmgr/sleepmgr.h **** #ifdef CONFIG_SLEEPMGR_ENABLE
 225:../../../platform/common/services/sleepmgr/sleepmgr.h **** 	enum sleepmgr_mode sleep_mode;
 226:../../../platform/common/services/sleepmgr/sleepmgr.h **** 
 227:../../../platform/common/services/sleepmgr/sleepmgr.h **** 	cpu_irq_disable();
 561              	 .loc 5 227 0
 562 015c 0B4B     	 ldr r3,.L33
 563 015e 0022     	 movs r2,#0
 564 0160 1A70     	 strb r2,[r3]
 228:../../../platform/common/services/sleepmgr/sleepmgr.h **** 
 229:../../../platform/common/services/sleepmgr/sleepmgr.h **** 	// Find the deepest allowable sleep mode
 230:../../../platform/common/services/sleepmgr/sleepmgr.h **** 	sleep_mode = sleepmgr_get_sleep_mode();
 565              	 .loc 5 230 0
 566 0162 FFF7DBFF 	 bl sleepmgr_get_sleep_mode
 567 0166 0346     	 mov r3,r0
 568 0168 FB71     	 strb r3,[r7,#7]
 231:../../../platform/common/services/sleepmgr/sleepmgr.h **** 	// Return right away if first mode (ACTIVE) is locked.
 232:../../../platform/common/services/sleepmgr/sleepmgr.h **** 	if (sleep_mode==SLEEPMGR_ACTIVE) {
 569              	 .loc 5 232 0
 570 016a FB79     	 ldrb r3,[r7,#7]
 571 016c 002B     	 cmp r3,#0
 572 016e 06D1     	 bne .L31
 233:../../../platform/common/services/sleepmgr/sleepmgr.h **** 		cpu_irq_enable();
 573              	 .loc 5 233 0
 574 0170 064B     	 ldr r3,.L33
 575 0172 0122     	 movs r2,#1
 576 0174 1A70     	 strb r2,[r3]
 577              	.LBB42:
 578              	.LBB43:
 579              	 .loc 3 354 0
 580              	 .syntax unified
 581              	
 582 0176 BFF35F8F 	 dmb
 583              	
 584              	 .thumb
 585              	 .syntax unified
 586              	.LBE43:
 587              	.LBE42:
 588              	.LBB44:
 589              	.LBB45:
 316:../../../platform/thirdparty/CMSIS/include/core_cmFunc.h **** }
 590              	 .loc 2 316 0
 591              	 .syntax unified
 592              	
 593 017a 62B6     	 cpsie i
 594              	
 595              	 .thumb
 596              	 .syntax unified
 597              	.LBE45:
 598              	.LBE44:
 234:../../../platform/common/services/sleepmgr/sleepmgr.h **** 		return;
 599              	 .loc 5 234 0
 600 017c 03E0     	 b .L30
 601              	.L31:
 235:../../../platform/common/services/sleepmgr/sleepmgr.h **** 	}
 236:../../../platform/common/services/sleepmgr/sleepmgr.h **** 	// Enter the deepest allowable sleep mode with interrupts enabled
 237:../../../platform/common/services/sleepmgr/sleepmgr.h **** 	sleepmgr_sleep(sleep_mode);
 602              	 .loc 5 237 0
 603 017e FB79     	 ldrb r3,[r7,#7]
 604 0180 1846     	 mov r0,r3
 605 0182 FFF77FFF 	 bl sleepmgr_sleep
 606              	.L30:
 238:../../../platform/common/services/sleepmgr/sleepmgr.h **** #else
 239:../../../platform/common/services/sleepmgr/sleepmgr.h **** 	cpu_irq_enable();
 240:../../../platform/common/services/sleepmgr/sleepmgr.h **** #endif /* CONFIG_SLEEPMGR_ENABLE */
 241:../../../platform/common/services/sleepmgr/sleepmgr.h **** }
 607              	 .loc 5 241 0
 608 0186 0837     	 adds r7,r7,#8
 609              	.LCFI42:
 610              	 .cfi_def_cfa_offset 8
 611 0188 BD46     	 mov sp,r7
 612              	.LCFI43:
 613              	 .cfi_def_cfa_register 13
 614              	 
 615 018a 80BD     	 pop {r7,pc}
 616              	.L34:
 617              	 .align 2
 618              	.L33:
 619 018c 00000000 	 .word g_interrupt_enabled
 620              	 .cfi_endproc
 621              	.LFE128:
 623              	 .align 1
 624              	 .syntax unified
 625              	 .thumb
 626              	 .thumb_func
 627              	 .fpu softvfp
 629              	ast_read_counter_value:
 630              	.LFB129:
 631              	 .file 6 "../../../platform/sam/drivers/ast/ast.h"
   1:../../../platform/sam/drivers/ast/ast.h **** /**
   2:../../../platform/sam/drivers/ast/ast.h ****  * \file
   3:../../../platform/sam/drivers/ast/ast.h ****  *
   4:../../../platform/sam/drivers/ast/ast.h ****  * \brief SAM Asynchronous Timer (AST) driver.
   5:../../../platform/sam/drivers/ast/ast.h ****  *
   6:../../../platform/sam/drivers/ast/ast.h ****  * Copyright (C) 2012-2014 Atmel Corporation. All rights reserved.
   7:../../../platform/sam/drivers/ast/ast.h ****  *
   8:../../../platform/sam/drivers/ast/ast.h ****  * \asf_license_start
   9:../../../platform/sam/drivers/ast/ast.h ****  *
  10:../../../platform/sam/drivers/ast/ast.h ****  * \page License
  11:../../../platform/sam/drivers/ast/ast.h ****  *
  12:../../../platform/sam/drivers/ast/ast.h ****  * Redistribution and use in source and binary forms, with or without
  13:../../../platform/sam/drivers/ast/ast.h ****  * modification, are permitted provided that the following conditions are met:
  14:../../../platform/sam/drivers/ast/ast.h ****  *
  15:../../../platform/sam/drivers/ast/ast.h ****  * 1. Redistributions of source code must retain the above copyright notice,
  16:../../../platform/sam/drivers/ast/ast.h ****  *    this list of conditions and the following disclaimer.
  17:../../../platform/sam/drivers/ast/ast.h ****  *
  18:../../../platform/sam/drivers/ast/ast.h ****  * 2. Redistributions in binary form must reproduce the above copyright notice,
  19:../../../platform/sam/drivers/ast/ast.h ****  *    this list of conditions and the following disclaimer in the documentation
  20:../../../platform/sam/drivers/ast/ast.h ****  *    and/or other materials provided with the distribution.
  21:../../../platform/sam/drivers/ast/ast.h ****  *
  22:../../../platform/sam/drivers/ast/ast.h ****  * 3. The name of Atmel may not be used to endorse or promote products derived
  23:../../../platform/sam/drivers/ast/ast.h ****  *    from this software without specific prior written permission.
  24:../../../platform/sam/drivers/ast/ast.h ****  *
  25:../../../platform/sam/drivers/ast/ast.h ****  * 4. This software may only be redistributed and used in connection with an
  26:../../../platform/sam/drivers/ast/ast.h ****  *    Atmel microcontroller product.
  27:../../../platform/sam/drivers/ast/ast.h ****  *
  28:../../../platform/sam/drivers/ast/ast.h ****  * THIS SOFTWARE IS PROVIDED BY ATMEL "AS IS" AND ANY EXPRESS OR IMPLIED
  29:../../../platform/sam/drivers/ast/ast.h ****  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
  30:../../../platform/sam/drivers/ast/ast.h ****  * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE
  31:../../../platform/sam/drivers/ast/ast.h ****  * EXPRESSLY AND SPECIFICALLY DISCLAIMED. IN NO EVENT SHALL ATMEL BE LIABLE FOR
  32:../../../platform/sam/drivers/ast/ast.h ****  * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  33:../../../platform/sam/drivers/ast/ast.h ****  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
  34:../../../platform/sam/drivers/ast/ast.h ****  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
  35:../../../platform/sam/drivers/ast/ast.h ****  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
  36:../../../platform/sam/drivers/ast/ast.h ****  * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
  37:../../../platform/sam/drivers/ast/ast.h ****  * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  38:../../../platform/sam/drivers/ast/ast.h ****  * POSSIBILITY OF SUCH DAMAGE.
  39:../../../platform/sam/drivers/ast/ast.h ****  *
  40:../../../platform/sam/drivers/ast/ast.h ****  * \asf_license_stop
  41:../../../platform/sam/drivers/ast/ast.h ****  *
  42:../../../platform/sam/drivers/ast/ast.h ****  */
  43:../../../platform/sam/drivers/ast/ast.h **** 
  44:../../../platform/sam/drivers/ast/ast.h **** #ifndef AST_H_INCLUDED
  45:../../../platform/sam/drivers/ast/ast.h **** #define AST_H_INCLUDED
  46:../../../platform/sam/drivers/ast/ast.h **** 
  47:../../../platform/sam/drivers/ast/ast.h **** /**
  48:../../../platform/sam/drivers/ast/ast.h ****  * \defgroup asfdoc_sam_drivers_ast_group SAM4L Asynchronous Timer (AST)
  49:../../../platform/sam/drivers/ast/ast.h ****  *
  50:../../../platform/sam/drivers/ast/ast.h ****  * This driver for SAM4L devices provides an interface for the configuration
  51:../../../platform/sam/drivers/ast/ast.h ****  * and management of the device's Asynchronous Timer functionality.
  52:../../../platform/sam/drivers/ast/ast.h ****  *
  53:../../../platform/sam/drivers/ast/ast.h ****  * The Asynchronous Timer can generate periodic interrupts and peripheral events
  54:../../../platform/sam/drivers/ast/ast.h ****  * from output from the prescaler, as well as alarm interrupts and peripheral
  55:../../../platform/sam/drivers/ast/ast.h ****  * events, which can trigger at any counter value.
  56:../../../platform/sam/drivers/ast/ast.h ****  *
  57:../../../platform/sam/drivers/ast/ast.h ****  * The outline of this documentation is as follows:
  58:../../../platform/sam/drivers/ast/ast.h ****  *  - \ref asfdoc_sam_drivers_ast_prerequisites
  59:../../../platform/sam/drivers/ast/ast.h ****  *  - \ref asfdoc_sam_drivers_ast_module_overview
  60:../../../platform/sam/drivers/ast/ast.h ****  *  - \ref asfdoc_sam_drivers_ast_special_considerations
  61:../../../platform/sam/drivers/ast/ast.h ****  *  - \ref asfdoc_sam_drivers_ast_extra_info
  62:../../../platform/sam/drivers/ast/ast.h ****  *  - \ref asfdoc_sam_drivers_ast_examples
  63:../../../platform/sam/drivers/ast/ast.h ****  *  - \ref asfdoc_sam_drivers_ast_api_overview
  64:../../../platform/sam/drivers/ast/ast.h ****  *
  65:../../../platform/sam/drivers/ast/ast.h ****  *
  66:../../../platform/sam/drivers/ast/ast.h ****  * \section asfdoc_sam_drivers_ast_prerequisites Prerequisites
  67:../../../platform/sam/drivers/ast/ast.h ****  *
  68:../../../platform/sam/drivers/ast/ast.h ****  * There are no prerequisites for this module.
  69:../../../platform/sam/drivers/ast/ast.h ****  *
  70:../../../platform/sam/drivers/ast/ast.h ****  *
  71:../../../platform/sam/drivers/ast/ast.h ****  * \section asfdoc_sam_drivers_ast_module_overview Module Overview
  72:../../../platform/sam/drivers/ast/ast.h ****  * The AST module in the SAM4L devices is a 32-bit counter, with a 32-bit
  73:../../../platform/sam/drivers/ast/ast.h ****  * programmable prescaler. Typically, the AST clock is run continuously,
  74:../../../platform/sam/drivers/ast/ast.h ****  * including in the device's low-power sleep modes, to track the current time
  75:../../../platform/sam/drivers/ast/ast.h ****  * and date information. The AST can also wake-up the system from backup mode
  76:../../../platform/sam/drivers/ast/ast.h ****  * using either the alarm wakeup, periodic wakeup, or overflow wake-up mechanisms.
  77:../../../platform/sam/drivers/ast/ast.h ****  *
  78:../../../platform/sam/drivers/ast/ast.h ****  * The AST has been designed to meet the system tick and Real-Time Clock
  79:../../../platform/sam/drivers/ast/ast.h ****  * requirements of most embedded operating systems.
  80:../../../platform/sam/drivers/ast/ast.h ****  *
  81:../../../platform/sam/drivers/ast/ast.h ****  * In this driver, the AST is operated in Calendar Mode. This allows for an
  82:../../../platform/sam/drivers/ast/ast.h ****  * easy integration of a Real-Time Clock and calendar into a user application
  83:../../../platform/sam/drivers/ast/ast.h ****  * to track the passing of time and/or perform scheduled tasks.
  84:../../../platform/sam/drivers/ast/ast.h ****  *
  85:../../../platform/sam/drivers/ast/ast.h ****  * Whilst operating in Calendar Mode, the AST features:
  86:../../../platform/sam/drivers/ast/ast.h ****  *  - Time tracking in seconds, minutes, and hours in 24 hour format
  87:../../../platform/sam/drivers/ast/ast.h ****  *  - Date tracking in day, month, and year
  88:../../../platform/sam/drivers/ast/ast.h ****  *  - Automatic leap year correction
  89:../../../platform/sam/drivers/ast/ast.h ****  *
  90:../../../platform/sam/drivers/ast/ast.h ****  * \subsection asfdoc_sam_drivers_ast_overview_alarms Alarm Interrupt
  91:../../../platform/sam/drivers/ast/ast.h ****  * The AST has a device dependent number of independent hardware alarms that can
  92:../../../platform/sam/drivers/ast/ast.h ****  * be configured by the user application. These alarms will be triggered
  93:../../../platform/sam/drivers/ast/ast.h ****  * on a match with the current clock value, and can be set up to trigger an
  94:../../../platform/sam/drivers/ast/ast.h ****  * interrupt, event, or both. The AST can also be configured to clear the clock
  95:../../../platform/sam/drivers/ast/ast.h ****  * value on alarm match which will generate an overflow interrupt.
  96:../../../platform/sam/drivers/ast/ast.h ****  *
  97:../../../platform/sam/drivers/ast/ast.h ****  * \note Refer to module configuration at the end of the ast section of the device
  98:../../../platform/sam/drivers/ast/ast.h ****  * datasheet for the number of alarms supported.
  99:../../../platform/sam/drivers/ast/ast.h ****  *
 100:../../../platform/sam/drivers/ast/ast.h ****  * Whilst in Calendar Mode and using a nominal 1Hz input clock frequency, a register
 101:../../../platform/sam/drivers/ast/ast.h ****  * overflow will occur after 64 years.
 102:../../../platform/sam/drivers/ast/ast.h ****  *
 103:../../../platform/sam/drivers/ast/ast.h ****  * \subsection asfdoc_sam_drivers_ast_overview_periodic Periodic Events
 104:../../../platform/sam/drivers/ast/ast.h ****  * The AST can generate events at periodic intervals, allowing for direct
 105:../../../platform/sam/drivers/ast/ast.h ****  * peripheral actions without CPU intervention. The periodic events can be
 106:../../../platform/sam/drivers/ast/ast.h ****  * generated on an AST prescaler match, and will be generated on
 107:../../../platform/sam/drivers/ast/ast.h ****  * the rising edge transition of the specified bit. The resulting periodic
 108:../../../platform/sam/drivers/ast/ast.h ****  * frequency can be calculated by the following formula:
 109:../../../platform/sam/drivers/ast/ast.h ****  *
 110:../../../platform/sam/drivers/ast/ast.h ****  * \f[ f_{PERIODIC}=\frac{f_{ASY}}{2^{n+1}} \f]
 111:../../../platform/sam/drivers/ast/ast.h ****  *
 112:../../../platform/sam/drivers/ast/ast.h ****  * Where \f$f_{ASY}\f$ refers to the \e asynchronous clock set up in the AST
 113:../../../platform/sam/drivers/ast/ast.h ****  * module configuration.
 114:../../../platform/sam/drivers/ast/ast.h ****  *
 115:../../../platform/sam/drivers/ast/ast.h ****  * \note The connection of events between modules requires the use of the
 116:../../../platform/sam/drivers/ast/ast.h ****  *       \ref asfdoc_sam_drivers_events_group "SAM4L Peripheral Event Controller (PEVC)"
 117:../../../platform/sam/drivers/ast/ast.h ****  *       to route an output event of one module to the the input event of another.
 118:../../../platform/sam/drivers/ast/ast.h ****  *       For more information on event routing, refer to the event driver
 119:../../../platform/sam/drivers/ast/ast.h ****  *       documentation.
 120:../../../platform/sam/drivers/ast/ast.h ****  *
 121:../../../platform/sam/drivers/ast/ast.h ****  * \subsection asfdoc_sam_drivers_ast_overview_correction Digital Tuner
 122:../../../platform/sam/drivers/ast/ast.h ****  * The AST module contains Digital Tuner logic to compensate for inaccurate source clock
 123:../../../platform/sam/drivers/ast/ast.h ****  * frequencies, which would otherwise result in skewed time measurements.
 124:../../../platform/sam/drivers/ast/ast.h ****  *
 125:../../../platform/sam/drivers/ast/ast.h ****  *
 126:../../../platform/sam/drivers/ast/ast.h ****  * \section asfdoc_sam_drivers_ast_special_considerations Special Considerations
 127:../../../platform/sam/drivers/ast/ast.h ****  *
 128:../../../platform/sam/drivers/ast/ast.h ****  * \subsection asfdoc_sam_drivers_ast_special_considerations_crystal Crystal Selection
 129:../../../platform/sam/drivers/ast/ast.h ****  * The external crystal selection used by the AST module in the final system design must take
 130:../../../platform/sam/drivers/ast/ast.h ****  * into account:
 131:../../../platform/sam/drivers/ast/ast.h ****  * - Current consumption to achieve the best power savings in low power operating modes
 132:../../../platform/sam/drivers/ast/ast.h ****  * - Frequency drift (due to temperature effects on the circuit) for the best time accuracy
 133:../../../platform/sam/drivers/ast/ast.h ****  *
 134:../../../platform/sam/drivers/ast/ast.h ****  * \subsection asfdoc_sam_drivers_ast_special_considerations_year Year Limit
 135:../../../platform/sam/drivers/ast/ast.h ****  * The AST module has a year range of 63 years from the starting year configured
 136:../../../platform/sam/drivers/ast/ast.h ****  * when the module is initialized. Dates outside the start to end year range
 137:../../../platform/sam/drivers/ast/ast.h ****  * described below will need software adjustment:
 138:../../../platform/sam/drivers/ast/ast.h ****  *
 139:../../../platform/sam/drivers/ast/ast.h ****  * \f[ [YEAR_{START}, YEAR_{START}+64] \f]
 140:../../../platform/sam/drivers/ast/ast.h ****  *
 141:../../../platform/sam/drivers/ast/ast.h ****  *
 142:../../../platform/sam/drivers/ast/ast.h ****  * \section asfdoc_sam_drivers_ast_extra_info Extra Information
 143:../../../platform/sam/drivers/ast/ast.h ****  *
 144:../../../platform/sam/drivers/ast/ast.h ****  * For extra information, see \ref asfdoc_sam_drivers_ast_extra. This includes:
 145:../../../platform/sam/drivers/ast/ast.h ****  *  - \ref asfdoc_sam_drivers_ast_extra_acronyms
 146:../../../platform/sam/drivers/ast/ast.h ****  *  - \ref asfdoc_sam_drivers_ast_extra_dependencies
 147:../../../platform/sam/drivers/ast/ast.h ****  *  - \ref asfdoc_sam_drivers_ast_extra_errata
 148:../../../platform/sam/drivers/ast/ast.h ****  *  - \ref asfdoc_sam_drivers_ast_extra_history
 149:../../../platform/sam/drivers/ast/ast.h ****  *
 150:../../../platform/sam/drivers/ast/ast.h ****  * \section asfdoc_sam_drivers_ast_examples Examples
 151:../../../platform/sam/drivers/ast/ast.h ****  *
 152:../../../platform/sam/drivers/ast/ast.h ****  * For a list of examples related to this driver, see
 153:../../../platform/sam/drivers/ast/ast.h ****  * \ref asfdoc_sam_drivers_ast_exqsg.
 154:../../../platform/sam/drivers/ast/ast.h ****  *
 155:../../../platform/sam/drivers/ast/ast.h ****  * \section asfdoc_sam_drivers_ast_api_overview API Overview
 156:../../../platform/sam/drivers/ast/ast.h ****  * @{
 157:../../../platform/sam/drivers/ast/ast.h ****  */
 158:../../../platform/sam/drivers/ast/ast.h ****  
 159:../../../platform/sam/drivers/ast/ast.h **** #include <compiler.h>
 160:../../../platform/sam/drivers/ast/ast.h **** 
 161:../../../platform/sam/drivers/ast/ast.h **** /// @cond */
 162:../../../platform/sam/drivers/ast/ast.h **** /**INDENT-OFF**/
 163:../../../platform/sam/drivers/ast/ast.h **** #ifdef __cplusplus
 164:../../../platform/sam/drivers/ast/ast.h **** extern "C" {
 165:../../../platform/sam/drivers/ast/ast.h **** #endif
 166:../../../platform/sam/drivers/ast/ast.h **** /**INDENT-ON**/
 167:../../../platform/sam/drivers/ast/ast.h **** /// @endcond */
 168:../../../platform/sam/drivers/ast/ast.h **** 
 169:../../../platform/sam/drivers/ast/ast.h **** /** Timeout to prevent code hang in clock initialization */
 170:../../../platform/sam/drivers/ast/ast.h **** #define AST_POLL_TIMEOUT 10000
 171:../../../platform/sam/drivers/ast/ast.h **** 
 172:../../../platform/sam/drivers/ast/ast.h **** /** \name Predefined PSEL Values
 173:../../../platform/sam/drivers/ast/ast.h ****  */
 174:../../../platform/sam/drivers/ast/ast.h **** /* @{ */
 175:../../../platform/sam/drivers/ast/ast.h **** 
 176:../../../platform/sam/drivers/ast/ast.h **** /**
 177:../../../platform/sam/drivers/ast/ast.h ****  * \brief The PSEL value to set the AST source clock (after the prescaler) to 1Hz,
 178:../../../platform/sam/drivers/ast/ast.h ****  * when using an external 32-kHz crystal.
 179:../../../platform/sam/drivers/ast/ast.h ****  */
 180:../../../platform/sam/drivers/ast/ast.h **** #define AST_PSEL_32KHZ_1HZ    14
 181:../../../platform/sam/drivers/ast/ast.h **** 
 182:../../../platform/sam/drivers/ast/ast.h **** /**
 183:../../../platform/sam/drivers/ast/ast.h ****  * \brief The PSEL value to set the AST source clock (after the prescaler)
 184:../../../platform/sam/drivers/ast/ast.h ****  * to 1.76Hz when using the internal RC oscillator (~ 115kHz)
 185:../../../platform/sam/drivers/ast/ast.h ****  */
 186:../../../platform/sam/drivers/ast/ast.h **** #define AST_PSEL_RC_1_76HZ    15
 187:../../../platform/sam/drivers/ast/ast.h **** 
 188:../../../platform/sam/drivers/ast/ast.h **** /* @} */
 189:../../../platform/sam/drivers/ast/ast.h **** 
 190:../../../platform/sam/drivers/ast/ast.h **** #if !defined(__DOXYGEN__)
 191:../../../platform/sam/drivers/ast/ast.h **** /** \internal Timeout to prevent code hang in clock initialization */
 192:../../../platform/sam/drivers/ast/ast.h **** #define AST_POLL_TIMEOUT 10000
 193:../../../platform/sam/drivers/ast/ast.h **** #endif /* !defined(__DOXYGEN__) */
 194:../../../platform/sam/drivers/ast/ast.h **** /** Description for Calendar Field.*/
 195:../../../platform/sam/drivers/ast/ast.h **** struct ast_calv {
 196:../../../platform/sam/drivers/ast/ast.h **** 	/** Seconds in the range 0 to 59. */
 197:../../../platform/sam/drivers/ast/ast.h **** 	uint32_t sec   : 6;
 198:../../../platform/sam/drivers/ast/ast.h **** 	/** Minutes in the range range 0 to 59. */
 199:../../../platform/sam/drivers/ast/ast.h **** 	uint32_t min   : 6;
 200:../../../platform/sam/drivers/ast/ast.h **** 	/** Hours in the range 0 to 23. */
 201:../../../platform/sam/drivers/ast/ast.h **** 	uint32_t hour  : 5;
 202:../../../platform/sam/drivers/ast/ast.h **** 	/** Day in the range 1 to 31. */
 203:../../../platform/sam/drivers/ast/ast.h **** 	uint32_t day   : 5;
 204:../../../platform/sam/drivers/ast/ast.h **** 	/** Month in the range 1 to 12. */
 205:../../../platform/sam/drivers/ast/ast.h **** 	uint32_t month : 4;
 206:../../../platform/sam/drivers/ast/ast.h **** 	/** Year in the range 0 to 63. */
 207:../../../platform/sam/drivers/ast/ast.h **** 	uint32_t year  : 6;
 208:../../../platform/sam/drivers/ast/ast.h **** };
 209:../../../platform/sam/drivers/ast/ast.h **** 
 210:../../../platform/sam/drivers/ast/ast.h **** /* Input when initializing AST in calendar mode. */
 211:../../../platform/sam/drivers/ast/ast.h **** struct ast_calendar {
 212:../../../platform/sam/drivers/ast/ast.h **** 	union {
 213:../../../platform/sam/drivers/ast/ast.h **** 		uint32_t field;
 214:../../../platform/sam/drivers/ast/ast.h **** 		/** Calendar. */
 215:../../../platform/sam/drivers/ast/ast.h **** 		struct ast_calv FIELD;
 216:../../../platform/sam/drivers/ast/ast.h **** 	};
 217:../../../platform/sam/drivers/ast/ast.h **** };
 218:../../../platform/sam/drivers/ast/ast.h **** 
 219:../../../platform/sam/drivers/ast/ast.h **** /** \ref ast_mode "AST Calendar Mode". */
 220:../../../platform/sam/drivers/ast/ast.h **** typedef enum ast_mode {
 221:../../../platform/sam/drivers/ast/ast.h **** 	/** Counter Mode. */
 222:../../../platform/sam/drivers/ast/ast.h **** 	AST_COUNTER_MODE  = 0,
 223:../../../platform/sam/drivers/ast/ast.h **** 	/** Calendar Mode. */
 224:../../../platform/sam/drivers/ast/ast.h **** 	AST_CALENDAR_MODE = 1,
 225:../../../platform/sam/drivers/ast/ast.h **** } ast_mode_t;
 226:../../../platform/sam/drivers/ast/ast.h **** 
 227:../../../platform/sam/drivers/ast/ast.h **** /** \ref ast_oscillator_type "AST Oscillator type". */
 228:../../../platform/sam/drivers/ast/ast.h **** typedef enum ast_oscillator_type {
 229:../../../platform/sam/drivers/ast/ast.h **** 	/** System RC oscillator (RCSYS). */
 230:../../../platform/sam/drivers/ast/ast.h **** 	AST_OSC_RC    = 0,
 231:../../../platform/sam/drivers/ast/ast.h **** 	/** 32kHz oscillator (OSC32 or RC32). */
 232:../../../platform/sam/drivers/ast/ast.h **** 	AST_OSC_32KHZ = 1,
 233:../../../platform/sam/drivers/ast/ast.h **** 	/** APB clock. */
 234:../../../platform/sam/drivers/ast/ast.h **** 	AST_OSC_PB    = 2,
 235:../../../platform/sam/drivers/ast/ast.h **** 	/** Generic clock (GCLK). */
 236:../../../platform/sam/drivers/ast/ast.h **** 	AST_OSC_GCLK  = 3,
 237:../../../platform/sam/drivers/ast/ast.h **** 	/** 1kHz clock from the 32kHz oscillator or 32kHz RC oscillator (CLK_1K). */
 238:../../../platform/sam/drivers/ast/ast.h **** 	AST_OSC_1KHZ  = 4,
 239:../../../platform/sam/drivers/ast/ast.h **** } ast_oscillator_type_t;
 240:../../../platform/sam/drivers/ast/ast.h **** 
 241:../../../platform/sam/drivers/ast/ast.h **** #if !defined(__DOXYGEN__)
 242:../../../platform/sam/drivers/ast/ast.h **** #define AST_INTERRUPT_SOURCE_NUM    5
 243:../../../platform/sam/drivers/ast/ast.h **** #endif /* !defined(__DOXYGEN__) */
 244:../../../platform/sam/drivers/ast/ast.h **** /** \ref ast_interrupt_source "AST interrupt source". */
 245:../../../platform/sam/drivers/ast/ast.h **** typedef enum ast_interrupt_source {
 246:../../../platform/sam/drivers/ast/ast.h **** 	/** Alarm interrupt. */
 247:../../../platform/sam/drivers/ast/ast.h **** 	AST_INTERRUPT_ALARM = 0,
 248:../../../platform/sam/drivers/ast/ast.h **** 	/** Periodic interrupt. */
 249:../../../platform/sam/drivers/ast/ast.h **** 	AST_INTERRUPT_PER,
 250:../../../platform/sam/drivers/ast/ast.h **** 	/** Overflow interrupt. */
 251:../../../platform/sam/drivers/ast/ast.h **** 	AST_INTERRUPT_OVF,
 252:../../../platform/sam/drivers/ast/ast.h **** 	/** Synchronization complete interrupt. */
 253:../../../platform/sam/drivers/ast/ast.h **** 	AST_INTERRUPT_READY,
 254:../../../platform/sam/drivers/ast/ast.h **** 	/** Clock synchronization complete interrupt. */
 255:../../../platform/sam/drivers/ast/ast.h **** 	AST_INTERRUPT_CLKREADY,
 256:../../../platform/sam/drivers/ast/ast.h **** } ast_interrupt_source_t;
 257:../../../platform/sam/drivers/ast/ast.h **** 
 258:../../../platform/sam/drivers/ast/ast.h **** /** \ref ast_wakeup_source "AST wake-up source". */
 259:../../../platform/sam/drivers/ast/ast.h **** typedef enum ast_wakeup_source {
 260:../../../platform/sam/drivers/ast/ast.h **** 	/** Alarm wake-up source. */
 261:../../../platform/sam/drivers/ast/ast.h **** 	AST_WAKEUP_ALARM = 0,
 262:../../../platform/sam/drivers/ast/ast.h **** 	/** Peripheral interrupt wake-up source. */
 263:../../../platform/sam/drivers/ast/ast.h **** 	AST_WAKEUP_PER,
 264:../../../platform/sam/drivers/ast/ast.h **** 	/** Counter overflow wake-up source. */
 265:../../../platform/sam/drivers/ast/ast.h **** 	AST_WAKEUP_OVF,
 266:../../../platform/sam/drivers/ast/ast.h **** } ast_wakeup_source_t;
 267:../../../platform/sam/drivers/ast/ast.h **** 
 268:../../../platform/sam/drivers/ast/ast.h **** /** \ref ast_event_source "AST event source". */
 269:../../../platform/sam/drivers/ast/ast.h **** typedef enum ast_event_source {
 270:../../../platform/sam/drivers/ast/ast.h **** 	/** Alarm event generation. */
 271:../../../platform/sam/drivers/ast/ast.h **** 	AST_EVENT_ALARM = 0,
 272:../../../platform/sam/drivers/ast/ast.h **** 	/** Peripheral event generation. */
 273:../../../platform/sam/drivers/ast/ast.h **** 	AST_EVENT_PER,
 274:../../../platform/sam/drivers/ast/ast.h **** 	/** Counter overflow event generation. */
 275:../../../platform/sam/drivers/ast/ast.h **** 	AST_EVENT_OVF,
 276:../../../platform/sam/drivers/ast/ast.h **** } ast_event_source_t;
 277:../../../platform/sam/drivers/ast/ast.h **** 
 278:../../../platform/sam/drivers/ast/ast.h **** /** AST configuration. */
 279:../../../platform/sam/drivers/ast/ast.h **** struct ast_config {
 280:../../../platform/sam/drivers/ast/ast.h **** 	/**
 281:../../../platform/sam/drivers/ast/ast.h **** 	 * Mode: Calendar Mode:
 282:../../../platform/sam/drivers/ast/ast.h **** 	 * \ref AST_CALENDAR_MODE or
 283:../../../platform/sam/drivers/ast/ast.h **** 	 * Counter Mode: \ref AST_COUNTER_MODE.
 284:../../../platform/sam/drivers/ast/ast.h **** 	 */
 285:../../../platform/sam/drivers/ast/ast.h **** 	ast_mode_t mode;
 286:../../../platform/sam/drivers/ast/ast.h **** 	/** Oscillator type. */
 287:../../../platform/sam/drivers/ast/ast.h **** 	ast_oscillator_type_t osc_type;
 288:../../../platform/sam/drivers/ast/ast.h **** 	/** Prescaler Value. */
 289:../../../platform/sam/drivers/ast/ast.h **** 	uint8_t psel;
 290:../../../platform/sam/drivers/ast/ast.h **** 	/** Initial counter Value. */
 291:../../../platform/sam/drivers/ast/ast.h **** 	uint32_t counter;
 292:../../../platform/sam/drivers/ast/ast.h **** 	/** Initial calendar Value. */
 293:../../../platform/sam/drivers/ast/ast.h **** 	struct ast_calendar calendar;
 294:../../../platform/sam/drivers/ast/ast.h **** };
 295:../../../platform/sam/drivers/ast/ast.h **** 
 296:../../../platform/sam/drivers/ast/ast.h **** /** AST interrupt callback. */
 297:../../../platform/sam/drivers/ast/ast.h **** typedef void (*ast_callback_t)(void);
 298:../../../platform/sam/drivers/ast/ast.h **** 
 299:../../../platform/sam/drivers/ast/ast.h **** bool ast_is_enabled(Ast *ast);
 300:../../../platform/sam/drivers/ast/ast.h **** 
 301:../../../platform/sam/drivers/ast/ast.h **** void ast_enable(Ast *ast);
 302:../../../platform/sam/drivers/ast/ast.h **** void ast_disable(Ast *ast);
 303:../../../platform/sam/drivers/ast/ast.h **** 
 304:../../../platform/sam/drivers/ast/ast.h **** uint32_t ast_set_config(Ast *ast, struct ast_config *ast_conf);
 305:../../../platform/sam/drivers/ast/ast.h **** void ast_set_callback(Ast *ast, ast_interrupt_source_t source,
 306:../../../platform/sam/drivers/ast/ast.h **** 		ast_callback_t callback, uint8_t irq_line, uint8_t irq_level);
 307:../../../platform/sam/drivers/ast/ast.h **** uint32_t ast_configure_digital_tuner(Ast *ast, uint32_t input_freq,
 308:../../../platform/sam/drivers/ast/ast.h **** 		uint32_t tuned_freq);
 309:../../../platform/sam/drivers/ast/ast.h **** void ast_init_digital_tuner(Ast *ast, bool add, uint8_t value,
 310:../../../platform/sam/drivers/ast/ast.h **** 		uint8_t exp);
 311:../../../platform/sam/drivers/ast/ast.h **** void ast_disable_digital_tuner(Ast *ast);
 312:../../../platform/sam/drivers/ast/ast.h **** 
 313:../../../platform/sam/drivers/ast/ast.h **** void ast_write_calendar_value(Ast *ast, struct ast_calendar calendar);
 314:../../../platform/sam/drivers/ast/ast.h **** struct ast_calendar ast_read_calendar_value(Ast *ast);
 315:../../../platform/sam/drivers/ast/ast.h **** void ast_write_counter_value(Ast *ast, uint32_t ast_counter);
 316:../../../platform/sam/drivers/ast/ast.h **** void ast_enable_counter_clear_on_alarm(Ast *ast, uint8_t alarm_channel);
 317:../../../platform/sam/drivers/ast/ast.h **** void ast_clear_prescalar(Ast *ast);
 318:../../../platform/sam/drivers/ast/ast.h **** 
 319:../../../platform/sam/drivers/ast/ast.h **** /**
 320:../../../platform/sam/drivers/ast/ast.h ****  * \brief Get the AST current counter value.
 321:../../../platform/sam/drivers/ast/ast.h ****  *
 322:../../../platform/sam/drivers/ast/ast.h ****  * \param[in] ast Module hardware register base address pointer
 323:../../../platform/sam/drivers/ast/ast.h ****  *
 324:../../../platform/sam/drivers/ast/ast.h ****  * \return AST current counter value.
 325:../../../platform/sam/drivers/ast/ast.h ****  */
 326:../../../platform/sam/drivers/ast/ast.h **** static inline uint32_t ast_read_counter_value(
 327:../../../platform/sam/drivers/ast/ast.h **** 		Ast *ast)
 328:../../../platform/sam/drivers/ast/ast.h **** {
 632              	 .loc 6 328 0
 633              	 .cfi_startproc
 634              	 
 635              	 
 636              	 
 637 0190 80B4     	 push {r7}
 638              	.LCFI44:
 639              	 .cfi_def_cfa_offset 4
 640              	 .cfi_offset 7,-4
 641 0192 83B0     	 sub sp,sp,#12
 642              	.LCFI45:
 643              	 .cfi_def_cfa_offset 16
 644 0194 00AF     	 add r7,sp,#0
 645              	.LCFI46:
 646              	 .cfi_def_cfa_register 7
 647 0196 7860     	 str r0,[r7,#4]
 329:../../../platform/sam/drivers/ast/ast.h **** 	return ast->AST_CV;
 648              	 .loc 6 329 0
 649 0198 7B68     	 ldr r3,[r7,#4]
 650 019a 5B68     	 ldr r3,[r3,#4]
 330:../../../platform/sam/drivers/ast/ast.h **** }
 651              	 .loc 6 330 0
 652 019c 1846     	 mov r0,r3
 653 019e 0C37     	 adds r7,r7,#12
 654              	.LCFI47:
 655              	 .cfi_def_cfa_offset 4
 656 01a0 BD46     	 mov sp,r7
 657              	.LCFI48:
 658              	 .cfi_def_cfa_register 13
 659              	 
 660 01a2 80BC     	 pop {r7}
 661              	.LCFI49:
 662              	 .cfi_restore 7
 663              	 .cfi_def_cfa_offset 0
 664 01a4 7047     	 bx lr
 665              	 .cfi_endproc
 666              	.LFE129:
 668              	 .align 1
 669              	 .syntax unified
 670              	 .thumb
 671              	 .thumb_func
 672              	 .fpu softvfp
 674              	osc_enable:
 675              	.LFB140:
 676              	 .file 7 "../../../platform/common/services/clock/sam4l/osc.h"
   1:../../../platform/common/services/clock/sam4l/osc.h **** /**
   2:../../../platform/common/services/clock/sam4l/osc.h ****  * \file
   3:../../../platform/common/services/clock/sam4l/osc.h ****  *
   4:../../../platform/common/services/clock/sam4l/osc.h ****  * \brief Chip-specific oscillator management functions
   5:../../../platform/common/services/clock/sam4l/osc.h ****  *
   6:../../../platform/common/services/clock/sam4l/osc.h ****  * Copyright (c) 2012 Atmel Corporation. All rights reserved.
   7:../../../platform/common/services/clock/sam4l/osc.h ****  *
   8:../../../platform/common/services/clock/sam4l/osc.h ****  * \asf_license_start
   9:../../../platform/common/services/clock/sam4l/osc.h ****  *
  10:../../../platform/common/services/clock/sam4l/osc.h ****  * \page License
  11:../../../platform/common/services/clock/sam4l/osc.h ****  *
  12:../../../platform/common/services/clock/sam4l/osc.h ****  * Redistribution and use in source and binary forms, with or without
  13:../../../platform/common/services/clock/sam4l/osc.h ****  * modification, are permitted provided that the following conditions are met:
  14:../../../platform/common/services/clock/sam4l/osc.h ****  *
  15:../../../platform/common/services/clock/sam4l/osc.h ****  * 1. Redistributions of source code must retain the above copyright notice,
  16:../../../platform/common/services/clock/sam4l/osc.h ****  *    this list of conditions and the following disclaimer.
  17:../../../platform/common/services/clock/sam4l/osc.h ****  *
  18:../../../platform/common/services/clock/sam4l/osc.h ****  * 2. Redistributions in binary form must reproduce the above copyright notice,
  19:../../../platform/common/services/clock/sam4l/osc.h ****  *    this list of conditions and the following disclaimer in the documentation
  20:../../../platform/common/services/clock/sam4l/osc.h ****  *    and/or other materials provided with the distribution.
  21:../../../platform/common/services/clock/sam4l/osc.h ****  *
  22:../../../platform/common/services/clock/sam4l/osc.h ****  * 3. The name of Atmel may not be used to endorse or promote products derived
  23:../../../platform/common/services/clock/sam4l/osc.h ****  *    from this software without specific prior written permission.
  24:../../../platform/common/services/clock/sam4l/osc.h ****  *
  25:../../../platform/common/services/clock/sam4l/osc.h ****  * 4. This software may only be redistributed and used in connection with an
  26:../../../platform/common/services/clock/sam4l/osc.h ****  *    Atmel microcontroller product.
  27:../../../platform/common/services/clock/sam4l/osc.h ****  *
  28:../../../platform/common/services/clock/sam4l/osc.h ****  * THIS SOFTWARE IS PROVIDED BY ATMEL "AS IS" AND ANY EXPRESS OR IMPLIED
  29:../../../platform/common/services/clock/sam4l/osc.h ****  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
  30:../../../platform/common/services/clock/sam4l/osc.h ****  * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE
  31:../../../platform/common/services/clock/sam4l/osc.h ****  * EXPRESSLY AND SPECIFICALLY DISCLAIMED. IN NO EVENT SHALL ATMEL BE LIABLE FOR
  32:../../../platform/common/services/clock/sam4l/osc.h ****  * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  33:../../../platform/common/services/clock/sam4l/osc.h ****  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
  34:../../../platform/common/services/clock/sam4l/osc.h ****  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
  35:../../../platform/common/services/clock/sam4l/osc.h ****  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
  36:../../../platform/common/services/clock/sam4l/osc.h ****  * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
  37:../../../platform/common/services/clock/sam4l/osc.h ****  * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  38:../../../platform/common/services/clock/sam4l/osc.h ****  * POSSIBILITY OF SUCH DAMAGE.
  39:../../../platform/common/services/clock/sam4l/osc.h ****  *
  40:../../../platform/common/services/clock/sam4l/osc.h ****  * \asf_license_stop
  41:../../../platform/common/services/clock/sam4l/osc.h ****  *
  42:../../../platform/common/services/clock/sam4l/osc.h ****  */
  43:../../../platform/common/services/clock/sam4l/osc.h **** #ifndef CHIP_OSC_H_INCLUDED
  44:../../../platform/common/services/clock/sam4l/osc.h **** #define CHIP_OSC_H_INCLUDED
  45:../../../platform/common/services/clock/sam4l/osc.h **** 
  46:../../../platform/common/services/clock/sam4l/osc.h **** #include <board.h>
  47:../../../platform/common/services/clock/sam4l/osc.h **** 
  48:../../../platform/common/services/clock/sam4l/osc.h **** #ifdef __cplusplus
  49:../../../platform/common/services/clock/sam4l/osc.h **** extern "C" {
  50:../../../platform/common/services/clock/sam4l/osc.h **** #endif
  51:../../../platform/common/services/clock/sam4l/osc.h **** 
  52:../../../platform/common/services/clock/sam4l/osc.h **** 
  53:../../../platform/common/services/clock/sam4l/osc.h **** /**
  54:../../../platform/common/services/clock/sam4l/osc.h ****  * \weakgroup osc_group
  55:../../../platform/common/services/clock/sam4l/osc.h ****  * @{
  56:../../../platform/common/services/clock/sam4l/osc.h ****  */
  57:../../../platform/common/services/clock/sam4l/osc.h **** 
  58:../../../platform/common/services/clock/sam4l/osc.h **** //! \name Oscillator identifiers
  59:../../../platform/common/services/clock/sam4l/osc.h **** //@{
  60:../../../platform/common/services/clock/sam4l/osc.h **** #define OSC_ID_OSC0             0       //!< External Oscillator 0
  61:../../../platform/common/services/clock/sam4l/osc.h **** #define OSC_ID_OSC32            1       //!< External 32 kHz oscillator
  62:../../../platform/common/services/clock/sam4l/osc.h **** #define OSC_ID_RC32K            2       //!< Internal 32 kHz RC oscillator
  63:../../../platform/common/services/clock/sam4l/osc.h **** #define OSC_ID_RC80M            3       //!< Internal 80 MHz RC oscillator
  64:../../../platform/common/services/clock/sam4l/osc.h **** #define OSC_ID_RCFAST           4       //!< Internal 4-8-12 MHz RCFAST oscillator
  65:../../../platform/common/services/clock/sam4l/osc.h **** #define OSC_ID_RC1M             5       //!< Internal 1 MHz RC oscillator
  66:../../../platform/common/services/clock/sam4l/osc.h **** #define OSC_ID_RCSYS            6       //!< Internal System RC oscillator
  67:../../../platform/common/services/clock/sam4l/osc.h **** //@}
  68:../../../platform/common/services/clock/sam4l/osc.h **** 
  69:../../../platform/common/services/clock/sam4l/osc.h **** //! \name OSC0 mode values
  70:../../../platform/common/services/clock/sam4l/osc.h **** //@{
  71:../../../platform/common/services/clock/sam4l/osc.h **** //! External clock connected to XIN
  72:../../../platform/common/services/clock/sam4l/osc.h **** #define OSC_MODE_EXTERNAL       0
  73:../../../platform/common/services/clock/sam4l/osc.h **** //! Crystal connected to XIN/XOUT
  74:../../../platform/common/services/clock/sam4l/osc.h **** #define OSC_MODE_XTAL           SCIF_OSCCTRL0_MODE
  75:../../../platform/common/services/clock/sam4l/osc.h **** //@}
  76:../../../platform/common/services/clock/sam4l/osc.h **** 
  77:../../../platform/common/services/clock/sam4l/osc.h **** //! \name OSC32 mode values
  78:../../../platform/common/services/clock/sam4l/osc.h **** //@{
  79:../../../platform/common/services/clock/sam4l/osc.h **** //! External clock connected to XIN32
  80:../../../platform/common/services/clock/sam4l/osc.h **** #define OSC32_MODE_EXTERNAL     BSCIF_OSCCTRL32_MODE(0)
  81:../../../platform/common/services/clock/sam4l/osc.h **** //! Crystal connected to XIN32/XOUT32
  82:../../../platform/common/services/clock/sam4l/osc.h **** #define OSC32_MODE_XTAL         BSCIF_OSCCTRL32_MODE(1)
  83:../../../platform/common/services/clock/sam4l/osc.h **** //! Crystal connected to XIN32/XOUT32 in high current mode
  84:../../../platform/common/services/clock/sam4l/osc.h **** #define OSC32_MODE_XTAL_HC      BSCIF_OSCCTRL32_MODE(4)
  85:../../../platform/common/services/clock/sam4l/osc.h **** //@}
  86:../../../platform/common/services/clock/sam4l/osc.h **** 
  87:../../../platform/common/services/clock/sam4l/osc.h **** //! \name OSC0 startup values
  88:../../../platform/common/services/clock/sam4l/osc.h **** //@{
  89:../../../platform/common/services/clock/sam4l/osc.h **** //! 0 cycles
  90:../../../platform/common/services/clock/sam4l/osc.h **** #define OSC_STARTUP_0           SCIF_OSCCTRL0_STARTUP(0)
  91:../../../platform/common/services/clock/sam4l/osc.h **** //! 64 cycles (560 us)
  92:../../../platform/common/services/clock/sam4l/osc.h **** #define OSC_STARTUP_64          SCIF_OSCCTRL0_STARTUP(1)
  93:../../../platform/common/services/clock/sam4l/osc.h **** //! 128 cycles (1.1 ms)
  94:../../../platform/common/services/clock/sam4l/osc.h **** #define OSC_STARTUP_128         SCIF_OSCCTRL0_STARTUP(2)
  95:../../../platform/common/services/clock/sam4l/osc.h **** //! 2048 cycles (18 ms)
  96:../../../platform/common/services/clock/sam4l/osc.h **** #define OSC_STARTUP_2048        SCIF_OSCCTRL0_STARTUP(3)
  97:../../../platform/common/services/clock/sam4l/osc.h **** //! 4096 cycles (36 ms)
  98:../../../platform/common/services/clock/sam4l/osc.h **** #define OSC_STARTUP_4096        SCIF_OSCCTRL0_STARTUP(4)
  99:../../../platform/common/services/clock/sam4l/osc.h **** //! 8192 cycles (71 ms)
 100:../../../platform/common/services/clock/sam4l/osc.h **** #define OSC_STARTUP_8192        SCIF_OSCCTRL0_STARTUP(5)
 101:../../../platform/common/services/clock/sam4l/osc.h **** //! 16384 cycles (143 ms)
 102:../../../platform/common/services/clock/sam4l/osc.h **** #define OSC_STARTUP_16384       SCIF_OSCCTRL0_STARTUP(6)
 103:../../../platform/common/services/clock/sam4l/osc.h **** //! 32768 cycles (285 ms)
 104:../../../platform/common/services/clock/sam4l/osc.h **** #define OSC_STARTUP_32768       SCIF_OSCCTRL0_STARTUP(7)
 105:../../../platform/common/services/clock/sam4l/osc.h **** //@}
 106:../../../platform/common/services/clock/sam4l/osc.h **** 
 107:../../../platform/common/services/clock/sam4l/osc.h **** //! \name OSC32 startup values
 108:../../../platform/common/services/clock/sam4l/osc.h **** //@{
 109:../../../platform/common/services/clock/sam4l/osc.h **** //! 0 cycles
 110:../../../platform/common/services/clock/sam4l/osc.h **** #define OSC32_STARTUP_0         BSCIF_OSCCTRL32_STARTUP(0)
 111:../../../platform/common/services/clock/sam4l/osc.h **** //! 128 cycles (1.1 ms)
 112:../../../platform/common/services/clock/sam4l/osc.h **** #define OSC32_STARTUP_128       BSCIF_OSCCTRL32_STARTUP(1)
 113:../../../platform/common/services/clock/sam4l/osc.h **** //! 8192 cycles (72.3 ms)
 114:../../../platform/common/services/clock/sam4l/osc.h **** #define OSC32_STARTUP_8192      BSCIF_OSCCTRL32_STARTUP(2)
 115:../../../platform/common/services/clock/sam4l/osc.h **** //! 16384 cycles (143 ms)
 116:../../../platform/common/services/clock/sam4l/osc.h **** #define OSC32_STARTUP_16384     BSCIF_OSCCTRL32_STARTUP(3)
 117:../../../platform/common/services/clock/sam4l/osc.h **** //! 65536 cycles (570 ms)
 118:../../../platform/common/services/clock/sam4l/osc.h **** #define OSC32_STARTUP_65536     BSCIF_OSCCTRL32_STARTUP(4)
 119:../../../platform/common/services/clock/sam4l/osc.h **** //! 131072 cycles (1.1 s)
 120:../../../platform/common/services/clock/sam4l/osc.h **** #define OSC32_STARTUP_131072    BSCIF_OSCCTRL32_STARTUP(5)
 121:../../../platform/common/services/clock/sam4l/osc.h **** //! 262144 cycles (2.3 s)
 122:../../../platform/common/services/clock/sam4l/osc.h **** #define OSC32_STARTUP_262144    BSCIF_OSCCTRL32_STARTUP(6)
 123:../../../platform/common/services/clock/sam4l/osc.h **** //! 524288 cycles (4.6 s)
 124:../../../platform/common/services/clock/sam4l/osc.h **** #define OSC32_STARTUP_524288    BSCIF_OSCCTRL32_STARTUP(7)
 125:../../../platform/common/services/clock/sam4l/osc.h **** //@}
 126:../../../platform/common/services/clock/sam4l/osc.h **** 
 127:../../../platform/common/services/clock/sam4l/osc.h **** /**
 128:../../../platform/common/services/clock/sam4l/osc.h ****  * \def OSC0_STARTUP_TIMEOUT
 129:../../../platform/common/services/clock/sam4l/osc.h ****  * \brief Number of slow clock cycles to wait for OSC0 to start
 130:../../../platform/common/services/clock/sam4l/osc.h ****  *
 131:../../../platform/common/services/clock/sam4l/osc.h ****  * This is the number of slow clock cycles corresponding to
 132:../../../platform/common/services/clock/sam4l/osc.h ****  * OSC0_STARTUP_VALUE with an additional 25% safety margin. If the
 133:../../../platform/common/services/clock/sam4l/osc.h ****  * oscillator isn't running when this timeout has expired, it is assumed
 134:../../../platform/common/services/clock/sam4l/osc.h ****  * to have failed to start.
 135:../../../platform/common/services/clock/sam4l/osc.h ****  */
 136:../../../platform/common/services/clock/sam4l/osc.h **** /**
 137:../../../platform/common/services/clock/sam4l/osc.h ****  * \def OSC0_MODE_VALUE
 138:../../../platform/common/services/clock/sam4l/osc.h ****  * \brief Board-dependent value written to the MODE bitfield of
 139:../../../platform/common/services/clock/sam4l/osc.h ****  * PM_OSCCTRL(0)
 140:../../../platform/common/services/clock/sam4l/osc.h ****  */
 141:../../../platform/common/services/clock/sam4l/osc.h **** /**
 142:../../../platform/common/services/clock/sam4l/osc.h ****  * \def OSC0_STARTUP_VALUE
 143:../../../platform/common/services/clock/sam4l/osc.h ****  * \brief Board-dependent value written to the STARTUP bitfield of
 144:../../../platform/common/services/clock/sam4l/osc.h ****  * PM_OSCCTRL(0)
 145:../../../platform/common/services/clock/sam4l/osc.h ****  */
 146:../../../platform/common/services/clock/sam4l/osc.h **** #if defined(BOARD_OSC0_STARTUP_US)
 147:../../../platform/common/services/clock/sam4l/osc.h **** #   if BOARD_OSC0_STARTUP_US == 0
 148:../../../platform/common/services/clock/sam4l/osc.h **** #      define OSC0_STARTUP_VALUE    OSC_STARTUP_0
 149:../../../platform/common/services/clock/sam4l/osc.h **** #      define OSC0_STARTUP_TIMEOUT  8
 150:../../../platform/common/services/clock/sam4l/osc.h **** #   elif BOARD_OSC0_STARTUP_US <= 557
 151:../../../platform/common/services/clock/sam4l/osc.h **** #      define OSC0_STARTUP_VALUE    OSC_STARTUP_64
 152:../../../platform/common/services/clock/sam4l/osc.h **** #      define OSC0_STARTUP_TIMEOUT  80
 153:../../../platform/common/services/clock/sam4l/osc.h **** #   elif BOARD_OSC0_STARTUP_US <= 1100
 154:../../../platform/common/services/clock/sam4l/osc.h **** #      define OSC0_STARTUP_VALUE    OSC_STARTUP_128
 155:../../../platform/common/services/clock/sam4l/osc.h **** #      define OSC0_STARTUP_TIMEOUT  160
 156:../../../platform/common/services/clock/sam4l/osc.h **** #   elif BOARD_OSC0_STARTUP_US <= 18000
 157:../../../platform/common/services/clock/sam4l/osc.h **** #      define OSC0_STARTUP_VALUE    OSC_STARTUP_2048
 158:../../../platform/common/services/clock/sam4l/osc.h **** #      define OSC0_STARTUP_TIMEOUT  2560
 159:../../../platform/common/services/clock/sam4l/osc.h **** #   elif BOARD_OSC0_STARTUP_US <= 36000
 160:../../../platform/common/services/clock/sam4l/osc.h **** #      define OSC0_STARTUP_VALUE    OSC_STARTUP_4096
 161:../../../platform/common/services/clock/sam4l/osc.h **** #      define OSC0_STARTUP_TIMEOUT  5120
 162:../../../platform/common/services/clock/sam4l/osc.h **** #   elif BOARD_OSC0_STARTUP_US <= 71000
 163:../../../platform/common/services/clock/sam4l/osc.h **** #      define OSC0_STARTUP_VALUE    OSC_STARTUP_8192
 164:../../../platform/common/services/clock/sam4l/osc.h **** #      define OSC0_STARTUP_TIMEOUT  10240
 165:../../../platform/common/services/clock/sam4l/osc.h **** #   elif BOARD_OSC0_STARTUP_US <= 143000
 166:../../../platform/common/services/clock/sam4l/osc.h **** #      define OSC0_STARTUP_VALUE    OSC_STARTUP_16384
 167:../../../platform/common/services/clock/sam4l/osc.h **** #      define OSC0_STARTUP_TIMEOUT  20480
 168:../../../platform/common/services/clock/sam4l/osc.h **** #   elif BOARD_OSC0_STARTUP_US <= 285000
 169:../../../platform/common/services/clock/sam4l/osc.h **** #      define OSC0_STARTUP_VALUE    OSC_STARTUP_32768
 170:../../../platform/common/services/clock/sam4l/osc.h **** #      define OSC0_STARTUP_TIMEOUT  40960
 171:../../../platform/common/services/clock/sam4l/osc.h **** #   else
 172:../../../platform/common/services/clock/sam4l/osc.h **** #      error BOARD_OSC0_STARTUP_US is too high
 173:../../../platform/common/services/clock/sam4l/osc.h **** #   endif
 174:../../../platform/common/services/clock/sam4l/osc.h **** #   if BOARD_OSC0_IS_XTAL == true
 175:../../../platform/common/services/clock/sam4l/osc.h **** #      define OSC0_MODE_VALUE       OSC_MODE_XTAL
 176:../../../platform/common/services/clock/sam4l/osc.h **** #      if BOARD_OSC0_HZ < 2000000
 177:../../../platform/common/services/clock/sam4l/osc.h **** #         define OSC0_GAIN_VALUE      SCIF_OSCCTRL0_GAIN(0)
 178:../../../platform/common/services/clock/sam4l/osc.h **** #      elif BOARD_OSC0_HZ < 4000000
 179:../../../platform/common/services/clock/sam4l/osc.h **** #         define OSC0_GAIN_VALUE      SCIF_OSCCTRL0_GAIN(1)
 180:../../../platform/common/services/clock/sam4l/osc.h **** #      elif BOARD_OSC0_HZ < 8000000
 181:../../../platform/common/services/clock/sam4l/osc.h **** #         define OSC0_GAIN_VALUE      SCIF_OSCCTRL0_GAIN(2)
 182:../../../platform/common/services/clock/sam4l/osc.h **** #      elif BOARD_OSC0_HZ < 16000000
 183:../../../platform/common/services/clock/sam4l/osc.h **** #         define OSC0_GAIN_VALUE      SCIF_OSCCTRL0_GAIN(3)
 184:../../../platform/common/services/clock/sam4l/osc.h **** #      else
 185:../../../platform/common/services/clock/sam4l/osc.h **** #         define OSC0_GAIN_VALUE      ((0x1u << 4) | SCIF_OSCCTRL0_GAIN(0))
 186:../../../platform/common/services/clock/sam4l/osc.h **** #      endif
 187:../../../platform/common/services/clock/sam4l/osc.h **** #   else
 188:../../../platform/common/services/clock/sam4l/osc.h **** #      define OSC0_MODE_VALUE       OSC_MODE_EXTERNAL
 189:../../../platform/common/services/clock/sam4l/osc.h **** #   endif
 190:../../../platform/common/services/clock/sam4l/osc.h **** #else
 191:../../../platform/common/services/clock/sam4l/osc.h **** #   if defined(BOARD_OSC0_HZ)
 192:../../../platform/common/services/clock/sam4l/osc.h **** #      error BOARD_OSC0_STARTUP_US must be defined by the board code
 193:../../../platform/common/services/clock/sam4l/osc.h **** #   endif
 194:../../../platform/common/services/clock/sam4l/osc.h **** #   ifdef __DOXYGEN__
 195:../../../platform/common/services/clock/sam4l/osc.h **** #      define OSC0_STARTUP_VALUE     UNDEFINED
 196:../../../platform/common/services/clock/sam4l/osc.h **** #      define OSC0_STARTUP_TIMEOUT   UNDEFINED
 197:../../../platform/common/services/clock/sam4l/osc.h **** #      define OSC0_MODE_VALUE        UNDEFINED
 198:../../../platform/common/services/clock/sam4l/osc.h **** #   endif
 199:../../../platform/common/services/clock/sam4l/osc.h **** #endif
 200:../../../platform/common/services/clock/sam4l/osc.h **** 
 201:../../../platform/common/services/clock/sam4l/osc.h **** #if defined(BOARD_OSC32_STARTUP_US)
 202:../../../platform/common/services/clock/sam4l/osc.h **** #   if BOARD_OSC32_STARTUP_US == 0
 203:../../../platform/common/services/clock/sam4l/osc.h **** #      define OSC32_STARTUP_VALUE    OSC32_STARTUP_0
 204:../../../platform/common/services/clock/sam4l/osc.h **** #   elif BOARD_OSC32_STARTUP_US   <= 1100
 205:../../../platform/common/services/clock/sam4l/osc.h **** #      define OSC32_STARTUP_VALUE    OSC32_STARTUP_128
 206:../../../platform/common/services/clock/sam4l/osc.h **** #   elif BOARD_OSC32_STARTUP_US   <= 72300
 207:../../../platform/common/services/clock/sam4l/osc.h **** #      define OSC32_STARTUP_VALUE    OSC32_STARTUP_8192
 208:../../../platform/common/services/clock/sam4l/osc.h **** #   elif BOARD_OSC32_STARTUP_US   <= 143000
 209:../../../platform/common/services/clock/sam4l/osc.h **** #      define OSC32_STARTUP_VALUE    OSC32_STARTUP_16384
 210:../../../platform/common/services/clock/sam4l/osc.h **** #   elif BOARD_OSC32_STARTUP_US   <= 570000
 211:../../../platform/common/services/clock/sam4l/osc.h **** #      define OSC32_STARTUP_VALUE    OSC32_STARTUP_65536
 212:../../../platform/common/services/clock/sam4l/osc.h **** #   elif BOARD_OSC32_STARTUP_US   <= 1100000
 213:../../../platform/common/services/clock/sam4l/osc.h **** #      define OSC32_STARTUP_VALUE    OSC32_STARTUP_131072
 214:../../../platform/common/services/clock/sam4l/osc.h **** #   elif BOARD_OSC32_STARTUP_US   <= 2300000
 215:../../../platform/common/services/clock/sam4l/osc.h **** #      define OSC32_STARTUP_VALUE    OSC32_STARTUP_262144
 216:../../../platform/common/services/clock/sam4l/osc.h **** #   elif BOARD_OSC32_STARTUP_US   <= 4600000
 217:../../../platform/common/services/clock/sam4l/osc.h **** #      define OSC32_STARTUP_VALUE    OSC32_STARTUP_524288
 218:../../../platform/common/services/clock/sam4l/osc.h **** #   else
 219:../../../platform/common/services/clock/sam4l/osc.h **** #      error BOARD_OSC32_STARTUP_US is too high
 220:../../../platform/common/services/clock/sam4l/osc.h **** #   endif
 221:../../../platform/common/services/clock/sam4l/osc.h **** #   if BOARD_OSC32_IS_XTAL == true
 222:../../../platform/common/services/clock/sam4l/osc.h **** #      define OSC32_MODE_VALUE       OSC32_MODE_XTAL
 223:../../../platform/common/services/clock/sam4l/osc.h **** #   else
 224:../../../platform/common/services/clock/sam4l/osc.h **** #      define OSC32_MODE_VALUE       OSC32_MODE_EXTERNAL
 225:../../../platform/common/services/clock/sam4l/osc.h **** #   endif
 226:../../../platform/common/services/clock/sam4l/osc.h **** #else
 227:../../../platform/common/services/clock/sam4l/osc.h **** #   if defined(BOARD_OSC32_HZ)
 228:../../../platform/common/services/clock/sam4l/osc.h **** #      error BOARD_OSC32_STARTUP_US must be defined by the board code
 229:../../../platform/common/services/clock/sam4l/osc.h **** #   endif
 230:../../../platform/common/services/clock/sam4l/osc.h **** #   ifdef __DOXYGEN__
 231:../../../platform/common/services/clock/sam4l/osc.h **** #      define OSC32_STARTUP_VALUE     UNDEFINED
 232:../../../platform/common/services/clock/sam4l/osc.h **** #      define OSC32_STARTUP_TIMEOUT   UNDEFINED
 233:../../../platform/common/services/clock/sam4l/osc.h **** #      define OSC32_MODE_VALUE        UNDEFINED
 234:../../../platform/common/services/clock/sam4l/osc.h **** #   endif
 235:../../../platform/common/services/clock/sam4l/osc.h **** #endif
 236:../../../platform/common/services/clock/sam4l/osc.h **** 
 237:../../../platform/common/services/clock/sam4l/osc.h **** // Use 4 MHz frequency range for RCFAST oscillator if config was empty.
 238:../../../platform/common/services/clock/sam4l/osc.h **** #ifndef CONFIG_RCFAST_FRANGE
 239:../../../platform/common/services/clock/sam4l/osc.h **** #define CONFIG_RCFAST_FRANGE    0
 240:../../../platform/common/services/clock/sam4l/osc.h **** #endif
 241:../../../platform/common/services/clock/sam4l/osc.h **** 
 242:../../../platform/common/services/clock/sam4l/osc.h **** /**
 243:../../../platform/common/services/clock/sam4l/osc.h ****  * \name Board-specific configuration parameters
 244:../../../platform/common/services/clock/sam4l/osc.h ****  * The following definitions must be provided by the board code for all
 245:../../../platform/common/services/clock/sam4l/osc.h ****  * working oscillators on the board.
 246:../../../platform/common/services/clock/sam4l/osc.h ****  */
 247:../../../platform/common/services/clock/sam4l/osc.h **** //@{
 248:../../../platform/common/services/clock/sam4l/osc.h **** /**
 249:../../../platform/common/services/clock/sam4l/osc.h ****  * \def BOARD_OSC0_HZ
 250:../../../platform/common/services/clock/sam4l/osc.h ****  * \brief Clock frequency of OSC0 in Hz
 251:../../../platform/common/services/clock/sam4l/osc.h ****  */
 252:../../../platform/common/services/clock/sam4l/osc.h **** /**
 253:../../../platform/common/services/clock/sam4l/osc.h ****  * \def BOARD_OSC0_STARTUP_US
 254:../../../platform/common/services/clock/sam4l/osc.h ****  * \brief Startup time of OSC0 in microseconds
 255:../../../platform/common/services/clock/sam4l/osc.h ****  */
 256:../../../platform/common/services/clock/sam4l/osc.h **** /**
 257:../../../platform/common/services/clock/sam4l/osc.h ****  * \def BOARD_OSC0_IS_XTAL
 258:../../../platform/common/services/clock/sam4l/osc.h ****  * \brief OSC0 uses a crystal, not an external clock
 259:../../../platform/common/services/clock/sam4l/osc.h ****  */
 260:../../../platform/common/services/clock/sam4l/osc.h **** /**
 261:../../../platform/common/services/clock/sam4l/osc.h ****  * \def BOARD_OSC32_HZ
 262:../../../platform/common/services/clock/sam4l/osc.h ****  * \brief Clock frequency of OSC32 in Hz
 263:../../../platform/common/services/clock/sam4l/osc.h ****  */
 264:../../../platform/common/services/clock/sam4l/osc.h **** /**
 265:../../../platform/common/services/clock/sam4l/osc.h ****  * \def BOARD_OSC32_STARTUP_US
 266:../../../platform/common/services/clock/sam4l/osc.h ****  * \brief Startup time of OSC32 in microseconds
 267:../../../platform/common/services/clock/sam4l/osc.h ****  */
 268:../../../platform/common/services/clock/sam4l/osc.h **** /**
 269:../../../platform/common/services/clock/sam4l/osc.h ****  * \def BOARD_OSC32_IS_XTAL
 270:../../../platform/common/services/clock/sam4l/osc.h ****  * \brief OSC32 uses a crystal, not an external clock
 271:../../../platform/common/services/clock/sam4l/osc.h ****  */
 272:../../../platform/common/services/clock/sam4l/osc.h **** /**
 273:../../../platform/common/services/clock/sam4l/osc.h ****  * \def BOARD_OSC32_SELCURR
 274:../../../platform/common/services/clock/sam4l/osc.h ****  * \brief Crystal current selection for OSC32
 275:../../../platform/common/services/clock/sam4l/osc.h ****  *
 276:../../../platform/common/services/clock/sam4l/osc.h ****  * If not defined, the recommended value (300nA) are used.
 277:../../../platform/common/services/clock/sam4l/osc.h ****  */
 278:../../../platform/common/services/clock/sam4l/osc.h **** #ifndef BOARD_OSC32_SELCURR
 279:../../../platform/common/services/clock/sam4l/osc.h **** #   define BOARD_OSC32_SELCURR     BSCIF_OSCCTRL32_SELCURR(10)
 280:../../../platform/common/services/clock/sam4l/osc.h **** #endif
 281:../../../platform/common/services/clock/sam4l/osc.h **** 
 282:../../../platform/common/services/clock/sam4l/osc.h **** /**
 283:../../../platform/common/services/clock/sam4l/osc.h ****  * \name RC oscillator frequency limits
 284:../../../platform/common/services/clock/sam4l/osc.h ****  * The frequency of the internal RC oscillators may drift a bit as a
 285:../../../platform/common/services/clock/sam4l/osc.h ****  * result of temperature changes. These definitions provide upper and
 286:../../../platform/common/services/clock/sam4l/osc.h ****  * lower limits which may be used to calculate upper and lower limits of
 287:../../../platform/common/services/clock/sam4l/osc.h ****  * timeouts, derived clock frequencies, etc.
 288:../../../platform/common/services/clock/sam4l/osc.h ****  */
 289:../../../platform/common/services/clock/sam4l/osc.h **** //@{
 290:../../../platform/common/services/clock/sam4l/osc.h **** //! Nominal frequency of RCSYS in Hz
 291:../../../platform/common/services/clock/sam4l/osc.h **** #define OSC_RCSYS_NOMINAL_HZ    115000
 292:../../../platform/common/services/clock/sam4l/osc.h **** //! Minimum frequency of RCSYS in Hz
 293:../../../platform/common/services/clock/sam4l/osc.h **** #define OSC_RCSYS_MIN_HZ        100000
 294:../../../platform/common/services/clock/sam4l/osc.h **** //! Maximum frequency of RCSYS in Hz
 295:../../../platform/common/services/clock/sam4l/osc.h **** #define OSC_RCSYS_MAX_HZ        120000
 296:../../../platform/common/services/clock/sam4l/osc.h **** 
 297:../../../platform/common/services/clock/sam4l/osc.h **** //! Nominal frequency of RC32K in Hz
 298:../../../platform/common/services/clock/sam4l/osc.h **** #define OSC_RC32K_NOMINAL_HZ    32768
 299:../../../platform/common/services/clock/sam4l/osc.h **** //! Minimum frequency of RC32K in Hz
 300:../../../platform/common/services/clock/sam4l/osc.h **** #define OSC_RC32K_MIN_HZ        20000
 301:../../../platform/common/services/clock/sam4l/osc.h **** //! Maximum frequency of RC32K in Hz
 302:../../../platform/common/services/clock/sam4l/osc.h **** #define OSC_RC32K_MAX_HZ        44000
 303:../../../platform/common/services/clock/sam4l/osc.h **** 
 304:../../../platform/common/services/clock/sam4l/osc.h **** //! Nominal frequency of RC80M in Hz
 305:../../../platform/common/services/clock/sam4l/osc.h **** #define OSC_RC80M_NOMINAL_HZ    80000000
 306:../../../platform/common/services/clock/sam4l/osc.h **** 
 307:../../../platform/common/services/clock/sam4l/osc.h **** //! Nominal frequency of RCFAST4M in Hz
 308:../../../platform/common/services/clock/sam4l/osc.h **** #define OSC_RCFAST4M_NOMINAL_HZ 4000000
 309:../../../platform/common/services/clock/sam4l/osc.h **** 
 310:../../../platform/common/services/clock/sam4l/osc.h **** //! Nominal frequency of RCFAST8M in Hz
 311:../../../platform/common/services/clock/sam4l/osc.h **** #define OSC_RCFAST8M_NOMINAL_HZ 8000000
 312:../../../platform/common/services/clock/sam4l/osc.h **** 
 313:../../../platform/common/services/clock/sam4l/osc.h **** //! Nominal frequency of RCFAST12M in Hz
 314:../../../platform/common/services/clock/sam4l/osc.h **** #define OSC_RCFAST12M_NOMINAL_HZ 12000000
 315:../../../platform/common/services/clock/sam4l/osc.h **** 
 316:../../../platform/common/services/clock/sam4l/osc.h **** //! Nominal frequency of RC1M in Hz
 317:../../../platform/common/services/clock/sam4l/osc.h **** #define OSC_RC1M_NOMINAL_HZ     1000000
 318:../../../platform/common/services/clock/sam4l/osc.h **** //@}
 319:../../../platform/common/services/clock/sam4l/osc.h **** 
 320:../../../platform/common/services/clock/sam4l/osc.h **** #ifndef __ASSEMBLY__
 321:../../../platform/common/services/clock/sam4l/osc.h **** 
 322:../../../platform/common/services/clock/sam4l/osc.h **** #include <compiler.h>
 323:../../../platform/common/services/clock/sam4l/osc.h **** 
 324:../../../platform/common/services/clock/sam4l/osc.h **** extern void osc_priv_enable_osc0(void);
 325:../../../platform/common/services/clock/sam4l/osc.h **** extern void osc_priv_disable_osc0(void);
 326:../../../platform/common/services/clock/sam4l/osc.h **** extern void osc_priv_enable_osc32(void);
 327:../../../platform/common/services/clock/sam4l/osc.h **** extern void osc_priv_disable_osc32(void);
 328:../../../platform/common/services/clock/sam4l/osc.h **** extern void osc_priv_enable_rc32k(void);
 329:../../../platform/common/services/clock/sam4l/osc.h **** extern void osc_priv_disable_rc32k(void);
 330:../../../platform/common/services/clock/sam4l/osc.h **** extern void osc_priv_enable_rc80m(void);
 331:../../../platform/common/services/clock/sam4l/osc.h **** extern void osc_priv_disable_rc80m(void);
 332:../../../platform/common/services/clock/sam4l/osc.h **** extern void osc_priv_enable_rcfast(void);
 333:../../../platform/common/services/clock/sam4l/osc.h **** extern void osc_priv_disable_rcfast(void);
 334:../../../platform/common/services/clock/sam4l/osc.h **** extern void osc_priv_enable_rc1m(void);
 335:../../../platform/common/services/clock/sam4l/osc.h **** extern void osc_priv_disable_rc1m(void);
 336:../../../platform/common/services/clock/sam4l/osc.h **** 
 337:../../../platform/common/services/clock/sam4l/osc.h **** static inline void osc_enable(uint8_t id)
 338:../../../platform/common/services/clock/sam4l/osc.h **** {
 677              	 .loc 7 338 0
 678              	 .cfi_startproc
 679              	 
 680              	 
 681 01a6 80B5     	 push {r7,lr}
 682              	.LCFI50:
 683              	 .cfi_def_cfa_offset 8
 684              	 .cfi_offset 7,-8
 685              	 .cfi_offset 14,-4
 686 01a8 82B0     	 sub sp,sp,#8
 687              	.LCFI51:
 688              	 .cfi_def_cfa_offset 16
 689 01aa 00AF     	 add r7,sp,#0
 690              	.LCFI52:
 691              	 .cfi_def_cfa_register 7
 692 01ac 0346     	 mov r3,r0
 693 01ae FB71     	 strb r3,[r7,#7]
 339:../../../platform/common/services/clock/sam4l/osc.h **** 	switch (id) {
 694              	 .loc 7 339 0
 695 01b0 FB79     	 ldrb r3,[r7,#7]
 696 01b2 062B     	 cmp r3,#6
 697 01b4 22D8     	 bhi .L48
 698 01b6 01A2     	 adr r2,.L40
 699 01b8 52F823F0 	 ldr pc,[r2,r3,lsl#2]
 700              	 .p2align 2
 701              	.L40:
 702 01bc D9010000 	 .word .L39+1
 703 01c0 DF010000 	 .word .L41+1
 704 01c4 E5010000 	 .word .L42+1
 705 01c8 EB010000 	 .word .L43+1
 706 01cc F1010000 	 .word .L44+1
 707 01d0 F7010000 	 .word .L45+1
 708 01d4 FD010000 	 .word .L48+1
 709              	 .p2align 1
 710              	.L39:
 340:../../../platform/common/services/clock/sam4l/osc.h **** #ifdef BOARD_OSC0_HZ
 341:../../../platform/common/services/clock/sam4l/osc.h **** 	case OSC_ID_OSC0:
 342:../../../platform/common/services/clock/sam4l/osc.h **** 		osc_priv_enable_osc0();
 711              	 .loc 7 342 0
 712 01d8 0B4B     	 ldr r3,.L49
 713 01da 9847     	 blx r3
 714              	.LVL1:
 343:../../../platform/common/services/clock/sam4l/osc.h **** 		break;
 715              	 .loc 7 343 0
 716 01dc 0FE0     	 b .L47
 717              	.L41:
 344:../../../platform/common/services/clock/sam4l/osc.h **** #endif
 345:../../../platform/common/services/clock/sam4l/osc.h **** 
 346:../../../platform/common/services/clock/sam4l/osc.h **** #ifdef BOARD_OSC32_HZ
 347:../../../platform/common/services/clock/sam4l/osc.h **** 	case OSC_ID_OSC32:
 348:../../../platform/common/services/clock/sam4l/osc.h **** 		osc_priv_enable_osc32();
 718              	 .loc 7 348 0
 719 01de 0B4B     	 ldr r3,.L49+4
 720 01e0 9847     	 blx r3
 721              	.LVL2:
 349:../../../platform/common/services/clock/sam4l/osc.h **** 		break;
 722              	 .loc 7 349 0
 723 01e2 0CE0     	 b .L47
 724              	.L42:
 350:../../../platform/common/services/clock/sam4l/osc.h **** #endif
 351:../../../platform/common/services/clock/sam4l/osc.h **** 
 352:../../../platform/common/services/clock/sam4l/osc.h **** 	case OSC_ID_RC32K:
 353:../../../platform/common/services/clock/sam4l/osc.h **** 		osc_priv_enable_rc32k();
 725              	 .loc 7 353 0
 726 01e4 0A4B     	 ldr r3,.L49+8
 727 01e6 9847     	 blx r3
 728              	.LVL3:
 354:../../../platform/common/services/clock/sam4l/osc.h **** 		break;
 729              	 .loc 7 354 0
 730 01e8 09E0     	 b .L47
 731              	.L43:
 355:../../../platform/common/services/clock/sam4l/osc.h **** 
 356:../../../platform/common/services/clock/sam4l/osc.h **** 	case OSC_ID_RC80M:
 357:../../../platform/common/services/clock/sam4l/osc.h **** 		osc_priv_enable_rc80m();
 732              	 .loc 7 357 0
 733 01ea 0A4B     	 ldr r3,.L49+12
 734 01ec 9847     	 blx r3
 735              	.LVL4:
 358:../../../platform/common/services/clock/sam4l/osc.h **** 		break;
 736              	 .loc 7 358 0
 737 01ee 06E0     	 b .L47
 738              	.L44:
 359:../../../platform/common/services/clock/sam4l/osc.h **** 
 360:../../../platform/common/services/clock/sam4l/osc.h **** 	case OSC_ID_RCFAST:
 361:../../../platform/common/services/clock/sam4l/osc.h **** 		osc_priv_enable_rcfast();
 739              	 .loc 7 361 0
 740 01f0 094B     	 ldr r3,.L49+16
 741 01f2 9847     	 blx r3
 742              	.LVL5:
 362:../../../platform/common/services/clock/sam4l/osc.h **** 		break;
 743              	 .loc 7 362 0
 744 01f4 03E0     	 b .L47
 745              	.L45:
 363:../../../platform/common/services/clock/sam4l/osc.h **** 
 364:../../../platform/common/services/clock/sam4l/osc.h **** 	case OSC_ID_RC1M:
 365:../../../platform/common/services/clock/sam4l/osc.h **** 		osc_priv_enable_rc1m();
 746              	 .loc 7 365 0
 747 01f6 094B     	 ldr r3,.L49+20
 748 01f8 9847     	 blx r3
 749              	.LVL6:
 366:../../../platform/common/services/clock/sam4l/osc.h **** 		break;
 750              	 .loc 7 366 0
 751 01fa 00E0     	 b .L47
 752              	.L48:
 367:../../../platform/common/services/clock/sam4l/osc.h **** 
 368:../../../platform/common/services/clock/sam4l/osc.h **** 	case OSC_ID_RCSYS:
 369:../../../platform/common/services/clock/sam4l/osc.h **** 		/* RCSYS is always running */
 370:../../../platform/common/services/clock/sam4l/osc.h **** 		break;
 371:../../../platform/common/services/clock/sam4l/osc.h **** 
 372:../../../platform/common/services/clock/sam4l/osc.h **** 	default:
 373:../../../platform/common/services/clock/sam4l/osc.h **** 		/* unhandled_case(id); */
 374:../../../platform/common/services/clock/sam4l/osc.h **** 		break;
 753              	 .loc 7 374 0
 754 01fc 00BF     	 nop
 755              	.L47:
 375:../../../platform/common/services/clock/sam4l/osc.h **** 	}
 376:../../../platform/common/services/clock/sam4l/osc.h **** }
 756              	 .loc 7 376 0
 757 01fe 00BF     	 nop
 758 0200 0837     	 adds r7,r7,#8
 759              	.LCFI53:
 760              	 .cfi_def_cfa_offset 8
 761 0202 BD46     	 mov sp,r7
 762              	.LCFI54:
 763              	 .cfi_def_cfa_register 13
 764              	 
 765 0204 80BD     	 pop {r7,pc}
 766              	.L50:
 767 0206 00BF     	 .align 2
 768              	.L49:
 769 0208 00000000 	 .word osc_priv_enable_osc0
 770 020c 00000000 	 .word osc_priv_enable_osc32
 771 0210 00000000 	 .word osc_priv_enable_rc32k
 772 0214 00000000 	 .word osc_priv_enable_rc80m
 773 0218 00000000 	 .word osc_priv_enable_rcfast
 774 021c 00000000 	 .word osc_priv_enable_rc1m
 775              	 .cfi_endproc
 776              	.LFE140:
 778              	 .align 1
 779              	 .syntax unified
 780              	 .thumb
 781              	 .thumb_func
 782              	 .fpu softvfp
 784              	osc_is_ready:
 785              	.LFB142:
 377:../../../platform/common/services/clock/sam4l/osc.h **** 
 378:../../../platform/common/services/clock/sam4l/osc.h **** static inline void osc_disable(uint8_t id)
 379:../../../platform/common/services/clock/sam4l/osc.h **** {
 380:../../../platform/common/services/clock/sam4l/osc.h **** 	switch (id) {
 381:../../../platform/common/services/clock/sam4l/osc.h **** #ifdef BOARD_OSC0_HZ
 382:../../../platform/common/services/clock/sam4l/osc.h **** 	case OSC_ID_OSC0:
 383:../../../platform/common/services/clock/sam4l/osc.h **** 		osc_priv_disable_osc0();
 384:../../../platform/common/services/clock/sam4l/osc.h **** 		break;
 385:../../../platform/common/services/clock/sam4l/osc.h **** #endif
 386:../../../platform/common/services/clock/sam4l/osc.h **** 
 387:../../../platform/common/services/clock/sam4l/osc.h **** #ifdef BOARD_OSC32_HZ
 388:../../../platform/common/services/clock/sam4l/osc.h **** 	case OSC_ID_OSC32:
 389:../../../platform/common/services/clock/sam4l/osc.h **** 		osc_priv_disable_osc32();
 390:../../../platform/common/services/clock/sam4l/osc.h **** 		break;
 391:../../../platform/common/services/clock/sam4l/osc.h **** #endif
 392:../../../platform/common/services/clock/sam4l/osc.h **** 
 393:../../../platform/common/services/clock/sam4l/osc.h **** 	case OSC_ID_RC32K:
 394:../../../platform/common/services/clock/sam4l/osc.h **** 		osc_priv_disable_rc32k();
 395:../../../platform/common/services/clock/sam4l/osc.h **** 		break;
 396:../../../platform/common/services/clock/sam4l/osc.h **** 
 397:../../../platform/common/services/clock/sam4l/osc.h **** 	case OSC_ID_RC80M:
 398:../../../platform/common/services/clock/sam4l/osc.h **** 		osc_priv_disable_rc80m();
 399:../../../platform/common/services/clock/sam4l/osc.h **** 		break;
 400:../../../platform/common/services/clock/sam4l/osc.h **** 
 401:../../../platform/common/services/clock/sam4l/osc.h **** 	case OSC_ID_RCFAST:
 402:../../../platform/common/services/clock/sam4l/osc.h **** 		osc_priv_disable_rcfast();
 403:../../../platform/common/services/clock/sam4l/osc.h **** 		break;
 404:../../../platform/common/services/clock/sam4l/osc.h **** 
 405:../../../platform/common/services/clock/sam4l/osc.h **** 	case OSC_ID_RC1M:
 406:../../../platform/common/services/clock/sam4l/osc.h **** 		osc_priv_disable_rc1m();
 407:../../../platform/common/services/clock/sam4l/osc.h **** 		break;
 408:../../../platform/common/services/clock/sam4l/osc.h **** 
 409:../../../platform/common/services/clock/sam4l/osc.h **** 	case OSC_ID_RCSYS:
 410:../../../platform/common/services/clock/sam4l/osc.h **** 		/* RCSYS is always running */
 411:../../../platform/common/services/clock/sam4l/osc.h **** 		break;
 412:../../../platform/common/services/clock/sam4l/osc.h **** 
 413:../../../platform/common/services/clock/sam4l/osc.h **** 	default:
 414:../../../platform/common/services/clock/sam4l/osc.h **** 		/* unhandled_case(id); */
 415:../../../platform/common/services/clock/sam4l/osc.h **** 		break;
 416:../../../platform/common/services/clock/sam4l/osc.h **** 	}
 417:../../../platform/common/services/clock/sam4l/osc.h **** }
 418:../../../platform/common/services/clock/sam4l/osc.h **** 
 419:../../../platform/common/services/clock/sam4l/osc.h **** static inline bool osc_is_ready(uint8_t id)
 420:../../../platform/common/services/clock/sam4l/osc.h **** {
 786              	 .loc 7 420 0
 787              	 .cfi_startproc
 788              	 
 789              	 
 790              	 
 791 0220 80B4     	 push {r7}
 792              	.LCFI55:
 793              	 .cfi_def_cfa_offset 4
 794              	 .cfi_offset 7,-4
 795 0222 83B0     	 sub sp,sp,#12
 796              	.LCFI56:
 797              	 .cfi_def_cfa_offset 16
 798 0224 00AF     	 add r7,sp,#0
 799              	.LCFI57:
 800              	 .cfi_def_cfa_register 7
 801 0226 0346     	 mov r3,r0
 802 0228 FB71     	 strb r3,[r7,#7]
 421:../../../platform/common/services/clock/sam4l/osc.h **** 	switch (id) {
 803              	 .loc 7 421 0
 804 022a FB79     	 ldrb r3,[r7,#7]
 805 022c 062B     	 cmp r3,#6
 806 022e 4FD8     	 bhi .L52
 807 0230 01A2     	 adr r2,.L54
 808 0232 52F823F0 	 ldr pc,[r2,r3,lsl#2]
 809 0236 00BF     	 .p2align 2
 810              	.L54:
 811 0238 55020000 	 .word .L53+1
 812 023c 69020000 	 .word .L55+1
 813 0240 7D020000 	 .word .L56+1
 814 0244 91020000 	 .word .L57+1
 815 0248 A5020000 	 .word .L58+1
 816 024c B9020000 	 .word .L59+1
 817 0250 CD020000 	 .word .L60+1
 818              	 .p2align 1
 819              	.L53:
 422:../../../platform/common/services/clock/sam4l/osc.h **** #ifdef BOARD_OSC0_HZ
 423:../../../platform/common/services/clock/sam4l/osc.h **** 	case OSC_ID_OSC0:
 424:../../../platform/common/services/clock/sam4l/osc.h **** 		return !!(SCIF->SCIF_PCLKSR & SCIF_PCLKSR_OSC0RDY);
 820              	 .loc 7 424 0
 821 0254 214B     	 ldr r3,.L62
 822 0256 5B69     	 ldr r3,[r3,#20]
 823 0258 03F00103 	 and r3,r3,#1
 824 025c 002B     	 cmp r3,#0
 825 025e 14BF     	 ite ne
 826 0260 0123     	 movne r3,#1
 827 0262 0023     	 moveq r3,#0
 828 0264 DBB2     	 uxtb r3,r3
 829 0266 34E0     	 b .L61
 830              	.L55:
 425:../../../platform/common/services/clock/sam4l/osc.h **** #endif
 426:../../../platform/common/services/clock/sam4l/osc.h **** 
 427:../../../platform/common/services/clock/sam4l/osc.h **** #ifdef BOARD_OSC32_HZ
 428:../../../platform/common/services/clock/sam4l/osc.h **** 	case OSC_ID_OSC32:
 429:../../../platform/common/services/clock/sam4l/osc.h **** 		return !!(BSCIF->BSCIF_PCLKSR & BSCIF_PCLKSR_OSC32RDY);
 831              	 .loc 7 429 0
 832 0268 1D4B     	 ldr r3,.L62+4
 833 026a 5B69     	 ldr r3,[r3,#20]
 834 026c 03F00103 	 and r3,r3,#1
 835 0270 002B     	 cmp r3,#0
 836 0272 14BF     	 ite ne
 837 0274 0123     	 movne r3,#1
 838 0276 0023     	 moveq r3,#0
 839 0278 DBB2     	 uxtb r3,r3
 840 027a 2AE0     	 b .L61
 841              	.L56:
 430:../../../platform/common/services/clock/sam4l/osc.h **** #endif
 431:../../../platform/common/services/clock/sam4l/osc.h **** 
 432:../../../platform/common/services/clock/sam4l/osc.h **** 	case OSC_ID_RC32K:
 433:../../../platform/common/services/clock/sam4l/osc.h **** 		return !!(BSCIF->BSCIF_RC32KCR & (BSCIF_RC32KCR_EN));
 842              	 .loc 7 433 0
 843 027c 184B     	 ldr r3,.L62+4
 844 027e 5B6A     	 ldr r3,[r3,#36]
 845 0280 03F00103 	 and r3,r3,#1
 846 0284 002B     	 cmp r3,#0
 847 0286 14BF     	 ite ne
 848 0288 0123     	 movne r3,#1
 849 028a 0023     	 moveq r3,#0
 850 028c DBB2     	 uxtb r3,r3
 851 028e 20E0     	 b .L61
 852              	.L57:
 434:../../../platform/common/services/clock/sam4l/osc.h **** 
 435:../../../platform/common/services/clock/sam4l/osc.h **** 	case OSC_ID_RC80M:
 436:../../../platform/common/services/clock/sam4l/osc.h **** 		return !!(SCIF->SCIF_RC80MCR & (SCIF_RC80MCR_EN));
 853              	 .loc 7 436 0
 854 0290 124B     	 ldr r3,.L62
 855 0292 1B6D     	 ldr r3,[r3,#80]
 856 0294 03F00103 	 and r3,r3,#1
 857 0298 002B     	 cmp r3,#0
 858 029a 14BF     	 ite ne
 859 029c 0123     	 movne r3,#1
 860 029e 0023     	 moveq r3,#0
 861 02a0 DBB2     	 uxtb r3,r3
 862 02a2 16E0     	 b .L61
 863              	.L58:
 437:../../../platform/common/services/clock/sam4l/osc.h **** 
 438:../../../platform/common/services/clock/sam4l/osc.h **** 	case OSC_ID_RCFAST:
 439:../../../platform/common/services/clock/sam4l/osc.h **** 		return !!(SCIF->SCIF_RCFASTCFG & (SCIF_RCFASTCFG_EN));
 864              	 .loc 7 439 0
 865 02a4 0D4B     	 ldr r3,.L62
 866 02a6 9B6C     	 ldr r3,[r3,#72]
 867 02a8 03F00103 	 and r3,r3,#1
 868 02ac 002B     	 cmp r3,#0
 869 02ae 14BF     	 ite ne
 870 02b0 0123     	 movne r3,#1
 871 02b2 0023     	 moveq r3,#0
 872 02b4 DBB2     	 uxtb r3,r3
 873 02b6 0CE0     	 b .L61
 874              	.L59:
 440:../../../platform/common/services/clock/sam4l/osc.h **** 
 441:../../../platform/common/services/clock/sam4l/osc.h **** 	case OSC_ID_RC1M:
 442:../../../platform/common/services/clock/sam4l/osc.h **** 		return !!(BSCIF->BSCIF_RC1MCR & (BSCIF_RC1MCR_CLKOE));
 875              	 .loc 7 442 0
 876 02b8 094B     	 ldr r3,.L62+4
 877 02ba 9B6D     	 ldr r3,[r3,#88]
 878 02bc 03F00103 	 and r3,r3,#1
 879 02c0 002B     	 cmp r3,#0
 880 02c2 14BF     	 ite ne
 881 02c4 0123     	 movne r3,#1
 882 02c6 0023     	 moveq r3,#0
 883 02c8 DBB2     	 uxtb r3,r3
 884 02ca 02E0     	 b .L61
 885              	.L60:
 443:../../../platform/common/services/clock/sam4l/osc.h **** 
 444:../../../platform/common/services/clock/sam4l/osc.h **** 	case OSC_ID_RCSYS:
 445:../../../platform/common/services/clock/sam4l/osc.h **** 		/* RCSYS is always ready */
 446:../../../platform/common/services/clock/sam4l/osc.h **** 		return true;
 886              	 .loc 7 446 0
 887 02cc 0123     	 movs r3,#1
 888 02ce 00E0     	 b .L61
 889              	.L52:
 447:../../../platform/common/services/clock/sam4l/osc.h **** 
 448:../../../platform/common/services/clock/sam4l/osc.h **** 	default:
 449:../../../platform/common/services/clock/sam4l/osc.h **** 		/* unhandled_case(id); */
 450:../../../platform/common/services/clock/sam4l/osc.h **** 		return false;
 890              	 .loc 7 450 0
 891 02d0 0023     	 movs r3,#0
 892              	.L61:
 451:../../../platform/common/services/clock/sam4l/osc.h **** 	}
 452:../../../platform/common/services/clock/sam4l/osc.h **** }
 893              	 .loc 7 452 0
 894 02d2 1846     	 mov r0,r3
 895 02d4 0C37     	 adds r7,r7,#12
 896              	.LCFI58:
 897              	 .cfi_def_cfa_offset 4
 898 02d6 BD46     	 mov sp,r7
 899              	.LCFI59:
 900              	 .cfi_def_cfa_register 13
 901              	 
 902 02d8 80BC     	 pop {r7}
 903              	.LCFI60:
 904              	 .cfi_restore 7
 905              	 .cfi_def_cfa_offset 0
 906 02da 7047     	 bx lr
 907              	.L63:
 908              	 .align 2
 909              	.L62:
 910 02dc 00080E40 	 .word 1074661376
 911 02e0 00040F40 	 .word 1074725888
 912              	 .cfi_endproc
 913              	.LFE142:
 915              	 .align 1
 916              	 .syntax unified
 917              	 .thumb
 918              	 .thumb_func
 919              	 .fpu softvfp
 921              	osc_wait_ready:
 922              	.LFB144:
 923              	 .file 8 "../../../platform/common/services/clock/osc.h"
   1:../../../platform/common/services/clock/osc.h **** /**
   2:../../../platform/common/services/clock/osc.h ****  * \file
   3:../../../platform/common/services/clock/osc.h ****  *
   4:../../../platform/common/services/clock/osc.h ****  * \brief Oscillator management
   5:../../../platform/common/services/clock/osc.h ****  *
   6:../../../platform/common/services/clock/osc.h ****  * Copyright (c) 2010-2014 Atmel Corporation. All rights reserved.
   7:../../../platform/common/services/clock/osc.h ****  *
   8:../../../platform/common/services/clock/osc.h ****  * \asf_license_start
   9:../../../platform/common/services/clock/osc.h ****  *
  10:../../../platform/common/services/clock/osc.h ****  * \page License
  11:../../../platform/common/services/clock/osc.h ****  *
  12:../../../platform/common/services/clock/osc.h ****  * Redistribution and use in source and binary forms, with or without
  13:../../../platform/common/services/clock/osc.h ****  * modification, are permitted provided that the following conditions are met:
  14:../../../platform/common/services/clock/osc.h ****  *
  15:../../../platform/common/services/clock/osc.h ****  * 1. Redistributions of source code must retain the above copyright notice,
  16:../../../platform/common/services/clock/osc.h ****  *    this list of conditions and the following disclaimer.
  17:../../../platform/common/services/clock/osc.h ****  *
  18:../../../platform/common/services/clock/osc.h ****  * 2. Redistributions in binary form must reproduce the above copyright notice,
  19:../../../platform/common/services/clock/osc.h ****  *    this list of conditions and the following disclaimer in the documentation
  20:../../../platform/common/services/clock/osc.h ****  *    and/or other materials provided with the distribution.
  21:../../../platform/common/services/clock/osc.h ****  *
  22:../../../platform/common/services/clock/osc.h ****  * 3. The name of Atmel may not be used to endorse or promote products derived
  23:../../../platform/common/services/clock/osc.h ****  *    from this software without specific prior written permission.
  24:../../../platform/common/services/clock/osc.h ****  *
  25:../../../platform/common/services/clock/osc.h ****  * 4. This software may only be redistributed and used in connection with an
  26:../../../platform/common/services/clock/osc.h ****  *    Atmel microcontroller product.
  27:../../../platform/common/services/clock/osc.h ****  *
  28:../../../platform/common/services/clock/osc.h ****  * THIS SOFTWARE IS PROVIDED BY ATMEL "AS IS" AND ANY EXPRESS OR IMPLIED
  29:../../../platform/common/services/clock/osc.h ****  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
  30:../../../platform/common/services/clock/osc.h ****  * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE
  31:../../../platform/common/services/clock/osc.h ****  * EXPRESSLY AND SPECIFICALLY DISCLAIMED. IN NO EVENT SHALL ATMEL BE LIABLE FOR
  32:../../../platform/common/services/clock/osc.h ****  * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  33:../../../platform/common/services/clock/osc.h ****  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
  34:../../../platform/common/services/clock/osc.h ****  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
  35:../../../platform/common/services/clock/osc.h ****  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
  36:../../../platform/common/services/clock/osc.h ****  * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
  37:../../../platform/common/services/clock/osc.h ****  * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  38:../../../platform/common/services/clock/osc.h ****  * POSSIBILITY OF SUCH DAMAGE.
  39:../../../platform/common/services/clock/osc.h ****  *
  40:../../../platform/common/services/clock/osc.h ****  * \asf_license_stop
  41:../../../platform/common/services/clock/osc.h ****  *
  42:../../../platform/common/services/clock/osc.h ****  */
  43:../../../platform/common/services/clock/osc.h **** #ifndef OSC_H_INCLUDED
  44:../../../platform/common/services/clock/osc.h **** #define OSC_H_INCLUDED
  45:../../../platform/common/services/clock/osc.h **** 
  46:../../../platform/common/services/clock/osc.h **** #include "parts.h"
  47:../../../platform/common/services/clock/osc.h **** #include "conf_clock.h"
  48:../../../platform/common/services/clock/osc.h **** 
  49:../../../platform/common/services/clock/osc.h **** #if SAM3S
  50:../../../platform/common/services/clock/osc.h **** # include "sam3s/osc.h"
  51:../../../platform/common/services/clock/osc.h **** #elif SAM3XA
  52:../../../platform/common/services/clock/osc.h **** # include "sam3x/osc.h"
  53:../../../platform/common/services/clock/osc.h **** #elif SAM3U
  54:../../../platform/common/services/clock/osc.h **** # include "sam3u/osc.h"
  55:../../../platform/common/services/clock/osc.h **** #elif SAM3N
  56:../../../platform/common/services/clock/osc.h **** # include "sam3n/osc.h"
  57:../../../platform/common/services/clock/osc.h **** #elif SAM4S
  58:../../../platform/common/services/clock/osc.h **** # include "sam4s/osc.h"
  59:../../../platform/common/services/clock/osc.h **** #elif SAM4E
  60:../../../platform/common/services/clock/osc.h **** # include "sam4e/osc.h"
  61:../../../platform/common/services/clock/osc.h **** #elif SAM4C
  62:../../../platform/common/services/clock/osc.h **** # include "sam4c/osc.h"
  63:../../../platform/common/services/clock/osc.h **** #elif SAM4CM
  64:../../../platform/common/services/clock/osc.h **** # include "sam4cm/osc.h"
  65:../../../platform/common/services/clock/osc.h **** #elif SAM4CP
  66:../../../platform/common/services/clock/osc.h **** # include "sam4cp/osc.h"
  67:../../../platform/common/services/clock/osc.h **** #elif SAM4L
  68:../../../platform/common/services/clock/osc.h **** # include "sam4l/osc.h"
  69:../../../platform/common/services/clock/osc.h **** #elif SAM4N
  70:../../../platform/common/services/clock/osc.h **** # include "sam4n/osc.h"
  71:../../../platform/common/services/clock/osc.h **** #elif SAMG
  72:../../../platform/common/services/clock/osc.h **** # include "samg/osc.h"
  73:../../../platform/common/services/clock/osc.h **** #elif (UC3A0 || UC3A1)
  74:../../../platform/common/services/clock/osc.h **** # include "uc3a0_a1/osc.h"
  75:../../../platform/common/services/clock/osc.h **** #elif UC3A3
  76:../../../platform/common/services/clock/osc.h **** # include "uc3a3_a4/osc.h"
  77:../../../platform/common/services/clock/osc.h **** #elif UC3B
  78:../../../platform/common/services/clock/osc.h **** # include "uc3b0_b1/osc.h"
  79:../../../platform/common/services/clock/osc.h **** #elif UC3C
  80:../../../platform/common/services/clock/osc.h **** # include "uc3c/osc.h"
  81:../../../platform/common/services/clock/osc.h **** #elif UC3D
  82:../../../platform/common/services/clock/osc.h **** # include "uc3d/osc.h"
  83:../../../platform/common/services/clock/osc.h **** #elif UC3L
  84:../../../platform/common/services/clock/osc.h **** # include "uc3l/osc.h"
  85:../../../platform/common/services/clock/osc.h **** #elif XMEGA
  86:../../../platform/common/services/clock/osc.h **** # include "xmega/osc.h"
  87:../../../platform/common/services/clock/osc.h **** #else
  88:../../../platform/common/services/clock/osc.h **** # error Unsupported chip type
  89:../../../platform/common/services/clock/osc.h **** #endif
  90:../../../platform/common/services/clock/osc.h **** 
  91:../../../platform/common/services/clock/osc.h **** /**
  92:../../../platform/common/services/clock/osc.h ****  * \ingroup clk_group
  93:../../../platform/common/services/clock/osc.h ****  * \defgroup osc_group Oscillator Management
  94:../../../platform/common/services/clock/osc.h ****  *
  95:../../../platform/common/services/clock/osc.h ****  * This group contains functions and definitions related to configuring
  96:../../../platform/common/services/clock/osc.h ****  * and enabling/disabling on-chip oscillators. Internal RC-oscillators,
  97:../../../platform/common/services/clock/osc.h ****  * external crystal oscillators and external clock generators are
  98:../../../platform/common/services/clock/osc.h ****  * supported by this module. What all of these have in common is that
  99:../../../platform/common/services/clock/osc.h ****  * they swing at a fixed, nominal frequency which is normally not
 100:../../../platform/common/services/clock/osc.h ****  * adjustable.
 101:../../../platform/common/services/clock/osc.h ****  *
 102:../../../platform/common/services/clock/osc.h ****  * \par Example: Enabling an oscillator
 103:../../../platform/common/services/clock/osc.h ****  *
 104:../../../platform/common/services/clock/osc.h ****  * The following example demonstrates how to enable the external
 105:../../../platform/common/services/clock/osc.h ****  * oscillator on XMEGA A and wait for it to be ready to use. The
 106:../../../platform/common/services/clock/osc.h ****  * oscillator identifiers are platform-specific, so while the same
 107:../../../platform/common/services/clock/osc.h ****  * procedure is used on all platforms, the parameter to osc_enable()
 108:../../../platform/common/services/clock/osc.h ****  * will be different from device to device.
 109:../../../platform/common/services/clock/osc.h ****  * \code
 110:../../../platform/common/services/clock/osc.h **** 	osc_enable(OSC_ID_XOSC);
 111:../../../platform/common/services/clock/osc.h **** 	osc_wait_ready(OSC_ID_XOSC); \endcode
 112:../../../platform/common/services/clock/osc.h ****  *
 113:../../../platform/common/services/clock/osc.h ****  * \section osc_group_board Board-specific Definitions
 114:../../../platform/common/services/clock/osc.h ****  * If external oscillators are used, the board code must provide the
 115:../../../platform/common/services/clock/osc.h ****  * following definitions for each of those:
 116:../../../platform/common/services/clock/osc.h ****  *   - \b BOARD_<osc name>_HZ: The nominal frequency of the oscillator.
 117:../../../platform/common/services/clock/osc.h ****  *   - \b BOARD_<osc name>_STARTUP_US: The startup time of the
 118:../../../platform/common/services/clock/osc.h ****  *     oscillator in microseconds.
 119:../../../platform/common/services/clock/osc.h ****  *   - \b BOARD_<osc name>_TYPE: The type of oscillator connected, i.e.
 120:../../../platform/common/services/clock/osc.h ****  *     whether it's a crystal or external clock, and sometimes what kind
 121:../../../platform/common/services/clock/osc.h ****  *     of crystal it is. The meaning of this value is platform-specific.
 122:../../../platform/common/services/clock/osc.h ****  *
 123:../../../platform/common/services/clock/osc.h ****  * @{
 124:../../../platform/common/services/clock/osc.h ****  */
 125:../../../platform/common/services/clock/osc.h **** 
 126:../../../platform/common/services/clock/osc.h **** //! \name Oscillator Management
 127:../../../platform/common/services/clock/osc.h **** //@{
 128:../../../platform/common/services/clock/osc.h **** /**
 129:../../../platform/common/services/clock/osc.h ****  * \fn void osc_enable(uint8_t id)
 130:../../../platform/common/services/clock/osc.h ****  * \brief Enable oscillator \a id
 131:../../../platform/common/services/clock/osc.h ****  *
 132:../../../platform/common/services/clock/osc.h ****  * The startup time and mode value is automatically determined based on
 133:../../../platform/common/services/clock/osc.h ****  * definitions in the board code.
 134:../../../platform/common/services/clock/osc.h ****  */
 135:../../../platform/common/services/clock/osc.h **** /**
 136:../../../platform/common/services/clock/osc.h ****  * \fn void osc_disable(uint8_t id)
 137:../../../platform/common/services/clock/osc.h ****  * \brief Disable oscillator \a id
 138:../../../platform/common/services/clock/osc.h ****  */
 139:../../../platform/common/services/clock/osc.h **** /**
 140:../../../platform/common/services/clock/osc.h ****  * \fn osc_is_ready(uint8_t id)
 141:../../../platform/common/services/clock/osc.h ****  * \brief Determine whether oscillator \a id is ready.
 142:../../../platform/common/services/clock/osc.h ****  * \retval true Oscillator \a id is running and ready to use as a clock
 143:../../../platform/common/services/clock/osc.h ****  * source.
 144:../../../platform/common/services/clock/osc.h ****  * \retval false Oscillator \a id is not running.
 145:../../../platform/common/services/clock/osc.h ****  */
 146:../../../platform/common/services/clock/osc.h **** /**
 147:../../../platform/common/services/clock/osc.h ****  * \fn uint32_t osc_get_rate(uint8_t id)
 148:../../../platform/common/services/clock/osc.h ****  * \brief Return the frequency of oscillator \a id in Hz
 149:../../../platform/common/services/clock/osc.h ****  */
 150:../../../platform/common/services/clock/osc.h **** 
 151:../../../platform/common/services/clock/osc.h **** #ifndef __ASSEMBLY__
 152:../../../platform/common/services/clock/osc.h **** 
 153:../../../platform/common/services/clock/osc.h **** /**
 154:../../../platform/common/services/clock/osc.h ****  * \brief Wait until the oscillator identified by \a id is ready
 155:../../../platform/common/services/clock/osc.h ****  *
 156:../../../platform/common/services/clock/osc.h ****  * This function will busy-wait for the oscillator identified by \a id
 157:../../../platform/common/services/clock/osc.h ****  * to become stable and ready to use as a clock source.
 158:../../../platform/common/services/clock/osc.h ****  *
 159:../../../platform/common/services/clock/osc.h ****  * \param id A number identifying the oscillator to wait for.
 160:../../../platform/common/services/clock/osc.h ****  */
 161:../../../platform/common/services/clock/osc.h **** static inline void osc_wait_ready(uint8_t id)
 162:../../../platform/common/services/clock/osc.h **** {
 924              	 .loc 8 162 0
 925              	 .cfi_startproc
 926              	 
 927              	 
 928 02e4 80B5     	 push {r7,lr}
 929              	.LCFI61:
 930              	 .cfi_def_cfa_offset 8
 931              	 .cfi_offset 7,-8
 932              	 .cfi_offset 14,-4
 933 02e6 82B0     	 sub sp,sp,#8
 934              	.LCFI62:
 935              	 .cfi_def_cfa_offset 16
 936 02e8 00AF     	 add r7,sp,#0
 937              	.LCFI63:
 938              	 .cfi_def_cfa_register 7
 939 02ea 0346     	 mov r3,r0
 940 02ec FB71     	 strb r3,[r7,#7]
 163:../../../platform/common/services/clock/osc.h **** 	while (!osc_is_ready(id)) {
 941              	 .loc 8 163 0
 942 02ee 00BF     	 nop
 943              	.L65:
 944              	 .loc 8 163 0 is_stmt 0 discriminator 1
 945 02f0 FB79     	 ldrb r3,[r7,#7]
 946 02f2 1846     	 mov r0,r3
 947 02f4 FFF794FF 	 bl osc_is_ready
 948 02f8 0346     	 mov r3,r0
 949 02fa 83F00103 	 eor r3,r3,#1
 950 02fe DBB2     	 uxtb r3,r3
 951 0300 002B     	 cmp r3,#0
 952 0302 F5D1     	 bne .L65
 164:../../../platform/common/services/clock/osc.h **** 		/* Do nothing */
 165:../../../platform/common/services/clock/osc.h **** 	}
 166:../../../platform/common/services/clock/osc.h **** }
 953              	 .loc 8 166 0 is_stmt 1
 954 0304 00BF     	 nop
 955 0306 0837     	 adds r7,r7,#8
 956              	.LCFI64:
 957              	 .cfi_def_cfa_offset 8
 958 0308 BD46     	 mov sp,r7
 959              	.LCFI65:
 960              	 .cfi_def_cfa_register 13
 961              	 
 962 030a 80BD     	 pop {r7,pc}
 963              	 .cfi_endproc
 964              	.LFE144:
 966              	 .comm ast_alarm,4,4
 967              	 .comm ast_counter,4,4
 968              	 .align 1
 969              	 .syntax unified
 970              	 .thumb
 971              	 .thumb_func
 972              	 .fpu softvfp
 974              	ast_alarm_callback:
 975              	.LFB145:
 976              	 .file 9 "../../../stack/LwMesh/TDMA/services/sleep_mgr/sam4l/sleep_mgr.c"
   1:../../../stack/LwMesh/TDMA/services/sleep_mgr/sam4l/sleep_mgr.c **** /**
   2:../../../stack/LwMesh/TDMA/services/sleep_mgr/sam4l/sleep_mgr.c ****  * @file sleep_mgr.c
   3:../../../stack/LwMesh/TDMA/services/sleep_mgr/sam4l/sleep_mgr.c ****  *
   4:../../../stack/LwMesh/TDMA/services/sleep_mgr/sam4l/sleep_mgr.c ****  * @brief
   5:../../../stack/LwMesh/TDMA/services/sleep_mgr/sam4l/sleep_mgr.c ****  *
   6:../../../stack/LwMesh/TDMA/services/sleep_mgr/sam4l/sleep_mgr.c ****  * Copyright (C) 2014 Atmel Corporation. All rights reserved.
   7:../../../stack/LwMesh/TDMA/services/sleep_mgr/sam4l/sleep_mgr.c ****  *
   8:../../../stack/LwMesh/TDMA/services/sleep_mgr/sam4l/sleep_mgr.c ****  * \asf_license_start
   9:../../../stack/LwMesh/TDMA/services/sleep_mgr/sam4l/sleep_mgr.c ****  *
  10:../../../stack/LwMesh/TDMA/services/sleep_mgr/sam4l/sleep_mgr.c ****  * Redistribution and use in source and binary forms, with or without
  11:../../../stack/LwMesh/TDMA/services/sleep_mgr/sam4l/sleep_mgr.c ****  * modification, are permitted provided that the following conditions are met:
  12:../../../stack/LwMesh/TDMA/services/sleep_mgr/sam4l/sleep_mgr.c ****  *
  13:../../../stack/LwMesh/TDMA/services/sleep_mgr/sam4l/sleep_mgr.c ****  * 1. Redistributions of source code must retain the above copyright notice,
  14:../../../stack/LwMesh/TDMA/services/sleep_mgr/sam4l/sleep_mgr.c ****  *    this list of conditions and the following disclaimer.
  15:../../../stack/LwMesh/TDMA/services/sleep_mgr/sam4l/sleep_mgr.c ****  *
  16:../../../stack/LwMesh/TDMA/services/sleep_mgr/sam4l/sleep_mgr.c ****  * 2. Redistributions in binary form must reproduce the above copyright notice,
  17:../../../stack/LwMesh/TDMA/services/sleep_mgr/sam4l/sleep_mgr.c ****  *    this list of conditions and the following disclaimer in the documentation
  18:../../../stack/LwMesh/TDMA/services/sleep_mgr/sam4l/sleep_mgr.c ****  *    and/or other materials provided with the distribution.
  19:../../../stack/LwMesh/TDMA/services/sleep_mgr/sam4l/sleep_mgr.c ****  *
  20:../../../stack/LwMesh/TDMA/services/sleep_mgr/sam4l/sleep_mgr.c ****  * 3. The name of Atmel may not be used to endorse or promote products derived
  21:../../../stack/LwMesh/TDMA/services/sleep_mgr/sam4l/sleep_mgr.c ****  *    from this software without specific prior written permission.
  22:../../../stack/LwMesh/TDMA/services/sleep_mgr/sam4l/sleep_mgr.c ****  *
  23:../../../stack/LwMesh/TDMA/services/sleep_mgr/sam4l/sleep_mgr.c ****  * 4. This software may only be redistributed and used in connection with an
  24:../../../stack/LwMesh/TDMA/services/sleep_mgr/sam4l/sleep_mgr.c ****  *    Atmel microcontroller product.
  25:../../../stack/LwMesh/TDMA/services/sleep_mgr/sam4l/sleep_mgr.c ****  *
  26:../../../stack/LwMesh/TDMA/services/sleep_mgr/sam4l/sleep_mgr.c ****  * THIS SOFTWARE IS PROVIDED BY ATMEL "AS IS" AND ANY EXPRESS OR IMPLIED
  27:../../../stack/LwMesh/TDMA/services/sleep_mgr/sam4l/sleep_mgr.c ****  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
  28:../../../stack/LwMesh/TDMA/services/sleep_mgr/sam4l/sleep_mgr.c ****  * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE
  29:../../../stack/LwMesh/TDMA/services/sleep_mgr/sam4l/sleep_mgr.c ****  * EXPRESSLY AND SPECIFICALLY DISCLAIMED. IN NO EVENT SHALL ATMEL BE LIABLE FOR
  30:../../../stack/LwMesh/TDMA/services/sleep_mgr/sam4l/sleep_mgr.c ****  * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  31:../../../stack/LwMesh/TDMA/services/sleep_mgr/sam4l/sleep_mgr.c ****  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
  32:../../../stack/LwMesh/TDMA/services/sleep_mgr/sam4l/sleep_mgr.c ****  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
  33:../../../stack/LwMesh/TDMA/services/sleep_mgr/sam4l/sleep_mgr.c ****  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
  34:../../../stack/LwMesh/TDMA/services/sleep_mgr/sam4l/sleep_mgr.c ****  * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
  35:../../../stack/LwMesh/TDMA/services/sleep_mgr/sam4l/sleep_mgr.c ****  * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  36:../../../stack/LwMesh/TDMA/services/sleep_mgr/sam4l/sleep_mgr.c ****  * POSSIBILITY OF SUCH DAMAGE.
  37:../../../stack/LwMesh/TDMA/services/sleep_mgr/sam4l/sleep_mgr.c ****  *
  38:../../../stack/LwMesh/TDMA/services/sleep_mgr/sam4l/sleep_mgr.c ****  * \asf_license_stop
  39:../../../stack/LwMesh/TDMA/services/sleep_mgr/sam4l/sleep_mgr.c ****  *
  40:../../../stack/LwMesh/TDMA/services/sleep_mgr/sam4l/sleep_mgr.c ****  *
  41:../../../stack/LwMesh/TDMA/services/sleep_mgr/sam4l/sleep_mgr.c ****  */
  42:../../../stack/LwMesh/TDMA/services/sleep_mgr/sam4l/sleep_mgr.c **** 
  43:../../../stack/LwMesh/TDMA/services/sleep_mgr/sam4l/sleep_mgr.c **** /*
  44:../../../stack/LwMesh/TDMA/services/sleep_mgr/sam4l/sleep_mgr.c ****  * Copyright (c) 2014, Atmel Corporation All rights reserved.
  45:../../../stack/LwMesh/TDMA/services/sleep_mgr/sam4l/sleep_mgr.c ****  *
  46:../../../stack/LwMesh/TDMA/services/sleep_mgr/sam4l/sleep_mgr.c ****  * Licensed under Atmel's Limited License Agreement --> EULA.txt
  47:../../../stack/LwMesh/TDMA/services/sleep_mgr/sam4l/sleep_mgr.c ****  */
  48:../../../stack/LwMesh/TDMA/services/sleep_mgr/sam4l/sleep_mgr.c **** 
  49:../../../stack/LwMesh/TDMA/services/sleep_mgr/sam4l/sleep_mgr.c **** #include "sleep_mgr.h"
  50:../../../stack/LwMesh/TDMA/services/sleep_mgr/sam4l/sleep_mgr.c **** #include "sleepmgr.h"
  51:../../../stack/LwMesh/TDMA/services/sleep_mgr/sam4l/sleep_mgr.c **** #include "conf_sleepmgr.h"
  52:../../../stack/LwMesh/TDMA/services/sleep_mgr/sam4l/sleep_mgr.c **** #include "ast.h"
  53:../../../stack/LwMesh/TDMA/services/sleep_mgr/sam4l/sleep_mgr.c **** #include "osc.h"
  54:../../../stack/LwMesh/TDMA/services/sleep_mgr/sam4l/sleep_mgr.c **** 
  55:../../../stack/LwMesh/TDMA/services/sleep_mgr/sam4l/sleep_mgr.c **** uint32_t ast_alarm, ast_counter;
  56:../../../stack/LwMesh/TDMA/services/sleep_mgr/sam4l/sleep_mgr.c **** 
  57:../../../stack/LwMesh/TDMA/services/sleep_mgr/sam4l/sleep_mgr.c **** /**
  58:../../../stack/LwMesh/TDMA/services/sleep_mgr/sam4l/sleep_mgr.c ****  * \brief Callback handler for AST alarm Interrupt.
  59:../../../stack/LwMesh/TDMA/services/sleep_mgr/sam4l/sleep_mgr.c ****  */
  60:../../../stack/LwMesh/TDMA/services/sleep_mgr/sam4l/sleep_mgr.c **** static void ast_alarm_callback(void)
  61:../../../stack/LwMesh/TDMA/services/sleep_mgr/sam4l/sleep_mgr.c **** {
 977              	 .loc 9 61 0
 978              	 .cfi_startproc
 979              	 
 980              	 
 981 030c 80B5     	 push {r7,lr}
 982              	.LCFI66:
 983              	 .cfi_def_cfa_offset 8
 984              	 .cfi_offset 7,-8
 985              	 .cfi_offset 14,-4
 986 030e 00AF     	 add r7,sp,#0
 987              	.LCFI67:
 988              	 .cfi_def_cfa_register 7
  62:../../../stack/LwMesh/TDMA/services/sleep_mgr/sam4l/sleep_mgr.c **** 	ast_disable_interrupt(AST, AST_INTERRUPT_ALARM);
 989              	 .loc 9 62 0
 990 0310 0021     	 movs r1,#0
 991 0312 0448     	 ldr r0,.L67
 992 0314 044B     	 ldr r3,.L67+4
 993 0316 9847     	 blx r3
 994              	.LVL7:
  63:../../../stack/LwMesh/TDMA/services/sleep_mgr/sam4l/sleep_mgr.c **** 
  64:../../../stack/LwMesh/TDMA/services/sleep_mgr/sam4l/sleep_mgr.c **** 	/* After wake up, clear the Alarm0. */
  65:../../../stack/LwMesh/TDMA/services/sleep_mgr/sam4l/sleep_mgr.c **** 	ast_clear_interrupt_flag(AST, AST_INTERRUPT_ALARM);
 995              	 .loc 9 65 0
 996 0318 0021     	 movs r1,#0
 997 031a 0248     	 ldr r0,.L67
 998 031c 034B     	 ldr r3,.L67+8
 999 031e 9847     	 blx r3
 1000              	.LVL8:
  66:../../../stack/LwMesh/TDMA/services/sleep_mgr/sam4l/sleep_mgr.c **** }
 1001              	 .loc 9 66 0
 1002 0320 00BF     	 nop
 1003 0322 80BD     	 pop {r7,pc}
 1004              	.L68:
 1005              	 .align 2
 1006              	.L67:
 1007 0324 00080F40 	 .word 1074726912
 1008 0328 00000000 	 .word ast_disable_interrupt
 1009 032c 00000000 	 .word ast_clear_interrupt_flag
 1010              	 .cfi_endproc
 1011              	.LFE145:
 1013              	 .align 1
 1014              	 .syntax unified
 1015              	 .thumb
 1016              	 .thumb_func
 1017              	 .fpu softvfp
 1019              	config_ast:
 1020              	.LFB146:
  67:../../../stack/LwMesh/TDMA/services/sleep_mgr/sam4l/sleep_mgr.c **** 
  68:../../../stack/LwMesh/TDMA/services/sleep_mgr/sam4l/sleep_mgr.c **** /* Configures the AST for Sleep Timers */
  69:../../../stack/LwMesh/TDMA/services/sleep_mgr/sam4l/sleep_mgr.c **** static void config_ast(void)
  70:../../../stack/LwMesh/TDMA/services/sleep_mgr/sam4l/sleep_mgr.c **** {
 1021              	 .loc 9 70 0
 1022              	 .cfi_startproc
 1023              	 
 1024              	 
 1025 0330 90B5     	 push {r4,r7,lr}
 1026              	.LCFI68:
 1027              	 .cfi_def_cfa_offset 12
 1028              	 .cfi_offset 4,-12
 1029              	 .cfi_offset 7,-8
 1030              	 .cfi_offset 14,-4
 1031 0332 87B0     	 sub sp,sp,#28
 1032              	.LCFI69:
 1033              	 .cfi_def_cfa_offset 40
 1034 0334 02AF     	 add r7,sp,#8
 1035              	.LCFI70:
 1036              	 .cfi_def_cfa 7,32
  71:../../../stack/LwMesh/TDMA/services/sleep_mgr/sam4l/sleep_mgr.c **** 	struct ast_config ast_conf;
  72:../../../stack/LwMesh/TDMA/services/sleep_mgr/sam4l/sleep_mgr.c **** 
  73:../../../stack/LwMesh/TDMA/services/sleep_mgr/sam4l/sleep_mgr.c **** 	/* Enable osc32 oscillator*/
  74:../../../stack/LwMesh/TDMA/services/sleep_mgr/sam4l/sleep_mgr.c **** 	if (!osc_is_ready(OSC_ID_RC32K)) {
 1037              	 .loc 9 74 0
 1038 0336 0220     	 movs r0,#2
 1039 0338 FFF772FF 	 bl osc_is_ready
 1040 033c 0346     	 mov r3,r0
 1041 033e 83F00103 	 eor r3,r3,#1
 1042 0342 DBB2     	 uxtb r3,r3
 1043 0344 002B     	 cmp r3,#0
 1044 0346 05D0     	 beq .L70
  75:../../../stack/LwMesh/TDMA/services/sleep_mgr/sam4l/sleep_mgr.c **** 		osc_enable(OSC_ID_RC32K);
 1045              	 .loc 9 75 0
 1046 0348 0220     	 movs r0,#2
 1047 034a FFF72CFF 	 bl osc_enable
  76:../../../stack/LwMesh/TDMA/services/sleep_mgr/sam4l/sleep_mgr.c **** 		osc_wait_ready(OSC_ID_RC32K);
 1048              	 .loc 9 76 0
 1049 034e 0220     	 movs r0,#2
 1050 0350 FFF7C8FF 	 bl osc_wait_ready
 1051              	.L70:
  77:../../../stack/LwMesh/TDMA/services/sleep_mgr/sam4l/sleep_mgr.c **** 	}
  78:../../../stack/LwMesh/TDMA/services/sleep_mgr/sam4l/sleep_mgr.c **** 
  79:../../../stack/LwMesh/TDMA/services/sleep_mgr/sam4l/sleep_mgr.c **** 	/* Enable the AST */
  80:../../../stack/LwMesh/TDMA/services/sleep_mgr/sam4l/sleep_mgr.c **** 	ast_enable(AST);
 1052              	 .loc 9 80 0
 1053 0354 1348     	 ldr r0,.L71
 1054 0356 144B     	 ldr r3,.L71+4
 1055 0358 9847     	 blx r3
 1056              	.LVL9:
  81:../../../stack/LwMesh/TDMA/services/sleep_mgr/sam4l/sleep_mgr.c **** 
  82:../../../stack/LwMesh/TDMA/services/sleep_mgr/sam4l/sleep_mgr.c **** 	ast_conf.mode = AST_COUNTER_MODE;
 1057              	 .loc 9 82 0
 1058 035a 0023     	 movs r3,#0
 1059 035c 3B71     	 strb r3,[r7,#4]
  83:../../../stack/LwMesh/TDMA/services/sleep_mgr/sam4l/sleep_mgr.c **** 	ast_conf.osc_type = AST_OSC_32KHZ; /* OSC Type iSs OSC32 or RC32 */
 1060              	 .loc 9 83 0
 1061 035e 0123     	 movs r3,#1
 1062 0360 7B71     	 strb r3,[r7,#5]
  84:../../../stack/LwMesh/TDMA/services/sleep_mgr/sam4l/sleep_mgr.c **** 	ast_conf.psel = AST_PSEL_32KHZ_1HZ;
 1063              	 .loc 9 84 0
 1064 0362 0E23     	 movs r3,#14
 1065 0364 BB71     	 strb r3,[r7,#6]
  85:../../../stack/LwMesh/TDMA/services/sleep_mgr/sam4l/sleep_mgr.c **** 	ast_conf.counter = 0;
 1066              	 .loc 9 85 0
 1067 0366 0023     	 movs r3,#0
 1068 0368 BB60     	 str r3,[r7,#8]
  86:../../../stack/LwMesh/TDMA/services/sleep_mgr/sam4l/sleep_mgr.c **** 
  87:../../../stack/LwMesh/TDMA/services/sleep_mgr/sam4l/sleep_mgr.c **** 	/*
  88:../../../stack/LwMesh/TDMA/services/sleep_mgr/sam4l/sleep_mgr.c **** 	 * Using counter mode and set it to 0.
  89:../../../stack/LwMesh/TDMA/services/sleep_mgr/sam4l/sleep_mgr.c **** 	 * Initialize the AST.
  90:../../../stack/LwMesh/TDMA/services/sleep_mgr/sam4l/sleep_mgr.c **** 	 */
  91:../../../stack/LwMesh/TDMA/services/sleep_mgr/sam4l/sleep_mgr.c **** 	ast_set_config(AST, &ast_conf);
 1069              	 .loc 9 91 0
 1070 036a 3B1D     	 adds r3,r7,#4
 1071 036c 1946     	 mov r1,r3
 1072 036e 0D48     	 ldr r0,.L71
 1073 0370 0E4B     	 ldr r3,.L71+8
 1074 0372 9847     	 blx r3
 1075              	.LVL10:
  92:../../../stack/LwMesh/TDMA/services/sleep_mgr/sam4l/sleep_mgr.c **** 
  93:../../../stack/LwMesh/TDMA/services/sleep_mgr/sam4l/sleep_mgr.c **** 	/* First clear alarm status. */
  94:../../../stack/LwMesh/TDMA/services/sleep_mgr/sam4l/sleep_mgr.c **** 	ast_clear_interrupt_flag(AST, AST_INTERRUPT_ALARM);
 1076              	 .loc 9 94 0
 1077 0374 0021     	 movs r1,#0
 1078 0376 0B48     	 ldr r0,.L71
 1079 0378 0D4B     	 ldr r3,.L71+12
 1080 037a 9847     	 blx r3
 1081              	.LVL11:
  95:../../../stack/LwMesh/TDMA/services/sleep_mgr/sam4l/sleep_mgr.c **** 
  96:../../../stack/LwMesh/TDMA/services/sleep_mgr/sam4l/sleep_mgr.c **** 	/* Enable wakeup from alarm0. */
  97:../../../stack/LwMesh/TDMA/services/sleep_mgr/sam4l/sleep_mgr.c **** 	ast_enable_wakeup(AST, AST_WAKEUP_ALARM);
 1082              	 .loc 9 97 0
 1083 037c 0021     	 movs r1,#0
 1084 037e 0948     	 ldr r0,.L71
 1085 0380 0C4B     	 ldr r3,.L71+16
 1086 0382 9847     	 blx r3
 1087              	.LVL12:
  98:../../../stack/LwMesh/TDMA/services/sleep_mgr/sam4l/sleep_mgr.c **** 
  99:../../../stack/LwMesh/TDMA/services/sleep_mgr/sam4l/sleep_mgr.c **** 	/* Set callback for alarm0. */
 100:../../../stack/LwMesh/TDMA/services/sleep_mgr/sam4l/sleep_mgr.c **** 	ast_set_callback(AST, AST_INTERRUPT_ALARM, ast_alarm_callback,
 1088              	 .loc 9 100 0
 1089 0384 0123     	 movs r3,#1
 1090 0386 0093     	 str r3,[sp]
 1091 0388 2723     	 movs r3,#39
 1092 038a 0B4A     	 ldr r2,.L71+20
 1093 038c 0021     	 movs r1,#0
 1094 038e 0548     	 ldr r0,.L71
 1095 0390 0A4C     	 ldr r4,.L71+24
 1096 0392 A047     	 blx r4
 1097              	.LVL13:
 101:../../../stack/LwMesh/TDMA/services/sleep_mgr/sam4l/sleep_mgr.c **** 			AST_ALARM_IRQn, 1);
 102:../../../stack/LwMesh/TDMA/services/sleep_mgr/sam4l/sleep_mgr.c **** 
 103:../../../stack/LwMesh/TDMA/services/sleep_mgr/sam4l/sleep_mgr.c **** 	/* Disable first interrupt for alarm0. */
 104:../../../stack/LwMesh/TDMA/services/sleep_mgr/sam4l/sleep_mgr.c **** 	ast_disable_interrupt(AST, AST_INTERRUPT_ALARM);
 1098              	 .loc 9 104 0
 1099 0394 0021     	 movs r1,#0
 1100 0396 0348     	 ldr r0,.L71
 1101 0398 094B     	 ldr r3,.L71+28
 1102 039a 9847     	 blx r3
 1103              	.LVL14:
 105:../../../stack/LwMesh/TDMA/services/sleep_mgr/sam4l/sleep_mgr.c **** }
 1104              	 .loc 9 105 0
 1105 039c 00BF     	 nop
 1106 039e 1437     	 adds r7,r7,#20
 1107              	.LCFI71:
 1108              	 .cfi_def_cfa_offset 12
 1109 03a0 BD46     	 mov sp,r7
 1110              	.LCFI72:
 1111              	 .cfi_def_cfa_register 13
 1112              	 
 1113 03a2 90BD     	 pop {r4,r7,pc}
 1114              	.L72:
 1115              	 .align 2
 1116              	.L71:
 1117 03a4 00080F40 	 .word 1074726912
 1118 03a8 00000000 	 .word ast_enable
 1119 03ac 00000000 	 .word ast_set_config
 1120 03b0 00000000 	 .word ast_clear_interrupt_flag
 1121 03b4 00000000 	 .word ast_enable_wakeup
 1122 03b8 00000000 	 .word ast_alarm_callback
 1123 03bc 00000000 	 .word ast_set_callback
 1124 03c0 00000000 	 .word ast_disable_interrupt
 1125              	 .cfi_endproc
 1126              	.LFE146:
 1128              	 .align 1
 1129              	 .global sm_init
 1130              	 .syntax unified
 1131              	 .thumb
 1132              	 .thumb_func
 1133              	 .fpu softvfp
 1135              	sm_init:
 1136              	.LFB147:
 106:../../../stack/LwMesh/TDMA/services/sleep_mgr/sam4l/sleep_mgr.c **** 
 107:../../../stack/LwMesh/TDMA/services/sleep_mgr/sam4l/sleep_mgr.c **** /**
 108:../../../stack/LwMesh/TDMA/services/sleep_mgr/sam4l/sleep_mgr.c ****  * \brief This function Initializes the Sleep functions
 109:../../../stack/LwMesh/TDMA/services/sleep_mgr/sam4l/sleep_mgr.c ****  */
 110:../../../stack/LwMesh/TDMA/services/sleep_mgr/sam4l/sleep_mgr.c **** void sm_init(void)
 111:../../../stack/LwMesh/TDMA/services/sleep_mgr/sam4l/sleep_mgr.c **** {
 1137              	 .loc 9 111 0
 1138              	 .cfi_startproc
 1139              	 
 1140              	 
 1141 03c4 80B5     	 push {r7,lr}
 1142              	.LCFI73:
 1143              	 .cfi_def_cfa_offset 8
 1144              	 .cfi_offset 7,-8
 1145              	 .cfi_offset 14,-4
 1146 03c6 82B0     	 sub sp,sp,#8
 1147              	.LCFI74:
 1148              	 .cfi_def_cfa_offset 16
 1149 03c8 00AF     	 add r7,sp,#0
 1150              	.LCFI75:
 1151              	 .cfi_def_cfa_register 7
 112:../../../stack/LwMesh/TDMA/services/sleep_mgr/sam4l/sleep_mgr.c **** 	/* Set the sleep mode to initially lock. */
 113:../../../stack/LwMesh/TDMA/services/sleep_mgr/sam4l/sleep_mgr.c **** 	enum sleepmgr_mode mode = SLEEPMGR_RET;
 1152              	 .loc 9 113 0
 1153 03ca 0623     	 movs r3,#6
 1154 03cc FB71     	 strb r3,[r7,#7]
 114:../../../stack/LwMesh/TDMA/services/sleep_mgr/sam4l/sleep_mgr.c **** 
 115:../../../stack/LwMesh/TDMA/services/sleep_mgr/sam4l/sleep_mgr.c **** 	bpm_set_clk32_source(BPM, BPM_CLK32_SOURCE_RC32K);
 1155              	 .loc 9 115 0
 1156 03ce 0121     	 movs r1,#1
 1157 03d0 0948     	 ldr r0,.L74
 1158 03d2 0A4B     	 ldr r3,.L74+4
 1159 03d4 9847     	 blx r3
 1160              	.LVL15:
 116:../../../stack/LwMesh/TDMA/services/sleep_mgr/sam4l/sleep_mgr.c **** 
 117:../../../stack/LwMesh/TDMA/services/sleep_mgr/sam4l/sleep_mgr.c **** 	config_ast();
 1161              	 .loc 9 117 0
 1162 03d6 FFF7ABFF 	 bl config_ast
 118:../../../stack/LwMesh/TDMA/services/sleep_mgr/sam4l/sleep_mgr.c **** 
 119:../../../stack/LwMesh/TDMA/services/sleep_mgr/sam4l/sleep_mgr.c **** 	/* AST can wakeup the device */
 120:../../../stack/LwMesh/TDMA/services/sleep_mgr/sam4l/sleep_mgr.c **** 	bpm_enable_wakeup_source(BPM, (1 << BPM_BKUPWEN_AST));
 1163              	 .loc 9 120 0
 1164 03da 0221     	 movs r1,#2
 1165 03dc 0648     	 ldr r0,.L74
 1166 03de 084B     	 ldr r3,.L74+8
 1167 03e0 9847     	 blx r3
 1168              	.LVL16:
 121:../../../stack/LwMesh/TDMA/services/sleep_mgr/sam4l/sleep_mgr.c **** 
 122:../../../stack/LwMesh/TDMA/services/sleep_mgr/sam4l/sleep_mgr.c **** 	/* Initialize the sleep manager, lock initial mode. */
 123:../../../stack/LwMesh/TDMA/services/sleep_mgr/sam4l/sleep_mgr.c **** 	sleepmgr_init();
 1169              	 .loc 9 123 0
 1170 03e2 FFF769FE 	 bl sleepmgr_init
 124:../../../stack/LwMesh/TDMA/services/sleep_mgr/sam4l/sleep_mgr.c **** 	sleepmgr_lock_mode(mode);
 1171              	 .loc 9 124 0
 1172 03e6 FB79     	 ldrb r3,[r7,#7]
 1173 03e8 1846     	 mov r0,r3
 1174 03ea FFF77FFE 	 bl sleepmgr_lock_mode
 125:../../../stack/LwMesh/TDMA/services/sleep_mgr/sam4l/sleep_mgr.c **** }
 1175              	 .loc 9 125 0
 1176 03ee 00BF     	 nop
 1177 03f0 0837     	 adds r7,r7,#8
 1178              	.LCFI76:
 1179              	 .cfi_def_cfa_offset 8
 1180 03f2 BD46     	 mov sp,r7
 1181              	.LCFI77:
 1182              	 .cfi_def_cfa_register 13
 1183              	 
 1184 03f4 80BD     	 pop {r7,pc}
 1185              	.L75:
 1186 03f6 00BF     	 .align 2
 1187              	.L74:
 1188 03f8 00000F40 	 .word 1074724864
 1189 03fc 00000000 	 .word bpm_set_clk32_source
 1190 0400 00000000 	 .word bpm_enable_wakeup_source
 1191              	 .cfi_endproc
 1192              	.LFE147:
 1194              	 .align 1
 1195              	 .global sm_sleep
 1196              	 .syntax unified
 1197              	 .thumb
 1198              	 .thumb_func
 1199              	 .fpu softvfp
 1201              	sm_sleep:
 1202              	.LFB148:
 126:../../../stack/LwMesh/TDMA/services/sleep_mgr/sam4l/sleep_mgr.c **** 
 127:../../../stack/LwMesh/TDMA/services/sleep_mgr/sam4l/sleep_mgr.c **** /**
 128:../../../stack/LwMesh/TDMA/services/sleep_mgr/sam4l/sleep_mgr.c ****  * \brief This function puts the  device to sleep
 129:../../../stack/LwMesh/TDMA/services/sleep_mgr/sam4l/sleep_mgr.c ****  */
 130:../../../stack/LwMesh/TDMA/services/sleep_mgr/sam4l/sleep_mgr.c **** void sm_sleep(uint32_t interval)
 131:../../../stack/LwMesh/TDMA/services/sleep_mgr/sam4l/sleep_mgr.c **** {
 1203              	 .loc 9 131 0
 1204              	 .cfi_startproc
 1205              	 
 1206              	 
 1207 0404 80B5     	 push {r7,lr}
 1208              	.LCFI78:
 1209              	 .cfi_def_cfa_offset 8
 1210              	 .cfi_offset 7,-8
 1211              	 .cfi_offset 14,-4
 1212 0406 82B0     	 sub sp,sp,#8
 1213              	.LCFI79:
 1214              	 .cfi_def_cfa_offset 16
 1215 0408 00AF     	 add r7,sp,#0
 1216              	.LCFI80:
 1217              	 .cfi_def_cfa_register 7
 1218 040a 7860     	 str r0,[r7,#4]
 132:../../../stack/LwMesh/TDMA/services/sleep_mgr/sam4l/sleep_mgr.c **** 	ast_counter = ast_read_counter_value(AST);
 1219              	 .loc 9 132 0
 1220 040c 0D48     	 ldr r0,.L77
 1221 040e FFF7BFFE 	 bl ast_read_counter_value
 1222 0412 0246     	 mov r2,r0
 1223 0414 0C4B     	 ldr r3,.L77+4
 1224 0416 1A60     	 str r2,[r3]
 133:../../../stack/LwMesh/TDMA/services/sleep_mgr/sam4l/sleep_mgr.c **** 	ast_alarm = ast_counter + interval;
 1225              	 .loc 9 133 0
 1226 0418 0B4B     	 ldr r3,.L77+4
 1227 041a 1A68     	 ldr r2,[r3]
 1228 041c 7B68     	 ldr r3,[r7,#4]
 1229 041e 1344     	 add r3,r3,r2
 1230 0420 0A4A     	 ldr r2,.L77+8
 1231 0422 1360     	 str r3,[r2]
 134:../../../stack/LwMesh/TDMA/services/sleep_mgr/sam4l/sleep_mgr.c **** 	ast_write_alarm0_value(AST, ast_alarm);
 1232              	 .loc 9 134 0
 1233 0424 094B     	 ldr r3,.L77+8
 1234 0426 1B68     	 ldr r3,[r3]
 1235 0428 1946     	 mov r1,r3
 1236 042a 0648     	 ldr r0,.L77
 1237 042c 084B     	 ldr r3,.L77+12
 1238 042e 9847     	 blx r3
 1239              	.LVL17:
 135:../../../stack/LwMesh/TDMA/services/sleep_mgr/sam4l/sleep_mgr.c **** 
 136:../../../stack/LwMesh/TDMA/services/sleep_mgr/sam4l/sleep_mgr.c **** 	ast_enable_interrupt(AST, AST_INTERRUPT_ALARM);
 1240              	 .loc 9 136 0
 1241 0430 0021     	 movs r1,#0
 1242 0432 0448     	 ldr r0,.L77
 1243 0434 074B     	 ldr r3,.L77+16
 1244 0436 9847     	 blx r3
 1245              	.LVL18:
 137:../../../stack/LwMesh/TDMA/services/sleep_mgr/sam4l/sleep_mgr.c **** 	sleepmgr_enter_sleep();
 1246              	 .loc 9 137 0
 1247 0438 FFF78AFE 	 bl sleepmgr_enter_sleep
 138:../../../stack/LwMesh/TDMA/services/sleep_mgr/sam4l/sleep_mgr.c **** }
 1248              	 .loc 9 138 0
 1249 043c 00BF     	 nop
 1250 043e 0837     	 adds r7,r7,#8
 1251              	.LCFI81:
 1252              	 .cfi_def_cfa_offset 8
 1253 0440 BD46     	 mov sp,r7
 1254              	.LCFI82:
 1255              	 .cfi_def_cfa_register 13
 1256              	 
 1257 0442 80BD     	 pop {r7,pc}
 1258              	.L78:
 1259              	 .align 2
 1260              	.L77:
 1261 0444 00080F40 	 .word 1074726912
 1262 0448 00000000 	 .word ast_counter
 1263 044c 00000000 	 .word ast_alarm
 1264 0450 00000000 	 .word ast_write_alarm0_value
 1265 0454 00000000 	 .word ast_enable_interrupt
 1266              	 .cfi_endproc
 1267              	.LFE148:
 1269              	.Letext0:
 1270              	 .file 10 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\arm\\arm-gnu-toolchain\\arm-none-eabi\\include\\machine\\_default_types.h"
 1271              	 .file 11 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\arm\\arm-gnu-toolchain\\arm-none-eabi\\include\\sys\\_stdint.h"
 1272              	 .file 12 "../../../platform/sam/utils/cmsis/sam4l/include/sam4lc4b.h"
 1273              	 .file 13 "../../../platform/thirdparty/CMSIS/include/core_cm4.h"
 1274              	 .file 14 "../../../platform/sam/utils/cmsis/sam4l/source/templates/system_sam4l.h"
 1275              	 .file 15 "../../../platform/sam/utils/cmsis/sam4l/include/component/component_ast.h"
 1276              	 .file 16 "../../../platform/sam/utils/cmsis/sam4l/include/component/component_bpm.h"
 1277              	 .file 17 "../../../platform/sam/utils/cmsis/sam4l/include/component/component_bscif.h"
 1278              	 .file 18 "../../../platform/sam/utils/cmsis/sam4l/include/component/component_scif.h"
 1279              	 .file 19 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\arm\\arm-gnu-toolchain\\arm-none-eabi\\include\\sys\\lock.h"
 1280              	 .file 20 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\arm\\arm-gnu-toolchain\\arm-none-eabi\\include\\sys\\_types.h"
 1281              	 .file 21 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\arm\\arm-gnu-toolchain\\lib\\gcc\\arm-none-eabi\\6.3.1\\include\\stddef.h"
 1282              	 .file 22 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\arm\\arm-gnu-toolchain\\arm-none-eabi\\include\\sys\\reent.h"
 1283              	 .file 23 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\arm\\arm-gnu-toolchain\\arm-none-eabi\\include\\stdlib.h"
 1284              	 .file 24 "../../../platform/sam/utils/compiler.h"
 1285              	 .file 25 "../../../platform/common/services/usb/usb_protocol.h"
 1286              	 .file 26 "../../../platform/common/services/usb/udc/udi.h"
 1287              	 .file 27 "../../../platform/common/services/usb/udc/udc_desc.h"
 1288              	 .file 28 "../../../platform/common/services/usb/udc/udd.h"
 1289              	 .file 29 "../../../platform/common/services/usb/class/cdc/device/udi_cdc.h"
 1290              	 .file 30 "../../../platform/common/utils/stdio/stdio_usb/stdio_usb.h"
 1291              	 .file 31 "../../../platform/sam/drivers/bpm/bpm.h"
DEFINED SYMBOLS
                            *ABS*:00000000 sleep_mgr.c
    {standard input}:16     .bss.cpu_irq_critical_section_counter:00000000 $d
    {standard input}:19     .bss.cpu_irq_critical_section_counter:00000000 cpu_irq_critical_section_counter
    {standard input}:24     .bss.cpu_irq_prev_interrupt_state:00000000 cpu_irq_prev_interrupt_state
    {standard input}:25     .bss.cpu_irq_prev_interrupt_state:00000000 $d
    {standard input}:27     .text:00000000 $t
    {standard input}:33     .text:00000000 cpu_irq_save
    {standard input}:119    .text:00000034 $d
    {standard input}:123    .text:00000038 $t
    {standard input}:129    .text:00000038 cpu_irq_is_enabled_flags
    {standard input}:177    .text:00000056 cpu_irq_restore
    {standard input}:241    .text:00000080 $d
    {standard input}:245    .text:00000084 $t
    {standard input}:251    .text:00000084 sleepmgr_sleep
    {standard input}:317    .text:000000ac $d
    {standard input}:323    .text:000000b8 $t
    {standard input}:329    .text:000000b8 sleepmgr_init
    {standard input}:387    .text:000000e8 $d
    {standard input}:391    .text:000000ec $t
    {standard input}:397    .text:000000ec sleepmgr_lock_mode
    {standard input}:443    .text:00000118 $d
    {standard input}:447    .text:0000011c $t
    {standard input}:453    .text:0000011c sleepmgr_get_sleep_mode
    {standard input}:512    .text:0000014c $d
    {standard input}:516    .text:00000150 $t
    {standard input}:522    .text:00000150 sleepmgr_enter_sleep
    {standard input}:619    .text:0000018c $d
    {standard input}:623    .text:00000190 $t
    {standard input}:629    .text:00000190 ast_read_counter_value
    {standard input}:674    .text:000001a6 osc_enable
    {standard input}:702    .text:000001bc $d
    {standard input}:709    .text:000001d8 $t
    {standard input}:769    .text:00000208 $d
    {standard input}:778    .text:00000220 $t
    {standard input}:784    .text:00000220 osc_is_ready
    {standard input}:811    .text:00000238 $d
    {standard input}:818    .text:00000254 $t
    {standard input}:910    .text:000002dc $d
    {standard input}:915    .text:000002e4 $t
    {standard input}:921    .text:000002e4 osc_wait_ready
                            *COM*:00000004 ast_alarm
                            *COM*:00000004 ast_counter
    {standard input}:974    .text:0000030c ast_alarm_callback
    {standard input}:1007   .text:00000324 $d
    {standard input}:1013   .text:00000330 $t
    {standard input}:1019   .text:00000330 config_ast
    {standard input}:1117   .text:000003a4 $d
    {standard input}:1128   .text:000003c4 $t
    {standard input}:1135   .text:000003c4 sm_init
    {standard input}:1188   .text:000003f8 $d
    {standard input}:1194   .text:00000404 $t
    {standard input}:1201   .text:00000404 sm_sleep
    {standard input}:1261   .text:00000444 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
g_interrupt_enabled
bpm_sleep
sleepmgr_locks
osc_priv_enable_osc0
osc_priv_enable_osc32
osc_priv_enable_rc32k
osc_priv_enable_rc80m
osc_priv_enable_rcfast
osc_priv_enable_rc1m
ast_disable_interrupt
ast_clear_interrupt_flag
ast_enable
ast_set_config
ast_enable_wakeup
ast_set_callback
bpm_set_clk32_source
bpm_enable_wakeup_source
ast_write_alarm0_value
ast_enable_interrupt
